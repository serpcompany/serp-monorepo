[
  {
    "owner": "flutter",
    "repo": "packages",
    "content": "TITLE: Configuring Platform-Specific WebView Features\nDESCRIPTION: Shows how to configure platform-specific features for both iOS/macOS and Android WebView implementations using conditional platform checks.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/webview_flutter/webview_flutter/README.md#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nlate final PlatformWebViewControllerCreationParams params;\nif (WebViewPlatform.instance is WebKitWebViewPlatform) {\n  params = WebKitWebViewControllerCreationParams(\n    allowsInlineMediaPlayback: true,\n    mediaTypesRequiringUserAction: const <PlaybackMediaTypes>{},\n  );\n} else {\n  params = const PlatformWebViewControllerCreationParams();\n}\n\nfinal WebViewController controller =\n    WebViewController.fromPlatformCreationParams(params);\n// ···\nif (controller.platform is AndroidWebViewController) {\n  AndroidWebViewController.enableDebugging(true);\n  (controller.platform as AndroidWebViewController)\n      .setMediaPlaybackRequiresUserGesture(false);\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Multiple Files with Type Filtering in Flutter\nDESCRIPTION: Dart code demonstrating how to open multiple files simultaneously with separate type groups for JPEG and PNG formats. Uses multiple XTypeGroup instances to specify different file type categories.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector/README.md#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nconst XTypeGroup jpgsTypeGroup = XTypeGroup(\n  label: 'JPEGs',\n  extensions: <String>['jpg', 'jpeg'],\n);\nconst XTypeGroup pngTypeGroup = XTypeGroup(\n  label: 'PNGs',\n  extensions: <String>['png'],\n);\nfinal List<XFile> files = await openFiles(acceptedTypeGroups: <XTypeGroup>[\n  jpgsTypeGroup,\n  pngTypeGroup,\n]);\n```\n\n----------------------------------------\n\nTITLE: Using path_provider to Access Common Directories in Dart\nDESCRIPTION: Example demonstrating how to access temporary, application documents, and downloads directories using path_provider. These methods return Directory objects that represent filesystem locations, allowing Flutter apps to store and retrieve files.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/path_provider/path_provider/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal Directory tempDir = await getTemporaryDirectory();\n\nfinal Directory appDocumentsDir = await getApplicationDocumentsDirectory();\n\nfinal Directory? downloadsDir = await getDownloadsDirectory();\n```\n\n----------------------------------------\n\nTITLE: Handling Purchase Updates in Flutter IAP Implementation\nDESCRIPTION: Implementation of a handler for purchase updates that processes different purchase states (pending, error, purchased, or restored). The handler shows appropriate UI, verifies purchases, delivers products, and completes the purchase transaction.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/in_app_purchase/in_app_purchase/README.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvoid _listenToPurchaseUpdated(List<PurchaseDetails> purchaseDetailsList) {\n  purchaseDetailsList.forEach((PurchaseDetails purchaseDetails) async {\n    if (purchaseDetails.status == PurchaseStatus.pending) {\n      _showPendingUI();\n    } else {\n      if (purchaseDetails.status == PurchaseStatus.error) {\n        _handleError(purchaseDetails.error!);\n      } else if (purchaseDetails.status == PurchaseStatus.purchased ||\n                 purchaseDetails.status == PurchaseStatus.restored) {\n        bool valid = await _verifyPurchase(purchaseDetails);\n        if (valid) {\n          _deliverProduct(purchaseDetails);\n        } else {\n          _handleInvalidPurchase(purchaseDetails);\n        }\n      }\n      if (purchaseDetails.pendingCompletePurchase) {\n        await InAppPurchase.instance\n            .completePurchase(purchaseDetails);\n      }\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Camera and Microphone Usage Descriptions in iOS Info.plist\nDESCRIPTION: XML snippet for adding camera and microphone usage descriptions to the iOS Info.plist file. This is required for camera access on iOS devices.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/camera/camera/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSCameraUsageDescription</key>\n<string>your usage description here</string>\n<key>NSMicrophoneUsageDescription</key>\n<string>your usage description here</string>\n```\n\n----------------------------------------\n\nTITLE: Implementing AdaptiveScaffold in Flutter Application\nDESCRIPTION: Example of implementing AdaptiveScaffold with various breakpoints, navigation destinations, and responsive body layouts. Demonstrates how to configure different layouts for various screen sizes.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_adaptive_scaffold/README.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  // Define the children to display within the body at different breakpoints.\n  final List<Widget> children = <Widget>[\n    for (int i = 0; i < 10; i++)\n      Padding(\n        padding: const EdgeInsets.all(8.0),\n        child: Container(\n          color: const Color.fromARGB(255, 255, 201, 197),\n          height: 400,\n        ),\n      )\n  ];\n  return AdaptiveScaffold(\n    // An option to override the default transition duration.\n    transitionDuration: Duration(milliseconds: _transitionDuration),\n    // An option to override the default breakpoints used for small, medium,\n    // mediumLarge, large, and extraLarge.\n    smallBreakpoint: const Breakpoint(endWidth: 700),\n    mediumBreakpoint: const Breakpoint(beginWidth: 700, endWidth: 1000),\n    mediumLargeBreakpoint: const Breakpoint(beginWidth: 1000, endWidth: 1200),\n    largeBreakpoint: const Breakpoint(beginWidth: 1200, endWidth: 1600),\n    extraLargeBreakpoint: const Breakpoint(beginWidth: 1600),\n    useDrawer: false,\n    selectedIndex: _selectedTab,\n    onSelectedIndexChange: (int index) {\n      setState(() {\n        _selectedTab = index;\n      });\n    },\n    destinations: const <NavigationDestination>[\n      NavigationDestination(\n        icon: Icon(Icons.inbox_outlined),\n        selectedIcon: Icon(Icons.inbox),\n        label: 'Inbox',\n      ),\n      NavigationDestination(\n        icon: Icon(Icons.article_outlined),\n        selectedIcon: Icon(Icons.article),\n        label: 'Articles',\n      ),\n      NavigationDestination(\n        icon: Icon(Icons.chat_outlined),\n        selectedIcon: Icon(Icons.chat),\n        label: 'Chat',\n      ),\n      NavigationDestination(\n        icon: Icon(Icons.video_call_outlined),\n        selectedIcon: Icon(Icons.video_call),\n        label: 'Video',\n      ),\n      NavigationDestination(\n        icon: Icon(Icons.home_outlined),\n        selectedIcon: Icon(Icons.home),\n        label: 'Inbox',\n      ),\n    ],\n    smallBody: (_) => ListView.builder(\n      itemCount: children.length,\n      itemBuilder: (_, int idx) => children[idx],\n    ),\n    body: (_) => GridView.count(crossAxisCount: 2, children: children),\n    mediumLargeBody: (_) =>\n        GridView.count(crossAxisCount: 3, children: children),\n    largeBody: (_) => GridView.count(crossAxisCount: 4, children: children),\n    extraLargeBody: (_) =>\n        GridView.count(crossAxisCount: 5, children: children),\n    // Define a default secondaryBody.\n    // Override the default secondaryBody during the smallBreakpoint to be\n    // empty. Must use AdaptiveScaffold.emptyBuilder to ensure it is properly\n    // overridden.\n    smallSecondaryBody: AdaptiveScaffold.emptyBuilder,\n    secondaryBody: (_) => Container(\n      color: const Color.fromARGB(255, 234, 158, 192),\n    ),\n    mediumLargeSecondaryBody: (_) => Container(\n      color: const Color.fromARGB(255, 234, 158, 192),\n    ),\n    largeSecondaryBody: (_) => Container(\n      color: const Color.fromARGB(255, 234, 158, 192),\n    ),\n    extraLargeSecondaryBody: (_) => Container(\n      color: const Color.fromARGB(255, 234, 158, 192),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies and Navigation Delegate in WebView Flutter\nDESCRIPTION: Updated methods for setting cookies and navigation delegate in the WebView Flutter package. This includes using WebViewCookieManager for cookie management and setting various navigation callbacks.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/webview_flutter/webview_flutter/README.md#2025-04-22_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nWebViewCookieManager.setCookie\nWebViewController.setNavigationDelegate\n```\n\n----------------------------------------\n\nTITLE: Implementing Video Playback in Flutter\nDESCRIPTION: This Dart code demonstrates how to create a basic video player application using the video_player plugin. It includes initializing the video controller, building the UI with play/pause functionality, and proper resource disposal.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/video_player/video_player/README.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:video_player/video_player.dart';\n\nvoid main() => runApp(const VideoApp());\n\n/// Stateful widget to fetch and then display video content.\nclass VideoApp extends StatefulWidget {\n  const VideoApp({super.key});\n\n  @override\n  _VideoAppState createState() => _VideoAppState();\n}\n\nclass _VideoAppState extends State<VideoApp> {\n  late VideoPlayerController _controller;\n\n  @override\n  void initState() {\n    super.initState();\n    _controller = VideoPlayerController.networkUrl(Uri.parse(\n        'https://flutter.github.io/assets-for-api-docs/assets/videos/bee.mp4'))\n      ..initialize().then((_) {\n        // Ensure the first frame is shown after the video is initialized, even before the play button has been pressed.\n        setState(() {});\n      });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Video Demo',\n      home: Scaffold(\n        body: Center(\n          child: _controller.value.isInitialized\n              ? AspectRatio(\n                  aspectRatio: _controller.value.aspectRatio,\n                  child: VideoPlayer(_controller),\n                )\n              : Container(),\n        ),\n        floatingActionButton: FloatingActionButton(\n          onPressed: () {\n            setState(() {\n              _controller.value.isPlaying\n                  ? _controller.pause()\n                  : _controller.play();\n            });\n          },\n          child: Icon(\n            _controller.value.isPlaying ? Icons.pause : Icons.play_arrow,\n          ),\n        ),\n      ),\n    );\n  }\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Data with SharedPreferences in Dart\nDESCRIPTION: This snippet illustrates how to write various data types (integer, boolean, double, string, and string list) using SharedPreferences in Flutter.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences/README.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// Obtain shared preferences.\nfinal SharedPreferences prefs = await SharedPreferences.getInstance();\n\n// Save an integer value to 'counter' key.\nawait prefs.setInt('counter', 10);\n// Save an boolean value to 'repeat' key.\nawait prefs.setBool('repeat', true);\n// Save an double value to 'decimal' key.\nawait prefs.setDouble('decimal', 1.5);\n// Save an String value to 'action' key.\nawait prefs.setString('action', 'Start');\n// Save an list of strings to 'items' key.\nawait prefs.setStringList('items', <String>['Earth', 'Moon', 'Sun']);\n```\n\n----------------------------------------\n\nTITLE: Configuring StatefulShellRoute Branches in GoRouter for Dart\nDESCRIPTION: Shows how to configure branches for a StatefulShellRoute in GoRouter. Each branch maintains its own navigation state, which is preserved when switching between tabs or sections of the app.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/doc/configuration.md#2025-04-22_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nbranches: <StatefulShellBranch>[\n  // The route branch for the first tab of the bottom navigation bar.\n  StatefulShellBranch(\n    navigatorKey: _sectionANavigatorKey,\n    routes: <RouteBase>[\n      GoRoute(\n        // The screen to display as the root in the first tab of the\n        // bottom navigation bar.\n        path: '/a',\n        builder: (BuildContext context, GoRouterState state) =>\n            const RootScreen(label: 'A', detailsPath: '/a/details'),\n        routes: <RouteBase>[\n          // The details screen to display stacked on navigator of the\n          // first tab. This will cover screen A but not the application\n          // shell (bottom navigation bar).\n          GoRoute(\n            path: 'details',\n            builder: (BuildContext context, GoRouterState state) =>\n                const DetailsScreen(label: 'A'),\n          ),\n        ],\n      ),\n    ],\n    // To enable preloading of the initial locations of branches, pass\n    // 'true' for the parameter `preload` (false is default).\n  ),\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Navigation with ShellRoute in GoRouter for Dart\nDESCRIPTION: Shows how to use ShellRoute to implement persistent UI elements like a bottom navigation bar. The shell route maintains UI elements across route changes while the child displays different content.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/doc/configuration.md#2025-04-22_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nShellRoute(\n  builder:\n      (BuildContext context, GoRouterState state, Widget child) {\n    return Scaffold(\n      body: child,\n      /* ... */\n      bottomNavigationBar: BottomNavigationBar(\n      /* ... */\n      ),\n    );\n  },\n  routes: <RouteBase>[\n    GoRoute(\n      path: 'details',\n      builder: (BuildContext context, GoRouterState state) {\n        return const DetailsScreen();\n      },\n    ),\n  ],\n),\n```\n\n----------------------------------------\n\nTITLE: Basic URL Launching Implementation in Flutter\nDESCRIPTION: Shows how to implement basic URL launching functionality using the url_launcher package. The example demonstrates launching a URL to the Flutter homepage when a button is pressed.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:url_launcher/url_launcher.dart';\n\nfinal Uri _url = Uri.parse('https://flutter.dev');\n\nvoid main() => runApp(\n      const MaterialApp(\n        home: Material(\n          child: Center(\n            child: ElevatedButton(\n              onPressed: _launchUrl,\n              child: Text('Show Flutter homepage'),\n            ),\n          ),\n        ),\n      ),\n    );\n\nFuture<void> _launchUrl() async {\n  if (!await launchUrl(_url)) {\n    throw Exception('Could not launch $_url');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Route with Default Query Parameter in Dart\nDESCRIPTION: Shows how to define a route with a non-nullable query parameter that has a default value.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router_builder/README.md#2025-04-22_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n@TypedGoRoute<MyRoute>(path: '/my-route')\nclass MyRoute extends GoRouteData {\n  MyRoute({this.queryParameter = 'defaultValue'});\n  final String queryParameter;\n\n  @override\n  Widget build(BuildContext context, GoRouterState state) {\n    return MyScreen(queryParameter: queryParameter);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Authentication with Biometrics or Device PIN in Dart\nDESCRIPTION: This snippet shows how to authenticate a user using biometrics or device PIN/pattern/passcode with the local_auth plugin.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth/README.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\ntry {\n  final bool didAuthenticate = await auth.authenticate(\n      localizedReason: 'Please authenticate to show account balance');\n  // ···\n} on PlatformException {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Transitions in GoRouter (Dart)\nDESCRIPTION: This code shows how to create custom transitions by overriding the buildPage method in a GoRouteData subclass. It uses a CustomTransitionPage to implement a rotation transition effect.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router_builder/README.md#2025-04-22_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nclass FancyRoute extends GoRouteData {\n  @override\n  CustomTransitionPage<void> buildPage(\n    BuildContext context,\n    GoRouterState state,\n  ) {\n    return CustomTransitionPage<void>(\n        key: state.pageKey,\n        child: const MyPage(),\n        transitionsBuilder: (BuildContext context, Animation<double> animation,\n            Animation<double> secondaryAnimation, Widget child) {\n          return RotationTransition(turns: animation, child: child);\n        });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Product Details for In-App Purchases in Flutter\nDESCRIPTION: Queries the store for details about products that can be purchased. The code fetches product information based on a set of product IDs and handles cases where products might not be found.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/in_app_purchase/in_app_purchase/README.md#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// Set literals require Dart 2.2. Alternatively, use\n// `Set<String> _kIds = <String>['product1', 'product2'].toSet()`.\nconst Set<String> _kIds = <String>{'product1', 'product2'};\nfinal ProductDetailsResponse response =\n    await InAppPurchase.instance.queryProductDetails(_kIds);\nif (response.notFoundIDs.isNotEmpty) {\n  // Handle the error.\n}\nList<ProductDetails> products = response.productDetails;\n```\n\n----------------------------------------\n\nTITLE: Adding JavaScript Console Message Interception in Flutter WebView\nDESCRIPTION: Adds support to register a callback to intercept messages written to the JavaScript console using PlatformWebViewController.setOnConsoleMessage in version 2.6.0.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/webview_flutter/webview_flutter_platform_interface/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.6.0\n\n* Adds support to register a callback to intercept messages that are written to\n  the JavaScript console. See `PlatformWebViewController.setOnConsoleMessage`.\n```\n\n----------------------------------------\n\nTITLE: Waiting for a Returned Value After Navigation in Dart\nDESCRIPTION: Shows how to push a route and wait for a value to be returned using async/await.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/doc/navigation.md#2025-04-22_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nonTap: () async {\n  final bool? result = await context.push<bool>('/page2');\n  if(result ?? false)...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Image Picker to Access Media Files\nDESCRIPTION: Demonstrates various ways to use the ImagePicker to pick images and videos from gallery or capture them with camera. Shows examples for picking single or multiple media files.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker/README.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal ImagePicker picker = ImagePicker();\n// Pick an image.\nfinal XFile? image = await picker.pickImage(source: ImageSource.gallery);\n// Capture a photo.\nfinal XFile? photo = await picker.pickImage(source: ImageSource.camera);\n// Pick a video.\nfinal XFile? galleryVideo =\n    await picker.pickVideo(source: ImageSource.gallery);\n// Capture a video.\nfinal XFile? cameraVideo = await picker.pickVideo(source: ImageSource.camera);\n// Pick multiple images.\nfinal List<XFile> images = await picker.pickMultiImage();\n// Pick singe image or video.\nfinal XFile? media = await picker.pickMedia();\n// Pick multiple images and videos.\nfinal List<XFile> medias = await picker.pickMultipleMedia();\n```\n\n----------------------------------------\n\nTITLE: Configuring GoRouter with Basic Routes in Flutter\nDESCRIPTION: Creates a GoRouter instance with a simple route configuration for the home screen. This snippet demonstrates the basic structure for defining routes in a Flutter application using go_router.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/doc/get-started.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:go_router/go_router.dart';\n\n// GoRouter configuration\nfinal _router = GoRouter(\n  routes: [\n    GoRoute(\n      path: '/',\n      builder: (context, state) => HomeScreen(),\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Path Parameters in GoRouter Routes in Dart\nDESCRIPTION: Shows how to access path parameters from the GoRouterState object within a route builder. The parameter value is retrieved using the pathParameters map.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/doc/configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nGoRoute(\n  path: '/users/:userId',\n  builder: (context, state) => const UserScreen(id: state.pathParameters['userId']),\n),\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Shell for StatefulShellRoute in Dart\nDESCRIPTION: Shows how to implement a custom shell widget that uses the StatefulNavigationShell. The shell handles branch switching and displays the appropriate UI for the current navigation state.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/doc/configuration.md#2025-04-22_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    // The StatefulNavigationShell from the associated StatefulShellRoute is\n    // directly passed as the body of the Scaffold.\n    body: navigationShell,\n    bottomNavigationBar: BottomNavigationBar(\n      // Here, the items of BottomNavigationBar are hard coded. In a real\n      // world scenario, the items would most likely be generated from the\n      // branches of the shell route, which can be fetched using\n      // `navigationShell.route.branches`.\n      items: const <BottomNavigationBarItem>[\n        BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Section A'),\n        BottomNavigationBarItem(icon: Icon(Icons.work), label: 'Section B'),\n        BottomNavigationBarItem(icon: Icon(Icons.tab), label: 'Section C'),\n      ],\n      currentIndex: navigationShell.currentIndex,\n      // Navigate to the current location of the branch at the provided index\n      // when tapping an item in the BottomNavigationBar.\n      onTap: (int index) => navigationShell.goBranch(index),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Route with Query Parameters in Dart\nDESCRIPTION: Demonstrates how to define a route that accepts query parameters.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router_builder/README.md#2025-04-22_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n@TypedGoRoute<LoginRoute>(path: '/login')\nclass LoginRoute extends GoRouteData {\n  LoginRoute({this.from});\n  final String? from;\n\n  @override\n  Widget build(BuildContext context, GoRouterState state) {\n    return LoginScreen(from: from);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using SharedPreferencesAsync in Dart\nDESCRIPTION: This code example shows how to use the SharedPreferencesAsync API for reading, writing, and removing preferences, as well as clearing with an allow list.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences/README.md#2025-04-22_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfinal SharedPreferencesAsync asyncPrefs = SharedPreferencesAsync();\n\nawait asyncPrefs.setBool('repeat', true);\nawait asyncPrefs.setString('action', 'Start');\n\nfinal bool? repeat = await asyncPrefs.getBool('repeat');\nfinal String? action = await asyncPrefs.getString('action');\n\nawait asyncPrefs.remove('repeat');\n\n// Any time a filter option is included as a method parameter, strongly consider\n// using it to avoid potentially unwanted side effects.\nawait asyncPrefs.clear(allowList: <String>{'action', 'repeat'});\n```\n\n----------------------------------------\n\nTITLE: Checking Store Availability for In-App Purchases in Flutter\nDESCRIPTION: A code snippet that checks if the underlying store (App Store or Google Play) is available and accessible for making in-app purchases. This verification should be performed before attempting any purchase operations.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/in_app_purchase/in_app_purchase/README.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal bool available = await InAppPurchase.instance.isAvailable();\nif (!available) {\n  // The store cannot be reached or accessed. Update the UI accordingly.\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Using XFile in Dart\nDESCRIPTION: Demonstrates how to create an XFile instance from a file path, access its properties (path, name, MIME type), and read its content as a string. This example shows the basic functionality of the cross_file package.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/cross_file/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal XFile file = XFile('assets/hello.txt');\n\nprint('File information:');\nprint('- Path: ${file.path}');\nprint('- Name: ${file.name}');\nprint('- MIME type: ${file.mimeType}');\n\nfinal String fileContent = await file.readAsString();\nprint('Content of the file: $fileContent');\n```\n\n----------------------------------------\n\nTITLE: Checking Device Authentication Capabilities in Dart\nDESCRIPTION: This snippet demonstrates how to check if the device supports biometric or device-level authentication using the local_auth plugin.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:local_auth/local_auth.dart';\n// ···\n  final LocalAuthentication auth = LocalAuthentication();\n  // ···\n    final bool canAuthenticateWithBiometrics = await auth.canCheckBiometrics;\n    final bool canAuthenticate =\n        canAuthenticateWithBiometrics || await auth.isDeviceSupported();\n```\n\n----------------------------------------\n\nTITLE: Implementing Remote Widget Runtime in Flutter\nDESCRIPTION: Example showing how to implement Remote Flutter Widgets with a StatefulWidget. Demonstrates setting up Runtime, DynamicContent, remote widget library parsing, and handling widget events.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass Example extends StatefulWidget {\n  const Example({super.key});\n\n  @override\n  State<Example> createState() => _ExampleState();\n}\n\nclass _ExampleState extends State<Example> {\n  final Runtime _runtime = Runtime();\n  final DynamicContent _data = DynamicContent();\n\n  // Normally this would be obtained dynamically, but for this example\n  // we hard-code the \"remote\" widgets into the app.\n  //\n  // Also, normally we would decode this with [decodeLibraryBlob] rather than\n  // parsing the text version using [parseLibraryFile]. However, to make it\n  // easier to demo, this uses the slower text format.\n  static final RemoteWidgetLibrary _remoteWidgets = parseLibraryFile('''\n    // The \"import\" keyword is used to specify dependencies, in this case,\n    // the built-in widgets that are added by initState below.\n    import core.widgets;\n    // The \"widget\" keyword is used to define a new widget constructor.\n    // The \"root\" widget is specified as the one to render in the build\n    // method below.\n    widget root = Container(\n      color: 0xFF002211,\n      child: Center(\n        child: Text(text: [\"Hello, \", data.greet.name, \"!\"], textDirection: \"ltr\"),\n      ),\n    );\n  ''');\n\n  static const LibraryName coreName = LibraryName(<String>['core', 'widgets']);\n  static const LibraryName mainName = LibraryName(<String>['main']);\n\n  @override\n  void initState() {\n    super.initState();\n    // Local widget library:\n    _runtime.update(coreName, createCoreWidgets());\n    // Remote widget library:\n    _runtime.update(mainName, _remoteWidgets);\n    // Configuration data:\n    _data.update('greet', <String, Object>{'name': 'World'});\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return RemoteWidget(\n      runtime: _runtime,\n      data: _data,\n      widget: const FullyQualifiedWidgetName(mainName, 'root'),\n      onEvent: (String name, DynamicMap arguments) {\n        // The example above does not have any way to trigger events, but if it\n        // did, they would result in this callback being invoked.\n        debugPrint('user triggered event \"$name\" with data: $arguments');\n      },\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening a Single File with Type Filtering in Flutter\nDESCRIPTION: Dart code demonstrating how to open a single file with type filtering for image formats (JPG, PNG). Uses the XTypeGroup to specify accepted file types.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector/README.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nconst XTypeGroup typeGroup = XTypeGroup(\n  label: 'images',\n  extensions: <String>['jpg', 'png'],\n);\nfinal XFile? file =\n    await openFile(acceptedTypeGroups: <XTypeGroup>[typeGroup]);\n```\n\n----------------------------------------\n\nTITLE: Full Camera App Example in Dart\nDESCRIPTION: A complete Dart code example demonstrating how to create a Flutter app with full-screen camera preview. It includes initializing cameras, handling permissions, and basic error handling.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/camera/camera/README.md#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:camera/camera.dart';\nimport 'package:flutter/material.dart';\n\nlate List<CameraDescription> _cameras;\n\nFuture<void> main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n\n  _cameras = await availableCameras();\n  runApp(const CameraApp());\n}\n\n/// CameraApp is the Main Application.\nclass CameraApp extends StatefulWidget {\n  /// Default Constructor\n  const CameraApp({super.key});\n\n  @override\n  State<CameraApp> createState() => _CameraAppState();\n}\n\nclass _CameraAppState extends State<CameraApp> {\n  late CameraController controller;\n\n  @override\n  void initState() {\n    super.initState();\n    controller = CameraController(_cameras[0], ResolutionPreset.max);\n    controller.initialize().then((_) {\n      if (!mounted) {\n        return;\n      }\n      setState(() {});\n    }).catchError((Object e) {\n      if (e is CameraException) {\n        switch (e.code) {\n          case 'CameraAccessDenied':\n            // Handle access errors here.\n            break;\n          default:\n            // Handle other errors here.\n            break;\n        }\n      }\n    });\n  }\n\n  @override\n  void dispose() {\n    controller.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    if (!controller.value.isInitialized) {\n      return Container();\n    }\n    return MaterialApp(\n      home: CameraPreview(controller),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Making a Purchase with Flutter In-App Purchase API\nDESCRIPTION: Initiates the purchase flow for a product, with different handling for consumable and non-consumable products. The purchase flow is then managed by the underlying store with updates delivered via the purchase stream.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/in_app_purchase/in_app_purchase/README.md#2025-04-22_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfinal ProductDetails productDetails = ... // Saved earlier from queryProductDetails().\nfinal PurchaseParam purchaseParam = PurchaseParam(productDetails: productDetails);\nif (_isConsumable(productDetails)) {\n  InAppPurchase.instance.buyConsumable(purchaseParam: purchaseParam);\n} else {\n  InAppPurchase.instance.buyNonConsumable(purchaseParam: purchaseParam);\n}\n// From here the purchase flow will be handled by the underlying store.\n// Updates will be delivered to the `InAppPurchase.instance.purchaseStream`.\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Google Map in Flutter with Camera Controls\nDESCRIPTION: Creates a Flutter widget that displays a Google Map with initial camera position and provides functionality to animate to a new location. This sample demonstrates basic map setup and camera control using GoogleMapController.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_maps_flutter/google_maps_flutter/README.md#2025-04-22_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass MapSample extends StatefulWidget {\n  const MapSample({super.key});\n\n  @override\n  State<MapSample> createState() => MapSampleState();\n}\n\nclass MapSampleState extends State<MapSample> {\n  final Completer<GoogleMapController> _controller =\n      Completer<GoogleMapController>();\n\n  static const CameraPosition _kGooglePlex = CameraPosition(\n    target: LatLng(37.42796133580664, -122.085749655962),\n    zoom: 14.4746,\n  );\n\n  static const CameraPosition _kLake = CameraPosition(\n      bearing: 192.8334901395799,\n      target: LatLng(37.43296265331129, -122.08832357078792),\n      tilt: 59.440717697143555,\n      zoom: 19.151926040649414);\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: GoogleMap(\n        mapType: MapType.hybrid,\n        initialCameraPosition: _kGooglePlex,\n        onMapCreated: (GoogleMapController controller) {\n          _controller.complete(controller);\n        },\n      ),\n      floatingActionButton: FloatingActionButton.extended(\n        onPressed: _goToTheLake,\n        label: const Text('To the lake!'),\n        icon: const Icon(Icons.directions_boat),\n      ),\n    );\n  }\n\n  Future<void> _goToTheLake() async {\n    final GoogleMapController controller = await _controller.future;\n    await controller.animateCamera(CameraUpdate.newCameraPosition(_kLake));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing WebViewController in Flutter\nDESCRIPTION: Demonstrates how to initialize a WebViewController with JavaScript mode, navigation delegates, and URL loading. Includes handlers for progress tracking, page events, and navigation filtering.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/webview_flutter/webview_flutter/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\ncontroller = WebViewController()\n  ..setJavaScriptMode(JavaScriptMode.unrestricted)\n  ..setNavigationDelegate(\n    NavigationDelegate(\n      onProgress: (int progress) {\n        // Update loading bar.\n      },\n      onPageStarted: (String url) {},\n      onPageFinished: (String url) {},\n      onHttpError: (HttpResponseError error) {},\n      onWebResourceError: (WebResourceError error) {},\n      onNavigationRequest: (NavigationRequest request) {\n        if (request.url.startsWith('https://www.youtube.com/')) {\n          return NavigationDecision.prevent;\n        }\n        return NavigationDecision.navigate;\n      },\n    ),\n  )\n  ..loadRequest(Uri.parse('https://flutter.dev'));\n```\n\n----------------------------------------\n\nTITLE: Restoring Previous Purchases in Flutter IAP Implementation\nDESCRIPTION: Restores previously purchased products across devices. The restored purchases will be emitted on the purchase stream, where they should be validated according to store-specific best practices.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/in_app_purchase/in_app_purchase/README.md#2025-04-22_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait InAppPurchase.instance.restorePurchases();\n```\n\n----------------------------------------\n\nTITLE: Navigating Directly to a Destination with GoRouter in Dart\nDESCRIPTION: Demonstrates how to navigate to a destination using context.go() which replaces the current stack of screens with the screens configured for the destination route.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/doc/navigation.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nbuild(BuildContext context) {\n  return TextButton(\n    onPressed: () => context.go('/users/123'),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Enrolled Biometrics in Dart\nDESCRIPTION: This code shows how to get a list of enrolled biometrics and check for specific types using the local_auth plugin.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth/README.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal List<BiometricType> availableBiometrics =\n    await auth.getAvailableBiometrics();\n\nif (availableBiometrics.isNotEmpty) {\n  // Some biometrics are enrolled.\n}\n\nif (availableBiometrics.contains(BiometricType.strong) ||\n    availableBiometrics.contains(BiometricType.face)) {\n  // Specific types of biometrics are available.\n  // Use checks like this with caution!\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing GoRouter with Generated Routes in Dart\nDESCRIPTION: Shows how to initialize a GoRouter instance using the generated $appRoutes.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router_builder/README.md#2025-04-22_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfinal GoRouter router = GoRouter(routes: $appRoutes);\n```\n\n----------------------------------------\n\nTITLE: Defining Type-Safe Routes with GoRouteData\nDESCRIPTION: Implementation of type-safe routes using GoRouteData classes with annotations for home screen and song routes\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/doc/type-safe-routes.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:go_router/go_router.dart';\n\npart 'go_router_builder.g.dart';\n\n@TypedGoRoute<HomeScreenRoute>(\n    path: '/',\n    routes: [\n      TypedGoRoute<SongRoute>(\n        path: 'song/:id',\n      )\n    ]\n)\n@immutable\nclass HomeScreenRoute extends GoRouteData {\n  @override\n  Widget build(BuildContext context, GoRouterState state) {\n    return const HomeScreen();\n  }\n}\n\n@immutable\nclass SongRoute extends GoRouteData {\n  final int id;\n\n  const SongRoute({\n    required this.id,\n  });\n\n  @override\n  Widget build(BuildContext context, GoRouterState state) {\n    return SongScreen(songId: id.toString());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading/Downgrading Subscriptions in Google Play (Dart)\nDESCRIPTION: Demonstrates how to upgrade or downgrade an existing in-app subscription in Google Play using the ChangeSubscriptionParam and GooglePlayPurchaseParam objects.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/in_app_purchase/in_app_purchase/README.md#2025-04-22_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nfinal PurchaseDetails oldPurchaseDetails = ...;\nPurchaseParam purchaseParam = GooglePlayPurchaseParam(\n    productDetails: productDetails,\n    changeSubscriptionParam: ChangeSubscriptionParam(\n        oldPurchaseDetails: oldPurchaseDetails,\n        replacementMode: ReplacementMode.withTimeProration));\nInAppPurchase.instance\n    .buyNonConsumable(purchaseParam: purchaseParam);\n```\n\n----------------------------------------\n\nTITLE: Configuring GoRouter with Error Builder in Dart\nDESCRIPTION: Shows how to configure a GoRouter instance with a custom error builder using typed routes.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router_builder/README.md#2025-04-22_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nfinal GoRouter routerWithErrorBuilder = GoRouter(\n  routes: $appRoutes,\n  errorBuilder: (BuildContext context, GoRouterState state) {\n    return ErrorRoute(error: state.error!).build(context, state);\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring a GoRoute with Path Parameters in Dart\nDESCRIPTION: Demonstrates how to configure a GoRoute with a path parameter. The route handles paths like '/users/123' where '123' is a dynamic user ID value.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/doc/configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nGoRoute(\n  path: '/users/:userId',\n  builder: (context, state) => const UserScreen(),\n),\n```\n\n----------------------------------------\n\nTITLE: Converting Named Routes to Go Router in Flutter\nDESCRIPTION: Example of migrating from Flutter's named routes to Go Router. Shows how to convert a MaterialApp with initialRoute and routes map to an equivalent GoRouter configuration with initialLocation and route objects.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/doc/upgrading.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nMaterialApp(\n  initialRoute: '/details',\n  routes: {\n    '/': (context) => HomeScreen(),\n    '/details': (context) => DetailsScreen(),\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing GoogleSignIn with OAuth Scopes in Flutter\nDESCRIPTION: Initializes the GoogleSignIn instance with required OAuth scopes. The example requests email access and read-only contacts permissions. It includes an optional clientId parameter that can be uncommented for web implementation.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_sign_in/google_sign_in/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nconst List<String> scopes = <String>[\n  'email',\n  'https://www.googleapis.com/auth/contacts.readonly',\n];\n\nGoogleSignIn _googleSignIn = GoogleSignIn(\n  // Optional clientId\n  // clientId: 'your-client_id.apps.googleusercontent.com',\n  scopes: scopes,\n);\n```\n\n----------------------------------------\n\nTITLE: Creating VideoPlayerController with Content URI in Dart\nDESCRIPTION: Example of creating a VideoPlayerController using a content URI on Android.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/video_player/video_player/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nVideoPlayerController controller = VideoPlayerController.contentUri(\n  Uri.parse('content://media/external/video/media/1234')\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirection Logic in Dart\nDESCRIPTION: Shows how to implement redirection logic using the location property of generated routes.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router_builder/README.md#2025-04-22_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nredirect: (BuildContext context, GoRouterState state) {\n  final bool loggedIn = loginInfo.loggedIn;\n  final bool loggingIn = state.matchedLocation == LoginRoute().location;\n  if (!loggedIn && !loggingIn) {\n    return LoginRoute(from: state.matchedLocation).location;\n  }\n  if (loggedIn && loggingIn) {\n    return const HomeRoute().location;\n  }\n  return null;\n},\n```\n\n----------------------------------------\n\nTITLE: Getting a Directory Path in Flutter\nDESCRIPTION: Dart code demonstrating how to prompt the user to select a directory and retrieve its path. The code also includes handling the case where the user cancels the operation.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector/README.md#2025-04-22_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfinal String? directoryPath = await getDirectoryPath();\nif (directoryPath == null) {\n  // Operation was canceled by the user.\n  return;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WebViewController Properties in Dart\nDESCRIPTION: Examples of setting various properties on WebViewController in the WebView Flutter package. These methods configure JavaScript mode, channels, zoom, user agent, and background color.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/webview_flutter/webview_flutter/README.md#2025-04-22_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nWebViewController.setJavaScriptMode\nWebViewController.addJavaScriptChannel\nWebViewController.removeJavaScriptChannel\nWebViewController.enableZoom\nWebViewController.setUserAgent\nWebViewController.setBackgroundColor\n```\n\n----------------------------------------\n\nTITLE: Running the Flutter Adaptive Scaffold Example\nDESCRIPTION: Command to run the example app in release mode to demonstrate adaptive layouts.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_adaptive_scaffold/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd example/\nflutter run --release\n```\n\n----------------------------------------\n\nTITLE: Configuring Analysis Options for Flutter Linting in YAML\nDESCRIPTION: This YAML configuration file sets up the analyzer to use the recommended lints from the flutter_lints package. It includes comments explaining how to customize lint rules and suppress lints for specific lines or files.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_lints/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# This file configures the analyzer, which statically analyzes Dart code to\n# check for errors, warnings, and lints.\n#\n# The issues identified by the analyzer are surfaced in the UI of Dart-enabled\n# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be\n# invoked from the command line by running `flutter analyze`.\n\n# The following line activates a set of recommended lints for Flutter apps,\n# packages, and plugins designed to encourage good coding practices.\ninclude: package:flutter_lints/flutter.yaml\n\nlinter:\n  # The lint rules applied to this project can be customized in the\n  # section below to disable rules from the `package:flutter_lints/flutter.yaml`\n  # included above or to enable additional rules. A list of all available lints\n  # and their documentation is published at https://dart.dev/tools/linter-rules.\n  #\n  # Instead of disabling a lint rule for the entire project in the\n  # section below, it can also be suppressed for a single line of code\n  # or a specific dart file by using the `// ignore: name_of_lint` and\n  # `// ignore_for_file: name_of_lint` syntax on the line or in the file\n  # producing the lint.\n  rules:\n    # avoid_print: false  # Uncomment to disable the `avoid_print` rule\n    # prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule\n\n# Additional information about this file can be found at\n# https://dart.dev/tools/analysis\n```\n\n----------------------------------------\n\nTITLE: Reading Data with SharedPreferences in Dart\nDESCRIPTION: This code shows how to read various data types (integer, boolean, double, string, and string list) using SharedPreferences in Flutter.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences/README.md#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// Try reading data from the 'counter' key. If it doesn't exist, returns null.\nfinal int? counter = prefs.getInt('counter');\n// Try reading data from the 'repeat' key. If it doesn't exist, returns null.\nfinal bool? repeat = prefs.getBool('repeat');\n// Try reading data from the 'decimal' key. If it doesn't exist, returns null.\nfinal double? decimal = prefs.getDouble('decimal');\n// Try reading data from the 'action' key. If it doesn't exist, returns null.\nfinal String? action = prefs.getString('action');\n// Try reading data from the 'items' key. If it doesn't exist, returns null.\nfinal List<String>? items = prefs.getStringList('items');\n```\n\n----------------------------------------\n\nTITLE: Defining a Route with Mixed Parameters in Dart\nDESCRIPTION: Demonstrates how to define a route that combines path, query, and extra parameters.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router_builder/README.md#2025-04-22_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\n@TypedGoRoute<HotdogRouteWithEverything>(path: '/:ketchup')\nclass HotdogRouteWithEverything extends GoRouteData {\n  HotdogRouteWithEverything(this.ketchup, this.mustard, this.$extra);\n  final bool ketchup; // A required path parameter.\n  final String? mustard; // An optional query parameter.\n  final Sauce $extra; // A special $extra parameter.\n\n  @override\n  Widget build(BuildContext context, GoRouterState state) {\n    return HotdogScreen(ketchup, mustard, $extra);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Routing Config with GoRouter in Dart\nDESCRIPTION: Demonstrates how to create a GoRouter with a dynamic routing configuration using ValueNotifier and RoutingConfig. This allows routes to be updated after the router is created.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/doc/configuration.md#2025-04-22_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfinal ValueNotifier<RoutingConfig> myRoutingConfig = ValueNotifier<RoutingConfig>(\n  RoutingConfig(\n    routes: <RouteBase>[GoRoute(path: '/', builder: (_, __) => HomeScreen())],\n  ),\n);\nfinal GoRouter router = GoRouter.routingConfig(routingConfig: myRoutingConfig);\n```\n\n----------------------------------------\n\nTITLE: Listening to Purchase Updates in Flutter using InAppPurchase\nDESCRIPTION: Sets up a subscription to listen for purchase updates from the store. This should be initialized early to catch all purchase updates, including those from previous app sessions. The code includes initialization in initState and proper cleanup in dispose.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/in_app_purchase/in_app_purchase/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyAppState extends State<MyApp> {\n  StreamSubscription<List<PurchaseDetails>> _subscription;\n\n  @override\n  void initState() {\n    final Stream purchaseUpdated =\n        InAppPurchase.instance.purchaseStream;\n    _subscription = purchaseUpdated.listen((purchaseDetailsList) {\n      _listenToPurchaseUpdated(purchaseDetailsList);\n    }, onDone: () {\n      _subscription.cancel();\n    }, onError: (error) {\n      // handle error here.\n    });\n    super.initState();\n  }\n\n  @override\n  void dispose() {\n    _subscription.cancel();\n    super.dispose();\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating a StatefulWidget for Ad Display\nDESCRIPTION: Defines a StatefulWidget that handles displaying ads before video content. It includes initialization of ad-related variables like AdsLoader and AdsManager, as well as content playback variables using VideoPlayerController.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/interactive_media_ads/README.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n/// Example widget displaying an Ad before a video.\nclass AdExampleWidget extends StatefulWidget {\n  /// Constructs an [AdExampleWidget].\n  const AdExampleWidget({super.key});\n\n  @override\n  State<AdExampleWidget> createState() => _AdExampleWidgetState();\n}\n\nclass _AdExampleWidgetState extends State<AdExampleWidget>\n    with WidgetsBindingObserver {\n  // IMA sample tag for a pre-, mid-, and post-roll, single inline video ad. See more IMA sample\n  // tags at https://developers.google.com/interactive-media-ads/docs/sdks/html5/client-side/tags\n  static const String _adTagUrl =\n      'https://pubads.g.doubleclick.net/gampad/ads?iu=/21775744923/external/vmap_ad_samples&sz=640x480&cust_params=sample_ar%3Dpremidpost&ciu_szs=300x250&gdfp_req=1&ad_rule=1&output=vmap&unviewed_position_start=1&env=vp&impl=s&cmsid=496&vid=short_onecue&correlator=';\n\n  // The AdsLoader instance exposes the request ads method.\n  late final AdsLoader _adsLoader;\n\n  // AdsManager exposes methods to control ad playback and listen to ad events.\n  AdsManager? _adsManager;\n\n  // ···\n  // Whether the widget should be displaying the content video. The content\n  // player is hidden while Ads are playing.\n  bool _shouldShowContentVideo = false;\n\n  // Controls the content video player.\n  late final VideoPlayerController _contentVideoController;\n\n  // Periodically updates the SDK of the current playback progress of the\n  // content video.\n  Timer? _contentProgressTimer;\n\n  // Provides the SDK with the current playback progress of the content video.\n  // This is required to support mid-roll ads.\n  final ContentProgressProvider _contentProgressProvider =\n      ContentProgressProvider();\n  // ···\n  @override\n  Widget build(BuildContext context) {\n    // ···\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Sign-In Authentication in Flutter\nDESCRIPTION: Demonstrates how to handle the sign-in process with error handling. This method attempts to authenticate the user with Google and catches any errors that occur during the process.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_sign_in/google_sign_in/README.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _handleSignIn() async {\n  try {\n    await _googleSignIn.signIn();\n  } catch (error) {\n    print(error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Route Tree with TypedGoRoute in Dart\nDESCRIPTION: Demonstrates how to define a route tree using TypedGoRoute annotations and classes.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router_builder/README.md#2025-04-22_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n@TypedGoRoute<HomeRoute>(\n  path: '/',\n  routes: <TypedGoRoute<GoRouteData>>[\n    TypedGoRoute<FamilyRoute>(\n      path: 'family/:fid',\n    ),\n  ],\n)\nclass HomeRoute extends GoRouteData {\n  const HomeRoute();\n\n  @override\n  Widget build(BuildContext context, GoRouterState state) => const HomeScreen();\n}\n\nclass RedirectRoute extends GoRouteData {\n  // There is no need to implement [build] when this [redirect] is unconditional.\n  @override\n  String? redirect(BuildContext context, GoRouterState state) {\n    return const HomeRoute().location;\n  }\n}\n\n@TypedGoRoute<LoginRoute>(path: '/login')\nclass LoginRoute extends GoRouteData {\n  LoginRoute({this.from});\n  final String? from;\n\n  @override\n  Widget build(BuildContext context, GoRouterState state) {\n    return LoginScreen(from: from);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Biometric-Only Authentication in Dart\nDESCRIPTION: This code demonstrates how to require biometric authentication only, without allowing fallback to PIN/pattern/passcode.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth/README.md#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal bool didAuthenticate = await auth.authenticate(\n    localizedReason: 'Please authenticate to show account balance',\n    options: const AuthenticationOptions(biometricOnly: true));\n```\n\n----------------------------------------\n\nTITLE: Setting Default GoogleSignInPlatform Implementation in Flutter\nDESCRIPTION: This code snippet demonstrates how to set the default GoogleSignInPlatform implementation when registering a new platform-specific plugin for google_sign_in. It shows the syntax for assigning a custom implementation to the GoogleSignInPlatform.instance.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_sign_in/google_sign_in_platform_interface/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`GoogleSignInPlatform.instance = MyPlatformGoogleSignIn()`\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Handler in GoRouter\nDESCRIPTION: Example showing how to set up an error builder in GoRouter to handle exceptions by displaying a custom error screen. The errorBuilder callback receives the context and state parameters and should return a widget to display when errors occur.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/doc/error-handling.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nGoRouter(\n  /* ... */\n  errorBuilder: (context, state) => ErrorScreen(state.error),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing WebViewWidget in Flutter\nDESCRIPTION: Shows how to create a basic scaffold with WebViewWidget using a previously initialized controller.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/webview_flutter/webview_flutter/README.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(title: const Text('Flutter Simple Example')),\n    body: WebViewWidget(controller: controller),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Maps API in iOS Swift AppDelegate\nDESCRIPTION: Initializes Google Maps services with an API key in the iOS AppDelegate using Swift. This setup is required to enable Google Maps on iOS devices.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_maps_flutter/google_maps_flutter/README.md#2025-04-22_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport UIKit\nimport Flutter\nimport GoogleMaps\n\n@UIApplicationMain\n@objc class AppDelegate: FlutterAppDelegate {\n  override func application(\n    _ application: UIApplication,\n    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?\n  ) -> Bool {\n    GMSServices.provideAPIKey(\"YOUR KEY HERE\")\n    GeneratedPluginRegistrant.register(with: self)\n    return super.application(application, didFinishLaunchingWithOptions: launchOptions)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Platform-Specific Features in WebView Flutter\nDESCRIPTION: Examples of accessing Android and iOS specific features in the WebView Flutter package. These include enabling debugging, setting media playback policies, and configuring navigation gestures.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/webview_flutter/webview_flutter/README.md#2025-04-22_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nAndroidWebViewController.enableDebugging\nAndroidWebViewController.setMediaPlaybackRequiresUserGesture\nWebKitWebViewController.setAllowsBackForwardNavigationGestures\nWebKitWebViewControllerCreationParams.mediaTypesRequiringUserAction\nWebKitWebViewControllerCreationParams.allowsInlineMediaPlayback\n```\n\n----------------------------------------\n\nTITLE: Implementing HostApi in Kotlin\nDESCRIPTION: This snippet demonstrates how to implement the HostApi in Kotlin to receive calls from Flutter, including error handling using FlutterError.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/README.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate class PigeonApiImplementation : ExampleHostApi {\n  override fun getHostLanguage(): String {\n    return \"Kotlin\"\n  }\n\n  override fun add(a: Long, b: Long): Long {\n    if (a < 0L || b < 0L) {\n      throw FlutterError(\"code\", \"message\", \"details\")\n    }\n    return a + b\n  }\n\n  override fun sendMessage(message: MessageData, callback: (Result<Boolean>) -> Unit) {\n    if (message.code == Code.ONE) {\n      callback(Result.failure(FlutterError(\"code\", \"message\", \"details\")))\n      return\n    }\n    callback(Result.success(true))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Maps API in Android Manifest\nDESCRIPTION: Adds the Google Maps API key to the Android application manifest file to enable Google Maps functionality on Android devices.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_maps_flutter/google_maps_flutter/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<manifest ...\n  <application ...\n    <meta-data android:name=\"com.google.android.geo.API_KEY\"\n               android:value=\"YOUR KEY HERE\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Local Widget Library with Hot Reload Support in Dart\nDESCRIPTION: This snippet demonstrates how to create a StatefulWidget that uses RFW's Runtime and DynamicContent. It includes a method to update local widgets during hot reload and shows how to define custom local widgets.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/README.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass Example extends StatefulWidget {\n  const Example({super.key});\n\n  @override\n  State<Example> createState() => _ExampleState();\n}\n\nclass _ExampleState extends State<Example> {\n  final Runtime _runtime = Runtime();\n  final DynamicContent _data = DynamicContent();\n\n  @override\n  void initState() {\n    super.initState();\n    _update();\n  }\n\n  @override\n  void reassemble() {\n    // This function causes the Runtime to be updated any time the app is\n    // hot reloaded, so that changes to _createLocalWidgets can be seen\n    // during development. This function has no effect in production.\n    super.reassemble();\n    _update();\n  }\n\n  static WidgetLibrary _createLocalWidgets() {\n    return LocalWidgetLibrary(<String, LocalWidgetBuilder>{\n      'GreenBox': (BuildContext context, DataSource source) {\n        return ColoredBox(\n          color: const Color(0xFF002211),\n          child: source.child(<Object>['child']),\n        );\n      },\n      'Hello': (BuildContext context, DataSource source) {\n        return Center(\n          child: Text(\n            'Hello, ${source.v<String>(<Object>[\"name\"])}!',\n            textDirection: TextDirection.ltr,\n          ),\n        );\n      },\n    });\n  }\n\n  static const LibraryName localName = LibraryName(<String>['local']);\n  static const LibraryName remoteName = LibraryName(<String>['remote']);\n\n  void _update() {\n    _runtime.update(localName, _createLocalWidgets());\n    // Normally we would obtain the remote widget library in binary form from a\n    // server, and decode it with [decodeLibraryBlob] rather than parsing the\n    // text version using [parseLibraryFile]. However, to make it easier to\n    // play with this sample, this uses the slower text format.\n    _runtime.update(remoteName, parseLibraryFile('''\n      import local;\n      widget root = GreenBox(\n        child: Hello(name: \"World\"),\n      );\n    '''));\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return RemoteWidget(\n      runtime: _runtime,\n      data: _data,\n      widget: const FullyQualifiedWidgetName(remoteName, 'root'),\n      onEvent: (String name, DynamicMap arguments) {\n        debugPrint('user triggered event \"$name\" with data: $arguments');\n      },\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Lost Data from Image Picker on Android\nDESCRIPTION: Demonstrates how to handle the case when Android kills the MainActivity during image picking. This code retrieves any lost data when the application restarts after being terminated due to memory pressure.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> getLostData() async {\n  final ImagePicker picker = ImagePicker();\n  final LostDataResponse response = await picker.retrieveLostData();\n  if (response.isEmpty) {\n    return;\n  }\n  final List<XFile>? files = response.files;\n  if (files != null) {\n    _handleLostFiles(files);\n  } else {\n    _handleError(response.exception);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Saving a File with Suggested Name in Flutter\nDESCRIPTION: Dart code showing the complete process of saving a file: getting a save location with a suggested filename, checking if the user canceled, creating file data, and writing it to the selected location.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector/README.md#2025-04-22_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nconst String fileName = 'suggested_name.txt';\nfinal FileSaveLocation? result =\n    await getSaveLocation(suggestedName: fileName);\nif (result == null) {\n  // Operation was canceled by the user.\n  return;\n}\n\nfinal Uint8List fileData = Uint8List.fromList('Hello World!'.codeUnits);\nconst String mimeType = 'text/plain';\nfinal XFile textFile =\n    XFile.fromData(fileData, mimeType: mimeType, name: fileName);\nawait textFile.saveTo(result.path);\n```\n\n----------------------------------------\n\nTITLE: Defining a Route with Extra Parameter in Dart\nDESCRIPTION: Demonstrates how to define a route that accepts an extra parameter for passing complex objects.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router_builder/README.md#2025-04-22_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nclass PersonRouteWithExtra extends GoRouteData {\n  PersonRouteWithExtra(this.$extra);\n  final Person? $extra;\n\n  @override\n  Widget build(BuildContext context, GoRouterState state) {\n    return PersonScreen($extra);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing WebViewController Methods in Dart\nDESCRIPTION: Examples of updated method calls for WebViewController in the WebView Flutter package. These changes include new methods for clearing cache, loading requests, running JavaScript, and getting scroll position.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/webview_flutter/webview_flutter/README.md#2025-04-22_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nWebViewController.clearLocalStorage\nWebViewController.loadRequest\nWebViewController.runJavaScript\nWebViewController.runJavaScriptReturningResult\nWebViewController.getScrollPosition\n```\n\n----------------------------------------\n\nTITLE: Implementing SKPaymentQueueDelegateWrapper for iOS (Dart)\nDESCRIPTION: Demonstrates how to implement the SKPaymentQueueDelegateWrapper to control price consent behavior on iOS.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/in_app_purchase/in_app_purchase/README.md#2025-04-22_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nclass ExamplePaymentQueueDelegate implements SKPaymentQueueDelegateWrapper {\n  @override\n  bool shouldContinueTransaction(\n      SKPaymentTransactionWrapper transaction, SKStorefrontWrapper storefront) {\n    return true;\n  }\n\n  @override\n  bool shouldShowPriceConsent() {\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Web Benchmark Results in Dart\nDESCRIPTION: Example code demonstrating how to analyze web benchmark results by computing deltas between baseline and test results, and calculating averages across multiple benchmark runs. The code shows how to read benchmark results from JSON files and process them using the web_benchmarks analysis package.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/web_benchmarks/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:convert';\nimport 'dart:io';\n\nimport 'package:web_benchmarks/analysis.dart';\n\nvoid main() {\n  final BenchmarkResults baselineResults =\n      _benchmarkResultsFromFile('/path/to/benchmark_baseline.json');\n  final BenchmarkResults testResults1 =\n      _benchmarkResultsFromFile('/path/to/benchmark_test_1.json');\n  final BenchmarkResults testResults2 =\n      _benchmarkResultsFromFile('/path/to/benchmark_test_2.json');\n\n  // Compute the delta between [baselineResults] and [testResults1].\n  final BenchmarkResults delta = computeDelta(baselineResults, testResults1);\n  stdout.writeln(delta.toJson());\n\n  // Compute the average of [testResults] and [testResults2].\n  final BenchmarkResults average =\n      computeAverage(<BenchmarkResults>[testResults1, testResults2]);\n  stdout.writeln(average.toJson());\n}\n\nBenchmarkResults _benchmarkResultsFromFile(String path) {\n  final File file = File.fromUri(Uri.parse(path));\n  final Map<String, Object?> fileContentAsJson =\n      jsonDecode(file.readAsStringSync()) as Map<String, Object?>;\n  return BenchmarkResults.parse(fileContentAsJson);\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating with Extra Parameter in Dart\nDESCRIPTION: Shows how to navigate to a route while passing an extra parameter.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router_builder/README.md#2025-04-22_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nvoid tapWithExtra() {\n  PersonRouteWithExtra(Person(id: 1, name: 'Marvin', age: 42)).go(context);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic GoRouter Configuration in Dart\nDESCRIPTION: Sets up a basic GoRouter with two routes - a home route and a secondary page route. Each route specifies a path and builder function that returns the screen to display.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/doc/configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nGoRouter(\n  routes: [\n    GoRoute(\n      path: '/',\n      builder: (context, state) => const Page1Screen(),\n    ),\n    GoRoute(\n      path: '/page2',\n      builder: (context, state) => const Page2Screen(),\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Integrating GoRouter with MaterialApp in Flutter\nDESCRIPTION: Shows how to use the configured GoRouter with MaterialApp.router constructor. This snippet demonstrates how to connect the router configuration to a Flutter application by setting the routerConfig parameter.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/doc/get-started.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp.router(\n      routerConfig: _router,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using NetworkImageWithRetry in Flutter for Image Loading\nDESCRIPTION: Demonstrates how to use NetworkImageWithRetry instead of Image.network to load images from the network with a built-in retry mechanism. This approach is useful for improving the reliability of image loading in Flutter applications.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_image/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nconst Image avatar = Image(\n  image: NetworkImageWithRetry('http://example.com/avatars/123.jpg'),\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Platform-Specific Purchase Details on iOS (Dart)\nDESCRIPTION: Shows how to access iOS-specific purchase details like transactionState from a PurchaseDetails object.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/in_app_purchase/in_app_purchase/README.md#2025-04-22_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nif (purchaseDetails is AppStorePurchaseDetails) {\n  SKPaymentTransactionWrapper skProduct = (purchaseDetails as AppStorePurchaseDetails).skPaymentTransaction;\n  print(skProduct.transactionState);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Ad Display Container and Video Player Controller\nDESCRIPTION: Sets up the AdDisplayContainer for ad playback and the VideoPlayerController for content playback. It also configures ad event handling through the AdsLoader and AdsManager to manage transitions between ad and content playback.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/interactive_media_ads/README.md#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nlate final AdDisplayContainer _adDisplayContainer = AdDisplayContainer(\n  onContainerAdded: (AdDisplayContainer container) {\n    _adsLoader = AdsLoader(\n      container: container,\n      onAdsLoaded: (OnAdsLoadedData data) {\n        final AdsManager manager = data.manager;\n        _adsManager = data.manager;\n\n        manager.setAdsManagerDelegate(AdsManagerDelegate(\n          onAdEvent: (AdEvent event) {\n            debugPrint('OnAdEvent: ${event.type} => ${event.adData}');\n            switch (event.type) {\n              case AdEventType.loaded:\n                manager.start();\n              case AdEventType.contentPauseRequested:\n                _pauseContent();\n              case AdEventType.contentResumeRequested:\n                _resumeContent();\n              case AdEventType.allAdsCompleted:\n                manager.destroy();\n                _adsManager = null;\n              case AdEventType.clicked:\n              case AdEventType.complete:\n              case _:\n            }\n          },\n          onAdErrorEvent: (AdErrorEvent event) {\n            debugPrint('AdErrorEvent: ${event.error.message}');\n            _resumeContent();\n          },\n        ));\n\n        manager.init(settings: AdsRenderingSettings(enablePreloading: true));\n      },\n      onAdsLoadError: (AdsLoadErrorData data) {\n        debugPrint('OnAdsLoadError: ${data.error.message}');\n        _resumeContent();\n      },\n    );\n\n    // Ads can't be requested until the `AdDisplayContainer` has been added to\n    // the native View hierarchy.\n    _requestAds(container);\n  },\n);\n\n@override\nvoid initState() {\n  super.initState();\n  // ···\n  _contentVideoController = VideoPlayerController.networkUrl(\n    Uri.parse(\n      'https://storage.googleapis.com/gvabox/media/samples/stock.mp4',\n    ),\n  )\n    ..addListener(() {\n      if (_contentVideoController.value.isCompleted) {\n        _adsLoader.contentComplete();\n      }\n      setState(() {});\n    })\n    ..initialize().then((_) {\n      // Ensure the first frame is shown after the video is initialized, even before the play button has been pressed.\n      setState(() {});\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Platform Addition in Flutter In-App Purchase\nDESCRIPTION: Demonstrates how to register platform-specific functionality by setting the instance of InAppPurchasePlatformAddition.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/in_app_purchase/in_app_purchase_platform_interface/README.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nInAppPurchasePlatformAddition.instance = MyPlatformInAppPurchaseAddition()\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Go Router with Home Screen Route in Flutter\nDESCRIPTION: Sets up a basic Go Router configuration with a single route for the home screen. This snippet shows how to initialize the router and integrate it with MaterialApp using the routerConfig parameter.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/doc/upgrading.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:go_router/go_router.dart';\n\nfinal _router = GoRouter(\n  routes: [\n    GoRoute(\n      path: '/',\n      builder: (context, state) => const HomeScreen(),\n    ),\n  ],\n);\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp.router(\n      routerConfig: _router,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AdaptiveLayout with Responsive Breakpoints in Flutter\nDESCRIPTION: Implementation of AdaptiveLayout widget that demonstrates responsive design patterns using different breakpoints. The code shows configuration for primary navigation, body content, and bottom navigation that adapts based on screen width. It includes navigation rail implementation for larger screens and bottom navigation for small screens.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_adaptive_scaffold/README.md#2025-04-22_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nreturn AdaptiveLayout(\n  transitionDuration: Duration(milliseconds: _transitionDuration),\n  primaryNavigation: SlotLayout(\n    config: <Breakpoint, SlotLayoutConfig>{\n      Breakpoints.medium: SlotLayout.from(\n        inAnimation: AdaptiveScaffold.leftOutIn,\n        key: const Key('Primary Navigation Medium'),\n        builder: (_) => AdaptiveScaffold.standardNavigationRail(\n          selectedIndex: selectedNavigation,\n          onDestinationSelected: (int newIndex) {\n            setState(() {\n              selectedNavigation = newIndex;\n            });\n          },\n          leading: const Icon(Icons.menu),\n          destinations: destinations\n              .map((NavigationDestination destination) =>\n                  AdaptiveScaffold.toRailDestination(destination))\n              .toList(),\n          backgroundColor: navRailTheme.backgroundColor,\n          selectedIconTheme: navRailTheme.selectedIconTheme,\n          unselectedIconTheme: navRailTheme.unselectedIconTheme,\n          selectedLabelTextStyle: navRailTheme.selectedLabelTextStyle,\n          unSelectedLabelTextStyle: navRailTheme.unselectedLabelTextStyle,\n        ),\n      ),\n      Breakpoints.mediumLarge: SlotLayout.from(\n        key: const Key('Primary Navigation MediumLarge'),\n        inAnimation: AdaptiveScaffold.leftOutIn,\n        builder: (_) => AdaptiveScaffold.standardNavigationRail(\n          selectedIndex: selectedNavigation,\n          onDestinationSelected: (int newIndex) {\n            setState(() {\n              selectedNavigation = newIndex;\n            });\n          },\n          extended: true,\n          leading: Row(\n            mainAxisAlignment: MainAxisAlignment.spaceAround,\n            children: <Widget>[\n              Text(\n                'REPLY',\n                style: headerColor,\n              ),\n              const Icon(Icons.menu_open)\n            ],\n          ),\n          destinations: destinations\n              .map((NavigationDestination destination) =>\n                  AdaptiveScaffold.toRailDestination(destination))\n              .toList(),\n          trailing: trailingNavRail,\n          backgroundColor: navRailTheme.backgroundColor,\n          selectedIconTheme: navRailTheme.selectedIconTheme,\n          unselectedIconTheme: navRailTheme.unselectedIconTheme,\n          selectedLabelTextStyle: navRailTheme.selectedLabelTextStyle,\n          unSelectedLabelTextStyle: navRailTheme.unselectedLabelTextStyle,\n        ),\n      ),\n      Breakpoints.large: SlotLayout.from(\n        key: const Key('Primary Navigation Large'),\n        inAnimation: AdaptiveScaffold.leftOutIn,\n        builder: (_) => AdaptiveScaffold.standardNavigationRail(\n          selectedIndex: selectedNavigation,\n          onDestinationSelected: (int newIndex) {\n            setState(() {\n              selectedNavigation = newIndex;\n            });\n          },\n          extended: true,\n          leading: Row(\n            mainAxisAlignment: MainAxisAlignment.spaceAround,\n            children: <Widget>[\n              Text(\n                'REPLY',\n                style: headerColor,\n              ),\n              const Icon(Icons.menu_open)\n            ],\n          ),\n          destinations: destinations\n              .map((NavigationDestination destination) =>\n                  AdaptiveScaffold.toRailDestination(destination))\n              .toList(),\n          trailing: trailingNavRail,\n          backgroundColor: navRailTheme.backgroundColor,\n          selectedIconTheme: navRailTheme.selectedIconTheme,\n          unselectedIconTheme: navRailTheme.unselectedIconTheme,\n          selectedLabelTextStyle: navRailTheme.selectedLabelTextStyle,\n          unSelectedLabelTextStyle: navRailTheme.unselectedLabelTextStyle,\n        ),\n      ),\n      Breakpoints.extraLarge: SlotLayout.from(\n        key: const Key('Primary Navigation ExtraLarge'),\n        inAnimation: AdaptiveScaffold.leftOutIn,\n        builder: (_) => AdaptiveScaffold.standardNavigationRail(\n          selectedIndex: selectedNavigation,\n          onDestinationSelected: (int newIndex) {\n            setState(() {\n              selectedNavigation = newIndex;\n            });\n          },\n          extended: true,\n          leading: Row(\n            mainAxisAlignment: MainAxisAlignment.spaceAround,\n            children: <Widget>[\n              Text(\n                'REPLY',\n                style: headerColor,\n              ),\n              const Icon(Icons.menu_open)\n            ],\n          ),\n          destinations: destinations\n              .map((NavigationDestination destination) =>\n                  AdaptiveScaffold.toRailDestination(destination))\n              .toList(),\n          trailing: trailingNavRail,\n          backgroundColor: navRailTheme.backgroundColor,\n          selectedIconTheme: navRailTheme.selectedIconTheme,\n          unselectedIconTheme: navRailTheme.unselectedIconTheme,\n          selectedLabelTextStyle: navRailTheme.selectedLabelTextStyle,\n          unSelectedLabelTextStyle: navRailTheme.unselectedLabelTextStyle,\n        ),\n      ),\n    },\n  ),\n  body: SlotLayout(\n    config: <Breakpoint, SlotLayoutConfig>{\n      Breakpoints.small: SlotLayout.from(\n        key: const Key('Body Small'),\n        builder: (_) => ListView.builder(\n          itemCount: children.length,\n          itemBuilder: (BuildContext context, int index) => children[index],\n        ),\n      ),\n      Breakpoints.medium: SlotLayout.from(\n        key: const Key('Body Medium'),\n        builder: (_) =>\n            GridView.count(crossAxisCount: 2, children: children),\n      ),\n      Breakpoints.mediumLarge: SlotLayout.from(\n        key: const Key('Body MediumLarge'),\n        builder: (_) =>\n            GridView.count(crossAxisCount: 3, children: children),\n      ),\n      Breakpoints.large: SlotLayout.from(\n        key: const Key('Body Large'),\n        builder: (_) =>\n            GridView.count(crossAxisCount: 4, children: children),\n      ),\n      Breakpoints.extraLarge: SlotLayout.from(\n        key: const Key('Body ExtraLarge'),\n        builder: (_) =>\n            GridView.count(crossAxisCount: 5, children: children),\n      ),\n    },\n  ),\n  bottomNavigation: SlotLayout(\n    config: <Breakpoint, SlotLayoutConfig>{\n      Breakpoints.small: SlotLayout.from(\n        key: const Key('Bottom Navigation Small'),\n        inAnimation: AdaptiveScaffold.bottomToTop,\n        outAnimation: AdaptiveScaffold.topToBottom,\n        builder: (_) => AdaptiveScaffold.standardBottomNavigationBar(\n          destinations: destinations,\n          currentIndex: selectedNavigation,\n          onDestinationSelected: (int newIndex) {\n            setState(() {\n              selectedNavigation = newIndex;\n            });\n          },\n        ),\n      )\n    },\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Camera Delegate for Desktop Platforms\nDESCRIPTION: Shows how to configure a custom camera delegate implementation for desktop platforms where there's no built-in camera UI. This allows ImageSource.camera to work on Windows, macOS, and Linux.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker/README.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:image_picker_platform_interface/image_picker_platform_interface.dart';\n// ···\nclass MyCameraDelegate extends ImagePickerCameraDelegate {\n  @override\n  Future<XFile?> takePhoto(\n      {ImagePickerCameraDelegateOptions options =\n          const ImagePickerCameraDelegateOptions()}) async {\n    return _takeAPhoto(options.preferredCameraDevice);\n  }\n\n  @override\n  Future<XFile?> takeVideo(\n      {ImagePickerCameraDelegateOptions options =\n          const ImagePickerCameraDelegateOptions()}) async {\n    return _takeAVideo(options.preferredCameraDevice);\n  }\n}\n// ···\nvoid setUpCameraDelegate() {\n  final ImagePickerPlatform instance = ImagePickerPlatform.instance;\n  if (instance is CameraDelegatingImagePickerPlatform) {\n    instance.cameraDelegate = MyCameraDelegate();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Authenticated API Client with Google Sign-In in Dart\nDESCRIPTION: This code demonstrates how to retrieve an AuthClient from a GoogleSignIn instance and use it to create an authenticated PeopleServiceApi client. It then makes a request to list connections with their names.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/extension_google_sign_in_as_googleapis_auth/README.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// Retrieve an [auth.AuthClient] from the current [GoogleSignIn] instance.\nfinal auth.AuthClient? client = await _googleSignIn.authenticatedClient();\n\nassert(client != null, 'Authenticated client missing!');\n\n// Prepare a People Service authenticated client.\nfinal PeopleServiceApi peopleApi = PeopleServiceApi(client!);\n// Retrieve a list of the `names` of my `connections`\nfinal ListConnectionsResponse response =\n    await peopleApi.people.connections.list(\n  'people/me',\n  personFields: 'names',\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Quick Actions in Flutter\nDESCRIPTION: This snippet demonstrates how to initialize the quick_actions plugin and set up a callback for handling quick action launches. The callback receives a shortcutType parameter to identify which action was triggered.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/quick_actions/quick_actions/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal QuickActions quickActions = const QuickActions();\nquickActions.initialize((shortcutType) {\n  if (shortcutType == 'action_main') {\n    print('The user tapped on the \"Main view\" action.');\n  }\n  // More handling code...\n});\n```\n\n----------------------------------------\n\nTITLE: Building Generated Route Files\nDESCRIPTION: Commands to generate the route files using build_runner\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/doc/type-safe-routes.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub global activate build_runner\nflutter pub run build_runner build\n```\n\n----------------------------------------\n\nTITLE: Implementing Fullscreen Video Handling in Dart for Android WebView\nDESCRIPTION: This snippet demonstrates how to handle fullscreen video display in an Android WebView using the AndroidWebViewController. It sets custom widget callbacks to manage the transition to and from fullscreen mode.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/webview_flutter/webview_flutter_android/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nandroidController.setCustomWidgetCallbacks(\n  onShowCustomWidget: (Widget widget, OnHideCustomWidgetCallback callback) {\n    Navigator.of(context).push(MaterialPageRoute<void>(\n      builder: (BuildContext context) => widget,\n      fullscreenDialog: true,\n    ));\n  },\n  onHideCustomWidget: () {\n    Navigator.of(context).pop();\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing GoogleSignIn in Dart\nDESCRIPTION: Dart code example showing how to initialize GoogleSignIn with client ID and optional server client ID parameters.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_sign_in/google_sign_in_ios/README.md#2025-04-22_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal GoogleSignIn googleSignIn = GoogleSignIn(\n  // The OAuth client id of your app. This is required.\n  clientId: 'Your Client ID',\n  // If you need to authenticate to a backend server, specify its OAuth client. This is optional.\n  serverClientId: 'Your Server ID',\n);\n```\n\n----------------------------------------\n\nTITLE: Checking OAuth Scope Authorization in Flutter with Platform Detection\nDESCRIPTION: Detects if the authenticated user has authorized the required scopes, with special handling for web platforms. On web, being authenticated doesn't automatically mean being authorized for specific scopes.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_sign_in/google_sign_in/README.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// In mobile, being authenticated means being authorized...\nbool isAuthorized = account != null;\n// However, on web...\nif (kIsWeb && account != null) {\n  isAuthorized = await _googleSignIn.canAccessScopes(scopes);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Build Method for Ad and Content Display\nDESCRIPTION: Creates the UI layout that includes both the ad display container and content video player. The implementation uses a Stack to overlay the ad container and content player, with conditional rendering to show content only when ads aren't playing.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/interactive_media_ads/README.md#2025-04-22_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    body: Center(\n      child: SizedBox(\n        width: 300,\n        child: !_contentVideoController.value.isInitialized\n            ? Container()\n            : AspectRatio(\n                aspectRatio: _contentVideoController.value.aspectRatio,\n                child: Stack(\n                  children: <Widget>[\n                    // The display container must be on screen before any Ads can be\n                    // loaded and can't be removed between ads. This handles clicks for\n                    // ads.\n                    _adDisplayContainer,\n                    if (_shouldShowContentVideo)\n                      VideoPlayer(_contentVideoController)\n                  ],\n                ),\n              ),\n      ),\n    ),\n    floatingActionButton:\n        _contentVideoController.value.isInitialized && _shouldShowContentVideo\n            ? FloatingActionButton(\n                onPressed: () {\n                  setState(() {\n                    _contentVideoController.value.isPlaying\n                        ? _contentVideoController.pause()\n                        : _contentVideoController.play();\n                  });\n                },\n                child: Icon(\n                  _contentVideoController.value.isPlaying\n                      ? Icons.pause\n                      : Icons.play_arrow,\n                ),\n              )\n            : null,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FlutterApi in Dart\nDESCRIPTION: This snippet demonstrates how to implement the FlutterApi in Dart to handle calls made to Flutter from the host platform.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/README.md#2025-04-22_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nclass _ExampleFlutterApi implements MessageFlutterApi {\n  @override\n  String flutterMethod(String? aString) {\n    return aString ?? '';\n  }\n}\n// ···\n  MessageFlutterApi.setUp(_ExampleFlutterApi());\n```\n\n----------------------------------------\n\nTITLE: Setting Shortcut Items for Quick Actions in Flutter\nDESCRIPTION: This code shows how to set up shortcut items for the quick actions menu. Each ShortcutItem has a unique type, a localized title, and an optional icon. The icon should reference a native resource name.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/quick_actions/quick_actions/README.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nquickActions.setShortcutItems(<ShortcutItem>[\n  const ShortcutItem(type: 'action_main', localizedTitle: 'Main view', icon: 'icon_main'),\n  const ShortcutItem(type: 'action_help', localizedTitle: 'Help', localizedSubtitle: 'Tap to get help', icon: 'icon_help')\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating an AdUnitWidget in Flutter\nDESCRIPTION: This code demonstrates how to create an AdUnitWidget with a display ad unit configuration in Flutter. It shows how HTML data attributes translate to Dart parameters.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_adsense/doc/ad_unit_widget.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n    AdUnitWidget(\n  configuration: AdUnitConfiguration.displayAdUnit(\n    // TODO: Replace with your Ad Unit ID\n    adSlot: '1234567890',\n    // Remove AdFormat to make ads limited by height\n    adFormat: AdFormat.AUTO,\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Adding Google Maps JavaScript API to Web Application\nDESCRIPTION: Adds the Google Maps JavaScript API script to the HTML head section in web applications. This is required to enable Google Maps functionality in Flutter web apps.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_maps_flutter/google_maps_flutter/README.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY\"></script>\n```\n\n----------------------------------------\n\nTITLE: Updating MainActivity for Android Integration in Kotlin\nDESCRIPTION: This Kotlin code demonstrates how to update the MainActivity class to inherit from FlutterFragmentActivity for proper local_auth integration on Android.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth/README.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.flutter.embedding.android.FlutterFragmentActivity\n\nclass MainActivity: FlutterFragmentActivity() {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Routes with GoRouter in Dart\nDESCRIPTION: Shows how to configure child routes in GoRouter. When navigating to '/details', a details screen is displayed on top of the home screen with a transition animation.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/doc/configuration.md#2025-04-22_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nGoRoute(\n  path: '/',\n  builder: (context, state) {\n    return HomeScreen();\n  },\n  routes: [\n    GoRoute(\n      path: 'details',\n      builder: (context, state) {\n        return DetailsScreen();\n      },\n    ),\n  ],\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Internet Permission to Android Manifest\nDESCRIPTION: This XML snippet shows how to add the INTERNET permission to the Android Manifest file, which is necessary for using network-based videos on Android.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/video_player/video_player/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.INTERNET\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Ad Request and Content Management Methods\nDESCRIPTION: Defines methods for requesting ads and managing content playback, including handling transitions between ad and content states. It implements content progress tracking required for mid-roll ads and properly pauses/resumes content when ads are playing.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/interactive_media_ads/README.md#2025-04-22_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _requestAds(AdDisplayContainer container) {\n  return _adsLoader.requestAds(AdsRequest(\n    adTagUrl: _adTagUrl,\n    contentProgressProvider: _contentProgressProvider,\n  ));\n}\n\nFuture<void> _resumeContent() async {\n  setState(() {\n    _shouldShowContentVideo = true;\n  });\n\n  if (_adsManager != null) {\n    _contentProgressTimer = Timer.periodic(\n      const Duration(milliseconds: 200),\n      (Timer timer) async {\n        if (_contentVideoController.value.isInitialized) {\n          final Duration? progress = await _contentVideoController.position;\n          if (progress != null) {\n            await _contentProgressProvider.setProgress(\n              progress: progress,\n              duration: _contentVideoController.value.duration,\n            );\n          }\n        }\n      },\n    );\n  }\n\n  await _contentVideoController.play();\n}\n\nFuture<void> _pauseContent() {\n  setState(() {\n    _shouldShowContentVideo = false;\n  });\n  _contentProgressTimer?.cancel();\n  _contentProgressTimer = null;\n  return _contentVideoController.pause();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Parameters in GoRouter Routes in Dart\nDESCRIPTION: Demonstrates how to access query string parameters from the GoRouterState object. The query parameter is retrieved using state.uri.queryParameters.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/doc/configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nGoRoute(\n  path: '/users',\n  builder: (context, state) => const UsersScreen(filter: state.uri.queryParameters['filter']),\n),\n```\n\n----------------------------------------\n\nTITLE: Managing Subscription Introductory Pricing with Google Play Billing Library v6 in Dart\nDESCRIPTION: Demonstrates how to identify and process introductory pricing for subscriptions using the updated API. This code examines multiple pricing phases to determine if an introductory price (lower than the regular price) is being offered.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/in_app_purchase/in_app_purchase_android/migration_guide.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n/// Handles the introductory price period of a subscription.\nvoid handleIntroductoryPricePeriod(ProductDetails productDetails) {\n  if (productDetails is GooglePlayProductDetails) {\n    final ProductDetailsWrapper product = productDetails.productDetails;\n    if (product.productType == ProductType.subs) {\n      // Unwrapping is safe because the product is a subscription.\n      final SubscriptionOfferDetailsWrapper offer =\n          product.subscriptionOfferDetails![productDetails.subscriptionIndex!];\n      final List<PricingPhaseWrapper> pricingPhases = offer.pricingPhases;\n      if (pricingPhases.length >= 2 &&\n          pricingPhases.first.priceAmountMicros <\n              pricingPhases[1].priceAmountMicros) {\n        // Introductory pricing period logic.\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Platform Interface Base Class in Dart\nDESCRIPTION: Example implementation of a sample plugin platform interface that extends PlatformInterface. Shows how to set up the base class with token verification and instance management to ensure proper extension rather than implementation.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/plugin_platform_interface/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nabstract class SamplePluginPlatform extends PlatformInterface {\n  SamplePluginPlatform() : super(token: _token);\n\n  static final Object _token = Object();\n\n  // A plugin can have a default implementation, as shown here, or `instance`\n  // can be nullable, and the default instance can be null.\n  static SamplePluginPlatform _instance = SamplePluginDefault();\n\n  static SamplePluginPlatform get instance => _instance;\n\n  /// Platform-specific implementations should set this to their own\n  /// platform-specific class that extends [SamplePluginPlatform] when they\n  /// register themselves.\n  static set instance(SamplePluginPlatform instance) {\n    PlatformInterface.verify(instance, _token);\n    _instance = instance;\n  }\n\n  // Methods for the plugin's platform interface would go here, often with\n  // implementations that throw UnimplementedError.\n}\n\nclass SamplePluginDefault extends SamplePluginPlatform {\n  // A default real implementation of the platform interface would go here.\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Map and List Arguments in LocalWidgetBuilder\nDESCRIPTION: This snippet demonstrates how to use isMap and isList methods to check the type of arguments, and how to handle different data structures in a LocalWidgetBuilder.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/README.md#2025-04-22_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n'Foo': (BuildContext context, DataSource source) {\n  if (source.isMap(<Object>['bar'])) {\n    return Text('${source.v<String>(<Object>['bar', 'name'])}', textDirection: TextDirection.ltr);\n  }\n  return Text('${source.v<String>(<Object>['bar'])}', textDirection: TextDirection.ltr);\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring Pigeon Options in Dart\nDESCRIPTION: This snippet shows how to configure Pigeon options at the top of a Dart input file. It specifies output paths and options for various target languages.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n@ConfigurePigeon(PigeonOptions(\n  dartOut: 'lib/src/messages.g.dart',\n  dartOptions: DartOptions(),\n  cppOptions: CppOptions(namespace: 'pigeon_example'),\n  cppHeaderOut: 'windows/runner/messages.g.h',\n  cppSourceOut: 'windows/runner/messages.g.cpp',\n  gobjectHeaderOut: 'linux/messages.g.h',\n  gobjectSourceOut: 'linux/messages.g.cc',\n  gobjectOptions: GObjectOptions(),\n  kotlinOut:\n      'android/app/src/main/kotlin/dev/flutter/pigeon_example_app/Messages.g.kt',\n  kotlinOptions: KotlinOptions(),\n  javaOut: 'android/app/src/main/java/io/flutter/plugins/Messages.java',\n  javaOptions: JavaOptions(),\n  swiftOut: 'ios/Runner/Messages.g.swift',\n  swiftOptions: SwiftOptions(),\n  objcHeaderOut: 'macos/Runner/messages.g.h',\n  objcSourceOut: 'macos/Runner/messages.g.m',\n  // Set this to a unique prefix for your plugin or application, per Objective-C naming conventions.\n  objcOptions: ObjcOptions(prefix: 'PGN'),\n  copyrightHeader: 'pigeons/copyright.txt',\n  dartPackageName: 'pigeon_example_package',\n))\n```\n\n----------------------------------------\n\nTITLE: Reading XDG Directory Configuration API Reference\nDESCRIPTION: Core API methods and properties for accessing XDG directory configurations on Linux systems. Includes methods for accessing standard XDG paths like data, config, cache directories and user-specific directory locations.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/xdg_directories/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\ndataHome     // $XDG_DATA_HOME path\nconfigHome   // $XDG_CONFIG_HOME path\ndataDirs     // $XDG_DATA_DIRS paths list\nconfigDirs   // $XDG_CONFIG_DIRS paths list\ncacheHome    // $XDG_CACHE_HOME path\nruntimeDir   // $XDG_RUNTIME_DIR path\n\ngetUserDirectoryNames()           // Get set of defined user directory names\ngetUserDirectory(String dirName)  // Get specific user directory path\n```\n\n----------------------------------------\n\nTITLE: Configuring AdSense with Additional Parameters in Dart\nDESCRIPTION: Advanced initialization of AdSense with custom code parameters. This example demonstrates how to set adbreakTest and adFrequencyHint parameters for regulatory compliance and ad frequency control.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_adsense/doc/initialization.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nawait adSense.initialize(\n  '0123456789012345',\n  adSenseCodeParameters: AdSenseCodeParameters(\n    adbreakTest: 'on',\n    adFrequencyHint: '30s',\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Using SharedPreferencesWithCache in Dart\nDESCRIPTION: This snippet demonstrates how to use the SharedPreferencesWithCache API, including creation with options, reading, writing, removing, and clearing preferences.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences/README.md#2025-04-22_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nfinal SharedPreferencesWithCache prefsWithCache =\n    await SharedPreferencesWithCache.create(\n  cacheOptions: const SharedPreferencesWithCacheOptions(\n    // When an allowlist is included, any keys that aren't included cannot be used.\n    allowList: <String>{'repeat', 'action'},\n  ),\n);\n\nawait prefsWithCache.setBool('repeat', true);\nawait prefsWithCache.setString('action', 'Start');\n\nfinal bool? repeat = prefsWithCache.getBool('repeat');\nfinal String? action = prefsWithCache.getString('action');\n\nawait prefsWithCache.remove('repeat');\n\n// Since the filter options are set at creation, they aren't needed during clear.\nawait prefsWithCache.clear();\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Adaptive Layout Examples\nDESCRIPTION: Set of Flutter CLI commands to run different examples demonstrating AdaptiveLayout and AdaptiveScaffold functionality, including basic usage, full implementations, and integration with GoRouter for advanced scenarios.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_adaptive_scaffold/example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflutter run\n```\n\nLANGUAGE: shell\nCODE:\n```\nflutter run lib/adaptive_layout_demo.dart\n```\n\nLANGUAGE: shell\nCODE:\n```\nflutter run lib/adaptive_scaffold_demo.dart\n```\n\nLANGUAGE: shell\nCODE:\n```\nflutter run lib/go_router_demo.dart\n```\n\n----------------------------------------\n\nTITLE: Setting Default QuickActionsPlatform in Flutter\nDESCRIPTION: This code snippet demonstrates how to set the default QuickActionsPlatform instance when implementing a new platform-specific version of the quick_actions plugin. It's crucial for ensuring that the plugin uses the correct platform-specific implementation.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/quick_actions/quick_actions_platform_interface/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nQuickActionsPlatform.instance = MyPlatformQuickActions()\n```\n\n----------------------------------------\n\nTITLE: Presenting Code Redemption Sheet on iOS 14+ (Dart)\nDESCRIPTION: Demonstrates how to present the code redemption sheet for offer codes on iOS 14 and later using InAppPurchaseStoreKitPlatformAddition.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/in_app_purchase/in_app_purchase/README.md#2025-04-22_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nInAppPurchaseStoreKitPlatformAddition iosPlatformAddition =\n  InAppPurchase.getPlatformAddition<InAppPurchaseStoreKitPlatformAddition>();\niosPlatformAddition.presentCodeRedemptionSheet();\n```\n\n----------------------------------------\n\nTITLE: Accessing Scalar Values from DataSource in Dart\nDESCRIPTION: This code shows how to access scalar values from the DataSource object in a LocalWidgetBuilder. It demonstrates using the v method with a path of keys to retrieve a specific value.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/README.md#2025-04-22_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n'Foo': (BuildContext context, DataSource source) {\n  return Text(source.v<String>(<Object>['bar', 'quux', 2])!);\n},\n```\n\n----------------------------------------\n\nTITLE: Setting Video Player Platform Instance\nDESCRIPTION: Example of how to register a custom platform-specific implementation of the video player by setting the default VideoPlayerPlatform instance.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/video_player/video_player_platform_interface/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nVideoPlayerPlatform.instance = MyPlatformVideoPlayer()\n```\n\n----------------------------------------\n\nTITLE: Implementing a Flutter Markdown Demo Application in Dart\nDESCRIPTION: A sample Flutter application that demonstrates how to use the flutter_markdown package to render markdown content in a Flutter app. The code creates a simple Material app with a Markdown widget in the body that renders predefined markdown content.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_markdown/example/assets/markdown_test_page.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:flutter_markdown/flutter_markdown.dart';\nimport 'package:markdown/markdown.dart' as md;\n\nconst String _markdownData = \"\"\"\n# Markdown Example\nMarkdown allows you to easily include formatted text, images,\nand even formatted Dart code in your app.\n\"\"\";\n\nvoid main() {\n  runApp(\n    MaterialApp(\n      title: \"Markdown Demo\",\n      home: Scaffold(\n        appBar: AppBar(\n          title: const Text('Markdown Demo'),\n        ),\n        body: SafeArea(\n          child: Markdown(\n            data: _markdownData,\n          ),\n        ),\n      ),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Breakpoint Comparison Operators in Flutter\nDESCRIPTION: Operator overrides for Breakpoint class that enable comparison between breakpoints using standard operators (>, <, >=, <=) and a between method to check if a breakpoint falls within a range.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_adaptive_scaffold/README.md#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n/// Returns true if this [Breakpoint] is greater than the given [Breakpoint].\nbool operator >(Breakpoint breakpoint)\n// ···\n/// Returns true if this [Breakpoint] is less than the given [Breakpoint].\nbool operator <(Breakpoint breakpoint)\n// ···\n/// Returns true if this [Breakpoint] is greater than or equal to the\n/// given [Breakpoint].\nbool operator >=(Breakpoint breakpoint)\n// ···\n/// Returns true if this [Breakpoint] is less than or equal to the\n/// given [Breakpoint].\nbool operator <=(Breakpoint breakpoint)\n// ···\n/// Returns true if this [Breakpoint] is between the given [Breakpoint]s.\nbool between(Breakpoint lower, Breakpoint upper)\n```\n\n----------------------------------------\n\nTITLE: Implementing WidgetsBindingObserver for Camera Lifecycle Management\nDESCRIPTION: Demonstrates how to use WidgetsBindingObserver to control camera resources on lifecycle changes in Flutter. This replaces the previous automatic handling of camera lifecycle on Android.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/camera/camera/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyHomePageState extends State<MyHomePage> with WidgetsBindingObserver {\n  @override\n  void didChangeAppLifecycleState(AppLifecycleState state) {\n    // Handle camera resources based on app lifecycle state\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from SharedPreferences to SharedPreferencesAsync/WithCache in Dart\nDESCRIPTION: This code shows how to migrate from the legacy SharedPreferences API to the newer SharedPreferencesAsync or SharedPreferencesWithCache APIs using a migration utility.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences/README.md#2025-04-22_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:shared_preferences/util/legacy_to_async_migration_util.dart';\n// ···\n    const SharedPreferencesOptions sharedPreferencesOptions =\n        SharedPreferencesOptions();\n    final SharedPreferences prefs = await SharedPreferences.getInstance();\n    await migrateLegacySharedPreferencesToSharedPreferencesAsyncIfNecessary(\n      legacySharedPreferencesInstance: prefs,\n      sharedPreferencesAsyncOptions: sharedPreferencesOptions,\n      migrationCompletedKey: 'migrationCompleted',\n    );\n```\n\n----------------------------------------\n\nTITLE: Building a StatefulShellRoute with IndexedStack in GoRouter for Dart\nDESCRIPTION: Demonstrates how to build a StatefulShellRoute using the indexedStack constructor. The builder function creates a custom shell that houses the navigation container.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/doc/configuration.md#2025-04-22_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nStatefulShellRoute.indexedStack(\n  builder: (BuildContext context, GoRouterState state,\n      StatefulNavigationShell navigationShell) {\n    // Return the widget that implements the custom shell (in this case\n    // using a BottomNavigationBar). The StatefulNavigationShell is passed\n    // to be able access the state of the shell and to navigate to other\n    // branches in a stateful way.\n    return ScaffoldWithNavBar(navigationShell: navigationShell);\n  },\n```\n\n----------------------------------------\n\nTITLE: Handling Specific Authentication Errors in Dart\nDESCRIPTION: This snippet demonstrates how to handle specific authentication errors, such as when biometrics are not enrolled or the device is locked out.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth/README.md#2025-04-22_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/services.dart';\nimport 'package:local_auth/error_codes.dart' as auth_error;\nimport 'package:local_auth/local_auth.dart';\n// ···\n  final LocalAuthentication auth = LocalAuthentication();\n  // ···\n    try {\n      final bool didAuthenticate = await auth.authenticate(\n          localizedReason: 'Please authenticate to show account balance',\n          options: const AuthenticationOptions(useErrorDialogs: false));\n      // ···\n    } on PlatformException catch (e) {\n      if (e.code == auth_error.notEnrolled) {\n        // Add handling of no hardware here.\n      } else if (e.code == auth_error.lockedOut ||\n          e.code == auth_error.permanentlyLockedOut) {\n        // ...\n      } else {\n        // ...\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Loading iOS Asset Images in Flutter with IosPlatformImages\nDESCRIPTION: Demonstrates how to load an image from iOS's Assets.xcassets in a Flutter application. This code uses the IosPlatformImages.load() method to access an image named 'flutter' in the xcassets catalog.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/ios_platform_images/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// \"flutter\" is a resource in Assets.xcassets.\nfinal Image xcassetImage = Image(\n  image: IosPlatformImages.load('flutter'),\n  semanticLabel: 'Flutter logo',\n);\n```\n\n----------------------------------------\n\nTITLE: Iterating Over List Arguments in LocalWidgetBuilder\nDESCRIPTION: This code shows how to use the length method to iterate over list arguments in a LocalWidgetBuilder, demonstrating how to handle dynamic list data.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/README.md#2025-04-22_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n'Foo': (BuildContext context, DataSource source) {\n  final int length = source.length(<Object>['text']);\n  if (length > 0) {\n    final StringBuffer text = StringBuffer();\n    for (int index = 0; index < length; index += 1) {\n      text.write(source.v<String>(<Object>['text', index]));\n    }\n    return Text(text.toString(), textDirection: TextDirection.ltr);\n  }\n  return const Text('<empty>', textDirection: TextDirection.ltr);\n},\n```\n\n----------------------------------------\n\nTITLE: Defining a Typed Route Class in Dart\nDESCRIPTION: Shows how to define a typed route class extending GoRouteData with a build method.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router_builder/README.md#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass HomeRoute extends GoRouteData {\n  const HomeRoute();\n\n  @override\n  Widget build(BuildContext context, GoRouterState state) => const HomeScreen();\n}\n```\n\n----------------------------------------\n\nTITLE: Calculator Button Widget Definition\nDESCRIPTION: Implementation of a calculator button widget with padding and sizing configurations.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/README.md#2025-04-22_snippet_12\n\nLANGUAGE: rfwtxt\nCODE:\n```\nwidget CalculatorButton = Padding(\n  padding: [8.0],\n  child: SizedBox(\n    width: 100.0,\n    height: 100.0,\n    child: Button(\n      child: FittedBox(child: Text(text: args.label)),\n      onPressed: args.onPressed,\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing FlutterApi in Kotlin\nDESCRIPTION: This snippet demonstrates how to implement the FlutterApi in Kotlin to make calls to Flutter from the host platform.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/README.md#2025-04-22_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate class PigeonFlutterApi(binding: FlutterPlugin.FlutterPluginBinding) {\n  var flutterApi: MessageFlutterApi? = null\n\n  init {\n    flutterApi = MessageFlutterApi(binding.binaryMessenger)\n  }\n\n  fun callFlutterMethod(aString: String, callback: (Result<String>) -> Unit) {\n    flutterApi!!.flutterMethod(aString) { echo -> callback(echo) }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AdSense with Publisher ID in Dart\nDESCRIPTION: Basic initialization of AdSense with your Publisher ID. This code should be placed in your main application entry point before running the app to ensure AdSense is initialized properly.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_adsense/doc/initialization.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:google_adsense/google_adsense.dart';\n\nvoid main() async {\n  // Call `initialize` with your Publisher ID (pub-0123456789012345)\n  // (See: https://support.google.com/adsense/answer/105516)\n  await adSense.initialize('0123456789012345');\n\n  runApp(const MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with PointerInterceptor in Flutter\nDESCRIPTION: This snippet illustrates how to use the 'intercepting' property of PointerInterceptor to conditionally render the widget based on a boolean value, avoiding the need for manual if/else statements in the widget tree.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pointer_interceptor/pointer_interceptor/README.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nreturn PointerInterceptor(\n  intercepting: someCondition,\n  child: ElevatedButton(...),\n)\n```\n\n----------------------------------------\n\nTITLE: Encoding Messages with StandardMessageCodec in Dart\nDESCRIPTION: Example showing how to encode a message using Flutter's StandardMessageCodec. Demonstrates encoding a map with mixed value types into binary format.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/standard_message_codec/README.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  final ByteData? data =\n      const StandardMessageCodec().encodeMessage(<Object, Object>{\n    'foo': true,\n    3: 'fizz',\n  });\n  print('The encoded message is $data');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HostApi in Swift\nDESCRIPTION: This snippet shows how to implement the HostApi in Swift to receive calls from Flutter, including error handling using PigeonError.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/README.md#2025-04-22_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nprivate class PigeonApiImplementation: ExampleHostApi {\n  func getHostLanguage() throws -> String {\n    return \"Swift\"\n  }\n\n  func add(_ a: Int64, to b: Int64) throws -> Int64 {\n    if a < 0 || b < 0 {\n      throw PigeonError(code: \"code\", message: \"message\", details: \"details\")\n    }\n    return a + b\n  }\n\n  func sendMessage(message: MessageData, completion: @escaping (Result<Bool, Error>) -> Void) {\n    if message.code == Code.one {\n      completion(.failure(PigeonError(code: \"code\", message: \"message\", details: \"details\")))\n      return\n    }\n    completion(.success(true))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic GoRoute in Dart\nDESCRIPTION: Demonstrates how to define a basic GoRoute with path parameters and parsing.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router_builder/README.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nGoRoute(\n  path: ':familyId',\n  builder: (BuildContext context, GoRouterState state) {\n    // Require the familyId to be present and be an integer.\n    final int familyId = int.parse(state.pathParameters['familyId']!);\n    return FamilyScreen(familyId);\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Dynamic Routes in GoRouter in Dart\nDESCRIPTION: Shows how to update routes dynamically after creating a GoRouter with routingConfig. The changes are automatically picked up by the router when the ValueNotifier's value is modified.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/doc/configuration.md#2025-04-22_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nmyRoutingConfig.value = RoutingConfig(\n  routes: <RouteBase>[\n    GoRoute(path: '/', builder: (_, __) => AlternativeHomeScreen()),\n    GoRoute(path: '/a-new-route', builder: (_, __) => SomeScreen()),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Disposing Resources in Flutter for Interactive Media Ads\nDESCRIPTION: This snippet demonstrates how to properly dispose of resources used by the Interactive Media Ads SDK in a Flutter application. It cancels timers, disposes of video controllers, and destroys the AdsManager.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/interactive_media_ads/README.md#2025-04-22_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid dispose() {\n  super.dispose();\n  _contentProgressTimer?.cancel();\n  _contentVideoController.dispose();\n  _adsManager?.destroy();\n  // ···\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging in GoRouter\nDESCRIPTION: Demonstrates how to initialize a GoRouter instance with debug logging enabled. The debugLogDiagnostics parameter is set to true to output diagnostic information during routing.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/doc/configuration.md#2025-04-22_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nfinal _router = GoRouter(\n  routes: [/* ... */],\n  debugLogDiagnostics: true,\n);\n```\n\n----------------------------------------\n\nTITLE: Activating Lint Rules in analysis_options.yaml\nDESCRIPTION: Demonstrates the configuration needed in analysis_options.yaml to enable the lint rules provided by flutter_lints package\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_lints/example/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ninclude: package:flutter_lints/flutter.yaml\n```\n\n----------------------------------------\n\nTITLE: Starting Camera Image Stream in Flutter\nDESCRIPTION: Code snippet demonstrating how to access and process the camera image stream from Dart in Flutter. This functionality was added in version 0.2.8 of the camera package.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/camera/camera/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\ncameraController.startImageStream(listener)\n```\n\n----------------------------------------\n\nTITLE: Displaying Captured Images on Web Platform in Flutter\nDESCRIPTION: Code example showing how to properly display captured images based on platform type (web vs native). For web, Image.network is used with the blob URL path, while native platforms use Image.file with the file system path.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/camera/camera_web/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal Image image;\nif (kIsWeb) {\n  image = Image.network(capturedImage.path);\n} else {\n  image = Image.file(File(capturedImage.path));\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Flutter Asset Images in iOS Swift Code\nDESCRIPTION: Shows how to access Flutter assets from iOS native code. The example creates a UIImageView by loading a Flutter image asset using the UIImage.flutterImageWithName extension method provided by the plugin.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/ios_platform_images/README.md#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport ios_platform_images\n\nfunc makeImage() -> UIImageView {\n    let image = UIImage.flutterImageWithName(\"assets/foo.png\")\n    return UIImageView(image: image)\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Flutter App with Markdown Widget\nDESCRIPTION: Dart code example showing how to implement a basic Flutter application that renders Markdown content using the Markdown widget inside a MaterialApp.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_markdown/example/assets/original_markdown_example_data.md#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  runApp(MaterialApp(\n    home: Scaffold(\n      body: Markdown(data: markdownData),\n    ),\n  ));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HostApi in Dart\nDESCRIPTION: This snippet demonstrates how to use the generated Dart code to make calls from Flutter to the host platform, including error handling.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/README.md#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal ExampleHostApi _api = ExampleHostApi();\n\n/// Calls host method `add` with provided arguments.\nFuture<int> add(int a, int b) async {\n  try {\n    return await _api.add(a, b);\n  } catch (e) {\n    // handle error.\n    return 0;\n  }\n}\n\n/// Sends message through host api using `MessageData` class\n/// and api `sendMessage` method.\nFuture<bool> sendMessage(String messageText) {\n  final MessageData message = MessageData(\n    code: Code.one,\n    data: <String, String>{'header': 'this is a header'},\n    description: 'uri text',\n  );\n  try {\n    return _api.sendMessage(message);\n  } catch (e) {\n    // handle error.\n    return Future<bool>(() => true);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Location in GoRouter for Dart\nDESCRIPTION: Shows how to specify the initial location for a GoRouter. This location is shown when the app first opens and there is no deep link provided by the platform.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/doc/configuration.md#2025-04-22_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nGoRouter(\n  initialLocation: '/details',\n  /* ... */\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Biometric Permissions to Android Manifest\nDESCRIPTION: This XML snippet demonstrates how to add the USE_BIOMETRIC permission to the Android manifest file for biometric authentication support.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth/README.md#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n          package=\"com.example.app\">\n  <uses-permission android:name=\"android.permission.USE_BIOMETRIC\"/>\n<manifest>\n```\n\n----------------------------------------\n\nTITLE: Handling Authentication Errors without Default Dialogs in Dart\nDESCRIPTION: This snippet shows how to handle authentication errors manually without using the default error dialogs provided by the local_auth plugin.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth/README.md#2025-04-22_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:local_auth/error_codes.dart' as auth_error;\n// ···\n    try {\n      final bool didAuthenticate = await auth.authenticate(\n          localizedReason: 'Please authenticate to show account balance',\n          options: const AuthenticationOptions(useErrorDialogs: false));\n      // ···\n    } on PlatformException catch (e) {\n      if (e.code == auth_error.notAvailable) {\n        // Add handling of no hardware here.\n      } else if (e.code == auth_error.notEnrolled) {\n        // ...\n      } else {\n        // ...\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Breakpoints in Flutter Adaptive Layout\nDESCRIPTION: Definition of Breakpoint constructors for different screen sizes (standard, small, medium, mediumLarge, large, extraLarge). Each breakpoint defines width/height constraints, spacing, margins, and recommended pane counts.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_adaptive_scaffold/README.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n/// Returns a const [Breakpoint] with the given constraints.\nconst Breakpoint({\n  this.beginWidth,\n  this.endWidth,\n  this.beginHeight,\n  this.endHeight,\n  this.andUp = false,\n  this.platform,\n  this.spacing = kMaterialMediumAndUpSpacing,\n  this.margin = kMaterialMediumAndUpMargin,\n  this.padding = kMaterialPadding,\n  this.recommendedPanes = 1,\n  this.maxPanes = 1,\n});\n\n/// Returns a [Breakpoint] that can be used as a fallthrough in the\n/// case that no other breakpoint is active.\nconst Breakpoint.standard({this.platform})\n    : beginWidth = -1,\n      endWidth = null,\n      beginHeight = null,\n      endHeight = null,\n      spacing = kMaterialMediumAndUpSpacing,\n      margin = kMaterialMediumAndUpMargin,\n      padding = kMaterialPadding,\n      recommendedPanes = 1,\n      maxPanes = 1,\n      andUp = true;\n\n/// Returns a [Breakpoint] with the given constraints for a small screen.\nconst Breakpoint.small({this.andUp = false, this.platform})\n    : beginWidth = 0,\n      endWidth = 600,\n      beginHeight = null,\n      endHeight = 480,\n      spacing = kMaterialCompactSpacing,\n      margin = kMaterialCompactMargin,\n      padding = kMaterialPadding,\n      recommendedPanes = 1,\n      maxPanes = 1;\n\n/// Returns a [Breakpoint] with the given constraints for a medium screen.\nconst Breakpoint.medium({this.andUp = false, this.platform})\n    : beginWidth = 600,\n      endWidth = 840,\n      beginHeight = 480,\n      endHeight = 900,\n      spacing = kMaterialMediumAndUpSpacing,\n      margin = kMaterialMediumAndUpMargin,\n      padding = kMaterialPadding * 2,\n      recommendedPanes = 1,\n      maxPanes = 2;\n\n/// Returns a [Breakpoint] with the given constraints for a mediumLarge screen.\nconst Breakpoint.mediumLarge({this.andUp = false, this.platform})\n    : beginWidth = 840,\n      endWidth = 1200,\n      beginHeight = 900,\n      endHeight = null,\n      spacing = kMaterialMediumAndUpSpacing,\n      margin = kMaterialMediumAndUpMargin,\n      padding = kMaterialPadding * 3,\n      recommendedPanes = 2,\n      maxPanes = 2;\n\n/// Returns a [Breakpoint] with the given constraints for a large screen.\nconst Breakpoint.large({this.andUp = false, this.platform})\n    : beginWidth = 1200,\n      endWidth = 1600,\n      beginHeight = 900,\n      endHeight = null,\n      spacing = kMaterialMediumAndUpSpacing,\n      margin = kMaterialMediumAndUpMargin,\n      padding = kMaterialPadding * 4,\n      recommendedPanes = 2,\n      maxPanes = 2;\n\n/// Returns a [Breakpoint] with the given constraints for an extraLarge screen.\nconst Breakpoint.extraLarge({this.andUp = false, this.platform})\n    : beginWidth = 1600,\n      endWidth = null,\n      beginHeight = 900,\n      endHeight = null,\n      spacing = kMaterialMediumAndUpSpacing,\n      margin = kMaterialMediumAndUpMargin,\n      padding = kMaterialPadding * 5,\n      recommendedPanes = 2,\n      maxPanes = 3;\n```\n\n----------------------------------------\n\nTITLE: Importing Required Packages for IMA SDK Integration\nDESCRIPTION: Imports the necessary packages for implementing the Interactive Media Ads SDK, including the interactive_media_ads plugin and video_player for content playback.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/interactive_media_ads/README.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:interactive_media_ads/interactive_media_ads.dart';\nimport 'package:video_player/video_player.dart';\n```\n\n----------------------------------------\n\nTITLE: Row Widget Implementation with Multiple Properties\nDESCRIPTION: Comprehensive Row widget implementation showing how to handle multiple properties including alignment, direction, and child list.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/README.md#2025-04-22_snippet_10\n\nLANGUAGE: rfwtxt\nCODE:\n```\n'Row': (BuildContext context, DataSource source) {\n  return Row(\n    mainAxisAlignment: ArgumentDecoders.enumValue<MainAxisAlignment>(MainAxisAlignment.values, source, ['mainAxisAlignment']) ?? MainAxisAlignment.start,\n    mainAxisSize: ArgumentDecoders.enumValue<MainAxisSize>(MainAxisSize.values, source, ['mainAxisSize']) ?? MainAxisSize.max,\n    crossAxisAlignment: ArgumentDecoders.enumValue<CrossAxisAlignment>(CrossAxisAlignment.values, source, ['crossAxisAlignment']) ?? CrossAxisAlignment.center,\n    textDirection: ArgumentDecoders.enumValue<TextDirection>(TextDirection.values, source, ['textDirection']),\n    verticalDirection: ArgumentDecoders.enumValue<VerticalDirection>(VerticalDirection.values, source, ['verticalDirection']) ?? VerticalDirection.down,\n    textBaseline: ArgumentDecoders.enumValue<TextBaseline>(TextBaseline.values, source, ['textBaseline']),\n    children: source.childList(['children']),\n  );\n},\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Stream Handler in Kotlin\nDESCRIPTION: Defines an event listener class in Kotlin that handles different types of platform events and manages event sink.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/README.md#2025-04-22_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nclass EventListener : StreamEventsStreamHandler() {\n  private var eventSink: PigeonEventSink<PlatformEvent>? = null\n\n  override fun onListen(p0: Any?, sink: PigeonEventSink<PlatformEvent>) {\n    eventSink = sink\n  }\n\n  fun onIntEvent(event: Long) {\n    eventSink?.success(IntEvent(data = event))\n  }\n\n  fun onStringEvent(event: String) {\n    eventSink?.success(StringEvent(data = event))\n  }\n\n  fun onEventsDone() {\n    eventSink?.endOfStream()\n    eventSink = null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling App Lifecycle States for Camera in Dart\nDESCRIPTION: Dart code snippet demonstrating how to handle app lifecycle states to manage camera resources properly. This is crucial for preventing unexpected behavior when the app's state changes.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/camera/camera/README.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid didChangeAppLifecycleState(AppLifecycleState state) {\n  final CameraController? cameraController = controller;\n\n  // App state changed before we got the chance to initialize.\n  if (cameraController == null || !cameraController.value.isInitialized) {\n    return;\n  }\n\n  if (state == AppLifecycleState.inactive) {\n    cameraController.dispose();\n  } else if (state == AppLifecycleState.resumed) {\n    _initializeCameraController(cameraController.description);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Android Photo Picker in Flutter image_picker\nDESCRIPTION: Code snippet demonstrating how to enable the Android Photo Picker functionality before calling any image_picker APIs. This is required for Android 12 and below to use the Photo Picker, and is necessary for using the 'limit' functionality on any Android version.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker_android/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:image_picker_android/image_picker_android.dart';\nimport 'package:image_picker_platform_interface/image_picker_platform_interface.dart';\n// ···\n  final ImagePickerPlatform imagePickerImplementation =\n      ImagePickerPlatform.instance;\n  if (imagePickerImplementation is ImagePickerAndroid) {\n    imagePickerImplementation.useAndroidPhotoPicker = true;\n  }\n```\n\n----------------------------------------\n\nTITLE: Handling Return Values from Pushed Routes in Dart\nDESCRIPTION: Shows how to handle return values when pushing and popping routes using typed routing.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router_builder/README.md#2025-04-22_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nfinal bool? result =\n    await const FamilyRoute(fid: 'John').push<bool>(context);\n```\n\n----------------------------------------\n\nTITLE: Configuring Face ID Usage Description in iOS Info.plist\nDESCRIPTION: This XML snippet shows how to add the necessary Face ID usage description to the iOS Info.plist file for Face ID authentication.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth/README.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSFaceIDUsageDescription</key>\n<string>Why is my app authenticating using face id?</string>\n```\n\n----------------------------------------\n\nTITLE: Creating VideoPlayerController with Network URL in Dart\nDESCRIPTION: Example of creating a VideoPlayerController using a network URL and setting HTTP headers.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/video_player/video_player/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nVideoPlayerController controller = VideoPlayerController.network(\n  'https://example.com/video.mp4',\n  httpHeaders: {'Authorization': 'Bearer your_token_here'}\n);\n```\n\n----------------------------------------\n\nTITLE: Navigating to Named Route Using goNamed\nDESCRIPTION: Shows how to navigate to a named route using the goNamed method, including passing path parameters through a TextButton click handler.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/doc/named-routes.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nTextButton(\n  onPressed: () {\n    context.goNamed('song', pathParameters: {'songId': 123});\n  },\n  child: const Text('Go to song 2'),\n),\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Types for Google Sign-In\nDESCRIPTION: XML configuration for setting up URL schemes in iOS Info.plist to handle Google Sign-In authentication flow.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_sign_in/google_sign_in_ios/README.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Put me in the [my_project]/ios/Runner/Info.plist file -->\n<!-- Google Sign-in Section -->\n<key>CFBundleURLTypes</key>\n<array>\n\t<dict>\n\t\t<key>CFBundleTypeRole</key>\n\t\t<string>Editor</string>\n\t\t<key>CFBundleURLSchemes</key>\n\t\t<array>\n\t\t\t<!-- TODO Replace this value: -->\n\t\t\t<!-- Copied from GoogleService-Info.plist key REVERSED_CLIENT_ID -->\n\t\t\t<string>com.googleusercontent.apps.861823949799-vc35cprkp249096uujjn0vvnmcvjppkn</string>\n\t\t</array>\n\t</dict>\n</array>\n<!-- End of the Google Sign-in Section -->\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Route in GoRouter\nDESCRIPTION: Demonstrates how to configure a named route using GoRouter by specifying a name parameter along with the path and builder.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/doc/named-routes.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nGoRoute(\n   name: 'song',\n   path: 'songs/:songId',\n   builder: /* ... */,\n ),\n```\n\n----------------------------------------\n\nTITLE: iOS URL Scheme Configuration\nDESCRIPTION: XML configuration for iOS platform to enable URL scheme handling. Defines LSApplicationQueriesSchemes for SMS and telephone capabilities.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>LSApplicationQueriesSchemes</key>\n<array>\n  <string>sms</string>\n  <string>tel</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: File URL Handling in Flutter\nDESCRIPTION: Example of handling file URLs in Flutter applications, including existence checking before launching. Primarily intended for desktop platforms.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher/README.md#2025-04-22_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal String filePath = testFile.absolute.path;\nfinal Uri uri = Uri.file(filePath);\n\nif (!File(uri.toFilePath()).existsSync()) {\n  throw Exception('$uri does not exist!');\n}\nif (!await launchUrl(uri)) {\n  throw Exception('Could not launch $uri');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Delegation Pattern with Platform Interface in Flutter\nDESCRIPTION: Example showing how the app-facing AdsLoader class delegates to the platform implementation through the PlatformAdsLoader interface. This pattern allows platform-specific implementations while maintaining a consistent API for app developers.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/interactive_media_ads/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// App-facing class used by apps\nclass AdsLoader {\n  AdsLoader.fromPlatform(this.platform);\n  \n  final PlatformAdsLoader platform;\n  \n  Future<void> requestAds(AdsRequest request) {\n    return platform.requestAds(request);\n  }\n}\n\n// Platform interface class implemented by each platform\nabstract base class PlatformAdsLoader {\n  Future<void> requestAds(AdsRequest request);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Shop List View Implementation in RFW\nDESCRIPTION: A simple RFW implementation that creates a list of products using ListView and displays each product's name using a separate Product widget component.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/README.md#2025-04-22_snippet_17\n\nLANGUAGE: rfwtxt\nCODE:\n```\nimport core;\n\nwidget Shop = ListView(\n  children: [\n    Text(text: \"Products:\"),\n    ...for product in data.server.games:\n      Product(product: product)\n  ],\n);\n\nwidget Product = Text(text: args.product.name, softWrap: false, overflow: \"fade\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving One-Time Purchase Price with Google Play Billing Library v6 in Dart\nDESCRIPTION: Demonstrates how to obtain the price of a one-time purchase product using the updated API model. This example shows how to access price information through the ProductDetailsWrapper and OneTimePurchaseOfferDetailsWrapper classes.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/in_app_purchase/in_app_purchase_android/migration_guide.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n/// Handles the one time purchase price of a product.\nvoid handleOneTimePurchasePrice(ProductDetails productDetails) {\n  if (productDetails is GooglePlayProductDetails) {\n    final ProductDetailsWrapper product = productDetails.productDetails;\n    if (product.productType == ProductType.inapp) {\n      // Unwrapping is safe because the product is a one time purchase.\n      final OneTimePurchaseOfferDetailsWrapper offer =\n          product.oneTimePurchaseOfferDetails!;\n      final String price = offer.formattedPrice;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building a URI with Query Parameters for Navigation in Dart\nDESCRIPTION: Shows how to use the Uri class from the Dart standard library to construct a URL with query parameters for navigation.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/doc/navigation.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\ncontext.go(Uri(path: '/users/123', queryParameters: {'filter': 'abc'}).toString());\n```\n\n----------------------------------------\n\nTITLE: Creating a Container with CSS Orange Color in Dart\nDESCRIPTION: This snippet demonstrates how to use the CSSColors class to set the color of a Flutter Container to orange. It showcases the practical application of the CSS Colors package in a Flutter app.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/css_colors/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal Container orange = Container(color: CSSColors.orange);\n```\n\n----------------------------------------\n\nTITLE: URL Query Parameter Encoding in Dart\nDESCRIPTION: Implementation of URL query parameter encoding for special schemes like mailto. Includes a utility function for properly encoding parameters to handle spaces and special characters.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher/README.md#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nString? encodeQueryParameters(Map<String, String> params) {\n  return params.entries\n      .map((MapEntry<String, String> e) =>\n          '${Uri.encodeComponent(e.key)}=${Uri.encodeComponent(e.value)}')\n      .join('&');\n}\n// ···\n  final Uri emailLaunchUri = Uri(\n    scheme: 'mailto',\n    path: 'smith@example.com',\n    query: encodeQueryParameters(<String, String>{\n      'subject': 'Example Subject & Symbols are allowed!',\n    }),\n  );\n\n  launchUrl(emailLaunchUri);\n```\n\n----------------------------------------\n\nTITLE: Implementing Platform-Specific Pointer Interceptor\nDESCRIPTION: Example of how to set up a platform-specific implementation of the pointer_interceptor plugin by extending PointerInterceptorPlatform and registering it as the default instance.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pointer_interceptor/pointer_interceptor_platform_interface/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nPointerInterceptorPlatform.instance = MyPointerInterceptorPlatform()\n```\n\n----------------------------------------\n\nTITLE: Creating VideoPlayerController with Network URL Using Uri in Dart\nDESCRIPTION: Example of creating a VideoPlayerController using a network URL with the Uri type to avoid common mistakes with String URIs.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/video_player/video_player/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\nVideoPlayerController controller = VideoPlayerController.networkUrl(\n  Uri.parse('https://example.com/video.mp4')\n);\n```\n\n----------------------------------------\n\nTITLE: Disabling Browser History Tracking for a Specific Navigation in Dart\nDESCRIPTION: Demonstrates how to use the Router.neglect method to disable browser history tracking for a specific navigation action.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/doc/navigation.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nElevatedButton(\n  onPressed: () => Router.neglect(\n    context,\n    () => context.go('/destination'),\n  ),\n  child: ...\n),\n```\n\n----------------------------------------\n\nTITLE: Sample Game Data Structure for RFW Lists\nDESCRIPTION: Example JSON data structure for board games that can be parsed by RFW. Each game entry contains rating, user count, name, rank, link, and ID properties.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/README.md#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{ \"games\": [\n{\"rating\": 8.219, \"users-rated\": 16860, \"name\": \"Twilight Struggle\", \"rank\": 1, \"link\": \"/boardgame/12333/twilight-struggle\", \"id\": 12333},\n{\"rating\": 8.093, \"users-rated\": 11750, \"name\": \"Through the Ages: A Story of Civilization\", \"rank\": 2, \"link\": \"/boardgame/25613/through-ages-story-civilization\", \"id\": 25613},\n{\"rating\": 8.088, \"users-rated\": 34745, \"name\": \"Agricola\", \"rank\": 3, \"link\": \"/boardgame/31260/agricola\", \"id\": 31260},\n{\"rating\": 8.082, \"users-rated\": 8913, \"name\": \"Terra Mystica\", \"rank\": 4, \"link\": \"/boardgame/120677/terra-mystica\", \"id\": 120677},\n// ···\n```\n\n----------------------------------------\n\nTITLE: Customizing AdUnitWidget with Size Constraints in Flutter\nDESCRIPTION: This example shows how to wrap an AdUnitWidget in a Container with size constraints to control ad dimensions. It demonstrates best practices for ad sizing according to AdSense policies.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_adsense/doc/ad_unit_widget.md#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nContainer(\n  constraints:\n      const BoxConstraints(maxHeight: 100, maxWidth: 1200),\n  padding: const EdgeInsets.only(bottom: 10),\n  child: AdUnitWidget(\n    configuration: AdUnitConfiguration.displayAdUnit(\n      // TODO: Replace with your Ad Unit ID\n      adSlot: '1234567890',\n      // Do not use adFormat to make ad unit respect height constraint\n      // adFormat: AdFormat.AUTO,\n    ),\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Initializing Map Renderer for Google Maps Flutter Android\nDESCRIPTION: This code snippet shows how to initialize and request a specific map renderer for Google Maps Flutter Android. It uses the initializeWithRenderer method to request the latest renderer and stores the result in the mapRenderer variable.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_maps_flutter/google_maps_flutter_android/README.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nAndroidMapRenderer mapRenderer = AndroidMapRenderer.platformDefault;\n// ···\n  final GoogleMapsFlutterPlatform mapsImplementation =\n      GoogleMapsFlutterPlatform.instance;\n  if (mapsImplementation is GoogleMapsFlutterAndroid) {\n    WidgetsFlutterBinding.ensureInitialized();\n    mapRenderer = await mapsImplementation\n        .initializeWithRenderer(AndroidMapRenderer.latest);\n  }\n```\n\n----------------------------------------\n\nTITLE: Handling Subscription Free Trials with Google Play Billing Library v6 in Dart\nDESCRIPTION: Shows how to detect and handle free trial periods for subscription products in the new API model. The code checks if the first pricing phase has zero price, which indicates a free trial period.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/in_app_purchase/in_app_purchase_android/migration_guide.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n/// Handles the free trial period of a subscription.\nvoid handleFreeTrialPeriod(ProductDetails productDetails) {\n  if (productDetails is GooglePlayProductDetails) {\n    final ProductDetailsWrapper product = productDetails.productDetails;\n    if (product.productType == ProductType.subs) {\n      // Unwrapping is safe because the product is a subscription.\n      final SubscriptionOfferDetailsWrapper offer =\n          product.subscriptionOfferDetails![productDetails.subscriptionIndex!];\n      final List<PricingPhaseWrapper> pricingPhases = offer.pricingPhases;\n      if (pricingPhases.first.priceAmountMicros == 0) {\n        // Free trial period logic.\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Google Sign-In SDK on Demand in Dart\nDESCRIPTION: Shows how to use the loadWebSdk function to load the Google Sign-In SDK dynamically in a Flutter web application's main.dart file.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_identity_services_web/README.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:google_identity_services_web/loader.dart' as gis;\n// ···\nvoid main() async {\n  await gis.loadWebSdk(); // Load the GIS SDK\n  // The rest of your code...\n// ···\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HostApi Interface in Dart\nDESCRIPTION: This snippet shows the Dart code that defines the interface for calling from Flutter to the host platform, including enums, classes, and method definitions.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/README.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nenum Code { one, two }\n\nclass MessageData {\n  MessageData({required this.code, required this.data});\n  String? name;\n  String? description;\n  Code code;\n  Map<String, String> data;\n}\n\n@HostApi()\nabstract class ExampleHostApi {\n  String getHostLanguage();\n\n  // These annotations create more idiomatic naming of methods in Objc and Swift.\n  @ObjCSelector('addNumber:toNumber:')\n  @SwiftFunction('add(_:to:)')\n  int add(int a, int b);\n\n  @async\n  bool sendMessage(MessageData message);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Two Dimensional Scrollables Package in Flutter\nDESCRIPTION: Command to add the two_dimensional_scrollables package to a Flutter project using the Flutter CLI.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/two_dimensional_scrollables/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ flutter pub add two_dimensional_scrollables\n```\n\n----------------------------------------\n\nTITLE: Setting GIDClientID in iOS Info.plist\nDESCRIPTION: XML configuration for adding the Google Sign-In client ID to the iOS application's Info.plist file.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_sign_in/google_sign_in_ios/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n   <key>GIDClientID</key>\n   <!-- TODO Replace this value: -->\n   <!-- Copied from GoogleService-Info.plist key CLIENT_ID -->\n   <string>[YOUR IOS CLIENT ID]</string>\n```\n\n----------------------------------------\n\nTITLE: Android URL Scheme Configuration\nDESCRIPTION: Android manifest configuration for enabling URL scheme handling, including SMS, telephone, and in-app browser support for API level 30 and above.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Provide required visibility configuration for API level 30 and above -->\n<queries>\n  <!-- If your app checks for SMS support -->\n  <intent>\n    <action android:name=\"android.intent.action.VIEW\" />\n    <data android:scheme=\"sms\" />\n  </intent>\n  <!-- If your app checks for call support -->\n  <intent>\n    <action android:name=\"android.intent.action.VIEW\" />\n    <data android:scheme=\"tel\" />\n  </intent>\n  <!-- If your application checks for inAppBrowserView launch mode support -->\n  <intent>\n    <action android:name=\"android.support.customtabs.action.CustomTabsService\" />\n  </intent>\n</queries>\n```\n\n----------------------------------------\n\nTITLE: Defining Event Channel Interface in Dart\nDESCRIPTION: Defines the abstract class for event channel methods using Pigeon annotations.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/README.md#2025-04-22_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\n@EventChannelApi()\nabstract class EventChannelMethods {\n  PlatformEvent streamEvents();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding XML Configuration to Remove READ_EXTERNAL_STORAGE Permission in Android\nDESCRIPTION: XML snippet for removing the READ_EXTERNAL_STORAGE permission from the merged Android manifest if it's automatically added when WRITE_EXTERNAL_STORAGE is specified. This should be added to the app's AndroidManifest.xml file.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/camera/camera_android_camerax/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n  <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"\n    tools:node=\"remove\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering SVG Asset in Flutter\nDESCRIPTION: Demonstrates how to create an SVG rendering widget from an asset file. This snippet shows the basic usage of the SvgPicture.asset constructor.\nSOURCE: https://github.com/flutter/packages/blob/main/third_party/packages/flutter_svg/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nconst String assetName = 'assets/dart.svg';\nfinal Widget svg = SvgPicture.asset(\n  assetName,\n  semanticsLabel: 'Dart Logo',\n);\n```\n\n----------------------------------------\n\nTITLE: Defining an Error Route in Dart\nDESCRIPTION: Demonstrates how to define an error route for handling navigation errors.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router_builder/README.md#2025-04-22_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass ErrorRoute extends GoRouteData {\n  ErrorRoute({required this.error});\n  final Exception error;\n\n  @override\n  Widget build(BuildContext context, GoRouterState state) {\n    return ErrorScreen(error: error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Google Maps API with Multiple Libraries in HTML\nDESCRIPTION: Code to load Google Maps API with multiple libraries (drawing, visualization, places). Use this approach when your application requires functionality from multiple Google Maps libraries.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_maps_flutter/google_maps_flutter_web/README.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script\n  src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=drawing,visualization,places\">\n</script>\n```\n\n----------------------------------------\n\nTITLE: Returning a Value from a Route in Dart\nDESCRIPTION: Demonstrates how to return a value from a route using context.pop().\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/doc/navigation.md#2025-04-22_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nonTap: () => context.pop(true)\n```\n\n----------------------------------------\n\nTITLE: Customizing Authentication Messages in Dart\nDESCRIPTION: This code shows how to customize the messages displayed in authentication dialogs for Android and iOS platforms using the local_auth plugin.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth/README.md#2025-04-22_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:local_auth_android/local_auth_android.dart';\nimport 'package:local_auth_darwin/local_auth_darwin.dart';\n// ···\n    final bool didAuthenticate = await auth.authenticate(\n        localizedReason: 'Please authenticate to show account balance',\n        authMessages: const <AuthMessages>[\n          AndroidAuthMessages(\n            signInTitle: 'Oops! Biometric authentication required!',\n            cancelButton: 'No thanks',\n          ),\n          IOSAuthMessages(\n            cancelButton: 'No thanks',\n          ),\n        ]);\n```\n\n----------------------------------------\n\nTITLE: Adding XML Configuration for Background Image Streaming Permission in Android 14+\nDESCRIPTION: XML snippet for adding the FOREGROUND_SERVICE_CAMERA permission to the app's AndroidManifest.xml file, which is required for Android 14+ to allow image streaming in the background.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/camera/camera_android_camerax/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<manifest ...>\n  <uses-permission android:name=\"android.permission.FOREGROUND_SERVICE_CAMERA\" />\n  ...\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Implementing Route-Level Redirection in Dart\nDESCRIPTION: Demonstrates how to implement route-level redirection by overriding the redirect method.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router_builder/README.md#2025-04-22_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nclass RedirectRoute extends GoRouteData {\n  // There is no need to implement [build] when this [redirect] is unconditional.\n  @override\n  String? redirect(BuildContext context, GoRouterState state) {\n    return const HomeRoute().location;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default PathProviderPlatform in Dart\nDESCRIPTION: This code snippet demonstrates how to set the default PathProviderPlatform when implementing a new platform-specific version of the path_provider plugin. It shows the syntax for registering a custom implementation.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/path_provider/path_provider_platform_interface/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nPathProviderPlatform.instance = MyPlatformPathProvider();\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Vector Graphics in Flutter\nDESCRIPTION: This snippet shows the necessary import statements for using the vector_graphics package and other required Flutter libraries.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/vector_graphics/example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:vector_graphics/vector_graphics.dart';\nimport 'package:vector_graphics_compiler/vector_graphics_compiler.dart';\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Lints Package Reference in pubspec.yaml\nDESCRIPTION: Shows how to include flutter_lints package as a dev dependency in a Flutter project's pubspec.yaml file\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_lints/example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndev_dependencies:\n  flutter_lints: ^1.0.0\n```\n\n----------------------------------------\n\nTITLE: Adding Google Sign-In Client ID Meta Tag in HTML\nDESCRIPTION: Adds the necessary meta tag to the web/index.html file to specify your Google Sign-In OAuth client ID. This must be placed in the head section of the document.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_sign_in/google_sign_in_web/README.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"google-signin-client_id\" content=\"YOUR_GOOGLE_SIGN_IN_OAUTH_CLIENT_ID.apps.googleusercontent.com\">\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Named Route\nDESCRIPTION: Shows how to implement redirection to a named route using the namedLocation API within a redirect callback, based on authentication state.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/doc/named-routes.md#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nredirect: (BuildContext context, GoRouterState state) {\n  if (AuthState.of(context).isSignedIn) {\n    return context.namedLocation('signIn');\n  } else {\n    return null;\n  }   \n},\n```\n\n----------------------------------------\n\nTITLE: Configuring Android SharedPreferences Options in Dart\nDESCRIPTION: Example showing how to configure SharedPreferencesAsyncAndroidOptions for using Android SharedPreferences backend with custom file name settings. This code demonstrates setting up the storage backend and specifying a custom file name for the preferences.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences_android/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nconst SharedPreferencesAsyncAndroidOptions options =\n    SharedPreferencesAsyncAndroidOptions(\n        backend: SharedPreferencesAndroidBackendLibrary.SharedPreferences,\n        originalSharedPreferencesOptions: AndroidSharedPreferencesStoreOptions(\n            fileName: 'the_name_of_a_file'));\n```\n\n----------------------------------------\n\nTITLE: Implementing Stateful Button Widget with Animation in RFW\nDESCRIPTION: Defines a stateful Button widget that tracks press state and animates appearance changes. It uses GestureDetector to handle tap events and Container with conditional styling based on the button's state.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/README.md#2025-04-22_snippet_15\n\nLANGUAGE: rfwtxt\nCODE:\n```\nwidget Button { down: false } = GestureDetector(\n  onTap: args.onPressed,\n  onTapDown: set state.down = true,\n  onTapUp: set state.down = false,\n  onTapCancel: set state.down = false,\n  child: Container(\n    duration: 50,\n    margin: switch state.down {\n      false: [ 0.0, 0.0, 2.0, 2.0 ],\n      true: [ 2.0, 2.0, 0.0, 0.0 ],\n    },\n    padding: [ 12.0, 8.0 ],\n    decoration: {\n      type: \"shape\",\n      shape: {\n        type: \"stadium\",\n        side: { width: 1.0 },\n      },\n      gradient: {\n        type: \"linear\",\n        begin: { x: -0.5, y: -0.25 },\n        end: { x: 0.0, y: 0.5 },\n        colors: [ 0xFFFFFF99, 0xFFEEDD00 ],\n        stops: [ 0.0, 1.0 ],\n        tileMode: \"mirror\",\n      },\n      shadows: switch state.down {\n        false: [ { blurRadius: 4.0, spreadRadius: 0.5, offset: { x: 1.0, y: 1.0, } } ],\n        default: [],\n      },\n    },\n    child: DefaultTextStyle(\n      style: {\n        color: 0xFF000000,\n        fontSize: 32.0,\n      },\n      child: args.child,\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Stream Handler in Dart\nDESCRIPTION: Implements a generator function that processes platform events and yields string representations.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/README.md#2025-04-22_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nStream<String> getEventStream() async* {\n  final Stream<PlatformEvent> events = streamEvents();\n  await for (final PlatformEvent event in events) {\n    switch (event) {\n      case IntEvent():\n        final int intData = event.data;\n        yield '$intData, ';\n      case StringEvent():\n        final String stringData = event.data;\n        yield '$stringData, ';\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Theme for Biometric Dialog Compatibility\nDESCRIPTION: This XML snippet shows how to set up the Android theme in styles.xml to ensure compatibility with the biometric dialog on Android 8 and below.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth/README.md#2025-04-22_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<resources>\n  <style name=\"LaunchTheme\" parent=\"Theme.AppCompat.DayNight\">\n    ...\n  </style>\n  ...\n</resources>\n```\n\n----------------------------------------\n\nTITLE: Material Design Shop List with Interactive Elements in RFW\nDESCRIPTION: Enhanced version of the shop list using Material design components. Implements a Scaffold with AppBar and creates interactive ListTile items that trigger custom events when tapped.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/README.md#2025-04-22_snippet_18\n\nLANGUAGE: rfwtxt\nCODE:\n```\nimport core;\nimport material;\n\nwidget MaterialShop = Scaffold(\n  appBar: AppBar(\n    title: Text(text: ['Products']),\n  ),\n  body: ListView(\n    children: [\n      ...for product in data.server.games:\n        Product(product: product)\n    ],\n  ),\n);\n\nwidget Product = ListTile(\n  title: Text(text: args.product.name),\n  onTap: event 'shop.productSelect' { name: args.product.name, path: args.product.link },\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Read-Only File Access Entitlement for macOS\nDESCRIPTION: XML configuration for enabling read-only access to user-selected files in macOS applications. This entitlement must be added to allow the application to access files selected by the user.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_macos/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n\t<key>com.apple.security.files.user-selected.read-only</key>\n\t<true/>\n```\n\n----------------------------------------\n\nTITLE: Adding Required Android Permissions for IMA SDK in AndroidManifest.xml\nDESCRIPTION: Adds the required permissions for the IMA SDK in the Android manifest file, specifically internet and network state access which are necessary for requesting ads.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/interactive_media_ads/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <!-- Required permissions for the IMA SDK -->\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/>\n```\n\n----------------------------------------\n\nTITLE: Removing an Entry with SharedPreferences in Dart\nDESCRIPTION: This snippet demonstrates how to remove a specific entry from SharedPreferences in Flutter.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences/README.md#2025-04-22_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n// Remove data for the 'counter' key.\nawait prefs.remove('counter');\n```\n\n----------------------------------------\n\nTITLE: Setting WebView Over-Scroll Mode in Flutter\nDESCRIPTION: Adds support to set the over-scroll mode for the WebView using PlatformWebViewController.setOverScrollMode. This feature is available from version 2.11.0.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/webview_flutter/webview_flutter_platform_interface/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.11.0\n\n* Adds support to set the over-scroll mode for the WebView. See `PlatformWebViewController.setOverScrollMode`.\n* Updates minimum supported SDK version to Flutter 3.22/Dart 3.4.\n```\n\n----------------------------------------\n\nTITLE: Using PointerInterceptor to Wrap a Button in Flutter\nDESCRIPTION: This snippet demonstrates how to use the PointerInterceptor widget to wrap a button element directly, ensuring that mouse events are not captured by underlying platform views.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pointer_interceptor/pointer_interceptor/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nPointerInterceptor(\n  child: ElevatedButton(...),\n)\n```\n\n----------------------------------------\n\nTITLE: Inserting Google Sign-In SDK Script in HTML\nDESCRIPTION: Demonstrates how to include the Google Sign-In SDK script in the <head> section of the web/index.html file for optimal performance.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_identity_services_web/README.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n<!-- ··· -->\n  <!-- Include the GSI SDK below -->\n  <script src=\"https://accounts.google.com/gsi/client\" async defer></script>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Loading Google Maps JavaScript API with API Key in HTML\nDESCRIPTION: Code to add to the <head> tag of web/index.html to load the Google Maps JavaScript API with your API key. This is the minimal configuration required to use Google Maps in your web application.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_maps_flutter/google_maps_flutter_web/README.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n\n  <!-- // Other stuff -->\n\n  <script src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY\"></script>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Widget Arguments in RFW Text Format\nDESCRIPTION: This snippet demonstrates how to define more complex widget arguments in the RFW text format, including nested maps and lists.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/README.md#2025-04-22_snippet_3\n\nLANGUAGE: rfwtxt\nCODE:\n```\nwidget fruit = Foo(\n  bar: { quux: [ 'apple', 'banana', 'cherry' ] },\n);\n```\n\n----------------------------------------\n\nTITLE: Importing file_selector_android Package in pubspec.yaml\nDESCRIPTION: This snippet suggests adding the file_selector_android package to the pubspec.yaml file if directly importing its APIs. However, it's not necessary for normal usage as it's an endorsed package automatically included with file_selector.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_android/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  file_selector_android: ^x.x.x\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Lints Package to pubspec.yaml\nDESCRIPTION: Shows how to add the Flutter lints package as a dev dependency in a Flutter project's pubspec.yaml file.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_lints/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndev:\\n  flutter_lints: ^5.0.0\n```\n\n----------------------------------------\n\nTITLE: Loading Images from Bytes in Flutter\nDESCRIPTION: Code example showing how to display images by reading the file as bytes. This approach works across all platforms including web by using Image.memory with the raw bytes data.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker_for_web/README.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimage = Image.memory(await pickedFile.readAsBytes());\n```\n\n----------------------------------------\n\nTITLE: Requesting Additional OAuth Scopes in Flutter\nDESCRIPTION: Handles the process of requesting additional scopes after initial authentication. If authorization is granted, it proceeds to handle the contact retrieval for the current user. This is particularly important for web implementations.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_sign_in/google_sign_in/README.md#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _handleAuthorizeScopes() async {\n  final bool isAuthorized = await _googleSignIn.requestScopes(scopes);\n  if (isAuthorized) {\n    unawaited(_handleGetContact(_currentUser!));\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Remote Widget in RFW Text Format\nDESCRIPTION: This snippet shows how to define a remote widget using the RFW text format. It imports a local library and defines a root widget using GreenBox and Hello widgets.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/README.md#2025-04-22_snippet_2\n\nLANGUAGE: rfwtxt\nCODE:\n```\nimport local;\nwidget root = GreenBox(\n  child: Hello(name: \"World\"),\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Missing SVG Asset in Flutter\nDESCRIPTION: Shows how to handle a missing SVG asset. This will print error messages to the console in debug mode.\nSOURCE: https://github.com/flutter/packages/blob/main/third_party/packages/flutter_svg/README.md#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// Will print error messages to the console.\nconst String assetName = 'assets/image_that_does_not_exist.svg';\nfinal Widget svg = SvgPicture.asset(\n  assetName,\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Up iOS Price Change Confirmation Delegate (Dart)\nDESCRIPTION: Shows how to set up a delegate to handle price change confirmations on iOS, allowing custom control over when to show the price change popup.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/in_app_purchase/in_app_purchase/README.md#2025-04-22_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> initStoreInfo() async {\n  if (Platform.isIOS) {\n    var iosPlatformAddition = _inAppPurchase\n            .getPlatformAddition<InAppPurchaseStoreKitPlatformAddition>();\n    await iosPlatformAddition.setDelegate(ExamplePaymentQueueDelegate());\n  }\n}\n\n@override\nFuture<void> disposeStore() {\n  if (Platform.isIOS) {\n    var iosPlatformAddition = _inAppPurchase\n            .getPlatformAddition<InAppPurchaseStoreKitPlatformAddition>();\n    await iosPlatformAddition.setDelegate(null);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting VideoPlayerOptions in Dart\nDESCRIPTION: Example of setting VideoPlayerOptions to configure audio mix mode in the video player.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/video_player/video_player/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nVideoPlayerController controller = VideoPlayerController.network(url);\ncontroller.setVideoPlayerOptions(VideoPlayerOptions(mixWithOthers: true));\n```\n\n----------------------------------------\n\nTITLE: Passing Additional Data with Navigation Using Extra in Dart\nDESCRIPTION: Shows how to provide additional data along with navigation using the extra parameter.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/doc/navigation.md#2025-04-22_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\ncontext.go('/123', extra: 'abc');\n```\n\n----------------------------------------\n\nTITLE: Creating a Cupertino Icon in Flutter\nDESCRIPTION: This snippet shows how to create an Icon widget using a Cupertino icon from the CupertinoIcons class. It sets the icon to a filled heart, colors it pink, and specifies a size of 24.0 logical pixels.\nSOURCE: https://github.com/flutter/packages/blob/main/third_party/packages/cupertino_icons/example/example.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nconst Icon icon = Icon(\n  CupertinoIcons.heart_fill,\n  color: Colors.pink,\n  size: 24.0,\n);\n```\n\n----------------------------------------\n\nTITLE: Using Relative Path Navigation in GoRouter\nDESCRIPTION: Allows navigating to a relative path by prefixing with './' in GoRouter navigation methods.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\ncontext.go('./relative-path');\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Linux Application in CMake\nDESCRIPTION: This CMake script sets up a complete build environment for a Flutter application on Linux. It defines project parameters, compilation settings, dependencies, and installation rules. The configuration handles different build types (Debug, Profile, Release) and properly organizes the application bundle structure.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/path_provider/path_provider/example/linux/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\nset(BINARY_NAME \"example\")\nset(APPLICATION_ID \"dev.flutter.plugins.path_provider_example\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\n# Configure build options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n\n# Compilation settings that should be applied to most targets.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\n# Flutter library and tool build rules.\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n\n# Application build\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n\n\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Support for Holes in Polygons in Dart\nDESCRIPTION: Implements support for defining holes within polygon shapes on the map.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_maps_flutter/google_maps_flutter/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nPolygon(\n  polygonId: PolygonId('polygon_with_hole'),\n  points: outerPoints,\n  holes: [innerPoints],\n  // ...\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Android SharedPreferences Options in Dart\nDESCRIPTION: This code demonstrates how to set up Android-specific options for SharedPreferencesAsync, including specifying the backend and file name.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences/README.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nconst SharedPreferencesAsyncAndroidOptions options =\n    SharedPreferencesAsyncAndroidOptions(\n        backend: SharedPreferencesAndroidBackendLibrary.SharedPreferences,\n        originalSharedPreferencesOptions: AndroidSharedPreferencesStoreOptions(\n            fileName: 'the_name_of_a_file'));\n```\n\n----------------------------------------\n\nTITLE: Importing Platform-Specific WebView Packages\nDESCRIPTION: Demonstrates how to import platform-specific WebView implementations for Android and iOS/macOS.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/webview_flutter/webview_flutter/README.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// Import for Android features.\nimport 'package:webview_flutter_android/webview_flutter_android.dart';\n// Import for iOS/macOS features.\nimport 'package:webview_flutter_wkwebview/webview_flutter_wkwebview.dart';\n```\n\n----------------------------------------\n\nTITLE: Setting Android Theme Directly in AndroidManifest.xml\nDESCRIPTION: This XML snippet demonstrates how to set the Android theme directly in the AndroidManifest.xml file for biometric dialog compatibility.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth/README.md#2025-04-22_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<application\n    ...\n    <activity\n        ...\n        android:theme=\"@style/Theme.AppCompat.DayNight\"\n        ...\n    >\n    </activity>\n</application>\n```\n\n----------------------------------------\n\nTITLE: Loading Marker Clusterer Library for Google Maps in HTML\nDESCRIPTION: Code to add the js-markerclusterer library to your web app. This is required for marker clustering functionality, and specifies version 2.5.3 which is currently supported.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_maps_flutter/google_maps_flutter_web/README.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<head>\n\n  <!-- // Other stuff -->\n\n  <script src=\"https://cdn.jsdelivr.net/npm/@googlemaps/markerclusterer@2.5.3/dist/index.umd.min.js\"></script>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Updating README Files\nDESCRIPTION: Commands to update markdown files with example sources for all or specific packages\nSOURCE: https://github.com/flutter/packages/blob/main/script/tool/README.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n# Update all .md files for all packages:\ndart run script/tool/bin/flutter_plugin_tools.dart update-excerpts\n\n# Update the .md files only for one package:\ndart run script/tool/bin/flutter_plugin_tools.dart update-excerpts --packages package_name\n```\n\n----------------------------------------\n\nTITLE: Running Books App Example\nDESCRIPTION: Command to run a comprehensive example app showcasing various GoRouter APIs and features\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/example/README.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nflutter run lib/books/main.dart\n```\n\n----------------------------------------\n\nTITLE: Configuring TypedShellRoute with Navigator Keys in GoRouter (Dart)\nDESCRIPTION: This snippet illustrates how to use TypedShellRoute with navigator keys in GoRouter. It defines static navigator keys for both ShellRouteData and GoRouteData to control navigation hierarchy and behavior.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router_builder/README.md#2025-04-22_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\nfinal GlobalKey<NavigatorState> shellNavigatorKey = GlobalKey<NavigatorState>();\nfinal GlobalKey<NavigatorState> rootNavigatorKey = GlobalKey<NavigatorState>();\n\nclass MyShellRouteData extends ShellRouteData {\n  const MyShellRouteData();\n\n  static final GlobalKey<NavigatorState> $navigatorKey = shellNavigatorKey;\n\n  @override\n  Widget builder(BuildContext context, GoRouterState state, Widget navigator) {\n    return MyShellRoutePage(navigator);\n  }\n}\n\n// For GoRoutes:\nclass MyGoRouteData extends GoRouteData {\n  const MyGoRouteData();\n\n  static final GlobalKey<NavigatorState> $parentNavigatorKey = rootNavigatorKey;\n\n  @override\n  Widget build(BuildContext context, GoRouterState state) => const MyPage();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Platform-Specific Purchase Details on Android (Dart)\nDESCRIPTION: Illustrates how to access Android-specific purchase details like originalJson from a PurchaseDetails object.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/in_app_purchase/in_app_purchase/README.md#2025-04-22_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nif (purchaseDetails is GooglePlayPurchaseDetails) {\n  PurchaseWrapper billingClientPurchase = (purchaseDetails as GooglePlayPurchaseDetails).billingClientPurchase;\n  print(billingClientPurchase.originalJson);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HostApi in GObject\nDESCRIPTION: This snippet demonstrates how to implement the HostApi using GObject, including handling method calls and error responses.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/README.md#2025-04-22_snippet_7\n\nLANGUAGE: c++\nCODE:\n```\nstatic PigeonExamplePackageExampleHostApiGetHostLanguageResponse*\nhandle_get_host_language(gpointer user_data) {\n  return pigeon_example_package_example_host_api_get_host_language_response_new(\n      \"C++\");\n}\n\nstatic PigeonExamplePackageExampleHostApiAddResponse* handle_add(\n    int64_t a, int64_t b, gpointer user_data) {\n  if (a < 0 || b < 0) {\n    g_autoptr(FlValue) details = fl_value_new_string(\"details\");\n    return pigeon_example_package_example_host_api_add_response_new_error(\n        \"code\", \"message\", details);\n  }\n\n  return pigeon_example_package_example_host_api_add_response_new(a + b);\n}\n\nstatic void handle_send_message(\n    PigeonExamplePackageMessageData* message,\n    PigeonExamplePackageExampleHostApiResponseHandle* response_handle,\n    gpointer user_data) {\n  PigeonExamplePackageCode code =\n      pigeon_example_package_message_data_get_code(message);\n  if (code == PIGEON_EXAMPLE_PACKAGE_CODE_ONE) {\n    g_autoptr(FlValue) details = fl_value_new_string(\"details\");\n    pigeon_example_package_example_host_api_respond_error_send_message(\n        response_handle, \"code\", \"message\", details);\n    return;\n  }\n\n  pigeon_example_package_example_host_api_respond_send_message(response_handle,\n                                                               TRUE);\n}\n\nstatic PigeonExamplePackageExampleHostApiVTable example_host_api_vtable = {\n    .get_host_language = handle_get_host_language,\n    .add = handle_add,\n    .send_message = handle_send_message};\n```\n\n----------------------------------------\n\nTITLE: Updating MainActivity for Android Integration in Java\nDESCRIPTION: This Java code shows how to update the MainActivity class to inherit from FlutterFragmentActivity for proper local_auth integration on Android.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth/README.md#2025-04-22_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nimport io.flutter.embedding.android.FlutterFragmentActivity;\n\npublic class MainActivity extends FlutterFragmentActivity {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding caseSensitive Parameter to GoRouter in Dart\nDESCRIPTION: Adds a new 'caseSensitive' parameter to the GoRouter constructor, defaulting to true. This makes URLs case sensitive by default.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nGoRouter(\n  // ...\n  caseSensitive: true, // URLs are now case sensitive by default\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Manifest for Camera Plugin Compatibility\nDESCRIPTION: Adds an override library declaration to the AndroidManifest.xml file to allow compilation with earlier Android SDKs below 21. This enables broader device compatibility while maintaining functionality on supported devices.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/camera/camera/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<uses-sdk tools:overrideLibrary=\"io.flutter.plugins.camera\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Maps API in iOS Objective-C AppDelegate\nDESCRIPTION: Initializes Google Maps services with an API key in the iOS AppDelegate using Objective-C. This setup is required to enable Google Maps on iOS devices.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_maps_flutter/google_maps_flutter/README.md#2025-04-22_snippet_1\n\nLANGUAGE: objectivec\nCODE:\n```\n#include \"AppDelegate.h\"\n#include \"GeneratedPluginRegistrant.h\"\n#import \"GoogleMaps/GoogleMaps.h\"\n\n@implementation AppDelegate\n\n- (BOOL)application:(UIApplication *)application\n    didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  [GMSServices provideAPIKey:@\"YOUR KEY HERE\"];\n  [GeneratedPluginRegistrant registerWithRegistry:self];\n  return [super application:application didFinishLaunchingWithOptions:launchOptions];\n}\n@end\n```\n\n----------------------------------------\n\nTITLE: Registering Event Handler in Swift\nDESCRIPTION: Registers the event listener with the binary messenger in Swift.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/README.md#2025-04-22_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\nlet eventListener = EventListener()\nStreamEventsStreamHandler.register(\n  with: controller.binaryMessenger, streamHandler: eventListener)\n```\n\n----------------------------------------\n\nTITLE: Optional Child Widget Implementation in RFW\nDESCRIPTION: Implementation of GreenBox widget using optionalChild method, which allows for null child widgets.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/README.md#2025-04-22_snippet_9\n\nLANGUAGE: rfwtxt\nCODE:\n```\n'GreenBox': (BuildContext context, DataSource source) {\n  return ColoredBox(color: const Color(0xFF002211), child: source.optionalChild(<Object>['child']));\n},\n```\n\n----------------------------------------\n\nTITLE: Implementing WebView Platform Interface in Dart\nDESCRIPTION: Code example showing how to create a platform-specific implementation by extending WebviewPlatform and registering it as the default implementation.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/webview_flutter/webview_flutter_platform_interface/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nWebviewPlatform.instance = MyPlatformWebview()\n```\n\n----------------------------------------\n\nTITLE: Showing Price Consent Dialog on iOS (Dart)\nDESCRIPTION: Illustrates how to manually trigger the price consent dialog on iOS using the InAppPurchaseStoreKitPlatformAddition.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/in_app_purchase/in_app_purchase/README.md#2025-04-22_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nif (Platform.isIOS) {\n  var iapStoreKitPlatformAddition = _inAppPurchase\n      .getPlatformAddition<InAppPurchaseStoreKitPlatformAddition>();\n  await iapStoreKitPlatformAddition.showPriceConsentIfNeeded();\n}\n```\n\n----------------------------------------\n\nTITLE: Platform Addition Example for Android in Dart\nDESCRIPTION: Example showing how to acquire and use the Android platform-specific additions for in-app purchases.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/in_app_purchase/in_app_purchase/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Acquire the InAppPurchaseAndroidPlatformAddition instance.\nInAppPurchaseAndroidPlatformAddition androidAddition = InAppPurchase.instance.getPlatformAddition<InAppPurchaseAndroidPlatformAddition>();\n// Consume an Android purchase.\nBillingResultWrapper billingResult = await androidAddition.consumePurchase(purchase);\n```\n\n----------------------------------------\n\nTITLE: Updating Minimum SDK Version in Markdown\nDESCRIPTION: This snippet shows the latest update to the package, which changes the minimum supported SDK version to Flutter 3.22 and Dart 3.4.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_platform_interface/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## NEXT\n\n* Updates minimum supported SDK version to Flutter 3.22/Dart 3.4.\n```\n\n----------------------------------------\n\nTITLE: Implementing MyHomePage Widget with Vector Graphics\nDESCRIPTION: This snippet defines the MyHomePage widget, which demonstrates how to use the VectorGraphic widget to render vector assets.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/vector_graphics/example/README.md#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass MyHomePage extends StatelessWidget {\n  const MyHomePage({super.key, required this.title});\n\n  final String title;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(title),\n      ),\n      body: Center(\n        child: VectorGraphic(\n          loader: AssetBytesLoader('assets/test.svg.vec'),\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Display Mode for Google Maps Flutter Android\nDESCRIPTION: This snippet demonstrates how to set the display mode for Google Maps Flutter Android to Hybrid Composition mode. It checks if the current implementation is GoogleMapsFlutterAndroid and sets the useAndroidViewSurface property to true.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_maps_flutter/google_maps_flutter_android/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:google_maps_flutter_android/google_maps_flutter_android.dart';\nimport 'package:google_maps_flutter_platform_interface/google_maps_flutter_platform_interface.dart';\n\nvoid main() {\n  // Require Hybrid Composition mode on Android.\n  final GoogleMapsFlutterPlatform mapsImplementation =\n      GoogleMapsFlutterPlatform.instance;\n  if (mapsImplementation is GoogleMapsFlutterAndroid) {\n    // Force Hybrid Composition mode.\n    mapsImplementation.useAndroidViewSurface = true;\n  }\n  // ···\n}\n```\n\n----------------------------------------\n\nTITLE: Setting URL Launcher Platform Implementation\nDESCRIPTION: Example showing how to register a custom platform-specific implementation of the URL launcher plugin by setting the default platform instance.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher_platform_interface/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nUrlLauncherPlatform.instance = MyPlatformUrlLauncher()\n```\n\n----------------------------------------\n\nTITLE: Implementing FlutterApi in Swift\nDESCRIPTION: This snippet shows how to implement the FlutterApi in Swift to make calls to Flutter from the host platform.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/README.md#2025-04-22_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nprivate class PigeonFlutterApi {\n  var flutterAPI: MessageFlutterApi\n\n  init(binaryMessenger: FlutterBinaryMessenger) {\n    flutterAPI = MessageFlutterApi(binaryMessenger: binaryMessenger)\n  }\n\n  func callFlutterMethod(\n    aString aStringArg: String?, completion: @escaping (Result<String, PigeonError>) -> Void\n  ) {\n    flutterAPI.flutterMethod(aString: aStringArg) {\n      completion($0)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FlutterApi in C++\nDESCRIPTION: This snippet shows how to implement the FlutterApi in C++ to make calls to Flutter from the host platform.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/README.md#2025-04-22_snippet_12\n\nLANGUAGE: c++\nCODE:\n```\nclass PigeonFlutterApi {\n public:\n  PigeonFlutterApi(flutter::BinaryMessenger* messenger)\n      : flutterApi_(std::make_unique<MessageFlutterApi>(messenger)) {}\n\n  void CallFlutterMethod(\n      const std::string& a_string,\n      std::function<void(ErrorOr<std::string> reply)> result) {\n    flutterApi_->FlutterMethod(\n        &a_string, [result](const std::string& echo) { result(echo); },\n        [result](const FlutterError& error) { result(error); });\n  }\n\n private:\n  std::unique_ptr<MessageFlutterApi> flutterApi_;\n};\n```\n\n----------------------------------------\n\nTITLE: Applying PointerInterceptor to a Drawer in Flutter Scaffold\nDESCRIPTION: This example shows how to use PointerInterceptor as a root container for a layout element, specifically wrapping a Drawer widget within a Scaffold to prevent mouse events from being captured by underlying views.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pointer_interceptor/pointer_interceptor/README.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nScaffold(\n  ...\n  drawer: PointerInterceptor(\n    child: Drawer(\n      child: ...\n    ),\n  ),\n  ...\n)\n```\n\n----------------------------------------\n\nTITLE: Adding onExit Callback to GoRoute in Dart\nDESCRIPTION: Adds an onExit callback to GoRoute to handle actions when exiting a route.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nGoRoute(\n  // ...\n  onExit: (BuildContext context, GoRouterState state) {\n    // Handle exit logic\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Platform-Specific Methods in Interactive Media Ads Plugin\nDESCRIPTION: Example demonstrating how to access platform-specific methods by casting the platform field to a platform-specific implementation. This pattern enables apps to use platform-specific features when needed.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/interactive_media_ads/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal AdsLoader loader = AdsLoader();\n(loader.platform as AndroidAdsLoader).callAndroidSpecificMethod();\n```\n\n----------------------------------------\n\nTITLE: Executing Flutter Migration Command\nDESCRIPTION: Command to run the Flutter migration tool from the project root directory. The tool accepts subcommands and parameters for different migration operations.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_migrate/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart run <path_to_flutter_migrate_package>/bin/flutter_migrate.dart <subcommand> [parameters]\n```\n\n----------------------------------------\n\nTITLE: Disabling Browser History Tracking for Entire Application in Dart\nDESCRIPTION: Shows how to set the routerNeglect property of GoRouter to disable browser history tracking for the entire application.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/doc/navigation.md#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal _router = GoRouter(\n  routerNeglect: true,\n  routes: [\n    ...\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a Route with Enum Parameter in Dart\nDESCRIPTION: Shows how to define a route that uses an enum as a parameter, demonstrating automatic type conversion.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router_builder/README.md#2025-04-22_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nenum BookKind { all, popular, recent }\n\nclass BooksRoute extends GoRouteData {\n  BooksRoute({this.kind = BookKind.popular});\n  final BookKind kind;\n\n  @override\n  Widget build(BuildContext context, GoRouterState state) {\n    return BooksScreen(kind: kind);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Platform Addition Example for iOS in Dart\nDESCRIPTION: Example showing how to acquire and use the iOS platform-specific additions for in-app purchases.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/in_app_purchase/in_app_purchase/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// Acquire the InAppPurchaseIosPlatformAddition instance.\nInAppPurchaseIosPlatformAddition iosAddition = InAppPurchase.instance.getPlatformAddition<InAppPurchaseIosPlatformAddition>();\n// Present the code redemption sheet.\nawait iosAddition.presentCodeRedemptionSheet();\n// Refresh purchase verification data.\nPurchaseVerificationData? verificationData = await iosAddition.refreshPurchaseVerificationData();\n```\n\n----------------------------------------\n\nTITLE: Version History Documentation in Markdown\nDESCRIPTION: Markdown formatted changelog entries detailing version updates, bug fixes, and feature additions for the video_player_web package, including version numbers and specific changes.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/video_player/video_player_web/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.3.4\n\n* Adjusts the code to the new platform interface.\n\n## 2.3.3\n\n* Updates minimum supported SDK version to Flutter 3.22/Dart 3.4.\n* Corrects the behavior of muting/unmuting videos in Chrome's Tap Emulation mode.\n\n## 2.3.2\n\n* Adds support for `web: ^1.0.0`.\n\n## 2.3.1\n\n* Fixes some `package:web` tweaks.\n\n## 2.3.0\n\n* Migrates package and tests to `package:web`.\n* Fixes infinite event loop caused by `seekTo` when the video ends.\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Flutter Packages using Dart\nDESCRIPTION: Command to run tests in Flutter packages using the provided testing script. This allows developers to execute tests for the current package.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_identity_services_web/test/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndart run tool/run_tests.dart\n```\n\n----------------------------------------\n\nTITLE: Generating Pigeon Code via Dart Script\nDESCRIPTION: Command to regenerate the Pigeon communication code by running a Dart script from the project root directory.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/app/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd ../..\\ndart tool/generate.dart\n```\n\n----------------------------------------\n\nTITLE: Overriding Transitions with Custom Key in GoRouter (Dart)\nDESCRIPTION: This snippet demonstrates how to override the buildPage method in a GoRouteData subclass to create a MaterialPage with a custom key. This allows for custom transition behavior and key management.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router_builder/README.md#2025-04-22_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nclass MyMaterialRouteWithKey extends GoRouteData {\n  static const LocalKey _key = ValueKey<String>('my-route-with-key');\n  @override\n  MaterialPage<void> buildPage(BuildContext context, GoRouterState state) {\n    return const MaterialPage<void>(\n      key: _key,\n      child: MyPage(),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring macOS File Access Entitlements\nDESCRIPTION: XML configuration for enabling read-only file access entitlements required by the image_picker package on macOS. This entitlement allows the application to access user-selected files in read-only mode.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker_macos/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    <key>com.apple.security.files.user-selected.read-only</key>\n    <true/>\n```\n\n----------------------------------------\n\nTITLE: Configuring macOS Keychain Access Groups\nDESCRIPTION: XML configuration for enabling keychain sharing in macOS applications, required by the GoogleSignIn SDK to prevent keychain error PlatformException.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_sign_in/google_sign_in_ios/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    <key>keychain-access-groups</key>\n    <array>\n        <string>$(AppIdentifierPrefix)com.google.GIDSignIn</string>\n    </array>\n```\n\n----------------------------------------\n\nTITLE: Configuring Ad Parameters in Flutter\nDESCRIPTION: Demonstrates how to configure ad parameters including sound settings and preload options using the adConfig method.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_adsense/doc/h5.md#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nh5GamesAds.adConfig(\n  AdConfigParameters(\n    sound: SoundEnabled.on,\n    preloadAdBreaks: PreloadAdBreaks.on,\n    onReady: _onH5Ready,\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Imperative Navigation with Navigator in Dart\nDESCRIPTION: Demonstrates using the imperative Navigator API to push a new screen. Pages displayed this way are not deep-linkable and will be replaced if a parent page associated with a GoRoute is removed.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/doc/navigation.md#2025-04-22_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nNavigator.of(context).push(\n  MaterialPageRoute(\n    builder: (BuildContext context) {\n      return const DetailsScreen();\n    },\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Exception Handling in GoRouter\nDESCRIPTION: Adds onException callback to GoRouter constructor for centralized exception handling.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nGoRouter(\n  // ...\n  onException: (BuildContext context, GoRouterState state, Exception? exception) {\n    // Handle exception\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Integration Test SDK Dependency\nDESCRIPTION: YAML configuration showing how to properly include the integration_test package from Flutter SDK in project's dev dependencies after its migration from pub.dev.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/integration_test/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndev_dependencies:\n  integration_test:\n    sdk: flutter\n```\n\n----------------------------------------\n\nTITLE: Implementing HostApi in C++\nDESCRIPTION: This snippet shows how to implement the HostApi in C++ to receive calls from Flutter, including error handling using FlutterError.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/README.md#2025-04-22_snippet_6\n\nLANGUAGE: c++\nCODE:\n```\nclass PigeonApiImplementation : public ExampleHostApi {\n public:\n  PigeonApiImplementation() {}\n  virtual ~PigeonApiImplementation() {}\n\n  ErrorOr<std::string> GetHostLanguage() override { return \"C++\"; }\n  ErrorOr<int64_t> Add(int64_t a, int64_t b) {\n    if (a < 0 || b < 0) {\n      return FlutterError(\"code\", \"message\", \"details\");\n    }\n    return a + b;\n  }\n  void SendMessage(const MessageData& message,\n                   std::function<void(ErrorOr<bool> reply)> result) {\n    if (message.code() == Code::kOne) {\n      result(FlutterError(\"code\", \"message\", \"details\"));\n      return;\n    }\n    result(true);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Importing AdUnitWidget in Flutter\nDESCRIPTION: This code shows how to import the experimental AdUnitWidget from the google_adsense package to begin using ad units in a Flutter web application.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_adsense/doc/ad_unit_widget.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:google_adsense/experimental/ad_unit_widget.dart';\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Android SDK Version in build.gradle\nDESCRIPTION: Groovy snippet for setting the minimum Android SDK version to 21 in the android/app/build.gradle file. This is required for camera functionality on Android devices.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/camera/camera/README.md#2025-04-22_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nminSdkVersion 21\n```\n\n----------------------------------------\n\nTITLE: Referencing Camera Plugin Package in Markdown\nDESCRIPTION: This code snippet shows how to create a reference link in Markdown for the camera plugin package on pub.dev.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/camera/camera_avfoundation/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[1]: https://pub.dev/packages/camera\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 0.1.2 Changes in Markdown\nDESCRIPTION: This snippet outlines the changes made in version 0.1.2 of the package, including support for horizontal rules and a bug fix for image taps in hyperlinks.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_markdown/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.2\n\n* Add support for horizontal rules.\n* Fix the `onTap` callback on images nested in hyperlinks\n```\n\n----------------------------------------\n\nTITLE: Running Dart Script to Encode UI Descriptions\nDESCRIPTION: Instructions for executing the encode.dart script to convert .rfwtxt source files to .rfw binary files for use in the Flutter packages demo.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/remote/remote_widget_libraries/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nencode.dart\n```\n\n----------------------------------------\n\nTITLE: Importing go_router and Setting Up Part Directive in Dart\nDESCRIPTION: Shows how to import the go_router library and set up the part directive for code generation.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router_builder/README.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:go_router/go_router.dart';\n\npart 'readme_excerpts.g.dart';\n```\n\n----------------------------------------\n\nTITLE: HTML AdSense Snippet Example\nDESCRIPTION: This is an example HTML AdSense snippet that would be provided by Google AdSense when creating a new ad unit. It demonstrates the format of data attributes that need to be translated to Dart.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_adsense/doc/ad_unit_widget.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<ins class=\"adsbygoogle\"\n     style=\"display:block\"\n     data-ad-client=\"ca-pub-0123456789012345\"\n     data-ad-slot=\"1234567890\"\n     data-ad-format=\"auto\"\n     data-full-width-responsive=\"true\"></ins>\n<script>\n     (adsbygoogle = window.adsbygoogle || []).push({});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Read-Write File Access Entitlement for macOS\nDESCRIPTION: XML configuration for enabling read and write access to user-selected files in macOS applications. This entitlement must be added to allow the application to read and modify files selected by the user.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_macos/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n\t<key>com.apple.security.files.user-selected.read-write</key>\n\t<true/>\n```\n\n----------------------------------------\n\nTITLE: Equivalent Go Router Configuration for Named Routes in Flutter\nDESCRIPTION: The Go Router equivalent of the named routes configuration. This snippet shows how to define multiple routes with Go Router and set an initial location, matching the behavior of named routes.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/doc/upgrading.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nGoRouter(\n  initialLocation: '/details',\n  routes: [\n    GoRoute(\n      path: '/',\n      builder: (context, state) => const HomeScreen(),\n    ),\n    GoRoute(\n      path: '/details',\n      builder: (context, state) => const DetailsScreen(),\n    ),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Current GoRouterState in Dart\nDESCRIPTION: Adds a getter to access the current GoRouterState from the GoRouter instance.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal GoRouterState currentState = goRouter.currentState;\n```\n\n----------------------------------------\n\nTITLE: Flutter File Selector Changelog\nDESCRIPTION: Markdown formatted changelog detailing version history from 0.5.0 to NEXT release, including SDK updates, implementation changes, and compatibility improvements.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_ios/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## NEXT\n\n* Updates minimum supported SDK version to Flutter 3.22/Dart 3.4.\n\n## 0.5.3+1\n\n* Updates Pigeon for non-nullable collection type support.\n* Updates minimum supported SDK version to Flutter 3.19/Dart 3.3.\n\n## 0.5.3\n\n* Converts implementation to Swift.\n* Re-adds Swift Package Manager compatibility.\n\n## 0.5.2+1\n\n* Temporarily remove Swift Package Manager compatibility to resolve issues with Cocoapods builds.\n\n## 0.5.2\n\n* Adds Swift Package Manager compatibility.\n\n## 0.5.1+9\n\n* Adjusts implementation for testabiity.\n* Updates minimum iOS version to 12.0 and minimum Flutter version to 3.16.6.\n\n## 0.5.1+8\n\n* Adds privacy manifest.\n* Updates minimum supported SDK version to Flutter 3.10/Dart 3.0.\n\n## 0.5.1+7\n\n* Updates to Pigeon 13.\n\n## 0.5.1+6\n\n* Adds pub topics to package metadata.\n* Updates minimum supported SDK version to Flutter 3.7/Dart 2.19.\n\n## 0.5.1+5\n\n* Fixes the behavior of no type groups to allow selecting any file.\n* Migrates `styleFrom` usage in examples off of deprecated `primary` and `onPrimary` parameters.\n\n## 0.5.1+4\n\n* Updates references to the deprecated `macUTIs`.\n\n## 0.5.1+3\n\n* Updates pigeon to fix warnings with clang 15.\n* Updates minimum Flutter version to 3.3.\n\n## 0.5.1+2\n\n* Updates to `pigeon` version 9.\n\n## 0.5.1+1\n\n* Clarifies explanation of endorsement in README.\n* Aligns Dart and Flutter SDK constraints.\n\n## 0.5.1\n\n* Updates minimum Flutter version to 3.3 and iOS 11.\n\n## 0.5.0+3\n\n* Updates links for the merge of flutter/plugins into flutter/packages.\n* Updates example code for `use_build_context_synchronously` lint.\n* Updates minimum Flutter version to 3.0.\n\n## 0.5.0+2\n\n* Changes XTypeGroup initialization from final to const.\n* Updates minimum Flutter version to 2.10.\n\n## 0.5.0+1\n\n* Updates README for endorsement.\n\n## 0.5.0\n\n* Initial iOS implementation of `file_selector`.\n```\n\n----------------------------------------\n\nTITLE: Setting up a custom File Selector Platform implementation in Dart\nDESCRIPTION: Example of how to register a custom platform implementation of the file_selector plugin by setting the default FileSelectorPlatform instance.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_platform_interface/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nFileSelectorPlatform.instance = MyPlatformFileSelector()\n```\n\n----------------------------------------\n\nTITLE: Accessing Platform-Specific Product Details on iOS (Dart)\nDESCRIPTION: Demonstrates how to access iOS-specific product details like subscriptionGroupIdentifier from a ProductDetails object.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/in_app_purchase/in_app_purchase/README.md#2025-04-22_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nif (productDetails is AppStoreProductDetails) {\n  SKProductWrapper skProduct = (productDetails as AppStoreProductDetails).skProduct;\n  print(skProduct.subscriptionGroupIdentifier);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Dependencies for Espresso Testing\nDESCRIPTION: Required Gradle dependencies for setting up Espresso testing in a Flutter Android app, including JUnit, Truth, and Espresso core libraries.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/espresso/README.md#2025-04-22_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    testImplementation 'junit:junit:4.13.2'\n    testImplementation \"com.google.truth:truth:1.1.3\"\n    androidTestImplementation 'androidx.test:runner:1.6.1'\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'\n    api 'androidx.test:core:1.2.0'\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Flutter Method API in C++\nDESCRIPTION: Initializes the Flutter API messenger and calls a Flutter method with a callback.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/README.md#2025-04-22_snippet_14\n\nLANGUAGE: c++\nCODE:\n```\nself->flutter_api =\n    pigeon_example_package_message_flutter_api_new(messenger, nullptr);\npigeon_example_package_message_flutter_api_flutter_method(\n    self->flutter_api, \"hello\", nullptr, flutter_method_cb, self);\n```\n\n----------------------------------------\n\nTITLE: Updating WebView Destruction in Kotlin for Android WebKit Library\nDESCRIPTION: This code snippet shows how to update the AndroidWebkitLibraryPigeonInstanceManager.remove method to handle WebView destruction when the Dart instance is garbage collected. It prevents potential breaking changes in the plugin's behavior.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/webview_flutter/webview_flutter_android/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval instance: Any? = getInstance(identifier)\nif (instance is WebViewProxyApi.WebViewPlatformView) {\n  instance.destroy()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GreenBox Widget with Child in RFW\nDESCRIPTION: Example of a GreenBox widget implementation using DataSource.child to handle child widgets. Shows how to create a colored box container with a child element.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/README.md#2025-04-22_snippet_8\n\nLANGUAGE: rfwtxt\nCODE:\n```\n'GreenBox': (BuildContext context, DataSource source) {\n  return ColoredBox(color: const Color(0xFF002211), child: source.child(<Object>['child']));\n},\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version Updates\nDESCRIPTION: Collection of version entries documenting package changes, migrations, and improvements over time.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/quick_actions/quick_actions_ios/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## NEXT\n\n* Updates minimum supported SDK version to Flutter 3.22/Dart 3.4.\n\n## 1.2.0\n\n* Adds localizedSubtitle field for iOS quick actions.\n* Updates minimum supported SDK version to Flutter 3.19/Dart 3.3.\n\n## 1.1.1\n\n* Updates to a newer version of Pigeon.\n\n## 1.1.0\n\n* Adds Swift Package Manager compatibility.\n* Updates minimum iOS version to 12.0 and minimum Flutter version to 3.16.6.\n\n## 1.0.10\n\n* Adds privacy manifest.\n\n## 1.0.9\n\n* Updates minimum required plugin_platform_interface version to 2.1.7.\n* Updates minimum supported SDK version to Flutter 3.10/Dart 3.0.\n\n## 1.0.8\n\n* Changes method channels to pigeon.\n\n## 1.0.7\n\n* Adds pub topics to package metadata.\n* Updates minimum supported SDK version to Flutter 3.7/Dart 2.19.\n\n## 1.0.6\n\n* Removes obsolete null checks on non-nullable values.\n* Updates minimum supported SDK version to Flutter 3.3/Dart 2.18.\n\n## 1.0.5\n\n* Updates minimum iOS version to 11 and Flutter version to 3.3.\n\n## 1.0.4\n\n* Clarifies explanation of endorsement in README.\n* Aligns Dart and Flutter SDK constraints.\n\n## 1.0.3\n\n* Updates links for the merge of flutter/plugins into flutter/packages.\n* Updates minimum Flutter version to 3.0.\n\n## 1.0.2\n\n* Migrates remaining components to Swift and removes all Objective-C settings.\n* Migrates `RunnerUITests` to Swift.\n\n## 1.0.1\n\n* Removes custom modulemap file with \"Test\" submodule and private headers for Swift migration.\n* Migrates `FLTQuickActionsPlugin` class to Swift.\n\n## 1.0.0\n\n* Updates version to 1.0 to reflect current status.\n* Updates minimum Flutter version to 2.10.\n\n## 0.6.0+14\n\n* Refactors `FLTQuickActionsPlugin` class into multiple components.\n* Increases unit tests coverage to 100%.\n\n## 0.6.0+13\n\n* Adds some unit tests for `FLTQuickActionsPlugin` class.\n\n## 0.6.0+12\n\n* Adds a custom module map with a Test submodule for unit tests on iOS platform.\n\n## 0.6.0+11\n\n* Updates references to the obsolete master branch.\n\n## 0.6.0+10\n\n* Fixes library_private_types_in_public_api, sort_child_properties_last and use_key_in_widget_constructors\n  lint warnings.\n\n## 0.6.0+9\n\n* Switches to a package-internal implementation of the platform interface.\n```\n\n----------------------------------------\n\nTITLE: Adding URL Launcher Package to pubspec.yaml\nDESCRIPTION: Instructions for adding the url_launcher package dependency. As an endorsed package, it's automatically included when using url_launcher, but needs to be explicitly added if importing directly.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher_macos/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  url_launcher: ^latest_version\n```\n\n----------------------------------------\n\nTITLE: Running Wasm Setup for Flutter Package\nDESCRIPTION: Command to set up the Wasm environment for the Flutter package. This step is required before running the application and needs Rust and clang to be installed.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/wasm/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflutter pub run wasm:setup\n```\n\n----------------------------------------\n\nTITLE: Implementing Flutter Method Callback in C++\nDESCRIPTION: Defines a callback function for handling Flutter method responses in C++. Handles error cases and prints the return value from the Flutter method.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/README.md#2025-04-22_snippet_13\n\nLANGUAGE: c++\nCODE:\n```\nstatic void flutter_method_cb(GObject* object, GAsyncResult* result,\n                              gpointer user_data) {\n  g_autoptr(GError) error = nullptr;\n  g_autoptr(\n      PigeonExamplePackageMessageFlutterApiFlutterMethodResponse) response =\n      pigeon_example_package_message_flutter_api_flutter_method_finish(\n          PIGEON_EXAMPLE_PACKAGE_MESSAGE_FLUTTER_API(object), result, &error);\n  if (response == nullptr) {\n    g_warning(\"Failed to call Flutter method: %s\", error->message);\n    return;\n  }\n\n  g_printerr(\n      \"Got result from Flutter method: %s\\n\",\n      pigeon_example_package_message_flutter_api_flutter_method_response_get_return_value(\n          response));\n}\n```\n\n----------------------------------------\n\nTITLE: Importing WebView Flutter WKWebView in Objective-C\nDESCRIPTION: This code snippet demonstrates how to import the webview_flutter_wkwebview package in Objective-C to access its native API. After importing, developers can use the FWFWebViewFlutterWKWebViewExternalAPI class.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/webview_flutter/webview_flutter_wkwebview/README.md#2025-04-22_snippet_0\n\nLANGUAGE: objectivec\nCODE:\n```\n@import webview_flutter_wkwebview;\n```\n\n----------------------------------------\n\nTITLE: URL Launch Configuration\nDESCRIPTION: Code example showing how to configure browser launch settings using BrowserConfiguration\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal BrowserConfiguration config = BrowserConfiguration(\n  showTitle: true\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Extra Codec in GoRouter\nDESCRIPTION: Adds ability to provide a custom codec for serializing/deserializing extra data in GoRouter.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nGoRouter(\n  // ...\n  extraCodec: MyCustomCodec(),\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Nullable Field Handling in C++\nDESCRIPTION: Improves support for non-nullable fields and fixes issues with nullable fields in C++ code generation.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\n// Example of updated getter/setter (pseudo-code):\nconst std::string& GetField() const { return field_; }\nvoid SetField(const std::string& value) { field_ = value; }\n```\n\n----------------------------------------\n\nTITLE: Setting Platform Implementation Example - Dart\nDESCRIPTION: Example showing how to set a custom platform-specific implementation of the Google Maps Flutter plugin by extending the GoogleMapsFlutterPlatform class.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_maps_flutter/google_maps_flutter_platform_interface/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nGoogleMapsFlutterPlatform.instance = MyPlatformGoogleMapsFlutter()\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for go_router_builder in pubspec.yaml\nDESCRIPTION: Specifies the required dependencies in the pubspec.yaml file for using go_router_builder.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router_builder/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  # ...along with your other dependencies\n  go_router: ^9.0.3\n\ndev_dependencies:\n  # ...along with your other dev-dependencies\n  build_runner: ^2.0.0\n  go_router_builder: ^2.3.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Client ID in iOS Info.plist\nDESCRIPTION: XML configuration for adding the server client ID to the iOS application's Info.plist file for backend authentication.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_sign_in/google_sign_in_ios/README.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n   <key>GIDServerClientID</key>\n   <string>[YOUR SERVER CLIENT ID]</string>\n```\n\n----------------------------------------\n\nTITLE: Using List Arguments in RFW Text Format\nDESCRIPTION: This snippet demonstrates how to use list arguments when defining a widget in the RFW text format.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/README.md#2025-04-22_snippet_7\n\nLANGUAGE: rfwtxt\nCODE:\n```\nwidget example3 = GreenBox(\n  child: Foo(\n    text: ['apple', 'banana']\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Installing camera_android Flutter Plugin\nDESCRIPTION: Shell command to add the camera_android plugin to a Flutter project using pub package manager. This command is used to explicitly choose this implementation over camera_android_camerax.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/camera/camera_android/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ flutter pub add camera_android\n```\n\n----------------------------------------\n\nTITLE: Describing Platform Implementation Test App in Markdown\nDESCRIPTION: This Markdown snippet outlines the purpose and scope of a test application for a Flutter platform implementation package. It emphasizes that the app is for testing purposes only and not for demonstrating actual package usage.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/webview_flutter/webview_flutter_wkwebview/example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Platform Implementation Test App\n\nThis is a test app for manual testing and automated integration testing\nof this platform implementation. It is not intended to demonstrate actual use of\nthis package, since the intent is that plugin clients use the app-facing\npackage.\n\nUnless you are making changes to this implementation package, this example is\nvery unlikely to be relevant.\n```\n\n----------------------------------------\n\nTITLE: Local Auth Example Title\nDESCRIPTION: The example project title in markdown format indicating the purpose of demonstrating the local_auth plugin functionality.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth/example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# local_auth_example\n\nDemonstrates how to use the local_auth plugin.\n```\n\n----------------------------------------\n\nTITLE: Local Authentication API Usage Example in Dart\nDESCRIPTION: Example showing the migration of the authenticate method parameters from the old to new API format in version 2.0.0\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Old way of calling `authenticate`.\nFuture<bool> authenticate(\n  localizedReason: 'localized reason',\n  useErrorDialogs: true,\n  stickyAuth: false,\n  androidAuthStrings: const AndroidAuthMessages(),\n  iOSAuthStrings: const IOSAuthMessages(),\n  sensitiveTransaction: true,\n  biometricOnly: false,\n);\n// New way of calling `authenticate`.\nFuture<bool> authenticate(\n  localizedReason: 'localized reason',\n  authMessages: const <AuthMessages>[\n    IOSAuthMessages(),\n    AndroidAuthMessages()\n  ],\n  options: const AuthenticationOptions(\n    useErrorDialogs: true,\n    stickyAuth: false,\n    sensitiveTransaction: true,\n    biometricOnly: false,\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Shared Preferences Foundation Package in Flutter\nDESCRIPTION: Instructions for adding the shared_preferences_foundation package to a Flutter project's pubspec.yaml file. This is only necessary if directly importing the package's APIs.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences_foundation/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nHowever, if you `import` this package to use any of its APIs directly, you\nshould add it to your `pubspec.yaml` as usual.\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Tiles Support in Dart\nDESCRIPTION: Adds functionality to support custom map tiles, allowing for customized map appearances.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_maps_flutter/google_maps_flutter/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nTileOverlay(\n  tileOverlayId: TileOverlayId('custom_tile'),\n  tileProvider: CustomTileProvider(),\n  // ...\n)\n```\n\n----------------------------------------\n\nTITLE: Adding macOS Entitlement for Read-Only File Access\nDESCRIPTION: XML configuration required in macOS entitlements file to enable read-only access to user-selected files.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n  <key>com.apple.security.files.user-selected.read-only</key>\n  <true/>\n```\n\n----------------------------------------\n\nTITLE: URL Launcher Example Project Title\nDESCRIPTION: Markdown header indicating this is an example project for the url_launcher plugin\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher/example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# url_launcher_example\n```\n\n----------------------------------------\n\nTITLE: Implementing Espresso Test Class for Flutter Widgets\nDESCRIPTION: Example Java test class demonstrating Espresso test implementation for Flutter widgets, including setup and a basic click test verification.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/espresso/README.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.espresso_example;\n\nimport static androidx.test.espresso.flutter.EspressoFlutter.onFlutterWidget;\nimport static androidx.test.espresso.flutter.action.FlutterActions.click;\nimport static androidx.test.espresso.flutter.action.FlutterActions.syntheticClick;\nimport static androidx.test.espresso.flutter.assertion.FlutterAssertions.matches;\nimport static androidx.test.espresso.flutter.matcher.FlutterMatchers.isDescendantOf;\nimport static androidx.test.espresso.flutter.matcher.FlutterMatchers.withText;\nimport static androidx.test.espresso.flutter.matcher.FlutterMatchers.withTooltip;\nimport static androidx.test.espresso.flutter.matcher.FlutterMatchers.withType;\nimport static androidx.test.espresso.flutter.matcher.FlutterMatchers.withValueKey;\nimport static com.google.common.truth.Truth.assertThat;\nimport static org.junit.Assert.fail;\n\nimport androidx.test.core.app.ActivityScenario;\nimport androidx.test.espresso.flutter.EspressoFlutter.WidgetInteraction;\nimport androidx.test.espresso.flutter.assertion.FlutterAssertions;\nimport androidx.test.espresso.flutter.matcher.FlutterMatchers;\nimport androidx.test.ext.junit.runners.AndroidJUnit4;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n\n/** Unit tests for {@link EspressoFlutter}. */\n@RunWith(AndroidJUnit4.class)\npublic class MainActivityTest {\n\n    @Before\n    public void setUp() throws Exception {\n        ActivityScenario.launch(MainActivity.class);\n    }\n\n    @Test\n    public void performClick() {\n        onFlutterWidget(withTooltip(\"Increment\")).perform(click());\n        onFlutterWidget(withValueKey(\"CountText\")).check(matches(withText(\"Button tapped 1 time.\")));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Markdown Widget in Flutter\nDESCRIPTION: Simple example showing the basic syntax for creating a Markdown widget in Flutter that renders formatted text.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_markdown/example/assets/original_markdown_example_data.md#2025-04-22_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nMarkdown(data: 'Hello _world_!');\n```\n\n----------------------------------------\n\nTITLE: GestureDetector with Void Callback Handler\nDESCRIPTION: Implementation of a GestureDetector with basic tap handling using voidHandler.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/README.md#2025-04-22_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nreturn <WidgetLibrary>[\n  LocalWidgetLibrary(<String, LocalWidgetBuilder>{\n    'GestureDetector': (BuildContext context, DataSource source) {\n      return GestureDetector(\n        onTap: source.voidHandler(<Object>['onTap']),\n        child: source.optionalChild(<Object>['child']),\n      );\n    },\n  }),\n];\n```\n\n----------------------------------------\n\nTITLE: URL Launcher Android Package Import Reference\nDESCRIPTION: Reference for importing the url_launcher_android package in a Flutter project's pubspec.yaml file. This is only needed if directly accessing the package's APIs.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher_android/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  url_launcher_android: ^x.y.z\n```\n\n----------------------------------------\n\nTITLE: Launching FlutterActivity from Launcher Activity in Java\nDESCRIPTION: Demonstrates how to launch a FlutterActivity (MainActivity) from a launcher activity in Java. It shows how to pass extras and set additional launch mode Intent flags for customizing back press behavior and task back stack.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/quick_actions/quick_actions_android/README.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic final class LauncherActivity extends Activity {\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    Intent mainActivityIntent = new Intent(this, MainActivity.class);\n    mainActivityIntent.putExtras(getIntent());\n\n    // Add any additional launch mode Intent flags you need:\n    mainActivityIntent.addFlags(...);\n\n    startActivity(mainActivityIntent);\n    finish();\n  }\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Full Uri in GoRouterRedirect\nDESCRIPTION: Exposes the full Uri on GoRouterState in GoRouterRedirect for more comprehensive redirection logic.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nGoRouter(\n  redirect: (BuildContext context, GoRouterState state) {\n    final Uri fullUri = state.uri;\n    // Use fullUri for redirection logic\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Flutter Method Invocations for In-App Purchases\nDESCRIPTION: This snippet demonstrates changes made in version 0.1.1+2, including adding a missing template type parameter to 'invokeMethod' calls and replacing 'invokeMethod' with 'invokeMapMethod' where necessary.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/in_app_purchase/in_app_purchase/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n// Changes in version 0.1.1+2\n// Add missing template type parameter\ninvokeMethod<ReturnType>('methodName', arguments);\n\n// Replace invokeMethod with invokeMapMethod\ninvokeMapMethod<String, dynamic>('methodName', arguments);\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Auth Windows Plugin Library\nDESCRIPTION: Creates a shared library for the local_auth_windows plugin, adds required source files, and configures compiler and linker settings. Sets C++20 standard, enables coroutine support, and links necessary dependencies.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth_windows/windows/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(${PLUGIN_NAME} SHARED\n  \"include/local_auth_windows/local_auth_plugin.h\"\n  \"local_auth_windows.cpp\"\n  ${PLUGIN_SOURCES}\n)\napply_standard_settings(${PLUGIN_NAME})\nset_target_properties(${PLUGIN_NAME} PROPERTIES CXX_VISIBILITY_PRESET hidden)\ntarget_compile_features(${PLUGIN_NAME} PRIVATE cxx_std_20)\ntarget_compile_options(${PLUGIN_NAME} PRIVATE /await)\ntarget_compile_definitions(${PLUGIN_NAME} PRIVATE FLUTTER_PLUGIN_IMPL)\ntarget_include_directories(${PLUGIN_NAME} INTERFACE\n  \"${CMAKE_CURRENT_SOURCE_DIR}/include\")\ntarget_link_libraries(${PLUGIN_NAME} PRIVATE ${CMAKE_BINARY_DIR}/packages/Microsoft.Windows.ImplementationLibrary.${WIL_VERSION}/build/native/Microsoft.Windows.ImplementationLibrary.targets)\ntarget_link_libraries(${PLUGIN_NAME} PRIVATE flutter flutter_wrapper_plugin windowsapp)\n```\n\n----------------------------------------\n\nTITLE: Flutter Packages Status Table in Markdown\nDESCRIPTION: A markdown table displaying Flutter packages with their respective status badges and repository links. Includes metrics for package versions, pub points, popularity, and GitHub issue/PR tracking.\nSOURCE: https://github.com/flutter/packages/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| [flutter\\_plugin\\_android\\_lifecycle](./packages/flutter_plugin_android_lifecycle/) | [![pub package](https://img.shields.io/pub/v/flutter_plugin_android_lifecycle.svg)](https://pub.dev/packages/flutter_plugin_android_lifecycle) | [![pub points](https://img.shields.io/pub/points/flutter_plugin_android_lifecycle)](https://pub.dev/packages/flutter_plugin_android_lifecycle/score) | [![popularity](https://img.shields.io/pub/popularity/flutter_plugin_android_lifecycle)](https://pub.dev/packages/flutter_plugin_android_lifecycle/score) | [![GitHub issues by-label](https://img.shields.io/github/issues/flutter/flutter/p%3A%20flutter_plugin_android_lifecycle?label=)](https://github.com/flutter/flutter/labels/p%3A%20flutter_plugin_android_lifecycle) | [![GitHub pull requests by-label](https://img.shields.io/github/issues-pr/flutter/packages/p%3A%20flutter_plugin_android_lifecycle?label=)](https://github.com/flutter/packages/labels/p%3A%20flutter_plugin_android_lifecycle) |\n```\n\n----------------------------------------\n\nTITLE: Updating Android Google Maps SDK Version in Dart\nDESCRIPTION: Updates the Android Google Maps SDK version to 18.0.2 in the plugin implementation.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_maps_flutter/google_maps_flutter/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\n// In pubspec.yaml or build.gradle\ngoogle_maps_android: ^18.0.2\n```\n\n----------------------------------------\n\nTITLE: Adding macOS Entitlement for Read-Write File Access\nDESCRIPTION: XML configuration required in macOS entitlements file to enable read-write access to user-selected files.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector/README.md#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n  <key>com.apple.security.files.user-selected.read-write</key>\n  <true/>\n```\n\n----------------------------------------\n\nTITLE: Creating Atx-style Headers in Markdown\nDESCRIPTION: Demonstrates how to use hash symbols (#) for creating headers of different levels in Markdown, from H1 to H6.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_markdown/example/assets/original_markdown_example_data.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# This is an H1\n\n## This is an H2\n\n###### This is an H6\n```\n\n----------------------------------------\n\nTITLE: GestureDetector with TapDown Handler\nDESCRIPTION: Example of implementing a tap down handler with position data in a GestureDetector.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/README.md#2025-04-22_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nreturn GestureDetector(\n  onTapDown: source.handler(<Object>['onTapDown'], (HandlerTrigger trigger) {\n    return (TapDownDetails details) => trigger(<String, Object>{\n      'x': details.globalPosition.dx,\n      'y': details.globalPosition.dy,\n    });\n  }),\n  child: source.optionalChild(<Object>['child']),\n);\n```\n\n----------------------------------------\n\nTITLE: Flutter Packages Status Table in Markdown\nDESCRIPTION: A markdown table displaying Flutter packages with their pub.dev metrics and GitHub issue tracking badges. Each row contains a package name with links to its source, pub package version badge, points, popularity score, and issue/PR tracking badges.\nSOURCE: https://github.com/flutter/packages/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Package | Pub | Points | Popularity | Issues | Pull requests |\n|---------|-----|--------|------------|--------|---------------|\n| [animations](./packages/animations/) | [![pub package](https://img.shields.io/pub/v/animations.svg)](https://pub.dev/packages/animations) | [![pub points](https://img.shields.io/pub/points/animations)](https://pub.dev/packages/animations/score) | [![popularity](https://img.shields.io/pub/popularity/animations)](https://pub.dev/packages/animations/score) | [![GitHub issues by-label](https://img.shields.io/github/issues/flutter/flutter/p%3A%20animations?label=)](https://github.com/flutter/flutter/labels/p%3A%20animations) | [![GitHub pull requests by-label](https://img.shields.io/github/issues-pr/flutter/packages/p%3A%20animations?label=)](https://github.com/flutter/packages/labels/p%3A%20animations) |\n```\n\n----------------------------------------\n\nTITLE: Defining FlutterApi Interface in Dart\nDESCRIPTION: This snippet shows the Dart code that defines the interface for calling into the Flutter app from the host platform.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/README.md#2025-04-22_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n@FlutterApi()\nabstract class MessageFlutterApi {\n  String flutterMethod(String? aString);\n}\n```\n\n----------------------------------------\n\nTITLE: Flutter Package Version History Documentation\nDESCRIPTION: Version history showing the evolution of the package from initial release through breaking changes and feature additions. Notable changes include H5 Games Ads API addition, AdSense initialization parameters, and testing callback implementation.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_adsense/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.2\n\n* Added a callback to the widget for testing to make unit tests more deterministic.\n\n## 0.1.1\n\n* Adds `AdSenseCodeParameters` configuration object for `adSense.initialize`.\n* Adds a 100ms delay to `adBreak` and `showAdFn`, so Flutter tapevents have time\n  to settle before an H5 Ad takes over the screen.\n\n## 0.1.0\n\n* Adds H5 Games Ads API as `h5` library.\n\n## 0.0.2\n\n* **Breaking changes**: Reshuffles API exports:\n  * Makes `adSense.initialize` async.\n  * Removes the `adUnit` method, and instead exports the `AdUnitWidget` directly.\n  * Renames `experimental/google_adsense` to `experimental/ad_unit_widget.dart`.\n  * Removes the `AdStatus` and `AdUnitParams` exports.\n  * Removes the \"stub\" files, so this package is now web-only and must be used\n    through a conditional import.\n* Tweaks several documentation pages to remove references to internal APIs.\n* Splits tests to reflect the new code structure.\n\n## 0.0.1\n\n* Initial release.\n```\n\n----------------------------------------\n\nTITLE: Using namedLocation for Route Navigation\nDESCRIPTION: Demonstrates an alternative approach to named route navigation by first getting the location using namedLocation and then using the go method.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/doc/named-routes.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nTextButton(\n  onPressed: () {\n    final String location = context.namedLocation('song', pathParameters: {'songId': 123});\n    context.go(location);\n  },\n  child: const Text('Go to song 2'),\n),\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 0.1.0 Changes in Markdown\nDESCRIPTION: This snippet outlines the changes in version 0.1.0, including a dependency update, addition of a test and example, and a bug fix for hyperlink taps.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_markdown/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.0\n\n* Roll the dependency on `markdown` to 1.0.0\n* Add a test and example for image links\n* Fix the `onTap` callback on hyperlinks\n```\n\n----------------------------------------\n\nTITLE: Configuring Camera Windows Plugin Build in CMake\nDESCRIPTION: Sets up the build configuration for the Camera Windows plugin including project initialization, source files, library creation, compiler settings, and dependencies. The configuration handles both the main plugin library build and test setup using GoogleTest.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/camera/camera_windows/windows/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nset(PROJECT_NAME \"camera_windows\")\nproject(${PROJECT_NAME} LANGUAGES CXX)\n\ncmake_policy(VERSION 3.14...3.24)\n\n# This value is used when generating builds using this plugin, so it must\n# not be changed\nset(PLUGIN_NAME \"${PROJECT_NAME}_plugin\")\n\nlist(APPEND PLUGIN_SOURCES\n  \"camera_plugin.h\"\n  \"camera_plugin.cpp\"\n  \"camera.h\"\n  \"camera.cpp\"\n  \"capture_controller.h\"\n  \"capture_controller.cpp\"\n  \"capture_controller_listener.h\"\n  \"capture_engine_listener.h\"\n  \"capture_engine_listener.cpp\"\n  \"string_utils.h\"\n  \"string_utils.cpp\"\n  \"capture_device_info.h\"\n  \"capture_device_info.cpp\"\n  \"messages.g.h\"\n  \"messages.g.cpp\"\n  \"preview_handler.h\"\n  \"preview_handler.cpp\"\n  \"record_handler.h\"\n  \"record_handler.cpp\"\n  \"photo_handler.h\"\n  \"photo_handler.cpp\"\n  \"texture_handler.h\"\n  \"texture_handler.cpp\"\n  \"com_heap_ptr.h\"\n)\n\nadd_library(${PLUGIN_NAME} SHARED\n  \"camera_windows.cpp\"\n  \"include/camera_windows/camera_windows.h\"\n  ${PLUGIN_SOURCES}\n)\n\napply_standard_settings(${PLUGIN_NAME})\nset_target_properties(${PLUGIN_NAME} PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_compile_definitions(${PLUGIN_NAME} PRIVATE FLUTTER_PLUGIN_IMPL)\ntarget_include_directories(${PLUGIN_NAME} INTERFACE\n  \"${CMAKE_CURRENT_SOURCE_DIR}/include\")\ntarget_link_libraries(${PLUGIN_NAME} PRIVATE flutter flutter_wrapper_plugin)\ntarget_link_libraries(${PLUGIN_NAME} PRIVATE mf mfplat mfuuid d3d11)\n\n# List of absolute paths to libraries that should be bundled with the plugin\nset(camera_windows_bundled_libraries\n  \"\"\n  PARENT_SCOPE\n)\n\n\n# === Tests ===\n\nif (${include_${PROJECT_NAME}_tests})\nset(TEST_RUNNER \"${PROJECT_NAME}_test\")\nenable_testing()\n# TODO(stuartmorgan): Consider using a single shared, pre-checked-in googletest\n# instance rather than downloading for each plugin. This approach makes sense\n# for a template, but not for a monorepo with many plugins.\ninclude(FetchContent)\nFetchContent_Declare(\n  googletest\n  URL https://github.com/google/googletest/archive/release-1.11.0.zip\n)\n# Prevent overriding the parent project's compiler/linker settings\nset(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n# Disable install commands for gtest so it doesn't end up in the bundle.\nset(INSTALL_GTEST OFF CACHE BOOL \"Disable installation of googletest\" FORCE)\n\nFetchContent_MakeAvailable(googletest)\n\n# The plugin's C API is not very useful for unit testing, so build the sources\n# directly into the test binary rather than using the DLL.\nadd_executable(${TEST_RUNNER}\n  test/mocks.h\n  test/camera_plugin_test.cpp\n  test/camera_test.cpp\n  test/capture_controller_test.cpp\n  ${PLUGIN_SOURCES}\n)\napply_standard_settings(${TEST_RUNNER})\ntarget_include_directories(${TEST_RUNNER} PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}\")\ntarget_link_libraries(${TEST_RUNNER} PRIVATE flutter_wrapper_plugin)\ntarget_link_libraries(${TEST_RUNNER} PRIVATE mf mfplat mfuuid d3d11)\ntarget_link_libraries(${TEST_RUNNER} PRIVATE gtest_main gmock)\n\n# flutter_wrapper_plugin has link dependencies on the Flutter DLL.\nadd_custom_command(TARGET ${TEST_RUNNER} POST_BUILD\n  COMMAND ${CMAKE_COMMAND} -E copy_if_different\n  \"${FLUTTER_LIBRARY}\" $<TARGET_FILE_DIR:${TEST_RUNNER}>\n)\n\ninclude(GoogleTest)\ngtest_discover_tests(${TEST_RUNNER})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies and Configuring Output for Flutter Linux Application\nDESCRIPTION: Applies standard settings to the binary, links required libraries (Flutter and GTK), adds dependencies, and configures output directory. This ensures the application is properly built with all necessary dependencies and placed in the correct location.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector/example/linux/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 2.8.2\nDESCRIPTION: Documents addition of WebSettings.setAllowFileAccess() method\nSOURCE: https://github.com/flutter/packages/blob/main/packages/webview_flutter/webview_flutter_android/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.8.2\n\n* Adds the `WebSettings.setAllowFileAccess()` method and ensure that file access is allowed when the `WebViewAndroidWidget.loadFile()` method is executed.\n```\n\n----------------------------------------\n\nTITLE: Configuring Project and Build Settings for Flutter Windows Application\nDESCRIPTION: Sets up the basic project configuration, defines the executable name, and configures build options including Debug, Profile, and Release modes. It establishes CMake policies and defines build-specific flags for different configurations.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector/example/windows/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# Project-level configuration.\ncmake_minimum_required(VERSION 3.14)\nproject(example LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"example\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Define build configuration option.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n# Define settings for the Profile build mode.\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Package Version 0.2.1+2 Changes\nDESCRIPTION: Updates the minimum supported SDK version requirement to Flutter 3.22/Dart 3.4 and includes fixes for getMedia mime types.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker_linux/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.1+2\n\n* Updates minimum supported SDK version to Flutter 3.22/Dart 3.4.\n* Fixes `getMedia` mime types.\n```\n\n----------------------------------------\n\nTITLE: Calculator Button Event Definition\nDESCRIPTION: Example of defining a calculator button with event handling in RFW format.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/README.md#2025-04-22_snippet_11\n\nLANGUAGE: rfwtxt\nCODE:\n```\nCalculatorButton(label: \"7\", onPressed: event \"digit\" { arguments: [7] }),\n```\n\n----------------------------------------\n\nTITLE: Adding JavaScript Dialog Support in Flutter WebView\nDESCRIPTION: Adds support to show JavaScript dialog using PlatformWebViewController methods for alert, confirm, and text input dialogs in version 2.9.0.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/webview_flutter/webview_flutter_platform_interface/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.9.0\n\n* Adds support to show JavaScript dialog. See `PlatformWebViewController.setOnJavaScriptAlertDialog`, `PlatformWebViewController.setOnJavaScriptConfirmDialog` and `PlatformWebViewController.setOnJavaScriptTextInputDialog`.\n```\n\n----------------------------------------\n\nTITLE: Accessing Platform-Specific Product Details on Android (Dart)\nDESCRIPTION: Shows how to access Android-specific product details like introductoryPricePeriod from a ProductDetails object.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/in_app_purchase/in_app_purchase/README.md#2025-04-22_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nif (productDetails is GooglePlayProductDetails) {\n  SkuDetailsWrapper skuDetails = (productDetails as GooglePlayProductDetails).skuDetails;\n  print(skuDetails.introductoryPricePeriod);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MyApp Widget for Vector Graphics Example\nDESCRIPTION: This snippet creates the MyApp widget, which sets up the application's theme and initial route.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/vector_graphics/example/README.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: const MyHomePage(title: 'Flutter Demo Home Page'),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Setext-style Headers in Markdown\nDESCRIPTION: Shows how to create Setext-style headers in Markdown by using equals signs for H1 and hyphens for H2 under the text.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_markdown/example/assets/original_markdown_example_data.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nThis is an H1\n=============\n\nThis is an H2\n-------------\n```\n\n----------------------------------------\n\nTITLE: Installing go_router_builder Dependencies\nDESCRIPTION: Required dev dependencies configuration in pubspec.yaml for implementing type-safe routing\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/doc/type-safe-routes.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndev_dependencies:\n  go_router_builder: any\n  build_runner: any\n  build_verify: any\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Environment for Local Auth Windows Plugin\nDESCRIPTION: Sets up testing for the local_auth_windows plugin using Google Test. Downloads and configures Google Test framework, creates a test executable with mocks, and configures it to discover and run tests.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth_windows/windows/CMakeLists.txt#2025-04-22_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif (${include_${PROJECT_NAME}_tests})\nset(TEST_RUNNER \"${PROJECT_NAME}_test\")\nenable_testing()\n# TODO(stuartmorgan): Consider using a single shared, pre-checked-in googletest\n# instance rather than downloading for each plugin. This approach makes sense\n# for a template, but not for a monorepo with many plugins.\nFetchContent_Declare(\n  googletest\n  URL https://github.com/google/googletest/archive/release-1.11.0.zip\n)\n# Prevent overriding the parent project's compiler/linker settings\nset(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n# Disable install commands for gtest so it doesn't end up in the bundle.\nset(INSTALL_GTEST OFF CACHE BOOL \"Disable installation of googletest\" FORCE)\n\nFetchContent_MakeAvailable(googletest)\n\n# The plugin's C API is not very useful for unit testing, so build the sources\n# directly into the test binary rather than using the DLL.\nadd_executable(${TEST_RUNNER}\n  test/mocks.h\n  test/local_auth_plugin_test.cpp\n  ${PLUGIN_SOURCES}\n)\napply_standard_settings(${TEST_RUNNER})\ntarget_include_directories(${TEST_RUNNER} PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}\")\ntarget_compile_features(${TEST_RUNNER} PRIVATE cxx_std_20)\ntarget_compile_options(${TEST_RUNNER} PRIVATE /await)\ntarget_link_libraries(${TEST_RUNNER} PRIVATE ${CMAKE_BINARY_DIR}/packages/Microsoft.Windows.ImplementationLibrary.${WIL_VERSION}/build/native/Microsoft.Windows.ImplementationLibrary.targets)\ntarget_link_libraries(${TEST_RUNNER} PRIVATE flutter_wrapper_plugin)\ntarget_link_libraries(${TEST_RUNNER} PRIVATE windowsapp)\ntarget_link_libraries(${TEST_RUNNER} PRIVATE gtest_main gmock)\n\n# flutter_wrapper_plugin has link dependencies on the Flutter DLL.\nadd_custom_command(TARGET ${TEST_RUNNER} POST_BUILD\n  COMMAND ${CMAKE_COMMAND} -E copy_if_different\n  \"${FLUTTER_LIBRARY}\" $<TARGET_FILE_DIR:${TEST_RUNNER}>\n)\n\ninclude(GoogleTest)\ngtest_discover_tests(${TEST_RUNNER})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Updating Release Information\nDESCRIPTION: Command to update version and CHANGELOG across multiple packages with specified changes\nSOURCE: https://github.com/flutter/packages/blob/main/script/tool/README.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ndart run script/tool/bin/flutter_plugin_tools.dart update-release-info \\\n  --version=minimal \\\n  --base-branch=upstream/main \\\n  --changelog=\"Fixes violations of new analysis option some_new_option.\"\n```\n\n----------------------------------------\n\nTITLE: WebView Package Version Numbers\nDESCRIPTION: Version number declarations and their associated changes in the WebView Flutter package, showing the evolution of features and requirements over time.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/webview_flutter/webview_flutter/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## NEXT\n\n* Updates README to indicate that Andoid SDK <21 is no longer supported.\n\n## 4.11.0\n\n* Adds support to set the over-scroll mode for the WebView. See `WebViewController.setOverScrollMode`.\n* Updates minimum supported SDK version to Flutter 3.27/Dart 3.6.\n```\n\n----------------------------------------\n\nTITLE: Configuring AOT Library Installation for Release Builds in Flutter Windows\nDESCRIPTION: Sets up installation rules for the AOT (Ahead-of-Time) compiled library for Profile and Release builds only. The AOT library improves performance in production builds but is not needed for Debug builds.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_adaptive_scaffold/example/windows/CMakeLists.txt#2025-04-22_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Running Pigeon from Command Line\nDESCRIPTION: This snippet demonstrates how to run Pigeon on a Dart input file using the command line.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndart run pigeon --input path/to/input.dart\n```\n\n----------------------------------------\n\nTITLE: Changelog entries for Linux file_selector package\nDESCRIPTION: Version history entries detailing changes from initial release (0.0.1) through current version, including SDK requirements, feature additions, and bug fixes\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_linux/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## NEXT\n\n* Updates minimum supported SDK version to Flutter 3.22/Dart 3.4.\n\n## 0.9.3+2\n\n* Updates Pigeon to resolve a compilation failure with some versions of glib.\n\n## 0.9.3+1\n\n* Fixes a regression in 0.9.3 with handling of canceled dialogs.\n\n## 0.9.3\n\n* Updates method channel implementation to use Pigeon.\n* Updates minimum supported SDK version to Flutter 3.19/Dart 3.3.\n\n## 0.9.2+1\n\n* Adds pub topics to package metadata.\n* Updates minimum supported SDK version to Flutter 3.7/Dart 2.19.\n* Migrates `styleFrom` usage in examples off of deprecated `primary` and `onPrimary` parameters.\n\n## 0.9.2\n\n* Adds `getSaveLocation` and deprecates `getSavePath`.\n* Updates minimum supported SDK version to Flutter 3.3/Dart 2.18.\n\n## 0.9.1+3\n\n* Sets a cmake_policy compatibility version to fix build warnings.\n\n## 0.9.1+2\n\n* Clarifies explanation of endorsement in README.\n* Aligns Dart and Flutter SDK constraints.\n\n## 0.9.1+1\n\n* Updates links for the merge of flutter/plugins into flutter/packages.\n* Updates example code for `use_build_context_synchronously` lint.\n* Updates minimum Flutter version to 3.0.\n\n## 0.9.1\n\n* Adds `getDirectoryPaths` implementation.\n\n## 0.9.0+1\n\n* Changes XTypeGroup initialization from final to const.\n* Updates minimum Flutter version to 2.10.\n\n## 0.9.0\n\n* Moves source to flutter/plugins.\n\n## 0.0.3\n\n* Adds Dart implementation for in-package method channel.\n\n## 0.0.2+1\n\n* Updates README\n\n## 0.0.2\n\n* Updates SDK constraint to signal compatibility with null safety.\n\n## 0.0.1\n\n* Initial Linux implementation of `file_selector`.\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Application Installation for Windows\nDESCRIPTION: Defines the installation process for the Flutter application on Windows. Sets up the bundle directory structure, installs the executable, ICU data, Flutter library, bundled plugin libraries, and assets. Also handles special installation of the AOT library for non-Debug builds.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector/example/windows/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding New Property to Class in Markdown\nDESCRIPTION: This snippet documents the addition of the 'allowsAny' property to XTypeGroup in version 2.1.0 of the package.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_platform_interface/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n## 2.1.0\n\n* Adds `allowsAny` to `XTypeGroup` as a simple and future-proof way of identifying\n  wildcard groups.\n```\n\n----------------------------------------\n\nTITLE: Configuring File Selector Windows Plugin Library in CMake\nDESCRIPTION: Sets up the core configuration for the file_selector_windows plugin library, defining the project name, required sources, and compilation settings. It creates a shared library with specific compiler options and links against Flutter libraries.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_windows/windows/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nset(PROJECT_NAME \"file_selector_windows\")\nproject(${PROJECT_NAME} LANGUAGES CXX)\n\ncmake_policy(VERSION 3.14...3.24)\n\nset(PLUGIN_NAME \"${PROJECT_NAME}_plugin\")\n\nlist(APPEND PLUGIN_SOURCES\n  \"file_dialog_controller.cpp\"\n  \"file_dialog_controller.h\"\n  \"file_selector_plugin.cpp\"\n  \"file_selector_plugin.h\"\n  \"messages.g.cpp\"\n  \"messages.g.h\"\n  \"string_utils.cpp\"\n  \"string_utils.h\"\n)\n\nadd_library(${PLUGIN_NAME} SHARED\n  \"file_selector_windows.cpp\"\n  \"include/file_selector_windows/file_selector_windows.h\"\n  ${PLUGIN_SOURCES}\n)\napply_standard_settings(${PLUGIN_NAME})\nset_target_properties(${PLUGIN_NAME} PROPERTIES CXX_VISIBILITY_PRESET hidden)\ntarget_compile_definitions(${PLUGIN_NAME} PRIVATE FLUTTER_PLUGIN_IMPL)\ntarget_include_directories(${PLUGIN_NAME} INTERFACE\n  \"${CMAKE_CURRENT_SOURCE_DIR}/include\")\ntarget_link_libraries(${PLUGIN_NAME} PRIVATE flutter flutter_wrapper_plugin)\n# Override apply_standard_settings for exceptions due to\n# https://developercommunity.visualstudio.com/t/stdany-doesnt-link-when-exceptions-are-disabled/376072\ntarget_compile_definitions(${PLUGIN_NAME} PRIVATE \"_HAS_EXCEPTIONS=1\")\n\n# List of absolute paths to libraries that should be bundled with the plugin\nset(file_selector_bundled_libraries\n  \"\"\n  PARENT_SCOPE\n)\n```\n\n----------------------------------------\n\nTITLE: Adding WebResourceRequest and WebResourceResponse to HttpResponseError in Flutter\nDESCRIPTION: Adds WebResourceRequest and WebResourceResponse to HttpResponseError in version 2.10.0 of the webview_flutter_platform_interface package.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/webview_flutter/webview_flutter_platform_interface/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.10.0\n\n* Adds `WebResourceRequest` and `WebResourceResponse` to `HttpResponseError`.\n```\n\n----------------------------------------\n\nTITLE: Loading Google Maps API with Drawing Library in HTML\nDESCRIPTION: Code to add to the <head> tag to load Google Maps API with the drawing library. This is needed if your app requires drawing polygons, rectangles, polylines, circles, or markers on the map.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_maps_flutter/google_maps_flutter_web/README.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script\n  src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=drawing\">\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting up Flutter Windows CMake Environment\nDESCRIPTION: Initializes the CMake environment with minimum required version and includes the Flutter-generated configuration. Defines key directories and fallback configurations for the Flutter Windows platform.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_markdown/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n\n# Set fallback configurations for older versions of the flutter tool.\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Stream Handler in Swift\nDESCRIPTION: Defines an event listener class in Swift that handles different types of platform events and manages event sink.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/README.md#2025-04-22_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nclass EventListener: StreamEventsStreamHandler {\n  var eventSink: PigeonEventSink<PlatformEvent>?\n\n  override func onListen(withArguments arguments: Any?, sink: PigeonEventSink<PlatformEvent>) {\n    eventSink = sink\n  }\n\n  func onIntEvent(event: Int64) {\n    if let eventSink = eventSink {\n      eventSink.success(IntEvent(data: event))\n    }\n  }\n\n  func onStringEvent(event: String) {\n    if let eventSink = eventSink {\n      eventSink.success(StringEvent(data: event))\n    }\n  }\n\n  func onEventsDone() {\n    eventSink?.endOfStream()\n    eventSink = nil\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Message Structure Example\nDESCRIPTION: Example JSON structure showing a simple data array format that demonstrates the encoding overhead of text-based formats\nSOURCE: https://github.com/flutter/packages/blob/main/packages/standard_message_codec/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": [1, 2, 3, 4],\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Scroll Position Change Tracking in Flutter WebView\nDESCRIPTION: Adds support to track scroll position changes using PlatformWebViewController.setOnScrollPositionChange in version 2.8.0 of the package.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/webview_flutter/webview_flutter_platform_interface/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.8.0\n\n* Adds support to track scroll position changes. See `PlatformWebViewController.setOnScrollPositionChange`.\n```\n\n----------------------------------------\n\nTITLE: Changelog Entries in Markdown\nDESCRIPTION: Detailed version history documenting bug fixes, feature additions, and improvements across multiple releases of the vector graphics package.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/vector_graphics_compiler/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.1.17\n\n* Fixes a bug where stroke opacity not applied by color mapper.\n\n## 1.1.16\n\n* Sets stroke-width to 1 by default when an invalid value is parsed instead of throwing an exception.\n\n## 1.1.15\n\n* Fixes a bug where empty tags caused the parser to crash.\n\n## 1.1.14\n\n* Makes the package WASM compatible.\n\n## 1.1.13\n\n* Relaxes dependency constraint on vector_graphics_codec.\n\n## 1.1.12\n\n* Transfers the package source from https://github.com/dnfield/vector_graphics\n  to https://github.com/flutter/packages.\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation for Flutter Windows Application\nDESCRIPTION: Sets up installation rules for the application, including copying support files, Flutter ICU data, libraries, and assets. It also handles AOT library installation for non-Debug builds.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Formatting Links in Markdown\nDESCRIPTION: Shows two methods for creating hyperlinks in Markdown: inline-style links and reference-style links that use a reference defined elsewhere in the document.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_markdown/example/assets/original_markdown_example_data.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[inline-style](https://www.google.com)\n\n[reference-style][Google]\n```\n\n----------------------------------------\n\nTITLE: Adding Hybrid Composition Support for Android in Dart\nDESCRIPTION: Provides access to Hybrid Composition on Android through the GoogleMap widget.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_maps_flutter/google_maps_flutter/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nGoogleMap(\n  // ...\n  androidUseHybridComposition: true,\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Assets Installation for Windows Application\nDESCRIPTION: Configures the installation of Flutter assets, ensuring they are copied fresh on each build. This prevents stale files from previous installations and ensures the application has the latest assets.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_adaptive_scaffold/example/windows/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Closed Caption File in Dart\nDESCRIPTION: Example of setting a closed caption file for the video player.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/video_player/video_player/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\ncontroller.setClosedCaptionFile(closedCaptionFile);\n```\n\n----------------------------------------\n\nTITLE: Importing Two Dimensional Scrollables Package in Dart\nDESCRIPTION: Dart import statement to use the two_dimensional_scrollables package in Flutter code.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/two_dimensional_scrollables/README.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:two_dimensional_scrollables/two_dimensional_scrollables.dart';\n```\n\n----------------------------------------\n\nTITLE: Listing RemoteWidget Example Projects in Markdown\nDESCRIPTION: A markdown-formatted list describing various example projects that demonstrate different features of RemoteWidget in Flutter. The examples cover basic rendering, local widget definitions, remote file fetching, and WebAssembly integration.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `hello` shows how `RemoteWidget` can render some widgets from a\n  description interpreted at runtime.\n\n* `local` shows how to create new local widget definitions for use in\n  remote widget descriptions.\n\n* `remote` is a proof-of-concept showing files being obtained from a\n  remote server and rendered by the application at runtime.\n\n* `wasm` shows how package:rfw can be combined with package:wasm to\n  configure logic as well as the user interface at runtime.\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog\nDESCRIPTION: A markdown formatted changelog detailing version history from 1.0.0 to 5.0.0, including changes to template assets, directory structures, and SDK requirements\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_template_images/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 5.0.0\n\n* Removes `app_shared` and `skeleton`, which are [no longer used](https://github.com/flutter/flutter/issues/160692).\n\n## 4.3.0\n\n* Updates minimum supported SDK version to Flutter 3.22/Dart 3.4.\n* Creates a copy of `app_shared` named `app` (`app_shared` will no longer be used).\n\n## 4.2.1\n\n* Adds pub topics to package metadata.\n* Updates minimum supported SDK version to Flutter 3.7/Dart 2.19.\n* Updates minimum SDK version to Flutter 3.0.\n\n## 4.2.0\n\n* Adds iOS template app icons, updated to square icons with no transparency.\n\n## 4.1.1\n\n* Removes empty Dart file.\n* Opts in to NNBD (which is a no-op) so it's not flagged by pub.dev.\n\n## 4.1.0\n\n* Updates package description.\n* Adds macOS template app icons, updated to Big Sur style.\n\n## 4.0.0\n\n* Move assets common to all app templates to a new `app_shared` directory\n  (relands changes reverted in 3.0.0).\n* Create `skeleton` directory and assets to support new app template\n  (formerly known as `list_detail_app`).\n\n## 3.0.1\n\n* Fix maskable icon file names\n* Fix maskable icon image dimensions\n\n## 3.0.0\n\n* Reverts to the 1.0 layout, since the new app template never landed.\n* Added additional icons for winuwp template.\n\n## 2.0.0\n\n* Move assets common to all app templates to a new `app_shared` directory.\n* Create `list_detail_app` directory and assets to support new app template.\n\n## 1.0.1\n\n* Moved Windows app template icon for new folder structure.\n\n## 1.0.0\n\n* Windows app template icon.\n```\n\n----------------------------------------\n\nTITLE: Accessing Activity Lifecycle in Flutter Android Plugin\nDESCRIPTION: This example demonstrates how to use FlutterLifecycleAdapter within a Flutter plugin's Android implementation to access the Activity lifecycle. The code shows the implementation of a FlutterPlugin that is also ActivityAware, with focus on the onAttachedToActivity method where the lifecycle is retrieved.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_plugin_android_lifecycle/README.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport androidx.lifecycle.Lifecycle;\nimport io.flutter.embedding.engine.FlutterEngine;\nimport io.flutter.embedding.engine.plugins.FlutterPlugin;\nimport io.flutter.embedding.engine.plugins.activity.ActivityAware;\nimport io.flutter.embedding.engine.plugins.FlutterPlugin.FlutterPluginBinding;\nimport io.flutter.embedding.engine.plugins.lifecycle.FlutterLifecycleAdapter;\n\npublic class MyPlugin implements FlutterPlugin, ActivityAware {\n  @Override\n  public void onAttachedToActivity(ActivityPluginBinding binding) {\n    Lifecycle lifecycle = FlutterLifecycleAdapter.getActivityLifecycle(binding);\n    // Use lifecycle as desired.\n  }\n\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up System Dependencies for Flutter on Linux\nDESCRIPTION: Finds and configures system-level dependencies required for Flutter on Linux, including GTK, GLIB, and GIO.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/path_provider/path_provider_linux/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter Library ===\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Flutter Driver Test Entry Point\nDESCRIPTION: Dart code setup for enabling Flutter Driver extension in test environment, serving as the entry point for Espresso tests.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/espresso/README.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter_driver/driver_extension.dart';\nimport 'package:<app_package_name>/main.dart' as app;\n\nvoid main() {\n  enableFlutterDriverExtension();\n  app.main();\n}\n```\n\n----------------------------------------\n\nTITLE: Package Import Reference in Markdown\nDESCRIPTION: Reference to the package import syntax used in Flutter applications for vector graphics support.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/vector_graphics_codec/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\npackage:vector_graphics\n```\n\n----------------------------------------\n\nTITLE: Mocking Platform Interface in Dart Tests\nDESCRIPTION: Example of creating a mock implementation of a platform interface for testing purposes using Mockito and MockPlatformInterfaceMixin.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/plugin_platform_interface/README.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass SamplePluginPlatformMock extends Mock\n    with MockPlatformInterfaceMixin\n    implements SamplePluginPlatform {}\n```\n\n----------------------------------------\n\nTITLE: Adding New Method to Interface in Markdown\nDESCRIPTION: This snippet documents the addition of the 'getDirectoryPaths' method to the interface in version 2.4.0 of the package.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_platform_interface/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n## 2.4.0\n\n* Adds `getDirectoryPaths` method to the interface.\n```\n\n----------------------------------------\n\nTITLE: Generating Windows Runtime Headers with CppWinRT\nDESCRIPTION: Executes the CppWinRT tool to generate Windows Runtime headers based on the SDK input. Creates the necessary include files for Windows API integration.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth_windows/windows/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(CPPWINRT ${CMAKE_BINARY_DIR}/packages/Microsoft.Windows.CppWinRT.${CPPWINRT_VERSION}/bin/cppwinrt.exe)\nexecute_process(COMMAND\n    ${CPPWINRT} -input sdk -output include\n    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}\n    RESULT_VARIABLE ret)\nif (NOT ret EQUAL 0)\n    message(FATAL_ERROR \"Failed to run cppwinrt.exe\")\nendif()\n\ninclude_directories(BEFORE SYSTEM ${CMAKE_BINARY_DIR}/include)\n```\n\n----------------------------------------\n\nTITLE: Running Redirection Example\nDESCRIPTION: Command to run an example demonstrating synchronous sign-in flow handling using GoRouter redirection\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/example/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nflutter run lib/redirection.dart\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Initial Route in GoRouter\nDESCRIPTION: Adds an optional parameter to override the initial route set by the platform in GoRouter.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nGoRouter(\n  // ...\n  overridePlatformDefaultLocation: '/custom-initial-route',\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Assets and AOT Library Installation in CMake\nDESCRIPTION: Sets up the installation of Flutter assets and the AOT library. This section ensures that the assets directory is fully re-copied on each build to avoid stale files, and installs the AOT library only on non-Debug builds.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_markdown/example/linux/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 2.8.4\nDESCRIPTION: Documents bug fixes for mockito code generation and WebViewController.clearCache functionality\nSOURCE: https://github.com/flutter/packages/blob/main/packages/webview_flutter/webview_flutter_android/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.8.4\n\n* Fixes bug preventing `mockito` code generation for tests.\n* Fixes regression where local storage wasn't cleared when `WebViewController.clearCache` was called.\n```\n\n----------------------------------------\n\nTITLE: Implementing Nullable Parameters in Dart\nDESCRIPTION: Implements support for nullable parameters in generated Dart code, requiring Dart 2.12 or later.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass MyClass {\n  String? nullableField;\n  int nonNullableField;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Espresso Tests Commands\nDESCRIPTION: Shell commands for executing Espresso tests both locally and on Firebase Test Lab, including authentication and configuration steps.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/espresso/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n./gradlew app:connectedAndroidTest -Ptarget=`pwd`/../test_driver/example.dart\n```\n\nLANGUAGE: sh\nCODE:\n```\n./gradlew app:assembleAndroidTest\n./gradlew app:assembleDebug -Ptarget=<path_to_test>.dart\ngcloud auth activate-service-account --key-file=<PATH_TO_KEY_FILE>\ngcloud --quiet config set project <PROJECT_NAME>\ngcloud firebase test android run --type instrumentation \\\n  --app build/app/outputs/apk/debug/app-debug.apk \\\n  --test build/app/outputs/apk/androidTest/debug/app-debug-androidTest.apk\\\n  --timeout 2m \\\n  --results-bucket=<RESULTS_BUCKET> \\\n  --results-dir=<RESULTS_DIRECTORY>\n```\n\n----------------------------------------\n\nTITLE: Creating the Flutter interface library\nDESCRIPTION: Configures a Flutter interface library by setting up header files, include directories, and linking against the Flutter Windows DLL. Adds dependencies to ensure proper build sequencing.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth_windows/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding New Method in Markdown\nDESCRIPTION: This snippet introduces a new method 'getSaveLocation' and deprecates 'getSavePath' in version 2.6.0 of the package.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_platform_interface/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n## 2.6.0\n\n* Adds `getSaveLocation` and deprecates `getSavePath`.\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter C++ Wrapper Libraries in CMake\nDESCRIPTION: Sets up the Flutter C++ wrapper libraries for plugins and the main application. It defines the source files, creates static libraries, and configures their properties and dependencies.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/camera/camera_windows/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Android Manifest Query Permission Example\nDESCRIPTION: Example demonstrating how to add required package visibility configuration for Android API level 30+\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<queries>\n    <intent>\n        <action android:name=\"android.intent.action.VIEW\" />\n        <data android:scheme=\"http\" />\n    </intent>\n</queries>\n```\n\n----------------------------------------\n\nTITLE: Starting Flutter Web Server with Specific Host and Port\nDESCRIPTION: Command to run Flutter in development mode with a specific hostname and port, which is useful for OAuth authentication that requires consistent origins.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_sign_in/google_sign_in_web/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nflutter run -d chrome --web-hostname localhost --web-port 7357\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Animation Examples\nDESCRIPTION: Commands to run the example animations on a device or simulator in release mode. Navigate to the example directory first before executing the run command.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/animations/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd example/\nflutter run --release\n```\n\n----------------------------------------\n\nTITLE: Creating Keystore Properties File for Android Signing\nDESCRIPTION: Guidance on creating a keystore.properties file with signing information for the Android app, which is necessary for using BillingClient APIs.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/in_app_purchase/in_app_purchase_android/example/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n5. Create an `example/android/keystore.properties` file with all your signing\\n   information. `keystore.example.properties` exists as an example to follow.\\n   It's impossible to use any of the `BillingClient` APIs from an unsigned APK.\\n   See\\n   [keystore](https://developer.android.com/studio/publish/app-signing#secure-shared-keystore)\\n   and [signing](https://developer.android.com/studio/publish/app-signing#sign-apk) and\\n   [flutter-android](https://docs.flutter.dev/deployment/android#signing-the-app)\\n   for more information.\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Test for url_launcher_linux Plugin in CMake\nDESCRIPTION: Sets up Google Test for the url_launcher_linux plugin, including downloading the test framework, configuring the test runner, and linking necessary libraries.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher_linux/linux/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (${include_${PROJECT_NAME}_tests})\nif(${CMAKE_VERSION} VERSION_LESS \"3.11.0\")\nmessage(\"Unit tests require CMake 3.11.0 or later\")\nelse()\nset(TEST_RUNNER \"${PROJECT_NAME}_test\")\nenable_testing()\ninclude(FetchContent)\nFetchContent_Declare(\n  googletest\n  URL https://github.com/google/googletest/archive/release-1.11.0.zip\n)\nset(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\nset(INSTALL_GTEST OFF CACHE BOOL \"Disable installation of googletest\" FORCE)\n\nFetchContent_MakeAvailable(googletest)\n\nadd_executable(${TEST_RUNNER}\n  test/url_launcher_linux_test.cc\n  ${PLUGIN_SOURCES}\n)\napply_standard_settings(${TEST_RUNNER})\ntarget_include_directories(${TEST_RUNNER} PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}\")\ntarget_link_libraries(${TEST_RUNNER} PRIVATE flutter)\ntarget_link_libraries(${TEST_RUNNER} PRIVATE PkgConfig::GTK)\ntarget_link_libraries(${TEST_RUNNER} PRIVATE gtest_main gmock)\n\ninclude(GoogleTest)\ngtest_discover_tests(${TEST_RUNNER})\nendif()  # CMake version check\nendif()  # include_${PROJECT_NAME}_tests\n```\n\n----------------------------------------\n\nTITLE: Installing Windows Implementation Library via NuGet\nDESCRIPTION: Executes NuGet to install the Microsoft Windows Implementation Library package with the specified version. Outputs to the packages directory and verifies the installation succeeded.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth_windows/windows/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nexecute_process(COMMAND\n    ${NUGET} install Microsoft.Windows.ImplementationLibrary -Version ${WIL_VERSION} -OutputDirectory ${CMAKE_BINARY_DIR}/packages\n    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}\n    RESULT_VARIABLE ret)\nif (NOT ret EQUAL 0)\n    message(FATAL_ERROR \"Failed to install nuget package Microsoft.Windows.ImplementationLibrary.${WIL_VERSION}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Runner Build in CMake\nDESCRIPTION: This CMake snippet sets up the build configuration for the Flutter Windows runner executable. It specifies the minimum CMake version, defines the project, adds source files to the executable, applies standard settings, sets compile definitions, links libraries, and adds dependencies.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/path_provider/path_provider_windows/example/windows/runner/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"run_loop.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Creating App Wrapper Library\nDESCRIPTION: Builds a static library for the Flutter application wrapper. Sets up the necessary dependencies and include directories for the main application to interact with the Flutter engine.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_markdown/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding HTTP Basic Authentication Support in Flutter WebView\nDESCRIPTION: Adds support for handling HTTP basic authentication requests using PlatformNavigationDelegate.setOnHttpAuthRequest in version 2.7.0. Also updates minimum supported SDK version.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/webview_flutter/webview_flutter_platform_interface/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.7.0\n\n* Adds support for handling HTTP basic authentication requests. See `PlatformNavigationDelegate.setOnHttpAuthRequest`.\n* Updates minimum supported SDK version to Flutter 3.10/Dart 3.0.\n```\n\n----------------------------------------\n\nTITLE: Markdown Version Entry 0.3.1+1\nDESCRIPTION: Changelog entry for version 0.3.1+1 about package discontinuation\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_adaptive_scaffold/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.3.1+1\n\n* Updates README to indicate that this package will be discontinued.\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Application Build with CMake\nDESCRIPTION: Sets up a CMake build configuration for a Flutter Windows desktop application. It defines the executable target with all required source files, applies standard settings, and links necessary Flutter libraries.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_markdown/example/windows/runner/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"run_loop.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Running Espresso Tests in Flutter Android App\nDESCRIPTION: Commands to build the Flutter app in debug mode and execute Espresso tests using Gradle. First builds an APK, then runs the connected Android tests.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/espresso/example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nflutter build apk --debug\n./gradlew app:connectedAndroidTest\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Build Environment in CMake\nDESCRIPTION: Sets up the basic configuration for building Flutter applications on Windows, including directory paths, Flutter library, and ICU data file. It also defines the target platform and handles backwards compatibility with older Flutter tool versions.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/wasm/windows/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n\n# Set fallback configurations for older versions of the flutter tool.\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n\n# === Flutter Library ===\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 2.8.0\nDESCRIPTION: Documents implementation of new cookie manager functionality\nSOURCE: https://github.com/flutter/packages/blob/main/packages/webview_flutter/webview_flutter_android/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.8.0\n\n* Implements new cookie manager for setting cookies and providing initial cookies.\n```\n\n----------------------------------------\n\nTITLE: Applying Standard C++ Compilation Settings in Flutter Linux Build\nDESCRIPTION: Defines a function that applies standard compilation settings to targets, including C++14 standard, compiler warnings, optimization flags, and debug-specific definitions. This function standardizes the build configuration across the project.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector/example/linux/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding Linter Ignore in Dart\nDESCRIPTION: Adds 'unnecessary_import' to the linter ignore list for the Flutter foundation package import.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/foundation.dart'; // ignore: unnecessary_import\n```\n\n----------------------------------------\n\nTITLE: Running Dart Static Analysis\nDESCRIPTION: Command to run static analysis on specified packages\nSOURCE: https://github.com/flutter/packages/blob/main/script/tool/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndart run script/tool/bin/flutter_plugin_tools.dart analyze --packages package_name\n```\n\n----------------------------------------\n\nTITLE: Building Signed APK for Android\nDESCRIPTION: Instructions for building a signed APK using Flutter, noting that the project's gradle files are configured to sign even debug builds.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/in_app_purchase/in_app_purchase_android/example/README.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n6. Build a signed apk. `flutter build apk` will work for this, the gradle files\\n   in this project have been configured to sign even debug builds.\n```\n\n----------------------------------------\n\nTITLE: Setting Build Flags and Compilation Standards\nDESCRIPTION: Configures profile build flags, Unicode support, and standard compilation settings. Defines a function to apply common compiler settings to targets.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/path_provider/path_provider/example/windows/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n\n# Compilation settings that should be applied to most targets.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Validating Shared Preferences Package Configuration\nDESCRIPTION: Shell command to validate that the shared_preferences package is properly configured to distribute the DevTools extension. This step ensures the extension is ready for publication.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences_tool/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd shared_preferences_tool;\ndart run devtools_extensions validate --package=../shared_preferences\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Application Build\nDESCRIPTION: Configures CMake build settings for a Flutter Windows application including source files, dependencies, and compiler definitions. Sets up the executable with necessary Flutter libraries and includes.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/path_provider/path_provider/example/windows/runner/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"run_loop.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Basics in CMake for Flutter Windows Application\nDESCRIPTION: Sets up the project name, executable name, and CMake version requirements. This establishes the foundation for building a Flutter application on Windows.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_adaptive_scaffold/example/windows/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Project-level configuration.\ncmake_minimum_required(VERSION 3.14)\nproject(example LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"example\")\n```\n\n----------------------------------------\n\nTITLE: Building URL Launcher Windows Plugin Library in CMake\nDESCRIPTION: Defines the shared library for the URL Launcher Windows plugin, sets its properties, and links necessary dependencies. It also sets up include directories and compile definitions.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher_windows/windows/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(${PLUGIN_NAME} SHARED\n  \"include/url_launcher_windows/url_launcher_windows.h\"\n  \"url_launcher_windows.cpp\"\n  ${PLUGIN_SOURCES}\n)\napply_standard_settings(${PLUGIN_NAME})\nset_target_properties(${PLUGIN_NAME} PROPERTIES CXX_VISIBILITY_PRESET hidden)\ntarget_compile_definitions(${PLUGIN_NAME} PRIVATE FLUTTER_PLUGIN_IMPL)\ntarget_include_directories(${PLUGIN_NAME} INTERFACE\n  \"${CMAKE_CURRENT_SOURCE_DIR}/include\")\ntarget_link_libraries(${PLUGIN_NAME} PRIVATE flutter flutter_wrapper_plugin shlwapi.lib)\n\n# List of absolute paths to libraries that should be bundled with the plugin\nset(file_chooser_bundled_libraries\n  \"\"\n  PARENT_SCOPE\n)\n```\n\n----------------------------------------\n\nTITLE: Version Updates in Markdown\nDESCRIPTION: Changelog entries detailing version updates, including SDK version requirements, new features like getMedia method, macOS support implementation, and documentation improvements.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker_macos/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.1+2\n\n* Updates README to reference alternate implementations.\n* Updates minimum supported SDK version to Flutter 3.22/Dart 3.4.\n\n## 0.2.1+1\n\n* Adds pub topics to package metadata.\n* Updates minimum supported SDK version to Flutter 3.7/Dart 2.19.\n\n## 0.2.1\n\n* Adds `getMedia` method.\n\n## 0.2.0\n\n* Implements initial macOS support.\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Development Environment with CMake\nDESCRIPTION: This CMake script configures the Flutter Windows development environment. It sets up the Flutter library, includes necessary headers, and defines wrapper libraries for plugins and applications. The script also configures build targets and dependencies for Flutter assemblies.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_image/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# This file controls Flutter-level build steps. It should not be edited.\ncmake_minimum_required(VERSION 3.14)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n\n# Set fallback configurations for older versions of the flutter tool.\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n\n# === Flutter Library ===\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n\n# === Wrapper ===\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Running Stateful Shell Route Example\nDESCRIPTION: Command to run an example demonstrating stateful nested navigation with BottomNavigationBar using StatefulShellRoute\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/example/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nflutter run lib/stateful_shell_route.dart\n```\n\n----------------------------------------\n\nTITLE: Including Flutter Libraries and Building Application Components\nDESCRIPTION: Sets up the Flutter library and tool build rules by adding subdirectories for Flutter managed code and the runner. Includes generated plugin build rules to manage building plugins and adding them to the application.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector/example/windows/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Registering Event Handler in Kotlin\nDESCRIPTION: Registers the event listener with the binary messenger in Kotlin.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/README.md#2025-04-22_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nval eventListener = EventListener()\nStreamEventsStreamHandler.register(flutterEngine.dartExecutor.binaryMessenger, eventListener)\n```\n\n----------------------------------------\n\nTITLE: Migrating to Nullsafety in Dart for In-App Purchases\nDESCRIPTION: Version 0.4.0 migrates the plugin to nullsafety and introduces breaking changes.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/in_app_purchase/in_app_purchase/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\n// Deprecated\nsandboxTesting\n\n// Introduced\nsimulatesAskToBuyInSandbox\n\n// Breaking Change\n// Removed callbackChannel in channels.dart\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Animations Example Catalog in Release Mode\nDESCRIPTION: Command to launch the animations package example catalog on a connected device in release mode. This optimizes performance for viewing animation examples.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/animations/example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter run --release\n```\n\n----------------------------------------\n\nTITLE: Running Extra Codec Example\nDESCRIPTION: Command to run an example demonstrating how to use complex objects as extras in GoRouter\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/example/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nflutter run lib/extra_codec.dart\n```\n\n----------------------------------------\n\nTITLE: Setting Up Installation Configuration\nDESCRIPTION: Configures installation settings for creating a relocatable bundle. This sets up default installation paths and ensures the build directory is cleaned before installation.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_image/example/linux/CMakeLists.txt#2025-04-22_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Flutter Package on Chrome\nDESCRIPTION: Command to execute all tests in the 'test' directory using the Chrome platform. This ensures that the package's functionality is verified in a web environment.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/webview_flutter/webview_flutter_web/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flutter test --platform chrome\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Build Properties and Dependencies\nDESCRIPTION: Applies standard build settings, configures symbol visibility, and sets up include directories and library dependencies for the Flutter plugin.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/platform_tests/test_plugin/linux/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\napply_standard_settings(${PLUGIN_NAME})\n\nset_target_properties(${PLUGIN_NAME} PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_compile_definitions(${PLUGIN_NAME} PRIVATE FLUTTER_PLUGIN_IMPL)\n\ntarget_include_directories(${PLUGIN_NAME} INTERFACE\n  \"${CMAKE_CURRENT_SOURCE_DIR}/include\")\ntarget_link_libraries(${PLUGIN_NAME} PRIVATE flutter)\ntarget_link_libraries(${PLUGIN_NAME} PRIVATE PkgConfig::GTK)\n\nset(test_plugin_bundled_libraries\n  \"\"\n  PARENT_SCOPE\n)\n```\n\n----------------------------------------\n\nTITLE: Build Configuration Settings\nDESCRIPTION: Configures build types (Debug/Profile/Release) and handles multi-configuration generators.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Installation Directory Structure for Flutter Windows Application\nDESCRIPTION: Configures the installation directory structure for the application bundle. This determines where executable and supporting files will be placed when the application is installed or bundled.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_adaptive_scaffold/example/windows/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Legacy One-Time Purchase Price Retrieval in Dart\nDESCRIPTION: Shows the old approach to get the price of a one-time purchase before the migration to version 0.3.0. This code uses the deprecated SkuDetailsWrapper class and SkuType enum.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/in_app_purchase/in_app_purchase_android/migration_guide.md#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nSkuDetailsWrapper sku;\n\nif (sku.type == SkuType.inapp) {\n  String price = sku.price;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Environment for File Selector Windows Plugin in CMake\nDESCRIPTION: Sets up the testing framework for the file_selector_windows plugin using Google Test. It configures test executable compilation, links necessary dependencies, and sets up test discovery. The tests run directly against the plugin source code rather than through the DLL interface.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_windows/windows/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# === Tests ===\n\nif (${include_${PROJECT_NAME}_tests})\nset(TEST_RUNNER \"${PROJECT_NAME}_test\")\nenable_testing()\n# TODO(stuartmorgan): Consider using a single shared, pre-checked-in googletest\n# instance rather than downloading for each plugin. This approach makes sense\n# for a template, but not for a monorepo with many plugins.\ninclude(FetchContent)\nFetchContent_Declare(\n  googletest\n  URL https://github.com/google/googletest/archive/release-1.11.0.zip\n)\n# Prevent overriding the parent project's compiler/linker settings\nset(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n# Disable install commands for gtest so it doesn't end up in the bundle.\nset(INSTALL_GTEST OFF CACHE BOOL \"Disable installation of googletest\" FORCE)\n\nFetchContent_MakeAvailable(googletest)\n\n# The plugin's C API is not very useful for unit testing, so build the sources\n# directly into the test binary rather than using the DLL.\nadd_executable(${TEST_RUNNER}\n  test/file_selector_plugin_test.cpp\n  test/test_main.cpp\n  test/test_file_dialog_controller.cpp\n  test/test_file_dialog_controller.h\n  test/test_utils.cpp\n  test/test_utils.h\n  ${PLUGIN_SOURCES}\n)\napply_standard_settings(${TEST_RUNNER})\ntarget_include_directories(${TEST_RUNNER} PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}\")\ntarget_link_libraries(${TEST_RUNNER} PRIVATE flutter_wrapper_plugin)\ntarget_link_libraries(${TEST_RUNNER} PRIVATE gtest gmock)\n# Override apply_standard_settings for exceptions due to\n# https://developercommunity.visualstudio.com/t/stdany-doesnt-link-when-exceptions-are-disabled/376072\ntarget_compile_definitions(${TEST_RUNNER} PRIVATE \"_HAS_EXCEPTIONS=1\")\n# flutter_wrapper_plugin has link dependencies on the Flutter DLL.\nadd_custom_command(TARGET ${TEST_RUNNER} POST_BUILD\n  COMMAND ${CMAKE_COMMAND} -E copy_if_different\n  \"${FLUTTER_LIBRARY}\" $<TARGET_FILE_DIR:${TEST_RUNNER}>\n)\n\ninclude(GoogleTest)\ngtest_discover_tests(${TEST_RUNNER})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running Basic Two-Page App Example\nDESCRIPTION: Command to run a simple example demonstrating basic navigation between two pages using GoRouter\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflutter run lib/main.dart\n```\n\n----------------------------------------\n\nTITLE: Configuring Project-Level Settings for Flutter Linux Application\nDESCRIPTION: Sets up the basic project configuration, defining the project name, executable name, and application ID. These settings establish the foundation for the Flutter application build on Linux.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_image/example/linux/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"example\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"dev.flutter.packages.flutterimageexample\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Executable Build in CMake\nDESCRIPTION: CMake configuration that sets up a Windows executable build for a Flutter application. It specifies the source files to compile, links required Flutter libraries, and configures build settings including Windows-specific definitions.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences_windows/example/windows/runner/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"run_loop.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Running Path and Query Parameters Example\nDESCRIPTION: Command to run an example demonstrating the usage of path parameters and query parameters in GoRouter\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/example/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nflutter run lib/path_and_query_parameters.dart\n```\n\n----------------------------------------\n\nTITLE: Creating Plugin Wrapper Library\nDESCRIPTION: Builds a static library for the Flutter plugin wrapper. Configures the library with position-independent code and hidden visibility, and sets up the necessary dependencies and include directories.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_markdown/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Importing path_provider_android Package in pubspec.yaml\nDESCRIPTION: Instructions for adding the path_provider_android package to the pubspec.yaml file if directly importing its APIs. This is not necessary if using the main path_provider package, as it's automatically included.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/path_provider/path_provider_android/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  path_provider_android: ^x.x.x\n```\n\n----------------------------------------\n\nTITLE: Main Function and App Initialization in Flutter\nDESCRIPTION: This snippet defines the main entry point of the Flutter application and sets up the root widget.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/vector_graphics/example/README.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  runApp(const MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating to Google Billing Library 3.0 in Dart\nDESCRIPTION: Changes introduced in version 0.5.0 of the plugin, including new parameters and breaking changes related to Google Play Billing 3.0.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/in_app_purchase/in_app_purchase/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nBillingClientWrapper.launchBillingFlow(obfuscatedProfileId: String, purchaseToken: String);\n\n// Breaking changes\nBillingClientWrapper.acknowledgePurchase(); // Removed developerPayload\nBillingClientWrapper.consumeAsync(); // Removed developerPayload\nInAppPurchaseConnection.completePurchase(); // Removed developerPayload\nInAppPurchaseConnection.consumePurchase(); // Removed developerPayload\n\nSkuDetailsWrapper skuDetails;\nskuDetails.isRewarded; // Removed\nskuDetails.introductoryPriceCycles; // Now returns int instead of String\n```\n\n----------------------------------------\n\nTITLE: Installing Cupertino Icons Package in Flutter\nDESCRIPTION: YAML configuration for adding the Cupertino Icons package as a dependency in a Flutter project's pubspec.yaml file. The caret (^) ensures compatibility with the latest minor version updates.\nSOURCE: https://github.com/flutter/packages/blob/main/third_party/packages/cupertino_icons/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  cupertino_icons: ^<latest-version>\n```\n\n----------------------------------------\n\nTITLE: Running Named Routes Example\nDESCRIPTION: Command to run an example showing navigation using named locations instead of URLs in GoRouter\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/example/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nflutter run lib/named_routes.dart\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library and Dependencies\nDESCRIPTION: Sets up basic Flutter configuration including paths, library headers, and core dependencies. Defines the Flutter library interface and links required DLLs.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker_windows/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Updating Golden Files in Bash\nDESCRIPTION: This command updates the reference golden images in the test/goldens directory after validating that new goldens are correct.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrun_tests.sh --update-goldens\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Library and Application Build Rules\nDESCRIPTION: Configures the build process for the Flutter library, application runner, and generated plugin build rules. These settings ensure that the Flutter framework and all associated plugins are properly integrated into the build.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker/example/windows/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Implementing Standard Compilation Settings Function\nDESCRIPTION: Defines a function that applies standard compilation settings to build targets. It sets C++14 as the standard, adds compiler warnings, and configures optimization flags for release builds.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_image/example/linux/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets and AOT Library for Windows Application\nDESCRIPTION: Configures installation instructions for Flutter assets and the Ahead-Of-Time (AOT) compiled library. Assets are fully re-copied on each build to avoid stale files, and the AOT library is only installed for Profile and Release configurations.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker/example/windows/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Configuration Types\nDESCRIPTION: Configures build types (Debug, Profile, Release) and related compiler flags for different build configurations.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/remote/windows/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Publishing a Release\nDESCRIPTION: Manual command for publishing a package release (deprecated in favor of automated releases)\nSOURCE: https://github.com/flutter/packages/blob/main/script/tool/README.md#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncd <path_to_repo>\ngit checkout <commit_hash_to_publish>\ndart run script/tool/bin/flutter_plugin_tools.dart publish --packages <package>\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Behaviors and Installation Path\nDESCRIPTION: Sets CMake policies and installation path configuration. This ensures that the application uses modern CMake behaviors and can correctly load libraries from the relative lib directory.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_image/example/linux/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Runner Application in CMake\nDESCRIPTION: Sets up the CMake project for building a Windows executable that hosts a Flutter application. It defines source files, dependencies, compilation flags, and linker settings required for the Windows runner.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth_windows/example/windows/runner/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Running Go Router Fix Tests with Dart Fix Command\nDESCRIPTION: Command to execute dart fix tests against golden master files for the go_router package. This compares current fixes to the expected output defined in .expect files.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/test_fixes/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndart fix --compare-to-golden\n```\n\n----------------------------------------\n\nTITLE: Setting up Flutter Windows Project with CMake\nDESCRIPTION: Configures a CMake project for building a Flutter application on Windows. This includes project initialization, compiler settings, build type configuration, and linking with the Flutter framework.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth/example/windows/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(example LANGUAGES CXX)\n\nset(BINARY_NAME \"example\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\n# Configure build options.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Setting Closed Caption Offset in Dart\nDESCRIPTION: Example of setting an offset for closed caption display using a Duration.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/video_player/video_player/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\ncontroller.setCaptionOffset(Duration(seconds: 2));\n```\n\n----------------------------------------\n\nTITLE: Setting up Local Auth Windows Plugin Project with CMake\nDESCRIPTION: Configures the CMake project with basic settings including minimum version, project name, and required dependencies. Sets up variables for Windows Implementation Library and C++ Windows Runtime versions.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth_windows/windows/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nset(PROJECT_NAME \"local_auth_windows\")\ncmake_policy(VERSION 3.15...3.24)\nset(WIL_VERSION \"1.0.220201.1\")\nset(CPPWINRT_VERSION \"2.0.220418.1\")\nproject(${PROJECT_NAME} LANGUAGES CXX)\ninclude(FetchContent)\n\nset(PLUGIN_NAME \"${PROJECT_NAME}_plugin\")\n```\n\n----------------------------------------\n\nTITLE: Versioned Changelog Entries in Markdown\nDESCRIPTION: Chronological list of version changes including bug fixes, feature additions, dependency updates, and breaking changes for the video_player_android package.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/video_player/video_player_android/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.8.2\n\n* Fixes a [bug](https://github.com/flutter/flutter/issues/164689) that can cause video to\n  disappear after an app is suspended and resumed.\n\n## 2.8.1\n\n* Updates compileSdk 34 to flutter.compileSdkVersion.\n\n## 2.8.0\n\n* Adds support for platform views as an optional way of displaying a video.\n* Suppresses deprecation and removal warnings for\n  `TextureRegistry.SurfaceProducer.onSurfaceDestroyed`.\n```\n\n----------------------------------------\n\nTITLE: Running Dart Unit Tests\nDESCRIPTION: Command to execute Dart unit tests for specified packages\nSOURCE: https://github.com/flutter/packages/blob/main/script/tool/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ndart run script/tool/bin/flutter_plugin_tools.dart test --packages package_name\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Flutter Testing Package\nDESCRIPTION: Commands to fetch dependencies for the 'test_app' directory within 'testing' and the 'web_benchmarks' directory.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/web_benchmarks/testing/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub get --directory testing/test_app\n```\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub get\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Building Root Filesystem\nDESCRIPTION: Sets up configuration for cross-building environments when a target platform sysroot is specified. This allows building the application for different target platforms from the build machine.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_image/example/linux/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration and Standard Settings\nDESCRIPTION: Sets the default build type to Debug and defines a function to apply standard compilation settings to targets.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_adaptive_scaffold/example/linux/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Rules for Flutter Windows Application\nDESCRIPTION: Sets up installation rules for the Flutter Windows application, including copying support files, Flutter ICU data, Flutter library, bundled libraries, and assets. It also installs the AOT library for non-Debug builds.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher/example/windows/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installation Configuration for Flutter Windows Application\nDESCRIPTION: Sets up installation rules for the Flutter application, including copying runtime files, ICU data, Flutter library, and assets. Configures special handling for AOT library in Profile/Release builds.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Linking ProcessManager Documentation in Markdown\nDESCRIPTION: This snippet provides a markdown link to the ProcessManager class documentation in the process package. It demonstrates how to reference external documentation within the package description.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/process/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[ProcessManager]: https://pub.dev/documentation/process/latest/process/ProcessManager-class.html\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Workspace for Launch Screen Customization\nDESCRIPTION: Command to open the Flutter project's Xcode workspace for customizing launch screen assets through the Xcode interface\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences_foundation/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Workspace for Flutter iOS Project\nDESCRIPTION: Terminal command to open the iOS portion of a Flutter project in Xcode for launch screen customization.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/video_player/video_player_avfoundation/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Project for Flutter iOS App\nDESCRIPTION: Command to open the Xcode project workspace for a Flutter iOS app. This allows access to the Assets.xcassets folder for customizing launch screen images.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/webview_flutter/webview_flutter/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Workspace for Launch Screen Customization\nDESCRIPTION: Command for opening the Flutter project's Xcode workspace to customize launch screen assets through the Xcode interface.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Runner Executable for Flutter Application using CMake\nDESCRIPTION: Sets up the CMake project for building a Windows-specific Flutter application runner. Defines executable target with source files, applies standard build settings, adds version preprocessor definitions, and configures proper dependencies and include directories.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_adaptive_scaffold/example/windows/runner/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\n# Define the application target. To change its name, change BINARY_NAME in the\n# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer\n# work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add preprocessor definitions for the build version.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n\n# Disable Windows macros that collide with C++ standard library functions.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\n# Add dependency libraries and include directories. Add any application-specific\n# dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets and AOT Library\nDESCRIPTION: Configures installation of Flutter assets and the AOT library for release builds. This ensures assets are fresh on each build and the AOT library is only included in non-Debug builds for better performance.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_image/example/linux/CMakeLists.txt#2025-04-22_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Google Test Integration\nDESCRIPTION: Configures Google Test integration for unit testing, including test discovery and executable setup. Requires CMake 3.11.0 or later and only builds when testing is enabled.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/platform_tests/test_plugin/linux/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (${include_${PROJECT_NAME}_tests})\nif(${CMAKE_VERSION} VERSION_LESS \"3.11.0\")\nmessage(\"Unit tests require CMake 3.11.0 or later\")\nelse()\nset(TEST_RUNNER \"${PROJECT_NAME}_test\")\nenable_testing()\n\ninclude(FetchContent)\nFetchContent_Declare(\n  googletest\n  URL https://github.com/google/googletest/archive/release-1.11.0.zip\n)\nset(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\nset(INSTALL_GTEST OFF CACHE BOOL \"Disable installation of googletest\" FORCE)\n\nFetchContent_MakeAvailable(googletest)\n\nadd_executable(${TEST_RUNNER}\n  test/multiple_arity_test.cc\n  test/non_null_fields_test.cc\n  test/nullable_returns_test.cc\n  test/null_fields_test.cc\n  test/primitive_test.cc\n  test/utils/fake_host_messenger.cc\n  test/utils/fake_host_messenger.h\n  ${PLUGIN_SOURCES}\n)\napply_standard_settings(${TEST_RUNNER})\ntarget_include_directories(${TEST_RUNNER} PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}\")\ntarget_link_libraries(${TEST_RUNNER} PRIVATE flutter)\ntarget_link_libraries(${TEST_RUNNER} PRIVATE PkgConfig::GTK)\ntarget_link_libraries(${TEST_RUNNER} PRIVATE gtest_main gmock)\n\ninclude(GoogleTest)\ngtest_discover_tests(${TEST_RUNNER})\n\nendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Executable Build with CMake\nDESCRIPTION: Configures CMake to build a Windows executable for a Flutter application. Sets up the target with required source files, links Flutter libraries, and configures compilation settings including the NOMINMAX definition for Windows compatibility.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/hello/windows/runner/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Downloading NuGet Package Manager with FetchContent\nDESCRIPTION: Fetches the NuGet package manager executable if not already available on the system. Downloads version 6.0.0 from the official NuGet distribution URL and verifies its integrity with SHA256 hash.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth_windows/windows/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nFetchContent_Declare(nuget\n  URL \"https://dist.nuget.org/win-x86-commandline/v6.0.0/nuget.exe\"\n  URL_HASH SHA256=04eb6c4fe4213907e2773e1be1bbbd730e9a655a3c9c58387ce8d4a714a5b9e1\n  DOWNLOAD_NO_EXTRACT true\n)\n\nfind_program(NUGET nuget)\nif (NOT NUGET)\n    message(\"Nuget.exe not found, trying to download or use cached version.\")\n    FetchContent_MakeAvailable(nuget)\n    set(NUGET ${nuget_SOURCE_DIR}/nuget.exe)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running Async Redirection Example\nDESCRIPTION: Command to run an example showing how to handle asynchronous authentication flow using GoRouter\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/example/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nflutter run lib/async_redirection.dart\n```\n\n----------------------------------------\n\nTITLE: Web Testing Configuration Options\nDESCRIPTION: Command line options required for building and running integration tests on web platform using chromedriver.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pointer_interceptor/pointer_interceptor_web/example/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n--web\n--packages pointer_interceptor_web\n--run-chromedriver\n```\n\n----------------------------------------\n\nTITLE: Setting Standard Compilation Settings Function\nDESCRIPTION: Defines a function to apply standard compilation settings including C++14 standard, compiler warnings, and optimization flags.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/local/linux/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Build Environment\nDESCRIPTION: Sets up initial CMake configuration and defines core Flutter paths and dependencies. Includes version requirements and ephemeral directory setup.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/platform_tests/test_plugin/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n\n# Set fallback configurations for older versions of the flutter tool.\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings for Flutter Linux Application\nDESCRIPTION: Creates a function to apply standard compilation settings to targets, including C++14 standard, warning flags, and optimization options.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/path_provider/path_provider_linux/example/linux/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Updating Android Package ID in Gradle File\nDESCRIPTION: Instructions to update the APP_ID in the Android app's build.gradle file to match the package ID in the Play Developer Console.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/in_app_purchase/in_app_purchase_android/example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n4. Update `APP_ID` in `example/android/app/build.gradle` to match your package\\n   ID in the PDC.\n```\n\n----------------------------------------\n\nTITLE: Managing Flutter Assets Installation for Windows Application\nDESCRIPTION: Configures the installation of Flutter assets for a Windows application. This ensures that the assets directory is fully copied on each build and handles installation of the AOT library for release builds.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth/example/windows/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Libraries in CMake for Windows\nDESCRIPTION: This snippet defines and configures two static libraries: flutter_wrapper_plugin for plugins and flutter_wrapper_app for the runner. It sets up source files, compiler settings, and dependencies for each library.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/app/windows/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Running Exception Handling Example\nDESCRIPTION: Command to run an example showing exception handling implementation in GoRouter\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/example/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nflutter run lib/exception_handling.dart\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Application Build in CMake\nDESCRIPTION: This CMake script sets up the build configuration for a Flutter Windows application. It defines the executable target, adds source files, applies standard settings, sets version definitions, and configures dependencies.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/platform_tests/test_plugin/example/windows/runner/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\n# Define the application target. To change its name, change BINARY_NAME in the\n# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer\n# work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add preprocessor definitions for the build version.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n\n# Disable Windows macros that collide with C++ standard library functions.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\n# Add dependency libraries and include directories. Add any application-specific\n# dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Rules for Flutter Application in CMake\nDESCRIPTION: Sets up installation rules for the Flutter application, including the executable, ICU data, Flutter library, plugin libraries, and assets. It also configures the installation of the AOT library for non-Debug builds.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_image/example/windows/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 2.8.3\nDESCRIPTION: Documents fixes for debuggingEnabled setting and integration test race condition\nSOURCE: https://github.com/flutter/packages/blob/main/packages/webview_flutter/webview_flutter_android/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.8.3\n\n* Fixes a bug causing `debuggingEnabled` to always be set to true.\n* Fixes an integration test race condition.\n```\n\n----------------------------------------\n\nTITLE: Configuring url_launcher_linux Plugin Library in CMake\nDESCRIPTION: Sets up the CMake project for the url_launcher_linux plugin, defining the library, its sources, and linking necessary dependencies.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher_linux/linux/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nset(PROJECT_NAME \"url_launcher_linux\")\nproject(${PROJECT_NAME} LANGUAGES CXX)\n\ncmake_policy(VERSION 3.10...3.24)\n\nset(PLUGIN_NAME \"${PROJECT_NAME}_plugin\")\n\nlist(APPEND PLUGIN_SOURCES\n  \"messages.g.cc\"\n  \"url_launcher_plugin.cc\"\n)\n\nadd_library(${PLUGIN_NAME} SHARED\n  ${PLUGIN_SOURCES}\n)\napply_standard_settings(${PLUGIN_NAME})\nset_target_properties(${PLUGIN_NAME} PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_compile_definitions(${PLUGIN_NAME} PRIVATE FLUTTER_PLUGIN_IMPL)\ntarget_include_directories(${PLUGIN_NAME} INTERFACE\n  \"${CMAKE_CURRENT_SOURCE_DIR}/include\")\ntarget_link_libraries(${PLUGIN_NAME} PRIVATE flutter)\ntarget_link_libraries(${PLUGIN_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library and Headers\nDESCRIPTION: Sets up the Flutter library path, ICU data file, and project build directories. It also defines a list of Flutter library headers and prepends the ephemeral directory path to each.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_linux/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Configuration\nDESCRIPTION: Configures Google Test framework integration and test executable build settings for plugin testing.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/platform_tests/test_plugin/windows/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (${include_${PROJECT_NAME}_tests})\nset(TEST_RUNNER \"${PROJECT_NAME}_test\")\nenable_testing()\ninclude(FetchContent)\nFetchContent_Declare(\n  googletest\n  URL https://github.com/google/googletest/archive/release-1.11.0.zip\n)\nset(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\nset(INSTALL_GTEST OFF CACHE BOOL \"Disable installation of googletest\" FORCE)\n\nFetchContent_MakeAvailable(googletest)\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Launcher Windows Plugin Project in CMake\nDESCRIPTION: Sets up the project name, language, and policy version for the URL Launcher Windows plugin. It defines the plugin name and source files to be included in the build.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher_windows/windows/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nset(PROJECT_NAME \"url_launcher_windows\")\nproject(${PROJECT_NAME} LANGUAGES CXX)\n\ncmake_policy(VERSION 3.10...3.24)\n\nset(PLUGIN_NAME \"${PROJECT_NAME}_plugin\")\n\nlist(APPEND PLUGIN_SOURCES\n  \"messages.g.cpp\"\n  \"messages.g.h\"\n  \"system_apis.cpp\"\n  \"system_apis.h\"\n  \"url_launcher_plugin.cpp\"\n  \"url_launcher_plugin.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Importing SharedPreferencesAndroidOptions in Dart\nDESCRIPTION: This snippet shows how to import the necessary package for using Android-specific SharedPreferences options.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:shared_preferences_android/shared_preferences_android.dart';\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Plugin Core Build Settings\nDESCRIPTION: Sets up the basic CMake configuration for a Flutter plugin including project name, source files, and build properties. Configures the plugin as a shared library with hidden symbols.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/platform_tests/test_plugin/linux/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n\nset(PROJECT_NAME \"test_plugin\")\nproject(${PROJECT_NAME} LANGUAGES CXX)\n\nset(PLUGIN_NAME \"test_plugin_plugin\")\n\nlist(APPEND PLUGIN_SOURCES\n  \"test_plugin.cc\"\n  \"pigeon/core_tests.gen.cc\"\n  \"pigeon/core_tests.gen.h\"\n  \"pigeon/enum.gen.cc\"\n  \"pigeon/enum.gen.h\"\n  \"pigeon/message.gen.cc\"\n  \"pigeon/message.gen.h\"\n  \"pigeon/multiple_arity.gen.cc\"\n  \"pigeon/multiple_arity.gen.h\"\n  \"pigeon/non_null_fields.gen.cc\"\n  \"pigeon/non_null_fields.gen.h\"\n  \"pigeon/null_fields.gen.cc\"\n  \"pigeon/null_fields.gen.h\"\n  \"pigeon/nullable_returns.gen.cc\"\n  \"pigeon/nullable_returns.gen.h\"\n  \"pigeon/primitive.gen.cc\"\n  \"pigeon/primitive.gen.h\"\n)\n\nadd_library(${PLUGIN_NAME} SHARED\n  ${PLUGIN_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Application Build Configuration in CMake\nDESCRIPTION: Configures the main application build including source files, dependencies, and linking with Flutter and GTK libraries.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences_linux/example/linux/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter Windows Example\nDESCRIPTION: Sets up the CMake project with minimum version, project name, and language. It also configures basic project settings like binary name and installation path.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(example LANGUAGES CXX)\n\nset(BINARY_NAME \"example\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function in CMake\nDESCRIPTION: Implements a custom function to prepend a prefix to each element in a list. This is used as a workaround for CMake versions below 3.12 which lack the list(TRANSFORM ... PREPEND ...) command.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_linux/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Legacy Subscription Introductory Price Handling in Dart\nDESCRIPTION: Shows the old approach for detecting and handling introductory pricing for subscriptions before the migration. This code uses the deprecated introductoryPriceAmountMicros property.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/in_app_purchase/in_app_purchase_android/migration_guide.md#2025-04-22_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nSkuDetailsWrapper sku;\n\nif (sku.type == SkuType.subs) {\n  if (sku.introductoryPriceAmountMicros != 0) {\n    // Introductory price period logic.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter and System Dependencies\nDESCRIPTION: Adds the Flutter managed directory, finds system-level dependencies, and defines the application target with source files.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_adaptive_scaffold/example/linux/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Flutter Project for Windows with CMake\nDESCRIPTION: Sets up the basic project configuration including project name, binary name, and initial build settings. Configures build types (Debug, Profile, Release) and sets appropriate compiler and linker flags.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/path_provider/path_provider_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(example LANGUAGES CXX)\n\nset(BINARY_NAME \"example\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\n# Configure build options.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Test for URL Launcher Windows Plugin in CMake\nDESCRIPTION: Sets up Google Test for the URL Launcher Windows plugin if testing is enabled. It downloads Google Test, configures the test runner, and sets up the test executable with necessary dependencies and post-build commands.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher_windows/windows/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (${include_${PROJECT_NAME}_tests})\nset(TEST_RUNNER \"${PROJECT_NAME}_test\")\nenable_testing()\n# TODO(stuartmorgan): Consider using a single shared, pre-checked-in googletest\n# instance rather than downloading for each plugin. This approach makes sense\n# for a template, but not for a monorepo with many plugins.\ninclude(FetchContent)\nFetchContent_Declare(\n  googletest\n  URL https://github.com/google/googletest/archive/release-1.11.0.zip\n)\n# Prevent overriding the parent project's compiler/linker settings\nset(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n# Disable install commands for gtest so it doesn't end up in the bundle.\nset(INSTALL_GTEST OFF CACHE BOOL \"Disable installation of googletest\" FORCE)\n\nFetchContent_MakeAvailable(googletest)\n\n# The plugin's C API is not very useful for unit testing, so build the sources\n# directly into the test binary rather than using the DLL.\nadd_executable(${TEST_RUNNER}\n  test/url_launcher_windows_test.cpp\n  ${PLUGIN_SOURCES}\n)\napply_standard_settings(${TEST_RUNNER})\ntarget_include_directories(${TEST_RUNNER} PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}\")\ntarget_link_libraries(${TEST_RUNNER} PRIVATE flutter_wrapper_plugin shlwapi.lib)\ntarget_link_libraries(${TEST_RUNNER} PRIVATE gtest_main gmock)\n# flutter_wrapper_plugin has link dependencies on the Flutter DLL.\nadd_custom_command(TARGET ${TEST_RUNNER} POST_BUILD\n  COMMAND ${CMAKE_COMMAND} -E copy_if_different\n  \"${FLUTTER_LIBRARY}\" $<TARGET_FILE_DIR:${TEST_RUNNER}>\n)\n\ninclude(GoogleTest)\ngtest_discover_tests(${TEST_RUNNER})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Application Build in CMake\nDESCRIPTION: This CMake script sets up the build configuration for a Flutter Windows application. It defines the project, specifies the source files, sets compile definitions, and links required libraries. The script also applies standard settings and adds dependencies for the Flutter assemble process.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth/example/windows/runner/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation for Camera Windows Example\nDESCRIPTION: Sets up installation directories and rules for copying necessary files and assets to the build directory. It includes special handling for AOT library installation.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/camera/camera_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter and System Dependencies for Linux Application\nDESCRIPTION: Adds the Flutter-managed directory, configures system-level dependencies like GTK, and defines the application target with its source files. This establishes the core dependencies and executable structure for the Flutter Linux application.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector/example/linux/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Package Version 0.2.1 Changes\nDESCRIPTION: Introduces the new getMedia method functionality.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker_linux/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.1\n\n* Adds `getMedia` method.\n```\n\n----------------------------------------\n\nTITLE: Configuring GoogleTest for file_selector_linux Plugin in CMake\nDESCRIPTION: Sets up test configuration for the file_selector_linux Flutter plugin. Downloads and configures GoogleTest framework, creates a test executable, and configures test discovery. Includes a CMake version check as tests require CMake 3.11.0 or later.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_linux/linux/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# === Tests ===\n\nif(${include_${PROJECT_NAME}_tests})\nif(${CMAKE_VERSION} VERSION_LESS \"3.11.0\")\nmessage(\"Unit tests require CMake 3.11.0 or later\")\nelse()\nset(TEST_RUNNER \"${PROJECT_NAME}_test\")\nenable_testing()\n# TODO(stuartmorgan): Consider using a single shared, pre-checked-in googletest\n# instance rather than downloading for each plugin. This approach makes sense\n# for a template, but not for a monorepo with many plugins.\ninclude(FetchContent)\nFetchContent_Declare(\n  googletest\n  URL https://github.com/google/googletest/archive/release-1.11.0.zip\n)\n# Prevent overriding the parent project's compiler/linker settings\nset(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n# Disable install commands for gtest so it doesn't end up in the bundle.\nset(INSTALL_GTEST OFF CACHE BOOL \"Disable installation of googletest\" FORCE)\n\nFetchContent_MakeAvailable(googletest)\n\n# The plugin's exported API is not very useful for unit testing, so build the\n# sources directly into the test binary rather than using the shared library.\nadd_executable(${TEST_RUNNER}\n  test/file_selector_plugin_test.cc\n  test/test_main.cc\n  ${PLUGIN_SOURCES}\n)\napply_standard_settings(${TEST_RUNNER})\ntarget_include_directories(${TEST_RUNNER} PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}\")\ntarget_link_libraries(${TEST_RUNNER} PRIVATE flutter)\ntarget_link_libraries(${TEST_RUNNER} PRIVATE PkgConfig::GTK)\ntarget_link_libraries(${TEST_RUNNER} PRIVATE gtest_main gmock)\n\ninclude(GoogleTest)\ngtest_add_tests(TARGET ${TEST_RUNNER})\n# TODO(stuartmorgan): Ensure that all of the necessary steps are running under\n# xvfb, and re-enable this.\n#gtest_discover_tests(${TEST_RUNNER})\nendif()  # CMake version check\nendif()  # include_${PROJECT_NAME}_tests\n```\n\n----------------------------------------\n\nTITLE: Adding javax.annotation.Generated Annotation in Java\nDESCRIPTION: Adds an option to include the javax.annotation.Generated annotation in generated Java code.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@javax.annotation.Generated(\"pigeon\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Wrapper Libraries\nDESCRIPTION: Sets up the C++ wrapper libraries for plugins and applications, including source files, compilation settings, and dependencies.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/platform_tests/test_plugin/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Executable Build\nDESCRIPTION: Configures CMake build settings for a Flutter Windows application. Specifies source files, links required libraries, and sets compilation definitions. Includes core Flutter files and Windows-specific implementations.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher_windows/example/windows/runner/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"run_loop.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Importing Google Sign-In Extension for Googleapis Auth in Dart\nDESCRIPTION: This snippet shows how to import the extension package that bridges GoogleSignIn with googleapis_auth. It enables the use of the authenticatedClient() method on GoogleSignIn instances.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/extension_google_sign_in_as_googleapis_auth/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:extension_google_sign_in_as_googleapis_auth/extension_google_sign_in_as_googleapis_auth.dart';\n```\n\n----------------------------------------\n\nTITLE: Creating Plugin Library Target\nDESCRIPTION: Defines and configures the shared library target for the plugin, including build settings and symbol visibility.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/platform_tests/test_plugin/windows/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(${PLUGIN_NAME} SHARED\n  \"include/test_plugin/test_plugin_c_api.h\"\n  \"test_plugin_c_api.cpp\"\n  ${PLUGIN_SOURCES}\n)\n\napply_standard_settings(${PLUGIN_NAME})\n\nset_target_properties(${PLUGIN_NAME} PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_compile_definitions(${PLUGIN_NAME} PRIVATE FLUTTER_PLUGIN_IMPL)\n```\n\n----------------------------------------\n\nTITLE: List Prepend Function in CMake\nDESCRIPTION: Helper function that prepends a prefix to each element in a list. Provides functionality similar to list(TRANSFORM ... PREPEND ...) for CMake 3.10 compatibility.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/hello/linux/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter Windows Application\nDESCRIPTION: Sets up the initial CMake configuration for a Flutter Windows application named 'test_plugin_example'. It defines the project, sets the executable name, and configures build options.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/platform_tests/test_plugin/example/windows/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(test_plugin_example LANGUAGES CXX)\n\nset(BINARY_NAME \"test_plugin_example\")\n\ncmake_policy(SET CMP0063 NEW)\n\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Tool Backend in CMake\nDESCRIPTION: Sets up a custom command to run the Flutter tool backend script, which generates necessary files for the build. It also creates a custom target 'flutter_assemble' that depends on these generated files.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_linux/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Building Flutter plugin wrapper library\nDESCRIPTION: Creates a static library for Flutter plugin integration, combining core and plugin-specific wrapper sources. Configures position-independent code and symbol visibility for proper plugin loading.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth_windows/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter and GTK Dependencies in CMake\nDESCRIPTION: Adds the Flutter library as a subdirectory and sets up GTK dependencies using pkg-config. This ensures that the necessary libraries are linked for the Flutter application.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/hello/linux/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library and Headers in CMake for Windows\nDESCRIPTION: This snippet sets up the Flutter library and its headers for use in a Windows project. It defines the library path, exports variables to the parent scope, and creates an interface library target.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/app/windows/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Basic Project Configuration in CMake for Flutter Windows\nDESCRIPTION: Initial CMake setup including project name, language settings, and basic build configuration options. Sets up multi-configuration support and build types (Debug/Profile/Release).\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(example LANGUAGES CXX)\n\nset(BINARY_NAME \"example\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\n# Configure build options.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Runner Executable in CMake\nDESCRIPTION: Sets up the CMake project for building a Flutter Windows runner executable. It defines the source files, links against Flutter libraries, applies standard settings, and configures dependencies for the Windows binary.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_windows/example/windows/runner/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags and Definitions for Windows Unicode Support\nDESCRIPTION: Configures compiler and linker flags for the Profile build type. Adds definitions for Unicode support in Windows applications.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Standard Compilation Settings Function\nDESCRIPTION: Defines a function to apply standard compilation settings to targets, including C++17 support and compiler-specific options.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences/example/windows/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Removing Obsolete Code for Older SDKs\nDESCRIPTION: Removes code that was no longer needed for supporting SDK versions below 21.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/webview_flutter/webview_flutter_android/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n## 4.4.1\n\n* Removes obsolete code related to supporting SDK <21.\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Settings for Windows Flutter Application\nDESCRIPTION: Sets up installation directories and rules for the Windows Flutter application. This ensures that executable, libraries, and data files are correctly installed in the build bundle directory for the application to run properly.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker/example/windows/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Rules and Bundle Creation\nDESCRIPTION: Sets up installation rules for creating a relocatable bundle including the executable, libraries, and assets. Handles different configurations for Debug/Release builds.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences/example/linux/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library and Headers\nDESCRIPTION: Sets up the Flutter Windows DLL and associated header files. Configures include directories and links the Flutter library interface.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Flutter Tool Backend Configuration - CMake\nDESCRIPTION: Sets up the custom build commands for the Flutter tool backend. Configures the build process to generate necessary libraries and headers using the Flutter tool.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/two_dimensional_scrollables/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Linux Application with CMake\nDESCRIPTION: This CMake script configures a Flutter application for Linux. It sets up the project, defines executable targets, configures build settings, and establishes installation rules for creating a redistributable application bundle. The configuration handles dependencies, compilation flags, and proper packaging of assets.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/platform_tests/test_plugin/example/linux/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Project-level configuration.\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"test_plugin_example\")\n\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"com.example.test_plugin\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n\n# Enable the test target.\nset(include_test_plugin_tests TRUE)\n\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n\n# Enable the test target.\nset(include_test_plugin_tests TRUE)\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\n\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/linux/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n  DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Library Dependencies for Linux\nDESCRIPTION: Configures system-level dependencies using pkg-config and sets up the Flutter library paths and headers.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter Library ===\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Installation Configuration in CMake for Flutter Application\nDESCRIPTION: Configures the installation process for the Flutter application, including setting up bundle directories, cleaning previous builds, and installing runtime components. This section handles the proper placement of the executable, data files, libraries, and assets in the bundle.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_markdown/example/linux/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter Windows Application\nDESCRIPTION: Sets up the basic CMake configuration for a Flutter Windows project, including project name, language, and binary name. It also configures the installation RPATH and sets the minimum required CMake version.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher/example/windows/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(example LANGUAGES CXX)\n\nset(BINARY_NAME \"example\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Interface Library in CMake\nDESCRIPTION: Creates an interface library for Flutter, setting up include directories and linking against the Flutter library and system dependencies.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_linux/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Tool Backend\nDESCRIPTION: Configures the Flutter tool backend with custom commands for building Flutter assets and libraries. Creates a phony target to ensure rebuilding when needed.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker_windows/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining the Application Target and Dependencies in CMake\nDESCRIPTION: Creates the executable target for the Flutter application, specifying source files to include. Applies standard settings and links against Flutter and GTK libraries. Adds dependency on Flutter assembly process.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker_linux/example/linux/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Flutter Linux Library Setup\nDESCRIPTION: Configures system dependencies using pkg-config and sets up Flutter library paths and headers. Defines core Flutter library components and their locations.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/hello/linux/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter WASM Application\nDESCRIPTION: Sets up the CMake project with the project name, languages, and basic configuration. Defines the binary name and application ID for the WASM project.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/wasm/linux/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\nset(BINARY_NAME \"wasm\")\nset(APPLICATION_ID \"dev.flutter.rfw.examples.wasm\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Building Flutter WASM Application in CMake\nDESCRIPTION: Defines the executable target for the Flutter WASM application, sets up standard settings, links necessary libraries, and configures build dependencies. This is the core part of the build process for the application.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/wasm/linux/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\nadd_dependencies(${BINARY_NAME} flutter_assemble)\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function\nDESCRIPTION: Creates a function to apply standard compilation settings to build targets. This sets C++14 standard, enables warnings as errors, applies optimization flags for non-Debug builds, and defines the NDEBUG macro for release builds.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_linux/example/linux/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining Profile Build Mode Settings in CMake for Flutter\nDESCRIPTION: Configures the Profile build mode by setting compiler and linker flags. Profile mode is used for performance profiling while maintaining optimizations similar to Release mode.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_adaptive_scaffold/example/windows/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Define settings for the Profile build mode.\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Markdown Version Entry 0.3.2\nDESCRIPTION: Changelog entry for version 0.3.2 noting memory leak fixes\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_adaptive_scaffold/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.3.2\n\n* Fixes some memory leaks by disposing curved animations and value notifiers.\n```\n\n----------------------------------------\n\nTITLE: Setting up Flutter Wrapper Libraries in CMake for Windows\nDESCRIPTION: Configures the Flutter wrapper libraries for plugins and the main application. It defines source files, creates static libraries, and sets up include directories and dependencies.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: RFW Custom Widgets Introduction\nDESCRIPTION: Markdown documentation explaining the purpose of the example project for creating custom widgets in RFW client applications.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/local/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Example of new custom local widgets for RFW\\n\\nThis example shows how one can create custom widgets in an RFW client,\\nfor use by remote widgets.\n```\n\n----------------------------------------\n\nTITLE: Flutter Linux Library Configuration in CMake\nDESCRIPTION: Sets up the Flutter Linux library with system dependencies like GTK, GLIB, and GIO. It also defines the Flutter library path and configures various data files for the build process.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/platform_tests/test_plugin/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter Library ===\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter and Plugin Build Rules\nDESCRIPTION: Adds subdirectories for Flutter managed files and the runner application. It also includes the generated plugin build rules for managing plugin building and addition to the application.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher/example/windows/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\n# Flutter library and tool build rules.\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build\nadd_subdirectory(\"runner\")\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project Configuration\nDESCRIPTION: Sets up basic project configuration including minimum CMake version, project name, and executable name. Configures build types for multi-config and single-config generators.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/app/windows/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(pigeon_example_app LANGUAGES CXX)\nset(BINARY_NAME \"pigeon_example_app\")\n\ncmake_policy(SET CMP0063 NEW)\n\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Flutter Linux Build\nDESCRIPTION: Sets up the CMake project, includes generated config, and defines a helper function for list manipulation.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\n\n# Serves the same purpose as list(TRANSFORM ... PREPEND ...),\n# which isn't available in 3.10.\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Flutter Tool Backend Build Command\nDESCRIPTION: Custom build command that runs the Flutter tool backend for Linux x64 builds. Creates a phony target to ensure the command runs on every build.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_markdown/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      linux-x64 ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Build Configuration Settings in CMake\nDESCRIPTION: Configuration of build types (Debug/Profile/Release) and compilation flags for different build modes.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_markdown/example/windows/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Building Root Filesystem in CMake\nDESCRIPTION: Sets up the root filesystem for cross-building if a Flutter target platform sysroot is specified. This configuration is crucial for cross-compilation scenarios.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/remote/linux/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Libraries in CMake\nDESCRIPTION: Defines and configures two static libraries: flutter_wrapper_plugin for plugin development and flutter_wrapper_app for app development. These libraries include core implementations and specific functionalities for plugins and apps.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation for Flutter Application\nDESCRIPTION: Sets up the installation process for the Flutter application, including bundle directory setup, file copying, and asset management.\nSOURCE: https://github.com/flutter/packages/blob/main/third_party/packages/flutter_svg/example/linux/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\n\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Rules\nDESCRIPTION: Defines installation rules for the application binary, ICU data, Flutter library, plugin libraries, and asset files. Includes special handling for AOT library in non-Debug builds.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/app/windows/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Initializing Project Configuration in CMake for Flutter Linux Application\nDESCRIPTION: Sets up basic project configuration including minimum CMake version, project name, and application identifiers. Defines the executable name and GTK application ID for the Flutter image picker example.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker_linux/example/linux/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Project-level configuration.\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"example\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"dev.flutter.plugins.imagePickerExample\")\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Example\nDESCRIPTION: Command to run the Flutter example project\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pointer_interceptor/pointer_interceptor/example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Defining Standard C++ Compilation Settings for Flutter Windows Project\nDESCRIPTION: Creates a function that applies standard compilation settings to targets in the Flutter Windows project. This includes setting C++17 standard, warning levels, exception handling, and debug definitions.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth/example/windows/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining Installation Rules for Flutter App Components\nDESCRIPTION: Configures installation rules for the application binary, ICU data, Flutter library, and bundled plugin libraries. Each component is installed to the appropriate location in the bundle directory.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_linux/example/linux/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function\nDESCRIPTION: Creates a function to apply standard compilation settings including C++17 standard, warning levels, and exception handling configurations.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/remote/windows/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Referencing Flutter Endorsed Plugins Documentation in Markdown\nDESCRIPTION: This code snippet demonstrates how to create a reference link in Markdown for the Flutter documentation on endorsed federated plugins.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/camera/camera_avfoundation/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[2]: https://flutter.dev/to/endorsed-federated-plugin\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Library Paths and Headers\nDESCRIPTION: Defines paths for Flutter library, ICU data file, and AOT library. It also sets up a list of Flutter library headers.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences_linux/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policies and Path Configuration for Flutter Linux\nDESCRIPTION: Configures CMake policies for modern behaviors and sets up the installation RPATH. It also includes cross-building configuration by setting the system root and find paths when targeting a specific platform sysroot.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector/example/linux/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation for Flutter Project in CMake\nDESCRIPTION: Sets up the installation process for creating a relocatable bundle. It defines installation directories, copies necessary files and libraries, and handles asset installation. AOT library is installed only for non-Debug builds.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher_linux/example/linux/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Executable Target in CMake\nDESCRIPTION: Defines the main executable target for a Flutter Windows application. Specifies source files, manifest, and resource files needed for the Windows build.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector/example/windows/runner/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings for Flutter Windows Application\nDESCRIPTION: Creates a function to apply standard compilation settings to CMake targets. Sets C++17 standard, enables warnings, exception handling, and strict standards mode for better code quality.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/path_provider/path_provider_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  # Enable strict standards mode in the example app, since issues it finds\n  # may become errors by default in future compiler versions.\n  target_compile_options(${TARGET} PRIVATE /permissive-)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter and System Dependencies in CMake\nDESCRIPTION: Configures the Flutter managed directory, adds the Flutter subdirectory to the build, and establishes system-level dependencies like GTK. This section ensures that all required dependencies are properly linked and available during the build process.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_markdown/example/linux/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\n# Flutter library and tool build rules.\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter and System Dependencies in CMake\nDESCRIPTION: Adds the Flutter library as a subdirectory and finds system-level dependencies like GTK. It also defines the main application target and links necessary libraries.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/two_dimensional_scrollables/example/linux/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\napply_standard_settings(${BINARY_NAME})\n\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function in CMake\nDESCRIPTION: Creates a function to apply standard compilation settings to targets including C++14 support, compiler warnings, and optimization flags. This function is used to enforce consistent build standards across different targets in the project.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_markdown/example/linux/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter and Application Build for Windows\nDESCRIPTION: Adds subdirectories for Flutter managed code and the runner application. It also sets up testing targets and includes generated plugin build rules.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\nadd_subdirectory(\"runner\")\n\nset(include_file_selector_windows_tests TRUE)\nadd_custom_target(unit_tests DEPENDS file_selector_windows_test)\n\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring file_selector_linux Plugin Library in CMake\nDESCRIPTION: Sets up the core build configuration for the file_selector_linux Flutter plugin library. Defines project requirements, source files, and library dependencies including Flutter and GTK.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_linux/linux/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nset(PROJECT_NAME \"file_selector_linux\")\nproject(${PROJECT_NAME} LANGUAGES CXX)\n\ncmake_policy(VERSION 3.10...3.24)\n\nset(PLUGIN_NAME \"${PROJECT_NAME}_plugin\")\n\nlist(APPEND PLUGIN_SOURCES\n  \"file_selector_plugin.cc\"\n  \"messages.g.cc\"\n)\n\nadd_library(${PLUGIN_NAME} SHARED\n  ${PLUGIN_SOURCES}\n)\napply_standard_settings(${PLUGIN_NAME})\nset_target_properties(${PLUGIN_NAME} PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_compile_definitions(${PLUGIN_NAME} PRIVATE FLUTTER_PLUGIN_IMPL)\ntarget_include_directories(${PLUGIN_NAME} INTERFACE\n  \"${CMAKE_CURRENT_SOURCE_DIR}/include\")\ntarget_link_libraries(${PLUGIN_NAME} PRIVATE flutter)\ntarget_link_libraries(${PLUGIN_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation for Flutter Application Bundle\nDESCRIPTION: Sets up the installation process for the Flutter application bundle. This includes setting the bundle directory, cleaning previous installations, and copying necessary files and assets.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/remote/linux/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter and System Dependencies for Linux Application\nDESCRIPTION: Sets up Flutter library and tool build rules, and configures system-level dependencies like GTK. It also defines the application build settings and links necessary libraries.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/path_provider/path_provider_linux/example/linux/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\n# Flutter library and tool build rules.\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n\n# Application build\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options for Flutter Project\nDESCRIPTION: Sets up build configurations (Debug, Profile, Release) based on whether the generator is multi-config. It also sets linker and compiler flags for the Profile configuration.\nSOURCE: https://github.com/flutter/packages/blob/main/third_party/packages/flutter_svg/example/windows/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: List Prepend Function Implementation in CMake\nDESCRIPTION: Custom CMake function that prepends a prefix to each element in a list. This provides functionality similar to list(TRANSFORM ... PREPEND ...) for CMake versions that don't support it.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_markdown/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting up C++ wrapper source files\nDESCRIPTION: Prepares lists of C++ wrapper source files grouped by functionality: core implementations, plugin-specific code, and app-specific code. These source files will be used to build the wrapper libraries.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth_windows/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# === Wrapper ===\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Updating Android Gradle Plugin Version\nDESCRIPTION: Updates the Android Gradle Plugin (AGP) version used in the project. This ensures compatibility with the latest Android build tools and Gradle versions.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/espresso/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n* Updates agp to 8.7.2.\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter Linux\nDESCRIPTION: Sets up the CMake project with minimum version and includes generated configuration. It also defines a custom function for list prepending.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/local/linux/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\n\n# Serves the same purpose as list(TRANSFORM ... PREPEND ...),\n# which isn't available in 3.10.\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library and Wrapper for Windows in CMake\nDESCRIPTION: This CMake script sets up the Flutter library and wrapper for Windows integration. It defines targets for the Flutter library, plugin wrapper, and app wrapper, as well as custom commands for building Flutter assets.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n\n# Set fallback configurations for older versions of the flutter tool.\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n\n# === Flutter Library ===\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n\n# === Wrapper ===\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Legacy Subscription Free Trial Detection in Dart\nDESCRIPTION: Demonstrates the old method for detecting free trial periods for subscriptions before the migration. This approach uses the deprecated freeTrialPeriod property of SkuDetailsWrapper.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/in_app_purchase/in_app_purchase_android/migration_guide.md#2025-04-22_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nSkuDetailsWrapper sku;\n\nif (sku.type == SkuType.subs) {\n  if (sku.freeTrialPeriod.isNotEmpty) {\n    // Free trial period logic.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Tool Backend in CMake\nDESCRIPTION: Configures a custom command to run the Flutter tool backend for generating necessary files. It creates a phony target to ensure the command runs every time, and sets up dependencies for the flutter_assemble target.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/path_provider/path_provider/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter Linux Application\nDESCRIPTION: Sets up the basic CMake project configuration, including project name, binary name, and application ID. It also configures the installation RPATH and build type options.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/path_provider/path_provider_linux/example/linux/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\nset(BINARY_NAME \"example\")\nset(APPLICATION_ID \"dev.flutter.plugins.path_provider_linux_example\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\n# Configure build options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Flutter Tool Backend Build Command\nDESCRIPTION: Defines custom build commands for the Flutter tool backend, ensuring the Flutter library and headers are properly generated. Uses a _phony_ target to force rebuild on each run.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/xdg_directories/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter and System Dependencies\nDESCRIPTION: Adds the Flutter managed directory as a subdirectory to the build and configures system-level dependencies. Uses pkg-config to find and configure GTK 3.0 as a required dependency.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_linux/example/linux/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\n# Flutter library and tool build rules.\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Tool Backend\nDESCRIPTION: Sets up the custom command to run the Flutter tool backend for generating necessary files and libraries. Uses a phony target to ensure the command runs on each build.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Sources\nDESCRIPTION: Declares the plugin name and lists all source files including generated Pigeon files that should be included in the build.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/platform_tests/test_plugin/windows/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(PLUGIN_NAME \"test_plugin_plugin\")\n\nlist(APPEND PLUGIN_SOURCES\n  \"test_plugin.cpp\"\n  \"test_plugin.h\"\n  # Generated sources.\n  \"pigeon/core_tests.gen.cpp\"\n  \"pigeon/core_tests.gen.h\"\n  \"pigeon/enum.gen.cpp\"\n  \"pigeon/enum.gen.h\"\n  \"pigeon/message.gen.cpp\"\n  \"pigeon/message.gen.h\"\n  \"pigeon/multiple_arity.gen.cpp\"\n  \"pigeon/multiple_arity.gen.h\"\n  \"pigeon/non_null_fields.gen.cpp\"\n  \"pigeon/non_null_fields.gen.h\"\n  \"pigeon/null_fields.gen.cpp\"\n  \"pigeon/null_fields.gen.h\"\n  \"pigeon/nullable_returns.gen.cpp\"\n  \"pigeon/nullable_returns.gen.h\"\n  \"pigeon/primitive.gen.cpp\"\n  \"pigeon/primitive.gen.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring System Dependencies for Flutter Linux\nDESCRIPTION: Sets up package configuration for GTK, GLIB, and GIO which are required system-level dependencies for Flutter Linux applications.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/app/linux/flutter/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter and System Dependencies for Linux Application\nDESCRIPTION: Adds the Flutter library as a subdirectory and sets up system-level dependencies like GTK. Defines the application ID as a preprocessor definition for use in the application code.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker_linux/example/linux/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Runner Build in CMake\nDESCRIPTION: This CMake script configures the build process for a Flutter Windows runner executable. It sets the minimum CMake version, defines the project, specifies source files, and configures compilation and linking settings. The script includes Flutter-specific dependencies and applies standard settings.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences/example/windows/runner/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"run_loop.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function in CMake\nDESCRIPTION: Creates a function to apply standard compilation settings to targets. It sets C++17 standard, warning levels, exception handling, and debug definitions.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_image/example/windows/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Flutter Library Headers Configuration\nDESCRIPTION: Defines and configures the list of Flutter library headers for Linux builds, setting up include directories and library dependencies.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/two_dimensional_scrollables/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up C++ Wrapper Source Files\nDESCRIPTION: Defines and prepares the C++ wrapper source files for the core, plugin, and app components. These source files will be used to build the wrapper libraries for plugins and the main application.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_markdown/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# === Wrapper ===\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Tool Backend in CMake for Windows\nDESCRIPTION: Sets up the Flutter tool backend for building the Flutter library and associated files. It creates a custom command and target to ensure the Flutter library is built and up-to-date.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Flutter Tool Backend Configuration\nDESCRIPTION: Configures the Flutter tool backend command execution and custom build targets. Sets up the build system to properly compile Flutter applications with necessary dependencies.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher_linux/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Runner Build\nDESCRIPTION: Sets up CMake build configuration for a Flutter Windows desktop runner executable. Defines source files, compiler settings, and links required Flutter libraries. Includes Windows-specific configurations like WIN32 flag and NOMINMAX definition.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/wasm/windows/runner/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function\nDESCRIPTION: Creates a function to apply standard compilation settings including C++17 support, warning levels, and exception handling configuration.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/wasm/windows/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Source Files for Local Auth Windows\nDESCRIPTION: Lists the source files required for the local_auth_windows plugin, including the implementation files, headers, and generated message files.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth_windows/windows/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND PLUGIN_SOURCES\n  \"local_auth_plugin.cpp\"\n  \"local_auth.h\"\n  \"messages.g.cpp\"\n  \"messages.g.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up the Flutter Windows CMake environment\nDESCRIPTION: Initializes the CMake configuration with minimum required version and includes generated configuration from the Flutter tool. Sets up ephemeral directories and wrapper root paths.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth_windows/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n\n# Set fallback configurations for older versions of the flutter tool.\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library Headers and Target in CMake\nDESCRIPTION: Sets up the Flutter library headers, creates an interface library target, and links it with the required dependencies.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/path_provider/path_provider_linux/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings for Flutter Windows Targets\nDESCRIPTION: Implements a function to apply standard compilation settings to build targets. It configures C++17 standard, warning levels, exception handling, and debug definitions that should be applied to most targets in the project.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector/example/windows/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Settings for Flutter Application\nDESCRIPTION: Sets up the installation configuration to create a relocatable bundle in the build directory. Defines bundle directories and sets the installation prefix if not already initialized.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_linux/example/linux/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Building Flutter Application Executable\nDESCRIPTION: Defines the main executable for the Flutter application, sets up its source files, applies standard settings, and links necessary libraries.\nSOURCE: https://github.com/flutter/packages/blob/main/third_party/packages/flutter_svg/example/linux/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Enum Support in HostApi Arguments\nDESCRIPTION: Adds support for using enums as arguments in HostApi methods across all supported languages.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n@HostApi()\nabstract class MyApi {\n  void doSomething(MyEnum enumValue);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Runner Executable in CMake\nDESCRIPTION: Sets up the CMake project for building the Flutter Windows runner executable. It specifies the source files, links necessary libraries, and applies standard settings. The configuration includes Flutter-specific dependencies and compiler definitions.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/remote/windows/runner/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Build and Installation Rules\nDESCRIPTION: Sets up Flutter library build rules, application build configuration, and installation procedures. Handles the installation of Flutter assets, libraries, and AOT compilation outputs.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/path_provider/path_provider/example/windows/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\n# Flutter library and tool build rules.\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build\nadd_subdirectory(\"runner\")\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n\n# === Installation ===\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options for Flutter Linux Application\nDESCRIPTION: Sets default build type to Debug if not specified and defines available build modes (Debug, Profile, Release). This ensures the proper configuration is used when building the Flutter application.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker_linux/example/linux/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Temporary Generated Code in PigeonIsolate\nDESCRIPTION: This code snippet shows the structure of the temporary file that Pigeon generates in its LaunchIsolate. This file imports the user's Pigeon file, creates an isolate with dart:mirrors capabilities, and runs the Pigeon code generator.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'path/to/supplied/pigeon/file.dart';\nimport 'dart:io';\nimport 'dart:isolate';\nimport 'package:pigeon/pigeon_lib.dart';\nvoid main(List<String> args, SendPort sendPort) async {\n  sendPort.send(await Pigeon.run(args));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic CMake Project Settings\nDESCRIPTION: Initializes the CMake project with basic configuration settings including project name, language, and build options.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/remote/windows/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(remote LANGUAGES CXX)\n\nset(BINARY_NAME \"remote\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library and Headers in CMake\nDESCRIPTION: Sets up the Flutter library and its headers for Windows development. It defines the library path, exports necessary variables to the parent scope, and creates an interface library target.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library for Windows\nDESCRIPTION: Sets up the Flutter library paths and publishes key variables to parent scope for the install step. Configures the Flutter library headers and creates an interface library target.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_markdown/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter Library ===\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Flutter Library Headers Configuration\nDESCRIPTION: Defines the list of Flutter library headers and sets up the Flutter interface library with necessary include directories and dependencies.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_markdown/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Settings for Flutter Linux Application\nDESCRIPTION: Sets up the installation process for creating a relocatable bundle of the Flutter Linux application. It includes rules for installing the binary, ICU data, Flutter library, and asset files.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/path_provider/path_provider_linux/example/linux/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies for Windows Flutter Runner\nDESCRIPTION: Links the necessary libraries to the Windows runner executable and sets include directories. This includes Flutter libraries and Windows-specific libraries like dwmapi.lib for desktop window manager functionality.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/app/windows/runner/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Rules in CMake\nDESCRIPTION: Sets up installation rules for the Flutter application including executable, ICU data, libraries, and assets. Handles different configurations for Debug vs Profile/Release builds.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/two_dimensional_scrollables/example/windows/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library and Application Build Structure\nDESCRIPTION: Sets up the build structure for the Flutter application, including the Flutter managed directory, adding subdirectories for the Flutter library and runner, and including generated plugin build rules.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth/example/windows/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\n# Flutter library and tool build rules.\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build\nadd_subdirectory(\"runner\")\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Library Dependencies for Linux in CMake\nDESCRIPTION: Configures system-level dependencies for the Flutter library on Linux, including GTK, GLIB, and GIO using pkg-config.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n```\n\n----------------------------------------\n\nTITLE: Standard Compilation Settings Function in CMake\nDESCRIPTION: Function to apply standard compilation settings including C++17 standard, warning levels, and exception handling.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_markdown/example/windows/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Library and System Dependencies\nDESCRIPTION: Adds the Flutter managed directory as a subdirectory and configures system-level dependencies including GTK. This ensures the Flutter engine and Linux-specific dependencies are correctly included in the build.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_image/example/linux/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: List Prepend Function Implementation in CMake\nDESCRIPTION: Custom CMake function that prepends a prefix to each element in a list. This functionality mimics list(TRANSFORM ... PREPEND ...) for CMake versions below 3.10.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Removing Dart Language Version Constraint\nDESCRIPTION: Removes the Dart 2.12 language version constraint from generated Dart code.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// Before: @dart = 2.12\n// After: [removed]\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Application Build with CMake\nDESCRIPTION: CMake configuration that sets up a Windows executable target with Flutter dependencies. It specifies source files, links required libraries, and configures build settings for a Flutter Windows desktop application.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher/example/windows/runner/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"run_loop.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Standard Compilation Settings Function\nDESCRIPTION: Defines a function to apply standard compilation settings including C++17 standard, warning levels, and exception handling configuration.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_options(${TARGET} PRIVATE /permissive-)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Installing Application Components\nDESCRIPTION: Defines installation rules for application components including the executable binary, ICU data file, and Flutter library. Also handles installation of bundled plugin libraries to the appropriate directory.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker/example/linux/CMakeLists.txt#2025-04-22_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter and System Dependencies in CMake\nDESCRIPTION: Adds the Flutter library as a subdirectory and finds system-level dependencies like GTK. Sets up the application build with necessary source files and links libraries.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/remote/linux/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter tool backend integration\nDESCRIPTION: Sets up a custom command to run the Flutter tool backend which generates necessary files. Creates a 'flutter_assemble' target that other targets can depend on to ensure Flutter-generated files are available when needed.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth_windows/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Settings and Dependencies\nDESCRIPTION: Applies standard settings to the binary, links required libraries, and sets up Flutter tool dependencies.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_adaptive_scaffold/example/linux/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Workspace Command for Flutter iOS Project\nDESCRIPTION: Terminal command to open the iOS portion of a Flutter project in Xcode for launch screen asset customization.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/in_app_purchase/in_app_purchase/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library Headers and Target in CMake\nDESCRIPTION: Defines the Flutter library headers, creates an interface library target, and sets up include directories and link libraries for the Flutter target.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Wrapper Libraries\nDESCRIPTION: Sets up the C++ wrapper libraries for both plugins and the main application. Includes source files, compiler settings, and dependencies for the wrapper components.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/path_provider/path_provider_windows/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Project Directory Structure in CMake\nDESCRIPTION: Defines project structure by setting up the Flutter managed directory and adding subdirectories for the Flutter library and application runner. Includes the generated plugins file to manage plugin dependencies.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/path_provider/path_provider_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\n# Flutter library and tool build rules.\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build\nadd_subdirectory(\"runner\")\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options for Flutter Project in CMake\nDESCRIPTION: Sets the default build type to Debug if not specified and defines available build types. It also defines a function to apply standard compilation settings to targets.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher_linux/example/linux/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Compiler and Linker Flags Configuration for Flutter Windows\nDESCRIPTION: Sets up compiler and linker flags for Profile build type and configures Unicode support. Includes a function for applying standard compilation settings to targets.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n\n# Compilation settings that should be applied to most targets.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Flutter Tool Backend Command in CMake\nDESCRIPTION: Sets up a custom command that invokes the Flutter tool backend script to generate the Flutter library and headers. It creates a dependency on a non-existent _phony_ file to ensure this command runs every time the build is executed.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/platform_tests/test_plugin/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Flutter Linux Library Setup and Dependencies\nDESCRIPTION: Configuration of system-level dependencies using pkg-config and setting up Flutter library paths and variables.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/wasm/linux/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring System Dependencies for Flutter Linux\nDESCRIPTION: Finds and configures system-level dependencies required for Flutter Linux, including GTK, GLIB, and GIO using pkg-config.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences_linux/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Runner Executable\nDESCRIPTION: Configures the CMake build for a Flutter Windows desktop runner application. Sets up the executable with required source files, links Flutter libraries, and applies standard build settings. Includes manifest and resource files for Windows platform support.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/camera/camera_windows/example/windows/runner/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Updating Minimum Required Plugin Platform Interface Version in Flutter\nDESCRIPTION: Updates the minimum required plugin_platform_interface version to 2.1.7 in version 2.9.1 of the webview_flutter_platform_interface package.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/webview_flutter/webview_flutter_platform_interface/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.9.1\n\n* Updates minimum required plugin_platform_interface version to 2.1.7.\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Integration with CMake\nDESCRIPTION: This CMake script sets up the necessary configuration for integrating Flutter with Windows applications. It defines paths, libraries, and build commands required for Flutter Windows development.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences_windows/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n\n# Set fallback configurations for older versions of the flutter tool.\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n\n# === Flutter Library ===\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n\n# === Wrapper ===\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Rules for Flutter WASM Project in CMake\nDESCRIPTION: Sets up installation rules for the Flutter WASM application, including bundling necessary assets, libraries, and the AOT library for non-Debug builds. This ensures proper packaging of the application for distribution.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/wasm/linux/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags and Standards\nDESCRIPTION: Defines standard compilation settings including C++17 standard, warning levels, and Unicode support. Creates a reusable function for applying these settings to targets.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/hello/windows/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n\nadd_definitions(-DUNICODE -D_UNICODE)\n\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Quick Actions Platform Interface Version History\nDESCRIPTION: Markdown formatted changelog entries tracking version updates from 1.0.0 to NEXT, including SDK requirements, feature additions, and dependency changes\nSOURCE: https://github.com/flutter/packages/blob/main/packages/quick_actions/quick_actions_platform_interface/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## NEXT\n\n* Updates minimum supported SDK version to Flutter 3.22/Dart 3.4.\n\n## 1.1.0\n\n* Adds localizedSubtitle field for iOS quick actions.\n* Updates minimum supported SDK version to Flutter 3.19/Dart 3.3.\n\n## 1.0.6\n\n* Updates minimum required plugin_platform_interface version to 2.1.7.\n* Updates minimum supported SDK version to Flutter 3.10/Dart 3.0.\n\n## 1.0.5\n\n* Adds pub topics to package metadata.\n* Updates minimum supported SDK version to Flutter 3.7/Dart 2.19.\n* Updates minimum Flutter version to 3.3.\n* Aligns Dart and Flutter SDK constraints.\n\n## 1.0.4\n\n* Updates links for the merge of flutter/plugins into flutter/packages.\n* Updates minimum Flutter version to 3.0.\n\n## 1.0.3\n\n* Updates imports for `prefer_relative_imports`.\n* Updates minimum Flutter version to 2.10.\n\n## 1.0.2\n\n* Removes dependency on `meta`.\n\n## 1.0.1\n\n* Updates code for analyzer changes.\n* Update to use the `verify` method introduced in plugin_platform_interface 2.1.0.\n\n## 1.0.0\n\n* Initial release of quick_actions_platform_interface\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 0.1.1 Changes in Markdown\nDESCRIPTION: This snippet describes the addition of local file path support for image links in version 0.1.1, with instructions to set the imageDirectory property.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_markdown/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.1\n\n* Add support for local file paths in image links. Make sure to set the\n   `imageDirectory` property to specify the base directory containing the image\n   files.\n```\n\n----------------------------------------\n\nTITLE: Setting Up Installation Rules for Flutter Linux Application Bundle\nDESCRIPTION: Configures installation paths and rules for creating a relocatable bundle in the build directory. Sets up cleaning of the bundle directory and defines data and library installation paths.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker_linux/example/linux/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library for Windows in CMake\nDESCRIPTION: Sets up the Flutter library for Windows, including header files and linking. It defines the Flutter library, its dependencies, and configures the include directories.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/camera/camera_windows/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Assets Installation\nDESCRIPTION: Configures installation of Flutter assets, ensuring that the assets directory is fully re-copied on each build to avoid stale files. This removes the existing assets directory before copying the new one.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_linux/example/linux/CMakeLists.txt#2025-04-22_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Version Definitions in CMake for Windows Runner\nDESCRIPTION: Adds preprocessor definitions for the Flutter version information to the build. These definitions make the version information available to the compiled code, which can be used for display or compatibility checks.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/app/windows/runner/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Version History Documentation in Markdown\nDESCRIPTION: Comprehensive changelog detailing version updates from 0.7.0 to NEXT, including platform support changes, API modifications, and dependency updates.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## NEXT\n\n* Updates README to indicate that Andoid SDK <21 is no longer supported.\n* Updates minimum supported SDK version to Flutter 3.22/Dart 3.4.\n\n## 1.0.3\n\n* Fixes a typo in documentation comments.\n* Updates support matrix in README to indicate that iOS 11 is no longer supported.\n* Clients on versions of Flutter that still support iOS 11 can continue to use this\n  package with iOS 11, but will not receive any further updates to the iOS implementation.\n\n## 1.0.2\n\n* Updates minimum required plugin_platform_interface version to 2.1.7.\n* Updates minimum supported SDK version to Flutter 3.10/Dart 3.0.\n\n## 1.0.1\n\n* Adds pub topics to package metadata.\n* Updates minimum supported SDK version to Flutter 3.7/Dart 2.19.\n* Migrates `styleFrom` usage in examples off of deprecated `primary` and `onPrimary` parameters.\n\n## 1.0.0\n\n* Removes the deprecated `getSavePath` in favor of `getSaveLocation`.\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Settings for Camera Windows Example\nDESCRIPTION: Sets linker flags, compiler flags, and defines Unicode for all projects. It also defines a function to apply standard settings to targets.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/camera/camera_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n\n# Compilation settings that should be applied to most targets.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  # Enable strict standards mode in the example app, since issues it finds\n  # may become errors by default in future compiler versions.\n  target_compile_options(${TARGET} PRIVATE /permissive-)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Flutter Tool Backend Build Configuration\nDESCRIPTION: Sets up custom build commands for the Flutter tool backend, ensuring the Flutter library and headers are properly generated during the build process.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/path_provider/path_provider/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      linux-x64 ${CMAKE_BUILD_TYPE}\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration and Compilation Settings for Flutter\nDESCRIPTION: Sets the default build type and defines a function for applying standard compilation settings to targets. This includes C++14 standard, warning flags, and optimization options.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/two_dimensional_scrollables/example/linux/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Rules for Flutter Windows Application Components\nDESCRIPTION: Defines installation rules for the application binary, ICU data file, Flutter library, and plugin libraries. These rules ensure all required components are properly installed with the application.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_adaptive_scaffold/example/windows/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installation Configuration\nDESCRIPTION: Configures installation rules for the Flutter application, including bundle directory setup and file copying rules.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences/example/windows/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter library paths and dependencies\nDESCRIPTION: Sets up the Flutter Windows library path and publishes necessary paths to parent scope for installation. Configures ICU data file and build directories needed for AOT compilation.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth_windows/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter Library ===\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: List Prepend Function Definition in CMake\nDESCRIPTION: Custom CMake function that prepends a prefix to each element in a list. This provides functionality similar to list(TRANSFORM ... PREPEND ...) for CMake versions that don't support it.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_adaptive_scaffold/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Up System Dependencies for Flutter Linux\nDESCRIPTION: Configures system-level dependencies required for Flutter on Linux, including GTK, GLIB, and GIO using pkg-config.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_linux/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Updating Return Type for Buy Methods in Dart\nDESCRIPTION: This snippet shows a change in version 0.1.0+4 where 'buy' methods now return 'Future<bool>' instead of 'void' to propagate 'launchBillingFlow' failures.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/in_app_purchase/in_app_purchase/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n// Change in version 0.1.0+4\n// Old\nvoid buy() { ... }\n\n// New\nFuture<bool> buy() async { ... }\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter App Wrapper - CMake\nDESCRIPTION: Creates and configures the static library for Flutter application wrappers. Sets up compilation settings and dependencies for the main application wrapper.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/two_dimensional_scrollables/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: List Prepend Function Definition in CMake\nDESCRIPTION: Helper function that prepends a prefix to each element in a list, providing functionality similar to list(TRANSFORM ... PREPEND ...) for CMake 3.10 compatibility.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/wasm/linux/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Build Rules\nDESCRIPTION: Sets up Flutter-specific build rules and includes plugin management. Adds subdirectories for Flutter managed code and runner application.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/hello/windows/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\nadd_subdirectory(\"runner\")\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Documentation Header in Markdown\nDESCRIPTION: Project header and brief description explaining the purpose of using google_sign_in plugin with googleapis package\nSOURCE: https://github.com/flutter/packages/blob/main/packages/extension_google_sign_in_as_googleapis_auth/example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# extension_google_sign_in_example\n\nDemonstrates how to use the google_sign_in plugin with the `googleapis` package.\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows CMake Build System\nDESCRIPTION: Complete CMake file that configures the Flutter Windows build environment. It sets up the Flutter library, wrapper libraries for plugins and the main app, and defines the build process for integrating Flutter with Windows applications.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_adaptive_scaffold/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# This file controls Flutter-level build steps. It should not be edited.\ncmake_minimum_required(VERSION 3.14)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n\n# Set fallback configurations for older versions of the flutter tool.\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n\n# === Flutter Library ===\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n\n# === Wrapper ===\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Installation Rules Configuration in CMake\nDESCRIPTION: Sets up installation rules for the application bundle, including Flutter assets, ICU data, and libraries. Handles different configurations for Debug and Release builds.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher/example/linux/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Flutter Build Custom Command\nDESCRIPTION: Defines custom build command for generating Flutter library and headers using the Flutter tool backend script.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_image/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library and Dependencies\nDESCRIPTION: Sets up basic Flutter configuration including minimum CMake version, ephemeral directory paths, and core Flutter library settings. Defines key paths and files needed for the Flutter Windows build.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/path_provider/path_provider_windows/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking to File Selector Package in Markdown\nDESCRIPTION: Markdown links to the file_selector package on pub.dev and Flutter's documentation on endorsed federated plugins.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_ios/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[1]: https://pub.dev/packages/file_selector\n[2]: https://flutter.dev/to/endorsed-federated-plugin\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation and Bundle Creation\nDESCRIPTION: Sets up the installation process, defines bundle directories, and configures the copying of assets and libraries.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_adaptive_scaffold/example/linux/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Rules for Windows Application\nDESCRIPTION: Sets up installation rules for the application, including copying support files, Flutter assets, and the AOT library. It ensures proper file placement for running the application from Visual Studio.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Building Flutter app wrapper library\nDESCRIPTION: Creates a static library for the main Flutter application, combining core and app-specific wrapper sources. Links against the Flutter interface library and sets up appropriate include directories.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth_windows/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining list_prepend utility function in CMake\nDESCRIPTION: Creates a utility function that prepends a prefix to each element in a list, serving the same purpose as list(TRANSFORM ... PREPEND ...) which isn't available in CMake 3.10.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker_linux/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Serves the same purpose as list(TRANSFORM ... PREPEND ...),\n# which isn't available in 3.10.\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Flutter Linux Library Configuration\nDESCRIPTION: Sets up system dependencies using pkg-config and configures Flutter library paths and headers for Linux build.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 2.8.1\nDESCRIPTION: Documents fix for user agent string bug\nSOURCE: https://github.com/flutter/packages/blob/main/packages/webview_flutter/webview_flutter_android/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.8.1\n\n* Fixes bug where the default user agent string was being set for every rebuild. See\n  https://github.com/flutter/flutter/issues/94847.\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter App Wrapper Library\nDESCRIPTION: Creates and configures the static library for Flutter application wrapper functionality. Includes core implementations and app-specific sources.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Environment in CMake\nDESCRIPTION: Sets up the Flutter Windows development environment, including the Flutter library, wrapper libraries, and tool backend. It defines paths, libraries, and custom commands necessary for building Flutter applications on Windows.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/local/windows/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n\n# Set fallback configurations for older versions of the flutter tool.\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n\n# === Flutter Library ===\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n\n# === Wrapper ===\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Version Number Reference\nDESCRIPTION: Code references showing version numbers in markdown format\nSOURCE: https://github.com/flutter/packages/blob/main/packages/extension_google_sign_in_as_googleapis_auth/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.0.13\n\n* Supports the latest version of `package:googleapis_auth`.\n* Updates minimum supported SDK version to Flutter 3.22/Dart 3.4.\n\n## 2.0.12\n\n* Updates minimum supported SDK version to Flutter 3.10/Dart 3.0.\n* Updates README to improve example of using google_sign_in plugin with the `googleapis` package.\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Flutter Pigeon Example App\nDESCRIPTION: This CMake configuration sets up the foundation for building a Flutter application with Pigeon on Linux. It defines project properties, executable targets, compilation settings, dependencies, and installation procedures for a Linux build.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/app/linux/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Project-level configuration.\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"pigeon_example_app\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"dev.flutter.pigeon_example_app\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"messages.g.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n\n\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library - CMake\nDESCRIPTION: Sets up the Flutter Windows library including headers and dependencies. Configures include directories and library linkage for the Flutter interface library.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/two_dimensional_scrollables/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Runner Executable with CMake\nDESCRIPTION: This CMake script sets up the build configuration for the Windows runner executable in a Flutter project. It specifies the minimum CMake version, project language, source files, and links necessary libraries. The script also applies standard settings and adds compile definitions.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/local/windows/runner/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Application Components for Linux Deployment\nDESCRIPTION: Installs the executable, ICU data file, Flutter library, and plugin libraries to the bundle directory. This ensures all necessary components are properly packaged for the final deployable application.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector/example/linux/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Tool Backend in CMake for Windows\nDESCRIPTION: Sets up the Flutter tool backend for generating necessary files. It creates a custom command and target to run the Flutter tool and generate required libraries and headers.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_windows/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Tool Backend\nDESCRIPTION: Configures a custom command to run the Flutter tool backend for generating necessary files and libraries.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences_linux/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      linux-x64 ${CMAKE_BUILD_TYPE}\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Flutter Linux System Dependencies Configuration\nDESCRIPTION: Configures system-level dependencies for GTK, GLIB, and GIO using pkg-config. Sets up the necessary package requirements for Flutter Linux applications.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_markdown/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Building Flutter Application Executable in CMake\nDESCRIPTION: Defines the main executable target for the Flutter application, including source files and linking necessary libraries. It also applies standard settings and sets output properties.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/hello/linux/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\nadd_dependencies(${BINARY_NAME} flutter_assemble)\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library in CMake for Windows\nDESCRIPTION: Defines the Flutter library and its associated headers. It sets up the library as an interface and configures include directories and dependencies.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Policies and Installation Settings\nDESCRIPTION: Sets CMake policies, defines installation paths, and configures cross-building settings if a sysroot is specified.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_adaptive_scaffold/example/linux/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Local Auth Windows Example\nDESCRIPTION: Sets up the CMake project with minimum version requirement, project name, and language specification. It also configures basic build options and defines the binary name.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(local_auth_windows_example LANGUAGES CXX)\n\nset(BINARY_NAME \"local_auth_windows_example\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Build and Installation in CMake\nDESCRIPTION: Sets up Flutter library build rules, manages plugin integration, and configures installation paths and commands for the Windows application bundle.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/local/windows/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\n# Flutter library and tool build rules.\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build\nadd_subdirectory(\"runner\")\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n\n# === Installation ===\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Publishing Flutter variables to parent scope\nDESCRIPTION: Sets Flutter-related variables in the parent scope for use in the install step, including library paths and build directory locations.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker_linux/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Core CMake Project Configuration\nDESCRIPTION: Sets up basic project configuration including minimum CMake version, project name, and build options. Configures multi-configuration build types and Unicode support.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences/example/windows/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(example LANGUAGES CXX)\n\nset(BINARY_NAME \"example\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\n# Configure build options.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Updating WebKit SDK Wrapper using Pigeon in Dart\nDESCRIPTION: Command to run the Pigeon code generator for updating the WebKit SDK wrapper.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/webview_flutter/webview_flutter_wkwebview/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndart run pigeon --input pigeons/web_kit.dart\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library and Headers in CMake for Windows\nDESCRIPTION: Sets up the Flutter library and its headers for Windows integration. It defines the library path, exports necessary variables to the parent scope, and creates an interface library target.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_windows/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Flutter Tool Backend Integration\nDESCRIPTION: Sets up custom commands and targets for Flutter tool backend integration. Creates a phony target to ensure the Flutter tool runs on each build.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/hello/linux/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Installation Configuration\nDESCRIPTION: Sets up installation rules for the Flutter application, including executable, libraries, and assets deployment.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Changelog Format in Markdown\nDESCRIPTION: Structured version history using Markdown formatting showing version numbers, changes, and updates to the process package\nSOURCE: https://github.com/flutter/packages/blob/main/packages/process/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## NEXT\n\n* Updates minimum supported SDK version to Flutter 3.22/Dart 3.4.\n\n## 5.0.3\n\n* Adds `missing_code_block_language_in_doc_comment` lint.\n* Updates minimum supported SDK version to Flutter 3.19/Dart 3.3.\n\n## 5.0.2\n\n* Removes mention of the removed record/replay feature from README.\n* Updates minimum supported SDK version to Flutter 3.10/Dart 3.0.\n* Fixes new lint warnings.\n```\n\n----------------------------------------\n\nTITLE: Flutter Library Target Configuration\nDESCRIPTION: Sets up the Flutter library interface target with include directories and required link libraries including GTK, GLIB, and GIO dependencies.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_image/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Runner Executable with CMake\nDESCRIPTION: Sets up the build configuration for a Flutter Windows application executable. Defines source files, applies standard settings, adds version compiler definitions, links Flutter libraries, and sets up dependencies.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_image/example/windows/runner/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\n# Define the application target. To change its name, change BINARY_NAME in the\n# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer\n# work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add preprocessor definitions for the build version.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n\n# Disable Windows macros that collide with C++ standard library functions.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\n# Add dependency libraries and include directories. Add any application-specific\n# dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installation Configuration in CMake\nDESCRIPTION: Setup for installing the application, including copying runtime files, assets, and libraries to their proper locations.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_markdown/example/windows/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Configuring AOT Library Installation for Release Builds\nDESCRIPTION: Sets up conditional installation of the Ahead-of-Time (AOT) compiled library for non-Debug builds only. This optimized library is included in Profile and Release builds for better performance.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_linux/example/linux/CMakeLists.txt#2025-04-22_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting up Flutter Interface Library\nDESCRIPTION: Creates an interface library for Flutter and configures its include directories and dependencies. The interface library links against the Flutter library and required system dependencies.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/app/linux/flutter/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Workspace for Flutter iOS Project\nDESCRIPTION: Command to open the Flutter project's Xcode workspace to customize launch screen assets through the Xcode interface\nSOURCE: https://github.com/flutter/packages/blob/main/packages/ios_platform_images/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options for Flutter Windows Project\nDESCRIPTION: Determines if the generator is multi-config and sets up Debug, Profile, and Release configurations. It also sets various compiler and linker flags for different build types.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Flutter Tool Backend Command Configuration\nDESCRIPTION: Configures custom build commands for Flutter tool backend, ensuring the Flutter library and headers are properly generated and assembled.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Platform Instance in Flutter In-App Purchase\nDESCRIPTION: Shows how to register a custom platform implementation by setting the instance with InAppPurchasePlatform.setInstance() method.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/in_app_purchase/in_app_purchase_platform_interface/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nInAppPurchasePlatform.setInstance(MyPlatformInAppPurchase())\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Build Environment with CMake\nDESCRIPTION: This CMake script sets up the build environment for Flutter Windows applications. It defines the Flutter library, wrapper libraries, and custom build commands for the Flutter tool backend. The script handles configuration for both plugins and runner applications.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/hello/windows/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n\n# Set fallback configurations for older versions of the flutter tool.\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n\n# === Flutter Library ===\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n\n# === Wrapper ===\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic CMake Configuration\nDESCRIPTION: Initializes the CMake project with basic settings including minimum version, project name, and installation path configuration.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/wasm/windows/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(wasm LANGUAGES CXX)\n\nset(BINARY_NAME \"wasm\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Settings for Flutter Windows Application\nDESCRIPTION: Defines settings for different build modes (Debug, Profile, Release) and sets compilation flags. It also adds definitions for Unicode support and applies standard settings to targets.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/platform_tests/test_plugin/example/windows/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n\nadd_definitions(-DUNICODE -D_UNICODE)\n\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_options(${TARGET} PRIVATE /permissive-)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Bundled Libraries for Plugin Distribution\nDESCRIPTION: Specifies libraries that should be bundled with the plugin. In this case, no additional libraries need to be bundled, so an empty string is set for the parent scope.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth_windows/windows/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# List of absolute paths to libraries that should be bundled with the plugin\nset(file_chooser_bundled_libraries\n  \"\"\n  PARENT_SCOPE\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Library Configuration\nDESCRIPTION: Configures the Flutter library paths and headers, creates the flutter interface library, and sets up include directories and dependencies.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/platform_tests/test_plugin/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function in CMake\nDESCRIPTION: Creates a function to apply standard compilation settings to targets. This includes setting C++14 standard, compiler warnings, and optimization flags for non-Debug builds.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/wasm/linux/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining the Application Target and Dependencies\nDESCRIPTION: Creates the executable target for the application, adds source files, and links against required libraries. This defines the main application binary and its dependencies on the Flutter engine and GTK.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_image/example/linux/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Camera Windows Example\nDESCRIPTION: Sets up the CMake project with minimum version, project name, and language settings. It also configures build options and sets policies.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/camera/camera_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(camera_windows_example LANGUAGES CXX)\n\nset(BINARY_NAME \"camera_windows_example\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\n# Configure build options.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring System Dependencies for Flutter Linux\nDESCRIPTION: Finds and configures system-level dependencies using pkg-config. It sets up GTK, GLIB, and GIO as required packages.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/local/linux/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter Library ===\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Tool Backend\nDESCRIPTION: Sets up a custom command to run the Flutter tool backend for generating necessary files. It also creates a custom target for Flutter assembly.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/local/linux/flutter/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Installation Rules\nDESCRIPTION: Configures installation rules for the application bundle including runtime files, ICU data, Flutter library, and assets. Handles different configurations for Debug vs Release builds.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/hello/windows/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Basic Project Configuration in CMake for Flutter Linux\nDESCRIPTION: Sets up initial project configuration including minimum CMake version, project name, and basic build settings.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher/example/linux/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\nset(BINARY_NAME \"example\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Tests with Coverage in Bash\nDESCRIPTION: This command runs Flutter tests with coverage and displays the coverage report using lcov. It's used to ensure 100% test coverage is maintained when contributing code.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter test --coverage; lcov --list coverage/lcov.info\n```\n\n----------------------------------------\n\nTITLE: Flutter Application Build and Plugin Configuration\nDESCRIPTION: Configures Flutter library build rules, application build settings, and plugin management. Sets up directory structure for Flutter managed code.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\n# Flutter library and tool build rules.\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build\nadd_subdirectory(\"runner\")\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings for Flutter Windows\nDESCRIPTION: Defines a function to apply standard compilation settings to targets. It sets C++17 standard, warning levels, exception handling, and other compiler-specific options.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_options(${TARGET} PRIVATE /permissive-)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options\nDESCRIPTION: Sets up the build type configuration with Debug as the default. Allows selecting between Debug, Profile, and Release build types, which control optimization levels and debugging information.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_image/example/linux/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options for Flutter Windows Project\nDESCRIPTION: Sets up build configurations (Debug, Profile, Release) and defines compiler flags for different build types. It also adds Unicode definitions and sets up standard compilation settings for most targets.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher/example/windows/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n\n# Compilation settings that should be applied to most targets.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Initializing Flutter Windows Build Environment in CMake\nDESCRIPTION: Sets up the basic configuration for building Flutter applications on Windows. It includes setting minimum CMake version, defining paths, and including generated configurations.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n\n# Set fallback configurations for older versions of the flutter tool.\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Flutter Tool Backend Command Configuration\nDESCRIPTION: Custom command setup for Flutter tool backend execution that generates necessary libraries and headers for the build process.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/remote/linux/flutter/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter and Application Build for Camera Windows Example\nDESCRIPTION: Adds subdirectories for Flutter managed files and the runner application. It also enables test targets and includes generated plugin build rules.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/camera/camera_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\n# Flutter library and tool build rules.\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build\nadd_subdirectory(\"runner\")\n\n# Enable the test target.\nset(include_camera_windows_tests TRUE)\n# Provide an alias for the test target using the name expected by repo tooling.\nadd_custom_target(unit_tests DEPENDS camera_windows_test)\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets and AOT Library\nDESCRIPTION: Configures installation of Flutter assets by removing any stale files and copying updated assets on each build. Also includes logic to install the AOT library only for non-Debug builds.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker/example/linux/CMakeLists.txt#2025-04-22_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Flutter Library Dependencies Setup\nDESCRIPTION: Configures system-level dependencies for the Flutter library using pkg-config, including GTK3, GLib, and GIO modules.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_image/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings for CMake Targets\nDESCRIPTION: Creates a function to apply standard compilation settings to targets. This includes setting C++14 standard, enabling warnings, and optimizing for non-Debug builds.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/remote/linux/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Flutter Linux Library Configuration\nDESCRIPTION: Sets up system dependencies using pkg-config and configures Flutter library paths and headers. Defines the core Flutter library configuration including GTK, GLIB, and GIO dependencies.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher_linux/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Build and Installation Rules\nDESCRIPTION: Configures build directories, installation paths, and rules for copying Flutter runtime components and assets to the final application bundle.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/app/windows/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\nadd_subdirectory(\"runner\")\ninclude(flutter/generated_plugins.cmake)\n\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Configuration for Flutter Linux GTK\nDESCRIPTION: Sets up the initial CMake configuration, including minimum version and project directory paths. It also includes a generated configuration file.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_linux/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function for Flutter Windows Targets\nDESCRIPTION: Creates a function to apply standard C++ compilation settings to targets. Sets C++17 standard, warning levels, exception handling, and debug macros that will be used by the Flutter application and plugins.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker/example/windows/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Build Targets in CMake for Flutter\nDESCRIPTION: Defines the executable build target, applies the standard settings, and links necessary libraries like Flutter and GTK. This section sets up the main application build configuration and ensures the executable is placed in a subdirectory to prevent running the unbundled version.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_markdown/example/linux/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Application build\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library and Headers in CMake\nDESCRIPTION: Sets up the Flutter library interface target, including necessary headers and link libraries. It also adds a dependency on the flutter_assemble target to ensure proper build order.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/wasm/windows/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter on Linux\nDESCRIPTION: Sets up the CMake project with minimum version and includes the generated config file. It also defines a custom function for list manipulation.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/path_provider/path_provider_linux/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\n\n# Serves the same purpose as list(TRANSFORM ... PREPEND ...),\n# which isn't available in 3.10.\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Standard Compilation Settings Function in CMake\nDESCRIPTION: Defines a function to apply standard compilation settings including C++14 support, warning flags, and optimization options.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher/example/linux/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting up Flutter CMake minimum requirements and configuration\nDESCRIPTION: Establishes the minimum CMake version required and includes the generated configuration from the ephemeral directory.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker_linux/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Dependencies\nDESCRIPTION: Sets up include directories and links required libraries for the plugin target, including Flutter dependencies.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/platform_tests/test_plugin/windows/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(${PLUGIN_NAME} INTERFACE\n  \"${CMAKE_CURRENT_SOURCE_DIR}/include\")\ntarget_link_libraries(${PLUGIN_NAME} PRIVATE flutter flutter_wrapper_plugin)\ntarget_compile_definitions(${PLUGIN_NAME} PRIVATE \"_HAS_EXCEPTIONS=1\")\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Policies and Runtime Paths for Flutter Linux Application\nDESCRIPTION: Sets modern CMake behaviors and configures the installation runtime path to load bundled libraries from the lib/ directory relative to the binary. Also includes cross-building configuration for targeting specific platforms.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker_linux/example/linux/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Policies and Build Modes for Flutter Windows Application\nDESCRIPTION: Configures CMake policies and defines build configuration options (Debug, Profile, Release). These settings control how the application is compiled with different optimization levels.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_adaptive_scaffold/example/windows/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Define build configuration option.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Disabling Windows Macros in CMake for Flutter\nDESCRIPTION: Disables Windows macros that could conflict with C++ standard library functions by defining NOMINMAX. This prevents Windows.h from defining min and max macros that would interfere with std::min and std::max.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/app/windows/runner/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Defining Custom List Prepend Function in CMake\nDESCRIPTION: Creates a custom function to prepend a prefix to each element in a list, mimicking list(TRANSFORM ... PREPEND ...) for CMake 3.10 compatibility.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Plugin Wrapper Library\nDESCRIPTION: Creates and configures the static library for Flutter plugin wrapper functionality. Includes core implementations and plugin registrar sources.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining Application Target and Source Files\nDESCRIPTION: Configures the application executable target with necessary source files including main.cc, my_application.cc, and Flutter-generated plugin registrant. Applies standard build settings and links required libraries.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker/example/linux/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Tool Backend for Linux Build\nDESCRIPTION: Sets up a custom command to run the Flutter tool backend for generating necessary files and libraries.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory in CMake for Flutter Linux\nDESCRIPTION: Defines the ephemeral directory which contains generated Flutter files and configurations.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/app/linux/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Flutter Library Headers Configuration\nDESCRIPTION: Definition of Flutter library headers and configuration of the flutter interface library with necessary include directories and dependencies.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/remote/linux/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 0.0.9 Release in Markdown\nDESCRIPTION: This snippet indicates the first published version of the package, version 0.0.9.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_markdown/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.0.9\n\n* First published version\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter and Plugin Build Rules for Windows Application\nDESCRIPTION: Configures the Flutter library and tool build rules, adds the runner subdirectory, and includes generated plugin build rules. It also enables the test target for the plugin.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/platform_tests/test_plugin/example/windows/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(include_test_plugin_tests TRUE)\n\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\nadd_subdirectory(\"runner\")\n\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Flutter Tool Backend Build Configuration\nDESCRIPTION: Custom build command and target setup for Flutter tool backend, ensuring proper library and header generation.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/wasm/linux/flutter/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Build Rules and Application Build in CMake\nDESCRIPTION: Adds subdirectories for Flutter managed files and the runner application. It also includes generated plugin build rules.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_image/example/windows/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\nadd_subdirectory(\"runner\")\n\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Tool Backend in CMake\nDESCRIPTION: Configures a custom command to run the Flutter tool backend for generating necessary files and libraries, and creates a custom target for Flutter assembly.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Rules in CMake\nDESCRIPTION: Sets up installation rules for the application bundle, including the executable, ICU data, Flutter library, and asset files. This ensures proper packaging of the application for distribution.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/xdg_directories/example/linux/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: List Prepend Function Implementation in CMake\nDESCRIPTION: Custom CMake function that prepends a prefix to each element in a list, providing functionality similar to list(TRANSFORM ... PREPEND ...) for CMake 3.10 compatibility.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/two_dimensional_scrollables/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library Target\nDESCRIPTION: Sets up the Flutter library as an interface library, configuring include directories and linking necessary dependencies.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences_linux/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Application Components for Flutter Linux Application\nDESCRIPTION: Creates installation rules for the application binary, ICU data, Flutter library, and bundled plugin libraries. These ensure all required components are properly installed in the bundle.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker_linux/example/linux/CMakeLists.txt#2025-04-22_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options and Modes\nDESCRIPTION: Sets up build configurations for Debug, Profile, and Release modes with corresponding compiler and linker flags.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/wasm/windows/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options in CMake\nDESCRIPTION: Sets default build type to Debug if not specified and defines available build configurations (Debug, Profile, Release). This ensures proper build mode selection for Flutter applications.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker/example/linux/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Assets and AOT Library for Flutter Linux Application\nDESCRIPTION: Sets up installation rules for Flutter assets and the AOT library. Removes stale files from previous installations and installs the AOT library only for non-Debug builds.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker_linux/example/linux/CMakeLists.txt#2025-04-22_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings for Flutter Linux Targets\nDESCRIPTION: Defines a function to apply standard compilation settings to targets, including C++14 standard, warning flags, and optimization settings. These settings are applied to the application target to ensure consistent build configuration.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker_linux/example/linux/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Library Headers\nDESCRIPTION: Defines a list of Flutter library headers and prepends the ephemeral directory path to each header file.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Flutter BSD License Header\nDESCRIPTION: Standard copyright notice and license reference used across Flutter package source files. Indicates BSD-style licensing and directs to LICENSE file for full terms.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher_macos/pigeons/copyright.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright 2013 The Flutter Authors. All rights reserved.\nUse of this source code is governed by a BSD-style license that can be\nfound in the LICENSE file.\n```\n\n----------------------------------------\n\nTITLE: Flutter Linux System Dependencies Setup\nDESCRIPTION: Configuration of system-level dependencies using pkg-config for GTK, GLIB, and GIO libraries required by Flutter Linux.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/remote/linux/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Library Interface\nDESCRIPTION: Configures the Flutter library interface including headers, dependencies, and linking options. Sets up the core Flutter library that other components will depend on.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/path_provider/path_provider_windows/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Build Target\nDESCRIPTION: Defines the executable build target for the Flutter application, specifying source files and dependencies. Links against Flutter and GTK libraries and applies the standard settings defined earlier.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_linux/example/linux/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Application build\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Project for Flutter iOS App\nDESCRIPTION: This command opens the Xcode workspace for a Flutter iOS project, allowing developers to modify assets visually.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_markdown/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings in CMake\nDESCRIPTION: Defines a function to apply standard compilation settings to targets. This includes setting C++14 standard, compiler warnings, and optimization flags.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/xdg_directories/example/linux/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Initializing Flutter Project CMake Configuration\nDESCRIPTION: Sets up the initial project configuration, including the project name, language, and executable name. It also defines build configuration options and sets policies for modern CMake behaviors.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_image/example/windows/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(example LANGUAGES CXX)\n\nset(BINARY_NAME \"example\")\n\ncmake_policy(SET CMP0063 NEW)\n\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Build Configuration Settings for Flutter Windows\nDESCRIPTION: Configures build types (Debug, Profile, Release) and sets compiler flags for different build configurations.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Library Headers\nDESCRIPTION: Defines a list of Flutter library headers and sets up the Flutter library interface. It includes directories and links necessary libraries.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/local/linux/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Basic Project Configuration in CMake for Flutter Linux\nDESCRIPTION: Initial CMake setup including project name, binary name, and basic build configurations. Sets minimum CMake version and configures build type options.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences_linux/example/linux/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\nset(BINARY_NAME \"example\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake Project Configuration for Flutter Windows Application\nDESCRIPTION: Initializes a CMake project for a Flutter Windows application. Defines the project name, language, executable name, and build configuration options including Debug, Profile, and Release modes.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker/example/windows/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Project-level configuration.\ncmake_minimum_required(VERSION 3.14)\nproject(image_picker_example LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"image_picker_example\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Define build configuration option.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter and System Dependencies in CMake\nDESCRIPTION: Sets up Flutter library and tool build rules, and configures system-level dependencies like GTK. This ensures all necessary components are available for building the application.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/xdg_directories/example/linux/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Setting up Flutter tool backend build commands\nDESCRIPTION: Defines a custom command and target to build Flutter assets using the Flutter tool backend. Creates a phony output to ensure the command runs every time, since there's no way to get a full input/output list from the Flutter tool.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker_linux/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Type for Flutter in CMake\nDESCRIPTION: Configures the build type (Debug, Profile, or Release) if not already set. This ensures that the appropriate build mode is used for the Flutter application.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/hello/linux/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Output Directory for Flutter Linux Application\nDESCRIPTION: Sets properties to place the unbundled executable in an intermediates directory to prevent users from running it directly. This ensures users only run the properly bundled application with all required resources.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker_linux/example/linux/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Standard Compilation Settings Function in CMake\nDESCRIPTION: Defines a function APPLY_STANDARD_SETTINGS that applies common compilation settings to targets including C++17 standard, warning levels, and exception handling settings.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/two_dimensional_scrollables/example/windows/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Workspace for Flutter Project\nDESCRIPTION: Command to open the iOS project workspace in Xcode for modifying launch screen assets through the Xcode interface.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/webview_flutter/webview_flutter_wkwebview/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Configuring Profile Build Settings for Windows Flutter Application\nDESCRIPTION: Defines compiler and linker flags for the Profile build mode, setting them to match Release configuration. Adds Unicode definitions which are essential for Windows applications.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker/example/windows/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Define settings for the Profile build mode.\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Flutter Tool Backend Command Configuration\nDESCRIPTION: Configures custom build commands for the Flutter tool backend. Sets up the command to run the tool_backend.sh script with appropriate environment variables and build settings.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_adaptive_scaffold/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Library Headers\nDESCRIPTION: Configures Flutter library headers and creates the Flutter interface library with necessary include directories and linkage.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker_windows/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Profile Build Settings\nDESCRIPTION: Defines compilation and linking flags for the Profile build configuration, inheriting settings from Release mode.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/app/windows/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Workspace Command for Flutter iOS Project\nDESCRIPTION: Terminal command to open the Flutter project's Xcode workspace for customizing launch screen assets through the Xcode interface.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_maps_flutter/google_maps_flutter_ios/example/ios15/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function\nDESCRIPTION: Creates a function to apply standard compilation settings to targets, including C++17 standard, warning levels, and exception handling configuration.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/app/windows/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Basic CMake Project Configuration\nDESCRIPTION: Sets up the initial CMake project configuration including project name, language, and basic build settings.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(example LANGUAGES CXX)\n\nset(BINARY_NAME \"example\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function in CMake\nDESCRIPTION: Creates a function to apply standard compilation settings to CMake targets, including C++17 support, warning levels, and exception handling configuration.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/local/windows/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Initializing Flutter Application Project in CMake\nDESCRIPTION: Sets up the basic project configuration, including minimum CMake version, project name, executable name, and application identifier for a Flutter image picker example application.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker/example/linux/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Project-level configuration.\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"image_picker_example\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"dev.flutter.plugins.image_picker_example\")\n```\n\n----------------------------------------\n\nTITLE: Markdown Version Entry 0.3.1\nDESCRIPTION: Changelog entry for version 0.3.1 regarding MediaQuery updates\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_adaptive_scaffold/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.3.1\n\n* Use improved MediaQuery methods.\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library and Headers in CMake\nDESCRIPTION: Sets up the Flutter library and its headers for Windows. It defines the library path, includes necessary headers, and creates an interface library target.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/path_provider/path_provider/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Application Build Configuration in CMake\nDESCRIPTION: Configures the main application build including source files, dependencies, and linking against Flutter and GTK libraries.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher/example/linux/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Flutter Build Configuration\nDESCRIPTION: Sets up Flutter-specific build configuration including managed directory and plugin rules.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences/example/windows/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\n# Flutter library and tool build rules.\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build\nadd_subdirectory(\"runner\")\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Package Version 0.2.1+1 Changes\nDESCRIPTION: Adds package metadata topics and updates minimum SDK version requirements to Flutter 3.7/Dart 2.19.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker_linux/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.1+1\n\n* Adds pub topics to package metadata.\n* Updates minimum supported SDK version to Flutter 3.7/Dart 2.19.\n```\n\n----------------------------------------\n\nTITLE: Setting Build Type for Flutter Project in CMake\nDESCRIPTION: Configures the build type for the Flutter project, defaulting to Debug if not specified. Allows for Debug, Profile, and Release build types.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/remote/linux/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Project for Flutter iOS\nDESCRIPTION: Command to open the Xcode project for a Flutter iOS app. This allows access to the Assets.xcassets folder for customizing launch screen assets.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/platform_tests/alternate_language_test_plugin/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function\nDESCRIPTION: Creates a function to apply standard compilation settings to targets, including C++17 standard, warning levels, and exception handling configuration.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_options(${TARGET} PRIVATE /permissive-)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: List Prepend Function in CMake\nDESCRIPTION: Custom CMake function that prepends a prefix to each element in a list. This serves the same purpose as list(TRANSFORM ... PREPEND ...) which isn't available in CMake 3.10.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/platform_tests/test_plugin/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library and Headers\nDESCRIPTION: Sets up the Flutter Windows DLL library and its associated header files. Configures include directories and links the Flutter library interface.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Settings and Build Options in CMake for Flutter Application\nDESCRIPTION: Sets up the basic project configuration including project name, binary name, application ID, and build options. It establishes the CMAKE_BUILD_TYPE with options for Debug, Profile, and Release modes.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_markdown/example/linux/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\nset(BINARY_NAME \"flutter_markdown_example\")\nset(APPLICATION_ID \"io.flutter.packages.flutter_markdown_example\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\n# Configure build options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Opening Flutter Project in Xcode\nDESCRIPTION: Command to open the Flutter project's Xcode workspace for customizing launch screen assets.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/camera/camera/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Running Sub-Routes Example\nDESCRIPTION: Command to run an example showing multi-level routing implementation with GoRouter\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/example/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nflutter run lib/sub_routes.dart\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter Application in C++\nDESCRIPTION: Sets up the CMake project with basic configuration, including project name, language, and binary name. It also sets the minimum required CMake version and configures the install RPATH.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher_linux/example/linux/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\nset(BINARY_NAME \"example\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Creating Standard Compilation Settings Function\nDESCRIPTION: Defines a function to apply standard compilation settings to targets, including C++14 standard, compiler warnings as errors, optimization flags for non-Debug builds, and appropriate preprocessor definitions.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker/example/linux/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter and Application Build\nDESCRIPTION: Adds subdirectories for Flutter managed code and the runner application. Enables test targets and includes generated plugin build rules.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\n# Flutter library and tool build rules.\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build\nadd_subdirectory(\"runner\")\n\n# Enable the test target.\nset(include_local_auth_windows_tests TRUE)\n# Provide an alias for the test target using the name expected by repo tooling.\nadd_custom_target(unit_tests DEPENDS local_auth_windows_test)\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Flutter Linux System Dependencies Configuration\nDESCRIPTION: Configures required system-level dependencies using pkg-config, including GTK3, GLib, GIO, BLKID, and LZMA libraries.\nSOURCE: https://github.com/flutter/packages/blob/main/third_party/packages/flutter_svg/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\npkg_check_modules(BLKID REQUIRED IMPORTED_TARGET blkid)\npkg_check_modules(LZMA REQUIRED IMPORTED_TARGET liblzma)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter and Application Build Rules\nDESCRIPTION: Adds subdirectories for Flutter managed code and the runner application. It also includes the generated plugin build rules.\nSOURCE: https://github.com/flutter/packages/blob/main/third_party/packages/flutter_svg/example/windows/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\nadd_subdirectory(\"runner\")\n\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic CMake Settings\nDESCRIPTION: Sets up initial CMake configuration including project name, language settings, and build options. Configures multi-configuration generator settings and build types.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/hello/windows/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(hello LANGUAGES CXX)\n\nset(BINARY_NAME \"hello\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Quick Actions Plugin Changelog\nDESCRIPTION: Markdown formatted changelog detailing version history from initial release to latest version. Includes breaking changes, feature additions, bug fixes, and dependency updates.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/quick_actions/quick_actions/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## NEXT\n\n* Updates README to indicate that Andoid SDK <21 is no longer supported.\n* Updates minimum supported SDK version to Flutter 3.22/Dart 3.4.\n\n## 1.1.0\n\n* Adds localizedSubtitle field for iOS quick actions.\n\n## 1.0.8\n\n* Updates minimum supported SDK version to Flutter 3.19/Dart 3.3.\n* Adds reference to `quick_actions_android` README in the Android section of the README.\n\n[...remainder of changelog...]\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter Application\nDESCRIPTION: Sets up the CMake project with minimum version, project name, and language. Defines the binary name and application ID for the Flutter project.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/remote/linux/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\nset(BINARY_NAME \"remote\")\nset(APPLICATION_ID \"dev.flutter.rfw.examples.remote\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Flutter Copyright Notice\nDESCRIPTION: Standard copyright notice and BSD license reference for Flutter packages. Indicates that the code is protected under copyright and governed by a BSD-style license.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/interactive_media_ads/pigeons/copyright.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright 2013 The Flutter Authors. All rights reserved.\nUse of this source code is governed by a BSD-style license that can be\nfound in the LICENSE file.\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project Settings\nDESCRIPTION: Sets up basic CMake project configuration including minimum version, project name, and language settings.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/platform_tests/test_plugin/windows/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n\nset(PROJECT_NAME \"test_plugin\")\nproject(${PROJECT_NAME} LANGUAGES CXX)\n\ncmake_policy(VERSION 3.14...3.24)\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Project for Flutter iOS\nDESCRIPTION: Command to open the Xcode project for a Flutter iOS app, allowing access to asset management.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/hello/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format\nDESCRIPTION: Standard version changelog entries following semantic versioning format with bullet points for changes\nSOURCE: https://github.com/flutter/packages/blob/main/packages/webview_flutter/webview_flutter/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.3.22+2\n\n* Update package:e2e reference to use the local version in the flutter/plugins\n  repository.\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Plugin Wrapper Library\nDESCRIPTION: Creates and configures the static library for Flutter plugin wrapper, including core implementations and plugin registrar sources.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Application Components\nDESCRIPTION: Defines installation rules for the application binary, ICU data, Flutter library, and plugin libraries. These rules ensure all necessary components are correctly placed in the application bundle.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_image/example/linux/CMakeLists.txt#2025-04-22_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n```\n\n----------------------------------------\n\nTITLE: Navigating with Typed Routes in Dart\nDESCRIPTION: Demonstrates how to use the generated go method for type-safe navigation.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router_builder/README.md#2025-04-22_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvoid onTap() => const FamilyRoute(fid: 'f2').go(context);\n```\n\n----------------------------------------\n\nTITLE: Initializing Flutter Project CMake Configuration\nDESCRIPTION: Sets up the basic project configuration, including the project name, executable name, and application ID. It also defines the minimum CMake version required and the project language.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/xdg_directories/example/linux/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\nset(BINARY_NAME \"xdg_directories_demo\")\nset(APPLICATION_ID \"com.example.example\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function in CMake for Flutter Linux\nDESCRIPTION: Creates a custom function to prepend a prefix to each element in a list, simulating list(TRANSFORM ... PREPEND ...) for CMake 3.10 compatibility.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Markdown Initial Version Entry 0.0.1\nDESCRIPTION: Initial release changelog entry\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_adaptive_scaffold/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.0.1\n\n* Initial release\n```\n\n----------------------------------------\n\nTITLE: Setting Up Testing Configuration\nDESCRIPTION: Configures testing targets for the Flutter application. Enables the file_selector_linux tests and creates an alias target named 'unit_tests' for repository tooling compatibility.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_linux/example/linux/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Enable the test target.\nset(include_file_selector_linux_tests TRUE)\n# Provide an alias for the test target using the name expected by repo tooling.\nadd_custom_target(unit_tests DEPENDS file_selector_linux_test)\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Build Target\nDESCRIPTION: Sets up the main application executable build configuration including source files and dependencies.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/local/linux/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Plugin Wrapper - CMake\nDESCRIPTION: Creates and configures the static library for Flutter plugin wrappers. Sets up compilation flags, dependencies, and include directories for plugin development.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/two_dimensional_scrollables/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Rules for Flutter Application\nDESCRIPTION: Sets up installation rules for the Flutter application, including the executable, ICU data, Flutter library, bundled libraries, and assets. It also configures the installation of the AOT library for non-Debug builds.\nSOURCE: https://github.com/flutter/packages/blob/main/third_party/packages/flutter_svg/example/windows/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings in CMake\nDESCRIPTION: Creates a function APPLY_STANDARD_SETTINGS to apply common compilation settings to targets. This includes setting C++14 standard, warning flags, and optimization levels.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/hello/linux/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Implementing Null Safety in Dart\nDESCRIPTION: Migrates the package to null-safety, requiring updates to method signatures and variable declarations.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_maps_flutter/google_maps_flutter/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\n// Example of a null-safe method signature\nvoid setMapStyle(String? mapStyle) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter Application in C++\nDESCRIPTION: Sets up the basic CMake project configuration for a Flutter application. It defines the project name, language, and executable name.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/two_dimensional_scrollables/example/linux/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\nset(BINARY_NAME \"example\")\nset(APPLICATION_ID \"com.example.example\")\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Workspace for Flutter iOS Project\nDESCRIPTION: Command to open the iOS portion of a Flutter project in Xcode for customizing launch screen assets through the Xcode interface.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/extension_google_sign_in_as_googleapis_auth/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Project for Flutter iOS App\nDESCRIPTION: Command to open the Xcode project for a Flutter iOS app, allowing access to the Assets.xcassets folder for customizing launch screen images.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/video_player/video_player/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Integration and System Dependencies\nDESCRIPTION: Integrates the Flutter library build rules and configures system-level dependencies using pkg-config. Specifically sets up GTK 3.0 as a required dependency for the Linux build.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker/example/linux/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Workspace Command for Flutter iOS Project\nDESCRIPTION: Terminal command to open the Flutter project's Xcode workspace for customizing launch screen assets through the Xcode interface.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/app/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Updating Flutter Package Version in Markdown\nDESCRIPTION: This snippet shows the format for documenting version changes in a Flutter package changelog. It includes version numbers, bullet points for changes, and mentions of SDK and dependency updates.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pointer_interceptor/pointer_interceptor_web/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## NEXT\n\n* Updates minimum supported SDK version to Flutter 3.22/Dart 3.4.\n\n## 0.10.2+1\n\n* Adds support for `web: ^1.0.0`.\n\n## 0.10.2\n\n* Updates web code to package `web: ^0.5.0`.\n* Updates SDK version to Dart `^3.3.0`. Flutter `^3.19.0`.\n\n## 0.10.1+2\n\n* Fixes \"width and height missing\" warning on web.\n\n## 0.10.1+1\n\n* Updates minimum required plugin_platform_interface version to 2.1.7.\n\n## 0.10.1\n\n* Uses `HtmlElementView.fromTagName` instead of custom factories.\n* Migrates package and tests to `platform:web`.\n* Updates minimum supported SDK version to Flutter 3.16.0/Dart 3.2.0.\n\n## 0.10.0\n\n* Moves web implementation to its own package.\n```\n\n----------------------------------------\n\nTITLE: Flutter Linux Library Configuration\nDESCRIPTION: Configures the Flutter Linux library by setting up system dependencies using pkg-config, defining library paths, and setting build variables.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/path_provider/path_provider/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Profile Build Mode Settings in CMake\nDESCRIPTION: Defines settings for the Profile build mode, including linker flags and compiler flags. It also adds definitions for Unicode support.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_image/example/windows/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Installation Configuration for Flutter Windows\nDESCRIPTION: Sets up installation rules for the Flutter application, including executable, ICU data, Flutter library, and asset files.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter Linux\nDESCRIPTION: Sets up the CMake project with minimum required version and includes generated configuration. It also defines a custom function for list manipulation.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences_linux/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\n\n# Serves the same purpose as list(TRANSFORM ... PREPEND ...),\n# which isn't available in 3.10.\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: List Prepend Function Definition in CMake\nDESCRIPTION: Custom CMake function that prepends a prefix to each element in a list. Used as a workaround for CMake versions below 3.10 which don't have list(TRANSFORM ... PREPEND ...).\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher_linux/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Running Flutter SVG Benchmarks via Command Line\nDESCRIPTION: Command to execute performance benchmarking tests for the flutter_svg package using Flutter Driver in profile mode with endless trace buffer.\nSOURCE: https://github.com/flutter/packages/blob/main/third_party/packages/flutter_svg/example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter drive --profile --endless-trace-buffer --target test_driver/bench.dart\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project Settings\nDESCRIPTION: Sets up initial CMake configuration including project name, language, and basic application properties.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/local/linux/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\nset(BINARY_NAME \"local\")\nset(APPLICATION_ID \"dev.flutter.rfw.examples.local\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Building Application Target and Dependencies\nDESCRIPTION: Configures the main application executable build, including source files, Flutter dependencies, and GTK linking. Sets up the build output directory and plugin management.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences/example/linux/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Installation Rules\nDESCRIPTION: Configures installation rules for the application bundle including executable, libraries, and assets.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/local/linux/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: List Prepend Function Definition in CMake\nDESCRIPTION: Custom CMake function that prepends a prefix to each element in a list. Created as a workaround for CMake versions below 3.10 that don't have list(TRANSFORM ... PREPEND ...).\nSOURCE: https://github.com/flutter/packages/blob/main/packages/path_provider/path_provider/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Renaming Types in Dart for In-App Purchases\nDESCRIPTION: This snippet shows breaking changes in version 0.2.0, renaming 'PurchaseError' to 'IAPError' and 'PurchaseSource' to 'IAPSource'.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/in_app_purchase/in_app_purchase/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n// Breaking changes in version 0.2.0\n'PurchaseError' -> 'IAPError'\n'PurchaseSource' -> 'IAPSource'\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options in CMake\nDESCRIPTION: Sets the default build type to Debug if not specified and defines available build types. This ensures proper configuration for different build scenarios.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/xdg_directories/example/linux/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter library headers\nDESCRIPTION: Creates a list of Flutter library headers and prepends the ephemeral directory path to each header file. Then sets up an interface library with the appropriate include directories and dependencies.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker_linux/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Unicode and Compiler Options in CMake for Flutter Windows Application\nDESCRIPTION: Enables Unicode support and defines a function to apply standard compilation settings to targets. This ensures consistent compiler options across the project with modern C++ standards and specific warning treatments.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_adaptive_scaffold/example/windows/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Version Definitions in CMake\nDESCRIPTION: Adds preprocessor definitions for Flutter version information. Defines major, minor, patch, and build version numbers for the compilation process.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector/example/windows/runner/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\") \ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Button Tester Example on Chrome\nDESCRIPTION: Command to run the button_tester.dart example application which tests different configurations of the Google Sign In Button Widget in Chrome browser.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_sign_in/google_sign_in_web/example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nflutter run -d chrome --target=lib/button_tester.dart\n```\n\n----------------------------------------\n\nTITLE: Flutter Linux Library Configuration\nDESCRIPTION: Sets up system dependencies using pkg-config for GTK, GLIB, and GIO. Defines Flutter library paths and configures library headers for the Linux build.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/xdg_directories/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Project for Flutter iOS Launch Screen Customization\nDESCRIPTION: This command opens the Xcode workspace for a Flutter iOS project, allowing developers to customize the launch screen assets through the Xcode interface.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Workspace Command for Flutter iOS Project\nDESCRIPTION: Terminal command to open the Flutter project's Xcode workspace for modifying launch screen assets through the Xcode interface.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/local/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter Application\nDESCRIPTION: Sets up the CMake project with minimum version requirement, project name, and language. Defines the binary name and application ID for the Flutter app.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_adaptive_scaffold/example/linux/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\nset(BINARY_NAME \"example\")\nset(APPLICATION_ID \"dev.flutter.example\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Rules\nDESCRIPTION: Sets up installation rules for the application binary, Flutter ICU data, libraries, and assets. Includes special handling for AOT library installation in Profile and Release builds.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/remote/windows/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library Headers\nDESCRIPTION: Defines a list of Flutter library headers that will be included in the build, and prepends the path to the ephemeral directory.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/app/linux/flutter/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Setting up system dependencies for Flutter Linux GTK\nDESCRIPTION: Configures the required system-level dependencies for Flutter on Linux using pkg_config to find GTK, GLIB, and GIO packages.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker_linux/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter Library ===\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n```\n\n----------------------------------------\n\nTITLE: Version Change Documentation in Markdown\nDESCRIPTION: Complete changelog entries documenting version history, feature additions, breaking changes, and maintenance updates for the URL Launcher package.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher_macos/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## NEXT\n\n* Updates minimum supported SDK version to Flutter 3.22/Dart 3.4.\n\n## 3.2.2\n\n* Updates to Pigeon v22.\n\n## 3.2.1\n\n* Adds privacy manifest.\n* Updates minimum supported SDK version to Flutter 3.19/Dart 3.3.\n\n## 3.2.0\n\n* Adds Swift Package Manager compatibility.\n* Updates minimum supported SDK version to Flutter 3.13/Dart 3.1.\n```\n\n----------------------------------------\n\nTITLE: Standard Compilation Settings Function in CMake\nDESCRIPTION: Defines a function to apply standard compilation settings including C++14 support, compiler warnings, and optimization flags.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences_linux/example/linux/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Runner Build\nDESCRIPTION: Configures the CMake build system for a Flutter Windows desktop application. Sets up the executable target with required source files, applies standard build settings, defines Flutter version information, and links necessary dependencies.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker/example/windows/runner/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n\napply_standard_settings(${BINARY_NAME})\n\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\"\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options for Flutter Project\nDESCRIPTION: Sets the default build type to Debug if not specified. Defines possible build types as Debug, Profile, and Release.\nSOURCE: https://github.com/flutter/packages/blob/main/third_party/packages/flutter_svg/example/linux/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter and Application Build Rules in CMake\nDESCRIPTION: Sets up the Flutter library build rules and adds the application build directory. It also includes the generated plugin build rules for integrating Flutter plugins into the application.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_adaptive_scaffold/example/windows/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Bundle Directory\nDESCRIPTION: Sets up the installation configuration for creating a relocatable bundle in the build directory. Defines the bundle directory path and ensures a clean bundle directory on each build.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker/example/linux/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: List Prepend Function Definition in CMake\nDESCRIPTION: Custom CMake function that prepends a prefix to each element in a list. This provides functionality similar to list(TRANSFORM ... PREPEND ...) for CMake 3.10 compatibility.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/remote/linux/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Updating Gradle Version\nDESCRIPTION: Updates the Gradle version used in the project.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/webview_flutter/webview_flutter_android/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## 4.3.4\n\n* Bumps gradle from 8.0.0 to 8.9.0.\n```\n\n----------------------------------------\n\nTITLE: Including Generated Flutter Configuration in CMake\nDESCRIPTION: Includes the generated configuration file provided by the Flutter tool.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/app/linux/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Defining Application Target and Dependencies in CMake\nDESCRIPTION: Creates the executable target for the application, adds source files, and links necessary libraries including Flutter and GTK. This section defines the core of the application build process.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/xdg_directories/example/linux/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\napply_standard_settings(${BINARY_NAME})\n\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Package Repository Reference\nDESCRIPTION: Original source repository reference showing the package's origin.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/vector_graphics_codec/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\ndnfield/vector_graphics\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Wrapper Plugin Library in CMake\nDESCRIPTION: Defines and configures the Flutter wrapper plugin library with core and plugin sources. Sets up compilation flags and linking options for plugin development.\nSOURCE: https://github.com/flutter/packages/blob/main/third_party/packages/flutter_svg/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Deprecating and Replacing Property in Markdown\nDESCRIPTION: This snippet shows the deprecation of 'macUTIs' in favor of 'uniformTypeIdentifiers' in version 2.5.0 of the package.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_platform_interface/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n## 2.5.0\n\n* Deprecates `macUTIs` in favor of `uniformTypeIdentifiers`.\n* Aligns Dart and Flutter SDK constraints.\n```\n\n----------------------------------------\n\nTITLE: Updating Guava Dependency Version (Android)\nDESCRIPTION: Updates the version of the Guava library used in the Android configuration. This change bumps the version to improve compatibility and potentially add new features.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/espresso/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n* Bumps `com.google.guava:guava` from `31.1` to `33.3.1`.\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter and System Dependencies in CMake\nDESCRIPTION: Sets up Flutter library and tool build rules, and configures system-level dependencies like GTK. This section is crucial for integrating Flutter with the native build system.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/wasm/linux/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Building Root Filesystem in CMake\nDESCRIPTION: Sets up the root filesystem for cross-building if a Flutter target platform sysroot is specified. This configuration is crucial for cross-compilation scenarios.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/wasm/linux/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Settings and Standard Compilation Options\nDESCRIPTION: Defines build type options and creates a function for applying standard compilation settings including C++14 support and compiler flags.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences/example/linux/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Modern CMake Behaviors and Loading Libraries\nDESCRIPTION: Sets CMake policies to modern behaviors and configures the runtime path for loading bundled libraries relative to the binary. Also sets up cross-building configuration when targeting a specific platform sysroot.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker/example/linux/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter C++ Wrapper Libraries in CMake\nDESCRIPTION: Sets up two static libraries: flutter_wrapper_plugin for plugins and flutter_wrapper_app for the runner. These libraries include the necessary C++ wrapper sources and are linked against the Flutter library.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/wasm/windows/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Version History in Markdown\nDESCRIPTION: Detailed changelog entries showing version updates, bug fixes, and feature additions for the shared_preferences_web package\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences_web/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.4.3\n\n* Fixes issue where non-JSON formatted strings cause parsing errors.\n\n## 2.4.2\n\n* Fixes `getStringList` returning immutable list.\n* Updates minimum supported SDK version to Flutter 3.22/Dart 3.4.\n\n## 2.4.1\n\n* Adds support for `web: ^1.0.0`.\n\n## 2.4.0\n\n* Adds `SharedPreferencesAsyncWeb` API.\n\n## 2.3.0\n\n* Updates web code to package `web: ^0.5.0`.\n* Updates SDK version to Dart `^3.3.0`. Flutter `^3.19.0`.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Extra Data from GoRouterState in Dart\nDESCRIPTION: Demonstrates how to retrieve extra data that was passed during navigation from the GoRouterState.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/doc/navigation.md#2025-04-22_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nfinal String extraString = GoRouterState.of(context).extra! as String;\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Project Settings in CMake for Flutter Windows\nDESCRIPTION: Sets up the initial project configuration including project name, language settings, and basic build options. Configures multi-configuration generator settings and build types.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/path_provider/path_provider/example/windows/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(example LANGUAGES CXX)\n\nset(BINARY_NAME \"example\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\n# Configure build options.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Build Options for Flutter WASM Project in CMake\nDESCRIPTION: Configures build options for the project, including setting the default build type to Debug if not specified. This ensures consistent build configurations across different environments.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/wasm/linux/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Flutter Linux Library Configuration\nDESCRIPTION: Sets up system dependencies using pkg-config and configures Flutter library paths and build variables for Linux.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/two_dimensional_scrollables/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Maven Repository for Google Services in Android Project\nDESCRIPTION: Gradle configuration snippet showing how to add the Google Maven repository to the Android project's build.gradle file. This is required for accessing Google Play Services dependencies.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_sign_in/google_sign_in/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nallprojects {\n    repositories {\n        jcenter()\n        maven {                              // NEW\n            url \"https://maven.google.com\"   // NEW\n        }                                    // NEW\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installation Rules Configuration in CMake\nDESCRIPTION: Sets up installation rules for the Flutter application bundle, including assets, libraries, and runtime components.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences_linux/example/linux/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Package Version 0.2.0 Changes\nDESCRIPTION: Initial implementation of Linux platform support.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker_linux/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.0\n\n* Implements initial Linux support.\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project Configuration\nDESCRIPTION: Sets up basic project configuration including project name, binary name, and application ID. Configures CMake policies and build path settings.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences/example/linux/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\nset(BINARY_NAME \"example\")\nset(APPLICATION_ID \"dev.flutter.plugins.shared_preferences_example\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Rules for Flutter Windows Application\nDESCRIPTION: Sets up installation rules to copy the executable, ICU data file, Flutter library, bundled libraries, and assets to the appropriate locations. Includes special handling for the AOT library in non-Debug builds.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/path_provider/path_provider_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Settings for Flutter Windows Application\nDESCRIPTION: Sets up installation rules for the Flutter Windows application. This configures where executable, data files, libraries, and assets are placed to support in-place execution and integration with Visual Studio.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth/example/windows/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path and Publishing to Parent Scope\nDESCRIPTION: Defines the path to the Flutter Linux GTK library and publishes essential paths to the parent scope for use in the installation step.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/app/linux/flutter/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Flutter Tool Backend Command Configuration\nDESCRIPTION: Sets up custom build commands for Flutter tool backend, ensuring library and header files are generated correctly during the build process.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/two_dimensional_scrollables/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Opening Flutter iOS Project in Xcode\nDESCRIPTION: Command to open the Flutter project's iOS workspace in Xcode for modifying launch screen assets.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/palette_generator/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Basic Markdown Header\nDESCRIPTION: Simple markdown header for the path_provider example project readme\nSOURCE: https://github.com/flutter/packages/blob/main/packages/path_provider/path_provider/example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# path_provider_example\\n\\nDemonstrates how to use the path_provider plugin.\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Project for Launch Screen Asset Customization\nDESCRIPTION: Command for opening the iOS portion of a Flutter project in Xcode to customize launch screen assets through the Xcode interface.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/in_app_purchase/in_app_purchase_storekit/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Running Flutter App for Testing\nDESCRIPTION: Command to install and run the Flutter app on a test device for in-app purchase testing.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/in_app_purchase/in_app_purchase_android/example/README.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n8. Sign in to the test device with the test account from step #7. Then use\\n   `flutter run` to install the app to the device and test like normal.\n```\n\n----------------------------------------\n\nTITLE: Standard Compilation Settings Function for Flutter Windows\nDESCRIPTION: Defines a function to apply standard compilation settings to targets including C++17 support and compiler options.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Project Settings in CMake for Flutter Windows\nDESCRIPTION: Initializes the CMake project and sets basic configuration options including project name, language settings, and build types. Configures multi-configuration generators and Unicode support.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/local/windows/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(local LANGUAGES CXX)\n\nset(BINARY_NAME \"local\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\n# Configure build options.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Initializing Flutter Project in CMake\nDESCRIPTION: Sets up the initial project configuration, including the project name, binary name, and application ID. It also configures the CMAKE_INSTALL_RPATH for library loading.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/hello/linux/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\nset(BINARY_NAME \"hello\")\nset(APPLICATION_ID \"dev.flutter.rfw.examples.hello\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Build Root Filesystem\nDESCRIPTION: Sets up system root configuration for cross-building capabilities when FLUTTER_TARGET_PLATFORM_SYSROOT is defined.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/local/linux/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Policies and Installation Paths for Flutter\nDESCRIPTION: Sets CMake policies and defines installation paths for the Flutter application. It also configures cross-building settings if a sysroot is specified.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/two_dimensional_scrollables/example/linux/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Building Root Filesystem in CMake\nDESCRIPTION: Sets up the root filesystem for cross-building if a Flutter target platform sysroot is specified. This configuration is crucial for cross-compilation scenarios.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/xdg_directories/example/linux/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Profile Configuration Settings\nDESCRIPTION: Configures profile build settings by copying release configuration flags for various build aspects.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences/example/windows/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Opening Flutter Project in Xcode\nDESCRIPTION: Command to open the Flutter project's Xcode workspace for customizing launch screen assets.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/two_dimensional_scrollables/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Basic Project Configuration in CMake for Flutter Windows\nDESCRIPTION: Sets up the initial project configuration including minimum CMake version, project name, and basic build settings.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(example LANGUAGES CXX)\n\nset(BINARY_NAME \"example\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Tool Backend\nDESCRIPTION: Configures the Flutter tool backend for building and assembling Flutter components. Creates custom commands and targets for Flutter assembly process.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/path_provider/path_provider_windows/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation for Flutter Windows Application\nDESCRIPTION: Sets up the installation process for the Flutter Windows application. It defines installation directories, copies necessary files and libraries, and configures the asset directory copying process.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/platform_tests/test_plugin/example/windows/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode project for launch screen customization in Flutter iOS apps\nDESCRIPTION: Command for opening the iOS Xcode project workspace in a Flutter application to customize launch screen assets through the Xcode interface.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_maps_flutter/google_maps_flutter/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: List Prepend Function Definition in CMake\nDESCRIPTION: Custom CMake function that prepends a prefix to each element in a list. Provides functionality similar to list(TRANSFORM ... PREPEND ...) for CMake 3.10 compatibility.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/xdg_directories/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Opening Flutter Project in Xcode\nDESCRIPTION: Command to open the Flutter project's Xcode workspace for customizing launch screen assets.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/remote/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Tool Backend in CMake\nDESCRIPTION: Configures a custom command to run the Flutter tool backend for generating necessary files and libraries. It also creates a custom target for Flutter assembly.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/path_provider/path_provider_linux/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      linux-x64 ${CMAKE_BUILD_TYPE}\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Including Plugin Build Rules\nDESCRIPTION: Includes the generated plugins configuration file which manages building and adding plugins to the application. This ensures that any Flutter plugins used by the application are correctly incorporated into the build.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_image/example/linux/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Documentation in Markdown\nDESCRIPTION: Markdown documentation explaining the directory structure and purpose of various test plugins including test_plugin, alternate_language_test_plugin, and flutter_null_safe_unit_tests.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/platform_tests/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Native Pigeon Tests\n\nThis directory contains native test harnesses for native and end-to-end tests\nof Pigeon-generated code. The [test script](../tool/test.dart) generates\nnative code from [pigeons/](../pigeons/) into the native test scaffolding, and\nthen drives the tests there.\n\nTo run these tests, use [`test.dart`](../tool/test.dart).\n\nAlternately, if you are running them directly (e.g., from within a platform\nIDE), you can use [`generate.dart`](../tool/generate.dart) to generate the\nnecessary Pigeon output.\n\n## test\\_plugin\n\nThe new unified test harness for all platforms. Tests in this plugin use the\nsame structure as tests for the Flutter team-maintained plugins, as described\n[in the repository documentation](https://github.com/flutter/flutter/blob/master/docs/ecosystem/testing/Plugin-Tests.md#web-tests).\n\n## alternate\\_language\\_test\\_plugin\n\nThe test harness for alternate languages, on platforms that have multiple\nsupported plugin languages. It covers:\n- Java for Android\n- Objective-C for iOS\n\n## flutter\\_null\\_safe\\_unit\\_tests\n\nDart unit tests for null-safe mode. This is a legacy structure from before\nNNBD was the only mode Pigeon supported; these should be folded back into\nthe main tests.\n```\n\n----------------------------------------\n\nTITLE: Supporting InApp Subscription Upgrade/Downgrade in Dart\nDESCRIPTION: Added support for in-app subscription upgrades and downgrades in version 0.4.1.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/in_app_purchase/in_app_purchase/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\n// Support for subscription upgrade/downgrade added\n// No specific code changes shown in the changelog\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Configuration for Flutter Linux\nDESCRIPTION: Sets up the initial CMake configuration including minimum version, ephemeral directory, and generated config inclusion.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Workspace Command\nDESCRIPTION: Terminal command to open the Flutter project's Xcode workspace for customizing launch screen assets through the Xcode interface.\nSOURCE: https://github.com/flutter/packages/blob/main/third_party/packages/flutter_svg/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Creates an interface library for Flutter, sets include directories, and links necessary libraries including GTK, GLIB, and GIO.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Tool Backend in CMake\nDESCRIPTION: Sets up the Flutter tool backend for generating necessary files. It creates a custom command and target to run the Flutter tool and generate required libraries and source files.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/camera/camera_windows/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Project Description in Markdown\nDESCRIPTION: Markdown documentation describing the image_colors sample application and its purpose in demonstrating the PaletteGenerator functionality.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/palette_generator/example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# image_colors\n\nA sample app for demonstrating the PaletteGenerator\n\nThis app will show you what kinds of palettes the generator creates, and one\nway to create them from existing image providers.\n```\n\n----------------------------------------\n\nTITLE: Image Picker Linux Package Name\nDESCRIPTION: Package identifier for the Linux implementation of image_picker.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker_linux/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# image_picker_linux\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Project for Flutter iOS App\nDESCRIPTION: Command to open the Xcode project for a Flutter iOS app. This allows access to the Assets.xcassets folder where launch screen assets can be modified.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/path_provider/path_provider_foundation/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter and System Dependencies in CMake\nDESCRIPTION: Adds the Flutter managed directory as a subdirectory and finds system-level dependencies like GTK. It then creates the main executable target and links it with Flutter and GTK libraries.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher_linux/example/linux/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining Package Exclusion Format in Markdown\nDESCRIPTION: Demonstrates the expected format for excluding packages in configuration files. Each entry should include a comment explaining the reason for exclusion, followed by the package name.\nSOURCE: https://github.com/flutter/packages/blob/main/script/configs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Reason for exclusion\n- name_of_package\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Tool Backend\nDESCRIPTION: Adds a custom command to run the Flutter tool backend and generate necessary files. Creates a custom target 'flutter_assemble' that depends on the generated files.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      linux-x64 ${CMAKE_BUILD_TYPE}\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up System Dependencies for Flutter Linux\nDESCRIPTION: Finds and sets up required system-level dependencies using pkg-config, including GTK, GLIB, and GIO.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Flutter Library Headers Configuration in CMake\nDESCRIPTION: Defines and configures the Flutter library headers for the Linux build. It creates a list of all required header files and prepends their paths with the ephemeral directory location.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/platform_tests/test_plugin/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Project Basics in CMake for Flutter Linux Application\nDESCRIPTION: Sets up the basic project configuration including minimum CMake version, project name, executable name, and application identifier. These foundational settings establish the identity of the Flutter application for building on Linux.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector/example/linux/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# Project-level configuration.\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"example\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"dev.flutter.plugins.file_selector_linux_example\")\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Web Tests in Bash\nDESCRIPTION: This command runs Flutter tests specifically for the web platform using Chrome.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflutter test --platform=chrome\n```\n\n----------------------------------------\n\nTITLE: Initializing Flutter Linux Build Configuration in CMake\nDESCRIPTION: Sets up the initial CMake configuration for Flutter Linux builds, including minimum CMake version and ephemeral directory.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Tool Backend Build Commands\nDESCRIPTION: Configures custom build commands for the Flutter tool backend, ensuring proper compilation of Flutter-related files and dependencies.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Project in CMake\nDESCRIPTION: This CMake script sets up the necessary configuration for building a Flutter Windows application. It defines the Flutter library, wrapper libraries, and custom build commands for the Flutter tool backend.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/remote/windows/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n\n# Set fallback configurations for older versions of the flutter tool.\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n\n# === Flutter Library ===\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n\n# === Wrapper ===\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Flutter Packages\nDESCRIPTION: A markdown table displaying Flutter packages with their pub.dev metrics (version, points, popularity) and GitHub tracking badges for issues and pull requests. Each package includes links to pub.dev and GitHub.\nSOURCE: https://github.com/flutter/packages/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| [google\\_identity\\_services\\_web](./packages/google_identity_services_web/) | [![pub package](https://img.shields.io/pub/v/google_identity_services_web.svg)](https://pub.dev/packages/google_identity_services_web) | [![pub points](https://img.shields.io/pub/points/google_identity_services_web)](https://pub.dev/packages/google_identity_services_web/score) | [![popularity](https://img.shields.io/pub/popularity/google_identity_services_web)](https://pub.dev/packages/google_identity_services_web/score) | [![GitHub issues by-label](https://img.shields.io/github/issues/flutter/flutter/p%3A%20google_identity_services_web?label=)](https://github.com/flutter/flutter/labels/p%3A%20google_identity_services_web) | [![GitHub pull requests by-label](https://img.shields.io/github/issues-pr/flutter/packages/p%3A%20google_identity_services_web?label=)](https://github.com/flutter/packages/labels/p%3A%20google_identity_services_web) |\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Tests in Bash\nDESCRIPTION: This command runs the standard Flutter tests for the project.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflutter test\n```\n\n----------------------------------------\n\nTITLE: Flutter BSD License Header\nDESCRIPTION: Standard copyright and license header indicating BSD license terms for Flutter packages. References the full license details in the LICENSE file.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth_darwin/pigeons/copyright.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright 2013 The Flutter Authors. All rights reserved.\nUse of this source code is governed by a BSD-style license that can be\nfound in the LICENSE file.\n```\n\n----------------------------------------\n\nTITLE: Flutter Library Headers Configuration\nDESCRIPTION: Definition of Flutter library headers and configuration of the Flutter interface library with necessary include directories and link libraries.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/wasm/linux/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Application Build\nDESCRIPTION: Sets up CMake build configuration for a Flutter Windows desktop application. Defines the executable target with necessary source files, links Flutter libraries, and configures compilation settings. Includes Windows-specific configurations like WIN32 flag and NOMINMAX definition.\nSOURCE: https://github.com/flutter/packages/blob/main/third_party/packages/flutter_svg/example/windows/runner/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"run_loop.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Tool Backend in CMake\nDESCRIPTION: Sets up a custom command to run the Flutter tool backend, which generates necessary files for the Flutter Windows build. It creates a phony target to ensure the command runs every time, and sets up dependencies for the flutter_assemble target.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Settings for Flutter Linux Application Bundle\nDESCRIPTION: Sets up installation directories and configures the bundle directory for the deployable application. It ensures a clean installation by removing any previous bundle directory before installation begins.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector/example/linux/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Tests for Testing Package\nDESCRIPTION: Command to execute tests in the 'testing' directory using Flutter test runner, along with expected output showing the test process and results.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/web_benchmarks/testing/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ flutter test testing\n\n00:03 +0: Can run a web benchmark\nLaunching Chrome.\nLaunching Google Chrome 98.0.4758.102\n\nWaiting for the benchmark to report benchmark profile.\n[CHROME]: [0215/133233.327761:ERROR:socket_posix.cc(150)] bind() failed: Address already in use (98)\n[CHROME]:\n[CHROME]: DevTools listening on ws://[::1]:10000/devtools/browser/4ef82be6-9b68-4fd3-ab90-cd603d25ceb1\nConnecting to DevTools: ws://localhost:10000/devtools/page/21E7271507E9BC796B957E075515520F\nConnected to Chrome tab:  (http://localhost:9999/index.html)\nLaunching benchmark \"scroll\"\nExtracted 299 measured frames.\nSkipped 1 non-measured frames.\nLaunching benchmark \"page\"\n[APP] Testing round 0...\n[APP] Testing round 1...\n[APP] Testing round 2...\n[APP] Testing round 3...\n[APP] Testing round 4...\n[APP] Testing round 5...\n[APP] Testing round 6...\n[APP] Testing round 7...\n[APP] Testing round 8...\n[APP] Testing round 9...\nExtracted 490 measured frames.\nSkipped 0 non-measured frames.\nLaunching benchmark \"tap\"\n[APP] Testing round 0...\n[APP] Testing round 1...\n[APP] Testing round 2...\n[APP] Testing round 3...\n[APP] Testing round 4...\n[APP] Testing round 5...\n[APP] Testing round 6...\n[APP] Testing round 7...\n[APP] Testing round 8...\n[APP] Testing round 9...\nExtracted 299 measured frames.\nSkipped 0 non-measured frames.\nReceived profile data\n00:26 +1: All tests passed!\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Compilation Settings in CMake\nDESCRIPTION: Sets up the root filesystem for cross-building if FLUTTER_TARGET_PLATFORM_SYSROOT is defined. This includes setting the CMAKE_SYSROOT and configuring find root path modes.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/hello/linux/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Tool Backend in CMake\nDESCRIPTION: Sets up a custom command to run the Flutter tool backend, which generates necessary files for the build. It also creates a custom target 'flutter_assemble' that depends on the generated files.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/wasm/windows/flutter/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options for Flutter Application\nDESCRIPTION: Sets up the build type configuration for the Flutter application, defaulting to Debug mode if not specified. Provides options for Debug, Profile, and Release build types.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_linux/example/linux/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Configure build options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Flutter Library Headers Configuration\nDESCRIPTION: Defines and configures the Flutter library headers, sets up include directories, and links required dependencies for the Flutter interface library.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/path_provider/path_provider/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets and AOT Library for Linux Application\nDESCRIPTION: Configures installation of Flutter assets and conditionally installs the AOT library for non-Debug builds. This ensures that all required assets are properly packaged and the appropriate compiled code is included based on the build type.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector/example/linux/CMakeLists.txt#2025-04-22_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter Linux Application\nDESCRIPTION: Sets up the basic CMake project configuration for a Flutter application targeting Linux. Defines the binary name, application ID, and sets the required CMake version and project languages.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_linux/example/linux/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\nset(BINARY_NAME \"example\")\nset(APPLICATION_ID \"com.example.example\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Tool Backend in CMake for Windows\nDESCRIPTION: This snippet creates a custom command and target to run the Flutter tool backend. It generates necessary files and ensures the Flutter library and wrapper sources are up-to-date.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/app/windows/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Tool Backend Build Commands in CMake\nDESCRIPTION: Sets up custom build commands for Flutter tool backend integration. Creates a phony target to ensure proper rebuilding and defines the flutter_assemble target with all necessary dependencies.\nSOURCE: https://github.com/flutter/packages/blob/main/third_party/packages/flutter_svg/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Libraries in CMake\nDESCRIPTION: Defines and configures two static libraries: flutter_wrapper_plugin for plugins and flutter_wrapper_app for the main application. These libraries include core implementations and specific functionalities.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/path_provider/path_provider/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Wrapper Libraries in CMake for Windows\nDESCRIPTION: Sets up the Flutter wrapper libraries for plugins and the main application. It defines source files, creates static libraries, and configures their properties and dependencies.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_windows/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Runner Build\nDESCRIPTION: Configures CMake build settings for the Flutter Windows desktop runner. Sets up the executable with required source files, links Flutter libraries, and configures compilation definitions. Includes manifest files and plugin registrant.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker_windows/example/windows/runner/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Wrapper Libraries\nDESCRIPTION: Sets up wrapper libraries for plugins and applications, including source files and build configurations for both plugin and app wrappers.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker_windows/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Tool Backend\nDESCRIPTION: Sets up a custom command and target to generate the Flutter library and wrapper sources using the Flutter tool backend. Uses a phony output to ensure the command runs every time, as there's no reliable way to track all inputs and outputs from the Flutter tool.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_markdown/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Asset Installation Configuration\nDESCRIPTION: Sets up installation rules for Flutter assets and AOT library, ensuring clean asset directory on each build.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences/example/windows/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Rules\nDESCRIPTION: Sets up installation rules for the binary, Flutter ICU data, libraries, and assets. Includes special handling for AOT library installation in Profile and Release builds.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/wasm/windows/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Custom Color Mapping for SVG in Flutter\nDESCRIPTION: Demonstrates advanced color manipulation using a custom ColorMapper. This allows for replacing specific colors in an SVG based on various criteria.\nSOURCE: https://github.com/flutter/packages/blob/main/third_party/packages/flutter_svg/README.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass _MyColorMapper extends ColorMapper {\n  const _MyColorMapper();\n\n  @override\n  Color substitute(\n    String? id,\n    String elementName,\n    String attributeName,\n    Color color,\n  ) {\n    if (color == const Color(0xFFFF0000)) {\n      return Colors.blue;\n    }\n    if (color == const Color(0xFF00FF00)) {\n      return Colors.yellow;\n    }\n    return color;\n  }\n}\n// ···\n  const String svgString = '''\n<svg viewBox=\\\"0 0 100 100\\\">\n  <rect width=\\\"50\\\" height=\\\"50\\\" fill=\\\"#FF0000\\\" />\n  <circle cx=\\\"75\\\" cy=\\\"75\\\" r=\\\"25\\\" fill=\\\"#00FF00\\\" />\n</svg>\n''';\n  final Widget svgIcon = SvgPicture.string(\n    svgString,\n    colorMapper: const _MyColorMapper(),\n  );\n```\n\n----------------------------------------\n\nTITLE: Initializing Project and Build Configuration in CMake\nDESCRIPTION: Sets up basic project configuration including minimum CMake version, project name, and build configuration options. Defines build modes (Debug/Profile/Release) and their respective flags.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/two_dimensional_scrollables/example/windows/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(example LANGUAGES CXX)\n\nset(BINARY_NAME \"example\")\n\ncmake_policy(VERSION 3.14...3.25)\n\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Output Directory for Unbundled Executable\nDESCRIPTION: Configures the runtime output directory to place the unbundled executable in an intermediates directory to prevent users from running it directly, as it wouldn't have the correct resource locations.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker/example/linux/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Flutter Library Configuration in CMake\nDESCRIPTION: Sets up the Flutter library interface with required system dependencies (GTK, GLIB, GIO) and configures header files. Establishes the core Flutter library setup for Linux builds.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_adaptive_scaffold/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Google Sign-In Changelog Entries\nDESCRIPTION: Markdown formatted changelog entries documenting version updates from 1.0.0 to 2.5.0, including new features, breaking changes, and dependency updates.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_sign_in/google_sign_in_platform_interface/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.5.0\n\n* Adds a sign-in field to allow Android clients to explicitly specify an account name.\n  This capability is only available within Android for the underlying libraries.\n* Updates minimum supported SDK version to Flutter 3.22/Dart 3.4.\n\n## 2.4.5\n\n* Updates minimum required plugin_platform_interface version to 2.1.7.\n\n## 2.4.4\n\n* Updates `clearAuthCache` override to match base class declaration.\n\n## 2.4.3\n\n* Updates minimum supported SDK version to Flutter 3.10/Dart 3.0.\n* Drop dependency on `package:quiver`.\n\n## 2.4.2\n\n* Adds pub topics to package metadata.\n* Updates minimum supported SDK version to Flutter 3.7/Dart 2.19.\n\n## 2.4.1\n\n* Clarifies `canAccessScopes` method documentation.\n\n## 2.4.0\n\n* Introduces: `canAccessScopes` method and `userDataEvents` stream.\n  * These enable separation of Authentication and Authorization, and asynchronous\n    sign-in operations where needed (on the web, for example!)\n* Updates minimum Flutter version to 3.3.\n* Aligns Dart and Flutter SDK constraints.\n\n## 2.3.1\n\n* Updates links for the merge of flutter/plugins into flutter/packages.\n* Updates minimum Flutter version to 3.0.\n\n## 2.3.0\n\n* Adopts `plugin_platform_interface`. As a result, `isMock` is deprecated in\n  favor of the now-standard `MockPlatformInterfaceMixin`.\n\n## 2.2.0\n\n* Adds support for the `serverClientId` parameter.\n\n## 2.1.3\n\n* Enables mocking models by changing overridden operator == parameter type from `dynamic` to `Object`.\n* Removes unnecessary imports.\n* Adds `SignInInitParameters` class to hold all sign in params, including the new `forceCodeForRefreshToken`.\n\n## 2.1.2\n\n* Internal code cleanup for stricter analysis options.\n\n## 2.1.1\n\n* Removes dependency on `meta`.\n\n## 2.1.0\n\n* Add serverAuthCode attribute to user data\n\n## 2.0.1\n\n* Updates `init` function in `MethodChannelGoogleSignIn` to parametrize `clientId` property.\n\n## 2.0.0\n\n* Migrate to null-safety.\n\n## 1.1.3\n\n* Update Flutter SDK constraint.\n\n## 1.1.2\n\n* Update lower bound of dart dependency to 2.1.0.\n\n## 1.1.1\n\n* Add attribute serverAuthCode.\n\n## 1.1.0\n\n* Add hasRequestedScope method to determine if an Oauth scope has been granted.\n* Add requestScope Method to request new Oauth scopes be granted by the user.\n\n## 1.0.4\n\n* Make the pedantic dev_dependency explicit.\n\n## 1.0.3\n\n* Remove the deprecated `author:` field from pubspec.yaml\n* Require Flutter SDK 1.10.0 or greater.\n\n## 1.0.2\n\n* Add missing documentation.\n\n## 1.0.1\n\n* Switch away from quiver_hashcode.\n\n## 1.0.0\n\n* Initial release.\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Rules for Flutter Application in CMake\nDESCRIPTION: Sets up installation rules for the Flutter application, including the executable, ICU data, Flutter library, and assets. It also handles AOT library installation for non-Debug builds.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/rfw/example/hello/linux/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library and Related Files\nDESCRIPTION: Sets up paths for the Flutter library, ICU data file, project build directory, and AOT library. These are published to the parent scope for the install step.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Fade Transition with GoRouter in Dart\nDESCRIPTION: Shows how to create a custom fade transition animation for route changes using GoRouter's pageBuilder parameter. The example implements a fade transition with an ease-in-out circular curve animation.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/doc/transition-animations.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nGoRoute(\n  path: 'details',\n  pageBuilder: (context, state) {\n    return CustomTransitionPage(\n      key: state.pageKey,\n      child: DetailsScreen(),\n      transitionsBuilder: (context, animation, secondaryAnimation, child) {\n        // Change the opacity of the screen using a Curve based on the the animation's\n        // value\n        return FadeTransition(\n          opacity:\n              CurveTween(curve: Curves.easeInOutCirc).animate(animation),\n          child: child,\n        );\n      },\n    );\n  },\n),\n```\n\n----------------------------------------\n\nTITLE: Version Numbers and Changes - Flutter SVG Package\nDESCRIPTION: Markdown formatted changelog entries documenting version updates, bug fixes, and feature additions for the Flutter SVG package.\nSOURCE: https://github.com/flutter/packages/blob/main/third_party/packages/flutter_svg/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.12.4+2\n\n* Changed version constraint to prevent pulling down from wrong flutter version.\n* Fixed group opacity/saveLayer bug.\n\n## 0.12.4+1\n\n* Bump dep on path_drawing which contains bugfixes for parsing.\n\n## 0.12.4\n\n* Fixed `opacity` handling, particularly for groups. Previously, opacities were\n  averaged together, which resulted in incorrect compositing (particularly if\n  overlapping shapes were drawn within a group). Now, a new layer is created\n  with the opacity applied to the whole. This may cause some performance\n  degredation, but is more correct.\n* Allow font-size to be specified in `px` (with an explicit postfix).\n* Add `excludeFromSemantics` property for purely decorative SVGs. The default\n  value is false.\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Tool Backend\nDESCRIPTION: Configures the Flutter tool backend build steps and custom commands for generating necessary files and dependencies.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/platform_tests/test_plugin/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Version History Documentation in Markdown\nDESCRIPTION: A comprehensive changelog documenting version updates from 0.0.1 to NEXT, including breaking changes, feature additions, and compatibility updates for the shared_preferences_linux package.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences_linux/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## NEXT\n\n* Updates minimum supported SDK version to Flutter 3.22/Dart 3.4.\n\n## 2.4.1\n\n* Fixes `getStringList` returning immutable list.\n* Fixes `getStringList` cast error.\n* Updates minimum supported SDK version to Flutter 3.19/Dart 3.3.\n\n## 2.4.0\n\n* Adds `SharedPreferencesAsyncLinux` API.\n* Updates minimum supported SDK version to Flutter 3.16/Dart 3.2.\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Tool Backend Command\nDESCRIPTION: Sets up a custom command to run the Flutter tool backend script which generates the necessary files for building. Uses a _phony_ output to ensure the command runs every time.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/app/linux/flutter/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Flutter Library Configuration in CMake\nDESCRIPTION: Sets up the basic Flutter library configuration including paths to DLL, ICU data, and header files. Configures the flutter interface library with necessary include directories and dependencies.\nSOURCE: https://github.com/flutter/packages/blob/main/third_party/packages/flutter_svg/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Displaying Images from Path in Flutter with Web Support\nDESCRIPTION: Code example showing how to display images with conditional logic for web vs mobile platforms. On web, Image.network is used with the picked file's path, while on other platforms, Image.file is used with a File object.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker_for_web/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nif (kIsWeb) {\n  image = Image.network(pickedFile.path);\n} else {\n  image = Image.file(File(pickedFile.path));\n}\n```\n\n----------------------------------------\n\nTITLE: Version Headers in Markdown\nDESCRIPTION: Markdown-formatted version headers documenting the package version history from 0.1.4 to 0.6.7+7, including details about changes, updates, and bug fixes for each version.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.6.7+7\n\n* Updating documentation to use isEmpty check.\n\n## 0.6.7+6\n\n* Update package:e2e -> package:integration_test\n\n## 0.6.7+5\n\n* Update package:e2e reference to use the local version in the flutter/plugins\n  repository.\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings for Flutter Project\nDESCRIPTION: Creates a function to apply standard compilation settings to targets. Sets C++14 standard, enables warnings, and optimizes for non-Debug builds.\nSOURCE: https://github.com/flutter/packages/blob/main/third_party/packages/flutter_svg/example/linux/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Runner Executable in CMake for Flutter\nDESCRIPTION: Defines the executable target for a Flutter Windows application with necessary source files. It includes C++ source files for the window implementation, message handling, utilities, and resource files that make up the Windows runner application.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/app/windows/runner/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"messages.g.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Testing SVG Asset with Path in Flutter\nDESCRIPTION: Example showing how to find SVG images in widget tests by matching their asset path. Uses a simpler approach of comparing the SVG path string instead of the full BytesLoader configuration.\nSOURCE: https://github.com/flutter/packages/blob/main/third_party/packages/flutter_svg_test/README.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\ntestWidgets('asset svg with path', (WidgetTester widgetTester) async {\n  const String svgPath = 'test/flutter_logo.svg';\n  await widgetTester.pumpWidget(\n    DefaultAssetBundle(\n      bundle: _FakeAssetBundle(),\n      child: SvgPicture.asset(svgPath),\n    ),\n  );\n\n  expect(find.svgAssetWithPath(svgPath), findsOneWidget);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options for Multi-Config and Single-Config Generators\nDESCRIPTION: Determines if the generator is multi-config and sets appropriate configuration types. For single-config generators, it sets a default build type if not specified.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth_windows/example/windows/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Keeping AndroidX Lifecycle Classes in R8\nDESCRIPTION: ProGuard/R8 rule to prevent the DefaultLifecycleObserver class from being removed during code shrinking. This is required for Flutter plugins that use Android lifecycle components, even though theoretically the class should be kept due to direct usage.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_plugin_android_lifecycle/android/proguard.txt#2025-04-22_snippet_0\n\nLANGUAGE: proguard\nCODE:\n```\n-keep class androidx.lifecycle.DefaultLifecycleObserver\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entries\nDESCRIPTION: Version history entries documenting changes, updates, and improvements to the Flutter Pointer Interceptor package over time. Includes version numbers, feature additions, bug fixes, and compatibility updates.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pointer_interceptor/pointer_interceptor/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## NEXT\n\n* Updates minimum supported SDK version to Flutter 3.22/Dart 3.4.\n\n## 0.10.1+2\n\n* Adds performance warning about using multiple pointer interceptors on iOS.\n* Updates minimum supported SDK version to Flutter 3.16/Dart 3.2.\n\n## 0.10.1+1\n\n* Updates support matrix in README to indicate that iOS 11 is no longer supported.\n* Clients on versions of Flutter that still support iOS 11 can continue to use this\n  package with iOS 11, but will not receive any further updates to the iOS implementation.\n* Removes invalid `implements` tag in pubspec.\n\n## 0.10.1\n\n* Fixes new lint warnings.\n\n## 0.10.0\n\n* Transitions to federated architecture.\n* Adds iOS implementation to federated package.\n\n## 0.9.3+7\n\n* Updates metadata to point to new source folder.\n\n## 0.9.3+6\n\n* Migrates to `dart:ui_web` APIs.\n* Updates minimum supported SDK version to Flutter 3.13.0/Dart 3.1.0.\n\n## 0.9.3+5\n\n* Adds pub topics to package metadata.\n* Updates minimum supported SDK version to Flutter 3.7/Dart 2.19.\n* Aligns Dart and Flutter SDK constraints.\n\n##  0.9.3+4\n\n* Removes const keyword from PointerInterceptor's constructor.\n* Updates minimum Flutter version to 3.0.\n\n## 0.9.3+3\n\n* Fixes lint warnings.\n\n## 0.9.3+2\n\n* (Temporarily) helps tests introduced in prior version to pass in `stable`.\n  (This will be removed when `master` rolls to `stable`)\n* Updates README to reference the correct github URL.\n\n## 0.9.3+1\n\n* Updates example code and integration tests to accomodate hit-testing changes in the Flutter web engine.\n\n## 0.9.3\n\n* Require minimal version of flutter SDK to be `2.10`\n\n## 0.9.2\n\n* Marked `PointerInterceptor` as invisible, so it can be optimized by the engine.\n* (Version Retracted. This attempted to use an API from Flutter `2.10` in earlier versions of Flutter. Fixed in v0.9.3)\n\n## 0.9.1\n\n* Removed `android` and `ios` directories from `example`, as the example doesn't\n  build for those platforms.\n* Added `intercepting` field to allow for conditional pointer interception\n\n## 0.9.0+1\n\n* Change sizing of HtmlElementView so it works well when slotted.\n\n## 0.9.0\n\n* Migrates to null safety.\n\n## 0.8.0+2\n\n* Use `ElevatedButton` instead of the deprecated `RaisedButton` in example and docs.\n\n## 0.8.0+1\n\n* Update README.md so images render in pub.dev\n\n## 0.8.0\n\n* Initial release of the `PointerInterceptor` widget.\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options for Flutter Linux Application\nDESCRIPTION: Sets the default build type to \"Debug\" if not specified and provides a property with valid options (Debug, Profile, Release). This ensures the build configuration is properly established for the Flutter application.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector/example/linux/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Flutter Library Headers Configuration\nDESCRIPTION: Defines the list of Flutter library headers and configures the flutter interface library with necessary include directories and dependencies.\nSOURCE: https://github.com/flutter/packages/blob/main/third_party/packages/flutter_svg/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Describing Platform Implementation Test App in Markdown\nDESCRIPTION: This Markdown snippet explains the purpose of the test app for platform implementations in Flutter packages. It clarifies that the app is for testing purposes only and not for demonstrating actual package usage.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/webview_flutter/webview_flutter_web/example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Platform Implementation Test App\n\nThis is a test app for manual testing and automated integration testing\nof this platform implementation. It is not intended to demonstrate actual use of\nthis package, since the intent is that plugin clients use the app-facing\npackage.\n\nUnless you are making changes to this implementation package, this example is\nvery unlikely to be relevant.\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Repository in Android Gradle for Flutter Plugin v0.1.0\nDESCRIPTION: Example Gradle configuration required for version 0.1.0 of the plugin. This adds the Google Maven repository to the Android build configuration, which is necessary for resolving dependencies.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\nallprojects {\n    repositories {\n        jcenter()\n        maven {                              // NEW\n            url \"https://maven.google.com\"   // NEW\n        }                                    // NEW\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing C++ Windows Runtime via NuGet\nDESCRIPTION: Executes NuGet to install the Microsoft Windows C++ Windows Runtime package with the specified version. Outputs to the packages directory and verifies the installation succeeded.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/local_auth/local_auth_windows/windows/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nexecute_process(COMMAND\n    ${NUGET} install Microsoft.Windows.CppWinRT -Version ${CPPWINRT_VERSION} -OutputDirectory packages\n    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}\n    RESULT_VARIABLE ret)\nif (NOT ret EQUAL 0)\n    message(FATAL_ERROR \"Failed to install nuget package Microsoft.Windows.CppWinRT.${CPPWINRT_VERSION}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation and Bundle Creation for Flutter Application\nDESCRIPTION: Sets up the installation process for the Flutter application, including creating a bundle directory, copying necessary files and libraries, and handling asset installation.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/two_dimensional_scrollables/example/linux/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Testing SVG Asset with BytesLoader in Flutter\nDESCRIPTION: Example demonstrating how to find SVG images in widget tests by matching their BytesLoader. Uses a fake asset bundle and SvgPicture.asset to load and test SVG rendering.\nSOURCE: https://github.com/flutter/packages/blob/main/third_party/packages/flutter_svg_test/README.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\ntestWidgets('asset svg', (WidgetTester widgetTester) async {\n  final SvgPicture asset = SvgPicture.asset('test/flutter_logo.svg');\n  await widgetTester.pumpWidget(\n    DefaultAssetBundle(\n      bundle: _FakeAssetBundle(),\n      child: asset,\n    ),\n  );\n\n  expect(find.svg(asset.bytesLoader), findsOneWidget);\n});\n```\n\n----------------------------------------\n\nTITLE: Project Title Declaration in Markdown\nDESCRIPTION: The root level markdown heading declaring the example project name for Google Maps Flutter plugin.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_maps_flutter/google_maps_flutter/example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# google_maps_flutter_example\n```\n\n----------------------------------------\n\nTITLE: Converting SVG to Canvas or Image in Flutter\nDESCRIPTION: Shows how to render an SVG to a canvas or convert it to an image. This snippet demonstrates loading an SVG string and drawing it to a canvas or converting it to a ui.Image.\nSOURCE: https://github.com/flutter/packages/blob/main/third_party/packages/flutter_svg/README.md#2025-04-22_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:ui' as ui;\n\n// ···\n  const String rawSvg = '''<svg ...>...</svg>''';\n  final PictureInfo pictureInfo =\n      await vg.loadPicture(const SvgStringLoader(rawSvg), null);\n\n  // You can draw the picture to a canvas:\n  canvas.drawPicture(pictureInfo.picture);\n\n  // Or convert the picture to an image:\n  final ui.Image image = await pictureInfo.picture.toImage(width, height);\n\n  pictureInfo.picture.dispose();\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Web App Command\nDESCRIPTION: Command to run the Flutter application in Chrome browser for testing purposes.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pointer_interceptor/pointer_interceptor_web/example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflutter run -d chrome\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings for Flutter Project\nDESCRIPTION: Creates a function to apply standard compilation settings to targets, including C++17 support, warning levels, and exception handling configuration.\nSOURCE: https://github.com/flutter/packages/blob/main/third_party/packages/flutter_svg/example/windows/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Implementing Rewarded Ad in Flutter\nDESCRIPTION: Shows the implementation of rewarded ads with callback handlers for various ad states including before reward, ad viewed, dismissed, and completion.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_adsense/doc/h5.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nh5GamesAds.adBreak(\n  AdBreakPlacement.rewarded(\n    name: 'test-rewarded-ad',\n    beforeReward: _beforeReward,\n    adViewed: _adViewed,\n    adDismissed: _adDismissed,\n    afterAd: _afterAd,\n    adBreakDone: _rewardedBreakDone,\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Over-Scroll Mode in Android WebView\nDESCRIPTION: Adds support for configuring the over-scroll mode in the Android WebView.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/webview_flutter/webview_flutter_android/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n## 4.4.0\n\n* Adds support to set the over-scroll mode for the WebView. See `AndroidWebViewController.setOverScrollMode`.\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirection Callback in Flutter with go_router\nDESCRIPTION: This code snippet demonstrates how to implement a redirection callback using the go_router package in Flutter. It checks if the user is signed in and redirects to the sign-in page if not authenticated.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/doc/redirection.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nredirect: (BuildContext context, GoRouterState state) {\n  if (!AuthState.of(context).isSignedIn) {\n    return '/signin';\n  } else {\n    return null;\n  }   \n},\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter App Wrapper Library in CMake\nDESCRIPTION: Configures the Flutter wrapper application library with core and app-specific sources. Establishes necessary build settings and dependencies for the Flutter runner application.\nSOURCE: https://github.com/flutter/packages/blob/main/third_party/packages/flutter_svg/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: List Prepend Function in CMake\nDESCRIPTION: Helper function that prepends a prefix to each element in a list. Provides functionality similar to list(TRANSFORM ... PREPEND ...) for CMake versions below 3.10.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_image/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Using Placeholder for Network SVG in Flutter\nDESCRIPTION: Demonstrates how to use a placeholder widget while loading an SVG from a network source. This example shows a CircularProgressIndicator during the loading process.\nSOURCE: https://github.com/flutter/packages/blob/main/third_party/packages/flutter_svg/README.md#2025-04-22_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal Widget networkSvg = SvgPicture.network(\n  'https://site-that-takes-a-while.com/image.svg',\n  semanticsLabel: 'A shark?!',\n  placeholderBuilder: (BuildContext context) => Container(\n      padding: const EdgeInsets.all(30.0),\n      child: const CircularProgressIndicator()),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing List Prepend Function in CMake\nDESCRIPTION: Defines a custom function to prepend a prefix to all elements in a list. This function provides functionality similar to list(TRANSFORM) which isn't available in CMake 3.10.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/example/app/linux/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: List Prepend Function in CMake\nDESCRIPTION: Utility function that prepends a prefix to each element in a list. Serves as a replacement for list(TRANSFORM ... PREPEND ...) for CMake 3.10 compatibility.\nSOURCE: https://github.com/flutter/packages/blob/main/third_party/packages/flutter_svg/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Displaying Interstitial Ad in Flutter\nDESCRIPTION: Demonstrates how to display an interstitial ad using the adBreak method with appropriate placement parameters and break type configuration.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_adsense/doc/h5.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nh5GamesAds.adBreak(\n  AdBreakPlacement.interstitial(\n    type: BreakType.browse,\n    name: 'test-interstitial-ad',\n    adBreakDone: _interstitialBreakDone,\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Flutter Tool Backend Build Command\nDESCRIPTION: Custom build command that runs the Flutter tool backend for linux-x64 platform, generating necessary library files and headers.\nSOURCE: https://github.com/flutter/packages/blob/main/third_party/packages/flutter_svg/example/linux/flutter/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      linux-x64 ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Workspace for Asset Management in Flutter iOS Projects\nDESCRIPTION: Command to open the iOS Runner workspace in Xcode for managing launch screen assets through the Xcode interface. This allows developers to use Xcode's visual asset management tools to replace or modify launch screen images.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/pigeon/platform_tests/test_plugin/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter App Wrapper Library\nDESCRIPTION: Creates and configures the static library for Flutter application wrapper, including core implementations and app-specific sources.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/image_picker/image_picker/example/windows/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Package Import Configuration in pubspec.yaml\nDESCRIPTION: Instructions for adding the url_launcher_ios package as a direct dependency when using its APIs directly, though not necessary when using the main url_launcher package due to its endorsed status.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher_ios/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\npubspec.yaml\n```\n\n----------------------------------------\n\nTITLE: Loading Precompiled SVG in Flutter\nDESCRIPTION: Demonstrates how to load a precompiled SVG file using the vector_graphics package. This approach can improve performance by using a binary format that is faster to parse.\nSOURCE: https://github.com/flutter/packages/blob/main/third_party/packages/flutter_svg/README.md#2025-04-22_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:vector_graphics/vector_graphics.dart';\n// ···\n  const Widget svg = SvgPicture(AssetBytesLoader('assets/foo.svg.vec'));\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter Application\nDESCRIPTION: Sets up the basic CMake project configuration, including project name, language, and binary name. It also configures the install RPATH and sets CMake policies.\nSOURCE: https://github.com/flutter/packages/blob/main/third_party/packages/flutter_svg/example/windows/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(example LANGUAGES CXX)\n\nset(BINARY_NAME \"example\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Importing url_launcher_windows Package in Flutter\nDESCRIPTION: This snippet demonstrates how to include the url_launcher_windows package in a Flutter project's pubspec.yaml file. It's necessary only if you need to directly import and use the package's APIs.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/url_launcher/url_launcher_windows/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  url_launcher_windows: ^latest_version\n```\n\n----------------------------------------\n\nTITLE: Colorizing SVG Asset in Flutter\nDESCRIPTION: Shows how to apply a color filter to an SVG image. This example tints the SVG with a red color using ColorFilter.mode.\nSOURCE: https://github.com/flutter/packages/blob/main/third_party/packages/flutter_svg/README.md#2025-04-22_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nconst String assetName = 'assets/simple/dash_path.svg';\nfinal Widget svgIcon = SvgPicture.asset(\n  assetName,\n  colorFilter: const ColorFilter.mode(Colors.red, BlendMode.srcIn),\n  semanticsLabel: 'Red dash paths',\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter Application\nDESCRIPTION: Sets up the CMake project with minimum version, project name, and language. Defines the binary name and application ID for the Flutter project.\nSOURCE: https://github.com/flutter/packages/blob/main/third_party/packages/flutter_svg/example/linux/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\nset(BINARY_NAME \"example\")\nset(APPLICATION_ID \"io.flutter.plugins.fluttersvgexample\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Copyright and License Notice for Flutter Packages\nDESCRIPTION: Standard BSD-style license header used across Flutter package files. Specifies copyright ownership by Flutter Authors and references the full license in LICENSE file.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/quick_actions/quick_actions_android/pigeons/copyright.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright 2013 The Flutter Authors. All rights reserved.\nUse of this source code is governed by a BSD-style license that can be\nfound in the LICENSE file.\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter and System Dependencies\nDESCRIPTION: Adds the Flutter managed directory, includes Flutter build rules, and finds system-level dependencies like GTK.\nSOURCE: https://github.com/flutter/packages/blob/main/third_party/packages/flutter_svg/example/linux/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Launch Mode for Android Activity\nDESCRIPTION: Sets the launch mode of an Android activity to 'singleInstance' in the AndroidManifest.xml file. This configuration is useful for handling multiple quick action shortcuts correctly.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/quick_actions/quick_actions_android/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<activity\n        ...\n        android:launchMode=\"singleInstance\">\n```\n\n----------------------------------------\n\nTITLE: Building and Copying DevTools Extension Assets\nDESCRIPTION: Shell commands to build the DevTools extension and move the assets to the shared_preferences package. This is part of the publishing workflow for the extension.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences_tool/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd shared_preferences_tool;\nflutter pub get;\ndart run devtools_extensions build_and_copy --source=. --dest=../shared_preferences/extension/devtools\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Dependencies in CMake\nDESCRIPTION: Sets up library dependencies and include directories for the Flutter Windows application. Links against Flutter core libraries and includes necessary header paths.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector/example/windows/runner/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Updating Minimum Supported SDK Version (Flutter/Dart)\nDESCRIPTION: Updates the minimum supported SDK version for Flutter and Dart. This ensures that the package is compatible with the latest Flutter and Dart features.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/espresso/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n* Updates minimum supported SDK version to Flutter 3.24/Dart 3.5.\n```\n\n----------------------------------------\n\nTITLE: Updating Espresso Dependencies in Gradle (Android)\nDESCRIPTION: Updates the versions of Espresso-related dependencies in the Android build configuration. This includes androidx.test.espresso and androidx.test libraries.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/espresso/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n* Updates androidx.test.espresso version to 3.6.1.\n* Updates androidx.test to 1.6.1.\n* Removes androidx.test.annotation.ExperimentalTestApi.\n```\n\n----------------------------------------\n\nTITLE: Updating Java Compatibility Version\nDESCRIPTION: Sets the Java compatibility version for the project. This ensures that the code is compatible with a specific Java version and can use its features.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/espresso/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n* Updates Java compatibility version to 11.\n```\n\n----------------------------------------\n\nTITLE: Running Flutter DevTools Extension Locally\nDESCRIPTION: Command to run the shared_preferences_tool project locally in Chrome with simulated environment. This allows developers to test the DevTools extension.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences_tool/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflutter run -d chrome --dart-define=use_simulated_environment=true\n```\n\n----------------------------------------\n\nTITLE: Running Native Tests\nDESCRIPTION: Examples of running native tests for different platforms with various configurations\nSOURCE: https://github.com/flutter/packages/blob/main/script/tool/README.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n# Run just unit tests for iOS and Android:\ndart run script/tool/bin/flutter_plugin_tools.dart native-test --ios --android --no-integration --packages package_name\n# Run all tests for macOS:\ndart run script/tool/bin/flutter_plugin_tools.dart native-test --macos --packages package_name\n# Run all tests for Windows:\ndart run script/tool/bin/flutter_plugin_tools.dart native-test --windows --packages package_name\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Project for Flutter iOS Assets\nDESCRIPTION: Command to open the Xcode workspace for a Flutter project's iOS component, allowing for visual management of launch screen assets.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_maps_flutter/google_maps_flutter_ios/example/ios14/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Modifying Constructor in Markdown\nDESCRIPTION: This snippet shows the modification of XTypeGroup's constructor to be constant in version 2.2.0 of the package.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_platform_interface/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n## 2.2.0\n\n* Makes `XTypeGroup`'s constructor constant.\n```\n\n----------------------------------------\n\nTITLE: Basic Project Configuration in CMake\nDESCRIPTION: Initial CMake setup including project name, binary name, and basic build policies.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_markdown/example/windows/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(flutter_markdown_example LANGUAGES CXX)\n\nset(BINARY_NAME \"flutter_markdown_example\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Workspace Command\nDESCRIPTION: Terminal command to open the Flutter project's Xcode workspace for modifying launch screen assets through the Xcode interface.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/camera/camera_avfoundation/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Project Workspace Command\nDESCRIPTION: Terminal command to open the Flutter project's Xcode workspace for customizing launch screen assets through the Xcode interface\nSOURCE: https://github.com/flutter/packages/blob/main/packages/animations/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Workspace for Flutter iOS Project\nDESCRIPTION: Command to open the iOS project workspace in Xcode for customizing launch screen assets through the Xcode interface.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/flutter_adaptive_scaffold/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Importing H5 Games Ads Client in Dart\nDESCRIPTION: Shows how to import the H5 Games Ads client library for use in a Flutter web application.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/google_adsense/doc/h5.md#2025-04-22_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:google_adsense/h5.dart';\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies\nDESCRIPTION: Command to update a pub dependency to a new version across multiple packages\nSOURCE: https://github.com/flutter/packages/blob/main/script/tool/README.md#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ndart run script/tool/bin/flutter_plugin_tools.dart update-dependency \\\n  --pub-package=some_package \\\n  --version=3.0.0 \\\n```\n\n----------------------------------------\n\nTITLE: Implementing Type-Safe Navigation\nDESCRIPTION: Example of navigating to a route using type-safe GoRouteData object\nSOURCE: https://github.com/flutter/packages/blob/main/packages/go_router/doc/type-safe-routes.md#2025-04-22_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nTextButton(\n  onPressed: () {\n    const SongRoute(id: 2).go(context);\n  },\n  child: const Text('Go to song 2'),\n),\n```\n\n----------------------------------------\n\nTITLE: Opening Flutter Project in Xcode\nDESCRIPTION: Command to open the Flutter project's Xcode workspace for customizing launch screen assets.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/file_selector/file_selector_ios/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Opening Flutter Project in Xcode\nDESCRIPTION: Command to open the Flutter project's Xcode workspace for modifying launch screen assets.\nSOURCE: https://github.com/flutter/packages/blob/main/packages/shared_preferences/shared_preferences/example/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests\nDESCRIPTION: Commands to build and run integration tests for Android platform\nSOURCE: https://github.com/flutter/packages/blob/main/script/tool/README.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ndart run script/tool/bin/flutter_plugin_tools.dart build-examples --apk --packages package_name\ndart run script/tool/bin/flutter_plugin_tools.dart drive-examples --android --packages package_name\n```\n\n----------------------------------------\n\nTITLE: Formatting Code with Flutter Plugin Tools\nDESCRIPTION: Command to format code for specified packages using clang version 15.0.0\nSOURCE: https://github.com/flutter/packages/blob/main/script/tool/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndart run script/tool/bin/flutter_plugin_tools.dart format --packages package_name\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 2.1.0\nDESCRIPTION: Exposes the colorMapper parameter in SvgPicture constructors.\nSOURCE: https://github.com/flutter/packages/blob/main/third_party/packages/flutter_svg/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.1.0\n\n* Exposes `colorMapper` in `SvgPicture` constructors.\n```\n\n----------------------------------------\n\nTITLE: Version Entry for 2.0.17\nDESCRIPTION: Implements the errorBuilder callback functionality.\nSOURCE: https://github.com/flutter/packages/blob/main/third_party/packages/flutter_svg/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.0.17\n\n* Implement errorBuilder callback\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Plugin Tools\nDESCRIPTION: Basic command to run the Flutter Plugin Tools with arguments\nSOURCE: https://github.com/flutter/packages/blob/main/script/tool/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndart run script/tool/bin/flutter_plugin_tools.dart <args>\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Plugin Tools\nDESCRIPTION: Setup instructions for installing the Flutter Plugin Tools in the repository\nSOURCE: https://github.com/flutter/packages/blob/main/script/tool/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd script/tool && dart pub get && cd ../../\n```"
  }
]