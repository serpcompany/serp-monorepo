[
  {
    "owner": "dropwizard",
    "repo": "dropwizard",
    "content": "TITLE: Configuring Basic Authentication in Dropwizard\nDESCRIPTION: Setup for HTTP Basic Authentication in a Dropwizard application. This registers the necessary authentication filter, authorizer, and role-based access control in the Jersey environment.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/auth.rst#2025-04-18_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void run(ExampleConfiguration configuration,\n                Environment environment) {\n    environment.jersey().register(new AuthDynamicFeature(\n            new BasicCredentialAuthFilter.Builder<User>()\n                .setAuthenticator(new ExampleAuthenticator())\n                .setAuthorizer(new ExampleAuthorizer())\n                .setRealm(\"SUPER SECRET STUFF\")\n                .buildAuthFilter()));\n    environment.jersey().register(RolesAllowedDynamicFeature.class);\n    //If you want to use @Auth to inject a custom Principal type into your resource\n    environment.jersey().register(new AuthValueFactoryProvider.Binder<>(User.class));\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Query Parameters in Dropwizard\nDESCRIPTION: Demonstrates validating a query parameter with the @NotEmpty annotation to ensure it's not null or empty. When validation fails, Dropwizard returns a 400 Bad Request response.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/validation.rst#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@GET\npublic String find(@QueryParam(\"name\") @NotEmpty String arg) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Dropwizard Environment in the Run Method\nDESCRIPTION: Java code example showing how to set up resources, health checks, and other components in a Dropwizard application's run method.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n    @Override\n    public void run(ExampleConfiguration config,\n                    Environment environment) {\n        // encapsulate complicated setup logic in factories\n        final Thingy thingy = config.getThingyFactory().build();\n\n        environment.jersey().register(new ThingyResource(thingy));\n        environment.healthChecks().register(\"thingy\", new ThingyHealthCheck(thingy));\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a Dropwizard Configuration Class in Java\nDESCRIPTION: This snippet shows a configuration class that extends Dropwizard's Configuration class. It defines template and defaultName fields with validation annotations to process application configuration from a YAML file.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/getting-started.rst#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class HelloWorldConfiguration extends Configuration {\n    @NotEmpty\n    private String template;\n\n    @NotEmpty\n    private String defaultName = \"Stranger\";\n\n    @JsonProperty\n    public String getTemplate() {\n        return template;\n    }\n\n    @JsonProperty\n    public void setTemplate(String template) {\n        this.template = template;\n    }\n\n    @JsonProperty\n    public String getDefaultName() {\n        return defaultName;\n    }\n\n    @JsonProperty\n    public void setDefaultName(String name) {\n        this.defaultName = name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Authentication Schemes in Dropwizard\nDESCRIPTION: Implementation of both OAuth and Basic authentication using PolymorphicAuthDynamicFeature. Maps different principal types to different authentication filters, allowing resources to use different authentication schemes.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/auth.rst#2025-04-18_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nfinal AuthFilter<BasicCredentials, BasicPrincipal> basicFilter\n        = new BasicCredentialAuthFilter.Builder<BasicPrincipal>()\n                .setAuthenticator(new ExampleAuthenticator())\n                .setRealm(\"SUPER SECRET STUFF\")\n                .buildAuthFilter());\nfinal AuthFilter<String, OAuthPrincipal> oauthFilter\n        = new OAuthCredentialAuthFilter.Builder<OAuthPrincipal>()\n                .setAuthenticator(new ExampleOAuthAuthenticator())\n                .setPrefix(\"Bearer\")\n                .buildAuthFilter());\n\nfinal PolymorphicAuthDynamicFeature feature = new PolymorphicAuthDynamicFeature<>(\n    ImmutableMap.of(\n        BasicPrincipal.class, basicFilter,\n        OAuthPrincipal.class, oauthFilter));\nfinal AbstractBinder binder = new PolymorphicAuthValueFactoryProvider.Binder<>(\n    ImmutableSet.of(BasicPrincipal.class, OAuthPrincipal.class));\n\nenvironment.jersey().register(feature);\nenvironment.jersey().register(binder);\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running Dropwizard Application in Java\nDESCRIPTION: This snippet shows the core of the Dropwizard startup sequence, including bootstrapping, command registration, and CLI initialization. It demonstrates how the application is set up and run.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/internals.rst#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic void run(String... arguments) throws Exception {\n\n  final Bootstrap<T> bootstrap = new Bootstrap<>(this);\n  bootstrap.addCommand(new ServerCommand<>(this));\n  bootstrap.addCommand(new CheckCommand<>(this));\n\n  initialize(bootstrap); // -- implemented by you; it should call:\n    // 1. add bundles (typically being used)\n    // 2. add commands (if any)\n  \n  // Should be called after `initialize` to give an opportunity to set a custom metric registry\n  bootstrap.registerMetrics(); // start tracking some default jvm paramsâ€¦\n\n  // for each cmd, configure parser w/ cmd\n  final Cli cli = new Cli(new JarLocation(getClass()), bootstrap, our, err)\n  cli.run(arguments); \n}\n```\n\n----------------------------------------\n\nTITLE: Initializing JDBI3 in Dropwizard Service\nDESCRIPTION: Shows how to initialize a JDBI instance in a Dropwizard service's run method using JdbiFactory and environment configuration.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/jdbi3.rst#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void run(ExampleConfiguration config, Environment environment) {\n    final JdbiFactory factory = new JdbiFactory();\n    final Jdbi jdbi = factory.build(environment, config.getDataSourceFactory(), \"postgresql\");\n    environment.jersey().register(new UserResource(jdbi));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Jersey Request Filter in Dropwizard\nDESCRIPTION: A Jersey ContainerRequestFilter implementation that checks for the presence of a Date header in the request, throwing a WebApplicationException if it's missing. This demonstrates how to filter inbound requests in Dropwizard using Jersey's filter API.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_63\n\nLANGUAGE: java\nCODE:\n```\n@Provider\npublic class DateNotSpecifiedFilter implements ContainerRequestFilter {\n    @Override\n    public void filter(ContainerRequestContext requestContext) throws IOException {\n        String dateHeader = requestContext.getHeaderString(HttpHeaders.DATE);\n\n        if (dateHeader == null) {\n            Exception cause = new IllegalArgumentException(\"Date Header was not specified\");\n            throw new WebApplicationException(cause, Response.Status.BAD_REQUEST);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Request Entities with @Valid\nDESCRIPTION: Demonstrates how to validate an entire entity object with @Valid annotation. The @NotNull ensures the entity itself isn't null, while @Valid ensures properties within the entity are validated.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/validation.rst#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@PUT\npublic Person replace(@NotNull @Valid Person person) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic RESTful Resource Class Implementation in Dropwizard\nDESCRIPTION: Java code example showing how to implement a basic RESTful resource in Dropwizard. Illustrates the use of annotations for path, media type, parameter extraction, and default values.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_43\n\nLANGUAGE: java\nCODE:\n```\n@Path(\"/{user}/notifications\")\n@Produces(MediaType.APPLICATION_JSON)\n@Consumes(MediaType.APPLICATION_JSON)\npublic class NotificationsResource {\n    private final NotificationStore store;\n\n    public NotificationsResource(NotificationStore store) {\n        this.store = store;\n    }\n\n    @GET\n    public NotificationList fetch(@PathParam(\"user\") OptionalLong userId,\n                                  @QueryParam(\"count\") @DefaultValue(\"20\") OptionalInt count) {\n        final List<Notification> notifications = store.fetch(userId.get(), count.get());\n        if (notifications != null) {\n```\n\n----------------------------------------\n\nTITLE: Testing Validation Constraints in Dropwizard\nDESCRIPTION: Demonstrates how to test validation constraints by sending invalid data to an endpoint and verifying the error response. The test checks both the HTTP status code (422) and the validation error message content.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/validation.rst#2025-04-18_snippet_15\n\nLANGUAGE: java\nCODE:\n```\n@Test\npublic void personNeedsAName() {\n    // Tests what happens when a person with a null name is sent to\n    // the endpoint.\n    final Response post = resources.target(\"/person/v1\").request()\n            .post(Entity.json(new Person(null)));\n\n    // Clients will receive a 422 on bad request entity\n    assertThat(post.getStatus()).isEqualTo(422);\n\n    // Check to make sure that errors are correct and human readable\n    ValidationErrorMessage msg = post.readEntity(ValidationErrorMessage.class);\n    assertThat(msg.getErrors())\n            .containsOnly(\"name may not be empty\");\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing HibernateBundle in a Dropwizard Application\nDESCRIPTION: Demonstrates how to add a HibernateBundle to a Dropwizard application class, specifying entity classes and retrieving the DataSourceFactory from the configuration. Also shows how to create and register DAOs and resources.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/hibernate.rst#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nprivate final HibernateBundle<ExampleConfiguration> hibernate = new HibernateBundle<ExampleConfiguration>(Person.class) {\n    @Override\n    public DataSourceFactory getDataSourceFactory(ExampleConfiguration configuration) {\n        return configuration.getDataSourceFactory();\n    }\n};\n\n@Override\npublic void initialize(Bootstrap<ExampleConfiguration> bootstrap) {\n    bootstrap.addBundle(hibernate);\n}\n\n@Override\npublic void run(ExampleConfiguration config, Environment environment) {\n    final PersonDAO dao = new PersonDAO(hibernate.getSessionFactory());\n    environment.jersey().register(new UserResource(dao));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GET and POST Methods in Dropwizard Resource Class\nDESCRIPTION: This snippet shows the implementation of GET and POST methods in a Dropwizard resource class. It demonstrates path parameter handling, response generation, and request entity processing with validation.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_44\n\nLANGUAGE: java\nCODE:\n```\nreturn new NotificationList(userId, notifications);\n}\nthrow new WebApplicationException(Status.NOT_FOUND);\n}\n\n@POST\npublic Response add(@PathParam(\"user\") OptionalLong userId,\n                    @NotNull @Valid Notification notification) {\n    final long id = store.add(userId.get(), notification);\n    return Response.created(UriBuilder.fromResource(NotificationResource.class)\n                                      .build(userId.get(), id))\n                   .build();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Database Health Check in Dropwizard\nDESCRIPTION: Java implementation of a health check that verifies database connectivity in a Dropwizard application.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_13\n\nLANGUAGE: java\nCODE:\n```\n    :language: java\n    :start-after: // core: DatabaseHealthCheck\n    :end-before: // core: DatabaseHealthCheck\n```\n\n----------------------------------------\n\nTITLE: Database Testing with DAOTestExtension\nDESCRIPTION: Shows how to test database interactions using DAOTestExtension to setup a test database environment.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/testing.rst#2025-04-18_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n@ExtendWith(DropwizardExtensionsSupport.class)\npublic class DatabaseTest {\n\n    public DAOTestExtension database = DAOTestExtension.newBuilder().addEntityClass(FooEntity.class).build();\n\n    private FooDAO fooDAO;\n\n    @BeforeEach\n    public void setUp() {\n        fooDAO = new FooDAO(database.getSessionFactory());\n    }\n\n    @Test\n    public void createsFoo() {\n        FooEntity fooEntity = new FooEntity(\"bar\");\n        long id = database.inTransaction(() -> {\n            return fooDAO.save(fooEntity);\n        });\n\n        assertThat(fooEntity.getId, notNullValue());\n    }\n\n    @Test\n    public void roundtripsFoo() {\n        long id = database.inTransaction(() -> {\n            return fooDAO.save(new FooEntity(\"baz\"));\n        });\n\n        FooEntity fooEntity = fooDAO.get(id);\n\n        assertThat(fooEntity.getFoo(), equalTo(\"baz\"));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Environment Variable Substitution\nDESCRIPTION: Code for setting up environment variable substitution in a Dropwizard application, allowing configuration values to be sourced from environment variables.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void initialize(Bootstrap<ExampleConfiguration> bootstrap) {\n    // Enable variable substitution with environment variables\n    bootstrap.setConfigurationSourceProvider(\n            new SubstitutingSourceProvider(bootstrap.getConfigurationSourceProvider(),\n                                          new EnvironmentVariableSubstitutor(false)\n            )\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Protected Resources with OAuth Authentication in Dropwizard\nDESCRIPTION: Example test method demonstrating how to test a protected resource using OAuth Bearer token authentication. Sets the Authorization header manually with the Bearer token.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/auth.rst#2025-04-18_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n@Test\npublic void testProtected() throws Exception {\n    final Response response = resourceExtension.target(\"/protected\")\n            .request(MediaType.APPLICATION_JSON_TYPE)\n            .header(\"Authorization\", \"Bearer TOKEN\")\n            .get();\n\n    assertThat(response.getStatus()).isEqualTo(200);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dependency Injection Configuration in Dropwizard\nDESCRIPTION: This code defines interfaces and classes to configure dependency injection in a Dropwizard application. It includes a DependencyInjectionConfiguration interface, a NamedProperty class for named bindings, and extends the standard Configuration class to implement these interfaces.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/di.rst#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface DependencyInjectionConfiguration {\n    List<Class<?>> getSingletons();\n    List<NamedProperty<? extends Object>> getNamedProperties();\n}\n\npublic class NamedProperty<T> {\n    private final String id;\n    private final T value;\n    private final Class<T> clazz;\n\n    @JsonCreator\n    public NamedProperty(@JsonProperty(\"id\") String id, @JsonProperty(\"value\") T value, @JsonProperty(\"clazz\") Class<T> clazz) {\n        this.id = id;\n        this.value = value;\n        this.clazz = clazz;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public T getValue() {\n        return value;\n    }\n\n    public Class<T> getClazz() {\n        return clazz;\n    }\n}\n\npublic class ExampleConfiguration extends Configuration implements DependencyInjectionConfiguration {\n\n    protected Class<?> getUserRepository() {\n        return UserRepository.class;\n    }\n\n    @Override\n    public List<Class<?>> getSingletons() {\n        final List<Class<?>> result = new ArrayList();\n        result.add(getUserRepository());\n        result.add(UserResource.class);\n\n        return result;\n    }\n\n    @Override\n    public List<NamedProperty<? extends Object>> getNamedProperties() {\n        final List<NamedProperty<? extends Object>> result = new ArrayList<>();\n        result.add(new NamedProperty<>(\"dbUser\", \"dummy_db_user\", String.class));\n\n        return result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Configuration in YAML for Dropwizard Hibernate\nDESCRIPTION: Shows how to configure the database connection properties in a Dropwizard YAML configuration file. Includes settings for the JDBC driver, credentials, connection pooling, and validation queries.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/hibernate.rst#2025-04-18_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n  # the name of your JDBC driver\n  driverClass: org.postgresql.Driver\n\n  # the username\n  user: pg-user\n\n  # the password\n  password: iAMs00perSecrEET\n\n  # the JDBC URL\n  url: jdbc:postgresql://db.example.com/db-prod\n\n  # any properties specific to your JDBC driver:\n  properties:\n    charSet: UTF-8\n    hibernate.dialect: org.hibernate.dialect.PostgreSQLDialect\n\n  # the maximum amount of time to wait on an empty pool before throwing an exception\n  maxWaitForConnection: 1s\n\n  # the SQL query to run when validating a connection's liveness\n  validationQuery: \"/* MyApplication Health Check */ SELECT 1\"\n\n  # the minimum number of connections to keep open\n  minSize: 8\n\n  # the maximum number of connections to keep open\n  maxSize: 32\n\n  # whether or not idle connections should be validated\n  checkConnectionWhileIdle: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Chained Authentication in Dropwizard\nDESCRIPTION: Implementation of chained authentication that supports multiple authentication strategies simultaneously. This example combines Basic Authentication and OAuth2 to handle different types of client credentials.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/auth.rst#2025-04-18_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void run(ExampleConfiguration configuration,\n                Environment environment) {\n    AuthFilter basicCredentialAuthFilter = new BasicCredentialAuthFilter.Builder<>()\n            .setAuthenticator(new ExampleBasicAuthenticator())\n            .setAuthorizer(new ExampleAuthorizer())\n            .setPrefix(\"Basic\")\n            .buildAuthFilter();\n\n    AuthFilter oauthCredentialAuthFilter = new OAuthCredentialAuthFilter.Builder<>()\n            .setAuthenticator(new ExampleOAuthAuthenticator())\n            .setAuthorizer(new ExampleAuthorizer())\n            .setPrefix(\"Bearer\")\n            .buildAuthFilter();\n\n    List<AuthFilter> filters = Lists.newArrayList(basicCredentialAuthFilter, oauthCredentialAuthFilter);\n    environment.jersey().register(new AuthDynamicFeature(new ChainedAuthFilter(filters)));\n    environment.jersey().register(RolesAllowedDynamicFeature.class);\n    //If you want to use @Auth to inject a custom Principal type into your resource\n    environment.jersey().register(new AuthValueFactoryProvider.Binder<>(User.class));\n}\n```\n\n----------------------------------------\n\nTITLE: Using Different Authentication Schemes for Different Resources\nDESCRIPTION: Example resource methods demonstrating the use of different principal types with @Auth annotation. Each method uses a different authentication scheme based on the principal type.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/auth.rst#2025-04-18_snippet_16\n\nLANGUAGE: java\nCODE:\n```\n@GET\npublic Response basicAuthResource(@Auth BasicPrincipal principal) {}\n\n@GET\npublic Response oauthResource(@Auth OAuthPrincipal principal) {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authorization with Multiple Authentication Schemes\nDESCRIPTION: Example of configuring authorization with multiple authentication schemes by setting authorizers and registering RolesAllowedDynamicFeature. Shows how to add role-based access control to resources.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/auth.rst#2025-04-18_snippet_17\n\nLANGUAGE: java\nCODE:\n```\n... = new BasicCredentialAuthFilter.Builder<BasicPrincipal>()\n        .setAuthorizer(new ExampleAuthorizer())..  // set authorizer\n\n... = new OAuthCredentialAuthFilter.Builder<OAuthPrincipal>()\n        .setAuthorizer(new ExampleAuthorizer())..  // set authorizer\n\nenvironment.jersey().register(RolesAllowedDynamicFeature.class);\n```\n\n----------------------------------------\n\nTITLE: Implementing Health State Listener in Dropwizard\nDESCRIPTION: Shows how to create and register a health state listener to monitor health check state changes.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_19\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void run(final AppConfiguration configuration, final Environment environment) {\n    ...\n    HealthStateListener myListener = new HealthStateListener() {\n        @Override\n        public void onStateChanged(String healthCheckName, boolean healthy) {\n            System.out.println(healthCheckName + \"changed state to \" + healthy);\n        }\n\n        @Override\n        public void onHealthyCheck(String healthCheckName) {\n            System.out.println(healthCheckName + \"is healthy! :)\");\n        }\n\n        @Override\n        public void onUnhealthyCheck(String healthCheckName) {\n            System.out.println(healthCheckName + \"is unhealthy! :(\");\n        }\n    };\n    environment.health().addHealthStateListener(myListener);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authorizer Interface in Java for Dropwizard\nDESCRIPTION: Example implementation of the Authorizer interface that determines if a user has access to a specific role. This authorizer grants ADMIN access only to a user named 'good-guy'.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/auth.rst#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleAuthorizer implements Authorizer<User> {\n    @Override\n    public boolean authorize(User user, String role) {\n        return user.getName().equals(\"good-guy\") && role.equals(\"ADMIN\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Resources in a Dropwizard Application\nDESCRIPTION: Example of the run method in a Dropwizard Application class, showing how to use a configuration factory to build and register dependencies.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void run(ExampleConfiguration config, Environment environment) {\n    final MessageQueueClient messageQueue = config.getMessageQueueFactory().build(environment);\n    environment.jersey().register(new ExampleResource(messageQueue));\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Servlet Filter in Dropwizard\nDESCRIPTION: Code snippet showing how to register a Servlet filter in a Dropwizard application, including mapping it to specific URL patterns. This is typically done in the Application class's run method.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_67\n\nLANGUAGE: java\nCODE:\n```\nenvironment.servlets().addFilter(\"DateNotSpecifiedServletFilter\", new DateNotSpecifiedServletFilter())\n                      .addMappingForUrlPatterns(EnumSet.of(DispatcherType.REQUEST), true, \"/*\");\n```\n\n----------------------------------------\n\nTITLE: Creating JDBI3 SQL Object Interface\nDESCRIPTION: Example of a JDBI3 SQL Object interface showing table creation, data insertion, and query methods using SQL annotations.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/jdbi3.rst#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic interface MyDAO {\n  @SqlUpdate(\"create table something (id int primary key, name varchar(100))\")\n  void createSomethingTable();\n\n  @SqlUpdate(\"insert into something (id, name) values (:id, :name)\")\n  void insert(@Bind(\"id\") int id, @Bind(\"name\") String name);\n\n  @SqlQuery(\"select name from something where id = :id\")\n  String findNameById(@Bind(\"id\") int id);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Task in Dropwizard\nDESCRIPTION: An example of creating a custom Task that truncates a database. Tasks are run-time actions accessible via HTTP on the admin port. This implementation shows the basic structure of a Task class.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_23\n\nLANGUAGE: java\nCODE:\n```\n// core: TruncateDatabaseTask\n```\n\n----------------------------------------\n\nTITLE: Implementing TCP Health Check in Dropwizard\nDESCRIPTION: Shows how to register a TCP health check in a Dropwizard application's run method for monitoring TCP dependencies.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_17\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void run(final AppConfiguration configuration, final Environment environment) {\n    ...\n    environment.healthChecks().register(\"some-tcp-dependency\", new TcpHealthCheck(\"some-tcp-dependency.com\", 443));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth2 Authentication in Dropwizard\nDESCRIPTION: Setup for OAuth2 bearer token authentication in a Dropwizard application. This registers the necessary OAuth filter, authorizer, and role-based access control in the Jersey environment.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/auth.rst#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void run(ExampleConfiguration configuration,\n                Environment environment) {\n    environment.jersey().register(new AuthDynamicFeature(\n        new OAuthCredentialAuthFilter.Builder<User>()\n            .setAuthenticator(new ExampleOAuthAuthenticator())\n            .setAuthorizer(new ExampleAuthorizer())\n            .setPrefix(\"Bearer\")\n            .buildAuthFilter()));\n    environment.jersey().register(RolesAllowedDynamicFeature.class);\n    //If you want to use @Auth to inject a custom Principal type into your resource\n    environment.jersey().register(new AuthValueFactoryProvider.Binder<>(User.class));\n}\n```\n\n----------------------------------------\n\nTITLE: Using SecurityContext for Resource Protection in Dropwizard\nDESCRIPTION: Alternative approach to access the authenticated principal using the SecurityContext. This method requires ADMIN role access and retrieves the user principal from the security context.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/auth.rst#2025-04-18_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n@RolesAllowed(\"ADMIN\")\n@GET\npublic SecretPlan getSecretPlan(@Context SecurityContext context) {\n    User userPrincipal = (User) context.getUserPrincipal();\n    return dao.findPlanForUser(user);\n}\n```\n\n----------------------------------------\n\nTITLE: Using @Validated Annotation for API Versioning with Different Validation Rules\nDESCRIPTION: Shows how to implement validation groups to support different API versions with different validation rules. The example defines Version1Checks and Version2Checks interfaces and applies them to different endpoints, allowing for graceful API evolution.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/validation.rst#2025-04-18_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n// We're going to create a group of validations for each version of our API\npublic interface Version1Checks { }\n\n// Our second version will extend Hibernate Validator Default class so that any validation\n// annotation without an explicit group will also be validated with this version\npublic interface Version2Checks extends Default { }\n\npublic class Person {\n    @NotEmpty(groups = Version1Checks.class)\n    @Length(max = 5, groups = Version2Checks.class)\n    private String name;\n\n    @JsonCreator\n    public Person(@JsonProperty(\"name\") String name) {\n        this.name = name;\n    }\n\n    @JsonProperty\n    public String getName() {\n        return name;\n    }\n}\n\n@Path(\"/person\")\n@Produces(MediaType.APPLICATION_JSON)\npublic class PersonResource {\n\n    // For the v1 endpoint, we'll validate with the version1 class, so we'll need to change the\n    // group of the NotNull annotation from the default of Default.class to Version1Checks.class\n    @POST\n    @Path(\"/v1\")\n    public void createPersonV1(\n        @NotNull(groups = Version1Checks.class)\n        @Valid\n        @Validated(Version1Checks.class)\n        Person person\n    ) {\n        // implementation ...\n    }\n\n    // For the v2 endpoint, we'll validate with version1 and version2, which implicitly\n    // adds in the Default.class.\n    @POST\n    @Path(\"/v2\")\n    public void createPersonV2(\n        @NotNull\n        @Valid\n        @Validated({Version1Checks.class, Version2Checks.class})\n        Person person\n    ) {\n        // implementation ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Managed Object in Dropwizard\nDESCRIPTION: Example of creating a managed Riak client wrapper that handles lifecycle events.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_20\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void run(final AppConfiguration configuration, final Environment environment) {\n    ExecutorService executor = environment.lifecycle().executorService(\"thread-pool-%d\")\n            .maxThreads(4)\n            .minThreads(1)\n            .keepAliveTime(Duration.seconds(10))\n            .build();\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Health Check in a Dropwizard Application\nDESCRIPTION: Java code showing how to register a database health check with a Dropwizard application's environment.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n    :language: java\n    :start-after: // core: HealthCheckApp#run->DatabaseHealthCheck\n    :end-before: // core: HealthCheckApp#run->DatabaseHealthCheck\n    :dedent: 8\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS in Dropwizard with YAML\nDESCRIPTION: A YAML configuration snippet for enabling HTTPS in a Dropwizard application. This demonstrates the basic SSL configuration pattern.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n    :language: yaml\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Appenders in Dropwizard Logging Configuration\nDESCRIPTION: YAML configuration demonstrating how to combine multiple logging appenders with different thresholds. Includes console and file appenders with various log rotation settings.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nlogging:\n\n  # Permit DEBUG, INFO, WARN and ERROR messages to be logged by appenders.\n  level: DEBUG\n\n  appenders:\n    # Log warnings and errors to stderr\n    - type: console\n      threshold: WARN\n      target: stderr\n\n    # Log info, warnings and errors to our apps' main log.\n    # Rolled over daily and retained for 5 days.\n    - type: file\n      threshold: INFO\n      currentLogFilename: ./logs/example.log\n      archivedLogFilenamePattern: ./logs/example-%d.log.gz\n      archivedFileCount: 5\n\n    # Log debug messages, info, warnings and errors to our apps' debug log.\n    # Rolled over hourly and retained for 6 hours\n    - type: file\n      threshold: DEBUG\n      currentLogFilename: ./logs/debug.log\n      archivedLogFilenamePattern: ./logs/debug-%d{yyyy-MM-dd-hh}.log.gz\n      archivedFileCount: 6\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Access Object (DAO) with AbstractDAO in Dropwizard\nDESCRIPTION: Illustrates how to create a type-safe Data Access Object (DAO) using Dropwizard's AbstractDAO class. Includes methods for finding entities by ID, creating new entities, and listing all entities.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/hibernate.rst#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class PersonDAO extends AbstractDAO<Person> {\n    public PersonDAO(SessionFactory factory) {\n        super(factory);\n    }\n\n    public Person findById(Long id) {\n        return get(id);\n    }\n\n    public long create(Person person) {\n        return persist(person).getId();\n    }\n\n    public List<Person> findAll() {\n        return list(namedTypedQuery(\"com.example.helloworld.core.Person.findAll\"));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MigrationsBundle in Dropwizard\nDESCRIPTION: Shows how to initialize and add the MigrationsBundle to a Dropwizard application, including optional Hibernate integration.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/migrations.rst#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void initialize(Bootstrap<ExampleConfiguration> bootstrap) {\n    bootstrap.addBundle(new MigrationsBundle<ExampleConfiguration>() {\n        @Override\n        public DataSourceFactory getDataSourceFactory(ExampleConfiguration configuration) {\n            return configuration.getDataSourceFactory();\n        }\n\n        @Override\n        public Map<String, Object> getScopedObjects() {\n            Map<String, Object> scopedObjects = new HashMap<>();\n            scopedObjects.put(\"hibernateSessionFactory\", hibernateBundle.getSessionFactory());\n            return scopedObjects;\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Dependency Injection Bundle in Dropwizard\nDESCRIPTION: This code implements a ConfiguredBundle for dependency injection in Dropwizard using HK2. It registers an AbstractBinder that configures singleton classes and named properties from the application configuration.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/di.rst#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class DependencyInjectionBundle implements ConfiguredBundle<DependencyInjectionConfiguration> {\n\n    @Override\n    public void run(DependencyInjectionConfiguration configuration, Environment environment) throws Exception {\n            environment\n                .jersey()\n                .register(\n                    new AbstractBinder() {\n                        @Override\n                        protected void configure() {\n                            for (Class<?> singletonClass : configuration.getSingletons()) {\n                                bindAsContract(singletonClass).in(Singleton.class);\n                            }\n\n                            for (NamedProperty<? extends Object> namedProperty : configuration.getNamedProperties()) {\n                                bind((Object) namedProperty.getValue()).to((Class<Object>) namedProperty.getClazz()).named(namedProperty.getId());\n                            }\n                        }\n                    }\n                );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Validator Outside of Resource Endpoints\nDESCRIPTION: Demonstrates how to access and use the Validator instance directly from the Dropwizard Environment. This is useful for performing validations in non-resource classes like services or background tasks.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/validation.rst#2025-04-18_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nValidator validator = environment.getValidator();\nSet<ConstraintViolation> errors = validator.validate(/* instance of class */)\n```\n\n----------------------------------------\n\nTITLE: Setting up CachingAuthenticator in Dropwizard\nDESCRIPTION: Implementation of a CachingAuthenticator that wraps a SimpleAuthenticator to improve performance by caching authentication results. This helps reduce load on backing data stores like RDBMS or LDAP servers.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/auth.rst#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSimpleAuthenticator simpleAuthenticator = new SimpleAuthenticator();\nCachingAuthenticator<BasicCredentials, User> cachingAuthenticator = new CachingAuthenticator<>(\n                           metricRegistry, simpleAuthenticator,\n                           config.getAuthenticationCachePolicy());\n```\n\n----------------------------------------\n\nTITLE: Adding Dropwizard BOM to Maven Project\nDESCRIPTION: This snippet shows how to add the Dropwizard Bill of Materials (BOM) to the dependencyManagement section of a Maven POM file. This establishes version management for all Dropwizard components.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/getting-started.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>io.dropwizard</groupId>\n            <artifactId>dropwizard-bom</artifactId>\n            <version>${dropwizard.version}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation Constraints in Dropwizard Entity Classes\nDESCRIPTION: Demonstrates various validation annotations in a Person class including @NotEmpty, @OneOf for restricting values, and @Min/@Max with Optional unwrapping. Also shows usage of @ValidationMethod for complex validations that can't be expressed with simple annotations.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/validation.rst#2025-04-18_snippet_13\n\nLANGUAGE: java\nCODE:\n```\npublic class Person {\n    @NotEmpty\n    private final String name;\n\n    @NotEmpty\n    @OneOf(value = {\"m\", \"f\"}, ignoreCase = true, ignoreWhitespace = true)\n    // @OneOf forces a value to value within certain values.\n    private final String gender;\n\n    @Min(value = 0, payload = Unwrapping.Unwrap.class)\n    @Max(value = 10, payload = Unwrapping.Unwrap.class)\n    // The integer contained, if present, can attain a min value of 0 and a max of 10.\n    private final Optional<Integer> animals;\n\n    @JsonCreator\n    public Person(@JsonProperty(\"name\") String name) {\n        this.name = name;\n    }\n\n    @JsonProperty(\"name\")\n    public String getName() {\n        return name;\n    }\n\n    // Method that must return true for the object to be valid\n    @ValidationMethod(message=\"name may not be Coda\")\n    @JsonIgnore\n    public boolean isNotCoda() {\n        return !\"Coda\".equals(name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Validation Error Responses in Dropwizard\nDESCRIPTION: Shows how to customize validation error responses by implementing an ExceptionMapper for JerseyViolationException. This allows applications to provide custom error formats or messages instead of the default validation error response.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/validation.rst#2025-04-18_snippet_16\n\nLANGUAGE: java\nCODE:\n```\n/** Return a generic response depending on if it is a client or server error */\npublic class MyJerseyViolationExceptionMapper implements ExceptionMapper<JerseyViolationException> {\n    @Override\n    public Response toResponse(final JerseyViolationException exception) {\n        final Set<ConstraintViolation<?>> violations = exception.getConstraintViolations();\n        final Invocable invocable = exception.getInvocable();\n        final int status = ConstraintMessage.determineStatus(violations, invocable);\n        return Response.status(status)\n                .type(MediaType.TEXT_PLAIN_TYPE)\n                .entity(status >= 500 ? \"Server error\" : \"Client error\")\n                .build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Jersey Feature in Dropwizard\nDESCRIPTION: Code snippet showing how to register a Jersey feature in a Dropwizard application's environment. This is typically done in the Application class's run method.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_65\n\nLANGUAGE: java\nCODE:\n```\nenvironment.jersey().register(DateRequiredFeature.class);\n```\n\n----------------------------------------\n\nTITLE: Adding Dropwizard Core Dependency to Maven Project\nDESCRIPTION: This snippet demonstrates adding the dropwizard-core library as a dependency to a Maven project. This provides the core functionality needed for a Dropwizard application.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/getting-started.rst#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <dependency>\n        <groupId>io.dropwizard</groupId>\n        <artifactId>dropwizard-core</artifactId>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Workarounds for Parameter Validation Limitations\nDESCRIPTION: Provides workarounds for the limitations in validating parameters, including manual null checking, using @DefaultValue, and moving Optional handling into the method body.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/validation.rst#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@POST\n// Workaround to handle required int params and validations\npublic List<Person> createNum(@QueryParam(\"num\") @Max(3) IntParam num) {\n    if (num == null) {\n        throw new BadRequestException(\"query param num must not be null\");\n    }\n    // ...\n}\n\n@GET\n// Workaround to handle optional int params and validations with DefaultValue\npublic Person retrieve(@QueryParam(\"num\") @DefaultValue(\"0\") @Max(3) IntParam num) {\n    // ...\n}\n\n@GET\n// Workaround to handle optional int params and validations with Optional\npublic Person retrieve2(@QueryParam(\"num\") @Max(3) IntParam num) {\n    Optional.fromNullable(num);\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Role-Based Authorization with Different Authentication Schemes\nDESCRIPTION: Example resource methods with @RolesAllowed annotation for authorization using different principal types. Demonstrates how to restrict access to resources based on user roles with different authentication schemes.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/auth.rst#2025-04-18_snippet_18\n\nLANGUAGE: java\nCODE:\n```\n@GET\n@RolesAllowed({ \"ADMIN\" })\npublic Response baseAuthResource(@Auth BasicPrincipal principal) {}\n\n@GET\n@RolesAllowed({ \"ADMIN\" })\npublic Response oauthResource(@Auth OAuthPrincipal principal) {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics for Dropwizard Resource Methods\nDESCRIPTION: This snippet demonstrates how to configure metrics for resource methods in Dropwizard using annotations like @Timed, @Metered, @ResponseMetered, and @ExceptionMetered. It shows both class-level and method-level metric configurations.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_45\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleApplication extends ResourceConfig {\n    .\n    .\n    .\n    register(new InstrumentedResourceMethodApplicationListener (new MetricRegistry()));\n    config = config.register(ExampleResource.class);\n    .\n    .\n    .\n}\n\n@Path(\"/example\")\n@Produces(MediaType.TEXT_PLAIN)\npublic class ExampleResource {\n    @GET\n    @Timed\n    public String show() {\n        return \"yay\";\n    }\n\n    @GET\n    @Metered(name = \"fancyName\") // If name isn't specified, the meter will given the name of the method it decorates.\n    @Path(\"/metered\")\n    public String metered() {\n        return \"woo\";\n    }\n\n    @GET\n    @ExceptionMetered(cause = IOException.class) // Default cause is Exception.class\n    @Path(\"/exception-metered\")\n    public String exceptionMetered(@QueryParam(\"splode\") @DefaultValue(\"false\") boolean splode) throws IOException {\n        if (splode) {\n            throw new IOException(\"AUGH\");\n        }\n        return \"fuh\";\n    }\n\n    @GET\n    @ResponseMetered\n    @Path(\"/response-metered\")\n    public Response responseMetered(@QueryParam(\"invalid\") @DefaultValue(\"false\") boolean invalid) {\n        if (invalid) {\n            return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();\n        }\n        return Response.ok().build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning a View from a Dropwizard Resource\nDESCRIPTION: Shows how to return an instance of a View subclass from a resource method in a Dropwizard application.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/views.rst#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@GET\n@Produces(MediaType.TEXT_HTML)\npublic PersonView getPerson(@PathParam(\"id\") String id) {\n    return new PersonView(db.find(id));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom ExceptionMapper in Dropwizard\nDESCRIPTION: Implements an ExceptionMapper for IllegalArgumentException that tracks exceptions with a metric and returns a customized error response with a special header.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_48\n\nLANGUAGE: java\nCODE:\n```\npublic class IllegalArgumentExceptionMapper implements ExceptionMapper<IllegalArgumentException> {\n    private final Meter exceptions;\n    public IllegalArgumentExceptionMapper(MetricRegistry metrics) {\n        exceptions = metrics.meter(name(getClass(), \"exceptions\"));\n    }\n\n    @Override\n    public Response toResponse(IllegalArgumentException e) {\n        exceptions.mark();\n        return Response.status(Status.BAD_REQUEST)\n                .header(\"X-YOU-SILLY\", \"true\")\n                .type(MediaType.APPLICATION_JSON_TYPE)\n                .entity(new ErrorMessage(Status.BAD_REQUEST.getStatusCode(),\n                        \"You passed an illegal argument!\"))\n                .build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MultiPartBundle in Dropwizard\nDESCRIPTION: Shows how to add the MultiPartBundle to a Dropwizard application in the initialize method. This setup enables multi-part form support via Jersey.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/forms.rst#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void initialize(Bootstrap<ExampleConfiguration> bootstrap) {\n    bootstrap.addBundle(new MultiPartBundle());\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DataSourceFactory in Dropwizard Configuration Class\nDESCRIPTION: Example showing how to set up a Dropwizard configuration class with DataSourceFactory for JDBI3 database access. Includes property getters and setters with validation annotations.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/jdbi3.rst#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleConfiguration extends Configuration {\n    @Valid\n    @NotNull\n    private DataSourceFactory database = new DataSourceFactory();\n\n    @JsonProperty(\"database\")\n    public void setDataSourceFactory(DataSourceFactory factory) {\n        this.database = factory;\n    }\n\n    @JsonProperty(\"database\")\n    public DataSourceFactory getDataSourceFactory() {\n        return database;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing the Dependency Injection Bundle in Dropwizard Application\nDESCRIPTION: This code shows how to initialize and run the DependencyInjectionBundle in a Dropwizard application's run method, setting up the dependency injection system for the application.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/di.rst#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void run(ExampleConfiguration config,\n                Environment environment) {\n    final DependencyInjectionBundle dependencyInjectionBundle = new DependencyInjectionBundle();\n    dependencyInjectionBundle.run(configuration, environment);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating UnitOfWork-Aware Proxies for Non-Jersey Resources\nDESCRIPTION: Shows how to use UnitOfWorkAwareProxyFactory to create proxies for classes outside Jersey resources that need transactional support with the @UnitOfWork annotation, such as authenticators.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/hibernate.rst#2025-04-18_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nSessionDao dao = new SessionDao(hibernateBundle.getSessionFactory());\nExampleAuthenticator exampleAuthenticator = new UnitOfWorkAwareProxyFactory(hibernateBundle)\n           .create(ExampleAuthenticator.class, SessionDao.class, dao);\n```\n\n----------------------------------------\n\nTITLE: Integration Testing with DropwizardAppExtension\nDESCRIPTION: Demonstrates integration testing using DropwizardAppExtension to start and stop the application for testing with real HTTP requests.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/testing.rst#2025-04-18_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@ExtendWith(DropwizardExtensionsSupport.class)\nclass LoginAcceptanceTest {\n\n    private static DropwizardAppExtension<TestConfiguration> EXT = new DropwizardAppExtension<>(\n            MyApp.class,\n            ResourceHelpers.resourceFilePath(\"my-app-config.yaml\")\n        );\n\n    @Test\n    void loginHandlerRedirectsAfterPost() {\n        Client client = EXT.client();\n\n        Response response = client.target(\n                 String.format(\"http://localhost:%d/login\", EXT.getLocalPort()))\n                .request()\n                .post(Entity.json(loginForm()));\n\n        assertThat(response.getStatus()).isEqualTo(302);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Cache-Control Headers to Resources in Dropwizard\nDESCRIPTION: Shows how to use the @CacheControl annotation to add cache control headers to resource methods in Dropwizard.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_53\n\nLANGUAGE: java\nCODE:\n```\n@GET\n@CacheControl(maxAge = 6, maxAgeUnit = TimeUnit.HOURS)\npublic String getCachableValue() {\n    return \"yay\";\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Command in Dropwizard\nDESCRIPTION: Shows how to create and configure a custom command with command-line options.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_22\n\nLANGUAGE: java\nCODE:\n```\npublic class MyCommand extends Command {\n    public MyCommand() {\n        super(\"hello\", \"Prints a greeting\");\n    }\n\n    @Override\n    public void run(Bootstrap<?> bootstrap, Namespace namespace) throws Exception {\n        System.out.println(\"Hello \" + namespace.getString(\"name\"));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using CDI Annotations for Dependency Injection in Dropwizard\nDESCRIPTION: This code demonstrates how to use CDI annotations like @Singleton, @Inject, and @Named with HK2 in a Dropwizard application. It shows a UserResource that depends on a UserRepository, and how the UserRepository uses a named parameter.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/di.rst#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Singleton\npublic class UserResource {\n    private final UserRepository userRepository;\n\n    @Inject\n    public UserResource(UserRepository userRepository) {\n        this.userRepository = userRepository;\n    }\n}\n\n@Singleton\npublic class UserRepository {\n    private final String dbUser;\n\n    @Inject\n    public UserRepository(@Named(\"dbUser\") String dbUser) {\n        this.dbUser = dbUser;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Unit Testing Dropwizard Resources with Mockito\nDESCRIPTION: Example of unit testing a Dropwizard resource by mocking dependencies and verifying the behavior of resource methods.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_52\n\nLANGUAGE: java\nCODE:\n```\npublic class NotificationsResourceTest {\n    private final NotificationStore store = mock(NotificationStore.class);\n    private final NotificationsResource resource = new NotificationsResource(store);\n\n    @Test\n    public void getsReturnNotifications() {\n        final List<Notification> notifications = mock(List.class);\n        when(store.fetch(1, 20)).thenReturn(notifications);\n\n        final NotificationList list = resource.fetch(new LongParam(\"1\"), new IntParam(\"20\"));\n\n        assertThat(list.getUserId(),\n                  is(1L));\n\n        assertThat(list.getNotifications(),\n                   is(notifications));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Logging Filter in Dropwizard\nDESCRIPTION: Java implementation of a custom logging filter factory that excludes requests to a specific path (/secret) from being logged. Shows how to implement the FilterFactory interface for request filtering.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_40\n\nLANGUAGE: java\nCODE:\n```\n@JsonTypeName(\"secret-filter-factory\")\npublic class SecretFilterFactory implements FilterFactory<IAccessEvent> {\n    @Override\n    public Filter<IAccessEvent> build() {\n        return new Filter<IAccessEvent>() {\n            @Override\n            public FilterReply decide(IAccessEvent event) {\n                if (event.getRequestURI().equals(\"/secret\")) {\n                    return FilterReply.DENY;\n                } else {\n                    return FilterReply.NEUTRAL;\n                }\n            }\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authenticator Interface in Java for Dropwizard\nDESCRIPTION: Example implementation of the Authenticator interface for Basic Authentication. This authenticator validates user credentials by checking if the password equals 'secret' and returns a User object if successful.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/auth.rst#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleAuthenticator implements Authenticator<BasicCredentials, User> {\n    @Override\n    public Optional<User> authenticate(BasicCredentials credentials) throws AuthenticationException {\n        if (\"secret\".equals(credentials.getPassword())) {\n            return Optional.of(new User(credentials.getUsername()));\n        }\n        return Optional.empty();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Exception Mapper in Dropwizard\nDESCRIPTION: Shows how to register a custom exception mapper in a Dropwizard application's run method. This connects the custom validation error handling with the Jersey environment.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/validation.rst#2025-04-18_snippet_17\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void run(final MyConfiguration conf, final Environment env) {\n    env.jersey().register(new MyJerseyViolationExceptionMapper());\n    env.jersey().register(new Resource());\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Message Queue Factory in Java\nDESCRIPTION: A factory class that creates and manages MessageQueueClient connections, automatically tying them to the application lifecycle. Demonstrates Dropwizard's factory pattern for configuration.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class MessageQueueFactory {\n    @NotEmpty\n    private String host;\n\n    @Min(1)\n    @Max(65535)\n    private int port = 5672;\n\n    @NotNull\n    private String username;\n\n    @NotNull\n    private String password;\n\n    @NotEmpty\n    private String virtualHost;\n\n    public String getHost() {\n        return host;\n    }\n\n    public void setHost(String host) {\n        this.host = host;\n    }\n\n    public int getPort() {\n        return port;\n    }\n\n    public void setPort(int port) {\n        this.port = port;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    public String getVirtualHost() {\n        return virtualHost;\n    }\n\n    public void setVirtualHost(String virtualHost) {\n        this.virtualHost = virtualHost;\n    }\n\n    public MessageQueueClient build(Environment environment) {\n        final MessageQueueClient client = new MessageQueueClient(getHost(),\n                                                               getPort(),\n                                                               getUsername(),\n                                                               getPassword(),\n                                                               getVirtualHost());\n        environment.lifecycle().manage(new Managed() {\n            @Override\n            public void start() throws Exception {\n            }\n\n            @Override\n            public void stop() throws Exception {\n                client.close();\n            }\n        });\n        return client;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Substitution in YAML Configuration\nDESCRIPTION: A YAML configuration snippet demonstrating how to use environment variable substitution with default values in a Dropwizard configuration file.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nmySetting: ${DW_MY_SETTING:-default_value}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Task in a Dropwizard Application\nDESCRIPTION: Code that demonstrates how to register a custom task in a Dropwizard application's environment during the run method.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_24\n\nLANGUAGE: java\nCODE:\n```\n// core: CustomTaskApp#run\n```\n\n----------------------------------------\n\nTITLE: Validating Response Values\nDESCRIPTION: Demonstrates how to validate return values from endpoints to ensure they meet certain criteria before being sent to clients. This provides guarantees about response quality.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/validation.rst#2025-04-18_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n@POST\n@NotNull\n@Valid\npublic Person create() {\n    return new Person(null);\n}\n```\n\n----------------------------------------\n\nTITLE: Testing JSON Serialization\nDESCRIPTION: JUnit test case for verifying Person object serializes correctly to JSON using Jackson ObjectMapper.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/testing.rst#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.junit.jupiter.api.Test;\n\nimport static io.dropwizard.jackson.Jackson.newObjectMapper;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass PersonTest {\n    private static final ObjectMapper MAPPER = newObjectMapper();\n\n    @Test\n    void seralizesToJSON() throws Exception {\n        final Person person = new Person(\"Luther Blissett\", \"lb@example.com\");\n\n        final String expected = MAPPER.writeValueAsString(\n                MAPPER.readValue(getClass().getResource(\"/fixtures/person.json\"), JsonNode.class));\n\n        assertThat(MAPPER.writeValueAsString(person)).isEqualTo(expected);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DataSourceFactory in a Dropwizard Configuration Class\nDESCRIPTION: Shows how to add a DataSourceFactory to a Dropwizard Configuration class to enable database connectivity. The configuration includes getter and setter methods for the database connection properties.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/hibernate.rst#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleConfiguration extends Configuration {\n    @Valid\n    @NotNull\n    private DataSourceFactory database = new DataSourceFactory();\n\n    @JsonProperty(\"database\")\n    public DataSourceFactory getDataSourceFactory() {\n        return database;\n    }\n\n    @JsonProperty(\"database\")\n    public void setDataSourceFactory(DataSourceFactory dataSourceFactory) {\n        this.database = dataSourceFactory;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ViewBundle in Dropwizard Application\nDESCRIPTION: Demonstrates how to enable views for a Dropwizard application by adding the ViewBundle in the initialize method of the Application class.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/views.rst#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nbootstrap.addBundle(new ViewBundle<>());\n```\n\n----------------------------------------\n\nTITLE: Adding TemplateHealthCheck to Dropwizard Environment\nDESCRIPTION: Code demonstrating how to create and register a TemplateHealthCheck instance with the Dropwizard environment.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/getting-started.rst#2025-04-18_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nfinal TemplateHealthCheck healthCheck =\n    new TemplateHealthCheck(configuration.getTemplate());\nenvironment.healthChecks().register(\"template\", healthCheck);\n```\n\n----------------------------------------\n\nTITLE: Custom JSON Serialization and Deserialization in Dropwizard\nDESCRIPTION: Shows how to specify custom serializers and deserializers for a class using Jackson annotations.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_59\n\nLANGUAGE: java\nCODE:\n```\n@JsonSerialize(using=FunkySerializer.class)\n@JsonDeserialize(using=FunkyDeserializer.class)\npublic class Funky {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Dropwizard-Dependencies as Parent POM in Maven\nDESCRIPTION: Demonstrates how to use dropwizard-dependencies as a parent POM with the ability to override specific dependency versions using Maven properties.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes/upgrade-notes-2_0_x.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<parent>\n  <groupId>io.dropwizard</groupId>\n  <artifactId>dropwizard-dependencies</artifactId>\n  <version>2.0.0</version>\n</parent>\n\n<properties>\n  <!-- Use older version of Google Guava -->\n  <guava.version>28.0-jre</guava.version>\n</properties>\n```\n\n----------------------------------------\n\nTITLE: Using Optional Authentication in Dropwizard Resources\nDESCRIPTION: Example of optional authentication using Optional<User> parameter. This endpoint provides personalized greetings for authenticated users while still allowing anonymous access with a generic greeting.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/auth.rst#2025-04-18_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n@GET\npublic String getGreeting(@Auth Optional<User> userOpt) {\n    if (userOpt.isPresent()) {\n        return \"Hello, \" + userOpt.get().getName() + \"!\";\n    } else {\n        return \"Greetings, anonymous visitor!\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Multiple @UnitOfWork Annotations for Multiple Databases\nDESCRIPTION: Demonstrates how to use multiple @UnitOfWork annotations when working with multiple Hibernate bundles in a Dropwizard application. This approach allows transactions across multiple databases.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/hibernate.rst#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@GET\n@Path(\"...\")\n@Timed\n@UnitOfWork(value = \"hibernate.<db-name-1>\")\n@UnitOfWork(value = \"hibernate.<db-name-2>\")\npublic ...\n```\n\n----------------------------------------\n\nTITLE: Creating a View Class in Dropwizard\nDESCRIPTION: Demonstrates how to create a View class for rendering templates in a Dropwizard application.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/views.rst#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class PersonView extends View {\n    private final Person person;\n\n    public PersonView(Person person) {\n        super(\"person.ftl\");\n        this.person = person;\n    }\n\n    public Person getPerson() {\n        return person;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Dropwizard Configuration with Environment Variable Substitution\nDESCRIPTION: A complete test class showing how to test a widget factory with environment variable substitution. It uses SubstitutingSourceProvider and EnvironmentVariableSubstitutor to process variables in the configuration file.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/testing.rst#2025-04-18_snippet_13\n\nLANGUAGE: java\nCODE:\n```\npublic class WidgetFactoryTest {\n\n    private final ObjectMapper objectMapper = Jackson.newObjectMapper();\n    private final Validator validator = Validators.newValidator();\n    private final YamlConfigurationFactory<WidgetFactory> factory =\n            new YamlConfigurationFactory<>(WidgetFactory.class, validator, objectMapper, \"dw\");\n\n    // test for discoverability\n\n    @Test\n    public void testBuildAHammer() throws Exception {\n        final WidgetFactory wid = factory.build(new SubstitutingSourceProvider(\n                new ResourceConfigurationSourceProvider(),\n                new EnvironmentVariableSubstitutor(false)\n            ), \"yaml/hammer.yaml\");\n        assertThat(wid).isInstanceOf(HammerFactory.class);\n        assertThat(((HammerFactory) wid).createWidget().getWeight()).isEqualTo(20);\n    }\n\n    // test for the chisel factory\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Post Body Task in Dropwizard\nDESCRIPTION: An example of extending PostBodyTask to create a task that processes the body of a POST request.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_25\n\nLANGUAGE: java\nCODE:\n```\n// core: EchoTask\n```\n\n----------------------------------------\n\nTITLE: Initializing RxJava Jersey Client\nDESCRIPTION: Setting up a reactive Jersey client with RxJava2 support in Dropwizard application.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/client.rst#2025-04-18_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void run(ExampleConfiguration config,\n                Environment environment) {\n\n    final Client client =\n        new JerseyClientBuilder(environment)\n            .using(config.getJerseyClientConfiguration())\n            .buildRx(getName(), RxFlowableInvokerProvider.class);\n    //Any custom Service Resource that waits for Client in constructor      \n    environment.jersey().register(new ExternalServiceResource(client));\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing HTTP Client in Application\nDESCRIPTION: Setting up and registering HTTP client in the Dropwizard application run method.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/client.rst#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void run(ExampleConfiguration config,\n                Environment environment) {\n    final HttpClient httpClient = new HttpClientBuilder(environment).using(config.getHttpClientConfiguration())\n                                                                    .build(getName());\n    environment.jersey().register(new ExternalServiceResource(httpClient));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dropwizard CORS Configuration\nDESCRIPTION: This code snippet shows how to configure Cross-Origin Resource Sharing (CORS) in a Dropwizard application. It sets up dynamic CORS filtering with allowed origins, headers, and methods for HTTP requests.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/dropwizard-assets/src/test/resources/assets/git-turd.txt#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nprivate void configureCors(Environment environment) {\n  final FilterRegistration.Dynamic cors = environment.servlets().addFilter(\"CORS\", CrossOriginFilter.class);\n  cors.addMappingForUrlPatterns(EnumSet.allOf(DispatcherType.class), true, \"/*\");\n  cors.setInitParameter(CrossOriginFilter.ALLOWED_ORIGINS_PARAM, \"*\");\n  cors.setInitParameter(CrossOriginFilter.ALLOWED_HEADERS_PARAM, \"*\");\n  cors.setInitParameter(CrossOriginFilter.ALLOWED_METHODS_PARAM, \"OPTIONS,GET,PUT,POST,DELETE,HEAD\");\n  cors.setInitParameter(CrossOriginFilter.ALLOW_CREDENTIALS_PARAM, \"true\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger Levels in Dropwizard\nDESCRIPTION: YAML configuration for setting the default log level and overriding specific loggers with custom configurations, including redirecting SQL logs to a separate file.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\n# Logging settings.\nlogging:\n\n  # The default level of all loggers. Can be OFF, ERROR, WARN, INFO, DEBUG, TRACE, or ALL.\n  level: INFO\n\n  # Logger-specific levels.\n  loggers:\n\n    # Overrides the level of com.example.dw.Thing and sets it to DEBUG.\n    \"com.example.dw.Thing\": DEBUG\n\n    # Enables the SQL query log and redirect it to a separate file\n    \"org.hibernate.SQL\":\n      level: DEBUG\n      # This line stops org.hibernate.SQL (or anything under it) from using the root logger\n      additive: false\n      appenders:\n        - type: file\n          currentLogFilename: ./logs/example-sql.log\n          archivedLogFilenamePattern: ./logs/example-sql-%d.log.gz\n          archivedFileCount: 5\n```\n\n----------------------------------------\n\nTITLE: Implementing DynamicFeature for Jersey Filter Registration\nDESCRIPTION: A Jersey DynamicFeature implementation that selectively applies the DateNotSpecifiedFilter to resource methods annotated with @DateRequired. This demonstrates how to conditionally register filters on specific resource methods.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_64\n\nLANGUAGE: java\nCODE:\n```\n@Provider\npublic class DateRequiredFeature implements DynamicFeature {\n    @Override\n    public void configure(ResourceInfo resourceInfo, FeatureContext context) {\n        if (resourceInfo.getResourceMethod().getAnnotation(DateRequired.class) != null) {\n            context.register(DateNotSpecifiedFilter.class);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @UnitOfWork Annotation for Transactional Resource Methods\nDESCRIPTION: Shows how to use the @UnitOfWork annotation to define transactional boundaries for resource methods in Dropwizard. This annotation automatically opens a session, begins a transaction, executes the method, and commits the transaction.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/hibernate.rst#2025-04-18_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@GET\n@Path(\"/{id}\")\n@Timed\n@UnitOfWork\npublic Person findPerson(@PathParam(\"id\") LongParam id) {\n    return dao.findById(id.get());\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring URI-based Request Log Filtering\nDESCRIPTION: YAML configuration for filtering specific URIs from request logs using the built-in UriFilterFactory. This example shows how to exclude health check endpoints from logs.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  requestLog:\n    appenders:\n      - type: console\n        filterFactories:\n          - type: uri\n            uris:\n              - \"/health-check\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up BasicAuth Authentication Testing in Dropwizard\nDESCRIPTION: Configuration of ResourceExtension for testing Basic authentication in Dropwizard. Uses GrizzlyWebTestContainerFactory and configures BasicCredentialAuthFilter with authenticator and authorizer.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/auth.rst#2025-04-18_snippet_13\n\nLANGUAGE: java\nCODE:\n```\n@ExtendWith(DropwizardExtensionsSupport.class)\npublic class OAuthResourceTest {\n    public ResourceExtension resourceExtension = ResourceExtension\n            .builder()\n            .setTestContainerFactory(new GrizzlyWebTestContainerFactory())\n            .addProvider(new AuthDynamicFeature(new BasicCredentialAuthFilter.Builder<User>()\n                    .setAuthenticator(new MyBasicAuthenticator())\n                    .setAuthorizer(new MyBasicAuthorizer())\n                    .buildAuthFilter()))\n            .addProvider(RolesAllowedDynamicFeature.class)\n            .addProvider(new AuthValueFactoryProvider.Binder<>(User.class))\n            .addResource(new ProtectedResource())\n            .build()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring File Logging in Dropwizard\nDESCRIPTION: YAML configuration for file-based logging in Dropwizard, showing how to set up log file rotation recommended for production environments.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nlogging:\n\n  appenders:\n    - type: file\n      # The file to which current statements will be logged.\n      currentLogFilename: ./logs/example.log\n\n      # When the log file rotates, the archived log will be renamed to this and gzipped. The\n      # %d is replaced with the previous day (yyyy-MM-dd). Custom rolling windows can be created\n```\n\n----------------------------------------\n\nTITLE: Enabling Session Support in Dropwizard Applications\nDESCRIPTION: Shows how to enable HTTP session support in a Dropwizard application by adding a SessionHandler to the servlet environment.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_54\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void run(final TestConfiguration configuration, final Environment environment) {\n    environment.servlets().setSessionHandler(new org.eclipse.jetty.server.session.SessionHandler());\n}\n```\n\n----------------------------------------\n\nTITLE: Registering AuthDynamicFeature with AuthFilter\nDESCRIPTION: Code for registering the AuthDynamicFeature with your configured AuthFilter in the Jersey environment, which is required for the authentication system to work.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes/upgrade-notes-0_9_x.rst#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nenvironment.jersey().register(new AuthDynamicFeature(userBasicCredentialAuthFilter));\n```\n\n----------------------------------------\n\nTITLE: Initializing Multiple Migration Bundles\nDESCRIPTION: Shows how to initialize multiple named migration bundles for different databases.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/migrations.rst#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void initialize(Bootstrap<ExampleConfiguration> bootstrap) {\n    bootstrap.addBundle(new MigrationsBundle<ExampleConfiguration>() {\n        @Override\n        public DataSourceFactory getDataSourceFactory(ExampleConfiguration configuration) {\n            return configuration.getDb1DataSourceFactory();\n        }\n\n        @Override\n        public String name() {\n            return \"db1\";\n        }\n    });\n\n    bootstrap.addBundle(new MigrationsBundle<ExampleConfiguration>() {\n        @Override\n        public DataSourceFactory getDataSourceFactory(ExampleConfiguration configuration) {\n            return configuration.getDb2DataSourceFactory();\n        }\n\n        @Override\n        public String name() {\n            return \"db2\";\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Serialization with Jackson in Dropwizard\nDESCRIPTION: Shows a simple POJO class with JsonProperty annotations for JSON serialization and deserialization using Jackson.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_56\n\nLANGUAGE: java\nCODE:\n```\npublic class Notification {\n    private String text;\n\n    public Notification(String text) {\n        this.text = text;\n    }\n\n    @JsonProperty\n    public String getText() {\n        return text;\n    }\n\n    @JsonProperty\n    public void setText(String text) {\n        this.text = text;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Cache in YAML for Dropwizard\nDESCRIPTION: YAML configuration for defining the authentication cache policy using Caffeine cache specifications. This config caches up to 10,000 principals and evicts entries after 10 minutes of inactivity.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/auth.rst#2025-04-18_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nauthenticationCachePolicy: maximumSize=10000, expireAfterAccess=10m\n```\n\n----------------------------------------\n\nTITLE: Testing Protected Resources with BasicAuth Authentication in Dropwizard\nDESCRIPTION: Example test method demonstrating how to test a protected resource using Basic authentication. Encodes credentials with Base64 and sets the Authorization header manually.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/auth.rst#2025-04-18_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n@Test\npublic void testProtectedResource(){\n\n    String credential = \"Basic \" + Base64.getEncoder().encodeToString(\"test@gmail.com:secret\".getBytes())\n\n    Response response = resourceExtension\n            .target(\"/protected\")\n            .request()\n            .header(HttpHeaders.AUTHORIZATION, credential)\n            .get();\n\n    Assert.assertEquals(200, response.getStatus());\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Checks with YAML in Dropwizard\nDESCRIPTION: YAML configuration example showing how to set up health check configurations in Dropwizard, including critical and non-critical dependencies.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n    health:\n      delayedShutdownHandlerEnabled: true\n      shutdownWaitPeriod: 10s\n      healthChecks:\n        - name: user-database\n          critical: true\n        - name: user-notifications-queue\n          critical: false\n          schedule:\n            checkInterval: 2500ms\n            downtimeInterval: 10s\n            failureAttempts: 2\n            successAttempts: 1\n        - name: user-cache\n          critical: false\n```\n\n----------------------------------------\n\nTITLE: Configuring View Renderers in Dropwizard Application\nDESCRIPTION: Shows how to pass configuration to view renderers by overriding the getViewConfiguration method in the Application class.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/views.rst#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nbootstrap.addBundle(new ViewBundle<AppConfiguration>() {\n    @Override\n    public Map<String, Map<String, String>> getViewConfiguration(AppConfiguration config) {\n        return config.getViewRendererConfiguration();\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Configuration Class in Java\nDESCRIPTION: An example configuration class that incorporates the MessageQueueFactory, demonstrating how to structure a Dropwizard configuration class with nested configuration components.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleConfiguration extends Configuration {\n    @Valid\n    @NotNull\n    private MessageQueueFactory messageQueue = new MessageQueueFactory();\n\n    public MessageQueueFactory getMessageQueueFactory() {\n        return messageQueue;\n    }\n\n    public void setMessageQueueFactory(MessageQueueFactory factory) {\n        this.messageQueue = factory;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS with Custom Cipher Suites in Dropwizard\nDESCRIPTION: A YAML configuration example showing how to specify custom cipher suites to allow TLSv1 and TLSv1.1 clients to connect to a Dropwizard application.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n    :language: yaml\n```\n\n----------------------------------------\n\nTITLE: Testing JSON Deserialization\nDESCRIPTION: JUnit test case for verifying JSON deserializes correctly to Person object using Jackson ObjectMapper.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/testing.rst#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.junit.jupiter.api.Test;\n\nimport static io.dropwizard.jackson.Jackson.newObjectMapper;\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class PersonTest {\n    private static final ObjectMapper MAPPER = newObjectMapper();\n\n    @Test\n    public void deserializesFromJSON() throws Exception {\n        final Person person = new Person(\"Luther Blissett\", \"lb@example.com\");\n        assertThat(MAPPER.readValue(getClass().getResource(\"/fixtures/person.json\"), Person.class))\n                .isEqualTo(person);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Output for Basic Dropwizard Model\nDESCRIPTION: Example of the JSON output produced by Jackson for a simple annotated POJO in Dropwizard.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"text\": \"hey it's the value of the text field\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jersey Client in Dropwizard\nDESCRIPTION: Java configuration class setup for Jersey client with validation annotations.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/client.rst#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleConfiguration extends Configuration {\n    @Valid\n    @NotNull\n    private JerseyClientConfiguration jerseyClient = new JerseyClientConfiguration();\n\n    @JsonProperty(\"jerseyClient\")\n    public JerseyClientConfiguration getJerseyClientConfiguration() {\n        return jerseyClient;\n    }\n\n    @JsonProperty(\"jerseyClient\")\n    public void setJerseyClientConfiguration(JerseyClientConfiguration jerseyClient) {\n        this.jerseyClient = jerseyClient;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JDBI3 Database Configuration in YAML\nDESCRIPTION: Example YAML configuration for JDBI3 database settings including connection pool parameters, validation queries, and timeouts.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/jdbi3.rst#2025-04-18_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n  # the name of your JDBC driver\n  driverClass: org.postgresql.Driver\n\n  # the username\n  user: pg-user\n\n  # the password\n  password: iAMs00perSecrEET\n\n  # the JDBC URL\n  url: jdbc:postgresql://db.example.com/db-prod\n\n  # any properties specific to your JDBC driver:\n  properties:\n    charSet: UTF-8\n\n  # the maximum amount of time to wait on an empty pool before throwing an exception\n  maxWaitForConnection: 1s\n\n  # the SQL query to run when validating a connection's liveness\n  validationQuery: \"/* MyService Health Check */ SELECT 1\"\n\n  # the timeout before a connection validation queries fail\n  validationQueryTimeout: 3s\n\n  # the minimum number of connections to keep open\n  minSize: 8\n\n  # the maximum number of connections to keep open\n  maxSize: 32\n\n  # whether or not idle connections should be validated\n  checkConnectionWhileIdle: false\n\n  # the amount of time to sleep between runs of the idle connection validation, abandoned cleaner and idle pool resizing\n  evictionInterval: 10s\n\n  # the minimum amount of time an connection must sit idle in the pool before it is eligible for eviction\n  minIdleTime: 1 minute\n```\n\n----------------------------------------\n\nTITLE: Immutable Object JSON Serialization in Dropwizard\nDESCRIPTION: Shows how to use Jackson annotations to serialize and deserialize immutable objects in Dropwizard.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_58\n\nLANGUAGE: java\nCODE:\n```\npublic class Notification {\n    private final String text;\n\n    @JsonCreator\n    public Notification(@JsonProperty(\"text\") String text) {\n        this.text = text;\n    }\n\n    @JsonProperty(\"text\")\n    public String getText() {\n        return text;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Property Validation in Dropwizard Configuration Classes\nDESCRIPTION: Demonstrates how to add validation constraints to configuration properties in Dropwizard. This example shows a Configuration class with a @NotNull constraint on a JSON property, highlighting how validation error messages reference the field name rather than the JSON property name.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/validation.rst#2025-04-18_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npublic class MyConfiguration extends Configuration {\n    @NotNull\n    @JsonProperty(\"foo\")\n    private String baz;\n}\n```\n\n----------------------------------------\n\nTITLE: Building URIs from Resource Classes in Dropwizard\nDESCRIPTION: Shows how to use UriBuilder to generate URIs based on resource classes, avoiding URI duplication in code.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_51\n\nLANGUAGE: java\nCODE:\n```\nUriBuilder.fromResource(UserResource.class).build(user.getId());\n```\n\n----------------------------------------\n\nTITLE: Registering RolesAllowedDynamicFeature in Dropwizard Application\nDESCRIPTION: Code snippet for registering the RolesAllowedDynamicFeature class in your Dropwizard application's run method, which is required for role-based authorization.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes/upgrade-notes-0_9_x.rst#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nenvironment.jersey().register(RolesAllowedDynamicFeature.class);\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Layout for Request Logging in Dropwizard\nDESCRIPTION: YAML configuration for setting up JSON-formatted request logging in a Dropwizard application using the access-json layout type.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  requestLog:\n    appenders:\n      - type: console\n        layout:\n          type: access-json\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Client in Dropwizard\nDESCRIPTION: Java configuration class setup for HTTP client with proper validation annotations.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/client.rst#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleConfiguration extends Configuration {\n    @Valid\n    @NotNull\n    private HttpClientConfiguration httpClient = new HttpClientConfiguration();\n\n    @JsonProperty(\"httpClient\")\n    public HttpClientConfiguration getHttpClientConfiguration() {\n        return httpClient;\n    }\n\n    @JsonProperty(\"httpClient\")\n    public void setHttpClientConfiguration(HttpClientConfiguration httpClient) {\n        this.httpClient = httpClient;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Custom Logging Filter\nDESCRIPTION: YAML configuration for applying the custom SecretFilterFactory to request logging. Shows how to configure a filter factory in the requestLog section.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  requestLog:\n    appenders:\n      - type: console\n        filterFactories:\n          - type: secret-filter-factory\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom ExceptionMapper in Dropwizard\nDESCRIPTION: Shows how to register a custom ExceptionMapper in the application's run method using the Jersey environment.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_49\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void run(final MyConfiguration conf, final Environment env) {\n    env.jersey().register(new IllegalArgumentExceptionMapper(env.metrics()));\n    env.jersey().register(new Resource());\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Commands for Runtime Log Level Configuration\nDESCRIPTION: Shell commands demonstrating how to change log levels at runtime using Dropwizard's LogConfigurationTask via HTTP. Shows how to configure single or multiple loggers and set duration-based temporary changes.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_39\n\nLANGUAGE: shell\nCODE:\n```\n# Configure com.example.helloworld to INFO\ncurl -X POST -d \"logger=com.example.helloworld&level=INFO\" http://localhost:8081/tasks/log-level\n# Configure com.example.helloworld and com.example.helloearth to INFO\ncurl -X POST -d \"logger=com.example.helloworld&logger=com.example.helloearth&level=INFO\" http://localhost:8081/tasks/log-level\n# Configure com.example.helloworld to INFO, then revert to default level after 10 minutes\ncurl -X POST -d \"logger=com.example.helloworld&level=INFO&duration=PT10M\" http://localhost:8081/tasks/log-level\n# Revert com.example.helloworld to the default level\ncurl -X POST -d \"logger=com.example.helloworld\" http://localhost:8081/tasks/log-level\n```\n\n----------------------------------------\n\nTITLE: Accessing Hibernate SessionFactory in CustomChange\nDESCRIPTION: Example of accessing the Hibernate SessionFactory within a CustomChange implementation.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/migrations.rst#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic void execute(Database database) throws CustomChangeException {\n    Scope.getCurrentScope().get(\"hibernateSessionFactory\", SessionFactory.class);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Authorizer for Dropwizard Authentication\nDESCRIPTION: Example implementation of an Authorizer that determines if a User has a specific role. This example authorizes a user named 'good-guy' for the 'ADMIN' role.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes/upgrade-notes-0_9_x.rst#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleAuthorizer implements Authorizer<User> {\n  @Override\n  public boolean authorize(User user, String role) {\n    return user.getName().equals(\"good-guy\") && role.equals(\"ADMIN\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering HelloWorld Resource in Dropwizard\nDESCRIPTION: Code showing how to register a HelloWorldResource in a Dropwizard application's run method, creating the resource with configuration parameters.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/getting-started.rst#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nfinal HelloWorldResource resource = new HelloWorldResource(\n    configuration.getTemplate(),\n    configuration.getDefaultName()\n);\nenvironment.jersey().register(resource);\n```\n\n----------------------------------------\n\nTITLE: Testing MultiPart Form Resources in Dropwizard\nDESCRIPTION: Demonstrates how to set up a test for resources that use multi-part form features. The example shows registering MultiPartFeature with ResourceExtension and creating a test client that posts multi-part form data.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/forms.rst#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@ExtendWith(DropwizardExtensionsSupport.class)\npublic class MultiPartTest {\n\n    public static final ResourceExtension resourceExtension = ResourceExtension.builder()\n            .addProvider(MultiPartFeature.class)\n            .addResource(new TestResource())\n            .build();\n\n    @Test\n    public void testClientMultipart() {\n        final FormDataMultiPart multiPart = new FormDataMultiPart()\n                .field(\"test-data\", \"Hello Multipart\");\n        final String response = resourceExtension.target(\"/test\")\n                .register(MultiPartFeature.class)\n                .request()\n                .post(Entity.entity(multiPart, multiPart.getMediaType()), String.class);\n        assertThat(response).isEqualTo(\"Hello Multipart\");\n    }\n\n    @Path(\"test\")\n    public static class TestResource {\n        @POST\n        @Consumes(MediaType.MULTIPART_FORM_DATA)\n        public String post(@FormDataParam(\"test-data\") String testData) {\n            return testData;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DataSourceFactory in Dropwizard\nDESCRIPTION: Example configuration class showing how to set up a DataSourceFactory for database migrations.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/migrations.rst#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleConfiguration extends Configuration {\n    @Valid\n    @NotNull\n    private DataSourceFactory database = new DataSourceFactory();\n\n    @JsonProperty(\"database\")\n    public DataSourceFactory getDataSourceFactory() {\n        return database;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Bootstrap Object in Dropwizard\nDESCRIPTION: This snippet illustrates the structure of the Bootstrap class, which represents the pre-start application environment. It shows the initialization of various components like ObjectMapper, bundles, commands, and registries.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/internals.rst#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nBootstrap(application: Application<T>) {\n  this.application = application;\n  this.objectMapper = Jackson.newObjectMapper();\n  this.bundles = new ArrayList<>();\n  this.configuredBundles = new ArrayList<>();\n  this.commands = new ArrayList<>();\n  this.validatorFactory = Validators.newValidatorFactory();\n  this.metricRegistry = new MetricRegistry();\n  this.classLoader = Thread.currentThread().getContextClassLoader();\n  this.configurationFactory = new DefaultConfigurationFactoryFactory<>();\n  this.healthCheckRegistry = new HealthCheckRegistry();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an AuthFilter in Dropwizard\nDESCRIPTION: Code for creating a BasicCredentialAuthFilter that uses your custom Authenticator and Authorizer. This filter handles HTTP Basic authentication and applies the authorization rules.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes/upgrade-notes-0_9_x.rst#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nfinal BasicCredentialAuthFilter<User> userBasicCredentialAuthFilter =\n        new BasicCredentialAuthFilter.Builder<User>()\n                .setAuthenticator(new ExampleAuthenticator())\n                .setRealm(\"SUPER SECRET STUFF\")\n                .setAuthorizer(new ExampleAuthorizer())\n                .buildAuthFilter();\n```\n\n----------------------------------------\n\nTITLE: Configuring Syslog Logging in Dropwizard with YAML\nDESCRIPTION: YAML configuration for setting up syslog logging in a Dropwizard application. Specifies the host and facility for syslog messages.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nlogging:\n\n  appenders:\n    - type: syslog\n      # The hostname of the syslog server to which statements will be sent.\n      # N.B.: If this is the local host, the local syslog instance will need to be configured to\n      # listen on an inet socket, not just a Unix socket.\n      host: localhost\n\n      # The syslog facility to which statements will be sent.\n      facility: local0\n```\n\n----------------------------------------\n\nTITLE: Command Testing Example\nDESCRIPTION: Example of testing a Dropwizard command by capturing stdout and verifying command execution results.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/testing.rst#2025-04-18_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nclass CommandTest {\n    private final PrintStream originalOut = System.out;\n    private final PrintStream originalErr = System.err;\n    private final InputStream originalIn = System.in;\n\n    private final ByteArrayOutputStream stdOut = new ByteArrayOutputStream();\n    private final ByteArrayOutputStream stdErr = new ByteArrayOutputStream();\n    private Cli cli;\n\n    @BeforeEach\n    void setUp() throws Exception {\n        final JarLocation location = mock(JarLocation.class);\n        when(location.getVersion()).thenReturn(Optional.of(\"1.0.0\"));\n\n        final Bootstrap<MyConfiguration> bootstrap = new Bootstrap<>(new MyApplication());\n        bootstrap.addCommand(new MyAddCommand());\n\n        System.setOut(new PrintStream(stdOut));\n        System.setErr(new PrintStream(stdErr));\n\n        cli = new Cli(location, bootstrap, stdOut, stdErr);\n    }\n\n    @AfterEach\n    void teardown() {\n        System.setOut(originalOut);\n        System.setErr(originalErr);\n        System.setIn(originalIn);\n    }\n\n    @Test\n    void myAddCanAddThreeNumbersCorrectly() {\n        final boolean success = cli.run(\"add\", \"2\", \"3\", \"6\");\n\n        SoftAssertions softly = new SoftAssertions();\n        softly.assertThat(success).as(\"Exit success\").isTrue();\n\n        softly.assertThat(stdOut.toString()).as(\"stdout\").isEqualTo(\"11\");\n        softly.assertThat(stdErr.toString()).as(\"stderr\").isEmpty();\n        softly.assertAll();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating SPDY to HTTP/2 Configuration in YAML\nDESCRIPTION: This snippet shows how to replace the deprecated SPDY3 connector configuration with the new HTTP/2 connector in the Dropwizard YAML configuration. The commented line shows the old syntax, while the active configuration demonstrates the new HTTP/2 syntax with the required SSL settings.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes/upgrade-notes-1_0_x.rst#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# - type: spdy3\n- type: h2\n  port: 8445\n  keyStorePath: example.keystore\n  keyStorePassword: example\n```\n\n----------------------------------------\n\nTITLE: Validating Enum Parameters\nDESCRIPTION: Shows how to validate that a query parameter matches one of the defined enum values. Dropwizard will provide helpful error messages listing valid options when an invalid value is provided.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/validation.rst#2025-04-18_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@GET\npublic String getEnum(@NotNull @QueryParam(\"choice\") Choice choice) {\n    return choice.toString();\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Optional Parameters with Unwrapping\nDESCRIPTION: Shows how to apply constraints to optional parameters by using the Unwrapping.Unwrap.class payload. When the optional is empty, the constraints aren't applied.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/validation.rst#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@POST\n// The @NotNull is supposed to mean that the parameter is required but the Max(3) is supposed to\n// apply to the contained integer. Currently, this code will fail saying that Max can't\n// be applied on an IntParam\npublic List<Person> createNum(@QueryParam(\"num\")\n                              @NotNull(payload = Unwrapping.Unwrap.class)\n                              @Max(value = 3, payload = Unwrapping.Unwrap.class) IntParam num) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Validation Error Pages in Dropwizard\nDESCRIPTION: Shows how to register a custom ErrorEntityWriter for handling ValidationErrorMessage objects in a Dropwizard application.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/views.rst#2025-04-18_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nenv.jersey().register(new ErrorEntityWriter<ValidationErrorMessage>(MediaType.TEXT_HTML_TYPE) {\n    @Override\n    protected View getRepresentation(ValidationErrorMessage message) {\n        return new ValidationErrorView(message);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Layout for General Logging in Dropwizard\nDESCRIPTION: YAML configuration for setting up JSON-formatted logging in a Dropwizard application using the console appender with json layout type.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nlogging:\n  appenders:\n    - type: console\n      layout:\n        type: json\n```\n\n----------------------------------------\n\nTITLE: Initializing Jersey Client in Application\nDESCRIPTION: Setting up and registering Jersey client in the Dropwizard application run method.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/client.rst#2025-04-18_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void run(ExampleConfiguration config,\n                Environment environment) {\n\n    final Client client = new JerseyClientBuilder(environment).using(config.getJerseyClientConfiguration())\n                                                              .build(getName());\n    environment.jersey().register(new ExternalServiceResource(client));\n}\n```\n\n----------------------------------------\n\nTITLE: Dropwizard Server Startup Log Output\nDESCRIPTION: Shows the server startup log output when running a Dropwizard application, including the registration of resources and the ports on which the application is listening.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/getting-started.rst#2025-04-18_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nINFO  [2011-12-03 00:38:32,927] io.dropwizard.core.cli.ServerCommand: Starting hello-world\nINFO  [2011-12-03 00:38:32,931] org.eclipse.jetty.server.Server: jetty-7.x.y-SNAPSHOT\nINFO  [2011-12-03 00:38:32,936] org.eclipse.jetty.server.handler.ContextHandler: started o.e.j.s.ServletContextHandler{/,null}\nINFO  [2011-12-03 00:38:32,999] com.sun.jersey.server.impl.application.WebApplicationImpl: Initiating Jersey application, version 'Jersey: 1.10 11/02/2011 03:53 PM'\nINFO  [2011-12-03 00:38:33,041] io.dropwizard.core.setup.Environment:\n\n    GET     /hello-world (com.example.helloworld.resources.HelloWorldResource)\n\nINFO  [2011-12-03 00:38:33,215] org.eclipse.jetty.server.handler.ContextHandler: started o.e.j.s.ServletContextHandler{/,null}\nINFO  [2011-12-03 00:38:33,235] org.eclipse.jetty.server.AbstractConnector: Started BlockingChannelConnector@0.0.0.0:8080 STARTING\nINFO  [2011-12-03 00:38:33,238] org.eclipse.jetty.server.AbstractConnector: Started SocketConnector@0.0.0.0:8081 STARTING\n```\n\n----------------------------------------\n\nTITLE: Constraining Entity Properties in Dropwizard\nDESCRIPTION: Shows how to apply validation constraints to entity properties. The @NotEmpty annotation ensures that the name field is not null or blank.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/validation.rst#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class Person {\n\n    @NotEmpty // ensure that name isn't null or blank\n    private final String name;\n\n    @JsonCreator\n    public Person(@JsonProperty(\"name\") String name) {\n        this.name = name;\n    }\n\n    @JsonProperty(\"name\")\n    public String getName() {\n        return name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Resource Class with ResourceExtension\nDESCRIPTION: Example of testing a REST resource using ResourceExtension with mocked DAO and JUnit 5 extension support.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/testing.rst#2025-04-18_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nimport io.dropwizard.testing.junit5.DropwizardExtensionsSupport;\nimport io.dropwizard.testing.junit5.ResourceExtension;\nimport org.junit.jupiter.api.*;\nimport jakarta.ws.rs.core.Response;\nimport java.util.Optional;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.Mockito.*;\n\n@ExtendWith(DropwizardExtensionsSupport.class)\nclass PersonResourceTest {\n    private static final PersonDAO DAO = mock(PersonDAO.class);\n    private static final ResourceExtension EXT = ResourceExtension.builder()\n            .addResource(new PersonResource(DAO))\n            .build();\n    private Person person;\n\n    @BeforeEach\n    void setup() {\n        person = new Person();\n        person.setId(1L);\n    }\n\n    @AfterEach\n    void tearDown() {\n        reset(DAO);\n    }\n\n    @Test\n    void getPersonSuccess() {\n        when(DAO.findById(1L)).thenReturn(Optional.of(person));\n\n        Person found = EXT.target(\"/people/1\").request().get(Person.class);\n\n        assertThat(found.getId()).isEqualTo(person.getId());\n        verify(DAO).findById(1L);\n    }\n\n    @Test\n    void getPersonNotFound() {\n        when(DAO.findById(2L)).thenReturn(Optional.empty());\n        final Response response = EXT.target(\"/people/2\").request().get();\n\n        assertThat(response.getStatusInfo().getStatusCode()).isEqualTo(Response.Status.NOT_FOUND.getStatusCode());\n        verify(DAO).findById(2L);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Jetty Lifecycle Listener in Dropwizard\nDESCRIPTION: This snippet demonstrates how to register a ServerLifecycleListener to perform actions when Jetty has started. This is useful for components that need to be notified after all Managed objects' start() methods have been called.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/internals.rst#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nenv.lifecycle().addServerLifecycleListener(new ServerLifecycleListener() {\n    @Override\n    public void serverStarted(Server server) {\n              /// ... do things here ....\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Servlet Filter in Dropwizard\nDESCRIPTION: A Jakarta Servlet Filter implementation that checks for the Date header in HTTP requests. This demonstrates an alternative approach to filtering using the Servlet API instead of Jersey's filter system.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_66\n\nLANGUAGE: java\nCODE:\n```\npublic class DateNotSpecifiedServletFilter implements jakarta.servlet.Filter {\n    // Other methods in interface omitted for brevity\n\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        if (request instanceof HttpServletRequest) {\n            String dateHeader = ((HttpServletRequest) request).getHeader(HttpHeaders.DATE);\n\n            if (dateHeader != null) {\n                chain.doFilter(request, response); // This signals that the request should pass this filter\n            } else {\n                HttpServletResponse httpResponse = (HttpServletResponse) response;\n                httpResponse.setStatus(HttpStatus.BAD_REQUEST_400);\n                httpResponse.getWriter().print(\"Date Header was not specified\");\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @Auth Annotation for Resource Protection in Dropwizard\nDESCRIPTION: Example of protecting a resource method using the @Auth annotation to inject an authenticated principal. This method requires ADMIN role access and uses the authenticated user to find their secret plan.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/auth.rst#2025-04-18_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@RolesAllowed(\"ADMIN\")\n@GET\npublic SecretPlan getSecretPlan(@Auth User user) {\n    return dao.findPlanForUser(user);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations with Custom Files\nDESCRIPTION: Examples of running database migrations using custom commands and specifying different migration files for each database.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/migrations.rst#2025-04-18_snippet_7\n\nLANGUAGE: text\nCODE:\n```\njava -jar hello-world.jar db1 migrate helloworld.yml --migrations <path_to_db1_migrations.xml>\n```\n\nLANGUAGE: text\nCODE:\n```\njava -jar hello-world.jar db2 migrate helloworld.yml --migrations <path_to_db2_migrations.xml>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependency Injection for Testing in Dropwizard\nDESCRIPTION: This code shows how to provide alternate dependency injection configuration for testing, by extending the application configuration class and overriding methods to provide mock implementations. It also includes a test setup using DropwizardAppExtension.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/di.rst#2025-04-18_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class TestConfiguration extends ExampleConfiguration {\n\n    @Override\n    protected Class<?> getUserRepository() {\n        return MockUserRepository.class;\n    }\n}\n\n@DisplayName(\"User endpoint\")\n@ExtendWith(DropwizardExtensionsSupport.class)\npublic class UserControllerTests {\n    public static final DropwizardAppExtension<TestConfiguration> app = new DropwizardAppExtension<>(ExampleApplication.class, new TestConfiguration());\n}\n```\n\n----------------------------------------\n\nTITLE: Return Value Validation Gotcha Example\nDESCRIPTION: Illustrates a potential issue with return value validation where getter methods may be called multiple times during request processing, leading to unexpected behavior.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/validation.rst#2025-04-18_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n@Path(\"/\")\npublic class ValidatedResource {\n    private AtomicLong counter = new AtomicLong();\n\n    @GET\n    @Path(\"/foo\")\n    @NotEmpty\n    public String getFoo() {\n        counter.getAndIncrement();\n        return \"\";\n    }\n\n    @GET\n    @Path(\"/bar\")\n    public String getBar() {\n        return \"\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Error Pages in Dropwizard\nDESCRIPTION: Demonstrates how to register a custom ErrorEntityWriter for handling ErrorMessage objects in a Dropwizard application.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/views.rst#2025-04-18_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nenv.jersey().register(new ErrorEntityWriter<ErrorMessage>(MediaType.TEXT_HTML_TYPE) {\n    @Override\n    protected View getRepresentation(ErrorMessage errorMessage) {\n        return new ErrorView(errorMessage);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a FreeMarker Template for Dropwizard View\nDESCRIPTION: Example of a FreeMarker template file used with a Dropwizard View class.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/views.rst#2025-04-18_snippet_4\n\nLANGUAGE: none\nCODE:\n```\n<#-- @ftlvariable name=\"\" type=\"com.example.views.PersonView\" -->\n<html>\n    <body>\n        <!-- calls getPerson().getName() and sanitizes it -->\n        <h1>Hello, ${person.name?html}!</h1>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Registering HTTP Health Checks in a Dropwizard Application\nDESCRIPTION: Java code snippet showing the beginning of registering HTTP health checks in a Dropwizard application's run method.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_16\n\nLANGUAGE: java\nCODE:\n```\n    @Override\n    public void run(final AppConfiguration configuration, final Environment environment) {\n\n```\n\n----------------------------------------\n\nTITLE: Throwing WebApplicationException for Error Responses in Java\nDESCRIPTION: Shows how to throw a WebApplicationException from a resource method to return a 404 Not Found response with a custom error message when a requested collection doesn't exist.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_46\n\nLANGUAGE: java\nCODE:\n```\n@GET\n@Path(\"/{collection}\")\npublic Saying reduceCols(@PathParam(\"collection\") String collection) {\n    if (!collectionMap.containsKey(collection)) {\n        final String msg = String.format(\"Collection %s does not exist\", collection);\n        throw new WebApplicationException(msg, Status.NOT_FOUND)\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Mustache Template Not Found Errors in Dropwizard\nDESCRIPTION: Shows how to create a custom exception mapper for handling MustacheNotFoundException in a Dropwizard application.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/views.rst#2025-04-18_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nenv.jersey().register(new ExtendedExceptionMapper<MustacheNotFoundException>(env) {\n    @Override\n    public Response toResponse(MustacheNotFoundException e) {\n        return Response.status(Response.Status.NOT_FOUND).build();\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Injecting HttpSession into Jersey Resource Methods\nDESCRIPTION: Demonstrates how to inject an HttpSession object into a Jersey resource method using Dropwizard's @Session annotation.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_55\n\nLANGUAGE: java\nCODE:\n```\npublic Response doSomethingWithSessions(@Session HttpSession httpSession) {\n    return Response.ok().build();\n}\n```\n\n----------------------------------------\n\nTITLE: Registering AuthValueFactoryProvider.Binder\nDESCRIPTION: Code for registering the AuthValueFactoryProvider.Binder with your custom user type, which allows for injection of authenticated user objects into your resource methods.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes/upgrade-notes-0_9_x.rst#2025-04-18_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nenvironment.jersey().register(new AuthValueFactoryProvider.Binder(User.class));\n```\n\n----------------------------------------\n\nTITLE: Accessing Health State Data in Dropwizard\nDESCRIPTION: Demonstrates how to directly access health state view data in a Dropwizard application.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_18\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void run(final AppConfiguration configuration, final Environment environment) {\n    ...\n    Collection<HealthStateView> views = environment.health().healthStateAggregator().healthStateViews();\n}\n```\n\n----------------------------------------\n\nTITLE: Registering OpenSSLProvider in a Dropwizard Application\nDESCRIPTION: Java code sample showing how to register Google's Conscrypt OpenSSLProvider in a Dropwizard application for improved SSL performance.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n    :language: java\n    :start-after: // conscrypt: ConscryptApp->OpenSSLProvider\n    :end-before: // conscrypt: ConscryptApp->OpenSSLProvider\n    :dedent: 4\n```\n\n----------------------------------------\n\nTITLE: Initializing Environment Object in Dropwizard\nDESCRIPTION: This snippet shows the structure of the Environment class, which holds the long-lived Dropwizard environment. It includes components from the Bootstrap object and additional sub-environments for servlets, Jersey, and admin functionalities.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/internals.rst#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nEnvironment (...) {\n  // from bootstrap\n  this.objectMapper = ...\n  this.classLoader = ...  \n  this.metricRegistry = ...\n  this.healthCheckRegistry = ...\n  this.validator = bootstrap.getValidatorFactory().getValidator()\n\n  // extra:\n  this.bundles = new ArrayList<>();\n  this.configuredBundles = new ArrayList<>();\n\n  // sub-environments:\n  this.servletEnvironment = ... // -- exposed via the servlets() method \n  this.jerseyEnvironment = ... // -- exposed via the jersey() method \n  this.adminEnvironment = ... // -- exposed via the admin() method \n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Database Sources\nDESCRIPTION: Example configuration class for setting up multiple database sources for migrations.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/migrations.rst#2025-04-18_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleConfiguration extends Configuration {\n    @Valid\n    @NotNull\n    private DataSourceFactory database1 = new DataSourceFactory();\n\n    @Valid\n    @NotNull\n    private DataSourceFactory database2 = new DataSourceFactory();\n\n    @JsonProperty(\"database1\")\n    public DataSourceFactory getDb1DataSourceFactory() {\n        return database1;\n    }\n\n    @JsonProperty(\"database2\")\n    public DataSourceFactory getDb2DataSourceFactory() {\n        return database2;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Field Context Injection to Parameter Injection\nDESCRIPTION: Shows the recommended way to migrate from field-level context injection to parameter-level context injection for Dropwizard 2.0 compatibility.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes/upgrade-notes-2_0_x.rst#2025-04-18_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n  @Path(\"/\")\n  @Produces(MediaType.APPLICATION_JSON)\n  public class InfoResource {\n-     @Context\n-     UriInfo requestUri;\n  \n      @GET\n-     public String getInfo() {\n+     public String getInfo(@Context UriInfo requestUri) {\n          return requestUri.getRequestUri().toString()\n      }\n  }\n```\n\n----------------------------------------\n\nTITLE: Testing Resources with Grizzly Container\nDESCRIPTION: Example of using Grizzly test container for resource testing with @Context injection support.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/testing.rst#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@ExtendWith(DropwizardExtensionsSupport.class)\nclass ResourceTestWithGrizzly {\n    private static final ResourceExtension EXT = ResourceExtension.builder()\n            .setTestContainerFactory(new GrizzlyWebTestContainerFactory())\n            .addResource(new ExampleResource())\n            .build();\n\n    @Test\n    void testResource() {\n        assertThat(EXT.target(\"/example\").request()\n            .get(String.class))\n            .isEqualTo(\"example\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven JAR Plugin for Version Information in Dropwizard\nDESCRIPTION: Configures the Maven JAR plugin to embed project version information in the JAR's manifest as the Implementation-Version. This helps identify deployed application versions on production servers.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/getting-started.rst#2025-04-18_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-jar-plugin</artifactId>\n    <version>2.3.2</version>\n    <configuration>\n        <archive>\n            <manifest>\n                <addDefaultImplementationEntries>true</addDefaultImplementationEntries>\n            </manifest>\n        </archive>\n    </configuration>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: BeanParam Validation Limitations\nDESCRIPTION: Shows a limitation with validation when using BeanParam with setter methods annotated with parameter annotations. Error messages become less descriptive in this case.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/validation.rst#2025-04-18_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n@Path(\"/root\")\n@Produces(MediaType.APPLICATION_JSON)\npublic class Resource {\n\n    @GET\n    @Path(\"params\")\n    public String getBean(@Valid @BeanParam MyBeanParams params) {\n        return params.getField();\n    }\n\n    public static class MyBeanParams {\n        @NotEmpty\n        private String field;\n\n        public String getField() {\n            return field;\n        }\n\n        @QueryParam(\"foo\")\n        public void setField(String field) {\n            this.field = Strings.nullToEmpty(field).trim();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Testing Example\nDESCRIPTION: Demonstrates testing configuration object deserialization and validation using ObjectMapper and Validator.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/testing.rst#2025-04-18_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npublic class WidgetFactoryTest {\n\n    private final ObjectMapper objectMapper = Jackson.newObjectMapper();\n    private final Validator validator = Validators.newValidator();\n    private final YamlConfigurationFactory<WidgetFactory> factory =\n            new YamlConfigurationFactory<>(WidgetFactory.class, validator, objectMapper, \"dw\");\n\n    @Test\n    public void isDiscoverable() throws Exception {\n        assertThat(new DiscoverableSubtypeResolver().getDiscoveredSubtypes())\n                .contains(HammerFactory.class)\n                .contains(ChiselFactory.class);\n    }\n\n    @Test\n    public void testBuildAHammer() throws Exception {\n\n```\n\n----------------------------------------\n\nTITLE: Using DropwizardClientExtension for Test Doubles\nDESCRIPTION: Example of using DropwizardClientExtension to test client functionality by setting up a test resource and making HTTP requests.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/testing.rst#2025-04-18_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@ExtendWith(DropwizardExtensionsSupport.class)\nclass CustomClientTest {\n    @Path(\"/ping\")\n    public static class PingResource {\n        @GET\n        public String ping() {\n            return \"pong\";\n        }\n    }\n\n    private static final DropwizardClientExtension EXT = new DropwizardClientExtension(new PingResource());\n\n    @Test\n    void shouldPing() throws IOException {\n        final URL url = new URL(EXT.baseUri() + \"/ping\");\n        final String response = new BufferedReader(new InputStreamReader(url.openStream())).readLine();\n        assertEquals(\"pong\", response);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Template Errors in Dropwizard Views\nDESCRIPTION: Demonstrates how to create a custom exception mapper for handling ViewRenderException in a Dropwizard application.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/views.rst#2025-04-18_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nenv.jersey().register(new ExtendedExceptionMapper<ViewRenderException>(env) {\n    @Override\n    public Response toResponse(ViewRenderException e) {\n        LOGGER.error(\"Error rendering template\", e);\n        return Response.serverError().build();\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Conscrypt JCE Provider in YAML\nDESCRIPTION: YAML configuration for specifying Conscrypt as the JCE provider in a Dropwizard application.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n    :language: yaml\n```\n\n----------------------------------------\n\nTITLE: MessageQueue Configuration in YAML\nDESCRIPTION: A YAML configuration snippet showing how to configure a message queue with various required parameters including host, credentials, and virtual host.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmessageQueue:\n  host: queue.example.com\n  port: 5673\n  username: example_user\n  password: example_password\n  virtualHost: /example/path\n```\n\n----------------------------------------\n\nTITLE: Jersey 2.x GET Request Example\nDESCRIPTION: Demonstrates how to execute a GET request using Jersey 2.x client with response handling and assertions.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes/upgrade-notes-0_8_x.rst#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nfinal WebTarget target = ClientBuilder.newClient().target(\n        String.format(\"http://localhost:%d/api/user/1\", RULE.getLocalPort()));\n\nfinal Response response = target\n        .request(MediaType.APPLICATION_JSON_TYPE)\n        .accept(MediaType.APPLICATION_JSON_TYPE)\n        .get();\n\nassertThat(response.getStatus()).isEqualTo(Response.Status.OK.getStatusCode());\n\nfinal User user = response.readEntity(User.class);\nassertThat(user.getId()).isEqualTo(1L);\nassertThat(user.getFirstName()).isEqualTo(\"John\");\nassertThat(user.getLastName()).isEqualTo(\"Doe\");\n```\n\n----------------------------------------\n\nTITLE: Example of Prepended SQL Comments in Hibernate Queries\nDESCRIPTION: Illustrates how Dropwizard automatically configures Hibernate to add descriptive comments to all queries, making it easier to identify the origin of queries when debugging performance issues.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/hibernate.rst#2025-04-18_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n/* load com.example.helloworld.core.Person */\nselect\n    person0_.id as id0_0_,\n    person0_.fullName as fullName0_0_,\n    person0_.jobTitle as jobTitle0_0_\nfrom people person0_\nwhere person0_.id=?\n```\n\n----------------------------------------\n\nTITLE: Configuring Jackson to Fail on Unknown Properties in Dropwizard\nDESCRIPTION: Shows how to configure Dropwizard's ObjectMapper to fail when encountering unknown properties during deserialization.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_62\n\nLANGUAGE: java\nCODE:\n```\npublic void initialize(Bootstrap<ExampleConfiguration> bootstrap) {\n    bootstrap.getObjectMapper().enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ALPN Conscrypt Provider for HTTP/2 Support\nDESCRIPTION: XML snippet from a Maven POM file showing how to include the ALPN Conscrypt provider for HTTP/2 support in Dropwizard.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n    :language: xml\n    :start-after: <!-- conscrypt: jetty-alpn-conscrypt-server -->\n    :end-before: <!-- conscrypt: jetty-alpn-conscrypt-server -->\n    :dedent: 8\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration with Environment Variable Substitution\nDESCRIPTION: A YAML configuration file for widgets that includes an environment variable substitution for hammer weight. It defines default values using the ${VAR:-default} syntax pattern.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/testing.rst#2025-04-18_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nwidgets:\n  - type: hammer\n    weight: ${HAMMER_WEIGHT:-20}\n  - type: chisel\n    radius: 0.4\n```\n\n----------------------------------------\n\nTITLE: Updating Migrations Bundle in Dropwizard 0.7.x\nDESCRIPTION: When using 'dropwizard-migrations', update your Migrations bundle implementation by overriding the getDataSourceFactory method to provide migrations configuration.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes/upgrade-notes-0_7_x.rst#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\ngetDataSourceFactoryï»¿\n```\n\n----------------------------------------\n\nTITLE: Executing Database Status Check with Custom Command\nDESCRIPTION: Examples of checking database status using custom migration bundle commands (db1 and db2) instead of the default 'db' command.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/migrations.rst#2025-04-18_snippet_6\n\nLANGUAGE: text\nCODE:\n```\njava -jar hello-world.jar db1 status helloworld.yml\n```\n\nLANGUAGE: text\nCODE:\n```\njava -jar hello-world.jar db2 status helloworld.yml\n```\n\n----------------------------------------\n\nTITLE: Converting JSON Field Names to Snake Case in Dropwizard\nDESCRIPTION: Demonstrates how to use the @JsonSnakeCase annotation to automatically convert Java camelCase field names to snake_case in JSON output.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_60\n\nLANGUAGE: java\nCODE:\n```\n@JsonSnakeCase\npublic class Person {\n    private final String firstName;\n\n    @JsonCreator\n    public Person(@JsonProperty String firstName) {\n        this.firstName = firstName;\n    }\n\n    @JsonProperty\n    public String getFirstName() {\n        return firstName;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wildcard Domain for example.com in YAML\nDESCRIPTION: This YAML configuration line sets up a wildcard domain for example.com. It allows any subdomain of example.com to be matched, which is useful for domain-wide settings in web applications.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/client.rst#2025-04-18_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\n- '*.example.com'\n```\n\n----------------------------------------\n\nTITLE: Configuring External Logging in Dropwizard YAML\nDESCRIPTION: YAML configuration for marking the logging configuration as external in a Dropwizard application.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  type: simple\n  applicationContextPath: /application\n  adminContextPath: /admin\n  requestLog:\n    type: external\nlogging:\n  type: external\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Authentication\nDESCRIPTION: YAML configuration for setting up proxy authentication with Basic and NTLM support.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/client.rst#2025-04-18_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nproxy:\n     host: '192.168.52.11'\n     port: 8080\n     scheme : 'https'\n     auth:\n       username: 'secret'\n       password: 'stuff'\n     nonProxyHosts:\n       - 'localhost'\n       - '192.168.52.*'\n       - '*.example.com'\n```\n\nLANGUAGE: yaml\nCODE:\n```\nproxy:\n     host: '192.168.52.11'\n     port: 8080\n     scheme : 'https'\n     auth:\n       username: 'secret'\n       password: 'stuff'\n       authScheme: 'NTLM'\n       realm: 'realm'                    # optional, defaults to ANY_REALM\n       hostname: 'workstation'           # optional, defaults to null but may be required depending on your AD environment\n       domain: 'HYPERCOMPUGLOBALMEGANET' # optional, defaults to null but may be required depending on your AD environment\n       credentialType: 'NT'\n     nonProxyHosts:\n       - 'localhost'\n       - '192.168.52.*'\n```\n\n----------------------------------------\n\nTITLE: Jersey 2.x POST Request Example\nDESCRIPTION: Shows how to perform a POST request using Jersey 2.x client, including entity creation and response handling.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes/upgrade-notes-0_8_x.rst#2025-04-18_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nfinal WebTarget target = ClientBuilder.newClient().target(\n        String.format(\"http://localhost:%d/api/user\", RULE.getLocalPort()));\n\nfinal User user = new User(0L, \"John\", \"Doe\");\n\nfinal Response response = target\n        .request(MediaType.APPLICATION_JSON_TYPE)\n        .accept(MediaType.APPLICATION_JSON_TYPE)\n        .post(Entity.json(user));\n\nassertThat(response.getStatus()).isEqualTo(Response.Status.CREATED.getStatusCode());\n\nfinal URI location = response.getLocation();\nassertThat(location).isNotNull();\n\nfinal String path = location.getPath();\nfinal long newId = Long.parseLong(path.substring(path.lastIndexOf(\"/\") + 1));\nassertThat(newId).isGreaterThan(0);\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Bundle in Dropwizard\nDESCRIPTION: Configuration for serving static assets and handling multiple asset bundles in Dropwizard.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  rootPath: /api/\n```\n\n----------------------------------------\n\nTITLE: JSON Error Response Format in Dropwizard\nDESCRIPTION: Example of the JSON error response format returned when a WebApplicationException is thrown, showing the standard code and message structure.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_47\n\nLANGUAGE: json\nCODE:\n```\n{\"code\":404,\"message\":\"Collection foobar does not exist\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Console Logging in Dropwizard\nDESCRIPTION: YAML configuration for console logging in Dropwizard, showing how to set the threshold to WARN and target stderr instead of the default stdout.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nlogging:\n  appenders:\n    - type: console\n      threshold: WARN\n      target: stderr\n```\n\n----------------------------------------\n\nTITLE: Creating New Person via POST Request\nDESCRIPTION: CURL command to post new person data to the application's people endpoint\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/dropwizard-example/README.md#2025-04-18_snippet_4\n\nLANGUAGE: curl\nCODE:\n```\ncurl -H \"Content-Type: application/json\" -X POST -d '{\"fullName\":\"Other Person\",\"jobTitle\":\"Other Title\"}' http://localhost:8080/people\n```\n\n----------------------------------------\n\nTITLE: New Task.execute Method Signature\nDESCRIPTION: Shows the new signature of the Task.execute method in Dropwizard 2.0.x that uses Map<String,List<String>> for parameters.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes/upgrade-notes-2_0_x.rst#2025-04-18_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n    @Override\n    public void execute(Map<String,List<String>> parameters, PrintWriter output) throws Exception {\n```\n\n----------------------------------------\n\nTITLE: Configuring View Renderers in YAML\nDESCRIPTION: Example YAML configuration for FreeMarker and Mustache view renderers in a Dropwizard application.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/views.rst#2025-04-18_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nviewRendererConfiguration:\n  freemarker:\n    strict_syntax: yes\n    whitespace_stripping: yes\n  mustache:\n    cache: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Dependencies for Dropwizard Testing\nDESCRIPTION: Maven dependencies configuration required for testing authentication in Dropwizard applications. Includes dropwizard-testing and jersey-test-framework with exclusions for conflicting dependencies.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/auth.rst#2025-04-18_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n  <dependency>\n    <groupId>io.dropwizard</groupId>\n    <artifactId>dropwizard-testing</artifactId>\n    <version>${dropwizard.version}</version>\n  </dependency>\n  <dependency>\n    <groupId>org.glassfish.jersey.test-framework.providers</groupId>\n    <artifactId>jersey-test-framework-provider-grizzly2</artifactId>\n    <version>${jersey.version}</version>\n    <exclusions>\n      <exclusion>\n        <groupId>jakarta.servlet</groupId>\n        <artifactId>jakarta.servlet-api</artifactId>\n      </exclusion>\n      <exclusion>\n        <groupId>junit</groupId>\n        <artifactId>junit</artifactId>\n      </exclusion>\n    </exclusions>\n  </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Snake Case JSON Output Example in Dropwizard\nDESCRIPTION: Example of the JSON output for a class annotated with @JsonSnakeCase, showing how camelCase field names are converted to snake_case.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"first_name\": \"Coda\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Logback Bootstrapping in Dropwizard\nDESCRIPTION: Java code showing how to disable the bootstrapping of Logback in a Dropwizard application by overriding the bootstrapLogging method.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_28\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleApplication extends Application<ExampleConfiguration> {\n\n    @Override\n    protected void bootstrapLogging() {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Class with Field Context Injection in Jersey\nDESCRIPTION: Shows a resource class that uses field-level @Context injection, which works differently in Dropwizard 2.0 depending on how the resource is registered.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes/upgrade-notes-2_0_x.rst#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Path(\"/\")\n@Produces(MediaType.APPLICATION_JSON)\npublic class InfoResource {\n    @Context\n    UriInfo requestUri;\n\n    @GET\n    public String getInfo() {\n        return requestUri.getRequestUri().toString()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Caching in Dropwizard Views\nDESCRIPTION: YAML configuration to disable template caching for Mustache templates in a Dropwizard application.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/views.rst#2025-04-18_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nviewRendererConfiguration:\n  mustache:\n    cache: false\n```\n\n----------------------------------------\n\nTITLE: Running Dropwizard Application with Server Command\nDESCRIPTION: Shows the terminal command to start a Dropwizard application using the server command with a configuration file.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/getting-started.rst#2025-04-18_snippet_11\n\nLANGUAGE: text\nCODE:\n```\njava -jar target/hello-world-0.0.1-SNAPSHOT.jar server hello-world.yml\n```\n\n----------------------------------------\n\nTITLE: Creating New Person via API\nDESCRIPTION: cURL command to insert a new person record using the REST API with JSON payload.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/example.rst#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Content-Type: application/json\" -d '{\"fullName\":\"John Doe\", \"jobTitle\" : \"Chief Wizard\" }' http://localhost:8080/people\n```\n\n----------------------------------------\n\nTITLE: Updating Configuration Files in Dropwizard 0.7.x\nDESCRIPTION: Convert your 'app.yml' configuration file to use the new server layout which uses ServerFactory and ConnectorFactory for server configuration.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes/upgrade-notes-0_7_x.rst#2025-04-18_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nServerFactory\n```\n\nLANGUAGE: yaml\nCODE:\n```\nConnectorFactory\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Dropwizard Application\nDESCRIPTION: Commands for building and running the Dropwizard example application including database migration setup.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/example.rst#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install\njava -jar target/dropwizard-example-1.0.0.jar db migrate example.yml\njava -jar target/dropwizard-example-1.0.0.jar server example.yml\n```\n\n----------------------------------------\n\nTITLE: Initializing Dropwizard CLI Class in Java\nDESCRIPTION: This snippet shows the constructor of the CLI class, which is responsible for handling command-line arguments and running configured commands. It sets up the command parser and adds bootstrap commands.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/internals.rst#2025-04-18_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic Cli(location : JarLocation, bootstrap : Bootstrap<?>, \n\t\t   stdOut: OutputStream, stdErr: OutputStream) {\n  this.stdout = stdOut; this.stdErr = stdErr;\n  this.commands = new TreeMap<>();\n  this.parser = buildParser(location);\n  this.bootstrap = bootstrap;\n  for (command in bootstrap.commands) {\n    addCommand(command)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Dropwizard in IDE\nDESCRIPTION: Command to run the Dropwizard application from within an IDE environment.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/example.rst#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncom.example.helloworld.HelloWorldApplication server example.yml\n```\n\n----------------------------------------\n\nTITLE: Defining Database Migrations in XML\nDESCRIPTION: Example Liquibase migration XML showing how to create a new table with columns and constraints.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/migrations.rst#2025-04-18_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<databaseChangeLog\n        xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog\n         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd\">\n\n    <changeSet id=\"1\" author=\"codahale\">\n        <createTable tableName=\"people\">\n            <column name=\"id\" type=\"bigint\" autoIncrement=\"true\">\n                <constraints primaryKey=\"true\" nullable=\"false\"/>\n            </column>\n            <column name=\"fullName\" type=\"varchar(255)\">\n                <constraints nullable=\"false\"/>\n            </column>\n            <column name=\"jobTitle\" type=\"varchar(255)\"/>\n        </createTable>\n    </changeSet>\n</databaseChangeLog>\n```\n\n----------------------------------------\n\nTITLE: Example JSON Log Output for General Logging\nDESCRIPTION: Sample JSON log output produced by the json layout configuration, showing timestamp, level, logger, thread and message fields.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\"timestamp\":1515002688000, \"level\":\"INFO\",\"logger\":\"org.eclipse.jetty.server.Server\",\"thread\":\"main\",\"message\":\"Started @6505ms\"}\n```\n\n----------------------------------------\n\nTITLE: Starting Dropwizard Server\nDESCRIPTION: Command to start the Dropwizard application server using the configuration file\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/dropwizard-example/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\njava -jar target/dropwizard-example-$DW_VERSION.jar server example.yml\n```\n\n----------------------------------------\n\nTITLE: BeanParam Validation Error Response\nDESCRIPTION: Shows the error message format returned by Dropwizard when validation fails for a BeanParam. The error message is less descriptive than ideal.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/validation.rst#2025-04-18_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\"errors\":[\"getBean.arg0.field may not be empty\"]}\n```\n\n----------------------------------------\n\nTITLE: Sample YAML Configuration File for Dropwizard Application\nDESCRIPTION: This snippet provides an example YAML configuration file that will be deserialized into the HelloWorldConfiguration class. It defines template and defaultName properties used by the application.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/getting-started.rst#2025-04-18_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntemplate: Hello, %s!\ndefaultName: Stranger\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Representation Example\nDESCRIPTION: JSON schema example showing the structure of a Hello World response following RFC 1149 specification.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/getting-started.rst#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"id\": 1,\n  \"content\": \"Hi!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Person Data\nDESCRIPTION: cURL commands to retrieve person data in different formats including direct API call and template rendering.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/example.rst#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:8080/people/1\ncurl http://localhost:8080/people/1/view_freemarker\ncurl http://localhost:8080/people/1/view_mustache\n```\n\n----------------------------------------\n\nTITLE: Registering Resources in Dropwizard\nDESCRIPTION: Demonstrates two methods of registering resources in Dropwizard: registering an instance or registering the class. In Dropwizard 2.0, field context injection no longer works with the instance method.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes/upgrade-notes-2_0_x.rst#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void run(InfoConfiguration configuration, Environment environment) {\n    // 1. Register an instance of the resource\n    environment.jersey().register(new InfoResource());\n\n    // 2. Register the class as a resource\n    environment.jersey().register(InfoResource.class);\n}\n```\n\n----------------------------------------\n\nTITLE: Example SQL Query with JDBI3 Prepended Comments\nDESCRIPTION: Demonstrates how JDBI3 automatically prepends class and method information as SQL comments for debugging purposes.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/jdbi3.rst#2025-04-18_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n/* com.example.service.dao.UserDAO.findByName */\nSELECT id, name, email\nFROM users\nWHERE name = 'Coda';\n```\n\n----------------------------------------\n\nTITLE: Building Dropwizard Application with Maven\nDESCRIPTION: Commands to package the Dropwizard application using Apache Maven from the root directory\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/dropwizard-example/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd dropwizard\n./mvnw package\ncd dropwizard-example\n```\n\n----------------------------------------\n\nTITLE: Session Parameter Example in Resource Method\nDESCRIPTION: Example showing how to inject HTTP Session context into a resource method using annotations.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/about/release-notes.rst#2025-04-18_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n@Session HttpSession session\n```\n\n----------------------------------------\n\nTITLE: Configuring Dropwizard Environment with Database and CORS\nDESCRIPTION: This code snippet demonstrates how to set up a Dropwizard environment with database resources, CORS configuration, and health checks. It showcases the Bootstrap and Environment configuration for a Dropwizard application.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/dropwizard-assets/src/test/resources/assets/git-turd.txt#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic void configureDatabaseResources(Bootstrap<?> bootstrap) {\n  bootstrap.addBundle(hibernateBundle);\n}\n\n@Override\npublic void run(MyConfiguration configuration, Environment environment) {\n  configureCors(environment);\n  configureHealthChecks(environment);\n  environment.jersey().register(new AccountResource(accountService));\n  environment.jersey().register(new TransactionResource(transactionService));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Person Class with JSON Serialization\nDESCRIPTION: A sample Person class with JSON properties for name and email, using Jackson annotations for serialization/deserialization.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/testing.rst#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class Person {\n    private String name;\n    private String email;\n\n    private Person() {\n        // Jackson deserialization\n    }\n\n    public Person(String name, String email) {\n        this.name = name;\n        this.email = email;\n    }\n\n    @JsonProperty\n    public String getName() {\n        return name;\n    }\n\n    @JsonProperty\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    @JsonProperty\n    public String getEmail() {\n        return email;\n    }\n\n    @JsonProperty\n    public void setEmail(String email) {\n        this.email = email;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up OAuth Authentication Testing in Dropwizard\nDESCRIPTION: Configuration of ResourceExtension for testing OAuth authentication in Dropwizard. Uses GrizzlyWebTestContainerFactory and configures OAuthCredentialAuthFilter with authenticator and authorizer.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/auth.rst#2025-04-18_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n@ExtendWith(DropwizardExtensionsSupport.class)\npublic class OAuthResourceTest {\n\n    public ResourceExtension resourceExtension = ResourceExtension\n            .builder()\n            .setTestContainerFactory(new GrizzlyWebTestContainerFactory())\n            .addProvider(new AuthDynamicFeature(new OAuthCredentialAuthFilter.Builder<User>()\n                    .setAuthenticator(new MyOAuthAuthenticator())\n                    .setAuthorizer(new MyAuthorizer())\n                    .setRealm(\"SUPER SECRET STUFF\")\n                    .setPrefix(\"Bearer\")\n                    .buildAuthFilter()))\n            .addProvider(RolesAllowedDynamicFeature.class)\n            .addProvider(new AuthValueFactoryProvider.Binder<>(User.class))\n            .addResource(new ProtectedResource())\n            .build();\n}\n```\n\n----------------------------------------\n\nTITLE: Running Database Migration\nDESCRIPTION: Command to set up and migrate the H2 database using the Dropwizard migrations framework\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/dropwizard-example/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\njava -jar target/dropwizard-example-$DW_VERSION.jar db migrate example.yml\n```\n\n----------------------------------------\n\nTITLE: JSON Fixture for Person Object\nDESCRIPTION: Example JSON fixture file for testing Person serialization/deserialization.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/testing.rst#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"name\": \"Luther Blissett\",\n    \"email\": \"lb@example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Resources Registration in Dropwizard 0.7.x\nDESCRIPTION: Update how resources are registered with Jersey from using 'environment.addResource(resource)' to the new method 'environment.jersey().register(resource)'.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes/upgrade-notes-0_7_x.rst#2025-04-18_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nenvironment.addResource(resource)\n```\n\nLANGUAGE: java\nCODE:\n```\nenvironment.jersey().register(resource)\n```\n\n----------------------------------------\n\nTITLE: Adding Dropwizard Client Dependency\nDESCRIPTION: Maven dependency configuration for including dropwizard-client module in your project.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/client.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.dropwizard</groupId>\n    <artifactId>dropwizard-client</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Running Dropwizard Application JAR with Usage Information\nDESCRIPTION: Shows the console output when running a Dropwizard JAR file without arguments, which displays usage information for the available commands.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/getting-started.rst#2025-04-18_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nusage: java -jar hello-world-0.0.1-SNAPSHOT.jar\n       [-h] [-v] {server} ...\n\npositional arguments:\n  {server}               available commands\n\noptional arguments:\n  -h, --help             show this help message and exit\n  -v, --version          show the service version and exit\n```\n\n----------------------------------------\n\nTITLE: Service Class Method Signatures\nDESCRIPTION: Required method implementations for Service class configuration and initialization.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/about/release-notes.rst#2025-04-18_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n#initialize(Bootstrap<T>)\n#run(T, Environment)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Health Checks in Dropwizard Application\nDESCRIPTION: This code snippet demonstrates how to register health checks in a Dropwizard application. It configures a DatabaseHealthCheck tied to a session factory to monitor the database connection status.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/dropwizard-assets/src/test/resources/assets/git-turd.txt#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nprivate void configureHealthChecks(Environment environment) {\n  environment.healthChecks().register(\"database\", new DatabaseHealthCheck(hibernateBundle.getSessionFactory()));\n}\n```\n\n----------------------------------------\n\nTITLE: Maven Shade Plugin Configuration\nDESCRIPTION: XML configuration for the Maven Shade plugin to build a fat JAR containing all dependencies for deployment.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/getting-started.rst#2025-04-18_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-shade-plugin</artifactId>\n    <version>3.4.1</version>\n    <configuration>\n        <createDependencyReducedPom>true</createDependencyReducedPom>\n        <filters>\n            <filter>\n                <artifact>*:*</artifact>\n                <excludes>\n                    <exclude>META-INF/*.SF</exclude>\n                    <exclude>META-INF/*.DSA</exclude>\n                    <exclude>META-INF/*.RSA</exclude>\n                </excludes>\n            </filter>\n        </filters>\n    </configuration>\n    <executions>\n        <execution>\n            <phase>package</phase>\n            <goals>\n                <goal>shade</goal>\n            </goals>\n            <configuration>\n                <transformers>\n                    <transformer implementation=\"org.apache.maven.plugins.shade.resource.ServicesResourceTransformer\"/>\n                    <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n                        <mainClass>com.example.helloworld.HelloWorldApplication</mainClass>\n                    </transformer>\n                </transformers>\n            </configuration>\n        </execution>\n    </executions>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Resource Method with Explicit UnwrapValidatedValue (0.9.x Compatible)\nDESCRIPTION: Updated version of the code that explicitly sets @UnwrapValidatedValue(false) to clarify that the @NotNull constraint applies to the wrapper type and not the inner type.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes/upgrade-notes-0_9_x.rst#2025-04-18_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@GET\npublic String heads(@QueryParam(\"cheese\") @NotNull @UnwrapValidatedValue(false) IntParam secretSauce) {\n```\n\n----------------------------------------\n\nTITLE: Dropwizard Health Check Output\nDESCRIPTION: Shows the output of a Dropwizard health check endpoint, displaying the status of the template and deadlocks checks.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/getting-started.rst#2025-04-18_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n* deadlocks: OK\n* template: OK\n```\n\n----------------------------------------\n\nTITLE: Dropwizard Class Rule Configuration\nDESCRIPTION: Example of setting up a DropwizardAppRule for integration testing.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes/upgrade-notes-0_8_x.rst#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@ClassRule\npublic static final DropwizardAppRule<SportChefConfiguration> RULE = \n                    new DropwizardAppRule<>(App.class, \"config.yaml\");\n```\n\n----------------------------------------\n\nTITLE: Adding JSON Logging Support with Maven Dependency\nDESCRIPTION: XML Maven dependency configuration for adding JSON logging support to a Dropwizard project using dropwizard-json-logging module.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_34\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.dropwizard</groupId>\n    <artifactId>dropwizard-json-logging</artifactId>\n    <version>${dropwizard.version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Resource Method With Ambiguous UnwrapValidatedValue (Pre-0.9.x)\nDESCRIPTION: Example of code that would be ambiguous in Dropwizard 0.9.x due to the @NotNull annotation potentially applying to either the wrapper type (IntParam) or inner type (Integer).\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes/upgrade-notes-0_9_x.rst#2025-04-18_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@GET\npublic String heads(@QueryParam(\"cheese\") @NotNull IntParam secretSauce) {\n```\n\n----------------------------------------\n\nTITLE: Creating Jersey Client Without Grizzly Connector\nDESCRIPTION: Java code to create a Jersey client without the new Grizzly connector that's used by default in DropwizardAppExtension in Dropwizard 2.1.1. This reverts to the previous HttpURLConnection-based behavior.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes/upgrade-notes-2_1_x.rst#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nnew JerseyClientBuilder()\n    .register(new JacksonFeature(getObjectMapper()))\n    .property(ClientProperties.CONNECT_TIMEOUT, DEFAULT_CONNECT_TIMEOUT_MS)\n    .property(ClientProperties.READ_TIMEOUT, DEFAULT_READ_TIMEOUT_MS)\n    .property(HttpUrlConnectorProvider.SET_METHOD_WORKAROUND, true)\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Testing Dropwizard Configuration without Environment Variables\nDESCRIPTION: A basic test method for a WidgetFactory that builds a HammerFactory from a YAML configuration file. It verifies the correct instance type and checks the weight property of the created widget.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/testing.rst#2025-04-18_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nfinal WidgetFactory wid = factory.build(new ResourceConfigurationSourceProvider(), \"yaml/hammer.yml\");\nassertThat(wid).isInstanceOf(HammerFactory.class);\nassertThat(((HammerFactory) wid).createWidget().getWeight()).isEqualTo(10);\n```\n\n----------------------------------------\n\nTITLE: Adding Jersey RxJava2 Client Dependency\nDESCRIPTION: Maven dependency for including RxJava2 support in Jersey client.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/client.rst#2025-04-18_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.glassfish.jersey.ext.rx</groupId>\n    <artifactId>jersey-rx-client-rxjava2</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Including Conscrypt Dependency in Maven POM\nDESCRIPTION: XML snippet from a Maven POM file showing how to include Google's Conscrypt library for native SSL support in a Dropwizard application.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n    :language: xml\n    :start-after: <!-- conscrypt: conscrypt-openjdk-uber -->\n    :end-before: <!-- conscrypt: conscrypt-openjdk-uber -->\n    :dedent: 8\n```\n\n----------------------------------------\n\nTITLE: Updating Maven Dependencies for Dropwizard 0.7.x\nDESCRIPTION: Replace Maven dependencies from the old 'com.yammer.dropwizard' namespace to the new 'io.dropwizard' namespace in your pom.xml file.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes/upgrade-notes-0_7_x.rst#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\ncom.yammer.dropwizard\n```\n\nLANGUAGE: xml\nCODE:\n```\nio.dropwizard\n```\n\n----------------------------------------\n\nTITLE: Package Structure Changes for JPMS Support\nDESCRIPTION: Table showing the package structure changes in Dropwizard 3.0.0 to support Java Platform Module System (JPMS) by avoiding split packages across modules.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes/upgrade-notes-3_0_x.rst#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nMaven module           Old package               New package\ndropwizard-core      io.dropwizard           io.dropwizard.core\ndropwizard-logging   io.dropwizard.logging   io.dropwizard.logging.common\ndropwizard-metrics   io.dropwizard.metrics   io.dropwizard.metrics.common\ndropwizard-views     io.dropwizard.views     io.dropwizard.views.common\n```\n\n----------------------------------------\n\nTITLE: Building Static Documentation for Dropwizard\nDESCRIPTION: Commands to build the static HTML documentation and open it in the browser. The documentation is generated in the target/html directory.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# make html\n# open target/html/index.html\n```\n\n----------------------------------------\n\nTITLE: Building Live-Updating Documentation for Dropwizard\nDESCRIPTION: Commands to build the documentation with auto-refresh capabilities and open it in the browser. This starts a local server that automatically rebuilds the documentation when changes are detected.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# make livehtml\n# open http://127.0.0.1:8000/\n```\n\n----------------------------------------\n\nTITLE: Old JDBI 2.x Maven Dependency Declaration\nDESCRIPTION: Shows the old Maven coordinates for the JDBI 2.x integration module that was part of Dropwizard core modules in 1.x.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes/upgrade-notes-2_0_x.rst#2025-04-18_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Old artifact coordinates -->\n<dependency>\n    <groupId>io.dropwizard</groupId>\n    <artifactId>dropwizard-jdbi</artifactId>\n    <version>2.0.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Updating Package Imports for Dropwizard 0.7.x\nDESCRIPTION: Update all import statements throughout your codebase from 'com.yammer.dropwizard' to 'io.dropwizard' to match the new namespace.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes/upgrade-notes-0_7_x.rst#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\ncom.yammer.dropwizard\n```\n\nLANGUAGE: java\nCODE:\n```\nio.dropwizard\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Section and Version Links in reStructuredText\nDESCRIPTION: This snippet defines a section title and creates a list of hyperlinks to different versions of Dropwizard documentation using reStructuredText syntax. It includes versions from 0.6.2 to 1.3.x, with each link pointing to the corresponding documentation page.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/about/docs-index.rst#2025-04-18_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _docs-index:\n\n##############\nOther Versions\n##############\n\n- `1.3.x <https://www.dropwizard.io/en/release-1.3.x/>`_\n- `1.2.x <https://www.dropwizard.io/en/release-1.2.x/>`_\n- `1.1.x <https://www.dropwizard.io/en/release-1.1.x/>`_\n- `1.0.x <https://www.dropwizard.io/en/release-1.0.x/>`_\n- `0.9.x <https://www.dropwizard.io/en/release-0.9.x/>`_\n- `0.8.x <https://www.dropwizard.io/en/release-0.8.x/>`_\n- `0.7.x <https://www.dropwizard.io/en/release-0.7.x/>`_\n- `0.6.2 <http://dropwizard.github.io/dropwizard/0.6.2>`_\n```\n\n----------------------------------------\n\nTITLE: Example JSON Access Log Output\nDESCRIPTION: Sample JSON access log output produced by the access-json layout configuration, showing HTTP request details like method, URI, status code, and timing information.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\"timestamp\":1515002688000, \"method\":\"GET\",\"uri\":\"/hello-world\", \"status\":200, \"protocol\":\"HTTP/1.1\",\"contentLength\":37,\"remoteAddress\":\"127.0.0.1\",\"requestTime\":5, \"userAgent\":\"Mozilla/5.0\"}\n```\n\n----------------------------------------\n\nTITLE: Maven Build Output for Dropwizard Application Package\nDESCRIPTION: Shows the output of the Maven package phase when building a Dropwizard application, focusing on the inclusion of dependencies in the shaded JAR file.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/getting-started.rst#2025-04-18_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n[INFO] Including org.eclipse.jetty:jetty-util:jar:7.6.0.RC0 in the shaded jar.\n[INFO] Including com.google.guava:guava:jar:10.0.1 in the shaded jar.\n[INFO] Including com.google.code.findbugs:jsr305:jar:1.3.9 in the shaded jar.\n[INFO] Including org.hibernate:hibernate-validator:jar:4.2.0.Final in the shaded jar.\n[INFO] Including javax.validation:validation-api:jar:1.0.0.GA in the shaded jar.\n[INFO] Including org.yaml:snakeyaml:jar:1.9 in the shaded jar.\n[INFO] Replacing original artifact with shaded artifact.\n[INFO] Replacing /Users/yourname/Projects/hello-world/target/hello-world-0.0.1-SNAPSHOT.jar with /Users/yourname/Projects/hello-world/target/hello-world-0.0.1-SNAPSHOT-shaded.jar\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 8.415s\n[INFO] Finished at: Fri Dec 02 16:26:42 PST 2011\n[INFO] Final Memory: 11M/81M\n[INFO] ------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Updating Test Classes in Dropwizard 0.7.x\nDESCRIPTION: Update test classes that extend 'ResourceTest' to use the new 'ResourceTestRule' class instead for testing resources.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes/upgrade-notes-0_7_x.rst#2025-04-18_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nResourceTest\n```\n\nLANGUAGE: java\nCODE:\n```\nResourceTestRule\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Project Configuration\nDESCRIPTION: Basic YAML configuration that sets up a project named 'Mighty Wizard' with type attributes of coder and wizard. The configuration appears to be incomplete as the type array is not properly closed.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/dropwizard-configuration/src/test/resources/factory-test-malformed-advanced.txt#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Mighty Wizard\ntype: [ coder,wizard\n```\n\n----------------------------------------\n\nTITLE: Excluding Logback Dependencies from Dropwizard\nDESCRIPTION: XML configuration showing how to exclude Logback dependencies from the dropwizard-core artifact when using alternative logging implementations.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_26\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.dropwizard</groupId>\n    <artifactId>dropwizard-core</artifactId>\n    <version>{$dropwizard.version}</version>\n    <exclusions>\n        <exclusion>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-classic</artifactId>\n        </exclusion>\n        <exclusion>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-access</artifactId>\n        </exclusion>\n        <exclusion>\n            <groupId>org.slf4j</groupId>\n            <artifactId>log4j-over-slf4j</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Jersey 2.x Empty PUT Request Configuration\nDESCRIPTION: Demonstrates how to configure and execute empty PUT requests in Jersey 2.x, which requires special configuration.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes/upgrade-notes-0_8_x.rst#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nClient client = ClientBuilder.newClient();\nclient.property(ClientProperties.SUPPRESS_HTTP_COMPLIANCE_VALIDATION, true);\nWebTarget target = client.target(\n        String.format(\"http://localhost:%d/api/user\", RULE.getLocalPort()));\n\nResponse response = target\n        .request()\n        .put(null);\n\nassertThat(response.getStatus()).isEqualTo(Response.Status.OK.getStatusCode());\n```\n\n----------------------------------------\n\nTITLE: Adding Jackson Afterburner Module Dependency in Maven\nDESCRIPTION: XML Maven dependency declaration to include the Jackson Afterburner module, which will be preferred over the default Jackson Blackbird module in Dropwizard 2.1.x.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes/upgrade-notes-2_1_x.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.fasterxml.jackson.module</groupId>\n  <artifactId>jackson-module-afterburner</artifactId>\n  <!-- Unnecessary when using dropwizard-dependencies -->\n  <version>${jackson.version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Updating Database Configuration for Dropwizard 0.7.x\nDESCRIPTION: When using 'dropwizard-db', update your configuration class to use the new DataSourceFactory class for database configuration.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes/upgrade-notes-0_7_x.rst#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nDataSourceFactory\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Dropwizard Documentation\nDESCRIPTION: This code snippet defines the exact versions of Python packages required for Dropwizard's documentation system. It includes lesscpy for LESS compilation, Sphinx for documentation generation, sphinx-autobuild for automatic rebuilding, and sphinx-rtd-theme for styling.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/requirements.txt#2025-04-18_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nlesscpy==0.15.1\nSphinx==7.4.7\nsphinx-autobuild==2024.10.3\nsphinx-rtd-theme==3.0.2\n```\n\n----------------------------------------\n\nTITLE: Importing Dropwizard-Dependencies as BOM in Maven\nDESCRIPTION: Shows how to import dropwizard-dependencies as a BOM in Maven dependency management without the ability to override specific dependency versions.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes/upgrade-notes-2_0_x.rst#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependencyManagement>\n  <dependencies>\n    <dependency>\n      <groupId>io.dropwizard</groupId>\n      <artifactId>dropwizard-dependencies</artifactId>\n      <version>2.0.0</version>\n      <type>pom</type>\n      <scope>import</scope>\n    </dependency>\n  </dependencies>\n</dependencyManagement>\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Dependencies for Dropwizard\nDESCRIPTION: Command to install Sphinx and all required dependencies from the requirements.txt file. Sphinx is the documentation generator used for building the Dropwizard documentation.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Updating Hibernate Bundle in Dropwizard 0.7.x\nDESCRIPTION: When using 'dropwizard-hibernate', update your Hibernate bundle implementation by overriding the getDataSourceFactory method to provide hibernate configuration.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes/upgrade-notes-0_7_x.rst#2025-04-18_snippet_4\n\nLANGUAGE: java\nCODE:\n```\ngetDataSourceFactory\n```\n\n----------------------------------------\n\nTITLE: Executing Maven Release Preparation for Dropwizard\nDESCRIPTION: Command for preparing a Dropwizard release which sets the version for all Maven submodules, runs tests, and creates a tagged commit that triggers the release build on Travis CI.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/RELEASES.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./mvnw release:prepare\n```\n\n----------------------------------------\n\nTITLE: Accessing Hello World Endpoint\nDESCRIPTION: URL to access the Hello World example endpoint on the local server\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/dropwizard-example/README.md#2025-04-18_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nhttp://localhost:8080/hello-world\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Python Virtual Environment for Dropwizard Documentation\nDESCRIPTION: Commands to create a new Python virtual environment and activate it for documentation building. This isolates the documentation dependencies from the system Python installation.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# virtualenv .\n# source ./bin/activate\n```\n\n----------------------------------------\n\nTITLE: Creating H2 Database from SQL Script\nDESCRIPTION: Uses H2's RunScript tool to create a new database file from an SQL backup file. Required when performing major H2 upgrades that change the storage format.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/dropwizard-migrations/src/test/resources/create_test_db.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\njava -cp <path_to_h2.jar> org.h2.tools.RunScript -user sa -url jdbc:h2:file:./test-db -script ./test-db-backup.sql\n```\n\n----------------------------------------\n\nTITLE: Keybase Verification JSON Object for Dropwizard\nDESCRIPTION: This JSON object contains verification details for the Dropwizard project on Keybase, including the public key fingerprint, username, and service information for www.dropwizard.io.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/extras/keybase.txt#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"body\": {\n    \"key\": {\n      \"eldest_kid\": \"0101b8345e162488b40959cd83a6f70b2f9228f6672246c6eecf26d047c171fc40a10a\",\n      \"fingerprint\": \"eda86e9fb607b5fc9223fb767d4868b53e31e7ad\",\n      \"host\": \"keybase.io\",\n      \"key_id\": \"7d4868b53e31e7ad\",\n      \"kid\": \"0101b8345e162488b40959cd83a6f70b2f9228f6672246c6eecf26d047c171fc40a10a\",\n      \"uid\": \"b89b3b8fbd6b9e796d59fae1f544db19\",\n      \"username\": \"dropwizard\"\n    },\n    \"service\": {\n      \"hostname\": \"www.dropwizard.io\",\n      \"protocol\": \"https:\"\n    },\n    \"type\": \"web_service_binding\",\n    \"version\": 1\n  },\n  \"ctime\": 1552249261,\n  \"expire_in\": 157680000,\n  \"prev\": \"e99e58d602422977bb02640e9c6a9d164e71de0d14cfb80a631ea6185d806d0f\",\n  \"seqno\": 2,\n  \"tag\": \"signature\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Pull Request Template in Markdown\nDESCRIPTION: A structured template for pull request descriptions that includes sections for describing the problem context, implemented solution, and expected results.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/PULL_REQUEST_TEMPLATE.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n###### Problem:\\n<!-- Explain the context and why you're making that change. What is the problem you're trying to solve? In some cases there is not a problem and this can be thought of being the motivation for your change. -->\\n\\n###### Solution:\\n<!-- Describe the modifications you've done. -->\\n\\n###### Result:\\n<!-- What will change as a result of your pull request? Note that sometimes this section is unnecessary because it is self-explanatory based on the solution. -->\n```\n\n----------------------------------------\n\nTITLE: Generating H2 Database Backup Script\nDESCRIPTION: Uses H2's Script tool to create an SQL backup file from a newly migrated database. Used when Liquibase changelog changes require updating the test database backup.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/dropwizard-migrations/src/test/resources/create_test_db.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\njava -cp <path_to_h2.jar> org.h2.tools.Script -user sa -url jdbc:h2:file:./new-migrated-db -script ./test-db-backup.sql\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure\nDESCRIPTION: ReStructuredText markup defining the documentation structure including title, sections, and navigation tree for Dropwizard's documentation.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/index.rst#2025-04-18_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. title:: Home\n\n###################################################################################################\nDropwizard is a Java framework for developing ops-friendly, high-performance, RESTful web services.\n###################################################################################################\n\n.. image:: _static/dropwizard-logo.svg\n   :align: right\n   :width: 128px\n\n.. toctree::\n   :maxdepth: 1\n   :caption: General\n\n   Javadoc <https://javadoc.io/doc/io.dropwizard/dropwizard-project>\n   Release Notes <https://github.com/dropwizard/dropwizard/releases>\n   about/security\n   about/faq\n```\n\n----------------------------------------\n\nTITLE: Setting Custom URL Pattern - YAML Configuration (New Method)\nDESCRIPTION: Demonstrates the new approach for setting custom URL patterns using YAML configuration files.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes/upgrade-notes-0_8_x.rst#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  rootPath: '/api/*'\n```\n\n----------------------------------------\n\nTITLE: PGP Signature for Keybase Verification\nDESCRIPTION: This PGP message contains the cryptographic signature that verifies the Keybase claim for the Dropwizard project. The signature is created with the private key corresponding to the public key identified in the verification JSON.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/extras/keybase.txt#2025-04-18_snippet_1\n\nLANGUAGE: pgp\nCODE:\n```\n-----BEGIN PGP MESSAGE-----\nVersion: Keybase OpenPGP v2.1.0\nComment: https://keybase.io/crypto\n\nyMIsAnicrVJbSBRRGF7N1CzNhOjuw4keNJGZ2ZkzMxvdERKpoNIlMZY5c864w9rO\n7uyuW4ndEIQHr7L8jbpkuZjnr/vP95/gPJH+5+CfN/pn/vl/gf+fN/8OfsX/fN8f\nnyVpIy+zpXFx4fPGpvOfvwfC7GJZy0MVK/NWtLF+A2kGnHu3+OPqRZyMCVlQiWMA\nD1RIkq/4BhfOK7F1dBJKZJ/Asr9Z/f8Hd2ndpXUvtq5ZVTfwlvav/9G/ZVcM/fPE\nTtLZYZ85vNNRPi9OnOxEb9q09s8PpP5Eqn/PD50Nm+Oz9uR+P9Y/3pL/8J/gHlzJ\nyvpM+Uxy8HChN+vYt4Ke3wfn20s7DpQca/Y0Z0T2ndkwHPfU60h9Ys3Nm7mpFsJB\nZ+t2ZLPXuK5NXc+tE9MtJYeM++vfFN98fOxcbtG9J6fbTlxp7rNNxw/7LiXdOxmI\nas95Gjd97Gnd0OJjl9vXnVIRxZqGGCtdFzY8aEtryx9d6N+b2dT7YMv4xLsLK7aK\nw1WT8blptTfjHhV1hbYvHepYRYvLs8+27vryNv9L3LLanGdnB0u7e6f2D9XWDFfl\n9KyZiq/2FE4cT3KWfr8YPhh5bvdIy5FtFw/EJr5xXz67+XDB5I6qwfiE7B9RQ5dL\n0nuUloWHWbnNXs9oKNc3nXzr28F41+RwyUcj+1VhXtTJqMxD5aVlrddbqmemNwdu\nRbcmPdlX92PwW0r9nfWnD/x4uXnKkZN3oKIktfhO5Myi5uHX7SfW5x6YOFkTl3rn\n+cL85V25Q1FJB4ciXbEHaldrMXEp3oOl3dfmM6KHPk4e6FgczLpYnT6d8GDrjZP5\nUxlpndWNZtXOK4NDMUG3x9P4bqr4zPYT+s/S+sQj/wJt4Lrl\n=KTJD\n-----END PGP MESSAGE-----\n```\n\n----------------------------------------\n\nTITLE: Running Dropwizard Server Command in Bash\nDESCRIPTION: This snippet demonstrates how to run a Dropwizard application from the command line, specifying the server command and configuration file.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/internals.rst#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\njava -jar target/hello-world-0.0.1-SNAPSHOT.jar server hello-world.yml\n```\n\n----------------------------------------\n\nTITLE: Testing Authenticated Resource with curl\nDESCRIPTION: Shell command for testing a protected resource using HTTP Basic authentication, which shows how to pass credentials in a curl request.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes/upgrade-notes-0_9_x.rst#2025-04-18_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ curl 'testUser:secret@localhost:8080/protected'\nHey there, testUser. You know the secret!\n```\n\n----------------------------------------\n\nTITLE: Jersey 2.x Filter Registration\nDESCRIPTION: Shows the updated way to register request/response filters in Jersey 2.x compared to the old method.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes/upgrade-notes-0_8_x.rst#2025-04-18_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nenv.jersey().register(new AuthorizationFilter());\n```\n\n----------------------------------------\n\nTITLE: Setting Custom URL Pattern - Java Configuration (Old Method)\nDESCRIPTION: Shows the deprecated way of setting custom URL patterns in Dropwizard using Java code.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes/upgrade-notes-0_8_x.rst#2025-04-18_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nenvironment.jersey().setUrlPattern(\"/api/*\");\n```\n\n----------------------------------------\n\nTITLE: Updating Maven Java Version Configuration for Dropwizard 0.7.x\nDESCRIPTION: Update the Maven compiler plugin configuration to use Java 1.7 as both source and target versions, which is required for Dropwizard 0.7.x.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes/upgrade-notes-0_7_x.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nmaven-compiler-plugin\n```\n\n----------------------------------------\n\nTITLE: New JDBI 2.x Maven Dependency Declaration\nDESCRIPTION: Shows the new Maven coordinates for the JDBI 2.x integration module which has been moved out of Dropwizard core modules in 2.0.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes/upgrade-notes-2_0_x.rst#2025-04-18_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<!-- New artifact coordinates -->\n<dependency>\n    <groupId>io.dropwizard.modules</groupId>\n    <artifactId>dropwizard-jdbi</artifactId>\n    <version>2.0.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Enabling FAIL_ON_UNKNOWN_PROPERTIES in Jackson\nDESCRIPTION: Shows how to revert to Dropwizard 1.x behavior by enabling DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, which is now disabled by default in Dropwizard 2.0.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes/upgrade-notes-2_0_x.rst#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic void initialize(Bootstrap<ExampleConfiguration> bootstrap) {\n    bootstrap.getObjectMapper().enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Parameter Validation Limitations\nDESCRIPTION: Illustrates a limitation with validating Optional parameters that are nested, where the unwrapping mechanism can't handle multiple levels of wrapping.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/validation.rst#2025-04-18_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@GET\n// Similarly, the underlying validation framework can't unwrap nested types (an integer wrapped\n// in an IntParam wrapped in an Optional), regardless if `Unwrapping.Unwrap.class` is used\npublic Person retrieve(@QueryParam(\"num\") @Max(3) Optional<IntParam> num) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying ASCII Art Logo for Dropwizard Project\nDESCRIPTION: This ASCII art represents the Dropwizard project name in a stylized text format. It's likely used for visual branding in console output, documentation, or application startup screens.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/dropwizard-jetty/src/test/resources/assets/new-banner.txt#2025-04-18_snippet_0\n\nLANGUAGE: plain text\nCODE:\n```\nd8888b. db    db .88b  d88. .88b  d88. db    db \n88  `8D 88    88 88'YbdP`88 88'YbdP`88 `8b  d8' \n88   88 88    88 88  88  88 88  88  88  `8bd8'  \n88   88 88    88 88  88  88 88  88  88    88    \n88  .8D 88b  d88 88  88  88 88  88  88    88    \nY8888D' ~Y8888P' YP  YP  YP YP  YP  YP    YP    \n                                                \n```\n\n----------------------------------------\n\nTITLE: Enum Definition for Validation Example\nDESCRIPTION: Defines an enum that will be used in a validation example, providing a set of valid choices.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/validation.rst#2025-04-18_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic enum Choice {\n    OptionA,\n    OptionB,\n    OptionC\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Mockito Dependency in Maven POM (XML)\nDESCRIPTION: This snippet shows how to add Mockito as a test dependency in the project's Maven POM file. This is now required due to changes introduced in PR #1851.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes/upgrade-notes-1_1_x.rst#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.mockito</groupId>\n    <artifactId>mockito-core</artifactId>\n    <version>2.7.6</version>\n    <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Old Task.execute Method Signature\nDESCRIPTION: Shows the old signature of the Task.execute method in Dropwizard 1.x that used ImmutableMultimap for parameters.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes/upgrade-notes-2_0_x.rst#2025-04-18_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n    @Override\n    public void execute(ImmutableMultimap<String, String> parameters, PrintWriter output) throws Exception {\n```\n\n----------------------------------------\n\nTITLE: Flash Message Injection Example\nDESCRIPTION: Example showing how to inject flash messages between requests using annotations.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/about/release-notes.rst#2025-04-18_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n@Session Flash message\n```\n\n----------------------------------------\n\nTITLE: Viewing People List\nDESCRIPTION: Command to open the people list endpoint in a browser\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/dropwizard-example/README.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nopen http://localhost:8080/people\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Exception Mapper for Jackson Exceptions\nDESCRIPTION: Demonstrates how to override Dropwizard's default exception mapper for JSON processing exceptions with a custom implementation.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/core.rst#2025-04-18_snippet_50\n\nLANGUAGE: java\nCODE:\n```\npublic class JsonProcessingExceptionMapper implements ExceptionMapper<JsonProcessingException> {\n    @Override\n    public Response toResponse(JsonProcessingException exception) {\n        // create the response\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Dropwizard Upgrade Notes in reStructuredText\nDESCRIPTION: This snippet defines a table of contents using reStructuredText syntax. It lists links to upgrade notes for different versions of Dropwizard, from 0.7.x to 4.0.x.\nSOURCE: https://github.com/dropwizard/dropwizard/blob/release/4.0.x/docs/source/manual/upgrade-notes.rst#2025-04-18_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _upgrade-notes:\n\n#############\nUpgrade Notes\n#############\n\n.. toctree::\n   :titlesonly:\n\n   upgrade-notes/upgrade-notes-0_7_x.rst\n   upgrade-notes/upgrade-notes-0_8_x.rst\n   upgrade-notes/upgrade-notes-0_9_x.rst\n   upgrade-notes/upgrade-notes-1_0_x.rst\n   upgrade-notes/upgrade-notes-1_1_x.rst\n   upgrade-notes/upgrade-notes-2_0_x.rst\n   upgrade-notes/upgrade-notes-2_1_x.rst\n   upgrade-notes/upgrade-notes-3_0_x.rst\n   upgrade-notes/upgrade-notes-4_0_x.rst\n```"
  }
]