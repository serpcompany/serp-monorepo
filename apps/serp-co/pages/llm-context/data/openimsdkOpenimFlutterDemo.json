[
  {
    "owner": "openimsdk",
    "repo": "openim-flutter-demo",
    "content": "TITLE: Configuring AMap Web Keys in Dart\nDESCRIPTION: This snippet shows where to configure the AMap webKey and webServerKey in the Dart code (config.dart).  These keys are required for using AMap functionality within the application.  The keys are obtained from the AMap developer console.\nSOURCE: https://github.com/openimsdk/openim-flutter-demo/blob/main/CONFIGKEY.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\n  static const webKey = 'webKey';\n  static const webServerKey = 'webServerKey';\n```\n\n----------------------------------------\n\nTITLE: Configure AMap Web Keys (Dart)\nDESCRIPTION: This snippet shows how to configure the AMap webKey and webServerKey in the `config.dart` file. These keys are required to use the AMap service in your application. Replace the placeholder values with your actual AMap web service keys obtained from the AMap developer console.\nSOURCE: https://github.com/openimsdk/openim-flutter-demo/blob/main/CONFIGKEY.zh-CN.md#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\n  static const webKey = 'webKey';\n  static const webServerKey = 'webServerKey';\n```\n\n----------------------------------------\n\nTITLE: Setting Offline Push Info in Dart\nDESCRIPTION: This code snippet shows how to set the OfflinePushInfo when sending a message. It allows customizing the title, description, and iOS badge count for offline push notifications. If not customized, the title defaults to the app name, and the description defaults to \"You received a new message\".\nSOURCE: https://github.com/openimsdk/openim-flutter-demo/blob/main/CONFIGKEY.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\n  final offlinePushInfo = OfflinePushInfo(\n  title: \"Fill in the title\",\n  desc: \"Fill in the description, such as the message content\",\n  iOSBadgeCount: true,\n  );\n  // If you do not customize offlinePushInfo, the title defaults to the app name, and the desc defaults to \"You received a new message\"\n```\n\n----------------------------------------\n\nTITLE: Set Offline Push Info (Dart)\nDESCRIPTION: This snippet demonstrates how to set the `offlinePushInfo` when sending a message. The `title` and `desc` parameters define the content of the push notification banner. `iOSBadgeCount` controls whether to increment the badge count on iOS. If `offlinePushInfo` is not customized, the title defaults to the app name and the description defaults to \"You received a new message\".\nSOURCE: https://github.com/openimsdk/openim-flutter-demo/blob/main/CONFIGKEY.zh-CN.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\n  final offlinePushInfo = OfflinePushInfo(\n    title: \"填写标题\",\n    desc: \"填写描述信息，例如消息内容\",\n    iOSBadgeCount: true,\n  );\n  // 如果不自定义offlinePushInfo，则title默认为app名称，desc默认为为“你收到了一条新消息”\n```\n\n----------------------------------------\n\nTITLE: Configuring Getui Keys in Gradle (Android)\nDESCRIPTION: This snippet demonstrates how to configure the Getui AppID and vendor-specific (Xiaomi, Meizu, Huawei, OPPO, VIVO, HONOR) app IDs and keys in the Android app's build.gradle file for offline push notifications.  It utilizes manifestPlaceholders to inject these values into the AndroidManifest.xml. Correct configuration of these values enables push notifications from different vendors.\nSOURCE: https://github.com/openimsdk/openim-flutter-demo/blob/main/CONFIGKEY.md#_snippet_1\n\nLANGUAGE: Gradle\nCODE:\n```\n  manifestPlaceholders = [\n      GETUI_APPID    : \"\",\n      XIAOMI_APP_ID  : \"\",\n      XIAOMI_APP_KEY : \"\",\n      MEIZU_APP_ID   : \"\",\n      MEIZU_APP_KEY  : \"\",\n      HUAWEI_APP_ID  : \"\",\n      OPPO_APP_KEY   : \"\",\n      OPPO_APP_SECRET: \"\",\n      VIVO_APP_ID    : \"\",\n      VIVO_APP_KEY   : \"\",\n      HONOR_APP_ID  : \"\",\n  ]\n```\n\n----------------------------------------\n\nTITLE: Configure Getui Push Credentials - Android (Gradle)\nDESCRIPTION: This snippet shows how to configure the manifest placeholders in the `build.gradle` file for Getui and various vendor push notification services (Xiaomi, Meizu, Huawei, OPPO, VIVO, HONOR). These placeholders are used by the Getui SDK during the build process to inject the necessary credentials into the Android manifest. Replace the empty strings with the actual IDs and keys provided by each vendor's developer console.\nSOURCE: https://github.com/openimsdk/openim-flutter-demo/blob/main/CONFIGKEY.zh-CN.md#_snippet_1\n\nLANGUAGE: Gradle\nCODE:\n```\n  manifestPlaceholders = [\n      GETUI_APPID    : \"\",\n      XIAOMI_APP_ID  : \"\",\n      XIAOMI_APP_KEY : \"\",\n      MEIZU_APP_ID   : \"\",\n      MEIZU_APP_KEY  : \"\",\n      HUAWEI_APP_ID  : \"\",\n      OPPO_APP_KEY   : \"\",\n      OPPO_APP_SECRET: \"\",\n      VIVO_APP_ID    : \"\",\n      VIVO_APP_KEY   : \"\",\n      HONOR_APP_ID   : \"\",\n  ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Getui Keys in Dart (iOS)\nDESCRIPTION: This snippet shows the Dart code in push_controller.dart where you need to configure the Getui appID, appKey, and appSecret for iOS offline push notifications when using Getui in mainland China.  It requires obtaining these keys from the Getui developer console. The keys are used to initialize the Getui SDK.\nSOURCE: https://github.com/openimsdk/openim-flutter-demo/blob/main/CONFIGKEY.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\n  const appID = 'your-app-id';\n  const appKey = 'your-app-key';\n  const appSecret = 'your-app-secret';\n```\n\n----------------------------------------\n\nTITLE: Configure Getui Push Credentials - iOS (Dart)\nDESCRIPTION: This snippet shows how to configure the Getui App ID, App Key, and App Secret for iOS push notifications in the `push_controller.dart` file.  These values are necessary for the Getui SDK to properly register the device and send push notifications. You need to replace the placeholder values with your actual Getui credentials obtained from the Getui console.\nSOURCE: https://github.com/openimsdk/openim-flutter-demo/blob/main/CONFIGKEY.zh-CN.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\n  const appID = 'your-app-id';\n  const appKey = 'your-app-key';\n  const appSecret = 'your-app-secret';\n```\n\n----------------------------------------\n\nTITLE: Modifying Server Configuration in Dart\nDESCRIPTION: This snippet shows how to modify the server IP address or domain in the `config.dart` file. The `_host` constant needs to be updated to point to the deployed OpenIM server. If the server ports haven't been changed, only the IP or domain needs to be updated.\nSOURCE: https://github.com/openimsdk/openim-flutter-demo/blob/main/README.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nstatic const _host = \"your-server-ip or your-domain\";\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenIM Server Host in Dart\nDESCRIPTION: This Dart code snippet shows how to configure the OpenIM server host.  Replace `your-server-ip or your-domain` with the actual IP address or domain name of your OpenIM server. This configuration is crucial for the Flutter application to connect to the correct server.\nSOURCE: https://github.com/openimsdk/openim-flutter-demo/blob/main/README.zh-CN.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nstatic const _host = \"your-server-ip or your-domain\";\n```\n\n----------------------------------------\n\nTITLE: Keeping OpenIM Classes from Obfuscation\nDESCRIPTION: These ProGuard rules are used to prevent code obfuscation for specific OpenIM SDK classes.  This is necessary to ensure that these classes are not renamed or removed during the build process, which can cause runtime errors if the code relies on reflection or specific class names.\nSOURCE: https://github.com/openimsdk/openim-flutter-demo/blob/main/README.zh-CN.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n-keep class io.openim.**{*;}\n-keep class open_im_sdk.**{*;}\n-keep class open_im_sdk_callback.**{*;}\n```\n\n----------------------------------------\n\nTITLE: Disabling Code Shrinking in Android Gradle\nDESCRIPTION: This configuration snippet, placed in the `android/app/build.gradle` file under the `release` build type, disables code shrinking, ProGuard, and resource shrinking. This is useful for preventing issues caused by code obfuscation in release builds, particularly if obfuscation is causing runtime errors or preventing the app from functioning correctly.\nSOURCE: https://github.com/openimsdk/openim-flutter-demo/blob/main/README.zh-CN.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrelease {\n    minifyEnabled false\n    useProguard false\n    shrinkResources false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NDK ABI Filters for Android Emulator Compatibility\nDESCRIPTION: This code snippet configures the NDK (Native Development Kit) ABI (Application Binary Interface) filters in the Android build.gradle file. It specifies the target CPU architectures for the application, allowing it to run on Android emulators that may not support all architectures. By including \"armeabi-v7a\" and \"x86\", the app can run on emulators using these architectures.\nSOURCE: https://github.com/openimsdk/openim-flutter-demo/blob/main/README.md#_snippet_5\n\nLANGUAGE: gradle\nCODE:\n```\nndk {\n    abiFilters \"armeabi-v7a\",  \"x86\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NDK ABI Filters in Android Gradle\nDESCRIPTION: This configuration, added to the `android/build.gradle` file, specifies the CPU architectures to include in the Android build. Including `armeabi-v7a` and `x86` allows the application to run on a wider range of Android emulators, including those based on x86 architecture.\nSOURCE: https://github.com/openimsdk/openim-flutter-demo/blob/main/README.zh-CN.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nndk {\n    abiFilters \"armeabi-v7a\",  \"x86\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building Release Android App without Shrinking\nDESCRIPTION: This command builds a release version of the Android application without code shrinking (obfuscation). This is useful for debugging release builds where code shrinking might be causing issues. If this command doesn't work, further configuration is required in `android/app/build.gradle`.\nSOURCE: https://github.com/openimsdk/openim-flutter-demo/blob/main/README.zh-CN.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nflutter build release --no-shrink\n```\n\n----------------------------------------\n\nTITLE: Building Android Application with Flutter\nDESCRIPTION: This command builds an Android application package (APK) using Flutter. The resulting APK file can then be installed and run on Android devices.\nSOURCE: https://github.com/openimsdk/openim-flutter-demo/blob/main/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nflutter build apk\n```\n\n----------------------------------------\n\nTITLE: Building Android Application with Flutter\nDESCRIPTION: This command is used to build an Android application package (APK) using Flutter. It compiles the Flutter code and assets into an APK file, which can then be installed on Android devices.\nSOURCE: https://github.com/openimsdk/openim-flutter-demo/blob/main/README.zh-CN.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nflutter build apk\n```\n\n----------------------------------------\n\nTITLE: Building iOS Application with Flutter\nDESCRIPTION: This command builds an iOS application package (IPA) using Flutter. The resulting IPA file can then be used for testing or distribution on iOS devices.\nSOURCE: https://github.com/openimsdk/openim-flutter-demo/blob/main/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nflutter build ipa\n```\n\n----------------------------------------\n\nTITLE: Building iOS Application with Flutter\nDESCRIPTION: This command is used to build an iOS application package (IPA) using Flutter.  It compiles the Flutter code and assets into an IPA file, which can then be distributed for iOS devices or submitted to the App Store.\nSOURCE: https://github.com/openimsdk/openim-flutter-demo/blob/main/README.zh-CN.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nflutter build ipa\n```\n\n----------------------------------------\n\nTITLE: Cloning the OpenIM Flutter Demo Repository\nDESCRIPTION: This command clones the OpenIM Flutter demo repository from GitHub to your local machine and navigates into the project directory. It's the first step in setting up the development environment.\nSOURCE: https://github.com/openimsdk/openim-flutter-demo/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/openimsdk/openim-flutter-demo.git\ncd openim-flutter-demo\n```\n\n----------------------------------------\n\nTITLE: Cloning the OpenIM Flutter Demo Repository using Git\nDESCRIPTION: This command is used to clone the OpenIM Flutter Demo repository from GitHub to your local machine. It ensures you have the latest source code to start with, and allows you to work on the project locally. After cloning, the `cd` command navigates into the cloned directory.\nSOURCE: https://github.com/openimsdk/openim-flutter-demo/blob/main/README.zh-CN.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/openimsdk/openim-flutter-demo.git\ncd openim-flutter-demo\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Dependencies\nDESCRIPTION: This command cleans the Flutter project and installs all necessary dependencies specified in the `pubspec.yaml` file.  It resolves and downloads the required packages for the project to function correctly.\nSOURCE: https://github.com/openimsdk/openim-flutter-demo/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflutter clean\nflutter pub get\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Dependencies\nDESCRIPTION: These commands are used to clean the Flutter project and install the required dependencies. `flutter clean` removes build artifacts, ensuring a fresh build. `flutter pub get` fetches all the necessary packages specified in the `pubspec.yaml` file, resolving any version conflicts.\nSOURCE: https://github.com/openimsdk/openim-flutter-demo/blob/main/README.zh-CN.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflutter clean \nflutter pub get\n```\n\n----------------------------------------\n\nTITLE: Declaring a Constant String in Dart\nDESCRIPTION: This code snippet demonstrates how to declare a constant string variable in Dart. The `const` keyword ensures that the variable's value is known at compile time and cannot be changed during runtime. This is useful for storing values that are fixed and known in advance.\nSOURCE: https://github.com/openimsdk/openim-flutter-demo/blob/main/openim_live/README.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nconst like = 'sample';\n```\n\n----------------------------------------\n\nTITLE: Define a String Constant\nDESCRIPTION: This code snippet defines a constant string variable named 'like' and assigns it the value 'sample'. It demonstrates a simple Dart declaration and assignment.\nSOURCE: https://github.com/openimsdk/openim-flutter-demo/blob/main/openim_common/README.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nconst like = 'sample';\n```"
  }
]