[
  {
    "owner": "sqlite",
    "repo": "sqlite",
    "content": "TITLE: Compiling SQLite on Unix-like Systems\nDESCRIPTION: Step-by-step commands to compile SQLite on Unix-like systems, including installing dependencies, unpacking source code, configuring the build environment, and building various targets.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\napt install gcc make tcl-dev  ;#  Make sure you have all the necessary build tools\ntar xzf sqlite.tar.gz         ;#  Unpack the source tree into \"sqlite\"\nmkdir bld                     ;#  Build will occur in a sibling directory\ncd bld                        ;#  Change to the build directory\n../sqlite/configure           ;#  Run the configure script\nmake sqlite3                  ;#  Builds the \"sqlite3\" command-line tool\nmake sqlite3.c                ;#  Build the \"amalgamation\" source file\nmake sqldiff                  ;#  Builds the \"sqldiff\" command-line tool\n# Makefile targets below this point require tcl-dev\nmake tclextension-install     ;#  Build and install the SQLite TCL extension\nmake devtest                  ;#  Run development tests\nmake releasetest              ;#  Run full release tests\nmake sqlite3_analyzer         ;#  Builds the \"sqlite3_analyzer\" tool\n```\n\n----------------------------------------\n\nTITLE: Building SQLite Components Requiring TCL\nDESCRIPTION: Make commands for building SQLite components and running tests that require TCL. These targets depend on the TCL installation.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/compile-for-unix.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake tclextension-install\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake devtest\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake releasetest\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake sqlite3_analyzer\n```\n\n----------------------------------------\n\nTITLE: Generating Series Virtual Table in C for SQLite\nDESCRIPTION: The series.c file demonstrates an implementation of the 'generate_series' virtual table for SQLite, useful as a pattern for developing custom virtual tables.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/misc/README.md#2025-04-22_snippet_6\n\nLANGUAGE: C\nCODE:\n```\n// Generate series virtual table\n// Template for custom virtual tables\n#include <sqlite3ext.h>\n// Additional C code implementation...\n```\n\n----------------------------------------\n\nTITLE: Building SQLite DLL with Specific Features using nmake\nDESCRIPTION: Builds the SQLite DLL (`sqlite3.dll`) and its corresponding definition file (`sqlite3.def`) using `nmake` and `Makefile.msc`. The `USE_NATIVE_LIBPATHS=1` option is specified, and the `OPTS` parameter provides a string of C preprocessor defines (`-D...`) to enable various optional features like FTS3, FTS4, FTS5, RTREE, JSON1, GEOPOLY, SESSION, PREUPDATE_HOOK, SERIALIZE, and MATH_FUNCTIONS.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/compile-for-windows.md#2025-04-22_snippet_13\n\nLANGUAGE: cmd\nCODE:\n```\nnmake /f Makefile.msc sqlite3.dll USE_NATIVE_LIBPATHS=1 \"OPTS=-DSQLITE_ENABLE_FTS3=1 -DSQLITE_ENABLE_FTS4=1 -DSQLITE_ENABLE_FTS5=1 -DSQLITE_ENABLE_RTREE=1 -DSQLITE_ENABLE_JSON1=1 -DSQLITE_ENABLE_GEOPOLY=1 -DSQLITE_ENABLE_SESSION=1 -DSQLITE_ENABLE_PREUPDATE_HOOK=1 -DSQLITE_ENABLE_SERIALIZE=1 -DSQLITE_ENABLE_MATH_FUNCTIONS=1\"\n```\n\n----------------------------------------\n\nTITLE: Implementing In-Memory VFS for SQLite in C\nDESCRIPTION: The memvfs.c file implements a custom virtual file system (VFS) to store an entire SQLite database in RAM, providing sample code for creating a simple VFS setup.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/misc/README.md#2025-04-22_snippet_4\n\nLANGUAGE: C\nCODE:\n```\n// Custom in-memory VFS\n// Stores SQLite db in RAM\n#include <sqlite3.h>\n// Additional C code implementation...\n```\n\n----------------------------------------\n\nTITLE: Building SQLite Command-Line Executable using nmake\nDESCRIPTION: Compiles the SQLite command-line interface (`sqlite3.exe`) using `nmake` and `Makefile.msc`. This target builds the interactive shell for managing SQLite databases and does not require TCL.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/compile-for-windows.md#2025-04-22_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\nnmake /f makefile.msc sqlite3.exe\n```\n\n----------------------------------------\n\nTITLE: Recursive Table Creation with JSON Data in SQLite\nDESCRIPTION: Creates a temporary table 't2' to store JSON text using recursive common table expressions. It generates JSON objects with random values and inserts them into 't2', demonstrating complex JSON operations and recursive data generation.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/test/json/jsonb-q1.txt#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TEMP TABLE t2(x JSON TEXT);\nWITH RECURSIVE\n  c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<25000),\n  array1(y) AS (\n    SELECT json_group_array(\n             json_object('x',x,'y',random(),'z',hex(randomblob(50)))\n           )\n      FROM c\n  ),\n  c2(n) AS (VALUES(1) UNION ALL SELECT n+1 FROM c2 WHERE n<5)\nINSERT INTO t2(x)\n  SELECT jsonb_object('a',n,'b',n*2,'c',y,'d',3,'e',5,'f',6) FROM array1, c2;\n```\n\n----------------------------------------\n\nTITLE: Indexing and Updating JSON Fields in SQLite\nDESCRIPTION: Creates indexes on specific JSON attributes within the 't2' table and performs updates using JSON functions. This includes incrementing and decrementing JSON values and removing a JSON field, showcasing SQLite's JSON manipulation capabilities.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/test/json/jsonb-q1.txt#2025-04-22_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE INDEX t2x1 ON t2(x->>'a');\nCREATE INDEX t2x2 ON t2(x->>'b');\nCREATE INDEX t2x3 ON t2(x->>'e');\nCREATE INDEX t2x4 ON t2(x->>'f');\nUPDATE t2 SET x=jsonb_replace(x,'$.f',(x->>'f')+1);\nUPDATE t2 SET x=jsonb_set(x,'$.e',(x->>'f')-1);\nUPDATE t2 SET x=jsonb_remove(x,'$.d');\n```\n\n----------------------------------------\n\nTITLE: Using the Java JNI Binding to Register a Custom SQLite Collation\nDESCRIPTION: Provides an example of registering a custom collation named 'mycollation' using the idiomatic Java JNI binding. It utilizes an anonymous inner class implementing `SomeCallbackType` to define the required `call` method (for comparison), an optional `xDestroy` method, and include optional local state within the callback object itself.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/jni/README.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nint rc = sqlite3_create_collation(db, \"mycollation\", SQLITE_UTF8, new SomeCallbackType(){\n\n  // Required comparison function:\n  @Override public int call(byte[] lhs, byte[] rhs){ ... }\n\n  // Optional finalizer function:\n  @Override public void xDestroy(){ ... }\n\n  // Optional local state:\n  private String localState1 =\n    \"This is local state. There are many like it, but this one is mine.\";\n  private MyStateType localState2 = new MyStateType();\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: SQLite3 JNI Hello World Example\nDESCRIPTION: Demonstrates basic database operations using SQLite3 JNI bindings including opening an in-memory database, error handling, and proper resource cleanup. Shows the importance of explicitly closing database connections.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/jni/README.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport org.sqlite.jni.*;\nimport static org.sqlite.jni.CApi.*;\n\n...\n\nfinal sqlite3 db = sqlite3_open(\":memory:\");\ntry {\n  final int rc = sqlite3_errcode(db);\n  if( 0 != rc ){\n    if( null != db ){\n      System.out.print(\"Error opening db: \"+sqlite3_errmsg(db));\n    }else{\n      System.out.print(\"Error opening db: rc=\"+rc);\n    }\n    ... handle error ...\n  }\n  // ... else use the db ...\n}finally{\n  // ALWAYS close databases using sqlite3_close() or sqlite3_close_v2()\n  // when done with them. All of their active statement handles must\n  // first have been passed to sqlite3_finalize().\n  sqlite3_close_v2(db);\n}\n```\n\n----------------------------------------\n\nTITLE: Loading ICU Collation Sequences in SQLite\nDESCRIPTION: SQL commands demonstrating how to register and use ICU collation sequences with different locales.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/icu/README.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT icu_load_collation('tr_TR', 'turkish');\nSELECT icu_load_collation('en_AU', 'australian');\n\nCREATE TABLE aust_turkish_penpals(\n  australian_penpal_name TEXT COLLATE australian,\n  turkish_penpal_name    TEXT COLLATE turkish\n);\n```\n\n----------------------------------------\n\nTITLE: Building Statically Linked sqlite3_analyzer.exe using nmake\nDESCRIPTION: Builds the `sqlite3_analyzer.exe` utility, statically linking the TCL library into the executable. This requires the static TCL library (e.g., `tcl90s.lib`) to have been built previously and placed in the appropriate TCL `lib` directory. The `STATICALLY_LINK_TCL=1` argument instructs `nmake` to perform the static linking, removing the runtime dependency on the TCL DLL.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/compile-for-windows.md#2025-04-22_snippet_16\n\nLANGUAGE: cmd\nCODE:\n```\nSTATICALLY_LINK_TCL=1\n```\n\nLANGUAGE: cmd\nCODE:\n```\nnmake /f Makefile.msc STATICALLY_LINK_TCL=1 sqlite3_analyzer.exe\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating Geopoly Virtual Table\nDESCRIPTION: Creates a virtual table using geopoly extension and transforms coordinate data into polygon shapes.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/rtree/visual01.txt#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE VIRTUAL TABLE geo1 USING geopoly(type,clr);\nINSERT INTO geo1(_shape,type,clr)\n  SELECT geopoly_xform(jshape,A,B,-B,A,xoff,yoff), basis.name, xform.clr\n    FROM basis, xform, xyoff\n   WHERE xyoff.id1=basis.rowid AND xyoff.id2=xform.rowid;\n```\n\n----------------------------------------\n\nTITLE: Building SQLDiff Utility using nmake\nDESCRIPTION: Builds the `sqldiff.exe` utility program using `nmake` and `Makefile.msc`. This tool computes the differences between two SQLite database files. TCL installation is not required for this build target.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/compile-for-windows.md#2025-04-22_snippet_5\n\nLANGUAGE: cmd\nCODE:\n```\nnmake /f makefile.msc sqldiff.exe\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Using Inline Hex Database in SQLite CLI\nDESCRIPTION: Shows a comprehensive example of embedding a hex database dump directly in a script. The example creates a small database with a table and runs queries against it. This allows creating test databases with specific content or deliberate corruptions.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/tool/dbtotxt.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n.open --hexdb\n| size 8192 pagesize 4096 filename x9.db\n| page 1 offset 0\n|      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.\n|     16: 10 00 01 01 00 40 20 20 00 00 00 04 00 00 00 02   .....@  ........\n|     32: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 04   ................\n|     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................\n|     80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04   ................\n|     96: 00 2e 30 38 0d 00 00 00 01 0f c0 00 0f c0 00 00   ..08............\n|   4032: 3e 01 06 17 11 11 01 69 74 61 62 6c 65 74 31 74   >......itablet1t\n|   4048: 31 02 43 52 45 41 54 45 20 54 41 42 4c 45 20 74   1.CREATE TABLE t\n|   4064: 31 28 78 2c 79 20 44 45 46 41 55 4c 54 20 78 27   1(x,y DEFAULT x'\n|   4080: 66 66 27 2c 7a 20 44 45 46 41 55 4c 54 20 30 29   ff',z DEFAULT 0)\n| page 2 offset 4096\n|      0: 0d 08 14 00 04 00 10 00 0e 05 0a 0f 04 15 00 10   ................\n|     16: 88 02 03 05 90 04 0e 08 00 00 00 00 00 00 00 00   ................\n|   1040: 00 00 00 00 ff 87 7c 02 05 8f 78 0e 08 00 00 00   ......|...x.....\n|   2064: 00 00 00 ff 0c 0a 01 fb 00 00 00 00 00 00 00 00   ................\n|   2560: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 83   ................\n|   2576: 78 01 05 87 70 0e 08 00 00 00 00 00 00 00 00 00   x...p...........\n|   3072: 00 00 00 00 00 00 00 00 00 ff 00 00 01 fb 00 00   ................\n|   3584: 00 00 00 00 00 83 78 00 05 87 70 0e 08 00 00 00   ......x...p.....\n|   4080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff   ................\n| end x9.db\nSELECT rowid FROM t1;\nPRAGMA integrity_check;\n```\n\n----------------------------------------\n\nTITLE: Building SQLite Amalgamation Source File using nmake\nDESCRIPTION: Uses `nmake` with the `Makefile.msc` to generate the `sqlite3.c` amalgamation source file. This single C file contains the entire SQLite library source code, simplifying integration into other projects. No TCL installation is required for this target.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/compile-for-windows.md#2025-04-22_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\nnmake /f makefile.msc sqlite3.c\n```\n\n----------------------------------------\n\nTITLE: SQL Rot13 Function Template in C for SQLite\nDESCRIPTION: The rot13.c file provides a simple SQL function using a rot13 substitution, serving as a template for creating custom SQL functions in SQLite.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/misc/README.md#2025-04-22_snippet_5\n\nLANGUAGE: C\nCODE:\n```\n// Simple rot13 SQL function\n// Template for custom functions\n#include <sqlite3ext.h>\n// Additional C code implementation...\n```\n\n----------------------------------------\n\nTITLE: Using ICU Case Mapping Functions in SQLite\nDESCRIPTION: Examples of using the ICU-based upper() and lower() functions for Unicode case mapping, including language-specific case mapping with locales.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/icu/README.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nupper('abc') -> 'ABC'\nlower('ABC') -> 'abc'\nlower('I', 'en_us') -> 'i'\nlower('I', 'tr_tr') -> 'ı'\n```\n\n----------------------------------------\n\nTITLE: Configuring TCL Installation in Unix Environment\nDESCRIPTION: Commands for configuring and installing TCL (Tool Command Language) in a user-specific directory. This is an optional step for certain SQLite build targets.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/compile-for-unix.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir $HOME/local\n```\n\nLANGUAGE: bash\nCODE:\n```\n./configure --prefix=$HOME/local\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake install\n```\n\n----------------------------------------\n\nTITLE: SQL IN Operator Rewrite Example\nDESCRIPTION: Shows how SQLite optimizes an IN operator with 1-2 values by rewriting it as OR conditions.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/src/in-operator.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nx IN (y1,y2)\nx=y1 OR x=y2\n```\n\n----------------------------------------\n\nTITLE: Running Pattern-Matched Tests\nDESCRIPTION: Commands to run tests matching a specific pattern like 'fts5'.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/testrunner.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./testfixture $TESTDIR/testrunner.tcl fts5%\n./testfixture $TESTDIR/testrunner.tcl 'fts5*'\n```\n\n----------------------------------------\n\nTITLE: SHA3 SQL Functions in SQLite with Custom Implementation in C\nDESCRIPTION: The shathree.c file includes SQL functions sha3() and sha3_query() for computing SHA-3 hashes, avoiding naming conflicts with older extensions by using 'shathree'.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/misc/README.md#2025-04-22_snippet_7\n\nLANGUAGE: C\nCODE:\n```\n// SHA-3 SQL functions\n// Avoids naming conflicts with SHA-1\n#include <sqlite3ext.h>\n// Additional C code implementation...\n```\n\n----------------------------------------\n\nTITLE: Performing a Dry Run with testrunner.tcl (Shell)\nDESCRIPTION: Shows how to use the `--dryrun` option with `testrunner.tcl` for the 'mdevtest' configuration. This logs the shell commands that would be executed to `testrunner.log` instead of running them. Requires `tclsh` and the `testrunner.tcl` script.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/testrunner.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n# Log the shell commmands that make up the mdevtest test.\\ntclsh $TESTDIR/testrunner.tcl --dryrun mdevtest\"\n```\n\n----------------------------------------\n\nTITLE: Parametrizing SQL SELECT Query on JSON in SQLite\nDESCRIPTION: Runs a SELECT query on a table 'data1' to retrieve the 'rowid' and a specific label from a JSON field where the label is not null. The label value is set via a parameter, allowing dynamic query execution based on input.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/test/json/jsonb-q1.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n.param set $label 'q87'\nSELECT rowid, x->>$label FROM data1 WHERE x->>$label IS NOT NULL;\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating Temporary SQLite Tables - SQL\nDESCRIPTION: This snippet includes SQL commands to create temporary tables ('basis', 'xform', 'xyoff') and populate them with data representing shapes, transformations, and their offsets for positioning. Each table serves a specific purpose: 'basis' stores shape definitions, 'xform' stores transformation matrices, and 'xyoff' records positional offsets. These tables enable querying and manipulation of shapes for rendering on a canvas, working within constraints of SQLite's SQL capabilities.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/rtree/visual01.txt#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TEMP TABLE basis(name TEXT, jshape TEXT);\nINSERT INTO basis(name,jshape) VALUES\n  ('box-20','[[0,0],[20,0],[20,20],[0,20],[0,0]]'),\n  ('house-70','[[0,0],[50,0],[50,50],[25,70],[0,50],[0,0]]'),\n  ('line-40','[[0,0],[40,0],[40,5],[0,5],[0,0]]'),\n  ('line-80','[[0,0],[80,0],[80,7],[0,7],[0,0]]'),\n  ('arrow-50','[[0,0],[25,25],[0,50],[15,25],[0,0]]'),\n  ('triangle-30','[[0,0],[30,0],[15,30],[0,0]]'),\n  ('angle-30','[[0,0],[30,0],[30,30],[26,30],[26,4],[0,4],[0,0]]'),\n  ('star-10','[[1,0],[5,2],[9,0],[7,4],[10,8],[7,7],[5,10],[3,7],[0,8],[3,4],[1,0]]');\nCREATE TEMP TABLE xform(A,B,C,D,clr);\nINSERT INTO xform(A,B,clr) VALUES\n  (1,0,'black'),\n  (0.707,0.707,'blue'),\n  (0.5,0.866,'red'),\n  (-0.866,0.5,'green');\nCREATE TEMP TABLE xyoff(id1,id2,xoff,yoff,PRIMARY KEY(id1,id2,xoff,yoff)) WITHOUT ROWID;\nINSERT INTO xyoff VALUES(1,1,811,659);\nINSERT INTO xyoff VALUES(1,1,235,550);\nINSERT INTO xyoff VALUES(1,1,481,620);\nINSERT INTO xyoff VALUES(1,1,106,494);\nINSERT INTO xyoff VALUES(1,1,487,106);\nINSERT INTO xyoff VALUES(1,1,817,595);\nINSERT INTO xyoff VALUES(1,1,240,504);\nINSERT INTO xyoff VALUES(1,1,806,457);\nINSERT INTO xyoff VALUES(1,1,608,107);\nINSERT INTO xyoff VALUES(1,1,768,662);\nINSERT INTO xyoff VALUES(1,2,808,528);\nINSERT INTO xyoff VALUES(1,2,768,528);\nINSERT INTO xyoff VALUES(1,2,771,171);\nINSERT INTO xyoff VALUES(1,2,275,671);\nINSERT INTO xyoff VALUES(1,2,326,336);\nINSERT INTO xyoff VALUES(1,2,690,688);\nINSERT INTO xyoff VALUES(1,2,597,239);\nINSERT INTO xyoff VALUES(1,2,317,528);\nINSERT INTO xyoff VALUES(1,2,366,223);\nINSERT INTO xyoff VALUES(1,2,621,154);\nINSERT INTO xyoff VALUES(1,3,829,469);\nINSERT INTO xyoff VALUES(1,3,794,322);\nINSERT INTO xyoff VALUES(1,3,358,387);\nINSERT INTO xyoff VALUES(1,3,184,444);\nINSERT INTO xyoff VALUES(1,3,729,500);\nINSERT INTO xyoff VALUES(1,3,333,523);\nINSERT INTO xyoff VALUES(1,3,117,595);\nINSERT INTO xyoff VALUES(1,3,496,201);\nINSERT INTO xyoff VALUES(1,3,818,601);\nINSERT INTO xyoff VALUES(1,3,541,343);\nINSERT INTO xyoff VALUES(1,4,603,248);\nINSERT INTO xyoff VALUES(1,4,761,649);\nINSERT INTO xyoff VALUES(1,4,611,181);\nINSERT INTO xyoff VALUES(1,4,607,233);\nINSERT INTO xyoff VALUES(1,4,860,206);\nINSERT INTO xyoff VALUES(1,4,310,231);\nINSERT INTO xyoff VALUES(1,4,727,539);\nINSERT INTO xyoff VALUES(1,4,660,661);\nINSERT INTO xyoff VALUES(1,4,403,133);\nINSERT INTO xyoff VALUES(1,4,619,331);\nINSERT INTO xyoff VALUES(2,1,712,578);\nINSERT INTO xyoff VALUES(2,1,567,313);\nINSERT INTO xyoff VALUES(2,1,231,423);\nINSERT INTO xyoff VALUES(2,1,490,175);\nINSERT INTO xyoff VALUES(2,1,898,353);\nINSERT INTO xyoff VALUES(2,1,589,483);\nINSERT INTO xyoff VALUES(2,1,188,462);\nINSERT INTO xyoff VALUES(2,1,720,106);\nINSERT INTO xyoff VALUES(2,1,793,380);\nINSERT INTO xyoff VALUES(2,1,154,396);\nINSERT INTO xyoff VALUES(2,2,324,218);\nINSERT INTO xyoff VALUES(2,2,120,327);\nINSERT INTO xyoff VALUES(2,2,655,133);\nINSERT INTO xyoff VALUES(2,2,516,603);\nINSERT INTO xyoff VALUES(2,2,529,572);\nINSERT INTO xyoff VALUES(2,2,481,212);\nINSERT INTO xyoff VALUES(2,2,802,107);\nINSERT INTO xyoff VALUES(2,2,234,509);\nINSERT INTO xyoff VALUES(2,2,501,269);\nINSERT INTO xyoff VALUES(2,2,349,553);\nINSERT INTO xyoff VALUES(2,3,495,685);\nINSERT INTO xyoff VALUES(2,3,897,372);\nINSERT INTO xyoff VALUES(2,3,350,681);\nINSERT INTO xyoff VALUES(2,3,832,257);\nINSERT INTO xyoff VALUES(2,3,778,149);\nINSERT INTO xyoff VALUES(2,3,683,426);\nINSERT INTO xyoff VALUES(2,3,693,217);\nINSERT INTO xyoff VALUES(2,3,746,317);\nINSERT INTO xyoff VALUES(2,3,805,369);\nINSERT INTO xyoff VALUES(2,3,336,585);\nINSERT INTO xyoff VALUES(2,4,890,255);\nINSERT INTO xyoff VALUES(2,4,556,565);\nINSERT INTO xyoff VALUES(2,4,865,555);\nINSERT INTO xyoff VALUES(2,4,230,293);\nINSERT INTO xyoff VALUES(2,4,247,251);\nINSERT INTO xyoff VALUES(2,4,730,563);\nINSERT INTO xyoff VALUES(2,4,318,282);\nINSERT INTO xyoff VALUES(2,4,220,431);\nINSERT INTO xyoff VALUES(2,4,828,336);\nINSERT INTO xyoff VALUES(2,4,278,525);\nINSERT INTO xyoff VALUES(3,1,324,656);\nINSERT INTO xyoff VALUES(3,1,625,362);\nINSERT INTO xyoff VALUES(3,1,155,570);\nINSERT INTO xyoff VALUES(3,1,267,433);\nINSERT INTO xyoff VALUES(3,1,599,121);\nINSERT INTO xyoff VALUES(3,1,873,498);\nINSERT INTO xyoff VALUES(3,1,789,520);\nINSERT INTO xyoff VALUES(3,1,656,378);\nINSERT INTO xyoff VALUES(3,1,831,601);\nINSERT INTO xyoff VALUES(3,1,256,471);\nINSERT INTO xyoff VALUES(3,2,332,258);\nINSERT INTO xyoff VALUES(3,2,305,463);\nINSERT INTO xyoff VALUES(3,2,796,341);\nINSERT INTO xyoff VALUES(3,2,830,229);\nINSERT INTO xyoff VALUES(3,2,413,271);\nINSERT INTO xyoff VALUES(3,2,269,140);\nINSERT INTO xyoff VALUES(3,2,628,441);\nINSERT INTO xyoff VALUES(3,2,747,643);\nINSERT INTO xyoff VALUES(3,2,584,435);\nINSERT INTO xyoff VALUES(3,2,784,314);\nINSERT INTO xyoff VALUES(3,3,722,233);\nINSERT INTO xyoff VALUES(3,3,815,421);\nINSERT INTO xyoff VALUES(3,3,401,267);\nINSERT INTO xyoff VALUES(3,3,451,650);\nINSERT INTO xyoff VALUES(3,3,329,485);\nINSERT INTO xyoff VALUES(3,3,878,370);\nINSERT INTO xyoff VALUES(3,3,162,616);\nINSERT INTO xyoff VALUES(3,3,844,183);\nINSERT INTO xyoff VALUES(3,3,161,216);\nINSERT INTO xyoff VALUES(3,3,176,676);\nINSERT INTO xyoff VALUES(3,4,780,128);\nINSERT INTO xyoff VALUES(3,4,566,121);\nINSERT INTO xyoff VALUES(3,4,646,120);\nINSERT INTO xyoff VALUES(3,4,223,557);\nINSERT INTO xyoff VALUES(3,4,251,117);\nINSERT INTO xyoff VALUES(3,4,139,209);\nINSERT INTO xyoff VALUES(3,4,813,597);\nINSERT INTO xyoff VALUES(3,4,454,538);\nINSERT INTO xyoff VALUES(3,4,616,198);\nINSERT INTO xyoff VALUES(3,4,210,159);\nINSERT INTO xyoff VALUES(4,1,208,415);\nINSERT INTO xyoff VALUES(4,1,326,665);\nINSERT INTO xyoff VALUES(4,1,612,133);\nINSERT INTO xyoff VALUES(4,1,537,513);\nINSERT INTO xyoff VALUES(4,1,638,438);\nINSERT INTO xyoff VALUES(4,1,808,269);\nINSERT INTO xyoff VALUES(4,1,552,121);\nINSERT INTO xyoff VALUES(4,1,100,189);\nINSERT INTO xyoff VALUES(4,1,643,664);\nINSERT INTO xyoff VALUES(4,1,726,378);\nINSERT INTO xyoff VALUES(4,2,478,409);\nINSERT INTO xyoff VALUES(4,2,497,507);\nINSERT INTO xyoff VALUES(4,2,233,148);\nINSERT INTO xyoff VALUES(4,2,587,237);\nINSERT INTO xyoff VALUES(4,2,604,166);\nINSERT INTO xyoff VALUES(4,2,165,455);\nINSERT INTO xyoff VALUES(4,2,320,258);\nINSERT INTO xyoff VALUES(4,2,353,496);\nINSERT INTO xyoff VALUES(4,2,347,495);\nINSERT INTO xyoff VALUES(4,2,166,622);\nINSERT INTO xyoff VALUES(4,3,461,332);\nINSERT INTO xyoff VALUES(4,3,685,278);\nINSERT INTO xyoff VALUES(4,3,427,594);\nINSERT INTO xyoff VALUES(4,3,467,346);\nINSERT INTO xyoff VALUES(4,3,125,548);\nINSERT INTO xyoff VALUES(4,3,597,680);\nINSERT INTO xyoff VALUES(4,3,820,445);\nINSERT INTO xyoff VALUES(4,3,144,330);\nINSERT INTO xyoff VALUES(4,3,557,434);\nINSERT INTO xyoff VALUES(4,3,254,315);\nINSERT INTO xyoff VALUES(4,4,157,339);\nINSERT INTO xyoff VALUES(4,4,249,220);\nINSERT INTO xyoff VALUES(4,4,391,323);\nINSERT INTO xyoff VALUES(4,4,589,429);\nINSERT INTO xyoff VALUES(4,4,859,592);\nINSERT INTO xyoff VALUES(4,4,337,680);\nINSERT INTO xyoff VALUES(4,4,410,288);\nINSERT INTO xyoff VALUES(4,4,636,596);\nINSERT INTO xyoff VALUES(4,4,734,433);\nINSERT INTO xyoff VALUES(4,4,559,549);\nINSERT INTO xyoff VALUES(5,1,549,607);\nINSERT INTO xyoff VALUES(5,1,584,498);\nINSERT INTO xyoff VALUES(5,1,699,116);\nINSERT INTO xyoff VALUES(5,1,525,524);\nINSERT INTO xyoff VALUES(5,1,304,667);\nINSERT INTO xyoff VALUES(5,1,302,232);\nINSERT INTO xyoff VALUES(5,1,403,149);\nINSERT INTO xyoff VALUES(5,1,824,403);\nINSERT INTO xyoff VALUES(5,1,697,203);\nINSERT INTO xyoff VALUES(5,1,293,689);\nINSERT INTO xyoff VALUES(5,2,199,275);\nINSERT INTO xyoff VALUES(5,2,395,393);\nINSERT INTO xyoff VALUES(5,2,657,642);\nINSERT INTO xyoff VALUES(5,2,200,655);\nINSERT INTO xyoff VALUES(5,2,882,234);\nINSERT INTO xyoff VALUES(5,2,483,565);\nINSERT INTO xyoff VALUES(5,2,755,640);\nINSERT INTO xyoff VALUES(5,2,810,305);\nINSERT INTO xyoff VALUES(5,2,731,655);\nINSERT INTO xyoff VALUES(5,2,466,690);\nINSERT INTO xyoff VALUES(5,3,563,584);\nINSERT INTO xyoff VALUES(5,3,491,117);\nINSERT INTO xyoff VALUES(5,3,779,292);\nINSERT INTO xyoff VALUES(5,3,375,637);\nINSERT INTO xyoff VALUES(5,3,253,553);\nINSERT INTO xyoff VALUES(5,3,797,514);\nINSERT INTO xyoff VALUES(5,3,229,480);\nINSERT INTO xyoff VALUES(5,3,257,194);\nINSERT INTO xyoff VALUES(5,3,449,555);\nINSERT INTO xyoff VALUES(5,3,849,630);\nINSERT INTO xyoff VALUES(5,4,329,286);\nINSERT INTO xyoff VALUES(5,4,640,197);\nINSERT INTO xyoff VALUES(5,4,104,150);\nINSERT INTO xyoff VALUES(5,4,438,272);\nINSERT INTO xyoff VALUES(5,4,773,226);\nINSERT INTO xyoff VALUES(5,4,441,650);\nINSERT INTO xyoff VALUES(5,4,242,340);\nINSERT INTO xyoff VALUES(5,4,301,435);\nINSERT INTO xyoff VALUES(5,4,171,397);\nINSERT INTO xyoff VALUES(5,4,541,619);\nINSERT INTO xyoff VALUES(6,1,651,301);\nINSERT INTO xyoff VALUES(6,1,637,137);\nINSERT INTO xyoff VALUES(6,1,765,643);\nINSERT INTO xyoff VALUES(6,1,173,296);\nINSERT INTO xyoff VALUES(6,1,263,192);\nINSERT INTO xyoff VALUES(6,1,791,302);\nINSERT INTO xyoff VALUES(6,1,860,601);\nINSERT INTO xyoff VALUES(6,1,780,445);\nINSERT INTO xyoff VALUES(6,1,462,214);\nINSERT INTO xyoff VALUES(6,1,802,207);\nINSERT INTO xyoff VALUES(6,2,811,685);\nINSERT INTO xyoff VALUES(6,2,533,531);\nINSERT INTO xyoff VALUES(6,2,390,614);\nINSERT INTO xyoff VALUES(6,2,260,580);\nINSERT INTO xyoff VALUES(6,2,116,377);\nINSERT INTO xyoff VALUES(6,2,860,458);\nINSERT INTO xyoff VALUES(6,2,438,590);\nINSERT INTO xyoff VALUES(6,2,604,562);\nINSERT INTO xyoff VALUES(6,2,241,242);\nINSERT INTO xyoff VALUES(6,2,667,298);\nINSERT INTO xyoff VALUES(6,3,787,698);\nINSERT INTO xyoff VALUES(6,3,868,521);\nINSERT INTO xyoff VALUES(6,3,412,587);\nINSERT INTO xyoff VALUES(6,3,640,131);\nINSERT INTO xyoff VALUES(6,3,748,410);\nINSERT INTO xyoff VALUES(6,3,257,244);\nINSERT INTO xyoff VALUES(6,3,411,195);\nINSERT INTO xyoff VALUES(6,3,464,356);\nINSERT INTO xyoff VALUES(6,3,157,339);\nINSERT INTO xyoff VALUES(6,3,434,505);\nINSERT INTO xyoff VALUES(6,4,480,671);\nINSERT INTO xyoff VALUES(6,4,519,228);\nINSERT INTO xyoff VALUES(6,4,404,513);\n```\n\n----------------------------------------\n\nTITLE: Creating CSV Virtual Table in C for SQLite\nDESCRIPTION: The csv.c file contains a virtual table implementation for reading CSV files in SQLite. It acts as an interface to handle tabular CSV data within the SQLite database engine, making it accessible as a standard SQL table.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/misc/README.md#2025-04-22_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n// CSV virtual table implementation\n// Allows access to CSV files as SQL tables\n#include <sqlite3.h>\n// Additional C code implementation...\n```\n\n----------------------------------------\n\nTITLE: Testing TEAish Build Command for Unix\nDESCRIPTION: Command for configuring and testing the TEAish build of SQLite TCL extension with parallel build considerations.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/tcl-extension-testing.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd $PWD && ./configure CFLAGS=-O0 --with-tcl=$TCLHOME \\\n  && make test install uninstall\n```\n\n----------------------------------------\n\nTITLE: Creating a JS Proxy for an Existing C Struct Pointer in WASM\nDESCRIPTION: Illustrates creating a JavaScript struct instance (`MyStruct`) by providing an existing WASM heap pointer as an argument (e.g., obtained from a C function like `someCFuncWhichReturnsAMyStructPointer`). The resulting JavaScript object acts as a proxy but does not own the memory; calling `dispose()` on this instance will not deallocate the underlying C-side memory, which must remain valid for the lifetime of the JS object.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/wasm/jaccwabyt/jaccwabyt.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = new MyStruct( someCFuncWhichReturnsAMyStructPointer() );\n...\nx.dispose(); // does NOT free the memory\n```\n\n----------------------------------------\n\nTITLE: Defining Idiomatic Java Binding for SQLite Custom Collations\nDESCRIPTION: Shows the improved Java JNI binding signature for `sqlite3_create_collation`. Instead of separate user data and callbacks, it accepts a single object (`SomeCallbackType`) encapsulating both the comparison logic and any necessary state, providing a more object-oriented interface.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/jni/README.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nint sqlite3_create_collation(sqlite3 db, String name, int eTextRep,\n                             SomeCallbackType collation);\n```\n\n----------------------------------------\n\nTITLE: Verifying SQLite Source Authenticity using Make (Unix)\nDESCRIPTION: Executes the `verify-source` target in the project's Makefile to automatically check the integrity and authenticity of the SQLite source files. This process typically involves comparing SHA hashes of source files against entries in the `manifest` file. It's intended for use on Unix-like operating systems and requires the `make` utility.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/README.md#2025-04-22_snippet_9\n\nLANGUAGE: makefile\nCODE:\n```\nmake verify-source\n```\n\n----------------------------------------\n\nTITLE: Defining Custom SQLite Collations in C\nDESCRIPTION: Displays the C function signatures for `sqlite3_create_collation` and `sqlite3_create_collation_v2`. These functions register a custom text comparison function (`xCompare`) with an SQLite database connection (`db`). They accept a collation name, text encoding, optional user data (`pUserData`), and the comparison callback. The `v2` version adds an optional destroy callback (`xDestroy`) for the user data.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/jni/README.md#2025-04-22_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n// C:\nint sqlite3_create_collation(sqlite3 * db, const char * name, int eTextRep,\n                             void *pUserData,\n                             int (*xCompare)(void*,int,void const *,int,void const *));\n\nint sqlite3_create_collation_v2(sqlite3 * db, const char * name, int eTextRep,\n                                void *pUserData,\n                                int (*xCompare)(void*,int,void const *,int,void const *),\n                                void (*xDestroy)(void*));\n```\n\n----------------------------------------\n\nTITLE: Verifying SQLite Source Authenticity using NMake (Windows)\nDESCRIPTION: Executes the `verify-source` target within the `Makefile.msc` file using the Microsoft `nmake` tool. This command automates the verification of SQLite source code authenticity on Windows platforms by comparing file hashes against the `manifest`. Requires `nmake` and the specified `Makefile.msc`.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/README.md#2025-04-22_snippet_10\n\nLANGUAGE: makefile\nCODE:\n```\nnmake /f Makefile.msc verify-source\n```\n\n----------------------------------------\n\nTITLE: Binding Struct Definition using StructBinder in JavaScript\nDESCRIPTION: Demonstrates how to use a StructBinder function (here named `MyBinder`, created from `StructBinderFactory`) to process a struct description object (`myStructDescription`) and generate a constructor function (`MyStruct`) for that specific struct type. This constructor is then used to create instances linked to WASM memory. Requires a StructBinder instance and a valid struct description object.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/wasm/jaccwabyt/jaccwabyt.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyStruct = MyBinder(myStructDescription);\n```\n\n----------------------------------------\n\nTITLE: Describing a C Struct Layout in JSON for Jaccwabyt (JSON)\nDESCRIPTION: Illustrates the JSON-format description required by Jaccwabyt to match the C struct definition for binding. Includes struct name, total size, and a 'members' object mapping each field to its offset, size, and type signature. These field properties must be kept in sync with the C layout for accurate binding; limitations: manual update required for C changes.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/wasm/jaccwabyt/jaccwabyt.md#2025-04-22_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"name\": \"Foo\",\n  \"sizeof\": 16,\n  \"members\": {\n    \"member1\": {\"offset\": 0,\"sizeof\": 4,\"signature\": \"i\"},\n    \"member2\": {\"offset\": 4,\"sizeof\": 4,\"signature\": \"p\"},\n    \"member3\": {\"offset\": 8,\"sizeof\": 8,\"signature\": \"j\"}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating JSON Data in SQLite with Indexing\nDESCRIPTION: Creates a temporary table for JSON data, generates a large dataset of JSON objects using recursive CTEs, adds indexes on JSON paths, and performs various JSON operations including replace, set, and remove on the data. Demonstrates comprehensive JSON manipulation capabilities in SQLite.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/test/json/json-q1.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TEMP TABLE t2(x JSON TEXT);\nWITH RECURSIVE\n  c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<25000),\n  array1(y) AS (\n    SELECT json_group_array(\n             json_object('x',x,'y',random(),'z',hex(randomblob(50)))\n           )\n      FROM c\n  ),\n  c2(n) AS (VALUES(1) UNION ALL SELECT n+1 FROM c2 WHERE n<5)\nINSERT INTO t2(x)\n  SELECT json_object('a',n,'b',n*2,'c',y,'d',3,'e',5,'f',6) FROM array1, c2;\nCREATE INDEX t2x1 ON t2(x->>'a');\nCREATE INDEX t2x2 ON t2(x->>'b');\nCREATE INDEX t2x3 ON t2(x->>'e');\nCREATE INDEX t2x4 ON t2(x->>'f');\nUPDATE t2 SET x=json_replace(x,'$.f',(x->>'f')+1);\nUPDATE t2 SET x=json_set(x,'$.e',(x->>'f')-1);\nUPDATE t2 SET x=json_remove(x,'$.d');\n```\n\n----------------------------------------\n\nTITLE: Setting PATH for 32-bit TCL Build Environment\nDESCRIPTION: Prepends the binary directory of a 32-bit TCL installation (assumed to be `c:\\tcl32\\bin`) to the current command prompt session's PATH environment variable. This ensures that the 32-bit `tclsh.exe` is found before any 64-bit version when running `nmake` for a 32-bit SQLite build.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/compile-for-windows.md#2025-04-22_snippet_12\n\nLANGUAGE: cmd\nCODE:\n```\nset PATH=c:\\tcl32\\bin;%PATH%\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Cache Size in Pragma\nDESCRIPTION: This snippet demonstrates how to set the cache size for the main pager in SQLite using a PRAGMA statement. It sets the cache size to 2048 pages, which translates to a 2MB buffer size for the sorter module.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/vdbesort-memory.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nPRAGMA main.cache_size = -2048\n```\n\n----------------------------------------\n\nTITLE: Compiling TCL Release Build using nmake on Windows\nDESCRIPTION: This command compiles the TCL source code for a release build using the Visual C++ makefile (`makefile.vc`). It requires the `nmake` tool (usually available in a Visual Studio Developer Command Prompt) and the TCL source code. The `INSTALLDIR` parameter specifies the target directory for the installation phase (e.g., `c:\\Tcl`).\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/compile-for-windows.md#2025-04-22_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nnmake /f makefile.vc INSTALLDIR=c:\\Tcl release\n```\n\n----------------------------------------\n\nTITLE: Checking Heap Memory Availability in SQLite\nDESCRIPTION: This code snippet shows the use of sqlite3HeapNearlyFull() function to check if the heap memory is nearly full. If true, the current list of keys is flushed to a temporary file, even if it hasn't reached the size threshold.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/vdbesort-memory.md#2025-04-22_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nsqlite3HeapNearlyFull()\n```\n\n----------------------------------------\n\nTITLE: Building SQLite WASM components\nDESCRIPTION: Commands for building the WebAssembly components of SQLite. Shows two approaches: building from the top-level directory or directly from the ext/wasm directory.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/wasm/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# From the top of the tree:\n$ make fiddle\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ext/wasm\n$ make\n```\n\n----------------------------------------\n\nTITLE: Compiling SQLite on Windows Using MSVC\nDESCRIPTION: Commands to build various SQLite components on Windows using Microsoft Visual C++ (MSVC) with nmake and the provided Makefile.msc.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnmake /f Makefile.msc sqlite3.exe\nnmake /f Makefile.msc sqlite3.c\nnmake /f Makefile.msc sqldiff.exe\n# Makefile targets below this point require TCL development libraries\nnmake /f Makefile.msc tclextension-install\nnmake /f Makefile.msc devtest\nnmake /f Makefile.msc releasetest\nnmake /f Makefile.msc sqlite3_analyzer.exe\n```\n\n----------------------------------------\n\nTITLE: Visualizing Overlaps with Translated Query Polygon in SQLite\nDESCRIPTION: Translates the query polygon using geopoly_xform and visualizes overlaps with existing polygons. This snippet filters the geo1 table to only include shapes that overlap with the translated polygon from querypoly.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/rtree/visual01.txt#2025-04-22_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n.print '<h1>Overlap With Translated Query Polygon</h1>'\nUPDATE querypoly SET poly=geopoly_xform(poly,1,0,0,1,300,0);\n.print '<svg width=\"1000\" height=\"800\" style=\"border:1px solid black\">'\nSELECT geopoly_svg(_shape,\n         printf('style=\"fill:none;stroke:%s;stroke-width:1\"',geo1.clr)\n       )\n  FROM geo1\n WHERE geopoly_overlap(_shape,(SELECT poly FROM querypoly));\nSELECT geopoly_svg(poly,'style=\"fill:none;stroke:black;stroke-width:2\"')\n  FROM querypoly;\nROLLBACK;\n.print '</svg>'\n```\n\n----------------------------------------\n\nTITLE: Compiling SQLite on Windows with Additional Options\nDESCRIPTION: Example of how to add compile-time options when building SQLite on Windows, such as omitting deprecated features.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnmake /f Makefile.msc OPTIONS=-DSQLITE_OMIT_DEPRECATED sqlite3.exe\n```\n\n----------------------------------------\n\nTITLE: Defining the Java JNI Binding for SQLite User-Defined Functions (UDFs)\nDESCRIPTION: Displays the core Java JNI function signature for registering user-defined SQL functions (`sqlite3_create_function`). It takes the database connection (`db`), function name, number of arguments (`nArgs`), text encoding, and an `SQLFunction` object which encapsulates the function's logic. The `SQLFunction` object is typically instantiated via one of its subclasses (`ScalarFunction`, `AggregateFunction`, `WindowFunction`).\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/jni/README.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nint sqlite3_create_function(sqlite3 db, String funcName, int nArgs,\n                            int encoding, SQLFunction func);\n```\n\n----------------------------------------\n\nTITLE: Running SQLite Expert with a Single SQL Query\nDESCRIPTION: Command to run the sqlite3_expert tool against a database file (test.db) to analyze a single SQL query specified with the -sql parameter.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/expert/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./sqlite3_expert -sql <sql-query> test.db\n```\n\n----------------------------------------\n\nTITLE: Running SQLite Release Tests using nmake\nDESCRIPTION: Runs the SQLite release test suite using `nmake` and `Makefile.msc`. Similar to `devtest`, this target requires a TCL installation (potentially specified via `TCLDIR=<dir>`) to verify the stability and correctness of the build.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/compile-for-windows.md#2025-04-22_snippet_9\n\nLANGUAGE: cmd\nCODE:\n```\nnmake /f makefile.msc releasetest\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Mappings (Case and Ligature)\nDESCRIPTION: This data block defines mappings between Unicode code points. Each line follows the format `SOURCE_CODEPOINT; CATEGORY; TARGET_CODEPOINT(S); # DESCRIPTION`. The 'C' category typically indicates a case mapping (e.g., capital to lowercase), mapping a single source code point to a single target code point. The 'F' category indicates a folding or decomposition, often mapping a ligature character to its constituent characters (represented by space-separated code points). These mappings are crucial for text processing functions like case-insensitive comparisons or normalization.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/fts3/unicode/CaseFolding.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n2C1B; C; 2C4B; # GLAGOLITIC CAPITAL LETTER SHTA\n2C1C; C; 2C4C; # GLAGOLITIC CAPITAL LETTER TSI\n2C1D; C; 2C4D; # GLAGOLITIC CAPITAL LETTER CHRIVI\n2C1E; C; 2C4E; # GLAGOLITIC CAPITAL LETTER SHA\n2C1F; C; 2C4F; # GLAGOLITIC CAPITAL LETTER YERU\n2C20; C; 2C50; # GLAGOLITIC CAPITAL LETTER YERI\n2C21; C; 2C51; # GLAGOLITIC CAPITAL LETTER YATI\n2C22; C; 2C52; # GLAGOLITIC CAPITAL LETTER SPIDERY HA\n2C23; C; 2C53; # GLAGOLITIC CAPITAL LETTER YU\n2C24; C; 2C54; # GLAGOLITIC CAPITAL LETTER SMALL YUS\n2C25; C; 2C55; # GLAGOLITIC CAPITAL LETTER SMALL YUS WITH TAIL\n2C26; C; 2C56; # GLAGOLITIC CAPITAL LETTER YO\n2C27; C; 2C57; # GLAGOLITIC CAPITAL LETTER IOTATED SMALL YUS\n2C28; C; 2C58; # GLAGOLITIC CAPITAL LETTER BIG YUS\n2C29; C; 2C59; # GLAGOLITIC CAPITAL LETTER IOTATED BIG YUS\n2C2A; C; 2C5A; # GLAGOLITIC CAPITAL LETTER FITA\n2C2B; C; 2C5B; # GLAGOLITIC CAPITAL LETTER IZHITSA\n2C2C; C; 2C5C; # GLAGOLITIC CAPITAL LETTER SHTAPIC\n2C2D; C; 2C5D; # GLAGOLITIC CAPITAL LETTER TROKUTASTI A\n2C2E; C; 2C5E; # GLAGOLITIC CAPITAL LETTER LATINATE MYSLITE\n2C60; C; 2C61; # LATIN CAPITAL LETTER L WITH DOUBLE BAR\n2C62; C; 026B; # LATIN CAPITAL LETTER L WITH MIDDLE TILDE\n2C63; C; 1D7D; # LATIN CAPITAL LETTER P WITH STROKE\n2C64; C; 027D; # LATIN CAPITAL LETTER R WITH TAIL\n2C67; C; 2C68; # LATIN CAPITAL LETTER H WITH DESCENDER\n2C69; C; 2C6A; # LATIN CAPITAL LETTER K WITH DESCENDER\n2C6B; C; 2C6C; # LATIN CAPITAL LETTER Z WITH DESCENDER\n2C6D; C; 0251; # LATIN CAPITAL LETTER ALPHA\n2C6E; C; 0271; # LATIN CAPITAL LETTER M WITH HOOK\n2C6F; C; 0250; # LATIN CAPITAL LETTER TURNED A\n2C70; C; 0252; # LATIN CAPITAL LETTER TURNED ALPHA\n2C72; C; 2C73; # LATIN CAPITAL LETTER W WITH HOOK\n2C75; C; 2C76; # LATIN CAPITAL LETTER HALF H\n2C7E; C; 023F; # LATIN CAPITAL LETTER S WITH SWASH TAIL\n2C7F; C; 0240; # LATIN CAPITAL LETTER Z WITH SWASH TAIL\n2C80; C; 2C81; # COPTIC CAPITAL LETTER ALFA\n2C82; C; 2C83; # COPTIC CAPITAL LETTER VIDA\n2C84; C; 2C85; # COPTIC CAPITAL LETTER GAMMA\n2C86; C; 2C87; # COPTIC CAPITAL LETTER DALDA\n2C88; C; 2C89; # COPTIC CAPITAL LETTER EIE\n2C8A; C; 2C8B; # COPTIC CAPITAL LETTER SOU\n2C8C; C; 2C8D; # COPTIC CAPITAL LETTER ZATA\n2C8E; C; 2C8F; # COPTIC CAPITAL LETTER HATE\n2C90; C; 2C91; # COPTIC CAPITAL LETTER THETHE\n2C92; C; 2C93; # COPTIC CAPITAL LETTER IAUDA\n2C94; C; 2C95; # COPTIC CAPITAL LETTER KAPA\n2C96; C; 2C97; # COPTIC CAPITAL LETTER LAULA\n2C98; C; 2C99; # COPTIC CAPITAL LETTER MI\n2C9A; C; 2C9B; # COPTIC CAPITAL LETTER NI\n2C9C; C; 2C9D; # COPTIC CAPITAL LETTER KSI\n2C9E; C; 2C9F; # COPTIC CAPITAL LETTER O\n2CA0; C; 2CA1; # COPTIC CAPITAL LETTER PI\n2CA2; C; 2CA3; # COPTIC CAPITAL LETTER RO\n2CA4; C; 2CA5; # COPTIC CAPITAL LETTER SIMA\n2CA6; C; 2CA7; # COPTIC CAPITAL LETTER TAU\n2CA8; C; 2CA9; # COPTIC CAPITAL LETTER UA\n2CAA; C; 2CAB; # COPTIC CAPITAL LETTER FI\n2CAC; C; 2CAD; # COPTIC CAPITAL LETTER KHI\n2CAE; C; 2CAF; # COPTIC CAPITAL LETTER PSI\n2CB0; C; 2CB1; # COPTIC CAPITAL LETTER OOU\n2CB2; C; 2CB3; # COPTIC CAPITAL LETTER DIALECT-P ALEF\n2CB4; C; 2CB5; # COPTIC CAPITAL LETTER OLD COPTIC AIN\n2CB6; C; 2CB7; # COPTIC CAPITAL LETTER CRYPTOGRAMMIC EIE\n2CB8; C; 2CB9; # COPTIC CAPITAL LETTER DIALECT-P KAPA\n2CBA; C; 2CBB; # COPTIC CAPITAL LETTER DIALECT-P NI\n2CBC; C; 2CBD; # COPTIC CAPITAL LETTER CRYPTOGRAMMIC NI\n2CBE; C; 2CBF; # COPTIC CAPITAL LETTER OLD COPTIC OOU\n2CC0; C; 2CC1; # COPTIC CAPITAL LETTER SAMPI\n2CC2; C; 2CC3; # COPTIC CAPITAL LETTER CROSSED SHEI\n2CC4; C; 2CC5; # COPTIC CAPITAL LETTER OLD COPTIC SHEI\n2CC6; C; 2CC7; # COPTIC CAPITAL LETTER OLD COPTIC ESH\n2CC8; C; 2CC9; # COPTIC CAPITAL LETTER AKHMIMIC KHEI\n2CCA; C; 2CCB; # COPTIC CAPITAL LETTER DIALECT-P HORI\n2CCC; C; 2CCD; # COPTIC CAPITAL LETTER OLD COPTIC HORI\n2CCE; C; 2CCF; # COPTIC CAPITAL LETTER OLD COPTIC HA\n2CD0; C; 2CD1; # COPTIC CAPITAL LETTER L-SHAPED HA\n2CD2; C; 2CD3; # COPTIC CAPITAL LETTER OLD COPTIC HEI\n2CD4; C; 2CD5; # COPTIC CAPITAL LETTER OLD COPTIC HAT\n2CD6; C; 2CD7; # COPTIC CAPITAL LETTER OLD COPTIC GANGIA\n2CD8; C; 2CD9; # COPTIC CAPITAL LETTER OLD COPTIC DJA\n2CDA; C; 2CDB; # COPTIC CAPITAL LETTER OLD COPTIC SHIMA\n2CDC; C; 2CDD; # COPTIC CAPITAL LETTER OLD NUBIAN SHIMA\n2CDE; C; 2CDF; # COPTIC CAPITAL LETTER OLD NUBIAN NGI\n2CE0; C; 2CE1; # COPTIC CAPITAL LETTER OLD NUBIAN NYI\n2CE2; C; 2CE3; # COPTIC CAPITAL LETTER OLD NUBIAN WAU\n2CEB; C; 2CEC; # COPTIC CAPITAL LETTER CRYPTOGRAMMIC SHEI\n2CED; C; 2CEE; # COPTIC CAPITAL LETTER CRYPTOGRAMMIC GANGIA\n2CF2; C; 2CF3; # COPTIC CAPITAL LETTER BOHAIRIC KHEI\nA640; C; A641; # CYRILLIC CAPITAL LETTER ZEMLYA\nA642; C; A643; # CYRILLIC CAPITAL LETTER DZELO\nA644; C; A645; # CYRILLIC CAPITAL LETTER REVERSED DZE\nA646; C; A647; # CYRILLIC CAPITAL LETTER IOTA\nA648; C; A649; # CYRILLIC CAPITAL LETTER DJERV\nA64A; C; A64B; # CYRILLIC CAPITAL LETTER MONOGRAPH UK\nA64C; C; A64D; # CYRILLIC CAPITAL LETTER BROAD OMEGA\nA64E; C; A64F; # CYRILLIC CAPITAL LETTER NEUTRAL YER\nA650; C; A651; # CYRILLIC CAPITAL LETTER YERU WITH BACK YER\nA652; C; A653; # CYRILLIC CAPITAL LETTER IOTIFIED YAT\nA654; C; A655; # CYRILLIC CAPITAL LETTER REVERSED YU\nA656; C; A657; # CYRILLIC CAPITAL LETTER IOTIFIED A\nA658; C; A659; # CYRILLIC CAPITAL LETTER CLOSED LITTLE YUS\nA65A; C; A65B; # CYRILLIC CAPITAL LETTER BLENDED YUS\nA65C; C; A65D; # CYRILLIC CAPITAL LETTER IOTIFIED CLOSED LITTLE YUS\nA65E; C; A65F; # CYRILLIC CAPITAL LETTER YN\nA660; C; A661; # CYRILLIC CAPITAL LETTER REVERSED TSE\nA662; C; A663; # CYRILLIC CAPITAL LETTER SOFT DE\nA664; C; A665; # CYRILLIC CAPITAL LETTER SOFT EL\nA666; C; A667; # CYRILLIC CAPITAL LETTER SOFT EM\nA668; C; A669; # CYRILLIC CAPITAL LETTER MONOCULAR O\nA66A; C; A66B; # CYRILLIC CAPITAL LETTER BINOCULAR O\nA66C; C; A66D; # CYRILLIC CAPITAL LETTER DOUBLE MONOCULAR O\nA680; C; A681; # CYRILLIC CAPITAL LETTER DWE\nA682; C; A683; # CYRILLIC CAPITAL LETTER DZWE\nA684; C; A685; # CYRILLIC CAPITAL LETTER ZHWE\nA686; C; A687; # CYRILLIC CAPITAL LETTER CCHE\nA688; C; A689; # CYRILLIC CAPITAL LETTER DZZE\nA68A; C; A68B; # CYRILLIC CAPITAL LETTER TE WITH MIDDLE HOOK\nA68C; C; A68D; # CYRILLIC CAPITAL LETTER TWE\nA68E; C; A68F; # CYRILLIC CAPITAL LETTER TSWE\nA690; C; A691; # CYRILLIC CAPITAL LETTER TSSE\nA692; C; A693; # CYRILLIC CAPITAL LETTER TCHE\nA694; C; A695; # CYRILLIC CAPITAL LETTER HWE\nA696; C; A697; # CYRILLIC CAPITAL LETTER SHWE\nA722; C; A723; # LATIN CAPITAL LETTER EGYPTOLOGICAL ALEF\nA724; C; A725; # LATIN CAPITAL LETTER EGYPTOLOGICAL AIN\nA726; C; A727; # LATIN CAPITAL LETTER HENG\nA728; C; A729; # LATIN CAPITAL LETTER TZ\nA72A; C; A72B; # LATIN CAPITAL LETTER TRESILLO\nA72C; C; A72D; # LATIN CAPITAL LETTER CUATRILLO\nA72E; C; A72F; # LATIN CAPITAL LETTER CUATRILLO WITH COMMA\nA732; C; A733; # LATIN CAPITAL LETTER AA\nA734; C; A735; # LATIN CAPITAL LETTER AO\nA736; C; A737; # LATIN CAPITAL LETTER AU\nA738; C; A739; # LATIN CAPITAL LETTER AV\nA73A; C; A73B; # LATIN CAPITAL LETTER AV WITH HORIZONTAL BAR\nA73C; C; A73D; # LATIN CAPITAL LETTER AY\nA73E; C; A73F; # LATIN CAPITAL LETTER REVERSED C WITH DOT\nA740; C; A741; # LATIN CAPITAL LETTER K WITH STROKE\nA742; C; A743; # LATIN CAPITAL LETTER K WITH DIAGONAL STROKE\nA744; C; A745; # LATIN CAPITAL LETTER K WITH STROKE AND DIAGONAL STROKE\nA746; C; A747; # LATIN CAPITAL LETTER BROKEN L\nA748; C; A749; # LATIN CAPITAL LETTER L WITH HIGH STROKE\nA74A; C; A74B; # LATIN CAPITAL LETTER O WITH LONG STROKE OVERLAY\nA74C; C; A74D; # LATIN CAPITAL LETTER O WITH LOOP\nA74E; C; A74F; # LATIN CAPITAL LETTER OO\nA750; C; A751; # LATIN CAPITAL LETTER P WITH STROKE THROUGH DESCENDER\nA752; C; A753; # LATIN CAPITAL LETTER P WITH FLOURISH\nA754; C; A755; # LATIN CAPITAL LETTER P WITH SQUIRREL TAIL\nA756; C; A757; # LATIN CAPITAL LETTER Q WITH STROKE THROUGH DESCENDER\nA758; C; A759; # LATIN CAPITAL LETTER Q WITH DIAGONAL STROKE\nA75A; C; A75B; # LATIN CAPITAL LETTER R ROTUNDA\nA75C; C; A75D; # LATIN CAPITAL LETTER RUM ROTUNDA\nA75E; C; A75F; # LATIN CAPITAL LETTER V WITH DIAGONAL STROKE\nA760; C; A761; # LATIN CAPITAL LETTER VY\nA762; C; A763; # LATIN CAPITAL LETTER VISIGOTHIC Z\nA764; C; A765; # LATIN CAPITAL LETTER THORN WITH STROKE\nA766; C; A767; # LATIN CAPITAL LETTER THORN WITH STROKE THROUGH DESCENDER\nA768; C; A769; # LATIN CAPITAL LETTER VEND\nA76A; C; A76B; # LATIN CAPITAL LETTER ET\nA76C; C; A76D; # LATIN CAPITAL LETTER IS\nA76E; C; A76F; # LATIN CAPITAL LETTER CON\nA779; C; A77A; # LATIN CAPITAL LETTER INSULAR D\nA77B; C; A77C; # LATIN CAPITAL LETTER INSULAR F\nA77D; C; 1D79; # LATIN CAPITAL LETTER INSULAR G\nA77E; C; A77F; # LATIN CAPITAL LETTER TURNED INSULAR G\nA780; C; A781; # LATIN CAPITAL LETTER TURNED L\nA782; C; A783; # LATIN CAPITAL LETTER INSULAR R\nA784; C; A785; # LATIN CAPITAL LETTER INSULAR S\nA786; C; A787; # LATIN CAPITAL LETTER INSULAR T\nA78B; C; A78C; # LATIN CAPITAL LETTER SALTILLO\nA78D; C; 0265; # LATIN CAPITAL LETTER TURNED H\nA790; C; A791; # LATIN CAPITAL LETTER N WITH DESCENDER\nA792; C; A793; # LATIN CAPITAL LETTER C WITH BAR\nA7A0; C; A7A1; # LATIN CAPITAL LETTER G WITH OBLIQUE STROKE\nA7A2; C; A7A3; # LATIN CAPITAL LETTER K WITH OBLIQUE STROKE\nA7A4; C; A7A5; # LATIN CAPITAL LETTER N WITH OBLIQUE STROKE\nA7A6; C; A7A7; # LATIN CAPITAL LETTER R WITH OBLIQUE STROKE\nA7A8; C; A7A9; # LATIN CAPITAL LETTER S WITH OBLIQUE STROKE\nA7AA; C; 0266; # LATIN CAPITAL LETTER H WITH HOOK\nFB00; F; 0066 0066; # LATIN SMALL LIGATURE FF\nFB01; F; 0066 0069; # LATIN SMALL LIGATURE FI\nFB02; F; 0066 006C; # LATIN SMALL LIGATURE FL\nFB03; F; 0066 0066 0069; # LATIN SMALL LIGATURE FFI\nFB04; F; 0066 0066 006C; # LATIN SMALL LIGATURE FFL\nFB05; F; 0073 0074; # LATIN SMALL LIGATURE LONG S T\nFB06; F; 0073 0074; # LATIN SMALL LIGATURE ST\nFB13; F; 0574 0576; # ARMENIAN SMALL LIGATURE MEN NOW\nFB14; F; 0574 0565; # ARMENIAN SMALL LIGATURE MEN ECH\nFB15; F; 0574 056B; # ARMENIAN SMALL LIGATURE MEN INI\nFB16; F; 057E 0576; # ARMENIAN SMALL LIGATURE VEW NOW\nFB17; F; 0574 056D; # ARMENIAN SMALL LIGATURE MEN XEH\nFF21; C; FF41; # FULLWIDTH LATIN CAPITAL LETTER A\nFF22; C; FF42; # FULLWIDTH LATIN CAPITAL LETTER B\nFF23; C; FF43; # FULLWIDTH LATIN CAPITAL LETTER C\nFF24; C; FF44; # FULLWIDTH LATIN CAPITAL LETTER D\nFF25; C; FF45; # FULLWIDTH LATIN CAPITAL LETTER E\n```\n\n----------------------------------------\n\nTITLE: Compiling Various SQLite Components\nDESCRIPTION: Make commands for building different SQLite components and tools. These targets do not require TCL and can be built independently.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/compile-for-unix.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake sqlite3.c\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake sqlite3\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake sqldiff\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake sqlite3_rsync\n```\n\n----------------------------------------\n\nTITLE: Generating Struct Descriptions from C for JavaScript Integration\nDESCRIPTION: This C code snippet demonstrates how to generate JSON-formatted struct descriptions using macros. It includes size and offset information for struct members, which can be used in JavaScript for accurate struct binding.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/wasm/jaccwabyt/jaccwabyt.md#2025-04-22_snippet_14\n\nLANGUAGE: c\nCODE:\n```\n#include <string.h> /* memset() */\n#include <stddef.h> /* offsetof() */\n#include <stdio.h>  /* snprintf() */\n#include <stdint.h> /* int64_t */\n#include <assert.h>\n\nstruct ExampleStruct {\n  int v4;\n  void * ppV;\n  int64_t v8;\n  void (*xFunc)(void*);\n};\ntypedef struct ExampleStruct ExampleStruct;\n\nconst char * wasm__ctype_json(void){\n  static char strBuf[512 * 8] = {0}\n    /* Static buffer which must be sized large enough for\n       our JSON. The string-generation macros try very\n       hard to assert() if this buffer is too small. */;\n  int n = 0, structCount = 0 /* counters for the macros */;\n  char * pos = &strBuf[1]\n    /* Write-position cursor. Skip the first byte for now to help\n       protect against a small race condition */;\n  char const * const zEnd = pos + sizeof(strBuf)\n    /* one-past-the-end cursor (virtual EOF) */;\n  if(strBuf[0]) return strBuf; // Was set up in a previous call.\n\n  ////////////////////////////////////////////////////////////////////\n  // First we need to build up our macro framework...\n\n  ////////////////////////////////////////////////////////////////////\n  // Core output-generating macros...\n#define lenCheck assert(pos < zEnd - 100)\n#define outf(format,...) \\\n  pos += snprintf(pos, ((size_t)(zEnd - pos)), format, __VA_ARGS__); \\\n  lenCheck\n#define out(TXT) outf(\"%s\",TXT)\n#define CloseBrace(LEVEL) \\\n  assert(LEVEL<5); memset(pos, '}', LEVEL); pos+=LEVEL; lenCheck\n\n  ////////////////////////////////////////////////////////////////////\n  // Macros for emitting StructBinders...\n#define StructBinder__(TYPE)                 \\\n  n = 0;                                     \\\n  outf(\"%s{\", (structCount++ ? \", \" : \"\"));  \\\n  out(\"\\\"name\\\": \\\"\" # TYPE \"\\\",\");          \\\n  outf(\"\\\"sizeof\\\": %d\", (int)sizeof(TYPE)); \\\n  out(\",\\\"members\\\": {\");\n#define StructBinder_(T) StructBinder__(T)\n// ^^^ extra indirection needed to expand CurrentStruct\n#define StructBinder StructBinder_(CurrentStruct)\n#define _StructBinder CloseBrace(2)\n#define M(MEMBER,SIG)                                         \\\n  outf(\"%s\\\"%s\\\": \"                                           \\\n       \"{\\\"offset\\\":%d,\\\"sizeof\\\": %d,\\\"signature\\\":\\\"%s\\\"}\", \\\n       (n++ ? \", \" : \"\"), #MEMBER,                            \\\n       (int)offsetof(CurrentStruct,MEMBER),                   \\\n       (int)sizeof(((CurrentStruct*)0)->MEMBER),              \\\n       SIG)\n  // End of macros.\n  ////////////////////////////////////////////////////////////////////\n\n  ////////////////////////////////////////////////////////////////////\n  // With that out of the way, we can do what we came here to do.\n  out(\"\\\"structs\\\": [\"); {\n\n// For each struct description, do...\n#define CurrentStruct ExampleStruct\n    StructBinder {\n      M(v4,\"i\");\n      M(ppV,\"p\");\n      M(v8,\"j\");\n      M(xFunc,\"v(p)\");\n    } _StructBinder;\n#undef CurrentStruct\n\n  } out( \"]\"/*structs*/);\n  ////////////////////////////////////////////////////////////////////\n  // Done! Finalize the output...\n  out(\"}\"/*top-level wrapper*/);\n  *pos = 0;\n  strBuf[0] = '{'/*end of the race-condition workaround*/;\n  return strBuf;\n\n// If this file will ever be concatenated or #included with others,\n// it's good practice to clean up our macros:\n#undef StructBinder\n#undef StructBinder_\n#undef StructBinder__\n#undef M\n#undef _StructBinder\n#undef CloseBrace\n#undef out\n#undef outf\n#undef lenCheck\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Multiple Queries from a Text File\nDESCRIPTION: Command to run the sqlite3_expert tool on a database file (test.db) to analyze multiple SQL queries contained in a specified text file.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/expert/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./sqlite3_expert -file <text-file> test.db\n```\n\n----------------------------------------\n\nTITLE: Building SQLite Rsync Utility using nmake\nDESCRIPTION: Compiles the `sqlite3_rsync.exe` utility using `nmake` and `Makefile.msc`. This tool implements an rsync-like algorithm for synchronizing SQLite databases. No TCL is required for this target.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/compile-for-windows.md#2025-04-22_snippet_6\n\nLANGUAGE: cmd\nCODE:\n```\nnmake /f makefile.msc sqlite3_rsync.exe\n```\n\n----------------------------------------\n\nTITLE: Creating Database Views and Indexes in SQLite\nDESCRIPTION: Creates multiple views (v00-v70) demonstrating different SQL operations including simple selects, aggregations, joins, and recursive queries. Also creates indexes on tables for performance optimization.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/test/optfuzz-db01.txt#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX t3x1 ON t3(a,b,c,d,e);\nCREATE VIEW v00(a,b,c,d,e) AS SELECT 1,1,1,1,'one';\nCREATE VIEW v10(a,b,c,d,e) AS SELECT a,b,c,d,e FROM t1 WHERE a<>25;\nCREATE VIEW v20(a,b,c,d,e) AS SELECT a,b,c,d,e FROM t2 WHERE a<>25;\nCREATE VIEW v30(a,b,c,d,e) AS SELECT a,b,c,d,e FROM t3 WHERE a<>25;\nCREATE VIEW v40(a,b,c,d,e) AS SELECT a,b,c,d,e FROM t4 WHERE a<>25;\nCREATE VIEW v50(a,b) AS SELECT a,b FROM t5 WHERE a<>25;\nCREATE VIEW v60(a,b,c,d,e) AS\n  SELECT t1.a,t2.b,t1.c,t2.d,t1.e\n    FROM t1 LEFT JOIN t2 ON (t1.a=t2.b);\nCREATE VIEW v70(a,b,c,d,e) AS\n  WITH RECURSIVE c0(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c0 WHERE x<9)\n  SELECT x, b, c, d, e FROM c0 JOIN t1 ON (t1.a=50-c0.x);\n```\n\n----------------------------------------\n\nTITLE: Building SQLite3 JNI Bindings\nDESCRIPTION: Command line instructions for building the SQLite3 JNI bindings using Make. Requires Java 8+ JDK and a modern C compiler like gcc or clang.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/jni/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ export JAVA_HOME=/path/to/jdk/root\n$ make\n$ make test\n$ make clean\n```\n\n----------------------------------------\n\nTITLE: Building SQLite Checker Tool\nDESCRIPTION: Command to compile and build the sqlite3_checker testing utility.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/repair/test/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake sqlite3_checker\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Headers for OPFS Support\nDESCRIPTION: Required HTTP headers configuration for enabling Origin Private File System (OPFS) features in the SQLite WASM implementation. These headers must be set by the web server when serving the files.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/wasm/README-dist.txt#2025-04-22_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nCross-Origin-Opener-Policy: same-origin\\nCross-Origin-Embedder-Policy: require-corp\n```\n\n----------------------------------------\n\nTITLE: Updating and Visualizing Polygon Overlaps in SQLite\nDESCRIPTION: Updates the _shape column with transformed polygon data and generates SVG output showing polygon overlaps. The code transforms polygons using geopoly_xform and renders them using geopoly_svg functions.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/rtree/visual01.txt#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE geo1\n   SET _shape=geopoly_xform(_shape,1,0,0,1,300,0)\n WHERE geopoly_overlap(_shape,(SELECT poly FROM querypoly));\n.print '<svg width=\"1000\" height=\"800\" style=\"border:1px solid black\">'\nSELECT geopoly_svg(_shape,\n         printf('style=\"fill:none;stroke:%s;stroke-width:1\"',geo1.clr)\n       )\n  FROM geo1;\nSELECT geopoly_svg(poly,'style=\"fill:none;stroke:black;stroke-width:2\"')\n  FROM querypoly;\n--ROLLBACK;\n.print '</svg>'\n```\n\n----------------------------------------\n\nTITLE: Running SQLite Test Suite\nDESCRIPTION: Command to execute the SQLite test suite using sqlite3_checker. The test.tcl script path is provided as an argument. Individual test modules can be specified optionally.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/repair/test/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./sqlite3_checker --test $path/test.tcl\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Build with TCL Support\nDESCRIPTION: Command to configure SQLite build with all features enabled and specifying the path to the TCL shell. This step prepares the build environment for compiling SQLite.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/compile-for-unix.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./configure --enable-all --with-tclsh=$HOME/local/bin/tclsh9.0\n```\n\n----------------------------------------\n\nTITLE: Compiling SQLite ICU Extension on Unix\nDESCRIPTION: Command to compile the ICU extension as a dynamically loadable SQLite extension using gcc on Unix systems. Requires ICU development libraries and SQLite header files.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/icu/README.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcc -fPIC -shared icu.c `pkg-config --libs --cflags icu-io` \\\n    -o libSqliteIcu.so\n```\n\n----------------------------------------\n\nTITLE: Explaining SQLite Interpreter Meta Commands - Markdown\nDESCRIPTION: This snippet uses markdown to document meta commands supported by an SQLite script interpreter. Each section describes a command, its valid arguments, and resulting side effects on session state or output buffer, offering both argument structure and error handling expectations. No external code dependencies exist, but familiarity with SQLite and script interpreters is assumed. The snippet provides guidance on controlling up to seven connections, output behavior, and result formatting, with each command defined in a well-structured markdown format.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/jni/src/org/sqlite/jni/test-script-interpreter.md#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n### The --db command\n\nThe script interpreter can have up to 7 different SQLite database\nconnections open at a time.  The --db command is used to switch between\nthem.  The argument to --db is an integer between 0 and 6 that selects\nwhich database connection to use moving forward.\n\n### The --close command\n\nThe --close command causes an existing database connection to close.\nThis command is a no-op if the database connection is not currently\nopen.  There can be up to 7 different database connections, numbered 0\nthrough 6.  The number of the database connection to close is an\nargument to the --close command, which will fail if an out-of-range\nvalue is provided.  Or if the argument to --close is \"all\" then all\nopen database connections are closed. If passed no argument, the\ncurrently-active database is assumed.\n\n### The --null command\n\nThe NULL command changes the text that is used to represent SQL NULL\nvalues in the result buffer.\n\n### The --run command\n\nThe --run command executes text in the input buffer as if it where SQL.\nHowever, nothing is added to the result buffer.  Any output from the SQL\nis silently ignored. Errors in the SQL are silently ignored.\n\nThe --run command normally executes the SQL in the current database\nconnection.  However, if --run has an argument that is an integer between\n0 and 6 then the SQL is run in the alternative database connection specified\nby that argument.\n\n### The --json and --json-block commands\n\nThe --json and --json-block commands work like --result and --tableresult,\nrespectively.  The difference is that column values are appended to the\nresult buffer literally, without ever enclosing the values in `{...}` or\n`\"...\"` and without escaping any characters in the column value and comparison\nis always an exact strcmp() not a GLOB.\n\n### The --print command\n\nThe --print command emits both its arguments and its body (if any) to\nstdout, indenting each line of output.\n\n### The --column-names command\n\nThe --column-names command requires 0 or 1 as an argument, to disable\nresp.  enable it, and modifies SQL execution to include column names\nin output. When this option is on, each column value emitted gets\nprefixed by its column name, with a single space between them.\n\n```\n\n----------------------------------------\n\nTITLE: Compiling the SQLite Expert Command Line Application\nDESCRIPTION: Command to compile the sqlite3_expert application from source files including sqlite3.c, expert.c, and sqlite3expert.c. The compilation produces an executable named sqlite3_expert.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/expert/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngcc -O2 sqlite3.c expert.c sqlite3expert.c -o sqlite3_expert\n```\n\n----------------------------------------\n\nTITLE: Emscripten Environment Configuration for Jaccwabyt (JavaScript)\nDESCRIPTION: Provides a typical configuration object for Jaccwabyt when used in an Emscripten-generated WASM environment. Demonstrates references to Emscripten's Module object for heap memory and allocator functions. Both 'heap' and allocator properties are required; expected to run in the browser alongside Emscripten.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/wasm/jaccwabyt/jaccwabyt.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    heap:    Module['asm']['memory'],\n    //Or:\n    // heap: ()=>Module['HEAP8'],\n    alloc:   (n)=>Module['_malloc'](n),\n    dealloc: (m)=>Module['_free'](m)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating Test Database Tables in SQLite\nDESCRIPTION: Creates a new SQLite database with tables t1-t5 containing various data patterns. Tables include different primary key configurations, unique constraints, and indexed columns. Data is populated using random values, text strings, and NULL values.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/test/optfuzz-db01.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n.open -new testdb01.db\nPRAGMA page_size=512;\nBEGIN;\nCREATE TABLE t1(a INTEGER PRIMARY KEY, b INT, c INT, d INT, e INT);\nWITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<50)\nINSERT INTO t1(a,b,c,d,e) SELECT x,abs(random()%51),\n   abs(random()%100), abs(random()%51), abs(random()%100) FROM c;\nCREATE TABLE t2(a INT, b INT, c INT,d INT,e INT,PRIMARY KEY(b,a))WITHOUT ROWID;\nINSERT INTO t2 SELECT * FROM t1;\nCREATE TABLE t3(a,b,c,d,e);\nINSERT INTO t3 SELECT a,b,c,d,e FROM t1 ORDER BY random() LIMIT 5;\nINSERT INTO t3 SELECT null,b,c,d,e FROM t1 ORDER BY random() LIMIT 5;\nINSERT INTO t3 SELECT a,null,c,d,e FROM t1 ORDER BY random() LIMIT 5;\nINSERT INTO t3 SELECT a,b,null,d,e FROM t1 ORDER BY random() LIMIT 5;\nINSERT INTO t3 SELECT a,b,c,null,e FROM t1 ORDER BY random() LIMIT 5;\nINSERT INTO t3 SELECT a,b,c,d,null FROM t1 ORDER BY random() LIMIT 5;\nINSERT INTO t3 SELECT null,null,null,null,null FROM t1 LIMIT 5;\n```\n\n----------------------------------------\n\nTITLE: Building SQLite on Windows with MSVC\nDESCRIPTION: Command for building SQLite using Microsoft Visual C++ and nmake utility.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/autoconf/README.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnmake /f Makefile.msc\n```\n\n----------------------------------------\n\nTITLE: Building Debug SQLite CLI with Trace Commands using nmake\nDESCRIPTION: Builds a debug version of the SQLite command-line interface (`sqlite3.exe`) using `nmake` and `Makefile.msc`. The `DEBUG=3` argument enables debugging features, including the `.treetrace` and `.wheretrace` commands. The `clean` target is included to ensure a fresh build.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/compile-for-windows.md#2025-04-22_snippet_11\n\nLANGUAGE: cmd\nCODE:\n```\nnmake /f makefile.msc DEBUG=3 clean sqlite3.exe\n```\n\n----------------------------------------\n\nTITLE: SQL IN Operator Basic Syntax\nDESCRIPTION: Demonstrates the two fundamental formats of the IN operator: comparing against a list of values or a subquery.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/src/in-operator.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nx IN (y1,y2,y3,...,yN)\nx IN (subquery)\n```\n\n----------------------------------------\n\nTITLE: Updating Emscripten SDK\nDESCRIPTION: Commands for updating an existing Emscripten SDK installation to the latest version. This involves pulling changes, installing and activating the latest SDK.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/wasm/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git pull\n$ ./emsdk install latest\n$ ./emsdk activate latest\n```\n\n----------------------------------------\n\nTITLE: Defining StructBinder Function Signature in JavaScript Context\nDESCRIPTION: Defines the call signature for the `StructBinder` function (created by `StructBinderFactory`). It takes an optional `structName` (string) and a mandatory `structDescription` (object). If `structDescription` contains a `name` property, `structName` is optional. It returns a constructor function for the described struct type.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/wasm/jaccwabyt/jaccwabyt.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nFunction StructBinder([string structName,] object structDescription)\n```\n\n----------------------------------------\n\nTITLE: Configuring StructBinderFactory (Jaccwabyt, JavaScript)\nDESCRIPTION: Demonstrates how to create a StructBinderFactory by providing required configuration options for Jaccwabyt, including WASM heap references and allocation functions. The configuration object must include 'heap', 'alloc', and 'dealloc', abstracting platform-specific memory and allocator details. Expected input: WASM heap or suitable heap view, along with allocation and deallocation functions; returns a factory function for further struct binding.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/wasm/jaccwabyt/jaccwabyt.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst MyBinder = StructBinderFactory({\n  // These config options are all required:\n  heap: WebAssembly.Memory instance or a function which returns\n        a Uint8Array or Int8Array view of the WASM memory,\n  alloc:   function(howMuchMemory){...},\n  dealloc: function(pointerToFree){...}\n});\n```\n\n----------------------------------------\n\nTITLE: Building Test Binaries Only with testrunner.tcl (Shell)\nDESCRIPTION: Demonstrates using the `--buildonly` option with `testrunner.tcl` to compile the necessary binaries for the 'release' test configuration without executing the tests themselves. Requires `tclsh` and the `testrunner.tcl` script located at `$TESTDIR`.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/testrunner.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n# Build binaries required by release test.\\ntclsh $TESTDIR/testrunner.tcl --buildonly release\"\n```\n\n----------------------------------------\n\nTITLE: Defining Query Polygon\nDESCRIPTION: Creates a temporary table and inserts a polygon definition for testing overlap and within operations.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/rtree/visual01.txt#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TEMP TABLE querypoly(poly JSON, clr TEXT);\nINSERT INTO querypoly(clr, poly) VALUES\n  ('orange', '[[300,300],[400,350],[500,250],[480,500],[400,480],[300,550],[280,450],[320,400],[280,350],[300,300]]');\n```\n\n----------------------------------------\n\nTITLE: Checking Executable DLL Dependencies using dumpbin\nDESCRIPTION: Uses the `dumpbin` utility (part of Microsoft Visual Studio tools) with the `/dependents` flag to list the dynamic-link libraries (DLLs) that the specified executable (`sqlite3_analyzer.exe` in this example) depends on. This is useful for verifying whether a library, like the TCL DLL, has been successfully statically linked.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/compile-for-windows.md#2025-04-22_snippet_17\n\nLANGUAGE: cmd\nCODE:\n```\ndumpbin /dependents sqlite3_analyzer.exe\n```\n\n----------------------------------------\n\nTITLE: Generating Test Database with Tcl and SQLite\nDESCRIPTION: Generates a large JSON test database for performance testing SQLite JSON functions. Requires Tcl (tclsh) and SQLite (sqlite3). Outputs a 100MB database in the current directory.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/test/json/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ntclsh json-generator.tcl | sqlite3 json100mb.db\n```\n\n----------------------------------------\n\nTITLE: Generating Build Scripts\nDESCRIPTION: Commands to create build scripts for different configurations.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/testrunner.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ntclsh $TESTDIR/testrunner.tcl script Device-One > make.sh\ntclsh $TESTDIR/testrunner.tcl script Have-Not > make.bat\n```\n\n----------------------------------------\n\nTITLE: Converting JSON to JSONB in SQLite Database\nDESCRIPTION: Converts JSON data in an SQLite database to JSONB format. Requires that the 'jsonb' extension support is available in the SQLite build used. Inputs a database (jsonb100mb.db) and updates its 'data1' table's column 'x' with JSONB data.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/test/json/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE data1 SET x=jsonb(x);\nVACUUM;\n```\n\n----------------------------------------\n\nTITLE: Illustrating Awkward Direct Java Binding for SQLite Collations\nDESCRIPTION: Presents hypothetical direct Java bindings for the C `sqlite3_create_collation` functions. This demonstrates an awkward approach where the user data (`pUserData`) and callback functions (`xCompare`, `xDestroy`) are passed as separate arguments, which is not idiomatic Java.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/jni/README.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// Java:\nint sqlite3_create_collation(sqlite3 db, String name, int eTextRep,\n                             Object pUserData, xCompareType xCompare);\n\nint sqlite3_create_collation_v2(sqlite3 db, String name, int eTextRep,\n                                Object pUserData,\n                                xCompareType xCompare, xDestroyType xDestroy);\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Tcl Extension with Tcl Path\nDESCRIPTION: Configuration command specifying the Tcl installation path. This variant is used when the Tcl installation is in a non-standard location.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/autoconf/tea/README.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./configure --with-tcl=/path/to/tcl/install/root\n```\n\n----------------------------------------\n\nTITLE: Building SQLite Analyzer Tool (TCL Required) using nmake\nDESCRIPTION: Builds the `sqlite3_analyzer.exe` utility using `nmake` and `Makefile.msc`. This tool is used to analyze the space utilization within an SQLite database file and requires a TCL installation (potentially specified via `TCLDIR=<dir>`) for its operation.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/compile-for-windows.md#2025-04-22_snippet_10\n\nLANGUAGE: cmd\nCODE:\n```\nnmake /f makefile.msc sqlite3_analyzer.exe\n```\n\n----------------------------------------\n\nTITLE: Building and Installing SQLite TCL Extension using nmake\nDESCRIPTION: Builds and installs the SQLite TCL extension using `nmake` and `Makefile.msc`. This target requires a functional TCL installation (version 9.0 assumed, potentially specified via `TCLDIR=<dir>`). This allows SQLite databases to be manipulated from TCL scripts.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/compile-for-windows.md#2025-04-22_snippet_7\n\nLANGUAGE: cmd\nCODE:\n```\nnmake /f makefile.msc tclextension-install\n```\n\n----------------------------------------\n\nTITLE: Verifying JSON Content Size in SQLite Database\nDESCRIPTION: SQL commands to verify that the database contains the expected amount of JSON data (approximately 100MB). Ensures JSON data validity across entries in the 'data1' table.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/test/json/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT sum(length(x)) FROM data1;\nSELECT * FROM data1 WHERE NOT json_valid(x);\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Tcl Extension with Tclsh Path\nDESCRIPTION: Configuration command specifying the path to the Tcl shell executable. This approach is an alternative to specifying the Tcl installation root directory.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/autoconf/tea/README.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./configure --with-tclsh=/path/to/tcl/install/root\n```\n\n----------------------------------------\n\nTITLE: Executing an F2FS Atomic Commit Transaction in C\nDESCRIPTION: Outlines the process SQLite follows to commit a transaction using F2FS atomic writes. It involves taking an exclusive write lock (`fcntl`), initiating the atomic write session (`ioctl` with `F2FS_IOC_START_ATOMIC_WRITE`), writing all dirty pages (`write`), and then committing the changes (`ioctl` with `F2FS_IOC_COMMIT_ATOMIC_WRITE`). Error handling includes aborting the write (`ioctl` with `F2FS_IOC_ABORT_VOLATILE_WRITE`) and potentially falling back to a legacy journal commit mechanism. The lock is released upon successful completion. This snippet uses conceptual elements like 'foreach' and '...dirty page...'.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/F2FS.txt#2025-04-22_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n  /* Take an F_WRLCK lock on the database file. This prevents any other\n  ** SQLite clients from reading or writing the file until the lock\n  ** is released.  */\n  rc = fcntl(fd, F_SETLK, ...);\n  if( rc!=0 ) goto failed;\n\n  rc = ioctl(fd, F2FS_IOC_START_ATOMIC_WRITE);\n  if( rc!=0 ) goto fallback_to_legacy_journal_commit;\n\n  foreach (dirty page){\n    rc = write(fd, ...dirty page...);\n    if( rc!=0 ){\n      ioctl(fd, F2FS_IOC_ABORT_VOLATILE_WRITE);\n      goto fallback_to_legacy_journal_commit;\n    }\n  }\n\n  rc = ioctl(fd, F2FS_IOC_COMMIT_ATOMIC_WRITE);\n  if( rc!=0 ){\n    ioctl(fd, F2FS_IOC_ABORT_VOLATILE_WRITE);\n    goto fallback_to_legacy_journal_commit;\n  }\n\n  /* If we get there, the transaction has been successfully \n  ** committed to persistent storage. The following call\n  ** relinquishes the F_WRLCK lock.  */\n  fcntl(fd, F_SETLK, ...);\n```\n\n----------------------------------------\n\nTITLE: Running JSON Performance Tests in SQLite CLI\nDESCRIPTION: Runs a recursive SQL query in the SQLite command-line interface to test JSON processing speed. Calculates processing throughput (MB/s) based on total real elapsed time.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/test/json/README.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n.open json100mb.db\n.timer on\nWITH RECURSIVE c(n) AS (VALUES(1) UNION ALL SELECT n+1 FROM c WHERE n<25)\nSELECT sum(json_valid(x)) FROM c, data1;\n```\n\n----------------------------------------\n\nTITLE: Using and Disposing WASM Struct Instances Safely in JavaScript\nDESCRIPTION: Provides a recommended usage pattern for struct instances. It shows accessing members (`my.member1`), assigning values, asserting correctness, passing the instance's pointer (`my.pointer`) to a C function (`aCFunction`), and crucially, calling the `dispose()` method within a `finally` block to guarantee WASM memory deallocation. Requires a created struct instance (`my`) and assumes `assert` and `aCFunction` are defined elsewhere.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/wasm/jaccwabyt/jaccwabyt.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst my = new MyStruct();\ntry {\n  console.log(my.member1, my.member2, my.member3);\n  my.member1 = 12;\n  assert(12 === my.member1);\n  /* ^^^ it may seem silly to test that, but recall that assigning that\n     property encodes the value into a byte array in heap memory, not\n     a normal JS property. Similarly, fetching the property decodes it\n     from the byte array. */\n  // Pass the struct to C code which takes a MyStruct pointer:\n  aCFunction( my.pointer );\n} finally {\n  my.dispose();\n}\n```\n\n----------------------------------------\n\nTITLE: Building SQLite with Custom Flags\nDESCRIPTION: Example showing how to configure SQLite build with optimization and deprecated features disabled.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/autoconf/README.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nCFLAGS=\"-Os -DSQLITE_OMIT_DEPRECATED\" ./configure\n```\n\n----------------------------------------\n\nTITLE: Building SQLite on Unix Systems\nDESCRIPTION: Command line instructions for configuring and building SQLite on POSIX systems with custom compiler flags for optimization.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/autoconf/README.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nCFLAGS=\"-Os\" ./configure\n```\n\n----------------------------------------\n\nTITLE: Defining a Sample C Struct to Bind (C)\nDESCRIPTION: Shows a C structure definition representing a data layout to be bound to JavaScript via Jaccwabyt. Members include an integer, a pointer, and a 64-bit integer; the offsets and types must match the corresponding JSON description. This C snippet is to be compiled to WASM for use in struct bindings.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/wasm/jaccwabyt/jaccwabyt.md#2025-04-22_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n// C-side:\nstruct Foo {\n  int member1;\n  void * member2;\n  int64_t member3;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Carray Table-Valued Function in C\nDESCRIPTION: The carray.c file demonstrates how to implement a custom table-valued function in SQLite. This requires linking against SQLite's virtual table interface and allows the creation of an in-memory table from a C array.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/misc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n// Carray table-valued function implementation\n// Demonstrates creating a custom SQLite function\n#include <sqlite3ext.h>\nSQLITE_EXTENSION_INIT3\n// Additional C code implementation...\n```\n\n----------------------------------------\n\nTITLE: Building and Installing SQLite Tcl Extension\nDESCRIPTION: Commands to test and install the SQLite Tcl extension after configuration. The 'test' option runs verification tests before installation.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/autoconf/tea/README.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmake test install\n```\n\n----------------------------------------\n\nTITLE: Creating Baseline Performance Profile for JSON and JSONB\nDESCRIPTION: Generates baseline performance profiles for processing JSON and JSONB in SQLite databases using shell scripts and outputs results to respective files (jout-trunk.txt and joutb-trunk.txt).\nSOURCE: https://github.com/sqlite/sqlite/blob/master/test/json/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsh json-speed-check.sh trunk\nsh json-speed-check.sh trunk --jsonb\n```\n\n----------------------------------------\n\nTITLE: Processing JSON in SQLite with JSON1 Extension in C\nDESCRIPTION: The json1.c file includes SQL functions and table-valued functions for JSON processing within SQLite. These functions are part of the SQLite amalgamation, providing built-in JSON support.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/misc/README.md#2025-04-22_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n// JSON processing functions\n// Built-in to SQLite amalgamation\n#include <sqlite3ext.h>\n// Additional C code implementation...\n```\n\n----------------------------------------\n\nTITLE: Building Default SQLite Targets using nmake on Windows\nDESCRIPTION: Executes the default build targets specified in the `Makefile.msc` using the `nmake` tool from a Visual Studio command prompt. This typically builds the core SQLite library and the command-line interface.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/compile-for-windows.md#2025-04-22_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\nnmake /f makefile.msc\n```\n\n----------------------------------------\n\nTITLE: Defining Magic Numbers for SQLite File Recognition\nDESCRIPTION: This snippet assigns magic numbers and strings for the Unix file(1) utility to identify various SQLite3 database formats. It uses offsets in the database header and specific integers that correspond to different applications such as Fossil, Bentley Systems, Monotone, etc. It highlights the use of the application_id pragma as well as the older user_version pragma for compatibility.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/magic.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0    string  =SQLite\\ format\\ 3\n>68  belong  =0x0f055112  Fossil checkout -\n>68  belong  =0x0f055113  Fossil global configuration -\n>68  belong  =0x0f055111  Fossil repository -\n>68  belong  =0x42654462  Bentley Systems BeSQLite Database -\n>68  belong  =0x42654c6e  Bentley Systems Localization File -\n>60  belong  =0x5f4d544e  Monotone source repository -\n>68  belong  =0x47504b47  OGC GeoPackage file -\n>68  belong  =0x47503130  OGC GeoPackage version 1.0 file -\n>68  belong  =0x45737269  Esri Spatially-Enabled Database -\n>68  belong  =0x4d504258  MBTiles tileset -\n>68  belong  =0x6a035744  TeXnicard card database\n>0   string  =SQLite      SQLite3 database\n```\n\n----------------------------------------\n\nTITLE: Library for SQLite Command-Line Dump Command in C\nDESCRIPTION: The dbdump.c file is a library that provides functionality equivalent to SQLite's '.dump' command-line command. It facilitates exporting database contents to SQL format but is not a loadable extension.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/misc/README.md#2025-04-22_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n// Library for 'dump' functionality\n// Not a loadable extension, mimics .dump command\n#include <sqlite3.h>\n// Additional C code implementation...\n```\n\n----------------------------------------\n\nTITLE: Using the Sample Parameter for Statistics Generation\nDESCRIPTION: Commands demonstrating the use of the -sample parameter to configure the percentage of database rows used for statistics generation, which can improve performance for large databases.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/expert/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Generate statistics based on 25% of the user database rows:\n./sqlite3_expert -sample 25 -sql <sql-query> test.db\n\n# Do not generate any statistics at all:\n./sqlite3_expert -sample 0 -sql <sql-query> test.db\n```\n\n----------------------------------------\n\nTITLE: Creating WASM Struct Instance using Generated Constructor in JavaScript\nDESCRIPTION: Shows the creation of a new struct instance (`my`) using the constructor function (`MyStruct`) generated by the StructBinder. This allocates memory on the WASM heap for the struct data. Requires the constructor function created in the previous step.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/wasm/jaccwabyt/jaccwabyt.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst my = new MyStruct();\n```\n\n----------------------------------------\n\nTITLE: Union and Swarm Virtual Tables in C for SQLite\nDESCRIPTION: The unionvtab.c file implements unionvtab and swarmvtab virtual tables, allowing partitioning of a large table across multiple database files, with support for on-demand attachment.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/misc/README.md#2025-04-22_snippet_8\n\nLANGUAGE: C\nCODE:\n```\n// Unionvtab and swarmvtab virtual tables\n// Partition tables across multiple db files\n#include <sqlite3ext.h>\n// Additional C code implementation...\n```\n\n----------------------------------------\n\nTITLE: Obtaining SQLite Source Code Using Fossil\nDESCRIPTION: Commands to download and access SQLite source code using the Fossil version control system. This creates a local repository and demonstrates how to update to different versions.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p ~/sqlite\ncd ~/sqlite\nfossil open https://sqlite.org/src\n```\n\n----------------------------------------\n\nTITLE: Querying JSON Data with Parameterized Path in SQLite\nDESCRIPTION: Sets up SQLite environment options, defines a parameter 'q87', and selects rows from a table where the JSON field contains the specified path. The query uses the JSON arrow operator (->>) to extract values.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/test/json/json-q1.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n.mode qbox\n.timer on\n.param set $label 'q87'\nSELECT rowid, x->>$label FROM data1 WHERE x->>$label IS NOT NULL;\n```\n\n----------------------------------------\n\nTITLE: ZIP Archive Virtual Table Implementation in C for SQLite\nDESCRIPTION: The zipfile.c file implements a virtual table to read and write ZIP archives within SQLite, enabling ZIP files to be treated as tables.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/misc/README.md#2025-04-22_snippet_9\n\nLANGUAGE: C\nCODE:\n```\n// ZIP virtual table\n// Read/write ZIP archives as SQL tables\n#include <sqlite3.h>\n// Additional C code implementation...\n```\n\n----------------------------------------\n\nTITLE: Updating SQLite Source to Different Versions Using Fossil\nDESCRIPTION: Examples of Fossil commands to update the local SQLite repository to different versions or points in time.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfossil update trunk             ;# latest trunk check-in\nfossil update release           ;# latest official release\nfossil update trunk:2024-01-01  ;# First trunk check-in after 2024-01-01\nfossil update version-3.39.0    ;# Version 3.39.0\n```\n\n----------------------------------------\n\nTITLE: Wrapping Existing C Pointer with Struct Constructor in JavaScript\nDESCRIPTION: Shows how to instantiate a struct wrapper (`m`) by passing an existing C pointer (obtained from `functionReturningASharedPtr()`) to the constructor (`MyStruct`). This allows interacting with the C struct via the JS object, but `m.dispose()` will not deallocate the underlying C memory, only run potential cleanup handlers. Requires the struct constructor and a function returning a valid pointer.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/wasm/jaccwabyt/jaccwabyt.md#2025-04-22_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nconst m = new MyStruct( functionReturningASharedPtr() );\n// calling m.dispose() will _not_ free the wrapped C-side instance\n// but will trigger any ondispose handler.\n```\n\n----------------------------------------\n\nTITLE: Defining F2FS ioctl Constants for Atomic Writes in C\nDESCRIPTION: Defines preprocessor macros for F2FS ioctl commands used by SQLite for atomic write operations, including starting, committing, aborting writes, and getting features. These constants are based on the F2FS_IOCTL_MAGIC number and utilize the _IO and _IOR macros for defining ioctl command codes.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/F2FS.txt#2025-04-22_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define F2FS_IOCTL_MAGIC        0xf5\n#define F2FS_IOC_START_ATOMIC_WRITE     _IO(F2FS_IOCTL_MAGIC, 1)\n#define F2FS_IOC_COMMIT_ATOMIC_WRITE    _IO(F2FS_IOCTL_MAGIC, 2)\n#define F2FS_IOC_START_VOLATILE_WRITE   _IO(F2FS_IOCTL_MAGIC, 3)\n#define F2FS_IOC_ABORT_VOLATILE_WRITE   _IO(F2FS_IOCTL_MAGIC, 5)\n#define F2FS_IOC_GET_FEATURES           _IOR(F2FS_IOCTL_MAGIC, 12, u32)\n#define F2FS_FEATURE_ATOMIC_WRITE       0x0004\n```\n\n----------------------------------------\n\nTITLE: Comparing Performance Against Baseline\nDESCRIPTION: Runs performance test on current SQLite version and compares results against the baseline using fossil xdiff\nSOURCE: https://github.com/sqlite/sqlite/blob/master/test/speedtest.md#2025-04-22_snippet_3\n\nLANGUAGE: tcl\nCODE:\n```\ntest/speedtest.tcl sqlite3.c ../speed/test.txt ../speed/baseline.txt\n```\n\n----------------------------------------\n\nTITLE: Preferred Unix Method for Building SQLite Tcl Extension\nDESCRIPTION: The recommended approach for building the SQLite Tcl extension on Unix systems using the canonical source code tarball. This method is better maintained than the TEA approach.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/autoconf/tea/README.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./configure --with-tclsh=$(TCLSH)\nmake tclextension-install\n```\n\n----------------------------------------\n\nTITLE: Instantiating a WASM Struct in JavaScript\nDESCRIPTION: Demonstrates the standard way to create a new instance of a WASM-backed struct using its JavaScript constructor (e.g., `MyStruct`), which is typically returned by a `StructBinder`. This allocates memory on the WASM heap for the struct data. No arguments are passed, indicating default memory allocation managed by the constructor.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/wasm/jaccwabyt/jaccwabyt.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst x = new MyStruct;\n```\n\n----------------------------------------\n\nTITLE: Detecting F2FS Atomic Commit Support in C\nDESCRIPTION: Demonstrates how SQLite checks if a database file, represented by the file descriptor `fd`, supports F2FS atomic commits on Linux/Android. It uses the `ioctl` system call with the `F2FS_IOC_GET_FEATURES` command (defined previously) and checks if the `F2FS_FEATURE_ATOMIC_WRITE` flag is set in the returned `flags` variable. Requires a valid file descriptor `fd`.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/F2FS.txt#2025-04-22_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n  u32 flags = 0;\n  rc = ioctl(fd, F2FS_IOC_GET_FEATURES, &flags);\n  if( rc==0 && (flags & F2FS_FEATURE_ATOMIC_WRITE) ){\n    /* File supports F2FS atomic commits */\n  }else{\n    /* File does NOT support F2FS atomic commits */\n  }\n```\n\n----------------------------------------\n\nTITLE: Preferred Windows Method for Building SQLite Tcl Extension\nDESCRIPTION: The recommended approach for building the SQLite Tcl extension on Windows systems using the canonical source code and NMAKE. This is the Windows equivalent of the preferred Unix method.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/autoconf/tea/README.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnmake /f Makefile.msc tclextension-install TCLSH_CMD=$(TCLSH)\n```\n\n----------------------------------------\n\nTITLE: Running Baseline Performance Test\nDESCRIPTION: Executes speedtest.tcl script to measure baseline performance using a reference SQLite amalgamation file and stores results in baseline.txt\nSOURCE: https://github.com/sqlite/sqlite/blob/master/test/speedtest.md#2025-04-22_snippet_1\n\nLANGUAGE: tcl\nCODE:\n```\ntest/speedtest.tcl ../baseline/sqlite3.c ../speed/baseline.txt\n```\n\n----------------------------------------\n\nTITLE: Custom Flag Handler for SQLite Autosetup\nDESCRIPTION: Function template for handling vendor-specific flags in the SQLite configure script, called late in the configuration process but before file generation.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/autosetup/README.md#2025-04-22_snippet_4\n\nLANGUAGE: Tcl\nCODE:\n```\nproc sqlite-custom-handle-flags {} {\n  ... do any custom flag handling here ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Build for Debugging\nDESCRIPTION: Example of configuring SQLite for a debugging build with optimization disabled and debug symbols enabled.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n../sqlite/configure --enable-all --enable-debug CFLAGS='-O0 -g'\n```\n\n----------------------------------------\n\nTITLE: Building sqlite3_analyzer.exe (Dynamically Linked) using nmake\nDESCRIPTION: Compiles the `sqlite3_analyzer.exe` utility using `nmake` and `Makefile.msc`. This standard build results in an executable that depends on the TCL DLL (e.g., `tcl98.dll` or similar) being available in the system's PATH at runtime.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/compile-for-windows.md#2025-04-22_snippet_14\n\nLANGUAGE: cmd\nCODE:\n```\nnmake /f Makefile.msc sqlite3_analyzer.exe\n```\n\n----------------------------------------\n\nTITLE: Converting Autosetup Variables in Makefile.in\nDESCRIPTION: Example showing how autosetup-exported variables are converted from @X_Y@ format to X.y format in the Makefile for better readability and organization of build flags.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/autosetup/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nLDFLAGS.shobj = @SHOBJ_LDFLAGS@\nLDFLAGS.zlib = @LDFLAGS_ZLIB@\nLDFLAGS.math = @LDFLAGS_MATH@\n```\n\n----------------------------------------\n\nTITLE: Vendor-specific Custom Flags Function for SQLite Autosetup\nDESCRIPTION: Template for creating vendor-specific branch customizations to the SQLite configure script by implementing the sqlite-custom-flags function in a separate file.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/autosetup/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Tcl\nCODE:\n```\nproc sqlite-custom-flags {} {\n  # If any existing --flags require different default values\n  # then call:\n  options-defaults {\n    flag-name new-default-value\n    ...\n  }\n  # ^^^ That will replace the default value but will not update\n  # the --help text, which may lead to some confusion:\n  # https://github.com/msteveb/autosetup/issues/77\n\n  return {\n   {*} {\n     new-flag-name => {Help text}\n     ...\n   }\n  }; #see below\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite for Release Builds\nDESCRIPTION: Example of configuring SQLite for a release build with all features enabled.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n../sqlite/configure --enable-all\n```\n\n----------------------------------------\n\nTITLE: Building SQLite Amalgamation\nDESCRIPTION: Compiles the current SQLite source into an amalgamation file\nSOURCE: https://github.com/sqlite/sqlite/blob/master/test/speedtest.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake sqlite3.c\n```\n\n----------------------------------------\n\nTITLE: Querying Direct-Only SQL Functions in SQLite\nDESCRIPTION: This SQL query retrieves all SQL functions that are never allowed to be used in the schema, triggers, or views. It uses the enhanced pragma_function_list to filter functions with the SQLITE_DIRECTONLY flag.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/trusted-schema.md#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT DISTINCT name FROM pragma_function_list\n WHERE (flags & 0x80000)!=0\n ORDER BY name;\n```\n\n----------------------------------------\n\nTITLE: Compiling SQLite with Additional Options\nDESCRIPTION: Examples of how to add compile-time options to the SQLite build process, such as omitting deprecated features.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n./configure --enable-all\nmake OPTIONS=-DSQLITE_OMIT_DEPRECATED sqlite3\n```\n\n----------------------------------------\n\nTITLE: Running testrunner.tcl via testfixture (Shell)\nDESCRIPTION: Example command to run the `testrunner.tcl` script using the `./testfixture` wrapper. The script automatically detects and reports the number of jobs (CPU cores) it will use by default, as shown in the example output.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/testrunner.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ ./testfixture $TESTDIR/testrunner.tcl\n```\n\n----------------------------------------\n\nTITLE: Remove Non-Public Domain Code Command\nDESCRIPTION: Shell command to remove all non-public-domain code from the SQLite source repository, leaving only pure public domain content.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/LICENSE.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf configure autosetup autoconf\n```\n\n----------------------------------------\n\nTITLE: Installing Emscripten SDK in Linux\nDESCRIPTION: Commands for installing the Emscripten SDK on a Linux system. This process involves cloning the repository, installing and activating the latest SDK tools for the current user.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/wasm/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Clone the emscripten repository:\n$ sudo apt install git\n$ git clone https://github.com/emscripten-core/emsdk.git\n$ cd emsdk\n\n# Download and install the latest SDK tools:\n$ ./emsdk install latest\n\n# Make the \"latest\" SDK \"active\" for the current user:\n$ ./emsdk activate latest\n```\n\n----------------------------------------\n\nTITLE: Setting Query Mode and Timer in SQLite\nDESCRIPTION: Sets the mode to 'qbox' and enables timing for SQLite commands to measure performance. This is useful for benchmarking queries and gathering performance statistics.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/test/json/jsonb-q1.txt#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n.mode qbox\n.timer on\n```\n\n----------------------------------------\n\nTITLE: Inserting Test Data Points into SQLite\nDESCRIPTION: Inserts coordinate data points into the xyoff table with columns for ID, position, and x/y coordinates.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/rtree/visual01.txt#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO xyoff VALUES(6,4,120,538);\nINSERT INTO xyoff VALUES(6,4,403,663);\n[...additional inserts...]\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite to find EMSDK via environment\nDESCRIPTION: Commands to activate the Emscripten SDK in the current terminal and verify that it's accessible before running the SQLite configure script.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/wasm/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Activate PATH and other environment variables in the current terminal:\n$ source ./emsdk_env.sh\n\n$ which emcc\n/path/to/emsdk/upstream/emscripten/emcc\n\n$ ./configure ...\n```\n\n----------------------------------------\n\nTITLE: Defining StructBinderFactory Signature in JavaScript Context\nDESCRIPTION: Defines the signature of the `StructBinderFactory` function. It accepts a single argument, `configOptions` (an object), which configures the WASM environment interaction (heap, allocators, etc.). It returns a `StructBinder` function. Throws an error if configuration is invalid.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/wasm/jaccwabyt/jaccwabyt.md#2025-04-22_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nFunction StructBinderFactory(object configOptions);\n```\n\n----------------------------------------\n\nTITLE: SQLite Geopoly Visual Test Case\nDESCRIPTION: Test script header for the geopoly virtual table testing. The script is meant to be executed in SQLite CLI with output redirected to an HTML file for visual inspection in a web browser.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/rtree/visual01.txt#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n#!sqlite3\n#\n# This is a visual test case for the geopoly virtual table.\n#\n# Run this script in the sqlite3 CLI, and redirect output into an\n# HTML file.  This display the HTML in a webbrowser.\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite with explicit EMSDK path\nDESCRIPTION: Alternative approach to specify the EMSDK directory path directly to the SQLite configure script using the --with-emsdk flag.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/wasm/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ./configure --with-emsdk=/path/to/emsdk\n```\n\n----------------------------------------\n\nTITLE: Explaining Test Steps with testrunner.tcl (Shell)\nDESCRIPTION: Illustrates the `--explain` option with `testrunner.tcl` for the 'mdevtest' configuration. It prints a human-readable summary of the planned build and test steps to standard output without executing them. Requires `tclsh` and the `testrunner.tcl` script.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/testrunner.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n# Show what builds and tests would have been run\\ntclsh $TESTDIR/testrunner.tcl --explain mdevtest\n```\n\n----------------------------------------\n\nTITLE: Generating SVG Visualization\nDESCRIPTION: Generates HTML/SVG markup to visualize polygons and their relationships, including overlap tests and bounding boxes.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/rtree/visual01.txt#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n.print '<html>'\n.print '<h1>Everything</h1>'\n.print '<svg width=\"1000\" height=\"800\" style=\"border:1px solid black\">'\nSELECT geopoly_svg(_shape, \n         printf('style=\"fill:none;stroke:%s;stroke-width:1\"',clr)\n       )\n  FROM geo1;\nSELECT geopoly_svg(poly, \n         printf('style=\"fill:%s;fill-opacity:0.5;\"',clr)\n       )\n  FROM querypoly;\n.print '</svg>'\n```\n\n----------------------------------------\n\nTITLE: Querying Failed Tests in SQLite\nDESCRIPTION: SQL query to find all failed test cases in the testrunner database.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/testrunner.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM script WHERE state='failed'\n```\n\n----------------------------------------\n\nTITLE: Transforming WASM Struct Member Signatures for Emscripten Bindings - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to transform a struct member signature string to match the formatting expectations of Emscripten's addFunction(). It first strips unsupported characters, then replaces all pointer and character indicators ('p','P','s','c','C') with 'i', effectively mapping them to int32 for Emscripten. The input signature string should follow the conventions described in the documentation. The output is a sanitized signature string suitable for addFunction(), ensuring interoperability between JavaScript and WASM/C+\\+ code.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/wasm/jaccwabyt/jaccwabyt.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nsignature.replace(/[^vipPsjfdcC]/g,'').replace(/[pPscC]/g,'i');\n```\n\n----------------------------------------\n\nTITLE: Generating Regular Polygons with SQLite Geopoly Functions\nDESCRIPTION: Creates and renders regular polygons with different numbers of sides using geopoly_regular function. The snippet positions polygons at specific coordinates with consistent radii and varying numbers of sides from 3 to 30.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/rtree/visual01.txt#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\n.print '<h1>Regular Polygons</h1>'\n.print '<svg width=\"1000\" height=\"200\" style=\"border:1px solid black\">'\nSELECT geopoly_svg(geopoly_regular(100,100,40,3),'style=\"fill:none;stroke:red;stroke-width:1\"');\nSELECT geopoly_svg(geopoly_regular(200,100,40,4),'style=\"fill:none;stroke:orange;stroke-width:1\"');\nSELECT geopoly_svg(geopoly_regular(300,100,40,5),'style=\"fill:none;stroke:green;stroke-width:1\"');\nSELECT geopoly_svg(geopoly_regular(400,100,40,6),'style=\"fill:none;stroke:blue;stroke-width:1\"');\nSELECT geopoly_svg(geopoly_regular(500,100,40,7),'style=\"fill:none;stroke:purple;stroke-width:1\"');\nSELECT geopoly_svg(geopoly_regular(600,100,40,8),'style=\"fill:none;stroke:red;stroke-width:1\"');\nSELECT geopoly_svg(geopoly_regular(700,100,40,10),'style=\"fill:none;stroke:orange;stroke-width:1\"');\nSELECT geopoly_svg(geopoly_regular(800,100,40,20),'style=\"fill:none;stroke:green;stroke-width:1\"');\nSELECT geopoly_svg(geopoly_regular(900,100,40,30),'style=\"fill:none;stroke:blue;stroke-width:1\"');\n.print '</svg>'\n```\n\n----------------------------------------\n\nTITLE: Running Very Quick Tests\nDESCRIPTION: Commands to run the 'veryquick' test suite using testfixture.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/testrunner.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./testfixture $TESTDIR/testrunner.tcl\n./testfixture $TESTDIR/testrunner.tcl veryquick\n```\n\n----------------------------------------\n\nTITLE: Cleaning and Building SQLite Baseline\nDESCRIPTION: Cleans previous builds and compiles a baseline SQLite version with relevant source files for performance testing. Requires make and a standard SQLite build environment.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/test/json/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmake clean sqlite3.c\n```\n\n----------------------------------------\n\nTITLE: Closing HTML Output in SQLite Script\nDESCRIPTION: Closes the HTML output by printing the closing HTML tag. This simple snippet finalizes the HTML document produced by the script.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/rtree/visual01.txt#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\n.print '</html>'\n```\n\n----------------------------------------\n\nTITLE: Build Configuration Command\nDESCRIPTION: Standard command for configuring and building SQLite from source.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/LICENSE.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./configure && make\n```\n\n----------------------------------------\n\nTITLE: Setting Job Count with testrunner.tcl and testfixture (Shell)\nDESCRIPTION: Shows how to override the default number of parallel jobs by passing the `--jobs` option (here set to 8) to `testrunner.tcl` via the `./testfixture` wrapper. Requires `./testfixture` and `testrunner.tcl`.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/testrunner.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ ./testfixture $TESTDIR/testrunner.tcl --jobs 8\n```\n\n----------------------------------------\n\nTITLE: Unix Installation Example for SQLite Tcl Extension\nDESCRIPTION: A complete example showing how to configure, build, and install the SQLite Tcl extension on Unix-like systems with a specific installation prefix.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/autoconf/tea/README.txt#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ cd sqlite-*-tea\n$ ./configure --prefix=/opt/tcl\n$ make\n$ make install\n```\n\n----------------------------------------\n\nTITLE: Serving SQLite WASM content with althttpd\nDESCRIPTION: Commands for setting up a local HTTP server using althttpd to serve the WASM content. This is necessary because WASM cannot be loaded directly from file:// URLs due to security limitations.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/wasm/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ext/wasm\n$ althttpd --enable-sab --max-age 1 --page index.html\n# Or, more simply, from the ext/wasm dir:\n$ make httpd\n```\n\n----------------------------------------\n\nTITLE: Starting Althttpd Server with OPFS Support\nDESCRIPTION: Command to run the althttpd server with Shared Array Buffer support enabled and serving index.html as the default page.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/wasm/README-dist.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nalthttpd --enable-sab --page index.html\n```\n\n----------------------------------------\n\nTITLE: Running SQLite Developer Tests using nmake\nDESCRIPTION: Executes the SQLite developer test suite using `nmake` and `Makefile.msc`. This comprehensive test suite requires a TCL installation (potentially specified via `TCLDIR=<dir>`) to run.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/compile-for-windows.md#2025-04-22_snippet_8\n\nLANGUAGE: cmd\nCODE:\n```\nnmake /f makefile.msc devtest\n```\n\n----------------------------------------\n\nTITLE: Dynamically Changing Job Count for Running testrunner.tcl (Shell)\nDESCRIPTION: Command to dynamically change the number of jobs for a currently running `testrunner.tcl` instance. It uses the `njob` argument followed by the desired number of jobs (`$NEW_NUMBER_OF_JOBS`). This command must be executed via `./testfixture` from the directory containing the active `testrunner.log` and `testrunner.db` files.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/testrunner.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ ./testfixture $TESTDIR/testrunner.tcl njob $NEW_NUMBER_OF_JOBS\n```\n\n----------------------------------------\n\nTITLE: Setting TCL Directory for Windows Compilation\nDESCRIPTION: Command to set the TCL directory environment variable for Windows builds, which is required for running tests.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nset TCLDIR=c:\\Tcl\n```\n\n----------------------------------------\n\nTITLE: Creating Speed Test Directory\nDESCRIPTION: Creates a directory named 'speed' in the parent directory to store performance measurement output files\nSOURCE: https://github.com/sqlite/sqlite/blob/master/test/speedtest.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p ../speed\n```\n\n----------------------------------------\n\nTITLE: Setting SQLite Compile Options on Windows\nDESCRIPTION: Example of specifying additional compiler options when building with MSVC, enabling STAT4 and disabling JSON support.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/autoconf/README.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n\"OPTS=-DSQLITE_ENABLE_STAT4=1 -DSQLITE_OMIT_JSON=1\"\n```\n\n----------------------------------------\n\nTITLE: Testing SQLite WASM on remote SSH machine\nDESCRIPTION: Instructions for testing SQLite WASM on a remote machine accessed via SSH. This setup involves port forwarding to meet the SharedArrayBuffer security requirements.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/wasm/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nRemote: althttpd --enable-sab --port 8080 --popup\nLocal:  ssh -L 8180:localhost:8080 remote\nLocal:  Point your web-browser at http://localhost:8180/index.html\n```\n\n----------------------------------------\n\nTITLE: Updating Autosetup Command\nDESCRIPTION: Command sequence for updating the Autosetup framework from a git repository checkout, showing how to install a fresh copy into the SQLite codebase.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/autosetup/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ git clone https://github.com/msteveb/autosetup\n$ cd autosetup\n# Or, if it's already checked out:\n$ git pull\n```\n\n----------------------------------------\n\nTITLE: Opening a Hex Database Dump in SQLite CLI\nDESCRIPTION: Demonstrates the SQLite CLI command to open a database from a hex dump file. If no filename is provided, the CLI reads the hex dump from standard input.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/tool/dbtotxt.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n.open --hexdb  ?OPTIONAL-FILENAME?\n```\n\n----------------------------------------\n\nTITLE: Building Static TCL Library using nmake\nDESCRIPTION: Compiles a static version of the TCL library (`tcl90s.lib` or similar) using `nmake` and the TCL Visual C++ makefile (`makefile.vc`). The `OPTS=static` argument directs the build process to create a static library instead of a DLL. This static library is required for statically linking TCL into other applications.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/compile-for-windows.md#2025-04-22_snippet_15\n\nLANGUAGE: cmd\nCODE:\n```\nnmake /f makefile.vc OPTS=static shell\n```\n\n----------------------------------------\n\nTITLE: Installing Compiled TCL using nmake on Windows\nDESCRIPTION: This command installs the previously compiled TCL build into the directory specified by `INSTALLDIR`. It uses the Visual C++ makefile (`makefile.vc`) and the `nmake` tool. This step must be run after the `nmake release` command, and the `INSTALLDIR` path must match the one used during compilation.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/compile-for-windows.md#2025-04-22_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nnmake /f makefile.vc INSTALLDIR=c:\\Tcl install\n```\n\n----------------------------------------\n\nTITLE: Public Domain Header Comment Template\nDESCRIPTION: Standard header comment used in SQLite public domain source files to explicitly disclaim copyright and provide a blessing.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/LICENSE.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThe author disclaims copyright to this source code.  In place of\na legal notice, here is a blessing:\n\n  *   May you do good and not evil.\n  *   May you find forgiveness for yourself and forgive others.\n  *   May you share freely, never taking more than you give.\n```\n\n----------------------------------------\n\nTITLE: Architecture Diagram for Jaccwabyt (pikchr)\nDESCRIPTION: A pikchr-format code block illustrating the core class and factory relationships in the Jaccwabyt library, including StructBinderFactory, StructBinder, StructType, and their interactions with C memory and struct instances. This diagram is included for developer orientation and is not executably runnable, but serves as visual documentation of the API architecture.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/wasm/jaccwabyt/jaccwabyt.md#2025-04-22_snippet_4\n\nLANGUAGE: pikchr\nCODE:\n```\nBSBF: box rad 0.3*boxht \"StructBinderFactory\" fit fill lightblue\nBSB: box same \"StructBinder\" fit at 0.75 e of 0.7 s of BSBF.c\nBST: box same \"StructType<T>\" fit at 1.5 e of BSBF\nBSC: box same \"Struct<T>\" \"Ctor\" fit at 1.5 s of BST\nBSI: box same \"Struct<T>\" \"Instances\" fit at 1 right of BSB.e\nBC: box same at 0.25 right of 1.6 e of BST \"C Structs\" fit fill lightgrey\n\narrow -> from BSBF.s to BSB.w \"Generates\" aligned above\narrow -> from BSB.n to BST.sw \"Contains\" aligned above\narrow -> from BSB.s to BSC.nw \"Generates\" aligned below\narrow -> from BSC.ne to BSI.s \"Constructs\" aligned below\narrow <- from BST.se to BSI.n \"Inherits\" aligned above\narrow <-> from BSI.e to BC.s dotted \"Shared\" aligned above \"Memory\" aligned below\narrow -> from BST.e to BC.w dotted \"Mirrors Struct\" aligned above \"Model From\" aligned below\narrow -> from BST.s to BSC.n \"Prototype of\" aligned above\n```\n\n----------------------------------------\n\nTITLE: Running ZipVFS Tests\nDESCRIPTION: Commands to run tests with ZipVFS functionality enabled.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/testrunner.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ntclsh $TESTDIR/testrunner.tcl --zipvfs $PATH_TO_ZIPVFS\ntclsh $TESTDIR/testrunner.tcl --zipvfs $PATH_TO_ZIPVFS mdevtest\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Tcl Extension with Default TEA Method\nDESCRIPTION: Basic configuration command for building SQLite Tcl extension using the TEA-like approach. This command initializes the build process and must be run before compilation.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/autoconf/tea/README.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./configure ...flags...\n```\n\n----------------------------------------\n\nTITLE: JSONB Element Type Codes Documentation\nDESCRIPTION: Defines the 16 element type codes (0-15) used in JSONB format, where the type is encoded in the least significant 4 bits of the header byte. Includes NULL, boolean, numeric, text, array and object types with payload specifications.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/jsonb.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n0 - NULL   - JSON null value (zero payload size)\n1 - TRUE   - JSON true value (zero payload size)\n2 - FALSE  - JSON false value (zero payload size)\n3 - INT    - Canonical RFC 8259 integer\n4 - INT5   - Non-canonical integer format\n5 - FLOAT  - Canonical RFC 8259 float\n6 - FLOAT5 - Non-canonical float format\n7 - TEXT   - Unescaped UTF8 string\n8 - TEXTJ  - RFC 8259 escaped string\n9 - TEXT5  - JSON5 escaped string\n10 - TEXTRAW - Raw UTF8 with chars needing escape\n11 - ARRAY  - JSON array container\n12 - OBJECT - JSON object container\n13-15 - RESERVED for future use\n```\n\n----------------------------------------\n\nTITLE: Running Full Test Suite\nDESCRIPTION: Command to run the complete test suite.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/testrunner.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./testfixture $TESTDIR/testrunner.tcl full\n```\n\n----------------------------------------\n\nTITLE: Running Test Status Check\nDESCRIPTION: Commands to check the status of running tests using testfixture.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/doc/testrunner.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./testfixture $(TESTDIR)/testrunner.tcl status\n```\n\n----------------------------------------\n\nTITLE: Installing Updated Autosetup in SQLite\nDESCRIPTION: Commands to install the updated Autosetup framework in the SQLite repository, followed by checking which files were modified.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/autosetup/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ /path/to/autosetup-checkout/autosetup --install .\n$ fossil status # show the modified files\n```\n\n----------------------------------------\n\nTITLE: Unicode Uppercase to Lowercase Mapping for Fullwidth and Deseret Characters\nDESCRIPTION: A data file segment that defines the uppercase to lowercase mappings for Unicode characters, specifically focusing on Fullwidth Latin letters and Deseret alphabet. Each line contains the uppercase character code point, a case mapping indicator 'C', and the corresponding lowercase code point, along with a comment describing the character.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/fts3/unicode/CaseFolding.txt#2025-04-22_snippet_1\n\nLANGUAGE: data\nCODE:\n```\nFF26; C; FF46; # FULLWIDTH LATIN CAPITAL LETTER F\nFF27; C; FF47; # FULLWIDTH LATIN CAPITAL LETTER G\nFF28; C; FF48; # FULLWIDTH LATIN CAPITAL LETTER H\nFF29; C; FF49; # FULLWIDTH LATIN CAPITAL LETTER I\nFF2A; C; FF4A; # FULLWIDTH LATIN CAPITAL LETTER J\nFF2B; C; FF4B; # FULLWIDTH LATIN CAPITAL LETTER K\nFF2C; C; FF4C; # FULLWIDTH LATIN CAPITAL LETTER L\nFF2D; C; FF4D; # FULLWIDTH LATIN CAPITAL LETTER M\nFF2E; C; FF4E; # FULLWIDTH LATIN CAPITAL LETTER N\nFF2F; C; FF4F; # FULLWIDTH LATIN CAPITAL LETTER O\nFF30; C; FF50; # FULLWIDTH LATIN CAPITAL LETTER P\nFF31; C; FF51; # FULLWIDTH LATIN CAPITAL LETTER Q\nFF32; C; FF52; # FULLWIDTH LATIN CAPITAL LETTER R\nFF33; C; FF53; # FULLWIDTH LATIN CAPITAL LETTER S\nFF34; C; FF54; # FULLWIDTH LATIN CAPITAL LETTER T\nFF35; C; FF55; # FULLWIDTH LATIN CAPITAL LETTER U\nFF36; C; FF56; # FULLWIDTH LATIN CAPITAL LETTER V\nFF37; C; FF57; # FULLWIDTH LATIN CAPITAL LETTER W\nFF38; C; FF58; # FULLWIDTH LATIN CAPITAL LETTER X\nFF39; C; FF59; # FULLWIDTH LATIN CAPITAL LETTER Y\nFF3A; C; FF5A; # FULLWIDTH LATIN CAPITAL LETTER Z\n10400; C; 10428; # DESERET CAPITAL LETTER LONG I\n10401; C; 10429; # DESERET CAPITAL LETTER LONG E\n10402; C; 1042A; # DESERET CAPITAL LETTER LONG A\n10403; C; 1042B; # DESERET CAPITAL LETTER LONG AH\n10404; C; 1042C; # DESERET CAPITAL LETTER LONG O\n10405; C; 1042D; # DESERET CAPITAL LETTER LONG OO\n10406; C; 1042E; # DESERET CAPITAL LETTER SHORT I\n10407; C; 1042F; # DESERET CAPITAL LETTER SHORT E\n10408; C; 10430; # DESERET CAPITAL LETTER SHORT A\n10409; C; 10431; # DESERET CAPITAL LETTER SHORT AH\n1040A; C; 10432; # DESERET CAPITAL LETTER SHORT O\n1040B; C; 10433; # DESERET CAPITAL LETTER SHORT OO\n1040C; C; 10434; # DESERET CAPITAL LETTER AY\n1040D; C; 10435; # DESERET CAPITAL LETTER OW\n1040E; C; 10436; # DESERET CAPITAL LETTER WU\n1040F; C; 10437; # DESERET CAPITAL LETTER YEE\n10410; C; 10438; # DESERET CAPITAL LETTER H\n10411; C; 10439; # DESERET CAPITAL LETTER PEE\n10412; C; 1043A; # DESERET CAPITAL LETTER BEE\n10413; C; 1043B; # DESERET CAPITAL LETTER TEE\n10414; C; 1043C; # DESERET CAPITAL LETTER DEE\n10415; C; 1043D; # DESERET CAPITAL LETTER CHEE\n10416; C; 1043E; # DESERET CAPITAL LETTER JEE\n10417; C; 1043F; # DESERET CAPITAL LETTER KAY\n10418; C; 10440; # DESERET CAPITAL LETTER GAY\n10419; C; 10441; # DESERET CAPITAL LETTER EF\n1041A; C; 10442; # DESERET CAPITAL LETTER VEE\n1041B; C; 10443; # DESERET CAPITAL LETTER ETH\n1041C; C; 10444; # DESERET CAPITAL LETTER THEE\n1041D; C; 10445; # DESERET CAPITAL LETTER ES\n1041E; C; 10446; # DESERET CAPITAL LETTER ZEE\n1041F; C; 10447; # DESERET CAPITAL LETTER ESH\n10420; C; 10448; # DESERET CAPITAL LETTER ZHEE\n10421; C; 10449; # DESERET CAPITAL LETTER ER\n10422; C; 1044A; # DESERET CAPITAL LETTER EL\n10423; C; 1044B; # DESERET CAPITAL LETTER EM\n10424; C; 1044C; # DESERET CAPITAL LETTER EN\n10425; C; 1044D; # DESERET CAPITAL LETTER ENG\n10426; C; 1044E; # DESERET CAPITAL LETTER OI\n10427; C; 1044F; # DESERET CAPITAL LETTER EW\n```\n\n----------------------------------------\n\nTITLE: Initializing Default Test Environment in SQLite\nDESCRIPTION: Default initialization sequence that runs at the start of processing each test script. Sets up database connections and NULL value display.\nSOURCE: https://github.com/sqlite/sqlite/blob/master/ext/jni/src/org/sqlite/jni/test-script-interpreter.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n--close all\n--db 0\n--new test.db\n--null nil\n```"
  }
]