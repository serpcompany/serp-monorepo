[
  {
    "owner": "espressif",
    "repo": "esp-zigbee-sdk",
    "content": "TITLE: Processing OTA Upgrade Requests in C\nDESCRIPTION: This snippet shows how the server handles a Query Next Image request and begins the OTA upgrade process, including progress tracking of data transmission.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_ota/ota_server/README.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nI (5846) ESP_OTA_SERVER: OTA upgrade server query image\nI (5846) ESP_OTA_SERVER: OTA client address: 0x43a7\nI (5846) ESP_OTA_SERVER: OTA version: 0x1010100, image type: 0x1011, manufacturer code: 1001, \nI (5856) ESP_OTA_SERVER: OTA table index: 0x0\nI (6436) ESP_OTA_SERVER: -- OTA Server transmits data from 0x0 to 0x43a7: progress [167/618486]\nI (6436) ESP_OTA_SERVER: OTA client address: 0x43a7\nI (6436) ESP_OTA_SERVER: OTA version: 0x1010101, image type: 0x1011, server status: 0\nI (6746) ESP_OTA_SERVER: -- OTA Server transmits data from 0x0 to 0x43a7: progress [390/618486]\nI (6996) ESP_OTA_SERVER: -- OTA Server transmits data from 0x0 to 0x43a7: progress [613/618486]\nI (7246) ESP_OTA_SERVER: -- OTA Server transmits data from 0x0 to 0x43a7: progress [836/618486]\nI (7496) ESP_OTA_SERVER: -- OTA Server transmits data from 0x0 to 0x43a7: progress [1059/618486]\nI (7756) ESP_OTA_SERVER: -- OTA Server transmits data from 0x0 to 0x43a7: progress [1282/618486]\nI (8006) ESP_OTA_SERVER: -- OTA Server transmits data from 0x0 to 0x43a7: progress [1505/618486]\n```\n\n----------------------------------------\n\nTITLE: Creating OTA Upgrade Client Cluster in C\nDESCRIPTION: Code example for creating a Home Automation OTA Upgrade Client Device (HAOUC) that can download firmware updates from an OTA server, specifying version information, hardware details, and communication parameters.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_ota_upgrade.rst#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define OTA_UPGRADE_RUNNING_FILE_VERSION    0x01010101\n#define OTA_UPGRADE_DOWNLOADED_FILE_VERSION ESP_ZB_ZCL_OTA_UPGRADE_DOWNLOADED_FILE_VERSION_DEF_VALUE\n#define OTA_UPGRADE_MANUFACTURER            0x1001\n#define OTA_UPGRADE_IMAGE_TYPE              0x1011\n#define OTA_UPGRADE_HW_VERSION              0x0101\n#define OTA_UPGRADE_MAX_DATA_SIZE           223 \nesp_zb_attribute_list_t *basic_cluster = esp_zb_basic_cluster_create(NULL);\nesp_zb_ota_cluster_cfg_t ota_cluster_cfg = {\n    .ota_upgrade_file_version = OTA_UPGRADE_RUNNING_FILE_VERSION,\n    .ota_upgrade_downloaded_file_ver = OTA_UPGRADE_DOWNLOADED_FILE_VERSION,\n    .ota_upgrade_manufacturer = OTA_UPGRADE_MANUFACTURER,\n    .ota_upgrade_image_type = OTA_UPGRADE_IMAGE_TYPE,\n};\nesp_zb_attribute_list_t *ota_cluster = esp_zb_ota_cluster_create(&ota_cluster_cfg);\nesp_zb_zcl_ota_upgrade_client_variable_t variable_config = {\n    .timer_query = ESP_ZB_ZCL_OTA_UPGRADE_QUERY_TIMER_COUNT_DEF,\n    .hw_version = OTA_UPGRADE_HW_VERSION,\n    .max_data_size = OTA_UPGRADE_MAX_DATA_SIZE,\n};\nuint16_t ota_upgrade_server_addr = 0xffff;\nuint8_t ota_upgrade_server_ep = 0xff;\nesp_zb_cluster_list_t *cluster_list = esp_zb_zcl_cluster_list_create();\nesp_zb_ep_list_t *ep_list = esp_zb_ep_list_create();\nesp_zb_endpoint_config_t endpoint_config = {\n    .endpoint = ESP_OTA_CLIENT_ENDPOINT,\n    .app_profile_id = ESP_ZB_AF_HA_PROFILE_ID,\n    .app_device_id = ESP_ZB_HA_TEST_DEVICE_ID,\n    .app_device_version = 0,\n};\nESP_ERROR_CHECK(esp_zb_basic_cluster_add_attr(basic_cluster, ESP_ZB_ZCL_ATTR_BASIC_MANUFACTURER_NAME_ID, ESP_MANUFACTURER_NAME));\nESP_ERROR_CHECK(esp_zb_basic_cluster_add_attr(basic_cluster, ESP_ZB_ZCL_ATTR_BASIC_MODEL_IDENTIFIER_ID, ESP_MODEL_IDENTIFIER));\nESP_ERROR_CHECK(esp_zb_ota_cluster_add_attr(ota_cluster, ESP_ZB_ZCL_ATTR_OTA_UPGRADE_CLIENT_DATA_ID, (void *)&variable_config));\nESP_ERROR_CHECK(esp_zb_ota_cluster_add_attr(ota_cluster, ESP_ZB_ZCL_ATTR_OTA_UPGRADE_SERVER_ADDR_ID, (void *)&ota_upgrade_server_addr));\nESP_ERROR_CHECK(esp_zb_ota_cluster_add_attr(ota_cluster, ESP_ZB_ZCL_ATTR_OTA_UPGRADE_SERVER_ENDPOINT_ID, (void *)&ota_upgrade_server_ep));\nESP_ERROR_CHECK(esp_zb_cluster_list_add_basic_cluster(cluster_list, basic_cluster, ESP_ZB_ZCL_CLUSTER_SERVER_ROLE));\nESP_ERROR_CHECK(esp_zb_cluster_list_add_ota_cluster(cluster_list, ota_cluster, ESP_ZB_ZCL_CLUSTER_CLIENT_ROLE));\nESP_ERROR_CHECK(esp_zb_ep_list_add_ep(ep_list, cluster_list, endpoint_config));\nesp_zb_device_register(ep_list);\n```\n\n----------------------------------------\n\nTITLE: Creating Scene Switch Endpoint with Scenes Cluster Client\nDESCRIPTION: This snippet demonstrates how to create an endpoint with a Scene Cluster Client that can control a light's status and brightness. It sets up the necessary clusters and attributes for a scene switch device.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_scene.rst#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define HA_SCENES_SWITCH 1\n#define HA_SCENES_LIGHT 10\n#define HA_SCENES_LIGHT_ADDR 0x0000 // The short address of Remote scene light\n#define HA_SCENES_LIGHT_GROUP1_ID 0x0001\n#define HA_SCENES_LIGHT_SCENE1_ID 0x01\n#define HA_SCENES_LIGHT_SCENE2_ID 0x02\n#define MANUFACTURER_NAME \"\\x09\"\"ESPRESSIF\"\n#define MODEL_IDENTIFIER \"\\x07\" CONFIG_IDF_TARGET\n\nstatic esp_err_t zb_scenes_switch_create(void)\n{\n    esp_zb_ep_list_t *ep_list = esp_zb_ep_list_create();\n    esp_zb_endpoint_config_t endpoint_config = {\n        .endpoint = HA_SCENES_SWITCH,\n        .app_profile_id = ESP_ZB_AF_HA_PROFILE_ID,\n        .app_device_id = ESP_ZB_HA_ON_OFF_SWITCH_DEVICE_ID,\n        .app_device_version = 0,\n    };\n    esp_zb_cluster_list_t *cluster_list = esp_zb_zcl_cluster_list_create();\n    esp_zb_attribute_list_t *basic_cluster = esp_zb_basic_cluster_create(NULL);\n    esp_zb_basic_cluster_add_attr(basic_cluster, ESP_ZB_ZCL_ATTR_BASIC_MANUFACTURER_NAME_ID, MANUFACTURER_NAME);\n    esp_zb_basic_cluster_add_attr(basic_cluster, ESP_ZB_ZCL_ATTR_BASIC_MODEL_IDENTIFIER_ID, MODEL_IDENTIFIER);\n    esp_zb_cluster_list_add_basic_cluster(cluster_list, basic_cluster, ESP_ZB_ZCL_CLUSTER_SERVER_ROLE);\n    esp_zb_cluster_list_add_scenes_cluster(cluster_list, esp_zb_scenes_cluster_create(NULL), ESP_ZB_ZCL_CLUSTER_CLIENT_ROLE);\n    esp_zb_cluster_list_add_identify_cluster(cluster_list, esp_zb_identify_cluster_create(NULL), ESP_ZB_ZCL_CLUSTER_SERVER_ROLE);\n    esp_zb_cluster_list_add_groups_cluster(cluster_list, esp_zb_groups_cluster_create(NULL), ESP_ZB_ZCL_CLUSTER_CLIENT_ROLE);\n    esp_zb_cluster_list_add_on_off_cluster(cluster_list, esp_zb_on_off_cluster_create(NULL), ESP_ZB_ZCL_CLUSTER_CLIENT_ROLE);\n    esp_zb_ep_list_add_ep(ep_list, cluster_list, endpoint_config);\n    return esp_zb_device_register(ep_list);\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Light Using Switch in Zigbee Network\nDESCRIPTION: This snippet demonstrates how to read the light status, send an 'On' command from the switch, and verify the light status change in a Zigbee network.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_all_device_types_app/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nesp> zcl send_gen read -d 0x5fd5 --dst-ep 1 -e 2 -c 6 -a 0\nI (1347151) cli_cmd_zcl: Read response: endpoint(2), cluster(0x06)\nI (1347161) cli_cmd_zcl: attribute(0x00), type(0x10), data size(1)\nI (1347171) : 0x40818c02   00                                                |.|\nesp> zcl send_raw -d 0x5fd5 --dst-ep 1 -e 2 -c 6 --cmd 0x01\nW (1405221) ESP_ZB_CONSOLE_APP: Receive Zigbee action(0x1005) callback\nesp> zcl send_gen read -d 0x5fd5 --dst-ep 1 -e 2 -c 6 -a 0\nI (1420021) cli_cmd_zcl: Read response: endpoint(2), cluster(0x06)\nI (1420021) cli_cmd_zcl: attribute(0x00), type(0x10), data size(1)\nI (1420031) : 0x40818ca6   01                                                |.|\n```\n\n----------------------------------------\n\nTITLE: APS Data Request Implementation Example in ESP-Zigbee-SDK\nDESCRIPTION: Example code demonstrating how to send a string \"hello espressif\" via APS from a device with endpoint 1 to a remote device with short address 0x1234 and endpoint 10. The APS frame is configured to be forwarded up to 2 hops with fragmentation permitted.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/aps.rst#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nesp_zb_apsde_data_req_t req;\nuint8_t value[] = \"hello espressif\";\nreq.dst_addr_mode = ESP_ZB_APS_ADDR_MODE_16_ENDP_PRESENT;\nreq.dst_addr.addr_short = 0x1234;\nreq.dst_endpoint = 10;\nreq.profile_id = ESP_ZB_AF_HA_PROFILE_ID;\nreq.cluster_id = 0xFFC0;\nreq.src_endpoint = 1;\nreq.asdu_length = sizeof(value);\nreq.asdu = value;\nreq.radius = 2;\nreq.tx_options = (ESP_ZB_APSDE_TX_OPT_ACK_TX | ESP_ZB_APSDE_TX_OPT_FRAG_PERMITTED);\nreq.use_alias = false;\nESP_LOG_BUFFER_CHAR_LEVEL(\"APSDE REQUEST\", req.asdu, req.asdu_length, ESP_LOG_INFO);\nesp_zb_lock_acquire(portMAX_DELAY);\nesp_zb_aps_data_request(&req);\nesp_zb_lock_release();\n```\n\n----------------------------------------\n\nTITLE: Configuring OTA Performance Parameters in C\nDESCRIPTION: Configuration parameters for optimizing OTA upgrade performance in ESP Zigbee SDK. Includes settings for data size, system response rate, and IEEE802154 timing optimization.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_ota_upgrade.rst#2025-04-23_snippet_13\n\nLANGUAGE: c\nCODE:\n```\nOTA_UPGRADE_MAX_DATA_SIZE 223\nFREERTOS_HZ 100\nIEEE802154_TIMING_OPTIMIZATION\n```\n\n----------------------------------------\n\nTITLE: Creating Scene Light Endpoint with Scenes Cluster Server\nDESCRIPTION: This snippet shows how to create an endpoint with a Scene Cluster Server that acts as a light. It sets up the necessary clusters and attributes for a scene light device.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_scene.rst#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define HA_SCENES_LIGHT 10\n#define MANUFACTURER_NAME \"\\x09\"\"ESPRESSIF\"\n#define MODEL_IDENTIFIER \"\\x07\"CONFIG_IDF_TARGET\n\nstatic esp_err_t zb_scenes_light_create(void)\n{\n    esp_zb_ep_list_t *ep_list = esp_zb_ep_list_create();\n    esp_zb_endpoint_config_t endpoint_config = {\n        .endpoint = HA_SCENES_LIGHT,\n        .app_profile_id = ESP_ZB_AF_HA_PROFILE_ID,\n        .app_device_id = ESP_ZB_HA_ON_OFF_LIGHT_DEVICE_ID,\n        .app_device_version = 0,\n    };\n    esp_zb_cluster_list_t *cluster_list = esp_zb_zcl_cluster_list_create();\n    esp_zb_attribute_list_t *basic_cluster = esp_zb_basic_cluster_create(NULL);\n    esp_zb_basic_cluster_add_attr(basic_cluster, ESP_ZB_ZCL_ATTR_BASIC_MANUFACTURER_NAME_ID, MANUFACTURER_NAME);\n    esp_zb_basic_cluster_add_attr(basic_cluster, ESP_ZB_ZCL_ATTR_BASIC_MODEL_IDENTIFIER_ID, MODEL_IDENTIFIER);\n    esp_zb_cluster_list_add_basic_cluster(cluster_list, basic_cluster, ESP_ZB_ZCL_CLUSTER_SERVER_ROLE);\n    esp_zb_cluster_list_add_scenes_cluster(cluster_list, esp_zb_scenes_cluster_create(NULL), ESP_ZB_ZCL_CLUSTER_SERVER_ROLE);\n    esp_zb_cluster_list_add_identify_cluster(cluster_list, esp_zb_identify_cluster_create(NULL), ESP_ZB_ZCL_CLUSTER_SERVER_ROLE);\n    esp_zb_cluster_list_add_groups_cluster(cluster_list, esp_zb_groups_cluster_create(NULL), ESP_ZB_ZCL_CLUSTER_SERVER_ROLE);\n    esp_zb_cluster_list_add_level_cluster(cluster_list, esp_zb_level_cluster_create(NULL), ESP_ZB_ZCL_CLUSTER_SERVER_ROLE);\n    esp_zb_cluster_list_add_on_off_cluster(cluster_list, esp_zb_on_off_cluster_create(NULL), ESP_ZB_ZCL_CLUSTER_SERVER_ROLE);\n    esp_zb_ep_list_add_ep(ep_list, cluster_list, endpoint_config);\n    return esp_zb_device_register(ep_list);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Handler for Zigbee On/Off Switch\nDESCRIPTION: Function that handles button presses on a Zigbee on/off switch device. When triggered, it creates and sends a toggle command to control a remote light device.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/developing.rst#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nstatic void esp_zb_buttons_handler(switch_func_pair_t *button_func_pair)\n{\n    if (button_func_pair->func == SWITCH_ONOFF_TOGGLE_CONTROL) {\n        /* implemented light switch toggle functionality */\n        esp_zb_zcl_on_off_cmd_t cmd_req;\n        cmd_req.zcl_basic_cmd.dst_addr_u.addr_short = on_off_light.short_addr;\n        cmd_req.zcl_basic_cmd.dst_endpoint = on_off_light.endpoint;\n        cmd_req.zcl_basic_cmd.src_endpoint = HA_ONOFF_SWITCH_ENDPOINT;\n        cmd_req.address_mode = ESP_ZB_APS_ADDR_MODE_16_ENDP_PRESENT;\n        cmd_req.on_off_cmd_id = ESP_ZB_ZCL_CMD_ON_OFF_TOGGLE_ID;\n        ESP_EARLY_LOGI(TAG, \"send 'on_off toggle' command\");\n        esp_zb_zcl_on_off_cmd_req(&cmd_req);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OTA Upgrade Server Cluster in C\nDESCRIPTION: Code example for adding OTA Upgrade Server functionality to a Home Automation OTA Upgrade Server Device (HAOUS) endpoint, configuring essential attributes like query jitter, current time, and image count.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_ota_upgrade.rst#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define ESP_OTA_SERVER_ENDPOINT       1\n#define OTA_UPGRADE_QUERY_JITTER      0x64\n#define OTA_UPGRADE_CURRENT_TIME      0x0000\n#define OTA_UPGRADE_IMAGE_COUNT       1 \nesp_zb_attribute_list_t *basic_cluster = esp_zb_basic_cluster_create(NULL);\nesp_zb_attribute_list_t *ota_cluster = esp_zb_zcl_attr_list_create(ESP_ZB_ZCL_CLUSTER_ID_OTA_UPGRADE);\nesp_zb_cluster_list_t *cluster_list = esp_zb_zcl_cluster_list_create();\nesp_zb_ep_list_t *ep_list = esp_zb_ep_list_create();\nesp_zb_zcl_ota_upgrade_server_variable_t variable = {\n    .query_jitter = OTA_UPGRADE_QUERY_JITTER,\n    .current_time = OTA_UPGRADE_CURRENT_TIME,\n    .file_count = OTA_UPGRADE_IMAGE_COUNT,\n};\nesp_zb_endpoint_config_t endpoint_config = {\n    .endpoint = ESP_OTA_SERVER_ENDPOINT,\n    .app_profile_id = ESP_ZB_AF_HA_PROFILE_ID,\n    .app_device_id = ESP_ZB_HA_TEST_DEVICE_ID,\n    .app_device_version = 0,\n};\n\nESP_ERROR_CHECK(esp_zb_basic_cluster_add_attr(basic_cluster, ESP_ZB_ZCL_ATTR_BASIC_MANUFACTURER_NAME_ID, ESP_MANUFACTURER_NAME));\nESP_ERROR_CHECK(esp_zb_basic_cluster_add_attr(basic_cluster, ESP_ZB_ZCL_ATTR_BASIC_MODEL_IDENTIFIER_ID, ESP_MODEL_IDENTIFIER));\nESP_ERROR_CHECK(esp_zb_ota_cluster_add_attr(ota_cluster, ESP_ZB_ZCL_ATTR_OTA_UPGRADE_SERVER_DATA_ID, (void *)&variable));\nESP_ERROR_CHECK(esp_zb_cluster_list_add_basic_cluster(cluster_list, basic_cluster, ESP_ZB_ZCL_CLUSTER_SERVER_ROLE));\nESP_ERROR_CHECK(esp_zb_cluster_list_add_ota_cluster(cluster_list, ota_cluster, ESP_ZB_ZCL_CLUSTER_SERVER_ROLE));\nESP_ERROR_CHECK(esp_zb_ep_list_add_ep(ep_list, cluster_list, endpoint_config));\nesp_zb_device_register(ep_list);\n```\n\n----------------------------------------\n\nTITLE: Handling Device Association and OTA Notification in C\nDESCRIPTION: This snippet demonstrates how the server handles a new device joining the network and initiates the OTA upgrade process by sending an Image Notify request.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_ota/ota_server/README.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nI (5136) ESP_OTA_SERVER: ZDO signal: NWK Device Associated (0x12), status: ESP_OK\nI (5146) ESP_OTA_SERVER: ZDO signal: ZDO Device Update (0x30), status: ESP_OK\nI (5176) ESP_OTA_SERVER: New device commissioned or rejoined (short: 0x43a7)\nI (5176) ESP_OTA_SERVER: Notify OTA upgrade\nI (5286) ESP_OTA_SERVER: ZDO signal: ZDO Device Authorized (0x2f), status: ESP_OK\n```\n\n----------------------------------------\n\nTITLE: Implementing ZigBee Action Handler for Scenes Callbacks\nDESCRIPTION: Function that processes various ZigBee callback events, specifically handling the store scene callback in this example.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_scene.rst#2025-04-23_snippet_10\n\nLANGUAGE: c\nCODE:\n```\nstatic esp_err_t zb_action_handler(esp_zb_core_action_callback_id_t callback_id, const void *message)\n{\n    esp_err_t ret = ESP_OK;\n    switch (callback_id) {\n    case ESP_ZB_CORE_SCENES_STORE_SCENE_CB_ID:\n        ret = zb_light_scenes_store_handler((esp_zb_zcl_store_scene_message_t *)message);\n        break;\n    default:\n        ESP_LOGW(TAG, \"Receive Zigbee action(0x%x) callback\", callback_id);\n        break;\n    }\n    return ret;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Registering HA On/Off Switch Device\nDESCRIPTION: This snippet shows how to create and register a Home Automation (HA) standard on_off_switch data model and join an existing network.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_all_device_types_app/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nesp> zha add 2 on_off_switch\nI (914051) cli_cmd_zha: on_off_switch created with endpoint_id 2\nesp> dm register\nesp>\nesp> bdb_comm start steer\nI (930721) cli_cmd_bdb: ZDO signal: ZDO Config Ready (0x17), status: ESP_FAIL\nI (930721) cli_cmd_bdb: Zigbee stack initialized\nW (933611) cli_cmd_bdb: Network(0x79d0) closed, devices joining not allowed.\nI (933981) cli_cmd_bdb: Network(0x79d0) is open for 180 seconds\nI (933991) cli_cmd_bdb: Joined network successfully (Extended PAN ID: 0x744dbdfffe602dfd, PAN ID: 0x79d0, Channel:11, Short Address: 0x0935)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Server Cluster in C\nDESCRIPTION: Demonstrates how to create a custom server cluster with string and 16-bit attributes for a Home Automation Custom Server Device. Includes basic cluster configuration and attribute definition.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_custom.rst#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define CUSTOM_SERVER_ENDPOINT 0x01\n#define CUSTOM_CLIENT_ENDPOINT 0x01\n#define CUSTOM_CLUSTER_ID 0xff00\n#define CUSTOM_COMMAND_RESP 0x0001\nesp_zb_ep_list_t *ep_list = esp_zb_ep_list_create();\nesp_zb_endpoint_config_t endpoint_config = {\n    .endpoint = CUSTOM_SERVER_ENDPOINT,\n    .app_profile_id = ESP_ZB_AF_HA_PROFILE_ID,\n    .app_device_id = ESP_ZB_HA_CUSTOM_ATTR_DEVICE_ID,\n    .app_device_version = 0,\n};\nesp_zb_cluster_list_t *cluster_list = esp_zb_zcl_cluster_list_create();\nesp_zb_attribute_list_t *custom_cluster = esp_zb_zcl_attr_list_create(CUSTOM_CLUSTER_ID);\nuint16_t custom_attr1_id = 0x0000;\nuint8_t custom_attr1_value[] = \"\\x0b\\\"hello world\";\nuint16_t custom_attr2_id = 0x0001;\nuint16_t custom_attr2_value = 0x1234;\nesp_zb_custom_cluster_add_custom_attr(custom_cluster, custom_attr1_id, ESP_ZB_ZCL_ATTR_TYPE_CHAR_STRING,\n                                      ESP_ZB_ZCL_ATTR_ACCESS_WRITE_ONLY | ESP_ZB_ZCL_ATTR_ACCESS_REPORTING, custom_attr1_value);\nesp_zb_custom_cluster_add_custom_attr(custom_cluster, custom_attr2_id, ESP_ZB_ZCL_ATTR_TYPE_U16, ESP_ZB_ZCL_ATTR_ACCESS_READ_WRITE,\n                                      &custom_attr2_value);\n\n/* Mandatory clusters */\nesp_zb_cluster_list_add_basic_cluster(cluster_list, esp_zb_basic_cluster_create(NULL), ESP_ZB_ZCL_CLUSTER_SERVER_ROLE);\nesp_zb_cluster_list_add_identify_cluster(cluster_list, esp_zb_identify_cluster_create(NULL), ESP_ZB_ZCL_CLUSTER_SERVER_ROLE);\n/* Custom cluster */\nesp_zb_cluster_list_add_custom_cluster(cluster_list, custom_cluster, ESP_ZB_ZCL_CLUSTER_SERVER_ROLE);\n\nesp_zb_ep_list_add_ep(ep_list, cluster_list, endpoint_config);\nesp_zb_device_register(ep_list);\n```\n\n----------------------------------------\n\nTITLE: Acquiring Zigbee API Lock for Thread-Safe Operation\nDESCRIPTION: Example of how to properly use the Zigbee API lock mechanism to ensure thread-safe operations when calling Zigbee APIs from tasks other than the Zigbee task.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/developing.rst#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n#include \"esp_zigbee_core.h\"\n\nvoid application_task(void *pvParameters)\n{\n   ......\n   esp_zb_lock_acquire(portMAX_DELAY);\n\n   esp_zb_zcl_on_off_cmd_req(cmd_req);\n\n   esp_zb_lock_release();\n   ......\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Zigbee OTA Upgrade Server in C\nDESCRIPTION: This snippet shows the startup process of the Zigbee OTA upgrade server. It initializes the Zigbee stack, forms a network, and opens it for device joining.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_ota/ota_server/README.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nI (616) main_task: Started on CPU0\nI (626) main_task: Calling app_main()\nI (646) phy: phy_version: 310,2, 8fa9cb4, Jun  5 2024, 14:19:10\nI (646) phy: libbtbb version: a024da6, Jun  5 2024, 14:19:22\nI (656) main_task: Returned from app_main()\nI (746) ESP_OTA_SERVER: ZDO signal: ZDO Config Ready (0x17), status: ESP_FAIL\nI (746) ESP_OTA_SERVER: Initialize Zigbee stack\nI (746) gpio: GPIO[9]| InputEn: 1| OutputEn: 0| OpenDrain: 0| Pullup: 1| Pulldown: 0| Intr:4 \nI (746) ESP_OTA_SERVER: Deferred driver initialization successful\nI (766) ESP_OTA_SERVER: Device started up in factory-reset mode\nI (766) ESP_OTA_SERVER: Start network formation\nW (926) ESP_OTA_SERVER: Network(0x0841) closed, devices joining not allowed.\nI (926) ESP_OTA_SERVER: Formed network successfully (Extended PAN ID: 48:31:b7:ff:fe:c0:2b:6b, PAN ID: 0x0841, Channel:13, Short Address: 0x0000)\nI (1536) ESP_OTA_SERVER: Network(0x0841) is open for 180 seconds\nI (1536) ESP_OTA_SERVER: Network steering started\n```\n\n----------------------------------------\n\nTITLE: Implementing Get Scene Membership Command in ZigBee Switch\nDESCRIPTION: Function that sends a Get Scene Membership command to a light device to retrieve scene configurations for a specified group.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_scene.rst#2025-04-23_snippet_11\n\nLANGUAGE: c\nCODE:\n```\nstatic esp_err_t zb_switch_get_scene_membership_from_light(uint16_t short_addr)\n{\n    esp_zb_zcl_scenes_get_scene_membership_cmd_t get_membership_cmd = {\n        .address_mode = ESP_ZB_APS_ADDR_MODE_16_ENDP_PRESENT,\n        .zcl_basic_cmd.dst_addr_u.addr_short = short_addr,\n        .zcl_basic_cmd.dst_endpoint = HA_SCENES_LIGHT,\n        .zcl_basic_cmd.src_endpoint = HA_SCENES_SWITCH,\n        .group_id = HA_SCENES_LIGHT_GROUP1_ID,\n    };\n\n    esp_zb_lock_acquire(portMAX_DELAY);\n    esp_zb_zcl_scenes_get_scene_membership_cmd_req(&get_membership_cmd);\n    esp_zb_lock_release();\n    ESP_LOGI(TAG, \"Get scene membership in Group ID: 0x%04x of short: 0x%04x\", get_membership_cmd.group_id,\n            get_membership_cmd.zcl_basic_cmd.dst_addr_u.addr_short);\n    return ESP_OK;\n}\nzb_switch_get_scene_membership_from_light(HA_SCENES_LIGHT_ADDR);\n```\n\n----------------------------------------\n\nTITLE: Zigbee Action Handler\nDESCRIPTION: Main callback handler that routes different types of Zigbee actions to appropriate handlers. Handles attribute reports and custom cluster commands based on callback ID.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_custom.rst#2025-04-23_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nstatic esp_err_t zb_action_handler(esp_zb_core_action_callback_id_t callback_id, const void *message)\n{\n    esp_err_t ret = ESP_OK;\n    switch (callback_id) {\n    case ESP_ZB_CORE_REPORT_ATTR_CB_ID:\n        ret = zb_attribute_reporting_handler((esp_zb_zcl_report_attr_message_t *)message);\n        break;\n    case ESP_ZB_CORE_CMD_CUSTOM_CLUSTER_REQ_CB_ID:\n        ret = zb_custom_cmd_handler((esp_zb_zcl_custom_cluster_command_message_t *)message);\n        break;\n    default:\n        ESP_LOGW(TAG, \"Receive Zigbee action(0x%x) callback\", callback_id);\n        break;\n    }\n    return ret;\n}\n```\n\n----------------------------------------\n\nTITLE: APS Data Indication Handler Implementation in ESP-Zigbee-SDK\nDESCRIPTION: Implementation of a callback function for handling APSDE-DATA.Indication events. This function is triggered when the device receives an APSDE-DATA frame, allowing the application to process the data before the Zigbee stack.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/aps.rst#2025-04-23_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nbool zb_apsde_data_indication_handler(esp_zb_apsde_data_ind_t ind)\n{\n    bool processed = false;\n    if (ind.status == 0x00) {\n        if (ind.dst_endpoint == 10 && ind.profile_id == ESP_ZB_AF_HA_PROFILE_ID && ind.cluster_id == 0xFFC0) {\n            ESP_LOGI(\"APSDE INDICATION\",\n                    \"Received APSDE-DATA %s request with a length of %ld from endpoint %d, source address 0x%04hx to \"\n                    \"endpoint %d, destination address 0x%04hx\",\n                    ind.dst_addr_mode == 0x01 ? \"group\" : \"unicast\", ind.asdu_length, ind.src_endpoint,\n                    ind.src_short_addr, ind.dst_endpoint, ind.dst_short_addr);\n            ESP_LOG_BUFFER_CHAR_LEVEL(\"APSDE INDICATION\", ind.asdu, ind.asdu_length, ESP_LOG_INFO);\n            processed = true;\n        }\n    } else {\n        ESP_LOGE(\"APSDE INDICATION\", \"Invalid status of APSDE-DATA indication, error code: %d\", ind.status);\n        processed = false;\n    }\n    return processed;\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Setup Handler for Custom Commands\nDESCRIPTION: Handles received custom commands and sets up binding for attribute reporting. Includes logging of command details and payload, and configuration of binding request parameters.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_custom.rst#2025-04-23_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nESP_LOGI(TAG, \"Receive custom command: %d from address 0x%04hx\", message->info.command.id, message->info.src_address.u.short_addr);\nESP_LOGI(TAG, \"Payload size: %d\", message->data.size);\nESP_LOG_BUFFER_CHAR(TAG, ((uint8_t *)message->data.value) + 1, message->data.size - 1);\n\n/* Add bind information for attribute report */\nesp_zb_zdo_bind_req_param_t bind_req;\nesp_zb_get_long_address(bind_req.src_address);\nbind_req.src_endp = message->info.dst_endpoint;\nbind_req.cluster_id = CUSTOM_CLUSTER_ID;\nbind_req.dst_addr_mode = ESP_ZB_ZDO_BIND_DST_ADDR_MODE_64_BIT_EXTENDED;\nesp_zb_ieee_address_by_short(message->info.src_address.u.short_addr, bind_req.dst_address_u.addr_long);\nbind_req.dst_endp = message->info.src_endpoint;\nbind_req.req_dst_addr = esp_zb_get_short_address();\nuint8_t *user_ctx = malloc(message->data.size);\nmemcpy(user_ctx, message->data.value, message->data.size);\nesp_zb_zdo_device_bind_req(&bind_req, bind_cb, user_ctx);\nreturn ret;\n```\n\n----------------------------------------\n\nTITLE: Sending Custom Command Requests in C\nDESCRIPTION: Demonstrates how to send custom commands from a HACC Device to a HACS Device. Includes command configuration and data packaging.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_custom.rst#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nesp_zb_zcl_custom_cluster_cmd_req_t req;\nuint8_t custom_value[] = \"\\x0e\\\"Hi, espressif\";\nreq.zcl_basic_cmd.dst_addr_u.addr_short = 0x1234; // Set it according to the actual destination short address.\nreq.zcl_basic_cmd.dst_endpoint = CUSTOM_SERVER_ENDPOINT;\nreq.zcl_basic_cmd.src_endpoint = CUSTOM_CLIENT_ENDPOINT;\nreq.address_mode = ESP_ZB_APS_ADDR_MODE_16_ENDP_PRESENT;\nreq.cluster_id = CUSTOM_CLUSTER_ID;\nreq.profile_id = ESP_ZB_AF_HA_PROFILE_ID;\nreq.direction = ESP_ZB_ZCL_CMD_DIRECTION_TO_SRV;\nreq.custom_cmd_id = CUSTOM_COMMAND_REQ;\nreq.data.type = ESP_ZB_ZCL_ATTR_TYPE_CHAR_STRING;\nreq.data.size = sizeof(custom_value);\nreq.data.value = custom_value;\nesp_zb_lock_acquire(portMAX_DELAY);\nesp_zb_zcl_custom_cluster_cmd_req(&req);\nesp_zb_lock_release();\nESP_EARLY_LOGI(TAG, \"Send %s to custom device\", custom_value);\n```\n\n----------------------------------------\n\nTITLE: Group Casting Implementation\nDESCRIPTION: Code to implement group casting functionality for sending commands to multiple devices simultaneously. Demonstrates sending a toggle command to all devices in a group.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_groups.rst#2025-04-23_snippet_10\n\nLANGUAGE: c\nCODE:\n```\nesp_zb_zcl_on_off_cmd_t cmd_req;\ncmd_req.zcl_basic_cmd.dst_addr_u.addr_short = GROUP_ID;\ncmd_req.zcl_basic_cmd.src_endpoint = SWITCH_ENDPOINT;\ncmd_req.address_mode = ESP_ZB_APS_ADDR_MODE_16_GROUP_ENDP_NOT_PRESENT;\ncmd_req.on_off_cmd_id = ESP_ZB_ZCL_CMD_ON_OFF_TOGGLE_ID;\nESP_EARLY_LOGI(TAG, \"Send 'on_off toggle' command to group(%d)\", cmd_req.zcl_basic_cmd.dst_addr_u.addr_short);\nesp_zb_zcl_on_off_cmd_req(&cmd_req);\n```\n\n----------------------------------------\n\nTITLE: APSDE-DATA.Request API in ESP-Zigbee-SDK\nDESCRIPTION: Function to send a Next Higher Layer Entity (NHLE) PDU from the local NHLE to one or more peer NHLEs. This API provides the capability to send user-customized packets from the local device to remote devices.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/aps.rst#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nesp_err_t esp_zb_aps_data_request(esp_zb_apsde_data_req_t *req);\n```\n\n----------------------------------------\n\nTITLE: Creating Groups Cluster for Light Device\nDESCRIPTION: Demonstrates how to add groups cluster functionality to a Home Automation Light Device endpoint. Includes endpoint configuration and cluster list creation with necessary roles.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_groups.rst#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define LIGHT_ENDPOINT 0x10\nesp_zb_on_off_light_cfg_t light_cfg = ESP_ZB_DEFAULT_ON_OFF_LIGHT_CONFIG();\nesp_zb_ep_list_t *ep_list = esp_zb_ep_list_create();\nesp_zb_endpoint_config_t endpoint_config = {\n    .endpoint = LIGHT_ENDPOINT,\n    .app_profile_id = ESP_ZB_AF_HA_PROFILE_ID,\n    .app_device_id = ESP_ZB_HA_ON_OFF_LIGHT_DEVICE_ID,\n    .app_device_version = 0,\n};\nesp_zb_cluster_list_t *cluster_list = esp_zb_zcl_cluster_list_create();\n\n/* Below code is equal to esp_zb_on_off_light_ep_create() */\nesp_zb_cluster_list_add_basic_cluster(cluster_list, esp_zb_basic_cluster_create(&(light_cfg.basic_cfg)), ESP_ZB_ZCL_CLUSTER_SERVER_ROLE);\nesp_zb_cluster_list_add_identify_cluster(cluster_list, esp_zb_identify_cluster_create(&(light_cfg.identify_cfg)), ESP_ZB_ZCL_CLUSTER_SERVER_ROLE);\nesp_zb_cluster_list_add_groups_cluster(cluster_list, esp_zb_groups_cluster_create(&(light_cfg.groups_cfg)), ESP_ZB_ZCL_CLUSTER_SERVER_ROLE);\nesp_zb_cluster_list_add_scenes_cluster(cluster_list, esp_zb_scenes_cluster_create(&(light_cfg.scenes_cfg)), ESP_ZB_ZCL_CLUSTER_SERVER_ROLE);\nesp_zb_cluster_list_add_on_off_cluster(cluster_list, esp_zb_on_off_cluster_create(&(light_cfg.on_off_cfg)), ESP_ZB_ZCL_CLUSTER_SERVER_ROLE);\nesp_zb_ep_list_add_ep(ep_list, cluster_list, endpoint_config);\n\nesp_zb_device_register(ep_list);\n```\n\n----------------------------------------\n\nTITLE: Attribute Report Handler\nDESCRIPTION: Processes received attribute reports from Zigbee devices. Validates message status and logs report details including source address, endpoints, cluster, and attribute information.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_custom.rst#2025-04-23_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nstatic esp_err_t zb_attribute_reporting_handler(const esp_zb_zcl_report_attr_message_t *message)\n{\n    ESP_RETURN_ON_FALSE(message, ESP_FAIL, TAG, \"Empty message\");\n    ESP_RETURN_ON_FALSE(message->status == ESP_ZB_ZCL_STATUS_SUCCESS, ESP_ERR_INVALID_ARG, TAG, \"Received message: error status(%d)\",\n                        message->status);\n    ESP_LOGI(TAG, \"Received report from address(0x%x) src endpoint(%d) to dst endpoint(%d) cluster(0x%x)\", message->src_address.u.short_addr,\n            message->src_endpoint, message->dst_endpoint, message->cluster);\n    ESP_LOGI(TAG, \"Received report information: attribute(0x%x), type(0x%x)\", message->attribute.id, message->attribute.data.type);\n    ESP_LOG_BUFFER_CHAR(TAG, ((uint8_t *)message->attribute.data.value) + 1, message->attribute.data.size - 1);\n\n    return ESP_OK;\n}\n```\n\n----------------------------------------\n\nTITLE: APS Data Confirm Handler Implementation in ESP-Zigbee-SDK\nDESCRIPTION: Implementation of a callback function for handling APSDE-DATA.Confirm events. This function is triggered when an APSDE-DATA.Request has been confirmed, allowing the application to verify if the request was sent successfully.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/aps.rst#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nvoid zb_apsde_data_confirm_handler(esp_zb_apsde_data_confirm_t confirm)\n{\n    if (confirm.status == 0x00) {\n        ESP_LOGI(\"APSDE CONFIRM\",\n                \"Sent successfully from endpoint %d, source address 0x%04hx to endpoint %d,\"\n                \"destination address 0x%04hx\",\n                confirm.src_endpoint, esp_zb_get_short_address(), confirm.dst_endpoint, confirm.dst_addr.addr_short);\n        ESP_LOG_BUFFER_CHAR_LEVEL(\"APSDE CONFIRM\", confirm.asdu, confirm.asdu_length, ESP_LOG_INFO);\n    } else {\n        ESP_LOGE(\"APSDE CONFIRM\", \"Failed to send APSDE-DATA request, error code: %d\", confirm.status);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Scene Storage in Light Device\nDESCRIPTION: Handler function for storing scene attributes in a light device's scene table. Processes On/Off and Level Control cluster attributes.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_scene.rst#2025-04-23_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nstatic esp_err_t zb_light_scenes_store_handler(esp_zb_zcl_store_scene_message_t *message)\n{\n    esp_err_t ret = ESP_OK;\n    ESP_RETURN_ON_FALSE(message, ESP_FAIL, TAG, \"Empty message\");\n    ESP_RETURN_ON_FALSE(message->info.status == ESP_ZB_ZCL_STATUS_SUCCESS, ESP_ERR_INVALID_ARG, TAG,\n                        \"Received message: error status(%d)\", message->info.status);\n    ESP_LOGI(TAG, \"Store scene %d to group %d\", message->scene_id, message->group_id);\n\n    uint8_t scene_light_state =\n        *(uint8_t *)esp_zb_zcl_get_attribute(message->info.dst_endpoint, ESP_ZB_ZCL_CLUSTER_ID_ON_OFF,\n                                            ESP_ZB_ZCL_CLUSTER_SERVER_ROLE, ESP_ZB_ZCL_ATTR_ON_OFF_ON_OFF_ID)\n            ->data_p;\n    esp_zb_zcl_scenes_extension_field_t on_off_extension_field = {\n        .cluster_id = ESP_ZB_ZCL_CLUSTER_ID_ON_OFF,\n        .length = sizeof(scene_light_state),\n        .extension_field_attribute_value_list = &scene_light_state,\n        .next = NULL,\n    };\n```\n\n----------------------------------------\n\nTITLE: Implementing Attribute Change Callback for Zigbee On/Off Light\nDESCRIPTION: Function that handles attribute changes for a Zigbee on/off light device. It specifically monitors the on/off cluster and controls the physical light based on attribute changes.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/developing.rst#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nvoid attr_cb(uint8_t status, uint8_t endpoint, uint16_t cluster_id, uint16_t attr_id, void *new_value)\n{\n if (cluster_id == ESP_ZB_ZCL_CLUSTER_ID_ON_OFF) {\n     uint8_t value = *(uint8_t*)new_value;\n     if (attr_id == ESP_ZB_ZCL_ATTR_ON_OFF_ON_OFF_ID) {\n         /* implemented light on/off control */\n         ESP_LOGI(TAG, \"on/off light set to %hd\", value);\n         light_driver_set_power((bool)value);\n     }\n } else {\n     /* Implement some actions if needed when other cluster changed */\n     ESP_LOGI(TAG, \"cluster:0x%x, attribute:0x%x changed \", cluster_id, attr_id);\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Registering HA On/Off Light Device\nDESCRIPTION: This snippet demonstrates how to create and register a Home Automation (HA) standard on_off_light data model, form a network, and open it for joining.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_all_device_types_app/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nesp> zha add 1 on_off_light\nI (518033) cli_cmd_zha: on_off_light created with endpoint_id 1\nesp> dm register\nesp>\nesp> bdb_comm start form\nI (839703) cli_cmd_bdb: ZDO signal: ZDO Config Ready (0x17), status: ESP_FAIL\nI (839703) cli_cmd_bdb: Zigbee stack initialized\nW (842093) cli_cmd_bdb: Network(0x79d0) closed, devices joining not allowed.\nI (842103) cli_cmd_bdb: Formed network successfully (Extended PAN ID: 0x744dbdfffe602dfd, PAN ID: 0x79d0, Channel:11, Short Address: 0x5fd5)\nesp> network open -t 200\nI (860763) cli_cmd_bdb: Network(0x79d0) is open for 200 seconds\n```\n\n----------------------------------------\n\nTITLE: Generating Multiple Factory Partitions\nDESCRIPTION: Command to generate factory partitions for multiple devices using a CSV configuration file.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/tools/mfg_tool/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython esp_zb_mfg_tool.py --csv ./multi_devices_config.csv\n```\n\n----------------------------------------\n\nTITLE: Light Control Command Reception Log\nDESCRIPTION: Console output showing the reception and processing of light control commands. Demonstrates handling of both level control and color control attributes with their corresponding values.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_HA_sample/HA_color_dimmable_light/README.md#2025-04-23_snippet_1\n\nLANGUAGE: log\nCODE:\n```\nI (11234) ESP_ZB_COLOR_DIMM_LIGHT: Received message: endpoint(10), cluster(0x8), attribute(0x0), data size(1)\nI (11234) ESP_ZB_COLOR_DIMM_LIGHT: Light level changes to 5\nI (12554) ESP_ZB_COLOR_DIMM_LIGHT: Received message: endpoint(10), cluster(0x300), attribute(0x3), data size(2)\nI (12554) ESP_ZB_COLOR_DIMM_LIGHT: Light color x changes to 0x4ccc\nI (12554) ESP_ZB_COLOR_DIMM_LIGHT: Received message: endpoint(10), cluster(0x300), attribute(0x4), data size(2)\nI (12564) ESP_ZB_COLOR_DIMM_LIGHT: Light color y changes to 0x95b1\nI (13414) ESP_ZB_COLOR_DIMM_LIGHT: Received message: endpoint(10), cluster(0x8), attribute(0x0), data size(1)\nI (13414) ESP_ZB_COLOR_DIMM_LIGHT: Light level changes to 15\nI (14524) ESP_ZB_COLOR_DIMM_LIGHT: Received message: endpoint(10), cluster(0x300), attribute(0x3), data size(2)\nI (14524) ESP_ZB_COLOR_DIMM_LIGHT: Light color x changes to 0xa3d6\nI (14524) ESP_ZB_COLOR_DIMM_LIGHT: Received message: endpoint(10), cluster(0x300), attribute(0x4), data size(2)\nI (14534) ESP_ZB_COLOR_DIMM_LIGHT: Light color y changes to 0x547a\nI (20974) ESP_ZB_COLOR_DIMM_LIGHT: Received message: endpoint(10), cluster(0x8), attribute(0x0), data size(1)\nI (20974) ESP_ZB_COLOR_DIMM_LIGHT: Light level changes to 25\nI (21864) ESP_ZB_COLOR_DIMM_LIGHT: Received message: endpoint(10), cluster(0x300), attribute(0x3), data size(2)\nI (21864) ESP_ZB_COLOR_DIMM_LIGHT: Light color x changes to 0x2666\nI (21864) ESP_ZB_COLOR_DIMM_LIGHT: Received message: endpoint(10), cluster(0x300), attribute(0x4), data size(2)\nI (21874) ESP_ZB_COLOR_DIMM_LIGHT: Light color y changes to 0xf5c\n```\n\n----------------------------------------\n\nTITLE: OTA Upgrade Status Handler\nDESCRIPTION: Comprehensive handler for processing OTA upgrade status and data on the client side, including progress tracking and upgrade state management.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_ota_upgrade.rst#2025-04-23_snippet_12\n\nLANGUAGE: c\nCODE:\n```\n    static esp_err_t zb_ota_upgrade_status_handler(esp_zb_zcl_ota_upgrade_value_message_t message)\n    {\n        static uint32_t total_size = 0;\n        static uint32_t offset = 0;\n        static int64_t start_time = 0;\n        esp_err_t ret = ESP_OK;\n\n        if (message.info.status == ESP_ZB_ZCL_STATUS_SUCCESS) {\n            switch (message.upgrade_status) {\n            case ESP_ZB_ZCL_OTA_UPGRADE_STATUS_START:\n                ESP_LOGI(TAG, \"-- OTA upgrade start\");\n                start_time = esp_timer_get_time();\n                ESP_RETURN_ON_ERROR(ret, TAG, \"Failed to begin OTA partition, status: %s\", esp_err_to_name(ret));\n                break;\n            case ESP_ZB_ZCL_OTA_UPGRADE_STATUS_RECEIVE:\n                total_size = message.ota_header.image_size;\n                offset += message.payload_size;\n                ESP_LOGI(TAG, \"-- OTA Client receives data: progress [%ld/%ld]\", offset, total_size);\n                break;\n            case ESP_ZB_ZCL_OTA_UPGRADE_STATUS_APPLY:\n                ESP_LOGI(TAG, \"-- OTA upgrade apply\");\n                break;\n            case ESP_ZB_ZCL_OTA_UPGRADE_STATUS_CHECK:\n                ret = offset == total_size ? ESP_OK : ESP_FAIL;\n                ESP_LOGI(TAG, \"-- OTA upgrade check status: %s\", esp_err_to_name(ret));\n                break;\n            case ESP_ZB_ZCL_OTA_UPGRADE_STATUS_FINISH:\n                ESP_LOGI(TAG, \"-- OTA Finish\");\n                ESP_LOGI(TAG, \"-- OTA Information: version: 0x%lx, manufacturer code: 0x%x, image type: 0x%x, total size: %ld bytes, cost time: %lld ms,\",\n                        message.ota_header.file_version, message.ota_header.manufacturer_code, message.ota_header.image_type,\n                        message.ota_header.image_size, (esp_timer_get_time() - start_time) / 1000);\n                break;\n            default:\n                ESP_LOGI(TAG, \"OTA status: %d\", message.upgrade_status);\n                break;\n            }\n        }\n        return ret;\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Attribute Handlers in C\nDESCRIPTION: Implements handlers for checking and limiting write operations for custom cluster attributes. Includes value validation and write operation callbacks.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_custom.rst#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nstatic int zb_zcl_custom_cluster_check_value_handler(uint16_t attr_id, uint8_t endpoint, uint8_t *value)\n{\n    esp_err_t ret = ESP_OK;\n    ESP_LOGI(TAG, \"Hook for checking custom cluster attribute validity\");\n    return ret;\n}\n\nstatic void zb_zcl_custom_cluster_write_attr_handler(uint8_t endpoint, uint16_t attr_id, uint8_t *new_value, uint16_t manuf_code)\n{\n    ESP_LOGI(TAG, \"Hook for indicating which attribute will be written\");\n}\n\nesp_zb_zcl_custom_cluster_handlers_t custom_handler = {\n    .cluster_id = CUSTOM_CLUSTER_ID,\n    .cluster_role = ESP_ZB_ZCL_CLUSTER_SERVER_ROLE,\n    .check_value_cb = zb_zcl_custom_cluster_check_value_handler,\n    .write_attr_cb = zb_zcl_custom_cluster_write_attr_handler,\n};\nesp_zb_zcl_custom_cluster_handlers_update(custom_handler);\n```\n\n----------------------------------------\n\nTITLE: Adding Group to Light Device in Zigbee Network\nDESCRIPTION: Function to send an Add Group command to a light device with specified short address and group ID. Uses ESP-Zigbee SDK's ZCL Groups cluster commands.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_scene.rst#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nstatic esp_err_t zb_switch_send_add_group_to_light(uint16_t short_addr, uint16_t group_id)\n{\n    esp_zb_zcl_groups_add_group_cmd_t add_group_cmd = {\n        .group_id = group_id,\n        .address_mode = ESP_ZB_APS_ADDR_MODE_16_ENDP_PRESENT,\n        .zcl_basic_cmd.dst_addr_u.addr_short = short_addr,\n        .zcl_basic_cmd.dst_endpoint = HA_SCENES_LIGHT,\n        .zcl_basic_cmd.src_endpoint = HA_SCENES_SWITCH,\n    };\n\n    esp_zb_lock_acquire(portMAX_DELAY);\n    esp_zb_zcl_groups_add_group_cmd_req(&add_group_cmd);\n    esp_zb_lock_release();\n    ESP_LOGI(TAG, \"Add endpoint %d to Group: 0x%04x to short: 0x%04x\", add_group_cmd.zcl_basic_cmd.dst_endpoint,\n            add_group_cmd.group_id, add_group_cmd.zcl_basic_cmd.dst_addr_u.addr_short);\n    return ESP_OK;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Single Factory Partition\nDESCRIPTION: Example command for generating a factory partition with specific device parameters including install code, MAC address, channel mask, manufacturer name and code.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/tools/mfg_tool/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython esp_zb_mfg_tool.py -i 966b9f3ef98ae6059708 -m CAFEBEEF50C0FFED -c 0x8000 -mn Espressif -mc 0x131B\n```\n\n----------------------------------------\n\nTITLE: Handling Recall Scene in ZigBee Light Device\nDESCRIPTION: Function that processes the Recall Scene command on a light device, applying the stored scene settings by extracting and applying the on/off state and level values.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_scene.rst#2025-04-23_snippet_14\n\nLANGUAGE: c\nCODE:\n```\nstatic esp_err_t zb_light_scenes_recall_handler(esp_zb_zcl_recall_scene_message_t *message)\n{\n    esp_err_t ret = ESP_OK;\n    ESP_RETURN_ON_FALSE(message, ESP_FAIL, TAG, \"Empty message\");\n    ESP_RETURN_ON_FALSE(message->info.status == ESP_ZB_ZCL_STATUS_SUCCESS, ESP_ERR_INVALID_ARG, TAG,\n                        \"Received message: error status(%d)\", message->info.status);\n    ESP_LOGI(TAG, \"Recall scene %d from group %d\", message->scene_id, message->group_id);\n    esp_zb_zcl_scenes_extension_field_t *field = message->field_set;\n    while (field) {\n        if (field->cluster_id == ESP_ZB_ZCL_CLUSTER_ID_ON_OFF) {\n            esp_zb_zcl_on_off_cmd_t cmd = {\n                .address_mode = ESP_ZB_APS_ADDR_MODE_16_ENDP_PRESENT,\n                .zcl_basic_cmd.dst_addr_u.addr_short = esp_zb_get_short_address(),\n                .zcl_basic_cmd.src_endpoint = HA_SCENES_LIGHT,\n                .zcl_basic_cmd.dst_endpoint = HA_SCENES_LIGHT,\n                .on_off_cmd_id = *(uint8_t *)field->extension_field_attribute_value_list,\n            };\n            esp_zb_zcl_on_off_cmd_req(&cmd);\n        } else if (field->cluster_id == ESP_ZB_ZCL_CLUSTER_ID_LEVEL_CONTROL) {\n            esp_zb_zcl_move_to_level_cmd_t cmd = {\n                .address_mode = ESP_ZB_APS_ADDR_MODE_16_ENDP_PRESENT,\n                .zcl_basic_cmd.dst_addr_u.addr_short = esp_zb_get_short_address(),\n                .zcl_basic_cmd.src_endpoint = HA_SCENES_LIGHT,\n                .zcl_basic_cmd.dst_endpoint = HA_SCENES_LIGHT,\n                .level = *(uint8_t *)field->extension_field_attribute_value_list,\n                .transition_time = 0,\n            };\n            esp_zb_zcl_level_move_to_level_cmd_req(&cmd);\n        } else {\n            // Other scenes\n        }\n        field = field->next;\n    }\n    return ret;\n}\n\nstatic esp_err_t zb_action_handler(esp_zb_core_action_callback_id_t callback_id, const void *message)\n{\n    esp_err_t ret = ESP_OK;\n    switch (callback_id) {\n    case ESP_ZB_CORE_SCENES_RECALL_SCENE_CB_ID:\n        ret = zb_light_scenes_recall_handler((esp_zb_zcl_recall_scene_message_t *)message);\n        break;\n    default:\n        ESP_LOGW(TAG, \"Receive Zigbee action(0x%x) callback\", callback_id);\n        break;\n    }\n    return ret;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling View Scene Response in Zigbee\nDESCRIPTION: Callback implementation for processing view scene response messages received from light devices. Includes response validation and logging.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_scene.rst#2025-04-23_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nstatic esp_err_t zb_switch_view_scene_resp_handler(esp_zb_zcl_scenes_view_scene_resp_message_t *message)\n{\n    ESP_RETURN_ON_FALSE(message, ESP_FAIL, TAG, \"Empty message\");\n    ESP_RETURN_ON_FALSE(message->info.status == ESP_ZB_ZCL_STATUS_SUCCESS, ESP_ERR_INVALID_ARG, TAG,\n                        \"Received message: error status(%d)\", message->info.status);\n\n    ESP_LOGI(TAG, \"Receive scenes view response with Scene ID: %d, Group ID: 0x%04x\", message->scene_id,\n            message->group_id);\n    return ESP_OK;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Command Handlers in C\nDESCRIPTION: Shows implementation of command handlers for processing received custom cluster commands and sending responses. Includes callback handling and attribute updates.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_custom.rst#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nstatic void bind_cb(esp_zb_zdp_status_t zdo_status, void *user_ctx)\n{\n    if (zdo_status == ESP_ZB_ZDP_STATUS_SUCCESS) {\n        /* Set payload to custom attribute */\n        if (user_ctx) {\n            esp_zb_zcl_set_attribute_val(CUSTOM_SERVER_ENDPOINT, CUSTOM_CLUSTER_ID, ESP_ZB_ZCL_CLUSTER_SERVER_ROLE, 0x0000, user_ctx, false);\n            free(user_ctx);\n        }\n        /* Response customized command via binding */\n        esp_zb_zcl_custom_cluster_cmd_req_t req;\n        uint8_t custom_value[] = \"\\x05\\\"Done\";\n        req.zcl_basic_cmd.src_endpoint = CUSTOM_SERVER_ENDPOINT;\n        req.address_mode = ESP_ZB_APS_ADDR_MODE_DST_ADDR_ENDP_NOT_PRESENT;\n        req.profile_id = ESP_ZB_AF_HA_PROFILE_ID;\n        req.cluster_id = CUSTOM_CLUSTER_ID;\n        req.direction = ESP_ZB_ZCL_CMD_DIRECTION_TO_CLI;\n        req.custom_cmd_id = CUSTOM_COMMAND_RESP;\n        req.data.type = ESP_ZB_ZCL_ATTR_TYPE_CHAR_STRING;\n        req.data.size = sizeof(custom_value);\n        req.data.value = custom_value;\n        esp_zb_zcl_custom_cluster_cmd_req(&req);\n        ESP_EARLY_LOGI(TAG, \"Send %s\", custom_value);\n    }\n}\n\nstatic esp_err_t zb_custom_cmd_handler(const esp_zb_zcl_custom_cluster_command_message_t *message)\n{\n    esp_err_t ret = ESP_OK;\n\n    ESP_RETURN_ON_FALSE(message, ESP_FAIL, TAG, \"Empty message\");\n    ESP_RETURN_ON_FALSE(message->info.status == ESP_ZB_ZCL_STATUS_SUCCESS, ESP_ERR_INVALID_ARG, TAG, \"Received message: error status(%d)\",\n                        message->info.status);\n```\n\n----------------------------------------\n\nTITLE: Storing Scene Configuration in Zigbee Device\nDESCRIPTION: Function to store current device state as a scene configuration. Includes command sending and scene table management.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_scene.rst#2025-04-23_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nstatic esp_err_t zb_switch_send_store_scene_to_light(uint16_t short_addr, uint16_t group_id, uint8_t scene_id)\n{\n    esp_zb_zcl_scenes_store_scene_cmd_t store_scene_cmd = {\n        .address_mode = ESP_ZB_APS_ADDR_MODE_16_ENDP_PRESENT,\n        .zcl_basic_cmd.dst_addr_u.addr_short = short_addr,\n        .zcl_basic_cmd.dst_endpoint = HA_SCENES_LIGHT,\n        .zcl_basic_cmd.src_endpoint = HA_SCENES_SWITCH,\n        .group_id = group_id,\n        .scene_id = scene_id,\n    };\n\n    esp_zb_lock_acquire(portMAX_DELAY);\n    esp_zb_zcl_scenes_store_scene_cmd_req(&store_scene_cmd);\n    esp_zb_lock_release();\n    ESP_LOGI(TAG, \"Ask the short: 0x%04x to store current scenes to Scene ID: %d of Group ID: 0x%04x\",\n            store_scene_cmd.zcl_basic_cmd.dst_addr_u.addr_short, store_scene_cmd.scene_id, store_scene_cmd.group_id);\n    return ESP_OK;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Client Cluster in C\nDESCRIPTION: Shows the implementation of a custom client cluster without attributes for a Home Automation Custom Client Device. Includes endpoint and cluster configuration.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_custom.rst#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define CUSTOM_SERVER_ENDPOINT 0x01\n#define CUSTOM_CLIENT_ENDPOINT 0x01\n#define CUSTOM_CLUSTER_ID 0xff00\n#define CUSTOM_COMMAND_REQ 0x0000\nesp_zb_ep_list_t *ep_list = esp_zb_ep_list_create();\nesp_zb_endpoint_config_t endpoint_config = {\n    .endpoint = CUSTOM_CLIENT_ENDPOINT,\n    .app_profile_id = ESP_ZB_AF_HA_PROFILE_ID,\n    .app_device_id = ESP_ZB_HA_CUSTOM_ATTR_DEVICE_ID,\n    .app_device_version = 0,\n};\nesp_zb_cluster_list_t *cluster_list = esp_zb_zcl_cluster_list_create();\nesp_zb_attribute_list_t *custom_cluster = esp_zb_zcl_attr_list_create(CUSTOM_CLUSTER_ID);\n\n/* Mandatory clusters */\nesp_zb_cluster_list_add_basic_cluster(cluster_list, esp_zb_basic_cluster_create(NULL), ESP_ZB_ZCL_CLUSTER_SERVER_ROLE);\nesp_zb_cluster_list_add_identify_cluster(cluster_list, esp_zb_identify_cluster_create(NULL), ESP_ZB_ZCL_CLUSTER_SERVER_ROLE);\n/* Custom cluster */\nesp_zb_cluster_list_add_custom_cluster(cluster_list, custom_cluster, ESP_ZB_ZCL_CLUSTER_CLIENT_ROLE);\nesp_zb_ep_list_add_ep(ep_list, cluster_list, endpoint_config);\nesp_zb_device_register(ep_list);\n```\n\n----------------------------------------\n\nTITLE: Implementing Scene Store Handler in ZigBee Light Device\nDESCRIPTION: Function that handles storing scenes on a ZigBee light device, capturing the current level and on/off state and storing them in the scenes table.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_scene.rst#2025-04-23_snippet_9\n\nLANGUAGE: c\nCODE:\n```\nstatic esp_err_t zb_light_scenes_store_handler(esp_zb_zcl_store_scene_message_t *message)\n{\n    esp_err_t ret = ESP_OK;\n    ESP_RETURN_ON_FALSE(message, ESP_FAIL, TAG, \"Empty message\");\n    ESP_RETURN_ON_FALSE(message->info.status == ESP_ZB_ZCL_STATUS_SUCCESS, ESP_ERR_INVALID_ARG, TAG,\n                        \"Received message: error status(%d)\", message->info.status);\n    ESP_LOGI(TAG, \"Store scene %d to group %d\", message->scene_id, message->group_id);\n    \n    uint8_t scene_on_off = *(uint8_t *)esp_zb_zcl_get_attribute(message->info.dst_endpoint, ESP_ZB_ZCL_CLUSTER_ID_ON_OFF,\n                                    ESP_ZB_ZCL_CLUSTER_SERVER_ROLE, ESP_ZB_ZCL_ATTR_ON_OFF_ON_OFF_ID)\n                                    ->data_p;\n    esp_zb_zcl_scenes_extension_field_t on_off_extension_field = {\n        .cluster_id = ESP_ZB_ZCL_CLUSTER_ID_ON_OFF,\n        .length = sizeof(scene_on_off),\n        .extension_field_attribute_value_list = &scene_on_off,\n        .next = NULL,\n    };\n    \n    uint8_t scene_current_level = *(uint8_t *)esp_zb_zcl_get_attribute(message->info.dst_endpoint, ESP_ZB_ZCL_CLUSTER_ID_LEVEL_CONTROL,\n                                    ESP_ZB_ZCL_CLUSTER_SERVER_ROLE, ESP_ZB_ZCL_ATTR_LEVEL_CONTROL_CURRENT_LEVEL_ID)\n                                    ->data_p;\n    esp_zb_zcl_scenes_extension_field_t level_extension_field = {\n        .cluster_id = ESP_ZB_ZCL_CLUSTER_ID_LEVEL_CONTROL,\n        .length = sizeof(scene_current_level),\n        .extension_field_attribute_value_list = &scene_current_level,\n        .next = &on_off_extension_field,\n    };\n    ret = esp_zb_zcl_scenes_table_store(message->info.dst_endpoint, message->group_id, message->scene_id, 0x0000,\n                                        &level_extension_field);\n    esp_zb_zcl_scenes_table_show(message->info.dst_endpoint);\n    return ret;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Add Group Request\nDESCRIPTION: Shows how to send an Add Group Request command from a HAS Device to add an endpoint to a specific group.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_groups.rst#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nesp_zb_zcl_groups_add_group_cmd_t cmd_req;\ncmd_req.zcl_basic_cmd.dst_addr_u.addr_short = LIGHT_SHORT_ADDR;\ncmd_req.zcl_basic_cmd.src_endpoint = SWITCH_ENDPOINT;\ncmd_req.zcl_basic_cmd.dst_endpoint = LIGHT_ENDPOINT;\ncmd_req.address_mode = ESP_ZB_APS_ADDR_MODE_16_ENDP_PRESENT;\ncmd_req.group_id = GROUP_ID;\nESP_LOGI(TAG, \"Add endpoint(%d) to group(%d)\", cmd_req.zcl_basic_cmd.dst_endpoint, cmd_req.group_id);\nesp_zb_zcl_groups_add_group_cmd_req(&cmd_req);\n```\n\n----------------------------------------\n\nTITLE: Initializing ESP-Zigbee Console and Displaying Output\nDESCRIPTION: This snippet shows the initial console output when running the ESP-Zigbee All Device Types example. It includes system information, available commands, and instructions for using the console.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_all_device_types_app/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nI (298) cpu_start: Unicore app\nI (298) cpu_start: Pro cpu up.\nW (307) clk: esp_perip_clk_init() has not been implemented yet\nI (314) cpu_start: Pro cpu start user code\nI (314) cpu_start: cpu freq: 96000000 Hz\nI (314) cpu_start: Application information:\nI (317) cpu_start: Project name:     esp_zigbee_all_device_types_app\nI (324) cpu_start: App version:      b8aed66-dirty\nI (329) cpu_start: Compile time:     Aug 15 2024 17:38:49\nI (335) cpu_start: ELF file SHA256:  d1357f7216520fbf...\nI (341) cpu_start: ESP-IDF:          v5.1.3\nI (346) cpu_start: Min chip rev:     v0.0\nI (351) cpu_start: Max chip rev:     v0.99\nI (356) cpu_start: Chip rev:         v0.1\nI (360) heap_init: Initializing. RAM available for dynamic allocation:\nI (368) heap_init: At 40813A30 len 00039950 (230 KiB): D/IRAM\nI (374) heap_init: At 4084D380 len 00002B60 (10 KiB): STACK/DIRAM\nI (382) spi_flash: detected chip: generic\nI (385) spi_flash: flash io: dio\nW (389) spi_flash: Detected size(4096k) larger than the size in the binary image header(2048k). Using the size in the binary image header.\nI (403) sleep: Configure to isolate all GPIO pins in sleep state\nI (409) sleep: Enable automatic switching of GPIO sleep configuration\nI (417) app_start: Starting scheduler on CPU0\nI (421) main_task: Started on CPU0\nI (421) main_task: Calling app_main()\nI (431) esp-zigbee-console: List of ESP Zigbee Console commands:\nI (431) esp-zigbee-console:   - Command 'address'\nI (441) esp-zigbee-console:   - Command 'bdb_comm'\nI (441) esp-zigbee-console:   - Command 'channel'\nI (441) esp-zigbee-console:   - Command 'dm'\nI (451) esp-zigbee-console:   - Command 'factoryreset'\nI (451) esp-zigbee-console:   - Command 'ic'\nI (461) esp-zigbee-console:   - Command 'network'\nI (461) esp-zigbee-console:   - Command 'panid'\nI (471) esp-zigbee-console:   - Command 'radio'\nI (471) esp-zigbee-console:   - Command 'reboot'\nI (481) esp-zigbee-console:   - Command 'role'\nI (481) esp-zigbee-console:   - Command 'start'\nI (491) esp-zigbee-console:   - Command 'tl'\nI (491) esp-zigbee-console:   - Command 'zcl'\nI (501) esp-zigbee-console:   - Command 'zdo'\nI (501) esp-zigbee-console:   - Command 'zgp'\nI (511) esp-zigbee-console:   - Command 'zha'\nI (591) phy: phy_version: 230,2, 9aae6ea, Jan 15 2024, 11:17:12\nI (591) phy: libbtbb version: 944f18e, Jan 15 2024, 11:17:25\nI (591) ESP_ZB_CONSOLE_APP: Start ESP Zigbee Console\n\nType 'help' to get the list of commands.\nUse UP/DOWN arrows to navigate through command history.\nPress TAB when typing command name to auto-complete.\nI (601) main_task: Returned from app_main()\nesp>\n```\n\n----------------------------------------\n\nTITLE: Configuring Trace Level and Mask in Zigbee Application\nDESCRIPTION: This snippet demonstrates how to set the trace level and mask for Zigbee debugging. It includes the necessary header and shows the function call placement within the main Zigbee task.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/developing.rst#2025-04-23_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n#include \"esp_zigbee_trace.h\"\n\nstatic void esp_zb_task(void *pvParameters)\n{\n#if CONFIG_ESP_ZB_TRACE_ENABLE\n   esp_zb_set_trace_level_mask(ESP_ZB_TRACE_LEVEL_CRITICAL, ESP_ZB_TRACE_SUBSYSTEM_MAC | ESP_ZB_TRACE_SUBSYSTEM_APP);\n#endif\n\n   /* initialize Zigbee stack */\n   esp_zb_cfg_t zb_nwk_cfg = ESP_ZB_ZED_CONFIG();\n   esp_zb_init(&zb_nwk_cfg);\n   ......\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OTA Image with Image Builder Tool\nDESCRIPTION: Command to create an OTA upgrade image using the image builder tool with specific parameters like manufacturer ID, image type, version and destination address.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_ota_upgrade.rst#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython ~/esp/esp-zigbee-sdk/tools/image_builder_tool/image_builder_tool.py --create build/on_off_light_bulb.bin --manuf-id 0x1001 --image-type 0x1011 --version 0x01010102 --upgrade-dest 01:23:45:67:89:AB:CD:EF --tag-id 0x0000 --tag-file build/on_off_light_bulb.bin\n```\n\n----------------------------------------\n\nTITLE: Logging Wake-up from Deep Sleep and Reboot in C\nDESCRIPTION: This code snippet shows the logging when a Zigbee end device wakes up from deep sleep mode. It includes the wake-up reason, time spent in deep sleep, and the process of reinitializing the Zigbee stack and preparing to enter deep sleep again.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_sleep/deep_sleep/README.md#2025-04-23_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nI (249) ESP_ZB_DEEP_SLEEP: Wake up from timer. Time spent in deep sleep and boot: 20257ms\nI (249) ESP_ZB_DEEP_SLEEP: Enabling timer wakeup, 20s\n\nI (269) phy: phy_version: 211,0, 5857fe5, Nov  1 2023, 11:31:09\nI (269) phy: libbtbb version: ce629d6, Nov  1 2023, 11:31:19\nI (279) main_task: Returned from app_main()\nI (307) ESP_ZB_DEEP_SLEEP: ZDO signal: ZDO Config Ready (0x17), status: ESP_FAIL\nI (307) ESP_ZB_DEEP_SLEEP: Zigbee stack initialized\nI (587) ESP_ZB_DEEP_SLEEP: Device started up in non factory-reset mode\nI (587) ESP_ZB_DEEP_SLEEP: Device rebooted\nI (587) ESP_ZB_DEEP_SLEEP: Start one-shot timer for 5s to enter the deep sleep\nI (5597) ESP_ZB_DEEP_SLEEP: Enter deep sleep\n```\n\n----------------------------------------\n\nTITLE: ZCL Write Command Structure\nDESCRIPTION: Command structure for writing ZCL commands on NCP endpoints. Specifies destination, endpoints, profile, cluster, and command parameters along with the response structure.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/ncp.rst#2025-04-23_snippet_25\n\nLANGUAGE: text\nCODE:\n```\nCommand Parameters:\n  uint8_t[8]  dst_addr                  : The single short address or group address\n  uint8_t   dst_endpoint                : Destination Endpoint ID\n  uint8_t   src_endpoint                : Source Endpoint ID\n  uint8_t   address_mode                : ZCL address mode\n  uint16_t profile_id                   : Profile id\n  uint16_t cluster_id                   : Cluster id\n  uint16_t cmd_id                       : ZCL and custom command id\n  uint8_t  direction                    : Direction of command\n  uint8_t   dataType                    : Command data type\n  uint8_t   dataLength                  : Command data length\n  uint8_t[] data                        : Command data\n```\n\n----------------------------------------\n\nTITLE: OTA Upgrade Server Query Image Handler\nDESCRIPTION: Handler function for processing OTA upgrade image queries on the server side, including validation of image type and manufacturer code.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_ota_upgrade.rst#2025-04-23_snippet_9\n\nLANGUAGE: c\nCODE:\n```\n    static esp_err_t zb_ota_upgrade_server_query_image_handler(esp_zb_zcl_ota_upgrade_server_query_image_message_t message)\n    {\n        esp_err_t ret = ESP_OK;\n        ESP_RETURN_ON_FALSE(message.info.status == ESP_ZB_ZCL_STATUS_SUCCESS, ESP_FAIL, TAG, \"Failed to parse OTA upgrade server query image message\");\n        ESP_LOGI(TAG, \"OTA upgrade server query image\");\n        ESP_LOGI(TAG, \"OTA client address: 0x%x\", message.zcl_addr.u.short_addr);\n        ESP_LOGI(TAG, \"OTA version: 0x%lx, image type: 0x%x, manufacturer code: %x, \", message.version, message.image_type, message.manufacturer_code);\n        if (message.table_idx) {\n            ESP_LOGI(TAG, \"OTA table index: 0x%x\", *message.table_idx);\n        }\n        ESP_RETURN_ON_FALSE(\n            (message.image_type == OTA_UPGRADE_IMAGE_TYPE && message.manufacturer_code == OTA_UPGRADE_MANUFACTURER),\n            ESP_ERR_NOT_FOUND, TAG, \"OTA query image mismatch\");\n        return ret;\n    }\n```\n\n----------------------------------------\n\nTITLE: Getting Group Membership in ESP-Zigbee\nDESCRIPTION: Code to request group membership information from a light endpoint. Sets up the command request structure with destination address, endpoints and group list parameters.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_groups.rst#2025-04-23_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nesp_zb_zcl_groups_get_group_membership_cmd_t cmd_req;\nuint16_t group_list[] = {};\ncmd_req.zcl_basic_cmd.dst_addr_u.addr_short = LIGHT_SHORT_ADDR;\ncmd_req.zcl_basic_cmd.src_endpoint = SWITCH_ENDPOINT;\ncmd_req.zcl_basic_cmd.dst_endpoint = LIGHT_ENDPOINT;\ncmd_req.address_mode = ESP_ZB_APS_ADDR_MODE_16_ENDP_PRESENT;\ncmd_req.group_count = 0;\ncmd_req.group_list = group_list;\nesp_zb_zcl_groups_get_group_membership_cmd_req(&cmd_req);\nESP_LOGI(TAG, \"Get the group membership of endpoint %d\", cmd_req.zcl_basic_cmd.dst_endpoint);\n```\n\n----------------------------------------\n\nTITLE: Receiving Touchlink Scan Requests in ESP-Zigbee-SDK (C)\nDESCRIPTION: This snippet shows the logs when the Touchlink target receives scan requests from a nearby Touchlink initiator. It displays the initiator's IEEE address and the received signal strength (RSSI).\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_touchlink/touchlink_light/README.md#2025-04-23_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nReceived Touchlink scan request from 74:4d:bd:ff:fe:63:c2:e4, RSSI: -2 dBm\nReceived Touchlink scan request from 74:4d:bd:ff:fe:63:c2:e4, RSSI: -2 dBm\nReceived Touchlink scan request from 74:4d:bd:ff:fe:63:c2:e4, RSSI: -2 dBm\nReceived Touchlink scan request from 74:4d:bd:ff:fe:63:c2:e4, RSSI: -2 dBm\nReceived Touchlink scan request from 74:4d:bd:ff:fe:63:c2:e4, RSSI: -2 dBm\n```\n\n----------------------------------------\n\nTITLE: Toggling Remote Light with Button Press\nDESCRIPTION: This snippet demonstrates the functionality of sending an On/Off toggle command to control the remote On/Off Light device when the BOOT button is pressed. It includes the command being sent and the subsequent attribute report received from the light device.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_customized_devices/customized_client/README.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nI (14686) ESP_HA_ON_OFF_SWITCH: Send 'on_off toggle' command to address(0x0) endpoint(10)\nW (14716) ESP_HA_ON_OFF_SWITCH: Receive Zigbee action(0x1005) callback\nI (14716) ESP_HA_ON_OFF_SWITCH: Received report from address(0x0) src endpoint(10) to dst endpoint(1) cluster(0x6)\nI (14716) ESP_HA_ON_OFF_SWITCH: Received report information: attribute(0x0), type(0x10), value(1)\n\nI (15926) ESP_HA_ON_OFF_SWITCH: Send 'on_off toggle' command to address(0x0) endpoint(10)\nW (15956) ESP_HA_ON_OFF_SWITCH: Receive Zigbee action(0x1005) callback\nI (15956) ESP_HA_ON_OFF_SWITCH: Received report from address(0x0) src endpoint(10) to dst endpoint(1) cluster(0x6)\nI (15956) ESP_HA_ON_OFF_SWITCH: Received report information: attribute(0x0), type(0x10), value(0)\n\nI (17696) ESP_HA_ON_OFF_SWITCH: Send 'on_off toggle' command to address(0x0) endpoint(10)\nW (17726) ESP_HA_ON_OFF_SWITCH: Receive Zigbee action(0x1005) callback\nI (17726) ESP_HA_ON_OFF_SWITCH: Received report from address(0x0) src endpoint(10) to dst endpoint(1) cluster(0x6)\nI (17726) ESP_HA_ON_OFF_SWITCH: Received report information: attribute(0x0), type(0x10), value(1)\n\nI (20846) ESP_HA_ON_OFF_SWITCH: Send 'on_off toggle' command to address(0x0) endpoint(10)\nW (20876) ESP_HA_ON_OFF_SWITCH: Receive Zigbee action(0x1005) callback\nI (20876) ESP_HA_ON_OFF_SWITCH: Received report from address(0x0) src endpoint(10) to dst endpoint(1) cluster(0x6)\nI (20876) ESP_HA_ON_OFF_SWITCH: Received report information: attribute(0x0), type(0x10), value(0)\n```\n\n----------------------------------------\n\nTITLE: ZCL Report Configuration Command Structure\nDESCRIPTION: Command structure for configuring reporting on NCP endpoints. Defines parameters for setting up attribute reporting intervals and conditions.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/ncp.rst#2025-04-23_snippet_26\n\nLANGUAGE: text\nCODE:\n```\nCommand Parameters:\n  uint8_t[8]  dst_addr                  : The single short address or group address\n  uint8_t   dst_endpoint                : Destination Endpoint ID\n  uint8_t   src_endpoint                : Source Endpoint ID\n  uint8_t   address_mode                : ZCL address mode\n  uint16_t  cluster_id                  : The cluster identifier\n  uint16_t  record_number               : The Number of report configuration record\n  uint8_t direction                     : The direction of the attribute are reported operation\n  uint16_t attributeID                  : Attribute ID to report\n  uint8_t attrType                      : Attribute type to Report\n  uint16_t min_interval                 : Minimum reporting interval\n  uint16_t max_interval                 : Maximum reporting interval\n```\n\n----------------------------------------\n\nTITLE: Implementing Recall Scene Command in ZigBee Switch\nDESCRIPTION: Function that sends a Recall Scene command to a light device, specifying the group ID and scene ID to be recalled.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_scene.rst#2025-04-23_snippet_13\n\nLANGUAGE: c\nCODE:\n```\nstatic esp_err_t zb_switch_send_recall_scene_to_light(uint16_t short_addr, uint16_t group_id, uint8_t scene_id)\n{\n    esp_zb_zcl_scenes_recall_scene_cmd_t recall_scene_cmd = {\n        .address_mode = ESP_ZB_APS_ADDR_MODE_16_ENDP_PRESENT,\n        .zcl_basic_cmd.dst_addr_u.addr_short = short_addr,\n        .zcl_basic_cmd.dst_endpoint = HA_SCENES_LIGHT,\n        .zcl_basic_cmd.src_endpoint = HA_SCENES_SWITCH,\n        .group_id = group_id,\n        .scene_id = scene_id,\n    };\n\n    esp_zb_lock_acquire(portMAX_DELAY);\n    esp_zb_zcl_scenes_recall_scene_cmd_req(&recall_scene_cmd);\n    esp_zb_lock_release();\n    ESP_LOGI(TAG, \"Ask the short: 0x%04x to recall Scene ID: %d of Group ID: 0x%04x\",\n            recall_scene_cmd.zcl_basic_cmd.dst_addr_u.addr_short, recall_scene_cmd.scene_id,\n            recall_scene_cmd.group_id);\n    return ESP_OK;\n}\nzb_switch_send_recall_scene_to_light(HA_SCENES_LIGHT_ADDR, HA_SCENES_LIGHT_GROUP1_ID, HA_SCENES_LIGHT_SCENE1_ID);\n```\n\n----------------------------------------\n\nTITLE: Registering OTA Image without Notification in C\nDESCRIPTION: Code snippet showing how to register an OTA image on the server side without sending a notification. Sets up basic OTA request parameters including upgrade time and data callback.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_ota_upgrade.rst#2025-04-23_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n    esp_zb_ota_upgrade_server_notify_req_t req = {\n        .notify_on = false,                               // Simply register the OTA image without sending a notification.\n        .ota_upgrade_time = OTA_UPGRADE_CURRENT_TIME + 1, // When to upgrade its running firmware image\n        .next_data_cb = zb_ota_next_data_handler,\n    };\n    esp_err_t ret = zb_ota_file_header_fileds(&req.ota_file_header);\n    ESP_RETURN_ON_ERROR(ret, TAG, \"Failed to initialize OTA file header fileds, status: %s\", esp_err_to_name(ret));\n    esp_zb_ota_upgrade_server_notify_req(&req);\n```\n\n----------------------------------------\n\nTITLE: Handling Scene Operation Response in Zigbee\nDESCRIPTION: Callback handlers for processing scene operation responses from light devices. Includes functions for handling general scene operations and action callbacks.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_scene.rst#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nstatic esp_err_t zb_switch_operate_scene_resp_handler(esp_zb_zcl_scenes_operate_scene_resp_message_t *message)\n{\n    ESP_RETURN_ON_FALSE(message, ESP_FAIL, TAG, \"Empty message\");\n    ESP_RETURN_ON_FALSE(message->info.status == ESP_ZB_ZCL_STATUS_SUCCESS, ESP_ERR_INVALID_ARG, TAG,\n                        \"Received message: error status(%d)\", message->info.status);\n\n    ESP_LOGI(TAG, \"Receive scenes %d command response with Scene ID: %d, Group ID: 0x%04x\", message->info.command.id,\n            message->scene_id, message->group_id);\n    return ESP_OK;\n}\n\nstatic esp_err_t zb_action_handler(esp_zb_core_action_callback_id_t callback_id, const void *message)\n{\n    esp_err_t ret = ESP_OK;\n    switch (callback_id) {\n    case ESP_ZB_CORE_CMD_OPERATE_SCENE_RESP_CB_ID:\n        ret = zb_switch_operate_scene_resp_handler((esp_zb_zcl_scenes_operate_scene_resp_message_t *)message);\n        break;\n    default:\n        ESP_LOGW(TAG, \"Receive Zigbee action(0x%x) callback\", callback_id);\n        break;\n    }\n    return ret;\n}\n```\n\n----------------------------------------\n\nTITLE: ZDO_BIND_SET Command Structure\nDESCRIPTION: Defines the structure and parameters for creating a binding between two endpoints on two ZigBee nodes. Includes command parameters, response parameters, and notification details.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/ncp.rst#2025-04-23_snippet_27\n\nLANGUAGE: markdown\nCODE:\n```\nCommand Parameters:\n- uint8_t[8] src_address: The IEEE address for the source\n- uint8_t src_endp: The source endpoint for the binding entry\n- uint16_t cluster_id: The identifier of the cluster on the source device\n- uint8_t dst_addr_mode: The destination address mode\n- uint8_t[8] addr_short_long: The destination address for the binding entry\n- uint8_t dst_endp: The destination endpoint for the binding entry\n- uint16_t req_dst_addr: Destination address of the request send to\n- uint32_t user_cb: A ZDO match desc request callback\n- uint32_t user_ctx: User information context\n```\n\n----------------------------------------\n\nTITLE: Controlling Home Automation On/Off Light in ESP-Zigbee-SDK (C)\nDESCRIPTION: This snippet shows the logs when the Touchlink target, acting as a Home Automation On/Off Light, receives control messages from the paired Touchlink initiator. It demonstrates turning the light on and off.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_touchlink/touchlink_light/README.md#2025-04-23_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nI (342253) ESP_TL_ON_OFF_LIGHT: Received message: endpoint(10), cluster(0x6), attribute(0x0), data size(1)\nI (342253) ESP_TL_ON_OFF_LIGHT: Light sets to On\nI (342973) ESP_TL_ON_OFF_LIGHT: Received message: endpoint(10), cluster(0x6), attribute(0x0), data size(1)\nI (342983) ESP_TL_ON_OFF_LIGHT: Light sets to Off\nI (345183) ESP_TL_ON_OFF_LIGHT: Received message: endpoint(10), cluster(0x6), attribute(0x0), data size(1)\nI (345183) ESP_TL_ON_OFF_LIGHT: Light sets to On\nI (345573) ESP_TL_ON_OFF_LIGHT: Received message: endpoint(10), cluster(0x6), attribute(0x0), data size(1)\nI (345573) ESP_TL_ON_OFF_LIGHT: Light sets to Off\n```\n\n----------------------------------------\n\nTITLE: Removing All Scenes from a Group in ESP-Zigbee-SDK (C)\nDESCRIPTION: This function sends a command to remove all scenes associated with a specific group ID from a scene light device. It initializes the command structure with source and destination parameters, acquires a lock before sending the command, and logs the operation details.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_scene.rst#2025-04-23_snippet_16\n\nLANGUAGE: c\nCODE:\n```\nstatic esp_err_t zb_switch_send_remove_all_scene_to_light(uint16_t short_addr, uint16_t group_id)\n{\n    esp_zb_zcl_scenes_remove_all_scenes_cmd_t remove_all_scene_cmd = {\n        .address_mode = ESP_ZB_APS_ADDR_MODE_16_ENDP_PRESENT,\n        .zcl_basic_cmd.dst_addr_u.addr_short = short_addr,\n        .zcl_basic_cmd.dst_endpoint = HA_SCENES_LIGHT,\n        .zcl_basic_cmd.src_endpoint = HA_SCENES_SWITCH,\n        .group_id = group_id,\n    };\n\n    esp_zb_lock_acquire(portMAX_DELAY);\n    esp_zb_zcl_scenes_remove_all_scenes_cmd_req(&remove_all_scene_cmd);\n    esp_zb_lock_release();\n    ESP_LOGI(TAG, \"Ask the short: 0x%04x to remove all scenes in Group ID: 0x%04x\",\n            remove_all_scene_cmd.zcl_basic_cmd.dst_addr_u.addr_short, remove_all_scene_cmd.group_id);\n    return ESP_OK;\n}\nzb_switch_send_remove_all_scene_to_light(HA_SCENES_LIGHT_ADDR, HA_SCENES_LIGHT_GROUP1_ID);\n```\n\n----------------------------------------\n\nTITLE: Custom Command Handler\nDESCRIPTION: Handles custom cluster commands received from Zigbee devices. Validates message status and logs command details including command ID, source address, and payload information.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_custom.rst#2025-04-23_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nstatic esp_err_t zb_custom_cmd_handler(const esp_zb_zcl_custom_cluster_command_message_t *message)\n{\n    esp_err_t ret = ESP_OK;\n\n    ESP_RETURN_ON_FALSE(message, ESP_FAIL, TAG, \"Empty message\");\n    ESP_RETURN_ON_FALSE(message->info.status == ESP_ZB_ZCL_STATUS_SUCCESS, ESP_ERR_INVALID_ARG, TAG, \"Received message: error status(%d)\",\n                        message->info.status);\n    ESP_LOGI(TAG, \"Receive custom command: %d from address 0x%04hx\", message->info.command.id, message->info.src_address.u.short_addr);\n    ESP_LOGI(TAG, \"Payload size: %d\", message->data.size);\n    ESP_LOG_BUFFER_CHAR(TAG, ((uint8_t *)message->data.value) + 1, message->data.size - 1);\n    return ret;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Scene Configuration to Light Device\nDESCRIPTION: Function to add a scene configuration to a light device including on/off state and brightness level. Uses extension fields to specify cluster-specific attributes.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_scene.rst#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nstatic esp_err_t zb_switch_send_add_scene_to_light(uint16_t short_addr, uint16_t group_id, uint8_t scene_id)\n{\n    uint8_t scene_light_state = 1;  // On\n    esp_zb_zcl_scenes_extension_field_t on_off_extension_field = {\n        .cluster_id = ESP_ZB_ZCL_CLUSTER_ID_ON_OFF,\n        .length = sizeof(scene_light_state),\n        .extension_field_attribute_value_list = &scene_light_state,\n        .next = NULL,\n    };\n    uint8_t scene_current_level = 255; // Level\n    esp_zb_zcl_scenes_extension_field_t level_extension_field = {\n        .cluster_id = ESP_ZB_ZCL_CLUSTER_ID_LEVEL_CONTROL,\n        .length = sizeof(scene_current_level),\n        .extension_field_attribute_value_list = &scene_current_level,\n        .next = &on_off_extension_field,\n    };\n    esp_zb_zcl_scenes_add_scene_cmd_t add_scene_cmd = {\n        .zcl_basic_cmd.dst_addr_u.addr_short = short_addr,\n        .zcl_basic_cmd.dst_endpoint = HA_SCENES_LIGHT,\n        .zcl_basic_cmd.src_endpoint = HA_SCENES_SWITCH,\n        .group_id = group_id,\n        .scene_id = scene_id,\n        .transition_time = 0x0000,\n        .extension_field = &level_extension_field,\n    };\n    esp_zb_lock_acquire(portMAX_DELAY);\n    esp_zb_zcl_scenes_add_scene_cmd_req(&add_scene_cmd);\n    esp_zb_lock_release();\n    ESP_LOGI(TAG, \"Add Scene ID %d of Group ID 0x%04x to short 0x%04x\", add_scene_cmd.scene_id, add_scene_cmd.group_id,\n            add_scene_cmd.zcl_basic_cmd.dst_addr_u.addr_short);\n    return ESP_OK;\n}\n```\n\n----------------------------------------\n\nTITLE: ZCL Attribute Read Command\nDESCRIPTION: Command structure for reading attribute data on NCP endpoints. Includes addressing parameters and cluster identification.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/ncp.rst#2025-04-23_snippet_23\n\nLANGUAGE: c\nCODE:\n```\nstruct zcl_attr_read {\n    uint8_t[8] dst_addr;     // The single short address or group address\n    uint8_t dst_endpoint;    // Destination Endpoint ID\n    uint8_t src_endpoint;    // Source Endpoint ID\n    uint8_t address_mode;    // ZCL address mode\n    uint16_t cluster;        // Cluster ID\n    uint8_t attr_number;     // Attribute number\n    uint16_t[] attributeId;  // Attribute ID\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Zigbee Temperature Sensor Application in C\nDESCRIPTION: This code snippet shows the initialization and network joining process of the Zigbee temperature sensor application. It demonstrates the device startup, network steering, and successful network joining with related parameters.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_HA_sample/HA_temperature_sensor/README.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nI (420) main_task: Calling app_main()\nI (440) phy: phy_version: 211,0, 5857fe5, Nov  1 2023, 11:31:09\nI (440) phy: libbtbb version: ce629d6, Nov  1 2023, 11:31:19\nI (450) main_task: Returned from app_main()\nI (580) ESP_ZB_TEMP_SENSOR: ZDO signal: ZDO Config Ready (0x17), status: ESP_FAIL\nI (580) ESP_ZB_TEMP_SENSOR: Initialize Zigbee stack\nI (580) temperature_sensor: Range [-10°C ~ 80°C], error < 1°C\nI (590) gpio: GPIO[9]| InputEn: 1| OutputEn: 0| OpenDrain: 0| Pullup: 1| Pulldown: 0| Intr:2\nI (600) ESP_ZB_TEMP_SENSOR: Device started up in  factory-reset mode\nI (600) ESP_ZB_TEMP_SENSOR: Start network steering\nI (3720) ESP_ZB_TEMP_SENSOR: ZDO signal: NLME Status Indication (0x32), status: ESP_OK\nI (8730) ESP_ZB_TEMP_SENSOR: Joined network successfully (Extended PAN ID: 74:4d:bd:ff:fe:60:2d:57, PAN ID: 0xbcc7, Channel:13, Short Address: 0xe6d0)\n```\n\n----------------------------------------\n\nTITLE: Removing Endpoint from Group\nDESCRIPTION: Code to remove a specific endpoint from a group. Configures command request with target device address, endpoints and group ID.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_groups.rst#2025-04-23_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nesp_zb_zcl_groups_add_group_cmd_t cmd_req;\ncmd_req.zcl_basic_cmd.dst_addr_u.addr_short = LIGHT_SHORT_ADDR;\ncmd_req.zcl_basic_cmd.src_endpoint = SWITCH_ENDPOINT;\ncmd_req.zcl_basic_cmd.dst_endpoint = LIGHT_ENDPOINT;\ncmd_req.address_mode = ESP_ZB_APS_ADDR_MODE_16_ENDP_PRESENT;\ncmd_req.group_id = GROUP_ID;\nESP_LOGI(TAG, \"Remove endpoint(%d) from group(%d)\", cmd_req.zcl_basic_cmd.dst_endpoint, cmd_req.group_id);\nesp_zb_zcl_groups_remove_group_cmd_req(&cmd_req);\n```\n\n----------------------------------------\n\nTITLE: APSDE-DATA.Indication Handler Registration in ESP-Zigbee-SDK\nDESCRIPTION: API for registering a callback function that is triggered when the device receives an APSDE-DATA Indication packet. The handler can return TRUE or FALSE to indicate whether the packet still needs to be handled by the stack.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/aps.rst#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nvoid esp_zb_aps_data_indication_handler_register(esp_zb_apsde_data_indication_callback_t cb)\n\ntypedef bool (* esp_zb_apsde_data_indication_callback_t)(esp_zb_apsde_data_ind_t ind);\n```\n\n----------------------------------------\n\nTITLE: Creating Groups Cluster for Switch Device\nDESCRIPTION: Shows how to create a Home Automation Switch Device with groups client cluster for network group management. Includes endpoint and cluster configuration.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_groups.rst#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define SWITCH_ENDPOINT 0x01\n#define LIGHT_ENDPOINT 0x10\n#define GROUP_ID 0x0001\nesp_zb_on_off_switch_cfg_t switch_cfg = ESP_ZB_DEFAULT_ON_OFF_SWITCH_CONFIG();\nesp_zb_ep_list_t *ep_list = esp_zb_ep_list_create();\nesp_zb_endpoint_config_t endpoint_config = {\n    .endpoint = SWITCH_ENDPOINT,\n    .app_profile_id = ESP_ZB_AF_HA_PROFILE_ID,\n    .app_device_id = ESP_ZB_HA_ON_OFF_SWITCH_DEVICE_ID,\n    .app_device_version = 0,\n};\nesp_zb_cluster_list_t *cluster_list = esp_zb_zcl_cluster_list_create();\n\nesp_zb_cluster_list_add_basic_cluster(cluster_list, esp_zb_basic_cluster_create(&(switch_cfg.basic_cfg)), ESP_ZB_ZCL_CLUSTER_SERVER_ROLE);\nesp_zb_cluster_list_add_identify_cluster(cluster_list, esp_zb_identify_cluster_create(&(switch_cfg.identify_cfg)),\n                                         ESP_ZB_ZCL_CLUSTER_SERVER_ROLE);\nesp_zb_cluster_list_add_groups_cluster(cluster_list, esp_zb_groups_cluster_create(NULL), ESP_ZB_ZCL_CLUSTER_CLIENT_ROLE);\nesp_zb_cluster_list_add_on_off_cluster(cluster_list, esp_zb_zcl_attr_list_create(ESP_ZB_ZCL_CLUSTER_ID_ON_OFF), ESP_ZB_ZCL_CLUSTER_CLIENT_ROLE);\nesp_zb_ep_list_add_ep(ep_list, cluster_list, endpoint_config);\n```\n\n----------------------------------------\n\nTITLE: ZCL Thermostat Command Structure\nDESCRIPTION: Defines the data structure for thermostat commands including weekly schedule management and relay status log retrieval. Contains fields for day of week, mode settings, transition time, and temperature setpoints.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/ncp.rst#2025-04-23_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\nuint8_t day_of_week      : Day of week for sequence field\nuint8_t mode_for_seq     : Mode for sequence field\nuint16_t transition_time : Transition time field\nuint16_t heat_set_point  : Heat set point field\nuint16_t cool_set_point  : Cool set point field\n```\n\n----------------------------------------\n\nTITLE: Initializing Touchlink Target in ESP-Zigbee-SDK (C)\nDESCRIPTION: This snippet shows the initialization logs of the Touchlink target device. It demonstrates the device starting up in factory-reset mode and entering the commissioning state, ready to pair with a Touchlink initiator.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_touchlink/touchlink_light/README.md#2025-04-23_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nI (413) main_task: Started on CPU0\nI (423) main_task: Calling app_main()\nI (443) phy: phy_version: 321,2, 632dc08, Feb 13 2025, 16:29:11\nI (443) phy: libbtbb version: 509a2a6, Feb 13 2025, 16:29:25\nI (453) main_task: Returned from app_main()\nI (463) ESP_TL_ON_OFF_LIGHT: ZDO signal: ZDO Config Ready (0x17), status: ESP_FAIL\nI (463) ESP_TL_ON_OFF_LIGHT: Initialize Zigbee stack\nW (473) rmt: channel resolution loss, real=10666666\nI (473) ESP_TL_ON_OFF_LIGHT: Deferred driver initialization successful\nI (483) ESP_TL_ON_OFF_LIGHT: Device started up in factory-reset mode\nI (493) ESP_TL_ON_OFF_LIGHT: Touchlink target is ready, awaiting commissioning\n```\n\n----------------------------------------\n\nTITLE: Notifying OTA Upgrade Image with Notification\nDESCRIPTION: Implementation for notifying an OTA upgrade image with notification enabled. Sets up OTA request parameters and initializes file header fields.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_ota_upgrade.rst#2025-04-23_snippet_7\n\nLANGUAGE: c\nCODE:\n```\n    esp_zb_ota_upgrade_server_notify_req_t req = {\n        .endpoint = ESP_OTA_SERVER_ENDPOINT,\n        .index = 0,                                       // The index of OTA Server OTA image table\n        .notify_on = true,                                // Notify current image\n        .ota_upgrade_time = OTA_UPGRADE_CURRENT_TIME + 1, // When to upgrade its running firmware image\n        .next_data_cb = zb_ota_next_data_handler,\n    };\n\n    esp_err_t ret = zb_ota_file_header_fileds(&req.ota_file_header);\n    ESP_RETURN_ON_ERROR(ret, TAG, \"Failed to initialize OTA file header fileds, status: %s\", esp_err_to_name(ret));\n    esp_zb_ota_upgrade_server_notify_req(&req);\n```\n\n----------------------------------------\n\nTITLE: Logging Zigbee Network Connection and Light Control\nDESCRIPTION: This snippet shows the console output when the device starts up, connects to a Zigbee network, and receives on/off commands. It demonstrates the process of joining a network and responding to light control commands.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_HA_sample/HA_on_off_light/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nI (392) main_task: Calling app_main()\nI (412) phy: phy_version: 321,2, 632dc08, Feb 13 2025, 16:29:11\nI (412) phy: libbtbb version: 509a2a6, Feb 13 2025, 16:29:25\nI (422) main_task: Returned from app_main()\nI (432) ESP_ZB_ON_OFF_LIGHT: ZDO signal: ZDO Config Ready (0x17), status: ESP_FAIL\nI (432) ESP_ZB_ON_OFF_LIGHT: Initialize Zigbee stack\nW (442) rmt: channel resolution loss, real=10666666\nI (432) ESP_ZB_ON_OFF_LIGHT: Deferred driver initialization successful\nI (442) ESP_ZB_ON_OFF_LIGHT: Device started up in factory-reset mode\nI (452) ESP_ZB_ON_OFF_LIGHT: Start network steering\nI (3382) ESP_ZB_ON_OFF_LIGHT: Joined network successfully (Extended PAN ID: 74:4d:bd:ff:fe:63:c2:e4, PAN ID: 0x1ce4, Channel:13, Short Address: 0x2638)\n```\n\n----------------------------------------\n\nTITLE: Removing All Groups\nDESCRIPTION: Code to remove all group memberships from a device. Sets up command request with target device address and endpoints.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_groups.rst#2025-04-23_snippet_9\n\nLANGUAGE: c\nCODE:\n```\nesp_zb_zcl_groups_remove_all_groups_cmd_t cmd_req;\ncmd_req.zcl_basic_cmd.dst_addr_u.addr_short = LIGHT_SHORT_ADDR;\ncmd_req.zcl_basic_cmd.src_endpoint = SWITCH_ENDPOINT;\ncmd_req.zcl_basic_cmd.dst_endpoint = LIGHT_ENDPOINT;\ncmd_req.address_mode = ESP_ZB_APS_ADDR_MODE_16_ENDP_PRESENT;\nesp_zb_zcl_groups_remove_all_groups_cmd_req(&cmd_req);\nESP_LOGI(TAG, \"Remove all group from device address %d\", cmd_req.zcl_basic_cmd.dst_addr_u.addr_short);\n```\n\n----------------------------------------\n\nTITLE: ZigBee Color Control Commands Table\nDESCRIPTION: Detailed table showing color control commands with their command IDs, parameters, and descriptions. Each command includes specific parameters for controlling color attributes like hue, saturation, color temperature, and transition timing.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/ncp.rst#2025-04-23_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n|            | color_step_saturation                                              | 0x0005         | uint8_t step_mode                      : step mode                                                | ZCL color step saturation                  |\n|            |                                                                    |                | uint8_t step_size                      : step size                                                |                                            |\n|            |                                                                    |                | uint16_t transition_time               : time wants to transition tenths of a second              |                                            |\n```\n\nLANGUAGE: markdown\nCODE:\n```\n|            | color_move_to_hue_and_saturation                                   | 0x0006         | uint8_t hue                            : current value of hue                                     | ZCL color move to hue/saturation           |\n|            |                                                                    |                | uint8_t saturation                     : current value of saturation                              |                                            |\n|            |                                                                    |                | uint16_t transition_time               : time wants to transition tenths of a second              |                                            |\n```\n\nLANGUAGE: markdown\nCODE:\n```\n|            | color_move_to_color                                                | 0x0007         | uint16_t color_x                       : current value of chromaticity value x                    | ZCL color move to color                    |\n|            |                                                                    |                | uint16_t color_y                       : current value of chromaticity value y                    |                                            |\n|            |                                                                    |                | uint16_t transition_time               : time wants to transition tenths of a second              |                                            |\n```\n\nLANGUAGE: markdown\nCODE:\n```\n|            | color_move_color                                                   | 0x0008         |  uint16_t rate_x                       : specifies rate of movement in steps per second of color x| ZCL color move color                       |\n|            |                                                                    |                |  uint16_t rate_y                       : specifies rate of movement in steps per second of color y|                                            |\n```\n\nLANGUAGE: markdown\nCODE:\n```\n|            | color_step_color                                                   | 0x0009         | int16_t step_x                         : specifies the change to be added to color x              | ZCL color step color                       |\n|            |                                                                    |                | int16_t step_y                         : specifies the change to be added to color y              |                                            |\n|            |                                                                    |                | uint16_t transition_time               : time wants to transition tenths of a second              |                                            |\n```\n\nLANGUAGE: markdown\nCODE:\n```\n|            | color_move_to_color_temperature                                    | 0x000A         | uint16_t color_temperature             : The field indicates the color-temperature value          | ZCL color move to color temperature        |\n|            |                                                                    |                | uint16_t transition_time               : time wants to transition tenths of a second              |                                            |\n```\n\nLANGUAGE: markdown\nCODE:\n```\n|            | color_enhanced_move_to_hue                                         | 0x0040         | uint16_t enhanced_hue                  : The field specifies the target enhanced hue for the lamp | ZCL color enhanced move to hue             |\n|            |                                                                    |                | uint8_t direction                      : The direction                                            |                                            |\n|            |                                                                    |                | uint16_t transition_time               : time wants to transition tenths of a second              |                                            |\n```\n\n----------------------------------------\n\nTITLE: Completing Touchlink Commissioning in ESP-Zigbee-SDK (C)\nDESCRIPTION: This snippet demonstrates the logs when the Touchlink target successfully completes the commissioning process with a Touchlink initiator. It shows the network information including Extended PAN ID, PAN ID, Channel, and Short Address.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_touchlink/touchlink_light/README.md#2025-04-23_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nW (5663) ESP_TL_ON_OFF_LIGHT: Network(0x5182) closed, devices joining not allowed.\nI (5663) ESP_TL_ON_OFF_LIGHT: Commissioning successfully, network information (Extended PAN ID: 74:4d:bd:ff:fe:63:78:73, PAN ID: 0x5182, Channel:11, Short Address: 0xbef5)\nI (5673) ESP_TL_ON_OFF_LIGHT: Touchlink target commissioning finished\nI (7323) ESP_TL_ON_OFF_LIGHT: ZDO signal: ZDO Device Update (0x30), status: ESP_OK\nI (7333) ESP_TL_ON_OFF_LIGHT: New device commissioned or rejoined (short: 0x396a)\n```\n\n----------------------------------------\n\nTITLE: Handling Group Membership Response\nDESCRIPTION: Callback function to process group membership response. Handles the response message containing group membership information including capacity and group IDs.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_groups.rst#2025-04-23_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nstatic esp_err_t zb_zcl_group_get_membership_resp(esp_zb_zcl_groups_get_group_membership_resp_message_t message)\n{\n    esp_err_t ret = ESP_OK;\n    if (message.info.status == ESP_ZB_ZCL_STATUS_SUCCESS) {\n        ESP_LOGI(TAG, \"Group membership from address: %04x, Src_endpoint: %d, capacity: %d\", message.info.src_address.u.short_addr,\n                message.info.src_endpoint, message.capacity);\n        ESP_LOGI(TAG, \"Group List:\");\n        for (int i = 0; i < message.group_count; i++) {\n            ESP_LOGI(TAG, \"index: %d, Group ID: %d\", i, message.group_id[i]);\n        }\n    }\n    return ret;\n}\n```\n\n----------------------------------------\n\nTITLE: Reporting Temperature Attributes in Zigbee Application\nDESCRIPTION: This snippet demonstrates the functionality of actively reporting the current measured temperature to the bound device when the 'BOOT' button is pressed on the board.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_HA_sample/HA_temperature_sensor/README.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nI (17800) ESP_ZB_TEMP_SENSOR: Send 'report attributes' command\nI (18850) ESP_ZB_TEMP_SENSOR: Send 'report attributes' command\n```\n\n----------------------------------------\n\nTITLE: Implementing View Group Request\nDESCRIPTION: Shows how to send a View Group Request command to view the application name string for a specific group.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_groups.rst#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nesp_zb_zcl_groups_add_group_cmd_t cmd_req;\ncmd_req.zcl_basic_cmd.dst_addr_u.addr_short = LIGHT_SHORT_ADDR;\ncmd_req.zcl_basic_cmd.src_endpoint = SWITCH_ENDPOINT;\ncmd_req.zcl_basic_cmd.dst_endpoint = LIGHT_ENDPOINT;\ncmd_req.address_mode = ESP_ZB_APS_ADDR_MODE_16_ENDP_PRESENT;\ncmd_req.group_id = GROUP_ID;\nESP_LOGI(TAG, \"View group(%d) on address: %04x\", cmd_req.group_id, cmd_req.zcl_basic_cmd.dst_addr_u.addr_short);\nesp_zb_zcl_groups_view_group_cmd_req(&cmd_req);\n```\n\n----------------------------------------\n\nTITLE: Temperature Reporting and Configure Reporting Command\nDESCRIPTION: Console output showing temperature value reporting from the sensor, manual configuration of the reporting parameters after BOOT button press, and reading temperature attributes from the sensor.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_HA_sample/HA_thermostat/README.md#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nI (11207) ESP_ZB_THERMOSTAT: Received report from address(0xe6d0) src endpoint(10) to dst endpoint(1) cluster(0x402)\nI (11207) ESP_ZB_THERMOSTAT: Measured Value is 25.00 degrees Celsius\nI (12267) ESP_ZB_THERMOSTAT: Received report from address(0xe6d0) src endpoint(10) to dst endpoint(1) cluster(0x402)\nI (12267) ESP_ZB_THERMOSTAT: Measured Value is 24.00 degrees Celsius\nI (16207) ESP_ZB_THERMOSTAT: Received report from address(0xe6d0) src endpoint(10) to dst endpoint(1) cluster(0x402)\nI (16207) ESP_ZB_THERMOSTAT: Measured Value is 25.00 degrees Celsius\nI (19417) ESP_ZB_THERMOSTAT: Received report from address(0xe6d0) src endpoint(10) to dst endpoint(1) cluster(0x402)\nI (19417) ESP_ZB_THERMOSTAT: Measured Value is 25.00 degrees Celsius\nI (20467) ESP_ZB_THERMOSTAT: Received report from address(0xe6d0) src endpoint(10) to dst endpoint(1) cluster(0x402)\nI (20467) ESP_ZB_THERMOSTAT: Measured Value is 25.00 degrees Celsius\nI (22947) ESP_ZB_THERMOSTAT: Send 'configure reporting' command\nI (22947) ESP_ZB_THERMOSTAT: Send 'read attributes' command\nI (22997) ESP_ZB_THERMOSTAT: Configure report response: status(0), cluster(0x402), direction(0xe8), attribute(0xffff)\nI (22997) ESP_ZB_THERMOSTAT: Received report from address(0xe6d0) src endpoint(10) to dst endpoint(1) cluster(0x402)\nI (23007) ESP_ZB_THERMOSTAT: Measured Value is 25.00 degrees Celsius\nI (23027) ESP_ZB_THERMOSTAT: Read attribute response: from address(0xe6d0) src endpoint(10) to dst endpoint(1) cluster(0x402)\nI (23027) ESP_ZB_THERMOSTAT: Read attribute response: status(0), cluster(0x402), attribute(0x0), type(0x29), value(196)\nI (23037) ESP_ZB_THERMOSTAT: Measured Value is 25.00 degrees Celsius\nI (23047) ESP_ZB_THERMOSTAT: Read attribute response: status(0), cluster(0x402), attribute(0x1), type(0x29), value(24)\nI (23057) ESP_ZB_THERMOSTAT: Min Measured Value is -10.00 degrees Celsius\nI (23067) ESP_ZB_THERMOSTAT: Read attribute response: status(0), cluster(0x402), attribute(0x2), type(0x29), value(64)\nI (23077) ESP_ZB_THERMOSTAT: Max Measured Value is 80.00 degrees Celsius\nI (23087) ESP_ZB_THERMOSTAT: Read attribute response: status(134), cluster(0x402), attribute(0x3), type(0xc7), value(169)\nI (33077) ESP_ZB_THERMOSTAT: Received report from address(0xe6d0) src endpoint(10) to dst endpoint(1) cluster(0x402)\nI (33077) ESP_ZB_THERMOSTAT: Measured Value is 25.00 degrees Celsius\n```\n\n----------------------------------------\n\nTITLE: Joining Zigbee Network and Device Registration\nDESCRIPTION: This snippet shows the log output when the device successfully joins a Zigbee network, registers as an end device, and matches with an On/Off Light device. It includes network details and device addressing information.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_customized_devices/customized_client/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nI (416) main_task: Returned from app_main()\nI (426) ESP_HA_ON_OFF_SWITCH: ZDO signal: ZDO Config Ready (0x17), status: ESP_FAIL\nI (1406) gpio: GPIO[9]| InputEn: 1| OutputEn: 0| OpenDrain: 0| Pullup: 1| Pulldown: 0| Intr:4 \nI (1406) ESP_HA_ON_OFF_SWITCH: Deferred driver initialization successful\nI (1406) ESP_HA_ON_OFF_SWITCH: Joined network successfully (Extended PAN ID: 74:4d:bd:ff:fe:63:de:c5, PAN ID: 0x46c5, Channel:13, Short Address: 0x5cf2)\nI (1446) ESP_HA_ON_OFF_SWITCH: Match desc response: status(0), address(0x0), endpoint(10)\n```\n\n----------------------------------------\n\nTITLE: Device Association and Temperature Sensor Binding\nDESCRIPTION: Console output showing device association, commission of a new device, temperature sensor detection, binding process, and initial temperature reporting from the sensor device.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_HA_sample/HA_thermostat/README.md#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nI (4637) ESP_ZB_THERMOSTAT: ZDO signal: NWK Device Associated (0x12), status: ESP_OK\nI (5157) ESP_ZB_THERMOSTAT: ZDO signal: ZDO Device Update (0x30), status: ESP_OK\nI (5187) ESP_ZB_THERMOSTAT: New device commissioned or rejoined (short: 0xe6d0)\nI (5257) ESP_ZB_THERMOSTAT: Found temperature sensor\nI (5257) ESP_ZB_THERMOSTAT: Request temperature sensor to bind us\nI (5267) ESP_ZB_THERMOSTAT: Bind temperature sensor\nI (5277) ESP_ZB_THERMOSTAT: Successfully bind the temperature sensor from address(0xe6d0) on endpoint(10)\nI (5397) ESP_ZB_THERMOSTAT: ZDO signal: NLME Status Indication (0x32), status: ESP_OK\nI (5417) ESP_ZB_THERMOSTAT: The temperature sensor from address(0xe6d0) on endpoint(10) successfully binds us\nI (7207) ESP_ZB_THERMOSTAT: Received report from address(0xe6d0) src endpoint(10) to dst endpoint(1) cluster(0x402)\nI (7207) ESP_ZB_THERMOSTAT: Measured Value is 24.00 degrees Celsius\nI (8367) ESP_ZB_THERMOSTAT: Read attribute response: from address(0xe6d0) src endpoint(10) to dst endpoint(1) cluster(0x0)\nI (8367) ESP_ZB_THERMOSTAT: Read attribute response: status(0), cluster(0x0), attribute(0x4), type(0x42), value(11)\nI (8387) ESP_ZB_THERMOSTAT: Peer Manufacturer is \"ESPRESSIF\"\nI (8387) ESP_ZB_THERMOSTAT: Read attribute response: status(0), cluster(0x0), attribute(0x5), type(0x42), value(9)\nI (8397) ESP_ZB_THERMOSTAT: Peer Model is \"esp32h2\"\nI (10317) ESP_ZB_THERMOSTAT: ZDO signal: ZDO Device Authorized (0x2f), status: ESP_OK\nI (10347) ESP_ZB_THERMOSTAT: Network(0xbcc7) is open for 180 seconds\n```\n\n----------------------------------------\n\nTITLE: Initializing Zigbee Coordinator Network Formation\nDESCRIPTION: Console output showing the Zigbee Coordinator stack initialization, device startup in factory-reset mode, network formation, and network opening for device joining.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_HA_sample/HA_thermostat/README.md#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nI (497) main_task: Returned from app_main()\nI (627) ESP_ZB_THERMOSTAT: ZDO signal: ZDO Config Ready (0x17), status: ESP_FAIL\nI (627) ESP_ZB_THERMOSTAT: Initialize Zigbee stack\nI (637) ESP_ZB_THERMOSTAT: Device started up in  factory-reset mode\nI (637) ESP_ZB_THERMOSTAT: Start network formation\nW (797) ESP_ZB_THERMOSTAT: Network(0xbcc7) closed, devices joining not allowed.\nI (797) ESP_ZB_THERMOSTAT: Formed network successfully (Extended PAN ID: 74:4d:bd:ff:fe:60:2d:57, PAN ID: 0xbcc7, Channel:13, Short Address: 0x0000)\nI (1397) ESP_ZB_THERMOSTAT: Network(0xbcc7) is open for 180 seconds\nI (1397) ESP_ZB_THERMOSTAT: Network steering started\n```\n\n----------------------------------------\n\nTITLE: Handling View Group Response\nDESCRIPTION: Implementation of callback handler for View Group Response commands to process group viewing results.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_groups.rst#2025-04-23_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nstatic esp_err_t zb_zcl_group_view_resp(esp_zb_zcl_groups_view_group_resp_message_t message)\n{\n    esp_err_t ret = ESP_OK;\n    if (message.info.status == ESP_ZB_ZCL_STATUS_SUCCESS) {\n        ESP_LOGI(TAG, \"View response: group id: %d, application name: %s\", message.group_id, message.group_name ? message.group_name : 0);\n    } else {\n        ESP_LOGW(TAG, \"Failed to view group with error code: %d\", message.info.status);\n    }\n    return ret;\n}\n```\n\n----------------------------------------\n\nTITLE: Collecting Remote Device Information\nDESCRIPTION: This snippet demonstrates the process of collecting basic information about the matched remote On/Off Light device. It sends ZDO requests for Active Endpoint, Simple Descriptor, IEEE Address, and Read Attribute to gather device details.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_customized_devices/customized_client/README.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nI (1446) ESP_HA_ON_OFF_SWITCH: Match desc response: status(0), address(0x0), endpoint(10)\nI (1486) ESP_HA_ON_OFF_SWITCH: Active endpoint response: status(0) and endpoint count(2)\nI (1486) ESP_HA_ON_OFF_SWITCH: Endpoint ID List: 10\nI (1486) ESP_HA_ON_OFF_SWITCH: Endpoint ID List: 242\nI (1506) ESP_HA_ON_OFF_SWITCH: Simple desc response: status(0), device_id(256), app_version(0), profile_id(0x104), endpoint_ID(10)\nI (1506) ESP_HA_ON_OFF_SWITCH: Cluster ID list: 0x0\nI (1516) ESP_HA_ON_OFF_SWITCH: Cluster ID list: 0x3\nI (1516) ESP_HA_ON_OFF_SWITCH: Cluster ID list: 0x4\nI (1526) ESP_HA_ON_OFF_SWITCH: Cluster ID list: 0x5\nI (1526) ESP_HA_ON_OFF_SWITCH: Cluster ID list: 0x6\nI (1546) ESP_HA_ON_OFF_SWITCH: IEEE address: 74:4d:bd:ff:fe:63:de:c5\nI (1556) ESP_HA_ON_OFF_SWITCH: Read attribute response: status(0), cluster(0x6), attribute(0x0), type(0x10), value(0)\n```\n\n----------------------------------------\n\nTITLE: Zigbee Command ID Reference Table\nDESCRIPTION: Table showing ZCL, ZDO and APS command IDs with their respective functions for Zigbee network operations.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/ncp.rst#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nZCL_WRITE                    0x0107    Write APS on NCP endpoints\nZCL_REPORT_CONFIG            0x0108    Report configure on NCP endpoints\nZDO_BIND_SET                 0x0200    Create a binding between two endpoints on two nodes\nZDO_UNBIND_SET               0x0201    Remove a binding between two endpoints on two nodes\nZDO_FIND_MATCH               0x0202    Send match desc request to find matched Zigbee device\nAPS_DATA_REQUEST             0x0300    Request the aps data\nAPS_DATA_INDICATION          0x0301    Indication the aps data\nAPS_DATA_CONFIRM             0x0302    Confirm the aps data\n```\n\n----------------------------------------\n\nTITLE: Logging Light Control Commands\nDESCRIPTION: This snippet demonstrates the console output when the device receives on/off commands from the Zigbee network. It shows how the device processes these commands and changes the light state accordingly.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_HA_sample/HA_on_off_light/README.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nI (7162) ESP_ZB_ON_OFF_LIGHT: Received message: endpoint(10), cluster(0x6), attribute(0x0), data size(1)\nI (7162) ESP_ZB_ON_OFF_LIGHT: Light sets to On\nI (7742) ESP_ZB_ON_OFF_LIGHT: Received message: endpoint(10), cluster(0x6), attribute(0x0), data size(1)\nI (7742) ESP_ZB_ON_OFF_LIGHT: Light sets to Off\nI (8462) ESP_ZB_ON_OFF_LIGHT: Received message: endpoint(10), cluster(0x6), attribute(0x0), data size(1)\nI (8462) ESP_ZB_ON_OFF_LIGHT: Light sets to On\nI (8932) ESP_ZB_ON_OFF_LIGHT: Received message: endpoint(10), cluster(0x6), attribute(0x0), data size(1)\nI (8932) ESP_ZB_ON_OFF_LIGHT: Light sets to Off\n```\n\n----------------------------------------\n\nTITLE: Command Sending Log Output for Zigbee Light Control\nDESCRIPTION: Log output showing the coordinator sending level and color control commands to the bound light device in response to BOOT button presses, demonstrating the ability to change brightness and color.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_HA_sample/HA_color_dimmable_switch/README.md#2025-04-23_snippet_2\n\nLANGUAGE: log\nCODE:\n```\nI (19660) ESP_ZB_COLOR_DIMM_SWITCH: Send command for moving light to 5 level\nI (20840) ESP_ZB_COLOR_DIMM_SWITCH: Send command for moving light color to (0x4ccc, 0x95b1)\nI (21840) ESP_ZB_COLOR_DIMM_SWITCH: Send command for moving light to 15 level\nI (22810) ESP_ZB_COLOR_DIMM_SWITCH: Send command for moving light color to (0xa3d6, 0x547a)\nI (29400) ESP_ZB_COLOR_DIMM_SWITCH: Send command for moving light to 25 level\nI (30160) ESP_ZB_COLOR_DIMM_SWITCH: Send command for moving light color to (0x2666, 0xf5c)\nI (58620) ESP_ZB_COLOR_DIMM_SWITCH: ZDO signal: ZDO Device Update (0x30), status: ESP_OK\n```\n\n----------------------------------------\n\nTITLE: Querying OTA Upgrade Image\nDESCRIPTION: Simple implementation for querying an OTA upgrade image from a specific endpoint and address.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_ota_upgrade.rst#2025-04-23_snippet_8\n\nLANGUAGE: c\nCODE:\n```\n    esp_zb_ota_upgrade_client_query_image_req(0x0000, ESP_OTA_SERVER_ENDPOINT);\n```\n\n----------------------------------------\n\nTITLE: Finalizing OTA Upgrade Process in C\nDESCRIPTION: This snippet illustrates the completion of the OTA upgrade process, including the final data transmissions and upgrade time calculation.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_ota/ota_server/README.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nI (703116) ESP_OTA_SERVER: -- OTA Server transmits data from 0x0 to 0x43a7: progress [617431/618486]\nI (703376) ESP_OTA_SERVER: -- OTA Server transmits data from 0x0 to 0x43a7: progress [617654/618486]\nI (703626) ESP_OTA_SERVER: -- OTA Server transmits data from 0x0 to 0x43a7: progress [617877/618486]\nI (703876) ESP_OTA_SERVER: -- OTA Server transmits data from 0x0 to 0x43a7: progress [618100/618486]\nI (704126) ESP_OTA_SERVER: -- OTA Server transmits data from 0x0 to 0x43a7: progress [618323/618486]\nI (704386) ESP_OTA_SERVER: -- OTA Server transmits data from 0x0 to 0x43a7: progress [618486/618486]\nI (704436) ESP_OTA_SERVER: OTA client address: 0x43a7\nI (704436) ESP_OTA_SERVER: OTA version: 0x1010101, image type: 0x1011, server status: 2\nI (704446) ESP_OTA_SERVER: OTA upgrade time: 0x1234a\n```\n\n----------------------------------------\n\nTITLE: Network Command Parameters Documentation\nDESCRIPTION: Detailed documentation of network commands including NETWORK_INIT, PAN_ID operations, and channel configuration commands with their parameters and responses.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/ncp.rst#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nNETWORK_INIT\nCommand Parameters: None\nResponse Parameters: esp_ncp_status_t status\n\nNETWORK_PAN_ID_SET\nCommand Parameters: uint16_t panid\nResponse Parameters: esp_ncp_status_t status\n\nNETWORK_PAN_ID_GET\nCommand Parameters: None\nResponse Parameters: uint16_t panid\n\nNETWORK_EXTENDED_PAN_ID_SET\nCommand Parameters: uint8_t[8] extpanid\nResponse Parameters: esp_ncp_status_t status\n\nNETWORK_EXTENDED_PAN_ID_GET\nCommand Parameters: None\nResponse Parameters: uint8_t[8] extpanid\n\nNETWORK_PRIMARY_CHANNEL_SET\nCommand Parameters: uint32_t channelmask\nResponse Parameters: esp_ncp_status_t status\n\nNETWORK_SECONDARY_CHANNEL_SET\nCommand Parameters: uint32_t channelmask\nResponse Parameters: esp_ncp_status_t status\n\nNETWORK_CHANNEL_SET\nCommand Parameters: uint32_t channelmask\n```\n\n----------------------------------------\n\nTITLE: Handling On/Off Commands in Zigbee Light Bulb\nDESCRIPTION: This snippet demonstrates the log output when the Zigbee light bulb receives On/Off commands from a joined device. It shows how the light responds to these commands by changing its state.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_customized_devices/customized_server/README.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nI (16506) ESP_HA_ON_OFF_LIGHT: Received message: endpoint(10), cluster(0x6), attribute(0x0), data size(1)\nI (16506) ESP_HA_ON_OFF_LIGHT: Light sets to On\nW (16556) ESP_HA_ON_OFF_LIGHT: Receive Zigbee action(0x1005) callback\nI (17746) ESP_HA_ON_OFF_LIGHT: Received message: endpoint(10), cluster(0x6), attribute(0x0), data size(1)\nI (17746) ESP_HA_ON_OFF_LIGHT: Light sets to Off\nW (17796) ESP_HA_ON_OFF_LIGHT: Receive Zigbee action(0x1005) callback\nI (19516) ESP_HA_ON_OFF_LIGHT: Received message: endpoint(10), cluster(0x6), attribute(0x0), data size(1)\nI (19516) ESP_HA_ON_OFF_LIGHT: Light sets to On\nW (19566) ESP_HA_ON_OFF_LIGHT: Receive Zigbee action(0x1005) callback\nI (22666) ESP_HA_ON_OFF_LIGHT: Received message: endpoint(10), cluster(0x6), attribute(0x0), data size(1)\nI (22666) ESP_HA_ON_OFF_LIGHT: Light sets to Off\nW (22716) ESP_HA_ON_OFF_LIGHT: Receive Zigbee action(0x1005) callback\n```\n\n----------------------------------------\n\nTITLE: Logging Zigbee Network Join and Deep Sleep Entry in C\nDESCRIPTION: This code snippet demonstrates the logging of successful network joining and the initiation of deep sleep mode in a Zigbee end device. It shows the device joining a network with specific parameters and starting a timer to enter deep sleep.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_sleep/deep_sleep/README.md#2025-04-23_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nI (10557) ESP_ZB_DEEP_SLEEP: Joined network successfully (Extended PAN ID: 60:55:f9:ff:fe:f7:2f:3e, PAN ID: 0xe4c4, Channel:13, Short Address: 0x5e1c)\nI (10567) ESP_ZB_DEEP_SLEEP: Start one-shot timer for 5s to enter the deep sleep\nI (15567) ESP_ZB_DEEP_SLEEP: Enter deep sleep\n```\n\n----------------------------------------\n\nTITLE: Handling Get Scene Membership Response in ZigBee Switch\nDESCRIPTION: Function that processes the Get Scene Membership Response and displays information about available scenes, including the scene IDs and capacity.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_scene.rst#2025-04-23_snippet_12\n\nLANGUAGE: c\nCODE:\n```\nstatic esp_err_t zb_switch_get_scene_membership_handler(esp_zb_zcl_scenes_get_scene_membership_resp_message_t *message)\n{\n    ESP_RETURN_ON_FALSE(message, ESP_FAIL, TAG, \"Empty message\");\n    ESP_RETURN_ON_FALSE(message->info.status == ESP_ZB_ZCL_STATUS_SUCCESS, ESP_ERR_INVALID_ARG, TAG,\n                        \"Received message: error status(%d)\", message->info.status);\n    ESP_LOGI(TAG, \"Receive scenes get scene membership response with Group ID: 0x%04x, capacity: %d\", message->group_id,\n            message->capacity);\n    ESP_LOGI(TAG, \"Scene List:\");\n    for (int i = 0; i < message->scene_count; i++) {\n        ESP_LOGI(TAG, \"%d\", *message->scene_list);\n        message->scene_list++;\n    }\n    return ESP_OK;\n}\n\nstatic esp_err_t zb_action_handler(esp_zb_core_action_callback_id_t callback_id, const void *message)\n{\n    esp_err_t ret = ESP_OK;\n    switch (callback_id) {\n    case ESP_ZB_CORE_CMD_GET_SCENE_MEMBERSHIP_RESP_CB_ID:\n        ret = zb_switch_get_scene_membership_handler((esp_zb_zcl_scenes_get_scene_membership_resp_message_t *)message);\n        break;\n    default:\n        ESP_LOGW(TAG, \"Receive Zigbee action(0x%x) callback\", callback_id);\n        break;\n    }\n    return ret;\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Scene Configuration in Zigbee Network\nDESCRIPTION: Implementation of scene viewing functionality, allowing retrieval of scene configuration from a light device. Includes command sending and response handling.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_scene.rst#2025-04-23_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nstatic esp_err_t zb_switch_view_scene_from_light(uint16_t short_addr, uint16_t group_id, uint8_t scene_id)\n{\n    esp_zb_zcl_scenes_view_scene_cmd_t view_scene_cmd = {\n        .zcl_basic_cmd.dst_addr_u.addr_short = short_addr,\n        .zcl_basic_cmd.dst_endpoint = HA_SCENES_LIGHT,\n        .zcl_basic_cmd.src_endpoint = HA_SCENES_SWITCH,\n        .group_id = group_id,\n        .scene_id = scene_id,\n    };\n\n    esp_zb_lock_acquire(portMAX_DELAY);\n    esp_zb_zcl_scenes_view_scene_cmd_req(&view_scene_cmd);\n    esp_zb_lock_release();\n    ESP_LOGI(TAG, \"View Scene ID: %d in Group ID: 0x%04x of short: 0x%04x\", view_scene_cmd.scene_id,\n            view_scene_cmd.group_id, view_scene_cmd.zcl_basic_cmd.dst_addr_u.addr_short);\n    return ESP_OK;\n}\n```\n\n----------------------------------------\n\nTITLE: ZCL Commands Table\nDESCRIPTION: Table showing Zigbee Cluster Library (ZCL) command codes (0x0100-0x0106) for endpoint management and attribute operations.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/ncp.rst#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nZCL_ENDPOINT_ADD                0x0100    Configures endpoint information on the NCP\nZCL_ENDPOINT_DEL                0x0101    Remove endpoint information on the NCP\nZCL_ATTR_READ                   0x0102    Read attribute data on NCP endpoints\nZCL_ATTR_WRITE                  0x0103    Write attribute data on NCP endpoints\nZCL_ATTR_REPORT                 0x0104    Report attribute data on NCP endpoints\nZCL_ATTR_DISC                   0x0105    Discover attribute data on NCP endpoints\nZCL_READ                        0x0106    Read APS on NCP endpoints\n```\n\n----------------------------------------\n\nTITLE: Configuring Attribute Reporting\nDESCRIPTION: This snippet shows the process of sending Bind and Config Report requests to the matched On/Off Light device. This enables the light to report its On/Off attribute whenever it changes or when the maximum reporting interval is reached.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_customized_devices/customized_client/README.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nI (1596) ESP_HA_ON_OFF_SWITCH: Bind response from address(0x0), endpoint(1) with status(0)\nI (1626) ESP_HA_ON_OFF_SWITCH: Configure report response: status(0), cluster(0x6), attribute(0xffff)\nI (1636) ESP_HA_ON_OFF_SWITCH: Received report from address(0x0) src endpoint(10) to dst endpoint(1) cluster(0x6)\nI (1636) ESP_HA_ON_OFF_SWITCH: Received report information: attribute(0x0), type(0x10), value(0)\n```\n\n----------------------------------------\n\nTITLE: ZCL Attribute Discovery Command Structure\nDESCRIPTION: Command structure for discovering attribute data on NCP endpoints. Includes destination address, endpoints, cluster ID, and attribute parameters along with response and notification parameters.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/ncp.rst#2025-04-23_snippet_24\n\nLANGUAGE: text\nCODE:\n```\nCommand Parameters:\n  uint8_t[8]  dst_addr                  : The single short address or group address\n  uint8_t   dst_endpoint                : Destination Endpoint ID\n  uint8_t   src_endpoint                : Source Endpoint ID\n  uint8_t   address_mode                : ZCL address mode\n  uint16_t  cluster_id                  : The cluster identifier\n  uint16_t  start_attr_id               : The attribute identifier to begin the discover\n  uint8_t   max_attr_number             : The maximum number of attribute identifiers\n  uint8_t   direction                   : The command direction\n```\n\n----------------------------------------\n\nTITLE: Device Association and Binding Log Output for Zigbee Coordinator\nDESCRIPTION: Log output showing a dimmable light device joining the network and being automatically added to the binding table by the coordinator. This enables direct control of the light.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_HA_sample/HA_color_dimmable_switch/README.md#2025-04-23_snippet_1\n\nLANGUAGE: log\nCODE:\n```\nI (17070) ESP_ZB_COLOR_DIMM_SWITCH: ZDO signal: NWK Device Associated (0x12), status: ESP_OK\nI (17570) ESP_ZB_COLOR_DIMM_SWITCH: ZDO signal: ZDO Device Update (0x30), status: ESP_OK\nI (17630) ESP_ZB_COLOR_DIMM_SWITCH: New device commissioned or rejoined (short: 0x85da)\nI (17660) ESP_ZB_COLOR_DIMM_SWITCH: Found dimmable light\nI (17660) ESP_ZB_COLOR_DIMM_SWITCH: Try to bind color control\nI (17660) ESP_ZB_COLOR_DIMM_SWITCH: Try to bind level control\nI (17670) ESP_ZB_COLOR_DIMM_SWITCH: Bound successfully!\nI (17670) ESP_ZB_COLOR_DIMM_SWITCH: Bound successfully!\nI (17680) ESP_ZB_COLOR_DIMM_SWITCH: The light originating from address(0x85da) on endpoint(10)\nI (18140) ESP_ZB_COLOR_DIMM_SWITCH: ZDO signal: ZDO Device Authorized (0x2f), status: ESP_OK\nI (18190) ESP_ZB_COLOR_DIMM_SWITCH: ZDO signal: NWK Permit Join (0x36), status: ESP_OK\n```\n\n----------------------------------------\n\nTITLE: OTA Upgrade Server Status Handler\nDESCRIPTION: Handler function for processing OTA upgrade status messages on the server side.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_ota_upgrade.rst#2025-04-23_snippet_11\n\nLANGUAGE: c\nCODE:\n```\n    static esp_err_t zb_ota_upgrade_server_status_handler(esp_zb_zcl_ota_upgrade_server_status_message_t message)\n    {\n        esp_err_t ret = ESP_OK;\n        ESP_RETURN_ON_FALSE(message.info.status == ESP_ZB_ZCL_STATUS_SUCCESS, ESP_FAIL, TAG, \"Failed to parse OTA upgrade server status message\");\n        ESP_LOGI(TAG, \"OTA client address: 0x%x\", message.zcl_addr.u.short_addr);\n        ESP_LOGI(TAG, \"OTA version: 0x%lx, image type: 0x%x, server status: %d\", message.version, message.image_type, message.server_status);\n        if (message.upgrade_time) {\n            ESP_LOGI(TAG, \"OTA upgrade time: 0x%lx\", *message.upgrade_time);\n        }\n        return ret;\n    }\n```\n\n----------------------------------------\n\nTITLE: Logging Zigbee Initialization and Network Joining Process in C\nDESCRIPTION: This snippet shows the log output during Zigbee stack initialization, network steering, and successful network joining. It demonstrates the device's ability to enter light sleep mode when the Zigbee stack is idle.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_sleep/light_sleep/README.md#2025-04-23_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nI (418) sleep: Enable automatic switching of GPIO sleep configuration\nI (425) sleep_clock: System Power, Clock and Reset sleep retention initialization\nI (433) sleep_clock: Modem Power, Clock and Reset sleep retention initialization\nI (441) sleep_sys_periph: Interrupt Matrix sleep retention initialization\nI (449) sleep_sys_periph: HP System sleep retention initialization\nI (456) sleep_sys_periph: TEE/APM sleep retention initialization\nI (462) sleep_sys_periph: UART sleep retention initialization\nI (469) sleep_sys_periph: Timer Group sleep retention initialization\nI (476) sleep_sys_periph: IO Matrix sleep retention initialization\nI (483) sleep_sys_periph: SPI Mem sleep retention initialization\nI (490) sleep_sys_periph: SysTimer sleep retention initialization\nI (496) sleep_sys_periph: PVT sleep retention initialization\nI (514) main_task: Started on CPU0\nI (514) main_task: Calling app_main()\nI (524) pm: Frequency switching config: CPU_MAX: 96, APB_MAX: 96, APB_MIN: 96, Light sleep: ENABLED\nI (525) esp_zb_sleep: Enable ieee802154 zigbee light sleep, the wake up source is ESP timer\nI (545) phy: phy_version: 210,0, 11c334c, Sep  4 2023, 17:01:13\nI (547) phy: libbtbb version: b821802, Sep  4 2023, 17:01:29\nI (548) btbb_init: btbb sleep retention initialization\nI (554) ieee802154: ieee802154 mac sleep retention initialization\nI (563) main_task: Returned from app_main()\nI (650) ESP_ZB_SLEEP: ZDO signal: ZDO Config Ready (0x17), status: ESP_FAIL\nI (651) ESP_ZB_SLEEP: Zigbee stack initialized\nI (655) ESP_ZB_SLEEP: Start network steering\nI (1608) ESP_ZB_SLEEP: Zigbee can sleep\nI (2090) ESP_ZB_SLEEP: BDB Device Start failed with status: ESP_FAIL, retrying\nI (2718) ESP_ZB_SLEEP: Zigbee can sleep\nI (3083) ESP_ZB_SLEEP: Joined network successfully (Extended PAN ID: 60:55:f9:ff:fe:f7:2e:16, PAN ID: 0x6a2a, Channel:13, Short Address: 0x3a41)\nI (4137) ESP_ZB_SLEEP: Zigbee can sleep\nI (4585) ESP_ZB_SLEEP: Zigbee can sleep\n```\n\n----------------------------------------\n\nTITLE: Network Detection and Joining Log Output\nDESCRIPTION: Console output showing the initialization of Zigbee stack and successful network joining process. Displays configuration status, network steering, and connection details including PAN ID and channel information.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_HA_sample/HA_color_dimmable_light/README.md#2025-04-23_snippet_0\n\nLANGUAGE: log\nCODE:\n```\nI (394) main_task: Calling app_main()\nI (404) gpio: GPIO[8]| InputEn: 0| OutputEn: 1| OpenDrain: 0| Pullup: 1| Pulldown: 0| Intr:0 \nI (404) phy_init: phy_version 220,2dbbbe7,Sep 25 2023,20:39:25\nI (464) phy: libbtbb version: 90c587c, Sep 25 2023, 20:39:57\nI (474) ESP_ZB_COLOR_DIMM_LIGHT: ZDO signal: ZDO Config Ready (0x17), status: ESP_FAIL\nI (474) ESP_ZB_COLOR_DIMM_LIGHT: Zigbee stack initialized\nI (484) ESP_ZB_COLOR_DIMM_LIGHT: Start network steering\nI (484) main_task: Returned from app_main()\nI (9604) ESP_ZB_COLOR_DIMM_LIGHT: ZDO signal: NWK Permit Join (0x36), status: ESP_OK\nI (9774) ESP_ZB_COLOR_DIMM_LIGHT: ZDO signal: NWK Permit Join (0x36), status: ESP_OK\nI (9774) ESP_ZB_COLOR_DIMM_LIGHT: Joined network successfully (Extended PAN ID: 60:55:f9:00:00:f6:07:b4, PAN ID: 0x17ef, Channel:13)\n```\n\n----------------------------------------\n\nTITLE: APS Data Confirm Parameters\nDESCRIPTION: Specification for APS_DATA_CONFIRM response parameters including device states, addressing information, and confirmation status.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/ncp.rst#2025-04-23_snippet_32\n\nLANGUAGE: text\nCODE:\n```\n| Response Parameters:\n|                        | uint8_t states;                     : The states of the device                                   |\n|                        | uint8_t dst_addr_mode               : The dest addr mode used in this primitive and of the APDU  |\n|                        | uint8_t[8] dst_address              : The IEEE address for the dest                              |\n|                        | uint8_t dst_endpoint                : The individual endpoint of the dest                        |\n|                        | uint8_t src_endpoint                : The individual endpoint of the source                      |\n|                        | uint32_t tx_time                    : The time confirm for the transferred packet                |\n|                        | uint8_t  confirm_status             : The status of data confirm                                 |\n```\n\n----------------------------------------\n\nTITLE: ZCL Clusters Table Definition in RST\nDESCRIPTION: ReStructuredText table defining supported Zigbee Cluster Library (ZCL) clusters with their corresponding cluster IDs.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/introduction.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. table:: **ZCL cluster**\n   :align: center\n\n   =====================================  ============\n               Cluster Name                Cluster ID\n   =====================================  ============\n     basic                                  0x0000\n     power_configuration                    0x0001\n     identify                               0x0003\n     groups                                 0x0004\n```\n\n----------------------------------------\n\nTITLE: Zigbee Gateway Initialization Log\nDESCRIPTION: System log showing the Zigbee Gateway initialization process, including network formation and steering configuration.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_gateway/README.md#2025-04-23_snippet_2\n\nLANGUAGE: log\nCODE:\n```\nI (5520) ESP_ZB_GATEWAY: Zigbee stack initialized\nI (5530) ESP_ZB_GATEWAY: Device started up in  factory-reset mode\nI (5530) ESP_ZB_GATEWAY: Start network formation\nW (5700) ESP_ZB_GATEWAY: Network(0x79f0) closed, devices joining not allowed.\nI (5700) ESP_ZB_GATEWAY: Formed network successfully (Extended PAN ID: 60:55:f9:ff:fe:f7:69:24, PAN ID: 0x79f0, Channel:13, Short Address: 0x0000)\nI (6310) ESP_ZB_GATEWAY: Network(0x79f0) is open for 180 seconds\nI (6310) ESP_ZB_GATEWAY: Network steering started\n```\n\n----------------------------------------\n\nTITLE: Logging Periodic Light Sleep Mode Entry in C\nDESCRIPTION: This snippet demonstrates the device entering light sleep mode at regular intervals when the Zigbee stack is idle. The device wakes up either by an RTC timeout or a GPIO interrupt.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_sleep/light_sleep/README.md#2025-04-23_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nI (9643) ESP_ZB_SLEEP: Zigbee can sleep\nI (12585) ESP_ZB_SLEEP: Zigbee can sleep\nI (12668) ESP_ZB_SLEEP: Zigbee can sleep\nI (16677) ESP_ZB_SLEEP: Zigbee can sleep\nI (20701) ESP_ZB_SLEEP: Zigbee can sleep\nI (24730) ESP_ZB_SLEEP: Zigbee can sleep\n```\n\n----------------------------------------\n\nTITLE: Green Power Commissioning Mode Log\nDESCRIPTION: Log output showing the device entering commissioning mode and successfully completing the commissioning process with a Green Power Device.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_greenpower/esp_zigbee_gpc/README.md#2025-04-23_snippet_1\n\nLANGUAGE: log\nCODE:\n```\nI (1359) ESP_ZGP_COMBO: Network steering started\nI (5479) ESP_ZGP_COMBO: Enter commissioning mode\nI (5479) ESP_ZGP_COMBO: ZGP new mode 1 cause: 2\nI (9619) ESP_ZGP_COMBO: handle accept commissioning information\nI (10219) ESP_ZGP_COMBO: Commissioning done with status: 0\nI (10219) ESP_ZGP_COMBO: Commissioning information: app_id 0 endpoint 0 and src_id is 0x12345678\nI (10229) ESP_ZGP_COMBO: ZGP new mode 0 cause: 3\n```\n\n----------------------------------------\n\nTITLE: Network Permit Joining Command\nDESCRIPTION: Command to control network joining permissions, allowing other nodes to join the network with this node as their parent.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/ncp.rst#2025-04-23_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nCommand Parameters:\n uint8_t duration : A value of 0x00 disables joining\n                  : A value of 0xFF enables joining\n                  : Other value enables joining for that number of seconds\n```\n\n----------------------------------------\n\nTITLE: Initial Device Startup Log - ESP32 Zigbee Green Power Device\nDESCRIPTION: Log output showing successful initialization of the Green Power Device with GPIO configuration and PHY version details.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_greenpower/esp_zigbee_gpd/README.md#2025-04-23_snippet_0\n\nLANGUAGE: log\nCODE:\n```\nI (342) main_task: Calling app_main()\nI (352) gpio: GPIO[9]| InputEn: 1| OutputEn: 0| OpenDrain: 0| Pullup: 1| Pulldown: 0| Intr:2 \nI (362) phy: phy_version: 220,2, 37a29de, Dec 29 2023, 16:30:13\nI (362) phy: libbtbb version: 944f18e, Dec 29 2023, 16:30:30\nI (372) ESP_ZGP_DEVICE: ZGPD device started successfully\n```\n\n----------------------------------------\n\nTITLE: Initializing Zigbee Stack and Forming Network\nDESCRIPTION: This snippet shows the log output when the Zigbee stack is initialized and a network is formed. It includes information about the network configuration such as PAN ID, channel, and short address.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_customized_devices/customized_server/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nI (426) main_task: Calling app_main()\nI (446) phy: phy_version: 321,2, 632dc08, Feb 13 2025, 16:29:11\nI (446) phy: libbtbb version: 509a2a6, Feb 13 2025, 16:29:25\nI (456) main_task: Returned from app_main()\nI (586) ESP_HA_ON_OFF_LIGHT: ZDO signal: ZDO Config Ready (0x17), status: ESP_FAIL\nI (586) ESP_HA_ON_OFF_LIGHT: Initialize Zigbee stack\nW (596) rmt: channel resolution loss, real=10666666\nI (586) ESP_HA_ON_OFF_LIGHT: Deferred driver initialization successful\nI (596) ESP_HA_ON_OFF_LIGHT: Device started up in factory-reset mode\nI (606) ESP_HA_ON_OFF_LIGHT: Start network formation\nW (766) ESP_HA_ON_OFF_LIGHT: Network(0x46c5) closed, devices joining not allowed.\nI (766) ESP_HA_ON_OFF_LIGHT: Formed network successfully (Extended PAN ID: 74:4d:bd:ff:fe:63:de:c5, PAN ID: 0x46c5, Channel:13, Short Address: 0x0000)\nI (1366) ESP_HA_ON_OFF_LIGHT: Network(0x46c5) is open for 180 seconds\nI (1366) ESP_HA_ON_OFF_LIGHT: Network steering started\n```\n\n----------------------------------------\n\nTITLE: Logging Device Wake-up and Command Handling in C\nDESCRIPTION: This snippet shows the device waking up when the BOOT button is pressed, sending an 'ieee_addr req' command, receiving a message, and setting the light state. It demonstrates the device's ability to handle commands and return to sleep mode.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_sleep/light_sleep/README.md#2025-04-23_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nI (41897) ESP_ZB_SLEEP: Send 'ieee_addr req' command\nI (41906) ESP_ZB_SLEEP: Zigbee can sleep\nI (42015) ESP_ZB_SLEEP: Received message: endpoint(10), cluster(0x6), attribute(0x0), data size(1)\nI (42066) ESP_ZB_SLEEP: Light sets to On\nI (42081) ESP_ZB_SLEEP: Zigbee can sleep\nI (42129) ESP_ZB_SLEEP: Zigbee can sleep\nI (42293) ESP_ZB_SLEEP: Response IEEE address: 60:55:f9:ff:fe:f7:2e:16\nI (42351) ESP_ZB_SLEEP: Zigbee can sleep\n```\n\n----------------------------------------\n\nTITLE: Zigbee Device Control and Command Log\nDESCRIPTION: Log showing device control operations including toggle commands and their execution status in the Zigbee network.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_host/README.md#2025-04-23_snippet_2\n\nLANGUAGE: log\nCODE:\n```\nI (11811) ESP_ZB_ON_OFF_SWITCH: Send 'on_off toggle' command\nI (11831) ESP_ZNSP_FRAME: 10 00 07 01 cc 01 00 00 23 45 \nI (12881) ESP_ZB_ON_OFF_SWITCH: Send 'on_off toggle' command\nI (12901) ESP_ZNSP_FRAME: 10 00 07 01 98 01 00 00 d9 e2 \nI (13711) ESP_ZB_ON_OFF_SWITCH: Send 'on_off toggle' command\nI (13731) ESP_ZNSP_FRAME: 10 00 07 01 3d 01 00 00 b3 2e \nI (14641) ESP_ZB_ON_OFF_SWITCH: Send 'on_off toggle' command\nI (14661) ESP_ZNSP_FRAME: 10 00 07 01 51 01 00 00 63 20 \nI (15501) ESP_ZB_ON_OFF_SWITCH: Send 'on_off toggle' command\nI (15521) ESP_ZNSP_FRAME: 10 00 07 01 e6 01 00 00 de 16 \nI (16231) ESP_ZB_ON_OFF_SWITCH: Send 'on_off toggle' command\nI (16251) ESP_ZNSP_FRAME: 10 00 07 01 db 01 00 00 a3 d1\n```\n\n----------------------------------------\n\nTITLE: Stack Status Notification Command\nDESCRIPTION: Command interface for monitoring stack status changes in the Zigbee network. Returns stack status as a notification parameter.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/ncp.rst#2025-04-23_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nCommand Parameters: None\nResponse Parameters:\n uint8_t stack_status : The status of the stack changes\nNotify Parameters:\n uint8_t stack_status : The status of the stack changes\n```\n\n----------------------------------------\n\nTITLE: Initializing Touchlink Initiator Startup Log\nDESCRIPTION: Shows the startup sequence of the Touchlink initiator device, including PHY initialization and GPIO configuration.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_touchlink/touchlink_switch/README.md#2025-04-23_snippet_0\n\nLANGUAGE: log\nCODE:\n```\nI (357) main_task: Started on CPU0\nI (367) main_task: Calling app_main()\nI (397) phy: phy_version: 321,2, 632dc08, Feb 13 2025, 16:29:11\nI (397) phy: libbtbb version: 509a2a6, Feb 13 2025, 16:29:25\nI (397) main_task: Returned from app_main()\nI (507) ESP_TL_ON_OFF_SWITCH: ZDO signal: ZDO Config Ready (0x17), status: ESP_FAIL\nI (507) ESP_TL_ON_OFF_SWITCH: Initialize Zigbee stack\nI (507) gpio: GPIO[9]| InputEn: 1| OutputEn: 0| OpenDrain: 0| Pullup: 1| Pulldown: 0| Intr:4 \nI (507) ESP_TL_ON_OFF_SWITCH: Deferred driver initialization successful\nI (517) ESP_TL_ON_OFF_SWITCH: Device started up in factory-reset mode\nI (527) ESP_TL_ON_OFF_SWITCH: Scanning as a Touchlink initiator...\n```\n\n----------------------------------------\n\nTITLE: Device Association and Binding Process in Zigbee Network\nDESCRIPTION: Console output showing a Zigbee device with Home Automation On/Off Light functionality joining the network. The coordinator detects the light device, adds it to the binding table, and establishes communication.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_HA_sample/HA_on_off_switch/README.md#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nI (7803) ESP_ZB_ON_OFF_SWITCH: ZDO signal: NWK Device Associated (0x12), status: ESP_OK\nI (7813) ESP_ZB_ON_OFF_SWITCH: ZDO signal: ZDO Device Update (0x30), status: ESP_OK\nI (7843) ESP_ZB_ON_OFF_SWITCH: New device commissioned or rejoined (short: 0x2638)\nI (7873) ESP_ZB_ON_OFF_SWITCH: Found light\nI (7873) ESP_ZB_ON_OFF_SWITCH: Try to bind On/Off\nI (7883) ESP_ZB_ON_OFF_SWITCH: Bound successfully!\nI (7883) ESP_ZB_ON_OFF_SWITCH: The light originating from address(0x2638) on endpoint(10)\n```\n\n----------------------------------------\n\nTITLE: Network State Query Command Structure\nDESCRIPTION: Command structure for querying the current network state of a node, indicating whether it is joining, joined to, or leaving a network.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/ncp.rst#2025-04-23_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nCommand Parameters:\n  None\n\nResponse Parameters:\n  uint8_t network_state : A value indicating whether the node is joining, joined to, or leaving a network\n```\n\n----------------------------------------\n\nTITLE: Initializing Zigbee Coordinator and Network Formation\nDESCRIPTION: Console output showing the initialization of the Zigbee stack, device startup in factory-reset mode, and successful network formation. The coordinator forms an open network for 180 seconds to allow devices to join.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_HA_sample/HA_on_off_switch/README.md#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nI (453) main_task: Returned from app_main()\nI (583) ESP_ZB_ON_OFF_SWITCH: ZDO signal: ZDO Config Ready (0x17), status: ESP_FAIL\nI (583) ESP_ZB_ON_OFF_SWITCH: Initialize Zigbee stack\nI (583) gpio: GPIO[9]| InputEn: 1| OutputEn: 0| OpenDrain: 0| Pullup: 1| Pulldown: 0| Intr:4 \nI (583) ESP_ZB_ON_OFF_SWITCH: Deferred driver initialization successful\nI (603) ESP_ZB_ON_OFF_SWITCH: Device started up in factory-reset mode\nI (613) ESP_ZB_ON_OFF_SWITCH: Start network formation\nW (763) ESP_ZB_ON_OFF_SWITCH: Network(0x1ce4) closed, devices joining not allowed.\nI (763) ESP_ZB_ON_OFF_SWITCH: Formed network successfully (Extended PAN ID: 74:4d:bd:ff:fe:63:c2:e4, PAN ID: 0x1ce4, Channel:13, Short Address: 0x0000)\nI (1373) ESP_ZB_ON_OFF_SWITCH: Network(0x1ce4) is open for 180 seconds\nI (1373) ESP_ZB_ON_OFF_SWITCH: Network steering started\n```\n\n----------------------------------------\n\nTITLE: ZCL Color Commands Table Structure\nDESCRIPTION: Markdown table defining ZCL color control commands with their command IDs, parameters, and descriptions. Includes commands for enhanced hue movement, color loop control, and color temperature adjustments.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/ncp.rst#2025-04-23_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n|            | color_enhanced_move_hue                                            | 0x0041         | uint8_t move_mode                      : The Move Mode                                            | ZCL color enhanced move hue                |\n|            |                                                                    |                +---------------------------------------------------------------------------------------------------+                                            |\n|            |                                                                    |                | uint16_t rate                          : The rate of movement in steps per second                 |                                            |\n|            +--------------------------------------------------------------------+----------------+---------------------------------------------------------------------------------------------------+--------------------------------------------+\n|            | color_enhanced_step_hue                                            | 0x0042         | uint8_t step_mode                      : The Step Mode                                            | ZCL color enhanced step hue                |\n|            |                                                                    |                +---------------------------------------------------------------------------------------------------+                                            |\n|            |                                                                    |                | uint16_t step_size                     : The Step Size                                            |                                            |\n|            |                                                                    |                +---------------------------------------------------------------------------------------------------+                                            |    \n|            |                                                                    |                | uint16_t transition_time               : time wants to transition tenths of a second              |                                            |\n|            +--------------------------------------------------------------------+----------------+---------------------------------------------------------------------------------------------------+--------------------------------------------+\n|            | color_enhanced_move_to_hue_saturation                              | 0x0043         | uint16_t enhanced_hue                  : The Enhanced Hue specifies the target extended hue       | ZCL color enhanced move to hue saturation  |\n|            |                                                                    |                +---------------------------------------------------------------------------------------------------+                                            |\n|            |                                                                    |                | uint8_t saturation                     : The value of Saturation                                  |                                            |\n|            |                                                                    |                +---------------------------------------------------------------------------------------------------+                                            |    \n|            |                                                                    |                | uint16_t transition_time               : time wants to transition tenths of a second              |                                            |\n|            +--------------------------------------------------------------------+----------------+---------------------------------------------------------------------------------------------------+--------------------------------------------+\n|            | color_color_loop_set                                               | 0x0044         | uint8_t update_flags                   : The Update Flags                                         | ZCL color color loop set                   |\n|            |                                                                    |                +---------------------------------------------------------------------------------------------------+                                            |\n|            |                                                                    |                |  uint8_t action                        : The Action to take for the color loop                    |                                            |\n|            |                                                                    |                +---------------------------------------------------------------------------------------------------+                                            |    \n|            |                                                                    |                | uint8_t direction                      : The Direction field of the color loop set command        |                                            |\n|            |                                                                    |                +---------------------------------------------------------------------------------------------------+                                            |    \n|            |                                                                    |                | uint16_t time                          : The Time over which to perform a full color loop         |                                            |\n|            |                                                                    |                +---------------------------------------------------------------------------------------------------+                                            |    \n|            |                                                                    |                | uint16_t start_hue                     : The starting hue to use for the color loop               |                                            |\n|            +--------------------------------------------------------------------+----------------+---------------------------------------------------------------------------------------------------+--------------------------------------------+\n|            | color_stop_move_step                                               | 0x0047         | None                                                                                              | ZCL color stop                             |\n|            +--------------------------------------------------------------------+----------------+---------------------------------------------------------------------------------------------------+--------------------------------------------+\n|            | color_move_color_temperature                                       | 0x004B         | uint8_t move_mode                      : The Move Mode field of the Move Hue command              | ZCL color move color temperature           |\n|            |                                                                    |                +---------------------------------------------------------------------------------------------------+                                            |\n|            |                                                                    |                | uint16_t rate                          : The Rate of movement in steps per second                 |                                            |\n|            |                                                                    |                +---------------------------------------------------------------------------------------------------+                                            |    \n|            |                                                                    |                | uint16_t color_temperature_minimum     : The lower bound on the Color-Temperature attribute       |                                            |\n|            |                                                                    |                +---------------------------------------------------------------------------------------------------+                                            |    \n|            |                                                                    |                | uint16_t color_temperature_maximum     : The upper bound on the Color-Temperature attribute       |                                            |\n|            +--------------------------------------------------------------------+----------------+---------------------------------------------------------------------------------------------------+--------------------------------------------+\n|            | color_step_color_temperature                                       | 0x004C         | uint8_t move_mode                      : The Move Mode field of the Step Hue command              | ZCL color step color temperature           |\n|            |                                                                    |                +---------------------------------------------------------------------------------------------------+                                            |\n|            |                                                                    |                | uint16_t step_size                     : The Step Size field specifies the change to be added to  |                                            |\n|            |                                                                    |                +---------------------------------------------------------------------------------------------------+                                            |\n```\n\n----------------------------------------\n\nTITLE: Failed Touchlink Target Search Log\nDESCRIPTION: Log output when no Touchlink target devices are found during the scanning process.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_touchlink/touchlink_switch/README.md#2025-04-23_snippet_1\n\nLANGUAGE: log\nCODE:\n```\nI (1837) ESP_TL_ON_OFF_SWITCH: Touchlink commissioning as initiator done\nW (1837) ESP_TL_ON_OFF_SWITCH: No Touchlink target devices found\n```\n\n----------------------------------------\n\nTITLE: Initializing Zigbee Host Device Startup Log\nDESCRIPTION: Initial boot log showing CPU startup, project information, and memory allocation details for the Zigbee host device.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_host/README.md#2025-04-23_snippet_0\n\nLANGUAGE: log\nCODE:\n```\nI (169) cpu_start: Pro cpu start user code\nI (169) cpu_start: cpu freq: 160000000 Hz\nI (169) cpu_start: Application information:\nI (174) cpu_start: Project name:     esp_zigbee_host\nI (179) cpu_start: App version:      200bb14-dirty\nI (185) cpu_start: Compile time:     Jan 29 2024 20:21:28\nI (191) cpu_start: ELF file SHA256:  5e169858d9058980...\nI (197) cpu_start: ESP-IDF:          v5.1.2\nI (202) cpu_start: Min chip rev:     v0.0\nI (206) cpu_start: Max chip rev:     v3.99 \nI (211) cpu_start: Chip rev:         v0.0\nI (216) heap_init: Initializing. RAM available for dynamic allocation:\nI (223) heap_init: At 3FFAE6E0 len 00001920 (6 KiB): DRAM\nI (229) heap_init: At 3FFB2AB8 len 0002D548 (181 KiB): DRAM\nI (236) heap_init: At 3FFE0440 len 00003AE0 (14 KiB): D/IRAM\nI (242) heap_init: At 3FFE4350 len 0001BCB0 (111 KiB): D/IRAM\nI (248) heap_init: At 4008E0A0 len 00011F60 (71 KiB): IRAM\nI (256) spi_flash: detected chip: gd\nI (259) spi_flash: flash io: dio\nW (263) spi_flash: Detected size(4096k) larger than the size in the binary image header(2048k). Using the size in the binary image header.\nI (277) app_start: Starting scheduler on CPU0\nI (281) app_start: Starting scheduler on CPU1\nI (281) main_task: Started on CPU0\nI (291) main_task: Calling app_main()\nI (301) uart: queue free spaces: 20\nI (311) gpio: GPIO[0]| InputEn: 1| OutputEn: 0| OpenDrain: 0| Pullup: 1| Pulldown: 0| Intr:2 \nI (311) main_task: Returned from app_main()\n```\n\n----------------------------------------\n\nTITLE: APS Data Indication Parameters\nDESCRIPTION: Specification for APS_DATA_INDICATION response and notification parameters including addressing modes, security status, and ASDU details.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/ncp.rst#2025-04-23_snippet_31\n\nLANGUAGE: text\nCODE:\n```\n| Response Parameters:\n|                        | uint8_t states;                     : The states of the device                                   |\n|                        | uint8_t dst_addr_mode               : The dest addr mode used in this primitive and of the APDU  |\n|                        | uint8_t[8] dst_addr                 : The individual device address or group address to directed |\n|                        | uint8_t dst_endpoint                : The target endpoint on the local entity to directed        |\n|                        | uint8_t src_addr_mode               : The source addr mode used in this primitive and of the APDU|\n|                        | uint8_t[8] src_addr                 : The individual device address which the ASDU was received  |\n|                        | uint8_t src_endpoint                : The individual endpoint number which the ASDU was received |\n|                        | uint16_t profile_id                 : The identifier of the profile which this frame originated  |\n|                        | uint16_t cluster_id                 : The identifier of the received cluster                     |\n|                        | uint8_t indication_status           : The status of the incoming frame processing                |\n|                        | uint8_t security_status             : The ASDU without any security or secured with NWK key      |\n|                        | uint8_t lqi                         : The link quality indication delivered by the NLDE          |\n|                        | uint32_t rx_time                    : The time indication for the received packet                |\n|                        | uint32_t asdu_length                : The number of octets comprising the ASDU being indicated   |\n|                        | uint8_t asdu[]                      : The set of octets comprising the ASDU to be indicated      |\n```\n\n----------------------------------------\n\nTITLE: Toggle Command Log - ESP32 Zigbee Green Power Device\nDESCRIPTION: Log output showing successful transmission of toggle commands after device commissioning.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_greenpower/esp_zigbee_gpd/README.md#2025-04-23_snippet_2\n\nLANGUAGE: log\nCODE:\n```\nI (22822) ESP_ZGP_DEVICE: ZGPD send toggle command\nI (23572) ESP_ZGP_DEVICE: ZGPD send toggle command\nI (24082) ESP_ZGP_DEVICE: ZGPD send toggle command\nI (24972) ESP_ZGP_DEVICE: ZGPD send toggle command\n```\n\n----------------------------------------\n\nTITLE: Network Scan Command Structure\nDESCRIPTION: Command structure for performing active network scanning. Specifies channel mask and scan duration parameters.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/ncp.rst#2025-04-23_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nCommand Parameters:\n  uint32_t channel_mask : Bits set as 1 indicate that the channel should be scanned\n  uint8_t scan_duration : Time to spend scanning each channel\n```\n\n----------------------------------------\n\nTITLE: Checking USB Port in Bash\nDESCRIPTION: This command lists all USB ports recognized by the PC, which is useful for identifying the correct port when flashing the target device.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/faq.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nls -la /dev/ttyUSB*\n```\n\n----------------------------------------\n\nTITLE: Light Control Command Reception Log\nDESCRIPTION: Log output showing the device receiving and processing toggle commands from a Green Power Device to control the LED state.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_greenpower/esp_zigbee_gpc/README.md#2025-04-23_snippet_2\n\nLANGUAGE: log\nCODE:\n```\nI (11929) ESP_ZGP_COMBO: Received message: endpoint(10), cluster(0x6), attribute(0x0), data size(1)\nI (11929) ESP_ZGP_COMBO: Light sets to On\nI (12779) ESP_ZGP_COMBO: Received message: endpoint(10), cluster(0x6), attribute(0x0), data size(1)\nI (12779) ESP_ZGP_COMBO: Light sets to Off\nI (13489) ESP_ZGP_COMBO: Received message: endpoint(10), cluster(0x6), attribute(0x0), data size(1)\nI (13489) ESP_ZGP_COMBO: Light sets to On\nI (13999) ESP_ZGP_COMBO: Received message: endpoint(10), cluster(0x6), attribute(0x0), data size(1)\nI (13999) ESP_ZGP_COMBO: Light sets to Off\n```\n\n----------------------------------------\n\nTITLE: APSDE-DATA.Confirm Handler Registration in ESP-Zigbee-SDK\nDESCRIPTION: API for registering a callback function that is triggered when an APSDE-DATA Request has been confirmed by the remote device. It reports the results of a request to transfer data from a local NHLE to peer NHLEs.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/aps.rst#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nvoid esp_zb_aps_data_confirm_handler_register(esp_zb_apsde_data_confirm_callback_t cb);\n\ntypedef void (* esp_zb_apsde_data_confirm_callback_t)(esp_zb_apsde_data_confirm_t confirm);\n```\n\n----------------------------------------\n\nTITLE: Toggle Command Log\nDESCRIPTION: Log output showing the sending of toggle commands to control the paired light device.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_touchlink/touchlink_switch/README.md#2025-04-23_snippet_5\n\nLANGUAGE: log\nCODE:\n```\nI (21197) ESP_TL_ON_OFF_SWITCH: send 'on_off toggle' command\nI (21837) ESP_TL_ON_OFF_SWITCH: send 'on_off toggle' command\nI (22517) ESP_TL_ON_OFF_SWITCH: send 'on_off toggle' command\nI (23397) ESP_TL_ON_OFF_SWITCH: send 'on_off toggle' command\n```\n\n----------------------------------------\n\nTITLE: ZDO_FIND_MATCH Command Structure\nDESCRIPTION: Details the structure and parameters for sending match descriptor requests to find matching ZigBee devices. Includes command parameters and response parameters.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/ncp.rst#2025-04-23_snippet_29\n\nLANGUAGE: markdown\nCODE:\n```\nCommand Parameters:\n- uint32_t user_cb: A ZDO match desc request callback\n- uint32_t user_ctx: User information context\n- uint16_t dst_nwk_addr: NWK address that request sent to\n- uint16_t addr_of_interest: NWK address of interest\n- uint16_t profile_id: Profile ID to be match at the destination\n- uint8_t num_in_clusters: The number of input clusters for matching cluster server\n- uint8_t num_out_clusters: The number of output clusters for matching cluster client\n- uint16_t[] cluster_list: The cluster ID with size num_in_clusters + num_out_clusters\n```\n\n----------------------------------------\n\nTITLE: Updating Git Submodules in Bash\nDESCRIPTION: This command updates all submodules to their correct heads, which is necessary for ensuring the correct esp-idf branch/release is being used.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/faq.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule update —init —recursive\n```\n\n----------------------------------------\n\nTITLE: Network Leave Command\nDESCRIPTION: Command to initiate leaving the current Zigbee network with options for rejoin notification.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/ncp.rst#2025-04-23_snippet_15\n\nLANGUAGE: text\nCODE:\n```\nCommand Parameters: None\nResponse Parameters:\n esp_ncp_status_t status : Status value indicating success or failure\nNotify Parameters:\n uint16_t short_addr : Short address of device\n uint8_t[8] device_addr : Long address of device\n uint16_t rejoin : 1 if leave with rejoin; 0 otherwise\n```\n\n----------------------------------------\n\nTITLE: ZCL Metering Command Structure\nDESCRIPTION: Specifies the data structure for metering commands including profile retrieval, fast poll mode requests, snapshot management, and sampled data access. Includes timestamps, intervals, and sampling parameters.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/ncp.rst#2025-04-23_snippet_20\n\nLANGUAGE: plaintext\nCODE:\n```\nuint8_t interval_channel        : Interval channel\nuint32_t end_time             : End time is a 32-bit value (in UTC)\nuint8_t number_of_periods     : Number of periods represents\nuint8_t fast_poll_update_period : Desired fast poll period (seconds)\nuint8_t duration              : Desired duration (minutes)\n```\n\n----------------------------------------\n\nTITLE: Sending On/Off Toggle Commands in Zigbee Network\nDESCRIPTION: Console output showing the coordinator sending 'on_off toggle' commands to bound devices when the BOOT button is pressed. Each button press triggers a toggle command to control the light state.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_HA_sample/HA_on_off_switch/README.md#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nI (11743) ESP_ZB_ON_OFF_SWITCH: Send 'on_off toggle' command\nI (12323) ESP_ZB_ON_OFF_SWITCH: Send 'on_off toggle' command\nI (13043) ESP_ZB_ON_OFF_SWITCH: Send 'on_off toggle' command\nI (13513) ESP_ZB_ON_OFF_SWITCH: Send 'on_off toggle' command\n```\n\n----------------------------------------\n\nTITLE: Cloning ESP-IDF Repository for Zigbee Development\nDESCRIPTION: Commands to clone the ESP-IDF repository, checkout the correct version, update submodules, and set up the development environment.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/developing.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --recursive https://github.com/espressif/esp-idf.git\ncd esp-idf\ngit checkout v5.3.2\ngit submodule update --init --recursive\n./install.sh\nsource ./export.sh\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Network Address Management Commands\nDESCRIPTION: Commands for retrieving device addresses including short address, long address, and current channel information.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/ncp.rst#2025-04-23_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nSHORT_ADDRESS_GET:\nCommand Parameters: None\nResponse Parameters:\n uint16_t short_addr : The Zigbee device short address\n\nLONG_ADDRESS_GET:\nCommand Parameters: None\nResponse Parameters:\n uint8_t[8] long_addr : The Zigbee device long address\n\nCHANNEL_GET:\nCommand Parameters: None\nResponse Parameters:\n uint8_t channel : The Zigbee device current channel\n```\n\n----------------------------------------\n\nTITLE: Creating Zigbee OTA Image using image_builder_tool\nDESCRIPTION: Command line usage example for creating an OTA upgrade image using Espressif's image builder tool with parameters for version, manufacturer ID, and image type.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_ota_upgrade.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/esp/esp-zigbee-sdk/examples/esp_zigbee_HA_sample/HA_on_off_light\n\nidf.py fullclean\n\nidf.py set-target [CHIP]\n\nidf.py build\n\npython ~/esp/esp-zigbee-sdk/tools/image_builder_tool/image_builder_tool.py --create build/on_off_light_bulb.bin --manuf-id 0x1001 --image-type 0x1011 --version 0x01010110 --tag-id 0x0000 --tag-file build/on_off_light_bulb.bin\n```\n\n----------------------------------------\n\nTITLE: ESP-Zigbee NCP Initialization and Network Formation Log\nDESCRIPTION: Console output showing the initialization process of the NCP device, including CPU startup, memory allocation, and network formation steps. The log demonstrates successful device startup and network establishment.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_ncp/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nI (215) cpu_start: Unicore app\nI (215) cpu_start: Pro cpu up.\nW (224) clk: esp_perip_clk_init() has not been implemented yet\nI (231) cpu_start: Pro cpu start user code\nI (231) cpu_start: cpu freq: 96000000 Hz\nI (232) cpu_start: Application information:\nI (234) cpu_start: Project name:     esp_zigbee_ncp\nI (239) cpu_start: App version:      bf601f7-dirty\nI (245) cpu_start: Compile time:     Jan  8 2024 14:19:02\nI (251) cpu_start: ELF file SHA256:  3289485a32051de4...\nI (257) cpu_start: ESP-IDF:          v5.1.2\nI (262) cpu_start: Min chip rev:     v0.0\nI (266) cpu_start: Max chip rev:     v0.99 \nI (271) cpu_start: Chip rev:         v0.2\nI (276) heap_init: Initializing. RAM available for dynamic allocation:\nI (283) heap_init: At 40815790 len 00037BF0 (222 KiB): D/IRAM\nI (290) heap_init: At 4084D380 len 00002B60 (10 KiB): STACK/DIRAM\nI (297) spi_flash: detected chip: generic\nI (301) spi_flash: flash io: dio\nW (305) spi_flash: Detected size(4096k) larger than the size in the binary image header(2048k). Using the size in the binary image header.\nI (318) sleep: Configure to isolate all GPIO pins in sleep state\nI (325) sleep: Enable automatic switching of GPIO sleep configuration\nI (332) app_start: Starting scheduler on CPU0\nI (337) main_task: Started on CPU0\nI (337) main_task: Calling app_main()\nI (347) uart: queue free spaces: 20\nI (347) main_task: Returned from app_main()\n```\n\n----------------------------------------\n\nTITLE: Network Formation Command Structure\nDESCRIPTION: Command structure for forming a new Zigbee network as coordinator. Includes role configuration, children settings, security policy, and keep-alive timeout parameters.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/ncp.rst#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nCommand Parameters:\n  uint8_t role : The role of device in zigbee network\n  uint8_t max_children or ed_timeout : Max number of children when coordinator or router\n  bool install_code_policy : Allow install code security policy or not\n  uint32_t keep_alive : Keep alive timeout in milliseconds when end device\n```\n\n----------------------------------------\n\nTITLE: RCP Version Verification Log Output\nDESCRIPTION: System log showing the RCP (Radio Co-Processor) version verification process and successful radio spinel workflow registration.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_gateway/README.md#2025-04-23_snippet_0\n\nLANGUAGE: log\nCODE:\n```\nI (550) RCP_UPDATE: RCP: using update sequence 0\nI (550) ESP_RADIO_SPINEL: spinel UART interface initialization completed\nI (550) ESP_RADIO_SPINEL: Spinel UART interface has been successfully enabled\nI (560) ZB_ESP_SPINEL: Spinel UART interface enable successfully\nI (570) main_task: Returned from app_main()\nI(570) OPENTHREAD:[I] P-RadioSpinel-: RCP reset: RESET_POWER_ON\nI(580) OPENTHREAD:[I] P-RadioSpinel-: Software reset RCP successfully\nI (610) ZB_ESP_SPINEL: Radio spinel workflow register successfully\nI (610) ESP_ZB_GATEWAY: Running RCP Version: openthread-esp32/ad3e1e3daf-41ef80717; esp32h2;  2024-02-04 06:16:56 UTC\nI (620) ESP_ZB_GATEWAY: Storage RCP Version: openthread-esp32/ad3e1e3daf-41ef80717; esp32h2;  2024-02-04 06:16:56 UTC\nI (630) ESP_ZB_GATEWAY: *** MATCH VERSION! ***\n```\n\n----------------------------------------\n\nTITLE: ZCL Custom Cluster Command Structure\nDESCRIPTION: Defines custom cluster command request (0xFFFD) and response (0xFFFE) structures with type, length and value parameters for custom data handling.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/ncp.rst#2025-04-23_snippet_21\n\nLANGUAGE: c\nCODE:\n```\nstruct zb_zcl_custom_cluster_cmd_req {\n    uint16_t type;    // The type of custom data\n    uint16_t length;  // The length of custom data\n    uint8_t[] value;  // The value of custom data\n};\n\nstruct zb_zcl_custom_cluster_cmd_resp {\n    uint16_t type;    // The type of custom data\n    uint16_t length;  // The length of custom data\n    uint8_t[] value;  // The value of custom data\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing OTA Upgrade Server Request\nDESCRIPTION: C code snippet showing how to initialize an OTA upgrade server notification request structure\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_ota_upgrade.rst#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nesp_zb_ota_upgrade_server_notify_req_t req = {\n    .endpoint = ESP_OTA_SERVER_ENDPOINT,\n    .index = 0,                                       // The index of OTA Server OTA image table\n\n```\n\n----------------------------------------\n\nTITLE: ESP-Zigbee NCP Network Formation and Device Join Log\nDESCRIPTION: Console output showing the network formation process and successful device joining. Includes frame processing, network initialization, and device commissioning details.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_ncp/README.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nI (187677) ESP_NCP_FRAME: 00 00 00 00 00 00 00 ff ff \nI (189617) ESP_NCP_FRAME: 00 00 05 00 05 04 00 00 20 00 00 d3 6e \nI (191197) ESP_NCP_FRAME: 00 00 09 00 09 07 00 00 00 14 00 00 00 00 fa 45 \nI (191207) phy: phy_version: 211,0, 5857fe5, Nov  1 2023, 11:31:09\nI (191207) phy: libbtbb version: ce629d6, Nov  1 2023, 11:31:19\nI (193627) ESP_NCP_FRAME: 00 00 1c 00 1c 15 00 25 20 00 00 00 00 00 00 0a \nI (193627) ESP_NCP_FRAME: 01 00 00 00 06 00 03 00 00 10 01 00 d0 46 \nI (193627) ESP_NCP_ZB: addr 2025, dst_endpoint a, src_endpoint 1, address_mode 0, profile_id 00, cluster_id 06, cmd_id 03, direction 00\nI (195487) ESP_NCP_FRAME: 00 00 0d 00 0d 01 00 00 73 1b \nI (195497) ESP_NCP_ZB: Zigbee stack initialized\nW (195507) ESP_NCP_ZB: Network(0x92b6) closed, devices joining not allowed.\nI (195507) ESP_NCP_ZB: Start network formation\nI (195507) ESP_NCP_ZB: Formed network successfully (Extended PAN ID: 60:55:f9:ff:fe:f7:39:f7, PAN ID: 0x92b6, Channel:25)\nI (196097) ESP_NCP_ZB: Network(0x92b6) is open for 180 seconds\nI (196097) ESP_NCP_ZB: Network steering started\n```\n\n----------------------------------------\n\nTITLE: APS Data Request Parameters\nDESCRIPTION: Specification for APS_DATA_REQUEST command parameters including destination addressing, endpoint configuration, and ASDU transfer options.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/ncp.rst#2025-04-23_snippet_30\n\nLANGUAGE: text\nCODE:\n```\n| Command Parameters:\n|                        | uint8_t[8] dst_address                : The IEEE address for the source                          |\n|                        | uint8_t dst_endpoint                  : The number of the individual endpoint                    |\n|                        | uint8_t src_endpoint                  : The individual endpoint of the entity                    |\n|                        | uint8_t dst_addr_mode                 : The destination address mode                             |\n|                        | uint16_t profile_id                   : The profile id                                           |\n|                        | uint16_t cluster_id                   : The cluster id                                           |\n|                        | uint8_t tx_options                    : The transmission options for the ASDU to be transferred  |\n|                        | bool use_alias                        : Use the UseAlias parameter to request                    |\n|                        | uint8_t[8] alias_src_addr             : The source address to be used, If the use_alias is true  |\n|                        | uint8_t alias_seq_num                 : The transmission options for the ASDU to be transferred  |\n|                        | uint8_t radius                        : The distance that a transmitted frame to travel          |\n|                        | uint32_t asdu_length                  : The number of octets comprising the ASDU being request   |\n|                        | uint8_t asdu[]                        : The set of octets comprising the ASDU to be transferred  |\n```\n\n----------------------------------------\n\nTITLE: Wi-Fi Connection Log Output\nDESCRIPTION: System log showing the Wi-Fi initialization and connection process, including driver initialization, network connection, and IP address acquisition.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_gateway/README.md#2025-04-23_snippet_1\n\nLANGUAGE: log\nCODE:\n```\nI (800) example_connect: Start example_connect.\nI (800) pp: pp rom version: e7ae62f\nI (810) net80211: net80211 rom version: e7ae62f\nI (820) wifi:wifi driver task: 3fcaca8c, prio:23, stack:6656, core=0\nI (820) wifi:wifi firmware version: 3865d68\nI (820) wifi:wifi certification version: v7.0\nI (820) wifi:config NVS flash: enabled\nI (830) wifi:config nano formating: disabled\nI (830) wifi:Init data frame dynamic rx buffer num: 32\nI (840) wifi:Init static rx mgmt buffer num: 5\nI (840) wifi:Init management short buffer num: 32\nI (850) wifi:Init dynamic tx buffer num: 32\nI (850) wifi:Init static tx FG buffer num: 2\nI (850) wifi:Init static rx buffer size: 1600\nI (860) wifi:Init static rx buffer num: 10\nI (860) wifi:Init dynamic rx buffer num: 32\nI (870) wifi_init: rx ba win: 6\nI (870) wifi_init: accept mbox: 6\nI (870) wifi_init: tcpip mbox: 32\nI (880) wifi_init: udp mbox: 6\nI (880) wifi_init: tcp mbox: 6\nI (880) wifi_init: tcp tx win: 5760\nI (890) wifi_init: tcp rx win: 5760\nI (890) wifi_init: tcp mss: 1440\nI (900) wifi_init: WiFi IRAM OP enabled\nI (900) wifi_init: WiFi RX IRAM OP enabled\n```\n\n----------------------------------------\n\nTITLE: ZDO_UNBIND_SET Command Structure\nDESCRIPTION: Specifies the structure and parameters for removing a binding between two endpoints on two ZigBee nodes. Includes command parameters, response parameters, and notification details.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/ncp.rst#2025-04-23_snippet_28\n\nLANGUAGE: markdown\nCODE:\n```\nCommand Parameters:\n- uint8_t[8] src_address: The IEEE address for the source\n- uint8_t src_endp: The source endpoint for the binding entry\n- uint16_t cluster_id: The identifier of the cluster on the source device\n- uint8_t dst_addr_mode: The destination address mode\n- uint8_t[8] addr_short_long: The destination address for the binding entry\n- uint8_t dst_endp: The destination endpoint for the binding entry\n- uint16_t req_dst_addr: Destination address of the request send to\n- uint32_t user_cb: A ZDO match desc request callback\n- uint32_t user_ctx: User information context\n```\n\n----------------------------------------\n\nTITLE: Network Management Commands Table\nDESCRIPTION: Table showing network management command codes (0x0015-0x002D) for operations like TX power, security keys, addressing, and network configuration.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/ncp.rst#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nNETWORK_TXPOWER_GET             0x0015    Get the tx power\nNETWORK_TXPOWER_SET             0x0016    Set the tx power\nNETWORK_PRIMARY_KEY_GET         0x0017    Get the primary security network key\nNETWORK_PRIMARY_KEY_SET         0x0018    Set the primary security network key\nNETWORK_FRAME_COUNT_GET         0x0019    Get the network frame counter\nNETWORK_FRAME_COUNT_SET         0x001A    Set the network frame counter\nNETWORK_ROLE_GET                0x001B    Get the network role 0: Coordinator, 1: Router\nNETWORK_ROLE_SET                0x001C    Set the network role 0: Coordinator, 1: Router\n```\n\n----------------------------------------\n\nTITLE: Zigbee Network Formation and Device Join Log\nDESCRIPTION: Log output showing successful network formation, configuration and device joining process with status updates and network parameters.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_host/README.md#2025-04-23_snippet_1\n\nLANGUAGE: log\nCODE:\n```\nI (311) ESP_ZNSP_FRAME: 10 00 00 00 d0 01 00 00 23 06 \nI (321) ESP_ZB_ON_OFF_SWITCH: Zigbee stack initialized\nI (351) ESP_ZNSP_FRAME: 10 00 04 00 71 01 00 00 09 a8 \nI (371) ESP_ZNSP_FRAME: 10 00 00 01 c0 01 00 00 c6 ce \nI (381) ESP_ZNSP_FRAME: 10 00 10 00 7a 01 00 00 00 3a \nI (401) ESP_ZNSP_FRAME: 10 00 01 00 39 01 00 00 e1 4f \nI (411) ESP_ZNSP_FRAME: 20 00 05 00 73 01 00 00 dc 78 \nI (421) ESP_ZNSP_FRAME: 10 00 0b 00 ab 02 00 04 25 78 f3 \nW (411) ESP_ZB_ON_OFF_SWITCH: Network(0x2504) closed, devices joining not allowed.\nI (431) ESP_ZNSP_FRAME: 20 00 04 00 78 0b 00 21 2e c0 fe ff b7 31 48 04 \nI (431) ESP_ZNSP_FRAME: 25 0d ed 9c \nI (441) ESP_ZNSP_FRAME: 10 00 0d 00 3b 08 00 21 2e c0 fe ff b7 31 48 b6 \nI (441) ESP_ZNSP_FRAME: 52 \nI (451) ESP_ZNSP_FRAME: 10 00 0b 00 3c 02 00 04 25 b1 fd \nI (461) ESP_ZNSP_FRAME: 10 00 13 00 be 01 00 0d ad a4 \nI (471) ESP_ZNSP_FRAME: 10 00 1d 00 7d 02 00 00 00 1c cb \nI (451) ESP_ZB_ON_OFF_SWITCH: Formed network successfully (Extended PAN ID: 48:31:b7:ff:fe:c0:2e:21, PAN ID: 0x2504, Channel:13, Short Address: 0x0000)\nI (1001) ESP_ZNSP_FRAME: 20 00 05 00 be 01 00 b4 25 3b \nI (1011) ESP_ZNSP_FRAME: 10 00 0b 00 ac 02 00 04 25 a4 c3 \nI (1001) ESP_ZB_ON_OFF_SWITCH: Network(0x2504) is open for 180 seconds\n```\n\n----------------------------------------\n\nTITLE: ZigBee Protocol Message Examples\nDESCRIPTION: Examples of ZigBee protocol message formats for command, response, and notification transactions. Shows the hexadecimal byte representation of actual protocol messages in the communication flow.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/ncp.rst#2025-04-23_snippet_34\n\nLANGUAGE: markup\nCODE:\n```\n    * Command:  c0 00 00 09 00 09 07 00 00 00 14 00 00 00 00 FA 45 c0\n    * Response: c0 10 00 09 00 09 01 00 00 99 00 c0\n    * Notify:   c0 20 00 09 00 1a 0b 00 f7 39 f7 fe ff f9 55 60 4b fc 0d 20 00 c0\n```\n\n----------------------------------------\n\nTITLE: Touchlink Commissioning Restart Log\nDESCRIPTION: Log showing the restart of Touchlink commissioning process after button press.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_touchlink/touchlink_switch/README.md#2025-04-23_snippet_2\n\nLANGUAGE: log\nCODE:\n```\nW (1837) ESP_TL_ON_OFF_SWITCH: Press the button to start Touchlink commissioning again\nI (13427) ESP_TL_ON_OFF_SWITCH: Scanning as a Touchlink initiator...\n```\n\n----------------------------------------\n\nTITLE: ZigBee ASDU Parameter Structure Definition\nDESCRIPTION: Defines the parameter structure for ASDU (Application Service Data Unit) operations, including fields for addressing, data length, and message content. The structure includes destination address modes, endpoint identifiers, and transmission metadata.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/ncp.rst#2025-04-23_snippet_33\n\nLANGUAGE: markup\nCODE:\n```\n|                        | uint32_t asdu_length                : The number of octets comprising the ASDU being confirmed   |\n|                        | uint8_t asdu[]                      : The set of octets comprising the ASDU to be confirm        |\n+------------------------+--------------------------------------------------------------------------------------------------+\n| Notify Parameters:                                                                                                        |\n|                        | uint8_t states;                     : The states of the device                                   |\n|                        | uint8_t dst_addr_mode               : The dest addr mode used in this primitive and of the APDU  |\n|                        | uint8_t[8] dst_address              : The IEEE address for the dest                              |\n|                        | uint8_t dst_endpoint                : The individual endpoint of the dest                        |\n|                        | uint8_t src_endpoint                : The individual endpoint of the source                      |\n|                        | uint32_t tx_time                    : The time confirm for the transferred packet                |\n|                        | uint8_t  confirm_status             : The status of data confirm                                 |\n|                        | uint32_t asdu_length                : The number of octets comprising the ASDU being confirmed   |\n|                        | uint8_t asdu[]                      : The set of octets comprising the ASDU to be confirm        |\n+------------------------+--------------------------------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Showing ESP ZNSP Frame Payload Structure\nDESCRIPTION: Depicts the structure of the Frame Payload, which consists of variable-length Data Parameters.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/ncp.rst#2025-04-23_snippet_3\n\nLANGUAGE: none\nCODE:\n```\n-------------------\n| Data Parameters |\n-------------------\n  variable bytes    \n```\n\n----------------------------------------\n\nTITLE: Initializing Zigbee Network Formation Log\nDESCRIPTION: Log output showing the initialization of Zigbee stack and network formation process, including PAN ID assignment and network opening for device joining.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_greenpower/esp_zigbee_gpc/README.md#2025-04-23_snippet_0\n\nLANGUAGE: log\nCODE:\n```\nI (459) main_task: Calling app_main()\nW (469) rmt: channel resolution loss, real=10666666\nI (469) gpio: GPIO[8]| InputEn: 0| OutputEn: 1| OpenDrain: 0| Pullup: 1| Pulldown: 0| Intr:0 \nI (479) gpio: GPIO[9]| InputEn: 1| OutputEn: 0| OpenDrain: 0| Pullup: 1| Pulldown: 0| Intr:2 \nI (499) phy: phy_version: 220,2, 37a29de, Dec 29 2023, 16:30:13\nI (499) phy: libbtbb version: 944f18e, Dec 29 2023, 16:30:30\nI (499) main_task: Returned from app_main()\nI (579) ESP_ZGP_COMBO: ZDO signal: ZDO Config Ready (0x17), status: ESP_FAIL\nI (579) ESP_ZGP_COMBO: Zigbee stack initialized\nI (589) ESP_ZGP_COMBO: Start network formation\nW (749) ESP_ZGP_COMBO: Network(0x6bd2) closed, devices joining not allowed.\nI (749) ESP_ZGP_COMBO: Formed network successfully (Extended PAN ID: 60:55:f9:ff:fe:f7:2e:16, PAN ID: 0x6bd2, Channel:24, Short Address: 0x0000)\nI (1359) ESP_ZGP_COMBO: Network(0x6bd2) is open for 180 seconds\nI (1359) ESP_ZGP_COMBO: Network steering started\n```\n\n----------------------------------------\n\nTITLE: ZCL Endpoint Configuration Command\nDESCRIPTION: Command structure for configuring endpoint information on the NCP. Includes parameters for endpoint ID, profile ID, device ID, and cluster configurations.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/ncp.rst#2025-04-23_snippet_22\n\nLANGUAGE: c\nCODE:\n```\nstruct zcl_endpoint_add {\n    uint8_t endpoint;           // The application endpoint to be added\n    uint16_t profileId;         // The endpoint's application profile\n    uint16_t deviceId;          // The endpoint's device ID within the application profile\n    uint8_t appFlags;           // The version and flags indicate description availability\n    uint8_t inputClusterCount;  // The number of cluster IDs in inputClusterList\n    uint8_t outputClusterCount; // The number of cluster IDs in outputClusterList\n    uint16_t[] inputClusterList;  // Input cluster IDs the endpoint will accept\n    uint16_t[] outputClusterList; // Output cluster IDs the endpoint may send\n};\n```\n\n----------------------------------------\n\nTITLE: Device Binding Log\nDESCRIPTION: Log showing successful binding with an On/Off Light device on the network.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_touchlink/touchlink_switch/README.md#2025-04-23_snippet_4\n\nLANGUAGE: log\nCODE:\n```\nI (17397) ESP_TL_ON_OFF_SWITCH: Found light\nI (17397) ESP_TL_ON_OFF_SWITCH: Try to bind on/off light\nI (17407) ESP_TL_ON_OFF_SWITCH: Bound successfully!\n```\n\n----------------------------------------\n\nTITLE: Network TX Power Setting Command Structure\nDESCRIPTION: Command structure for setting transmission power in the Zigbee network. Takes an 8-bit power value in dB and returns a status response.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/ncp.rst#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nCommand Parameters:\n  uint8_t power : 8-bit of power value in dB\n\nResponse Parameters:\n  esp_ncp_status_t status: Status value indicating success or failure\n```\n\n----------------------------------------\n\nTITLE: HA Device Types Table Definition in RST\nDESCRIPTION: ReStructuredText table defining Zigbee Home Automation device types with their device IDs and default clusters.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/introduction.rst#2025-04-23_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. table:: **Zigbee Home Automation**\n   :align: center\n\n   =========== ======================= ======================================================================= \n    Device ID       Device Name                                   Default Clusters                             \n   =========== ======================= ======================================================================= \n     0x0002         on_off_light                       basic, identify, groups, scenes, on_off\n```\n\n----------------------------------------\n\nTITLE: Network Formation Log Output for Zigbee Coordinator\nDESCRIPTION: Log output showing the initialization of the Zigbee stack and successful network formation by the coordinator with an open network for 180 seconds.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_HA_sample/HA_color_dimmable_switch/README.md#2025-04-23_snippet_0\n\nLANGUAGE: log\nCODE:\n```\nI (390) main_task: Calling app_main()\nI (400) gpio: GPIO[9]| InputEn: 1| OutputEn: 0| OpenDrain: 0| Pullup: 1| Pulldown: 0| Intr:2 \nI (400) phy_init: phy_version 220,2dbbbe7,Sep 25 2023,20:39:25\nI (470) phy: libbtbb version: 90c587c, Sep 25 2023, 20:39:57\nI (480) ESP_ZB_COLOR_DIMM_SWITCH: ZDO signal: ZDO Config Ready (0x17), status: ESP_FAIL\nI (480) ESP_ZB_COLOR_DIMM_SWITCH: Zigbee stack initialized\nI (480) ESP_ZB_COLOR_DIMM_SWITCH: Start network formation\nI (490) main_task: Returned from app_main()\nI (1000) ESP_ZB_COLOR_DIMM_SWITCH: ZDO signal: NWK Permit Join (0x36), status: ESP_OK\nI (1000) ESP_ZB_COLOR_DIMM_SWITCH: Formed network successfully (Extended PAN ID: 60:55:f9:00:00:f6:07:b4, PAN ID: 0x17ef, Channel:13)\nI (1480) ESP_ZB_COLOR_DIMM_SWITCH: ZDO signal: NWK Permit Join (0x36), status: ESP_OK\nI (1480) ESP_ZB_COLOR_DIMM_SWITCH: Network steering started\n```\n\n----------------------------------------\n\nTITLE: Explaining ESP ZNSP Frame Flags Structure\nDESCRIPTION: Illustrates the bit allocation within the Flags field, including Version, Frame Type, and Reserved bits.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/ncp.rst#2025-04-23_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n-----------------------------------\n| Version | Frame Type | Reserved |\n-----------------------------------\n  0~3 bits  4~7 bits     8~15 bits\n```\n\n----------------------------------------\n\nTITLE: Successful Touchlink Pairing Log\nDESCRIPTION: Log output when a Touchlink target is found and successfully paired, including network information.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_touchlink/touchlink_switch/README.md#2025-04-23_snippet_3\n\nLANGUAGE: log\nCODE:\n```\nI (17077) ESP_TL_ON_OFF_SWITCH: Touchlink initiator receives the response for started network\nI (17077) ESP_TL_ON_OFF_SWITCH: Response is from profile: 0x0104, endpoint: 10, address: 0x744dbdfffe637873\nI (17357) ESP_TL_ON_OFF_SWITCH: Touchlink commissioning as initiator done\nI (17357) ESP_TL_ON_OFF_SWITCH: Commissioning successfully, network information (Extended PAN ID: 74:4d:bd:ff:fe:63:78:73, PAN ID: 0x231d, Channel:11, Short Address: 0x6bd8)\n```\n\n----------------------------------------\n\nTITLE: Network Join Command\nDESCRIPTION: Command for associating with a Zigbee network using specified parameters including device role, security policy, and timing configurations.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/ncp.rst#2025-04-23_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nCommand Parameters:\n uint8_t role : The role of device in zigbee network\n bool install_code_policy : Allow install code security policy or not\n uint8_t max_children or ed_timeout : Max number of children or timeout\n uint32_t keep_alive : Keep alive timeout in milliseconds when end device\n```\n\n----------------------------------------\n\nTITLE: Copying and Building OTA Server Image\nDESCRIPTION: Commands for copying the generated OTA image to the server directory and building the OTA upgrade server application\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_ota_upgrade.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp -f build/on_off_light_bulb.bin ~/esp/esp-zigbee-sdk/examples/esp_zigbee_ota/ota_server/main/ota_file.bin\n\ncd ~/esp/esp-zigbee-sdk/examples/esp_zigbee_ota/ota_server\n\nidf.py fullclean\n\nidf.py set-target [CHIP]\n\nidf.py build\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for ESP-ZigBee SDK HA Customized Light Project\nDESCRIPTION: This CMake configuration sets up the project for a customized HA light implementation using the ESP-ZigBee SDK. It specifies the minimum CMake version, adds extra component directories, includes the ESP-IDF project CMake file, and sets the project name.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_customized_devices/customized_server/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# The following lines of boilerplate have to be in your project's CMakeLists\n# in this exact order for cmake to work correctly\ncmake_minimum_required(VERSION 3.16)\nset(EXTRA_COMPONENT_DIRS\n    ${CMAKE_CURRENT_SOURCE_DIR}/../../common/light_driver\n    )\ninclude($ENV{IDF_PATH}/tools/cmake/project.cmake)\nproject(esp_HA_customized_light)\n```\n\n----------------------------------------\n\nTITLE: Illustrating ESP ZNSP Frame Format\nDESCRIPTION: Demonstrates the overall structure of an ESP ZNSP frame, including the Frame Header, Frame Payload, and FCS (Frame Check Sequence).\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/ncp.rst#2025-04-23_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n-------------------------------------\n| Frame Header | Frame Payload | FCS |\n-------------------------------------\n  7 bytes        variable byte   2 bytes\n```\n\n----------------------------------------\n\nTITLE: Commissioning Prompt Log - ESP32 Zigbee Green Power Device\nDESCRIPTION: Log message indicating the device is waiting for button press to start commissioning process.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_greenpower/esp_zigbee_gpd/README.md#2025-04-23_snippet_1\n\nLANGUAGE: log\nCODE:\n```\nI (372) ESP_ZGP_DEVICE:  Wait to press the button to start commissioning ...\n```\n\n----------------------------------------\n\nTITLE: Example of Assertion Failure Log Output\nDESCRIPTION: This snippet demonstrates the log output format when an assertion failure occurs in the Zigbee SDK. It includes register dump and stack memory information, which is useful for debugging.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/developing.rst#2025-04-23_snippet_7\n\nLANGUAGE: c\nCODE:\n```\n^[[0;32mI (579) ESP_ZB_ON_OFF_LIGHT: Start network steering^[[0m\n^[[0;32mI (2959) ESP_ZB_ON_OFF_LIGHT: Network steering was not successful (status: ESP_FAIL)^[[0m\n\nassert failed: esp_zb_app_signal_handler esp_zb_light.c:70 (false)\nCore  0 register dump:\nMEPC    : 0x4080063e  RA      : 0x408074c6  SP      : 0x4084f090  GP      : 0x4080d5a0\nTP      : 0x4083e428  T0      : 0x37363534  T1      : 0x7271706f  T2      : 0x33323130\nS0/FP   : 0x00000085  S1      : 0x00000001  A0      : 0x4084f0cc  A1      : 0x4080da59\nA2      : 0x00000001  A3      : 0x00000029  A4      : 0x00000001  A5      : 0x40817000\nA6      : 0x00000004  A7      : 0x76757473  S2      : 0x00000009  S3      : 0x4084f1e2\nS4      : 0x4080da58  S5      : 0x00000000  S6      : 0x00000000  S7      : 0x00000000\nS8      : 0x00000000  S9      : 0x00000000  S10     : 0x00000000  S11     : 0x00000000\nT3      : 0x6e6d6c6b  T4      : 0x6a696867  T5      : 0x66656463  T6      : 0x62613938\nMSTATUS : 0x00001881  MTVEC   : 0x40800001  MCAUSE  : 0x00000007  MTVAL   : 0x00000000\nMHARTID : 0x00000000\n\nStack memory:\n4084f090: 0x40809aa6 0x40809ad2 0x42073910 0x4080bdea 0x4080dd04 0x42073910 0x4080dce8 0x4207382c\n4084f0b0: 0x4080dd14 0x4084f0c4 0x4080dd18 0x4207381c 0x4080da58 0x00003037 0x4084f520 0x65737361\n4084f0d0: 0x66207472 0x656c6961 0x65203a64 0x7a5f7073 0x70615f62 0x69735f70 0x6c616e67 0x6e61685f\n4084f0f0: 0x72656c64 0x70736520 0x5f627a5f 0x6867696c 0x3a632e74 0x28203037 0x736c6166 0x42002965\n4084f110: 0x00000000 0xffffffff 0x4080f198 0x4084f368 0x00000008 0x4084f158 0x00000003 0x42004ce4\n4084f130: 0x00000000 0x00000000 0x00000000 0x0000004b 0x4080f759 0x00000000 0x00000339 0x4204ba5e\n4084f150: 0x420737d0 0x420734b4 0x00000042 0x4204be28 0x40850000 0x4084f1e8 0x4080f759 0x4201f83a\n4084f170: 0x00000019 0x00000000 0x00000042 0x4201ebb6 0x00000000 0x00000000 0x0000004d 0x000000c0\n4084f190: 0x00000019 0x00000000 0x00000000 0x42000000 0x4084fd94 0x40850000 0x0000004d 0x000000c0\n4084f1b0: 0x00000019 0xffffffff 0x00000b8f 0x4200756e 0x00000000 0x00001800 0x40817944 0x40800a9c\n4084f1d0: 0x00000008 0x4084f208 0x00000003 0x000000c0 0x00001800 0x00000008 0x00000019 0x40800b1c\n4084f1f0: 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x0000004d 0x000000c0\n4084f210: 0x00000019 0xffffffff 0x4084fd94 0x4200cc44 0x00000000 0x00000000 0x000000aa 0x408107d8\n4084f230: 0x00000000 0x00000000 0x00000019 0x4203bc0c 0x00000001 0x00000001 0x00000001 0x4201f05a\n4084f250: 0x00000000 0x4203bbb2 0x00190000 0x404f4d19 0x00000000 0x00000000 0x00000000 0x00000000\n4084f270: 0x00000000 0x00000000 0x00000000 0x4203b852 0x00000000 0x00000000 0x4084fd74 0x4200ca7e\n4084f290: 0x00000000 0x00000000 0x00000000 0x42007178 0x00000008 0x00000000 0x00000000 0x00000000\n4084f2b0: 0x00000002 0x00000000 0x00000006 0x00000bb8 0x00000000 0x00000000 0x00000000 0x4080995a\n4084f2d0: 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000\n4084f2f0: 0x00000000 0xa5a5a5a5 0xa5a5a5a5 0xa5a5a5a5 0xa5a5a5a5 0xa5a5a5a5 0x00000154 0x4084f0e0\n4084f310: 0x000000f4 0x4080e534 0x4080e534 0x4084f30c 0x4080e52c 0x00000014 0x4084fe34 0x4084fe34\n4084f330: 0x4084f30c 0x00000000 0x00000005 0x4084e308 0x6267695a 0x6d5f6565 0x006e6961 0x00000000\n4084f350: 0x00000000 0x4084f300 0x00000005 0x00000001 0x00000000 0x00000000 0x00000009 0x40817bf4\n4084f370: 0x40817c5c 0x40817cc4 0x00000000 0x00000000 0x00000001 0x00000000 0x00000000 0x00000000\n4084f390: 0x4205ef9e 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000\n4084f3b0: 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000\n4084f3d0: 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000\n4084f3f0: 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000\n4084f410: 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000\n4084f430: 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000\n4084f450: 0x00000000 0x00000000 0x00000000 0x40000000 0x00000054 0x00000000 0x4084f464 0x4084f30c\n4084f470: 0x00000001 0x00000000 0x4084f47c 0xffffffff 0x4084f47c 0x4084f47c 0x00000000 0x4084f490\n```\n\n----------------------------------------\n\nTITLE: Registering ESP-Zigbee Component with Source and Include Directories\nDESCRIPTION: Registers component source files and include directories using ESP-IDF's component registration macro. Includes both local files and common ZCL utility files from relative paths.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_sleep/deep_sleep/main/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nidf_component_register(\n    SRC_DIRS  \".\" \"../../../common/zcl_utility/src\"\n    INCLUDE_DIRS \".\" \"../../../common/zcl_utility/include\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for ESP-ZigBee Color Switch Project\nDESCRIPTION: Sets up the CMake configuration for the color_switch project in ESP-ZigBee SDK. It specifies the minimum CMake version required (3.16), includes the switch_driver component from the common directory, and initializes the ESP-IDF build system.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_HA_sample/HA_color_dimmable_switch/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# The following lines of boilerplate have to be in your project's CMakeLists\n# in this exact order for cmake to work correctly\ncmake_minimum_required(VERSION 3.16)\nset(EXTRA_COMPONENT_DIRS\n    ${CMAKE_CURRENT_SOURCE_DIR}/../../common/switch_driver\n    )\ninclude($ENV{IDF_PATH}/tools/cmake/project.cmake)\nproject(color_switch)\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP-Zigbee SDK Component in CMake\nDESCRIPTION: This CMake script sets up the ESP-Zigbee SDK component, including source and include directories, and configures prebuilt libraries based on the Zigbee device type (ZCZR, ZED, or ZGPD) and debug mode. It also handles special configurations for UART-based Spinel radio.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/components/esp-zigbee-lib/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16)\n\nif (CONFIG_ZB_ENABLED)\n    set(src_dirs \"\")\n    set(include_dirs include)\nendif()\n\nif(CONFIG_ZB_RADIO_SPINEL_UART)\n    list(APPEND src_dirs src/radio_spinel)\n    list(APPEND include_dirs include/radio_spinel)\nendif()\n\nidf_component_register(SRC_DIRS \"${src_dirs}\"\n                       INCLUDE_DIRS \"${include_dirs}\"\n                       REQUIRES driver vfs ieee802154 openthread espressif__esp-zboss-lib\n)\n\nif(CONFIG_ZB_ENABLED)\n\n    set(ESP_ZIGBEE_API_LIBS \"\")\n    set(zboss_port_type \".native\")\n    set(zboss_port_mode \"\")\n\n    if(CONFIG_ZB_ZCZR)\n        if(CONFIG_ZB_DEBUG_MODE)\n            add_prebuilt_library(esp_zigbee_api_lib \"${CMAKE_CURRENT_SOURCE_DIR}/lib/${idf_target}/libesp_zb_api.zczr.debug.a\" REQUIRES espressif__esp-zboss-lib)\n        else()\n            add_prebuilt_library(esp_zigbee_api_lib \"${CMAKE_CURRENT_SOURCE_DIR}/lib/${idf_target}/libesp_zb_api.zczr.a\" REQUIRES espressif__esp-zboss-lib)\n        endif()\n    elseif(CONFIG_ZB_ZED)\n        if(CONFIG_ZB_DEBUG_MODE)\n            add_prebuilt_library(esp_zigbee_api_lib \"${CMAKE_CURRENT_SOURCE_DIR}/lib/${idf_target}/libesp_zb_api.ed.debug.a\" REQUIRES espressif__esp-zboss-lib)\n        else()\n            add_prebuilt_library(esp_zigbee_api_lib \"${CMAKE_CURRENT_SOURCE_DIR}/lib/${idf_target}/libesp_zb_api.ed.a\" REQUIRES espressif__esp-zboss-lib)\n        endif()\n    elseif(CONFIG_ZB_ZGPD)\n        add_prebuilt_library(esp_zigbee_api_lib \"${CMAKE_CURRENT_SOURCE_DIR}/lib/${idf_target}/libesp_zb_api.gpd.a\" REQUIRES espressif__esp-zboss-lib)\n    endif()\n\n    if (CONFIG_ZB_RADIO_SPINEL_UART)\n        set(zboss_port_type \".remote\")\n    endif()\n    if(CONFIG_ZB_DEBUG_MODE)\n        set(zboss_port_mode \".debug\")\n    endif()\n\n    add_prebuilt_library(zboss_port_lib \"${CMAKE_CURRENT_SOURCE_DIR}/lib/${idf_target}/libzboss_port${zboss_port_type}${zboss_port_mode}.a\"\n                         PRIV_REQUIRES ieee802154 efuse esp_system esp_hw_support\n                         REQUIRES driver)\n\n    list(APPEND ESP_ZIGBEE_API_LIBS esp_zigbee_api_lib zboss_port_lib)\n\n    target_link_libraries(${COMPONENT_LIB} INTERFACE ${ESP_ZIGBEE_API_LIBS})\n    target_compile_options(${COMPONENT_LIB} INTERFACE $<$<COMPILE_LANGUAGE:C>:-Wno-strict-prototypes>)\n\n    if (CONFIG_ZB_RADIO_SPINEL_UART)\n        idf_component_get_property(openthread_lib openthread COMPONENT_LIB)\n        idf_component_get_property(zigbee_lib espressif__esp-zigbee-lib COMPONENT_LIB)\n        target_link_libraries(${COMPONENT_LIB} INTERFACE zboss_port_lib $<TARGET_FILE:${zigbee_lib}> $<TARGET_FILE:${openthread_lib}> zboss_port_lib)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Delta OTA Patch Generation Command\nDESCRIPTION: Command to generate a patch file for Delta OTA updates using the provided Python tool.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_ota/ota_client/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython esp_delta_ota_patch_gen.py --chip <target> --base_binary <base_binary> --new_binary <new_binary> --patch_file_name <patch_file_name>\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Green Power Device Project with ESP-ZigBee SDK\nDESCRIPTION: This CMake configuration sets up the build environment for a Green Power Device project. It specifies the minimum CMake version, adds extra component directories, includes the ESP-IDF project cmake file, and sets the project name.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_greenpower/esp_zigbee_gpd/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# The following lines of boilerplate have to be in your project's CMakeLists\n# in this exact order for cmake to work correctly\ncmake_minimum_required(VERSION 3.16)\nset(EXTRA_COMPONENT_DIRS\n    ${CMAKE_CURRENT_SOURCE_DIR}/../../common/switch_driver\n)\ninclude($ENV{IDF_PATH}/tools/cmake/project.cmake)\nproject(green power device)\n```\n\n----------------------------------------\n\nTITLE: Registering ESP-IDF Component for HA Custom Light\nDESCRIPTION: Registers an ESP-IDF component with the source file esp_HA_customized_light.c and sets up include directories. Used in the ESP-Zigbee-SDK build system to integrate a custom Home Automation light implementation.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_customized_devices/customized_server/main/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nidf_component_register(\n    SRCS\n    \"esp_HA_customized_light.c\"\n    INCLUDE_DIRS \".\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for ESP-ZigBee Temperature Sensor Project\nDESCRIPTION: This CMake configuration sets up the build environment for a temperature sensor project using ESP-ZigBee SDK. It specifies the minimum CMake version requirement, adds paths to common component directories for temperature and switch drivers, includes the ESP-IDF project configuration, and names the project.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_HA_sample/HA_temperature_sensor/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# The following lines of boilerplate have to be in your project's CMakeLists\n# in this exact order for cmake to work correctly\ncmake_minimum_required(VERSION 3.16)\nset(EXTRA_COMPONENT_DIRS\n    ${CMAKE_CURRENT_SOURCE_DIR}/../../common/temp_sensor_driver\n    ${CMAKE_CURRENT_SOURCE_DIR}/../../common/switch_driver\n    )\ninclude($ENV{IDF_PATH}/tools/cmake/project.cmake)\nproject(temperature_sensor)\n```\n\n----------------------------------------\n\nTITLE: Configuring RCP Image Generation\nDESCRIPTION: Sets up automated RCP image generation when CONFIG_ZIGBEE_GW_AUTO_UPDATE_RCP is enabled. Creates a custom target that generates RCP images using a Python script and configures SPIFFS partition image creation.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_gateway/main/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nidf_build_get_property(python PYTHON)\nif(CONFIG_ZIGBEE_GW_AUTO_UPDATE_RCP)\n    add_custom_target(rcp_image_generation ALL\n    COMMAND ${python} ${CMAKE_CURRENT_SOURCE_DIR}/../create_ota_image.py\n    --rcp-build-dir ${IDF_PATH}/examples/openthread/ot_rcp/build\n    --target-file ${CMAKE_CURRENT_BINARY_DIR}/spiffs_image/ot_rcp_0/rcp_image\n    )\n    spiffs_create_partition_image(rcp_fw ${CMAKE_CURRENT_BINARY_DIR}/spiffs_image FLASH_IN_PROJECT\n                              DEPENDS rcp_image_generation)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Delta OTA Package Installation Command\nDESCRIPTION: Command to install required packages for Delta OTA functionality using pip.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_ota/ota_client/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -r managed_components/espressif__esp_delta_ota/examples/https_delta_ota/tools/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Registering ESP-ZigBee SDK Component with CMake\nDESCRIPTION: This snippet uses the idf_component_register function to register a component for the ESP-ZigBee SDK. It specifies 'esp_touchlink_switch.c' as the source file and includes the current directory for header files.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_touchlink/touchlink_switch/main/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nidf_component_register(\n    SRCS\n    \"esp_touchlink_switch.c\"\n    INCLUDE_DIRS \".\"\n)\n```\n\n----------------------------------------\n\nTITLE: Registering ESP-Zigbee Thermostat Component with ESP-IDF Build System\nDESCRIPTION: This CMake snippet registers the ESP-Zigbee thermostat component with the ESP-IDF build system. It specifies the source file 'esp_zb_thermostat.c' and sets the include directory to the current directory.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_HA_sample/HA_thermostat/main/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nidf_component_register(\n    SRCS\n    \"esp_zb_thermostat.c\"\n    INCLUDE_DIRS \".\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for ESP-ZigBee SDK Sleepy End Device Project\nDESCRIPTION: This CMake configuration sets up the build environment for a sleepy end device project in the ESP-ZigBee SDK. It specifies the minimum CMake version, adds extra component directories, and includes the ESP-IDF project configuration. The project is named 'sleepy_end_device'.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_sleep/light_sleep/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# The following lines of boilerplate have to be in your project's CMakeLists\n# in this exact order for cmake to work correctly\ncmake_minimum_required(VERSION 3.16)\nset(EXTRA_COMPONENT_DIRS\n    ${CMAKE_CURRENT_SOURCE_DIR}/../../common/switch_driver\n    )\ninclude($ENV{IDF_PATH}/tools/cmake/project.cmake)\nproject(sleepy_end_device)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for ESP-ZigBee SDK Project\nDESCRIPTION: Sets up the CMake configuration for an ESP-ZigBee SDK project. It requires CMake version 3.16 or higher, includes the ESP-IDF project configuration file, and names the project as esp_zigbee_all_device_types_app.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_all_device_types_app/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# The following lines of boilerplate have to be in your project's CMakeLists\n# in this exact order for cmake to work correctly\ncmake_minimum_required(VERSION 3.16)\n\ninclude($ENV{IDF_PATH}/tools/cmake/project.cmake)\nproject(esp_zigbee_all_device_types_app)\n```\n\n----------------------------------------\n\nTITLE: Detailing ESP ZNSP Frame Header Structure\nDESCRIPTION: Shows the breakdown of the Frame Header, which includes Flags, Identifier, Sequence Number, and Length fields.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/ncp.rst#2025-04-23_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n-------------------------------------------------\n| Flags | Identifier | Sequence Number | Length |\n-------------------------------------------------\n  2 byte  2 byte       1 bytes           2 byte\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for ESP-ZigBee SDK Sleepy End Device Project\nDESCRIPTION: This CMake snippet sets up the project configuration for an ESP-ZigBee SDK sleepy end device. It specifies the minimum CMake version, includes the ESP-IDF project configuration, and sets the project name. These steps are essential for properly configuring the build environment for ESP32-based ZigBee projects.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_sleep/deep_sleep/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# The following lines of boilerplate have to be in your project's CMakeLists\n# in this exact order for cmake to work correctly\ncmake_minimum_required(VERSION 3.16)\ninclude($ENV{IDF_PATH}/tools/cmake/project.cmake)\nproject(sleepy_end_device)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for ESP-ZigBee Green Power Combo\nDESCRIPTION: Sets up CMake configuration for ESP-ZigBee project including minimum version requirement, additional component directories for light and switch drivers, and project initialization.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_greenpower/esp_zigbee_gpc/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# The following lines of boilerplate have to be in your project's CMakeLists\n# in this exact order for cmake to work correctly\ncmake_minimum_required(VERSION 3.16)\nset(EXTRA_COMPONENT_DIRS\n    ${CMAKE_CURRENT_SOURCE_DIR}/../../common/light_driver\n    ${CMAKE_CURRENT_SOURCE_DIR}/../../common/switch_driver\n)\ninclude($ENV{IDF_PATH}/tools/cmake/project.cmake)\nproject(green power combo)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for ESP-ZigBee SDK Thermostat Project\nDESCRIPTION: This CMake configuration sets up the build environment for a thermostat project using the ESP-ZigBee SDK. It specifies the minimum CMake version, adds extra component directories, and includes the ESP-IDF project configuration.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_HA_sample/HA_thermostat/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# The following lines of boilerplate have to be in your project's CMakeLists\n# in this exact order for cmake to work correctly\ncmake_minimum_required(VERSION 3.16)\nset(EXTRA_COMPONENT_DIRS\n    ${CMAKE_CURRENT_SOURCE_DIR}/../../common/switch_driver\n    )\ninclude($ENV{IDF_PATH}/tools/cmake/project.cmake)\nproject(thermostat)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for ESP-Zigbee Gateway Project\nDESCRIPTION: This CMake snippet sets up the build configuration for the ESP-Zigbee Gateway project. It specifies the minimum CMake version, adds extra component directories, includes the ESP-IDF project CMake file, and defines the project name.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_gateway/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16)\nset(EXTRA_COMPONENT_DIRS\n    $ENV{IDF_PATH}/examples/common_components/protocol_examples_common\n    )\ninclude($ENV{IDF_PATH}/tools/cmake/project.cmake)\nproject(esp_zigbee_gateway)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for ESP-ZigBee SDK On/Off Light Bulb Project\nDESCRIPTION: This CMake configuration sets up the project environment for an on/off light bulb using the ESP-ZigBee SDK. It specifies the minimum CMake version, adds extra component directories for the light driver, includes the ESP-IDF project configuration, and sets the project name.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_HA_sample/HA_on_off_light/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# The following lines of boilerplate have to be in your project's CMakeLists\n# in this exact order for cmake to work correctly\ncmake_minimum_required(VERSION 3.16)\nset(EXTRA_COMPONENT_DIRS\n    ${CMAKE_CURRENT_SOURCE_DIR}/../../common/light_driver\n    )\ninclude($ENV{IDF_PATH}/tools/cmake/project.cmake)\nproject(on_off_light_bulb)\n```\n\n----------------------------------------\n\nTITLE: Registering ESP-ZigBee SDK Component with CMake\nDESCRIPTION: This CMake snippet registers a component for the ESP-ZigBee SDK. It specifies the source file 'esp_ota_server.c', sets the include directory to the current directory, and embeds the 'ota_file.bin' file into the component.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_ota/ota_server/main/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nidf_component_register(\n    SRCS\n    \"esp_ota_server.c\"\n    INCLUDE_DIRS \".\"\n    EMBED_FILES \"ota_file.bin\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for ESP Touchlink Switch Project\nDESCRIPTION: Sets up the CMake build configuration for an ESP touchlink switch project. Specifies minimum CMake version, adds component directories for switch drivers, and includes ESP-IDF project configuration.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_touchlink/touchlink_switch/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# The following lines of boilerplate have to be in your project's CMakeLists\n# in this exact order for cmake to work correctly\ncmake_minimum_required(VERSION 3.16)\nset(EXTRA_COMPONENT_DIRS\n    ${CMAKE_CURRENT_SOURCE_DIR}/../../common/switch_driver\n    )\ninclude($ENV{IDF_PATH}/tools/cmake/project.cmake)\nproject(esp_touchlink_switch)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for ESP OTA Client Project\nDESCRIPTION: Sets up the CMake configuration for an ESP OTA client project. It specifies the minimum CMake version, adds extra component directories for switch driver and delta OTA, includes the ESP-IDF project CMake file, and sets the project name.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_ota/ota_client/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# The following lines of boilerplate have to be in your project's CMakeLists\n# in this exact order for cmake to work correctly\ncmake_minimum_required(VERSION 3.16)\n\nset(EXTRA_COMPONENT_DIRS\n    ${CMAKE_CURRENT_SOURCE_DIR}/../../common/switch_driver\n    ${CMAKE_CURRENT_SOURCE_DIR}/../../common/delta_ota\n    )\ninclude($ENV{IDF_PATH}/tools/cmake/project.cmake)\nproject(esp_ota_client)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for ESP-Zigbee On/Off Switch Project\nDESCRIPTION: This CMake configuration sets up the build environment for an ESP-Zigbee on/off switch project. It specifies the minimum CMake version, includes extra component directories for the switch driver, and integrates with the ESP-IDF build system.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_HA_sample/HA_on_off_switch/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# The following lines of boilerplate have to be in your project's CMakeLists\n# in this exact order for cmake to work correctly\ncmake_minimum_required(VERSION 3.16)\nset(EXTRA_COMPONENT_DIRS\n    ${CMAKE_CURRENT_SOURCE_DIR}/../../common/switch_driver\n    )\ninclude($ENV{IDF_PATH}/tools/cmake/project.cmake)\nproject(on_off_switch)\n```\n\n----------------------------------------\n\nTITLE: Registering ESP-Zigbee SDK Component with IDF Build System\nDESCRIPTION: Registers component source files and include directories with the ESP-IDF build system. Includes both local files and common ZCL utility sources located in relative paths.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_HA_sample/HA_color_dimmable_switch/main/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nidf_component_register(\n    SRC_DIRS  \".\" \"../../../common/zcl_utility/src\"\n    INCLUDE_DIRS \".\" \"../../../common/zcl_utility/include\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP-IDF Build System for ESP-ZigBee SDK\nDESCRIPTION: This single line of code configures the ESP-IDF build system to build applications for the ESP-ZigBee SDK. It uses the idf_build_apps function, which is likely a custom function defined in the ESP-IDF build system to handle building multiple applications.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/tools/ci/requirements-build.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nidf_build_apps\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for ESP Zigbee Color Light Bulb Project\nDESCRIPTION: Sets up the CMake build configuration for an ESP Zigbee color light bulb project. Specifies minimum CMake version, adds light driver component directory, and includes ESP-IDF project configuration.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_HA_sample/HA_color_dimmable_light/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# The following lines of boilerplate have to be in your project's CMakeLists\n# in this exact order for cmake to work correctly\ncmake_minimum_required(VERSION 3.16)\nset(EXTRA_COMPONENT_DIRS\n    ${CMAKE_CURRENT_SOURCE_DIR}/../../common/light_driver\n    )\ninclude($ENV{IDF_PATH}/tools/cmake/project.cmake)\nproject(color_light_bulb)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for ESP-Zigbee NCP Project\nDESCRIPTION: Sets up the basic CMake configuration required for ESP-Zigbee NCP projects. Specifies minimum CMake version 3.16, includes ESP-IDF project configuration, and defines the project name as esp_zigbee_ncp.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_ncp/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# The following lines of boilerplate have to be in your project's CMakeLists\n# in this exact order for cmake to work correctly\ncmake_minimum_required(VERSION 3.16)\n\ninclude($ENV{IDF_PATH}/tools/cmake/project.cmake)\nproject(esp_zigbee_ncp)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for ESP-Zigbee HA Switch\nDESCRIPTION: Sets up CMake build configuration with minimum version requirement, includes custom switch driver component directory, and configures project settings for ESP-IDF framework. Requires ESP-IDF environment to be properly set up.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_customized_devices/customized_client/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16)\nset(EXTRA_COMPONENT_DIRS\n    ${CMAKE_CURRENT_SOURCE_DIR}/../../common/switch_driver\n    )\ninclude($ENV{IDF_PATH}/tools/cmake/project.cmake)\nproject(HA_customized_switch)\n```\n\n----------------------------------------\n\nTITLE: Registering ESP-Zigbee-SDK Component with CMake\nDESCRIPTION: This CMake command registers a component for the ESP-Zigbee-SDK. It specifies 'esp_touchlink_light.c' as the source file and includes the current directory for header files.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_touchlink/touchlink_light/main/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nidf_component_register(\n    SRCS\n    \"esp_touchlink_light.c\"\n    INCLUDE_DIRS \".\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including ZCL Level API Documentation in reStructuredText\nDESCRIPTION: Directive to include the level cluster API documentation file in the build process. This uses the include-build-file directive to incorporate the esp_zigbee_zcl_level.inc file containing the detailed API references.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/api-reference/zcl/esp_zigbee_zcl_level.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include-build-file:: inc/esp_zigbee_zcl_level.inc\n```\n\n----------------------------------------\n\nTITLE: Registering ESP OTA Client Component\nDESCRIPTION: Registers the ESP OTA client component with ESP-IDF build system, including source file esp_ota_client.c and current directory for header includes.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_ota/ota_client/main/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nidf_component_register(\n    SRCS\n    \"esp_ota_client.c\"\n    INCLUDE_DIRS \".\"\n)\n```\n\n----------------------------------------\n\nTITLE: Registering ESP-ZigBee Temperature Sensor Component with ESP-IDF\nDESCRIPTION: Registers the ESP-ZigBee temperature sensor component with the ESP-IDF build system. It specifies the source file 'esp_zb_temperature_sensor.c' and sets the current directory as an include path.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_HA_sample/HA_temperature_sensor/main/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nidf_component_register(\n    SRCS\n    \"esp_zb_temperature_sensor.c\"\n    INCLUDE_DIRS \".\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring ESP-Zigbee Host Project CMake\nDESCRIPTION: Sets up the basic CMake configuration for an ESP-Zigbee host project. Specifies minimum CMake version, adds extra component directories for switch drivers, and includes ESP-IDF project configuration.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_host/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# The following lines of boilerplate have to be in your project's CMakeLists\n# in this exact order for cmake to work correctly\ncmake_minimum_required(VERSION 3.16)\nset(EXTRA_COMPONENT_DIRS\n    ${CMAKE_CURRENT_SOURCE_DIR}/../common/switch_driver\n    )\ninclude($ENV{IDF_PATH}/tools/cmake/project.cmake)\nproject(esp_zigbee_host)\n```\n\n----------------------------------------\n\nTITLE: Registering ESP-Zigbee SDK Component with CMake\nDESCRIPTION: This CMake command registers an IDF component for the ESP-Zigbee SDK. It specifies source directories including the current directory and a common ZCL utility source directory. It also sets up include paths for the current directory and the common ZCL utility include directory.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_sleep/light_sleep/main/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nidf_component_register(\n    SRC_DIRS \".\" \"../../../common/zcl_utility/src\"\n    INCLUDE_DIRS \".\" \"../../../common/zcl_utility/include\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including ZCL Analog Output Header\nDESCRIPTION: ReStructuredText directive to include build-specific analog output cluster documentation.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/api-reference/zcl/esp_zigbee_zcl_analog_output.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. include-build-file:: inc/esp_zigbee_zcl_analog_output.inc\n```\n\n----------------------------------------\n\nTITLE: Registering ESP Zigbee SDK Component with IDF\nDESCRIPTION: Registers the ESP Zigbee SDK component with ESP-IDF build system. Specifies source directories, public and private include paths, and required dependencies including esp-zigbee-lib, nvs_flash, and driver components.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/components/esp-zigbee-ncp/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nidf_component_register(SRC_DIRS \"src\"\n                       INCLUDE_DIRS \"include\"\n                       PRIV_INCLUDE_DIRS \"src/priv\"\n                       PRIV_REQUIRES esp-zigbee-lib nvs_flash driver)\n```\n\n----------------------------------------\n\nTITLE: Registering ESP-Zigbee Component with Source and Include Directories\nDESCRIPTION: Registers component source files and include directories using idf_component_register. Includes source files from the current directory and a common ZCL utility directory, along with their corresponding include paths.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_HA_sample/HA_color_dimmable_light/main/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nidf_component_register(\n    SRC_DIRS \".\" \"../../../common/zcl_utility/src\"\n    INCLUDE_DIRS \".\" \"../../../common/zcl_utility/include\"\n)\n```\n\n----------------------------------------\n\nTITLE: Registering ESP-Zigbee Component with IDF\nDESCRIPTION: Registers the current directory as both source and private include directory for an ESP-IDF component using the idf_component_register CMake function.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_all_device_types_app/main/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nidf_component_register(SRC_DIRS \".\"\n                       PRIV_INCLUDE_DIRS \".\")\n```\n\n----------------------------------------\n\nTITLE: Registering ESP-ZigBee SDK Component with Source and Include Paths\nDESCRIPTION: Registers ESP-ZigBee SDK component using idf_component_register CMake function. Specifies source directories including ZCL utility sources and corresponding include paths for header files.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_greenpower/esp_zigbee_gpc/main/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nidf_component_register(\n    SRC_DIRS \".\" \"../../../common/zcl_utility/src\"\n    INCLUDE_DIRS \".\" \"../../../common/zcl_utility/include\"\n)\n```\n\n----------------------------------------\n\nTITLE: Registering ESP-Zigbee Component\nDESCRIPTION: Registers the component with ESP-IDF build system, specifying source directories, include paths, dependencies, and linker requirements. Uses WHOLE_ARCHIVE to ensure all symbols are included.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/components/esp-zigbee-console/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nidf_component_register(SRC_DIRS \"src\" \"src/zb_data\" \"src/zb_data/zb_custom_clusters\"\n                       INCLUDE_DIRS \"include\"\n                       PRIV_REQUIRES esp-zigbee-lib console esp_timer\n                       LDFRAGMENTS linker.lf\n                       WHOLE_ARCHIVE)\n```\n\n----------------------------------------\n\nTITLE: Registering ESP-ZigBee SDK Component in CMake\nDESCRIPTION: This CMake command registers the ESP-ZigBee SDK component with the ESP-IDF build system. It specifies the source directories and private include directories for the component.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_ncp/main/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nidf_component_register(SRC_DIRS \".\"\n                       PRIV_INCLUDE_DIRS \".\")\n```\n\n----------------------------------------\n\nTITLE: Registering ESP-Zigbee Component Directories in CMake\nDESCRIPTION: Registers source and include directories for an ESP-Zigbee SDK component using idf_component_register. Includes both local directories and common ZCL utility paths.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_HA_sample/HA_on_off_light/main/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nidf_component_register(\n    SRC_DIRS  \".\" \"../../../common/zcl_utility/src\"\n    INCLUDE_DIRS \".\" \"../../../common/zcl_utility/include\"\n)\n```\n\n----------------------------------------\n\nTITLE: Registering ESP-Zigbee SDK Component with ESP-IDF\nDESCRIPTION: Registers the ESP-Zigbee SDK component with ESP-IDF build system, specifying source directories, public and private include paths, and required dependencies (nvs_flash and driver components).\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_host/components/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nidf_component_register(SRC_DIRS \"src\" \"src/ha\" \"src/zcl\" \"src/zdo\"\n                       INCLUDE_DIRS \"include\" \"include/ha\" \"include/zcl\" \"include/zdo\"\n                       PRIV_INCLUDE_DIRS \"src/priv\"\n                       PRIV_REQUIRES nvs_flash driver)\n```\n\n----------------------------------------\n\nTITLE: Registering ESP-Zigbee-SDK Component with ESP-IDF Build System\nDESCRIPTION: Configures the ESP-Zigbee-SDK component for the ESP-IDF build system by specifying source directories, include paths, and driver dependency requirements.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/common/temp_sensor_driver/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nidf_component_register(SRC_DIRS \"src\"\n                       INCLUDE_DIRS \"include\"\n                       REQUIRES driver\n)\n```\n\n----------------------------------------\n\nTITLE: Registering ESP-Zigbee-SDK Component with ESP-IDF Build System in CMake\nDESCRIPTION: This snippet registers the component with the ESP-IDF build system by specifying the source directories, include paths, and required dependencies. The component requires the led_strip component as a dependency.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/common/light_driver/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nidf_component_register(SRC_DIRS \"src\"\n                       INCLUDE_DIRS \"include\"\n                       REQUIRES\n                       led_strip\n)\n```\n\n----------------------------------------\n\nTITLE: Registering ESP-ZigBee SDK Component with CMake\nDESCRIPTION: This CMake code registers a component for the ESP-ZigBee SDK project. It specifies the source file 'esp_HA_customized_switch.c' and sets the include directory to the current directory.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_customized_devices/customized_client/main/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nidf_component_register(\n    SRCS\n    \"esp_HA_customized_switch.c\"\n    INCLUDE_DIRS \".\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for ESP Touchlink Light Project\nDESCRIPTION: This CMake snippet sets up the project configuration for the ESP Touchlink Light. It specifies the minimum CMake version, adds extra component directories, includes the ESP-IDF project CMake file, and sets the project name.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_touchlink/touchlink_light/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# The following lines of boilerplate have to be in your project's CMakeLists\n# in this exact order for cmake to work correctly\ncmake_minimum_required(VERSION 3.16)\nset(EXTRA_COMPONENT_DIRS\n    ${CMAKE_CURRENT_SOURCE_DIR}/../../common/light_driver\n    )\ninclude($ENV{IDF_PATH}/tools/cmake/project.cmake)\nproject(esp_touchlink_light)\n```\n\n----------------------------------------\n\nTITLE: Registering ESP-Zigbee-SDK Component with IDF Build System in CMake\nDESCRIPTION: Registers the ESP-Zigbee-SDK component with the Espressif IDF build system. It specifies that source files are located in the 'src' directory, header files are in the 'include' directory, and the component depends on the 'driver' component.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/common/switch_driver/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nidf_component_register(SRC_DIRS \"src\"\n                       INCLUDE_DIRS \"include\"\n                       REQUIRES\n                       driver\n)\n```\n\n----------------------------------------\n\nTITLE: Registering ESP-ZigBee SDK Component with IDF Build System in CMake\nDESCRIPTION: Registers the ESP-ZigBee SDK component with the Espressif IDF build system. It specifies the source code directory ('src'), include directory ('include'), and private dependencies ('esp_delta_ota' and 'app_update').\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/common/delta_ota/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nidf_component_register(SRC_DIRS \"src\"\n                       INCLUDE_DIRS \"include\"\n                       PRIV_REQUIRES esp_delta_ota app_update\n)\n```\n\n----------------------------------------\n\nTITLE: Registering ESP-ZigBee SDK Component with CMake\nDESCRIPTION: Defines the component structure for an ESP-ZigBee SDK module using the ESP-IDF component registration mechanism. The configuration includes source files from the current directory and a common ZCL utility directory, along with the necessary include paths.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_HA_sample/HA_on_off_switch/main/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nidf_component_register(\n    SRC_DIRS  \".\" \"../../../common/zcl_utility/src\"\n    INCLUDE_DIRS \".\" \"../../../common/zcl_utility/include\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for ESP-ZigBee OTA Server Project\nDESCRIPTION: Sets up the CMake environment for an ESP-ZigBee OTA server project. It specifies the minimum CMake version, adds extra component directories, includes the ESP-IDF project configuration, and sets the project name.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_ota/ota_server/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# The following lines of boilerplate have to be in your project's CMakeLists\n# in this exact order for cmake to work correctly\ncmake_minimum_required(VERSION 3.16)\n\nset(EXTRA_COMPONENT_DIRS \n    ${CMAKE_CURRENT_SOURCE_DIR}/../../common/switch_driver\n    )\ninclude($ENV{IDF_PATH}/tools/cmake/project.cmake)\nproject(esp_ota_server)\n```\n\n----------------------------------------\n\nTITLE: Registering ESP-Zigbee Gateway Component\nDESCRIPTION: Registers the ESP-Zigbee gateway component with its source file and include directory.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_gateway/main/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nidf_component_register(SRCS \"esp_zigbee_gateway.c\"\n                    INCLUDE_DIRS \".\")\n```\n\n----------------------------------------\n\nTITLE: Checking Zigbee End Device Configuration\nDESCRIPTION: Validates that the component is not being built with ZED (Zigbee End Device) configuration enabled, as it's not supported.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/components/esp-zigbee-console/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (CONFIG_ZB_ZED)\n    message(FATAL_ERROR \"${COMPONENT_NAME} doesn't support CONFIG_ZB_ZED=y\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Modifying Partition Table for Increased Code Size\nDESCRIPTION: This snippet shows how to modify the partitions.csv file to increase the 'factory' partition size, which may be necessary when enabling trace logging due to increased code size.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/developing.rst#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Name,   Type, SubType, Offset,  Size, Flags\nnvs,        data, nvs,      0x9000,  0x6000,\nphy_init,   data, phy,      0xf000,  0x1000,\nfactory,    app,  factory,  , 1200K,\nzb_storage, data, fat,      , 16K,\nzb_fct,     data, fat,      , 1K,\n```\n\n----------------------------------------\n\nTITLE: Registering ESP-Zigbee SDK Component in CMake\nDESCRIPTION: This CMake function call registers the ESP-Zigbee SDK component with the ESP-IDF build system. It specifies the source file 'esp_zb_host.c' and sets the include directory to the current directory.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_host/main/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nidf_component_register(\n    SRCS\n    \"esp_zb_host.c\"\n    INCLUDE_DIRS \".\"\n)\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example\nDESCRIPTION: Shows the expected input/output directory structure for the manufacturing tool.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/tools/mfg_tool/README.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nin\n├── multi_devices_config.csv\n\nout\n├── bin/CAFEBEEF50C0FFEC.bin\n├── ...\n```\n\n----------------------------------------\n\nTITLE: Including ZCL On/Off Cluster Build File in reStructuredText\nDESCRIPTION: This directive includes a build file containing specific implementation details and API references for the ZCL on_off cluster. The file is located at 'inc/esp_zigbee_zcl_on_off.inc'.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/api-reference/zcl/esp_zigbee_zcl_on_off.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include-build-file:: inc/esp_zigbee_zcl_on_off.inc\n```\n\n----------------------------------------\n\nTITLE: Flashing Manufacturing Binary\nDESCRIPTION: Command to flash the generated manufacturing binary to a device using esptool.py, specifying serial port and flash address.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/tools/mfg_tool/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nesptool.py -p <serial_port> write_flash <address> path/tool/mfg_tool/bin/xxx.bin\n```\n\n----------------------------------------\n\nTITLE: Registering ESP-ZigBee GPD Component\nDESCRIPTION: Registers the ESP-ZigBee Green Power Device component with ESP-IDF build system. Specifies the source file esp_zigbee_gpd.c and includes the current directory for header files.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_greenpower/esp_zigbee_gpd/main/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nidf_component_register(\n    SRCS\n    \"esp_zigbee_gpd.c\"\n    INCLUDE_DIRS \".\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies\nDESCRIPTION: Commands to install required Python packages for the manufacturing tool using pip.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/tools/mfg_tool/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd path/tools/mfg_tool\npython3 -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Including Power Configuration Build File\nDESCRIPTION: Directive to include the build-specific power configuration file for ESP Zigbee SDK power configuration cluster implementation.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/api-reference/zcl/esp_zigbee_zcl_power_config.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include-build-file:: inc/esp_zigbee_zcl_power_config.inc\n```\n\n----------------------------------------\n\nTITLE: Including ZCL Command API Documentation in reStructuredText\nDESCRIPTION: This snippet demonstrates how to include an external file containing ZCL command API documentation in a reStructuredText document. The included file is expected to contain the detailed API references for ESP Zigbee SDK's ZCL command functions.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/api-reference/zcl/esp_zigbee_zcl_command.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include-build-file:: inc/esp_zigbee_zcl_command.inc\n```\n\n----------------------------------------\n\nTITLE: Including Temperature Measurement Header\nDESCRIPTION: Directive to include the ESP Zigbee temperature measurement cluster header file during build process\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/api-reference/zcl/esp_zigbee_zcl_temperature_meas.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. include-build-file:: inc/esp_zigbee_zcl_temperature_meas.inc\n```\n\n----------------------------------------\n\nTITLE: Installing ESP-Docs Package and Running Build Command in Bash\nDESCRIPTION: Commands for installing the esp-docs Python package and running the documentation build process. The esp-docs package is required to build the ESP Zigbee SDK documentation locally.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install esp-docs\n```\n\nLANGUAGE: bash\nCODE:\n```\nbuild-docs --help\n```\n\n----------------------------------------\n\nTITLE: Including ESP Zigbee OTA API Reference in RST\nDESCRIPTION: This RST directive includes the build file containing the ESP Zigbee OTA API reference documentation. It's used to incorporate the detailed API documentation into the main document.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/api-reference/esp_zigbee_ota.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include-build-file:: inc/esp_zigbee_ota.inc\n```\n\n----------------------------------------\n\nTITLE: Including RST Build File Reference\nDESCRIPTION: Sphinx documentation directive to include the ZGPD API reference build file.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/api-reference/zgp/esp_zigbee_zgpd.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include-build-file:: inc/esp_zigbee_zgpd.inc\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for BDB API Documentation in reStructuredText\nDESCRIPTION: This snippet defines a table of contents (toctree) for the BDB API documentation. It includes a link to the ESP Zigbee BDB Touchlink API documentation.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/api-reference/bdb/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   esp_zigbee_bdb_touchlink\n```\n\n----------------------------------------\n\nTITLE: Examples Directory Structure in Markdown\nDESCRIPTION: Markdown formatted list of example project directories with descriptions, showing the organization of different Zigbee implementation examples including device types, gateway configurations, and special features.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Examples\\n\\nThis directory contains a range of Zigbee examples. These examples are intended to demonstrate different functionalities of usage Zigbee protocol to build Zigbee product, and to provide code that you can copy and adapt into your own projects.  \\n\\n## Examples Layout\\nThe examples are grouped into subdirectories by category. Each category directory contains one or more example projects:\\n- [esp_zigbee_all_device_types_app](esp_zigbee_all_device_types_app) Zigbee all device types example in command line interface mode\\n- [esp_zigbee_customized_devices](esp_zigbee_customized_devices) Zigbee fully customized attribute/cluster/endpoint for server and client devices\\n- [esp_zigbee_gateway](esp_zigbee_gateway) Zigbee gateway example, runs on a Wi-Fi SoC such as ESP32, ESP32-C3 and ESP32-S3, with an 802.15.4 SoC like ESP32-H2 running [ot_rcp example](https://github.com/espressif/esp-idf/tree/master/examples/openthread/ot_rcp)\\n- [esp_zigbee_greenpower](esp_zigbee_greenpower) Zigbee Green Power examples\\n- [esp_zigbee_HA_sample](esp_zigbee_HA_sample) Zigbee Home Automation examples including lighting, switch, temperature sensor, thermostat, etc\\n- [esp_zigbee_host](esp_zigbee_host) Zigbee Host example, runs on a Wi-Fi SoC such as ESP32, ESP32-C3 and ESP32-S3, with an 802.15.4 SoC like ESP32-H2 running [esp_zigbee_ncp](esp_zigbee_ncp)\\n- [esp_zigbee_ncp](esp_zigbee_ncp) Zigbee NCP (Network Co-Processor) example\\n- [esp_zigbee_ota](esp_zigbee_ota) Zigbee OTA (Over-The-Air) upgrade examples\\n- [esp_zigbee_sleep](esp_zigbee_sleep) Zigbee sleepy end device examples\\n- [esp_zigbee_touchlink](esp_zigbee_touchlink) Zigbee TouchLink (ZLL) examples\n```\n\n----------------------------------------\n\nTITLE: Cloning ESP-Zigbee-SDK Repository\nDESCRIPTION: Command to clone the ESP-Zigbee-SDK repository from GitHub.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/developing.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/espressif/esp-zigbee-sdk.git\n```\n\n----------------------------------------\n\nTITLE: RST Include Directive for ZDO API Reference\nDESCRIPTION: Sphinx documentation directive to include the ZDO common API reference file.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/api-reference/zdo/esp_zigbee_zdo_common.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include-build-file:: inc/esp_zigbee_zdo_common.inc\n```\n\n----------------------------------------\n\nTITLE: Including Door Lock Cluster Documentation\nDESCRIPTION: RST directive to include the door lock cluster documentation file containing the API reference and implementation details.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/api-reference/zcl/esp_zigbee_zcl_door_lock.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include-build-file:: inc/esp_zigbee_zcl_door_lock.inc\n```\n\n----------------------------------------\n\nTITLE: Defining Python Test Dependencies\nDESCRIPTION: Specifies the required pytest packages and their versions for testing ESP Zigbee SDK. Includes embedded testing modules for serial communication, ESP-IDF framework, QEMU emulation, and additional pytest plugins for test ordering and timeout management.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/tools/ci/requirements-pytest.txt#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npytest-embedded-serial-esp~=1.0\npytest-embedded-idf~=1.0\npytest-embedded-qemu~=1.0\npytest-order\npytest-timeout\n```\n\n----------------------------------------\n\nTITLE: Cloning the ESP-Zigbee-SDK Repository with Git\nDESCRIPTION: Command to clone the ESP-Zigbee-SDK repository from GitHub to a local machine. This is the first step to start working with the ESP-Zigbee-SDK development framework.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/espressif/esp-zigbee-sdk.git\n```\n\n----------------------------------------\n\nTITLE: Including ZCL Shade Config Header\nDESCRIPTION: RST directive to include the build file containing ZCL shade configuration definitions and specifications\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/api-reference/zcl/esp_zigbee_zcl_shade_config.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include-build-file:: inc/esp_zigbee_zcl_shade_config.inc\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents Structure\nDESCRIPTION: RestructuredText markup defining the table of contents structure for the ESP Zigbee SDK user guide documentation.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   ncp\n   aps\n   zcl_custom\n   zcl_groups\n   zcl_ota_upgrade\n   zcl_scene\n```\n\n----------------------------------------\n\nTITLE: Implementing Remove Scene Command in ZigBee Switch\nDESCRIPTION: Function that sends a Remove Scene command to a light device to delete a specific scene from its scene table.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_scene.rst#2025-04-23_snippet_15\n\nLANGUAGE: c\nCODE:\n```\nstatic esp_err_t zb_switch_send_remove_scene_to_light(uint16_t short_addr, uint16_t group_id, uint8_t scene_id)\n{\n    esp_zb_zcl_scenes_remove_scene_cmd_t remove_scene_cmd = {\n        .address_mode = ESP_ZB_APS_ADDR_MODE_16_ENDP_PRESENT,\n        .zcl_basic_cmd.dst_addr_u.addr_short = short_addr,\n        .zcl_basic_cmd.dst_endpoint = HA_SCENES_LIGHT,\n        .zcl_basic_cmd.src_endpoint = HA_SCENES_SWITCH,\n        .group_id = group_id,\n        .scene_id = scene_id,\n    };\n\n    esp_zb_lock_acquire(portMAX_DELAY);\n    esp_zb_zcl_scenes_remove_scene_cmd_req(&remove_scene_cmd);\n    esp_zb_lock_release();\n    ESP_LOGI(TAG, \"Ask the short: 0x%04x to remove Scene ID: %d of Group ID: 0x%04x\",\n```\n\n----------------------------------------\n\nTITLE: Executing Flash and Monitor Commands\nDESCRIPTION: Command to build project, flash to board, and start serial monitoring.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_ota/ota_client/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nidf.py -p PORT flash monitor\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents Structure\nDESCRIPTION: Sphinx documentation table of contents tree structure defining the main sections of the ESP Zigbee SDK documentation\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   introduction\n   developing\n   certification\n   production\n   user-guide/index\n   api-reference/index\n   faq\n```\n\n----------------------------------------\n\nTITLE: Handling Group Operation Responses\nDESCRIPTION: Implementation of callback handlers for group operation responses including add, remove, and view operations.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_groups.rst#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nstatic esp_err_t zb_zcl_group_operation_resp(esp_zb_zcl_groups_operate_group_resp_message_t message)\n{\n    esp_err_t ret = ESP_OK;\n    if (message.info.status == ESP_ZB_ZCL_STATUS_SUCCESS) {\n        switch (message.info.command.id) {\n        case ESP_ZB_ZCL_CMD_GROUPS_ADD_GROUP:\n            ESP_LOGI(TAG, \"Succeed in adding endpoint: %d to group: %d\", message.info.src_endpoint, message.group_id);\n            break;\n        case ESP_ZB_ZCL_CMD_GROUPS_REMOVE_GROUP:\n            ESP_LOGI(TAG, \"Succeed in removing endpoint: %d from group: %d\", message.info.src_endpoint, message.group_id);\n            break;\n        default:\n            ESP_LOGW(TAG, \"Unknown response command: %d\", message.info.command.id);\n            break;\n        }\n    } else {\n        ESP_LOGW(TAG, \"Failed to operate group with error code: %d\", message.info.status);\n    }\n    return ret;\n}\n\nstatic esp_err_t zb_action_handler(esp_zb_core_action_callback_id_t callback_id, const void *message)\n{\n    esp_err_t ret = ESP_OK;\n    switch (callback_id) {\n    case ESP_ZB_CORE_CMD_OPERATE_GROUP_RESP_CB_ID:\n        ret = zb_zcl_group_operation_resp(*(esp_zb_zcl_groups_operate_group_resp_message_t *)message);\n        break;\n    case ESP_ZB_CORE_CMD_VIEW_GROUP_RESP_CB_ID:\n        ret = zb_zcl_group_view_resp(*(esp_zb_zcl_groups_view_group_resp_message_t *)message);\n        break;\n    case ESP_ZB_CORE_CMD_GET_GROUP_MEMBERSHIP_RESP_CB_ID:\n        ret = zb_zcl_group_get_membership_resp(*(esp_zb_zcl_groups_get_group_membership_resp_message_t *)message);\n        break;\n    default:\n        ESP_LOGW(TAG, \"Receive Zigbee action(0x%x) callback\", callback_id);\n        break;\n    }\n    return ret;\n}\n```\n\n----------------------------------------\n\nTITLE: Network Join and OTA Client Log Output\nDESCRIPTION: Example log output showing device startup, network joining, and OTA client initialization process.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/examples/esp_zigbee_ota/ota_client/README.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nI (414) main_task: Started on CPU0\nI (424) main_task: Calling app_main()\nW (424) ESP_OTA_CLIENT: ESP Zigbee OTA example 1.0 is running\nI (444) phy: phy_version: 310,2, 8fa9cb4, Jun  5 2024, 14:19:10\nI (444) phy: libbtbb version: a024da6, Jun  5 2024, 14:19:22\nI (454) main_task: Returned from app_main()\nI (524) ESP_OTA_CLIENT: ZDO signal: ZDO Config Ready (0x17), status: ESP_FAIL\nI (524) ESP_OTA_CLIENT: Initialize Zigbee stack\nI (524) gpio: GPIO[9]| InputEn: 1| OutputEn: 0| OpenDrain: 0| Pullup: 1| Pulldown: 0| Intr:4 \nI (524) ESP_OTA_CLIENT: Deferred driver initialization successful\nI (544) ESP_OTA_CLIENT: Device started up in factory-reset mode\nI (544) ESP_OTA_CLIENT: Start network steering\nI (25254) ESP_OTA_CLIENT: Joined network successfully (Extended PAN ID: 48:31:b7:ff:fe:c0:2b:6b, PAN ID: 0x0841, Channel:13, Short Address: 0x43a7)\n```\n\n----------------------------------------\n\nTITLE: OTA Upgrade Query Image Response Handler\nDESCRIPTION: Handler function for processing OTA upgrade image query responses on the client side.\nSOURCE: https://github.com/espressif/esp-zigbee-sdk/blob/main/docs/en/user-guide/zcl_ota_upgrade.rst#2025-04-23_snippet_10\n\nLANGUAGE: c\nCODE:\n```\n    static esp_err_t zb_ota_upgrade_query_image_resp_handler(esp_zb_zcl_ota_upgrade_query_image_resp_message_t message)\n    {\n        esp_err_t ret = ESP_OK;\n        if (message.info.status == ESP_ZB_ZCL_STATUS_SUCCESS) {\n            ESP_LOGI(TAG, \"Queried OTA image from address: 0x%04hx, endpoint: %d\", message.server_addr.u.short_addr, message.server_endpoint);\n            ESP_LOGI(TAG, \"Image version: 0x%lx, manufacturer code: 0x%x, image size: %ld\", message.file_version, message.manufacturer_code,\n                    message.image_size);\n        }\n        if (ret == ESP_OK) {\n            ESP_LOGI(TAG, \"Approving OTA image upgrade\");\n        } else {\n            ESP_LOGI(TAG, \"Rejecting OTA image upgrade, status: %s\", esp_err_to_name(ret));\n        }\n        return ret;\n    }\n```"
  }
]