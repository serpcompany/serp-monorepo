[
  {
    "owner": "moroshko",
    "repo": "react-autosuggest",
    "content": "TITLE: Basic React Autosuggest Usage\nDESCRIPTION: This example shows a basic implementation of the React Autosuggest component. It includes importing the necessary modules, defining suggestion logic, and rendering the component with required props. It defines how to calculate, render and handle suggestion selections.\nSOURCE: https://github.com/moroshko/react-autosuggest/blob/master/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport Autosuggest from 'react-autosuggest';\n\n// Imagine you have a list of languages that you'd like to autosuggest.\nconst languages = [\n  {\n    name: 'C',\n    year: 1972\n  },\n  {\n    name: 'Elm',\n    year: 2012\n  },\n  ...\n];\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = value => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n\n  return inputLength === 0 ? [] : languages.filter(lang =>\n    lang.name.toLowerCase().slice(0, inputLength) === inputValue\n  );\n};\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion.name;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => (\n  <div>\n    {suggestion.name}\n  </div>\n);\n\nclass Example extends React.Component {\n  constructor() {\n    super();\n\n    // Autosuggest is a controlled component.\n    // This means that you need to provide an input value\n    // and an onChange handler that updates this value (see below).\n    // Suggestions also need to be provided to the Autosuggest,\n    // and they are initially empty because the Autosuggest is closed.\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  }\n\n  onChange = (event, { newValue }) => {\n    this.setState({\n      value: newValue\n    });\n  };\n\n  // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value)\n    });\n  };\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  render() {\n    const { value, suggestions } = this.state;\n\n    // Autosuggest will pass through all these props to the input.\n    const inputProps = {\n      placeholder: 'Type a programming language',\n      value,\n      onChange: this.onChange\n    };\n\n    // Finally, render it!\n    return (\n      <Autosuggest\n        suggestions={suggestions}\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n        getSuggestionValue={getSuggestionValue}\n        renderSuggestion={renderSuggestion}\n        inputProps={inputProps}\n      />\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Input Props Configuration for React Autosuggest (JS)\nDESCRIPTION: This configuration object defines the props that are passed to the input element of the React Autosuggest component. It requires at least a `value` and an `onChange` callback. Other props like `onBlur`, `type`, and `placeholder` can also be included to further customize the input.\nSOURCE: https://github.com/moroshko/react-autosuggest/blob/master/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst inputProps = {\n  value, // usually comes from the application state\n  onChange, // called every time the input value changes\n  onBlur, // called when the input loses focus, e.g. when user presses Tab\n  type: \"search\",\n  placeholder: \"Enter city or postcode\"\n};\n```\n\n----------------------------------------\n\nTITLE: Get Suggestion Value in React Autosuggest (JS)\nDESCRIPTION: This function defines how a suggestion object is mapped to a string value that is displayed in the input field when the suggestion is selected. It takes a suggestion object as input and returns the corresponding string. This is a required prop for the React Autosuggest component.\nSOURCE: https://github.com/moroshko/react-autosuggest/blob/master/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getSuggestionValue(suggestion) {\n  return suggestion.text;\n}\n```\n\n----------------------------------------\n\nTITLE: Signature of onSuggestionsFetchRequested Function in React Autosuggest\nDESCRIPTION: This code snippet shows the signature of the 'onSuggestionsFetchRequested' function, which is called every time the component might need to update the 'suggestions' prop. The function receives an object containing the current 'value' of the input and the 'reason' for the request.\nSOURCE: https://github.com/moroshko/react-autosuggest/blob/master/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction onSuggestionsFetchRequested({ value, reason })\n```\n\n----------------------------------------\n\nTITLE: Render Suggestion in React Autosuggest (JS)\nDESCRIPTION: This function defines how each suggestion is rendered in the suggestion list. It receives a suggestion object, the current query, and a boolean indicating whether the suggestion is highlighted. It should return either a string or a React element. It is a required prop for React Autosuggest.\nSOURCE: https://github.com/moroshko/react-autosuggest/blob/master/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction renderSuggestion(suggestion, { query, isHighlighted }) {\n  return <span>{suggestion.text}</span>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Plain List of Suggestions in React Autosuggest\nDESCRIPTION: This code snippet shows how to define a plain list of suggestions for use with the React Autosuggest component. Each item in the 'suggestions' array represents a single suggestion, with the 'text' property providing the suggestion value.\nSOURCE: https://github.com/moroshko/react-autosuggest/blob/master/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst suggestions = [\n  {\n    text: \"Apple\"\n  },\n  {\n    text: \"Banana\"\n  },\n  {\n    text: \"Cherry\"\n  },\n  {\n    text: \"Grapefruit\"\n  },\n  {\n    text: \"Lemon\"\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Suggestions with Multiple Sections in React Autosuggest\nDESCRIPTION: This code snippet demonstrates how to define suggestions organized into multiple sections for use with the React Autosuggest component. Each item in the 'suggestions' array represents a section, containing a 'title' and an array of 'suggestions'. Each suggestion in a section has an 'id' and 'text' property.\nSOURCE: https://github.com/moroshko/react-autosuggest/blob/master/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst suggestions = [\n  {\n    title: \"A\",\n    suggestions: [\n      {\n        id: \"100\",\n        text: \"Apple\"\n      },\n      {\n        id: \"101\",\n        text: \"Apricot\"\n      }\n    ]\n  },\n  {\n    title: \"B\",\n    suggestions: [\n      {\n        id: \"102\",\n        text: \"Banana\"\n      }\n    ]\n  },\n  {\n    title: \"C\",\n    suggestions: [\n      {\n        id: \"103\",\n        text: \"Cherry\"\n      }\n    ]\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Custom Input Component Rendering in React Autosuggest\nDESCRIPTION: This snippet demonstrates how to customize the input component rendering in React Autosuggest using the `renderInputComponent` prop. It's essential to pass all `inputProps` to the rendered input element to maintain accessibility. The snippet shows a custom input with additional elements.\nSOURCE: https://github.com/moroshko/react-autosuggest/blob/master/README.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst renderInputComponent = inputProps => (\n  <div>\n    <input {...inputProps} />\n    <div>custom stuff</div>\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Suggestions Container Rendering in React Autosuggest\nDESCRIPTION: This snippet illustrates how to customize the suggestions container in React Autosuggest using the `renderSuggestionsContainer` prop. The container must receive `containerProps` and render `children` (the suggestions). It also shows how to customize the scrolling behavior of the suggestions container.\nSOURCE: https://github.com/moroshko/react-autosuggest/blob/master/README.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nfunction renderSuggestionsContainer({ containerProps, children, query }) {\n  return (\n    <div {...containerProps}>\n      {children}\n      <div>\n        Press Enter to search <strong>{query}</strong>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Should Render Suggestions Function in React Autosuggest (JS)\nDESCRIPTION: This function determines whether suggestions should be rendered based on the current input value and the reason for rendering. It takes the input value and a reason string as arguments and returns a boolean indicating whether to render suggestions. It allows fine-grained control over when suggestions are displayed.\nSOURCE: https://github.com/moroshko/react-autosuggest/blob/master/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfunction shouldRenderSuggestions(value, reason) {\n  return value.trim().length > 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Render Section Title in React Autosuggest (JS)\nDESCRIPTION: This function defines how the title of each section is rendered when using multiple sections. It receives a section object (an item from the `suggestions` array) and should return either a string or a React element to display as the section title. This is required when `multiSection={true}`.\nSOURCE: https://github.com/moroshko/react-autosuggest/blob/master/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nfunction renderSectionTitle(section) {\n  return <strong>{section.title}</strong>;\n}\n```\n\n----------------------------------------\n\nTITLE: Get Section Suggestions in React Autosuggest (JS)\nDESCRIPTION: This function specifies how to extract the array of suggestions from a given section when using multiple sections. It takes a section object as input and returns the array of suggestions that should be rendered within that section.  This is required when `multiSection={true}`.\nSOURCE: https://github.com/moroshko/react-autosuggest/blob/master/README.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getSectionSuggestions(section) {\n  return section.suggestions;\n}\n```\n\n----------------------------------------\n\nTITLE: Limit Scrolling Suggestions Container React JavaScript\nDESCRIPTION: This snippet shows how to limit the scrolling of the suggestions container in React Autosuggest by using the `react-isolated-scroll` library. It defines a `renderSuggestionsContainer` function that wraps the suggestions within the `IsolatedScroll` component, preventing the page from scrolling when the container's scroll limit is reached. It requires the `react-isolated-scroll` package as a dependency.\nSOURCE: https://github.com/moroshko/react-autosuggest/blob/master/FAQ.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport IsolatedScroll from 'react-isolated-scroll';\n\nfunction renderSuggestionsContainer({ containerProps, children }) {\n  const { ref, ...restContainerProps } = containerProps;\n  const callRef = isolatedScroll => {\n    if (isolatedScroll !== null) {\n      ref(isolatedScroll.component);\n    }\n  };\n\n  return (\n    <IsolatedScroll ref={callRef} {...restContainerProps}>\n      {children}\n    </IsolatedScroll>\n  );\n}\n\n<Autosuggest renderSuggestionsContainer={renderSuggestionsContainer} ... />\n```\n\n----------------------------------------\n\nTITLE: Custom Suggestions Container with Isolated Scroll in React Autosuggest\nDESCRIPTION: This snippet demonstrates the usage of a composite component like `IsolatedScroll` within the `renderSuggestionsContainer` of React Autosuggest. It's crucial to call `containerProps.ref` with the topmost element rendered by the composite component, ensuring proper integration and functionality.\nSOURCE: https://github.com/moroshko/react-autosuggest/blob/master/README.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport IsolatedScroll from \"react-isolated-scroll\";\n\nfunction renderSuggestionsContainer({ containerProps, children }) {\n  const { ref, ...restContainerProps } = containerProps;\n  const callRef = isolatedScroll => {\n    if (isolatedScroll !== null) {\n      ref(isolatedScroll.component);\n    }\n  };\n\n  return (\n    <IsolatedScroll ref={callRef} {...restContainerProps}>\n      {children}\n    </IsolatedScroll>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Focus Input on Suggestion Click (JS/XML)\nDESCRIPTION: This example shows how to conditionally set `focusInputOnSuggestionClick` based on whether the Autosuggest component is operating on a mobile device.  It utilizes a boolean `isMobile` which can be determined using libraries like `kaimallea/isMobile`.\nSOURCE: https://github.com/moroshko/react-autosuggest/blob/master/README.md#_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<Autosuggest focusInputOnSuggestionClick={!isMobile} ... />\n```\n\n----------------------------------------\n\nTITLE: Accessing Input Element React Autosuggest JavaScript\nDESCRIPTION: This snippet demonstrates how to obtain a reference to the input element within the React Autosuggest component using the `ref` property. The `storeInputReference` function is used as a callback to store the input element when the Autosuggest instance is available. The input element is then available as `this.input`.\nSOURCE: https://github.com/moroshko/react-autosuggest/blob/master/FAQ.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction storeInputReference(autosuggest) {\n  if (autosuggest !== null) {\n    this.input = autosuggest.input;\n  }\n}\n\n<Autosuggest ref={storeInputReference} ... />\n```\n\n----------------------------------------\n\nTITLE: Container Props Configuration for React Autosuggest (JS)\nDESCRIPTION: This configuration object defines the props that are passed to the outer div container of the Autosuggest component. Allows for override of accessibility properties and other arbitrary properties. Useful for setting `dataId` attributes.\nSOURCE: https://github.com/moroshko/react-autosuggest/blob/master/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst containerProps = {\n  dataId: 'my-data-id'\n  // ... any other properties\n};\n```\n\n----------------------------------------\n\nTITLE: Initial State for React Autosuggest with Always Render (JS)\nDESCRIPTION: This demonstrates the initial state configuration needed when `alwaysRenderSuggestions` is set to true. The `suggestions` state should correspond to the initial `value` of `inputProps.value`. This example shows how to display all suggestions when the input is initially empty.\nSOURCE: https://github.com/moroshko/react-autosuggest/blob/master/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nthis.state = {\n  value: \"\",\n  suggestions: allSuggestions\n};\n```\n\n----------------------------------------\n\nTITLE: CSS Modules Theming in React Autosuggest\nDESCRIPTION: This snippet shows how to style React Autosuggest using CSS Modules and the `theme` prop. The CSS file defines styles for various elements of the Autosuggest component, and the `theme` prop maps these styles to the component's structure.\nSOURCE: https://github.com/moroshko/react-autosuggest/blob/master/README.md#_snippet_19\n\nLANGUAGE: css\nCODE:\n```\n/* theme.css */\n\n.container { ... }\n.input { ... }\n.suggestionsContainer { ... }\n.suggestion { ... }\n.suggestionHighlighted { ... }\n...\n```\n\n----------------------------------------\n\nTITLE: Applying Theme to React Autosuggest Component\nDESCRIPTION: This snippet demonstrates how to apply the imported CSS Modules theme to the React Autosuggest component using the `theme` prop. Ensure that the imported theme object is passed to the Autosuggest component for proper styling.\nSOURCE: https://github.com/moroshko/react-autosuggest/blob/master/README.md#_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n<Autosuggest theme={theme} ... />\n```\n\n----------------------------------------\n\nTITLE: Default Theme Object Structure for React Autosuggest\nDESCRIPTION: This snippet displays the default theme object structure for React Autosuggest, defining CSS classes for various elements of the component. This can be used as a base for customizing the component's styling using CSS Modules or other styling solutions.\nSOURCE: https://github.com/moroshko/react-autosuggest/blob/master/README.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  container:                'react-autosuggest__container',\n  containerOpen:            'react-autosuggest__container--open',\n  input:                    'react-autosuggest__input',\n  inputOpen:                'react-autosuggest__input--open',\n  inputFocused:             'react-autosuggest__input--focused',\n  suggestionsContainer:     'react-autosuggest__suggestions-container',\n  suggestionsContainerOpen: 'react-autosuggest__suggestions-container--open',\n  suggestionsList:          'react-autosuggest__suggestions-list',\n  suggestion:               'react-autosuggest__suggestion',\n  suggestionFirst:          'react-autosuggest__suggestion--first',\n  suggestionHighlighted:    'react-autosuggest__suggestion--highlighted',\n  sectionContainer:         'react-autosuggest__section-container',\n  sectionContainerFirst:    'react-autosuggest__section-container--first',\n  sectionTitle:             'react-autosuggest__section-title'\n}\n```\n\n----------------------------------------\n\nTITLE: Unique IDs for Multiple Autosuggest Instances\nDESCRIPTION: This snippet shows how to assign unique IDs to multiple React Autosuggest components rendered on the same page. This is required for proper ARIA attribute settings and accessibility. If there is only one Autosuggest instance, the id will default to '1'.\nSOURCE: https://github.com/moroshko/react-autosuggest/blob/master/README.md#_snippet_23\n\nLANGUAGE: xml\nCODE:\n```\n<Autosuggest id=\"source\" ... />\n<Autosuggest id=\"destination\" ... />\n```\n\n----------------------------------------\n\nTITLE: Install React Autosuggest with npm\nDESCRIPTION: This command installs the react-autosuggest package using npm, the Node Package Manager.  The --save flag adds the package to your project's dependencies.\nSOURCE: https://github.com/moroshko/react-autosuggest/blob/master/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install react-autosuggest --save\n```\n\n----------------------------------------\n\nTITLE: Install React Autosuggest with Yarn\nDESCRIPTION: This command installs the react-autosuggest package using Yarn package manager. This is a common way to add the library to a React project.\nSOURCE: https://github.com/moroshko/react-autosuggest/blob/master/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add react-autosuggest\n```\n\n----------------------------------------\n\nTITLE: Install and Start React Autosuggest Development\nDESCRIPTION: These commands set up the development environment for React Autosuggest, installing dependencies and starting the development server. This allows developers to make changes and test them in a local environment.\nSOURCE: https://github.com/moroshko/react-autosuggest/blob/master/README.md#_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Importing Theme in React Autosuggest\nDESCRIPTION: This snippet illustrates how to import the CSS Modules theme and apply it to the React Autosuggest component using the `theme` prop. It shows a basic Javascript import statement of the css file.\nSOURCE: https://github.com/moroshko/react-autosuggest/blob/master/README.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport theme from \"theme.css\";\n```\n\n----------------------------------------\n\nTITLE: Include React Autosuggest via UMD\nDESCRIPTION: This snippet demonstrates how to include the React Autosuggest library in your HTML using a UMD (Universal Module Definition) build. This approach is suitable for simple projects where a bundler is not used.\nSOURCE: https://github.com/moroshko/react-autosuggest/blob/master/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/react-autosuggest/dist/standalone/autosuggest.js\"></script>\n```"
  }
]