[
  {
    "owner": "burnysc2",
    "repo": "python-sc2",
    "content": "TITLE: Simple Worker Rush Bot Implementation\nDESCRIPTION: A minimal example showing how to create a basic StarCraft II bot that performs a worker rush strategy. The bot sends all workers to attack the enemy base at the start of the game.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sc2 import maps\nfrom sc2.player import Bot, Computer\nfrom sc2.main import run_game\nfrom sc2.data import Race, Difficulty\nfrom sc2.bot_ai import BotAI\n\nclass WorkerRushBot(BotAI):\n    async def on_step(self, iteration: int):\n        if iteration == 0:\n            for worker in self.workers:\n                worker.attack(self.enemy_start_locations[0])\n\nrun_game(maps.get(\"Abyssal Reef LE\"), [\n    Bot(Race.Zerg, WorkerRushBot()),\n    Computer(Race.Protoss, Difficulty.Medium)\n], realtime=True)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic StarCraft II Bot with Python-SC2\nDESCRIPTION: A minimal example showing how to create a basic StarCraft II bot using the python-sc2 library. This code creates a bot that runs against a computer opponent on the AcropolisLE map and prints a message each iteration.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/docs_generate/text_files/introduction.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sc2\nfrom sc2.bot_ai import BotAI\nfrom sc2.player import Bot, Computer\n\nclass MyBot(BotAI):\n    async def on_step(self, iteration: int):\n        print(f\"This is my bot in iteration {iteration}!\")\n\nsc2.run_game(\n    sc2.maps.get(\"AcropolisLE\"),\n    [Bot(sc2.Race.Zerg, MyBot()), Computer(sc2.Race.Zerg, sc2.Difficulty.Hard)],\n    realtime=False,\n)\n```\n\n----------------------------------------\n\nTITLE: API Configuration Examples\nDESCRIPTION: Examples of different configuration options available in the API, including unit command handling, selection behavior, distance calculation methods, and game step settings.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/README.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MyBot(BotAI):\n    def __init__(self):\n        self.unit_command_uses_self_do = True\n        self.raw_affects_selection = True\n        self.distance_calculation_method: int = 2\n        pass  # don't set game_step here!\n\n    async def on_start(self):\n        self.client.game_step: int = 2\n```\n\n----------------------------------------\n\nTITLE: Complete Spawning Pool Building Logic in SC2 (Python)\nDESCRIPTION: Provides a comprehensive example of building a Spawning Pool, including affordability check, duplicate prevention, worker selection, and placement finding.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/docs_generate/text_files/introduction.rst#2025-04-23_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nif self.can_afford(UnitTypeId.SPAWNINGPOOL) and self.already_pending(UnitTypeId.SPAWNINGPOOL) + self.structures.filter(lambda structure: structure.type_id == UnitTypeId.SPAWNINGPOOL and structure.is_ready).amount == 0:\n    worker_candidates = self.workers.filter(lambda worker: (worker.is_collecting or worker.is_idle) and worker.tag not in self.unit_tags_received_action)\n    # Worker_candidates can be empty\n    if worker_candidates:\n        map_center = self.game_info.map_center\n        position_towards_map_center = self.start_location.towards(map_center, distance=5)\n        placement_position = await self.find_placement(UnitTypeId.SPAWNINGPOOL, near=position_towards_map_center, placement_step=1)\n        # Placement_position can be None\n        if placement_position:\n            build_worker = worker_candidates.closest_to(placement_position)\n            build_worker.build(UnitTypeId.SPAWNINGPOOL, placement_position)\n```\n\n----------------------------------------\n\nTITLE: Installing Python SC2 Library via pip\nDESCRIPTION: Commands for installing the python-sc2 library either from PyPI or directly from the GitHub develop branch.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install --upgrade burnysc2\n```\n\nLANGUAGE: shell\nCODE:\n```\npip install --upgrade --force-reinstall https://github.com/BurnySc2/python-sc2/archive/develop.zip\n```\n\n----------------------------------------\n\nTITLE: Simplified Spawning Pool Building using Convenience Function in SC2 (Python)\nDESCRIPTION: Demonstrates the use of the self.build convenience function to simplify the process of building a Spawning Pool.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/docs_generate/text_files/introduction.rst#2025-04-23_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nif self.can_afford(UnitTypeId.SPAWNINGPOOL) and self.already_pending(UnitTypeId.SPAWNINGPOOL) + self.structures.filter(lambda structure: structure.type_id == UnitTypeId.SPAWNINGPOOL and structure.is_ready).amount == 0:\n    map_center = self.game_info.map_center\n    position_towards_map_center = self.start_location.towards(map_center, distance=5)\n    await self.build(UnitTypeId.SPAWNINGPOOL, near=position_towards_map_center, placement_step=1)\n```\n\n----------------------------------------\n\nTITLE: Preventing Double Commands to Units in Python-SC2\nDESCRIPTION: The correct approach to train units while preventing multiple commands to the same unit in a single frame. This checks if a unit has already received an action before issuing a new command.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/docs_generate/text_files/introduction.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfor loop_larva in self.larva:\n    if loop_larva.tag in self.unit_tags_received_action:\n        continue\n    if self.can_afford(UnitTypeId.DRONE):\n        loop_larva.train(UnitTypeId.DRONE)\n        # Add break statement here if you only want to train one\n    else:\n        # Can't afford drones anymore\n        break\n```\n\n----------------------------------------\n\nTITLE: Optimized Training of Multiple Units in Python-SC2\nDESCRIPTION: A more performance-oriented approach to train multiple units. This code loops through available larva and trains as many drones as possible until resources are depleted.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/docs_generate/text_files/introduction.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfor loop_larva in self.larva:\n    if self.can_afford(UnitTypeId.DRONE):\n        loop_larva.train(UnitTypeId.DRONE)\n        # Add break statement here if you only want to train one\n    else:\n        # Can't afford drones anymore\n        break\n```\n\n----------------------------------------\n\nTITLE: Training a Drone Unit in StarCraft II with Python-SC2\nDESCRIPTION: Example demonstrating how to train a drone unit from a larva in a Zerg bot. This snippet shows the direct method using AbilityId, which allows for optional cost and supply subtraction.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/docs_generate/text_files/introduction.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sc2.ids.ability_id import AbilityId\n\nmy_larva = self.larva.random\nmy_larva(AbilityId.LARVATRAIN_DRONE)\n```\n\n----------------------------------------\n\nTITLE: Using UnitTypeId for Training Units in Python-SC2\nDESCRIPTION: Simplified approach for training units using UnitTypeId instead of AbilityId. This method automatically converts the UnitTypeId to the appropriate AbilityId required for training.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/docs_generate/text_files/introduction.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom sc2.ids.unit_typeid import UnitTypeId\n\nself.larva.random.train(UnitTypeId.DRONE)\n```\n\n----------------------------------------\n\nTITLE: Importing BotAI Class from sc2.bot_ai Module in Python\nDESCRIPTION: This code snippet shows how to import the BotAI class from the sc2.bot_ai module. The BotAI class contains helper functions, basic properties, and variables for creating a simple bot.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/docs_generate/bot_ai/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom sc2.bot_ai import BotAI\n```\n\n----------------------------------------\n\nTITLE: Using the API's train Function in Python-SC2\nDESCRIPTION: High-level approach for training units using the API's train function. This method automatically figures out where to build the unit from and handles cost and supply subtraction.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/docs_generate/text_files/introduction.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nself.train(UnitTypeId.DRONE, amount=1)\n```\n\n----------------------------------------\n\nTITLE: Determining Spawning Pool Placement in SC2 (Python)\nDESCRIPTION: Shows how to determine a position for placing a Spawning Pool, considering the map center and distance from the start location.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/docs_generate/text_files/introduction.rst#2025-04-23_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nmap_center = self.game_info.map_center\nplacement_position = self.start_location.towards(map_center, distance=5)\n```\n\n----------------------------------------\n\nTITLE: Training Units with Resource Management in Python-SC2\nDESCRIPTION: Alternative method for training a drone with explicit resource and supply management. This approach allows the bot to track resource changes before the API communication completes.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/docs_generate/text_files/introduction.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nself.larva.random(AbilityId.LARVATRAIN_DRONE, subtract_cost=True, subtract_supply=True)\n```\n\n----------------------------------------\n\nTITLE: Finding Valid Placement for Spawning Pool in SC2 (Python)\nDESCRIPTION: Demonstrates the use of self.find_placement function to find a valid position for placing a Spawning Pool, considering various constraints.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/docs_generate/text_files/introduction.rst#2025-04-23_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nmap_center = self.game_info.map_center\nposition_towards_map_center = self.start_location.towards(map_center, distance=5)\nplacement_position = await self.find_placement(UnitTypeId.SPAWNINGPOOL, near=position_towards_map_center, placement_step=1)\n# Can return None if no position was found\nif placement_position:\n```\n\n----------------------------------------\n\nTITLE: Checking for Existing Spawning Pools in SC2 (Python)\nDESCRIPTION: Shows how to check if a Spawning Pool already exists or is being built to prevent building duplicates.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/docs_generate/text_files/introduction.rst#2025-04-23_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nif self.already_pending(UnitTypeId.SPAWNINGPOOL) + self.structures.filter(lambda structure: structure.type_id == UnitTypeId.SPAWNINGPOOL and structure.is_ready).amount == 0:\n    # Build spawning pool\n```\n\n----------------------------------------\n\nTITLE: Selecting a Worker for Building in SC2 (Python)\nDESCRIPTION: Demonstrates different methods to select a worker for building, including random selection, closest worker, and filtering idle or collecting workers.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/docs_generate/text_files/introduction.rst#2025-04-23_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nmy_worker = self.workers.random\n```\n\nLANGUAGE: Python\nCODE:\n```\nmy_worker = self.workers.closest_to(placement_position)\n```\n\nLANGUAGE: Python\nCODE:\n```\nmy_worker = self.workers.filter(lambda worker: worker.is_collecting or worker.is_idle).random\n```\n\n----------------------------------------\n\nTITLE: Running SC2 Bot Matches in Docker Container\nDESCRIPTION: This command executes the runner script to start SC2 bot matches in the Docker container.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/docs_generate/text_files/docker.rst#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -i app uv run python /root/aiarena-client/arenaclient/run_local.py\n```\n\n----------------------------------------\n\nTITLE: Pulling Docker Image for SC2 Bot Environment\nDESCRIPTION: This command pulls the latest Docker image for running SC2 bots with Python 3.10 and SC2 version 4.10.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/docs_generate/text_files/docker.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull burnysc2/python-sc2-docker:release-python_3.10-sc2_4.10_arenaclient_burny\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Structure for Unit Class\nDESCRIPTION: ReStructuredText documentation structure that defines the toctree and autoclass directive for the Unit class documentation. Sets up automated documentation generation for the sc2.unit.Unit class and its members.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/docs_generate/unit/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n****************************\nunit.py\n****************************\n\n.. autoclass:: sc2.unit.Unit\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx toctree and autoclass directive for sc2.units.Units class\nDESCRIPTION: A Sphinx documentation structure that includes a table of contents tree directive and an autoclass directive to generate documentation for the Units class from the sc2.units module.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/docs_generate/units/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n****************************\nunits.py\n****************************\n\n.. autoclass:: sc2.units.Units\n   :members:\n```\n\n----------------------------------------\n\nTITLE: File References in Documentation\nDESCRIPTION: References to critical configuration files (run.py and ladderbots.json) that need to be modified for bot deployment.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/examples/competitive/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[run.py](run.py)\n[ladderbots.json](ladderbots.json)\n```\n\n----------------------------------------\n\nTITLE: Launching New Docker Container for SC2 Bots\nDESCRIPTION: This command launches a new Docker container in interactive mode for running SC2 bots.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/docs_generate/text_files/docker.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it -d --name app burnysc2/python-sc2-docker:release-python_3.10-sc2_4.10_arenaclient_burny\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Structure for sc2.game_info Module\nDESCRIPTION: This is a Sphinx toctree directive that sets up the documentation structure for the game_info.py module from the python-sc2 library. It defines how to document the Ramp and GameInfo classes using autoclass directives.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/docs_generate/game_info/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n****************************\ngame_info.py\n****************************\n\n.. autoclass:: sc2.game_info.Ramp\n   :members:\n.. autoclass:: sc2.game_info.GameInfo\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Point2 class in Python\nDESCRIPTION: This snippet references the Point2 class from the sc2.position module. It represents a 2D point in the game world.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/docs_generate/position/index.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: sc2.position.Point2\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Point3 class in Python\nDESCRIPTION: This snippet references the Point3 class from the sc2.position module. It represents a 3D point in the game world.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/docs_generate/position/index.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: sc2.position.Point3\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Copying Runner Script to Docker Container\nDESCRIPTION: This command copies a custom run script to the Docker container for executing bot matches.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/docs_generate/text_files/docker.rst#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker cp bat_files/docker/custom_run_local.py app:/root/aiarena-client/arenaclient/run_local.py\n```\n\n----------------------------------------\n\nTITLE: Copying Bot Files to Docker Container\nDESCRIPTION: This command copies the competitive example bot to the Docker container.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/docs_generate/text_files/docker.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker cp examples/competetive/. app:/root/StarCraftII/Bots/my_bot\n```\n\n----------------------------------------\n\nTITLE: Copying Match Results from Docker Container\nDESCRIPTION: These commands copy the results.json file and replay files from the Docker container to the host machine.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/docs_generate/text_files/docker.rst#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p temp\ndocker cp app:/root/aiarena-client/arenaclient/proxy/results.json temp/results.json\n\nmkdir -p temp/replays\ndocker cp app:/root/StarCraftII/Replays/. temp/replays\n```\n\n----------------------------------------\n\nTITLE: Documenting Size class in Python\nDESCRIPTION: This snippet references the Size class from the sc2.position module. It likely represents dimensions or extents in the game world.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/docs_generate/position/index.rst#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: sc2.position.Size\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Rect class in Python\nDESCRIPTION: This snippet references the Rect class from the sc2.position module. It represents a rectangle, likely used for defining areas or regions in the game world.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/docs_generate/position/index.rst#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: sc2.position.Rect\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for SC2 PixelMap Class\nDESCRIPTION: Sets up the documentation structure for the PixelMap class using Sphinx directives. It creates a table of contents and uses autoclass to automatically generate documentation for the PixelMap class and its members.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/docs_generate/pixel_map/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n****************************\npixel_map.py\n****************************\n\n.. autoclass:: sc2.pixel_map.PixelMap\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Documenting Pointlike class in Python\nDESCRIPTION: This snippet references the Pointlike class from the sc2.position module. It likely defines common methods for point-like objects.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/docs_generate/position/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: sc2.position.Pointlike\n   :members:\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation for SC2 UnitCommand Class\nDESCRIPTION: Sphinx documentation structure for the UnitCommand class from the python-sc2 library. It sets up a table of contents with maxdepth 2 and automates class documentation with the autoclass directive.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/docs_generate/unit_command/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n****************************\nunit_command.py\n****************************\n\n.. autoclass:: sc2.unit_command.UnitCommand\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Importing BotAIInternal Class from sc2.bot_ai_internal Module in Python\nDESCRIPTION: This code snippet demonstrates how to import the BotAIInternal class from the sc2.bot_ai_internal module. The BotAIInternal class likely contains internal implementation details for the bot AI.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/docs_generate/bot_ai/index.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom sc2.bot_ai_internal import BotAIInternal\n```\n\n----------------------------------------\n\nTITLE: Installing Bot Requirements in Docker Container\nDESCRIPTION: This command installs the 'burnysc2' dependencies in the Docker container using the 'uv' package manager.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/docs_generate/text_files/docker.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -i app uv add \"burnysc2>=0.12.12\"\n```\n\n----------------------------------------\n\nTITLE: Docker Cleanup Commands\nDESCRIPTION: These commands are used for cleaning up Docker resources, including removing containers, images, and pruning the system.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/docs_generate/text_files/docker.rst#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker rm -f $(docker ps -aq)\n\ndocker rmi $(docker images -q)\n\ndocker system prune --volumes\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for SC2 Protocol Class\nDESCRIPTION: This reStructuredText snippet sets up the documentation structure for the Protocol class in the sc2.protocol module. It uses a toctree directive to organize the documentation hierarchy and an autoclass directive to automatically generate class documentation.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/docs_generate/protocol/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n****************************\nprotocol.py\n****************************\n\n.. autoclass:: sc2.protocol.Protocol\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Structure with toctree\nDESCRIPTION: Sets up the documentation tree structure with a maximum depth of 2 levels for the client.py module documentation.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/docs_generate/client/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n```\n\n----------------------------------------\n\nTITLE: Documenting SC2 Client Class\nDESCRIPTION: Auto-generates documentation for the Client class from the sc2.client module, including all its member functions and attributes.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/docs_generate/client/index.rst#2025-04-23_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: sc2.client.Client\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Removing Previous Docker Container\nDESCRIPTION: This command removes a previously used Docker container named 'app'.\nSOURCE: https://github.com/burnysc2/python-sc2/blob/develop/docs_generate/text_files/docker.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it -d --name app test_image\n```"
  }
]