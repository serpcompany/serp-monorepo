[
  {
    "owner": "sylius",
    "repo": "sylius",
    "content": "TITLE: Creating an Address and Assigning it to an Order in Sylius PHP\nDESCRIPTION: This snippet demonstrates how to programmatically create a new address using Sylius factory, set its properties like name, company, location details, and finally assign it as a shipping address to an order. It shows the complete workflow from address creation to order assignment.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/customers/addresses/addresses.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/** @var AddressInterface $address */\n$address = $this->container->get('sylius.factory.address')->createNew();\n\n$address->setFirstName('Harry');\n$address->setLastName('Potter');\n$address->setCompany('Ministry of Magic');\n$address->setCountryCode('UK');\n$address->setProvinceCode('UKJ');\n$address->setCity('Little Whinging');\n$address->setStreet('4 Privet Drive');\n$address->setPostcode('000001');\n\n// and finally having the address you can assign it to any Order\n$order->setShippingAddress($address);\n```\n\n----------------------------------------\n\nTITLE: Creating a Product Variant in Sylius\nDESCRIPTION: Shows the process of creating a product variant using the ProductVariantFactory, setting its properties, and adding it to the repository. This is essential for products with different versions or configurations.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/products/products.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/** @var ProductVariantFactoryInterface $productVariantFactory **/\n$productVariantFactory = $this->get('sylius.factory.product_variant');\n\n/** @var ProductVariantInterface $productVariant */\n$productVariant = $productVariantFactory->createNew();\n```\n\nLANGUAGE: php\nCODE:\n```\n$productVariant->setName('Hardcover');\n$productVariant->setCode('1001');\n$productVariant->setPosition(1);\n$productVariant->setProduct($product);\n```\n\nLANGUAGE: php\nCODE:\n```\n/** @var RepositoryInterface $productVariantRepository */\n$productVariantRepository = $this->get('sylius.repository.product_variant');\n\n$productVariantRepository->add($productVariant);\n```\n\n----------------------------------------\n\nTITLE: Creating Paginator with Custom Criteria and Sorting in Sylius\nDESCRIPTION: This snippet demonstrates how to create a paginated collection with specific criteria and sorting options. It shows how to filter resources and sort them in a particular order while maintaining pagination functionality.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/architecture/resource-layer.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\npublic function myAction(Request $request)\n{\n    $repository = $this->container->get('sylius.repository.product');\n\n    $products = $repository->createPaginator(['foo' => true], ['createdAt' => 'desc']);\n    $products->setMaxPerPage(3);\n    $products->setCurrentPage($request->query->get('page', 1));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Product in Sylius\nDESCRIPTION: Demonstrates how to create a simple product using the ProductFactory and set its basic properties like name, code, and slug. The product is then added to the repository.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/products/products.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/** @var ProductFactoryInterface $productFactory **/\n$productFactory = $this->get('sylius.factory.product');\n\n/** @var ProductInterface $product */\n$product = $productFactory->createNew();\n```\n\nLANGUAGE: php\nCODE:\n```\n$product->setName('T-Shirt');\n$product->setCode('00001');\n$product->setSlug('t-shirt');\n\n/** @var RepositoryInterface $productRepository */\n$productRepository = $this->get('sylius.repository.product');\n\n$productRepository->add($product);\n```\n\n----------------------------------------\n\nTITLE: Authenticating a Customer to Obtain API Token\nDESCRIPTION: This command authenticates a customer by sending their credentials to obtain an authorization token. The token is required for accessing protected API endpoints.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/getting-started-with-sylius/using-api.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' \\\n    'https://master-ce.demo.sylius.com/api/v2/shop/customers/token' \\\n    -H 'accept: application/json' \\\n    -H 'Content-Type: application/json' \\\n    -d '{\n        \"email\": \"shop.user@example.com\",\n        \"password\": \"pa$$word\"\n    }'\n```\n\n----------------------------------------\n\nTITLE: Configuring Product Grid Search Filter in Sylius YAML\nDESCRIPTION: This YAML configuration sets up a basic string search filter for product names in the Sylius product grid. It allows searching for products by name using a 'contains' type search.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/products/search.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Sylius/Bundle/ShopBundle/Resources/config/grids/product.yml\nfilters:\n    search:\n        type: string\n        label: false\n        options:\n            fields: [translation.name]\n        form_options:\n            type: contains\n```\n\n----------------------------------------\n\nTITLE: Registering a Customer with Sylius API\nDESCRIPTION: This curl command registers a new customer by sending a POST request to the customers endpoint. It includes customer details like name, email, password and newsletter subscription preference.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/getting-started-with-sylius/using-api.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' \\\n    'https://master-ce.demo.sylius.com/api/v2/shop/customers' \\\n    -H 'accept: */*' \\\n    -H 'Content-Type: application/ld+json' \\\n    -d '{\n        \"firstName\": \"shop\",\n        \"lastName\": \"user\",\n        \"email\": \"shop.user@example.com\",\n        \"password\": \"pa$$word\",\n        \"subscribedToNewsletter\": true\n    }'\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Parcel Calculator in PHP\nDESCRIPTION: Creates a custom shipping calculator that calculates shipping costs based on the number of parcels needed for an order. Implements CalculatorInterface and includes methods for cost calculation and type identification.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/getting-started-with-sylius/customizing-business-logic.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n# src/ShippingCalculator/ParcelCalculator.php\n\ndeclare(strict_types=1);\n\nnamespace App\\ShippingCalculator;\n\nuse Sylius\\Component\\Shipping\\Calculator\\CalculatorInterface;\nuse Sylius\\Component\\Shipping\\Model\\ShipmentInterface;\n\nfinal class ParcelCalculator implements CalculatorInterface\n{\n    public function calculate(ShipmentInterface $subject, array $configuration): int\n    {\n        $parcelSize = $configuration['size'];\n        $parcelPrice = $configuration['price'];\n\n        $numberOfPackages = ceil($subject->getUnits()->count() / $parcelSize);\n\n        return (int) ($numberOfPackages * $parcelPrice);\n    }\n\n    public function getType(): string\n    {\n        return 'parcel';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Order with Factory in PHP\nDESCRIPTION: Initializes a new Order object using the order factory service. This is the first step in programmatically creating an order in Sylius.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/orders.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/** @var FactoryInterface $orderFactory */\n$orderFactory = $this->container->get('sylius.factory.order');\n\n/** @var OrderInterface $order */\n$order = $orderFactory->createNew();\n```\n\n----------------------------------------\n\nTITLE: Completing the Order Checkout Process\nDESCRIPTION: This final PATCH request completes the order checkout process. It requires the cart token and can include optional order notes. This transitions the order from cart state to a completed order state.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/getting-started-with-sylius/using-api.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'PATCH' \\\n  'https://master-ce.demo.sylius.com/api/v2/shop/orders/rl1KwtiSLA/complete' \\\n  -H 'accept: application/ld+json' \\\n  -H 'Authorization: Bearer token' \\\n  -H 'Content-Type: application/merge-patch+json' \\\n  -d '{\n    \"notes\": \"your note\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Catalog Promotion Action in PHP for Sylius\nDESCRIPTION: This code snippet demonstrates how to create a custom catalog promotion action class in Sylius. It includes the implementation of the CatalogPromotionActionInterface and shows how to apply the action to catalog items.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-cookbook-2.0/how-to-add-a-custom-catalog-promotion-action.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Promotion\\Action;\n\nuse Sylius\\Component\\Core\\Model\\ChannelPricingInterface;\nuse Sylius\\Component\\Promotion\\Model\\CatalogPromotionActionInterface;\n\nfinal class CustomAction implements CatalogPromotionActionInterface\n{\n    public function execute(ChannelPricingInterface $channelPricing, array $context = []): int\n    {\n        $appliedPromotion = $channelPricing->getAppliedPromotions();\n        if (!$appliedPromotion->isEmpty()) {\n            return 0;\n        }\n\n        $originalPrice = $channelPricing->getPrice();\n        $result = (int) round($originalPrice * 0.9);\n\n        return $originalPrice - $result;\n    }\n\n    public function getActionType(): string\n    {\n        return 'custom_action';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Product Variants from Options in Sylius\nDESCRIPTION: Demonstrates how to add options to a product and automatically generate variants based on those options using Sylius's variant generator service.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/products/products.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Assuming that you have a basic product let's add the previously created option to it.\n$product->addOption($option);\n\n// Having option of a product you can generate variants. Sylius has a service for that operation.\n/** @var ProductVariantGeneratorInterface $variantGenerator */\n$variantGenerator = $this->get('sylius.generator.product_variant');\n\n$variantGenerator->generate($product);\n\n// And finally add the product, with its newly generated variants to the repository.\n/** @var RepositoryInterface $productRepository */\n$productRepository = $this->get('sylius.repository.product');\n\n$productRepository->add($product);\n```\n\n----------------------------------------\n\nTITLE: Applying a Percentage Discount Promotion Manually in PHP\nDESCRIPTION: Shows how to create and apply a 10% discount promotion programmatically in Sylius, including creating the promotion, adding an action, and applying it to an order.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/cart-promotions.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/** @var PromotionInterface $promotion */\n$promotion = $this->container->get('sylius.factory.promotion')->createNew();\n$promotion->setCode('discount_10%');\n$promotion->setName('10% discount');\n\n/** @var PromotionActionFactoryInterface $actionFactory */\n$actionFactory = $this->container->get('sylius.factory.promotion_action');\n$action = $actionFactory->createPercentageDiscount(10);\n\n$promotion->addAction($action);\n$this->container->get('sylius.repository.promotion')->add($promotion);\n\n// Apply the promotion to an order\n$this->container->get('sylius.promotion_applicator')->apply($order, $promotion);\n```\n\n----------------------------------------\n\nTITLE: Modifying Order Item Quantity in PHP\nDESCRIPTION: Uses the OrderItemQuantityModifier service to set the quantity for an order item. This handles proper quantity adjustment and validation.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/orders.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$this->container->get('sylius.order_item_quantity_modifier')->modify($orderItem, 3);\n```\n\n----------------------------------------\n\nTITLE: Creating and Adding Payment to Order in PHP\nDESCRIPTION: Creates a new payment, assigns a payment method and currency code, then adds it to the order. This configures how the customer will pay for the order.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/orders.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n/** @var PaymentInterface $payment */\n$payment = $this->container->get('sylius.factory.payment')->createNew();\n\n$payment->setMethod($this->container->get('sylius.repository.payment_method')->findOneBy(['code' => 'offline']));\n$payment->setCurrencyCode($currencyCode);\n\n$order->addPayment($payment);\n```\n\n----------------------------------------\n\nTITLE: Processing Order with Order Processor in PHP\nDESCRIPTION: Uses the CompositeOrderProcessor to recalculate all aspects of the order including prices, promotions, and taxes. This is a crucial step after any changes to the order.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/orders.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$this->container->get('sylius.order_processing.order_processor')->process($order);\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment Programmatically in PHP\nDESCRIPTION: This snippet demonstrates how to create a new payment in Sylius and associate it with an order. It sets the order, currency code, and adds the payment to the repository.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/payments.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$payment = $this->container->get('sylius.factory.payment')->createNew();\n$payment->setOrder($order);\n$payment->setCurrencyCode('USD');\n$this->container->get('sylius.repository.payment')->add($payment);\n```\n\n----------------------------------------\n\nTITLE: Creating a Coupon-Based Promotion in Sylius\nDESCRIPTION: This snippet demonstrates how to create a new promotion, set it as coupon-based, and associate it with a specific channel in Sylius. It uses the promotion factory to create a new promotion instance and sets its basic properties.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/coupons.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/** @var PromotionInterface $promotion */\n$promotion = $this->container->get('sylius.factory.promotion')->createNew();\n\n$promotion->setCode('free_shipping');\n$promotion->setName('Free Shipping');\n\n// Set the promotion's channel\n$promotion->addChannel($this->container->get('sylius.repository.channel')->findOneBy(['code' => 'US_Web_Store']));\n\n$promotion->setCouponBased(true);\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating a New Address Object in PHP\nDESCRIPTION: This snippet demonstrates how to create a new Address object using Sylius's factory and populate it with customer details. It shows the process of setting various address fields like name, company, country, and postcode.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/customers/addresses/address-book.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/** @var AddressInterface $address */\n$address = $this->container->get('sylius.factory.address')->createNew();\n\n$address->setFirstName('Ronald');\n$address->setLastName('Weasley');\n$address->setCompany('Ministry of Magic');\n$address->setCountryCode('UK');\n$address->setProvinceCode('UKJ');\n$address->setCity('Otter St Catchpole');\n$address->setStreet('The Burrow');\n$address->setPostcode('000001');\n```\n\n----------------------------------------\n\nTITLE: Creating and Assigning Shipment to Order in PHP\nDESCRIPTION: Creates a new shipment, assigns a shipping method to it, and adds it to the order. This establishes how the order will be delivered.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/orders.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n/** @var ShipmentInterface $shipment */\n$shipment = $this->container->get('sylius.factory.shipment')->createNew();\n$shipment->setMethod($this->container->get('sylius.repository.shipping_method')->findOneBy(['code' => 'UPS']));\n$order->addShipment($shipment);\n```\n\n----------------------------------------\n\nTITLE: Creating a Customer Entity in PHP using Sylius Factory\nDESCRIPTION: This snippet demonstrates how to programmatically create a Customer entity using Sylius factory. It shows setting the required email field and adding the customer to the repository.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/customers/customer-and-shopuser.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/** @var CustomerInterface $customer */\n$customer = $this->container->get('sylius.factory.customer')->createNew();\n\n$customer->setEmail('customer@test.com');\n\n$this->container->get('sylius.repository.customer')->add($customer);\n```\n\n----------------------------------------\n\nTITLE: Creating Complete Catalog Promotion Programmatically in PHP\nDESCRIPTION: PHP code demonstrating how to create a fully configured catalog promotion with scopes, actions, and translations. It also shows how to dispatch the CatalogPromotionCreated event to ensure the promotion is applied to the catalog.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/products/catalog-promotions.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n/** @var CatalogPromotionInterface $catalogPromotion */\n$catalogPromotion = $this->container->get('sylius.factory.catalog_promotion')->createNew();\n$catalogPromotion->setCode('t_shirt_promotion');\n$catalogPromotion->setName('T-shirt Promotion');\n\n$catalogPromotion->setCurrentLocale('en_US');\n$catalogPromotion->setFallbackLocale('en_US');\n$catalogPromotion->setLabel('T-shirt Promotion');\n$catalogPromotion->setDescription('T-shirt Promotion description');\n\n$catalogPromotion->addChannel('FASHION_WEB');\n\n/** @var CatalogPromotionScopeInterface $catalogPromotionScope */\n$catalogPromotionScope = $this->container->get('sylius.factory.catalog_promotion_scope')->createNew();\n$catalogPromotionScope->setCatalogPromotion($catalogPromotion);\n$catalogPromotion->addScope($catalogPromotionScope);\n\n/** @var CatalogPromotionActionInterface $catalogPromotionAction */\n$catalogPromotionAction = $this->container->get('sylius.factory.catalog_promotion_action')->createNew();\n$catalogPromotionAction->setCatalogPromotion($catalogPromotion);\n$catalogPromotion->addAction($catalogPromotionAction);\n\n/** @var MessageBusInterface $eventBus */\n$eventBus = $this->container->get('sylius.event_bus');\n$eventBus->dispatch(new CatalogPromotionCreated($catalogPromotion->getCode()));\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Tax Calculator in Sylius (PHP)\nDESCRIPTION: This code demonstrates how to create a custom tax calculator in Sylius by implementing the CalculatorInterface. It includes methods for calculating taxes and specifying the calculator type.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/taxation.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\TaxCalculator;\n\nuse Sylius\\Component\\Taxation\\Calculator\\CalculatorInterface;\n\nclass CustomCalculator implements CalculatorInterface {\n    public function calculate($baseAmount, array $rateDetails): int {\n        // Custom calculation logic\n    }\n\n    public function getType(): string {\n        return 'custom_calculator';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Promotion in PHP\nDESCRIPTION: Demonstrates how to create a basic promotion using the promotion factory in Sylius. This snippet initializes a new promotion with a code and name.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/cart-promotions.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/** @var PromotionInterface $promotion */\n$promotion = $this->container->get('sylius.factory.promotion')->createNew();\n$promotion->setCode('simple_promotion_1');\n$promotion->setName('Simple Promotion');\n```\n\n----------------------------------------\n\nTITLE: Generating Multiple Coupons in Sylius\nDESCRIPTION: This snippet illustrates how to use the CouponGenerator service in Sylius to generate multiple coupons for a promotion. It retrieves a promotion, configures the coupon generator instruction with specific parameters, and generates 10 coupons with a prefix and suffix.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/coupons.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$promotion = $this->container->get('sylius.repository.promotion')->findOneBy(['code' => 'simple_promotion']);\n\n/** @var CouponGeneratorInterface $generator */\n$generator = $this->container->get('sylius.promotion_coupon_generator');\n\n/** @var PromotionCouponGeneratorInstructionInterface $instruction */\n$instruction = new PromotionCouponGeneratorInstruction();\n\n$instruction->setAmount(10); // Generate 10 coupons\n$instruction->setPrefix('NEW_YEAR_'); // Optional prefix\n$instruction->setSuffix('_SALE'); // Optional suffix\n\n$generator->generate($promotion, $instruction);\n```\n\n----------------------------------------\n\nTITLE: Applying a Coupon to an Order in Sylius\nDESCRIPTION: This code demonstrates how to apply a promotion coupon to an order in Sylius. It sets the promotion coupon on the order and then processes the order using the OrderProcessor to apply the promotion.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/coupons.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$order->setPromotionCoupon($coupon);\n$this->container->get('sylius.order_processing.order_processor')->process($order);\n```\n\n----------------------------------------\n\nTITLE: Creating a New Product Association Type in Sylius\nDESCRIPTION: Code for creating a new product association type with a specific code and name using Sylius factory and adding it to the repository.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/products/product-associations.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/** @var ProductAssociationTypeInterface $associationType */\n$associationType = $this->container->get('sylius.factory.product_association_type')->createNew();\n\n$associationType->setCode('accessories');\n$associationType->setName('Accessories');\n```\n\nLANGUAGE: php\nCODE:\n```\n$this->container->get('sylius.repository.product_association_type')->add($associationType);\n```\n\n----------------------------------------\n\nTITLE: Creating a New Adjustment in Sylius\nDESCRIPTION: This snippet demonstrates how to get the adjustment factory from the container and create a new adjustment instance. This is the first step in programmatically creating an adjustment in Sylius.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/adjustments.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/** @var AdjustmentInterface $adjustment */\n$adjustment = $this->container->get('sylius.factory.adjustment')->createNew();\n```\n\n----------------------------------------\n\nTITLE: Configuring States with Winzou State Machine in Sylius\nDESCRIPTION: This YAML configuration defines the states for the Order Checkout using Winzou State Machine. It specifies the entity class, property path, graph name, and all possible states in the checkout process.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/architecture/state-machine.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# CoreBundle/Resources/config/app/state_machine/sylius_order_checkout.yml\nwinzou_state_machine:\n    sylius_order_checkout:\n        class: \"%sylius.model.order.class%\"\n        property_path: checkoutState\n        graph: sylius_order_checkout\n        state_machine_class: \"%sylius.state_machine.class%\"\n        states:\n            cart: ~\n            addressed: ~\n            shipping_selected: ~\n            shipping_skipped: ~\n            payment_skipped: ~\n            payment_selected: ~\n            completed: ~\n```\n\n----------------------------------------\n\nTITLE: Extending ShippingMethod Model in PHP\nDESCRIPTION: Example of extending the Sylius ShippingMethod model to add an estimatedDeliveryTime field with Doctrine ORM configuration.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-models/README.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Entity\\Shipping;\n\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Sylius\\Component\\Core\\Model\\ShippingMethod as BaseShippingMethod;\nuse Sylius\\Component\\Core\\Model\\ShippingMethodInterface;\nuse Sylius\\Component\\Shipping\\Model\\ShippingMethodTranslationInterface;\n\n/**\n * @ORM\\Entity()\n * @ORM\\Table(name=\"sylius_shipping_method\")\n */\nclass ShippingMethod extends BaseShippingMethod implements ShippingMethodInterface\n{\n    /** @ORM\\Column(type=\"string\", nullable=true) */\n    private $estimatedDeliveryTime;\n\n    public function getEstimatedDeliveryTime(): ?string\n    {\n        return $this->estimatedDeliveryTime;\n    }\n\n    public function setEstimatedDeliveryTime(?string $estimatedDeliveryTime): void\n    {\n        $this->estimatedDeliveryTime = $estimatedDeliveryTime;\n    }\n\n    protected function createTranslation(): ShippingMethodTranslationInterface\n    {\n        return new ShippingMethodTranslation();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Translations Programmatically in Sylius\nDESCRIPTION: Code example demonstrating how to programmatically add a new translation to a translatable resource. This example shows finding a product, creating a translation with locale-specific content, and saving the changes.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/architecture/translations.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Find a product to add a translation to it\n\n/** @var ProductInterface $product */\n$product = $this->container->get('sylius.repository.product')->findOneBy(['code' => 'radiohead-mug-code']);\n\n// Create a new translation of the product, give it a translated name, and slug in the chosen locale\n\n/** @var ProductTranslation $translation */\n$translation = new ProductTranslation();\n\n$translation->setLocale('pl_PL');\n$translation->setName('Kubek Radiohead');\n$translation->setSlug('kubek-radiohead');\n\n// Add the translation to your product\n$product->addTranslation($translation);\n\n// Remember to save the product after adding the translation\n$this->container->get('sylius.manager.product')->flush();\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment Method Programmatically in PHP\nDESCRIPTION: This code demonstrates how to create a payment method with an 'offline' gateway and assign it a code. The payment method is then added to the repository for persistence.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/payments.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$paymentMethod = $this->container->get('sylius.factory.payment_method')->createWithGateway('offline');\n$paymentMethod->setCode('ALFA1');\n$this->container->get('sylius.repository.payment_method')->add($paymentMethod);\n```\n\n----------------------------------------\n\nTITLE: Adding Customer Address to Order\nDESCRIPTION: This command adds billing and shipping addresses to the order during checkout. If no shipping address is provided, the billing address is used for both. It requires address details and country code.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/getting-started-with-sylius/using-api.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'PATCH' \\\n  'https://master-ce.demo.sylius.com/api/v2/shop/orders/rl1KwtiSLA/address' \\\n  -H 'accept: application/ld+json' \\\n  -H 'Authorization: Bearer token' \\\n  -H 'Content-Type: application/merge-patch+json' \\\n  -d '{\n    \"email\": \"shop.user@example.com\",\n    \"billingAddress\": {\n        \"city\": \"California\",\n        \"street\": \"Coral str\",\n        \"postcode\": \"90210\",\n        \"countryCode\": \"US\",\n        \"firstName\": \"David\",\n        \"lastName\": \"Copperfield\"\n      }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Creating Product Options and Values in Sylius\nDESCRIPTION: Illustrates how to create product options (like color) and their corresponding values. This is useful for products with multiple variations based on specific attributes.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/products/products.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/** @var ProductOptionInterface $option */\n$option = $this->get('sylius.factory.product_option')->createNew();\n$option->setCode('t_shirt_color');\n$option->setName('T-Shirt Color');\n\n// Prepare an array with values for your option, with codes, locale code and option values.\n$valuesData = [\n    'OV1' => ['locale' => 'en_US', 'value' => 'Red'],\n    'OV2' => ['locale' => 'en_US', 'value' => 'Blue'],\n    'OV3' => ['locale' => 'en_US', 'value' => 'Green'],\n];\n\nforeach ($valuesData as $code => $values) {\n    /** @var ProductOptionValueInterface $optionValue */\n    $optionValue = $this->get('sylius.factory.product_option_value')->createNew();\n\n    $optionValue->setCode($code);\n    $optionValue->setFallbackLocale($values['locale']);\n    $optionValue->setCurrentLocale($values['locale']);\n    $optionValue->setValue($values['value']);\n\n    $option->addValue($optionValue);\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting a Shipping Method for Order\nDESCRIPTION: This PATCH request selects a shipping method for the order by updating the shipment object. It requires the cart token, shipment ID, and the shipping method IRI obtained from the previous order details request.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/getting-started-with-sylius/using-api.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'PATCH' \\\n  'https://master-ce.demo.sylius.com/api/v2/shop/orders/rl1KwtiSLA/shipments/17768' \\\n  -H 'accept: application/ld+json' \\\n  -H 'Authorization: Bearer token' \\\n  -H 'Content-Type: application/merge-patch+json' \\\n  -d '{\n    \"shippingMethod\": \"/api/v2/shop/shipping-methods/ups\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Persisting Customer Changes in Sylius using PHP\nDESCRIPTION: This snippet demonstrates how to persist changes made to a customer's address book in Sylius. It uses the customer manager to flush the changes to the database, ensuring the new address is saved.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/customers/addresses/address-book.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$this->container->get('sylius.manager.customer')->flush();\n```\n\n----------------------------------------\n\nTITLE: Adding Address to Customer's Address Book in PHP\nDESCRIPTION: This code snippet shows how to find a customer by email and add a newly created address to their address book. It uses Sylius's customer repository to locate the customer and then adds the address to their collection.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/customers/addresses/address-book.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$customer = $this->container->get('sylius.repository.customer')->findOneBy(['email' => 'ron.weasley@magic.com']);\n\n$customer->addAddress($address);\n```\n\n----------------------------------------\n\nTITLE: Assigning Channel to Order in PHP\nDESCRIPTION: Sets the channel for an order by retrieving it from the channel context. The channel determines pricing, available products, and other shop-specific configurations.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/orders.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/** @var ChannelInterface $channel */\n$channel = $this->container->get('sylius.context.channel')->getChannel();\n\n$order->setChannel($channel);\n```\n\n----------------------------------------\n\nTITLE: Creating a Promotion Rule for Cart Quantity in PHP\nDESCRIPTION: Shows how to create a promotion rule that requires at least 5 items in the cart using the PromotionRuleFactory in Sylius.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/cart-promotions.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/** @var PromotionRuleFactoryInterface $ruleFactory */\n$ruleFactory = $this->container->get('sylius.factory.promotion_rule');\n$quantityRule = $ruleFactory->createCartQuantity('5');\n$promotion->addRule($quantityRule);\n```\n\n----------------------------------------\n\nTITLE: Creating Catalog Promotion Programmatically in PHP\nDESCRIPTION: PHP code demonstrating how to create a basic catalog promotion using Sylius' factory service. This creates a promotion with only a name and code, which requires further configuration to be useful.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/products/catalog-promotions.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n/** @var CatalogPromotionInterface $promotion */\n$promotion = $this->container->get('sylius.factory.catalog_promotion')->createNew();\n\n$promotion->setCode('t_shirt_promotion');\n$promotion->setName('T-shirt Promotion');\n```\n\n----------------------------------------\n\nTITLE: Creating a Fixed Discount Promotion Action in PHP\nDESCRIPTION: Illustrates how to create a promotion action for a fixed discount of $10 using the PromotionActionFactory in Sylius.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/cart-promotions.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/** @var PromotionActionFactoryInterface $actionFactory */\n$actionFactory = $this->container->get('sylius.factory.promotion_action');\n$action = $actionFactory->createFixedDiscount(10);\n$promotion->addAction($action);\n```\n\n----------------------------------------\n\nTITLE: Creating a Tax Rate in Sylius (PHP)\nDESCRIPTION: This snippet illustrates the process of programmatically creating a Tax Rate in Sylius. It sets various properties of the tax rate, including its code, name, amount, calculator, zone, and category.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/taxation.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/** @var TaxRateInterface $taxRate */\n$taxRate = $this->container->get('sylius.factory.tax_rate')->createNew();\n$taxRate->setCode('7%');\n$taxRate->setName('7%');\n$taxRate->setAmount(0.07);\n$taxRate->setCalculator('default');\n\n/** Get a Zone from the repository */\n$zone = $this->container->get('sylius.repository.zone')->findOneBy(['code' => 'US']);\n$taxRate->setZone($zone);\n\n/** Get a Tax Category from the repository */\n$taxCategory = $this->container->get('sylius.repository.tax_category')->findOneBy(['code' => 'alcohol']);\n$taxRate->setCategory($taxCategory);\n\n$this->container->get('sylius.repository.tax_rate')->add($taxRate);\n```\n\n----------------------------------------\n\nTITLE: Saving a Promotion to Repository in PHP\nDESCRIPTION: Demonstrates how to save a configured promotion to the repository in Sylius after setting up rules and actions.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/cart-promotions.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$this->container->get('sylius.repository.promotion')->add($promotion);\n```\n\n----------------------------------------\n\nTITLE: Configuring Sylius Twig Hooks in YAML\nDESCRIPTION: YAML configuration showing the default hook setup for product show page summary section, including various components like header, prices, and add to cart functionality.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-templates.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nsylius_twig_hooks:\n    hooks:\n        'sylius_shop.product.show.content.info.summary':\n            header:\n                template: '@SyliusShop/product/show/content/info/summary/header.html.twig'\n                priority: 500\n            average_rating:\n                template: '@SyliusShop/product/show/content/info/summary/average_rating.html.twig'\n                priority: 400\n            prices:\n                template: '@SyliusShop/product/show/content/info/summary/prices.html.twig'\n                priority: 300\n            catalog_promotions:\n                template: '@SyliusShop/product/show/content/info/summary/catalog_promotions.html.twig'\n                priority: 200\n            add_to_cart:\n                component: 'sylius_shop:product:add_to_cart_form'\n                props:\n                    product: '@=_context.product'\n                    template: '@SyliusShop/product/show/content/info/summary/add_to_cart.html.twig'\n                priority: 100\n            short_description:\n                template: '@SyliusShop/product/show/content/info/summary/short_description.html.twig'\n                priority: 0\n```\n\n----------------------------------------\n\nTITLE: Creating a Shipping Method Programmatically in Sylius\nDESCRIPTION: Demonstrates how to create a new shipping method in Sylius code, setting properties like code, calculator type, configuration, and zone assignment.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/shipments.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$shippingMethod = $this->container->get('sylius.factory.shipping_method')->createNew();\n$shippingMethod->setCode('DHL');\n$shippingMethod->setCalculator(DefaultCalculators::FLAT_RATE);\n$shippingMethod->setConfiguration(['channel_code' => ['amount' => 50]]);\n\n$zone = $this->container->get('sylius.repository.zone')->findOneByCode('US');\n$shippingMethod->setZone($zone);\n\n$this->container->get('sylius.repository.shipping_method')->add($shippingMethod);\n```\n\n----------------------------------------\n\nTITLE: Configuring Sylius Resource for Supplier\nDESCRIPTION: YAML configuration to register the Supplier entity as a Sylius resource with appropriate class mappings.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-models/how-to-add-a-custom-model.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsylius_resource:\n    resources:\n        app.supplier:\n            driver: doctrine/orm\n            classes:\n                model: App\\Entity\\Supplier\n                repository: App\\Repository\\SupplierRepository\n```\n\n----------------------------------------\n\nTITLE: Selecting a Payment Method for Order\nDESCRIPTION: This PATCH request selects a payment method for the order. It requires the cart token, payment ID, and the payment method IRI obtained from the order details.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/getting-started-with-sylius/using-api.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'PATCH' \\\n  'https://master-ce.demo.sylius.com/api/v2/shop/orders/{cartToken}/payments/{paymentId}' \\\n  -H 'accept: application/ld+json' \\\n  -H 'Authorization: Bearer token' \\\n  -H 'Content-Type: application/merge-patch+json' \\\n  -d '{\n    \"paymentMethod\": \"/api/v2/shop/payment-methods/cash_on_delivery\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Locales in Sylius\nDESCRIPTION: Shows how to get all available locales for the current user using the Locale Provider service. This service returns locale codes based on the configured availability logic.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/configuration/locales.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function fooAction()\n{\n    $locales = $this->get('sylius.locale_provider')->getAvailableLocalesCodes();\n\n    foreach ($locales as $locale) {\n        echo $locale;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Order Confirmation Emails with EmailManager\nDESCRIPTION: Example showing how to send order confirmation emails using Sylius's OrderEmailManagerInterface.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/architecture/e-mails.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/** @var OrderEmailManagerInterface $sender */\n$orderEmailManager = $this->container->get('sylius.email_manager.order');\n\n$orderEmailManager->sendConfirmationEmail($order);\n```\n\n----------------------------------------\n\nTITLE: Creating Order Item and Setting Variant in PHP\nDESCRIPTION: Creates a new order item using the factory and assigns a product variant to it. This represents a specific product being added to the order.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/orders.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n/** @var OrderItemInterface $orderItem */\n$orderItem = $this->container->get('sylius.factory.order_item')->createNew();\n$orderItem->setVariant($variant);\n```\n\n----------------------------------------\n\nTITLE: Finding All Matching Zones for an Address in Sylius\nDESCRIPTION: This snippet shows how to retrieve all zones that match a given address, not just the most suitable one, using the ZoneMatcher service's matchAll method.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/customers/addresses/zones.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n/** @var ZoneMatcherInterface $zoneMatcher */\n$zoneMatcher = $this->get('sylius.zone_matcher');\n$zones = $zoneMatcher->matchAll($user->getAddress());\n```\n\n----------------------------------------\n\nTITLE: Configuring Callbacks with Winzou State Machine in Sylius\nDESCRIPTION: This YAML configuration defines callbacks for the Order Checkout using Winzou State Machine. It configures the 'sylius_process_cart' callback to be executed after specific transitions, specifying the service, method, arguments and priority.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/architecture/state-machine.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# CoreBundle/Resources/config/app/state_machine/sylius_order_checkout.yml\nwinzou_state_machine:\n     sylius_order_checkout:\n          callbacks:\n               # callbacks may be called before or after specified transitions, in the checkout state machine we've got callbacks only after transitions\n               after:\n                    sylius_process_cart:\n                        on: [\"select_shipping\", \"address\", \"select_payment\", \"skip_shipping\", \"skip_payment\"]\n                        do: [\"@sylius.order_processing.order_processor\", \"process\"]\n                        args: [\"object\"]\n                        priority: -200\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring a Product Association in Sylius\nDESCRIPTION: Code for creating a new product association and setting its association type from the repository.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/products/product-associations.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/** @var ProductAssociationInterface $association */\n$association = $this->container->get('sylius.factory.product_association')->createNew();\n\n/** @var ProductAssociationTypeInterface $associationType */\n$associationType = $this->container->get('sylius.repository.product_association_type')->findOneBy(['code' => 'accessories']);\n\n$association->setType($associationType);\n```\n\n----------------------------------------\n\nTITLE: Creating a ShopUser Entity in PHP with Sylius Factory\nDESCRIPTION: This code snippet shows how to create a ShopUser entity programmatically using Sylius factory. It includes finding an existing Customer, assigning it to the ShopUser, setting a password, and adding the user to the repository.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/customers/customer-and-shopuser.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/** @var ShopUserInterface $user */\n$user = $this->container->get('sylius.factory.shop_user')->createNew();\n\n// Now let's find a Customer by their e-mail:\n/** @var CustomerInterface $customer */\n$customer = $this->container->get('sylius.repository.customer')->findOneBy(['email' => 'customer@test.com']);\n\n// and assign it to the ShopUser\n$user->setCustomer($customer);\n$user->setPlainPassword('pswd');\n\n$this->container->get('sylius.repository.shop_user')->add($user);\n```\n\n----------------------------------------\n\nTITLE: Example JWT Token Response\nDESCRIPTION: This code snippet shows the structure of the JWT token response.  The response contains the token, which must be included in the header of each subsequent API request for authentication.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/src/Sylius/Bundle/ApiBundle/docs/authorization.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"token\": \"VERY_SECURE_TOKEN\"}\n```\n\n----------------------------------------\n\nTITLE: Creating a Tax Category in Sylius (PHP)\nDESCRIPTION: This snippet demonstrates how to programmatically create a new Tax Category in Sylius. It uses the container to access the factory and repository services for tax categories.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/taxation.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/** @var TaxCategoryInterface $taxCategory */\n$taxCategory = $this->container->get('sylius.factory.tax_category')->createNew();\n$taxCategory->setCode('taxable_goods');\n$taxCategory->setName('Taxable Goods');\n$this->container->get('sylius.repository.tax_category')->add($taxCategory);\n```\n\n----------------------------------------\n\nTITLE: Creating a Translatable Entity in Sylius\nDESCRIPTION: Implementation of a Supplier entity that uses TranslatableTrait to handle translations. This example shows how to properly initialize the translations collection and implement getters/setters that delegate to the translation entity.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/architecture/translations.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Entity;\n\nuse Sylius\\Component\\Resource\\Model\\TranslatableInterface;\nuse Sylius\\Component\\Resource\\Model\\TranslatableTrait;\n\nclass Supplier implements TranslatableInterface\n{\n    use TranslatableTrait {\n        __construct as private initializeTranslationsCollection;\n    }\n\n    public function __construct()\n    {\n        $this->initializeTranslationsCollection();\n    }\n\n    /**\n     * @return string\n     */\n    public function getName()\n    {\n        return $this->getTranslation()->getName();\n    }\n\n    /**\n     * @param string $name\n     */\n    public function setName($name)\n    {\n        $this->getTranslation()->setName($name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Discount Actions for Catalog Promotions in JSON\nDESCRIPTION: JSON configuration showing how to define percentage discount actions for a catalog promotion. This example applies a 50% discount to all products within the defined scope.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/products/catalog-promotions.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    //...\n    \"actions\": [\n        {\n            \"type\": \"percentage_discount\",\n            \"configuration\": {\n                \"amount\": 0.5 //float\n            }\n        }\n    ]\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Resource Repositories in Sylius\nDESCRIPTION: This snippet demonstrates how to use the Repository service which shares the API with standard Doctrine ObjectRepository. It shows how to find resources by ID, by custom criteria, or retrieve all resources of a particular type.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/architecture/resource-layer.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\npublic function myAction()\n{\n    $repository = $this->container->get('sylius.repository.product');\n\n    $product = $repository->find(4); // Get product with id 4, returns null if not found.\n    $product = $repository->findOneBy(['slug' => 'my-super-product']); // Get one product by defined criteria.\n\n    $products = $repository->findAll(); // Load all the products!\n    $products = $repository->findBy(['special' => true]); // Find products matching some custom criteria.\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Emails with Sylius Sender Interface\nDESCRIPTION: Example demonstrating how to send emails programmatically using Sylius's SenderInterface. Shows sending a verification email with user, channel and locale parameters.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/architecture/e-mails.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/** @var SenderInterface $sender */\n$sender = $this->container->get('sylius.email_sender');\n\n$sender->send(\\Sylius\\Bundle\\UserBundle\\Mailer\\Emails::EMAIL_VERIFICATION_TOKEN, ['sylius@example.com'], ['user' => $user, 'channel' => $channel, 'localeCode' => $localeCode]);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Supplier Entity Class\nDESCRIPTION: Implementation of a Supplier entity class that implements Sylius ResourceInterface for compatibility with the platform.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-models/how-to-add-a-custom-model.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Entity;\n\nuse Sylius\\Component\\Resource\\Model\\ResourceInterface;\n\nclass Supplier implements ResourceInterface\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Catalog Promotion via API (cURL)\nDESCRIPTION: cURL command for creating a minimal catalog promotion via the Sylius API. This creates a promotion with only a name and code, requiring authentication as an admin user.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/products/catalog-promotions.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' \\\n  'https://hostname/api/v2/admin/catalog-promotions' \\\n  -H 'accept: application/ld+json' \\\n  -H 'Authorization: Bearer authorizationToken' \\\n  -H 'Content-Type: application/ld+json' \\\n  -d '{\n    \"code\": \"t_shirt_promotion\",\n    \"name\": \"T-shirt Promotion\"\n    }'\n```\n\n----------------------------------------\n\nTITLE: Adding an Adjustment to an Order in Sylius\nDESCRIPTION: This snippet shows how to add a configured adjustment to an order object. This associates the adjustment with the specific order where it will be applied.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/adjustments.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$order->addAdjustment($adjustment);\n```\n\n----------------------------------------\n\nTITLE: Adding an Association to a Product in Sylius\nDESCRIPTION: Code for adding a configured association to a product object.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/products/product-associations.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$product->addAssociation($association);\n```\n\n----------------------------------------\n\nTITLE: Assigning a Taxon to a Product in Sylius (PHP)\nDESCRIPTION: This code example shows the process of creating a product and a taxon, then associating them using a ProductTaxon object. It includes creating the necessary objects, setting their properties, and persisting the changes to the database.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/products/taxons.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/** @var ProductInterface $product */\n$product = $this->container->get('sylius.factory.product')->createNew();\n$product->setCode('product_test');\n$product->setName('Test');\n\n/** @var TaxonInterface $taxon */\n$taxon = $this->container->get('sylius.factory.taxon')->createNew();\n$taxon->setCode('food');\n$taxon->setName('Food');\n\n/** @var RepositoryInterface $taxonRepository */\n$taxonRepository = $this->container->get('sylius.repository.taxon');\n$taxonRepository->add($taxon);\n\n\n/** @var ProductTaxonInterface $productTaxon */\n$productTaxon = $this->container->get('sylius.factory.product_taxon')->createNew();\n$productTaxon->setTaxon($taxon);\n$productTaxon->setProduct($product);\n\n$product->addProductTaxon($productTaxon);\n\n/** @var EntityManagerInterface $productManager */\n$productManager = $this->container->get('sylius.manager.product');\n\n$productManager->persist($product);\n$productManager->flush();\n```\n\n----------------------------------------\n\nTITLE: Assigning Customer to Order in PHP\nDESCRIPTION: Retrieves a customer from the repository by email and assigns it to the order. Every order must be associated with a customer.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/orders.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/** @var CustomerInterface $customer */\n$customer = $this->container->get('sylius.repository.customer')->findOneBy(['email' => 'shop@example.com']);\n\n$order->setCustomer($customer);\n```\n\n----------------------------------------\n\nTITLE: Creating a Nested Taxon in Sylius (PHP)\nDESCRIPTION: This code shows how to create a child taxon and add it to a parent taxon, forming a category tree. It assumes the parent taxon has already been created.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/products/taxons.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/** @var TaxonInterface $childTaxon */\n$childTaxon = $taxonFactory->createNew();\n\n$childTaxon->setCode('clothes');\n$childTaxon->setName('Clothes');\n\n$taxon->addChild($childTaxon);\n```\n\n----------------------------------------\n\nTITLE: Transitioning Shipment State Using State Machine in PHP\nDESCRIPTION: Uses the state machine factory to apply shipping transitions to the order. This moves the order through the shipping workflow from request to completion.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/orders.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$stateMachineFactory = $this->container->get('sm.factory');\n\n$stateMachine = $stateMachineFactory->get($order, OrderShippingTransitions::GRAPH);\n$stateMachine->apply(OrderShippingTransitions::TRANSITION_REQUEST_SHIPPING);\n$stateMachine->apply(OrderShippingTransitions::TRANSITION_SHIP);\n\n$this->container->get('sylius.manager.order')->flush();\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Promotion Rule Checker Service in YAML for Sylius\nDESCRIPTION: This YAML configuration registers the custom HasTaxonRule checker as a service in Sylius. It sets the class and tags it as a promotion rule checker.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-cookbook-2.0/how-to-add-a-custom-cart-promotion-rule.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    app.promotion_rule_checker.has_taxon:\n        class: App\\Promotion\\Rule\\HasTaxonRule\n        tags:\n            - { name: sylius.promotion_rule_checker, type: has_taxon, form_type: Sylius\\Bundle\\TaxonomyBundle\\Form\\Type\\TaxonAutocompleteChoiceType, label: Has taxon }\n```\n\n----------------------------------------\n\nTITLE: Accessing Currency Context in PHP\nDESCRIPTION: Demonstrates how to access the currently used currency through the CurrencyContext service in a Sylius controller.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/configuration/currencies.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function fooAction()\n{\n    $currency = $this->get('sylius.context.currency')->getCurrency();\n}\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Keys for JWT in Sylius\nDESCRIPTION: This code snippet provides the commands to generate private and public SSH keys for JWT authentication in a Sylius project. It uses OpenSSL to generate a 4096-bit RSA key, encrypts it with AES256, and then extracts the public key.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/src/Sylius/Bundle/ApiBundle/docs/authorization.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genpkey -out config/jwt/private.pem -aes256 -algorithm rsa -pkeyopt rsa_keygen_bits:4096\nopenssl pkey -in config/jwt/private.pem -out config/jwt/public.pem -pubout\n```\n\n----------------------------------------\n\nTITLE: Changing ShopUser Password in PHP with Sylius\nDESCRIPTION: This snippet demonstrates how to change the password of an existing ShopUser entity in Sylius. It shows the use of the setPlainPassword() method to update the password.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/customers/customer-and-shopuser.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user->getPassword(); // returns encrypted password - 'pswd'\n\n$user->setPlainPassword('resu1');\n// the password will now be 'resu1' and will become encrypted while saving the user in the database\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Promotion Rule in YAML for Sylius\nDESCRIPTION: This YAML configuration adds the custom 'has_taxon' rule to Sylius promotion rules. It specifies the form type, label, and validator for the rule.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-cookbook-2.0/how-to-add-a-custom-cart-promotion-rule.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsylius_promotion:\n    rules:\n        has_taxon:\n            form_type: Sylius\\Bundle\\TaxonomyBundle\\Form\\Type\\TaxonAutocompleteChoiceType\n            type: has_taxon\n            label: Has taxon\n            validator: \\App\\Promotion\\Validator\\Rule\\HasTaxonValidator\n```\n\n----------------------------------------\n\nTITLE: Configuring Transitions with Symfony Workflow in Sylius\nDESCRIPTION: This YAML configuration defines the 'address' transition for the Order Checkout workflow using Symfony Workflow. It specifies the possible source states and the target state for the transition.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/architecture/state-machine.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# CoreBundle/Resources/config/app/workflow/sylius_order_checkout.yaml\nframework:\n    workflows:\n        !php/const Sylius\\Component\\Core\\OrderCheckoutTransitions::GRAPH:            \n            transitions:\n                !php/const Sylius\\Component\\Core\\OrderCheckoutTransitions::TRANSITION_ADDRESS:\n                    from: \n                        - !php/const Sylius\\Component\\Core\\OrderCheckoutStates::STATE_CART\n                        - !php/const Sylius\\Component\\Core\\OrderCheckoutStates::STATE_ADDRESSED\n                        - !php/const Sylius\\Component\\Core\\OrderCheckoutStates::STATE_SHIPPING_SELECTED\n                        - !php/const Sylius\\Component\\Core\\OrderCheckoutStates::STATE_SHIPPING_SKIPPED\n                        - !php/const Sylius\\Component\\Core\\OrderCheckoutStates::STATE_PAYMENT_SELECTED\n                        - !php/const Sylius\\Component\\Core\\OrderCheckoutStates::STATE_PAYMENT_SKIPPED\n                    to: !php/const Sylius\\Component\\Core\\OrderCheckoutStates::STATE_ADDRESSED\n```\n\n----------------------------------------\n\nTITLE: Sending Order Confirmation Email with EmailSender in Sylius API\nDESCRIPTION: This code snippet demonstrates how emails are sent in the SendOrderConfirmationHandler. The email sender uses the OrderConfirmation email template and passes the order details, channel, and locale code as context variables.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/adr/2020_11_18_sending_emails_via_api.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->emailSender->send(\n    Emails::ORDER_CONFIRMATION_RESENT,\n    [$order->getCustomer()->getEmail()],\n    [\n        'order' => $order,\n        'channel' => $order->getChannel(),\n        'localeCode' => $order->getLocaleCode(),\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Adding an Attribute to a Product in Sylius\nDESCRIPTION: This code shows how to find a product by its code and add an attribute to it.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/products/attributes.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/** @var ProductInterface $product */\n$product = $this->container->get('sylius.repository.product')->findOneBy(['code' => 'code']);\n\n$product->addAttribute($hardcover);\n```\n\n----------------------------------------\n\nTITLE: Adding Item to Order in PHP\nDESCRIPTION: Adds the created and configured order item to the order. This associates the product with the order and prepares it for processing.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/orders.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$order->addItem($orderItem);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Translation Entity in Sylius\nDESCRIPTION: Example of a SupplierTranslation entity class that extends AbstractTranslation. This class holds the translatable fields (in this case 'name') and provides getters and setters for those fields.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/architecture/translations.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Entity;\n\nuse Sylius\\Component\\Resource\\Model\\AbstractTranslation;\n\nclass SupplierTranslation extends AbstractTranslation\n{\n    /**\n     * @var string\n     */\n    protected $name;\n\n    /**\n     * @return string\n     */\n    public function getName()\n    {\n        return $this->name;\n    }\n\n    /**\n     * @param string $name\n     */\n    public function setName($name)\n    {\n        $this->name = $name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Country and Province Objects Using Factories in Sylius\nDESCRIPTION: This snippet demonstrates how to use Sylius factories to create new Country and Province objects. It initializes empty objects that can be configured later.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/customers/addresses/countries.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/** @var CountryInterface $country */\n$country = $this->container->get('sylius.factory.country')->createNew();\n\n/** @var ProvinceInterface $province */\n$province = $this->container->get('sylius.factory.province')->createNew();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Product Variant for Order Item in PHP\nDESCRIPTION: Fetches a product variant from the repository to be used in an order item. Product variants represent specific versions of products that can be purchased.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/orders.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/** @var ProductVariantInterface $variant */\n$variant = $this->container->get('sylius.repository.product_variant')->findOneBy([]);\n```\n\n----------------------------------------\n\nTITLE: Saving a Taxon in Sylius (PHP)\nDESCRIPTION: This snippet demonstrates how to save a taxon to the database using Sylius' taxon repository. When the parent taxon is saved, all its child taxons are automatically saved as well.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/products/taxons.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/** @var TaxonRepositoryInterface $taxonRepository */\n$taxonRepository = $this->get('sylius.repository.taxon');\n\n$taxonRepository->add($taxon);\n```\n\n----------------------------------------\n\nTITLE: Persisting a Country to the Database in Sylius\nDESCRIPTION: This snippet demonstrates how to retrieve the country repository from the container and use it to persist the newly created country object to the database.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/customers/addresses/countries.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/** @var RepositoryInterface $countryRepository */\n$countryRepository = $this->get('sylius.repository.country');\n\n$countryRepository->add($country);\n```\n\n----------------------------------------\n\nTITLE: Adding a Product Variant to Cart\nDESCRIPTION: This PATCH request adds a product variant to the customer's cart. It requires the product variant's IRI and the desired quantity. The cart is identified by its token value in the URL.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/getting-started-with-sylius/using-api.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'PATCH' \\\n  'https://master-ce.demo.sylius.com/api/v2/shop/orders/rl1KwtiSLA/items' \\\n  -H 'accept: application/ld+json' \\\n  -H 'Authorization: Bearer token' \\\n  -H 'Content-Type: application/merge-patch+json' \\\n  -d '{\n    \"productVariant\": \"/api/v2/shop/product-variants/Everyday_white_basic_T_Shirt-variant-0\",\n    \"quantity\": 1\n  }'\n```\n\n----------------------------------------\n\nTITLE: Setting Zone Properties in Sylius\nDESCRIPTION: This snippet demonstrates how to set the basic properties of a zone including code, name, and type. The example configures a United Kingdom zone as a province type.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/customers/addresses/zones.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$zone->setCode('GB');\n$zone->setName('United Kingdom');\n// available types are the type constants from the ZoneInterface\n$zone->setType(ZoneInterface::TYPE_PROVINCE);\n```\n\n----------------------------------------\n\nTITLE: Completed Order Response with Order States\nDESCRIPTION: Example response showing the order state after successful completion. The response includes the order's checkout state, payment state, and shipping state indicating the order has been successfully placed.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/getting-started-with-sylius/using-api.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n{\n    # Orders body\n    \"currencyCode\": \"USD\",\n    \"localeCode\": \"en_US\",\n    \"checkoutState\": \"completed\",\n    \"paymentState\": \"awaiting_payment\",\n    \"shippingState\": \"ready\",\n    # Orders body\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Provinces to a Country Using Collection in Sylius\nDESCRIPTION: This snippet demonstrates how to create an ArrayCollection, add a province to it, and then set the collection of provinces on a country object.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/customers/addresses/countries.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$provinces = new ArrayCollection();\n$provinces->add($province);\n\n$country->setProvinces($provinces);\n```\n\n----------------------------------------\n\nTITLE: Adding a Shipping Method to a Channel in Sylius\nDESCRIPTION: Shows how to add a shipping method to a specific channel to make it available during checkout.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/shipments.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$channel = $this->container->get('sylius.repository.channel')->findOneByCode('channel_code');\n$channel->addShippingMethod($shippingMethod);\n```\n\n----------------------------------------\n\nTITLE: Adding a Promotion Action for Free Shipping in Sylius\nDESCRIPTION: This snippet shows how to add a promotion action to a promotion in Sylius. It creates a 100% shipping discount action using the promotion action factory and adds it to the promotion. Finally, it saves the promotion to the repository.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/coupons.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/** @var PromotionActionFactoryInterface $actionFactory */\n$actionFactory = $this->container->get('sylius.factory.promotion_action');\n\n// Use a float for percentage discounts (1 = 100%, 0.1 = 10%)\n$action = $actionFactory->createShippingPercentageDiscount(1);\n\n$promotion->addAction($action);\n\n// Save the promotion to the repository\n$this->container->get('sylius.repository.promotion')->add($promotion);\n```\n\n----------------------------------------\n\nTITLE: Defining Address Collection on Customer Entity in PHP\nDESCRIPTION: This code snippet shows the definition of the addresses collection on the Customer entity in Sylius. It demonstrates how customer addresses are stored as a collection of AddressInterface objects.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/customers/addresses/address-book.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Customer {\n    /**\n     * @var Collection|AddressInterface[]\n     */\n    protected $addresses;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Cart for a Customer\nDESCRIPTION: This command creates a new cart (order) for an authenticated customer. It allows specifying an optional locale code, which defaults to the channel's default locale if not provided.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/getting-started-with-sylius/using-api.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' \\\n  'https://master-ce.demo.sylius.com/api/v2/shop/orders' \\\n  -H 'accept: application/ld+json' \\\n  -H 'Content-Type: application/ld+json' \\\n  -H 'Authorization: Bearer token' \\\n  -d '{\n        # \"localeCode\": \"string\" (optional)\n  }'\n```\n\n----------------------------------------\n\nTITLE: Matching an Address to a Zone in Sylius\nDESCRIPTION: This snippet demonstrates how to use the ZoneMatcher service to find the most suitable zone for a given address. This is commonly used for shipping and tax calculations.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/customers/addresses/zones.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/** @var ZoneMatcherInterface $zoneMatcher */\n$zoneMatcher = $this->get('sylius.zone_matcher');\n$zone = $zoneMatcher->match($user->getAddress());\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Resource Creation Route in Sylius\nDESCRIPTION: This YAML configuration shows how to customize the resource creation action with a custom form type, template, factory method, and redirection settings. It demonstrates the flexibility of Sylius resource controllers for handling creation workflows.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/architecture/resource-layer.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# config/routes.yaml\napp_product_create:\n    path: /my-stores/{store}/products/new\n    methods: [GET, POST]\n    defaults:\n        _controller: sylius.controller.product:createAction\n        _sylius:\n            form: AppStoreBundle/Form/Type/CustomFormType # Use this form type!\n            template: AppStoreBundle:Product:create.html.twig # Use a custom template.\n            factory:\n                method: createForStore # Use a custom factory method to create a product.\n                arguments: [$store] # Pass the store name from the url.\n            redirect:\n                route: app_product_index # Redirect the user to their products.\n                parameters: [$store]\n```\n\n----------------------------------------\n\nTITLE: Setting Locale and Currency for Order in PHP\nDESCRIPTION: Assigns the locale code and currency code to the order using context services. This determines the language and currency used for the order.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/orders.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/** @var string $localeCode */\n$localeCode = $this->container->get('sylius.context.locale')->getLocaleCode();\n\n$order->setLocaleCode($localeCode);\n\n$currencyCode = $this->container->get('sylius.context.currency')->getCurrencyCode();\n$order->setCurrencyCode($currencyCode);\n```\n\n----------------------------------------\n\nTITLE: Creating a Product Review Programmatically in Sylius\nDESCRIPTION: This code demonstrates how to programmatically create and add a product review in Sylius. It shows how to create a review, set its properties, assign an author, link it to a product, and save it to the repository.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/products/product-reviews.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/** @var ReviewInterface $review */\n$review = $this->container->get('sylius.factory.product_review')->createNew();\n```\n\nLANGUAGE: php\nCODE:\n```\n$review->setTitle('My Review');\n$review->setRating(5);\n$review->setComment('This product is really great');\n```\n\nLANGUAGE: php\nCODE:\n```\n$customer = $this->container->get('sylius.repository.customer')->findOneBy(['email' => 'john.doe@test.com']);\n\n$review->setAuthor($customer);\n```\n\nLANGUAGE: php\nCODE:\n```\n$review->setReviewSubject($product);\n\n$this->container->get('sylius.repository.product_review')->add($review);\n```\n\n----------------------------------------\n\nTITLE: Creating a Zone with Members in Sylius\nDESCRIPTION: This snippet shows how to create a new zone with province members using the zone factory. The example creates a United Kingdom zone with its constituent countries.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/customers/addresses/zones.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/** @var ZoneInterface $zone */\n$zone = $zoneFactory->createWithMembers(['GB_ENG', 'GB_NIR', 'GB_SCT'. 'GB_WLS']);\n```\n\n----------------------------------------\n\nTITLE: Assigning an AttributeValue to an Attribute in Sylius\nDESCRIPTION: This snippet demonstrates how to attach an AttributeValue to an Attribute and set its value.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/products/attributes.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$hardcover->setAttribute($attribute);\n\n$hardcover->setValue('hardcover');\n```\n\n----------------------------------------\n\nTITLE: Adding a Payment Method to a Channel in PHP\nDESCRIPTION: This snippet shows how to add a payment method to a channel in Sylius, which makes the payment method available for use within that channel.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/payments.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$paymentMethod->addChannel($channel);\n```\n\n----------------------------------------\n\nTITLE: Adding a Single Province to a Country in Sylius\nDESCRIPTION: This snippet shows the simplified method to add a single province directly to a country without creating a collection first.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/customers/addresses/countries.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$country->addProvince($province);\n```\n\n----------------------------------------\n\nTITLE: Defining Admin Routes for Supplier\nDESCRIPTION: YAML configuration for setting up administrative routes to manage Supplier entities.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-models/how-to-add-a-custom-model.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napp_admin_supplier:\n    resource: |\n        alias: app.supplier\n        section: admin\n        templates: \"@SyliusAdmin\\\\shared\\\\crud\"\n        redirect: update\n        grid: app_admin_supplier\n        vars:\n            all:\n                subheader: app.ui.supplier\n            index:\n                icon: 'file image outline'\n    type: sylius.resource\n    prefix: /admin\n```\n\n----------------------------------------\n\nTITLE: Setting a Tax Category on a Product Variant in Sylius (PHP)\nDESCRIPTION: This code shows how to assign a Tax Category to a ProductVariant in Sylius. It retrieves both the tax category and product variant from their respective repositories and sets the relationship.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/taxation.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/** @var TaxCategoryInterface $taxCategory */\n$taxCategory = $this->container->get('sylius.repository.tax_category')->findOneBy(['code' => 'taxable_goods']);\n\n/** @var ProductVariantInterface $variant */\n$variant = $this->container->get('sylius.repository.product_variant')->findOneBy(['code' => 'mug']);\n$variant->setTaxCategory($taxCategory);\n```\n\n----------------------------------------\n\nTITLE: Finding Products by Taxon in Sylius\nDESCRIPTION: Code for finding a taxon by code and retrieving all products that belong to it.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/products/product-associations.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/** @var TaxonInterface $taxon */\n$taxon = $this->container->get('sylius.repository.taxon')->findOneBy(['code' => 'sd-cards']);\n\n$associatedProducts = $this->container->get('sylius.repository.product')->findByTaxon($taxon);\n```\n\n----------------------------------------\n\nTITLE: Adding Products to an Association in Sylius\nDESCRIPTION: Code that iterates through a collection of products and adds them to a product association.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/products/product-associations.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nforeach ($associatedProducts as $associatedProduct) {\n    $association->addAssociatedProduct($associatedProduct);\n}\n```\n\n----------------------------------------\n\nTITLE: Locking an Adjustment in Sylius\nDESCRIPTION: This snippet shows how to lock an adjustment to prevent it from being removed during recalculations. This is useful for preserving adjustments like expired promotions that should still be applied to the order.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/adjustments.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$adjustment->lock();\n```\n\n----------------------------------------\n\nTITLE: Introducing New Hooks in Twig Template\nDESCRIPTION: This code demonstrates how to introduce a new hook into a Twig template using the `hook` expression. This hook allows content to be injected into a specific location within the template. The configuration for this hook must be defined in a YAML file.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-templates.md#2025-04-21_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n\"<!-- Template content -->\\n<div id=\\\"container\\\">\\n    {% hook 'hook_name' %}\\n</div>\\n<!-- Additional content -->\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Single Taxon in Sylius (PHP)\nDESCRIPTION: This snippet demonstrates how to create a single, non-nested taxon using Sylius' factory and setting its code and name. It requires access to Sylius' taxon factory.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/products/taxons.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/** @var FactoryInterface $taxonFactory */\n$taxonFactory = $this->get('sylius.factory.taxon');\n\n/** @var TaxonInterface $taxon */\n$taxon = $taxonFactory->createNew();\n\n$taxon->setCode('category');\n$taxon->setName('Category');\n```\n\n----------------------------------------\n\nTITLE: Disabling Sylius Components via Routes Configuration in YAML\nDESCRIPTION: This YAML configuration demonstrates how to disable specific Sylius components by setting their routes to false. You can disable the shop, admin interface, or API by modifying the appropriate parameters in your config/routes.yaml file.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-cookbook-2.0/how-to-disable-the-default-shop-admin-or-api-of-sylius.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config/routes.yaml\nsynfony_cmf_routing:\n    resource: .\n    type: directory\n\n# To disable the shop\n# sylius_shop:\n#     resource: \"@SyliusShopBundle/Resources/config/routing.yml\"\n#     prefix: /{_locale}\n#     requirements:\n#         _locale: ^[a-z]{2}(?:_[A-Z]{2})?$\n\n# To disable the admin\nsynfony_cmf_routing:\n    resource: .\n    type: directory\n\n# To disable the API\n# sylius_api:\n#     resource: \"@SyliusApiBundle/Resources/config/routing.yml\"\n#     prefix: /api\n```\n\n----------------------------------------\n\nTITLE: Displaying Currency Values in Twig Templates\nDESCRIPTION: Shows how to import and use Sylius money macros in Twig templates to properly format and display monetary values with currency symbols.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/configuration/currencies.md#2025-04-21_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n..\n{% import \"@SyliusShop/Common/Macro/money.html.twig\" as money %}\n..\n\n<span class=\"price\">{{ money.format(price, 'EUR') }}</span>\n```\n\n----------------------------------------\n\nTITLE: Saving Order to Repository in PHP\nDESCRIPTION: Persists the created order to the database using the order repository. This finalizes the order creation process in the system.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/orders.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n/** @var OrderRepositoryInterface $orderRepository */\n$orderRepository = $this->container->get('sylius.repository.order');\n\n$orderRepository->add($order);\n```\n\n----------------------------------------\n\nTITLE: Removing API Endpoint - YAML Configuration\nDESCRIPTION: Demonstrates how to remove specific API endpoints from Sylius using YAML configuration. Example shows removal of the shipping endpoint.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-api.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsylius_api:\n    operations_to_remove:\n        - 'sylius_api_shop_order_shipment_patch'\n```\n\n----------------------------------------\n\nTITLE: Switching Channel Currency in PHP\nDESCRIPTION: Demonstrates how to change the currency used by a channel using the currency storage service.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/configuration/currencies.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$container->get('sylius.storage.currency')->set($channel, 'PLN');\n```\n\n----------------------------------------\n\nTITLE: Managing Resources with Doctrine ObjectManager in Sylius\nDESCRIPTION: This snippet shows how to use the Manager service which is an alias to Doctrine's ObjectManager. It demonstrates basic operations like removing entities, persisting new ones, and flushing changes to the database.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/architecture/resource-layer.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\npublic function myAction()\n{\n    $manager = $this->container->get('sylius.manager.product');\n\n    // Assuming that the $product1 exists in the database we can perform such operations:\n    $manager->remove($product1);\n\n    // If we have created the $product2 using a factory, we can persist it in the database.\n    $manager->persist($product2);\n\n    // Before performing a flush, the changes we have made, are not saved. There is only the $product1 in the database.\n    $manager->flush(); // Saves changes in the database.\n\n    //After these operations we have only $product2 in the database. The $product1 has been removed.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Product Variant Scopes for Catalog Promotions in JSON\nDESCRIPTION: JSON configuration showing how to set up scopes that define which product variants are affected by the promotion. This example applies the promotion to specific product variants identified by their codes.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/products/catalog-promotions.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    //...\n    \"scopes\": [\n        {\n            \"type\": \"for_variants\",\n            \"configuration\": {\n                \"variants\": [\n                    \"Everyday_white_basic_T_Shirt-variant-1\", //Variant Code\n                    \"Everyday_white_basic_T_Shirt-variant-4\"\n                ]\n            }\n        }\n    ]\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Product Quantity in Cart\nDESCRIPTION: This PATCH request updates the quantity of a specific item already in the cart. It requires the cart token and the order item ID to identify which product's quantity to change.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/getting-started-with-sylius/using-api.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'PATCH' \\\n  'https://master-ce.demo.sylius.com/api/v2/shop/orders/OPzFiAWefi/items/59782' \\\n  -H 'accept: application/ld+json' \\\n  -H 'Authorization: Bearer token' \\\n  -H 'Content-Type: application/merge-patch+json' \\\n  -d '{\n    \"quantity\": 3\n  }'\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Repository Class\nDESCRIPTION: Extension of Sylius EntityRepository for the Supplier entity to provide database interaction functionality.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-models/how-to-add-a-custom-model.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Repository;\n\nuse Sylius\\Bundle\\ResourceBundle\\Doctrine\\ORM\\EntityRepository;\n\nclass SupplierRepository extends EntityRepository\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Workflow Listeners in Symfony Workflow with XML\nDESCRIPTION: This XML configuration registers the ProcessCartListener service and attaches it to specific workflow events in the Order Checkout process. It defines the service dependencies and tags it with appropriate event listeners.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/architecture/state-machine.md#2025-04-21_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<!-- src/Sylius/Bundle/CoreBundle/Resources/config/services/listeners/workflow/order_checkout.xml -->\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<container xmlns=\"http://symfony.com/schema/dic/services\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd\">\n    <services>\n        <defaults public=\"false\" />\n\n        <service id=\"Sylius\\Bundle\\CoreBundle\\EventListener\\Workflow\\OrderCheckout\\ProcessCartListener\">\n            <argument type=\"service\" id=\"sylius.order_processing.order_processor\" />\n            <tag name=\"kernel.event_listener\" event=\"workflow.sylius_order_checkout.completed.address\" priority=\"-200\"/>\n            <tag name=\"kernel.event_listener\" event=\"workflow.sylius_order_checkout.completed.select_shipping\"  priority=\"-200\"/>\n            <tag name=\"kernel.event_listener\" event=\"workflow.sylius_order_checkout.completed.skip_shipping\" priority=\"-200\"/>\n            <tag name=\"kernel.event_listener\" event=\"workflow.sylius_order_checkout.completed.select_payment\" priority=\"-200\"/>\n            <tag name=\"kernel.event_listener\" event=\"workflow.sylius_order_checkout.completed.skip_payment\" priority=\"-200\"/>\n        </service>\n[...]\n```\n\n----------------------------------------\n\nTITLE: Configuring States with Symfony Workflow in Sylius\nDESCRIPTION: This YAML configuration defines the states for the Order Checkout workflow using Symfony Workflow. It specifies the marking store, supported entity, initial state, and all possible states in the checkout process.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/architecture/state-machine.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# CoreBundle/Resources/config/app/workflow/sylius_order_checkout.yaml\nframework:\n    workflows:\n        !php/const Sylius\\Component\\Core\\OrderCheckoutTransitions::GRAPH:\n            type: state_machine\n            marking_store:\n                type: method\n                property: checkoutState\n            supports:\n                - Sylius\\Component\\Core\\Model\\OrderInterface\n            initial_marking: !php/const Sylius\\Component\\Core\\OrderCheckoutStates::STATE_CART\n            places:\n                - !php/const Sylius\\Component\\Core\\OrderCheckoutStates::STATE_CART\n                - !php/const Sylius\\Component\\Core\\OrderCheckoutStates::STATE_ADDRESSED\n                - !php/const Sylius\\Component\\Core\\OrderCheckoutStates::STATE_SHIPPING_SELECTED\n                - !php/const Sylius\\Component\\Core\\OrderCheckoutStates::STATE_SHIPPING_SKIPPED\n                - !php/const Sylius\\Component\\Core\\OrderCheckoutStates::STATE_PAYMENT_SELECTED\n                - !php/const Sylius\\Component\\Core\\OrderCheckoutStates::STATE_PAYMENT_SKIPPED\n                - !php/const Sylius\\Component\\Core\\OrderCheckoutStates::STATE_COMPLETED\n```\n\n----------------------------------------\n\nTITLE: API Request for Updating Cart Quantity\nDESCRIPTION: cURL command to update the quantity of an item in the cart via the Sylius API.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/getting-started-with-sylius/customizing-business-logic.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request PATCH 'https://your-shop-url.com/api/v2/shop/orders/CART_TOKEN/items/ORDER_ITEM_ID' --header 'Content-Type: application/merge-patch+json' --data-raw '{\n    \"quantity\": 4\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking a Coupon to a Promotion in Sylius\nDESCRIPTION: This code creates a new coupon using the promotion coupon factory and associates it with an existing promotion. It sets the coupon code and adds it to the promotion.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/coupons.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/** @var CouponInterface $coupon */\n$coupon = $this->container->get('sylius.factory.promotion_coupon')->createNew();\n\n$coupon->setCode('FREESHIPPING');\n\n$promotion->addCoupon($coupon);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Logo Template in Twig\nDESCRIPTION: Twig template code for displaying the custom logo using Symfony's asset function.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/getting-started-with-sylius/customizing-the-shop.md#2025-04-21_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ asset('build/app/shop/images/logo.25de7998.png', 'app.shop') }}\" alt=\"Logo\"/>\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Tax Calculator in Sylius (YAML)\nDESCRIPTION: This YAML configuration shows how to register a custom tax calculator as a service in Sylius. It tags the service with 'sylius.tax_calculator' to integrate it into the Sylius taxation system.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/taxation.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    app.tax_calculator.custom_calculator:\n        class: App\\TaxCalculator\\CustomCalculator\n        tags:\n            - { name: sylius.tax_calculator }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Currencies for a Channel in PHP\nDESCRIPTION: Shows how to get the list of currently available currencies for a given channel by accessing the Channel object and its currencies collection.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/configuration/currencies.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function fooAction()\n{\n    // If you don't have it, you can get the current channel from the container\n    $channel = $this->container->get('sylius.context.channel')->getChannel();\n\n    $currencies = $channel->getCurrencies();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding New Permission to ACL in YAML Configuration\nDESCRIPTION: This snippet shows how to add a new permission to the Access Control Layer by configuring it in the _sylius.yaml file. It defines a new permission with parent, label, and enabled status.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/customers/adminuser.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/_sylius.yaml\n# ...\n\nsylius_plus:\n    permissions:\n        # Each permission must have a unique id, if you want the route to be protected, as id you need to enter the name route.\n        app_admin_product_import:\n            parent: data_transfer # Here, specify parent in the permission tree.\n            label: product_import # Here, specify the name that will be displayed in the admin panel.\n            enabled: true # Here you specify whether the permission is to be active, this field is not required, by default is set to true.\n```\n\n----------------------------------------\n\nTITLE: Adding Permission in Route Definition YAML\nDESCRIPTION: This example demonstrates how to add a permission directly within a route definition in the sylius_admin.yaml file, specifying parent, label, and enabled status.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/customers/adminuser.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config/routes/sylius_admin.yaml\n# ...\n\napp_admin_product_import:\n    path: /admin/products/import\n    methods: [GET]\n    defaults:\n        _sylius_plus_rbac:\n            parent: data_transfer\n            label: product_import\n            enabled: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Inventory Source Stocks Using YAML Fixtures in Sylius Plus\nDESCRIPTION: This code snippet shows how to add stock to a specific inventory source using YAML fixtures. It associates products from selected taxons and channels to the Frankfurt warehouse, allowing for targeted stock management.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/products/multi-source-inventory.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstocks_in_frankfurt_warehouse:\n    inventory_source: 'frankfurt_warehouse'\n    products_from:\n        taxons_codes:\n            - 'caps'\n            - 'dresses'\n        channels_codes:\n            - 'HOME_WEB'\n            - 'FASHION_WEB'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Product Variants from the API\nDESCRIPTION: This command retrieves a paginated list of product variants from the shop API. It includes details like variant ID, code, price, and stock status needed for adding products to cart.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/getting-started-with-sylius/using-api.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'GET' \\\n  'https://master-ce.demo.sylius.com/api/v2/shop/product-variants?page=1&itemsPerPage=30' \\\n  -H 'accept: application/ld+json' \\\n  -H 'Authorization: Bearer token'\n```\n\n----------------------------------------\n\nTITLE: Configuring Adjustment Properties in Sylius\nDESCRIPTION: This code demonstrates how to set the type, amount, neutral status, and label for a Sylius adjustment. The type is set as a promotion adjustment, with an amount of 200 in the base currency, and configured to affect the order total.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/adjustments.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$adjustment->setType(AdjustmentInterface::ORDER_PROMOTION_ADJUSTMENT);\n$adjustment->setAmount(200); // Amount in base currency\n$adjustment->setNeutral(false); // Affects the total\n$adjustment->setLabel('Test Promotion Adjustment');\n```\n\n----------------------------------------\n\nTITLE: Assigning a Customer Pool to a Channel in PHP\nDESCRIPTION: This PHP code snippet shows how to assign a Customer Pool to a Channel programmatically. It assumes you have a $channel object from a repository and a $customerPool object created previously.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/customers/customer-pools.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// given that you have a $channel from repository, and a $customerPool just created above\n\n$channel->setCustomerPool($customerPool);\n```\n\n----------------------------------------\n\nTITLE: Implementing Capture Payment Request Handler in PHP\nDESCRIPTION: Creates a handler class to process the capture payment request command, including custom capture logic and state machine transitions.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-payments/how-to-integrate-a-payment-gateway-as-a-plugin.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\SyliusExamplePlugin\\CommandHandler;\n\nuse Acme\\SyliusExamplePlugin\\Command\\CapturePaymentRequest;\nuse Sylius\\Abstraction\\StateMachine\\StateMachineInterface;\nuse Sylius\\Bundle\\PaymentBundle\\Provider\\PaymentRequestProviderInterface;\nuse Sylius\\Component\\Payment\\PaymentRequestTransitions;\nuse Symfony\\Component\\Messenger\\Attribute\\AsMessageHandler;\n\n#[AsMessageHandler]\nfinal readonly class CapturePaymentRequestHandler\n{\n    public function __construct(\n        private PaymentRequestProviderInterface $paymentRequestProvider,\n        private StateMachineInterface $stateMachine,\n    ) {}\n\n    public function __invoke(CapturePaymentRequest $capturePaymentRequest): void\n    {\n        // Retrieve the current PaymentRequest based on the hash provided in the CapturePaymentRequest command\n        $paymentRequest = $this->paymentRequestProvider->provide($capturePaymentRequest);\n\n        // Custom capture logic for the payment provider would go here.\n        // Example: communicating with the payment gateway API to capture funds.\n\n        // Mark the PaymentRequest as complete|process|fail|cancel.\n        $this->stateMachine->apply(\n            $paymentRequest,\n            PaymentRequestTransitions::GRAPH,\n            PaymentRequestTransitions::TRANSITION_COMPLETE\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an AdminUser Programmatically in PHP\nDESCRIPTION: This snippet demonstrates how to create a new AdminUser entity programmatically using the factory pattern. It includes setting up the email and password, then adding the user to the repository.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/customers/adminuser.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/** @var AdminUserInterface $admin */\n$admin = $this->container->get('sylius.factory.admin_user')->createNew();\n\n$admin->setEmail('administrator@test.com');\n$admin->setPlainPassword('pswd');\n\n$this->container->get('sylius.repository.admin_user')->add($admin);\n```\n\n----------------------------------------\n\nTITLE: Registering Shipping Calculator Service in YAML\nDESCRIPTION: Service configuration to register the custom ParcelCalculator as a Sylius shipping calculator service.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/getting-started-with-sylius/customizing-business-logic.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    app.shipping_calculator.parcel:\n        class: App\\ShippingCalculator\\ParcelCalculator\n        tags:\n            - { name: sylius.shipping_calculator }\n```\n\n----------------------------------------\n\nTITLE: Modifying Existing Permission in YAML Configuration\nDESCRIPTION: This snippet shows how to modify an existing permission by overriding its configuration in the _sylius.yaml file, changing the parent and label properties.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/customers/adminuser.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/_sylius.yaml\n# ...\n\nsylius_plus:\n    permissions:\n        sylius_admin_order_payment_complete:\n            parent: orders_shop\n            label: order_payment_complete\n```\n\n----------------------------------------\n\nTITLE: Product Variant Response Example\nDESCRIPTION: Example of a product variant object returned by the API. It contains details such as the variant ID, code, price, stock status, and translations that are needed for displaying and ordering products.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/getting-started-with-sylius/using-api.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// ...\n{\n  \"@id\": \"/api/v2/shop/product-variants/Everyday_white_basic_T_Shirt-variant-0\",\n  \"@type\": \"ProductVariant\",\n  \"id\": 123889,\n  \"code\": \"Everyday_white_basic_T_Shirt-variant-0\",\n  \"product\": \"/api/v2/shop/products/Everyday_white_basic_T_Shirt\",\n  \"optionValues\": [\n    \"/api/v2/shop/product-option-values/t_shirt_size_s\"\n  ],\n  \"translations\": {\n    \"en_US\": {\n      \"@id\": \"/api/v2/shop/product-variant-translations/123889\",\n      \"@type\": \"ProductVariantTranslation\",\n      \"id\": 123889,\n      \"name\": \"S\",\n      \"locale\": \"en_US\"\n    }\n  },\n  \"price\": 6420,\n  \"originalPrice\": 6420,\n  \"inStock\": true\n}\n// ...\n```\n\n----------------------------------------\n\nTITLE: Completing Payment Using State Machine in PHP\nDESCRIPTION: Applies payment transitions using the state machine to move the payment from requested to paid state. This updates the payment status and consequently the order's payment state.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/orders.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$stateMachineFactory = $this->container->get('sm.factory');\n\n$stateMachine = $stateMachineFactory->get($order, OrderPaymentTransitions::GRAPH);\n$stateMachine->apply(OrderPaymentTransitions::TRANSITION_REQUEST_PAYMENT);\n$stateMachine->apply(OrderPaymentTransitions::TRANSITION_PAY);\n\n$this->container->get('sylius.manager.order')->flush();\n```\n\n----------------------------------------\n\nTITLE: Configuring Gateway Command Provider in YAML\nDESCRIPTION: Sets up a command provider service for handling payment request actions.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-payments/how-to-integrate-a-payment-gateway-as-a-plugin.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nacme.sylius_example.command_provider.sylius_payment:\n    class: Sylius\\Bundle\\PaymentBundle\\CommandProvider\\ActionsCommandProvider\n    arguments:\n        - !tagged_locator\n            tag: acme.sylius_example.command_provider.sylius_payment\n            index_by: 'action'\n    tags:\n        - name: sylius.payment_request.command_provider\n          gateway_factory: 'sylius_payment'\n```\n\n----------------------------------------\n\nTITLE: Payment State Machine Transitions in YAML\nDESCRIPTION: This YAML configuration defines the possible transitions between different payment states in Sylius. It shows how payments can move through states such as cart, new, processing, authorized, completed, failed, cancelled, and refunded.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/payments.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntransitions:\n    create:\n        from: [cart]\n        to: new\n    process:\n        from: [new]\n        to: processing\n    authorize:\n        from: [new, processing]\n        to: authorized\n    complete:\n        from: [new, processing, authorized]\n        to: completed\n    fail:\n        from: [new, processing]\n        to: failed\n    cancel:\n        from: [new, processing, authorized]\n        to: cancelled\n    refund:\n        from: [completed]\n        to: refunded\n```\n\n----------------------------------------\n\nTITLE: Persisting a Zone in Sylius\nDESCRIPTION: This snippet shows how to save a newly created zone to the database by retrieving the zone repository and using its add method.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/customers/addresses/zones.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/** @var RepositoryInterface $zoneRepository */\n$zoneRepository = $this->container->get('sylius.repository.zone');\n\n$zoneRepository->add($zone);\n```\n\n----------------------------------------\n\nTITLE: Configuring Capture Action Command Provider in YAML\nDESCRIPTION: Defines a service for the capture action command provider.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-payments/how-to-integrate-a-payment-gateway-as-a-plugin.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nacme.sylius_example.command_provider.sylius_payment.capture:\n    class: Acme\\SyliusExamplePlugin\\CommandProvider\\CapturePaymentRequestCommandProvider\n    tags:\n        - name: acme.sylius_example.command_provider.sylius_payment\n          action: !php/const Sylius\\Component\\Payment\\Model\\PaymentRequestInterface::ACTION_CAPTURE\n```\n\n----------------------------------------\n\nTITLE: Command Pattern Approach for Ship Operation\nDESCRIPTION: Example of implementing a ship operation using the command pattern approach, where the operation is treated as a separate resource with a POST request to a noun-based endpoint.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/adr/2020_05_13_handling_non_crud_operations_in_api.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tracking_code\": \"XYZ\"\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Shipping Cost in Sylius\nDESCRIPTION: Demonstrates how to use the shipping calculator service to calculate the cost of a shipment.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/shipments.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$shippingCalculator = $this->container->get('sylius.shipping_calculator');\n$cost = $shippingCalculator->calculate($shipment);\n```\n\n----------------------------------------\n\nTITLE: Configuring Inventory Sources Using YAML Fixtures in Sylius Plus\nDESCRIPTION: This code snippet demonstrates how to create an inventory source (warehouse) using YAML fixtures in Sylius Plus. It defines a Hamburg warehouse with a specific code, name, priority level, and assigns it to multiple sales channels.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/products/multi-source-inventory.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhamburg_warehouse:\n   code: 'hamburg_warehouse'\n   name: 'Hamburg Warehouse'\n   priority: 10\n   channels:\n      - 'HOME_WEB'\n      - 'FASHION_WEB'\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailer Service via Environment Variable\nDESCRIPTION: Example configuration for the mailer service using environment variables. This example shows how to set up Gmail as the email provider with username and password authentication.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/installation/sylius-ce-installation/README.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nMAILER_URL=gmail://username:password@local\n```\n\n----------------------------------------\n\nTITLE: Creating a Customer Pool Programmatically in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to create a Customer Pool programmatically using a factory. It sets the required 'code' and 'name' fields before adding the pool to the repository.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/customers/customer-pools.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/** @var CustomerPoolInterface $customerPool */\n$customerPool = $this->container->get('sylius_plus.factory.customer_pool')->createNew();\n\n$customerPool->setCode('HOME_POOL');\n$customerPool->setName('Home Pool');\n\n$this->container->get('sylius_plus.repository.customer_pool')->add($customerPool);\n```\n\n----------------------------------------\n\nTITLE: Modifying Permission in Route Definition YAML\nDESCRIPTION: This example shows how to modify permissions for an existing route by overriding its definition in the sylius_admin.yaml file, changing the RBAC configuration.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/customers/adminuser.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# config/routes/sylius_admin.yaml\n# ...\n\nsylius_admin_order_payment_complete:\n    path: /admin/orders/{orderId}/payments/{id}/complete\n    methods: [PUT]\n    defaults:\n        # ...\n\n        _sylius_plus_rbac:\n            parent: orders_shop\n            label: order_payment_complete\n```\n\n----------------------------------------\n\nTITLE: Adding Translations to Catalog Promotions in JSON\nDESCRIPTION: JSON configuration showing how to add translations for catalog promotions to support multiple languages. This example adds English (US) translations for the promotion label and description.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/products/catalog-promotions.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    //...\n    \"translations\": {\n        \"en_US\": {\n            \"label\": \"Summer discount\",\n            \"description\": \"The grass so green, the sun so bright. Life seems a dream, no worries in sight.\",\n            \"locale\": \"en_US\" //Locale Code\n            }\n        }\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Cart Promotion Rule Checker in PHP for Sylius\nDESCRIPTION: This snippet defines a custom cart promotion rule checker class called 'HasTaxonRule'. It implements the RuleCheckerInterface and checks if the cart contains products from a specific taxon.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-cookbook-2.0/how-to-add-a-custom-cart-promotion-rule.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Promotion\\Rule;\n\nuse Sylius\\Component\\Core\\Model\\OrderInterface;\nuse Sylius\\Component\\Core\\Model\\OrderItemInterface;\nuse Sylius\\Component\\Promotion\\Checker\\Rule\\RuleCheckerInterface;\n\nfinal class HasTaxonRule implements RuleCheckerInterface\n{\n    public const TYPE = 'has_taxon';\n\n    public function isEligible(OrderInterface $subject, array $configuration): bool\n    {\n        $taxon = $configuration['taxon'];\n\n        /** @var OrderItemInterface $item */\n        foreach ($subject->getItems() as $item) {\n            if ($item->getProduct()->hasTaxon($taxon)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination for Resources in Sylius\nDESCRIPTION: This snippet shows how to create a paginated collection of resources using the Repository service's createPaginator method. It demonstrates setting up pagination parameters like page size and current page based on request data.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/architecture/resource-layer.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\npublic function myAction(Request $request)\n{\n    $repository = $this->container->get('sylius.repository.product');\n\n    $products = $repository->createPaginator();\n    $products->setMaxPerPage(3);\n    $products->setCurrentPage($request->query->get('page', 1));\n\n    // Now you can return products to template and iterate over it to get products from current page.\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Country Model in PHP\nDESCRIPTION: Example of extending the Sylius Country model to add a flag field. Demonstrates model customization with Doctrine ORM annotations and required getter/setter methods.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-models/README.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Entity\\Addressing;\n\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Sylius\\Component\\Addressing\\Model\\Country as BaseCountry;\nuse Sylius\\Component\\Addressing\\Model\\CountryInterface;\n\n/**\n * @ORM\\Entity()\n * @ORM\\Table(name=\"sylius_country\")\n */\nclass Country extends BaseCountry implements CountryInterface\n{\n    /** @ORM\\Column(type=\"string\", nullable=true) */\n    private $flag;\n\n    public function getFlag(): ?string\n    {\n        return $this->flag;\n    }\n\n    public function setFlag(string $flag): void\n    {\n        $this->flag = $flag;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Zone Factory in Sylius\nDESCRIPTION: This snippet demonstrates how to retrieve the zone factory from the service container in Sylius, which is needed to create new zone instances.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/customers/addresses/zones.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/** @var ZoneFactoryInterface $zoneFactory */\n$zoneFactory = $this->container->get('sylius.factory.zone');\n```\n\n----------------------------------------\n\nTITLE: Saving a Product Association to Repository in Sylius\nDESCRIPTION: Code for persisting a product association to the database using the repository.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/products/product-associations.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$this->container->get('sylius.repository.product_association')->add($association);\n```\n\n----------------------------------------\n\nTITLE: Twig Component Class in PHP\nDESCRIPTION: This PHP class is a basic example of a Twig component. It's annotated with `AsTwigComponent`, which registers the class as a Twig component. It resides in the `App\\Twig\\Components` namespace.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-templates.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n\"// src/Twig/Components/MyComponent.php\\n\\nnamespace App\\Twig\\Components;\\n\\nuse Symfony\\UX\\TwigComponent\\Attribute\\AsTwigComponent;\\n\\n#[AsTwigComponent]\\nfinal class MyComponent\\n{\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Permission in Route Definition YAML\nDESCRIPTION: This example shows how to disable a permission for a specific route by setting the enabled property to false in the route definition in sylius_admin.yaml.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/customers/adminuser.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# config/routes/sylius_admin.yaml\n# ...\n\nsylius_admin_order_payment_complete:\n    path: /admin/orders/{orderId}/payments/{id}/complete\n    methods: [PUT]\n    defaults:\n        # ...\n\n        _sylius_plus_rbac:\n            enabled: false\n```\n\n----------------------------------------\n\nTITLE: Twig Component Template\nDESCRIPTION: This Twig template represents the HTML structure for a basic twig component. The content within the `<div>` tag defines the HTML that will be rendered when the component is used.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-templates.md#2025-04-21_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n\"{# templates/components/MyComponent.html.twig #}\\n<div>\\n    <!-- component html -->\\n</div>\"\n```\n\n----------------------------------------\n\nTITLE: Registering Command IRI to Identifier Map Service in XML Configuration\nDESCRIPTION: XML service definition for the CommandItemIriArgumentToIdentifierMap service that maps command FQCNs to field names that should be transformed from IRI to code/id. This configuration enables automatic transformation of IRIs in API requests to proper identifiers in command objects.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/adr/2021_04_15_using_iri_as_api_resource_identifier_in_request_instead_of_code_id.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<service id=\"Sylius\\Bundle\\ApiBundle\\Map\\CommandItemIriArgumentToIdentifierMap\">\n    <argument type=\"collection\">\n        <argument key=\"Sylius\\Bundle\\ApiBundle\\Command\\AddProductReview\">product</argument>\n        <argument key=\"Sylius\\Bundle\\ApiBundle\\Command\\Checkout\\ChoosePaymentMethod\">paymentMethod</argument>\n        <argument key=\"Sylius\\Bundle\\ApiBundle\\Command\\Account\\ChangePaymentMethod\">paymentMethod</argument>\n        <argument key=\"NewCommandFQCN\">NewCommandFieldName</argument>\n    </argument>\n</service>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Catalog Promotion Action Validator in PHP for Sylius\nDESCRIPTION: This code snippet demonstrates the implementation of a custom catalog promotion action validator in Sylius. It includes validation logic for the action's configuration.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-cookbook-2.0/how-to-add-a-custom-catalog-promotion-action.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Promotion\\Action;\n\nuse Sylius\\Bundle\\PromotionBundle\\Validator\\CatalogPromotionAction\\ActionValidatorInterface;\nuse Sylius\\Bundle\\PromotionBundle\\Validator\\Constraints\\CatalogPromotionAction;\nuse Symfony\\Component\\Validator\\Context\\ExecutionContextInterface;\n\nfinal class CustomActionValidator implements ActionValidatorInterface\n{\n    public function validate(array $configuration, CatalogPromotionAction $constraint, ExecutionContextInterface $context): void\n    {\n        if (!isset($configuration['amount']) || !is_int($configuration['amount'])) {\n            $context\n                ->buildViolation('sylius.catalog_promotion_action.fixed_discount.not_valid')\n                ->atPath('configuration.amount')\n                ->addViolation()\n            ;\n        }\n\n        if (isset($configuration['amount']) && $configuration['amount'] < 0) {\n            $context\n                ->buildViolation('sylius.catalog_promotion_action.fixed_discount.min')\n                ->atPath('configuration.amount')\n                ->addViolation()\n            ;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Making Authenticated API Requests with Bearer Token\nDESCRIPTION: Template for making authenticated API requests using the Bearer token obtained during login. This pattern is used for all protected endpoints that require authentication.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/getting-started-with-sylius/using-api.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'METHOD' \\\n    'api-url' \\\n    -H 'accept: application/ld+json' \\\n    -H 'Authorization: Bearer token'\n```\n\n----------------------------------------\n\nTITLE: Upgrading Sylius Dependencies Using Composer\nDESCRIPTION: This command updates Sylius and all its dependencies to the latest compatible versions based on the constraints defined in composer.json.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/installation/upgrading-sylius-ce.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer update sylius/sylius --with-all-dependencies \n```\n\n----------------------------------------\n\nTITLE: Defining Capture Payment Request Command in PHP\nDESCRIPTION: Creates a command class for handling the capture payment request action.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-payments/how-to-integrate-a-payment-gateway-as-a-plugin.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\SyliusExamplePlugin\\Command;\n\nuse Sylius\\Bundle\\PaymentBundle\\Command\\PaymentRequestHashAwareInterface;\nuse Sylius\\Bundle\\PaymentBundle\\Command\\PaymentRequestHashAwareTrait;\n\nclass CapturePaymentRequest implements PaymentRequestHashAwareInterface\n{\n    use PaymentRequestHashAwareTrait;\n\n    public function __construct(protected ?string $hash) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response with Renamed Field\nDESCRIPTION: Illustrates the final JSON response structure after renaming the 'options' field to 'optionValues'.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-serialization-of-api.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 123,\n    \"code\": \"product_code\",\n    \"product\": \"/api/v2/shop/products/product_code\",\n    \"optionValues\": [\n        \"/api/v2/shop/product-option-values/product_size_s\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Twig Hooks Configuration in YAML\nDESCRIPTION: This configuration shows a basic example of how to configure Twig Hooks in a `sylius_twig_hooks.yaml` file. It defines a hook named `hook_name` with two hookables: `first_hookable_name` that renders a twig template and `second_hookable_name` which utilizes a component. The keys `template` and `component` specify the template file and component ID to render in each hookable.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-templates.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"sylius_twig_hooks:\\n    hooks:\\n        hook_name:\\n            first_hookable_name:\\n                template: 'custom_template.html.twig'\\n            second_hookable_name:\\n                component: 'app_shop:custom_component'\"\n```\n\n----------------------------------------\n\nTITLE: API Response for Cart Total\nDESCRIPTION: JSON response showing the cart totals including shipping cost after adding items.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/getting-started-with-sylius/customizing-business-logic.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"taxTotal\": 0,\n    \"shippingTotal\": 500,\n    \"orderPromotionTotal\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Repository Method for Finding Products by Taxon in Sylius\nDESCRIPTION: Implementation of a custom repository method that extends the base product repository to find products by a specific taxon.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/products/product-associations.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Sylius\\Bundle\\CoreBundle\\Doctrine\\ORM\\ProductRepository as BaseProductRepository;\n\nclass ProductRepository extends BaseProductRepository\n{\n    public function findByTaxon(Taxon $taxon): array\n    {\n        return $this->createQueryBuilder('p')\n            ->join('p.productTaxons', 'pt')\n            ->where('pt.taxon = :taxon')\n            ->setParameter('taxon', $taxon)\n            ->getQuery()\n            ->getResult()\n         ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Asynchronous Processing for Catalog Promotions (Bash Command)\nDESCRIPTION: Bash command to start the messenger consumer for asynchronous processing of catalog promotions. This is needed for the default asynchronous mode to function properly.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/products/catalog-promotions.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/console messenger:consume main catalog_promotion_removal\n```\n\n----------------------------------------\n\nTITLE: Configuring Admin Grid for Supplier\nDESCRIPTION: YAML configuration for creating an administrative grid interface for managing Supplier entities.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-models/how-to-add-a-custom-model.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsylius_grid:\n    grids:\n        app_admin_supplier:\n            driver:\n                name: doctrine/orm\n                options:\n                    class: App\\Entity\\Supplier\n            fields:\n                name:\n                    type: string\n                    label: sylius.ui.name\n                description:\n                    type: string\n                    label: sylius.ui.description\n                enabled:\n                    type: twig\n                    label: sylius.ui.enabled\n                    options:\n                        template: \"@SyliusUi/Grid/Field/enabled.html.twig\"\n            actions:\n                main:\n                    create:\n                        type: create\n                item:\n                    update:\n                        type: update\n                    delete:\n                        type: delete\n```\n\n----------------------------------------\n\nTITLE: Registering Response Provider in XML\nDESCRIPTION: XML configuration for registering the custom capture HTTP response provider in Sylius, tagging it with the appropriate action name for the service locator.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-payments/how-to-integrate-a-payment-gateway-as-a-plugin.md#2025-04-21_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<service id=\"acme.sylius_example.provider.order_pay.http_response.sylius_payment.capture\"\n         class=\"Acme\\SyliusExamplePlugin\\OrderPay\\Provider\\CaptureHttpResponseProvider\">\n    <tag name=\"acme.sylius_example.provider.http_response.sylius_payment\"\n         action=\"capture\" />\n</service>\n```\n\n----------------------------------------\n\nTITLE: Defining Hookable Configuration in YAML\nDESCRIPTION: This YAML configuration defines the hookable for the `hook_name` introduced in the previous step. The `first_hookable_name` is configured to render the `hookable.html.twig` template. The `hooks` key maps to the hook name, and the keys under the hook name define each hookable.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-templates.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"sylius_twig_hooks:\\n    hooks:\\n        'hook_name':\\n            'first_hookable_name':\\n                template: 'hookable.html.twig'\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Channel in Sylius PHP\nDESCRIPTION: This snippet demonstrates how to get the current channel from the channel context in Sylius. It uses the container to access the channel context service.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/configuration/channels.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$channel = $this->container->get('sylius.context.channel')->getChannel();\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Order Endpoint - XML Configuration\nDESCRIPTION: Demonstrates how to add a custom endpoint for the Order resource using XML configuration. Creates a new POST endpoint at /shop/orders/custom-operation that processes input through a CustomCommand.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-api.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!-- config/api_platform/Order.xml -->\n\n<resources\n    xmlns=\"https://api-platform.com/schema/metadata/resources-3.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"https://api-platform.com/schema/metadata/resources-3.0 https://api-platform.com/schema/metadata/resources-3.0.xsd\"\n>\n    <resource class=\"%sylius.model.order.class%\">\n        <operations>\n            <operation\n                name=\"custom_operation\"\n                class=\"ApiPlatform\\Metadata\\Post\"\n                uriTemplate=\"/shop/orders/custom-operation\"\n                messenger=\"input\"\n                input=\"App\\Command\\CustomCommand\"\n            />\n        </operations>\n    </resource>\n</resources>\n```\n\n----------------------------------------\n\nTITLE: Nested Hooks Configuration in YAML\nDESCRIPTION: This YAML configuration demonstrates how to configure nested hooks, where a hook is fired inside another hookable. The parent hook (`parent_hook_name`) and hookable (`first_parent_hookable_name`) must be configured, as well as the nested hook (`parent_hook_name.hook_name`). This example also illustrates the use of absolute templates, templates that are not rendered through twig hook expressions.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-templates.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n\"sylius_twig_hooks:\\n    hooks:\\n        'parent_hook_name': # We assume that an absolute template (meaning it is not rendered by the Twig Hooks template expression) with this hook name has already been rendered.\\n            'first_parent_hookable_name':\\n                template: 'parent_hookable.html.twig'\\n        'parent_hook_name.hook_name':\\n            'first_hookable_name':\\n                template: 'hookable.html.twig'\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Transitions with Winzou State Machine in Sylius\nDESCRIPTION: This YAML configuration defines the 'address' transition for the Order Checkout using Winzou State Machine. It specifies the possible source states and the target state for the transition.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/architecture/state-machine.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# CoreBundle/Resources/config/app/state_machine/sylius_order_checkout.yml\nwinzou_state_machine:\n    sylius_order_checkout:\n        transitions:\n            address:\n                from: [cart, addressed, shipping_selected, shipping_skipped, payment_selected, payment_skipped]  # here you specify which state is the initial\n                to: addressed    \n```\n\n----------------------------------------\n\nTITLE: Configuring Channel Scopes for Catalog Promotions in JSON\nDESCRIPTION: JSON configuration showing how to specify which channels a catalog promotion applies to. Channels are referenced by their IRIs (Internationalized Resource Identifiers).\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/products/catalog-promotions.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    //...\n    \"channels\": [\n        \"/api/v2/admin/channels/FASHION_WEB\", //IRI\n        \"/api/v2/admin/channels/HOME_WEB\"\n    ]\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sylius Shop Routes Without Localized URLs in YAML\nDESCRIPTION: The modified routing configuration that removes locale prefixes from URLs. This configuration eliminates the locale parameter from routes and removes the default locale switch controller.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-cookbook-2.0/how-to-disable-localized-urls.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/routes/sylius_shop.yaml\n\nsylius_shop:\n    resource: \"@SyliusShopBundle/Resources/config/routing.yml\"\n\nsylius_shop_payum:\n    resource: \"@SyliusShopBundle/Resources/config/routing/payum.yml\"\n\nsylius_payment_notify:\n    resource: \"@SyliusPaymentBundle/Resources/config/routing/integrations/sylius.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Configuring a Component in YAML\nDESCRIPTION: This YAML configuration demonstrates how to configure a Twig Hook to use a component.  Instead of using a template file, it specifies the component ID (e.g., `MyComponent`).  When the `my_hookable` hookable is rendered, the `MyComponent` will be used to generate the HTML.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-templates.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n\"sylius_twig_hooks:\\n    hooks:\\n        'my_hook':\\n            'my_hookable':\\n                component: 'MyComponent'\"\n```\n\n----------------------------------------\n\nTITLE: Persisting Adjustment Changes in Sylius\nDESCRIPTION: This code demonstrates how to save adjustment changes to the database by flushing the order manager. This is required to make the adjustment changes permanent.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/adjustments.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$this->container->get('sylius.manager.order')->flush();\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Capture HTTP Response Provider in PHP\nDESCRIPTION: PHP implementation of a custom HTTP response provider for handling capture actions in Sylius payments. This class can generate redirect responses or render templates based on payment state.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-payments/how-to-integrate-a-payment-gateway-as-a-plugin.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace Acme\\SyliusExamplePlugin\\OrderPay\\Provider;\n\nuse Sylius\\Bundle\\PaymentBundle\\Provider\\HttpResponseProviderInterface;\nuse Sylius\\Bundle\\ResourceBundle\\Controller\\RequestConfiguration;\nuse Sylius\\Component\\Payment\\Model\\PaymentRequestInterface;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Twig\\Environment;\n\nfinal class CaptureHttpResponseProvider implements HttpResponseProviderInterface\n{\n    public function __construct(\n        private readonly Environment $twig,\n    ) {}\n\n    public function supports(RequestConfiguration $requestConfiguration, PaymentRequestInterface $paymentRequest): bool\n    {\n        return $paymentRequest->getAction() === PaymentRequestInterface::ACTION_CAPTURE;\n    }\n\n    public function getResponse(RequestConfiguration $requestConfiguration, PaymentRequestInterface $paymentRequest): Response\n    {\n        $data = $paymentRequest->getResponseData();\n\n        // Example: Redirect to an external portal\n        return new RedirectResponse($data['portal_redirect_url']);\n\n        // Example: Display a Twig template\n        return new Response(\n            $this->twig->render(\n                '@AcmeSyliusExamplePlugin/order_pay/capture.html.twig',\n                $data\n            )\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Gateway Configuration Form Type in PHP\nDESCRIPTION: Defines a form type for the gateway's configuration settings, including an API key field.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-payments/how-to-integrate-a-payment-gateway-as-a-plugin.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\SyliusExamplePlugin\\Form\\Type;\n\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\n\nfinal class GatewayConfigurationType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options): void\n    {\n        $builder->add('api_key', TextType::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Sylius Events in CLI\nDESCRIPTION: Command to list all Sylius events available in your application using the Symfony console.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/architecture/events.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/console debug:event-dispatcher | grep sylius\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom API Resource in YAML\nDESCRIPTION: Shows how to create a custom API resource configuration file in YAML format, defining a new serialization group for the GET operation on the Product resource.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-serialization-of-api.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n    '%sylius.model.product.class%':\n        operations:\n            ApiPlatform\\Metadata\\Get:\n                name: sylius_api_shop_product_get\n                uriTemplate: '/shop/products/{code}'\n                normalizationContext:\n                    groups: ['shop:product:custom_show'\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Order Endpoint - YAML Configuration\nDESCRIPTION: Shows how to add a custom endpoint for the Order resource using YAML configuration. Creates a new POST endpoint at /shop/orders/custom-operation that processes input through a CustomCommand.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-api.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n    '%sylius.model.order.class%':\n        operations:\n            ApiPlatform\\Metadata\\Post:\n                name: custom_operation\n                uriTemplate: '/shop/orders/custom-operation'\n                messenger: input\n                input: App\\Command\\CustomCommand\n```\n\n----------------------------------------\n\nTITLE: Processing Order and Saving Changes After Adding Shipment in PHP\nDESCRIPTION: Processes the order after shipment addition and persists changes to the database. This updates all order calculations to reflect the added shipment.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/orders.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$this->container->get('sylius.order_processing.order_processor')->process($order);\n$this->container->get('sylius.manager.order')->flush();\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Database Connection\nDESCRIPTION: Environment variable configuration for PostgreSQL database connection in a local development environment. This defines the database URL with connection parameters and charset settings.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/installation/sylius-ce-installation/README.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nDATABASE_URL=pgsql://<username>:<password>@<host>/<your_database_name>_%kernel.environment%?serverVersion=<your_db_version>&charset=utf8\n```\n\n----------------------------------------\n\nTITLE: Disabling Permission in YAML Configuration\nDESCRIPTION: This snippet demonstrates how to disable an existing permission by setting its enabled property to false in the _sylius.yaml configuration file.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/customers/adminuser.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/_sylius.yaml\n# ...\n\nsylius_plus:\n    permissions:\n        sylius_admin_order_payment_complete:\n            enabled: false\n```\n\n----------------------------------------\n\nTITLE: Defining Fields for Custom Serialization Group in XML\nDESCRIPTION: Illustrates how to specify which fields should be included in the custom serialization group using XML configuration.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-serialization-of-api.md#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<attribute name=\"updatedAt\">\n    <group>shop:product:custom_show</group>\n</attribute>\n<attribute name=\"mainTaxon\">\n    <group>shop:product:custom_show</group>\n</attribute>\n```\n\n----------------------------------------\n\nTITLE: Creating New Resource Objects with Factory in Sylius\nDESCRIPTION: This snippet demonstrates how to use the Factory service to create new resource objects. The Factory provides a createNew() method which instantiates a new object according to the resource's class configuration, making code more testable and allowing easy model class changes.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/architecture/resource-layer.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\npublic function myAction()\n{\n    $factory = $this->container->get('sylius.factory.product');\n\n    /** @var ProductInterface $product **/\n    $product = $factory->createNew();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding position field to ProductImage response in Sylius API\nDESCRIPTION: This change adds a position field to the ProductImage response for both shop and admin views, enabling clients to respect image ordering.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/UPGRADE-API-2.0.md#2025-04-21_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\n    {\n        \"@context\": \"/api/v2/contexts/ProductImage\",\n        \"@id\": \"/api/v2/admin/products/MUG/images/1\",\n        \"@type\": \"ProductImage\",\n        \"id\": 1,\n        \"owner\": \"/api/v2/admin/products/MUG\",\n        \"type\": \"thumbnail\",\n        \"path\": \"https://example.com/images/sylius_original_thumbnail.jpg\",\n        \"productVariants\": [\"/api/v2/admin/product-variants/MUG_BLUE\"],\n    +   \"position\": 0\n    }\n```\n\n----------------------------------------\n\nTITLE: Renaming Endpoint Path - XML Configuration\nDESCRIPTION: Shows how to rename an existing endpoint's path using XML configuration. Includes full configuration with normalization and denormalization contexts.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-api.md#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!-- config/api_platform/Order.xml -->\n\n<resources\n    xmlns=\"https://api-platform.com/schema/metadata/resources-3.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"https://api-platform.com/schema/metadata/resources-3.0 https://api-platform.com/schema/metadata/resources-3.0.xsd\"\n>\n    <resource class=\"%sylius.model.order.class%\">\n        <operations>\n            <operation\n                name=\"sylius_api_shop_order_post\"\n                class=\"ApiPlatform\\Metadata\\Post\"\n                uriTemplate=\"/shop/orders/custom-create\"\n                itemUriTemplate=\"/shop/orders/{tokenValue}\"\n                messenger=\"input\"\n                input=\"Sylius\\Bundle\\ApiBundle\\Command\\Cart\\PickupCart\"\n            >\n                <denormalizationContext>\n                    <values>\n                        <value name=\"groups\">\n                            <values>\n                                <value>sylius:shop:order:create</value>\n                            </values>\n                        </value>\n                    </values>\n                </denormalizationContext>\n                <normalizationContext>\n                    <values>\n                        <value name=\"groups\">\n                            <values>\n                                <value>sylius:shop:cart:show</value>\n                            </values>\n                        </value>\n                    </values>\n                </normalizationContext>\n            </operation>\n        </operations>\n    </resource>\n</resources>\n```\n\n----------------------------------------\n\nTITLE: Configuring MariaDB Database Connection\nDESCRIPTION: Environment variable configuration for MariaDB database connection in a local development environment. This defines the database URL with connection parameters and charset settings.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/installation/sylius-ce-installation/README.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nDATABASE_URL=mysql://<username>:<password>@<host>/<your_database_name>_%kernel.environment%?serverVersion=mariadb-<your_db_version>&charset=utf8\n```\n\n----------------------------------------\n\nTITLE: Fetching All Configured Locales in Sylius\nDESCRIPTION: Demonstrates how to retrieve all locales configured in the store, regardless of availability logic, by using the locales repository directly.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/configuration/locales.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$locales = $this->get('sylius.repository.locale')->findAll();\n```\n\n----------------------------------------\n\nTITLE: API Request for Adding Cart Item\nDESCRIPTION: cURL command to add an item to the cart via the Sylius API.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/getting-started-with-sylius/customizing-business-logic.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request PATCH 'https://your-shop-url.com/api/v2/shop/orders/CART_TOKEN/items' --header 'Content-Type: application/merge-patch+json' --data-raw '{\n    \"productVariant\": \"/api/v2/shop/product-variants/PRODUCT_VARIANT_CODE\",\n    \"quantity\": 1\n}'\n```\n\n----------------------------------------\n\nTITLE: Running Sylius Installer\nDESCRIPTION: Command to run the interactive Sylius installer which checks system requirements, sets up the database, installs demo data (optional), configures the shop, and installs assets from bundles and plugins.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/installation/sylius-ce-installation/README.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nbin/console sylius:install\n```\n\n----------------------------------------\n\nTITLE: Adding position field to ProductAttribute request in Sylius API\nDESCRIPTION: This update adds a position field to the ProductAttribute request structure, allowing for ordering of attributes.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/UPGRADE-API-2.0.md#2025-04-21_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n    {\n        \"code\": \"BRAND_ATTRIBUTE\",\n        \"type\": \"text\",\n        \"configuration\": [\"visible\"],\n    +   \"position\": 0,\n        \"translatable\": true,\n        \"translations\": {\n            \"en_US\": \"Brand\",\n            \"fr_FR\": \"Marque\",\n            \"es_ES\": \"Marca\"\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Customizing Login Template in Twig\nDESCRIPTION: Example of overriding the default Sylius login template with custom markup and form handling.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-templates.md#2025-04-21_snippet_15\n\nLANGUAGE: twig\nCODE:\n```\n{% extends '@SyliusShop/layout.html.twig' %}\n{% import '@SyliusUi/Macro/messages.html.twig' as messages %}\n\n{% block content %}\n<div class=\"ui column stackable center page grid\">\n    {% if last_error %}\n        {{ messages.error(last_error.messageKey|trans(last_error.messageData, 'security')) }}\n    {% endif %}\n    <h1>This Is My Headline</h1>\n    <div class=\"five wide column\"></div>\n    <form class=\"ui six wide column form segment\" action=\"{{ path('sylius_shop_login_check') }}\" method=\"post\" novalidate>\n        <div class=\"one field\">\n            {{ form_row(form._username, {'value': last_username|default('')}) }}\n        </div>\n        <div class=\"one field\">\n            {{ form_row(form._password) }}\n        </div>\n        <div class=\"one field\">\n            <button type=\"submit\" class=\"ui fluid large primary submit button\">{{ 'sylius.ui.login_button'|trans }}</button>\n        </div>\n    </form>\n</div>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Renaming Endpoint Path - YAML Configuration\nDESCRIPTION: Shows how to rename an existing endpoint's path using YAML configuration. Includes full configuration with normalization and denormalization contexts.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-api.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n    '%sylius.model.order.class%':\n        operations:\n            ApiPlatform\\Metadata\\Post:\n                name: sylius_api_shop_order_post\n                uriTemplate: '/shop/orders/custom-create'\n                itemUriTemplate: '/shop/orders/{tokenValue}'\n                messenger: input\n                input: Sylius\\Bundle\\ApiBundle\\Command\\Cart\\PickupCart\n                denormalizationContext:\n                    groups: ['sylius:shop:order:create']\n                normalizationContext:\n                    groups: ['sylius:shop:cart:show']\n```\n\n----------------------------------------\n\nTITLE: Loading Predefined Sylius Fixtures\nDESCRIPTION: This command loads the predefined set of Sylius fixtures. It's the recommended way to populate a Sylius application with sample data for testing or development purposes.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/architecture/fixtures.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/console sylius:fixtures:load\n```\n\n----------------------------------------\n\nTITLE: Demonstrating New Filter ID Format in Sylius API\nDESCRIPTION: This snippet illustrates the new format for filter IDs in the Sylius API. The format follows the pattern 'sylius_api.[filter_type].[context].[resource]', providing clear identification of filter type, context (admin or shop), and the resource it applies to.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/adr/2024_10_22_filters_structure_refactor.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nsylius_api.search_filter.admin.[resource]\nsylius_api.order_filter.shop.[resource]\nsylius_api.exists_filter.admin.[resource]\nsylius_api.custom_filter.shop.[resource]\n```\n\n----------------------------------------\n\nTITLE: Importing Logo in JavaScript Entry File\nDESCRIPTION: Shows how to import the custom logo file in the shop's entry.js file.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/getting-started-with-sylius/customizing-the-shop.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport './images/logo.png';\n```\n\n----------------------------------------\n\nTITLE: Running Messenger Consumer for Asynchronous Tasks\nDESCRIPTION: Command to start the Symfony Messenger consumer for handling asynchronous tasks like Catalog Promotions. This needs to run in a separate process for enabling background processing.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/installation/sylius-ce-installation/README.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/console messenger:consume main\n```\n\n----------------------------------------\n\nTITLE: Adding position field to ProductImage request in Sylius API\nDESCRIPTION: This change adds a position field to the ProductImage request structure to enable ordering of product images.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/UPGRADE-API-2.0.md#2025-04-21_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n    {\n        \"productVariants\": [\"https://example.com/product-variant-1\"],\n        \"type\": \"thumbnail\",\n    +   \"position\": 0\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Resource Display Route in Sylius\nDESCRIPTION: This YAML configuration demonstrates how to customize the resource display action with a custom template and repository method. It shows how to pass URL parameters to the repository method as arguments.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/architecture/resource-layer.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# config/routes.yaml\napp_product_show:\n    path: /products/{slug}\n    methods: [GET]\n    defaults:\n        _controller: sylius.controller.product:showAction\n        _sylius:\n            template: AppStoreBundle:Product:show.html.twig # Use a custom template.\n            repository:\n                method: findForStore # Use a custom repository method.\n                arguments: [$slug] # Pass the slug from the url to the repository.\n```\n\n----------------------------------------\n\nTITLE: Defining Fields for Custom Serialization Group in YAML\nDESCRIPTION: Shows how to specify which fields should be included in the custom serialization group using YAML configuration.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-serialization-of-api.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nSylius\\Component\\Core\\Model\\Product:\n    attributes:\n        updatedAt:\n            groups: ['shop:product:custom_read']\n        mainTaxon:\n            groups: ['shop:product:custom_read']\n```\n\n----------------------------------------\n\nTITLE: Generating Entity Migration in Sylius\nDESCRIPTION: Commands to create and apply database migrations for new entities using Doctrine.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-models/how-to-add-a-custom-model.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/console doctrine:migrations:diff\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/console doctrine:migrations:migrate\n```\n\n----------------------------------------\n\nTITLE: API Response for Updated Cart Total\nDESCRIPTION: JSON response showing the updated cart totals after modifying item quantity.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/getting-started-with-sylius/customizing-business-logic.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"taxTotal\": 0,\n    \"shippingTotal\": 1000,\n    \"orderPromotionTotal\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Admin Product Endpoint with Additional Suffix\nDESCRIPTION: An example HTTP GET request to fetch a product by code for an admin user using the suffix approach, showing the URL structure and expected response with additional admin information.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/adr/2020_09_01_admin_and_shop_split.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n`GET /new-api/products/KNITTED_WOOL_BLEND_GREEN_CAP/admin` for admin user (using product code) which will return\n`{\"id\": 1, \"slug\": 2, \"prices\": {}, \"admin_related_information\" : \"\" }`\n```\n\n----------------------------------------\n\nTITLE: Using Global Twig Variables Example\nDESCRIPTION: Example showing how to dump the current channel information using Sylius global Twig variables.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-templates.md#2025-04-21_snippet_16\n\nLANGUAGE: twig\nCODE:\n```\n{{ dump(sylius.channel) }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Order Details with Available Shipping and Payment Methods\nDESCRIPTION: This GET request retrieves the current order state, which includes available shipping and payment methods. This information is needed before selecting the shipping and payment methods for the order.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/getting-started-with-sylius/using-api.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'GET' \\\n  'https://master-ce.demo.sylius.com/api/v2/shop/orders/rl1KwtiSLA' \\\n  -H 'accept: application/ld+json' \\\n  -H 'Authorization: Bearer token'\n```\n\n----------------------------------------\n\nTITLE: Updating Serialization Groups in Sylius Resources (PHP)\nDESCRIPTION: Demonstrates how to update serialization group annotations in Sylius resources by prefixing them with 'sylius:'.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/UPGRADE-API-2.0.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n- #[Groups(['admin:product:index'])]\n+ #[Groups(['sylius:admin:product:index'])]\n```\n\n----------------------------------------\n\nTITLE: Customizing Translations in Sylius using YAML\nDESCRIPTION: This snippet demonstrates how to customize a translation key in a Sylius project by editing a YAML file. No additional dependencies are required, apart from having a Sylius project set up. The key 'sylius.form.customer.email' is changed from 'Email' to 'Username'. The YAML file should be located in the 'translations' directory, specific to the language being used.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-translations.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsylius:\\n    form:\\n        customer:\\n            email: Username\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Hook Configuration in YAML\nDESCRIPTION: YAML configuration for adding a custom estimated delivery time element to the product show page with specific priority.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-templates.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nsylius_twig_hooks:\n    hooks:\n        'sylius_shop.product.show.content.info.summary':\n            estimated_delivery_time:\n                template: 'shop/estimated_delivery_time.html.twig'\n                priority: 250\n```\n\n----------------------------------------\n\nTITLE: Registering the Custom Loyalty Rule Configuration Data Transformer as a Service in XML\nDESCRIPTION: This snippet demonstrates how to register the custom loyalty rule configuration data transformer as a service with the appropriate tag and key. The key must match the configuration type specified in the supportsTransformation method.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-cookbook-2.0/how-to-add-a-new-loyalty-rule-configuration-to-api.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<service id=\"...\\LoyaltyRuleActionYourCustomConfigurationDataTransformer\" public=\"true\">\n    <argument type=\"service\" id=\"Sylius\\Plus\\Loyalty\\Application\\Factory\\LoyaltyRuleActionFactory\" />\n    <tag name=\"sylius_plus.api.loyalty_rule_action_data_transformer\" key=\"your_custom_configuration\" />\n</service>\n```\n\n----------------------------------------\n\nTITLE: Finding a Product by Code in Sylius\nDESCRIPTION: Code snippet showing how to find a product by its code using Sylius product repository.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/products/product-associations.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$product = $this->container->get('sylius.repository.product')->findOneBy(['code' => 'go-pro-camera']);\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific Symfony Version for Sylius\nDESCRIPTION: Commands to set a specific Symfony version requirement (in this case, Symfony 7.0) and update dependencies. This helps avoid compatibility issues between Sylius and Symfony components.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/installation/sylius-ce-installation/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncomposer config extra.symfony.require \"^7.0\"\ncomposer update\n```\n\n----------------------------------------\n\nTITLE: Building Front-end Assets with Yarn\nDESCRIPTION: Commands to install Yarn dependencies and build front-end assets required by Sylius, using Yarn as the package manager which provides features like workspaces and offline caching.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/installation/sylius-ce-installation/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Updating Channel response structure in Sylius API\nDESCRIPTION: This change replaces references to ShopBillingData and ChannelPriceHistoryConfig with embedded objects containing full details instead of API URLs.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/UPGRADE-API-2.0.md#2025-04-21_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n    -   \"shopBillingData\": \"\\/api\\/v2\\/admin\\/shop-billing-datas\\/{id}\",\n    +   \"shopBillingData\": {\n    +       \"@type\": \"ShopBillingData\",\n    +       \"company\": \"Sylius Inc.\",\n    +       \"taxId\": \"123456789\",\n    +       \"countryCode\": \"US\",\n    +       \"street\": \"123 Commerce St.\",\n    +       \"city\": \"eCommerce City\",\n    +       \"postcode\": \"12345\"\n    +   }\n    -  \"channelPriceHistoryConfig\": \"/api/v2/admin/channel-price-history-configs/{id}\"\n    +  \"channelPriceHistoryConfig\": {\n    +      \"lowestPriceForDiscountedProductsCheckingPeriod\": 30,\n    +      \"lowestPriceForDiscountedProductsVisible\": true,\n    +      \"taxonsExcludedFromShowingLowestPrice\": [\"clearance\", \"seasonal\"]\n    +  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Workflow Listeners in Symfony Workflow\nDESCRIPTION: This PHP class implements a listener for Order Checkout workflow transitions in Symfony Workflow. It processes the cart when specific transitions are completed, invoked through the __invoke method.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/architecture/state-machine.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/** src/Sylius/Bundle/CoreBundle/EventListener/Workflow/OrderCheckout/ProcessCartListener.php **/\n<?php\n\ndeclare(strict_types=1);\n\nnamespace Sylius\\Bundle\\CoreBundle\\EventListener\\Workflow\\OrderCheckout;\n\nuse Sylius\\Component\\Core\\Model\\OrderInterface;\nuse Sylius\\Component\\Order\\Processor\\OrderProcessorInterface;\nuse Symfony\\Component\\Workflow\\Event\\CompletedEvent;\nuse Webmozart\\Assert\\Assert;\n\nfinal class ProcessCartListener\n{\n    public function __construct(private OrderProcessorInterface $orderProcessor)\n    {\n    }\n\n    public function __invoke(CompletedEvent $event): void\n    {\n        /** @var OrderInterface $order */\n        $order = $event->getSubject();\n        Assert::isInstanceOf($order, OrderInterface::class);\n\n        $this->orderProcessor->process($order);\n    }\n}\n[...]\n```\n\n----------------------------------------\n\nTITLE: Sylius Shipping Configuration in YAML\nDESCRIPTION: YAML configuration for customizing the ShippingMethod model and its translation in Sylius.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-models/README.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsylius_shipping:\n    resources:\n        shipping_method:\n            classes:\n                model: App\\Entity\\Shipping\\ShippingMethod\n            translation:\n                classes:\n                    model: App\\Entity\\Shipping\\ShippingMethodTranslation\n```\n\n----------------------------------------\n\nTITLE: Implementing Capture Payment Request Command Provider in PHP\nDESCRIPTION: Creates a class to provide the capture payment request command based on the payment request action.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-payments/how-to-integrate-a-payment-gateway-as-a-plugin.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace Acme\\SyliusExamplePlugin\\CommandProvider;\n\nuse Acme\\SyliusExamplePlugin\\Command\\CapturePaymentRequest;\nuse Sylius\\Bundle\\PaymentBundle\\CommandProvider\\PaymentRequestCommandProviderInterface;\nuse Sylius\\Component\\Payment\\Model\\PaymentRequestInterface;\n\nfinal readonly class CapturePaymentRequestCommandProvider implements PaymentRequestCommandProviderInterface\n{\n    public function supports(PaymentRequestInterface $paymentRequest): bool\n    {\n        return $paymentRequest->getAction() === PaymentRequestInterface::ACTION_CAPTURE;\n    }\n\n    public function provide(PaymentRequestInterface $paymentRequest): object\n    {\n        return new CapturePaymentRequest($paymentRequest->getId());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Sylius Shop Routes with Localized URLs in YAML\nDESCRIPTION: The default routing configuration for Sylius shop that includes localized URLs with locale prefixes. This configuration adds the locale code as a prefix to all shop URLs.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-cookbook-2.0/how-to-disable-localized-urls.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config/routes/sylius_shop.yaml\n\nsylius_shop:\n    resource: \"@SyliusShopBundle/Resources/config/routing.yml\"\n    prefix: /{_locale}\n    requirements:\n        _locale: ^[A-Za-z]{2,4}(_([A-Za-z]{4}|[0-9]{3}))?(_([A-Za-z]{2}|[0-9]{3}))?$\n\nsylius_shop_payum:\n    resource: \"@SyliusShopBundle/Resources/config/routing/payum.yml\"\n\nsylius_payment_notify:\n    resource: \"@SyliusPaymentBundle/Resources/config/routing/integrations/sylius.yaml\"\n\nsylius_shop_default_locale:\n    path: /\n    methods: [GET]\n    defaults:\n        _controller: sylius.controller.shop.locale_switch:switchAction\n```\n\n----------------------------------------\n\nTITLE: Example of Shop Product Endpoint with Prefixed Paths\nDESCRIPTION: An example HTTP GET request to fetch a product by slug for a shop visitor using the prefixed paths approach, showing the URL structure and expected response.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/adr/2020_09_01_admin_and_shop_split.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n`GET /new-api/shop/products/knitted-wool-blend-green-cap` for Visitor (using product slug) which will return\n`{\"id\": 1, \"slug\": 2, \"prices\": {} }`\n```\n\n----------------------------------------\n\nTITLE: Extending ShippingMethodTranslation in PHP\nDESCRIPTION: Implementation of a translatable ShippingMethod model with a deliveryConditions field.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-models/README.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\nnamespace App\\Entity\\Shipping;\n\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Sylius\\Component\\Shipping\\Model\\ShippingMethodTranslation as BaseShippingMethodTranslation;\nuse Sylius\\Component\\Shipping\\Model\\ShippingMethodTranslationInterface;\n\n/**\n * @ORM\\Entity()\n * @ORM\\Table(name=\"sylius_shipping_method_translation\")\n */\nclass ShippingMethodTranslation extends BaseShippingMethodTranslation implements ShippingMethodTranslationInterface\n{\n    /** @ORM\\Column(type=\"string\", nullable=true) */\n    private $deliveryConditions;\n\n    public function getDeliveryConditions(): ?string\n    {\n        return $this->deliveryConditions;\n    }\n\n    public function setDeliveryConditions(?string $deliveryConditions): void\n    {\n        $this->deliveryConditions = $deliveryConditions;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Shop User JWT Token in Sylius API\nDESCRIPTION: This code snippet demonstrates how to request a JWT token as a Shop User in the Sylius API. It uses a `curl` command to send a POST request to the `/api/v2/shop-authentication-token` endpoint with the shop user's email and password. The response will contain the JWT token.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/src/Sylius/Bundle/ApiBundle/docs/authorization.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://127.0.0.1:8000/api/v2/shop-authentication-token -H \"Content-Type: application/json\" -H \"Accept: application/json\" -d '{\"email\": \"api@example.com\", \"password\": \"sylius-api\"}'\n```\n\n----------------------------------------\n\nTITLE: Registering Response Provider in YAML\nDESCRIPTION: YAML configuration for registering the custom capture HTTP response provider in Sylius, tagging it with the appropriate action name for the service locator.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-payments/how-to-integrate-a-payment-gateway-as-a-plugin.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nacme.sylius_example.provider.order_pay.http_response.sylius_payment.capture:\n    class: Acme\\SyliusExamplePlugin\\OrderPay\\Provider\\CaptureHttpResponseProvider\n    tags:\n        - name: acme.sylius_example.provider.http_response.sylius_payment\n          action: !php/const Sylius\\Component\\Payment\\Model\\PaymentRequestInterface::ACTION_CAPTURE\n```\n\n----------------------------------------\n\nTITLE: Configuring Gateway Service in YAML\nDESCRIPTION: Adds the form type to the service configuration using YAML format.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-payments/how-to-integrate-a-payment-gateway-as-a-plugin.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nAcme\\SyliusExamplePlugin\\Form\\Type\\GatewayConfigurationType:\n    tags:\n      - name: sylius.gateway_configuration_type\n        type: sylius_payment\n        label: 'acme_sylius_payment.gateway.name'\n      - name: form.type\n```\n\n----------------------------------------\n\nTITLE: Cart Merging Scenario for Existing Cart\nDESCRIPTION: Describes behavior when a guest user with items logs into an account that has an existing cart. The guest cart is dropped and the previous cart is restored.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/cart-flow.md#2025-04-21_snippet_0\n\nLANGUAGE: gherkin\nCODE:\n```\nGiven there is a not logged in user\nAnd this user adds a blue T-Shirt to the cart\nAnd there is a customer identified by email \"sylius@example.com\"\nAnd the \"sylius@example.com\" customer has a previously created cart with a red Cap in it\nWhen the not logged in user logs in using \"sylius@example.com\" email\nThen the cart created by a not logged in user should be dropped\nAnd the cart previously created by the user identified by \"sylius@example.com\" should be set as the current one\nAnd the \"sylius@example.com\" customer's cart should have a red Cap in it\n```\n\n----------------------------------------\n\nTITLE: Default Sylius Shop Configuration in YAML\nDESCRIPTION: The default configuration for Sylius shop that includes product grid settings but uses the default URL-based locale switching mechanism.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-cookbook-2.0/how-to-disable-localized-urls.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/sylius_shop.yaml\n\nsylius_shop:\n    product_grid:\n        include_all_descendants: true\n```\n\n----------------------------------------\n\nTITLE: Order Response with Payment and Shipment Information\nDESCRIPTION: Example response showing payment and shipment information in an order. This includes payment method IDs and shipping method IDs that can be used in subsequent requests for selecting methods.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/getting-started-with-sylius/using-api.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n\"payments\": [\n    {\n      \"@id\": \"/api/v2/shop/payments/20446\",\n      \"@type\": \"Payment\",\n      \"id\": 20446,\n      \"method\": \"/api/v2/shop/payment-methods/cash_on_delivery\"\n    }\n],\n\"shipments\": [\n    {\n      \"@id\": \"/api/v2/shop/shipments/17768\",\n      \"@type\": \"Shipment\",\n      \"id\": 17768,\n      \"method\": \"/api/v2/shop/shipping-methods/ups\"\n    }\n],\n```\n\n----------------------------------------\n\nTITLE: Example of Shop Product Endpoint with Additional Suffix\nDESCRIPTION: An example HTTP GET request to fetch a product by slug for a shop visitor using the suffix approach, showing the URL structure and expected response.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/adr/2020_09_01_admin_and_shop_split.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`GET /new-api/products/knitted-wool-blend-green-cap` for Visitor (using product slug) which will return\n`{\"id\": 1, \"slug\": 2, \"prices\": {} }`\n```\n\n----------------------------------------\n\nTITLE: Installing BitBagCommerce/SyliusElasticsearchPlugin via Composer\nDESCRIPTION: This Composer command installs the BitBagCommerce/SyliusElasticsearchPlugin, which extends Sylius functionalities with ElasticSearch for more advanced search capabilities.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/products/search.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require bitbag/sylius-elasticsearch-plugin\n```\n\n----------------------------------------\n\nTITLE: Configuring Actions HTTP Response Provider in XML\nDESCRIPTION: XML configuration for setting up an Actions HTTP Response Provider that routes payment actions to the appropriate HTTP Response Provider in Sylius.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-payments/how-to-integrate-a-payment-gateway-as-a-plugin.md#2025-04-21_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<services>\n  <service id=\"acme.sylius_example.provider.order_pay.http_response.sylius_payment\"\n           class=\"Sylius\\Bundle\\PaymentBundle\\Provider\\ActionsHttpResponseProvider\">\n    <argument type=\"tagged_locator\"\n              tag=\"acme.sylius_example.provider.http_response.sylius_payment\"\n              index-by=\"action\"/>\n    <tag name=\"sylius.payment_request.provider.http_response\"\n         gateway-factory=\"sylius_payment\"/>\n  </service>\n</services>\n```\n\n----------------------------------------\n\nTITLE: Locating Original Logo Template in Bash\nDESCRIPTION: Bash command showing the path to the original Sylius logo template for manual overriding.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/getting-started-with-sylius/customizing-the-shop.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n<vendor_path>/templates/shared/logo.html.twig\n```\n\n----------------------------------------\n\nTITLE: Starting Messenger Consumers for Catalog Promotion Processing\nDESCRIPTION: Command to start the messenger consumers for both main and catalog promotion removal transports. This is required when using asynchronous mode to process catalog promotion changes and removals.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/products/catalog-promotions.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/console messenger:consume main catalog_promotion_removal\n```\n\n----------------------------------------\n\nTITLE: Organizing StateProcessors Directory Structure in Sylius 2.0\nDESCRIPTION: Illustrates the new directory structure for StateProcessors in Sylius 2.0, organizing them by section (Admin/Shop), resource type (AdminUser, Product, Address), and operation type (Persist/Remove).\nSOURCE: https://github.com/sylius/sylius/blob/2.1/adr/2024_07_16_state_processors_directory_structure.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/StateProcessors\n    /Admin\n        /AdminUser\n            PersistProcessor.php\n            RemoveProcessor.php\n        /Product\n            RemoveProcessor.php\n    /Shop\n        /Address\n            PersistProcessor.php\n```\n\n----------------------------------------\n\nTITLE: Database Migration Commands\nDESCRIPTION: Commands for updating the database schema after model customization.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-models/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/console doctrine:migrations:diff\nphp bin/console doctrine:migrations:migrate\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Loyalty Rule Configuration Data Transformer in PHP\nDESCRIPTION: This snippet shows how to create a data transformer for a custom loyalty rule configuration. The transformer handles conversion between DTO objects and model instances, supporting both creation (POST) and update (PUT/PATCH) operations based on context.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-cookbook-2.0/how-to-add-a-new-loyalty-rule-configuration-to-api.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Sylius\\Plus\\Loyalty\\Application\\DTO\\LoyaltyRuleActionInterface as LoyaltyRuleActionInterfaceDTO;\nuse Sylius\\Plus\\Loyalty\\Domain\\Model\\LoyaltyRuleActionInterface as LoyaltyRuleActionInterfaceModel;\n\nfinal class LoyaltyRuleActionYourCustomConfigurationDataTransformer implements LoyaltyRuleActionDataTransformerInterface\n{\n    /** @var LoyaltyRuleActionFactoryInterface */\n    private $loyaltyRuleActionFactory;\n\n    public function __construct(LoyaltyRuleActionFactoryInterface $loyaltyRuleActionFactory)\n    {\n        $this->loyaltyRuleActionFactory = $loyaltyRuleActionFactory;\n    }\n\n    public function transform(LoyaltyRuleActionInterfaceDTO $object, string $to, array $context = []): LoyaltyRuleActionInterfaceModel\n    {\n        //$object is an input LoyaltyRuleActionInterfaceDTO instance that allow you get new changes and create/update a LoyaltyRuleActionInterfaceModel object\n\n        if (isset($context['object_to_populate'])) {\n            /** @var LoyaltyRuleActionInterfaceModel $loyaltyRuleAction */\n            $loyaltyRuleAction = $context['object_to_populate'];\n\n            //update object while using PUT or PATCH method\n\n            return $loyaltyRuleAction;\n        }\n\n        //create new LoyaltyRuleActionInterfaceModel object while using POST method\n\n        return $this\n            ->loyaltyRuleActionFactory\n            ->createNewWithDataAndConfiguration('your_custom_configuration', $configuration)\n        ;\n    }\n\n    public function supportsTransformation(string $actionType): bool\n    {\n        return $actionType === 'your_custom_configuration';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Flash Messages in YAML\nDESCRIPTION: Example of overriding the default email verification flash message in a YAML translation file. Shows the structure for customizing Sylius flash messages using the translation key system.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-flashes.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsylius:\\n    user:\\n        verify_email: 'You have successfully verified your email.'\n```\n\n----------------------------------------\n\nTITLE: Twig Permission Checking Function\nDESCRIPTION: This snippet demonstrates how to use the sylius_plus_rbac_has_permission Twig function to conditionally display content based on administrator permissions.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/customers/adminuser.md#2025-04-21_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{% if sylius_plus_rbac_has_permission(\"sylius_admin_order_payment_complete\") %}\n    {# ... #}\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Initializing Sylius Development Environment with Docker\nDESCRIPTION: These commands initialize the Sylius development environment using Docker Compose and open the project in a web browser. The 'make init' command builds Docker images and starts containers, while 'open http://localhost/' opens the project in the default browser.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/installation/sylius-ce-installation/sylius-ce-installation-with-docker.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake init\nopen http://localhost/\n```\n\n----------------------------------------\n\nTITLE: Pushing Feature Branch to Your Fork\nDESCRIPTION: Pushes your updated feature branch to your fork on GitHub, using force-with-lease to safely update an existing branch.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/contributing/contributing-code/submitting-a-patch.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit push --force-with-lease origin feature_branch\n```\n\n----------------------------------------\n\nTITLE: Cart Merging Scenario for Empty Cart\nDESCRIPTION: Describes behavior when a guest user with items logs into an account with an empty cart. The guest cart items are preserved and transferred to the user's account.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/cart-flow.md#2025-04-21_snippet_1\n\nLANGUAGE: gherkin\nCODE:\n```\nGiven there is a not logged in user\nAnd this user adds a blue T-Shirt to the cart\nAnd there is a customer identified by email \"sylius@example.com\" with an empty cart\nWhen the not logged in user logs in using \"sylius@example.com\" email\nThen the cart created by a not logged in user should not be dropped\nAnd the \"sylius@example.com\" customer's cart should have a blue T-Shirt in it\n```\n\n----------------------------------------\n\nTITLE: Debugging Twig Components via Console\nDESCRIPTION: This command lists all registered Twig components in your application, making it easier to identify the correct component name for use in configurations.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-templates.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n\"bin/console debug:twig-component\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Channel and Shop User Fixtures with Customer Pools in YAML\nDESCRIPTION: This YAML configuration demonstrates how to assign a specific customer pool during channel or shop customer creation in fixtures. It includes settings for a mobile channel and a shop user, both associated with the 'default' customer pool.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/customers/customer-pools.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsylius_fixtures:\n    suites:\n        default:\n            fixtures:\n                channel:\n                    options:\n                        custom:\n                            mobile:\n                                name: \"Mobile\"\n                                code: \"mobile\"\n                                locales:\n                                    - \"en_US\"\n                                currencies:\n                                    - \"USD\"\n                                customer_pool: \"default\"\n                                enabled: true\n                shop_user:\n                    options:\n                        custom:\n                            -\n                                email: \"plus@example.com\"\n                                first_name: \"John\"\n                                last_name: \"Doe\"\n                                password: \"sylius\"\n                                customer_pool: \"default\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch in Sylius\nDESCRIPTION: Creates a new branch based on the upstream repository's branch for developing a new feature or bug fix in Sylius.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/contributing/contributing-code/submitting-a-patch.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit switch upstream/2.0 -c feature_branch\n```\n\n----------------------------------------\n\nTITLE: Configuring API Platform Mapping Paths in Sylius\nDESCRIPTION: Configuration snippet that specifies the directory path where custom API configuration files will be stored. This allows Sylius to locate and apply custom endpoint configurations.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/adr/2021_06_15_api_platform_config_customization.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmapping:\n    paths: ['%kernel.project_dir%/config/api_platform']\n```\n\n----------------------------------------\n\nTITLE: Creating Complete Catalog Promotion via API (cURL)\nDESCRIPTION: Extended cURL command for creating a fully configured catalog promotion via the Sylius API. This includes scope, action, translation, and channel configurations to create a functional promotion.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/products/catalog-promotions.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' \\\n  'https://hostname/api/v2/admin/catalog-promotions' \\\n  -H 'accept: application/ld+json' \\\n  -H 'Authorization: Bearer authorizationToken' \\\n  -H 'Content-Type: application/ld+json' \\\n  -d '{\n    \"code\": \"t_shirt_promotion\",\n    \"name\": \"T-shirt Promotion\",\n    \"channels\": [\n        \"/api/v2/admin/channels/FASHION_WEB\"\n    ],\n    \"scopes\": [\n        {\n          \"type\": \"for_variants\",\n          \"configuration\": {\n            \"variants\": [\"Everyday_white_basic_T_Shirt-variant-1\", \"Everyday_white_basic_T_Shirt-variant-4\"]\n          }\n        }\n    ],\n    \"actions\": [\n        {\n          \"type\": \"percentage_discount\",\n          \"configuration\": {\n            \"amount\": 0.5\n          }\n        }\n    ],\n    \"translations\": {\n        \"en_US\": {\n          \"label\": \"T-shirt Promotion\",\n          \"description\": \"T-shirt Promotion description\",\n          \"locale\": \"en_US\"\n        }\n    }'\n```\n\n----------------------------------------\n\nTITLE: Restructuring Zone members representation in Sylius API\nDESCRIPTION: This change replaces ZoneMember references with embedded objects including code, and removes the ID and belongsTo fields from ZoneMember serialization.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/UPGRADE-API-2.0.md#2025-04-21_snippet_21\n\nLANGUAGE: diff\nCODE:\n```\n    {\n        \"@context\": \"/api/v2/contexts/Zone\",\n        \"@id\": \"/api/v2/admin/zones/WD\",\n        \"@type\": \"Zone\",\n    -   \"id\": 1,\n        \"code\": \"WD\",\n        \"name\": \"WORLD\",\n        \"type\": \"country\",\n        \"scope\": \"all\",\n        \"members\": [\n    -       \"/api/v2/admin/zone-members/@integer@\",\n    -       \"/api/v2/admin/zone-members/@integer@\",\n    -       \"/api/v2/admin/zone-members/@integer@\"\n    +       {\"@type\": \"ZoneMember\", \"code\": \"NL\"},\n    +       {\"@type\": \"ZoneMember\", \"code\": \"BE\"},\n    +       {\"@type\": \"ZoneMember\", \"code\": \"PL\"}\n        ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Requesting Admin User JWT Token in Sylius API\nDESCRIPTION: This code snippet demonstrates how to request a JWT token as an Admin User in the Sylius API. It uses a `curl` command to send a POST request to the `/api/v2/admin-authentication-token` endpoint with the admin user's email and password. The response will contain the JWT token.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/src/Sylius/Bundle/ApiBundle/docs/authorization.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://127.0.0.1:8000/api/v2/admin-authentication-token -H \"Content-Type: application/json\" -H \"Accept: application/json\" -d '{\"email\": \"api@example.com\", \"password\": \"sylius-api\"}'\n```\n\n----------------------------------------\n\nTITLE: Interactive Rebasing for Squashing Commits\nDESCRIPTION: Initiates an interactive rebase to combine multiple commits into fewer, more logical units before submission to the Sylius project.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/contributing/contributing-code/submitting-a-patch.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit rebase -i upstream/2.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Customer Pool Fixtures in YAML\nDESCRIPTION: This snippet shows how to configure customer pool fixtures in the 'src/Resource/config/fixtures.yaml' file for the 'plus' fixture suite. It defines a default customer pool with a name and code.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/customers/customer-pools.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsylius_fixtures:\n    suites:\n        default:\n            fixtures:\n                customer_pool:\n                    priority: 1\n                    options:\n                        custom:\n                            default:\n                                name: \"Default\"\n                                code: \"default\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom API Resource in XML\nDESCRIPTION: Demonstrates how to create a custom API resource configuration file in XML format, defining a new serialization group for the GET operation on the Product resource.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-serialization-of-api.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<resources\n    xmlns=\"https://api-platform.com/schema/metadata/resources-3.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"https://api-platform.com/schema/metadata/resources-3.0 https://api-platform.com/schema/metadata/resources-3.0.xsd\"\n>\n    <resource class=\"%sylius.model.product.class%\">\n        <operations>\n            <operation name=\"sylius_api_shop_product_get\" class=\"ApiPlatform\\Metadata\\Get\" uriTemplate=\"/shop/products/{code}\">\n                <normalizationContext>\n                    <values>\n                        <value name=\"groups\">\n                            <values>\n                                <value>shop:product:custom_show</value>\n                            </values>\n                        </value>\n                    </values>\n                </normalizationContext>\n            </operation>\n        </operations>\n    </resource>\n</resources>\n```\n\n----------------------------------------\n\nTITLE: Continuing Rebase After Resolving Conflicts\nDESCRIPTION: Adds resolved files and continues the rebase process after handling any conflicts that occurred during rebasing.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/contributing/contributing-code/submitting-a-patch.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit add resolved_file\ngit rebase --continue\n```\n\n----------------------------------------\n\nTITLE: Installing SyliusCmsPlugin via Composer in Sylius\nDESCRIPTION: This command installs the SyliusCmsPlugin using Composer, adding CMS functionality to a Sylius store.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/getting-started-with-sylius/installing-plugins.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require bitbag/cms-plugin\n```\n\n----------------------------------------\n\nTITLE: Removing ID field from ShippingMethod translations in Sylius API\nDESCRIPTION: This change removes the ID field from the serialization of translation resources, demonstrated with a ShippingMethod translation example.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/UPGRADE-API-2.0.md#2025-04-21_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n    \"translations\": {\n        \"en_US\": {\n            \"@id\": \"/api/v2/admin/shipping-method-translations/1\",\n            \"@type\": \"ShippingMethodTranslation\",\n    -       \"id\": 1,\n            \"name\": \"Standard Shipping\",\n            \"description\": \"Delivery within 5-7 business days\"\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding Upstream Remote to Sylius Repository\nDESCRIPTION: Adds the main Sylius repository as an upstream remote to your local clone, allowing you to keep your fork synchronized with the main project.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/contributing/contributing-code/submitting-a-patch.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd Sylius\ngit remote add upstream git://github.com/Sylius/Sylius.git\n```\n\n----------------------------------------\n\nTITLE: Setting Line Ending Configuration for Windows Users\nDESCRIPTION: Configures Git to handle line endings correctly on Windows systems, preventing potential issues with code contributions to Sylius.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/contributing/contributing-code/submitting-a-patch.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit config core.autocrlf input\n```\n\n----------------------------------------\n\nTITLE: Configuring Actions HTTP Response Provider in YAML\nDESCRIPTION: YAML configuration for setting up an Actions HTTP Response Provider that routes payment actions to the appropriate HTTP Response Provider in Sylius.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-payments/how-to-integrate-a-payment-gateway-as-a-plugin.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nacme.sylius_example.provider.order_pay.http_response.sylius_payment:\n  class: Sylius\\Bundle\\PaymentBundle\\Provider\\ActionsHttpResponseProvider\n  arguments:\n      - !tagged_locator\n          tag: acme.sylius_example.provider.http_response.sylius_payment\n          index_by: action\n  tags:\n      - name: sylius.payment_request.provider.http_response\n        gateway_factory: 'sylius_payment'\n```\n\n----------------------------------------\n\nTITLE: Upgrading Sylius Plus Dependencies with Composer\nDESCRIPTION: Demonstrates the Composer command needed to update the Sylius Plus modules and their dependencies. This command specifically updates the sylius/plus-marketplace-suite-plugin and all its dependencies.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/installation/upgrading-sylius-plus.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer update sylius/plus-marketplace-suite-plugin --with-all-dependencies\n```\n\n----------------------------------------\n\nTITLE: Initializing Testing Environment for SyliusApiBundle Using Bash\nDESCRIPTION: This snippet contains a series of bash commands to set up the testing environment for the SyliusApiBundle. It includes installing dependencies, creating a test database, updating the schema, installing assets, and serving the application. Ensure that you have Composer and Symfony installed before running these commands.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/src/Sylius/Bundle/ApiBundle/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n(cd src/Sylius/Bundle/ApiBundle && composer install)\\n(cd src/Sylius/Bundle/ApiBundle/test && bin/console doctrine:database:create -e test)\\n(cd src/Sylius/Bundle/ApiBundle/test && bin/console doctrine:schema:update --force -e test)\\n(cd src/Sylius/Bundle/ApiBundle/test && bin/console assets:install public)\\n(cd src/Sylius/Bundle/ApiBundle/test && APP_ENV=test symfony serve)\n```\n\n----------------------------------------\n\nTITLE: Removing ID field from ProductAssociationType shop response in Sylius API\nDESCRIPTION: This change removes the ID field from the ProductAssociationType response on the shop GET endpoint while maintaining other fields.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/UPGRADE-API-2.0.md#2025-04-21_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n    {\n        \"@context\": \"/api/v2/contexts/ProductAssociationType\",\n        \"@id\": \"/api/v2/shop/product-association-types/similar_products\",\n        \"@type\": \"ProductAssociationType\",\n    -   \"id\": 1,\n        \"code\": \"similar_products\",\n        \"name\": \"Similar Products\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Order Items Response After Adding Product\nDESCRIPTION: Example response showing the cart's items array after successfully adding a product. It includes details like the item ID, variant reference, product name, quantity, unit price, and totals.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/getting-started-with-sylius/using-api.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n{\n  # Rest of orders body\n  \"items\": [\n    {\n      \"@id\": \"/api/v2/shop/order-items/59782\",\n      \"@type\": \"OrderItem\",\n      \"variant\": \"/api/v2/shop/product-variants/Everyday_white_basic_T_Shirt-variant-0\",\n      \"productName\": \"Everyday white basic T-Shirt\",\n      \"id\": 59782,\n      \"quantity\": 1,\n      \"unitPrice\": 6420,\n      \"total\": 6869,\n      \"subtotal\": 6420\n    }\n  ],\n  # Rest of orders body\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Code for Sylius Coding Standards\nDESCRIPTION: Command to check source and test code files for compliance with Sylius coding standards. This uses the Easy Coding Standard (ECS) tool to analyze code in the src and tests directories.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/contributing/contributing-code/coding-standards.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/ecs check src tests\n```\n\n----------------------------------------\n\nTITLE: Adding Gateway Translation in YAML\nDESCRIPTION: Defines a label for the new payment gateway in the translation file.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-payments/how-to-integrate-a-payment-gateway-as-a-plugin.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nacme_sylius_payment:\n    gateway:\n        name: 'My Gateway Name'\n```\n\n----------------------------------------\n\nTITLE: Listing Available Sylius Fixtures\nDESCRIPTION: This command lists all fixtures defined in Sylius. It's useful for understanding what predefined data sets are available for loading.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/architecture/fixtures.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/console sylius:fixtures:list\n```\n\n----------------------------------------\n\nTITLE: Configuring Synchronous Processing for Catalog Promotions in YAML\nDESCRIPTION: YAML configuration to override the default asynchronous processing of catalog promotions and enable synchronous (immediate) processing instead. This is recommended only for small catalogs.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/products/catalog-promotions.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nframework:\n    messenger:\n        transports:\n            main: 'sync://'\n```\n\n----------------------------------------\n\nTITLE: Modifying PathPrefixProvider Constructor (PHP)\nDESCRIPTION: Demonstrates changes to the constructor of the PathPrefixProvider, including parameter updates.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/UPGRADE-API-2.0.md#2025-04-21_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\npublic function __construct(\n-       private UserContextInterface $userContext,\n        private string $apiRoute,\n+       private array $pathPrefixes,\n    ) {\n        ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Hooks Prefixing in Twig Template\nDESCRIPTION: This Twig code snippet demonstrates the manual control of hook name prefixing. The `_prefixes` parameter allows setting the hook name explicitly without merging ancestor's names. Here, the `hook_name` is prefixed with `custom_prefix_not_related_with_a_parent`.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-templates.md#2025-04-21_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n\"<!-- Template content -->\\n<div id=\\\"container\\\">\\n    {% raw %}\\n{% hook 'hook_name' with { _prefixes: ['custom_prefix_not_related_with_a_parent'] } %}\\n{% endraw %}\\n</div>\\n<!-- Additional content -->\"\n```\n\n----------------------------------------\n\nTITLE: Nested Hook in Twig Template\nDESCRIPTION: This Twig code snippet shows how to fire a hook named `hook_name` inside another hookable.  Even though the hook's name is just `hook_name` within the template, it is configured as `parent_hook_name.hook_name` in the YAML configuration. The `{% raw %}{% endraw %}` tags prevent Twig from interpreting the `{% hook %}` tag, so the browser displays it as source code.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-templates.md#2025-04-21_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n\"<!-- Template content -->\\n<div id=\\\"container\\\">\\n    {% raw %}\\n{% hook 'hook_name' %}\\n{% endraw %} <!-- It’s still the same name, but it is configured as ‘parent_hook_name.hook_name’.-->\\n</div>\\n<!-- Additional content -->\"\n```\n\n----------------------------------------\n\nTITLE: Creating Field Template in Twig\nDESCRIPTION: Defines a Twig template for the API key field in the payment method form.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-payments/how-to-integrate-a-payment-gateway-as-a-plugin.md#2025-04-21_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% raw %}\n{% set form = hookable_metadata.context.form.gatewayConfig.config.api_key %}\n{% endraw %}\n\n<div class=\"col-12 col-md-6\">\n    {{ form_row(form, sylius_test_form_attribute('config-api-key')) }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Clearing Sylius Cache with Bash Command\nDESCRIPTION: This command clears the Symfony cache in a Sylius project, which can help resolve issues with payment gateways, particularly when credentials have been changed during checkout.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/payments.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbin/console cache:clear\n```\n\n----------------------------------------\n\nTITLE: Combining Dot Notation with FQCN for Service Definition in Symfony XML Configuration\nDESCRIPTION: This snippet demonstrates the recommended approach for service definition in Sylius, using both dot notation for the primary service ID and creating an alias with the FQCN for interface-implementing services. This supports autowiring while maintaining consistency with Symfony best practices.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/adr/2024_10_03_services_naming_convention.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<services>\n    <service id=\"sylius_admin.resolver.some\" class=\"Sylius\\Bundle\\AdminBundle\\Resolver\\SomeResolver\" />\n    <service id=\"Sylius\\Bundle\\AdminBundle\\Resolver\\ResolverInterface\" alias=\"sylius_admin.resolver.some\" />\n</services>\n```\n\n----------------------------------------\n\nTITLE: Authentication Token Response Format\nDESCRIPTION: This is the expected JSON response format when successfully authenticating a customer. It contains the authentication token and the customer's IRI (Internationalized Resource Identifier).\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/getting-started-with-sylius/using-api.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"token\": \"string\",\n    \"customer\": \"iri\"\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying ChangeShopUserPassword Command Constructor (PHP)\nDESCRIPTION: Shows updates to the constructor of the ChangeShopUserPassword command, including new parameters and visibility changes.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/UPGRADE-API-2.0.md#2025-04-21_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\npublic function __construct(\n-   public ?string $newPassword,\n-   public ?string $confirmNewPassword,\n-   public ?string $currentPassword,\n+   protected mixed $shopUserId,\n+   protected string $newPassword,\n+   protected string $confirmNewPassword,\n+   protected string $currentPassword,\n) {\n}\n```\n\n----------------------------------------\n\nTITLE: Hooks Prefixing Configuration in YAML\nDESCRIPTION: This YAML configuration corresponds to the Twig code snippet demonstrating hook name prefixing. The `custom_prefix_not_related_with_a_parent.hook_name` hook is configured with the `first_hookable_name` hookable, rendering the `hookable.html.twig` template.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-templates.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n\"sylius_twig_hooks:\\n    hooks:\\n        'parent_hook_name':\\n            'first_parent_hookable_name':\\n                template: 'parent_hookable.html.twig'\\n        'custom_prefix_not_related_with_a_parent.hook_name':\\n            'first_hookable_name':\\n                template: 'hookable.html.twig'\"\n```\n\n----------------------------------------\n\nTITLE: Registering Field Templates in YAML\nDESCRIPTION: Registers the field templates using Twig hooks in the configuration file.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-payments/how-to-integrate-a-payment-gateway-as-a-plugin.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsylius_twig_hooks:\n    hooks:\n        'sylius_admin.payment_method.create.content.form.sections.gateway_configuration.sylius_payment':\n            api_key:\n                template: '@AcmeSyliusExamplePlugin/admin/payment_method/api_key.html.twig'\n                priority: 0\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Assets with Yarn\nDESCRIPTION: Command to rebuild assets after adding the custom logo.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/getting-started-with-sylius/customizing-the-shop.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Displaying New Directory Structure for Custom Filters in Sylius\nDESCRIPTION: This snippet shows the new directory structure for custom filters in Sylius. Custom filters will now be located in the Doctrine/ORM/Filter directory, aligning with other Doctrine-related features.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/adr/2024_10_22_filters_structure_refactor.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/Doctrine/ORM/Filter\n    CustomFilter.php\n```\n\n----------------------------------------\n\nTITLE: Modifying SendContactRequest Command Constructor (PHP)\nDESCRIPTION: Shows updates to the constructor of the SendContactRequest command, including new parameters and visibility changes.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/UPGRADE-API-2.0.md#2025-04-21_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\npublic function __construct(\n-   private ?string $email = null,\n-   private ?string $message = null,\n+   protected ?string $channelCode,\n+   protected ?string $localeCode,\n+   protected ?string $email = null,\n+   protected ?string $message = null,\n) {\n}\n```\n\n----------------------------------------\n\nTITLE: Enriching Resource Data for Ship Operation\nDESCRIPTION: Example of updating a shipment status using the resource enrichment approach, where the operation is embedded in the resource data with a PUT request.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/adr/2020_05_13_handling_non_crud_operations_in_api.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"ship\",\n  \"tracking_code\": \"XYZ\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Directory Structure for StateProviders in Sylius API\nDESCRIPTION: The code snippet illustrates the new directory structure for StateProviders in Sylius 2.0, organized by sections (Admin/Shop/Common) and resources (Order, Product, etc.). This structure improves maintainability by clearly separating admin and shop providers while also organizing by resource types.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/adr/2024_07_15_api_state_providers_structure.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/StateProvider\n    /Admin\n        /Order\n            ItemProvider.php\n        /Product\n            ItemProvider.php\n            CollectionProvider.php\n    /Shop\n        /Order\n            ItemProvider.php\n            CollectionProvider.php\n        /Product\n            CollectionProvider.php\n    /Common\n        /Adjustment\n            CollectionProvider.php\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit tests for StateMachine Abstraction\nDESCRIPTION: This bash command navigates to the StateMachine Abstraction directory within the Sylius project and executes PHPUnit tests using the vendor-provided binary. It assumes that PHPUnit is installed as a project dependency.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/src/Sylius/Abstraction/StateMachine/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\n(cd src/Sylius/Abstraction/StateMachine && vendor/bin/phpunit)\n\n```\n\n----------------------------------------\n\nTITLE: Disabling a Collection Operation in Sylius API\nDESCRIPTION: Example of a custom API configuration that disables a specific operation (admin_get) for the Zone resource. This demonstrates how to selectively modify API behavior without replacing the entire configuration.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/adr/2021_06_15_api_platform_config_customization.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n'%sylius.model.zone.class%':\n    collectionOperations:\n        admin_get:\n            enabled: false\n```\n\n----------------------------------------\n\nTITLE: Updating Database with Doctrine Migrations in Sylius\nDESCRIPTION: This command runs database migrations to apply necessary changes after installing a Sylius plugin.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/getting-started-with-sylius/installing-plugins.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/console doctrine:migrations:migrate\n```\n\n----------------------------------------\n\nTITLE: Updating Sylius Plus Version Constraint in composer.json\nDESCRIPTION: Shows how to update the version constraint for Sylius Plus modules in the composer.json file. This example specifically targets the sylius/plus-marketplace-suite-plugin, setting its version requirement to ^2.6.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/installation/upgrading-sylius-plus.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"require\": {\n        \"sylius/plus-marketplace-suite-plugin\": \"^2.6\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Shop Product Endpoint for Visitor in Current Solution\nDESCRIPTION: An example HTTP GET request to fetch a product by slug for a shop visitor, showing the URL structure and expected response.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/adr/2020_09_01_admin_and_shop_split.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`GET /new-api/products/knitted-wool-blend-green-cap` for Visitor (using product slug) which will return\n`{\"id\": 1, \"slug\": 2, \"prices\": {} }`\n```\n\n----------------------------------------\n\nTITLE: Configuring Twig Hooks for Custom Logo in YAML\nDESCRIPTION: YAML configuration for overriding the default Sylius logo using Twig Hooks.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/getting-started-with-sylius/customizing-the-shop.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsylius_twig_hooks:\n    hooks:\n        sylius_shop.base.header.content.logo:\n            content:\n                template: 'header/content/logo/content/logo.html.twig'\n```\n\n----------------------------------------\n\nTITLE: Markdown Header for Gateway Encryption Guide\nDESCRIPTION: Markdown header indicating the purpose of implementing encryption for gateway configurations stored in the database\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-cookbook-2.0/how-to-encrypt-gateway-config-stored-in-the-database.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# How to encrypt gateway config stored in the database?\n```\n\n----------------------------------------\n\nTITLE: Contact Email Template Path - Twig\nDESCRIPTION: Path for overriding the default contact email template in a Sylius project. This template controls the format and content of emails sent when customers submit contact requests.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/architecture/contact.md#2025-04-21_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\ntemplates/bundles/SyliusShopBundle/Email/contactRequest.html.twig\n```\n\n----------------------------------------\n\nTITLE: Modifying Order response structure in Sylius API\nDESCRIPTION: This update changes the Order response by adding channel, customer, state, and customerIp fields while removing the id field for shop GET responses.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/UPGRADE-API-2.0.md#2025-04-21_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n    +   \"channel\": \"/api/v2/shop/channels/WEB\",\n    +   \"customer\": {\n    +       \"@id\": \"/api/v2/shop/customers/123\",\n    +       \"@type\": \"Customer\",\n    +       \"email\": \"oliver@example.com\"\n    +   },\n    +   \"state\": \"cart\",\n    +   \"customerIp\": \"192.168.1.2\",\n    -   \"id\": 1\n```\n\n----------------------------------------\n\nTITLE: Example of Admin Product Endpoint in Current Solution\nDESCRIPTION: An example HTTP GET request to fetch a product by code for an admin user, showing the URL structure and expected response with additional admin information.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/adr/2020_09_01_admin_and_shop_split.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`GET /new-api/products/KNITTED_WOOL_BLEND_GREEN_CAP` for admin user (using product code) which will return\n`{\"id\": 1, \"slug\": 2, \"prices\": {}, \"admin_related_information\" : \"\" }`\n```\n\n----------------------------------------\n\nTITLE: Creating a Twig Component via Console\nDESCRIPTION: This bash command is used to create a new Twig component using the Symfony Maker Bundle. The command will prompt for a name and then generate both the PHP class and corresponding Twig template for the component.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-templates.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n\"bin/console make:twig-component\"\n```\n\n----------------------------------------\n\nTITLE: CSS Customization for Access Denied Links\nDESCRIPTION: This CSS snippet shows how to customize the appearance of links that point to routes where the administrator doesn't have access, hiding button elements with the ACCESS_DENIED href.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/customers/adminuser.md#2025-04-21_snippet_7\n\nLANGUAGE: css\nCODE:\n```\na[href=\"ACCESS_DENIED\"].button {\n   display: none !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Rebasing and Force-Pushing Updated Changes\nDESCRIPTION: Commands to rebase your feature branch against the latest upstream changes and force-push the updates to your fork after making requested modifications.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/contributing/contributing-code/submitting-a-patch.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit rebase -f upstream/2.0\ngit push --force-with-lease origin feature_branch\n```\n\n----------------------------------------\n\nTITLE: Renaming Field in Serialization Configuration (YAML)\nDESCRIPTION: Shows how to rename a field in the API response by modifying the serialization configuration file using YAML format.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-serialization-of-api.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nSylius\\Component\\Core\\Model\\Product:\n    attributes:\n        options:\n            serialized_name: optionValues\n            groups: \n               - 'shop:product:custom_read'\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Logo File Path in Bash\nDESCRIPTION: Specifies the directory path where the custom logo file should be placed in the Sylius project structure.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/getting-started-with-sylius/customizing-the-shop.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nassets/shop/images/logo.png\n```\n\n----------------------------------------\n\nTITLE: Direct Email Call Implementation in CompleteOrderHandler\nDESCRIPTION: An example of the alternative direct email approach that was considered but not selected. This shows a straightforward call to an email manager to send a confirmation email for a cart/order.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/adr/2020_11_18_sending_emails_via_api.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$this->emailManager->sendConfirmationEmail($cart);\n```\n\n----------------------------------------\n\nTITLE: Example of Admin Product Endpoint with Prefixed Paths\nDESCRIPTION: An example HTTP GET request to fetch a product by code for an admin user using the prefixed paths approach, showing the URL structure and expected response with additional admin information.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/adr/2020_09_01_admin_and_shop_split.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n`GET /new-api/admin/products/KNITTED_WOOL_BLEND_GREEN_CAP` for admin user (using product code) which will return\n`{\"id\": 1, \"slug\": 2, \"prices\": {}, \"admin_related_information\" : \"\" }`\n```\n\n----------------------------------------\n\nTITLE: Removing ID field from ShopBillingData in Channel response\nDESCRIPTION: This change removes the ID field from the ShopBillingData embedded in Channel responses while retaining all business data fields.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/UPGRADE-API-2.0.md#2025-04-21_snippet_20\n\nLANGUAGE: diff\nCODE:\n```\n    \"shopBillingData\": {\n        \"@type\": \"ShopBillingData\",\n    -   \"id\": 1,\n        \"company\": \"Web Channel Company\",\n        \"taxId\": \"WCH123456\",\n        \"countryCode\": \"EN\",\n        \"street\": \"123 Web St.\",\n        \"city\": \"Web City\",\n        \"postcode\": \"00000\"\n    },\n```\n\n----------------------------------------\n\nTITLE: Configuring Hookable Priority in YAML\nDESCRIPTION: This YAML configuration allows changing the rendering order of hookables without rewriting the main configuration. Hookables with higher priority values will be rendered later. In the example, `second_hookable_name` will be rendered before `first_hookable_name` due to the priority difference.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-templates.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n\"sylius_twig_hooks:\\n    hooks:\\n        hook_name:\\n            first_hookable_name:\\n                template: 'custom_template.html.twig'\\n                priority: 100\\n            second_hookable_name:\\n                component: 'app_shop:custom_component'\\n                priority: 0\"\n```\n\n----------------------------------------\n\nTITLE: Pushing Squashed Commits to Your Fork\nDESCRIPTION: Updates your GitHub fork with the modified commit history after squashing commits in your feature branch.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/contributing/contributing-code/submitting-a-patch.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit push --force-with-lease origin feature_branch\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Front Matter for Documentation Page\nDESCRIPTION: YAML front matter configuration for the documentation page layout, controlling visibility of title, description, table of contents, outline and pagination.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/getting-started-with-sylius/installation.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlayout:\n  title:\n    visible: true\n  description:\n    visible: false\n  tableOfContents:\n    visible: true\n  outline:\n    visible: true\n  pagination:\n    visible: true\n```\n\n----------------------------------------\n\nTITLE: Clearing Cache with Symfony Console in Bash\nDESCRIPTION: This bash command demonstrates how to clear the cache in a Symfony project, which is necessary for the translation changes to be applied. Ensure you have 'php' and 'Symfony' installed and configured in your environment for this command to work.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-translations.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/console cache:clear\n```\n\n----------------------------------------\n\nTITLE: Referencing ProductVariant in Sylius Component\nDESCRIPTION: This code snippet shows how ProductOptionValue is related to ProductVariant in the Sylius codebase. It demonstrates the relationship between these entities, supporting the decision to use IRIs for Product Option Values.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/adr/2020_03_03_api_product_option_values.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n(e.g. be [related with](https://github.com/Sylius/Sylius/blob/master/src/Sylius/Component/Product/Model/ProductVariant.php#L44) `ProductVariant`).\n```\n\n----------------------------------------\n\nTITLE: Removing ID field from ProductOption response in Sylius API\nDESCRIPTION: This change removes the ID field from the ProductOption response, simplifying the API and encouraging the use of code as the primary identifier.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/UPGRADE-API-2.0.md#2025-04-21_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\n    {\n        \"@context\": \"/api/v2/contexts/ProductOption\",\n        \"@id\": \"/api/v2/admin/product-options/COLOR\",\n        \"@type\": \"ProductOption\",\n    -   \"id\": 1,\n        \"code\": \"COLOR\",\n        \"position\": 0,\n        \"values\": [\n            \"/api/v2/admin/product-options/COLOR/values/COLOR_BLUE\",\n            \"/api/v2/admin/product-options/COLOR/values/COLOR_RED\"\n        ],\n        \"translations\": {\n            \"en_US\": {\n                \"@id\": \"/api/v2/admin/product-options/COLOR/translations/en_US\",\n                \"@type\": \"ProductOptionTranslation\",\n                \"name\": \"Color\"\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Logo Template Path in Bash\nDESCRIPTION: Bash command showing the path where the custom logo template should be placed for manual overriding.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/getting-started-with-sylius/customizing-the-shop.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ntemplates/bundles/SyliusShopBundle/shared/logo.html.twig\n```\n\n----------------------------------------\n\nTITLE: Renaming Field in Serialization Configuration (XML)\nDESCRIPTION: Demonstrates how to rename a field in the API response by modifying the serialization configuration file using XML format.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-serialization-of-api.md#2025-04-21_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<attribute name=\"options\" serialized-name=\"optionValues\">\n    <group>sylius:admin:product:index</group>\n</attribute>\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration\nDESCRIPTION: YAML frontmatter metadata indicating this is a hidden documentation page.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-factories.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nhidden: true\n---\n```\n\n----------------------------------------\n\nTITLE: Clearing Symfony Cache Command\nDESCRIPTION: Command to clear the Symfony cache after making changes to translation files, ensuring the new flash messages are loaded.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-flashes.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/console cache:clear\n```\n\n----------------------------------------\n\nTITLE: Contact Request Form Route Definition - YAML\nDESCRIPTION: Template path definition showing the location of contact routing configuration in Sylius. This file contains settings for redirect URL, flash messages, form configuration, and template customization.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/architecture/contact.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nSylius/Bundle/ShopBundle/Resources/config/routing/contact.yml\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration in Markdown\nDESCRIPTION: A YAML front matter block that configures this document as hidden, meaning it's likely excluded from navigation menus or documentation indices.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nhidden: true\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: Hidden frontmatter configuration for a markdown documentation page\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-models/how-to-add-a-custom-translatable-model.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nhidden: true\n---\n```\n\n----------------------------------------\n\nTITLE: Building Front-end Assets with npm\nDESCRIPTION: Commands to install npm dependencies and build front-end assets required by Sylius, using npm as the package manager.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/installation/sylius-ce-installation/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Running Tests for SyliusApiBundle Using Bash\nDESCRIPTION: This snippet shows the command to run the tests for the SyliusApiBundle using PHPUnit. Make sure that all previous setup commands have been successfully executed before running this command.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/src/Sylius/Bundle/ApiBundle/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n(cd src/Sylius/Bundle/ApiBundle && vendor/bin/phpunit)\n```\n\n----------------------------------------\n\nTITLE: Updating Admin Templates\nDESCRIPTION: Modifications to admin interface templates to improve input contrast ratio and fix default value definitions\nSOURCE: https://github.com/sylius/sylius/blob/2.1/CHANGELOG-2.0.md#2025-04-21_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\ntemplates/bundles/SyliusAdminBundle/*\n```\n\n----------------------------------------\n\nTITLE: Modifying RegisterShopUser Command Constructor (PHP)\nDESCRIPTION: Shows changes to the constructor of the RegisterShopUser command, including new parameters and visibility modifications.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/UPGRADE-API-2.0.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\npublic function __construct(\n-   public string $firstName,\n-   public string $lastName,\n-   public string $email,\n-   public string $password,\n-   public bool $subscribedToNewsletter = false,\n+   protected string $firstName,\n+   protected string $lastName,\n+   protected string $email,\n+   protected string $password,\n+   protected ?string $channelCode,\n+   protected ?string $localeCode,\n+   protected bool $subscribedToNewsletter = false,\n) {\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Register Template in Twig\nDESCRIPTION: Fix for duplicated button ID in the registration template\nSOURCE: https://github.com/sylius/sylius/blob/2.1/CHANGELOG-2.0.md#2025-04-21_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\nregister.html.twig\n```\n\n----------------------------------------\n\nTITLE: Automatically Fixing Coding Standard Violations\nDESCRIPTION: Command to automatically fix coding standard violations in source and test code files. This extends the check command with the --fix flag to apply automatic fixes where possible.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/contributing/contributing-code/coding-standards.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/ecs check src tests --fix\n```\n\n----------------------------------------\n\nTITLE: Configuring Git for Sylius Development\nDESCRIPTION: Sets up Git with your name and email for contribution tracking in the Sylius project. These commands configure your global Git settings for all repositories.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/contributing/contributing-code/submitting-a-patch.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"you@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response with Renamed Field\nDESCRIPTION: Displays the structure of a JSON response for a Product resource with the 'options' field renamed to 'optionValues'.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-serialization-of-api.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 123,\n    \"code\": \"product_code\",\n    \"product\": \"/api/v2/shop/products/product_code\",\n    \"options\": [\n        \"/api/v2/shop/product-option-values/product_size_s\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown ADR Template Structure\nDESCRIPTION: Template structure for creating Architectural Decision Records (ADRs) that includes sections for status, context, decision drivers, considered options, decision outcome, and optional references.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/adr/_template.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# [short title of solved problem and solution]\n\n* Status: [proposed | rejected | accepted | deprecated | … | superseded by [ADR-0005](0005-example.md)]\n* Date: [YYYY-MM-DD when the decision was last updated] <!-- optional -->\n\n## Context and Problem Statement\n\n[Describe the context and problem statement, e.g., in free form using two to three sentences. You may want to articulate the problem in form of a question.]\n\n## Decision Drivers <!-- optional -->\n\n* [driver 1, e.g., a force, facing concern, …]\n* … <!-- numbers of drivers can vary -->\n\n## Considered Options\n\n### [option 1]\n\n[example | description | pointer to more information | …] <!-- optional -->\n\n* Good, because [argument a]\n* Bad, because [argument b]\n* … <!-- numbers of pros and cons can vary -->\n\n### [option 2]\n\n[example | description | pointer to more information | …] <!-- optional -->\n\n* Good, because [argument a]\n* Bad, because [argument b]\n* … <!-- numbers of pros and cons can vary -->\n\n## Decision Outcome\n\nChosen option: \"[option 1]\", because [justification. e.g., only option, which meets k.o. criterion decision driver | which resolves force force | … | comes out best (see below)].\n\n## References <!-- optional -->\n\n* [Link type] [Link to ADR] <!-- example: Refined by [ADR-0005](0005-example.md) -->\n* … <!-- numbers of links can vary -->\n```\n\n----------------------------------------\n\nTITLE: Updating VerifyShopUser Command Constructor (PHP)\nDESCRIPTION: Demonstrates changes to the constructor of the VerifyShopUser command, including parameter updates and visibility modifications.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/UPGRADE-API-2.0.md#2025-04-21_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\npublic function __construct(\n-   public string $token,\n-   private ?string $localeCode = null,\n-   private ?string $channelCode = null,\n+   protected string $token,\n+   protected string $channelCode,\n+   protected string $localeCode,\n) {\n}\n```\n\n----------------------------------------\n\nTITLE: Updating UploadAvatarImageAction Constructor (PHP)\nDESCRIPTION: Shows changes to the constructor of the UploadAvatarImageAction, including parameter updates and removals.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/UPGRADE-API-2.0.md#2025-04-21_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\npublic function __construct(\n    private FactoryInterface $avatarImageFactory,\n    private AvatarImageRepositoryInterface $avatarImageRepository,\n-   private ImageUploaderInterface $imageUploader,\n-   private IriConverterInterface $iriConverter,\n+   private RepositoryInterface $adminUserRepository,\n+   private ImageUploaderInterface $imageUploader,\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Composer Conflict for api-platform/jsonld in Markdown\nDESCRIPTION: This snippet specifies a conflict with api-platform/jsonld version 4.1.1 and above in the composer.json file. The conflict is added to prevent potential breaking changes in API responses that could affect the current Sylius implementation.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/CONFLICTS.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- `api-platform/jsonld: ^4.1.1`\n\n  API Platform introduced changes in version 4.1.1 that modify API responses, potentially breaking compatibility with our current implementation.  \n  To ensure stable behavior, we have added this conflict until we can verify and adapt to the changes.\n```\n\n----------------------------------------\n\nTITLE: Removing ID field from ProductOptionValue response in Sylius API\nDESCRIPTION: This change removes the ID field from the ProductOptionValue response, emphasizing the use of code as the primary identifier for these resources.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/UPGRADE-API-2.0.md#2025-04-21_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\n    {\n        \"@context\": \"/api/v2/contexts/ProductOptionValue\",\n        \"@id\": \"/api/v2/admin/product-option-values/COLOR_BLUE\",\n        \"@type\": \"ProductOptionValue\",\n    -   \"id\": \"1\",\n        \"code\": \"COLOR_BLUE\",\n        \"option\": \"/api/v2/admin/product-options/COLOR\",\n        \"translations\": {\n            \"en_US\": {\n                \"value\": \"Blue\"\n            }\n        },\n        \"value\": \"Blue\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Page Layout in Sylius Documentation\nDESCRIPTION: YAML frontmatter that controls the visibility of various page elements including title, description, table of contents, outline, and pagination in the Sylius documentation system.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/configuration/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout:\n  title:\n    visible: true\n  description:\n    visible: false\n  tableOfContents:\n    visible: true\n  outline:\n    visible: true\n  pagination:\n    visible: true\n---\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Product Resource\nDESCRIPTION: Shows the structure of a typical JSON response for a Product resource in Sylius, including fields like id, code, variants, and translations.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-serialization-of-api.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 123,\n    \"code\": \"product_code\",\n    \"variants\": [\n        \"/api/v2/shop/product-variants/product-variant-0\"\n    ],\n    \"translations\": {\n        \"en_US\": {\n          \"@id\": \"/api/v2/shop/product-translations/123\",\n          \"@type\": \"ProductTranslation\",\n          \"id\": 123,\n          \"name\": \"product name\",\n          \"slug\": \"product-name\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gateway Service in XML\nDESCRIPTION: Adds the form type to the service configuration using XML format.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-payments/how-to-integrate-a-payment-gateway-as-a-plugin.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<service id=\"Acme\\SyliusExamplePlugin\\Form\\Type\\GatewayConfigurationType\">\n    <tag name=\"sylius.gateway_configuration_type\" type=\"sylius_payment\" label=\"acme_sylius_payment.gateway.name\" />\n    <tag name=\"form.type\" />\n</service>\n```\n\n----------------------------------------\n\nTITLE: Rebasing Feature Branch on Upstream\nDESCRIPTION: Updates your feature branch with the latest changes from the upstream repository before submitting a pull request to Sylius.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/contributing/contributing-code/submitting-a-patch.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout feature_branch\ngit rebase upstream/2.0  # or upstream/1.14 for bug fixes\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter in Markdown\nDESCRIPTION: YAML front matter block defining configuration metadata for the document, specifically setting the hidden property to true.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-menus.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nhidden: true\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Admin User Fixtures with Channel and Roles in YAML\nDESCRIPTION: This YAML configuration shows how to set up fixtures for Admin Users with specific channel access, roles and permission checker settings.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/customers/adminuser.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nsylius_fixtures:\n    suites:\n        default:\n            fixtures:\n                channel:\n                    options:\n                        custom:\n                             -   email: 'sylius@example.com'\n                                 username: 'sylius'\n                                 password: 'sylius'\n                                 channel: 'DEFAULT_CHANNEL_CODE'\n                                 roles:\n                                     - 'SUPER_ADMIN_CODE'\n                                 enable_permission_checker: true\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration\nDESCRIPTION: YAML frontmatter metadata block setting the hidden property to true for this documentation page.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-forms.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhidden: true\n```\n\n----------------------------------------\n\nTITLE: ADR Filename Format Convention - Markdown\nDESCRIPTION: Defines the standard filename format for ADR files using lowercase, underscores, and including creation date with topic. Files must follow template at _template.md.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/adr/_readme.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nYYYY_MM_DD_topic.md\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Layout Settings in YAML\nDESCRIPTION: YAML configuration for a documentation page that specifies visibility settings for various page elements including title, description, table of contents, outline, and pagination.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/contributing/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout:\n  title:\n    visible: true\n  description:\n    visible: false\n  tableOfContents:\n    visible: true\n  outline:\n    visible: false\n  pagination:\n    visible: true\n---\n```\n\n----------------------------------------\n\nTITLE: Presenting New Directory Structure for Query Extensions\nDESCRIPTION: Illustrates the new directory structure chosen for Query Extensions, separating them by section (Admin, Shop, Common) and resource (e.g., Product) for improved organization and clarity.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/adr/2024_07_16_api_query_extensions_directory_structure.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nDoctrine/ORM/QueryExtension/\n    /Admin\n        /Product\n            ExampleExtension.php\n    /Shop\n    /Common\n```\n\n----------------------------------------\n\nTITLE: Configuring Sylius Admin Version Notifications in YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to disable the version notifications in the Sylius admin panel by setting the 'version_checker.enabled' parameter to false in the parameters.yml file.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-cookbook-2.0/how-to-disable-admin-version-notifications.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n    sylius.admin.version_checker.enabled: false\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration that sets the hidden property to true for this documentation page.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-checkout/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nhidden: true\n---\n\n# Customizing Checkout\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Catalog Promotion Structure in JSON\nDESCRIPTION: Basic JSON structure showing the essential parameters for a catalog promotion, including the unique code and name. The code should contain only letters, numbers, dashes, and underscores, with snake_case being recommended.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/products/catalog-promotions.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": \"t_shirt_promotion\" // unique\n    \"name\": \"T-shirt Promotion\"\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Sylius Cloud Settings for Platform.sh\nDESCRIPTION: This YAML configuration file defines advanced settings for deploying Sylius on Platform.sh. It likely includes custom build and deploy hooks, environment variables, and other Platform.sh-specific configurations to optimize the Sylius deployment.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-cookbook-2.0/advanced-sylius-cloud-by-platform.sh-configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Advanced Sylius Cloud by Platform.sh configuration\n```\n\n----------------------------------------\n\nTITLE: Implementing PHP Deprecation Notice in Sylius\nDESCRIPTION: Example showing the proper way to mark and trigger deprecation notices in Sylius code. Includes both PHPDoc deprecation annotation and runtime deprecation trigger using the trigger_deprecation() function.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/sylius-2.0-documentation/organization/backwards-compatibility-promise.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @deprecated Deprecated since version 1.X. Use XXX instead.\n */\n```\n\nLANGUAGE: php\nCODE:\n```\ntrigger_deprecation(\n    'sylius/some-package', // package name\n    '1.x', // package version\n    'A is deprecated and will be removed in Sylius 2.0. Use B instead.', // message\n);\n```\n\n----------------------------------------\n\nTITLE: Creating and Adding an Integer Attribute in Sylius\nDESCRIPTION: This snippet demonstrates how to create an integer attribute for book pages and add it to a product.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/products/attributes.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/** @var AttributeInterface $bookPagesAttribute */\n$bookPagesAttribute = $this->container->get('sylius.repository.product_attribute')->findOneBy(['code' => 'BOOK-PAGES']);\n\n/** @var AttributeValueInterface $pages */\n$pages = $attributeValueFactory->createNew();\n\n$pages->setAttribute($bookPagesAttribute);\n\n$pages->setValue(500);\n\n$product->addAttribute($pages);\n```\n\n----------------------------------------\n\nTITLE: Persisting Product Changes in Sylius\nDESCRIPTION: This code shows how to flush the product manager to persist the changes made to the product.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/products/attributes.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$this->container->get('sylius.manager.product')->flush();\n```\n\n----------------------------------------\n\nTITLE: Updating QueryCollectionExtension Method Signature (PHP)\nDESCRIPTION: Shows changes to the applyToCollection method signature in various QueryCollectionExtension classes.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/UPGRADE-API-2.0.md#2025-04-21_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\npublic function applyToCollection(\n    QueryBuilder $queryBuilder,\n    QueryNameGeneratorInterface $queryNameGenerator,\n    string $resourceClass,\n-   string $operationName = null,\n+   \\ApiPlatform\\Metadata\\Operation $operation = null,\n    array $context = [],\n): void;\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Catalog Promotion Action Configurator in PHP for Sylius\nDESCRIPTION: This code snippet shows how to implement a custom catalog promotion action configurator in Sylius. It defines the configuration form and handles the normalization of configuration data.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-cookbook-2.0/how-to-add-a-custom-catalog-promotion-action.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Promotion\\Action;\n\nuse Sylius\\Bundle\\PromotionBundle\\Form\\Type\\CatalogPromotionAction\\FixedDiscountActionConfigurationType;\nuse Sylius\\Component\\Promotion\\Model\\CatalogPromotionActionInterface;\n\nfinal class CustomActionConfigurator implements ActionConfiguratorInterface\n{\n    public function getFieldDefinition(): FieldDefinition\n    {\n        return new FieldDefinition('amount', FixedDiscountActionConfigurationType::class);\n    }\n\n    public function configure(array $configuration): array\n    {\n        return ['amount' => $configuration['amount']];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding RequestShopUserVerification Command Constructor (PHP)\nDESCRIPTION: Illustrates the new constructor for the RequestShopUserVerification command, including its parameters.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/UPGRADE-API-2.0.md#2025-04-21_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\npublic function __construct(\n+   protected string|int|null $shopUserId,\n+   protected ?string $channelCode,\n+   protected ?string $localeCode,\n) {\n}\n```\n\n----------------------------------------\n\nTITLE: Updating RequestResetPasswordToken Command Constructor (PHP)\nDESCRIPTION: Illustrates changes to the constructor of the RequestResetPasswordToken command, including new parameters and visibility changes.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/UPGRADE-API-2.0.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\npublic function __construct(\n-   public string $email,\n+   protected string $email,\n+   protected ?string $channelCode,\n+   protected ?string $localeCode,\n) {\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Channel PUT Request with Channel Price History Config in Sylius API\nDESCRIPTION: This code snippet shows the changes to the Channel PUT request payload structure, demonstrating how to include channelPriceHistoryConfig fields after the management for ChannelPriceHistoryConfig was moved to the Channel resource.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/UPGRADE-API-2.0.md#2025-04-21_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n        \"menuTaxon\": \"home-accessories\",\n    +   \"channelPriceHistoryConfig\": {\n    +       \"lowestPriceForDiscountedProductsCheckingPeriod\": 30,\n    +       \"lowestPriceForDiscountedProductsVisible\": true,\n    +       \"taxonsExcludedFromShowingLowestPrice\": [\"clearance\", \"seasonal\"]\n        }\n```\n\n----------------------------------------\n\nTITLE: Cart Clearing on Logout Scenario\nDESCRIPTION: Describes how the cart is handled during logout. The cart is cleared when viewing after logout but remains persistent for when the user logs back in.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/cart-flow.md#2025-04-21_snippet_2\n\nLANGUAGE: gherkin\nCODE:\n```\nGiven there is a customer identified by email \"sylius@example.com\" with an empty cart\nAnd this user adds a blue T-Shirt to the cart\nWhen the user logs out\nAnd views the cart\nThen the cart should be empty\n```\n\n----------------------------------------\n\nTITLE: Sylius Logo Hook HTML\nDESCRIPTION: HTML structure showing the Sylius Twig Hook for the logo, as seen in the browser's developer console.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/getting-started-with-sylius/customizing-the-shop.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- BEGIN HOOK | name: \"sylius_shop.homepage.index.header.content.logo, sylius_shop.base.header.content.logo\" -->\n<!-- BEGIN HOOKABLE | hook: \"sylius_shop.base.header.content.logo\", name: \"content\", template: \"@SyliusShop/shared/sylius_logo.html.twig\", priority: 0 -->\n```\n\n----------------------------------------\n\nTITLE: Creating a Text Attribute in Sylius\nDESCRIPTION: This snippet demonstrates how to create a text attribute named 'Book cover' using the AttributeFactory and save it to the repository.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/products/attributes.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/** @var AttributeFactoryInterface $attributeFactory */\n$attributeFactory = $this->container->get('sylius.factory.product_attribute');\n\n/** @var AttributeInterface $attribute */\n$attribute = $attributeFactory->createTyped('text');\n\n$attribute->setName('Book cover');\n$attribute->setCode('book_cover');\n\n$this->container->get('sylius.repository.product_attribute')->add($attribute);\n```\n\n----------------------------------------\n\nTITLE: Setting Country and Province Codes in Sylius\nDESCRIPTION: This snippet shows how to assign ISO codes to Country and Province objects. It uses 'US' for the United States and 'US_CA' for California as examples.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/customers/addresses/countries.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// US - the United States of America\n$country->setCode('US');\n// US_CA - California\n$province->setCode('US_CA');\n```\n\n----------------------------------------\n\nTITLE: Configuring Sylius Shop to Use Storage-Based Locale Switching in YAML\nDESCRIPTION: The modified configuration that sets up storage-based locale switching instead of URL-based. This configuration maintains product grid settings while changing how locale selection is managed.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-cookbook-2.0/how-to-disable-localized-urls.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/sylius_shop.yaml\n\nsylius_shop:\n    product_grid:\n        include_all_descendants: true\n    locale_switcher: storage\n```\n\n----------------------------------------\n\nTITLE: Shipment State Machine Transitions Configuration in Sylius\nDESCRIPTION: Defines the available state transitions for shipments in Sylius, including transitions from cart to ready, ready to shipped, and ready to cancelled states.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/shipments.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntransitions:\n     create:\n         from: [cart]\n         to: ready\n     ship:\n         from: [ready]\n         to: shipped\n     cancel:\n         from: [ready]\n         to: cancelled\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony Version for Sylius\nDESCRIPTION: Commands to change the Symfony version requirement and update dependencies for your Sylius project. This allows using a specific Symfony version instead of the default LTS version.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/installation/sylius-ce-installation/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer config extra.symfony.require \"<version>\" # e.g. \"6.3.*\"\ncomposer update\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Hidden Documentation Page\nDESCRIPTION: YAML front matter block that specifies this documentation page should be hidden from public view in the documentation system. This is likely used for pages that are under development or not ready for public consumption.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/returns.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nhidden: true\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Database Connection\nDESCRIPTION: Environment variable configuration for MySQL database connection in a local development environment. This defines the database URL with connection parameters and charset settings.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/installation/sylius-ce-installation/README.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nDATABASE_URL=mysql://<username>:<password>@<host>/<your_database_name>_%kernel.environment%?serverVersion=<your_db_version>&charset=utf8\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Locale via LocaleContext in Sylius\nDESCRIPTION: Demonstrates how to retrieve the current locale code using the LocaleContext service in a Sylius controller. The LocaleContext can be accessed via the service container with the ID 'sylius.context.locale'.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/configuration/locales.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function fooAction()\n{\n    $locale = $this->get('sylius.context.locale')->getLocaleCode();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Sylius Documentation\nDESCRIPTION: This YAML snippet defines the layout configuration for the documentation page, specifying visibility settings for various page elements.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/invoices.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout:\n  title:\n    visible: true\n  description:\n    visible: false\n  tableOfContents:\n    visible: true\n  outline:\n    visible: true\n  pagination:\n    visible: true\n---\n```\n\n----------------------------------------\n\nTITLE: Cloning Sylius-Standard Repository\nDESCRIPTION: This command clones the Sylius-Standard repository from GitHub to set up a new project. It allows you to specify a custom project name.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/installation/sylius-ce-installation/sylius-ce-installation-with-docker.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:Sylius/Sylius-Standard.git your_project_name\n```\n\n----------------------------------------\n\nTITLE: Controller REST Archetype for Ship Operation\nDESCRIPTION: Example of implementing a ship operation using the Controller REST archetype approach, where a custom verb is appended to the resource URL and parameters are passed in the request body.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/adr/2020_05_13_handling_non_crud_operations_in_api.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tracking_code\": \"XYZ\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Sylius Project with Composer\nDESCRIPTION: Creates a new Sylius-based project using the Sylius Standard template, which provides a pre-configured application structure with all necessary dependencies.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/installation/sylius-ce-installation/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project sylius/sylius-standard AcmeStore\n```\n\n----------------------------------------\n\nTITLE: Google-Recommended Custom Operation for Ship Operation\nDESCRIPTION: Example of implementing a ship operation using Google's recommended approach for custom operations, where the operation is appended to the resource URL with a colon prefix.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/adr/2020_05_13_handling_non_crud_operations_in_api.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tracking_code\": \"XYZ\"\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration\nDESCRIPTION: YAML configuration block specifying page metadata, setting hidden status to true\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-fixtures/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nhidden: true\n---\n```\n\n----------------------------------------\n\nTITLE: Creating an AttributeValue in Sylius\nDESCRIPTION: This code shows how to create an AttributeValue object using the AttributeValueFactory.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/products/attributes.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/** @var FactoryInterface $attributeValueFactory */\n$attributeValueFactory = $this->container->get('sylius.factory.product_attribute_value');\n\n/** @var AttributeValueInterface $hardcover */\n$hardcover = $attributeValueFactory->createNew();\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Hidden Documentation Page\nDESCRIPTION: YAML frontmatter block that marks the documentation page as hidden from normal navigation or viewing.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-controllers.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nhidden: true\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration\nDESCRIPTION: YAML configuration block marking the documentation page as hidden from normal navigation or display.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/carts-and-orders/checkout.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nhidden: true\n---\n```\n\n----------------------------------------\n\nTITLE: Sylius Addressing Configuration in YAML\nDESCRIPTION: YAML configuration for customizing the Country model in Sylius addressing component.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-customization-guide/customizing-models/README.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsylius_addressing:\n    resources:\n        country:\n            classes:\n                model: App\\Entity\\Addressing\\Country\n```\n\n----------------------------------------\n\nTITLE: Pull Request Template for Sylius Contributions\nDESCRIPTION: A markdown template to include in pull request descriptions that provides key information about the contribution including branch, type of change, and related issues.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/contributing/contributing-code/submitting-a-patch.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| Q               | A\n| --------------- | -----\n| Branch?         | {lowest_bugfix_version} or {future_version}\n| Bug fix?        | no/yes\n| New feature?    | no/yes\n| BC breaks?      | no/yes\n| Deprecations?   | no/yes\n| Related tickets | fixes #X, partially #Y, mentioned in #Z\n| License         | MIT\n```\n\n----------------------------------------\n\nTITLE: Cloning Forked Sylius Repository\nDESCRIPTION: Clones your personal fork of the Sylius repository to your local development environment for making changes.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/contributing/contributing-code/submitting-a-patch.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:YOUR_USERNAME/Sylius.git\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: Changes the current directory to the newly created Sylius project folder to continue with the installation process.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/installation/sylius-ce-installation/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd AcmeStore\n```\n\n----------------------------------------\n\nTITLE: Updating Sylius Version Constraint in composer.json\nDESCRIPTION: This snippet shows how to modify the composer.json file to update the Sylius library version constraint. The example specifies version 2.0 or higher as the requirement.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/docs/the-book/installation/upgrading-sylius-ce.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{ \n    \"require\": { \n        \"sylius/sylius\": \"^2.0\" \n    } \n} \n```\n\n----------------------------------------\n\nTITLE: Displaying Current Directory Structure for Query Extensions\nDESCRIPTION: Shows the current disorganized structure of Query Extensions in the codebase, which lacks differentiation between sections and resources.\nSOURCE: https://github.com/sylius/sylius/blob/2.1/adr/2024_07_16_api_query_extensions_directory_structure.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/Doctrine\n    /QueryCollectionExtension\n        ExampleExtension.php\n    /QueryExtension\n    /QueryItemExtension\n```"
  }
]