[
  {
    "owner": "reown-com",
    "repo": "reown-docs",
    "content": "TITLE: Configuring AppKit with SIWX for Travel Rule Compliance\nDESCRIPTION: TypeScript implementation showing how to enable SIWX authentication in an AppKit configuration. The code demonstrates importing the DefaultSIWX class and integrating it into the AppKit initialization.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/travel-rule.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAppKit } from '@reown/appkit'\nimport { DefaultSIWX } from '@reown/appkit-siwx'\n\nconst appkit = createAppKit({\n  projectId,\n  networks,\n  metadata,\n  siwx: new DefaultSIWX() // add this line to enable SIWX\n})\n```\n\n----------------------------------------\n\nTITLE: React: Configuring Reown AppKit - Import and Initialization\nDESCRIPTION: This snippet illustrates how to import 'createAppKit' and network modules, remove deprecated Web3Modal imports, create a wagmiAdapter, and initialize AppKit with adapters and network settings in a React application.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\n// Import createAppKit and networks\nimport { createAppKit } from '@reown/appkit/react'\nimport { arbitrum, mainnet } from '@reown/appkit/networks'\nimport { WagmiAdapter } from '@reown/appkit-adapter-wagmi'\nimport { WagmiProvider } from 'wagmi'\n// Remove old Web3Modal imports\n// Create wagmiAdapter with networks and projectId\nconst projectId = 'YOUR_PROJECT_ID'\nconst wagmiAdapter = new WagmiAdapter({\n  networks: [mainnet, arbitrum],\n  projectId\n})\n// Initialize AppKit with adapters and networks\ncreateAppKit({\n  adapters: [wagmiAdapter],\n  networks: [mainnet, arbitrum],\n  metadata: {\n    name: 'AppKit',\n    description: 'AppKit Example',\n    url: 'https://example.com',\n    icons: ['https://avatars.githubusercontent.com/u/179229932']\n  },\n  projectId,\n  features: { analytics: true }\n})\n// Usage in React component\nexport default function App() {\n  return (\n    <>\n      <WagmiProvider config={wagmiAdapter.wagmiConfig}>\n        <QueryClientProvider client={new QueryClient()}>\n          <HomePage />\n        </QueryClientProvider>\n      </WagmiProvider>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Modal State with useAppKitState (Ethers) TypeScript\nDESCRIPTION: This snippet demonstrates using the useAppKitState hook from `@reown/appkit-ethers-react-native` to access the current reactive state of the modal. It shows destructuring the `open` (boolean indicating modal visibility) and `selectedNetworkId` (number representing the current chain ID) properties from the hook's return value. These values update automatically as the modal state changes.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/hooks.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useAppKitState } from '@reown/appkit-ethers-react-native'\n\nconst { open, selectedNetworkId } = useAppKitState()\n```\n\n----------------------------------------\n\nTITLE: Updating Imports in React\nDESCRIPTION: Code changes required to update imports from Web3Modal v5 to Reown AppKit in React applications, highlighting removed and added imports.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-solana-web.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following imports\n- import { createWeb3Modal, defaultSolanaConfig, useWeb3ModalAccount, useWeb3ModalProvider } from '@web3modal/solana/react'\n- import { solana, solanaTestnet, solanaDevnet } from '@web3modal/solana/chains'\n\n// Add the following imports\n+ import { solana, solanaTestnet, solanaDevnet } from '@reown/appkit/networks'\n+ import { createAppKit } from '@reown/appkit/react'\n+ import { SolanaAdapter } from '@reown/appkit-adapter-solana/react'\n```\n\n----------------------------------------\n\nTITLE: Initializing the WalletKit Client in Kotlin\nDESCRIPTION: Sets up the WalletKit client with project ID, connection type, application metadata, and telemetry preferences. It involves creating an `AppMetaData` object and calling the `initialize` method with appropriate parameters to prepare the SDK for wallet interactions.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/usage.mdx#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nval projectId = \"\" // Get Project ID at https://cloud.reown.com/\nval connectionType = ConnectionType.AUTOMATIC or ConnectionType.MANUAL\nval telemetryEnabled: Boolean = true\nval appMetaData = Core.Model.AppMetaData(\n    name = \"Wallet Name\",\n    description = \"Wallet Description\",\n    url = \"Wallet URL\",\n    icons = /*list of icon url strings*/,\n    redirect = \"kotlin-wallet-wc:/request\" // Custom Redirect URI\n)\n\nCoreClient.initialize(projectId = projectId, connectionType = connectionType, application = this, metaData = appMetaData, telemetryEnabled = telemetryEnabled)\n\nval initParams = Wallet.Params.Init(core = CoreClient)\n\nWalletKit.initialize(initParams) { error ->\n    // Error will be thrown if there's an issue during initialization\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing WalletConnect SignClient with Project ID - JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize the WalletConnect SignClient instance using the required projectId. The projectId is a unique identifier obtained from cloud.reown.com that connects the client to a specific Relay server instance associated with the project.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/cloud/relay.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport SignClient from '@walletconnect/sign-client'\nconst signClient = await SignClient.init({\n  projectId: 'c4f79cc821944d9680842e34466bfb'\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Solana Adapter with Custom Wallets in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to configure the Solana adapter for Reown AppKit with custom wallet adapters (Phantom and Solflare). It initializes the `SolanaAdapter` with the desired wallets, sets up project metadata, and then creates the AppKit modal instance, enabling features like analytics. Requires `@reown/appkit`, `@reown/appkit-adapter-solana`, `@reown/appkit/networks`, and `@solana/wallet-adapter-wallets`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/custom-connectors.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAppKit } from \"@reown/appkit\";\nimport { SolanaAdapter } from \"@reown/appkit-adapter-solana\";\nimport { solana, solanaTestnet, solanaDevnet } from \"@reown/appkit/networks\";\n\nimport {\n  SolflareWalletAdapter,\n  PhantomWalletAdapter,\n} from \"@solana/wallet-adapter-wallets\";\n\n// 0. Set up Solana adapter\nconst solanaWeb3JsAdapter = new SolanaAdapter({\n  wallets: [new PhantomWalletAdapter(), new SolflareWalletAdapter()],\n});\n\n// 1. Get projectId from https://cloud.reown.com\nconst projectId = \"YOUR_PROJECT_ID\";\n\n// 2. Set up the metadata\nconst metadata = {\n  //...\n};\n\n// 3. Create modal\nconst modal = createAppKit({\n  adapters: [solanaWeb3JsAdapter],\n  networks: [solana, solanaTestnet, solanaDevnet],\n  metadata: metadata,\n  projectId,\n  features: {\n    analytics: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Full Chain Abstraction Flow with WalletKit (TypeScript)\nDESCRIPTION: Provides a complete example demonstrating the typical usage flow for Chain Abstraction. It shows how to call `prepare`, check the result, sign necessary transactions using a `wallet` object's `signAny` method, and then call `execute` to broadcast the transactions.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/chain-abstraction.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Check if chain abstraction is needed\nconst result = await walletKit.chainAbstraction.prepare({\n  transaction: {\n    from: transaction.from as `0x${string}`,\n    to: transaction.to as `0x${string}`,\n    // @ts-ignore - cater for both input or data\n    input: transaction.input || (transaction.data as `0x${string}`),\n    chainId: chainId,\n  },\n});\n\n// Handle the prepare result\nif ('success' in result) {\n  if ('notRequired' in result.success) {\n    // No bridging required, proceed with normal transaction\n    console.log('no routing required');\n  } else if ('available' in result.success) {\n    const available = result.success.available;\n    \n    // Sign all bridge transactions and initial transaction\n    const bridgeTxs = available.route.map(tx => tx.transactionHashToSign);\n    const signedBridgeTxs = bridgeTxs.map(tx => wallet.signAny(tx));\n    const signedInitialTx = wallet.signAny(available.initial.transactionHashToSign);\n\n    // Execute the chain abstraction\n    const result = await walletKit.chainAbstraction.execute({\n      bridgeSignedTransactions: signedBridgeTxs,\n      initialSignedTransaction: signedInitialTx,\n      orchestrationId: available.routeResponse.orchestrationId,\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Web3Modal with Custom Wagmi Config in React (TSX)\nDESCRIPTION: This advanced React snippet shows how to configure Wagmi manually with custom chains (mainnet and sepolia) and connectors like walletConnect, injected wallets, and coinbaseWallet. Metadata describing the app is included and HTTP transports are specified for each chain id. createWeb3Modal is invoked with wagmiConfig, projectId, and optional analytics enabled. React components wrap the application providing Wagmi and React Query contexts. The snippet replaces older EthereumClient and Web3Modal usage with modern createWeb3Modal approach and supports chain transports explicitly.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/appkitv2.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createWeb3Modal } from '@web3modal/wagmi/react'\nimport { WagmiConfig, createConfig } from 'wagmi'\nimport { mainnet, sepolia } from 'viem/chains'\nimport { walletConnect, injected, coinbaseWallet } from 'wagmi/connectors'\nimport { http } from 'wagmi'\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\n\nconst projectId = 'YOUR_PROJECT_ID'\n\nconst metadata = {\n  name: 'AppKit',\n  description: 'AppKit Example',\n  url: 'https://example.com',\n  icons: ['https://avatars.githubusercontent.com/u/179229932']\n}\n\nconst wagmiConfig = createConfig({\n  chains: [mainnet, sepolia],\n  transports: {\n    [mainnet.id]: http(),\n    [sepolia.id]: http()\n  },\n  connectors: [\n    walletConnect({ projectId, metadata, showQrModal: false }),\n    injected({ shimDisconnect: true }),\n    coinbaseWallet({ appName: metadata.name, appLogoUrl: metadata.icons[0] })\n  ]\n})\n\ncreateWeb3Modal({\n  wagmiConfig,\n  projectId,\n  enableAnalytics: true\n})\n\nconst queryClient = new QueryClient()\n\nexport default function App() {\n  return (\n    <>\n      <WagmiConfig config={wagmiConfig}>\n        <QueryClientProvider client={queryClient}>\n          <HomePage />\n        </QueryClientProvider>\n      </WagmiConfig>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AppKit Solana Wallet Adapter in React (TypeScript)\nDESCRIPTION: This snippet initializes the Solana wallet adapters for use with the AppKit library in a React environment using TypeScript. It imports necessary components and wallet adapters, sets up a SolanaAdapter instance with Phantom and Solflare wallet support, and defines multiple Solana networks. It also creates optional metadata including app name, description, URL, and icon. The createAppKit function is then called outside any React component to establish the wallet modal, passing the configured adapters, networks, project ID, metadata, and optional analytics feature. The exported default function returns the main application component, ensuring wallet integration is set up prior to rendering.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/solana/about/implementation.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// App.tsx\nimport { createAppKit } from \"@reown/appkit/react\";\nimport { SolanaAdapter } from \"@reown/appkit-adapter-solana/react\";\nimport { solana, solanaTestnet, solanaDevnet } from \"@reown/appkit/networks\";\nimport {\n  PhantomWalletAdapter,\n  SolflareWalletAdapter,\n} from \"@solana/wallet-adapter-wallets\";\n\n// 0. Set up Solana Adapter\nconst solanaWeb3JsAdapter = new SolanaAdapter({\n  wallets: [new PhantomWalletAdapter(), new SolflareWalletAdapter()],\n});\n\n// 1. Get projectId from https://cloud.reown.com\nconst projectId = \"YOUR_PROJECT_ID\";\n\n// 2. Create a metadata object - optional\nconst metadata = {\n  name: \"AppKit\",\n  description: \"AppKit Solana Example\",\n  url: \"https://example.com\", // origin must match your domain & subdomain\n  icons: [\"https://avatars.githubusercontent.com/u/179229932\"],\n};\n\n// 3. Create modal\ncreateAppKit({\n  adapters: [solanaWeb3JsAdapter],\n  networks: [solana, solanaTestnet, solanaDevnet],\n  metadata: metadata,\n  projectId,\n  features: {\n    analytics: true, // Optional - defaults to your Cloud configuration\n  },\n});\n\nexport default function App() {\n  return <YourApp />;\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Wallets Directly with useAppKitWallet (React/TSX)\nDESCRIPTION: Demonstrates how to use the `useAppKitWallet` hook to initiate a direct wallet connection. It shows accessing connection state (`isReady`, `isPending`), the `connect` function, and handling connection success or error. Required dependency: `@reown/appkit-wallet-button/react`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/hooks.mdx#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nconst { isReady, isPending, connect } = useAppKitWallet({\n    onSuccess() {\n      // ...\n    },\n    onError(error) {\n      // ...\n    }\n  })\n\n...\n\n// Connect to a wallet\n<Button onClick={() => connect(\"walletConnect\")} />\n```\n\n----------------------------------------\n\nTITLE: Writing Data to Smart Contracts via EVM in C#\nDESCRIPTION: Provides C# examples for sending transactions to write data or execute functions on EVM smart contracts using `AppKit.EVM.WriteContractAsync()`. This operation requires gas. Shows how to specify the contract address, ABI (JSON or human-readable), method name, arguments, optional native token value (in wei), and optional gas limit. Also demonstrates using a `WriteContractParams` object. Returns the transaction hash as a string.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/actions.mdx#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nstring contractAbi = \"[ /* Your contract ABI */ ]\";\n// Or use human-readable ABI: \"function transfer(address to, uint256 amount) returns (bool)\"\n\n// Basic write\nstring txHash = await AppKit.EVM.WriteContractAsync(\n    \"0x123...\", // contract address\n    contractAbi,\n    \"transfer\", // method name\n    \"0x456...\", // recipient\n    1000 // amount\n);\n\n// Write with custom gas\nstring txHash = await AppKit.EVM.WriteContractAsync(\n    \"0x123...\", // contract address\n    contractAbi,\n    \"transfer\", // method name\n    gas: 100000, // custom gas limit\n    \"0x456...\", // recipient\n    1000 // amount\n);\n\n// Write with value and gas\nstring txHash = await AppKit.EVM.WriteContractAsync(\n    \"0x123...\", // contract address\n    contractAbi,\n    \"stake\", // method name\n    value: 1000000000000000000, // 1 ETH in wei\n    gas: 100000,\n    true // other arguments\n);\n\n// Using parameters object\nvar writeContractParams = new WriteContractParams\n{\n    ContractAddress = \"0x123...\",\n    ContractAbi = contractAbi,\n    MethodName = \"transfer\",\n    Value = 0, // optional value in wei\n    Gas = 100000, // optional gas limit\n    Arguments = new object[] { \"0x456...\", 1000 }\n};\nstring txHash = await AppKit.EVM.WriteContractAsync(writeContractParams);\n```\n\n----------------------------------------\n\nTITLE: Signing Messages with Ethers Using useAppKitProvider Hook (TypeScript/React)\nDESCRIPTION: This example shows the use of the 'useAppKitProvider' hook from '@reown/appkit/react' in a functional React component to access the wallet provider and sign a message with ethers.js. Dependencies include 'ethers' (specifically 'BrowserProvider'), '@reown/appkit/react', and proper configuration with type argument 'eip155'. The user interaction triggers the signature of a message ('Hello AppKit Ethers'), returning the signature, which is logged. Key inputs include the connected wallet provider, and outputs include the signed message data. Limitations include the requirement of a valid, connected wallet provider and appropriate user approvals.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/ethers/hooks.mdx#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport { BrowserProvider } from \"ethers\";\nimport { useAppKitProvider } from \"@reown/appkit/react\";\n\nfunction Components() {\n  const { walletProvider } = useAppKitProvider(\"eip155\");\n\n  async function onSignMessage() {\n    const provider = new BrowserProvider(walletProvider);\n    const signer = await provider.getSigner();\n    const signature = await signer?.signMessage(\"Hello AppKit Ethers\");\n    console.log(signature);\n  }\n\n  return <button onClick={() => onSignMessage()}>Sign Message</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Notification via Reown Notify API using cURL\nDESCRIPTION: Example using cURL to send a notification via the Reown Notify API. It shows how to make a POST request to the `/notify` endpoint, setting the Authorization header with the Bearer token (Notify API Secret) and sending the notification payload as JSON data.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/backend-integration.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST 'https://notify.walletconnect.com/<PROJECT_ID>/notify' \\\n  --header 'Authorization: Bearer <NOTIFY_API_SECRET>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"notification\": {\n      \"type\": \"a1e53b95-18e5-4af8-9f03-9308ec87b687\",\n      \"title\": \"The price of Ethereum has risen\",\n      \"body\": \"The price of Ethereum has gone up 10%\",\n      \"url\": \"https://app.example.com\"\n    },\n    \"accounts\": [\n      \"eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029\"\n    ]\n  }'\n```\n\n----------------------------------------\n\nTITLE: Installation commands for Solana SDK\nDESCRIPTION: Commands to add the Solana SDK and adapter to the project, compatible across npm, Yarn, Bun, and pnpm, supporting Solana blockchain interactions.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/installation.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm\ninstall @reown/appkit @reown/appkit-adapter-solana\n```\n\nLANGUAGE: bash\nCODE:\n```\nYarn\nadd @reown/appkit @reown/appkit-adapter-solana\n```\n\nLANGUAGE: bash\nCODE:\n```\nBun\nbun add @reown/appkit @reown/appkit-adapter-solana\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm\npnpm add @reown/appkit @reown/appkit-adapter-solana\n```\n\n----------------------------------------\n\nTITLE: Migrating Web3Provider Component from ConnectKit to Reown AppKit - React TypeScript\nDESCRIPTION: This TypeScript snippet updates the /components/Web3Provider.tsx React component to replace ConnectKit with Reown AppKit. It imports necessary modules from @reown/appkit and @reown/appkit-adapter-wagmi, configures networks, initializes a WagmiAdapter, and sets up the AppKit modal. Required dependencies include @reown/appkit, @reown/appkit-adapter-wagmi, wagmi, @tanstack/react-query, and React. Set your cloud Project ID for AppKit. The component returns a WagmiProvider using the new configuration and omits the ConnectKitProvider. Ensure all environment variables and dependencies are correctly set for proper runtime behavior. Output is a wrapper component facilitating Web3 context across the app.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-connectkit-next.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\n\nimport { WagmiProvider, createConfig } from 'wagmi';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\n\n// import { ConnectKitProvider, getDefaultConfig } from 'connectkit';\nimport { WagmiAdapter } from '@reown/appkit-adapter-wagmi'\n// Include networks from AppKit\nimport { mainnet, arbitrum } from '@reown/appkit/networks'\nimport { createAppKit } from '@reown/appkit';\nexport const networks = [mainnet, arbitrum]\n\n// const config = createConfig(\n//   getDefaultConfig({\n//     appName: 'ConnectKit Next.js demo',\n//     walletConnectProjectId: process.env.NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID!,\n//   })\n// );\n\n// If you were already using WalletConnect with ConnectKit, you can use the same projectId.\n// If not, then get projectId from https://cloud.reown.com\nexport const projectId = \"YOUR_PROJECT_ID\";\n\n//Set up the Wagmi Adapter (Config)\nexport const wagmiAdapter = new WagmiAdapter({\n  networks,\n  projectId\n})\n\nconst queryClient = new QueryClient();\n\n// Create the modal\nconst modal = createAppKit({\n  adapters: [wagmiAdapter],\n  projectId,\n  networks: [mainnet, arbitrum],\n  features: {\n    analytics: true, // Optional - defaults to your Cloud configuration\n  }\n})\n\nexport const Web3Provider = ({ children }: { children: React.ReactNode }) => {\n  return (   \n    <WagmiProvider config={wagmiAdapter.wagmiConfig}> \n      <QueryClientProvider client={queryClient}>    \n        {children}    \n      </QueryClientProvider>\n    </WagmiProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Switching Blockchain Network with Reown AppKit (TypeScript/React)\nDESCRIPTION: This snippet demonstrates how to initialize the Reown AppKit modal in a React TypeScript environment and programmatically switch the connected blockchain network to Polygon. Dependencies include '@reown/appkit/react' for AppKit integration and network definitions (mainnet, arbitrum, polygon), as well as a wagmiAdapter. The 'createAppKit' call sets up modal options such as supported networks, projectId, and metadata. The 'switchNetwork' method expects a network object and updates the active network connection accordingly. It assumes the presence of valid projectId and metadata objects. Outputs include an updated wallet connection state and user session on the specified network.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/ethers/hooks.mdx#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { createAppKit } from \"@reown/appkit/react\";\nimport { mainnet, arbitrum, polygon } from \"@reown/appkit/networks\";\n\nconst modal = createAppKit({\n  adapters: [wagmiAdapter],\n  projectId,\n  networks: [mainnet, arbitrum],\n  metadata: metadata,\n  features: {\n    analytics: true,\n  },\n});\n\nmodal.switchNetwork(polygon);\n```\n\n----------------------------------------\n\nTITLE: Initialize Reown AppKit with Solana Adapter in React\nDESCRIPTION: This snippet demonstrates the setup of Reown AppKit for Solana wallet connections in a React application. It involves importing the core AppKit and Solana adapter components, specifying supported Solana networks, configuring the adapter with popular wallets like Phantom and Solflare, defining application metadata (optional), obtaining a project ID, and finally calling `createAppKit` to initialize the modal. This setup must be performed outside of React components to ensure proper initialization and prevent unnecessary re-renders.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/solana/about/implementation.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// App.tsx\nimport { createAppKit } from \"@reown/appkit/react\";\nimport { SolanaAdapter } from \"@reown/appkit-adapter-solana/react\";\nimport { solana, solanaTestnet, solanaDevnet } from \"@reown/appkit/networks\";\nimport {\n  PhantomWalletAdapter,\n  SolflareWalletAdapter,\n} from \"@solana/wallet-adapter-wallets\";\n\n// 0. Set up Solana Adapter\nconst solanaWeb3JsAdapter = new SolanaAdapter({\n  wallets: [new PhantomWalletAdapter(), new SolflareWalletAdapter()],\n});\n\n// 1. Get projectId from https://cloud.reown.com\nconst projectId = \"YOUR_PROJECT_ID\";\n\n// 2. Create a metadata object - optional\nconst metadata = {\n  name: \"AppKit\",\n  description: \"AppKit Solana Example\",\n  url: \"https://example.com\", // origin must match your domain & subdomain\n  icons: [\"https://avatars.githubusercontent.com/u/179229932\"],\n};\n\n// 3. Create modal\ncreateAppKit({\n  adapters: [solanaWeb3JsAdapter],\n  networks: [solana, solanaTestnet, solanaDevnet],\n  metadata: metadata,\n  projectId,\n  features: {\n    analytics: true, // Optional - defaults to your Cloud configuration\n  },\n});\n\nexport default function App() {\n  return <YourApp />;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AppKit and WagmiAdapter - Vue - TypeScript (tsx)\nDESCRIPTION: Illustrates replacing Web3Modal legacy imports and configuration in a Vue application. Requires installation of @reown/appkit/vue, @reown/appkit-adapter-wagmi, @reown/appkit/networks, and optional metadata for project details. WagmiAdapter is instantiated with mainnet and arbitrum as supported networks, and projectId must be supplied. The old Wagmi config is deprecated in favor of this approach.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following imports\n- import { createWeb3Modal } from \"@web3modal/wagmi/vue\";\n- import { defaultWagmiConfig } from \"@web3modal/wagmi/react/config\";\n- import { WagmiConfig } from \"wagmi\";\n- import { arbitrum, mainnet } from \"viem/chains\";\n\n// Add the following imports\n+ import { createAppKit } from \"@reown/appkit/vue\";\n+ import { arbitrum, mainnet } from \"@reown/appkit/networks\";\n+ import { WagmiAdapter } from \"@reown/appkit-adapter-wagmi\";\n```\n\nLANGUAGE: tsx\nCODE:\n```\nconst projectId = 'YOUR_PROJECT_ID'\n\nconst metadata = { //optional\n    name: 'AppKit',\n    description: 'AppKit Example',\n    url: 'https://example.com',\n    icons: ['https://avatars.githubusercontent.com/u/179229932']\n}\n\n// Remove the existing Wagmi Config\n- const wagmiConfig = defaultWagmiConfig({ chains, projectId, metadata })\n\n// Create the Wagmi adapter\n+ const wagmiAdapter = new WagmiAdapter({\n  networks: [mainnet, arbitrum],\n  projectId\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Client-Side SIWE with @reown/appkit-siwe (One-Click)\nDESCRIPTION: This snippet shows how to configure the client-side @reown/appkit-siwe library for a 'One-Click' SIWE flow. It defines functions to interact with a backend API for fetching the user's session, verifying a SIWE message and signature, getting a nonce, creating a message, and signing out. The configuration object `siweConfig` bundles these functions for use with the AppKit SIWE integration.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/siwe/code.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { SiweMessage } from \"siwe\";\nimport {\n  type SIWESession,\n  type SIWEVerifyMessageArgs,\n  type SIWECreateMessageArgs,\n  createSIWEConfig,\n  formatMessage,\n} from \"@reown/appkit-siwe\";\n\nconst BASE_URL = \"http://localhost:8080\";\n\n/* Function that returns the user's session - this should come from your SIWE backend */\nasync function getSession() {\n  const res = await fetch(BASE_URL + \"/session\", {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    credentials: \"include\",\n  });\n  if (!res.ok) {\n    throw new Error(\"Network response was not ok\");\n  }\n\n  const data = await res.json();\n\n  const isValidData =\n    typeof data === \"object\" &&\n    typeof data.address === \"string\" &&\n    typeof data.chainId === \"number\";\n\n  return isValidData ? (data as SIWESession) : null;\n}\n\n/* Use your SIWE server to verify if the message and the signature are valid */\nconst verifyMessage = async ({ message, signature }: SIWEVerifyMessageArgs) => {\n  try {\n    const response = await fetch(BASE_URL + \"/verify\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      mode: \"cors\",\n      body: JSON.stringify({ message, signature }),\n      credentials: \"include\",\n    });\n\n    if (!response.ok) {\n      return false;\n    }\n\n    const result = await response.json();\n    return result === true;\n  } catch (error) {\n    return false;\n  }\n};\n\n// Check the full example for signOut and getNonce functions ...\n\n/* Create a SIWE configuration object */\nexport const siweConfig = createSIWEConfig({\n  getMessageParams: async () => ({\n    domain: window.location.host,\n    uri: window.location.origin,\n    chains: [1, 2020],\n    statement: \"Please sign with your account\",\n  }),\n  createMessage: ({ address, ...args }: SIWECreateMessageArgs) =>\n    formatMessage(args, address),\n\n  getNonce: async () => {\n    //This is only an example, substitute it with your actual nonce getter.\n    const nonce = \"YOUR_NONCE_GETTER\";\n    if (!nonce) {\n      throw new Error(\"Failed to get nonce!\");\n    }\n    return nonce;\n  },\n  getSession,\n  verifyMessage,\n  signOut: async () => {\n    //Example\n    // Implement your Sign out function\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initiating Connection from Dapp using Universal Provider (JavaScript)\nDESCRIPTION: Example code demonstrating how a decentralized application (dapp) initiates a WalletConnect session using the Universal Provider. It defines a `proposalNamespace` with required Polkadot methods, chains, and events, then calls `provider.client.connect` with this configuration to get a connection URI and approval promise.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/polkadot/namespaces-guide.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst proposalNamespace = {\n  requiredNamespaces: {\n    polkadot: {\n      methods: [\"polkadot_signTransaction\", \"polkadot_signMessage\"],\n      chains: [\"polkadot:91b171bb158e2d3848fa23a9f1c25182\"],\n      events: [\"chainChanged\", \"accountsChanged\"],\n    },\n  },\n};\n\n// call connect on the universal provider passing the proposal namespace\n\nconst { uri, approval } = await provider.client.connect(proposalNamespace);\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Configuring Reown AppKit - Import, Adapter Creation, and Integration\nDESCRIPTION: Illustrates importing 'createAppKit' and network modules, removing deprecated imports, creating a wagmiAdapter, and passing it into AppKit configuration, emphasizing dependency setup in plain JavaScript.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\n// Import createAppKit and networks\nimport { createAppKit } from '@reown/appkit'\nimport { arbitrum, mainnet } from '@reown/appkit/networks'\nimport { WagmiAdapter } from '@reown/appkit-adapter-wagmi'\n// Remove old Web3Modal imports\n// Instantiate wagmiAdapter\nconst projectId = 'YOUR_PROJECT_ID'\nconst wagmiAdapter = new WagmiAdapter({\n  networks: [mainnet, arbitrum],\n  projectId\n})\n// Initialize AppKit with adapter\nconst modal = createAppKit({\n  adapters: [wagmiAdapter],\n  networks: [mainnet, arbitrum],\n  metadata: {\n    name: 'AppKit',\n    description: 'AppKit Example',\n    url: 'https://example.com',\n    icons: ['https://avatars.githubusercontent.com/u/179229932']\n  },\n  projectId,\n  features: { analytics: true }\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Reown AppKit Instance (TypeScript)\nDESCRIPTION: Initializes the Reown AppKit, which is used for wallet connection and interacting with the Reown platform. It requires importing necessary modules, defining application metadata (name, description, URL, icons), obtaining a project ID from the Reown Cloud, and configuring adapters (like Ethers5) and supported networks (like mainnet, arbitrum). The metadata URL must match the application's domain for verification.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/ethers5/implementation.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAppKit } from \"@reown/appkit\";\nimport { Ethers5Adapter } from \"@reown/appkit-adapter-ethers5\";\nimport { mainnet, arbitrum } from \"@reown/appkit/networks\";\n\n// 1. Get projectId at https://cloud.reown.com\nconst projectId = \"YOUR_PROJECT_ID\";\n\n// 2. Create your application's metadata object\nconst metadata = {\n  name: \"My Website\",\n  description: \"My Website description\",\n  url: \"https://mywebsite.com\", // url must match your domain & subdomain\n  icons: [\"https://avatars.mywebsite.com/\"],\n};\n\n// 3. Create a AppKit instance\nconst modal = createAppKit({\n  adapters: [new Ethers5Adapter()],\n  metadata: metadata,\n  networks: [mainnet, arbitrum],\n  projectId,\n  features: {\n    analytics: true, // Optional - defaults to your Cloud configuration\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Multi-Chain Account Data with useAppKitAccount (React)\nDESCRIPTION: Demonstrates how to use the `useAppKitAccount` hook with the `namespace` option to access account data specific to different blockchain types (e.g., EVM, Solana, Bitcoin) in a multi-chain environment. Required dependency: `@reown/appkit/react`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/hooks.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAppKitAccount } from \"@reown/appkit/react\";\n\nconst eip155Account = useAppKitAccount({ namespace: \"eip155\" }); // for EVM chains\nconst solanaAccount = useAppKitAccount({ namespace: \"solana\" });\nconst bip122Account = useAppKitAccount({ namespace: \"bip122\" }); // for bitcoin\n```\n\n----------------------------------------\n\nTITLE: Configuring AppKit Bitcoin with React\nDESCRIPTION: A complete example showing how to initialize AppKit Bitcoin in a React application. This includes setting up the project ID, networks, Bitcoin adapter, metadata, and creating the AppKit instance with necessary configuration options.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/bitcoin/about/implementation.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// App.tsx\nimport { createAppKit } from '@reown/appkit/react'\nimport { BitcoinAdapter } from '@reown/appkit-adapter-bitcoin'\nimport { bitcoin } from '@reown/appkit/networks'\n\n// 1. Get projectId from https://cloud.reown.com\nconst projectId = 'YOUR_PROJECT_ID'\n\n// 2. Set the networks\nconst networks = [bitcoin]\n\n// 3. Set up Bitcoin Adapter\nconst bitcoinAdapter = new BitcoinAdapter({\n  projectId\n})\n\n// 4. Create a metadata object - optional\nconst metadata = {\n  name: 'AppKit',\n  description: 'AppKit Bitcoin Example',\n  url: 'https://example.com', // origin must match your domain & subdomain\n  icons: ['https://avatars.githubusercontent.com/u/179229932']\n}\n\n// 5. Create modal\ncreateAppKit({\n  adapters: [bitcoinAdapter],\n  networks,\n  metadata,\n  projectId,\n  features: {\n    analytics: true // Optional - defaults to your Cloud configuration,\n    email: false,\n    socials: []\n  }\n})\n\nexport default function App() {\n  return <YourApp />\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional logic for capabilities check and Send Calls usage in TypeScript\nDESCRIPTION: This code snippet demonstrates how to determine if a user's wallet supports EIP 5792 using the getCapabilities hook, then conditionally use sendCalls or fall back to writeContractAsync. It facilitates dynamic interaction based on wallet capabilities, improving compatibility and user experience.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/switching-to-send-calls.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nif (supported) {\n  sendCalls(...)\n}\nelse {\n  writeContractAsync(...)\n}\n```\n\n----------------------------------------\n\nTITLE: Using useAppKitProvider Hook to Sign a Message in React (Solana Wallet)\nDESCRIPTION: This snippet shows how to access the wallet provider via useAppKitProvider and perform message signing with a Solana wallet. It requires '@reown/appkit/react' and '@reown/appkit-adapter-solana' packages. The function encodes a message, invokes signMessage, and logs the result, ensuring proper error handling.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/solana/hooks.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useAppKitAccount, useAppKitProvider } from \"@reown/appkit/react\";\nimport type { Provider } from \"@reown/appkit-adapter-solana\";\n\nfunction SignMessage() {\n  // 0. Get account and provider\n  const { address } = useAppKitAccount();\n  const { walletProvider } = useAppKitProvider<Provider>(\"solana\");\n\n  // 1. Create a function to sign a message\n  async function onSignMessage() {\n    try {\n      if (!walletProvider || !address) {\n        throw Error(\"user is disconnected\");\n      }\n\n      // 2. Encode message and sign it\n      const encodedMessage = new TextEncoder().encode(\"Hello from AppKit\");\n      const signature = await walletProvider.signMessage(encodedMessage);\n\n      console.log(signature);\n    } catch (err) {\n      // Handle Error Here\n    }\n  }\n\n  // 3. Create a button to trigger the function\n  return <button onClick={onSignMessage}>Sign Message</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Provider Events (TypeScript/JavaScript)\nDESCRIPTION: Lists event subscriptions for common wallet connection events such as chain changes, account changes, session connect/disconnect, and session events. Useful for handling UI updates and session state management.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/providers/ethereum.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nprovider.on(\"chainChanged\", handler);\nprovider.on(\"accountsChanged\", handler);\nprovider.on(\"connect\", handler);\nprovider.on(\"session_event\", handler);\nprovider.on(\"display_uri\", handler);\nprovider.on(\"disconnect\", handler);\n```\n\n----------------------------------------\n\nTITLE: Creating SIWE Configuration with Backend Integration (C#)\nDESCRIPTION: Defines a comprehensive `SiweConfig` object in C# for full Sign-In With Ethereum (SIWE) integration requiring a backend. It includes delegates for asynchronous operations like fetching a nonce (`GetNonce`), verifying the signed message (`VerifyMessage`), retrieving session data (`GetSession`), and handling sign-out (`SignOut`) via backend API calls (represented by `yourApi`). It also customizes message parameters (`GetMessageParams`), message creation (`CreateMessage`), and sets rules for automatic sign-out events. Requires a backend API implementing SIWE logic.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/siwe.mdx#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar siweConfig = new SiweConfig\n{\n    GetNonce = async () =>\n    {\n        // The getNonce method functions as a safeguard against spoofing,\n        // akin to a CSRF token.\n        return await yourApi.getNonce();\n    },\n    // The properties from `SiweMessageParams` be used to generate SIWE message.\n    // There's no strict rules on what Domain and Uri parameters have to be\n    // on native platforms.\n    // In this example we use website domain and app URL scheme.\n    GetMessageParams = () =>\n    {\n        // Returns parameters that are used to create the SIWE message internally.\n        return new SiweMessageParams\n        {\n            Domain = \"mywebsite.com\",\n            Uri = \"my-app://\",\n            // The custom statement that will be prepended to the SIWE message.\n            // Optional.\n            Statement = \"My custom statement.\"\n        };\n    },\n    CreateMessage = (createMessageArgs) =>\n    {\n        // Generates an EIP-4361-compatible message.\n        // You can use our provided SiweUtils.FormatMessage\n        // method (default behaviour if delegate is null) or implement your own.\n        return SiweUtils.FormatMessage(createMessageArgs);\n    },\n    VerifyMessage = async (verifyMessageArgs) =>\n    {\n        // Ensures the message is valid, has not been tampered with,\n        // and has been appropriately signed by the wallet address.\n        try {\n            var json = JsonConvert.SerializeObject(verifyMessageArgs);\n            var isValidMessage = await yourApi.verifyMessage(json);\n            return isValidMessage;\n        } catch (Exception) {\n            return false;\n        }\n    },\n    GetSession = async (getSessionArgs) =>\n    {\n        // Called after VerifyMessage() succeeds\n        // The backend session should store the associated address and chainId\n        // and return it via the `getSession` method.\n        var session = await yourApi.getSession();\n        return new SiweSession\n        {\n            EthAddress = session.address,\n            EthChainIds = session.ChainIdArray,\n        };\n    },\n    SignOut = async () =>\n    {\n        // Called when the wallet disconnects if SignOutOnWalletDisconnect is true,\n        // and/or when the account changes if SignOutOnAccountChange is true,\n        // and/or when the network changes if SignOutOnChainChange is true.\n        await yourApi.signOut();\n    },\n    SignOutOnAccountChange = true,\n    SignOutOnChainChange = true,\n    SignOutOnWalletDisconnect = true,\n};\n\n// Called after SiweConfig.GetSession() succeeds\nsiweConfig.SignInSuccess += _ => Debug.Log(\"[Dapp] SIWE Sign In Success!\");\n\n// Called after SiweConfig.SignOut() succeeds\nsiweConfig.SignOutSuccess += () => Debug.Log(\"[Dapp] SIWE Sign Out Success!\");\n```\n\n----------------------------------------\n\nTITLE: Smart Contract Interaction with Ethers in React\nDESCRIPTION: Example code for interacting with ERC-20 tokens using Ethers in a React component with AppKit. Shows how to connect to a provider, get a signer, create a contract instance, and check token balance.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/installation.mdx#_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAppKitProvider, useAppKitAccount } from \"@reown/appkit/react\";\nimport { BrowserProvider, Contract, formatUnits } from \"ethers\";\n\nconst USDTAddress = \"0x617f3112bf5397D0467D315cC709EF968D9ba546\";\n\n// The ERC-20 Contract ABI, which is a common contract interface\n// for tokens (this is the Human-Readable ABI format)\nconst USDTAbi = [\n  \"function name() view returns (string)\",\n  \"function symbol() view returns (string)\",\n  \"function balanceOf(address) view returns (uint)\",\n  \"function transfer(address to, uint amount)\",\n  \"event Transfer(address indexed from, address indexed to, uint amount)\",\n];\n\nfunction Components() {\n  const { address, caipAddress, isConnected } = useAppKitAccount();\n  const { walletProvider } = useAppKitProvider(\"eip155\");\n\n  async function getBalance() {\n    if (!isConnected) throw Error(\"User disconnected\");\n\n    const ethersProvider = new BrowserProvider(walletProvider);\n    const signer = await ethersProvider.getSigner();\n    // The Contract object\n    const USDTContract = new Contract(USDTAddress, USDTAbi, signer);\n    const USDTBalance = await USDTContract.balanceOf(address);\n\n    console.log(formatUnits(USDTBalance, 18));\n  }\n\n  return <button onClick={getBalance}>Get User Balance</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Reown AppKit with Wagmi Adapter in React (TSX)\nDESCRIPTION: This snippet demonstrates initializing Reown AppKit in a React application using `createAppKit` and the `WagmiAdapter`. It covers setting up `QueryClient`, defining `projectId` and `metadata`, selecting networks (e.g., `mainnet`, `arbitrum`), creating the `WagmiAdapter`, calling `createAppKit`, and wrapping the application with `WagmiProvider` and `QueryClientProvider`. Dependencies include `@reown/appkit/react`, `wagmi`, `@tanstack/react-query`, `@reown/appkit-adapter-wagmi`, and `@reown/appkit/networks`. Configuration should be performed outside React components.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/wagmi/about/implementation.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createAppKit } from '@reown/appkit/react'\n\nimport { WagmiProvider } from 'wagmi'\nimport { arbitrum, mainnet } from '@reown/appkit/networks'\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { WagmiAdapter } from '@reown/appkit-adapter-wagmi'\n\n// 0. Setup queryClient\nconst queryClient = new QueryClient()\n\n// 1. Get projectId from https://cloud.reown.com\nconst projectId = 'YOUR_PROJECT_ID'\n\n// 2. Create a metadata object - optional\nconst metadata = {\n  name: 'AppKit',\n  description: 'AppKit Example',\n  url: 'https://example.com', // origin must match your domain & subdomain\n  icons: ['https://avatars.githubusercontent.com/u/179229932']\n}\n\n// 3. Set the networks\nconst networks = [mainnet, arbitrum]\n\n// 4. Create Wagmi Adapter\nconst wagmiAdapter = new WagmiAdapter({\n  networks,\n  projectId,\n  ssr: true\n})\n\n// 5. Create modal\ncreateAppKit({\n  adapters: [wagmiAdapter],\n  networks,\n  projectId,\n  metadata,\n  features: {\n    analytics: true // Optional - defaults to your Cloud configuration\n  }\n})\n\nexport function AppKitProvider({ children }) {\n  return (\n    <WagmiProvider config={wagmiAdapter.wagmiConfig}>\n      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>\n    </WagmiProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: SIWEConfig Interface Definition in TypeScript\nDESCRIPTION: Provides the TypeScript interface definition for the SIWEConfig object required to configure the SIWE client. It details required asynchronous methods for nonce retrieval, message creation, verification, session management, and sign-out, along with a required method specifically for One-Click Auth (`getMessageParams`). The interface also defines optional callbacks and configuration flags controlling session lifecycle behavior and authentication enablement, with default values documented. This interface serves as the contract for implementing SIWE authentication logic within AppKit.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/siwe.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface SIWEConfig {\n  /** Required **/\n  getNonce: () => Promise<string>\n  createMessage: (args: SIWECreateMessageArgs) => string\n  verifyMessage: (args: SIWEVerifyMessageArgs) => Promise<boolean>\n  getSession: () => Promise<SIWESession | null>\n  signOut: () => Promise<boolean>\n\n  /** Required for One-Click Auth **/\n  getMessageParams `() => Promise<{ domain: string, uri: string, chains: number[], statement: string }>\n\n\n  /** Optional **/\n\n  // Callback when user signs in\n  onSignIn?: (session?: SIWESession) => void\n\n  // Callback when user signs out\n  onSignOut?: () => void\n\n  // Defaults to true\n  enabled?: boolean\n\n  // In milliseconds, defaults to 5 minutes\n  nonceRefetchIntervalMs?: number\n\n  // In milliseconds, defaults to 5 minutes\n  sessionRefetchIntervalMs?: number\n\n  // Defaults to true\n  signOutOnDisconnect?: boolean\n\n  // Defaults to true\n  signOutOnAccountChange?: boolean\n\n  // Defaults to true\n  signOutOnNetworkChange?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Reown AppKit Modal in JavaScript\nDESCRIPTION: This plain JavaScript example attaches a click event listener to a button with ID 'my-button', invoking modal.open() to display the Reown AppKit modal. It requires that a global modal object providing an open method exists, and a DOM element with the appropriate ID is present. The button click triggers the modal; no parameters are needed. This snippet targets simple web environments without frameworks. The modal variable must be correctly initialized elsewhere in the code.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_41\n\nLANGUAGE: JavaScript\nCODE:\n```\ndocument.getElementById('my-button').addEventListener('click', () => {\n    modal.open()\n})\n\n<button id=\"my-button\">Connect Wallet</button>\n```\n\n----------------------------------------\n\nTITLE: Initializing Reown AppKit Configuration - TypeScript\nDESCRIPTION: This snippet initializes the Reown AppKit library by importing necessary modules like adapters and networks. It defines application metadata, including name, description, URL, and icons, and sets the project ID obtained from the Reown cloud dashboard. The AppKit instance is created using `createAppKit`, configuring it with specified adapters, networks, metadata, project ID, and optional features like analytics.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/ethers/about/implementation.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { createAppKit } from \"@reown/appkit\";\nimport { EthersAdapter } from \"@reown/appkit-adapter-ethers\";\nimport { mainnet, arbitrum } from \"@reown/appkit/networks\";\n\n// 1. Get projectId from https://cloud.reown.com\nconst projectId = \"YOUR_PROJECT_ID\";\n\n// 2. Create your application's metadata object\nconst metadata = {\n  name: \"AppKit\",\n  description: \"AppKit Example\",\n  url: \"https://reown.com/appkit\", // origin must match your domain & subdomain\n  icons: [\"https://avatars.githubusercontent.com/u/179229932\"],\n};\n\n// 3. Create a AppKit instance\nconst modal = createAppKit({\n  adapters: [new EthersAdapter()],\n  networks: [mainnet, arbitrum],\n  metadata,\n  projectId,\n  features: {\n    analytics: true, // Optional - defaults to your Cloud configuration\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Reown AppKit Modal and Switching Blockchain Networks in TypeScript\nDESCRIPTION: This snippet demonstrates creating an AppKit modal instance configured with specified blockchain networks and adapters, then switching the active blockchain network programmatically using the modal's switchNetwork method. It requires the @reown/appkit/react library and network definitions from @reown/appkit/networks. The networks array specifies chains supported by the modal, and calling switchNetwork accepts a network object to switch the user's connected blockchain. This facilitates multi-chain dApp support and programmatic network changes.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/ethers5/hooks.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createAppKit } from \"@reown/appkit/react\";\nimport { mainnet, arbitrum, polygon } from \"@reown/appkit/networks\";\n\nconst modal = createAppKit({\n  adapters: [wagmiAdapter],\n  projectId,\n  networks: [mainnet, arbitrum],\n  metadata: metadata,\n  features: {\n    analytics: true,\n  },\n});\n\nmodal.switchNetwork(polygon);\n```\n\n----------------------------------------\n\nTITLE: Approving Session Proposals (Swift/iOS)\nDESCRIPTION: Approves a session proposal in an iOS wallet using the WalletKit SDK. Calls the asynchronous `approve` method with the proposal ID, namespaces, and optional session properties, handling errors and updating the UI.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\ndo {\n    try await WalletKit.instance.approve(proposalId: proposal.id, namespaces: sessionNamespaces, sessionProperties: proposal.sessionProperties)\n    // Update UI, remove loader\n} catch {\n    // present error\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Smart Contract Read/Write Actions with Ethers.js and AppKit\nDESCRIPTION: Defines asynchronous functions `handleReadSmartContract` and `handleWriteSmartContract` using Ethers.js. Both functions initialize an Ethers `BrowserProvider` with the `walletProvider` from AppKit, get a signer, and create a `Contract` instance. `handleReadSmartContract` calls the 'retrieve' function, while `handleWriteSmartContract` calls the 'store' function, logging the results.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/EVM-smart-contract-interaction.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// get the data from the smart contract and print on console\nconst handleReadSmartContract = async () => {\n  const ethersProvider = new BrowserProvider(walletProvider);\n  const signer = await ethersProvider.getSigner();\n  const contract = new Contract(storageSC, storageABI, signer);\n  const data = await contract.retrieve();\n  console.log(\"data: \", data);\n};\n\n// write to the smart contract and print on console\nconst handleWriteSmartContract = async () => {\n  const ethersProvider = new BrowserProvider(walletProvider);\n  const signer = await ethersProvider.getSigner();\n  const contract = new Contract(storageSC, storageABI, signer);\n  const data = await contract.store(1n);\n  console.log(\"data: \", data);\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Reown AppKit and Wagmi Adapter in Vue (TypeScript)\nDESCRIPTION: This snippet configures the Reown AppKit inside a Vue application's setup script using TypeScript. It demonstrates importing core utilities and adapters, setting up project-wide metadata, selecting EVM networks, creating a WagmiAdapter instance, and initializing the app modal with unified configuration. Prerequisites include having the '@reown/appkit/vue', '@reown/appkit/networks', and '@reown/appkit-adapter-wagmi' packages installed. Expected inputs include a valid projectId, metadata object, and network list. The output is a configured 'modal' instance for handling wallet connections and blockchain interactions. The configuration assumes that domain and URL align for security and Cloud settings.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/wagmi/about/implementation.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n<script lang=\"ts\" setup>\n  import { createAppKit } from '@reown/appkit/vue'\n  import { arbitrum, mainnet, type AppKitNetwork } from '@reown/appkit/networks'\n  import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'\n\n  // 1. Get projectId from https://cloud.reown.com\n  const projectId = 'YOUR_PROJECT_ID'\n\n  // 2. Create a metadata object\n  const metadata = {\n    name: 'AppKit',\n    description: 'AppKit Example',\n    url: 'https://example.com', // origin must match your domain & subdomain\n    icons: ['https://avatars.githubusercontent.com/u/179229932']\n  }\n\n  // 3. Set the networks\n  const networks: [AppKitNetwork, ...AppKitNetwork[]] = [mainnet, polygon, base]\n\n  // 4. Create Wagmi Adapter\n  const wagmiAdapter = new WagmiAdapter({\n    networks,\n    projectId\n  })\n\n  // 5. Create the modal\n  const modal = createAppKit({\n    adapters: [wagmiAdapter],\n    networks,\n    projectId,\n    metadata,\n    features: {\n      analytics: true // Optional - defaults to your Cloud configuration\n    }\n  })\n</script>\n\n<template> // Rest of your app ... </template>\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with Solana adapter using Bash\nDESCRIPTION: This snippet shows installation commands to add the Reown AppKit and the Solana adapter packages using npm, Yarn, Bun, and pnpm to enable Solana blockchain support in React apps via Reown AppKit. Requires Node.js and a package manager installed on the system.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/installation.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit @reown/appkit-adapter-solana\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit @reown/appkit-adapter-solana\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @reown/appkit @reown/appkit-adapter-solana\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit @reown/appkit-adapter-solana\n```\n\n----------------------------------------\n\nTITLE: Initializing AppKit Client in Swift\nDESCRIPTION: Initializes the AppKit client with a project ID and application metadata. The metadata includes the application's name, description, URL, icons, and an optional verification URL. This is the first step to setting up the AppKit functionality.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/usage.mdx#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet metadata = AppMetadata(\n    name: \"Example Wallet\",\n    description: \"Wallet description\",\n    url: \"example.wallet\",\n    icons: [\"https://avatars.githubusercontent.com/u/179229932\"],\n    // Used for the Verify: to opt-out verification ignore this parameter\n    verifyUrl: \"verify.walletconnect.com\"\n)\n\nAppKit.configure(\n    projectId: PROJECT_ID,\n    metadata: metadata\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Information with useAppKitAccount in TSX\nDESCRIPTION: This snippet demonstrates how to use the useAppKitAccount hook from the @reown/appkit-ethers5-react-native package within a React functional component written in TSX. The hook returns the client's wallet address, the connected chain ID, and a connection status boolean. It requires React Native project setup, installation of @reown/appkit-ethers5-react-native, and correct configuration of wallet connections. The hook does not take parameters and returns account state useful for conditional rendering or logic.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers5/hooks.mdx#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useAppKitAccount } from \"@reown/appkit-ethers5-react-native\";\n\nfunction Components() {\n  const { address, chainId, isConnected } = useAppKitAccount();\n\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Default ReownAppKitModal setup supporting EVM + Solana\nDESCRIPTION: This snippet shows how to instantiate ReownAppKitModal supporting default EVM and Solana networks without additional configuration. It can be extended by adding more networks through addSupportedNetworks.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/custom-chains.mdx#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Instantiate with default support for EVM + Solana\nconst _appKitModal = ReownAppKitModal(\n  context: context,\n  projectId: '{YOUR_PROJECT_ID}',\n  metadata: const PairingMetadata(\n    name: 'Example App',\n    description: 'Example app description',\n    url: 'https://example.com/',\n    icons: ['https://example.com/logo.png'],\n    redirect: Redirect( // OPTIONAL\n      native: 'exampleapp://',\n      universal: 'https://reown.com/exampleapp',\n      linkMode: false,\n    ),\n  ),\n  featuresConfig: FeaturesConfig(\n    email: true,\n    socials: [...],\n    showMainWallets: true,\n  ),\n);\n\n```\n\n----------------------------------------\n\nTITLE: Configuring SIWE Client with AppKit in TypeScript\nDESCRIPTION: Defines the SIWE client configuration using the createSIWEConfig function from @reown/appkit-siwe-react-native, specifying asynchronous methods for nonce generation, message verification, session retrieval, sign-out, and message creation. It includes parameters for generating EIP-4361-compatible SIWE messages and integrates backend API calls for security-critical tasks. This snippet relies on a backend API to provide nonce, verify signatures, manage sessions, and destroy sessions during sign-out, enabling secure off-chain authentication flows for Ethereum wallets.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/siwe.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// siweConfig.ts\n\nimport {\n  createSIWEConfig,\n  formatMessage,\n  type SIWEVerifyMessageArgs,\n  type SIWECreateMessageArgs,\n} from \"@reown/appkit-siwe-react-native\";\n\nexport const siweConfig = createSIWEConfig({\n  getNonce: async (): Promise<string> => {\n    // The getNonce method functions as a safeguard\n    // against spoofing, akin to a CSRF token.\n\n    return await api.getNonce();\n  },\n  verifyMessage: async ({\n    message,\n    signature,\n    cacao,\n  }: SIWEVerifyMessageArgs): Promise<boolean> => {\n    try {\n      // This function ensures the message is valid,\n      // has not been tampered with, and has been appropriately\n      // signed by the wallet address.\n\n      const isValid = await api.verifyMessage({ message, signature, cacao });\n\n      return isValid;\n    } catch (error) {\n      return false;\n    }\n  },\n  getSession: async (): Promise<SIWESession | null> => {\n    // The backend session should store the associated address and chainId\n    // and return it via the `getSession` method.\n\n    const session = await api.getSession();\n    if (!session) throw new Error(\"Failed to get session!\");\n\n    const { address, chainId } = session;\n\n    return { address, chainId };\n  },\n  signOut: (): Promise<boolean> => {\n    try {\n      // The users session must be destroyed when calling `signOut`.\n\n      await api.signOut();\n      return true;\n    } catch {\n      return false;\n    }\n  },\n  createMessage: ({ address, ...args }: SIWECreateMessageArgs): string => {\n    // Method for generating an EIP-4361-compatible message.\n\n    return formatMessage(args, address);\n  },\n  getMessageParams: () => {\n    // Parameters to create the SIWE message internally.\n    // More info in https://github.com/ChainAgnostic/CAIPs/blob/main/CAIPs/caip-222.method\n\n    return {\n      domain: \"your domain\",\n      uri: \"your uri\",\n      chains: [1, 137], // array of chain ids\n      statement: \"Please sign with your account\",\n      iat: new Date().toISOString(),\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Pairing with URI and Approving/Rejecting Sessions\nDESCRIPTION: How to pair with a dapp using the provided URI and then approve or reject the resulting session proposal.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// This will trigger the `session_proposal` event\nawait signClient.core.pairing.pair({ uri });\n\n// Approve session proposal, use id from session proposal event and respond with namespace(s) that satisfy dapps request and contain approved accounts\nconst { topic, acknowledged } = await signClient.approve({\n  id: 123,\n  namespaces: {\n    eip155: {\n      accounts: [\"eip155:1:0x0000000000...\"],\n      methods: [\"personal_sign\", \"eth_sendTransaction\"],\n      events: [\"accountsChanged\"],\n    },\n  },\n});\n\n// Optionally await acknowledgement from dapp\nconst session = await acknowledged();\n\n// Or reject session proposal\nawait signClient.reject({\n  id: 123,\n  reason: {\n    code: 1,\n    message: \"rejected\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Incoming WalletConnect Authentication Requests in Kotlin\nDESCRIPTION: Sets up the `SignClient.WalletDelegate.onSessionAuthenticate` callback to listen for incoming authentication requests from Dapps. This callback receives the `SessionAuthenticate` object and `VerifyContext`, allowing the wallet application to process the request, typically involving displaying UI to the user for approval or rejection.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_36\n\nLANGUAGE: kotlin\nCODE:\n```\noverride val onSessionAuthenticate: ((Wallet.Model.SessionAuthenticate, Wallet.Model.VerifyContext) -> Unit)\n  get() = { sessionAuthenticate, verifyContext ->\n      // Triggered when wallet receives the session authenticate sent by a Dapp\n      // Process the authentication request here\n      // This involves displaying UI to the user\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Metadata for AppKit Link Mode in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to configure the metadata object for enabling Link Mode in an AppKit React Native dApp. It specifies required fields such as the app's name, description, website URL, icon, and provides the redirect scheme with a universal link. The key field 'linkMode' should be set to true to activate Link Mode. The configuration is then applied using the 'defaultConfig' function. Dependencies include AppKit React Native and a properly set up project in the Reown Cloud dashboard.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/link-mode.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst metadata = {\n  name: \"AppKit RN\",\n  description: \"AppKit RN Example\",\n  url: \"https://reown.com\",\n  icons: [\"https://avatars.githubusercontent.com/u/179229932\"],\n  redirect: {\n    native: \"YOUR_APP_SCHEME://\",\n    universal: \"https://example.com/example_dapp\",\n    linkMode: true,\n  },\n};\n\nconst config = defaultConfig({ metadata });\n```\n\n----------------------------------------\n\nTITLE: Sending Native Token Transactions via EVM in C#\nDESCRIPTION: Shows how to send native token (e.g., ETH) transactions using `AppKit.EVM.SendTransactionAsync()` in C#. Requires the recipient address and the amount in wei (`BigInteger` or compatible type). Optionally accepts transaction data (hex string). Also demonstrates using a `SendTransactionParams` object. Returns the transaction hash.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/actions.mdx#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n// Basic transaction\nstring txHash = await AppKit.EVM.SendTransactionAsync(\n    \"0x123...\", // recipient address\n    1000000000000000000, // 1 ETH in wei\n    \"0x\" // optional data\n);\n\n// Using parameters object\nvar transactionParams = new SendTransactionParams\n{\n    AddressTo = \"0x123...\",\n    Value = 1000000000000000000, // 1 ETH in wei\n    Data = \"0x\" // optional data\n};\nstring txHash = await AppKit.EVM.SendTransactionAsync(transactionParams);\n```\n\n----------------------------------------\n\nTITLE: Processing Verify API Context in JavaScript\nDESCRIPTION: This snippet demonstrates how a wallet application can process the `verifyContext` provided within an `auth_request` event payload. It accesses properties like `validation` (which indicates the domain's verification status) and `isScam` (a boolean flagging malicious domains) to implement logic that warns the user based on the detected risk level, aligning with the VALID, INVALID, UNKNOWN, and Threat states described.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/verify.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n...\nwalletKit.on(\"auth_request\", async (authRequest) => {\n  const { verifyContext } = authRequest\n  const validation = verifyContext.verified.validation // can be VALID, INVALID or UNKNOWN\n  const origin = verifyContext.verified.origin // the actual verified origin of the request\n  const isScam = verifyContext.verified.isScam // true if the domain is flagged as malicious\n\n  // if the domain is flagged as malicious, you should warn the user as they may lose their funds - check the `Threat` case for more info\n  if(isScam) {\n    // show a warning screen to the user\n    // and proceed only if the user accepts the risk\n  }\n\n  switch(validation) {\n    case \"VALID\":\n      // proceed with the request - check the `Domain match` case for more info\n      break\n    case \"INVALID\":\n      // show a warning dialog to the user - check the `Mismatch` case for more info\n      // and proceed only if the user accepts the risk\n      break\n    case \"UNKNOWN\":\n      // show a warning dialog to the user - check the `Unverified` case for more info\n      // and proceed only if the user accepts the risk\n      break\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Reading Smart Contract State Using Wagmi Hooks in TypeScript (React)\nDESCRIPTION: Demonstrates how to use the Wagmi React hook `useReadContract` to read the `totalSupply` property from a USDT ERC-20 contract. The snippet imports ABI and uses the contract address and function name parameters to interact with the blockchain. Requires the Wagmi library with React support and valid ABI and contract address. Outputs contract call result for rendering or further use.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/installation.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useReadContract } from \"wagmi\";\nimport { USDTAbi } from \"../abi/USDTAbi\";\n\nconst USDTAddress = \"0x...\";\n\nfunction App() {\n  const result = useReadContract({\n    abi: USDTAbi,\n    address: USDTAddress,\n    functionName: \"totalSupply\",\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Messages with Wallet Provider from AppKit React Hook in TSX\nDESCRIPTION: This snippet utilizes the useAppKitProvider hook to access the walletProvider and demonstrate message signing with Ethers.js's BrowserProvider. It requires both '@reown/appkit/react' and 'ethers' as dependencies. The hook is called with the 'eip155' namespace, and 'onSignMessage' asynchronously obtains a signer to sign a message string. Expected input is a connected wallet; the output is a signature string logged to the console. Limitations: supports only EIP-155 compatible wallets, assumes successful provider connection.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/ethers/hooks.mdx#_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\nimport { BrowserProvider } from \"ethers\";\nimport { useAppKitProvider } from \"@reown/appkit/react\";\n\nfunction Components() {\n  const { walletProvider } = useAppKitProvider(\"eip155\");\n\n  async function onSignMessage() {\n    const provider = new BrowserProvider(walletProvider);\n    const signer = await provider.getSigner();\n    const signature = await signer?.signMessage(\"Hello AppKit Ethers\");\n    console.log(signature);\n  }\n\n  return <button onClick={() => onSignMessage()}>Sign Message</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating AppKit with Wagmi and Solana (TypeScript)\nDESCRIPTION: Sets up AppKit with both Wagmi (for EVM chains) and Solana adapters. Dependencies include @reown/appkit, @reown/appkit-adapter-wagmi, @reown/appkit-adapter-solana, and the core networks/types from @reown/appkit. Requires that you provide a valid projectId and list supported networks. Metadata for branding and analytics options are optional. Expects configuration of wallet adapters and projectId; outputs an AppKit modal instance.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/multichain.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAppKit } from '@reown/appkit'\nimport { SolanaAdapter } from '@reown/appkit-adapter-solana'\nimport { WagmiAdapter } from '@reown/appkit-adapter-wagmi'\n\nimport {\n  mainnet,\n  arbitrum,\n  sepolia,\n  solana,\n  solanaTestnet,\n  solanaDevnet,\n} from \"@reown/appkit/networks\";\nimport type { AppKitNetwork } from \"@reown/appkit/types\";\n\nconst networks: [AppKitNetwork, ...AppKitNetwork[]] = [mainnet, arbitrum, sepolia, solana, solanaTestnet, solanaDevnet]\n\n// 0. Get projectId from https://cloud.reown.com\nconst projectId = 'YOUR_PROJECT_ID'\n\n// 1. Create the Wagmi adapter\nexport const wagmiAdapter = new WagmiAdapter({\n  ssr: true,\n  projectId,\n  networks\n})\n\n// 2. Create Solana adapter\nconst solanaWeb3JsAdapter = new SolanaAdapter()\n\n// 3. Set up the metadata - Optional\nconst metadata = {\n  name: 'AppKit',\n  description: 'AppKit Example',\n  url: 'https://example.com', // origin must match your domain & subdomain\n  icons: ['https://avatars.githubusercontent.com/u/179229932']\n}\n\n// 4. Create the AppKit instance\nconst modal = createAppKit({\n  adapters: [wagmiAdapter, solanaWeb3JsAdapter],\n  networks,\n  metadata,\n  projectId,\n  features: {\n    analytics: true,\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Chain Object Using @reown/appkit/networks\nDESCRIPTION: This snippet demonstrates creating a custom network object with the defineChain function from '@reown/appkit/networks'. It specifies parameters such as chain ID, name, CAIP identifier, namespace, native currency, RPC URLs, block explorers, and optionally contracts. The custom network is then integrated into AppKit via createAppKit, including optional network logos.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/custom-networks.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { defineChain } from '@reown/appkit/networks';\n\n// Define the custom network\nconst customNetwork = defineChain({\n  id: 123456789,\n  caipNetworkId: 'eip155:123456789',\n  chainNamespace: 'eip155',\n  name: 'Custom Network',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'Ether',\n    symbol: 'ETH',\n  },\n  rpcUrls: {\n    default: {\n      http: ['RPC_URL'],\n      webSocket: ['WS_RPC_URL'],\n    },\n  },\n  blockExplorers: {\n    default: { name: 'Explorer', url: 'BLOCK_EXPLORER_URL' },\n  },\n  contracts: {\n    // Add the contracts here\n  }\n})\n\n// Then pass it to the AppKit\ncreateAppKit({\n    adapters: [...],\n    networks: [customNetwork],\n    chainImages: { // Customize networks' logos\n      123456789: '/custom-network-logo.png', // <chainId>: 'www.network.com/logo.png'\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Integrating AppKit with Ethers5 and Solana (TypeScript)\nDESCRIPTION: Illustrates AppKit initialization for Ethers5 and Solana support. Install @reown/appkit, @reown/appkit-adapter-ethers, @reown/appkit-adapter-solana, and Solana wallet adapters as dependencies. Define the set of supported networks and initialize each adapter, specifying available Solana wallets. A valid projectId is required; the resulting modal is used for wallet connection and chain management.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/multichain.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAppKit } from '@reown/appkit'\nimport { SolanaAdapter } from '@reown/appkit-adapter-solana'\nimport { EthersAdapter } from '@reown/appkit-adapter-ethers'\n\nimport { solana, solanaTestnet, solanaDevnet } from '@reown/appkit/networks'\nimport { mainnet, arbitrum, sepolia } from '@reown/appkit/networks'\n\nimport { SolflareWalletAdapter, PhantomWalletAdapter } from '@solana/wallet-adapter-wallets'\n\n// 0. Create the Ethers adapter\nexport const ethersAdapter = new EthersAdapter()\n\n// 1. Create Solana adapter\nconst solanaWeb3JsAdapter = new SolanaAdapter({\n  wallets: [new PhantomWalletAdapter(), new SolflareWalletAdapter()]\n})\n\n// 2. Get projectId from https://cloud.reown.com\nconst projectId = 'YOUR_PROJECT_ID'\n\n// 3. Set up the metadata - Optional\nconst metadata = {\n  name: 'AppKit',\n  description: 'AppKit Example',\n  url: 'https://example.com', // origin must match your domain & subdomain\n  icons: ['https://avatars.githubusercontent.com/u/179229932']\n}\n\n// 4. Create the AppKit instance\nconst modal = createAppKit({\n  adapters: [ethersAdapter, solanaWeb3JsAdapter],\n  networks: [mainnet, arbitrum, sepolia, solana, solanaTestnet, solanaDevnet],\n  metadata,\n  projectId,\n  features: {\n    analytics: true,\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with Ethers adapter using Bash\nDESCRIPTION: Contains installation commands for Reown AppKit alongside the Ethers adapter and ethers package using multiple package managers. These commands enable integration of Ethers (non-v5) with React frameworks for blockchain development using Reown AppKit. Prerequisites include Node.js and any of the package managers.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/installation.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit @reown/appkit-adapter-ethers ethers\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit @reown/appkit-adapter-ethers ethers\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @reown/appkit @reown/appkit-adapter-ethers ethers\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit @reown/appkit-adapter-ethers ethers\n```\n\n----------------------------------------\n\nTITLE: Configuring WalletConnectModal with Options in TypeScript\nDESCRIPTION: Demonstrates how to instantiate WalletConnectModal with a configuration object in a web environment, passing parameters such as project ID, chains, wallet options, and UI preferences via React components. The snippets include required and optional properties for customizing wallet connection behavior and appearance.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/options.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew WalletConnectModal({\n  projectId: \"YOUR_PROJECT_ID\",\n});\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n<ProjectIdPartial />\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n<ChainsPartial />\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n<MobileWalletsPartial />\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n<DesktopWalletsPartial />\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n<WalletImagesPartial />\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n<ExplorerRecommendedWalletIdsPartial />\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n<ExplorerExcludedWalletIdsPartial />\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n<TermsOfServiceUrlPartial />\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n<PrivacyPolicyUrlPartial />\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n<EnableExplorerPartial />\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n<ThemeModePartial />\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n<ThemeVariablesPartial />\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n<EnableAuthModePartial />\n```\n\n----------------------------------------\n\nTITLE: Importing and Using useAppKit Hook in TypeScript\nDESCRIPTION: Demonstrates how to import the `useAppKit` hook from `@reown/appkit/react` and destructure the `open` and `close` functions to control the visibility of the connection modal within a React component.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/hooks.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAppKit } from \"@reown/appkit/react\";\n\nexport default function Component() {\n  const { open, close } = useAppKit();\n}\n```\n\n----------------------------------------\n\nTITLE: Installation commands for Wagmi SDK using npm and other package managers\nDESCRIPTION: Provides commands to install the Wagmi SDK along with its dependencies using npm, Yarn, Bun, and pnpm package managers. Ensures correct package versions are included for compatibility.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/installation.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm\ninstall @reown/appkit @reown/appkit-adapter-wagmi wagmi viem\n```\n\nLANGUAGE: bash\nCODE:\n```\nYarn\nadd @reown/appkit @reown/appkit-adapter-wagmi wagmi viem\n```\n\nLANGUAGE: bash\nCODE:\n```\nBun\nbun add @reown/appkit @reown/appkit-adapter-wagmi wagmi viem\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm\nadd @reown/appkit @reown/appkit-adapter-wagmi wagmi viem\n```\n\n----------------------------------------\n\nTITLE: Switching Reown AppKit Network (TypeScript)\nDESCRIPTION: This snippet illustrates the updated usage of the `modal.switchNetwork` method in Reown AppKit. Unlike Web3Modal v5 which used chain IDs, AppKit requires passing the full network object (e.g., `polygon`), which should be imported from `@reown/appkit/networks`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers5-web.mdx#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following code line \nmodal.switchNetwork(137);\n\n// Add the following code lines\nimport { polygon } from \"@reown/appkit/networks\";\nmodal.switchNetwork(polygon);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Session Authentication Events with WalletKit in JavaScript\nDESCRIPTION: This snippet demonstrates how to subscribe to the onSessionAuthRequest event using WalletKit, passing a handler that processes incoming authentication requests. The handler function checks for valid arguments, then guides the step-by-step workflow to populate authentication payloads, construct messages, present them to the user, process signatures, and finally approve the authentication. Required dependencies include WalletKit and access to JavaScript event handlers. The primary parameter is the SessionAuthRequest argument, and the expected output is the execution of authentication approval logic based on user actions or app requirements.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/one-click-auth.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// subscribe to onSessionAuthRequest with a handler\n_walletKit!.onSessionAuthRequest.subscribe(_onSessionAuthRequest);\n//\nvoid _onSessionAuthRequest(SessionAuthRequest? args) {\n  if (args != null) {\n    // Process the authentication request here.\n    // Steps include:\n    // 1. Populate the authentication payload with the supported chains and methods\n    // 2. Format the authentication message using the payload and the user's account\n    // 3. Present the authentication message to the user\n    // 4. Sign the authentication message(s) to create a verifiable authentication object(s)\n    // 5. Approve the authentication request with the authentication object(s)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the ERC1271 Interface for Signature Validation in Solidity\nDESCRIPTION: Presents the Solidity interface definition for EIP-1271. This standard allows smart contracts to implement a method (`isValidSignature`) to verify signatures, which is essential for smart contract wallets that cannot directly sign messages like EOAs. The method takes a message hash and signature, returning a magic value (`0x1626ba7e`) upon successful validation.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/smart-contract-wallet-usage.mdx#_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\ncontract ERC1271 {\n  bytes4 constant internal MAGICVALUE = 0x1626ba7e;\n\n  function isValidSignature(\n    bytes32 _hash,\n    bytes memory _signature\n  )\n    public\n    view\n    returns (bytes4 magicValue);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the Active Blockchain Chain in C#\nDESCRIPTION: Provides C# code to change the currently active blockchain network using `AppKit.NetworkController.ChangeActiveChainAsync()`. Requires a `Chain` object (e.g., from `ChainConstants.Chains`) representing a chain configured as supported in AppKit options. This operation is asynchronous.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/actions.mdx#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nChain newChain = ChainConstants.Chains.Ethereum;\nawait AppKit.NetworkController.ChangeActiveChainAsync(newChain);\n```\n\n----------------------------------------\n\nTITLE: Integrating AppKit with Wagmi and Bitcoin (TypeScript)\nDESCRIPTION: Initializes AppKit for use across EVM (via Wagmi) and Bitcoin networks. Requires installation of @reown/appkit, @reown/appkit-adapter-wagmi, and @reown/appkit-adapter-bitcoin, as well as access to supported network constants. ProjectId is required for proper functioning. Sets up adapters, enables analytics, and configures metadata, returning the AppKit modal instance.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/multichain.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAppKit } from '@reown/appkit'\nimport { BitcoinAdapter } from '@reown/appkit-adapter-bitcoin'\nimport { WagmiAdapter } from '@reown/appkit-adapter-wagmi'\n\nimport { mainnet, arbitrum, sepolia, bitcoin } from '@reown/appkit/networks'\n\nconst networks: [AppKitNetwork, ...AppKitNetwork[]] = [mainnet, arbitrum, sepolia, bitcoin]\n\n// 0. Get projectId from https://cloud.reown.com\nconst projectId = 'YOUR_PROJECT_ID'\n\n// 1. Create the Wagmi adapter\nexport const wagmiAdapter = new WagmiAdapter({\n  ssr: true,\n  projectId,\n  networks\n})\n\n// 2. Set up Bitcoin Adapter\nconst bitcoinAdapter = new BitcoinAdapter({\n  projectId\n})\n\n// 3. Set up the metadata - Optional\nconst metadata = {\n  name: 'AppKit',\n  description: 'AppKit Example',\n  url: 'https://example.com', // origin must match your domain & subdomain\n  icons: ['https://avatars.githubusercontent.com/u/179229932']\n}\n\n// 4. Create the AppKit instance\nconst modal = createAppKit({\n  adapters: [wagmiAdapter, bitcoinAdapter],\n  networks,\n  metadata,\n  projectId,\n  features: {\n    analytics: true,\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Namespace for WalletConnect Sessions\nDESCRIPTION: Example of setting up a namespace object that specifies the accounts, methods, and events to be used in a WalletConnect session.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnamespaces: {\n  eip155: {\n    accounts: [\"eip155:1:0x0000000000..., eip155:2:0x0000000000...\"],\n    methods: [\"personal_sign\", \"eth_sendTransaction\"],\n    events: [\"accountsChanged\"]\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Approving a WalletConnect Session Proposal – JavaScript\nDESCRIPTION: This snippet handles the 'session_proposal' event (emitted after a dapp requests to connect), structuring a user approval flow, formatting Polkadot addresses, and approving the session with specified accounts, methods, chains, and events. Dependencies include walletKit and a UI component for user confirmation. Expected input is a session proposal object; output is a session approval response relayed to the dapp.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/polkadot/wallet-integration-guide.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// example account addresses in wallet state\nconst substrateAccounts = [\n  \"5CK8D1sKNwF473wbuBP6NuhQfPaWUetNsWUNAAzVwTfxqjfr\",\n  \"5F3sa2TJAWMqDhXG6jhV4N8ko9SxwGy8TpaNS1repo5EYjQX\",\n];\n\n// format the accounts to match the chain:chain_id:address format\nconst walletConnectAccounts = accounts.map(\n  (account) => `polkadot:91b171bb158e2d3848fa23a9f1c25182:${account.address}`\n);\n\nwalletKit.on(\"session_proposal\", async (proposal) => {\n  // optionally show user a modal or way to reject or approve session\n  showWalletConnectModal();\n\n  // handle user approval case\n\n  // create the approved session with selected accounts, supported methods, chains and events for your wallet\n  const session = await walletKit.approveSession({\n    id: proposal.id,\n    namespaces: {\n      polkadot: {\n        accounts: walletConnectAccounts,\n        methods: [\"polkadot_signTransaction\", \"polkadot_signMessage\"],\n        chains: [\"polkadot:91b171bb158e2d3848fa23a9f1c25182\"],\n        events: ['chainChanged\", \"accountsChanged'],\n      },\n    },\n  });\n\n  // create response object\n  const response = {\n    id: proposal.id,\n    result: \"session approved\",\n    jsonrpc: \"2.0\",\n  };\n\n  // respond to the dapp request with the approved session's topic and response\n  await walletKit.respondSessionRequest({ topic: session.topic, response });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom SIWXVerifier for Blockchain Session Validation (TypeScript)\nDESCRIPTION: Creates a new verifier class by extending SIWXVerifier, implementing blockchain signature/session validation logic. Requires importing SIWXVerifier from @reown/appkit-siwx and types from @reown/appkit-core. Developers must define 'chainNamespace' to target a blockchain standard, and 'verify', an async method returning a boolean after checking the SIWX session. Inputs are SIWXSession objects; output is the session's validity (true/false). Custom cryptographic checks should be placed in the 'verify' method.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/siwx/siwx-default.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SIWXVerifier } from \"@reown/appkit-siwx\";\nimport type { SIWXSession } from \"@reown/appkit-core\";\n\nexport class MyVerifier extends SIWXVerifier {\n  public readonly chainNamespace = \"eip155\"; // set the chain namespace for your verifier\n\n  public async verify(session: SIWXSession): Promise<boolean> {\n    // Implement your verification logic here\n    return true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SIWE in Next.js with createSIWEConfig\nDESCRIPTION: This code demonstrates how to create a SIWE configuration object using @reown/appkit-siwe in a Next.js environment. It defines message creation, nonce retrieval, session validation, and message verification. Dependencies include NextAuth and @reown/appkit-siwe, and the snippet facilitates user authentication via Ethereum signatures with custom session management.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/siwe.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getCsrfToken, signIn, signOut, getSession } from \"next-auth/react\";\nimport type {\n  SIWEVerifyMessageArgs,\n  SIWECreateMessageArgs,\n  SIWESession\n} from \"@reown/appkit-siwe\";\nimport { createSIWEConfig, formatMessage } from \"@reown/appkit-siwe\";\nimport { mainnet, sepolia } from \"@reown/appkit/networks\";\n\nexport const siweConfig = createSIWEConfig({\n  getMessageParams: async () => ({\n    domain: typeof window !== \"undefined\" ? window.location.host : \"\",\n    uri: typeof window !== \"undefined\" ? window.location.origin : \"\",\n    chains: [mainnet.id, sepolia.id],\n    statement: \"Please sign with your account\",\n  }),\n  createMessage: ({ address, ...args }: SIWECreateMessageArgs) =>\n    formatMessage(args, address),\n  getNonce: async () => {\n    const nonce = await getCsrfToken();\n    if (!nonce) {\n      throw new Error(\"Failed to get nonce!\");\n    }\n\n    return nonce;\n  },\n  getSession: async () => {\n    const session = await getSession();\n    if (!session) {\n      return null;\n    }\n    if (\n      typeof session.address !== \"string\" ||\n      typeof session.chainId !== \"number\"\n    ) {\n      return null;\n    }\n    return {\n      address: session.address,\n      chainId: session.chainId,\n    } satisfies SIWESession;\n  },\n  verifyMessage: async ({ message, signature }: SIWEVerifyMessageArgs) => {\n    try {\n      const success = await signIn(\"credentials\", {\n        message,\n        redirect: false,\n        signature,\n        callbackUrl: \"/protected\",\n      });\n      return Boolean(success?.ok);\n    } catch (error) {\n      return false;\n    }\n  },\n  signOut: async () => {\n    try {\n      await signOut({\n        redirect: false,\n      });\n      return true;\n    } catch (error) {\n      return false;\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Reown AppKit with Solana in Vue.js\nDESCRIPTION: This code sets up the Reown AppKit integration with Solana blockchain in a Vue.js application. It configures the project ID, application metadata, Solana adapter with wallet options, and creates the AppKit instance with necessary network configurations. Requires proper domain configuration for the Verify API to function correctly.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/solana/implementation.mdx#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\n  import { createAppKit, useAppKit } from \"@reown/appkit-solana/vue\";\n  import {\n    PhantomWalletAdapter,\n    SolflareWalletAdapter,\n  } from \"@solana/wallet-adapter-wallets\";\n  import { SolanaAdapter } from \"@reown/appkit-adapter-solana/vue\";\n  import { solana, solanaTestnet, solanaDevnet } from \"@reown/appkit/networks\";\n\n  // 1. Get projectId from https://cloud.reown.com\n  const projectId = \"YOUR_PROJECT_ID\";\n\n  // 2. Set up metadata\n  const metadata = {\n    name: \"AppKit\",\n    description: \"AppKit Solana Example\",\n    url: \"https://example.com\", // origin must match your domain & subdomain\n    icons: [\"https://avatars.githubusercontent.com/u/179229932\"],\n  };\n\n  // 3. Set up Solana Adapter\n  const solanaWeb3JsAdapter = new SolanaAdapter({\n    wallets: [new PhantomWalletAdapter(), new SolflareWalletAdapter()],\n  });\n\n  // 4. Create modal\n  createAppKit({\n    adapters: [solanaWeb3JsAdapter],\n    metadata,\n    networks: [solana, solanaTestnet, solanaDevnet],\n    projectId,\n    wallets: [new PhantomWalletAdapter(), new SolflareWalletAdapter()],\n  });\n</script>\n\n<template> // Rest of your app ... </template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Reown AppKit Modal with Wagmi Adapter in TypeScript\nDESCRIPTION: This snippet demonstrates initializing the createAppKit function with a Wagmi adapter, setting up networks, metadata, and creating a user interface for wallet connection. It includes importing necessary modules, defining project ID, networks, and adapter, then creating a modal instance that handles wallet connection interactions.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/wagmi/about/implementation.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createAppKit } from '@reown/appkit'\nimport { mainnet, arbitrum } from '@reown/appkit/networks'\nimport { WagmiAdapter } from '@reown/appkit-adapter-wagmi'\n\n// 1. Get a project ID at https://cloud.reown.com\nconst projectId = 'YOUR_PROJECT_ID'\n\nexport const networks = [mainnet, arbitrum]\n\n// 2. Set up Wagmi adapter\nconst wagmiAdapter = new WagmiAdapter({\n  projectId,\n  networks\n})\n\n// 3. Configure the metadata\nconst metadata = {\n  name: 'AppKit',\n  description: 'AppKit Example',\n  url: 'https://example.com', // origin must match your domain & subdomain\n  icons: ['https://avatars.githubusercontent.com/u/179229932']\n}\n\n// 3. Create the modal\nconst modal = createAppKit({\n  adapters: [wagmiAdapter],\n  networks: [mainnet, arbitrum],\n  metadata,\n  projectId,\n  features: {\n    analytics: true // Optional - defaults to your Cloud configuration\n  }\n})\n\n// 4. Trigger modal programaticaly\nconst openConnectModalBtn = document.getElementById('open-connect-modal')\nconst openNetworkModalBtn = document.getElementById('open-network-modal')\n\nopenConnectModalBtn.addEventListener('click', () => modal.open())\nopenNetworkModalBtn.addEventListener('click', () => modal.open({ view: 'Networks' }))\n\n// 5. Alternatively use w3m component buttons within the index.html file\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Chain Object Using defineChain (JavaScript)\nDESCRIPTION: This snippet shows how to create a custom network configuration using the defineChain function from '@reown/appkit/networks'. It specifies network parameters such as chain ID, name, native currency, RPC URLs, block explorers, and optional contracts. The resulting object can be passed to the createAppKit function to integrate the custom network into the application.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/custom-networks.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { defineChain } from '@reown/appkit/networks';\n\n// Define the custom network\nconst customNetwork = defineChain({\n  id: 123456789,\n  caipNetworkId: 'eip155:123456789',\n  chainNamespace: 'eip155',\n  name: 'Custom Network',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'Ether',\n    symbol: 'ETH'\n  },\n  rpcUrls: {\n    default: {\n      http: ['RPC_URL'],\n      webSocket: ['WS_RPC_URL']\n    }\n  },\n  blockExplorers: {\n    default: { name: 'Explorer', url: 'BLOCK_EXPLORER_URL' }\n  },\n  contracts: {\n    // Add the contracts here\n  }\n})\n\n// Then pass it to the AppKit\ncreateAppKit({\n  adapters: [...],\n  networks: [customNetwork],\n  chainImages: { // Customize networks' logos\n    123456789: '/custom-network-logo.png' // <chainId>: 'www.network.com/logo.png'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Web Platform WalletConnectModal Options Usage\nDESCRIPTION: Provides a comprehensive example of initializing WalletConnectModal in a web context with various optional and required configuration options, such as project ID, chain selection, wallet types, UI customization, and explorer wallet recommendations. Uses React tab interface to organize options for different categories.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/options.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew WalletConnectModal({\n  projectId: \"YOUR_PROJECT_ID\",\n  chains: [/* chain IDs */],\n  mobileWallets: [/* mobile wallets */],\n  desktopWallets: [/* desktop wallets */],\n  walletImages: [/* wallet images */],\n  explorerRecommendedWalletIds: [/* wallet IDs */],\n  explorerExcludedWalletIds: [/* wallet IDs to exclude */],\n  termsOfServiceUrl: \"https://example.com/tos\",\n  privacyPolicyUrl: \"https://example.com/privacy\",\n  enableExplorer: true,\n  themeMode: \"dark\",\n  themeVariables: { /* custom theme variables */ },\n  enableAuthMode: true\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Core Reown AppKit Wagmi Dependencies - Shell\nDESCRIPTION: This command installs the primary libraries required for integrating Reown's AppKit with the Wagmi library in a React Native application. It includes the Reown AppKit React Native component, Wagmi (for interacting with Ethereum), Viem (a low-level Ethereum client), and React Query (for data fetching). Requires Node.js and Yarn.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/wagmi/about/installation.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @reown/appkit-wagmi-react-native wagmi viem @tanstack/react-query\n```\n\n----------------------------------------\n\nTITLE: Connecting to Wallet and Generating Pairing URI in Swift\nDESCRIPTION: Demonstrates how to generate a pairing URI using the Sign client in Swift by calling the asynchronous connect method with required namespaces. This URI can be shared with wallets to initialize session proposals via QR codes or deep links, enabling session establishment between dApp and wallet.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_16\n\nLANGUAGE: Swift\nCODE:\n```\nlet uri = try await Sign.instance.connect(requiredNamespaces: namespaces, topic: uri.topic)\n```\n\n----------------------------------------\n\nTITLE: Setup for Using WalletConnect with AppKit (TypeScript/JavaScript)\nDESCRIPTION: Illustrates how to create an AppKit instance by importing `createAppKit`, configuring networks, and providing a project ID. This setup enables QR modal functionality, facilitating user connection via WalletConnect's AppKit for a streamlined user experience.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/providers/ethereum.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createAppKit } from \"@reown/appkit\";\nimport { mainnet, arbitrum, sepolia } from \"@reown/appkit/networks\";\n\nconst projectId = \"YOUR_PROJECT_ID\";\n\nconst modal = createAppKit({\n  networks: [mainnet, arbitrum, sepolia],\n  projectId,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with Bitcoin Adapter Using Bash\nDESCRIPTION: Contains the commands to install the Reown AppKit with the Bitcoin blockchain adapter in Vue.js projects using multiple package management tools. This enables integration with Bitcoin wallets through AppKit.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/installation.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit @reown/appkit-adapter-bitcoin\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit @reown/appkit-adapter-bitcoin\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @reown/appkit @reown/appkit-adapter-bitcoin\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit @reown/appkit-adapter-bitcoin\n```\n\n----------------------------------------\n\nTITLE: Setting Default Chain with Wagmi - TypeScript\nDESCRIPTION: Demonstrates how to set the desired initial connection chain using the `defaultChain` option with a chain object imported from the `@wagmi/core/chains` library. Requires the Wagmi dependency.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/options.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { mainnet } from '@wagmi/core/chains'\n\ncreateAppKit({\n//...\ndefaultChain: mainnet\n})\n```\n\n----------------------------------------\n\nTITLE: NextAuth API Route with TypeScript for One-Click Ethereum Authentication\nDESCRIPTION: This snippet defines a Next.js API route utilizing NextAuth with a credentials provider for Ethereum signature verification. It imports necessary modules, declares a custom session extension, ensures environment variables are set, and configures the provider to handle message verification and session handling via JWT tokens. Key dependencies include next-auth, @reown/appkit-siwe, and environment variables for secrets and project ID.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/siwe.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport NextAuth from \"next-auth\";\nimport credentialsProvider from \"next-auth/providers/credentials\";\nimport {\n  type SIWESession,\n  verifySignature,\n  getChainIdFromMessage,\n  getAddressFromMessage\n} from \"@reown/appkit-siwe\";\n\ndeclare module \"next-auth\" {\n  interface Session extends SIWESession {\n    address: string;\n    chainId: number;\n  }\n}\n\nconst nextAuthSecret = process.env.NEXTAUTH_SECRET;\nif (!nextAuthSecret) {\n  throw new Error(\"NEXTAUTH_SECRET is not set\");\n}\n\nconst projectId = process.env.NEXT_PUBLIC_PROJECT_ID;\nif (!projectId) {\n  throw new Error(\"NEXT_PUBLIC_PROJECT_ID is not set\");\n}\n\nconst providers = [\n  credentialsProvider({\n    name: \"Ethereum\",\n    credentials: {\n      message: {\n        label: \"Message\",\n        type: \"text\",\n        placeholder: \"0x0\"\n      },\n      signature: {\n        label: \"Signature\",\n        type: \"text\",\n        placeholder: \"0x0\"\n      }\n    },\n    async authorize(credentials) {\n      try {\n        if (!credentials?.message) {\n          throw new Error(\"SiweMessage is undefined\");\n        }\n        const { message, signature } = credentials;\n        const address = getAddressFromMessage(message);\n        const chainId = getChainIdFromMessage(message);\n\n        const isValid = await verifySignature({\n          address,\n          message,\n          signature,\n          chainId,\n          projectId\n        });\n\n        if (isValid) {\n          return {\n            id: `${chainId}:${address}`\n          };\n        }\n\n        return null;\n      } catch (e) {\n        return null;\n      }\n    }\n  })\n];\n\nconst handler = NextAuth({\n  secret: nextAuthSecret,\n  providers,\n  session: {\n    strategy: \"jwt\"\n  },\n  callbacks: {\n    session({ session, token }) {\n      if (!token.sub) {\n        return session;\n      }\n\n      const [, chainId, address] = token.sub.split(\":\");\n      if (chainId && address) {\n        session.address = address;\n        session.chainId = parseInt(chainId, 10);\n      }\n\n      return session;\n    }\n  }\n});\n\nexport { handler as GET, handler as POST };\n\n```\n\n----------------------------------------\n\nTITLE: Rejecting Session Proposal with WalletKit\nDESCRIPTION: Demonstrates how to reject a session proposal using `walletKit.rejectSession`. The wallet should display a loading indicator until a Relay acknowledgement is received. Includes error handling.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/best-practices.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n    try {\n        await walletKit.rejectSession(params);\n        // update UI -> remove the loader\n    } catch (error) {\n        // present error to the user\n    }\n```\n\n----------------------------------------\n\nTITLE: Accessing Basic Account Info with useAppKitAccount in TypeScript\nDESCRIPTION: Shows how to import and use the `useAppKitAccount` hook from `@reown/appkit/react` to retrieve essential wallet connection details like the user's address, connection status, CAIP address, and embedded wallet information.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/hooks.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAppKitAccount } from \"@reown/appkit/react\";\n\nconst { address, isConnected, caipAddress, status, embeddedWalletInfo } =\n  useAppKitAccount();\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Dapp via Client API in TypeScript\nDESCRIPTION: This snippet demonstrates several ways to subscribe to a dapp using the client API. It covers subscribing with the current account, a different account, a different dapp domain, or combinations thereof. All methods may require the 'differentAccount' to be pre-registered; specifying 'undefined' for the account uses the current account. Asynchronous operations should be awaited, and the input parameters are typically account and domain.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/managing-subscription/javascript.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait client.subscribeToDapp()\n\nawait client.subscribeToDapp(differentAccount)\n\nawait client.subscribeToDapp(undefined, differentDomain)\n\nawait client.subscribeToDapp(differentAccount, differentDomain)\n```\n\n----------------------------------------\n\nTITLE: Accessing Namespace-Specific Account Data with useAppKitAccount in Vue\nDESCRIPTION: Illustrates using the `useAppKitAccount` composable with a `namespace` option to retrieve account data specific to different blockchain types (e.g., 'eip155' for EVM, 'solana', 'bip122' for Bitcoin) in a multi-chain environment.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/composables.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAppKitAccount } from \"@reown/appkit/vue\";\n\nconst eip155Account = useAppKitAccount({ namespace: \"eip155\" }); // for EVM chains\nconst solanaAccount = useAppKitAccount({ namespace: \"solana\" });\nconst bip122Account = useAppKitAccount({ namespace: \"bip122\" }); // for bitcoin\n```\n\n----------------------------------------\n\nTITLE: Retrieving user address, connection status, chain ID, and wallet provider\nDESCRIPTION: Uses Reown AppKit hooks to access the user's wallet address, connection status, current chain ID, and wallet provider instance. These hooks facilitate managing user sessions and preparing for blockchain interactions within React components.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/ethers-send-transaction.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// AppKit hook to get the address and check if the user is connected\nconst { address, isConnected } = useAppKitAccount();\n// AppKit hook to get the chain id\nconst { chainId } = useAppKitNetworkCore();\n// AppKit hook to get the wallet provider\nconst { walletProvider } = useAppKitProvider < Provider > \"eip155\";\n```\n\n----------------------------------------\n\nTITLE: Using React Hooks to Access Wallet Provider and Sign Messages with Ethers.js in TypeScript\nDESCRIPTION: This snippet defines a React functional component that utilizes the useAppKitProvider, useAppKitAccount, and useAppKitNetwork hooks from @reown/appkit/react to access the connected wallet provider, user address, and active chain ID. It demonstrates how to create an ethers.js Web3Provider and signer from the walletProvider and chainId, then sign a test message asynchronously. This requires the ethers library and the Reown AppKit React hooks to retrieve relevant wallet and network data. The snippet outputs the signature to the console and provides a button to trigger message signing interactively.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/ethers5/hooks.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  useAppKitAccount,\n  useAppKitProvider,\n  useAppKitNetwork,\n} from \"@reown/appkit/react\";\nimport { ethers } from \"ethers\";\nimport { useAppKitProvider } from \"@reown/appkit/react\";\n\nfunction Components() {\n  const { walletProvider } = useAppKitProvider(\"eip155\");\n  const { address } = useAppKitAccount();\n  const { chainId } = useAppKitNetwork();\n\n  async function onSignMessage() {\n    const provider = new ethers.providers.Web3Provider(walletProvider, chainId);\n    const signer = provider.getSigner(address);\n    const signature = await signer?.signMessage(\"Hello AppKit Ethers\");\n    console.log(signature);\n  }\n\n  return <button onClick={() => onSignMessage()}>Sign Message</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AppKit Application and Providers - React - TypeScript (tsx)\nDESCRIPTION: Demonstrates the replacement of legacy Web3Modal configuration with new AppKit setup for React applications. Requires a WagmiAdapter instance and optional metadata for configuration. The snippet guides on initializing AppKit, configuring analytics, and applying the new WagmiConfig to the WagmiProvider. The entire component must wrap children in WagmiProvider with the correct config and should use QueryClientProvider for React Query state.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following line\n- createWeb3Modal({ wagmiConfig, projectId, chains })\n\n// Add the following line\n+ createAppKit({\n adapters: [wagmiAdapter],\n networks: [mainnet, arbitrum],\n metadata: metadata,\n projectId,\n features: {\n   analytics: true,\n }\n})\n\nexport default function App() {\n  return (\n    <>\n    // Remove the following line\n-   <WagmiProvider config={wagmiConfig}>\n\n    // Add the following line\n+   <WagmiProvider config={wagmiAdapter.wagmiConfig}>\n      <QueryClientProvider client={queryClient}>\n        <HomePage />\n      </QueryClientProvider>\n    </WagmiProvider>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching User Token Balance Using Ethers v6 in React (TypeScript)\nDESCRIPTION: This React component snippet illustrates interaction with an ERC-20 token contract using Ethers v6 and the Reown AppKit hooks to retrieve a connected user's token balance. It imports the necessary hooks, ethers utilities, and contract ABI in human-readable format. The `getBalance` async function validates connection, creates a provider and signer, instantiates the contract, fetches the balance, and logs it formatted to console. Requires Reown AppKit, ethers v6, React, and a properly configured blockchain wallet.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/installation.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAppKitProvider, useAppKitAccount } from \"@reown/appkit/react\";\nimport { BrowserProvider, Contract, formatUnits } from \"ethers\";\n\nconst USDTAddress = \"0x617f3112bf5397D0467D315cC709EF968D9ba546\";\n\n// The ERC-20 Contract ABI, which is a common contract interface\n// for tokens (this is the Human-Readable ABI format)\nconst USDTAbi = [\n  \"function name() view returns (string)\",\n  \"function symbol() view returns (string)\",\n  \"function balanceOf(address) view returns (uint)\",\n  \"function transfer(address to, uint amount)\",\n  \"event Transfer(address indexed from, address indexed to, uint amount)\",\n];\n\nfunction Components() {\n  const { address, isConnected } = useAppKitAccount();\n  const { walletProvider } = useAppKitProvider(\"eip155\");\n\n  async function getBalance() {\n    if (!isConnected) throw Error(\"User disconnected\");\n\n    const ethersProvider = new BrowserProvider(walletProvider);\n    const signer = await ethersProvider.getSigner();\n    // The Contract object\n    const USDTContract = new Contract(USDTAddress, USDTAbi, signer);\n    const USDTBalance = await USDTContract.balanceOf(address);\n\n    console.log(formatUnits(USDTBalance, 18));\n  }\n\n  return <button onClick={getBalance}>Get User Balance</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Coinbase Wallet Integration in Kotlin for AppKit\nDESCRIPTION: Enables Coinbase wallet support in the AppKit initialization parameter by setting coinbaseEnabled to true. This feature is in beta and may have API or behavior changes. Requires Kotlin with AppKit SDK version 1.2.0 or higher. Enables Coinbase Wallet SDK integration to support Coinbase wallet features in your application. Initialization includes handling success and error callbacks for setup. Additional step requires registering the AppKit instance within your Activity to correctly receive Coinbase wallet responses.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/options.mdx#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval initParams = Modal.Params.Init(core = CoreClient, coinbaseEnabled = true)\n\nAppKit.initialize(\n    init = initParams,\n    onSuccess = {\n        // Callback will be called if initialization is successful\n    },\n    onError = { error ->\n        // Error will be thrown if there's an issue during initialization\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Fetching wallet balance from Ethereum blockchain using Ethers.js\nDESCRIPTION: Defines an asynchronous function to instantiate a BrowserProvider with the obtained wallet provider and chain ID, fetch the wallet's balance, format it from Wei to ETH, and log the result. Used for displaying or processing user wallet balances.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/ethers-send-transaction.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// function to get the balance\nconst handleGetBalance = async () => {\n  const provider = new BrowserProvider(walletProvider, chainId);\n  const balance = await provider.getBalance(address);\n  const eth = formatEther(balance);\n  console.log(`${eth} ETH`);\n};\n```\n\n----------------------------------------\n\nTITLE: Making Direct RPC Requests via EVM in C#\nDESCRIPTION: Demonstrates how to send custom JSON-RPC requests directly to the connected blockchain node using `AppKit.EVM.RpcRequestAsync<T>()`. Requires the RPC method name (string) and optional parameters. The generic type `T` specifies the expected return type. Examples show fetching block number, transaction details, and calling a custom method.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/actions.mdx#_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\n// Get the latest block number\nBigInteger blockNumber = await AppKit.EVM.RpcRequestAsync<BigInteger>(\"eth_blockNumber\");\n\n// Get transaction by hash\nvar transaction = await AppKit.EVM.RpcRequestAsync<object>(\"eth_getTransactionByHash\", \"0x123...\");\n\n// Call a custom method with multiple parameters\nvar result = await AppKit.EVM.RpcRequestAsync<object>(\"custom_method\", param1, param2);\n```\n\n----------------------------------------\n\nTITLE: Import useSendCalls Hook - Wagmi - TypeScript\nDESCRIPTION: Imports the `useSendCalls` hook from the experimental Wagmi package. This hook is a core dependency for sending multiple transactions or complex transaction structures, including those sponsored by a paymaster.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/sponsoring-first-transaction.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useSendCalls } from 'wagmi/experimental'\n```\n\n----------------------------------------\n\nTITLE: Extending support: adding Polkadot and Tron networks before initialization\nDESCRIPTION: This example demonstrates adding multiple new networks, Polkadot and Tron, including test networks, prior to creating ReownAppKitModal with multi-network support configuration. It also includes optionalNamespaces with various chains, methods, and events.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/custom-chains.mdx#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Add Polkadot support\nReownAppKitModalNetworks.addSupportedNetworks('polkadot', [\n  ReownAppKitModalNetworkInfo(\n    name: 'Polkadot',\n    chainId: '91b171bb158e2d3848fa23a9f1c25182',\n    chainIcon: 'https://cryptologos.cc/logos/polkadot-new-dot-logo.png',\n    currency: 'DOT',\n    rpcUrl: 'https://rpc.polkadot.io',\n    explorerUrl: 'https://polkadot.subscan.io',\n  ),\n  ReownAppKitModalNetworkInfo(\n    name: 'Westend',\n    chainId: 'e143f23803ac50e8f6f8e62695d1ce9e',\n    currency: 'DOT',\n    rpcUrl: 'https://westend-rpc.polkadot.io',\n    explorerUrl: 'https://westend.subscan.io',\n    isTestNetwork: true,\n  ),\n]);\n// Add support for Tron networks\nReownAppKitModalNetworks.addSupportedNetworks('tron', [\n  ReownAppKitModalNetworkInfo(\n    name: 'Tron',\n    chainId: '0x2b6653dc',\n    chainIcon: 'https://cryptologos.cc/logos/tron-trx-logo.png',\n    currency: 'TRX',\n    rpcUrl: 'https://api.trongrid.io',\n    explorerUrl: 'https://tronscan.org',\n  ),\n  ReownAppKitModalNetworkInfo(\n    name: 'Tron testnet',\n    chainId: '0xcd8690dc',\n    chainIcon: 'https://cryptologos.cc/logos/tron-trx-logo.png',\n    currency: 'TRX',\n    rpcUrl: 'https://nile.trongrid.io',\n    explorerUrl: 'https://test.tronscan.org',\n    isTestNetwork: true,\n  ),\n]);\n// Instantiate with extended networks support\nconst _appKitModal = ReownAppKitModal(\n  context: context,\n  projectId: '{YOUR_PROJECT_ID}',\n  metadata: {...},\n  featuresConfig: {...},\n  // Include optionalNamespaces with extended chains, methods, events\n  optionalNamespaces: {...}\n);\n\n```\n\n----------------------------------------\n\nTITLE: Implementing modal trigger in React\nDESCRIPTION: Update the React hook imports and implementation to trigger the AppKit modal. This allows users to open the wallet connection dialog in React applications.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following import\n- import { useWeb3Modal } from '@web3modal/wagmi/react'\n\n// Add the following import\n+ import { useAppKit } from '@reown/appkit/react'\n\nfunction HomePage() {\n  const { open } = useAppKit()\n  return <button onClick={open}>Connect</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Reown AppKit with EthersAdapter in TypeScript\nDESCRIPTION: This snippet initializes the Reown AppKit for a React app using TypeScript (TSX). It imports necessary modules including the EthersAdapter and network configurations, then sets a project ID, networks array, and optional metadata describing the app's identity and domain. The createAppKit function is called with these parameters along with enabled analytics features. The App component simply returns the main application wrapper, delegating blockchain-related setup to the global appkit instance. The snippet requires @reown/appkit/react, @reown/appkit-adapter-ethers, and relevant network packages. The metadata URL must match the deployed domain to enable the Verify API for wallet verification. This setup is intended to run outside React components to ensure stable initialization without repetitive rerenders.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/ethers/about/implementation.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createAppKit } from \"@reown/appkit/react\";\nimport { EthersAdapter } from \"@reown/appkit-adapter-ethers\";\nimport { arbitrum, mainnet } from \"@reown/appkit/networks\";\n\n// 1. Get projectId\nconst projectId = \"YOUR_PROJECT_ID\";\n\n// 2. Set the networks\nconst networks = [arbitrum, mainnet];\n\n// 3. Create a metadata object - optional\nconst metadata = {\n  name: \"My Website\",\n  description: \"My Website description\",\n  url: \"https://mywebsite.com\", // origin must match your domain & subdomain\n  icons: [\"https://avatars.mywebsite.com/\"],\n};\n\n// 4. Create a AppKit instance\ncreateAppKit({\n  adapters: [new EthersAdapter()],\n  networks,\n  metadata,\n  projectId,\n  features: {\n    analytics: true, // Optional - defaults to your Cloud configuration\n  },\n});\n\nexport default function App() {\n  return <YourApp />; // Configure the <appkit-button> or a similar button inside\n}\n```\n\n----------------------------------------\n\nTITLE: Responding to Session Requests in JavaScript\nDESCRIPTION: Demonstrates how to handle and respond to session_request events from dapps, including extracting request parameters, signing messages, and sending responses.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/usage.mdx#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nwalletKit.on(\"session_request\", async (event) => {\n  const { topic, params, id } = event;\n  const { request } = params;\n  const requestParamsMessage = request.params[0];\n\n  // convert `requestParamsMessage` by using a method like hexToUtf8\n  const message = hexToUtf8(requestParamsMessage);\n\n  // sign the message\n  const signedMessage = await wallet.signMessage(message);\n\n  const response = { id, result: signedMessage, jsonrpc: \"2.0\" };\n\n  await walletKit.respondSessionRequest({ topic, response });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring and Initializing AppKit Modal - JavaScript - TypeScript (ts)\nDESCRIPTION: Shows how to instantiate the AppKit modal and enable analytics features in a JavaScript/TypeScript environment. First, legacy Web3Modal configuration is removed, then createAppKit is used with the WagmiAdapter and project data. The modal is ready for use in DApp UI after this configuration. No UI context or state management is included, so integrate as needed in your app lifecycle.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\n// Remove the following code lines\n- const modal = createWeb3Modal({\n  wagmiConfig,\n  projectId,\n  enableAnalytics: true\n})\n\n// Add the following code lines\n+ const modal = createAppKit({\n  adapters: [wagmiAdapter],\n  networks: [mainnet, arbitrum],\n  metadata: metadata,\n  projectId,\n  features: {\n    analytics: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Disconnecting a Session in JavaScript\nDESCRIPTION: Shows how to properly disconnect from a session by providing a topic and reason. Uses the getSdkError utility to generate a standardized reason payload for user-initiated disconnects.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/usage.mdx#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nawait walletKit.disconnectSession({\n  topic,\n  reason: getSdkError(\"USER_DISCONNECTED\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Interacting with Solana Wallets using @solana/web3.js and Appkit in JavaScript\nDESCRIPTION: Demonstrates setting up a Solana connection, subscribing to wallet state (provider and account address) potentially using Reown's Appkit (`modal`), sending a SOL transfer transaction, and fetching the account balance using `@solana/web3.js`. It requires initialized `modal` object for subscriptions and uses the fetched provider and connection details for blockchain interactions. The `sendTransaction` function constructs and sends a transfer, while `getBalance` retrieves the connected wallet's balance.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/solana/about/programs.mdx#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { PublicKey, LAMPORTS_PER_SOL, Transaction, SystemProgram } from \"@solana/web3.js\";\n\nimport type { Provider } from '@reown/appkit-adapter-solana'\n\nconst solanaProvider = {};\nconst solanaConnection = {};\nmodal.subscribeProviders(state => {\n    solanaProvider = state['solana'];\n    const url = solanaProvider.getActiveChain().rpcUrls.default.http[0];\n    const solanaConnection = new Connection(url);\n})\n\nconst addressFrom = await modal.subscribeAccount(state => {\n  return state;\n})\n\nconst sendTransaction = async () => {\n  if (!addressFrom || !solanaConnection) throw Error('user is disconnected');\n\n  const wallet = new PublicKey(addressFrom);\n  if (!wallet) throw Error('wallet provider is not available');\n\n  const latestBlockhash = await solanaConnection.getLatestBlockhash();\n\n  const transaction = new Transaction({\n    feePayer: wallet,\n    recentBlockhash: latestBlockhash?.blockhash,\n  }).add(\n    SystemProgram.transfer({\n      fromPubkey: wallet,\n      toPubkey: new PublicKey(address), // destination address\n      lamports: 1000,\n    })\n  );\n\n  return await provider.sendTransaction(transaction, solanaConnection);\n}\n\nconst getBalance = async () => {\n  if (!addressFrom || !solanaConnection) throw Error('user is disconnected');\n\n  const wallet = new PublicKey(addressFrom);\n  const balance = await solanaConnection?.getBalance(wallet);\n  if (balance !== undefined) {\n    return `${balance / LAMPORTS_PER_SOL}`;\n  } else {\n    return '-';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Provider State Changes Using Reown AppKit in TypeScript\nDESCRIPTION: This snippet illustrates subscribing to wallet provider state changes by passing a callback handler function to modal.subscribeProvider(). The handler receives an object containing updated fields such as provider, providerType, address, error, chainId, and isConnected, allowing reactive UI updates and state synchronization.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/ethers/actions.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunction handleChange({\n  provider,\n  providerType,\n  address,\n  error,\n  chainId,\n  isConnected,\n}) {\n  //...\n}\n\nmodal.subscribeProvider(handleChange);\n```\n\n----------------------------------------\n\nTITLE: Accessing Modal State with useAppKitState in TypeScript\nDESCRIPTION: Shows how to use the `useAppKitState` hook from `@reown/appkit/react` to get real-time information about the connection modal's state, specifically whether it's open (`open`) and the currently selected network ID (`selectedNetworkId`).\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/hooks.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAppKitState } from \"@reown/appkit/react\";\n\nconst { open, selectedNetworkId } = useAppKitState();\n```\n\n----------------------------------------\n\nTITLE: Sending a Transaction Through Solana Wallet using AppKit in JavaScript\nDESCRIPTION: This async function creates, signs, and sends a Solana transaction using the walletProvider's sendTransaction method. It fetches the latest blockhash, builds a transaction with a SystemProgram transfer instruction, and prompts the user wallet modal for confirmation. The function logs the resulting transaction signature. Dependencies are a connected wallet, Solana network connection, and AppKit correctly initialized for Solana.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/solana-send-transaction.mdx#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// function to send a TX\nconst handleSendTx = () => {\n    const latestBlockhash = await connection.getLatestBlockhash();\n\n    // create the transaction\n    const transaction= new Transaction({\n        feePayer: wallet,\n        recentBlockhash: latestBlockhash?.blockhash,\n      }).add(\n        SystemProgram.transfer({\n          fromPubkey: wallet,\n          toPubkey: new PublicKey(address), // destination address\n          lamports: 1000,\n        })\n      );\n\n    // raise the modal\n    const signature = await walletProvider.sendTransaction(transaction, connection)\n\n    // print the Transaction Signature\n    console.log(signature);\n}\n```\n\n----------------------------------------\n\nTITLE: Responding to Session Requests (Swift)\nDESCRIPTION: Shows how to respond to a dapp's session request after signing it. It calls a placeholder signing function `sign(request:)` to get the signed response (represented as `AnyCodable`) and then uses `Sign.instance.respond` to send the result back to the dapp.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_17\n\nLANGUAGE: Swift\nCODE:\n```\nlet response: AnyCodable = sign(request: sessionRequest) // Implement your signing method\ntry await Sign.instance.respond(topic: request.topic, requestId: request.id, response: .response(response))\n```\n\n----------------------------------------\n\nTITLE: Signing a Message Using wagmi useSignMessage Hook in React\nDESCRIPTION: This snippet shows how to import and use the useSignMessage hook from wagmi to prompt the connected wallet to sign a predefined message. It extracts the signMessageAsync function and creates an event handler to invoke the signing process, enabling user interactions to authenticate messages via their wallet.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/wagmi-send-transaction.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useSignMessage } from \"wagmi\";\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Wagmi hook to sign a message\nconst { signMessageAsync } = useSignMessage();\n\n// AppKit hook to get the address and check if the user is connected\nconst { address, isConnected } = useAppKitAccount();\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// function to sign a message\nconst handleSignMsg = async () => {\n    const msg = \"Hello Reown AppKit!\";\n    const sig = await signMessageAsync({ message: msg, account: address as Address });\n};\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Rendering button to trigger message signing when connected\nreturn (\n  isConnected && (\n    <div>\n      <button onClick={handleSignMsg}>Sign Message</button>\n    </div>\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Reading Smart Contract Data with useReadContract Hook in React Native and TypeScript\nDESCRIPTION: This snippet illustrates using the useReadContract hook to call a read-only method on a smart contract from within a React Native app. It imports required components and the hook, which expects an object containing the contract ABI, contract address, and the target function name (e.g., totalSupply). The hook returns asynchronous call status states (data, isError, isPending, isSuccess). The component conditionally renders loading, success with data, or error states based on the call. The ABI dependency is imported from a local module. This snippet is suited for interacting with ERC-20 or similar contracts in a mobile React environment.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/wagmi/hooks.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, Text } from \"react-native\";\nimport { useReadContract } from \"./abi\";\n\nfunction App() {\n  const { data, isError, isPending, isSuccess } = useReadContract({\n    abi,\n    address: \"0x6b175474e89094c44da98b954eedeac495271d0f\",\n    functionName: \"totalSupply\",\n  });\n\n  return (\n    <View>\n      {isPending && <Text>Loading</Text>}\n      {isSuccess && <Text>Response: {data?.toString()}</Text>}\n      {isError && <Text>Error reading contract</Text>}\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Redirect After Session Proposal in Dart/Flutter\nDESCRIPTION: Demonstrates using the `_walletKit.redirectToDapp` method within a session proposal event handler (`_onSessionProposal`). After processing and approving a session proposal initiated by a Dapp, this Dart code snippet redirects the user back to the Dapp using the proposer's redirect metadata obtained from the event object. Requires the WalletKit SDK.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/mobile-linking.mdx#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n_walletKit!.onSessionProposal.subscribe(_onSessionProposal);\n//\nvoid _onSessionProposal(SessionProposalEvent? event) async {\n  if (event != null) {\n    // Process session proposal\n    // ....\n    // Redirect back to proposer dapp\n    try {\n      await _walletKit.redirectToDapp(\n        topic: topic,\n        redirect: event.params.proposer.metadata.redirect,\n      );\n    } catch (e) {\n      ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating Pairing with WalletKit\nDESCRIPTION: Demonstrates how to initiate the pairing process between a wallet and a dapp using the WalletKit client. Requires a valid pairing URI obtained from the dapp. Includes basic error handling.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/best-practices.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst uri = 'xxx'; // pairing uri\ntry {\n    await walletKit.pair({ uri });\n} catch (error) {\n    // some error happens while pairing - check Expected errors section\n}\n```\n\n----------------------------------------\n\nTITLE: Pairing Session Using URI in C#\nDESCRIPTION: This code demonstrates pairing a session by providing a URI string to the SDK, which initiates the pairing process to establish a wallet-dapp connection. Successful pairing enables session proposals to be handled and approved.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/usage.mdx#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nvar uri = \"...\";\nawait sdk.Pair(uri);\n```\n\n----------------------------------------\n\nTITLE: Managing Modal State, Theme, and Events in JavaScript\nDESCRIPTION: Provides a list of methods and listeners on the Reown AppKit `modal` object for managing its state (e.g., `getState`, `subscribeState`), theme (e.g., `setThemeMode`, `getThemeMode`, `setThemeVariables`, `getThemeVariables`, `subscribeTheme`), and events (e.g., `getEvent`, `subscribeEvents`). These functions allow interaction with the modal's visibility, selected network, appearance, and event lifecycle.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-solana-web.mdx#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodal.getState\nmodal.subscribeState\nmodal.setThemeMode\nmodal.getThemeMode\nmodal.setThemeVariables\nmodal.getThemeVariables\nmodal.subscribeTheme\nmodal.getEvent\nmodal.subscribeEvents\n```\n\n----------------------------------------\n\nTITLE: Controlling WalletConnect Modal State in React Native (TypeScript)\nDESCRIPTION: Demonstrates the use of the useWalletConnectModal React hook from the @walletconnect/modal-react-native package to programmatically control the WalletConnect modal. The snippet exposes modal open/close functions, connection state, provider instance, and connected address. Dependencies include @walletconnect/modal-react-native and a React Native environment. Key parameters: options for specifying modal routes; outputs include modal state (isOpen), connection state (isConnected), and wallet address.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_40\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useWalletConnectModal } from \"@walletconnect/modal-react-native\";\n\nconst { isOpen, open, close, provider, isConnected, address } = useWalletConnectModal();\n\n// Modal's open state\nisOpen;\n\n// Open modal\ninterface Options {\n  route?: 'ConnectWallet' | 'Qrcode' | 'WalletExplorer';\n}\nawait open(options?: Options);\n\n// Close modal\nclose();\n\n// Initialized provider\nprovider;\n\n// Wallet connection state\nisConnected;\n\n// Connected account's address\naddress;\n```\n\n----------------------------------------\n\nTITLE: Signing and Sending the Transaction to the Node with Status Handling in JavaScript\nDESCRIPTION: After adding the signature, sends the signed transaction to the blockchain node asynchronously. Listens for transaction lifecycle events such as 'isReady', 'isInBlock', and 'isFinalized'. Based on events like 'ExtrinsicSuccess' or 'ExtrinsicFailed', the dapp can notify the user and update state accordingly. The unsubscribe function is called after finalization to avoid memory leaks.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/polkadot/dapp-integration-guide.mdx#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst rawUnsignedTransaction = api.registry.createType(\n  \"ExtrinsicPayload\",\n  unsignedTransaction,\n  {\n    version: unsignedTransaction.version,\n  }\n);\n\ntx.addSignature(\n  selectedWalletConnectAddress,\n  result.signature,\n  rawUnsignedTransaction\n);\n\n// send the signed transaction to the node\nconst unsub = await tx.send(({ status, events }) => {\n  // optionally handle ready status, notify user of submission\n  if (status.isReady) {\n    // ...\n  }\n\n  // optionally handle in block status, notify user of in block\n  if (status.isInBlock) {\n    // ...\n  }\n\n  // let user know outcome of transaction\n  if (status.isFinalized) {\n    events.forEach(({ event: { method } }) => {\n      // if success optionally notify/update state\n      if (method === \"ExtrinsicSuccess\") {\n        // ...\n        unsub(); // unsubscribe from extrinsic\n      } else if (method === \"ExtrinsicFailed\") {\n        // on failure optionally notify/update state\n        // ...\n        unsub(); // unsubscribe from extrinsic\n      }\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Basic SIWE Implementation Example in Flutter\nDESCRIPTION: A comprehensive example showing how to configure and implement SIWE authentication without a backend, including nonce generation, message formatting, signature verification, and session management.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/siwe.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfinal _appKitModal = ReownAppKitModal(\n  context: context,\n  projectId: '{YOUR_PROJECT_ID}',\n  metadata: const PairingMetadata(\n    name: 'Example App',\n    description: 'Example app description',\n    url: 'https://example.com/',\n    icons: ['https://example.com/logo.png'],\n    redirect: Redirect(\n      native: 'exampleapp://',\n      universal: 'https://reown.com/exampleapp',\n    ),\n  ),\n  siweConfig: SIWEConfig(\n    getNonce: () async {\n      return SIWEUtils.generateNonce();\n    },\n    getMessageParams: () async {\n      return SIWEMessageArgs(\n        domain: Uri.parse(_appKitModal.appKit!.metadata.url).authority,\n        uri: _appKitModal.appKit!.metadata.url,\n        statement: '{Your custom message here}',\n        methods: MethodsConstants.allMethods,\n      );\n    },\n    createMessage: (SIWECreateMessageArgs args) {\n      return SIWEUtils.formatMessage(args);\n    },\n    verifyMessage: (SIWEVerifyMessageArgs args) async {\n      final chainId = SIWEUtils.getChainIdFromMessage(args.message);\n      final address = SIWEUtils.getAddressFromMessage(args.message);\n      final cacaoSignature = args.cacao != null\n          ? args.cacao!.s\n          : CacaoSignature(\n              t: CacaoSignature.EIP191,\n              s: args.signature,\n            );\n      return await SIWEUtils.verifySignature(\n        address,\n        args.message,\n        cacaoSignature,\n        chainId,\n        DartDefines.projectId,\n      );\n    },\n    getSession: () async {\n      final chainId = _appKitModal.selectedChain?.chainId ?? '1';\n      final namespace = ReownAppKitModalNetworks.getNamespaceForChainId(\n        chainId,\n      );\n      final address = _appKitModal.session!.getAddress(namespace)!;\n      return SIWESession(address: address, chains: [chainId]);\n    },\n    signOut: () async {\n      return true;\n    },\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Preparing Authentication Response Objects in Kotlin\nDESCRIPTION: Demonstrates the process within the `onSessionAuthenticate` callback to prepare for approving an authentication request. It involves generating authentication payload parameters based on supported chains (EVM only noted) and methods, formatting SIWE messages for each chain using the user's account (did:pkh), signing these messages (assuming a `signMessage` function exists), and generating Cacao authentication objects (`Sign.Model.Cacao`).\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_37\n\nLANGUAGE: kotlin\nCODE:\n```\noverride val onSessionAuthenticate: ((Wallet.Model.SessionAuthenticate, Wallet.Model.VerifyContext) -> Unit)\n  get() = { sessionAuthenticate, verifyContext ->\n  val auths = mutableListOf<Sign.Model.Cacao>()\n\n  val authPayloadParams =\n    generateAuthPayloadParams(\n      sessionAuthenticate.payloadParams,\n      supportedChains = listOf(\"eip155:1\", \"eip155:137\", \"eip155:56\"), // Note: Only EVM chains are supported\n      supportedMethods = listOf(\"personal_sign\", \"eth_signTypedData\", \"eth_sign\")\n  )\n\n  authPayloadParams.chains.forEach { chain ->\n    val issuer = \"did:pkh:$chain:$address\"\n    val formattedMessage = formatAuthMessage(Sign.Params.FormatMessage(authPayloadParams, issuer))\n\n    val signature = signMessage(message: formattedMessage, privateKey: privateKey) //Note: Assume `signMessage` is a function you've implemented to sign messages.\n    val auth = generateAuthObject(authPayloadParams, issuer, signature)\n    auths.add(auth)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering AppKit Modal via useAppKit Hook in React Native (TypeScript)\nDESCRIPTION: This snippet demonstrates a custom logic approach to open the AppKit connection modal by using the useAppKit hook from @reown/appkit-wagmi-react-native. It imports React Native components Pressable and Text to create a touchable element that calls the open function obtained from the hook when pressed. This method offers fine-grained control over the modal trigger through hook utilities, enabling custom UI and event handling for wallet connection.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/wagmi/about/implementation.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Pressable, Text } from \"react-native\";\nimport { useAppKit } from \"@reown/appkit-wagmi-react-native\";\n\nexport default function ConnectView() {\n  const { open } = useAppKit();\n\n  return (\n    <>\n      <Pressable onClick={() => open()}>\n        <Text>Open Connect Modal</Text>\n      </Pressable>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Session Namespaces in Swift\nDESCRIPTION: Updates the chains, accounts, methods, or events associated with an active session. This allows changing what a dapp can access during an active session.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/usage.mdx#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\ntry await WalletKit.instance.update(topic: session.topic, namespaces: newNamespaces)\n```\n\n----------------------------------------\n\nTITLE: Handling User Sessions and Connections (C#)\nDESCRIPTION: Implements logic to resume a user's wallet connection from a previous session using `TryResumeSessionAsync`. If no session is resumed, it sets up an event listener for `AppKit.AccountConnected` and triggers the wallet connection modal via `AppKit.OpenModal()`. Assumes `MyAccountConnectedHandler` is a method defined elsewhere to handle the connected state.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/installation.mdx#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task ResumeSession()\n{\n    // Try to resume account connection from the last session\n    var resumed = await AppKit.ConnectorController.TryResumeSessionAsync();\n\n    if (resumed)\n    {\n        // Continue to the game\n        MyAccountConnectedHandler();\n    }\n    else\n    {\n        // Connect account\n        AppKit.AccountConnected += (_, e) => MyAccountConnectedHandler();\n        AppKit.OpenModal();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Info using useAppKitAccount Hook (React/TSX)\nDESCRIPTION: This snippet demonstrates the usage of the `useAppKitAccount` hook to fetch information about the connected client's account. It is dependent on the `@reown/appkit/react` library. The hook returns an object containing properties such as the account `address`, CAIP-10 `caipAddress`, and a boolean indicating if the account is `isConnected`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/wagmi/hooks.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAppKitAccount } from \"@reown/appkit/react\";\n\nfunction Components() {\n  const { address, caipAddress, isConnected } = useAppKitAccount();\n\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AppKit Providers and Account Hooks\nDESCRIPTION: Utilizes the `useAppKitProvider` hook to obtain the `walletProvider` function, specifically configured for the 'bip122' connector, which is used to interact with the connected Bitcoin wallet. The `useAppKitAccount` hook is used to retrieve current account details such as `allAccounts`, the active `address`, and the connection status `isConnected`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/bitcoin-send-transaction.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Get the wallet provider with the AppKit hook\nconst { walletProvider } = useAppKitProvider < BitcoinConnector > \"bip122\";\n\n// AppKit hook to get the address and check if the user is connected\nconst { allAccounts, address, isConnected } = useAppKitAccount();\n```\n\n----------------------------------------\n\nTITLE: Initiating Social Login and Handling Connection (C#)\nDESCRIPTION: Programmatically initiate a social login using either the async/await `ConnectAsync` or the event-based `Open` method. Handle the `AppKit.AccountConnected` event to react when a user successfully logs in via any method, including social login or external wallets. `ConnectAsync` supports optional cancellation.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/socials.mdx#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Async-await approach\nawait SocialLogin.Google.ConnectAsync();\n\n// You can also pass a CancellationToken to the method to cancel the connection\nawait SocialLogin.Google.ConnectAsync(cancellationToken: myCancellationToken);\n\n\n// Event-based approach\nAppKit.AccountConnected += (_, args) => {\n    // Handle the event\n    // Also triggered when user connects an external wallet\n};\nSocialLogin.Google.Open();\n```\n\n----------------------------------------\n\nTITLE: Subscribing to AppKit Modal State Changes in TypeScript\nDESCRIPTION: Demonstrates how to subscribe to updates in the AppKit modal's state (like open status or selected network) using `modal.subscribeState(callback)`. The callback receives the new state object. Requires an initialized `modal` instance.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/actions.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst modal = createAppKit({ wagmiConfig, projectId });\n\nmodal.subscribeState((newState) => console.log(newState));\n```\n\n----------------------------------------\n\nTITLE: Initializing and Connecting Universal Provider (TypeScript)\nDESCRIPTION: Shows how to import and initialize the `UniversalProvider` with a project ID and metadata. It then demonstrates connecting to a wallet, specifying optional namespaces like `eip155`, including methods, chains, events, and RPC endpoints. Includes options for pairing topic and skipping pairing.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/providers/universal.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport UniversalProvider from \"@walletconnect/universal-provider\";\n\n//  Initialize the provider\nconst provider = await UniversalProvider.init({\n  projectId: \"YOUR_PROJECT_ID\",\n  metadata: {\n    name: \"React App\",\n    description: \"React App for WalletConnect\",\n    url: \"https://walletconnect.com/\",\n    icons: [\"https://avatars.githubusercontent.com/u/37784886\"],\n  },\n  client: undefined, // optional instance of @walletconnect/sign-client\n});\n\n//  create sub providers for each namespace/chain\nawait provider.connect({\n  optionalNamespaces: {\n    eip155: {\n      methods: [\n        \"eth_sendTransaction\",\n        \"eth_signTransaction\",\n        \"eth_sign\",\n        \"personal_sign\",\n        \"eth_signTypedData\",\n      ],\n      chains: [\"eip155:80001\"],\n      events: [\"chainChanged\", \"accountsChanged\"],\n      rpcMap: {\n        80001:\n          \"https://rpc.walletconnect.com?chainId=eip155:80001&projectId=<your walletconnect project id>\",\n      },\n    },\n  },\n  pairingTopic: \"<123...topic>\", // optional topic to connect to\n  skipPairing: false, // optional to skip pairing ( later it can be resumed by invoking .pair())\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Wallet Connection Status Using Reown AppKit in TypeScript\nDESCRIPTION: Illustrates how to verify if a wallet is currently connected with modal.getIsConnected(). This method returns a boolean value indicating the connection state, which is essential for conditionally rendering UI components or triggering wallet-dependent actions.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/ethers/actions.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst isConnected = modal.getIsConnected();\n```\n\n----------------------------------------\n\nTITLE: Creating EIP-4361 SIWE Messages in JavaScript\nDESCRIPTION: A function that constructs an EIP-4361 standard compliant message string, used for Ethereum-based message authentication. It accepts an argument object conforming to SIWECreateMessageArgs, incorporating a nonce, address, chainId, and other elements needed for an authentication challenge. The created message string can then be signed and verified, linking the wallet and session securely.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/siwe/parameters.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncreateMessage `(args: SIWECreateMessageArgs) => string`\n\nThe official siwe package offers a straightforward method for generating an EIP-4361-compatible message, which can subsequently be authenticated using the same package. The nonce parameter is derived from your getNonce endpoint, while the address and chainId variables are sourced from the presently connected wallet.\n```\n\n----------------------------------------\n\nTITLE: Importing AppKit Provider Hook and Type for Solana in JavaScript\nDESCRIPTION: The snippet imports the useAppKitProvider React hook and the Provider type interface from AppKit's Solana adapter. These are necessary to access wallet provider methods for message signing and transaction operations in Solana. Ensure AppKit is properly set up and the Solana adapter is installed.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/solana-send-transaction.mdx#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useAppKitProvider } from \"@reown/appkit/react\";\nimport type { Provider } from \"@reown/appkit-adapter-solana/react\";\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Addresses from a Dynamic Wallet in JavaScript\nDESCRIPTION: Shows how to use getAccountAddresses to retrieve all addresses from a dynamic wallet. Returns multiple addresses including the first external address and unused change/receive addresses, with their derivation paths.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/dogecoin-rpc.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"getAccountAddresses\",\n    \"params\": {\n        \"account\": \"DTyt9wHTgizR8CwK8HAsWDaoMMxcaRuLWJ\"\n    }\n}\n\n// Result\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"result\": [\n        {\n            \"address\": \"DTyt9wHTgizR8CwK8HAsWDaoMMxcaRuLWJ\",\n            \"path\": \"m/44'/3'/0'/0/0\"\n        },\n        {\n            \"address\": \"DA6rZ9aV3mkz9uxNvddzzbXEEcSPN8SCUS\",\n            \"path\": \"m/44'/3'/0'/0/2\"\n        },\n        {\n            \"address\": \"DDtQfA541GQU2KDrY3ofF5F5hsKxkFiUuG\",\n            \"path\": \"m/44'/3'/0'/0/3\"\n        },\n        {\n            \"address\": \"D5A6wPFhCNChUiQHGXftD8DiNgc2G7yT1L\",\n            \"path\": \"m/44'/3'/0'/0/4\"\n        },\n        {\n            \"address\": \"DFG9R8ENG4mK5gUiU1VRr3FBT13LfWJ4Fb\",\n            \"path\": \"m/44'/3'/0'/1/3\"\n        },\n        {\n            \"address\": \"D7rakaGgZvaBH1vGTxnsQ3ZdV7ejX57hRy\",\n            \"path\": \"m/44'/3'/0'/1/4\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a transaction from React component via Reown AppKit and Ethers\nDESCRIPTION: Defines an asynchronous function that creates a provider and signer, then sends the predefined transaction, logs the resulting transaction object, allowing users to execute blockchain transfers directly from the interface.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/ethers-send-transaction.mdx#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// function to send a TX\nconst handleSendTx = async () => {\n  // create the provider and signer\n  const provider = new BrowserProvider(walletProvider, chainId);\n  const signer = new JsonRpcSigner(provider, address);\n\n  // send the transaction\n  const tx = await signer.sendTransaction(TEST_TX);\n  // log the transaction\n  console.log(tx);\n};\n```\n\n----------------------------------------\n\nTITLE: Handling SIWE Fallback Response - Kotlin\nDESCRIPTION: This callback function, `onSIWEAuthenticationResponse`, is used when the authentication process falls back to a standard SIWE request sent over an established session. It allows the dapp to receive the signed message and signature from the wallet or handle any errors that occurred during the signing process.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/one-click-auth.mdx#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n override fun onSIWEAuthenticationResponse(response: Modal.Model.SIWEAuthenticateResponse) {\n    if (response is Modal.Model.SIWEAuthenticateResponse.Result) {\n        // message and signature\n    } else {\n        //error\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Switching Networks with AppKit in Vue Applications\nDESCRIPTION: Shows how to create an AppKit instance with multiple networks and then switch to a different network. Requires the wagmiAdapter and a valid projectId.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/ethers/composables.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createAppKit } from \"@reown/appkit/vue\";\nimport { mainnet, arbitrum, polygon } from \"@reown/appkit/networks\";\n\nconst modal = createAppKit({\n  adapters: [wagmiAdapter],\n  projectId,\n  networks: [mainnet, arbitrum],\n  metadata: metadata,\n  features: {\n    analytics: true,\n  },\n});\n\nmodal.switchNetwork(polygon);\n```\n\n----------------------------------------\n\nTITLE: Initializing AppKit with SIWE Configuration in TypeScript\nDESCRIPTION: Demonstrates how to initialize the AppKit library with SIWE support in a TypeScript environment by passing a configuration object. The example shows including adapter(s) (such as wagmi or ethers), network selections, and enabling optional features like analytics. Crucially, the siweConfig parameter is provided to enable Sign In With Ethereum functionality according to the specified client parameters.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/siwe.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Pass your siweConfig inside the createAppKit() function\nconst modal = createAppKit({\n  adapters: [wagmiAdapter], //or your Ethers adapter\n  projectId,\n  networks: [mainnet, arbitrum],\n  defaultNetwork: mainnet,\n  features: {\n    analytics: true, // Optional - defaults to your Cloud configuration\n  },\n  siweConfig: siweConfig, // pass your siweConfig\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Network Connections with useAppKitNetwork (React)\nDESCRIPTION: This hook provides access to the current chain/network information and allows switching networks programmatically. It is useful for displaying the current network or implementing network switching functionality. Required dependency: `@reown/appkit/react`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/hooks.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAppKitNetwork } from \"@reown/appkit/react\";\n\nexport default Component(){\n  const { caipNetwork, caipNetworkId, chainId, switchNetwork } = useAppKitNetwork()\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Session Request Events in JavaScript\nDESCRIPTION: Shows how to handle session requests by subscribing to onSessionRequest events, including decoding messages, user approval flow, and sending responses.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/usage.mdx#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n_walletKit.onSessionRequest.subscribe(_onSessionRequest);\n\nvoid _onSessionRequest(SessionRequestEvent? event) async {\n  if (event != null) {\n    final id = event.id;\n    final topic = event.topic;\n    final method = event.method;\n    final chainId = event.chainId;\n    final params = event.params as List;\n\n    // message should arrive encoded\n    final decoded = hex.decode(params.first.substring(2));\n    final message = utf8.decode(decoded);\n\n    // display a prompt for the user to approve or reject the request\n    // if approved\n    if (approved) {\n      // Your code to sign the message here\n      final signature = ...\n\n      return _walletKit.respondSessionRequest(\n        topic: topic,\n        response: JsonRpcResponse(\n          id: id,\n          jsonrpc: '2.0',\n          result: signature,\n        ),\n      );\n    }\n    // if rejected\n    return _walletKit.respondSessionRequest(\n      topic: topic,\n      response: JsonRpcResponse(\n        id: id,\n        jsonrpc: '2.0',\n        error: const JsonRpcError(code: 5001, message: 'User rejected method'),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying SIWE Signature With Viem\nDESCRIPTION: This snippet illustrates how to verify a SIWE signature using the Viem library's createPublicClient and verifyMessage functions, providing an alternative to server-side verification especially useful for social logins or non-deployed smart accounts.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/siwe.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPublicClient, http } from \"viem\";\n\nconst publicClient = createPublicClient({\n  transport: http(\n    `https://rpc.walletconnect.org/v1/?chainId=${chainId}&projectId=${projectId}`\n  ),\n});\nconst isValid = await publicClient.verifyMessage({\n  message,\n  address: address as `0x${string}`,\n  signature: signature as `0x${string}`,\n});\n\n// The verifySignature is not working with social logins and emails with non deployed smart accounts\n// for this reason we recommend using the viem to verify the signature\n// import { verifySignature } from '@reown/appkit-siwe'\n// const isValid = await verifySignature({ address, message, signature, chainId, projectId })\n```\n\n----------------------------------------\n\nTITLE: Initializing WalletConnect Modal State and Events in Unity (C#)\nDESCRIPTION: Shows how to initialize the WalletConnectModal singleton in a Unity project, handle session resumption, and open the modal when needed. The code subscribes to the Ready event and manages required namespaces for Ethereum chains. Dependencies include the WalletConnect Unity SDK. Inputs include session state and init arguments; outputs are modal display and connection establishment.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\nprivate void Start()\n{\n    WalletConnectModal.Ready += (sender, args) =>\n    {\n        if (args.SessionResumed)\n        {\n            // Session has been resumed, proceed to the game\n        }\n        else\n        {\n            // Session hasn't been resumed\n\n            // Define required namespaces for new session\n            var requiredNamespaces = new RequiredNamespaces\n            {\n                {\n                    \"eip155\", new ProposedNamespace\n                    {\n                        Methods = new[]\n                        {\n                            \"eth_sendTransaction\",\n                            \"personal_sign\",\n                            \"eth_signTypedData\"\n                        },\n                        Chains = new[]\n                        {\n                            \"eip155:1\"\n                        },\n                        Events = new[]\n                        {\n                            \"chainChanged\",\n                            \"accountsChanged\"\n                        }\n                    }\n                }\n            };\n\n            var connectOptions = new ConnectOptions\n            {\n                RequiredNamespaces = requiredNamespaces\n            };\n\n            // Open the modal\n            WalletConnectModal.Open(new WalletConnectModalOptions\n            {\n                ConnectOptions = connectOptions\n            });\n        }\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of Calling Reown AppKit Read Contract Function (Dart)\nDESCRIPTION: Provides multiple examples of using the `requestReadContract` method to query common functions on an ERC-20 like contract (Tether). Examples include retrieving token decimals, checking a wallet's balance (`balanceOf`), and getting the total supply. These calls are asynchronous and return futures.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/actions.mdx#_snippet_9\n\nLANGUAGE: Dart\nCODE:\n```\nfinal chainId = _appKitModal.selectedChain!.chainId;\nfinal namespace = ReownAppKitModalNetworks.getNamespaceForChainId(chainId);\n\n// Get token decimals\nfinal decimals = await _appKitModal.requestReadContract(\n  topic: _appKitModal.session!.topic,\n  chainId: chainId,\n  deployedContract: tetherContract,\n  functionName: 'decimals',\n);\n\n// Get balance of wallet\nfinal balanceOf = await _appKitModal.requestReadContract(\n  deployedContract: tetherContract,\n  topic: _appKitModal.session!.topic,\n  chainId: chainId,\n  functionName: 'balanceOf',\n  parameters: [\n    EthereumAddress.fromHex(_appKitModal.session!.getAddress(namespace)),\n  ],\n);\n\n// Get token total supply\nfinal totalSupply = await _appKitModal.requestReadContract(\n  deployedContract: tetherContract,\n  topic: _appKitModal.session!.topic,\n  chainId: _appKitModal.selectedChain!.chainId,\n  functionName: 'totalSupply',\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Web3Modal with Wagmi Default Config in React (TSX)\nDESCRIPTION: This snippet demonstrates setting up a Wagmi configuration using the default presets via defaultWagmiConfig for the arbitrum and mainnet chains. It imports createWeb3Modal and defaultWagmiConfig from '@web3modal/wagmi/react', sets metadata containing app information, and creates a QueryClient for React Query integration. Then, createWeb3Modal is called with the Wagmi config, projectId, and chains. The resulting config is used in the WagmiConfig and QueryClientProvider React components to provide web3 functionality across the app. The deprecated EthereumClient and Web3Modal components are removed.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/appkitv2.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createWeb3Modal } from '@web3modal/wagmi/react'\nimport { defaultWagmiConfig } from '@web3modal/wagmi/react/config'\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { WagmiConfig } from 'wagmi'\nimport { arbitrum, mainnet } from 'viem/chains'\n\nconst chains = [arbitrum, mainnet]\nconst projectId = 'YOUR_PROJECT_ID'\n\nconst queryClient = new QueryClient()\n\nconst metadata = {\n  name: 'AppKit',\n  description: 'AppKit Example',\n  url: 'https://example.com',\n  icons: ['https://avatars.githubusercontent.com/u/179229932']\n}\n\nconst wagmiConfig = defaultWagmiConfig({ chains, projectId, metadata })\n\ncreateWeb3Modal({ wagmiConfig, projectId, chains })\n\nexport default function App() {\n  return (\n    <>\n      <WagmiConfig config={wagmiConfig}>\n        <QueryClientProvider client={queryClient}>\n          <HomePage />\n        </QueryClientProvider>\n      </WagmiConfig>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Disconnecting Sessions in Swift\nDESCRIPTION: Terminates an active session with a dapp. This allows users to disconnect from dapps they no longer wish to interact with.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/usage.mdx#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\ntry await WalletKit.instance.disconnect(topic: session.topic)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Recommended Wallet IDs or Disabling Recommendations in TypeScript\nDESCRIPTION: Demonstrates how to configure the `explorerRecommendedWalletIds` option. Provide an array of wallet IDs (obtained from the WalletConnect explorer) to prioritize specific wallets, respecting the order. Alternatively, set the value to the string 'NONE' to completely disable the display of recommended wallets. Defaults to `undefined` if not specified.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/web3modal/v2/_partials/options/explorerRecommendedWalletIds.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexplorerRecommendedWalletIds: [\n  '1ae92b26df02f0abca6304df07debccd18262fdf5fe82daa81593582dac9a369',\n  '4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0'\n]\n// -- or -- //\nexplorerRecommendedWalletIds: 'NONE'\n```\n\n----------------------------------------\n\nTITLE: Updating Hook Imports for AppKit in Wagmi - TypeScript\nDESCRIPTION: This snippet updates hook imports in your code to use the corresponding AppKit hooks from @reown/appkit-wagmi-react-native rather than the deprecated @web3modal ones. The useWalletInfo hook remains unchanged, while useWeb3Modal, useWeb3ModalState, and useWeb3ModalEvents are replaced with their useAppKit counterparts. These hooks manage app state, event handling, and wallet info in the new AppKit-based approach.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-react-native.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following code lines\nimport {\n  useWeb3Modal,\n  useWeb3ModalState,\n  useWeb3ModalEvents,\n  useWalletInfo,\n} from \"@web3modal/wagmi-react-native\";\n\n// Add the following code lines\nimport {\n  useAppKit,\n  useAppKitState,\n  useAppKitEvents,\n  useWalletInfo,\n} from \"@reown/appkit-wagmi-react-native\";\n```\n\n----------------------------------------\n\nTITLE: Using useAppKitProvider Hook for Wallet Integration with Ethers\nDESCRIPTION: Shows how to use the useAppKitProvider hook to access wallet provider information and sign messages using ethers.js. This hook returns the walletProvider and WalletProviderType for interacting with Ethereum wallets.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/ethers5/hooks.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  useAppKitAccount,\n  useAppKitProvider,\n  useAppKitNetwork,\n} from \"@reown/appkit/react\";\nimport { ethers } from \"ethers\";\nimport { useAppKitProvider } from \"@reown/appkit/react\";\n\nfunction Components() {\n  const { walletProvider } = useAppKitProvider(\"eip155\");\n  const { address } = useAppKitAccount();\n  const { chainId } = useAppKitNetwork();\n\n  async function onSignMessage() {\n    const provider = new ethers.providers.Web3Provider(walletProvider, chainId);\n    const signer = provider.getSigner(address);\n    const signature = await signer?.signMessage(\"Hello AppKit Ethers\");\n    console.log(signature);\n  }\n\n  return <button onClick={() => onSignMessage()}>Sign Message</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to AppKit State Publishers in Swift\nDESCRIPTION: Lists the various Combine publishers available from the AppKit instance. These publishers allow subscribers to react to changes in session state (settled, rejected, deleted), connection status, and authentication responses. Developers can subscribe to these for custom UI updates or logic.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/usage.mdx#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\npublic var sessionPublisher: AnyPublisher<[Session], Never>\npublic var sessionSettlePublisher: AnyPublisher<Session, Never>\npublic var sessionRejectionPublisher: AnyPublisher<(Session.Proposal, Reason), Never>\npublic var sessionDeletePublisher: AnyPublisher<(String, Reason), Never>\npublic var sessionResponsePublisher: AnyPublisher<Response, Never>\npublic var socketConnectionStatusPublisher: AnyPublisher<SocketConnectionStatus, Never>\npublic var authResponsePublisher: AnyPublisher<(id: RPCID, result: Result<(Session?, [Cacao]), AuthError>), Never>\n```\n\n----------------------------------------\n\nTITLE: Responding to Session Request with WalletKit\nDESCRIPTION: Shows how to respond to a session request (either approving or rejecting the specific action) using `walletKit.respondSessionRequest`. A loading state should be shown until the Relay acknowledgement is received. Includes error handling.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/best-practices.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n    try {\n        await walletKit.respondSessionRequest(params);\n        // update UI -> remove the loader\n    } catch (error) {\n        // present error to the user\n    }\n```\n\n----------------------------------------\n\nTITLE: Integrating AppKit with Ethers and Solana (TypeScript)\nDESCRIPTION: Demonstrates setup for AppKit integration across Ethers-supported EVM and Solana networks. Dependencies are @reown/appkit, @reown/appkit-adapter-ethers, @reown/appkit-adapter-solana, and compatible Solana wallet adapters. Configure the required networks and instantiate respective adapters, providing wallet options for Solana. The returned modal can handle multichain wallet management with analytics enabled.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/multichain.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAppKit } from '@reown/appkit'\nimport { SolanaAdapter } from '@reown/appkit-adapter-solana'\nimport { EthersAdapter } from '@reown/appkit-adapter-ethers'\n\nimport { solana, solanaTestnet, solanaDevnet } from '@reown/appkit/networks';\nimport { mainnet, arbitrum, sepolia } from \"@reown/appkit/networks\";\n\nimport {\n  SolflareWalletAdapter,\n  PhantomWalletAdapter,\n} from \"@solana/wallet-adapter-wallets\";\n\nconst networks: [AppKitNetwork, ...AppKitNetwork[]] = [mainnet, arbitrum, sepolia, solana, solanaTestnet, solanaDevnet]\n\n// 0. Create the Ethers adapter\nexport const ethersAdapter = new EthersAdapter()\n\n// 1. Create Solana adapter\nconst solanaWeb3JsAdapter = new SolanaAdapter({\nwallets: [new PhantomWalletAdapter(), new SolflareWalletAdapter()]\n})\n\n// 2. Get projectId from https://cloud.reown.com\nconst projectId = 'YOUR_PROJECT_ID'\n\n// 3. Set up the metadata - Optional\nconst metadata = {\nname: 'AppKit',\ndescription: 'AppKit Example',\nurl: 'https://example.com', // origin must match your domain & subdomain\nicons: ['https://avatars.githubusercontent.com/u/179229932']\n}\n\n// 4. Create the AppKit instance\nconst modal = createAppKit({\nadapters: [ethersAdapter, solanaWeb3JsAdapter],\nnetworks,\nmetadata,\nprojectId,\nfeatures: {\nanalytics: true,\n}\n})\n```\n\n----------------------------------------\n\nTITLE: Disconnecting WalletConnect Session with Optional Reason in C#\nDESCRIPTION: Illustrates how to disconnect an existing WalletConnect session using the session topic string. Optionally, provides an error reason object with user disconnect type. This cleanly terminates active sessions, notifying the remote client if a reason is supplied.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_40\n\nLANGUAGE: csharp\nCODE:\n```\nawait dappClient.Disconnect(sessionTopic);\n\n// or\n\nawait dappClient.Disconnect(sessionTopic, Error.FromErrorType(ErrorType.USER_DISCONNECTED));\n```\n\n----------------------------------------\n\nTITLE: React Component for Listening to Notification Events\nDESCRIPTION: This snippet renders the Events React component, which subscribes to various notification-related events such as incoming messages, status changes, or delivery confirmations. It enables real-time event handling within the application.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/frontend-integration/api.mdx#_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\n<Events />\n```\n\n----------------------------------------\n\nTITLE: Disconnecting Wallet Session with useDisconnect in TypeScript\nDESCRIPTION: Shows how to use the `useDisconnect` hook from `@reown/appkit/react` to get the `disconnect` function and programmatically end the current wallet session.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/hooks.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useDisconnect } from \"@reown/appkit/react\";\n\nconst { disconnect } = useDisconnect();\n\nawait disconnect();\n```\n\n----------------------------------------\n\nTITLE: Installing @reown/appkit-siwx via Yarn (Bash)\nDESCRIPTION: Runs the yarn command to add the @reown/appkit-siwx dependency for Dapp authentication features. Use this if the Yarn package manager is your preferred tool. The command updates project dependencies accordingly.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/siwx/siwx-default.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit-siwx\n```\n\n----------------------------------------\n\nTITLE: Available WalletKit Publishers in Swift\nDESCRIPTION: Lists all available publishers that can be subscribed to for receiving various events from the WalletKit instance.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/usage.mdx#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\npublic var sessionProposalPublisher: AnyPublisher<(proposal: Session.Proposal, context: VerifyContext?), Never>\npublic var sessionRequestPublisher: AnyPublisher<(request: Request, context: VerifyContext?), Never>\npublic var authRequestPublisher: AnyPublisher<(request: AuthRequest, context: VerifyContext?), Never>\npublic var sessionPublisher: AnyPublisher<[Session], Never>\npublic var socketConnectionStatusPublisher: AnyPublisher<SocketConnectionStatus, Never>\npublic var sessionSettlePublisher: AnyPublisher<Session, Never>\npublic var sessionDeletePublisher: AnyPublisher<(String, Reason), Never>\npublic var sessionResponsePublisher: AnyPublisher<Response, Never>\n```\n\n----------------------------------------\n\nTITLE: Smart contract interaction using Ethers.js to send a transaction\nDESCRIPTION: Illustrates how to initialize an Ethers provider and signer, then perform a sendTransaction call with a specified recipient and value. Highlights typical steps for executing on-chain transactions in JavaScript.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/installation.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BrowserProvider, Contract, parseEther } from \"ethers\";\n\nconst provider = await modal.subscribeProviders((state) => {\n  return state[\"eip155\"];\n});\n\nconst addressFrom = await modal.subscribeAccount((state) => {\n  return state;\n});\n\nif (!provider) throw Error(\"No provider found\");\nif (!addressFrom) throw Error(\"No address found\");\n\nfunction sendTransaction() {\n  const tx = {\n    from: addressFrom,\n    to: \"0x...\", // recipient address\n    value: parseEther(\"0.0001\"),\n  };\n  const ethersProvider = new BrowserProvider(provider);\n  const signer = await ethersProvider.getSigner();\n  const txResponse = await signer.sendTransaction(tx);\n  console.log(\"transaction:\", txResponse);\n}\n```\n\n----------------------------------------\n\nTITLE: Approving Session Proposals (TypeScript/Web)\nDESCRIPTION: Approves a session proposal received from a dapp in a web wallet using WalletKit. It involves calling `approveSession` with appropriate parameters and handling potential errors, typically updating the UI upon success or failure.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n    await walletKit.approveSession(params);\n    // update UI -> remove the loader\n} catch (error) {\n    // present error to the user\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SignClient.DappDelegate for WalletConnect Session Events in Android (Kotlin)\nDESCRIPTION: Defines a DappDelegate implementing multiple callback methods to handle various asynchronous events from the wallet via the SignClient. These include session approvals, rejections, authentications, updates, extensions, events, deletions, request responses, proposal/request expiration, connection state changes, and error handling. This delegate is essential for managing session lifecycle and interaction responses in the Android dApp.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_23\n\nLANGUAGE: Kotlin\nCODE:\n```\nval dappDelegate = object : SignClient.DappDelegate {\n    override fun onSessionApproved(approvedSession: Sign.Model.ApprovedSession) {\n        // Triggered when Dapp receives the session approval from wallet\n    }\n\n    override fun onSessionRejected(rejectedSession: Sign.Model.RejectedSession) {\n        // Triggered when Dapp receives the session rejection from wallet\n    }\n\n    fun onSessionAuthenticateResponse(sessionAuthenticateResponse: Sign.Model.SessionAuthenticateResponse) {\n        // Triggered when Dapp receives the session authenticate response from wallet\n    }\n\n    override fun onSessionUpdate(updatedSession: Sign.Model.UpdatedSession) {\n        // Triggered when Dapp receives the session update from wallet\n    }\n\n    override fun onSessionExtend(session: Sign.Model.Session) {\n        // Triggered when Dapp receives the session extend from wallet\n    }\n\n    override fun onSessionEvent(sessionEvent: Sign.Model.SessionEvent) {\n        // Triggered when the peer emits events that match the list of events agreed upon session settlement\n    }\n\n    override fun onSessionDelete(deletedSession: Sign.Model.DeletedSession) {\n        // Triggered when Dapp receives the session delete from wallet\n    }\n\n    override fun onSessionRequestResponse(response: Sign.Model.SessionRequestResponse) {\n        // Triggered when Dapp receives the session request response from wallet\n    }\n\n    override fun onProposalExpired(proposal: Modal.Model.ExpiredProposal) {\n        // Triggered when a proposal becomes expired\n    }\n\n    override fun onRequestExpired(request: Modal.Model.ExpiredRequest) {\n        // Triggered when a request becomes expired\n    }\n\n    override fun onConnectionStateChange(state: Sign.Model.ConnectionState) {\n        //Triggered whenever the connection state is changed\n    }\n\n    override fun onError(error: Sign.Model.Error) {\n        // Triggered whenever there is an issue inside the SDK\n    }\n}\n\nSignClient.setDappDelegate(dappDelegate)\n```\n\n----------------------------------------\n\nTITLE: Rejecting Session Proposals with User Feedback in TypeScript\nDESCRIPTION: Implementation for rejecting session proposals with proper loading state management. This code handles the rejection process and includes UI state management to provide feedback to users during the rejection process.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/best-practices.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n    await walletKit.rejectSession(params);\n    // update UI -> remove the loader\n} catch (error) {\n    // present error to the user\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Typed Data (EIP-712) Signatures via EVM in C#\nDESCRIPTION: Demonstrates how to verify if an EIP-712 typed data signature corresponds to a given address and original typed data using `AppKit.EVM.VerifyTypedDataSignatureAsync()`. Shows both direct parameter usage and using a `VerifyTypedDataSignatureParams` object. Returns `true` if the signature is valid, `false` otherwise.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/actions.mdx#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n// Basic verification\nbool isValid = await AppKit.EVM.VerifyTypedDataSignatureAsync(\n    \"0x123...\", // address\n    \"{ /* Your typed data */ }\", // original typed data\n    \"0xabc...\" // signature\n);\n\n// Using parameters object\nvar verifyTypedDataParams = new VerifyTypedDataSignatureParams\n{\n    Address = \"0x123...\",\n    Data = \"{ /* Your typed data */ }\",\n    Signature = \"0xabc...\"\n};\nbool isValid = await AppKit.EVM.VerifyTypedDataSignatureAsync(verifyTypedDataParams);\n```\n\n----------------------------------------\n\nTITLE: Configuring Email and Social Logins with AppKit (C#)\nDESCRIPTION: Configure AppKit's passwordless login options. Set `enableEmail` to control email login availability and `socials` with an array of `SocialLogin` enum values to specify allowed social platforms. Setting `socials` to null or an empty array disables social login.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/socials.mdx#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar appKitConfig = new AppKitConfig\n{\n    // ... //\n    enableEmail = true,\n    socials = new[]\n    {\n        SocialLogin.Google,\n        SocialLogin.X,\n        SocialLogin.Apple,\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying defaultAccountTypes for various networks in TypeScript\nDESCRIPTION: Demonstrates how to configure which default account types (e.g., externally owned account 'eoa' or smart account) are selected for specific blockchain networks within AppKit. The example sets the default for eip155 (EVM chains) to 'eoa'. It also provides the type definition showing acceptable account types per network identifier such as eip155, solana, bip122, and polkadot.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateAppKit({\n  //...\n  defaultAccountTypes: { eip155: \"eoa\" },\n});\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype DefaultAccountTypes = {\n  eip155: \"eoa\" | \"smartAccount\";\n  solana: \"eoa\";\n  bip122: \"payment\" | \"ordinal\" | \"stx\";\n  polkadot: \"eoa\";\n};\n```\n\n----------------------------------------\n\nTITLE: Async Function to Sign Message with Solana Wallet using AppKit in JavaScript\nDESCRIPTION: This function encodes a static message, prompts the wallet modal for user signature, and prints the resulting signature in hexadecimal format. It requires a properly initialized walletProvider with signing support and runs within an async event context (such as a button click). Input is a hardcoded message, and output is the hex signature.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/solana-send-transaction.mdx#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// function to sing a msg\nconst handleSignMsg = async () => {\n  // message to sign\n  const encodedMessage = new TextEncoder().encode(\"Hello Reown AppKit!\");\n\n  // Raise the modal\n  const sig = await walletProvider.signMessage(encodedMessage);\n\n  // Print the signed message in hexadecimal format\n  console.log(Buffer.from(sig).toString(\"hex\"));\n};\n```\n\n----------------------------------------\n\nTITLE: General createAppKit Call - TypeScript\nDESCRIPTION: Shows the basic structure for calling the `createAppKit` function, including placeholder parameters for required `projectId` and `chains`, and indicates where optional configurations (`...options`) are passed.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/options.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\ncreateAppKit({ projectId, chains, ...options });\n```\n\n----------------------------------------\n\nTITLE: Configuring Email & Social Wallets in ReownAppKitModal\nDESCRIPTION: Initialize ReownAppKitModal with featuresConfig to enable email and social login options. This configuration allows setting which social platforms to use for authentication and whether to show main wallet options on the first connect screen.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/email.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfinal _appKitModal = ReownAppKitModal(\n  context: context,\n  projectId: '{YOUR_PROJECT_ID}',\n  metadata: const PairingMetadata(\n    name: 'Example App',\n    description: 'Example app description',\n    url: 'https://example.com/',\n    icons: ['https://example.com/logo.png'],\n    redirect: Redirect(\n      native: 'exampleapp://',\n      universal: 'https://reown.com/exampleapp',\n    ),\n  ),\n  featuresConfig: FeaturesConfig(\n    email: true,\n    socials: [\n      AppKitSocialOption.Farcaster,\n      AppKitSocialOption.X,\n      AppKitSocialOption.Apple,\n      AppKitSocialOption.Discord,\n    ],\n    showMainWallets: false,\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Web3Inbox Widget with npm (Bash)\nDESCRIPTION: Installs both @web3inbox/core and @web3inbox/widget-react packages using npm. Ensure that Node.js and npm are already installed on your system. Executes installation via the terminal or command prompt. The required packages will be added to your project's dependencies, supporting the usage of the Web3Inbox Widget in JavaScript-based environments.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/notifications/embedded-widget/about.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @web3inbox/core @web3inbox/widget-react\n```\n\n----------------------------------------\n\nTITLE: Initializing AppKit with Basic SIWE Configuration (C#)\nDESCRIPTION: Demonstrates how to initialize AppKit in C# by creating an `AppKitConfig` object. This configuration includes the project ID, application metadata, redirect URIs, and crucially assigns the previously created basic `SiweConfig` object (intended for local verification) to the `siweConfig` property. This setup enforces local address verification upon wallet connection.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/siwe.mdx#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar appKitConfig = new AppKitConfig\n{\n    // Project ID from https://cloud.reown.com/\n    projectId = \"MY_PROJECT_ID\",\n    metadata = new Metadata(\n        \"App Name\",\n        \"App Description\",\n        \"https://reown.com\",\n        \"https://raw.githubusercontent.com/reown-com/reown-dotnet/main/media/appkit-icon.png\",\n        new RedirectData\n        {\n            // Used by native wallets to redirect back to the app after approving requests\n            Native = \"my-app://\"\n        }\n    ),\n    // Assign the SIWE configuration created above. Can be null if SIWE is not used.\n    siweConfig = siweConfig\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Connection Object with useAppKitConnection Hook\nDESCRIPTION: This snippet shows how to use the useAppKitConnection hook to access the connection object related to the blockchain network, specifically Solana. It involves importing the hook and destructuring the 'connection' object, which can then be used to interact with the network using the Solana Web3.js Connection class. Refer to the linked documentation for connection methods and properties.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/solana/hooks.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useAppKitConnection } from '@reown/appkit-adapter-solana/react'\n\n...\n\nconst { connection } = useAppKitConnection()\n```\n\n----------------------------------------\n\nTITLE: Importing WalletConnect Provider and Modal in JavaScript\nDESCRIPTION: Imports the UniversalProvider from '@walletconnect/universal-provider' and WalletConnectModal from '@walletconnect/modal' libraries. These dependencies are required to initialize WalletConnect client and display the connection modal within the dapp. This snippet sets up the foundational WalletConnect components necessary for establishing wallet sessions.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/polkadot/dapp-integration-guide.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport UniversalProvider from \"@walletconnect/universal-provider\";\nimport { WalletConnectModal } from \"@walletconnect/modal\";\n```\n\n----------------------------------------\n\nTITLE: Setting Up Sign Client Event Listeners\nDESCRIPTION: Configure event listeners for WalletConnect Sign client to handle session proposals, events, requests, pings, and deletions.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsignClient.on(\"session_proposal\", (event) => {\n  // Show session proposal data to the user i.e. in a modal with options to approve / reject it\n\n  interface Event {\n    id: number;\n    params: {\n      id: number;\n      expiry: number;\n      relays: Array<{\n        protocol: string;\n        data?: string;\n      }>;\n      proposer: {\n        publicKey: string;\n        metadata: {\n          name: string;\n          description: string;\n          url: string;\n          icons: string[];\n        };\n      };\n      requiredNamespaces: Record<\n        string,\n        {\n          chains: string[];\n          methods: string[];\n          events: string[];\n        }\n      >;\n      pairingTopic?: string;\n    };\n  }\n});\n\nsignClient.on(\"session_event\", (event) => {\n  // Handle session events, such as \"chainChanged\", \"accountsChanged\", etc.\n\n  interface Event {\n    id: number;\n    topic: string;\n    params: {\n      event: {\n        name: string;\n        data: any;\n      };\n      chainId: string;\n    };\n  }\n});\n\nsignClient.on(\"session_request\", (event) => {\n  // Handle session method requests, such as \"eth_sign\", \"eth_sendTransaction\", etc.\n\n  interface Event {\n    id: number;\n    topic: string;\n    params: {\n      request: {\n        method: string;\n        params: any;\n      };\n      chainId: string;\n    };\n  }\n});\n\nsignClient.on(\"session_ping\", (event) => {\n  // React to session ping event\n\n  interface Event {\n    id: number;\n    topic: string;\n  }\n});\n\nsignClient.on(\"session_delete\", (event) => {\n  // React to session delete event\n\n  interface Event {\n    id: number;\n    topic: string;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Provider State Changes with Modal Adapter in JavaScript\nDESCRIPTION: Registers a listener using modal.subscribeProvider(callback) to detect real-time changes in AppKit state parameters including address, chainId, isConnected, provider, and providerType. Requires an initialized modal object and a user-defined callback function. Callback receives an object with updated fields whenever provider state changes. Input: Callback function. Output: Subscription event; typically returns an unsubscribe function.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers5-web.mdx#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodal.subscribeProvider(({ address, chainId, isConnected, provider, providerType }) => {\n  console.log('Address:', address);\n  console.log('ChainId:', chainId);\n  console.log('Is Connected:', isConnected);\n  console.log('Provider:', provider);\n  console.log('Provider Type:', providerType);\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies from Web3Modal to AppKit in Wagmi - JSON\nDESCRIPTION: This snippet demonstrates how to update the dependencies in your package.json by removing old @web3modal packages and adding the relevant @reown/appkit replacements for a Wagmi-based React Native project. After replacing the packages, it is necessary to run yarn install to apply the updated dependencies. This is a prerequisite for ensuring compatibility with the new AppKit APIs.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-react-native.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    // Remove the following code lines\n    \"@web3modal/wagmi-react-native\": \"2.0.4\",\n    \"@web3modal/email-wagmi-react-native\": \"2.0.4\",\n    \"@web3modal/coinbase-wagmi-react-native\": \"2.0.4\",\n    \"@web3modal/siwe-react-native\": \"2.0.4\",\n\n    // Add the following code lines\n    \"@reown/appkit-wagmi-react-native\": \"1.0.0\",\n    \"@reown/appkit-auth-wagmi-react-native\": \"1.0.0\",\n    \"@reown/appkit-coinbase-wagmi-react-native\": \"1.0.0\",\n    \"@reown/appkit-siwe-react-native\": \"1.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Smart Contract Interaction Using Ethers v6 in Vue with TypeScript\nDESCRIPTION: Illustrates smart contract interaction in Vue with TypeScript using Ethers v6. It integrates Reown AppKit composables for provider and account management and uses ethers.js to create a contract instance to read the user's USDT token balance. The snippet includes a method that connects to the user's wallet, obtains the signer, and calls the balanceOf function on the ERC-20 USDT contract, logging the formatted token balance. This example requires prior setup of the Reown AppKit Vue environment and valid wallet connections.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/installation.mdx#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\n  import { useAppKitProvider, useAppKitAccount } from \"@reown/appkit/vue\";\n  import { BrowserProvider, Contract, formatUnits } from \"ethers\";\n\n  const USDTAddress = \"0x617f3112bf5397D0467D315cC709EF968D9ba546\";\n\n  // The ERC-20 Contract ABI, which is a common contract interface\n  // for tokens (this is the Human-Readable ABI format)\n  const USDTAbi = [\n    \"function name() view returns (string)\",\n    \"function symbol() view returns (string)\",\n    \"function balanceOf(address) view returns (uint)\",\n    \"function transfer(address to, uint amount)\",\n    \"event Transfer(address indexed from, address indexed to, uint amount)\",\n  ];\n\n  function Components() {\n    const { address, isConnected } = useAppKitAccount();\n    const { walletProvider } = useAppKitProvider(\"eip155\");\n\n    async function getBalance() {\n      if (!isConnected) throw Error(\"User disconnected\");\n\n      const ethersProvider = new BrowserProvider(walletProvider);\n      const signer = await ethersProvider.getSigner();\n      // The Contract object\n      const USDTContract = new Contract(USDTAddress, USDTAbi, signer);\n      const USDTBalance = await USDTContract.balanceOf(address);\n\n      console.log(formatUnits(USDTBalance, 18));\n    }\n    return <button onClick={getBalance}>Get User Balance</button>;\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Switching Blockchain Networks with AppKit Modal in TypeScript\nDESCRIPTION: This example illustrates how to initialize and use the AppKit modal instance for managing network connections using the '@reown/appkit/react' SDK. It shows how to pass network adapters, project configuration, and custom features when creating the modal, and subsequently switch to a different blockchain network (e.g., Polygon) at runtime. Dependencies include valid imports for supported networks (mainnet, arbitrum, polygon) and relevant configuration variables. The function 'switchNetwork' takes a target network object as input.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/ethers/hooks.mdx#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport { createAppKit } from \"@reown/appkit/react\";\nimport { mainnet, arbitrum, polygon } from \"@reown/appkit/networks\";\n\nconst modal = createAppKit({\n  adapters: [wagmiAdapter],\n  projectId,\n  networks: [mainnet, arbitrum],\n  metadata: metadata,\n  features: {\n    analytics: true,\n  },\n});\n\nmodal.switchNetwork(polygon);\n```\n\n----------------------------------------\n\nTITLE: Preparing Wallet Calls via JSON-RPC Using TypeScript\nDESCRIPTION: Defines the TypeScript type structure and an example payload for the JSON-RPC method 'wallet_prepareCalls' which the dApp uses to request permission to prepare blockchain calls. It specifies the parameters including sender address, chain ID, calls to execute, and required capabilities (such as permissions context). This RPC returns a structured object containing prepared calls, a signature request, and context, enabling secure and batched transaction signing by the dApp backend.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/smart-sessions.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ntype PrepareCallsParams = [{\nfrom: `0x${string}`\nchainId: `0x${string}`\ncalls: {\n    to: `0x${string}`\n    data: `0x${string}`\n    value: `0x${string}`\n}[];\ncapabilities: Record<string, any>\n}]\n```\n\nLANGUAGE: tsx\nCODE:\n```\nwallet_prepareCalls([{  \n    from: '0x...',\n    chainId: '0x...',\n    calls: [{\n        to: '0x...'\n        data: '0x...'\n        value: '0x...'\n    }],\n    capabilities: {\n        permissions: {\n        context: '...' // Importantly for session keys, wallets will likely need the ERC-7715 (https://eip.tools/eip/7715) permissions context for userOp construction\n        }\n    }\n}])\n```\n\nLANGUAGE: tsx\nCODE:\n```\ntype PrepareCallsReturnValue = [{\n    preparedCalls: {\n        type: string\n        data: any\n        chainId: `0x${string}`\n    }\n    signatureRequest: {  \n        hash: `0x${string}`\n    }\n    context: `0x${string}`\n}]\n```\n\nLANGUAGE: tsx\nCODE:\n```\n[{\n    preparedCalls: {\n        type: 'user-operation-v07', type\n        data: { // ...userOp\n        sender: '0x...',\n        ...\n        },\n        chainId: '0x01'\n    },\n    signatureRequest: {  \n        hash: '0x...' // user op hash in our case\n    },\n    context: '...' // params.capabilities.permissions.context in our case\n}]\n```\n\n----------------------------------------\n\nTITLE: Opening AppKit with Web Component in React (TSX)\nDESCRIPTION: Demonstrates rendering the `<appkit-button>` custom HTML element within a React component (TSX). This web component acts as a button that automatically triggers the AppKit modal when clicked. It requires the AppKit web components library to be loaded globally but does not need explicit imports within the component file.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/ethers/about/triggermodal.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function ConnectButton() {\n  return <appkit-button />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wagmi with Custom Connectors in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to configure the Wagmi adapter for Reown AppKit with custom connectors. It initializes WalletConnect, Injected, and Coinbase Wallet connectors, defines network configurations (Sepolia), creates a WagmiAdapter instance, and finally initializes AppKit with this adapter. Requires `@reown/appkit`, `@reown/appkit-adapter-wagmi`, `@wagmi/core`, and `wagmi/connectors`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/custom-connectors.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAppKit } from '@reown/appkit'\nimport { WagmiAdapter } from '@reown/appkit-adapter-wagmi'\nimport { reconnect, http, createConfig } from '@wagmi/core'\nimport { CreateConnectorFn } from 'wagmi'\nimport { sepolia } from '@reown/appkit/networks'\nimport { walletConnect, coinbaseWallet, injected } from 'wagmi/connectors'\n\nconst projectId = 'YOUR_PROJECT_ID'\n\nconst metadata = {\n  //...\n}\n\n// create the connectors (delete the ones you don't need)\nconst connectors: CreateConnectorFn[] = []\nconnectors.push(walletConnect({ projectId, metadata, showQrModal: false })) // showQrModal must be false\nconnectors.push(injected({ shimDisconnect: true }))\nconnectors.push(\n  coinbaseWallet({\n    appName: metadata.name,\n    appLogoUrl: metadata.icons[0]\n  })\n)\n\nexport const networks = [sepolia]\n\nexport const wagmiAdapter = new WagmiAdapter({\n  storage: null, // storage property might need a value depending on implementation\n  transports: {\n    [sepolia.id]: http()\n  },\n  connectors,\n  projectId,\n  networks\n})\n\nexport const config = wagmiAdapter.wagmiConfig\n\ncreateAppKit({\n  adapters: [wagmiAdapter],\n  projectId,\n  networks: [sepolia]\n})\n```\n\n----------------------------------------\n\nTITLE: Opening AppKit Using React Hooks\nDESCRIPTION: A React component that opens the AppKit modal using the useAppKit hook. This approach allows more customization, including the ability to open specific views directly, such as the Networks view.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/solana/triggermodal.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAppKit } from \"@reown/appkit/react\";\n\nexport default function ConnectButton() {\n  // 4. Use modal hook\n  const { open } = useAppKit();\n\n  return (\n    <>\n      <button onClick={() => open()}>Open Connect Modal</button>\n      <button onClick={() => open({ view: \"Networks\" })}>\n        Open Network Modal\n      </button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating WalletConnect Pairing with URI\nDESCRIPTION: This code demonstrates how to initiate a pairing process with a dapp via a URI, often obtained from QR codes or deep links, facilitating the connection setup between wallet and dapp.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/usage.mdx#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait walletKit.pair({ uri });\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Universal Provider Events (TypeScript)\nDESCRIPTION: Illustrates how to listen for and handle different events emitted by the Universal Provider instance using the `.on()` method. Covers events like `display_uri`, `session_ping`, `session_event`, `session_update`, and `session_delete`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/providers/universal.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Subscribe for pairing URI\nprovider.on(\"display_uri\", (uri) => {\n  console.log(\"display_uri\", uri);\n});\n\n// Subscribe to session ping\nprovider.on(\"session_ping\", ({ id, topic }) => {\n  console.log(\"session_ping\", id, topic);\n});\n\n// Subscribe to session event\nprovider.on(\"session_event\", ({ event, chainId }) => {\n  console.log(\"session_event\", event, chainId);\n});\n\n// Subscribe to session update\nprovider.on(\"session_update\", ({ topic, params }) => {\n  console.log(\"session_update\", topic, params);\n});\n\n// Subscribe to session delete\nprovider.on(\"session_delete\", ({ id, topic }) => {\n  console.log(\"session_delete\", id, topic);\n});\n```\n\n----------------------------------------\n\nTITLE: Triggering WalletConnectModal Web\nDESCRIPTION: Demonstrates how to programmatically open the WalletConnectModal using a connection URI and how to close it. The modal handles showing/hiding automatically when using the provider.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nawait modal.openModal({\n  uri: \"YOUR_CONNECTION_URI\"\n});\n\n// Do some work...\n\nmodal.closeModal();\n```\n\n----------------------------------------\n\nTITLE: Approving Session Proposals (TypeScript/React Native)\nDESCRIPTION: Approves a session proposal received from a dapp in a React Native wallet using WalletKit. Calls `approveSession` with parameters and includes error handling and UI update logic (e.g., removing a loader).\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n    await walletKit.approveSession(params);\n    // update UI -> remove the loader\n} catch (error) {\n    // present error to the user\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Reown AppKit with Solana in Vue 3\nDESCRIPTION: This snippet configures the Reown AppKit in a Vue 3 `<script setup>` environment to support Solana blockchain wallets and networks. It imports necessary modules such as `createAppKit` from Reown, Solana network presets, and a wallet reconnection utility from Wagmi core. The snippet retrieves a project ID from environment variables, constructs a metadata object with application details, and initializes a `SolanaAdapter` with Phantom and Solflare wallet adapters to manage wallet connections. The `reconnect` function is called with the Solana config to restore wallet sessions automatically. Finally, `createAppKit` is called passing project configuration, metadata, supported networks, and adapters to set up the app's blockchain connectivity.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/solana/about/implementation.mdx#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script setup>  \n  \n  import { createAppKit } from '@reown/appkit/vue'\n  import { solana, solanaTestnet, solanaDevnet } from '@reown/appkit/networks'\n  import { reconnect } from '@wagmi/core'\n\n  // 1. Define constants\n  const projectId = process.env.VUE_APP_PROJECT_ID // get it from cloud.reown.com\n\n  // 2. Create wagmiConfig\n  const metadata = {\n    name: 'Appkit Solana',\n    description: 'Appkit Solana Example',\n    url: 'https://example.com', // origin must match your domain & subdomain\n    icons: ['https://avatars.githubusercontent.com/u/179229932']\n  }\n\n  // 3. Create Wagmi Adapter\n  const solanaWeb3JsAdapter = new SolanaAdapter({\n    wallets: [new PhantomWalletAdapter(), new SolflareWalletAdapter()]\n  })\n\n  reconnect(solanaConfig)\n\n  // 3. Create modal\n  createAppKit({\n    projectId,\n    metadata,\n    networks: [solana, solanaTestnet, solanaDevnet],\n    adapters: [solanaWeb3JsAdapter],\n  })\n</script>\n\n<template>\n  // Rest of your app ...\n</template>\n```\n\n----------------------------------------\n\nTITLE: Initializing Reown AppKit with Solana in React/TypeScript\nDESCRIPTION: This snippet demonstrates the essential configuration steps for setting up the Reown AppKit in a React application. It involves importing the core `createAppKit` function, network definitions (`solana`, `solanaTestnet`, `solanaDevnet`), and the `SolanaAdapter`. It requires defining a `projectId`, application `metadata`, and an array of network adapters (`SolanaAdapter`). The `createAppKit` function is then called with these configurations to create the modal instance. This setup should be performed outside of any React component to avoid unnecessary re-renders.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/solana/implementation.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createAppKit } from \"@reown/appkit/react\";\nimport { solana, solanaTestnet, solanaDevnet } from \"@reown/appkit/networks\";\nimport { SolanaAdapter } from \"@reown/appkit-adapter-solana/react\";\n\n// 1. Get projectId\nconst projectId = \"YOUR_PROJECT_ID\";\n\n// 2. Set chains\nconst mainnet = {\n  chainId: \"5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp\",\n  name: \"Solana\",\n  currency: \"SOL\",\n  explorerUrl: \"https://solscan.io\",\n  rpcUrl: \"https://rpc.walletconnect.org/v1\",\n};\n\n// 3. Create a metadata object\nconst metadata = {\n  name: \"My Website\",\n  description: \"My Website description\",\n  url: \"https://mywebsite.com\", // origin must match your domain & subdomain\n  icons: [\"https://avatars.githubusercontent.com/u/179229932\"],\n};\n\n// 4. Create Wagmi Adapter\nconst solanaWeb3JsAdapter = new SolanaAdapter();\n\n// 5. Create a AppKit instance\nconst modal = createAppKit({\n  projectId,\n  metadata,\n  networks: [solana, solanaTestnet, solanaDevnet],\n  adapters: [solanaWeb3JsAdapter],\n});\n\nexport default function App() {\n  return <YourApp />;\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Signing Authentication Payloads with ReCaps (Kotlin)\nDESCRIPTION: This code illustrates generating authentication payload parameters compatible with your application's supported chains and methods, formatting the authentication message, signing it with the user's private key, and creating verifiable authentication objects. It facilitates creating multiple auth objects for different chains, essential for cross-chain authentication scenarios.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/one-click-auth.mdx#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\noverride val onSessionAuthenticate: ((Wallet.Model.SessionAuthenticate, Wallet.Model.VerifyContext) -> Unit)\n  get() = { sessionAuthenticate, verifyContext ->\n  val auths = mutableListOf<Wallet.Model.Cacao>()\n\n  val authPayloadParams =\n    WalletKit.generateAuthPayloadParams(\n      sessionAuthenticate.payloadParams,\n      supportedChains = listOf(\"eip155:1\", \"eip155:137\", \"eip155:56\"), // Note: Only EVM chains are supported\n      supportedMethods = listOf(\"personal_sign\", \"eth_signTypedData\", \"eth_sign\")\n  )\n\n  authPayloadParams.chains.forEach { chain ->\n    val issuer = \"did:pkh:$chain:$address\"\n    val formattedMessage = WalletKit.formatAuthMessage(Wallet.Params.FormatAuthMessage(authPayloadParams, issuer))\n\n    val signature = signMessage(message = formattedMessage, privateKey = privateKey) //Assume `signMessage` is implemented\n    val auth = WalletKit.generateAuthObject(authPayloadParams, issuer, signature)\n    auths.add(auth)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallet Balance with wagmi useBalance Hook in React\nDESCRIPTION: This code demonstrates how to import necessary hooks from wagmi and Reown AppKit, retrieve the connected wallet's address, and fetch the balance using the useBalance hook. It includes setting up the functions to trigger balance retrieval and displays the balance in console, enabling users to view their wallet balance programmatically.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/wagmi-send-transaction.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useBalance } from \"wagmi\";\nimport { useAppKitAccount } from \"@reown/appkit/react\";\nimport { type Address } from \"viem\";\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// AppKit hook to get the address and check if the user is connected\nconst { address, isConnected } = useAppKitAccount()\n\n// Call the useBalance hook with the user's address to prepare for fetching the balance.\nconst { refetch } = useBalance({\n    address: address as Address\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// function to get the balance\nconst handleGetBalance = async () => {\n  const balance = await refetch();\n  console.log(\n    `${balance?.data?.value.toString()} ${balance?.data?.symbol.toString()}`\n  );\n};\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Rendering button to trigger balance fetch when connected\nreturn (\n  isConnected && (\n    <div>\n      <button onClick={handleGetBalance}>Get Balance</button>\n    </div>\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring AppKit to Enable or Disable Swap Feature in TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize the AppKit with the Swap feature enabled or disabled by modifying the 'features' configuration object. Setting 'swaps' to false disables the swapping functionality. It requires the 'createAppKit' function, adapters, projectId, networks, and metadata as dependencies.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/swaps.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst modal = createAppKit({\n  adapters: [wagmiAdapter],\n  projectId,\n  networks: [mainnet, arbitrum],\n  metadata: metadata,\n  features: {\n    swaps: false // Optional - true by default\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Signing Cosmos Direct Transactions via JSON-RPC (JavaScript/JSON)\nDESCRIPTION: This JSON-RPC method (`cosmos_signDirect`) signs a provided document using the direct sign mode for a specified signer address. It requires the `signerAddress` and a `signDoc` object containing blockchain details (`chainId`, `accountNumber`) and encoded transaction parts (`authInfoBytes`, `bodyBytes`). It returns an object containing the signature details (`signature`) including the public key, and the original signed document (`signed`).\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/cosmos-rpc.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// Request\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"cosmos_signDirect\",\n    \"params\": {\n        \"signerAddress\": \"cosmos1sguafvgmel6f880ryvq8efh9522p8zvmrzlcrq\",\n        \"signDoc\":  {\n            \"chainId\": \"cosmoshub-4\",\n            \"accountNumber\": \"1\"\n            \"authInfoBytes\": \"CgoKABIECgIIARgBEhMKDQoFdWNvc20SBDIwMDAQwJoM\",\n            \"bodyBytes\": \"CpABChwvY29zbW9zLmJhbmsudjFiZXRhMS5Nc2dTZW5kEnAKLWNvc21vczFwa3B0cmU3ZmRrbDZnZnJ6bGVzamp2aHhobGMzcjRnbW1rOHJzNhItY29zbW9zMXF5cHF4cHE5cWNyc3N6ZzJwdnhxNnJzMHpxZzN5eWM1bHp2N3h1GhAKBXVjb3NtEgcxMjM0NTY3\"\n        }\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n// Result\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"result\":  {\n        \"signature\": {\n            \"pub_key\": {\n                \"type\": \"tendermint/PubKeySecp256k1\",\n                \"value\": \"AgSEjOuOr991QlHCORRmdE5ahVKeyBrmtgoYepCpQGOW\"\n            },\n            \"signature\": \"AnTrXtS2lr9CBwhTpRa8ZlKcVR9PeIXGaTpvodyJU05QvRKVjIkQfOZl5JhdkfxCY+a6rhwCOYVcbKQTJlMw4w==\"\n        },\n        \"signed\": {\n            \"chainId\": \"cosmoshub-4\",\n            \"accountNumber\": \"1\"\n            \"authInfoBytes\": \"CgoKABIECgIIARgBEhMKDQoFdWNvc20SBDIwMDAQwJoM\",\n            \"bodyBytes\": \"CpABChwvY29zbW9zLmJhbmsudjFiZXRhMS5Nc2dTZW5kEnAKLWNvc21vczFwa3B0cmU3ZmRrbDZnZnJ6bGVzamp2aHhobGMzcjRnbW1rOHJzNhItY29zbW9zMXF5cHF4cHE5cWNyc3N6ZzJwdnhxNnJzMHpxZzN5eWM1bHp2N3h1GhAKBXVjb3NtEgcxMjM0NTY3\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AppKit and WagmiAdapter - React - TypeScript (tsx)\nDESCRIPTION: Sets up Reown AppKit and WagmiAdapter for React by replacing legacy Web3Modal imports and configurations. Dependencies include @reown/appkit/react, @reown/appkit-adapter-wagmi, @tanstack/react-query, and chain constants from @reown/appkit/networks. The snippet demonstrates how to create a WagmiAdapter with selected networks and project ID, and integrates React Query for state management. All configuration objects and adapters should be created outside the React component to prevent unnecessary rerenders.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following imports\n- import { createWeb3Modal } from '@web3modal/wagmi/react'\n- import { defaultWagmiConfig } from '@web3modal/wagmi/react/config'\n- import { arbitrum, mainnet } from 'viem/chains'\n\n// Add the following imports\n+ import { createAppKit } from '@reown/appkit/react'\n+ import { arbitrum, mainnet } from '@reown/appkit/networks'\n+ import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'\n\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\n```\n\nLANGUAGE: tsx\nCODE:\n```\nconst projectId = 'YOUR_PROJECT_ID'\nconst queryClient = new QueryClient()\n\nconst metadata = { //optional\n    name: 'AppKit',\n    description: 'AppKit Example',\n    url: 'https://example.com',\n    icons: ['https://avatars.githubusercontent.com/u/179229932']\n}\n\n// Remove the existing Wagmi Config\n+ const wagmiConfig = defaultWagmiConfig({ chains, projectId, metadata })\n\n// Create the Wagmi adapter\n+ const wagmiAdapter = new WagmiAdapter({\n  networks: [mainnet, arbitrum],\n  projectId\n})\n```\n\n----------------------------------------\n\nTITLE: Smart Contract Interaction Using Wagmi in Vue with TypeScript\nDESCRIPTION: Demonstrates how to use Wagmi actions for interacting with smart contracts and wallets in Vue with TypeScript script setup syntax. It imports the readContract method to call the symbol function of a USDT contract on Ethereum, illustrating the read-only contract interaction. The snippet assumes the availability of an ABI and the target contract address.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/installation.mdx#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\n  import { readContract } from \"@wagmi/core\";\n  import { USDTAbi } from \"../abi/USDTAbi\";\n\n  const USDTAddress = \"0x...\";\n\n  const data = readContract({\n    abi: USDTAbi,\n    address: USDTAddress,\n    functionName: \"symbol\",\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Signing Messages with Wagmi React Hook in TypeScript\nDESCRIPTION: This code snippet shows how to leverage the useSignMessage hook from the wagmi library in a React functional component to sign arbitrary messages using the connected blockchain account. The @wagmi/core and wagmi packages are required as dependencies. signMessage is a function that prompts the user's wallet to sign the provided message ('hello world' in this example). Inputs include an object with a required message property; output is a user signature if the account is connected and the user approves. The button triggers the signing process, which is handled asynchronously via the hook. Implementation is for React TypeScript (TSX) contexts.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/wagmi/hooks.mdx#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useSignMessage } from \"wagmi\";\n\nfunction App() {\n  const { signMessage } = useSignMessage();\n\n  return (\n    <button onClick={() => signMessage({ message: \"hello world\" })}>\n      Sign message\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @reown/appkit-siwx via Bun (Bash)\nDESCRIPTION: Uses the bun package manager to add @reown/appkit-siwx to the project's dependencies, enabling SIWX functionality in Dapps. Bun should be installed beforehand. This command registers the package for your JavaScript/TypeScript project.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/siwx/siwx-default.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbun a @reown/appkit-siwx\n```\n\n----------------------------------------\n\nTITLE: Sending Ether using AppKit.Evm in C#\nDESCRIPTION: Demonstrates sending Ether to a specified address using the `AppKit.Evm.SendTransactionAsync` method. It converts the amount to Wei using `Web3.Convert.ToWei` and logs the resulting transaction hash. This transaction uses the default gas limit of 21000, with the gas price determined by the connected wallet provider.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/usage.mdx#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nconst string toAddress = \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\";\nBigInteger amount = Web3.Convert.ToWei(0.001);\nstring result = await AppKit.Evm.SendTransactionAsync(toAddress, amount);\n\nDebug.Log(\"Transaction hash: \" + result);\n```\n\n----------------------------------------\n\nTITLE: Implementing Smart Contract Read/Write Actions with Wagmi Hooks in React\nDESCRIPTION: Defines asynchronous functions `handleReadSmartContract` and `handleWriteSmartContract` using the initialized Wagmi hooks. `handleReadSmartContract` fetches data using `readContract.refetch` and logs it. `handleWriteSmartContract` sends a transaction to the 'store' function using `writeContract`. A `useEffect` hook monitors the `isSuccess` state to log a success message upon write completion.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/EVM-smart-contract-interaction.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// Call the function to read the smart contract and print on console\nconst handleReadSmartContract = async () => {\n  const { data } = await readContract.refetch();\n  console.log(\"data: \", data);\n};\n\n// Write to the smart contract and check if the transaction is successful with useEffect\nconst handleWriteSmartContract = () => {\n  writeContract({\n    address: storageSC,\n    abi: storageABI,\n    functionName: \"store\",\n    args: [123n],\n  });\n};\n\n// useEffect to print the success message when the contract is written\nuseEffect(() => {\n  if (isSuccess) {\n    console.log(\"contract write success\");\n  }\n}, [isSuccess]);\n```\n\n----------------------------------------\n\nTITLE: Next.js SSR Configuration for AppKit\nDESCRIPTION: Configuration for Next.js webpack to make AppKit work properly with Server-Side Rendering. Adds externals to prevent SSR issues with certain dependencies.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/installation.mdx#_snippet_23\n\nLANGUAGE: ts\nCODE:\n```\n// Path: next.config.js\nconst nextConfig = {\n  webpack: (config) => {\n    config.externals.push(\"pino-pretty\", \"lokijs\", \"encoding\");\n    return config;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Modal Trigger in React\nDESCRIPTION: How to update the modal trigger code from Web3Modal to Reown AppKit in React applications.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers-web.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following import\n- import { useWeb3Modal } from '@web3modal/ethers/react'\n\n// Add the following import\n+ import { useAppKit } from '@reown/appkit/react'\nfunction HomePage() {\n  const { open } = useAppKit()\n  return <button onClick={open}>Connect</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Wallet Provider using AppKit Hook for Ethers.js\nDESCRIPTION: Utilizes the `useAppKitProvider` hook from Reown AppKit to obtain the connected wallet's provider (`walletProvider`). This provider conforms to the EIP-1193 standard (specified by `\"eip155\"`) and is necessary for initializing the Ethers.js provider and signer.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/EVM-smart-contract-interaction.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst { walletProvider } = useAppKitProvider < Provider > \"eip155\";\n```\n\n----------------------------------------\n\nTITLE: Initializing Coinbase Smart Wallet with AppKit (TypeScript)\nDESCRIPTION: Demonstrates enabling the Coinbase Smart Wallet feature within AppKit using the createAppKit function in TypeScript. This snippet shows setting the coinbasePreference flag to control Smart Wallet behavior by selecting 'smartWalletOnly'. Prerequisites include AppKit 4.2.3+ and the latest Wagmi version if used. The configuration affects how the wallet popup and connection preference behave at runtime.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateAppKit({\n  //...\n  enableCoinbase: true, // true by default\n  coinbasePreference: \"smartWalletOnly\",\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Session Proposal and Building Namespaces in JavaScript\nDESCRIPTION: This code handles incoming session proposals by constructing approved namespaces using the '@walletconnect/utils' utility. It accepts a proposal and supported namespaces (chains, methods, events, accounts), builds the corresponding namespace object, and approves the session. If an error occurs, it rejects the session with a user rejection reason.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/usage.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { WalletKit, WalletKitTypes } from '@reown/walletkit';\nimport { buildApprovedNamespaces, getSdkError } from '@walletconnect/utils';\n\nasync function onSessionProposal({ id, params }: WalletKitTypes.SessionProposal){\n  try{\n    const approvedNamespaces = buildApprovedNamespaces({\n      proposal: params,\n      supportedNamespaces: {\n        eip155: {\n          chains: ['eip155:1', 'eip155:137'],\n          methods: ['eth_sendTransaction', 'personal_sign'],\n          events: ['accountsChanged', 'chainChanged'],\n          accounts: [\n            'eip155:1:0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb',\n            'eip155:137:0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb'\n          ]\n        }\n      }\n    });\n    const session = await walletKit.approveSession({\n      id,\n      namespaces: approvedNamespaces\n    });\n  }catch(error){\n    await walletKit.rejectSession({\n      id: proposal.id,\n      reason: getSdkError(\"USER_REJECTED\")\n    });\n  }\n}\n\nwalletKit.on('session_proposal', onSessionProposal);\n```\n\n----------------------------------------\n\nTITLE: Initializing AppMetaData with Link Mode in Kotlin\nDESCRIPTION: Creates an instance of AppMetaData with the appLink set to a universal link and linkMode enabled. This metadata is used to configure WalletKit with necessary app link information and to activate Link Mode for low latency request transport.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/link-mode.mdx#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nval appMetaData = Core.Model.AppMetaData(\n    ...\n    appLink = \"https://example.com/example_wallet\",\n    linkMode = true\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing WalletKit with Link Mode Enabled in TypeScript\nDESCRIPTION: Initializes the WalletKit instance for a React Native wallet application with Link Mode enabled by setting the `linkMode` flag to true in the universal link metadata. The snippet defines wallet metadata such as name, description, url, icons, and redirect schemes for both native and universal links. This setup enables the wallet to receive authentication and session requests over Universal Links to reduce latency.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/link-mode.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst walletKit = await WalletKit.init({\n  core,\n  metadata: {\n    name: \"Demo React Native Wallet\",\n    description: \"Demo RN Wallet to interface with Dapps\",\n    url: \"www.reown.com/walletkit\",\n    icons: [\"https://your_wallet_icon.png\"],\n    redirect: {\n      native: \"yourwalletscheme://\",\n      universal: \"https://example.com/example_wallet\",\n      linkMode: true,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Account Data with useAppKitAccount in Vue\nDESCRIPTION: Shows how to import and use the `useAppKitAccount` composable from `@reown/appkit/vue` to retrieve reactive account data and connection status. The returned `accountData` ref provides access to properties like `address`, `caipAddress`, `isConnected`, and `status`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/composables.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAppKitAccount } from \"@reown/appkit/vue\";\n\nconst accountData = useAppKitAccount();\n```\n\n----------------------------------------\n\nTITLE: Initializing WalletKitClient Asynchronously in C#\nDESCRIPTION: This code illustrates initializing the WalletKitClient asynchronously with the Core instance and Metadata, associating it with the wallet name. This process prepares the wallet SDK for session handling, user interactions, and subsequent operations.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/usage.mdx#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvar sdk = await WalletKitClient.Init(core, metadata, metadata.Name);\n```\n\n----------------------------------------\n\nTITLE: Listening for Notification Messages with Client Event System in TypeScript\nDESCRIPTION: Registers an event listener for the 'notify_message' event using a client object. When a notification message is received, the callback function accesses the notification payload and logs its title to the console. Requires a configured client instance that emits events, particularly 'notify_message', with a payload containing a notification property. Input: event payload with a notification object. Output: logs the notification title. No output is returned by the handler.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/events/javascript.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclient.on('notify_message', ({ notification }) => {\n  console.log(notification.title)\n})\n```\n\n----------------------------------------\n\nTITLE: Signing Messages with Wagmi signMessage Action\nDESCRIPTION: Shows how to sign a message with the connected Ethereum account using Wagmi's signMessage action. This asynchronous function requires a wagmiConfig instance and a message parameter.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/wagmi/actions.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { signMessage } from \"@wagmi/core\";\nimport { wagmiConfig } from \"./main\";\n\nawait signMessage(wagmiConfig, { message: \"hello world\" });\n```\n\n----------------------------------------\n\nTITLE: Initializing Android CoreClient (Kotlin)\nDESCRIPTION: Initialize the WalletConnect CoreClient in the Android Application class. This requires a project ID obtained from Reown Cloud, connection type, application context, and optionally a custom Relay connection.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval projectId = \"\" //Get Project ID at https://cloud.reown.com/\nval connectionType = ConnectionType.AUTOMATIC or ConnectionType.MANUAL\nval application = //Android Application level class\n[Optional] val optionalRelay: RelayConnectionInterface? = /*implement interface*/\n\nCoreClient.initialize(projectId = projectId, connectionType = connectionType, application = application, relay = optionalRelay)\n```\n\n----------------------------------------\n\nTITLE: Using useAppKitWallet Hook for Direct Connection in TSX\nDESCRIPTION: Demonstrates how to use the `useAppKitWallet` hook in a TSX component. It shows destructuring `isReady`, `isPending`, and `connect`, configuring `onSuccess` and `onError` callbacks, and triggering a connection to a specific wallet (e.g., WalletConnect) via a button click.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/hooks.mdx#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nconst { isReady, isPending, connect } = useAppKitWallet({\n    onSuccess() {\n      // ...\n    },\n    onError(error) {\n      // ...\n    }\n  })\n\n...\n\n// Connect to a wallet\n<Button onClick={() => connect(\"walletConnect\")} />\n```\n\n----------------------------------------\n\nTITLE: Handling Web3Inbox Registration - React - TypeScript\nDESCRIPTION: This code demonstrates the updated process for handling user registration. It now follows the single responsibility principle by separating concerns into `usePrepareRegistration` and `useRegister` hooks. You first prepare the registration (getting the message and parameters), sign the message using a wallet function (`signMessageAsync`), and then call `register` with the signed signature and parameters.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/migration/react.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n- const handleRegistration = () => {\n-   register(signMessageAsync)\n- }\n+ const { prepareRegistration } = usePrepareRegistration();\n+ const { register, isLoading: isLoadingRegister } = useRegister();\n+ const handleRegistration = async () => {\n+   try {\n+     const { message, registerParams } = await prepareRegistration();\n+     const signature = await signMessageAsync({ message: message });\n+     await register({ registerParams, signature });\n+   } catch (registerIdentityError: any) {\n+     console.error(registerIdentityError)\n+   }\n+ };\n```\n\n----------------------------------------\n\nTITLE: Connecting and Disconnecting Wallets with WalletConnect Modal in React Native (TypeScript)\nDESCRIPTION: Provides a practical example of connecting and disconnecting using WalletConnect Modal with custom UI elements in a React Native app. This code displays a button that toggles connection state and initializes the WalletConnectModal component with project metadata. Dependencies include @walletconnect/modal-react-native, @walletconnect/react-native-compat, and React Native core components. The expected input is a button press; output is a connection or disconnection with UI feedback.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_41\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Pressable, Text } from \"react-native\";\nimport \"@walletconnect/react-native-compat\";\nimport {\n  WalletConnectModal,\n  useWalletConnectModal,\n} from \"@walletconnect/modal-react-native\";\n\nconst projectId = \"YOUR_PROJECT_ID\";\n\nconst providerMetadata = {\n  name: \"YOUR_PROJECT_NAME\",\n  description: \"YOUR_PROJECT_DESCRIPTION\",\n  url: \"https://your-project-website.com/\",\n  icons: [\"https://your-project-logo.com/\"],\n  redirect: {\n    native: \"YOUR_APP_SCHEME://\",\n    universal: \"YOUR_APP_UNIVERSAL_LINK.com\",\n  },\n};\n\nfunction App() {\n  const { open, isConnected, provider } = useWalletConnectModal();\n\n  const onPress = () => {\n    if (isConnected) {\n      provider.disconnect();\n    } else {\n      open();\n    }\n  };\n\n  return (\n    <>\n      <Pressable onPress={onPress}>\n        <Text>{isConnected ? \"Disconnect\" : \"Connect\"}</Text>\n      </Pressable>\n      <WalletConnectModal\n        projectId={projectId}\n        providerMetadata={providerMetadata}\n      />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting accountsChanged Event (JavaScript)\nDESCRIPTION: Calls `walletKit.emitSessionEvent` to signal to the connected dapp that the active accounts have changed. It requires the session `topic`, an event object named `accountsChanged` containing an array of new account addresses in `data`, and the `chainId` associated with the event.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/usage.mdx#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nawait walletKit.emitSessionEvent({\n  topic,\n  event: {\n    name: \"accountsChanged\",\n    data: [\"0xab16a96D359eC26a11e2C2b3d8f8B8942d5Bfcdb\"],\n  },\n  chainId: \"eip155:1\",\n});\n```\n\n----------------------------------------\n\nTITLE: Example of Building Unsigned Transaction Using Polkadot.js API in JavaScript\nDESCRIPTION: Illustrates the full process of importing necessary APIs, connecting to a Polkadot node, fetching latest block headers, constructing the method call, era, nonce, and finally assembling the unsigned transaction object with all required metadata. This snippet depends on '@polkadot/api' and assumes an existing 'keyring' and helper function for nonce retrieval.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/polkadot/dapp-integration-guide.mdx#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// import api and wsprovider\nimport { ApiPromise, WsProvider } from \"@polkadot/api\";\n\n//instantiate wsProvider and api\nconst wsProvider = new WsProvider(\"wss://rpc.polkadot.io\");\nconst api = await ApiPromise.create({ provider: wsProvider });\n\nconst lastHeader = await api.rpc.chain.getHeader();\nconst blockNumber = api.registry.createType(\n  \"BlockNumber\",\n  lastHeader.number.toNumber()\n);\nconst tx = api.tx.balances.transfer(keyring.bob.publicKey, 100);\n\nconst method = api.createType(\"Call\", tx);\nconst era = api.registry.createType(\"ExtrinsicEra\", {\n  current: lastHeader.number.toNumber(),\n  period: 64,\n});\n\nconst accountNonce = getBalanceAccount(submitAddress)?.nonce || 0;\nconst nonce = api.registry.createType(\"Compact<Index>\", accountNonce);\n\nconst unsignedTransaction = {\n  specVersion: api.runtimeVersion.specVersion.toHex(),\n  transactionVersion: api.runtimeVersion.transactionVersion.toHex(),\n  address: selectedWalletConnectAccountAddress,\n  blockHash: lastHeader.hash.toHex(),\n  blockNumber: blockNumber.toHex(),\n  era: era.toHex(),\n  genesisHash: api.genesisHash.toHex(),\n  method: method.toHex(),\n  nonce: nonce.toHex(),\n  signedExtensions: [\n    \"CheckNonZeroSender\",\n    \"CheckSpecVersion\",\n    \"CheckTxVersion\",\n    \"CheckGenesis\",\n    \"CheckMortality\",\n    \"CheckNonce\",\n    \"CheckWeight\",\n    \"ChargeTransactionPayment\",\n  ],\n  tip: api.registry.createType(\"Compact<Balance>\", 0).toHex(),\n  version: tx.version,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating and Sending an Increment Counter Transaction on Solana Using @solana/web3.js\nDESCRIPTION: This asynchronous function constructs and sends a transaction to initialize and increment a counter account on the Solana blockchain, utilizing the @solana/web3.js library. It includes steps to verify wallet balance, create an account, prepare transaction instructions, sign, and broadcast the transaction, then verify the account's updated state.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/solana/about/programs.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nasync function onIncrementCounter() {\n  const PROGRAM_ID = new PublicKey('Cb5aXEgXptKqHHWLifvXu5BeAuVLjojQ5ypq6CfQj1hy')\n\n  const counterKeypair = Keypair.generate()\n  const counter = counterKeypair.publicKey\n\n  const balance = await connection.getBalance(walletProvider.publicKey)\n  if (balance < LAMPORTS_PER_SOL / 100) {\n    throw Error('Not enough SOL in wallet')\n  }\n\n  const COUNTER_ACCOUNT_SIZE = 8\n  const allocIx: TransactionInstruction = SystemProgram.createAccount({\n    fromPubkey: walletProvider.publicKey,\n    newAccountPubkey: counter,\n    lamports: await connection.getMinimumBalanceForRentExemption(COUNTER_ACCOUNT_SIZE),\n    space: COUNTER_ACCOUNT_SIZE,\n    programId: PROGRAM_ID\n  })\n\n  const incrementIx: TransactionInstruction = new TransactionInstruction({\n    programId: PROGRAM_ID,\n    keys: [\n      {\n        pubkey: counter,\n        isSigner: false,\n        isWritable: true\n      }\n    ],\n    data: Buffer.from([0x0])\n  })\n\n  const tx = new Transaction().add(allocIx).add(incrementIx)\n\n  tx.feePayer = walletProvider.publicKey\n  tx.recentBlockhash = (await connection.getLatestBlockhash('confirmed')).blockhash\n\n  await walletProvider.signAndSendTransaction(tx, [counterKeypair])\n\n  const counterAccountInfo = await connection.getAccountInfo(counter, {\n    commitment: 'confirmed'\n  })\n\n  if (!counterAccountInfo) {\n    throw new Error('Expected counter account to have been created')\n  }\n\n  const counterAccount = deserializeCounterAccount(counterAccountInfo?.data)\n\n  if (counterAccount.count !== 1) {\n    throw new Error('Expected count to have been 1')\n  }\n\n  console.log(`[alloc+increment] count is: ${counterAccount.count}`);\n}\n```\n\n----------------------------------------\n\nTITLE: NextAuth API Route with JavaScript for Legacy Ethereum Authentication\nDESCRIPTION: This snippet demonstrates a legacy setup for NextAuth API route leveraging JavaScript and siwe package. It configures a credentials provider that verifies messages using SIWE, with environment variables for secret and project ID. The session callback extracts chainId and address from session tokens, ensuring proper session data handling. Dependencies include next-auth, siwe, and environment variables, providing backward compatibility.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/siwe.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { NextAuthOptions } from \"next-auth\";\nimport credentialsProvider from \"next-auth/providers/credentials\";\nimport { getCsrfToken } from \"next-auth/react\";\nimport NextAuth from \"next-auth/next\";\n\nimport type { SIWESession } from \"@reown/appkit-siwe\";\nimport { SiweMessage } from \"siwe\";\n\ndeclare module \"next-auth\" {\n  interface Session extends SIWESession {\n    address: string;\n    chainId: number;\n  }\n}\n\nconst nextAuthSecret = process.env.NEXTAUTH_SECRET;\nif (!nextAuthSecret) {\n  throw new Error(\"NEXTAUTH_SECRET is not set\");\n}\n\nconst projectId = process.env.NEXT_PUBLIC_PROJECT_ID;\nif (!projectId) {\n  throw new Error(\"NEXT_PUBLIC_PROJECT_ID is not set\");\n}\n\nconst authOptions: NextAuthOptions = {\n  secret: nextAuthSecret,\n  providers: [\n    credentialsProvider({\n      name: \"Ethereum\",\n      credentials: {\n        message: {\n          label: \"Message\",\n          type: \"text\",\n          placeholder: \"0x0\"\n        },\n        signature: {\n          label: \"Signature\",\n          type: \"text\",\n          placeholder: \"0x0\"\n        }\n      },\n      async authorize(credentials, req) {\n        try {\n          if (!credentials?.message) {\n            throw new Error(\"SiweMessage is undefined\");\n          }\n          const siwe = new SiweMessage(credentials.message);\n          const nonce = await getCsrfToken({ req: { headers: req.headers } });\n          const result = await siwe.verify({\n            signature: credentials?.signature || \"\",\n            nonce\n          });\n          if (result.success) {\n            return {\n              id: `eip155:${siwe.chainId}:${siwe.address}`\n            };\n          }\n\n          return null;\n        } catch (e) {\n          return null;\n        }\n      }\n    })\n  ],\n  session: {\n    strategy: \"jwt\"\n  },\n  callbacks: {\n    session({ session, token }) {\n      if (!token.sub) {\n        return session;\n      }\n\n      const [, chainId, address] = token.sub.split(\":\");\n      if (chainId && address) {\n        session.address = address;\n        session.chainId = parseInt(chainId, 10);\n      }\n\n      return session;\n    }\n  }\n}\n\nconst handler = NextAuth(authOptions);\nexport { handler as GET, handler as POST };\n\n```\n\n----------------------------------------\n\nTITLE: Integrating Custom AppKit Component in Next.js Root Layout (TSX)\nDESCRIPTION: This snippet illustrates how to import and use the previously defined AppKit component within the Next.js root layout file ('app/layout.tsx'). It imports global CSS styles, sets page metadata (title and description), and wraps the layout's body content with the AppKit component to ensure all child components have access to AppKit features. This setup requires the 'AppKit' component from the custom context and is intended for React environments using TypeScript (TSX).\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/ethers/about/implementation.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"./globals.css\";\n\nimport { AppKit } from \"../context/appkit\";\n\nexport const metadata = {\n  title: \"AppKit\",\n  description: \"AppKit Example\",\n};\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <AppKit>{children}</AppKit>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CAIP-2 Compliant Blockchain Chains Array in TypeScript\nDESCRIPTION: This TypeScript snippet defines an array named 'chains' containing blockchain identifiers compliant with the CAIP-2 standard. It lists chain IDs for Ethereum (eip155:1), Solana (solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp), Cosmos (cosmos:cosmoshub-4), and Polkadot (polkadot:91b171bb158e2d3848fa23a9f1c25182). The array is intended to be used within a modal component to specify supported blockchain networks. The CAIP-2 standard ensures interoperability and consistent referencing of chains. There are no external dependencies beyond standard TypeScript syntax.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/web3modal/v2/_partials/options/chains.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nchains: [\n  'eip155:1',\n  'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp',\n  'cosmos:cosmoshub-4',\n  'polkadot:91b171bb158e2d3848fa23a9f1c25182'\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Supported Blockchain Chains in AppKit for Unity\nDESCRIPTION: Configures AppKit with supported blockchain chains for the application. Supports both predefined chains from ChainConstants.Chains and custom Chain objects with specific parameters.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/options.mdx#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nawait AppKit.InitializeAsync(new AppKitConfig\n{\n    supportedChains = new[]\n    {\n        ChainConstants.Chains.Ethereum,\n        ChainConstants.Chains.Polygon,\n        ChainConstants.Chains.Ronin,\n\n        new Chain(ChainConstants.Namespaces.Evm,\n            chainReference: \"713715\",\n            name: \"Sei Devnet\",\n            nativeCurrency: new Currency(\"Sei\", \"SEI\", 18),\n            blockExplorer: new BlockExplorer(\"Seitrace\", \"https://seitrace.com\"),\n            rpcUrl: \"https://evm-rpc-arctic-1.sei-apis.com\",\n            isTestnet: true,\n            imageUrl: $\"https://imagedelivery.net/_aTEfDRm7z3tKgu9JhfeKA/692ed6ba-e569-459a-556a-776476829e00/md\"\n        )\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Using the <appkit-network-button /> Web Component in HTML\nDESCRIPTION: Defines the customizable properties for the `<appkit-network-button />` web component. The primary optional property is `disabled` (boolean), which allows enabling or disabling the button's functionality.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/components.mdx#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<appkit-network-button />\n```\n\n----------------------------------------\n\nTITLE: solana_getAccounts - Retrieve Wallet Accounts Using JSON-RPC\nDESCRIPTION: This method queries the wallet for an array of public keys available for signing. It requires no parameters and returns an array of account objects, each containing a public key string. The expected input is a JSON-RPC request object, and the output is a result object with accounts. Dependencies include the Solana JSON-RPC API and compatible client implementations.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/solana-rpc.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Request\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"solana_getAccounts\",\n  \"params\": {}\n}\n\n// Result\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": [{ \"pubkey\": \"722RdWmHC5TGXBjTejzNjbc8xEiduVDLqZvoUGz6Xzbp\" }]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing WalletConnect UniversalProvider in JavaScript\nDESCRIPTION: Initializes the WalletConnect UniversalProvider asynchronously with a specified 'projectId' and 'relayUrl'. This step sets up the WalletConnect client that manages session creation and communication with user wallets. It requires a valid project ID obtained from the WalletConnect project dashboard. The resulting provider instance enables the dapp to request wallet connections and transactions.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/polkadot/dapp-integration-guide.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst provider = await UniversalProvider.init({\n  projectId: \"2ea3f3ghubh32b8ie2f2\",\n  relayUrl: \"wss://relay.walletconnect.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring AppKit Solana Adapter and Modal in TypeScript\nDESCRIPTION: This code snippet showcases the initialization and configuration of AppKit Solana in a TypeScript application. It imports the necessary modules from the AppKit and AppKit Solana adapter packages, creates a SolanaAdapter instance, and specifies networks for mainnet, testnet, and devnet. The project ID and optional metadata object are provided, and the createAppKit function is called to display a modal for wallet connection. Dependencies include @reown/appkit and @reown/appkit-adapter-solana. Required inputs include a valid project ID and, optionally, application metadata. Outputs are the initialization of AppKit modal and Solana wallet connectivity, with analytics optionally enabled. The configuration should be placed at the app entry point to ensure wallet access across the app.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/solana/about/implementation.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createAppKit } from \"@reown/appkit\";\nimport { SolanaAdapter } from \"@reown/appkit-adapter-solana\";\nimport { solana, solanaTestnet, solanaDevnet } from \"@reown/appkit/networks\";\n\n// 0. Set up Solana Adapter\nconst solanaWeb3JsAdapter = new SolanaAdapter();\n\n// 1. Get projectId from https://cloud.reown.com\nconst projectId = \"YOUR_PROJECT_ID\";\n\n// 2. Create a metadata object - optional\nconst metadata = {\n  name: \"AppKit\",\n  description: \"AppKit Solana Example\",\n  url: \"https://example.com\", // origin must match your domain & subdomain\n  icons: [\"https://avatars.githubusercontent.com/u/179229932\"],\n};\n\n// 3. Create modal\ncreateAppKit({\n  adapters: [solanaWeb3JsAdapter],\n  networks: [solana, solanaTestnet, solanaDevnet],\n  metadata: metadata,\n  projectId,\n  features: {\n    analytics: true, // Optional - defaults to your Cloud configuration\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring AndroidManifest for App Link Validation\nDESCRIPTION: Defines the intent-filter in the Android manifest to allow the app to verify and handle specific https scheme links automatically. Sets 'autoVerify' to true to enable verification with the specified host.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/link-mode.mdx#_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<intent-filter android:autoVerify=\"true\">\n    <action android:name=\"android.intent.action.VIEW\" />\n    <category android:name=\"android.intent.category.DEFAULT\" />\n    <category android:name=\"android.intent.category.BROWSABLE\" />\n\n    <data\n        android:host=\"your_host\"\n        android:scheme=\"https\" />\n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Subscribing to AppKit Connection State Changes in JavaScript\nDESCRIPTION: Listens for changes in the Reown AppKit connection state using `modal.subscribeProvider(callback)`. The callback function receives an object containing updated state properties like `address`, `chainId`, `isConnected`, `provider`, and `providerType`, reflecting the current wallet connection status and details.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-solana-web.mdx#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodal.subscribeProvider(callback)\n```\n\n----------------------------------------\n\nTITLE: Handling Wallet Disconnection with useDisconnect (React)\nDESCRIPTION: This hook provides the functionality to disconnect the user's connected wallet session. Use it to implement logout features or clean up resources when a user chooses to disconnect. Required dependency: `@reown/appkit/react`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/hooks.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useDisconnect } from \"@reown/appkit/react\";\n\nconst { disconnect } = useDisconnect();\n\nawait disconnect();\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Wallet Schemes in app.json (Expo)\nDESCRIPTION: Configures the `app.json` or `app.config.js` file for Expo projects to enable wallet detection on iOS. Adds the `LSApplicationQueriesSchemes` array under `expo.ios.infoPlist` with common wallet schemes, allowing AppKit to detect installed wallets.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/installation.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"expo\": {\n    \"ios\": {\n      \"infoPlist\": {\n        \"LSApplicationQueriesSchemes\": [\n          \"metamask\",\n          \"trust\",\n          \"safe\",\n          \"rainbow\",\n          \"uniswap\"\n          // Add other wallet schemes names here\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with Wagmi adapter using Bash\nDESCRIPTION: Provides installation commands for adding the Reown AppKit and Wagmi adapter packages along with required dependencies using various package managers (npm, Yarn, Bun, pnpm). These commands are intended to set up the Wagmi adapter environment for React projects. Prerequisites include having Node.js and the package manager of choice installed.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/installation.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit @reown/appkit-adapter-wagmi wagmi viem @tanstack/react-query\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit @reown/appkit-adapter-wagmi wagmi viem @tanstack/react-query\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @reown/appkit @reown/appkit-adapter-wagmi wagmi viem @tanstack/react-query\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit @reown/appkit-adapter-wagmi wagmi viem @tanstack/react-query\n```\n\n----------------------------------------\n\nTITLE: Accessing Account Data using Wagmi (TSX)\nDESCRIPTION: This snippet demonstrates how to retrieve the current connected account's data and connection status using the `getAccount` action from `@wagmi/core`. It imports the necessary function and calls it to get the account object. The returned object includes details like the account address and connection status.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/wagmi/composables.mdx#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { getAccount } from \"@wagmi/core\";\n\nconst account = getAccount();\n```\n\n----------------------------------------\n\nTITLE: Initializing AppKit in Next.js App Component using TypeScript\nDESCRIPTION: Creates an instance of AppKit modal using the createAppKit API. This snippet initializes a React QueryClient, sets optional metadata describing the app, and passes configuration details such as adapters (wagmiAdapter), project ID, supported networks, and optional features like analytics. This initialization is required to replace RainbowKit's providers and enable AppKit functionality throughout the app.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-rainbowkit-next.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst client = new QueryClient()\n\n// Set up metadata\nconst metadata = {\n  //this is optional\n  name: 'appkit-example',\n  description: 'AppKit Example',\n  url: 'https://exampleapp.com', // origin must match your domain & subdomain\n  icons: ['https://avatars.githubusercontent.com/u/37784886']\n}\n\n// Create modal\nconst modal = createAppKit({\n  adapters: [wagmiAdapter],\n  projectId,\n  networks: [mainnet, arbitrum],\n  metadata: metadata,\n  features: {\n    analytics: true // Optional - defaults to your Cloud configuration\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Subscription Data Type - TypeScript\nDESCRIPTION: This TypeScript snippet defines the structure of the `subscription` object returned by the `useSubscription` hook. It details the properties included in a subscription record, such as the `topic`, `account`, `relay` information, `metadata`, `scope`, `expiry`, `symkey`, and `unreadCount`. This type definition is crucial for understanding the data format when retrieving subscription information. It depends on external types like `relayertypes.protocoloptions`, `Metadata`, and `ScopeMap`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/managing-subscription/react.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  topic: string\n  account: string\n  relay: relayertypes.protocoloptions\n  metadata: Metadata\n  scope: ScopeMap\n  expiry: number\n  symkey: string\n  unreadCount: number\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Theme Variables in AppKit using TypeScript\nDESCRIPTION: This snippet shows how to define custom theme variables within the createAppKit configuration, specifically setting color related variables. It illustrates setting CSS custom properties such as '--w3m-color-mix' and '--w3m-color-mix-strength' to customize visual aspects of the theme. These variables enable detailed control over the app’s appearance, requiring the createAppKit function for initialization.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/theming.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateAppKit({\n  //...\n  themeVariables: {\n    \"--w3m-color-mix\": \"#00BB7F\",\n    \"--w3m-color-mix-strength\": 40,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring networks option for createAppKit in TypeScript\nDESCRIPTION: Demonstrates how to supply the networks array to the createAppKit function, choosing from EVM and Solana networks imported from the @reown/appkit/networks library. It highlights extensibility by referencing documentation for adding custom networks. The networks parameter expects an array of predefined or custom network objects representing blockchain networks.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { mainnet, solana } from \"@reown/appkit/networks\";\n\ncreateAppKit({\n  // ...\n  networks: [mainnet, solana],\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Current Gas Price via EVM in C#\nDESCRIPTION: Shows how to asynchronously retrieve the current network gas price (in wei) using `AppKit.EVM.GetGasPriceAsync()` in C#. Returns the gas price as a `BigInteger`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/actions.mdx#_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nBigInteger gasPrice = await AppKit.EVM.GetGasPriceAsync();\n```\n\n----------------------------------------\n\nTITLE: Initializing AppKit with SIWE Configuration in TypeScript\nDESCRIPTION: Code snippet demonstrating how to initialize AppKit with SIWE configuration by passing the siweConfig object to the createAppKit function. This enables SIWE authentication in the application.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/siwe.mdx#_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\n// Pass your siweConfig inside the createAppKit() function\nconst modal = createAppKit({\n  adapters: [wagmiAdapter], //or your Ethers adapter\n  projectId,\n  networks: [mainnet, arbitrum],\n  defaultNetwork: mainnet,\n  features: {\n    analytics: true, // Optional - defaults to your Cloud configuration\n  },\n  siweConfig: siweConfig, // pass your siweConfig\n});\n```\n\n----------------------------------------\n\nTITLE: Pairing with WalletConnect iOS SDK using URI\nDESCRIPTION: Allows pairing a wallet with a dapp by parsing a scanned QR code string into a `WalletConnectURI` and calling `pair()` asynchronously. Establishes a secure communication channel for subsequent interactions.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#_snippet_14\n\nLANGUAGE: Swift\nCODE:\n```\nlet uri = WalletConnectURI(string: <String>)\ntry! await Pair.instance.pair(uri: uri)\n```\n\n----------------------------------------\n\nTITLE: Sending Transactions with Wagmi useSendTransaction Hook in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the Wagmi library's useSendTransaction hook in a React component written in TypeScript (TSX) to send a blockchain transaction. It addresses gas estimation issues by explicitly passing gas: null in the sendTransaction call, allowing the wallet to handle gas estimation internally. The example imports useSendTransaction from Wagmi and parseEther from viem to specify the transaction value. The input includes recipient address and value in ether, and the output is the triggering of a blockchain transaction upon button click. The snippet requires Wagmi 2.13.0 or later and assumes the wallet supports chain abstraction features.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/chain-abstraction.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSendTransaction } from \"wagmi\";\nimport { parseEther } from \"viem\";\n\nfunction App() {\n  const { sendTransaction } = useSendTransaction();\n\n  return (\n    <button\n      onClick={() =>\n        sendTransaction({\n          to: \"0xd2135CfB216b74109775236E36d4b433F1DF507B\",\n          value: parseEther(\"0.01\"),\n          gas: null, // <- Add this\n        })\n      }\n    >\n      Send transaction\n    </button>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring AppKit for JavaScript applications\nDESCRIPTION: Initialize AppKit with the Wagmi adapter for vanilla JavaScript. This configuration enables wallet connection functionality without a specific framework.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_24\n\nLANGUAGE: ts\nCODE:\n```\n// Remove the following code lines\n- const modal = createWeb3Modal({\n  wagmiConfig,\n  projectId,\n  chains\n})\n\n// Add the following code lines\n+ const modal = createAppKit({\n  adapters: [wagmiAdapter],\n  networks: [mainnet, arbitrum],\n  metadata: metadata,\n  projectId,\n  features: {\n    analytics: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Web3Inbox Client and Setting Account - TypeScript\nDESCRIPTION: Initializes the Web3Inbox client asynchronously with a project ID and then sets the current user's account. The account is specified using a CAIP-10 compliant string.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/usage/example/javascript.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = await Web3InboxClient.init({ projectId: '...' })\n\nconst account = 'eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029'\n\n// Set the account to a CAIP-10 account ID\nawait client.setAccount(account)\n```\n\n----------------------------------------\n\nTITLE: Installing AppKit SIWE Package with Bun\nDESCRIPTION: Command for installing the One-Click Auth dependencies including the AppKit SIWE package, the SIWE library, and viem using Bun package manager.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/siwe.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbun a @reown/appkit-siwe siwe viem\n```\n\n----------------------------------------\n\nTITLE: Example Initialization of Ethereum Provider in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize the Ethereum Provider by calling its async `init` method with necessary parameters such as project ID, metadata, optional chains, and RPC map. It highlights parameter importance, dependencies, and configuration options for multi-chain support and WalletConnect integration.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/providers/ethereum.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { EthereumProvider } from \"@walletconnect/ethereum-provider\";\n\nconst provider = await EthereumProvider.init({\n  projectId: \"YOUR_PROJECT_ID\",\n  metadata: {\n    name: \"My Website\",\n    description: \"My Website Description\",\n    url: \"https://mywebsite.com\",\n    icons: [\"https://avatars.githubusercontent.com/u/37784886\"],\n  },\n  showQrModal: true,\n  optionalChains: [1, 137, 2020],\n  rpcMap: {\n    1: \"mainnet.rpc...\",\n    137: \"polygon.rpc...\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Transaction eth_sendTransaction JSON\nDESCRIPTION: Demonstrates a JSON-RPC request for the `eth_sendTransaction` method. This method sends a new message call transaction or creates a contract on the Ethereum network. The request includes the standard JSON-RPC fields and uses a transaction object as the parameter. The expected result is the transaction hash (DATA, 32 Bytes) if the transaction is successfully broadcast.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/ethereum-rpc.mdx#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n// Request\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"eth_sendTransaction\",\n  \"params\":[{see above}],\n}\n\n// Result\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": \"0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Wagmi Connectors for Ethereum in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up custom wallet connectors (WalletConnect, Coinbase, Injected) for an Ethereum application using Wagmi and integrate them with Reown's AppKit. Dependencies include @reown/appkit/react, @reown/appkit-adapter-wagmi, wagmi, and @tanstack/react-query. Key parameters include projectId (environment variable), wallet metadata, and a list of networks (default: sepolia). The ContextProvider wraps the application in Wagmi and QueryClient providers. Each connector can be selectively included, and WalletConnect's showQrModal must be set to false. Inputs are configuration and child components; output is an initialized multi-wallet context for React apps.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/custom-connectors.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createAppKit } from '@reown/appkit/react'\nimport { WagmiAdapter } from '@reown/appkit-adapter-wagmi'\n\nimport { http, WagmiProvider, CreateConnectorFn } from 'wagmi'\nimport { sepolia } from '@reown/appkit/networks'\nimport { walletConnect, coinbaseWallet, injected } from 'wagmi/connectors'\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\n\nconst queryClient = new QueryClient()\n\nexport const projectId = process.env.NEXT_PUBLIC_PROJECT_ID\n\nconst metadata = {\n  //...\n}\n\n// create the connectors (delete the ones you don't need)\nconst connectors: CreateConnectorFn[] = []\nconnectors.push(walletConnect({ projectId, metadata, showQrModal: false })) // showQrModal must be false\nconnectors.push(injected({ shimDisconnect: true }))\nconnectors.push(\n  coinbaseWallet({\n    appName: metadata.name,\n    appLogoUrl: metadata.icons[0]\n  })\n)\n\nexport const networks = [sepolia]\n\nexport const wagmiAdapter = new WagmiAdapter({\n  storage:\n  transports: {\n    [sepolia.id]: http()\n  },\n  connectors,\n  projectId,\n  networks\n})\n\nexport const config = wagmiAdapter.wagmiConfig\n\ncreateAppKit({\n  adapters: [wagmiAdapter],\n  projectId,\n  networks: [sepolia]\n})\n\nexport function ContextProvider({ children }) {\n  return (\n    <WagmiProvider config={config}>\n      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>\n    </WagmiProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Calling Reown AppKit Write Contract Function (Dart) - Transfer\nDESCRIPTION: Demonstrates using `requestWriteContract` to perform a token transfer by calling the `transfer` function on an ERC-20 contract. It shows how to format the transfer amount based on decimals, create a `Transaction` object with the sender's address, and pass the recipient address and formatted value as contract function parameters.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/actions.mdx#_snippet_11\n\nLANGUAGE: Dart\nCODE:\n```\nfinal decimalUnits = (decimals.first as BigInt); // decimals value from `decimals` contract function\nfinal transferValue = _formatValue(0.23, decimals: decimalUnits); // your format value function\n\n// Transfer USDT\nFuture<void> transferToken() async {\n  final chainId = _appKitModal.selectedChain!.chainId;\n  final namespace = ReownAppKitModalNetworks.getNamespaceForChainId(chainId);\n\n  // Transfer 0.01 amount of Token using Smart Contract's transfer function\n  final result = await _appKitModal.requestWriteContract(\n    topic: _appKitModal.session!.topic,\n    chainId: chainId,\n    deployedContract: deployedContract,\n    functionName: 'transfer',\n    transaction: Transaction(\n      from: EthereumAddress.fromHex(_appKitModal.session!.getAddress(namespace)), // sender address\n    ),\n    parameters: [\n      EthereumAddress.fromHex('0x59e2f66C0E96803206B6486cDb39029abAE834c0'), // recipient address\n      transferValue, // == 0.23 USDT\n    ],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with Ethers v5 using pnpm\nDESCRIPTION: Command for custom installation of Reown AppKit with Ethers v5 adapter using pnpm package manager. Installs required dependencies including ethers v5.7.2.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/installation.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit @reown/appkit-adapter-ethers5 ethers@5.7.2\n```\n\n----------------------------------------\n\nTITLE: Configuring AppKit Modal with SignClient - JavaScript\nDESCRIPTION: Initializes SignClient, imports necessary modules from @reown/appkit, and configures AppKit's modal for WalletConnect connections. This setup requires the @walletconnect/sign-client and @reown/appkit libraries. The snippet demonstrates how to replace legacy WalletConnect Modal usage with AppKit's modal, feeding the connection URI and managing session approval. Key parameters include projectId, network definitions, and WalletConnect methods/events. Inputs are your project credentials and desired blockchain networks; outputs are the initialized modal and connected session objects. This approach is chain agnostic and supports advanced manual control.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/wcm.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SignClient } from '@walletconnect/sign-client'\n\n// Remove the code line below\nimport { WalletConnectModal } from '@walletconnect/modal'\n\n// Add the code lines below\nimport { mainnet } from '@reown/appkit/networks'\nimport { createAppKit } from '@reown/appkit/core'\n\nconst signClient = await SignClient.init({\n  projectId: 'YOUR_PROJECT_ID',\n  metadata: {\n    name: 'My Website',\n    description: 'My Website Description',\n    url: 'https://mywebsite.com', // origin must match your domain & subdomain\n    icons: ['https://avatars.githubusercontent.com/u/37784886']\n  },\n})\n\n// Remove the code lines below\nconst modal = new WalletConnectModal({\n  projectId: 'YOUR_PROJECT_ID',\n  chains: ['eip155:1']\n})\n\n// Add the code lines below\nconst modal = createAppKit({\n  projectId: 'YOUR_PROJECT_ID',\n  networks: [mainnet],\n  manualWCControl: true\n})\n\n// connect signClient and feed uri to modal\nconst { uri, approval } = await signClient.connect({\n    requiredNamespaces: {\n      eip155: {\n        methods: [\n          'eth_sendTransaction',\n          'eth_signTransaction',\n          'eth_sign',\n          'personal_sign',\n          'eth_signTypedData'\n        ],\n        chains: ['eip155:1'],\n        events: ['chainChanged', 'accountsChanged']\n      }\n    }\n  })\n\n  if (uri) {\n    modal.openModal({ uri })\n    const session = await approval()\n    modal.closeModal()\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding AccountButton in Jetpack Compose with Kotlin\nDESCRIPTION: Shows how to integrate AccountButton in a Compose UI screen using Kotlin. It requires imports from the AppKit buttons package and a NavController to create the appKitState. The component accepts a buttonSize parameter that corresponds to AccountButtonType enum with values NORMAL or MIXED. This button visually represents user account state and triggers related UI actions in a Compose context.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/components.mdx#_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.reown.appkit.ui.components.button.AccountButton\nimport com.reown.appkit.ui.components.button.AccountButtonType\nimport com.reown.appkit.ui.components.button.rememberAppKitState\n\nYourAppScreen(navController: NavController) {\n    val appKitState = rememberAppKitState(navController = navController)\n    AccountButton(\n        state = appKitState,\n        buttonSize = AccountButtonType.NORMAL || AccountButtonType.MIXED\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating AppKit in Next.js Layout Component\nDESCRIPTION: Sets up the Next.js root layout to use the AppKit component as a wrapper around all child components. This ensures that the AppKit context is available throughout the application hierarchy.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/ethers5/implementation.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"./globals.css\";\n\nimport { AppKit } from \"../context/appkit\";\n\nexport const metadata = {\n  title: \"AppKit\",\n  description: \"AppKit Example\",\n};\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <AppKit>{children}</AppKit>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tenderly Virtual TestNet Chain Configuration in TypeScript\nDESCRIPTION: Defines a custom chain object for Tenderly Virtual TestNet using `defineChain` from Reown AppKit in `app/tenderly.config.ts`. This configuration includes the chain ID (must match Tenderly setup), network ID, name, native currency details, RPC endpoint (from environment variable `TENDERLY_VIRTUAL_TESTNET_RPC`), block explorer URL (specific to the user's Tenderly VNet), and addresses for standard contracts like ENS and multicall3. This object is exported for use in other parts of the application.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/tenderly-virtual-testnets.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { defineChain } from \"@reown/appkit/networks\";\n\nexport const vTestnet = defineChain({\n  id: 73571, // Add this to match the chain Id you set for your Virtual TestNet\n  caipNetworkId: \"eip155:73571\",\n  chainNamespace: \"eip155\",\n  name: \"Virtual Sepolia\",\n  nativeCurrency: { name: \"vSepolia\", symbol: \"vETH\", decimals: 18 },\n  rpcUrls: {\n    default: {\n      http: [process.env.TENDERLY_VIRTUAL_TESTNET_RPC!],\n    },\n  },\n  blockExplorers: {\n    default: {\n      name: \"Tenderly Explorer\",\n      url: \"https://dashboard.tenderly.co/explorer/vnet/6a6910ba-5831-4758-9d89-1f8e3169433f\", // replace this with your your Virtual TestNet's explorer URL\n    },\n  },\n  contracts: {\n    ensRegistry: {\n      address: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    },\n    ensUniversalResolver: {\n      address: \"0xE4Acdd618deED4e6d2f03b9bf62dc6118FC9A4da\",\n      blockCreated: 16773775,\n    },\n    multicall3: {\n      address: \"0xca11bde05977b3631167028862be2a173976ca11\",\n      blockCreated: 14353601,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Preconfigured Nethereum Web3 Instance in C#\nDESCRIPTION: Shows how to access the underlying Nethereum `Web3` instance provided by AppKit when running on native platforms. This instance is preconfigured with the active chain's RPC URL and includes a request interceptor for wallet interactions. It is obtained by casting `AppKit.Evm` to `NethereumEvmService`. Avoid caching this instance as it might change if the user switches networks.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/usage.mdx#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar nethereumService = AppKit.Evm as NethereumEvmService;\nvar web3 = nethereumService.Web3;\n```\n\n----------------------------------------\n\nTITLE: Approving Authentication Requests in Swift\nDESCRIPTION: This code demonstrates how to approve an authentication request by calling the approveSessionAuthenticate method with the request ID and authentication objects. It returns a session object when successful.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/one-click-auth.mdx#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet session = try await WalletKit.instance.approveSessionAuthenticate(requestId: requestId, auths: authObjects)\n```\n\n----------------------------------------\n\nTITLE: Integrating Context Provider and Hydrating State in Next.js Layout TSX\nDESCRIPTION: Shows how to use the custom `ContextProvider` in the root Next.js `app/layout.tsx` server component. It demonstrates fetching the incoming request headers using `next/headers` and extracting the `cookie` string to pass to the `ContextProvider`. This allows for server-side hydration of the Wagmi state before the client application loads.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/wagmi/about/implementation.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Metadata } from 'next'\nimport { Inter } from 'next/font/google'\nimport './globals.css'\n\nconst inter = Inter({ subsets: ['latin'] })\n\nimport { headers } from 'next/headers' // added\nimport ContextProvider from '@/context'\n\nexport const metadata: Metadata = {\n  title: 'AppKit Example App',\n  description: 'Powered by Reown'\n}\n\nexport default function RootLayout({\n  children\n}: Readonly<{\n  children: React.ReactNode\n}>) {\n\n  const headersObj = await headers();\n  const cookies = headersObj.get('cookie')\n\n  return (\n    <html lang=\"en\">\n      <body className={inter.className}>\n        <ContextProvider cookies={cookies}>{children}</ContextProvider>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AppKit Context Provider in React TSX\nDESCRIPTION: Defines a React component (`ContextProvider`) that initializes Reown AppKit and provides necessary contexts (`WagmiProvider`, `QueryClientProvider`) to the application. It uses the previously configured `wagmiAdapter`, hydrates the Wagmi state from request cookies for SSR using `cookieToInitialState`, and requires `projectId` and metadata for AppKit initialization. This component should be used in a client component file (e.g., `context/index.tsx`).\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/wagmi/about/implementation.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { wagmiAdapter, projectId } from '@/config'\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { createAppKit } from '@reown/appkit/react'\nimport { mainnet, arbitrum } from '@reown/appkit/networks'\nimport React, { type ReactNode } from 'react'\nimport { cookieToInitialState, WagmiProvider, type Config } from 'wagmi'\n\n// Set up queryClient\nconst queryClient = new QueryClient()\n\nif (!projectId) {\n  throw new Error('Project ID is not defined')\n}\n\n// Set up metadata\nconst metadata = {\n  name: 'appkit-example',\n  description: 'AppKit Example',\n  url: 'https://appkitexampleapp.com', // origin must match your domain & subdomain\n  icons: ['https://avatars.githubusercontent.com/u/179229932']\n}\n\n// Create the modal\nconst modal = createAppKit({\n  adapters: [wagmiAdapter],\n  projectId,\n  networks: [mainnet, arbitrum],\n  defaultNetwork: mainnet,\n  metadata: metadata,\n  features: {\n    analytics: true // Optional - defaults to your Cloud configuration\n  }\n})\n\nfunction ContextProvider({ children, cookies }: { children: ReactNode; cookies: string | null }) {\n  const initialState = cookieToInitialState(wagmiAdapter.wagmiConfig as Config, cookies)\n\n  return (\n    <WagmiProvider config={wagmiAdapter.wagmiConfig as Config} initialState={initialState}>\n      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>\n    </WagmiProvider>\n  )\n}\n\nexport default ContextProvider\n```\n\n----------------------------------------\n\nTITLE: Approving Session from Wallet using WalletKit (JavaScript)\nDESCRIPTION: Example code showing how a wallet approves a WalletConnect session request using the WalletKit. It calls `walletKit.approveSession`, passing the proposal ID and the approved `namespaces`, which include the specific accounts, methods, chains, and events the wallet grants access to for the session.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/polkadot/namespaces-guide.mdx#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst session = await walletKit.approveSession({\n  id: proposal.id,\n  namespaces: {\n    polkadot: {\n      accounts: [\n        \"polkadot:91b171bb158e2d3848fa23a9f1c25182:AZBEwbZhYeiofodZnM2iAoshP3pXRPNSJEKFqEPDmvv1mY7\",\n      ],\n      methods: [\"polkadot_signTransaction\", \"polkadot_signMessage\"],\n      chains: [\"polkadot:91b171bb158e2d3848fa23a9f1c25182\"],\n      events: [\"chainChanged\", \"accountsChanged\"],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Notification API in React\nDESCRIPTION: This React component snippet initializes the notification API, setting up necessary configurations and state for subsequent notification management. It depends on imported initialization logic and is essential for enabling notifications within the app.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/notifications/frontend-integration/api.mdx#_snippet_0\n\nLANGUAGE: MDX\nCODE:\n```\n<Initialization />\n```\n\n----------------------------------------\n\nTITLE: Triggering Reown AppKit Modal in JavaScript\nDESCRIPTION: Provides an example for manually triggering the Reown AppKit modal using plain JavaScript. It attaches a click event listener to a button with id 'my-button' that calls modal.open() to display the modal. Intended for projects not using frameworks, requiring a modal object in scope. Demonstrates basic user-trigger interaction to open the wallet connection modal.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\ndocument.getElementById('my-button').addEventListener('click', () => {\n    modal.open()\n})\n\n<button id=\"my-button\">Connect Wallet</button>\n```\n\n----------------------------------------\n\nTITLE: Updating Hook Imports for AppKit in Ethers - TypeScript\nDESCRIPTION: This snippet replaces the full set of Ethers hooks imported from @web3modal/ethers-react-native with equivalent hooks from @reown/appkit-ethers-react-native, including useAppKit, state, events, account, provider, error, and wallet info. Keeping the hook signatures the same, this change ensures migration without affecting the data flow or the expected outputs for wallet management.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-react-native.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following code lines\nimport {\n  useWeb3Modal,\n  useWeb3ModalState,\n  useWeb3ModalEvents,\n  useWeb3ModalAccount,\n  useWeb3ModalProvider,\n  useWeb3ModalError,\n  useWalletInfo,\n} from \"@web3modal/ethers-react-native\";\n\n// Add the following code lines\nimport {\n  useAppKit,\n  useAppKitState,\n  useAppKitEvents,\n  useAppKitAccount,\n  useAppKitProvider,\n  useAppKitError,\n  useWalletInfo,\n} from \"@reown/appkit-ethers-react-native\";\n```\n\n----------------------------------------\n\nTITLE: Updating Session Namespaces in JavaScript\nDESCRIPTION: Demonstrates how to update a WalletConnect session by modifying the namespaces, which define which chains and methods are supported.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/usage.mdx#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nawait walletKit.updateSession({ topic, namespaces: newNs });\n```\n\n----------------------------------------\n\nTITLE: Button to trigger message signing in React\nDESCRIPTION: Displays a React button that, when clicked, invokes the message signing function to prompt the user to sign a message via their wallet, with the resulting signature logged in the console.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/ethers-send-transaction.mdx#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nreturn (\n  isConnected && (\n    <div>\n      <button onClick={handleSignMsg}>Sign Message</button>\n    </div>\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Pairing Expiry Events (TypeScript/Web)\nDESCRIPTION: Subscribes to the 'pairing_expire' event from the core pairing module in a web environment. This allows the wallet to detect when an inactive pairing expires (typically after 5 minutes) and update the UI accordingly.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ncore.pairing.events.on(\"pairing_expire\", (event) => {\n    // pairing expired before user approved/rejected a session proposal\n    const { topic } = topic;\n});\n```\n\n----------------------------------------\n\nTITLE: Presenting Default AppKit UI Modal in Swift\nDESCRIPTION: Calls the `present()` method on the AppKit instance to display the library's built-in UI modal. This method automatically traverses the view hierarchy to find a suitable view controller to present from, primarily intended for SwiftUI environments.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/usage.mdx#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nAppKit.present()\n```\n\n----------------------------------------\n\nTITLE: Smart Contract Interaction with Wagmi in React\nDESCRIPTION: Example code demonstrating how to interact with ERC-20 smart contracts using Wagmi hooks in a React component. Shows how to read the total supply of a token using useReadContract hook.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/installation.mdx#_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useReadContract } from \"wagmi\";\nimport { USDTAbi } from \"../abi/USDTAbi\";\n\nconst USDTAddress = \"0x...\";\n\nfunction App() {\n  const result = useReadContract({\n    abi: USDTAbi,\n    address: USDTAddress,\n    functionName: \"totalSupply\",\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Responding to a WalletConnect JSON-RPC Request in Kotlin\nDESCRIPTION: Sends a successful response to a JSON-RPC request received from a Dapp during a session. Requires the session topic and a `Sign.Model.JsonRpcResponse.JsonRpcResult` object containing the request ID and result data. The `SignClient.respond` function is used, including an error callback.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_31\n\nLANGUAGE: kotlin\nCODE:\n```\nval sessionTopic: String = /*Topic of Session*/\nval jsonRpcResponse: Sign.Model.JsonRpcResponse.JsonRpcResult = /*Settled Session Request ID along with request data*/\nval result = Sign.Params.Response(sessionTopic = sessionTopic, jsonRpcResponse = jsonRpcResponse)\n\nSignClient.respond(result) { error -> /*callback for error while responding session request*/ }\n```\n\n----------------------------------------\n\nTITLE: Registering Device Token with WalletKit\nDESCRIPTION: Code to register a device token with WalletKit's push notification system. This step connects the device to WalletConnect's Push Server, enabling it to receive notifications for session requests.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/push.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nwalletKit.registerDeviceToken({\n  token: await messaging().getToken(), // device token\n  clientId: await walletKit.core.crypto.getClientId(), //your instance clientId\n  notificationType: 'fcm', // notification type\n  enableEncrypted: true // flag that enabled detailed notifications\n})\n```\n\n----------------------------------------\n\nTITLE: Handling WalletConnect Authentication Requests\nDESCRIPTION: How to handle authentication requests in a wallet, including subscribing to events and processing the authentication request.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nwalletKit.on(\"session_authenticate\", async (payload) => {\n  // Process the authentication request here.\n  // Steps include:\n  // 1. Populate the authentication payload with the supported chains and methods\n  // 2. Format the authentication message using the payload and the user's account\n  // 3. Present the authentication message to the user\n  // 4. Sign the authentication message(s) to create a verifiable authentication object(s)\n  // 5. Approve the authentication request with the authentication object(s)\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring AppKit with Custom Wagmi Connectors - TypeScript\nDESCRIPTION: This snippet demonstrates how to configure the reown/appkit library using the WagmiAdapter to enable custom Wagmi connectors. It shows importing necessary modules, defining networks, creating instances of specific connectors like WalletConnect, Injected, and Coinbase Wallet, and then initializing the WagmiAdapter and AppKit with these configurations. Requires `@reown/appkit/vue`, `@reown/appkit-adapter-wagmi`, `wagmi`, and individual connector packages.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/custom-connectors.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { createAppKit } from '@reown/appkit/vue'\nimport { WagmiAdapter } from '@reown/appkit-adapter-wagmi'\n\nimport { http, WagmiProvider, CreateConnectorFn } from 'wagmi'\nimport { sepolia } from '@reown/appkit/networks'\nimport { walletConnect, coinbaseWallet, injected } from 'wagmi/connectors'\n\nconst projectId = 'YOUR_PROJECT_ID'\n\nconst metadata = {\n  //....\n}\n\n// create the connectors (delete the ones you don't need)\nconst connectors: CreateConnectorFn[] = []\nconnectors.push(walletConnect({ projectId, metadata, showQrModal: false })) // showQrModal must be false\nconnectors.push(injected({ shimDisconnect: true }))\nconnectors.push(\n  coinbaseWallet({\n    appName: metadata.name,\n    appLogoUrl: metadata.icons[0]\n  })\n)\n\nconst export networks = [sepolia]\n\nexport const wagmiAdapter = new WagmiAdapter({\n  transports: {\n    [sepolia.id]: http()\n  },\n  connectors,\n  projectId,\n  networks\n})\n\nexport const config = wagmiAdapter.wagmiConfig\n\ncreateAppKit({\n  adapters: [wagmiAdapter],\n  projectId,\n  networks: [sepolia]\n})\n```\n\n----------------------------------------\n\nTITLE: Sending JSON-RPC Requests with Universal Provider (TypeScript)\nDESCRIPTION: Explains how to send JSON-RPC requests using the `provider.request` method. It defines the required `RequestArguments` interface (containing `method` and optional `params`) and shows how to optionally specify the target chain for the request in the format `<namespace>:<chainId>`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/providers/universal.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RequestArguments {\n  method: string;\n  params?: any[] | undefined;\n}\n\n// Send JSON RPC requests\n\n/**\n * @param payload\n * @param chain - optionally specify which chain should handle this request\n * in the format `<namespace>:<chainId>` e.g. `eip155:1`\n */\nconst result = await provider.request(payload: RequestArguments, chain: string | undefined);\n```\n\n----------------------------------------\n\nTITLE: Setting Default Chain with Ethers - TypeScript\nDESCRIPTION: Illustrates how to set the `defaultChain` option by providing a manually defined chain object containing necessary properties like chain ID, name, currency, and RPC URL, compatible with the Ethers library.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/options.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nconst mainnet = {\n  chainId: 1,\n  name: 'Ethereum',\n  currency: 'ETH',\n  explorerUrl: 'https://etherscan.io',\n  rpcUrl: 'https://cloudflare-eth.com',\n};\n\ncreateAppKit({\n  //...\n  defaultChain: mainnet\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chain ID from SIWE Message in TypeScript\nDESCRIPTION: Demonstrates how to extract the blockchain chain ID from a SIWE message string by using the getChainIdFromMessage utility function. This function parses the SIWE message format and returns the associated numeric chain ID for downstream logic requiring network identification.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/siwe.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getChainIdFromMessage } from \"@reown/appkit-siwe-react-native\";\n\nconst chainId = getChainIdFromMessage(message);\n```\n\n----------------------------------------\n\nTITLE: Managing Unity Packages via OpenUPM CLI with Bash\nDESCRIPTION: This Bash snippet demonstrates commands to remove the old WalletConnect Web3Modal package and add the new Reown AppKit package using the OpenUPM CLI tool. This approach serves as an alternative to manually editing manifest.json, facilitating package management via command line in Unity development environments.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-unity.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Remove the old package\nopenupm remove com.walletconnect.web3modal\n\n# Add the new package\nopenupm add com.reown.appkit\n```\n\n----------------------------------------\n\nTITLE: Implementing NotifyClient Delegate for Subscription and Message Events in Kotlin\nDESCRIPTION: Creates a delegate object for NotifyClient to handle subscription creation, message receipt, deletion, updates, and errors. Facilitates asynchronous event handling from the Notify SDK and assigns it via setDelegate method.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_28\n\nLANGUAGE: Kotlin\nCODE:\n```\nval walletDelegate = object : NotifyClient.Delegate {\n\n    override fun onNotifySubscription(notifySubscribe: Notify.Event.Subscription) {\n        // Triggered when a wallet-initiated subscription is created\n    }\n\n    override fun onNotifyMessage(notifyMessage: Notify.Event.Message) {\n        // Triggered when a message is sent from the Dapp\n    }\n\n    override fun onNotifyDelete(notifyDelete: Notify.Event.Delete) {\n        // Triggered when a subscription is deleted\n    }\n\n    override fun onNotifyUpdate(notifyUpdate: Notify.Event.Update) {\n        // Triggered after a successful subscription update\n    }\n\n    override fun onError(error: Notify.Model.Error) {\n        // Triggered on SDK error\n    }\n}\n\nNotifyClient.setDelegate(walletDelegate)\n```\n\n----------------------------------------\n\nTITLE: Adding Library Dependencies in Gradle (Kotlin)\nDESCRIPTION: Demonstrates how to add the `com.reown:android-core` and `com.reown:walletkit` libraries as implementation dependencies in the `app/build.gradle.kts` file. Remember to replace `release_version` with the actual version number you intend to use. These dependencies are required to use the WalletKit SDK in your application module.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/installation.mdx#_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\nimplementation(\"com.reown:android-core:release_version\")\nimplementation(\"com.reown:walletkit:release_version\")\n```\n\n----------------------------------------\n\nTITLE: Creating Get Public Key Button in React JSX\nDESCRIPTION: Renders a button that calls the `handleGetPublicKey` function when activated. This button allows the user to easily fetch and display their public key from the connected wallet, and is only shown when the AppKit connection is active.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/bitcoin-send-transaction.mdx#_snippet_9\n\nLANGUAGE: JSX\nCODE:\n```\nreturn (\n  isConnected && (\n    <div>\n      <button onClick={handleGetPublicKey}>Get Public Key</button>\n    </div>\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Replacing RainbowKit ConnectButton with AppKit Button in React TypeScript (TSX)\nDESCRIPTION: Modifies the main React component by removing the RainbowKit ConnectButton import and usage, replacing it with the AppKit web component <appkit-button />. This snippet shows the diff-style changes necessary to transition to AppKit's global web component without needing explicit imports. It simplifies UI integration by leveraging AppKit's built-in web components.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-rainbowkit-next.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n- import { ConnectButton } from '@rainbow-me/rainbowkit';\n- <ConnectButton />\n+ <appkit-button />\n```\n\n----------------------------------------\n\nTITLE: Opening Reown Modal with Different Views in TypeScript\nDESCRIPTION: This code snippet demonstrates how to open the Reown modal with different views and configurations. It shows how to open account view, connect view with various blockchain namespaces (Solana, Bitcoin, Ethereum), and the swap view with specific token parameters.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/core/open.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nopen({ view: \"Account\" });\n\n// to connect and show multi wallets view\nopen({ view: \"Connect\" });\n\n// to connect and show only solana wallets\nopen({ view: \"Connect\", namespace: \"solana\" });\n\n// to connect and show only bitcoin wallets\nopen({ view: \"Connect\", namespace: \"bip122\" });\n\n// to connect and show only ethereum wallets\nopen({ view: \"Connect\", namespace: \"eip155\" });\n\n// to open swap with arguments\nopen({\n  view: 'Swap',\n  arguments: {\n    amount: '321.123',\n    fromToken: 'USDC',\n    toToken: 'ETH'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Dapp Notifications - TypeScript\nDESCRIPTION: Initiates the process for the currently set account to subscribe to notifications from the configured dapp. This typically prompts the user for confirmation via their wallet or an in-app UI depending on the client's configuration.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/usage/example/javascript.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Subscribe to the app\nawait client.subscribeToDapp()\n```\n\n----------------------------------------\n\nTITLE: Connecting to WalletConnect Sessions with Required Namespaces - Flutter (Dart)\nDESCRIPTION: Demonstrates how to establish a session in Flutter by specifying required namespaces with chain IDs and methods. The signClient.connect function returns a ConnectResponse, which includes a URI for the pairing process (displayed as a QR code or used in deep linking). Dependencies include an initialized SignClient and the walletconnect_dart package. Care should be taken to assemble the requiredNamespaces map per protocol rules. The provided chains and methods must match wallet capabilities.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_30\n\nLANGUAGE: dart\nCODE:\n```\nConnectResponse response = await signClient.connect(\n    requiredNamespaces: {\n        'eip155': RequiredNamespace(\n            chains: ['eip155:1'], // Ethereum chain\n            methods: ['eth_signTransaction'], // Requestable Methods\n        ),\n        'kadena': RequiredNamespace(\n            chains: ['kadena:mainnet01'], // Kadena chain\n            methods: ['kadena_quicksign_v1'], // Requestable Methods\n        ),\n    }\n);\n\nUri? uri = response.uri;\n```\n\n----------------------------------------\n\nTITLE: Switching Blockchain Network Using Reown AppKit in TypeScript\nDESCRIPTION: Demonstrates initializing the Reown AppKit with multiple blockchain networks and programmatically switching the user's wallet network to Polygon using modal.switchNetwork(). This snippet includes necessary imports from @reown/appkit, configuration of adapters, project ID, networks, and features. The switchNetwork method triggers the wallet to change its network context accordingly.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/ethers/actions.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAppKit } from \"@reown/appkit\";\nimport { mainnet, arbitrum, polygon } from \"@reown/appkit/networks\";\n\nconst modal = createAppKit({\n  adapters: [wagmiAdapter],\n  projectId,\n  networks: [mainnet, arbitrum],\n  metadata: metadata,\n  features: {\n    analytics: true,\n  },\n});\n\nmodal.switchNetwork(polygon);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Dapp Notifications\nDESCRIPTION: Method to subscribe a blockchain account to notifications from a specific decentralized application (dapp). This opts the user in to receive all notification types defined by the dapp.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/notifications/notify/usage.mdx#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\npublic func subscribe(appDomain: String, account: Account) async throws\n```\n\n----------------------------------------\n\nTITLE: Adding Custom RPC URLs to AppKit Configuration (TypeScript)\nDESCRIPTION: Defines custom RPC URLs by mapping CaipNetworkIds to arrays of HTTP RPC endpoints with optional transport configurations. This snippet configures createAppKit to override the default network RPC URLs with user-defined URLs for mainnet and Polygon. The CustomRpcUrlMap type is a record structure mapping networks to their respective RPC URLs. It enables developers to specify custom endpoints for native RPC calls to improve reliability or comply with specific infrastructure requirements.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype CustomRpcUrl = {\n  url: string\n  config?: HttpTransportConfig // Optional transport configuration\n}\n\ntype CustomRpcUrlMap = Record<CaipNetworkId, CustomRpcUrl[]>\n\ncreateAppKit({\n  //...\n  customRpcUrls: {\n    'eip155:1': [\n      {\n        url: 'https://your-custom-mainnet-url.com',\n        config: {\n          // Optional HTTP transport configuration\n        }\n      }\n    ],\n    'eip155:137': [\n      {\n        url: 'https://your-custom-polygon-url.com'\n      }\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Ethers.js and AppKit Dependencies for Contract Interaction\nDESCRIPTION: Imports necessary components from Ethers.js (`Contract`, `BrowserProvider`) and Reown AppKit (`useAppKitProvider`, `Provider` type). These imports are required to set up the Ethers.js environment for interacting with a smart contract via the wallet provider managed by AppKit.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/EVM-smart-contract-interaction.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useAppKitProvider } from \"@reown/appkit/react\";\nimport { Contract, BrowserProvider } from \"ethers\";\nimport type { Provider } from \"@reown/appkit/react\";\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Utility Dependencies - Shell\nDESCRIPTION: This command installs supplementary packages essential for common React Native functionalities. These include async storage for persistent data, a polyfill for secure random values, SVG support, modal components, network information access, and WalletConnect compatibility. Requires Node.js and Yarn.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/wagmi/about/installation.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @react-native-async-storage/async-storage react-native-get-random-values react-native-svg react-native-modal @react-native-community/netinfo @walletconnect/react-native-compat\n```\n\n----------------------------------------\n\nTITLE: Pairing Wallet with Dapp (Kotlin/Android)\nDESCRIPTION: Initiates a pairing connection between an Android wallet and a dapp using the WalletKit SDK. Uses Wallet.Params.Pair to encapsulate the URI and provides callbacks for success and error handling.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval pairingParams = Wallet.Params.Pair(pairingUri)\nWalletKit.pair(pairingParams,\n    onSuccess = {\n        //Subscribed on the pairing topic successfully. Wallet should await for a session proposal\n    },\n    onError = { error ->\n        //Some error happens while pairing - check Expected errors section\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Responding to Session Request - WalletKit - Kotlin\nDESCRIPTION: Responds to a JSON-RPC session request received from a dapp. Requires the session topic and a JsonRpcResult object containing the request ID and the result data.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/usage.mdx#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval sessionTopic: String = /*Topic of Session*/\nval jsonRpcResponse: Wallet.Model.JsonRpcResponse.JsonRpcResult = /*Active Session Request ID along with request data*/\nval result = Wallet.Params.SessionRequestResponse(sessionTopic = sessionTopic, jsonRpcResponse = jsonRpcResponse)\n\nWalletKit.respondSessionRequest(result) { error -> /*callback for error while responding session request*/ }\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with Wagmi using Yarn\nDESCRIPTION: Command for custom installation of Reown AppKit with Wagmi adapter using Yarn package manager. Installs required dependencies including wagmi, viem, and react-query.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/installation.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit @reown/appkit-adapter-wagmi wagmi viem @tanstack/react-query\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Firebase Service for Push Notifications in Kotlin\nDESCRIPTION: Defines a custom service class extending NotifyMessageService to handle Firebase Cloud Messaging events, including token refresh, message receipt, and errors. It must be registered in the AndroidManifest.xml to enable background push notifications in the app. Essential for decrypting and notifying wallets of background messages sent from a Dapp.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_26\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass CustomFirebaseService: NotifyMessageService() {\n\n    override fun newToken(token: String) {\n        // Triggered when Firebase Cloud Messaging creates a new token\n    }\n\n    override fun registeringFailed(token: String, throwable: Throwable) {\n        // Triggered when registration with Echo server fails\n    }\n\n    override fun onMessage(message: Notify.Model.Message, originalMessage: RemoteMessage) {\n        // Triggered on receiving a message with Notify.Model.Message content\n    }\n\n    override fun onDefaultBehavior(message: RemoteMessage) {\n        // Triggered when message does not contain Notify.Model.Message\n    }\n\n    override fun onError(throwable: Throwable, defaultMessage: RemoteMessage) {\n        // Triggered on message reception errors\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Modal UI with useAppKit (Ethers) TypeScript\nDESCRIPTION: This snippet demonstrates how to use the useAppKit hook from the `@reown/appkit-ethers-react-native` package to obtain functions for opening and closing the modal UI. It shows the import statement and how to destructure the `open` and `close` functions from the hook's return value. These functions are used to programmatically control the visibility of the AppKit modal.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/hooks.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useAppKit } from '@reown/appkit-ethers-react-native'\n\nexport default function Component() {\n  const { open, close } = useAppKit()\n\n  open()\n\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Approving Session Proposals with User Feedback in TypeScript\nDESCRIPTION: Implementation for approving session proposals with proper loading state management. This code handles the approval process and includes UI state management to provide feedback to users during the approval process.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/best-practices.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n    await walletKit.approveSession(params);\n    // update UI -> remove the loader\n} catch (error) {\n    // present error to the user\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Active Subscriptions for Blockchain Account Using Notify API in Kotlin\nDESCRIPTION: Retrieves all current active dapp subscriptions for a given blockchain account (CAIP-10) asynchronously. Accepts an optional timeout parameter to specify request duration. On success, returns a Map with subscription topics as keys and Subscription model instances as values. Error handling is managed by catching exceptions. Requires WalletConnect Notify SDK. Inputs include account string and optional timeout. Outputs are a map of active subscriptions or an error.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/notifications/notify/usage.mdx#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval account: String = // CAIP-10 account\nval timeout: Duration? = // Optional. Timeout - min 5 sec, max 60 sec, default 60 sec\nval params = Notify.Params.GetActiveSubscriptions(account, timeout)\n\ntry {\n  val result: Map<String, Notify.Model.Subscription> = NotifyClient.getActiveSubscriptions(params)\n} catch (e: Exception) {\n  // callback for when the get active subscriptions request has failed\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Native Token Balance via EVM in C#\nDESCRIPTION: Demonstrates how to asynchronously fetch the native token balance (e.g., ETH on Ethereum) for a given EVM address using `AppKit.EVM.GetBalanceAsync()`. The balance is returned as a `BigInteger`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/actions.mdx#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nBigInteger balance = await AppKit.EVM.GetBalanceAsync(\"0x123...\");\n```\n\n----------------------------------------\n\nTITLE: Marking All Notifications as Read Across Accounts and Domains in TypeScript\nDESCRIPTION: This code segment exhibits how to mark all notifications as read using the markAllNotificationsAsRead method in a TypeScript dapp. It includes examples for the default account and domain, as well as for specified accounts or domains. This ensures flexibility in bulk updating notification status depending on user context. The approach avoids specifying notification IDs, operating on all notifications available to the user in the given context.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/managing-notifications/react.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// mark all notifications as read for default account under default domain\nawait markAllNotificationsAsRead()\n\n// mark all notifications as read for specified account under default domain\nawait markAllNotificationsAsRead(differentAccount)\n\n// mark all notifications as read for default account under specified domain\nawait markAllNotificationsAsRead(undefined, differentDomain)\n\n// mark all notifications as read for specified account under specified domain\nawait markAllNotificationsAsRead(differentAccount, differentDomain)\n```\n\n----------------------------------------\n\nTITLE: Tracking AppKit Modal Events in TypeScript\nDESCRIPTION: Shows how to retrieve the last emitted modal event using `modal.getEvent()` or subscribe to a stream of all modal events using `modal.subscribeEvents(callback)`. Requires an initialized `modal` instance.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/actions.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nmodal.getEvent(); // get last event\nmodal.subscribeEvents((event) => console.log(event)); // subscribe to events\n```\n\n----------------------------------------\n\nTITLE: Configuring and Initializing Reown AppKit - React/TypeScript\nDESCRIPTION: This snippet demonstrates how to configure and initialize the Reown AppKit SDK in a React application using TypeScript. It involves importing necessary modules from @reown/appkit, defining project-specific configuration like metadata (name, description, url, icons) and supported networks (mainnet, arbitrum), providing the project ID, and calling `createAppKit` with the defined options, including the Ethers5Adapter. This setup should be done outside of React components to ensure proper initialization and avoid unnecessary re-renders. The `url` in metadata is crucial for the Verify API.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/ethers5/implementation.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createAppKit } from \"@reown/appkit/react\";\nimport { Ethers5Adapter } from \"@reown/appkit-adapter-ethers5\";\nimport { mainnet, arbitrum } from \"@reown/appkit/networks\";\n\n// 1. Get projectId\nconst projectId = \"YOUR_PROJECT_ID\";\n\n// 2. Create a metadata object - optional\nconst metadata = {\n  name: \"My Website\",\n  description: \"My Website description\",\n  url: \"https://mywebsite.com\", // origin must match your domain & subdomain\n  icons: [\"https://avatars.mywebsite.com/\"],\n};\n\n// 3. Create the AppKit instance\ncreateAppKit({\n  adapters: [new Ethers5Adapter()],\n  metadata: metadata,\n  networks: [mainnet, arbitrum],\n  projectId,\n  features: {\n    analytics: true, // Optional - defaults to your Cloud configuration\n  },\n});\n\nexport default function App() {\n  return <YourApp />; //make sure you have configured the <appkit-button> inside\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Subscribers from Reown Notify API using JavaScript Fetch\nDESCRIPTION: JavaScript example using `fetch` to query the `/v1/<project-id>/subscribers` endpoint for subscription status of specific accounts (max 100). Requires Project ID and Notify API Secret for authentication via Bearer token. Includes TypeScript type definitions for request and response bodies.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/backend-integration.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst PROJECT_ID = '<PROJECT_ID>'\nconst NOTIFY_API_SECRET = '<NOTIFY_API_SECRET>'\nconst requestBody: RequestBody = {\n  accounts: [\n    'eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029',\n    'eip155:1:0x0000000000000000000000000000000000000000'\n  ]\n}\n\nconst response = await fetch(`https://notify.walletconnect.com/v1/${PROJECT_ID}/subscribers`, {\n  method: 'POST',\n  headers: {\n    Authorization: `Bearer ${NOTIFY_API_SECRET}`\n  }\n  body: JSON.stringify(requestBody)\n})\n\nconst subscribers: ResponseBody = await response.json()\n\ntype RequestBody = {\n  // Max 100 accounts\n  accounts: string[]\n}\ntype ResponseBody = {\n  [account: string]: Subscriber\n}\ntype Subscriber = {\n  notification_types: string[]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Device Token for Encrypted Push Notifications in Swift\nDESCRIPTION: Demonstrates how to register the device token obtained from APNs within the AppDelegate's `didRegisterForRemoteNotificationsWithDeviceToken` method using `WalletKit.instance.register`. The `enableEncrypted` flag is set to `true` to enable encrypted push notifications, essential for receiving notifications from the Push Server.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/notifications/push.mdx#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nfunc application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n    Task(priority: .high) {\n        try await WalletKit.instance.register(deviceToken: deviceToken, enableEncrypted: true)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disconnecting a pairing in React Native SDK\nDESCRIPTION: Terminates the connection with a peer by calling `disconnect()` with the relevant `topic`, removing the pairing from active list.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait sdkClient.core.pairing.disconnect({ topic: \"1b3eda3f4...\" })\n```\n\n----------------------------------------\n\nTITLE: Adding Signatures to XRPL Multi-Signed Transactions using xrpl_signTransactionFor (JSON)\nDESCRIPTION: Illustrates a JSON-RPC request to add a signature to an existing multi-signed XRPL transaction using the `xrpl_signTransactionFor` method. The example shows adding the final signature to a payment transaction. Key parameters include `tx_signer` (the address of the current signer), `tx_json` (the transaction details, including previous signatures), optional `autofill` (defaults to false), and optional `submit` (defaults to false, but set to true here as it's the last signature). The response provides the `tx_json` with the newly added signature.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/xrpl-rpc.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// Request\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"xrpl_signTransactionFor\",\n    \"params\": {\n        \"submit\": true,\n        \"tx_signer\": \"rJ4wmkgK8n93UjtaqQTaj1vxBwQWdLrBjP\",\n        \"tx_json\": {\n            \"Account\": \"rh2EsAe2xVE71ZBjx7oEL2zpD4zmSs3sY9\",\n            \"TransactionType\": \"Payment\",\n            \"Amount\": \"400000000000000\",\n            \"Destination\": \"r9NpyVfLfUG8hatuCCHKzosyDtKnBdsEN3\",\n            \"Fee\": \"5000\",\n            \"Flags\": 2147483648,\n            \"LastLedgerSequence\": 73541531,\n            \"Sequence\": 38,\n            \"Signers\": [\n                {\n                    \"Signer\": {\n                        \"Account\": \"re3LGjhrCvthtWWwrfKbVJjXN9PYDeQDJ\",\n                        \"SigningPubKey\": \"0320ECD5569CAFA4E23147BE238DBFB268DB3B5A502ED339387AC7DCA0ADC6FB90\",\n                        \"TxnSignature\": \"3045022100EC2BF025E748A028187EDB3C350D518F91F05BC201EAFC9C92566DE9E48AA1B7022018847D172386E93679630E3905BD30481359E5766931944F79F1BA6D910F5C01\"\n                    }\n                },\n                {\n                    \"Signer\": {\n                        \"Account\": \"rpcL6T32dYb6FDgdm4CnC1DZQSoMvvkLRd\",\n                        \"SigningPubKey\": \"030BF97DA9A563A9A0679DD527F615CF8EA6B2DB55543075B72822B8D39910B5E1\",\n                        \"TxnSignature\": \"304402201A891AF3945C81E2D6B95213B79E9A31635209AF0FB94DA8C0983D15F454179B0220388679E02CE6DE2AAC904A9C2F42208418BEF60743A7F9F76FC36D519902DA8C\"\n                    }\n                },\n                {\n                    \"Signer\": {\n                        \"Account\": \"r3vw3FnkXn2L7St45tzpySZsXVgG75seNk\",\n                        \"SigningPubKey\": \"030BE281F6DFF9AFD260003375B64235DDBCD5B7A54511BE3DA1FEF1ADE4A85D87\",\n                        \"TxnSignature\": \"3044022049D36ACE39F1208B4C78A1550F458E54E21161FA4B52B3763C8FA9C4FE45B52C022003BE3579B5B5558A27BB7DC6A8ED163999A451665974138298469C1FDACA615F\"\n                    }\n                }\n            ],\n            \"SigningPubKey\": \"\"\n        }\n    }\n}\n\n// Result\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"tx_json\": {\n            \"Account\": \"rh2EsAe2xVE71ZBjx7oEL2zpD4zmSs3sY9\",\n            \"TransactionType\": \"Payment\",\n            \"Amount\": \"400000000000000\",\n            \"Destination\": \"r9NpyVfLfUG8hatuCCHKzosyDtKnBdsEN3\",\n            \"Fee\": \"5000\",\n            \"Flags\": 2147483648,\n            \"LastLedgerSequence\": 73541531,\n            \"Sequence\": 38,\n            \"Signers\": [\n                {\n                    \"Signer\": {\n                        \"Account\": \"re3LGjhrCvthtWWwrfKbVJjXN9PYDeQDJ\",\n                        \"SigningPubKey\": \"0320ECD5569CAFA4E23147BE238DBFB268DB3B5A502ED339387AC7DCA0ADC6FB90\",\n                        \"TxnSignature\": \"3045022100EC2BF025E748A028187EDB3C350D518F91F05BC201EAFC9C92566DE9E48AA1B7022018847D172386E93679630E3905BD30481359E5766931944F79F1BA6D910F5C01\"\n                    }\n                },\n                {\n                    \"Signer\": {\n                        \"Account\": \"rpcL6T32dYb6FDgdm4CnC1DZQSoMvvkLRd\",\n                        \"SigningPubKey\": \"030BF97DA9A563A9A0679DD527F615CF8EA6B2DB55543075B72822B8D39910B5E1\",\n                        \"TxnSignature\": \"304402201A891AF3945C81E2D6B95213B79E9A31635209AF0FB94DA8C0983D15F454179B0220388679E02CE6DE2AAC904A9C2F42208418BEF60743A7F9F76FC36D519902DA8C\"\n                    }\n                },\n                {\n                    \"Signer\": {\n                        \"Account\": \"r3vw3FnkXn2L7St45tzpySZsXVgG75seNk\",\n                        \"SigningPubKey\": \"030BE281F6DFF9AFD260003375B64235DDBCD5B7A54511BE3DA1FEF1ADE4A85D87\",\n                        \"TxnSignature\": \"3044022049D36ACE39F1208B4C78A1550F458E54E21161FA4B52B3763C8FA9C4FE45B52C022003BE3579B5B5558A27BB7DC6A8ED163999A451665974138298469C1FDACA615F\"\n                    }\n                },\n                {\n                    \"Signer\": {\n                        \"Account\": \"rJ4wmkgK8n93UjtaqQTaj1vxBwQWdLrBjP\",\n                        \"SigningPubKey\": \"02D5D616D4005B91DE02BF6E29157B514C667810860F389CF36DC9E4D5E73BFE79\",\n                        \"TxnSignature\": \"304402207589FA73E72F85A2C8F82BBCB3C7C67C455D4C14A946BA427A4735F4ED106123022069845499A9DE50F26765F097BA0EA3C96E56A1304B380E0533514AEEF29363D7\"\n                    }\n                }\n            ],\n            \"SigningPubKey\": \"\",\n            \"hash\": \"BA2AF0C652F46C97B85C1D17080EEC7422C092B0BD906DCA344B42EF30FA8285\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize WalletConnect SignClient (JavaScript)\nDESCRIPTION: Initializes the WalletConnect SignClient instance required for establishing sessions and making requests. Requires a Project ID obtained from WalletConnect Cloud and optionally accepts relay URL and application metadata.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport SignClient from \"@walletconnect/sign-client\";\n\nconst signClient = await SignClient.init({\n  projectId: \"<YOUR_PROJECT_ID>\",\n  // optional parameters\n  relayUrl: \"<YOUR RELAY URL>\",\n  metadata: {\n    name: \"Example Dapp\",\n    description: \"Example Dapp\",\n    url: \"#\",\n    icons: [\"https://walletconnect.com/walletconnect-logo.png\"]\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Solana Counter Smart Contract Interaction using AppKit\nDESCRIPTION: This code demonstrates a complete workflow for interacting with a Solana counter program. It shows how to initialize AppKit hooks, create a new account, construct transaction instructions, send a signed transaction, and verify the result by deserializing the account data.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/solana/about/programs.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  SystemProgram,\n  PublicKey,\n  Keypair,\n  Transaction,\n  TransactionInstruction,\n  LAMPORTS_PER_SOL\n} from '@solana/web3.js'\nimport { useAppKitAccount, useAppKitProvider } from '@reown/appkit/react'\nimport { useAppKitConnection, type Provider } from '@reown/appkit-adapter-solana/react'\n\nfunction deserializeCounterAccount(data?: Buffer): { count: number } {\n  if (data?.byteLength !== 8) {\n    throw Error('Need exactly 8 bytes to deserialize counter')\n  }\n\n  return {\n    count: Number(data[0])\n  }\n}\n\nconst { address } = useAppKitAccount()\nconst { connection } = useAppKitConnection()\nconst { walletProvider } = useAppKitProvider<Provider>('solana')\n\nasync function onIncrementCounter() {\n  const PROGRAM_ID = new PublicKey('Cb5aXEgXptKqHHWLifvXu5BeAuVLjojQ5ypq6CfQj1hy')\n\n  const counterKeypair = Keypair.generate()\n  const counter = counterKeypair.publicKey\n\n  const balance = await connection.getBalance(walletProvider.publicKey)\n  if (balance < LAMPORTS_PER_SOL / 100) {\n    throw Error('Not enough SOL in wallet')\n  }\n\n  const COUNTER_ACCOUNT_SIZE = 8\n  const allocIx: TransactionInstruction = SystemProgram.createAccount({\n    fromPubkey: walletProvider.publicKey,\n    newAccountPubkey: counter,\n    lamports: await connection.getMinimumBalanceForRentExemption(COUNTER_ACCOUNT_SIZE),\n    space: COUNTER_ACCOUNT_SIZE,\n    programId: PROGRAM_ID\n  })\n\n  const incrementIx: TransactionInstruction = new TransactionInstruction({\n    programId: PROGRAM_ID,\n    keys: [\n      {\n        pubkey: counter,\n        isSigner: false,\n        isWritable: true\n      }\n    ],\n    data: Buffer.from([0x0])\n  })\n\n  const tx = new Transaction().add(allocIx).add(incrementIx)\n\n  tx.feePayer = walletProvider.publicKey\n  tx.recentBlockhash = (await connection.getLatestBlockhash('confirmed')).blockhash\n\n  await walletProvider.signAndSendTransaction(tx, [counterKeypair])\n\n  const counterAccountInfo = await connection.getAccountInfo(counter, {\n    commitment: 'confirmed'\n  })\n\n  if (!counterAccountInfo) {\n    throw new Error('Expected counter account to have been created')\n  }\n\n  const counterAccount = deserializeCounterAccount(counterAccountInfo?.data)\n\n  if (counterAccount.count !== 1) {\n    throw new Error('Expected count to have been 1')\n  }\n\n  console.log(`[alloc+increment] count is: ${counterAccount.count}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Make JSON-RPC Request (JavaScript)\nDESCRIPTION: Sends a JSON-RPC request to the connected wallet using the established session. Requires the session topic, chain ID, and the specific method and parameters for the request (e.g., `personal_sign`).\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = await signClient.request({\n  topic: session.topic,\n  chainId: \"eip155:1\",\n  request: {\n    method: \"personal_sign\",\n    params: [\n      \"0x7468697320697320612074657374206d65737361676520746f206265207369676e6564\",\n      \"0x1d85568eEAbad713fBB5293B45ea066e552A90De\"\n    ]\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Signing a message with ever_sign (JavaScript)\nDESCRIPTION: This snippet demonstrates how to sign a message using the 'ever_sign' JSON-RPC method, which produces a signature and public key for authentication purposes. Dependencies include a JSON-RPC client setup to communicate with the Everscale node. Inputs include a base64 message, options for signature ID and data hashing; output is a JSON object with signature and public key.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/everscale-rpc.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Request\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"ever_sign\",\n  \"params\": {\n        \"message\": \"some message in base64\",\n        \"withSignatureId\": true,\n        \"hashData\": true\n    }\n}\n\n// Result\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\":  {\n        \"signature\": \"0xa3f207... in base64\",\n        \"pubkey\": \"0x07bf94e...37e3\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting chainChanged Event (JavaScript)\nDESCRIPTION: Uses `walletKit.emitSessionEvent` to inform the connected dapp that the user has switched blockchain networks. It needs the session `topic`, an event object named `chainChanged` with the new chain ID in its `data` property (as a number), and the `chainId` where the event occurred.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/usage.mdx#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nawait walletKit.emitSessionEvent({\n  topic,\n  event: {\n    name: \"chainChanged\",\n    data: 1,\n  },\n  chainId: \"eip155:1\",\n});\n```\n\n----------------------------------------\n\nTITLE: Hashing Messages for EIP-1271 using web3.js in JavaScript\nDESCRIPTION: Shows how to calculate an EIP-191 compliant message hash using the web3.js library. This hash is necessary when calling the `isValidSignature` method specified by EIP-1271 to validate signatures originating from smart contract wallets. Requires the `web3` library and an RPC URL.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/smart-contract-wallet-usage.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport Web3 from \"web3\";\n\nconst web3 = new Web3(rpcUrl);\n\nconst hash = web3.eth.accounts.hashMessage(message);\n```\n\n----------------------------------------\n\nTITLE: Import statement for React integration of '@reown/appkit-wallet-button'\nDESCRIPTION: Details the import syntax to include the Wallet Button React component library into a project's codebase, enabling developers to incorporate wallet connection features within React applications.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/components.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"@reown/appkit-wallet-button/react\";\n```\n\n----------------------------------------\n\nTITLE: Installing @reown/appkit-wallet-button Library\nDESCRIPTION: Provides commands for installing the `@reown/appkit-wallet-button` library using various JavaScript package managers (npm, Yarn, Bun, pnpm). This library is needed for the `useAppKitWallet` hook.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/hooks.mdx#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit-wallet-button\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit-wallet-button\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun a @reown/appkit-wallet-button\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit-wallet-button\n```\n\n----------------------------------------\n\nTITLE: Signing a Single Encoded NEAR Transaction Using JSON-RPC in JavaScript\nDESCRIPTION: Specifies the 'near_signTransaction' method that signs a single encoded NEAR transaction. It requires an object parameter with the transaction encoded as a Uint8Array, typically created via near-api-js's transactions.Transaction.encode(). The method returns the encoded SignedTransaction as a Uint8Array. This facilitates interoperability with dApps using near-api-js for transaction construction and RPC communication.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/near-rpc.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Request\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"near_signTransaction\",\n  \"params\": {\n    \"transaction\": {\n    \"type\": \"Buffer\",\n      \"data\": [32, 0, 0, 0, 100, 101, 118, 45, 49, 54, 55, 49, 51, 56, 55, 51, 57, 56 ...]\n    }\n  }\n}\n\n// Result\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n  \"type\": \"Buffer\",\n    \"data\": [32, 0, 0, 0, 100, 101, 118, 45, 49, 54, 55, 49, 51, 56, 55, 51, 57, 56 ...]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending JSON-RPC Request to Wallet in Swift after Session Establishment\nDESCRIPTION: Once a WalletConnect session is established, this snippet sends a JSON-RPC request to the connected wallet using the Sign client. It demonstrates specifying a method (e.g., personal_sign), providing parameters including a message and wallet address, and sending the request asynchronously. Responses to requests are handled via sessionResponsePublisher events.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_20\n\nLANGUAGE: Swift\nCODE:\n```\nlet method = \"personal_sign\"\nlet walletAddress = \"0x9b2055d370f73ec7d8a03e965129118dc8f5bf83\" // This should match the connected address\nlet requestParams = AnyCodable([\"0x4d7920656d61696c206973206a6f686e40646f652e636f6d202d2031363533333933373535313531\", walletAddress])\nlet request = Request(topic: session.topic, method: method, params: requestParams, chainId: Blockchain(chainId)!)\ntry await Sign.instance.request(params: request)\n```\n\n----------------------------------------\n\nTITLE: Getting Chain ID with TypeScript\nDESCRIPTION: Retrieves the current blockchain network's chain ID using `modal.getChainId()`. Returns the chain ID, typically as a number or string, or potentially undefined/null.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/solana/actions.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst chainId = modal.getChainId();\n```\n\n----------------------------------------\n\nTITLE: Defining Associated Domains for Universal Links in iOS Entitlement (XML)\nDESCRIPTION: This XML snippet represents the configuration for iOS entitlements to support universal links. The com.apple.developer.associated-domains key includes the applinks:example.com value, indicating which domains are associated with the app. This entitlement file must be added in Xcode under Signing & Capabilities, ensuring iOS recognizes and routes universal links to the app properly.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/link-mode.mdx#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n  <key>com.apple.developer.associated-domains</key>\n  <array>\n    <string>applinks:example.com</string>\n  </array>\n</dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Connected Wallet Info with useWalletInfo (Wagmi) TypeScript\nDESCRIPTION: This snippet illustrates how to use the useWalletInfo hook from `@reown/appkit-wagmi-react-native`. This hook provides access to metadata information about the currently connected wallet. It shows how to destructure the `walletInfo` object from the hook's return value.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/hooks.mdx#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useWalletInfo } from '@reown/appkit-wagmi-react-native'\n\nconst { walletInfo } = useWalletInfo()\n```\n\n----------------------------------------\n\nTITLE: Defining Contract Call Permissions with TypeScript Enums and Types\nDESCRIPTION: This TypeScript snippet defines enums and types to represent the structure of contract call permissions as required for Smart Sessions. It includes parameter operators (like EQUAL or GREATER_THAN), contract operations (Call or DelegateCall), conditions on function arguments, and the overall contract call permission structure including ABI details. These types support fine-grained permissioning for contract functions within sessions.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/smart-sessions.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport enum ParamOperator {\n  EQUAL = 'EQUAL',\n  GREATER_THAN = 'GREATER_THAN',\n  LESS_THAN = 'LESS_THAN'\n}\n\nexport enum Operation {\n  Call = 'Call',\n  DelegateCall = 'DelegateCall'\n}\n\nexport type ArgumentCondition = {\n  operator: ParamOperator\n  value: `0x${string}`\n}\n\nexport type FunctionPermission = {\n  functionName: string\n  args?: ArgumentCondition[]\n  valueLimit?: `0x${string}`\n  operation?: Operation\n}\nexport type ContractCallPermission = {\n  type: 'contract-call'\n  data: {\n    address: `0x${string}`\n    abi: Record<string, unknown>[]\n    functions: FunctionPermission[]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AllWallets button display option in createAppKit in TypeScript\nDESCRIPTION: Demonstrates setting the allWallets parameter to control visibility of the 'All Wallets' button in the modal. Values such as 'SHOW', 'HIDE', or 'ONLY_MOBILE' determine the button's presence on all platforms, removed completely, or only shown on mobile, respectively. This affects wallet connectivity scope via WalletConnect on mobile.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateAppKit({\n  //...\n  allWallets: \"ONLY_MOBILE\",\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Wagmi Hooks for Smart Contract Read/Write Operations\nDESCRIPTION: Initializes Wagmi's `useWriteContract` and `useReadContract` hooks within a React component. `useWriteContract` provides functions and state for sending write transactions. `useReadContract` is configured with the contract address, ABI, function name ('retrieve'), and query options (initially disabled).\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/EVM-smart-contract-interaction.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst { writeContract, isSuccess } = useWriteContract();\nconst readContract = useReadContract({\n  address: storageSC,\n  abi: storageABI,\n  functionName: \"retrieve\",\n  query: {\n    enabled: false, // disable the query in onload\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating authentication payload for supported chains and methods using @walletconnect/utils in TypeScript\nDESCRIPTION: This snippet demonstrates importing a utility to populate the authentication payload with supported blockchain networks and methods, generating an authentication message with the wallet's account information formatted as a CAIP10 identifier, ready for presentation and signing. Dependencies include @walletconnect/utils and the walletKit SDK.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/one-click-auth.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { populateAuthPayload } from \"@walletconnect/utils\";\n\n// EVM chains that your wallet supports\nconst supportedChains = [\"eip155:1\", \"eip155:2\", 'eip155:137'];\n// EVM methods that your wallet supports\nconst supportedMethods = [\"personal_sign\", \"eth_sendTransaction\", \"eth_signTypedData\"];\n// Populate the authentication payload with the supported chains and methods\nconst authPayload = populateAuthPayload({\n  authPayload: payload.params.authPayload,\n  chains: supportedChains,\n  methods: supportedMethods,\n});\n// Prepare the user's address in CAIP10(https://github.com/ChainAgnostic/CAIPs/blob/main/CAIPs/caip-10.md) format\nconst iss = `eip155:1:0x0Df6d2a56F90e8592B4FfEd587dB3D5F5ED9d6ef`;\n// Now you can use the authPayload to format the authentication message\nconst message = walletKit.formatAuthMessage({\n  request: authPayload,\n  iss\n});\n\n// Present the authentication message to the user\n...\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Watching Single Subscription via Client API in TypeScript\nDESCRIPTION: This snippet retrieves the non-reactive subscription object for the current account and dapp and shows how to set up a reactive watcher for updates. The returned or watched value is of an object containing keys such as 'topic', 'account', 'relay', 'metadata', 'scope', 'expiry', 'symkey', and 'unreadCount'. The watcher calls the supplied callback on changes.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/managing-subscription/javascript.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst subscription = client.getSubscription()\n\nclient.watchSubscription(subscription => console.log({ subscription }))\n```\n\n----------------------------------------\n\nTITLE: Initializing and sharing a Core instance with WalletConnect SDKs in TypeScript\nDESCRIPTION: This code demonstrates how to instantiate a single Core object and pass it to both SignClient and AuthClient SDKs during their initialization. The goal is to avoid duplication of resources such as computation, memory, and event listeners by sharing a common Core instance. Dependencies include '@walletconnect/core', '@walletconnect/sign-client', and '@walletconnect/auth-client'. The example creates a Core with a project ID, then initializes SignClient and AuthClient with the shared Core and metadata, resulting in initialized SDK instances ready for use.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/shared-core.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Core } from \"@walletconnect/core\";\nimport SignClient from \"@walletconnect/sign-client\";\nimport { AuthClient } from \"@walletconnect/auth-client\";\n\n// First instantiate a separate `Core` instance.\nconst core = new Core({\n  projectId: \"<YOUR_PROJECT_ID>\",\n});\n\nconst metadata = {\n  name: \"Example Dapp\",\n  description: \"Example Dapp\",\n  url: \"#\",\n  icons: [\"https://walletconnect.com/walletconnect-logo.png\"],\n};\n\n// Pass `core` to the SignClient on init.\nconst signClient = await SignClient.init({ core, metadata });\n\n// Pass `core` to the AuthClient on init.\nconst authClient = await AuthClient.init({ core, metadata });\n```\n\n----------------------------------------\n\nTITLE: Constructing Authentication Payloads and Messages for WalletKit in JavaScript\nDESCRIPTION: This snippet illustrates creating an authentication payload specifying supported EVM chains and methods, building a request payload, formatting a CAIP10-compliant address for the issuer, and preparing a SIWE-compliant authentication message with WalletKit. Required dependencies include the AuthSignature and CacaoRequestPayload classes, as well as JavaScript support for final variables. Inputs are the requested args.authPayload, target chains, and methods; the output is an authentication message ready for user review and signing. The issuer should be in CAIP10 format, matching the expected specification.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/one-click-auth.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfinal supportedChains = ['eip155:1', 'eip155:10', 'eip155:137'];\nfinal supportedMethods = ['personal_sign', 'eth_sendTransaction'];\nfinal SessionAuthPayload authPayload = AuthSignature.populateAuthPayload(\n  authPayload: args.authPayload,\n  chains: supportedChains,\n  methods: supportedMethods,\n);\nfinal cacaoRequestPayload = CacaoRequestPayload.fromSessionAuthPayload(\n  newAuthPayload,\n);\n\n// Prepare the user's address in CAIP10(https://github.com/ChainAgnostic/CAIPs/blob/main/CAIPs/caip-10.md) format\nfinal iss = 'eip155:1:0x59e2f66C0E96803206B6486cDb39029abAE834c0';\n// Now you can use the authPayload to format the authentication message\nfinal message = _walletKit!.formatAuthMessage(\n  iss: iss,\n  cacaoPayload: cacaoRequestPayload,\n);\n\n// Present the authentication message to the user\n...\n```\n\n----------------------------------------\n\nTITLE: Switching Networks with AppKit\nDESCRIPTION: Shows how to initialize AppKit with multiple networks and how to switch between them programmatically. Requires network configurations and various adapters.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/ethers5/composables.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createAppKit } from \"@reown/appkit/vue\";\nimport { mainnet, arbitrum, polygon } from \"@reown/appkit/networks\";\n\nconst modal = createAppKit({\n  adapters: [wagmiAdapter],\n  projectId,\n  networks: [mainnet, arbitrum],\n  metadata: metadata,\n  features: {\n    analytics: true,\n  },\n});\n\nmodal.switchNetwork(polygon);\n```\n\n----------------------------------------\n\nTITLE: Approving a Session Proposal with Specific Namespaces in C#\nDESCRIPTION: This snippet shows how to approve a session proposal by constructing an approved Namespaces object that includes necessary accounts. The process involves handling the proposal event and invoking the SDK's approval method, resulting in an active session with designated accounts.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/usage.mdx#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nsdk.SessionProposed += async (sender, @event) =>\n{\n    var proposal = @event.Proposal;\n    var requiredNamespaces = proposal.RequiredNamespaces;\n    var approvedNamespaces = new Namespaces(requiredNamespaces);\n    approvedNamespaces[\"eip155\"].WithAccount(\"eip155:1:0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb\");\n\n    var sessionData = await sdk.ApproveSession(proposal.Id, approvedNamespaces);\n    var sessionTopic = sessionData.Topic;\n};\n```\n\n----------------------------------------\n\nTITLE: Authenticate Session with ReCaps (TypeScript)\nDESCRIPTION: Initiates an authentication request using EIP-5573 (ReCaps) to request wallet authentication and establish a session simultaneously. Allows the Dapp to request scoped capabilities, specified via ReCap URIs in the `resources` field.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst { uri, response } = await signClient.authenticate({\n  chains: ['eip155:1', 'eip155:2'], // chains your dapp requests authentication for\n  domain: 'localhost', // your domain\n  uri: 'http://localhost/login', // uri\n  nonce: '1239812982', // random nonce\n  methods: ['personal_sign', 'eth_chainId', 'eth_signTypedData_v4'], // the methods you wish to use\n  resources: ['https://example.com'] // any resources relevant to the connection\n})\n\n// Present the URI to users as QR code to be able to connect with a wallet\n...\n\n// wait for response\nconst result = await response()\n\n// after a Wallet establishes a connection response will resolve with auths ( authentication objects ) & the established session\nconst { auths, session } = result;\n\n// now you can send requests to that session\n```\n\n----------------------------------------\n\nTITLE: Integrating AppKit Web Components in HTML\nDESCRIPTION: This HTML code shows a basic page structure demonstrating how to embed the `<appkit-button>` and `<appkit-network-button>` web components. These components provide pre-built UI elements to interact with AppKit without requiring explicit imports in the HTML, as they are registered globally. The example also includes standard buttons and links to a JavaScript file (`main.js`) presumably for further initialization or interaction logic.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/wagmi/about/triggermodal.mdx#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>HTML Example</title>\n  </head>\n  <body>\n    <div id=\"app\">\n      <button id=\"open-connect-modal\">Open Modal</button>\n      <button id=\"open-network-modal\">Open Networks</button>\n      <appkit-button />\n      <appkit-network-button />\n    </div>\n    <script type=\"module\" src=\"main.js\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom EVM Chain Preset Using AppKit in Swift\nDESCRIPTION: This snippet demonstrates the use of the static method addChainPreset on the AppKit object to add a new EVM compatible chain preset. It requires the chain parameter to comply with the Chain type which encapsulates blockchain network details. Once added, the custom chain will appear in UI elements like the AppKitNetworkButton and network selection screens, enabling extended network support within the application.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/custom-chains.mdx#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nAppKit.addChainPreset(_ chain: Chain)\n```\n\n----------------------------------------\n\nTITLE: Accessing Subscription Updates Publisher\nDESCRIPTION: Provides a Combine publisher that emits events whenever the list of active subscriptions changes.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/notifications/notify/usage.mdx#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\npublic var subscriptionsPublisher: AnyPublisher<[NotifySubscription], Never>\n```\n\n----------------------------------------\n\nTITLE: Sending Prepared Blockchain Calls from Server (Conceptual Node.js)\nDESCRIPTION: Conceptual server-side JavaScript/Node.js code demonstrating the call to `sendPreparedCalls`. This sends the prepared transaction details (context, preparedCalls from `makePrepareCalls` response) along with the server's signature to the Blockchain API via RPC for execution.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/smart-sessions.mdx#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// send the prepared calls\nconst sendPreparedCallsResponse = await sendPreparedCalls({\n    context: response.context,\n    preparedCalls: response.preparedCalls,\n    signature: signature,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding additional EVM networks dynamically\nDESCRIPTION: This snippet shows how to add more EVM networks to the existing supported list by providing an array of network info objects. It demonstrates extending support dynamically via addSupportedNetworks for the 'eip155' namespace.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/custom-chains.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Add additional EVM networks\nlet extraChains = [\n  // Define ReownAppKitModalNetworkInfo objects here\n];\nReownAppKitModalNetworks.addSupportedNetworks('eip155', extraChains);\n\n```\n\n----------------------------------------\n\nTITLE: Emitting Account Change Events in JavaScript\nDESCRIPTION: Shows how to emit a session event to notify the dapp that the active accounts have changed, which requires the topic and event details.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/usage.mdx#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nawait walletKit.emitSessionEvent({\n  topic,\n  event: {\n    name: \"accountsChanged\",\n    data: [\"0xab16a96D359eC26a11e2C2b3d8f8B8942d5Bfcdb\"],\n  },\n  chainId: \"eip155:1\",\n});\n```\n\n----------------------------------------\n\nTITLE: Capturing Deep Links and Sending via EventChannel on Android - Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates capturing app links and deep links on Android and sending them to Flutter using an EventChannel named 'com.exampledapp/events'. It requires dependencies on the Flutter Android embedding API. The MainActivity sets up the EventChannel with a StreamHandler, creates a BroadcastReceiver to process incoming Intents, and listens for new intents via onNewIntent(). Key inputs are Intents with ACTION_VIEW, while outputs are dataStrings forwarded to Dart via the event sink. The implementation ensures links are delivered as soon as possible but only one receiver is managed at a time; error handling returns an error to Dart if link data is unavailable.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/installation.mdx#_snippet_9\n\nLANGUAGE: Kotlin\nCODE:\n```\npackage dapp.example\n\nimport io.flutter.embedding.android.FlutterActivity\nimport android.content.BroadcastReceiver\nimport android.content.Context\nimport android.content.Intent\nimport android.os.Bundle\nimport io.flutter.plugin.common.EventChannel\n\nclass MainActivity: FlutterActivity() {\n  private val eventsChannel = \"com.exampledapp/events\"\n  private var linksReceiver: BroadcastReceiver? = null\n\n  override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n\n    EventChannel(flutterEngine?.dartExecutor?.binaryMessenger, eventsChannel).setStreamHandler(\n      object : EventChannel.StreamHandler {\n        override fun onListen(args: Any?, events: EventChannel.EventSink) {\n          linksReceiver = createChangeReceiver(events)\n        }\n        override fun onCancel(args: Any?) {\n          linksReceiver = null\n        }\n      }\n    )\n  }\n\n  override fun onNewIntent(intent: Intent) {\n    super.onNewIntent(intent)\n    if (intent.action === Intent.ACTION_VIEW) {\n      linksReceiver?.onReceive(this.applicationContext, intent)\n    }\n  }\n\n  fun createChangeReceiver(events: EventChannel.EventSink): BroadcastReceiver? {\n    return object : BroadcastReceiver() {\n      override fun onReceive(context: Context, intent: Intent) {\n        val dataString = intent.dataString ?:\n        events.error(\"UNAVAILABLE\", \"Link unavailable\", null)\n        events.success(dataString)\n      }\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Understanding the Session Data Structure (TypeScript Interfaces)\nDESCRIPTION: Defines the `Namespaces` interface representing session namespace data including supported chains, accounts, methods, and events. Also details the `Metadata` interface for peer information, with notes on optional parameters and accessing session data post-connection.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/providers/ethereum.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Namespaces {\n  chains?: string[];\n  accounts: string[];\n  methods: string[];\n  events: string[];\n}\n\ninterface Metadata {\n  name: string;\n  description: string;\n  url: string;\n  icons: string[];\n  verifyUrl?: string;\n  redirect?: {\n    native?: string;\n    universal?: string;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Reown AppKit in Vue.js App.vue\nDESCRIPTION: Complete setup for initializing Reown AppKit in a Vue.js application. This configuration includes importing necessary dependencies, setting the project ID, creating application metadata, configuring blockchain networks, and initializing the AppKit instance. The setup uses Ethers5Adapter and supports mainnet and arbitrum networks.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/ethers5/implementation.mdx#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\n  import { createAppKit, useAppKit } from \"@reown/appkit/vue\";\n  import { Ethers5Adapter } from \"@reown/appkit-adapter-ethers5\";\n  import { mainnet, arbitrum } from \"@reown/appkit/networks\";\n\n  // 1. Get projectId at https://cloud.reown.com\n  const projectId = \"YOUR_PROJECT_ID\";\n\n  function getBlockchainApiRpcUrl(chainId) {\n    return `https://rpc.walletconnect.org/v1/?chainId=eip155:${chainId}&projectId=${projectId}`;\n  }\n\n  // 2. Create your application's metadata object\n  const metadata = {\n    name: \"My Website\",\n    description: \"My Website description\",\n    url: \"https://mywebsite.com\", // url must match your domain & subdomain\n    icons: [\"https://avatars.mywebsite.com/\"],\n  };\n\n  // 3. Create a AppKit instance\n  createAppKit({\n    adapters: [new Ethers5Adapter()],\n    networks: [mainnet, arbitrum],\n    projectId,\n    features: {\n      analytics: true, // Optional - defaults to your Cloud configuration\n    },\n  });\n\n  // 4. Use modal composable\n  const modal = useAppKit();\n</script>\n\n<template> // Rest of your app ... </template>\n```\n\n----------------------------------------\n\nTITLE: Initializing WalletConnect Core and Sign Client in Android (Kotlin)\nDESCRIPTION: Demonstrates how to initialize the WalletConnect Core client and the Sign client in an Android application using Kotlin. It includes setting up project ID, connection types (automatic/manual), application metadata, and then passing these to CoreClient and SignClient initializations. Error handling is included to catch initialization failures.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_22\n\nLANGUAGE: Kotlin\nCODE:\n```\nval projectId = \"\" // Get Project ID at https://cloud.reown.com/\nval connectionType = ConnectionType.AUTOMATIC or ConnectionType.MANUAL\nval appMetaData = Core.Model.AppMetaData(\n    name = \"Dapp Name\",\n    description = \"Dapp Description\",\n    url = \"Dapp URL\",\n    icons = /*list of icon url strings*/,\n    redirect = \"kotlin-dapp-wc:/request\" // Custom Redirect URI\n)\n\nCoreClient.initialize(projectId = projectId, connectionType = connectionType, application = this, metaData = appMetaData)\n\nval init = Sign.Params.Init(core = CoreClient)\n\nSignClient.initialize(init) { error ->\n    // Error will be thrown if there's an issue during initialization\n}\n```\n\n----------------------------------------\n\nTITLE: Approving WalletKit Authentication Requests with SIWE in JavaScript\nDESCRIPTION: This snippet shows two patterns for handling approval of authentication sessions: signing a single SIWE message for multi-chain sessions or signing multiple messages per chain/address, building authentication objects, and using WalletKit to approve authentication. It leverages EthPrivateKey for message signing, bytesToHex for encoding, and AuthSignature for object building. Prerequisites include access to the user's private key and inclusion of the relevant cryptographic libraries. Parameters are the session arguments and request payloads; outputs are signed authentication approvals for WalletKit. Edge cases include sessions with one or several chains, and flexibility in the number of approvals returned.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/one-click-auth.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Approach 1\n// Sign the authentication message(s) to create a verifiable authentication object(s)\nfinal credentials = EthPrivateKey.fromHex('$privateKey');\nfinal signature = credentials.signPersonalMessageToUint8List(\n  Uint8List.fromList(message.codeUnits),\n);\nfinal hexSignature = bytesToHex(signature, include0x: true);\n// Build the authentication object(s)\nfinal cacao = AuthSignature.buildAuthObject(\n  requestPayload: cacaoRequestPayload,\n  signature: CacaoSignature(\n    t: CacaoSignature.EIP191,\n    s: hexSignature,\n  ),\n  iss: iss,\n);\n\n// Approve\nawait _walletKit!.approveSessionAuthenticate(\n  id: args.id,\n  auths: [cacao],\n);\n\n// Approach 2\n// Note that you can also sign multiple messages for every requested chain/address pair\nfinal List<Cacao> cacaos = [];\nfor (var chain in newAuthPayload.chains) {\n  final message = _walletKit!.formatAuthMessage(\n    iss: iss,\n    cacaoPayload: cacaoRequestPayload,\n  );\n  final credentials = EthPrivateKey.fromHex('$privateKey');\n  final signature = credentials.signPersonalMessageToUint8List(\n    Uint8List.fromList(message.codeUnits),\n  );\n  final hexSignature = bytesToHex(signature, include0x: true);\n  final cacao = AuthSignature.buildAuthObject(\n    requestPayload: cacaoRequestPayload,\n    signature: CacaoSignature(\n      t: CacaoSignature.EIP191,\n      s: hexSignature,\n    ),\n    iss: iss,\n  );\n  cacaos.add(cacao)\n}\n\n// Approve\nawait _walletKit!.approveSessionAuthenticate(\n  id: args.id,\n  auths: cacaos,\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Connector Images - TypeScript\nDESCRIPTION: Shows how to set or override the images for specific connectors (like Coinbase Wallet, WalletConnect, AppKit Auth) displayed in the modal. This is done using the `connectorImages` option, which is an object mapping connector IDs to image URLs.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/options.mdx#_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\ncreateAppKit({\n  connectorImages: {\n    coinbaseWallet: \"https://images.mydapp.com/coinbase.png\",\n    walletConnect: \"https://images.mydapp.com/walletconnect.png\",\n    appKitAuth: \"https://images.mydapp.com/auth.png\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Pairing Expiry Events in TypeScript\nDESCRIPTION: Code for listening to pairing expiry events using WalletKit's core pairing module. This allows applications to update their UI when a pairing expires, which occurs after 5 minutes for inactive pairings or 30 days for active ones.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/best-practices.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncore.pairing.events.on(\"pairing_expire\", (event) => {\n    // pairing expired before user approved/rejected a session proposal\n    const { topic } = topic;\n});\n```\n\n----------------------------------------\n\nTITLE: Example Implementation of AppKit Notifications\nDESCRIPTION: Demonstrates a basic implementation example of AppKit Notifications to subscribe to and receive notifications in a web application. The code is imported from an external MDX file.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/notifications/frontend-integration/usage.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Example />\n```\n\n----------------------------------------\n\nTITLE: Configuring Reown AppKit in context/appkit.tsx\nDESCRIPTION: Sets up a Reown AppKit instance with Ethers5 adapter, project metadata, and supported networks. It includes configuration for project ID, metadata with application details, and network setup for mainnet and arbitrum. The AppKit component wraps the application for integration.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/ethers5/implementation.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { createAppKit } from \"@reown/appkit/react\";\nimport { Ethers5Adapter } from \"@reown/appkit-adapter-ethers5\";\nimport { mainnet, arbitrum } from \"@reown/appkit/networks\";\n\n// 1. Get projectId at https://cloud.reown.com\nconst projectId = \"YOUR_PROJECT_ID\";\n\n// 2. Create a metadata object\nconst metadata = {\n  name: \"My Website\",\n  description: \"My Website description\",\n  url: \"https://mywebsite.com\", // origin must match your domain & subdomain\n  icons: [\"https://avatars.mywebsite.com/\"],\n};\n\n// 3. Create the AppKit instance\ncreateAppKit({\n  adapters: [new Ethers5Adapter()],\n  metadata: metadata,\n  networks: [mainnet, arbitrum],\n  projectId,\n  features: {\n    analytics: true, // Optional - defaults to your Cloud configuration\n  },\n});\n\nexport function AppKit() {\n  return (\n    <YourApp /> //make sure you have configured the <appkit-button> inside\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Notification via Reown Notify API using JavaScript Fetch\nDESCRIPTION: Example using JavaScript's `fetch` API to send a notification via the Reown Notify API. It demonstrates making a POST request to the `/notify` endpoint, including authentication using a Bearer token (Notify API Secret) and providing the notification details and target accounts in the request body.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/backend-integration.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst PROJECT_ID = \"<PROJECT_ID>\";\nconst NOTIFY_API_SECRET = \"<NOTIFY_API_SECRET>\";\nconst response = await fetch(\n  `https://notify.walletconnect.com/${PROJECT_ID}/notify`,\n  {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${NOTIFY_API_SECRET}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      notification: {\n        type: \"a1e53b95-18e5-4af8-9f03-9308ec87b687\",\n        title: \"The price of Ethereum has risen\",\n        body: \"The price of Ethereum has gone up 10%\",\n        url: \"https://app.example.com\",\n      },\n      accounts: [\"eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029\"],\n    }),\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Updated AppKit v5 Dependencies with pnpm - JavaScript - Bash\nDESCRIPTION: This pnpm command updates JavaScript projects to AppKit v5 by adding @web3modal/wagmi@latest, @wagmi/connectors, @wagmi/core@2.x, and viem@2.x. Prerequisites include Node.js and pnpm. It ensures all relevant AppKit v5 and related dependencies are installed for vanilla JavaScript usage.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/appkitv2.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @web3modal/wagmi@latest @wagmi/connectors @wagmi/core@2.x viem@2.x\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications via Notify API using JavaScript Fetch\nDESCRIPTION: Demonstrates sending a notification using the JavaScript `fetch` API to the `/notify` endpoint. Requires the `PROJECT_ID` and `NOTIFY_API_SECRET` (passed as a Bearer token in the Authorization header). The request body includes notification details and target account IDs.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/notifications/backend-integration.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst PROJECT_ID = \"<PROJECT_ID>\";\nconst NOTIFY_API_SECRET = \"<NOTIFY_API_SECRET>\";\nconst response = await fetch(\n  `https://notify.walletconnect.com/${PROJECT_ID}/notify`,\n  {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${NOTIFY_API_SECRET}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      notification: {\n        type: \"a1e53b95-18e5-4af8-9f03-9308ec87b687\",\n        title: \"The price of Ethereum has risen\",\n        body: \"The price of Ethereum has gone up 10%\",\n        url: \"https://app.example.com\",\n      },\n      accounts: [\"eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029\"],\n    }),\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating pairing URI with WalletConnect iOS SDK\nDESCRIPTION: Generates a pairing URI by calling the asynchronous `create()` method on the Pair instance, which can then be shared with a wallet to initiate pairing.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#_snippet_15\n\nLANGUAGE: Swift\nCODE:\n```\nlet uri = try await Pair.instance.create()\n```\n\n----------------------------------------\n\nTITLE: Getting the Active Account Details in C#\nDESCRIPTION: Demonstrates how to asynchronously retrieve the active user's account information using `AppKit.GetAccountAsync()`. The returned `Account` object contains the address, chain ID (CAIP-2 format), and the full account ID (CAIP-10 format).\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/actions.mdx#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// Get active account in CAIP-10 format\nAccount account = AppKit.GetAccountAsync();\n\nDebug.Log(account.Address); // e.g. '0x12345...'\nDebug.Log(account.ChainId); // e.g. 'eip155:1'\nDebug.Log(account.AccountId); // e.g. 'eip155:1:0x12345...'\n```\n\n----------------------------------------\n\nTITLE: Opening AppKit Modal to Specific Views in TypeScript\nDESCRIPTION: Shows how to open the AppKit modal to different views like 'Account', 'Connect' (optionally filtered by namespace like 'solana', 'bip122', 'eip155'), or 'Swap' with specific arguments using the `modal.open({ view: ..., namespace: ..., arguments: ... })` method. Requires an initialized `modal` instance.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/actions.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmodal.open({ view: \"Account\" });\n\n// to connect and show multi wallets view\nmodal.open({ view: \"Connect\" });\n\n// to connect and show only solana wallets\nmodal.open({ view: \"Connect\", namespace: \"solana\" });\n\n// to connect and show only bitcoin wallets\nmodal.open({ view: \"Connect\", namespace: \"bip122\" });\n\n// to connect and show only ethereum wallets\nmodal.open({ view: \"Connect\", namespace: \"eip155\" });\n\n// to open swap with arguments\nopen({\n  view: 'Swap',\n  arguments: {\n    amount: '321.123',\n    fromToken: 'USDC',\n    toToken: 'ETH'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Emitting Chain Change Events in JavaScript\nDESCRIPTION: Demonstrates how to emit a session event to notify the dapp that the active chain has changed, requiring the topic, event name, and chain ID.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/usage.mdx#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nawait walletKit.emitSessionEvent({\n  topic,\n  event: {\n    name: \"chainChanged\",\n    data: 1,\n  },\n  chainId: \"eip155:1\",\n});\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Dapp via Client API in TypeScript\nDESCRIPTION: This snippet shows how to unsubscribe the current account from the current dapp using the client API. The operation is asynchronous and must be awaited. No parameters are required unless a different account/context is specified elsewhere.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/managing-subscription/javascript.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait client.unsubscribeFromDapp()\n```\n\n----------------------------------------\n\nTITLE: Listening for Relayer Connection State - WalletConnect Typescript\nDESCRIPTION: These Typescript snippets show how to listen for connection state changes to the WalletConnect Relay server using events emitted by 'core.relayer'. The 'relayer_connect' event is triggered upon successful connection, while 'relayer_disconnect' indicates the connection has been lost.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\ncore.relayer.on(\"relayer_disconnect\", () => {\n// connection to the relay server is lost\n})\n```\n\n----------------------------------------\n\nTITLE: Adding WalletConnectUnity Core via Git URL in Unity\nDESCRIPTION: This snippet shows how to add the WalletConnectUnity core package directly from GitHub in Unity's Package Manager using the URL, with instructions on version locking via tags for specific releases.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/overview.mdx#_snippet_9\n\nLANGUAGE: Text\nCODE:\n```\n1. Open add ➕ in Package Manager\n2. Select `Add package from git URL...`\n3. Enter URL:\nhttps://github.com/WalletConnect/WalletConnectUnity.git?path=Packages/com.walletconnect.core\n4. Press `Add`\n# To lock version, append `#{version}`:\nhttps://github.com/WalletConnect/WalletConnectUnity.git?path=Packages/com.walletconnect.core#core/1.0.1\n```\n\n----------------------------------------\n\nTITLE: Tracking Sessions in Swift\nDESCRIPTION: Code showing how to monitor active sessions by subscribing to the sessionsPublisher, which emits updates whenever the sessions list changes.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nSign.instance.sessionsPublisher\n    .receive(on: DispatchQueue.main)\n    .sink { [self self] (sessions: [Session]) in\n        // Reload UI\n    }.store(in: &publishers)\n```\n\n----------------------------------------\n\nTITLE: Encoding transaction call data for sendCalls\nDESCRIPTION: This snippet illustrates how to pre-encode function call data required for sendCalls, contrasting it with writeContractAsync which encodes calls internally. This approach ensures proper call data formation compatible with EIP 5792, supporting advanced transaction batching and execution capabilities.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/switching-to-send-calls.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Call data is pre-encoded at line 12 in the source file\n\n```\n\n----------------------------------------\n\nTITLE: Policy Metadata Configuration for Chain and Time Settings\nDESCRIPTION: Configuration for the root metadata of a policy, specifying supported blockchain networks and the effective time period. These settings define when and where the policy will be active.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/cloud/paymaster.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metadata\": {\n    \"chainIds\": [\n      1,        // Etheruem\n      137,      // Polygon\n      11155111  // Sepolia (Testnet)\n    ],\n    \"startTime\": \"2024-10-23T15:50:00.000Z\",\n    \"endTime\": null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying a Get Balance Button Conditionally in React JSX\nDESCRIPTION: This React JSX snippet conditionally renders a button that triggers a wallet balance check when clicked. It only shows if the user is connected to their wallet, relying on a boolean flag (isConnected). The button invokes either the handleGetBalance or getBalance function.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/solana-send-transaction.mdx#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nreturn (\n  isConnected && (\n    <div>\n      <button onClick={getBalance}>Get Balance</button>\n    </div>\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Import Statements for WalletKit in Android\nDESCRIPTION: Updates import statements from Web3Wallet to WalletKit packages. Changes the package paths from com.walletconnect to com.reown for all Android and wallet-related imports.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/upgrade/from-web3wallet-android.mdx#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n/* highlight-delete-start */\n- import com.walletconnect.android.*\n- import com.walletconnect.web3.wallet.*\n/* highlight-delete-end */\n/* highlight-add-start */\n+ import com.reown.android.*\n+ import com.reown.walletkit.*\n/* highlight-add-end */\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Provider Changes with TypeScript\nDESCRIPTION: Subscribes to changes in the wallet provider's state using `modal.subscribeProvider()`. Requires a callback function that receives an object containing the updated provider, providerType, address, error, chainId, and isConnected status whenever any of these values change.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/solana/actions.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction handleChange({\n  provider,\n  providerType,\n  address,\n  error,\n  chainId,\n  isConnected,\n}) {\n  //...\n}\n\nmodal.subscribeProvider(handleChange);\n```\n\n----------------------------------------\n\nTITLE: Setting Default Chain with Ethers v5 - TypeScript\nDESCRIPTION: Similar to the Ethers example, this shows how to configure the `defaultChain` using a manually created chain object formatted for compatibility with the Ethers v5 library.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/options.mdx#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nconst mainnet = {\n  chainId: 1,\n  name: 'Ethereum',\n  currency: 'ETH',\n  explorerUrl: 'https://etherscan.io',\n  rpcUrl: 'https://cloudflare-eth.com',\n};\n\ncreateAppKit({\n//...\ndefaultChain: mainnet\n})\n```\n\n----------------------------------------\n\nTITLE: Installing @reown/appkit-wallet-button via Bun\nDESCRIPTION: This snippet provides the command to install the Wallet Button package using Bun, supporting users utilizing Bun as their package manager.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/components.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbun a @reown/appkit-wallet-button\n```\n\n----------------------------------------\n\nTITLE: Preparing Chain Abstraction Transaction with WalletKit (TypeScript)\nDESCRIPTION: Defines the abstract method signature for checking if a transaction requires preparatory bridging transactions. It takes a partial transaction object as input and returns a response indicating whether bridging is required or not.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/chain-abstraction.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npublic abstract prepare(params: {\n  transaction: ChainAbstractionTypes.PartialTransaction;\n}): ChainAbstractionTypes.PrepareResponse;\n```\n\n----------------------------------------\n\nTITLE: Full Chain Abstraction Transaction Flow in WalletKit - Swift\nDESCRIPTION: Provides a comprehensive example of the asynchronous workflow for preparing and conditionally executing a chain abstraction transaction using WalletKit. It starts by calling `prepare` to determine if chain abstraction is required, then handles different outcomes by signing transaction hashes and invoking `execute` if the feature is needed or proceeding normally otherwise. It also demonstrates error handling by catching specific prepare errors such as insufficient funds or no routes. This snippet relies on custom signing methods and the WalletKit SDK.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/chain-abstraction.mdx#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nfinal response = await _walletKit.prepare(\n  chainId: chainId, // selected chain id\n  from: from, // sender address\n  call: CallCompat(\n    to: to, // contract address\n    input: input, // calldata\n  ),\n);\nresponse.when(\n  success: (PrepareDetailedResponseSuccessCompat deatailResponse) {\n    deatailResponse.when(\n      available: (UiFieldsCompat uiFieldsCompat) {\n        // If the route is available, present a CA transaction UX flow and sign hashes when approved\n        final TxnDetailsCompat initial = uiFieldsCompat.initial;\n        final List<TxnDetailsCompat> route = uiFieldsCompat.route;\n        \n        final String initialSignature = signHashMethod(initial.transactionHashToSign);\n        final List<String> routeSignatures = route.map((route) {\n          final String rSignature = signHashMethod(route.transactionHashToSign);\n          return rSignature;\n        }).toList();\n\n        await _walletKit.execute(\n          uiFields: uiFields,\n          initialTxnSig: initialSignature,\n          routeTxnSigs: routeSignatures,\n        );\n      },\n      notRequired: (PrepareResponseNotRequiredCompat notRequired) {\n        // user does not need to move funds from other chains\n        // proceeds as normal transaction with notRequired.initialTransaction\n      },\n    );\n  },\n  error: (PrepareResponseError prepareError) {\n    // Show an error\n    // contains prepareError.error as BridgingError and could be either:\n    // noRoutesAvailable, insufficientFunds, insufficientGasFunds\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Enabling debug mode in createAppKit for detailed UI alerts in TypeScript\nDESCRIPTION: Shows how to enable debug mode in AppKit by setting debug to true, which facilitates development by displaying UI alerts and additional debug information. Debug mode is off by default to avoid excessive logging in production.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\ndebug: true;\n```\n\n----------------------------------------\n\nTITLE: Verifying SIWE Signature with AppKit Utility in TypeScript\nDESCRIPTION: Shows usage of the verifySignature function imported from @reown/appkit-siwe-react-native to asynchronously validate a SIWE signature against backend verification logic. The function accepts address, message, signature, chainId, and projectId parameters and returns a boolean indicating the validity of the signature. This utility simplifies off-chain signature validation integrated with the backend.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/siwe.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { verifySignature } from \"@reown/appkit-siwe-react-native\";\n\nconst isValid = await verifySignature({\n  address,\n  message,\n  signature,\n  chainId,\n  projectId,\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Client Account Information with AppKit React Hook in TSX\nDESCRIPTION: This snippet demonstrates how to use the useAppKitAccount hook from the '@reown/appkit/react' package within a React functional component. It exposes the user's wallet address, CAIP-formatted address, and connection status for downstream usage in Dapp UI logic. The only dependency required is the AppKit SDK, and no special initialization is necessary. The hook returns an object including the 'address', 'caipAddress', and 'isConnected' properties; the inputs/outputs correspond directly to wallet state.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/ethers/hooks.mdx#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useAppKitAccount } from \"@reown/appkit/react\";\n\nfunction Components() {\n  const { address, caipAddress, isConnected } = useAppKitAccount();\n\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing reown AppKit with Ethers Adapter (TSX)\nDESCRIPTION: This code demonstrates the basic setup of `reown/appkit` using the `EthersAdapter`. It initializes the AppKit instance with the adapter, supported networks, metadata, and project ID, preparing it for use with the Ethers library.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/custom-connectors.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createAppKit } from \"@reown/appkit/react\";\nimport { EthersAdapter } from \"@reown/appkit-adapter-ethers\";\nimport { sepolia } from \"@reown/appkit/networks\";\n\nconst projectId = \"YOUR_PROJECT_ID\";\n\n// Create a metadata object\nconst metadata = {\n  //...\n};\n\n// Create Ethers adapter\nconst ethersAdapter = new EthersAdapter();\n\n// Create a AppKit instance\ncreateAppKit({\n  adapters: [ethersAdapter],\n  networks: [sepolia],\n  metadata,\n  projectId,\n  features: {\n    analytics: true, // Optional - defaults to your Cloud configuration\n  },\n});\n\n// Now, you can render connect button\nReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement).render(\n  <React.StrictMode>\n    <appkit-button />\n  </React.StrictMode>\n);\n```\n\n----------------------------------------\n\nTITLE: Responding to Session Proposal with Deep Link Redirect in Kotlin\nDESCRIPTION: Handles user approval of session proposals by invoking the Wallet SDK's approveSession method. Upon success, it triggers navigation to the deep link URL provided in the proposal's redirect field, enabling the wallet to respond via deep link.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/mobile-linking.mdx#_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nWalletKit.approveSession(approveProposal,\n        onSuccess = {\n            // trigger deeplink: proposal.redirect\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Paginating Notifications with Client API in TypeScript\nDESCRIPTION: This snippet shows how to fetch notifications using a client object's getNotificationHistory method, implementing pagination by providing the last notification's ID as a cursor. It also demonstrates initialization for infinite scroll, processing updates with a callback, and using pageNotifications for auto-pagination and sorting. Dependencies include a configured client supporting notification methods, and TypeScript support. Inputs include pagination parameters, notification state settings, and an update callback. Outputs are updated notification arrays and pagination functions. Limitation: batch marking is capped at 1000 IDs.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/managing-notifications/javascript.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst notificationsPage = client.getNotificationHistory({\n  limit: 3,\n  // The `id` of the last notification, for example:\n  startingAfter: 'some-notification-id'\n})\n\nconst notificationsPerPage = 5\nconst isInfiniteScroll = true\nconst unreadFirst = true\n\nlet notifications = []\n\nconst onUpdate = ({notifications: fetchedNotifications}: GetNotificationsReturn) => {\n  notifications = fetchedNotifications\n}\n\nconst {\n  nextPage,\n  markNotificationAsRead,\n  markAllNotificationsAsRead\n} = client.pageNotifications(\n  notificationsPerPage,\n  isInfiniteScroll,\n  specifiedAccount // OR undefined,\n  specifiedDomain // OR undefined,\n  unreadFirst\n)(onUpdate)\n\n\n// marking a single notification as read\nawait notifications[0].markAsRead();\n\n// mark specific notifications as read\nawait markNotificationsAsRead(notifications.slice(2).map(n => n.id));\n\n// mark all notifications as read\nawait markAllNotificationsAsRead();\n```\n\n----------------------------------------\n\nTITLE: Approving WalletConnect Session Authentication Requests in TypeScript\nDESCRIPTION: Provides two approaches for approving authentication requests after user consent. Approach 1 signs a single message for the primary chain specified by `iss` and uses `buildAuthObject` to create the authentication object before calling `walletKit.approveSessionAuthenticate`. Approach 2 demonstrates signing separate messages for each chain requested in the `authPayload`, building multiple authentication objects, and approving with the array of `auths`. Both approaches require a signing mechanism (`cryptoWallet.signMessage`) and the `buildAuthObject` utility (implicitly from WalletConnect).\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/one-click-auth.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Approach 1\n// Sign the authentication message(s) to create a verifiable authentication object(s)\nconst signature = await cryptoWallet.signMessage(message, privateKey);\n// Build the authentication object(s)\nconst auth = buildAuthObject(\n  authPayload,\n  {\n    t: \"eip191\",\n    s: signature,\n  },\n  iss\n);\n\n// Approve\nawait walletKit.approveSessionAuthenticate({\n  id: payload.id,\n  auths: [auth],\n});\n\n// Approach 2\n// Note that you can also sign multiple messages for every requested chain/address pair\nconst auths = [];\nauthPayload.chains.forEach(async (chain) => {\n  const message = walletKit.formatAuthMessage({\n    request: authPayload,\n    iss: `${chain}:${cryptoWallet.address}`,\n  });\n  const signature = await cryptoWallet.signMessage(message);\n  const auth = buildAuthObject(\n    authPayload,\n    {\n      t: \"eip191\", // signature type\n      s: signature,\n    },\n    `${chain}:${cryptoWallet.address}`\n  );\n  auths.push(auth);\n});\n\n// Approve\nawait walletKit.approveSessionAuthenticate({\n  id: payload.id,\n  auths,\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Notifications in React\nDESCRIPTION: This React component snippet facilitates the display and control of notifications, including subscribing and handling notification events. It interacts with the notifications API to ensure real-time notification management.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/notifications/frontend-integration/api.mdx#_snippet_4\n\nLANGUAGE: MDX\nCODE:\n```\n<ManagingNotifications />\n```\n\n----------------------------------------\n\nTITLE: Using useAppKitProvider Hook with Ethers.js Signer in React Native\nDESCRIPTION: This snippet shows how to employ useAppKitProvider to access the walletProvider and perform message signing with Ethers.js' BrowserProvider and Signer. It highlights initializing a provider, obtaining a signer, and signing a message, which enables wallet interaction functionalities within React components.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers/hooks.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { BrowserProvider } from \"ethers\";\nimport { useAppKitProvider } from \"@reown/appkit-ethers-react-native\";\n\nfunction Components() {\n  const { walletProvider } = useAppKitProvider();\n\n  async function onSignMessage() {\n    const ethersProvider = new BrowserProvider(walletProvider);\n    const signer = await ethersProvider.getSigner();\n    const message = \"hello appkit rn + ethers\";\n    const signature = await signer.signMessage(message);\n    console.log(signature.toString());\n  }\n\n  return <button onClick={() => onSignMessage()}>Sign Message</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Rejecting Session Proposal - WalletKit - Kotlin\nDESCRIPTION: Rejects a received session proposal from a dapp. Requires the proposer's public key, a reason string, and a rejection code, referencing CAIP-25 for standard codes.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/usage.mdx#_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval proposerPublicKey: String = /*Proposer publicKey from SessionProposal object*/\nval rejectionReason: String = /*The reason for rejecting the Session Proposal*/\nval rejectionCode: String = /*The code for rejecting the Session Proposal*/\nFor reference use CAIP-25: https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-25.md\n\nval rejectParams: Wallet.Params.SessionReject = SessionReject(proposerPublicKey, rejectionReason, rejectionCode)\nWalletKit.rejectSession(rejectParams) { error -> /*callback for error while rejecting a session*/ }\n```\n\n----------------------------------------\n\nTITLE: Configuring Client-Side SIWE with @reown/appkit-siwe (Legacy)\nDESCRIPTION: This code provides a legacy configuration example for client-side SIWE using `@reown/appkit-siwe`. It shows how to manually construct a SIWE message using the base `siwe` library within the `createMessage` function. Placeholder implementations are provided for `getSession`, `getNonce`, `verifyMessage`, and `signOut`, indicating that the user must implement these functions, typically by interacting with a backend.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/siwe/code.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { SiweMessage } from 'siwe'\nimport type { SIWECreateMessageArgs, SIWEVerifyMessageArgs } from '@reown/appkit-siwe'\n\n/* Function that creates a SIWE message */\nfunction createMessage({ nonce, address, chainId }: SIWECreateMessageArgs){\n  const message = new SiweMessage({\n    version: '1',\n    domain: window.location.host,\n    uri: window.location.origin,\n    address,\n    chainId,\n    nonce,\n    statement: 'Sign in With Ethereum.'\n  })\n\n  return message.prepareMessage()\n}\n\n/* Function that returns the user's session */\nasync function getSession(){\n  //...\n}\n\n/* Use your SIWE server to verify if the message and the signature are valid */\nasync function verifyMessage({ message, signature }: SIWEVerifyMessageArgs){\n  try {\n    const isValid = await validateMessage({ message, signature })\n\n    return isValid\n  } catch (error) {\n    return false\n  }\n},\n\n/* Create a SIWE configuration object */\nexport const siweConfig = createSIWEConfig({\n  createMessage,\n  getNonce: async () => { //This is only an example, substitute it with your actual nonce getter.\n    const nonce = \"YOUR_NONCE_GETTER\"\n    if (!nonce) {\n      throw new Error('Failed to get nonce!')\n    }\n    return nonce\n  },\n  getSession,\n  verifyMessage,\n  signOut: async () => { //Example\n    // Implement your Sign out function\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Wagmi adapter for JavaScript\nDESCRIPTION: Configure the Wagmi adapter for JavaScript applications with networks and project ID. This adapter connects AppKit to the Wagmi library in vanilla JavaScript context.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nconst projectId = 'YOUR_PROJECT_ID'\nconst queryClient = new QueryClient()\n\nconst metadata = { //optional\n    name: 'AppKit',\n    description: 'AppKit Example',\n    url: 'https://example.com',\n    icons: ['https://avatars.githubusercontent.com/u/179229932']\n}\n\n// Remove the existing Wagmi Config\n- const wagmiConfig = defaultWagmiConfig({ chains, projectId, metadata })\n\n// Create the Wagmi adapter\n+ const wagmiAdapter = new WagmiAdapter({\n  networks: [mainnet, arbitrum],\n  projectId\n})\n```\n\n----------------------------------------\n\nTITLE: Installing WalletConnect Flutter Package\nDESCRIPTION: This code snippet shows how to add the WalletConnect Flutter package to a Flutter project via pubspec. It emphasizes platform-specific permissions, particularly for macOS, to enable WebSocket connections necessary for WalletConnect functionality.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/overview.mdx#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nflutter pub add walletconnect_flutter_v2\n```\n\n----------------------------------------\n\nTITLE: Launching Connected Wallet App (Swift)\nDESCRIPTION: Opens the wallet application that is currently connected to the dapp by calling the `launchCurrentWallet` method on the `AppKit` instance. This is typically used to direct the user to the wallet for interaction.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/actions.mdx#_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nAppKit.instance.launchCurrentWallet()\n```\n\n----------------------------------------\n\nTITLE: Approving Authentication Requests in TypeScript\nDESCRIPTION: Code demonstrating two approaches for signing authentication messages and creating sessions. The first approach uses a single signature, while the second signs messages for each requested chain/address pair.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Approach 1\n// Sign the authentication message(s) to create a verifiable authentication object(s)\nconst signature = await cryptoWallet.signMessage(message, privateKey);\n// Build the authentication object(s)\nconst auth = buildAuthObject(\n  authPayload,\n  {\n    t: \"eip191\",\n    s: signature,\n  },\n  iss\n);\n\n// Approve\nawait walletKit.approveSessionAuthenticate({\n  id: payload.id,\n  auths: [auth],\n});\n\n// Approach 2\n// Note that you can also sign multiple messages for every requested chain/address pair\nconst auths = [];\nauthPayload.chains.forEach(async (chain) => {\n  const message = walletKit.formatAuthMessage({\n    request: authPayload,\n    iss: `${chain}:${cryptoWallet.address}`,\n  });\n  const signature = await cryptoWallet.signMessage(message);\n  const auth = buildAuthObject(\n    authPayload,\n    {\n      t: \"eip191\", // signature type\n      s: signature,\n    },\n    `${chain}:${cryptoWallet.address}`\n  );\n  auths.push(auth);\n});\n\n// Approve\nawait walletKit.approveSessionAuthenticate({\n  id: payload.id,\n  auths,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing AppKit Modal with Wagmi and React Query in React Native (TypeScript)\nDESCRIPTION: This snippet sets up the foundational AppKit modal for wallet connection by importing required packages like @walletconnect/react-native-compat, WagmiProvider, chains from @wagmi/core, and React Query's QueryClient. It defines the project ID, metadata, chains array, and creates the wagmiConfig using defaultWagmiConfig. Then, it calls createAppKit with the prepared configuration, including optional parameters like defaultChain and enableAnalytics. The snippet exports a React functional component that wraps the app in WagmiProvider and QueryClientProvider, rendering the AppKit component to enable wallet connection functionality. Note: it's important to import @walletconnect/react-native-compat before wagmi to avoid compatibility issues.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/wagmi/about/implementation.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"@walletconnect/react-native-compat\";\nimport { WagmiProvider } from \"wagmi\";\nimport { mainnet, polygon, arbitrum } from \"@wagmi/core/chains\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport {\n  createAppKit,\n  defaultWagmiConfig,\n  AppKit,\n} from \"@reown/appkit-wagmi-react-native\";\n\n// 0. Setup queryClient\nconst queryClient = new QueryClient();\n\n// 1. Get projectId at https://cloud.reown.com\nconst projectId = \"YOUR_PROJECT_ID\";\n\n// 2. Create config\nconst metadata = {\n  name: \"AppKit RN\",\n  description: \"AppKit RN Example\",\n  url: \"https://reown.com/appkit\",\n  icons: [\"https://avatars.githubusercontent.com/u/179229932\"],\n  redirect: {\n    native: \"YOUR_APP_SCHEME://\",\n    universal: \"YOUR_APP_UNIVERSAL_LINK.com\",\n  },\n};\n\nconst chains = [mainnet, polygon, arbitrum] as const;\n\nconst wagmiConfig = defaultWagmiConfig({ chains, projectId, metadata });\n\n// 3. Create modal\ncreateAppKit({\n  projectId,\n  wagmiConfig,\n  defaultChain: mainnet, // Optional\n  enableAnalytics: true, // Optional - defaults to your Cloud configuration\n});\n\nexport default function App() {\n  return (\n    <WagmiProvider config={wagmiConfig}>\n      <QueryClientProvider client={queryClient}>\n        // Rest of your app...\n        <AppKit />\n      </QueryClientProvider>\n    </WagmiProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rejecting Session Requests in JavaScript\nDESCRIPTION: Shows how to properly reject a session request by creating an error response with the appropriate error code and message.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/usage.mdx#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = {\n  id,\n  jsonrpc: \"2.0\",\n  error: {\n    code: 5000,\n    message: \"User rejected.\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Features with Ethers in AppKit\nDESCRIPTION: Shows how to configure email and social login authentication with the Ethers adapter in AppKit. Note that Ethers v5 doesn't support social logins and requires upgrading to v6.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/socials.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst modal = createAppKit({\n  adapters: [wagmiAdapter],\n  projectId,\n  networks: [mainnet, arbitrum],\n  metadata,\n  features: {\n    email: true, // default to true\n    socials: [\n      \"google\",\n      \"x\",\n      \"github\",\n      \"discord\",\n      \"apple\",\n      \"facebook\",\n      \"farcaster\",\n    ],\n    emailShowWallets: true, // default to true\n  },\n  allWallets: \"SHOW\", // default to SHOW\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Reown AppKit Modal with Custom Configuration in React Native (TypeScript)\nDESCRIPTION: This snippet shows how to import prerequisites such as @walletconnect/react-native-compat and @ethersproject/shims before setting up Reown's AppKit with a project-specific configuration. It defines project metadata, blockchain chains including Ethereum and Polygon, and creates an AppKit modal instance using createAppKit. The snippet also exports a React component rendering the AppKit UI modal. Dependencies include @reown/appkit-ethers5-react-native and proper project ID setup. Inputs include chain configurations and metadata; outputs are the initialized modal component. It assumes React Native environment and enables optional analytics.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers5/about/implementation.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"@walletconnect/react-native-compat\";\nimport \"@ethersproject/shims\";\n\nimport {\n  createAppKit,\n  defaultConfig,\n  AppKit,\n} from \"@reown/appkit-ethers5-react-native\";\n\n// 1. Get projectId from https://cloud.reown.com\nconst projectId = \"YOUR_PROJECT_ID\";\n\n// 2. Create config\nconst metadata = {\n  name: \"AppKit RN\",\n  description: \"AppKit RN Example\",\n  url: \"https://reown.com/appkit\",\n  icons: [\"https://avatars.githubusercontent.com/u/179229932\"],\n  redirect: {\n    native: \"YOUR_APP_SCHEME://\",\n  },\n};\n\nconst config = defaultConfig({ metadata });\n\n// 3. Define your chains\nconst mainnet = {\n  chainId: 1,\n  name: \"Ethereum\",\n  currency: \"ETH\",\n  explorerUrl: \"https://etherscan.io\",\n  rpcUrl: \"https://cloudflare-eth.com\",\n};\n\nconst polygon = {\n  chainId: 137,\n  name: \"Polygon\",\n  currency: \"MATIC\",\n  explorerUrl: \"https://polygonscan.com\",\n  rpcUrl: \"https://polygon-rpc.com\",\n};\n\nconst chains = [mainnet, polygon];\n\n// 4. Create modal\ncreateAppKit({\n  projectId,\n  chains,\n  config,\n  enableAnalytics: true, // Optional - defaults to your Cloud configuration\n});\n\nexport default function App() {\n  return (\n    <>\n      // Rest of your app...\n      <AppKit />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Reown AppKit (React/TypeScript)\nDESCRIPTION: This snippet shows how to replace the Web3Modal `createWeb3Modal` call with the Reown AppKit `createAppKit` function in a React context. It demonstrates passing configuration options, including the new `adapters` array (containing `Ethers5Adapter`), the `networks` array, `metadata`, `projectId`, and `features`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers5-web.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following code line\n- createWeb3Modal({ ... })\n\n// Add the following code lines\n+ createAppKit({\n adapters: [new Ethers5Adapter()],\n networks: [mainnet, arbitrum],\n metadata,\n projectId,\n features: {\n   analytics: true,\n }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with Ethers v6 using pnpm\nDESCRIPTION: Command for custom installation of Reown AppKit with Ethers v6 adapter using pnpm package manager. Installs required dependencies including ethers v6.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/installation.mdx#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit @reown/appkit-adapter-ethers ethers\n```\n\n----------------------------------------\n\nTITLE: Updating Import Statements in Vue\nDESCRIPTION: Changes required in the import statements when migrating from Web3Modal v5 to Reown AppKit in Vue applications.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers-web.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following imports\n- import { createWeb3Modal, defaultConfig } from \"@web3modal/ethers/vue\";\n\n// Add the following imports\n+ import { createAppKit } from \"@reown/appkit/vue\";\n+ import { arbitrum, mainnet } from \"@reown/appkit/networks\";\n+ import { EthersAdapter } from \"@reown/appkit-adapter-ethers\";\n```\n\n----------------------------------------\n\nTITLE: Initiating Pairing WalletKit Kotlin\nDESCRIPTION: This snippet demonstrates how to initiate the pairing process in a wallet application using the WalletKit client. It requires a pairing URI, typically obtained by scanning a QR code. The callbacks handle successful subscription to the pairing topic and errors that might occur during the process.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/best-practices.mdx#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval pairingParams = Wallet.Params.Pair(pairingUri)\nWalletKit.pair(pairingParams, \n    onSuccess = {\n        //Subscribed on the pairing topic successfully. Wallet should await for a session proposal\n    },\n    onError = { error ->\n        //Some error happens while pairing - check Expected errors section\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing Chain Abstraction with WalletKit in Swift\nDESCRIPTION: This snippet demonstrates how to call the prepare method of WalletKit to determine if chain abstraction is required for a transaction. It involves specifying chain id, sender, and call details. The response handles success (available or not required) and error cases, preparing for subsequent execution or user notification.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/docs/walletkit/flutter/early-access/chain-abstraction.mdx#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nFuture<PrepareDetailedResponseCompat> prepare({\n  required String chainId,\n  required String from,\n  required CallCompat call,\n  Currency? localCurrency,\n});\n```\n\n----------------------------------------\n\nTITLE: Import Hooks and Classes for Solana Network Interaction\nDESCRIPTION: Imports hooks `useWeb3ModalAccount` and `useWeb3ModalProvider`, as well as essential classes from @solana/web3.js, to facilitate reading accounts, sending transactions, and establishing network connections within React components.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-anza-adapter-react.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useWeb3ModalAccount, useWeb3ModalProvider } from '@web3modal/solana/react'\nimport { PublicKey, Transaction, SystemProgram, Connection } from '@solana/web3.js'\n```\n\n----------------------------------------\n\nTITLE: Sending ERC20 Tokens using AppKit.Evm in C#\nDESCRIPTION: Demonstrates sending ERC20 tokens by interacting with the 'transfer' function of a smart contract. It requires the contract address, ABI, recipient address, and amount. The example first estimates the required gas using `AppKit.Evm.EstimateGasAsync` and then sends the transaction using `AppKit.Evm.WriteContractAsync`. This operation modifies the blockchain state and requires user confirmation and gas fees.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/usage.mdx#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nconst string contractAddress = \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\";\nconst string recipientAddress = \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\";\nconst string abi = \"...\"; // ABI of the ERC20 token contract\n\nBigInteger amount = 1;\n\n// Arguments for the transfer method. The order of the arguments must match the order in the method signature.\n// Method signature: `function transfer(address _to, uint256 _value) public returns (bool success)`\nvar arguments = new object[]\n{\n    recipientAddress,\n    amount\n};\n\n// Estimate gas amount\nvar gasAmount = await AppKit.Evm.EstimateGasAsync(contractAddress, abi, \"transfer\", arguments: arguments);\n\n// Send transaction\nvar result = await AppKit.Evm.WriteContractAsync(contractAddress, abi, \"transfer\", gasAmount, arguments);\n```\n\n----------------------------------------\n\nTITLE: Preparing Authentication Payload with populateAuthPayload (TypeScript)\nDESCRIPTION: This snippet imports utility functions and constructs an authentication payload supporting specified Solana chains and methods. It then formats the authentication message with the 'formatAuthMessage' method, including the CAIP10-compliant issuer, readying it for user presentation and signature. Dependencies include '@walletconnect/utils' and 'walletKit'.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/one-click-auth-siws.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { populateAuthPayload } from \"@walletconnect/utils\";\n\n// Solana chains that your wallet supports\nconst supportedChains = [ \"solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp\", \"solana:4sGjMW1sUnHzSxGspuhpqLDx6wiyjNtZ\" ]\n// Solana methods that your wallet supports\nconst supportedMethods = [\"solana_signMessage\", \"solana_signTransaction\"];\n// Populate the authentication payload with the supported chains and methods\nconst authPayload = populateAuthPayload({\n  authPayload: payload.params.authPayload,\n  chains: supportedChains,\n  methods: supportedMethods,\n});\n// Prepare the issuer in CAIP10 format\nconst iss = `solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp:8nJ694gNrHx76L2eyJzQw7JBGRoW8Fdtrxf588pEqyYh`;\n// Format the authentication message\nconst message = walletKit.formatAuthMessage({\n  request: authPayload,\n  iss\n});\n// Present the message to the user\n...\n```\n\n----------------------------------------\n\nTITLE: Processing and Decrypting Push Notifications with WalletKit\nDESCRIPTION: Code to extract information from incoming push notifications, decrypt the message payload, and access metadata about the dapp that initiated the request. This enables customized notification handling based on request type.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/push.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WalletKit } from '@reown/walletkit';\nimport messaging from '@react-native-firebase/messaging';\n\nmessaging().onMessage(async notification => {\n    // get the topic, encrypted message & tag from the notification payload\n    const { topic, message, tag } = notification.data;\n\n    // decrypt the message\n    // note this is static method and can be called without initializing the walletKit\n    const decryptedMessage = await WalletKit.notifications.decryptMessage({\n    topic,\n    encryptedMessage: message,\n  });\n\n    /*\n    * `decryptedMessage` is JsonRpcRequest object, with the full payload of the incoming request such as method, params, id, etc.\n    * You can use it to emit local push notification with the request to the user and ask for their approval.\n    **/\n\n   /*\n   * the metadata contains name, description, icon and url of the dapp that initiated the request\n   * note that only notifications with tag `1108`(session requests) will have metadata,\n   **/\n   let metadata\n\n   if(tag == 1108) {\n        metadata = await WalletKit.notifications.getMetadata({ topic });\n   } else {\n        // session proposals contain metadata in the request itself\n        metadata = decryptedMessage.params.proposer.metadata\n   }\n\n    // with this information you can show a local push notification to the user\n   ...\n});\n```\n\n----------------------------------------\n\nTITLE: Obtaining FCM Device Token in React Native\nDESCRIPTION: Code to retrieve the Firebase Cloud Messaging device token necessary for registering with WalletConnect's Push Server. This token uniquely identifies the device for push notification delivery.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/push.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport messaging from '@react-native-firebase/messaging'\n\nconst token = await messaging().getToken()\n```\n\n----------------------------------------\n\nTITLE: Approving Session Proposal WalletKit Kotlin\nDESCRIPTION: This snippet demonstrates the wallet's action to approve a received session proposal. It involves calling `approveSession` and handling the asynchronous result via callbacks. Success indicates the response was sent, and the UI should be updated, possibly showing a loading state until the session is settled.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/best-practices.mdx#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n WalletKit.approveSession(approveProposal,\n    onSuccess = {\n        //Session approval response was sent successfully - update your UI\n    }\n    onError = { error ->\n        //Error while sending session approval - update your UI\n    })\n```\n\n----------------------------------------\n\nTITLE: Fetching All Subscribers via Notify API using cURL\nDESCRIPTION: Demonstrates retrieving all subscriber accounts using a cURL command. It sends a GET request to the `https://notify.walletconnect.com/<PROJECT_ID>/subscribers` endpoint, authenticating with the `NOTIFY_API_SECRET` via the Authorization header. This endpoint is rate-limited due to its potential expense.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/notifications/backend-integration.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://notify.walletconnect.com/<PROJECT_ID>/subscribers' \\\n  --header 'Authorization: Bearer <NOTIFY_API_SECRET>'\n```\n\n----------------------------------------\n\nTITLE: Approving a Session in JavaScript\nDESCRIPTION: Demonstrates how to subscribe to session proposal events and approve connections with dapps by using either generated namespaces or custom-approved namespaces.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/usage.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n_walletKit.onSessionProposal.subscribe((SessionProposalEvent? event) {\n  // display a prompt for the user to approve or reject the session\n  // ....\n  // If approved\n  _walletKit.approveSession(\n    id: event.id,\n    namespaces: // event.params.generatedNamespaces! or approvedNamespaces,\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Launching Connected Wallet using Reown AppKit (Dart)\nDESCRIPTION: Calls the `launchConnectedWallet` method on the `_appKitModal` instance. This function attempts to open the native wallet application that the dApp is currently connected to, typically via a deep link. It is useful for allowing users to switch to their wallet app.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/actions.mdx#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\n_appKitModal.launchConnectedWallet();\n```\n\n----------------------------------------\n\nTITLE: Importing Blockchain Networks from AppKit in JavaScript\nDESCRIPTION: Demonstrates how to import predefined blockchain network objects available within the `@reown/appkit/networks` module. These networks are based on Viem and can be used in the `createAppKit` configuration or other parts of your application that require network definitions.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/wagmi/about/implementation.mdx#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { createAppKit } from '@reown/appkit'\nimport { mainnet, arbitrum, base, scroll, polygon } from '@reown/appkit/networks'\n```\n\n----------------------------------------\n\nTITLE: Handling Session Proposal Expiry WalletKit Kotlin\nDESCRIPTION: This snippet demonstrates implementing `WalletKit.WalletDelegate` to listen for session proposal expiry events. When a proposal expires (after 5 minutes), this event is triggered, allowing the wallet application to remove the proposal modal from the UI.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/best-practices.mdx#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval walletDelegate = object : WalletKit.WalletDelegate {\n    override fun onProposalExpired(proposal: Wallet.Model.ExpiredProposal) {\n            //Here this event is triggered when a proposal expires - update your UI\n    }\n    ...other callbacks\n}\nWalletKit.setWalletDelegate(walletDelegate)\n```\n\n----------------------------------------\n\nTITLE: Rejecting Session Proposal WalletKit Kotlin\nDESCRIPTION: This snippet shows how a wallet rejects a received session proposal. The `rejectSession` method is called with the necessary rejection details. The callbacks handle the result of sending the rejection response, prompting UI updates based on success or failure.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/best-practices.mdx#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n WalletKit.rejectSession(reject,\n    onSuccess = {\n        //Session rejection response was sent successfully - update your UI\n    },\n    onError = { error ->\n          //Error while sending session rejection - update your UI\n    })\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom SIWXStorage Interface for Session Management (TypeScript)\nDESCRIPTION: Implements the SIWXStorage interface to manage authentication sessions for multiple chains and accounts. Requires SIWXSession and SIWXStorage types from @reown/appkit-core and @reown/appkit-siwx. All storage methods (add, set, get, delete) are async and interact with a custom persistence layer (e.g. database, local storage). Inputs are sessions, chainId, and address; outputs depend on the method (sessions list, void). Asynchronous methods must be implemented to match your storage strategy.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/siwx/siwx-default.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { SIWXSession } from \"@reown/appkit-core\";\nimport type { SIWXStorage } from \"@reown/appkit-siwx\";\n\nexport class MyStorage implements SIWXStorage {\n  add(session: SIWXSession): Promise<void> {\n    // Implement your logic to add a session\n  }\n\n  set(sessions: SIWXSession[]): Promise<void> {\n    // Implement your logic to set sessions\n  }\n\n  get(chainId: CaipNetworkId, address: string): Promise<SIWXSession[]> {\n    // Implement your logic to get sessions\n    return [];\n  }\n\n  delete(chainId: string, address: string): Promise<void> {\n    // Implement your logic to delete a session\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Chain Adapters in Reown AppKit with JSX\nDESCRIPTION: This code demonstrates how to set up a multi-chain environment in AppKit by creating different chain adapters. It shows the creation of a Wagmi adapter for EVM chains and a Solana adapter with wallet integrations.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-w3m-to-reown.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// 1. Create the Wagmi adapter\nexport const wagmiAdapter = new WagmiAdapter({\n  ssr: true,\n  projectId,\n  networks,\n});\n\n// 2. Create Solana adapter\nconst solanaWeb3JsAdapter = new SolanaAdapter({\n  wallets: [new PhantomWalletAdapter(), new SolflareWalletAdapter()],\n});\n```\n\n----------------------------------------\n\nTITLE: Rejecting a Session Proposal - Swift\nDESCRIPTION: This code demonstrates how to reject a session proposal with a reason indicating user rejection. It handles potential errors to inform the user about issues such as network problems or expired proposals. Facilitates user decision rejection in the session proposal flow. Dependencies include WalletKit SDK.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/best-practices.mdx#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\ndo {\n    try await WalletKit.instance.reject(proposalId: proposal.id, reason: .userRejected)\n    // Update UI, remove loader\n} catch {\n    // present error\n}\n```\n\n----------------------------------------\n\nTITLE: Reading ERC20 Token Balance using AppKit.Evm in C#\nDESCRIPTION: Illustrates how to query the balance of an ERC20 token for a specific owner address using `AppKit.Evm.ReadContractAsync`. This requires the token's contract address and ABI. It reads both the 'balanceOf' and 'decimals' functions and calculates the final balance by adjusting for the token's decimals. This is a read-only operation and does not require a transaction.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/usage.mdx#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nconst string contractAddress = \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\";\nconst string ownerAddress = \"0x3D30B1aB88D487B0F3061F40De76845Bec3F1e94\";\nconst string abi = \"...\"; // ABI of the ERC20 token contract\n\nvar evm = AppKit.Evm;\nvar balance = await evm.ReadContractAsync<BigInteger>(contractAddress, abi, \"balanceOf\", new object[]\n{\n    ownerAddress\n});\nvar decimals = await evm.ReadContractAsync<BigInteger>(contractAddress, abi, \"decimals\");\n\nvar finalBalance = tokenBalance / BigInteger.Pow(10, tokenDecimal);\n```\n\n----------------------------------------\n\nTITLE: Accessing Wallet Info with useWalletInfo in TypeScript\nDESCRIPTION: Demonstrates importing and using the `useWalletInfo` hook from `@reown/appkit/react` within a React component to retrieve information about the currently connected wallet.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/hooks.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWalletInfo } from '@reown/appkit/react'\n\n\nexport default Component(){\n  const { walletInfo } = useWalletInfo()\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing WalletConnect SignClient Instance - Flutter (Dart)\nDESCRIPTION: Illustrates the asynchronous creation of a SignClient instance in Flutter via SignClient.createInstance. It requires relayUrl, projectId, and metadata (app information for pairing). This setup is foundational and must be completed before making connection or authentication requests. Dependencies include the walletconnect_dart Flutter package. The resulting SignClient enables further session interactions.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_29\n\nLANGUAGE: dart\nCODE:\n```\nSignClient signClient = await SignClient.createInstance(\n    relayUrl: 'wss://relay.walletconnect.com', // The relay websocket URL, leave blank to use the default\n    projectId: '123',\n    metadata: PairingMetadata(\n        name: 'dapp (Requester)',\n        description: 'A dapp that can request that transactions be signed',\n        url: 'https://walletconnect.com',\n        icons: ['https://avatars.githubusercontent.com/u/37784886'],\n    ),\n);\n```\n\n----------------------------------------\n\nTITLE: Verifying SIWE Signature using Viem (Server Side)\nDESCRIPTION: This snippet demonstrates how to use the `viem` library's `publicClient.verifyMessage` function to validate a SIWE signature on the server. It connects to a WalletConnect RPC endpoint and verifies the signature against the provided message and address. The comments explain why using `viem` is recommended for certain social login or email-based smart account scenarios over the `@reown/appkit-siwe` built-in verification.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/siwe/code.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createPublicClient, http } from \"viem\";\n\nconst publicClient = createPublicClient({\n  transport: http(\n    `https://rpc.walletconnect.org/v1/?chainId=${chainId}&projectId=${projectId}`\n  ),\n});\nconst isValid = await publicClient.verifyMessage({\n  message,\n  address: address as `0x${string}`,\n  signature: signature as `0x${string}`,\n});\n\n// The verifySignature is not working with social logins and emails with non deployed smart accounts\n// for this reason we recommend using the viem to verify the signature\n// import { verifySignature } from '@reown/appkit-siwe'\n// const isValid = await verifySignature({ address, message, signature, chainId, projectId })\n```\n\n----------------------------------------\n\nTITLE: React Component for Managing Subscriptions\nDESCRIPTION: This snippet renders the Managing React component, providing UI for managing user subscriptions to notifications. It enables subscription creation, modification, and cancellation, interfacing with backend services via the included modules.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/frontend-integration/api.mdx#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n<Managing />\n```\n\n----------------------------------------\n\nTITLE: Initializing WalletKit with Core and Metadata in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize the WalletKit SDK by creating a Core instance with a projectId and then creating a WalletKit instance with metadata. The code ensures that the WalletKit instance is available globally for session management and wallet operations.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/usage.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Core } from \"@walletconnect/core\";\nimport { WalletKit } from \"@reown/walletkit\";\n\nconst core = new Core({\n  projectId: process.env.PROJECT_ID,\n});\n\nconst walletKit = await WalletKit.init({\n  core, // Share core instance across sessions\n  metadata: {\n    name: \"Demo app\",\n    description: \"Demo Client as Wallet/Peer\",\n    url: \"https://reown.com/walletkit\",\n    icons: [],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing WalletConnectModal Android\nDESCRIPTION: This Kotlin snippet demonstrates initializing the CoreClient and then the WalletConnectModal client for Android. It requires a project ID, connection type, application context, and app metadata. Callbacks are included for success/error handling.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval connectionType = ConnectionType.AUTOMATIC or ConnectionType.MANUAL\nval projectId = \"\" // Get Project ID at https://cloud.reown.com/\nval appMetaData = Core.Model.AppMetaData(\n    name = \"Kotlin.WalletConnectModal\",\n    description = \"Kotlin WalletConnectModal Implementation\",\n    url = \"kotlin.walletconnect.com\",\n    icons = listOf(\"https://raw.githubusercontent.com/WalletConnect/walletconnect-assets/master/Icon/Gradient/Icon.png\"),\n    redirect = \"kotlin-modal://request\"\n)\n\nCoreClient.initialize(projectId = projectId, connectionType = connectionType, application = this, metaData = appMetaData)\n\nWalletConnectModal.initialize(\n    init = Modal.Params.Init(CoreClient),\n    onSuccess = {\n        // Callback will be called if initialization is successful\n     },\n    onError = { error ->\n        // Error will be thrown if there's an issue during initialization\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: solana_requestAccounts - Request Wallet Accounts Using JSON-RPC\nDESCRIPTION: This method requests access to wallet accounts, returning an array of account objects with public keys. It requires no parameters and provides a similar output to `solana_getAccounts`. The implementation depends on the Solana JSON-RPC interface and wallet provider integration.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/solana-rpc.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Request\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"solana_getAccounts\",\n  \"params\": {}\n}\n\n// Result\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": [{ \"pubkey\": \"722RdWmHC5TGXBjTejzNjbc8xEiduVDLqZvoUGz6Xzbp\" }]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Wallet Account with Notify API in JavaScript\nDESCRIPTION: This snippet shows how to register a wallet account with the Notify API by signing a SIWE message. It includes account registration checks, preparing registration data, signing the message, and submitting registration. This process is required only once per account.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/notify/usage.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst account = `eip155:1:0x63Be2c680685d2A9620c11b0068291261aa62d76`;\nconst domain = 'app.mydomain.com';\nconst allApps = true; // authorize for all domains\n\n// Check if account is already registered\nif (notifyClient.isRegistered({ account, domain, allApps })) return;\n\nconst { registerParams, message } = notifyClient.prepareRegistration({\n  account,\n  domain,\n  allApps\n});\n\nconst signature = await ethersWallet.signMessage(message);\n\nawait notifyClient.register({\n  registerParams,\n  signature,\n});\n```\n\n----------------------------------------\n\nTITLE: Sample Usage of Chain Abstraction Prepare and Execute Methods\nDESCRIPTION: Demonstrates a complete workflow for handling transactions with chain abstraction. First, it checks if chain abstraction is needed using 'prepare'. If required, it signs all bridging transactions and the initial transaction, then calls 'execute' to perform the cross-chain operations. This example assumes the presence of wallet signing functions and transaction parameters.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/chain-abstraction.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Check if chain abstraction is needed\nconst result = await walletKit.chainAbstraction.prepare({\n  transaction: {\n    from: transaction.from as `0x${string}`,\n    to: transaction.to as `0x${string}`,\n    // @ts-ignore - cater for both input or data\n    input: transaction.input || (transaction.data as `0x${string}`),\n    chainId: chainId,\n  },\n});\n\n// Handle the prepare result\nif ('success' in result) {\n  if ('notRequired' in result.success) {\n    // No bridging required, proceed with normal transaction\n    console.log('no routing required');\n  } else if ('available' in result.success) {\n    const available = result.success.available;\n    \n    // Sign all bridge transactions and initial transaction\n    const bridgeTxs = available.route.map(tx => tx.transactionHashToSign);\n    const signedBridgeTxs = bridgeTxs.map(tx => wallet.signAny(tx));\n    const signedInitialTx = wallet.signAny(available.initial.transactionHashToSign);\n\n    // Execute the chain abstraction\n    const result = await walletKit.chainAbstraction.execute({\n      bridgeSignedTransactions: signedBridgeTxs,\n      initialSignedTransaction: signedInitialTx,\n      orchestrationId: available.routeResponse.orchestrationId,\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding AppKit Web Component in React using TSX\nDESCRIPTION: This code defines a React component called ConnectButton that returns the <appkit-button> web component as JSX. No additional imports or dependencies are required for <appkit-button> since AppKit's web components are globally available. When rendered, this component will display the standard AppKit button, and does not accept props or expose additional configuration in this basic implementation.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/solana/about/triggermodal.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function ConnectButton() {\n  return <appkit-button />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NotifyClient Delegate WalletConnect Notify Kotlin\nDESCRIPTION: Illustrates how to create and set a `NotifyClient.Delegate`. The delegate is crucial for receiving asynchronous updates from the SDK, such as new subscriptions, incoming notifications, and errors. It is recommended to set this delegate in the `Application` class's `onCreate` method.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/notifications/notify/usage.mdx#_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nval walletDelegate = object : NotifyClient.Delegate {\n\n    override fun onNotifySubscription(notifySubscribe: Notify.Event.Subscription) {\n        // Triggered when a wallet initiated subscription has been created\n    }\n\n    override fun onNotifyNotification(notifyNotification: Notify.Event.Notification) {\n        // Triggered when a message has been sent by the Dapp. The message contains the title, body, icon, and url\n    }\n\n    override fun onError(error: Notify.Model.Error) {\n        // Triggered when there's an error inside the SDK\n    }\n}\n\nNotifyClient.setDelegate(walletDelegate)\n```\n\n----------------------------------------\n\nTITLE: Configuring Associated Domains for iOS Universal Links (XML)\nDESCRIPTION: This XML snippet shows the required configuration within an iOS application's property list or entitlements file to enable Associated Domains. This is a crucial step for supporting Universal Links, which are used by WalletKit's Link Mode on iOS. The `com.apple.developer.associated-domains` key must contain an array of strings listing the domains that the app is associated with, prefixed by `applinks:`. This configuration tells the operating system which domains the app should handle links for.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/link-mode.mdx#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n  <key>com.apple.developer.associated-domains</key>\n  <array>\n    <string>applinks:your_wallet_universal_link.com</string>\n  </array>\n</dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Customizing Coinbase Wallet Connector Using Wagmi Adapter (TypeScript)\nDESCRIPTION: Illustrates configuring the Coinbase wallet connector in a custom WagmiAdapter instance to utilize the Smart Wallet preference by setting the 'preference' option to 'smartWalletOnly'. This example requires the '@reown/appkit-adapter-wagmi' package and a correctly initialized WagmiAdapter with project ID and networks. The adapter exposes a wagmiConfig object, which is exported for further use. It is targeted at users who want more granular control over the connectors in Wagmi.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { WagmiAdapter } from \"@reown/appkit-adapter-wagmi\";\n\nconst adapter = new WagmiAdapter({\n  //...\n  connectors: [\n    coinbaseWallet({\n      //...\n      preference: \"smartWalletOnly\",\n    }),\n    projectId,\n    networks,\n  ],\n});\n\nexport const config = wagmiAdapter.wagmiConfig;\n```\n\n----------------------------------------\n\nTITLE: Configuring Associated Domains for Universal Links (iOS plist)\nDESCRIPTION: Provides an example XML snippet for an iOS application's `.plist` file to configure Associated Domains. It adds the `com.apple.developer.associated-domains` key with an array containing the `applinks` entry pointing to the dApp's universal link domain, which is essential for enabling Universal Links and Link Mode on iOS.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/link-mode.mdx#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n  <key>com.apple.developer.associated-domains</key>\n  <array>\n    <string>applinks:your_dapp_universal_link.com</string>\n  </array>\n</dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Signing Message using AppKit Provider (TSX)\nDESCRIPTION: Demonstrates the usage of `useAppKitAccount` and `useAppKitProvider` to get the connected account's address and the wallet provider object. It shows how to encode a message and use the provider's `signMessage` method to request a signature from the wallet. Includes basic error handling and a button example. Required dependencies: `@reown/appkit/vue`, `@reown/appkit-adapter-solana` (for Provider type).\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/solana/composables.mdx#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useAppKitAccount, useAppKitProvider } from \"@reown/appkit/vue\";\nimport type { Provider } from \"@reown/appkit-adapter-solana\";\n\nfunction SignMessage() {\n  // 0. Get account and provider\n  const { address } = useAppKitAccount();\n  const { walletProvider } = useAppKitProvider<Provider>(\"solana\");\n\n  // 1. Create a function to sign a message\n  async function onSignMessage() {\n    try {\n      if (!walletProvider || !address) {\n        throw Error(\"user is disconnected\");\n      }\n\n      // 2. Encode message and sign it\n      const encodedMessage = new TextEncoder().encode(\"Hello from AppKit\");\n      const signature = await walletProvider.signMessage(encodedMessage);\n\n      console.log(signature);\n    } catch (err) {\n      // Handle Error Here\n    }\n  }\n\n  // 3. Create a button to trigger the function\n  return <button onClick={onSignMessage}>Sign Message</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Web3InboxClient (TypeScript)\nDESCRIPTION: This snippet initializes the Web3InboxClient instance using the static `init` method. It requires an options object containing the mandatory `projectId` and optional `domain` and `allApps` parameters, which control client identification, domain association, and subscription access scope respectively. The method is asynchronous and returns a promise that resolves with the configured client object.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/initialization/javascript.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst client = await Web3InboxClient.init({ projectId, domain, allApps })\n```\n\n----------------------------------------\n\nTITLE: Initializing WalletKit with Core Instance in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and initialize the WalletKit library with a Core instance using a project ID and app metadata. It requires the '@walletconnect/core' and '@reown/walletkit' packages, and prepares a wallet instance for session management and blockchain interactions.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/usage.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Core } from \"@walletconnect/core\";\nimport { WalletKit } from \"@reown/walletkit\";\n\nconst core = new Core({\n  projectId: process.env.PROJECT_ID,\n});\n\nconst walletKit = await WalletKit.init({\n  core, // shared Core instance\n  metadata: {\n    name: \"Demo React Native Wallet\",\n    description: \"Demo RN Wallet to interface with Dapps\",\n    url: \"www.walletconnect.com\",\n    icons: [\"https://your_wallet_icon.png\"],\n    redirect: {\n      native: \"yourwalletscheme://\",\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Session Proposal Expiry Events in TypeScript\nDESCRIPTION: Code for listening to session proposal expiry events. This allows applications to update their UI when a proposal expires after 5 minutes, ensuring that expired proposal modals are removed from the UI.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/best-practices.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nwalletKit.on(\"proposal_expire\", (event) => {\n    // proposal expired and any modal displaying it should be removed\n    const { id } = event;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring featuredWalletIds option for createAppKit in TypeScript\nDESCRIPTION: Shows how to prioritize and select specific wallet IDs to be featured on the modal's main view. These wallets will be shown first and appear at the top of the 'All Wallets' list. The wallet IDs are string hashes referencing known wallets from the WalletGuide or Wallets List. This allows fine-grained control of wallet visibility in the UI.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateAppKit({\n  //...\n  featuredWalletIds: [\n    \"1ae92b26df02f0abca6304df07debccd18262fdf5fe82daa81593582dac9a369\",\n    \"4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0\",\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Cosmos Network and Connecting with AppKit - JavaScript\nDESCRIPTION: Illustrates configuring a custom Cosmos network via defineChain and integrating it with AppKit for WalletConnect sessions. Chain properties (ID, currency, RPC endpoint, CAIP network ID) are set before initializing the AppKit modal and connecting with the SignClient. This variant targets Cosmos, specifying its namespace, wallet methods, and relevant connection events. Dependencies: @reown/appkit and @walletconnect/sign-client. Inputs include your project ID and Cosmos chain info; output is a functioning AppKit modal tailored to Cosmos integration. Testnet/mainnet selection and CAIP network adherence are necessary constraints.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/wcm.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineChain } from '@reown/appkit/networks'\n\n...\n\nconst cosmos = defineChain({\n  id: 'cosmoshub-3',\n  name: 'Cosmos',\n  nativeCurrency: { name: 'Cosmos', symbol: 'ATOM', decimals: 6 },\n  rpcUrls: {\n    default: { http: ['https://cosmos-rpc.publicnode.com:443'] }\n  },\n  blockExplorers: { default: { name: 'Sui Explorer', url: 'https://suiexplorer.com/' } },\n  testnet: false,\n  chainNamespace: 'cosmos',\n  caipNetworkId: 'cosmos:cosmoshub-4'\n})\n\n...\n\nconst modal = createAppKit({\n  projectId: 'YOUR_PROJECT_ID',\n  networks: [cosmos],\n  manualWCControl: true\n})\n\n// connect signClient and feed uri to modal\nconst { uri, approval } = await signClient.connect({\n    requiredNamespaces: {\n      cosmos: {\n        methods: ['cosmos_signDirect'],\n        chains: [cosmos.caipNetworkId],\n        events: []\n      }\n    }\n  })\n\n... \n```\n\n----------------------------------------\n\nTITLE: Adding Polkadot Network to Supported Networks\nDESCRIPTION: This snippet demonstrates how to add the Polkadot and Westend test networks to the supported networks list using the ReownAppKitModalNetworks class. It should be executed before configuring the ReownAppKitModal instance, and test networks should have 'isTestNetwork' set to true.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/custom-chains.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Add more non-EVM nor Solana networks, such as Polkadot\nReownAppKitModalNetworks.addSupportedNetworks('polkadot', [\n  ReownAppKitModalNetworkInfo(\n    name: 'Polkadot',\n    chainId: '91b171bb158e2d3848fa23a9f1c25182',\n    chainIcon: 'https://cryptologos.cc/logos/polkadot-new-dot-logo.png',\n    currency: 'DOT',\n    rpcUrl: 'https://rpc.polkadot.io',\n    explorerUrl: 'https://polkadot.subscan.io',\n  ),\n  ReownAppKitModalNetworkInfo(\n    name: 'Westend',\n    chainId: 'e143f23803ac50e8f6f8e62695d1ce9e',\n    currency: 'DOT',\n    rpcUrl: 'https://westend-rpc.polkadot.io',\n    explorerUrl: 'https://westend.subscan.io',\n    isTestNetwork: true,\n  ),\n]);\n\n```\n\n----------------------------------------\n\nTITLE: Signing In to NEAR dApps with Function Call Access Keys Using JavaScript JSON-RPC\nDESCRIPTION: Defines the 'near_signIn' JSON-RPC method to add FunctionCall access keys for one or more accounts, improving user experience for signing gas-only transactions. Parameters include permission details specifying the smart contract ('receiverId') and callable method names, and an array of account objects with 'accountId' and corresponding 'publicKey'. This method does not return a value, indicating a void result. It facilitates explicit sign-in to dApp smart contracts.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/near-rpc.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Request\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"near_signIn\",\n  \"params\": {\n    \"permission\": {\n      \"receiverId\": \"guest-book.testnet\",\n      \"methodNames\": []\n    },\n    \"accounts\": [{\n        \"accountId\": \"alice.near\",\n        \"publicKey\": \"ed25519:DmnRVNb89cLKZY1cH1Zcr3rxMVD9r1cVfnDac7RFwM94\"\n    }]\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing ReownAppKitModal with project ID and metadata\nDESCRIPTION: Creates an instance of ReownAppKitModal with specified context, project ID, and metadata, including app details and optional redirect configuration. It prepares the modal for user interactions such as wallet connection.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/usage.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// AppKit Modal instance\nfinal _appKitModal = ReownAppKitModal(\n  context: context,\n  projectId: '{YOUR_PROJECT_ID}',\n  metadata: const PairingMetadata(\n    name: 'Example App',\n    description: 'Example app description',\n    url: 'https://example.com/',\n    icons: ['https://example.com/logo.png'],\n    redirect: Redirect(  // OPTIONAL\n      native: 'exampleapp://',\n      universal: 'https://reown.com/exampleapp',\n      linkMode: true|false,\n    ),\n  ),\n);\n\n// Initialize the modal\nawait _appKitModal.init();\n```\n\n----------------------------------------\n\nTITLE: Controlling Modal UI with useAppKit (Wagmi) TypeScript\nDESCRIPTION: This snippet demonstrates how to use the useAppKit hook from the `@reown/appkit-wagmi-react-native` package to obtain functions for opening and closing the modal UI. It shows the import statement and how to destructure the `open` and `close` functions from the hook's return value. These functions are used to programmatically control the visibility of the AppKit modal.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/hooks.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useAppKit } from '@reown/appkit-wagmi-react-native'\n\nexport default function Component() {\n  const { open, close } = useAppKit()\n\nopen()\n\n//...\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Network Info with useAppKitNetwork in TypeScript\nDESCRIPTION: Demonstrates importing and using the `useAppKitNetwork` hook from `@reown/appkit/react` to access current network details (CAIP network object, CAIP network ID, chain ID) and the `switchNetwork` function.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/hooks.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAppKitNetwork } from \"@reown/appkit/react\";\n\nexport default Component(){\n  const { caipNetwork, caipNetworkId, chainId, switchNetwork } = useAppKitNetwork()\n}\n```\n\n----------------------------------------\n\nTITLE: Using AppKitModalNetworkSelectButton for network pre-selection\nDESCRIPTION: A UI component allowing users to select a blockchain network prior to connecting their wallet, improving user experience for multi-network applications.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/usage.mdx#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nAppKitModalNetworkSelectButton(appKit: _appKitModal)\n```\n\n----------------------------------------\n\nTITLE: Opening AppKit Using Web Component in React\nDESCRIPTION: A React component that renders the AppKit button using the web component approach. This method doesn't require any imports as web components are global HTML elements.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/solana/triggermodal.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function ConnectButton() {\n  return <appkit-button />;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the crypto polyfill in App.js\nDESCRIPTION: Example of how to import the crypto polyfill in the application's root file, along with WalletConnect compatibility layer and Reown AppKit initialization.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/expo/additional-expo48.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// src/App.js\n\nimport './crypto-polyfill.js'\nimport '@walletconnect/react-native-compat';\n...\nimport { createAppKit } from '@reown/appkit-...'\n```\n\n----------------------------------------\n\nTITLE: Using useAppKit Hook to Trigger Modals in React with TypeScript\nDESCRIPTION: This snippet shows how to utilize the `useAppKit` hook to trigger different modals by calling the `open` function. It includes button elements that open the default connect modal and a 'Networks' modal, illustrating how to connect UI interactions with AppKit's modal system.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/solana/about/triggermodal.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useAppKit } from \"@reown/appkit/react\";\n\nexport default function ConnectButton() {\n  // 4. Use modal hook\n  const { open } = useAppKit();\n\n  return (\n    <> \n      <button onClick={() => open()}>Open Connect Modal</button>\n      <button onClick={() => open({ view: \"Networks\" })}>\n        Open Network Modal\n      </button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Polkadot Network and Connecting with AppKit - JavaScript\nDESCRIPTION: Shows how to define a custom Polkadot blockchain network using defineChain from @reown/appkit/networks and integrate it with AppKit's modal. The code specifies Polkadot's network parameters (ids, symbols, RPC URLs) and configures the AppKit modal for manual WalletConnect control. A SignClient connection is established with Polkadot's CAIP network ID and Polkadot-specific methods. Requires @reown/appkit and @walletconnect/sign-client. Inputs are project ID, chain metadata; output includes a working modal and active session. Ensure correct chainNamespace for cross-chain operations; not suitable for unsupported chain types.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/wcm.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineChain } from '@reown/appkit/networks'\n\n...\n\nconst polkadot = defineChain({\n  id: '91b171bb158e2d3848fa23a9f1c25182',\n  name: 'Polkadot',\n  nativeCurrency: { name: 'Polkadot', symbol: 'DOT', decimals: 10 },\n  rpcUrls: {\n    default: { http: ['https://rpc.polkadot.io'], wss: 'wss://rpc.polkadot.io' }\n  },\n  blockExplorers: { default: { name: 'Polkadot Explorer', url: 'https://polkadot.js.org/apps/' } },\n  chainNamespace: 'polkadot',\n  caipNetworkId: 'polkadot:91b171bb158e2d3848fa23a9f1c25182'\n})\n\n...\n\nconst modal = createAppKit({\n  projectId: 'YOUR_PROJECT_ID',\n  networks: [polkadot],\n  manualWCControl: true\n})\n\n// connect signClient and feed uri to modal\nconst { uri, approval } = await signClient.connect({\n    requiredNamespaces: {\n      eip155: {\n        methods: ['polkadot_signMessage', 'polkadot_signTransaction'],\n        chains: [polkadot.caipNetworkId],\n        events: []\n      }\n    }\n  })\n\n...\n\n```\n\n----------------------------------------\n\nTITLE: Initializing the Notify Client SDK with Project ID\nDESCRIPTION: This snippet demonstrates how to initialize the NotifyClient instance using a project ID from Cloud, setting up the SDK for subsequent notification operations. It relies on the '@walletconnect/notify-client' package and is essential for establishing communication with the Notify API.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/notify/usage.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { NotifyClient } from \"@walletconnect/notify-client\";\n\nconst notifyClient = await NotifyClient.init({\n  projectId: \"<YOUR PROJECT ID>\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring deep link redirects for iOS\nDESCRIPTION: Instructions for modifying the iOS Info.plist to include URL schemes matching the native redirect URL, enabling deep linking back to the app after wallet connection.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/usage.mdx#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<key>CFBundleURLTypes</key>\n<array>\n  <dict>\n    <key>CFBundleTypeRole</key>\n    <string>Editor</string>\n    <key>CFBundleURLName</key>\n    <string>com.example.yourBundleId</string> <!-- Bundle ID of your app -->\n    <key>CFBundleURLSchemes</key>\n    <array>\n      <string>exampleapp</string>\n    </array>\n  </dict>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Accepting and Pairing with a WalletConnect URI – JavaScript\nDESCRIPTION: This function accepts a WalletConnect pairing URI from a dapp, typically provided via QR code or manual entry by the user, and triggers the pairing process using `walletKit.core.pairing.pair`. The uri parameter is essential and must conform to the WalletConnect URI format. Successful execution results in a session proposal event.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/polkadot/wallet-integration-guide.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst onConnect = async (uri: string) => {\n  // call walletKit.core.pairing.pair( { uri: uri })\n  // with the uri received from the dapp in order to emit the\n  // `session_proposal` event\n  const result = await walletKit.core.pairing.pair({ uri });\n};\n```\n\n----------------------------------------\n\nTITLE: Encrypting data with ever_encryptData (JavaScript)\nDESCRIPTION: This code demonstrates encrypting arbitrary data for multiple recipients using 'ever_encryptData' with the 'ChaCha20Poly1305' algorithm. It requires recipient public keys in hex, the data in base64, and outputs encrypted data entries with source and recipient info, algorithm, data, and nonce.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/everscale-rpc.mdx#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Request\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"ever_encryptData\",\n  \"params\": {\n       \"sourceAddress\": \"0:695e42...b8d\",\n       \"recipientPublicKeys\": [\"0x6e74...4e95\", \"0x9532...403f\"],\n       \"algorithm\": \"ChaCha20Poly1305\",\n       \"data\": \"ZGF0YQ==\"\n  }\n}\n\n// Result\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\":  {\n        \"encryptedData\": [\n           {\n            \"algorithm\": \"ChaCha20Poly1305\",\n            \"sourcePublicKey\": \"0x209f...d08f\",\n            \"recipientPublicKey\": \"0x6e74...4e95\",\n            \"data\": \"ZW5jRGF0YTE=\",\n            \"nonce\": \"bm9uY2Ux\"\n           },\n           {\n            \"algorithm\": \"ChaCha20Poly1305\",\n            \"sourcePublicKey\": \"0x209f...d08f\",\n            \"recipientPublicKey\": \"0x6e74...4e95\",\n            \"data\":\"ZW5jRGF0YTI=\",\n            \"nonce\":\"bm9uY2Uy\"\n           }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Approving Session Proposal with WalletKit\nDESCRIPTION: Illustrates the process of approving a session proposal received from a dapp using `walletKit.approveSession`. The wallet should display a loading indicator until a Relay acknowledgement is received. Includes error handling.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/best-practices.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n    try {\n        await walletKit.approveSession(params);\n        // update UI -> remove the loader\n    } catch (error) {\n        // present error to the user\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating and Opening WalletConnect Modal for User Wallet Connection in JavaScript\nDESCRIPTION: Initializes a WalletConnectModal instance using the dapp's WalletConnect 'projectId'. If a connection URI is available from the previous connection step, the modal opens to display a QR code or provide a URI for users to connect their wallet apps. The session approval is awaited, which resolves once the user approves the connection from their wallet, starting a WalletConnect session.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/polkadot/dapp-integration-guide.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst walletConnectModal = new WalletConnectModal({\n  projectId: \"2ea3f3ghubh32b8ie2f2\",\n});\n\n// if there is a URI from the client connect step open the modal\nif (uri) {\n  walletConnectModal.openModal({ uri });\n}\n// await session approval from the wallet app\nconst walletConnectSession = await approval();\n```\n\n----------------------------------------\n\nTITLE: Accessing AppKit Account Information (TSX)\nDESCRIPTION: Illustrates how to use the `useAppKitAccount` hook to retrieve details about the currently connected wallet. It provides access to the wallet address, CAIP-compliant address, and connection status. Required dependency: `@reown/appkit/vue`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/solana/composables.mdx#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useAppKitAccount } from \"@reown/appkit/vue\";\n\nfunction Components() {\n  const { address, caipAddress, isConnected } = useAppKitAccount();\n\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Using useAppKitAccount Hook in React for User Account Info\nDESCRIPTION: This snippet demonstrates how to use the useAppKitAccount hook to retrieve the user's address, CAIP address, and connection status within a React component. It requires importing the hook from '@reown/appkit/react' and utilizing object destructuring to access account properties, which can then be used for UI rendering or logic.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/solana/hooks.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useAppKitAccount } from \"@reown/appkit/react\";\n\nfunction Components() {\n  const { address, caipAddress, isConnected } = useAppKitAccount();\n\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Solana Web3.js Library via yarn Bash Command\nDESCRIPTION: This command uses yarn to add the @solana/web3.js library to a project. This package is required for blockchain operations in both JavaScript and React codebases using Solana. Run this command in your project root to properly install the dependency.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/solana-send-transaction.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @solana/web3.js\n```\n\n----------------------------------------\n\nTITLE: Updating Configuration Method Call from Web3Wallet to WalletKit in Swift\nDESCRIPTION: Illustrates replacing the library configuration call from `Web3Wallet.configure(...)` to `WalletKit.configure(...)`. The parameters passed to the configure method remain structurally similar but now apply to the WalletKit setup.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/upgrade/from-web3wallet-ios.mdx#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\n/* highlight-delete-start */\n- Web3Wallet.configure(\n-   ...\n- )\n/* highlight-delete-end */\n/* highlight-add-start */\n+ WalletKit.configure(\n+   ...\n+ )\n/* highlight-add-end */\n```\n\n----------------------------------------\n\nTITLE: Updating Universal Wallet Connector Import in Wagmi - TypeScript\nDESCRIPTION: This snippet demonstrates replacing the emailConnector import from @web3modal/email-wagmi-react-native with authConnector from @reown/appkit-auth-wagmi-react-native. This change is necessary for authentication support in universal wallets under the new AppKit API.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-react-native.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following code lines\nimport { emailConnector } from \"@web3modal/email-wagmi-react-native\";\n\n// Add the following code lines\nimport { authConnector } from \"@reown/appkit-auth-wagmi-react-native\";\n```\n\n----------------------------------------\n\nTITLE: Managing Web3Inbox Subscriptions - React - TypeScript\nDESCRIPTION: This snippet illustrates the change in managing subscriptions, moving from a single `useManageSubscription` hook to several specialized hooks following the single responsibility principle. These new hooks include `useSubscribe`, `useUnsubscribe`, `useSubscription` (for checking the status of a single subscription), and `useSubscriptions` (for fetching a list of all subscriptions).\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/migration/react.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n- import { useManageSubscription } from \"@web3inbox/widget-react\"\n+ import { useSubscribe, useUnsubscribe, useSubscription } from \"@web3inbox/react\"\n\n- const { subscribe, unsubscribe, isSubscribed } = useManageSubscription()\n+ const { subscribe } = useSubscribe()\n+ const { unsubscribe } = useUnsubscribe()\n+ const { data: subscription } = useSubscription()\n- const { subscriptions } = useSubscriptions()\n+ const { data: subscriptions } = useSubscriptions()\n```\n\n----------------------------------------\n\nTITLE: Install @web3modal/solana Package Using npm, Yarn, Bun, and pnpm\nDESCRIPTION: Installs the @web3modal/solana package necessary for AppKit's Solana wallet connection features. Commands are provided for multiple package managers to ensure ease of setup across environments.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-anza-adapter-react.mdx#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @web3modal/solana\n```\n\nLANGUAGE: Shell\nCODE:\n```\nyarn add @web3modal/solana\n```\n\nLANGUAGE: Shell\nCODE:\n```\nbun add @web3modal/solana\n```\n\nLANGUAGE: Shell\nCODE:\n```\npnpm add @web3modal/solana\n```\n\n----------------------------------------\n\nTITLE: Disconnecting Session with useDisconnect Composable in Vue\nDESCRIPTION: Demonstrates how to import and use the `useDisconnect` composable from `@reown/appkit/vue`. It destructures the `disconnect` function, which can be called asynchronously (`await disconnect()`) to terminate the current wallet connection session.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/composables.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useDisconnect } from \"@reown/appkit/vue\";\n\nconst { disconnect } = useDisconnect();\n\nawait disconnect();\n```\n\n----------------------------------------\n\nTITLE: Estimating Transaction Gas via EVM in C#\nDESCRIPTION: Provides C# examples for estimating the gas required for a transaction using `AppKit.EVM.EstimateGasAsync()`. Covers estimating gas for native token transfers (using direct parameters or `SendTransactionParams`) and for smart contract interactions (using direct parameters or `WriteContractParams`). Returns the estimated gas limit as a `BigInteger`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/actions.mdx#_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\n// Estimate for native token transfer\nBigInteger gasLimit = await AppKit.EVM.EstimateGasAsync(\n    \"0x123...\", // recipient address\n    1000000000000000000 // 1 ETH in wei\n);\n\n// Using parameters object for native transfer\nvar transferParams = new SendTransactionParams\n{\n    AddressTo = \"0x123...\",\n    Value = 1000000000000000000, // 1 ETH in wei\n    Data = \"0x\" // optional data\n};\nBigInteger gasLimit = await AppKit.EVM.EstimateGasAsync(transferParams);\n\n// Estimate for contract interaction\nstring contractAbi = \"[ /* Your contract ABI */ ]\";\nBigInteger gasLimit = await AppKit.EVM.EstimateGasAsync(\n    \"0x123...\", // contract address\n    contractAbi,\n    \"transfer\", // method name\n    0, // value in wei\n    \"0x456...\", // method arguments\n    1000\n);\n\n// Using parameters object for contract interaction\nvar contractGasParams = new WriteContractParams\n{\n    ContractAddress = \"0x123...\",\n    ContractAbi = contractAbi,\n    MethodName = \"transfer\",\n    Value = 0, // optional value in wei\n    Arguments = new object[] { \"0x456...\", 1000 }\n};\nBigInteger gasLimit = await AppKit.EVM.EstimateGasAsync(contractGasParams);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Active Subscriptions in React Native\nDESCRIPTION: Demonstrates how to retrieve all currently active notification subscriptions for a specific account.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\n// Will return all active subscriptions for the provided account, keyed by subscription topic.\nconst accountSubscriptions = notifyClient.getActiveSubscriptions({\n  account: `eip155:1:0x63Be...`,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a New Subscription in React Native\nDESCRIPTION: Shows how to create a new notification subscription in React Native by obtaining the domain from Explorer API and calling the subscribe method.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\n// Get the domain of the target dapp from the Explorer API response\nconst appDomain = new URL(fetchedExplorerDapp.platform_browser).hostname;\n\n// Subscribe to `fetchedExplorerDapp` by passing the account to be subscribed and the domain of the target dapp.\nawait notifyClient.subscribe({\n  account,\n  appDomain,\n});\n\n// -> Success/Failure will be received via the `notify_update` event registered previously.\n// -> New subscription will be emitted via the `notify_subscriptions_changed` watcher event.\n```\n\n----------------------------------------\n\nTITLE: Extracting Address from SIWE Message\nDESCRIPTION: This utility function shows how to parse and obtain the Ethereum address from a SIWE message, useful for verifying which account signed the message.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/siwe.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getAddressFromMessage } from \"@reown/appkit-siwe\";\n\nconst address = getAddressFromMessage(message);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Wallet Address Using Reown AppKit in TypeScript\nDESCRIPTION: This snippet shows how to retrieve the connected wallet's address using the modal.getAddress() method. It assumes the presence of a modal object from the Reown AppKit instance. The method returns the currently connected wallet address as a string or undefined if not connected.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/ethers/actions.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst address = modal.getAddress();\n```\n\n----------------------------------------\n\nTITLE: Signing Message using Wagmi (TypeScript)\nDESCRIPTION: This snippet illustrates how to sign an arbitrary message using the currently connected Ethereum account via the `signMessage` action from `@wagmi/core`. It imports the required function and calls it asynchronously with the message content. The user's wallet will typically prompt for confirmation before generating and returning the cryptographic signature.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/wagmi/composables.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { signMessage } from \"@wagmi/core\";\n\nconst signature = await signMessage({\n  message: \"gm wagmi frens\",\n});\n```\n\n----------------------------------------\n\nTITLE: Embedding AppKit Connect Button Using Web Component in React - TypeScript\nDESCRIPTION: This snippet demonstrates how to render the AppKit Connect button using the provided <appkit-button> web component in a React (TypeScript) application. It requires no explicit import of AppKit objects because the web component registers itself globally in the HTML context. No props are needed and the component will handle default connection functionality when included in the DOM. Suitable for projects where the simplest integration is preferred and direct modal control is not required.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/ethers/about/triggermodal.mdx#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nexport default function ConnectButton() {\n  return <appkit-button />;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Notify Messages Push Messaging Kotlin\nDESCRIPTION: Provides an example of how to handle incoming WalletConnect Notify messages within an Android `PushMessagingService` (like Firebase). It shows how to process the `Core.Model.Message.Notify` type, fetch related subscription and notification type data, create appropriate Android Notification Channels (for API 26+), and build/display the push notification using `NotificationCompat.Builder`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/notifications/notify/usage.mdx#_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nclass SampleFirebaseService: PushMessagingService() {\n  //...\n  override fun onMessage(message: Core.Model.Message, originalMessage: RemoteMessage) {\n      if (message is Core.Model.Message.Notify) {\n        val account: String = // CAIP-10 account\n        val appMetadata = NotifyClient.getActiveSubscriptions(Notify.Params.GetActiveSubscriptions(account))[topic]?.metadata\n            ?: throw IllegalStateException(\"No active subscription for topic: $topic\")\n\n        val appDomain = URI(appMetadata.url).host\n            ?: throw IllegalStateException(\"Unable to parse domain from $appMetadata.url\")\n\n        val notificationType = NotifyClient.getNotificationTypes(Notify.Params.GetNotificationTypes(appDomain))[channelId]\n            ?: throw IllegalStateException(\"No notification type for topic:${topic} and type: $channelId\")\n\n        val channelName = appMetadata.name + \": \" + notificationType.name\n        val channelId = message.type\n\n        val notificationBuilder = NotificationCompat.Builder(this, channelId)\n            .setContentTitle(message.title)\n            .setSmallIcon(android.R.drawable.ic_popup_reminder) // specify icon for notification\n            .setContentText(message.body)\n            .setAutoCancel(true) // clear notification after click\n            .setSound(defaultSoundUri) // specify sound for notification\n            .setContentIntent(pendingIntent) // specify pendingIntent\n\n        // Since android Oreo notification channel is needed.\n        if (Build.VERSION.wärmeliste >= Build.VERSION_CODES.O) {\n            val channel = NotificationChannel(channelId, channelName, NotificationManager.IMPORTANCE_HIGH)\n            notificationManager.createNotificationChannel(channel)\n        }\n\n        notificationManager.notify(message.hashCode(), notificationBuilder.build()) // specify id of notification\n      }\n  }\n//...\n```\n\n----------------------------------------\n\nTITLE: Listening to Balance Changes using Reown AppKit (Dart/Flutter)\nDESCRIPTION: Demonstrates using a `ValueListenableBuilder` from Flutter to subscribe to updates from the `_appKitModal.balanceNotifier`. This pattern allows the UI to react automatically whenever the wallet balance changes, displaying the new balance value. It requires a Flutter environment.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/actions.mdx#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nValueListenableBuilder<String>(\n  valueListenable: _appKitModal.balanceNotifier,\n  builder: (_, balance, __) {\n    return Text(balance);\n  },\n),\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Solana Wallet Adapters with AppKit in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to initialize the Reown AppKit for Solana, using custom wallet adapters such as Phantom and Solflare. Dependencies include @reown/appkit/react, @reown/appkit-adapter-solana/react, network definitions, and @solana/wallet-adapter-wallets. The setup requires a project ID, application metadata, and selected wallet adapters in the wallets array. Upon completion, it creates a modal instance supporting multiple Solana networks and wallets. Input: wallet/adapters, configuration, and metadata; output: a Solana-enabled modal for wallet connections.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/custom-connectors.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createAppKit } from \"@reown/appkit/react\";\nimport { SolanaAdapter } from \"@reown/appkit-adapter-solana/react\";\nimport { solana, solanaTestnet, solanaDevnet } from \"@reown/appkit/networks\";\n\nimport {\n  SolflareWalletAdapter,\n  PhantomWalletAdapter,\n} from \"@solana/wallet-adapter-wallets\";\n\n// 0. Set up Solana adapter\nconst solanaWeb3JsAdapter = new SolanaAdapter({\n  wallets: [new PhantomWalletAdapter(), new SolflareWalletAdapter()],\n});\n\n// 1. Get projectId from https://cloud.reown.com\nconst projectId = \"YOUR_PROJECT_ID\";\n\n// 2. Set up the metadata\nconst metadata = {\n  //...\n};\n\n// 3. Create the modal\nconst modal = createAppKit({\n  adapters: [solanaWeb3JsAdapter],\n  networks: [solana, solanaTestnet, solanaDevnet],\n  metadata: metadata,\n  projectId,\n  features: {\n    analytics: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Find Specific Session (TypeScript)\nDESCRIPTION: Searches for an existing session based on a known set of required namespaces. This allows the Dapp to locate a specific session that matches the desired chain, methods, and events.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst specificSession = _client.find({\n  requiredNamespaces: {\n    eip155: {\n      methods: [\n        \"eth_sendTransaction\",\n        \"eth_signTransaction\",\n        \"eth_sign\",\n        \"personal_sign\",\n        \"eth_signTypedData\"\n      ],\n      chains: [\"eip155:5\"],\n      events: [\"chainChanged\", \"accountsChanged\"]\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing AppKit for Link Mode - Kotlin\nDESCRIPTION: This snippet demonstrates how to configure AppMetaData with an `appLink` and set `linkMode` to `true`. It then shows the initialization of the CoreClient and AppKit with this metadata, enabling the use of universal links for requests and responses to reduce latency, especially for native dApps and wallets.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/one-click-auth.mdx#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n val appMetaData = Core.Model.AppMetaData(\n    ...\n    appLink = \"https://example.com/example_dapp\",\n    linkMode = true\n)\n\nCoreClient.initialize(\n   metaData: appMetaData,\n    ...\n)\n\nAppKit.initialize(Modal.Params.Init(core = CoreClient))\n```\n\n----------------------------------------\n\nTITLE: Defining SignPSBTResponse Type for BitcoinConnector in TypeScript\nDESCRIPTION: Defines the response structure from signing a PSBT. It includes the signed PSBT as a base64 encoded string, and optionally the transaction ID as a string if the transaction was broadcasted. This type encapsulates the essential signed transaction data returned by signPSBT method.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/bitcoin-provider.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type SignPSBTResponse = {\n  /**\n   * The signed PSBT, string base64 encoded\n   */\n  psbt: string\n  /**\n   * The `string` transaction id of the broadcasted transaction or `undefined` if not broadcasted\n   */\n  txid?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Approving a Session by Providing Addresses in C#\nDESCRIPTION: This snippet demonstrates approving a session by passing a list of addresses directly, allowing the SDK to create the Namespaces object internally. It simplifies the approval process when only addresses are available, without manually constructing namespace mappings.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/usage.mdx#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nsdk.SessionProposed += async (sender, @event) =>\n{\n    var proposal = @event.Proposal;\n\n    var sessionData = await sdk.ApproveSession(proposal, new[] { \"eip155:1:0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb\" });\n    var sessionTopic = sessionData.Topic;\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Multichain Component in AppKit (MDX/JavaScript)\nDESCRIPTION: This snippet shows how to render the previously imported Multichain component within the MDX file. It leverages React's JSX syntax inside MDX to include the component in the documentation. There are no required props, and the output is the rendered Multichain UI or documentation wherever this snippet is used. This pattern facilitates component-based documentation workflows for consistency and reuse.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/multichain.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Multichain />\n```\n\n----------------------------------------\n\nTITLE: Installing AppKit and Adapters for Ethers + Solana (Bash)\nDESCRIPTION: These commands install all necessary packages to use AppKit with the Ethers.js and Solana adapters. Choose the command for your environment's package manager. It installs @reown/appkit, @reown/appkit-adapter-ethers, and @reown/appkit-adapter-solana; no direct user input/output required except for the command execution.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/multichain.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit @reown/appkit-adapter-ethers @reown/appkit-adapter-solana\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit @reown/appkit-adapter-ethers @reown/appkit-adapter-solana\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun a @reown/appkit @reown/appkit-adapter-ethers @reown/appkit-adapter-solana\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit @reown/appkit-adapter-ethers @reown/appkit-adapter-solana\n```\n\n----------------------------------------\n\nTITLE: Disabling WalletConnect QR code feature in createAppKit configuration\nDESCRIPTION: Demonstrates disabling the WalletConnect QR code feature by setting enableWalletConnect to false. By default, this feature is enabled, and setting this flag alters whether users can connect wallets via the WalletConnect protocol QR modal.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nenableWalletConnect: false;\n```\n\n----------------------------------------\n\nTITLE: Removing Solana networks support\nDESCRIPTION: This snippet demonstrates how to remove support for Solana networks from the supported list, useful when limiting blockchains supported by the app.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/custom-chains.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Remove Solana networks from support\nReownAppKitModalNetworks.removeSupportedNetworks('solana');\n\n```\n\n----------------------------------------\n\nTITLE: Approving a Session in WalletKit SDK in Swift\nDESCRIPTION: Approves a proposed session with specified namespaces, linking the wallet and dapp. Upon success, the session is published, and a publisher notifies about active sessions. Allows retrieval of active sessions at any time.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/usage.mdx#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nWalletKit.instance.approve(\n    proposalId: \"proposal_id\",\n    namespaces: sessionNamespaces\n)\n```\n\nLANGUAGE: Swift\nCODE:\n```\nWalletKit.instance.sessionsPublishers\n    .receive(on: DispatchQueue.main)\n    .sink { [weak self] _ in\n        self?.reloadSessions()\n    }.store(in: &publishers)\n```\n\nLANGUAGE: Swift\nCODE:\n```\nlet sessions = WalletKit.instance.getSessions()\n```\n\n----------------------------------------\n\nTITLE: Defining Session Namespaces in JavaScript/JSON\nDESCRIPTION: This snippet illustrates the structure of a 'Session Namespace' object returned by a wallet in response to a proposal. It confirms granted access by listing specific accounts for each chain, along with the approved methods and events. This example demonstrates granting the requested permissions for Ethereum (eip155) and Cosmos, and also includes additional granted permissions ('personal_sign' method, 'proofFinalized' event) not initially requested.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/glossary.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"eip155\": {\n    \"accounts\": [\n      \"eip155:137:0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb\",\n      \"eip155:1:0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb\"\n    ],\n    \"methods\": [\"eth_sign\"],\n    \"events\": [\"accountsChanged\"]\n  },\n  \"cosmos\": {\n    \"accounts\": [\n      \"cosmos:cosmoshub-4:cosmos1t2uflqwqe0fsj0shcfkrvpukewcw40yjj6hdc0\"\n    ],\n    \"methods\": [\"cosmos_signDirect\", \"personal_sign\"],\n    \"events\": [\"someCosmosEvent\", \"proofFinalized\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies from Web3Modal to AppKit in Ethers - JSON\nDESCRIPTION: This code snippet outlines the changes necessary in package.json for an Ethers-based project, removing @web3modal Ethers packages and adding @reown/appkit Ethers variants. After updating, you must run yarn install to ensure the correct packages are installed for AppKit integration.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-react-native.mdx#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    // Remove the following code lines\n    \"@web3modal/ethers-react-native\": \"2.0.4\",\n    \"@web3modal/ethers5-react-native\": \"2.0.4\",\n    \"@web3modal/email-ethers-react-native\": \"2.0.4\",\n    \"@web3modal/coinbase-ethers-react-native\": \"2.0.4\",\n    \"@web3modal/siwe-react-native\": \"2.0.4\",\n\n    // Add the following code lines\n    \"@reown/appkit-ethers-react-native\": \"1.0.0\",\n    \"@reown/appkit-auth-ethers-react-native\": \"1.0.0\",\n    \"@reown/appkit-coinbase-ethers-react-native\": \"1.0.0\",\n    \"@reown/appkit-siwe-react-native\": \"1.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: WalletConnect Modal ModalDelegate Interface - Android Kotlin\nDESCRIPTION: Provides the Kotlin definition for the `WalletConnectModal.ModalDelegate` interface. This interface defines callbacks for handling various asynchronous events received from the wallet, such as session approvals, rejections, and requests.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_33\n\nLANGUAGE: kotlin\nCODE:\n```\nval walletConnectModalDelegate = object : WalletConnectModal.ModalDelegate {\n    override fun onSessionApproved(approvedSession: Modal.Model.ApprovedSession) {\n        // Triggered when receives the session approval from wallet\n    }\n\n    override fun onSessionRejected(rejectedSession: Modal.Model.RejectedSession) {\n        // Triggered when receives the session rejection from wallet\n    }\n\n    override fun onSessionUpdate(updatedSession: Modal.Model.UpdatedSession) {\n        // Triggered when receives the session update from wallet\n    }\n\n    override fun onSessionExtend(session: Modal.Model.Session) {\n        // Triggered when receives the session extend from wallet\n    }\n\n    override fun onSessionEvent(sessionEvent: Modal.Model.SessionEvent) {\n        // Triggered when the peer emits events that match the list of events agreed upon session settlement\n    }\n\n    override fun onSessionDelete(deletedSession: Modal.Model.DeletedSession) {\n        // Triggered when receives the session delete from wallet\n    }\n\n    override fun onSessionRequestResponse(response: Modal.Model.SessionRequestResponse) {\n        // Triggered when receives the session request response from wallet\n    }\n\n    override fun onProposalExpired(proposal: Modal.Model.ExpiredProposal) {\n        // Triggered when a proposal becomes expired\n    }\n\n    override fun onRequestExpired(request: Modal.Model.ExpiredRequest) {\n        // Triggered when a request becomes expired\n    }\n\n    override fun onConnectionStateChange(state: Modal.Model.ConnectionState) {\n        //Triggered whenever the connection state is changed\n    }\n\n    override fun onError(error: Modal.Model.Error) {\n        // Triggered whenever there is an issue inside the SDK\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using AutoNamespaces Utility in Swift\nDESCRIPTION: Example of using the AutoNamespaces utility to build session namespaces based on a proposal. This utility simplifies the process of creating compliant namespace responses.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\ndo {\n    let sessionNamespaces = try AutoNamespaces.build(\n        sessionProposal: proposal,\n        chains: [Blockchain(\"eip155:1\")!, Blockchain(\"eip155:137\")!],\n        methods: [\"eth_sendTransaction\", \"personal_sign\"],\n        events: [\"accountsChanged\", \"chainChanged\"],\n        accounts: [\n            Account(blockchain: Blockchain(\"eip155:1\")!, address: \"0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb\")!,\n            Account(blockchain: Blockchain(\"eip155:137\")!, address: \"0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb\")!\n        ]\n    )\n    try await Sign.instance.approve(proposalId: proposal.id, namespaces: sessionNamespaces)\n} catch {\n    print(error)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Default AppKit Button Component to Trigger WalletConnect Modal in React Native (TypeScript)\nDESCRIPTION: This snippet shows how to trigger the AppKit connection modal by using the built-in AppKitButton component from the @reown/appkit-wagmi-react-native package. It imports the button component and includes it within a React functional component's JSX, rendering it alongside other UI elements. This approach simplifies modal trigger logic by relying on prebuilt components, requiring minimal code and no manual handling of open events.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/wagmi/about/implementation.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AppKitButton } from \"@reown/appkit-wagmi-react-native\";\n\nexport default function ConnectView() {\n  return (\n    <>\n      ...rest of your view\n      <AppKitButton />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Messages using useSignMessage Hook (wagmi/React/TSX)\nDESCRIPTION: This snippet illustrates how to use the `useSignMessage` hook from the `wagmi` library to sign a arbitrary message with the connected account. The hook provides a `signMessage` function which is typically called with an object containing the `message` string to be signed. It requires the `wagmi` dependency.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/wagmi/hooks.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSignMessage } from \"wagmi\";\n\nfunction App() {\n  const { signMessage } = useSignMessage();\n\n  return (\n    <button onClick={() => signMessage({ message: \"hello world\" })}>\n      Sign message\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Session Data After Connecting - Flutter (Dart)\nDESCRIPTION: Shows how to await and retrieve the session data once the connection is established in Flutter. By awaiting response.session.future, developers can react to successful pairing and session creation (e.g., by hiding the QR code). Requires an active ConnectResponse, and the output is a SessionData object encapsulating session metadata. This is a necessary step before signing requests or handling wallet events.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_31\n\nLANGUAGE: dart\nCODE:\n```\nfinal SessionData session = await response.session.future;\n```\n\n----------------------------------------\n\nTITLE: Configuring DefaultSIWX with a Custom Storage Backend (TypeScript)\nDESCRIPTION: Shows how to provide a custom storage implementation to DefaultSIWX for managing session persistence, allowing integration with any suitable backend or database. Requires @reown/appkit-siwx and implementation of SIWXStorage. The storage parameter instantiates your custom backend and is passed to DefaultSIWX for full integration. If other components are omitted, default implementations will be used.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/siwx/siwx-default.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DefaultSIWX, type SIWXStorage } from \"@reown/appkit-siwx\";\n\nclass MyDatabaseStorage implements SIWXStorage {\n  // ...\n}\n\nconst siwx = new DefaultSIWX({\n  storage: new MyDatabaseStorage(),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining AppKitTheme in styles.xml - XML\nDESCRIPTION: Declares a custom AppKitTheme style in an XML resource file for standard Android views, specifying the modalMode (AUTO, LIGHT, or DARK) and allowing color overrides. Requires placing code within a valid resources context, typically styles.xml. The main parameter is \"modalMode\" for selecting theme mode. Inputs are XML attributes; outputs are applied to the application's styling at runtime. Constraints: updates apply globally via referencing AppKitTheme.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/theming.mdx#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <style name=\"AppKitTheme\">\n        <item name=\"modalMode\">AUTO || LIGHT || DARK</item>\n        /* Override colors */\n    </style>\n</resources>\n\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Verify Component in MDX\nDESCRIPTION: This code imports a Verify component from a cloud snippets directory and renders it in the current Markdown document. This pattern allows for reusing documentation components across multiple pages.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/cloud/verify.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Verify from \"/snippets/cloud/verify.mdx\";\n\n<Verify />\n```\n\n----------------------------------------\n\nTITLE: Opening modal view with specific screens\nDESCRIPTION: Example calls for opening the modal to specific pages, such as network selection or QR code, providing flexible navigation for various connection scenarios.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/usage.mdx#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Default modal\n_appKitModal.openModalView();\n\n// Open network selection screen\n_appKitModal.openModalView(ReownAppKitModalSelectNetworkPage());\n\n// Open QR code connection screen\n_appKitModal.openModalView(ReownAppKitModalQRCodePage());\n\n// Open all wallets screen\n_appKitModal.openModalView(ReownAppKitModalAllWalletsPage());\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with CLI\nDESCRIPTION: Command to install Reown AppKit using the dedicated CLI tool, which provides a guided setup process for creating a new project with preferred framework and blockchain libraries.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/installation.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @reown/appkit-cli\n```\n\n----------------------------------------\n\nTITLE: Adding WalletConnect Notify via Swift Package Manager\nDESCRIPTION: Guides the developer through adding the WalletConnect Notify package using Xcode's Swift Package Manager integration by pasting the GitHub URL and selecting the package within the Xcode environment. This method simplifies dependency management for Swift projects.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/notifications/notify/installation.mdx#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nOpen XCode\nGo to File -> Add Packages\nPaste the repo GitHub URL: https://github.com/reown-com/reown-swift\nTap Add Package\nSelect `WalletConnectNotify` check mark\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from Wallet Using AppKit in Kotlin\nDESCRIPTION: This code snippet shows how to disconnect the current wallet session using `AppKit.disconnect()`. It accepts two callbacks: `onSuccess` which is invoked when disconnection completes successfully, and `onError` which handles errors during the disconnect process. This is useful to properly terminate the wallet connection and release related resources. It depends on a valid connection being established via AppKit.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/actions.mdx#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nAppKit.disconnect(\n    onSuccess = {\n    /* callback that letting you know that you have successfully disconnected */\n    },\n    onError = { error ->\n    /* callback for error while trying to disconnection with a peer */\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving or Subscribing to Wallet Info with AppKit in TypeScript\nDESCRIPTION: Explains how to get connected wallet metadata (like name and icon) either by subscribing to changes using `modal.subscribeWalletInfo(handler)` or by directly calling `modal.getWalletInfo()`. Requires an initialized `modal` instance.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/actions.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction handler({ name, icon }) {\n  console.log(name, icon);\n}\n\nmodal.subscribeWalletInfo(handler);\n\n//or\n\nconst { name, icon } = modal.getWalletInfo();\n```\n\n----------------------------------------\n\nTITLE: Approving or Rejecting WalletConnect Session Proposals in C#\nDESCRIPTION: Demonstrates approving a pairing proposal using either a single address or multiple addresses, with acknowledgment awaited to confirm acceptance. Also shows rejecting a proposal with a specified reason. These operations control whether a session is established or declined.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_43\n\nLANGUAGE: csharp\nCODE:\n```\nstring addressToConnect = ...;\nvar approveData = await walletClient.Approve(proposal, addressToConnect);\nawait approveData.Acknowledged();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstring[] addressesToConnect = ...;\nvar approveData = await walletClient.Approve(proposal, addressesToConnect);\nawait approveData.Acknowledged();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nawait walletClient.Reject(proposal, \"User rejected\");\n```\n\n----------------------------------------\n\nTITLE: Sending Generic RPC Request using Reown AppKit (Dart)\nDESCRIPTION: Shows how to send a custom RPC request using `_appKitModal.request`. This example specifically demonstrates preparing and sending a `personal_sign` request. It involves encoding the message, retrieving chain and session details, and constructing the `SessionRequestParams` with the method and parameters. Dependencies include `dart:convert` for encoding and potentially a hex encoding library.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/actions.mdx#_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nfinal bytes = utf8.encode(message);\nfinal encodedMessage = hex.encode(bytes);\n\nfinal chainId = _appKitModal.selectedChain!.chainId;\nfinal namespace = ReownAppKitModalNetworks.getNamespaceForChainId(chainId);\n\nfinal result = await _appKitModal.request(\n  topic: _appKitModal.session!.topic,\n  chainId: chainId,\n  request: SessionRequestParams(\n    method: 'personal_sign',\n    params: [\n      '0x$encodedMessage',\n      _appKitModal.session!.getAddress(namespace)!;\n    ],\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Opening AppKit Modals in C#\nDESCRIPTION: Demonstrates how to open the AppKit modal using C#. It shows opening the default view, the network selection view, and the account view by calling `AppKit.OpenModal()` with optional `ViewType` parameters.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/actions.mdx#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Open default view\nAppKit.OpenModal();\n\n// Open network selection view\nAppKit.OpenModal(ViewType.NetworkSearch);\n\n// Open account view\nAppKit.OpenModal(ViewType.Account);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom SIWX with AppKit in TypeScript\nDESCRIPTION: Example showing how to create a custom SIWX implementation and integrate it with AppKit. This demonstrates the basic pattern for implementing each required method of the SIWXConfig interface.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/siwx/siwx-custom.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAppKit, type SIWXConfig } from '@reown/appkit'\n\nconst siwx: SIWXConfig = {\n  createMessage: async (input) => {\n    // Implement your logic to create a message\n    return 'my message'\n  }\n  addSession: async (session) => {\n    // Implement your logic to add a session\n  },\n  revokeSession: async (chainId, address) => {\n    // Implement your logic to revoke a session\n  },\n  setSessions: async (sessions) => {\n    // Implement your logic to set sessions\n  },\n  getSessions: async (chainId, address) => {\n    // Implement your logic to get sessions\n    return []\n  }\n}\n\ncreateAppKit({\n  // ... your configuration\n  siwx\n})\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications with JavaScript Fetch API\nDESCRIPTION: Example of sending a notification using JavaScript's fetch API. Includes setting the project ID, API secret, and constructing the request with notification details and target accounts.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/notifications/backend-integration.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst PROJECT_ID = \"<PROJECT_ID>\";\nconst NOTIFY_API_SECRET = \"<NOTIFY_API_SECRET>\";\nconst response = await fetch(\n  `https://notify.walletconnect.com/${PROJECT_ID}/notify`,\n  {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${NOTIFY_API_SECRET}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      notification: {\n        type: \"a1e53b95-18e5-4af8-9f03-9308ec87b687\",\n        title: \"The price of Ethereum has risen\",\n        body: \"The price of Ethereum has gone up 10%\",\n        url: \"https://app.example.com\",\n      },\n      accounts: [\"eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029\"],\n    }),\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using Subscription Hooks and Functions - TypeScript\nDESCRIPTION: This snippet demonstrates how to utilize various React hooks (`useSubscribe`, `useUnsubscribe`, `useSubscription`, `useAllSubscriptions`) to manage user subscriptions to decentralized applications (dapps). It shows how to subscribe to and unsubscribe from dapps, retrieve subscription details for the current user or specified accounts/domains using `getSubscription`, and access reactive states like `subscription`, `subscriptions`, `isSubscribed`, `isSubscribing`, and `isUnsubscribing`. The `getSubscription` and `subscribe` functions support optional `account` and `domain` parameters to interact with subscriptions beyond the current user and dapp context. Requires the described hooks to be available.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/managing-subscription/react.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { subscribe, isLoading: isSubscribing } = useSubscribe()\nconst { unsubscribe, isLoading: isUnsubscribing } = useUnsubscribe()\n\n// get subscription of current user to current dapp\nconst { data: subscription, getSubscription } = useSubscription()\n\n// getSubscription can be used to get information about different dapps programmatically\nconst subscriptionToSameDappFromDifferentAccount = getSubscription(differentAccount)\nconst subscriptionToDifferentDappFromSameAccount = getSubscription(undefined, differentDappDomain)\nconst subscriptionToDifferentDappFromDifferentAccount = getSubscription(\n  differentAccount,\n  differentDappDomain\n)\n\n// subscribe to current dapp from current user\nsubscribe()\n// subscribe to current dapp from different user\nsubscribe(differentAccount)\n// subscribe to different dapp from current user\nsubscribe(undefined, differentDappDomain)\n// subscribe to different dapp from different user\nsubscribe(differentAccount, differentDappDomain)\n\n// unsubscribe from current dapp\nunsubscribe()\n\n// get all subscriptions for current account\nconst subscriptions = useAllSubscriptions()\n\nconst isSubscribed = Boolean(subscription)\n```\n\n----------------------------------------\n\nTITLE: Preparing WalletConnect Namespaces in Swift\nDESCRIPTION: Initializes the minimal required namespaces for WalletConnect sessions in a Swift dApp. This snippet defines the required JSON-RPC methods and target blockchain namespaces (e.g., Ethereum mainnet and Polygon) and constructs a ProposalNamespace dictionary for session proposals. It is prerequisite to generating pairing URIs and requesting wallet connections.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_15\n\nLANGUAGE: Swift\nCODE:\n```\nlet methods: Set<String> = [\"eth_sendTransaction\", \"personal_sign\", \"eth_signTypedData\"]\nlet blockchains: Set<Blockchain> = [Blockchain(\"eip155:1\")!, Blockchain(\"eip155:137\")!]\nlet namespaces: [String: ProposalNamespace] = [\"eip155\": ProposalNamespace(chains: blockchains, methods: methods, events: [])]\n```\n\n----------------------------------------\n\nTITLE: Registering WalletConnect Notify Identity as Dapp (JavaScript)\nDESCRIPTION: Provides code for a Dapp to register an account's identity key with the Notify SDK for cross-device syncing. This involves preparing registration parameters, signing a required message via the user's wallet (e.g., using Ethers.js or Wagmi), and then calling `notifyClient.register()` with the signed message.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst account = `eip155:1:0x63Be2c680685d2A9620c11b0068291261aa62d76`\nconst domain =  'app.mydomain.com', // pass the domain (i.e. the hostname) where your dapp is hosted.\nconst allApps =  false // The user will be prompted to authorize this dapp to send and receive messages on their behalf for only this specific domain using their WalletConnect identity.\n\n\n// No need to register and sign message if already registered.\nif (notifyClient.isRegistered({ account, domain, allApps })) return;\n\nconst {registerParams, message}  = notifyClient.prepareRegistration({\n  account,\n  domain,\n  allApps\n});\n\nconst signature = await ethersWallet.signMessage(message);\n\nawait notifyClient.register({\n  registerParams,\n  signature,\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Web3 Inbox Client and Listening for Notification Messages in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize a Web3 Inbox client using a React hook and set up an event listener for real-time notification messages. It requires the 'useWeb3InboxClient' hook and logs the notification title upon receiving a 'notify_message' event. The code depends on the Web3Inbox SDK and React environment.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/events/react.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { data: client } = useWeb3InboxClient()\n\nclient.on('notify_message', ({ message }) => {\n  console.log(notification.title)\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing AppKit and WagmiAdapter - JavaScript - TypeScript (ts)\nDESCRIPTION: Replaces legacy Web3Modal imports and config in JavaScript setups by importing AppKit and WagmiAdapter. Requires @reown/appkit, @reown/appkit-adapter-wagmi, and @reown/appkit/networks. After instantiating WagmiAdapter with definable networks and projectId, adapters can be passed into AppKit for flexible integration and analytics support. Project metadata is optional but recommended for wallet connection UIs.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\n// Remove the following imports\n- import { createWeb3Modal, defaultWagmiConfig } from '@web3modal/wagmi/react'\n- import { createConfig } from '@wagmi/core'\n- import { arbitrum, mainnet } from 'viem/chains'\n\n// Add the following imports\n+ import { createAppKit } from '@reown/appkit'\n+ import { arbitrum, mainnet } from '@reown/appkit/networks'\n+ import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'\n```\n\nLANGUAGE: ts\nCODE:\n```\nconst projectId = 'YOUR_PROJECT_ID'\nconst queryClient = new QueryClient()\n\nconst metadata = { //optional\n    name: 'AppKit',\n    description: 'AppKit Example',\n    url: 'https://example.com',\n    icons: ['https://avatars.githubusercontent.com/u/179229932']\n}\n\n// Remove the existing Wagmi Config\n- const wagmiConfig = defaultWagmiConfig({ chains, projectId, metadata })\n\n// Create the Wagmi adapter\n+ const wagmiAdapter = new WagmiAdapter({\n  networks: [mainnet, arbitrum],\n  projectId\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listeners for Notify Client Events in JavaScript\nDESCRIPTION: This snippet sets up event handlers for key Notify client events, including subscription responses, incoming messages, subscription updates, and subscription changes. These handlers enable the application to respond appropriately to notification-related events, such as updating UI or error reporting.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/notify/usage.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Handle response to a `notifyClient.subscribe(...)` call\nnotifyClient.on(\"notify_subscription\", async ({ params }) => {\n  const { error } = params;\n\n  if (error) {\n    console.error(\"Setting up subscription failed: \", error);\n  } else {\n    console.log(`Subscribed successfully.`);\n  }\n});\n\n// Handle an incoming notification\nnotifyClient.on(\"notify_message\", ({ params }) => {\n  const { message } = params;\n  // Process and display notification to the user.\n});\n\n// Handle response to a `notifyClient.update(...)` call\nnotifyClient.on(\"notify_update\", ({ params }) => {\n  const { error } = params;\n\n  if (error) {\n    console.error(\"Updating subscription failed: \", error);\n  } else {\n    console.log(`Successfully updated subscription scope.`);\n  }\n});\n\n// Handle subscription changes\nnotifyClient.on(\"notify_subscriptions_changed\", ({ params }) => {\n  const { subscriptions } = params;\n  // Update application state with changed subscriptions.\n});\n```\n\n----------------------------------------\n\nTITLE: iOS Wallet Detection - Info.plist Configuration\nDESCRIPTION: This instruction details how to modify the Info.plist file in an Xcode project to include wallet URL schemes within the LSApplicationQueriesSchemes array, enabling detection of installed wallets; testing on real devices is recommended for accuracy.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/about.mdx#_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n    <dict>\n        ...\n\n        <key>LSApplicationQueriesSchemes</key>\n        <array>\n            <string>metamask</string>\n            <string>trust</string>\n            <string>safe</string>\n            <string>rainbow</string>\n            <string>uniswap</string>\n            <string>zerion</string>\n            <string>imtokenv2</string>\n            <string>spot</string>\n            <string>omni</string>\n            <string>dfw</string>\n            <string>tpoutside</string>\n            <string>robinhood-wallet</string>\n        </array>\n\n        ...\n    </dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Deep Linking Intent Filter\nDESCRIPTION: XML snippet for the Android `AndroidManifest.xml` file within an `<activity>` tag. It defines an intent filter that allows the activity to handle deep links using a custom URL scheme, enabling redirection from wallets.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n    ...\n    <!-- Update your activity to handle the deep linking from other apps -->\n    <activity\n            ...>\n            <intent-filter>\n                <action android:name=\"android.intent.action.VIEW\" />\n                <category android:name=\"android.intent.category.DEFAULT\" />\n                <category android:name=\"android.intent.category.BROWSABLE\" />\n\n                <!-- Accepts URIs that begin with \"flutterdapp://”, change this to be your deep link -->\n                <data android android:scheme=\"flutterdapp\" />\n            </intent-filter>\n        </activity>\n    ...\n```\n\n----------------------------------------\n\nTITLE: Initializing WalletConnectSignClient Instance in C#\nDESCRIPTION: Initializes the wallet client asynchronously using the previously configured SignClientOptions. This step is necessary to start interacting with the WalletConnect protocol through the SDK.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_41\n\nLANGUAGE: csharp\nCODE:\n```\nvar walletClient = await WalletConnectSignClient.Init(walletOptions);\n```\n\n----------------------------------------\n\nTITLE: Wrap App with Theme Widget - WalletConnectModal Flutter - Dart\nDESCRIPTION: Explains how to apply a theme to the WalletConnectModal in a Flutter application by wrapping the `MaterialApp` widget with `WalletConnectModalTheme`. This sets the theme data for the modal globally.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/theming.mdx#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nreturn WalletConnectModalTheme(\n  data: WalletConnectModalThemeData.darkMode,\n  child: MaterialApp(\n    title: 'Flutter Demo',\n    theme: ThemeData(\n      colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n      useMaterial3: true,\n    ),\n    home: const MyHomePage(title: 'WalletConnectModal Sign Example'),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Universal Link Intent Filter in AndroidManifest.xml\nDESCRIPTION: Configures the Android app's intent filter to auto-verify and handle Universal Links for the specified domain and path pattern. This ensures that when users open matching URLs, the Android system directs them to the app instead of a browser, enabling Link Mode functionality. Key attributes include `android:autoVerify` for automatic verification and intent categories to support deep linking.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/link-mode.mdx#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<intent-filter android:autoVerify=\"true\">\n  <action android:name=\"android.intent.action.VIEW\" />\n\n  <category android:name=\"android.intent.category.DEFAULT\" />\n  <category android:name=\"android.intent.category.BROWSABLE\" />\n\n  <data android:scheme=\"https\" />\n  <data android:host=\"example.com\" />\n  <data android:pathPattern=\"/example_wallet\" />\n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Initializing AppKitComponent Modal in Kotlin with Jetpack Compose\nDESCRIPTION: Defines how to use the AppKitComponent inside a ModalBottomSheetLayout using Jetpack Compose. The snippet shows initialization of modal sheet state, coroutine scope, and navigation controller. The AppKitComponent is embedded as the modal sheet content, controlled by a boolean flag and a callback to close the modal. Dependencies include androidx.compose.material and androidx.navigation.compose libraries. Inputs include shouldOpenChooseNetwork boolean to toggle network selection UI, and closeModal lambda to hide the modal sheet. The output is a UI modal driven by the modalSheetState with integrated navigation.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/components.mdx#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.material.ExperimentalMaterialApi\nimport androidx.compose.material.ModalBottomSheetState\nimport androidx.navigation.compose.NavHost\nimport androidx.navigation.compose.composable\nimport androidx.navigation.compose.rememberNavController\nimport androidx.compose.material.ModalBottomSheetLayout\n\nsetContent {\n    val modalSheetState = rememberModalBottomSheetState(initialValue = ModalBottomSheetValue.Hidden, skipHalfExpanded = true)\n    val coroutineScope = rememberCoroutineScope()\n    val navController = rememberNavController()\n\n    ModalBottomSheetLayout(\n        sheetContent = {\n            AppKitComponent(\n                shouldOpenChooseNetwork = true | false,\n                closeModal = { coroutineScope.launch { modalSheetState.hide() } }\n            )\n        }\n    ) {\n        // content\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Network Data with useAppKitNetwork in Vue\nDESCRIPTION: Demonstrates importing and using the `useAppKitNetwork` composable from `@reown/appkit/vue`. This provides access to reactive network information, including the CAIP network object (`caipNetwork`), CAIP network ID (`caipNetworkId`), chain ID (`chainId`), and a function (`switchNetwork`) to change the connected network.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/composables.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAppKitNetwork } from \"@reown/appkit/vue\";\n\nexport default Component(){\n  const networkData = useAppKitNetwork()\n}\n```\n\n----------------------------------------\n\nTITLE: Approving and Rejecting Sessions in Swift\nDESCRIPTION: Code examples for approving or rejecting a session proposal in iOS. Approval requires providing compliant namespaces, while rejection requires a reason.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nSign.instance.approve(\n    proposalId: \"proposal_id\",\n    namespaces: sessionNamespaces\n)\n\nSign.instance.reject(\n    proposalId: \"proposal_id\",\n    reason: .userRejected\n)\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Subscribers via Notify API using JavaScript Fetch\nDESCRIPTION: Illustrates fetching subscription status for specific accounts using the JavaScript `fetch` API. It sends a POST request to `https://notify.walletconnect.com/v1/<PROJECT_ID>/subscribers` with an array of account IDs (max 100). Authentication requires `PROJECT_ID` and `NOTIFY_API_SECRET`. Includes TypeScript type definitions for the request and response.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/notifications/backend-integration.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst PROJECT_ID = '<PROJECT_ID>'\nconst NOTIFY_API_SECRET = '<NOTIFY_API_SECRET>'\nconst requestBody: RequestBody = {\n  accounts: [\n    'eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029',\n    'eip155:1:0x0000000000000000000000000000000000000000'\n  ]\n}\n\nconst response = await fetch(`https://notify.walletconnect.com/v1/${PROJECT_ID}/subscribers`, {\n  method: 'POST',\n  headers: {\n    Authorization: `Bearer ${NOTIFY_API_SECRET}`\n  }\n  body: JSON.stringify(requestBody)\n})\n\nconst subscribers: ResponseBody = await response.json()\n\ntype RequestBody = {\n  // Max 100 accounts\n  accounts: string[]\n}\ntype ResponseBody = {\n  [account: string]: Subscriber\n}\ntype Subscriber = {\n  notification_types: string[]\n}\n```\n\n----------------------------------------\n\nTITLE: Using useAppKitProvider Hook for Wallet Provider and Signing Messages\nDESCRIPTION: This snippet illustrates how to obtain the wallet provider via useAppKitProvider and perform message signing within a React component. It involves importing hooks, fetching the wallet provider for a specific blockchain (e.g., 'solana'), and implementing an async function to encode and sign a message, with error handling. The component includes a button to trigger message signing.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/solana/hooks.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useAppKitAccount, useAppKitProvider } from \"@reown/appkit/react\";\nimport type { Provider } from \"@reown/appkit-adapter-solana\";\n\nfunction SignMessage() {\n  // 0. Get account and provider\n  const { address } = useAppKitAccount();\n  const { walletProvider } = useAppKitProvider<Provider>(\"solana\");\n\n  // 1. Create a function to sign a message\n  async function onSignMessage() {\n    try {\n      if (!walletProvider || !address) {\n        throw Error(\"user is disconnected\");\n      }\n\n      // 2. Encode message and sign it\n      const encodedMessage = new TextEncoder().encode(\"Hello from AppKit\");\n      const signature = await walletProvider.signMessage(encodedMessage);\n\n      console.log(signature);\n    } catch (err) {\n      // Handle Error Here\n    }\n  }\n\n  // 3. Create a button to trigger the function\n  return <button onClick={onSignMessage}>Sign Message</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with Solana using Bun\nDESCRIPTION: Command for custom installation of Reown AppKit with Solana adapter using Bun package manager. Installs required dependencies including Solana wallet adapter wallets.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/installation.mdx#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nbun add @reown/appkit @reown/appkit-adapter-solana @solana/wallet-adapter-wallets\n```\n\n----------------------------------------\n\nTITLE: Initializing Web3Inbox Client with TypeScript\nDESCRIPTION: Defines a function call to initialize the Web3Inbox client with a configuration object including project ID, domain, access level, and log level. The purpose is to set up the client to communicate with the Reown infrastructure, specifying the scope of access and logging verbosity. Dependencies include the `initWeb3inboxClient` function, which is part of the Web3Inbox SDK. Parameters include `projectId`, `domain`, `allApps`, and `logLevel`, where each influences the client’s operation and permissions.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/initialization/react.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninitWeb3inboxClient({ projectId, domain, allApps, logLevel })\n```\n\n----------------------------------------\n\nTITLE: Creating a Connect Button with AppKit Web Components in TypeScript\nDESCRIPTION: This snippet defines a React functional component that renders an AppKit web component button. It demonstrates how to include a custom web component and indicates that these components are globally available without the need for imports.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/solana/about/triggermodal.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default function ConnectButton() {\n  return <appkit-button />;\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Dapp for Notifications using Notify API in Kotlin\nDESCRIPTION: Enables a user to subscribe to a dapp to receive notifications by providing the dapp domain URI, user's blockchain account in CAIP-10 format, and an optional timeout parameter. Processes subscription asynchronously and handles success or error results in a sealed class pattern. Requires WalletConnect Notify SDK. Inputs include appDomain as Uri, account string, and timeout Duration. Outputs include subscription success or failure events.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/notifications/notify/usage.mdx#_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval appDomain: Uri = // Dapp uri. e.g. gm.walletconnect.com\nval account: String = // CAIP-10 account\nval timeout: Duration? = // Optional. Timeout - min 5 sec, max 60 sec, default 60 sec\nval params = Notify.Params.Subscribe(appDomain, account, timeout)\n\nNotifyClient.subscribe(params = params).let { result ->\n    when (result) {\n        is Notify.Result.Subscribe.Success -> {\n          // callback for when the subscription request was successful\n        }\n\n        is Notify.Result.Subscribe.Error -> {\n          // callback for when the subscription request has failed\n        }\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the Active Account with Web3Inbox Client in TypeScript\nDESCRIPTION: This snippet demonstrates asynchronously setting the currently managed CAIP-10 account for the Web3Inbox client using client.setAccount(). The client must be previously instantiated and available in the scope. The method expects a string identifier for the CAIP-10 account as input and updates the client's internal state to track this account. No output is directly returned from the set operation, but other client methods and listeners will reflect the change.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/setting-account/javascript.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait client.setAccount('eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029')\n```\n\n----------------------------------------\n\nTITLE: Importing Chain Abstraction Module in JavaScript\nDESCRIPTION: This snippet demonstrates importing the ChainAbstraction component from a shared module located at '/snippets/appkit/shared/chain-abstraction.mdx'. It establishes the dependency required to include the Chain Abstraction functionality within the application.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/experimental/chain-abstraction.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ChainAbstraction from \"/snippets/appkit/shared/chain-abstraction.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Disconnecting WalletConnect Session (Swift)\nDESCRIPTION: Disconnects an active WalletConnect session by calling the asynchronous `disconnect` method on the `AppKit` instance. The `topic` parameter identifies the session to be disconnected. Requires the session `topic`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/actions.mdx#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\ntry await AppKit.instance.disconnect(topic: topic)\n```\n\n----------------------------------------\n\nTITLE: Define Theme Mode Type - WalletConnectModal React Native - TS\nDESCRIPTION: Specifies the acceptable string literal types (\"dark\" or \"light\") for the `themeMode` property in the React Native WalletConnectModal component. When set, it forces the modal into that specific mode.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/theming.mdx#_snippet_2\n\nLANGUAGE: TS\nCODE:\n```\nthemeMode: \"dark\" | \"light\";\n```\n\n----------------------------------------\n\nTITLE: Importing AppKit Hooks in React\nDESCRIPTION: Imports the necessary React hooks (`useAppKitProvider`, `useAppKitAccount`) from the `@reown/appkit/react` package and the type definition for `BitcoinConnector` from `@reown/appkit-adapter-bitcoin`. These are essential for accessing the AppKit provider and account information within a React component.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/bitcoin-send-transaction.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useAppKitProvider, useAppKitAccount } from \"@reown/appkit/react\";\nimport type { BitcoinConnector } from \"@reown/appkit-adapter-bitcoin\";\n```\n\n----------------------------------------\n\nTITLE: Handling FCM Token Refresh in React Native\nDESCRIPTION: Code to handle device token refreshes in Firebase Cloud Messaging. This ensures the wallet remains registered for push notifications even when the FCM token is periodically updated.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/push.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport messaging from '@react-native-firebase/messaging';\n\nmessaging().onTokenRefresh(async token => {\n    await walletKit.registerDeviceToken({\n        token: await messaging().getToken(), // device token\n        clientId: await walletKit.core.crypto.getClientId(), //your instance clientId\n        notificationType: 'fcm', // notification type\n        enableEncrypted: true // flag that enabled detailed notifications\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Notification History for Subscription Using Notify API in Kotlin\nDESCRIPTION: Fetches a list of notifications for a specific subscription topic using Notify API with optional parameters to limit result count, paginate starting after a specific notification ID, and set timeout. Handles success and error cases via sealed class pattern callbacks. Requires WalletConnect Notify SDK. Inputs consist of subscription topic string, optional limit (1-50), optional startingAfter notification ID string, and optional timeout. Outputs notification history data or error.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/notifications/notify/usage.mdx#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval topic: String = // active subscription topic\nval limit: Int? = // Optional. Limit - min 1, max 50, default 10\nval startingAfter: String? = // Optional. Id of the notification to start after\nval timeout: Duration? = // Optional. Timeout - min 5 sec, max 60 sec, default 60 sec\n\nval params = Notify.Params.GetNotificationHistory(topic, limit, startingAfter, timeout)\n\nNotifyClient.getNotificationHistory(params).let { result ->\n    when (result) {\n        is Notify.Result.GetNotificationHistory.Success -> {\n          // callback for when the get notification history request was successful\n        }\n\n        is Notify.Result.GetNotificationHistory.Error -> {\n          // callback for when the get notification history request has failed\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Marking All Notifications as Read via API using cURL\nDESCRIPTION: Shows how to mark all notifications as read using a cURL command. It sends an authenticated POST request to the `https://notify.walletconnect.com/v1/<PROJECT_ID>/mark-all-as-read` endpoint using the `NOTIFY_API_SECRET`. Useful for resetting unread status across all users.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/notifications/backend-integration.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST 'https://notify.walletconnect.com/v1/<PROJECT_ID>/mark-all-as-read' \\\n  --header 'Authorization: Bearer <NOTIFY_API_SECRET>'\n```\n\n----------------------------------------\n\nTITLE: Enabling Link Mode in ReownAppKitModal Configuration (Dart)\nDESCRIPTION: Initializes `ReownAppKitModal` in a Flutter application, demonstrating how to enable Link Mode by setting `linkMode: true` within the `PairingMetadata.redirect` object. This requires providing your project ID, application metadata (name, description, URL, icons), and configuring both native and universal redirect URIs.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/link-mode.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfinal _appKitModal = ReownAppKitModal(\n  context: context,\n  projectId: '{YOUR_PROJECT_ID}',\n  metadata: const PairingMetadata(\n    name: 'Example App',\n    description: 'Example app description',\n    url: 'https://example.com/',\n    icons: ['https://example.com/logo.png'],\n    redirect: Redirect(\n      native: 'exampleapp://',\n      universal: 'https://reown.com/exampleapp',\n      linkMode: true,\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing connector images in createAppKit using Ethers connectors in TypeScript\nDESCRIPTION: Shows connector image overrides for Ethers based connectors such as coinbaseWallet and walletConnect by specifying URLs corresponding to connector IDs, improving UI branding consistency for connection options.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateAppKit({\n  connectorImages: {\n    coinbaseWallet: \"https://images.mydapp.com/coinbase.png\",\n    walletConnect: \"https://images.mydapp.com/walletconnect.png\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Import Statements from Web3Wallet to WalletKit in Swift\nDESCRIPTION: Shows how to replace the `import Web3Wallet` statement with `import WalletKit` in Swift source files. This step is required to use the types and functions from the new WalletKit library.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/upgrade/from-web3wallet-ios.mdx#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\n/* highlight-delete-start */\n- import Web3Wallet\n/* highlight-delete-end */\n/* highlight-add-start */\n+ import WalletKit\n/* highlight-add-end */\n```\n\n----------------------------------------\n\nTITLE: Getting Subscriber Information with JavaScript\nDESCRIPTION: TypeScript example for querying subscriber information using the subscribers endpoint. Includes type definitions for request and response bodies, showing how to check if accounts are subscribed.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/notifications/backend-integration.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst PROJECT_ID = '<PROJECT_ID>'\nconst NOTIFY_API_SECRET = '<NOTIFY_API_SECRET>'\nconst requestBody: RequestBody = {\n  accounts: [\n    'eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029',\n    'eip155:1:0x0000000000000000000000000000000000000000'\n  ]\n}\n\nconst response = await fetch(`https://notify.walletconnect.com/v1/${PROJECT_ID}/subscribers`, {\n  method: 'POST',\n  headers: {\n    Authorization: `Bearer ${NOTIFY_API_SECRET}`\n  }\n  body: JSON.stringify(requestBody)\n})\n\nconst subscribers: ResponseBody = await response.json()\n\ntype RequestBody = {\n  // Max 100 accounts\n  accounts: string[]\n}\ntype ResponseBody = {\n  [account: string]: Subscriber\n}\ntype Subscriber = {\n  notification_types: string[]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up FCM Push Notification Listeners\nDESCRIPTION: Code to subscribe to Firebase Cloud Messaging notification events, both when the app is in the foreground and when it's in the background or closed.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/push.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport messaging from '@react-native-firebase/messaging';\n\n// emitted when the app is open and a notification is received\nmessaging().onMessage(async notification => {\n    ...\n});\n\n// emitted when the app is in the background or closed and a notification is received\nmessaging().setBackgroundMessageHandler(async notification => {\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Manually Sending Ethereum Transaction via WalletConnect in C#\nDESCRIPTION: Illustrates manually constructing and sending an Ethereum transaction (calling the `approve` method of a WETH9 contract) using WalletConnect without the Nethereum interceptor. It involves retrieving the active session and address, encoding the function call data using Nethereum utilities (FunctionCallEncoder, Sha3Keccack), creating a custom `Transaction` object, wrapping it in `EthSendTransaction`, and sending the request via `WalletConnect.Instance.RequestAsync`. Includes the definitions for the required `Transaction` and `EthSendTransaction` classes.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_47\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task ContractTransaction()\n{\n    var session = WalletConnect.Instance.ActiveSession;\n\n    // Because one session can have multiple namespaces, we need to select one.\n    // In most cases, especially in games, dapp will use only one namespace.\n    var @namespace = session.Namespaces.First();\n    var myAddress = session.CurrentAddress(@namespace.Key).Address;\n\n    // Define contract and function details\n    var contractAddress = \"0x4200000000000000000000000000000000000006\";\n    var toAddress = myAddress; // Use sender's address for the sake of example\n    var amount = new BigInteger(12345);\n\n    // Define the parameters for the approve function\n    var parameters = new Parameter[] {\n        new(\"address\", \"guy\"),\n        new(\"uint256\", \"wad\")\n    };\n\n    var functionCallEncoder = new FunctionCallEncoder();\n    var sha3Signature = new Sha3Keccack().CalculateHash(\"approve(address,uint256)\");\n\n    // Encode the parameters\n    var encodedParameters = functionCallEncoder\n        .EncodeParameters(parameters, toAddress, amount)\n        .ToHex();\n\n    // Combine signature and parameters\n    var data = \"0x\" + sha3Signature[..8] + encodedParameters;\n\n    // Create transaction\n    var ethSendTransaction = new EthSendTransaction(new Transaction\n    {\n        From = myAddress,\n        To = contractAddress,\n        Value = \"0\",\n        Data = data\n    });\n\n    try\n    {\n        var result = await WalletConnect.Instance.RequestAsync<EthSendTransaction, string>(ethSendTransaction);\n        Debug.Log($\"Transaction success! TxHash: {result}\", this);\n    }\n    catch (Exception e)\n    {\n        Debug.LogError(e, this);\n    }\n}\n\npublic class Transaction\n{\n    [JsonProperty(\"from\")] public string From { get; set; }\n\n    [JsonProperty(\"to\")] public string To { get; set; }\n\n    [JsonProperty(\"gas\", NullValueHandling = NullValueHandling.Ignore)]\n    public string Gas { get; set; }\n\n    [JsonProperty(\"gasPrice\", NullValueHandling = NullValueHandling.Ignore)]\n    public string GasPrice { get; set; }\n\n    [JsonProperty(\"value\")] public string Value { get; set; }\n\n    [JsonProperty(\"data\", NullValueHandling = NullValueHandling.Ignore)]\n    public string Data { get; set; } = \"0x\";\n}\n\n[RpcMethod(\"eth_sendTransaction\"), RpcRequestOptions(Clock.ONE_MINUTE, 99997)]\npublic class EthSendTransaction : List<Transaction>\n{\n    public EthSendTransaction(params Transaction[] transactions) : base(transactions)\n    {\n    }\n\n    [Preserve]\n    public EthSendTransaction()\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installation commands for Ethers v5 SDK with npm and other package managers\nDESCRIPTION: Includes commands to install Ethers v5 SDK version 5.7.2 along with core dependencies, using npm, Yarn, Bun, and pnpm, ensuring version compatibility.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/installation.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm\ninstall @reown/appkit @reown/appkit-adapter-ethers5 ethers@5.7.2\n```\n\nLANGUAGE: bash\nCODE:\n```\nYarn\nadd @reown/appkit @reown/appkit-adapter-ethers5 ethers@5.7.2\n```\n\nLANGUAGE: bash\nCODE:\n```\nBun\nbun add @reown/appkit @reown/appkit-adapter-ethers5 ethers@5.7.2\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm\nadd @reown/appkit @reown/appkit-adapter-ethers5 ethers@5.7.2\n```\n\n----------------------------------------\n\nTITLE: Using NetworkButton with Jetpack Compose in Kotlin\nDESCRIPTION: Illustrates adding a NetworkButton component in a Jetpack Compose screen with Kotlin. The snippet imports NetworkButton and state management from the AppKit button package. The appKitState is remembered and passed as the state parameter to NetworkButton. No further configuration is needed for NetworkButton. Input is the appKitState reflecting current app session and network info. Output is a composable NetworkButton that automatically manages display and interaction with current network state.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/components.mdx#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.reown.appkit.ui.components.button.NetworkButton\nimport com.reown.appkit.ui.components.button.rememberAppKitState\n\nYourAppScreen(navController: NavController) {\n    val appKitState = rememberAppKitState(navController = navController)\n    NetworkButton(state = appKitState)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit and Wagmi Adapter - JavaScript - bash\nDESCRIPTION: Installs Reown AppKit core and Wagmi adapter for generic JavaScript setups, omitting React Query. Requires npm, yarn, bun, or pnpm and assumes all Web3Modal v5 dependencies are removed before running these commands. Use for plain JavaScript or Wagmi-core based projects.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit @reown/appkit-adapter-wagmi\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit @reown/appkit-adapter-wagmi\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun a @reown/appkit @reown/appkit-adapter-wagmi\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit @reown/appkit-adapter-wagmi\n```\n\n----------------------------------------\n\nTITLE: Performing WalletConnect Session Operations: Update, Extend, and Ping in C#\nDESCRIPTION: Shows how to update session namespaces, extend session expiry, and send ping requests by providing the session topic string. Each operation returns a request object which must await the Acknowledged method to ensure the remote session confirms the action. This allows session lifecycle and connectivity management.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_38\n\nLANGUAGE: csharp\nCODE:\n```\nvar newNamespaces = new Namespaces(...);\nvar request = await dappClient.UpdateSession(sessionTopic, newNamespaces);\nawait request.Acknowledged();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar request = await dappClient.Extend(sessionTopic);\nawait request.Acknowledged();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar request = await dappClient.Ping(sessionTopic);\nawait request.Acknowledged();\n```\n\n----------------------------------------\n\nTITLE: Using Wallet Provider with Ethers in Vue Components\nDESCRIPTION: Demonstrates how to use the useAppKitProvider hook to get the wallet provider and sign messages using ethers.js. This example shows integration between AppKit and the ethers library.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/ethers/composables.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BrowserProvider } from \"ethers\";\nimport { useAppKitProvider } from \"@reown/appkit/vue\";\n\nfunction Components() {\n  const { walletProvider } = useAppKitProvider(\"eip155\");\n\n  async function onSignMessage() {\n    const provider = new BrowserProvider(walletProvider);\n    const signer = await provider.getSigner();\n    const signature = await signer?.signMessage(\"Hello AppKit Ethers\");\n    console.log(signature);\n  }\n\n  return <button onClick={() => onSignMessage()}>Sign Message</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AuthRequestParams Extension with Default Values\nDESCRIPTION: Example implementation of an extension for AuthRequestParams that provides default values for SIWE message creation. This includes domain, chains, nonce, URI, statement, resources for ReCaps, and methods.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/one-click-auth.mdx#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nextension AuthRequestParams {\n    static func stub(\n        domain: String = \"yourDappDomain.com\",\n        chains: [String] = [\"eip155:1\", \"eip155:137\"],\n        nonce: String = \"uniqueNonce\",\n        uri: String = \"https://yourDappDomain.com/login\",\n        statement: String? = \"I accept the Terms of Service: https://yourDappDomain.com/tos\",\n        resources: [String]? = nil, // Here your dapp may request authorization with ReCaps\n        methods: [String]? = [\"personal_sign\", \"eth_sendTransaction\"]\n    ) -> AuthRequestParams {\n        return try! AuthRequestParams(\n            domain: domain,\n            chains: chains,\n            nonce: nonce,\n            uri: uri,\n            statement: statement,\n            resources: resources,\n            methods: methods\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Switching Networks using useAppKitNetwork in Vue\nDESCRIPTION: Example of utilizing the `switchNetwork` function obtained from the `useAppKitNetwork` composable. It requires importing a network configuration object (e.g., `polygon` from `@reown/appkit/networks`) and passing it as an argument to the `switchNetwork` function.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/composables.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { polygon } from '@reown/appkit/networks'\n\n...\n\nnetworkData.switchNetwork(polygon)\n```\n\n----------------------------------------\n\nTITLE: Checking and Watching Subscription Status with Client API in TypeScript\nDESCRIPTION: This snippet shows how to check if the current account is subscribed to the current dapp and how to watch for changes in subscription status using the client API. No external dependencies are required besides the instantiated 'client'. The optional callback receives a boolean indicating the subscription state, and the isSubscribed variable holds a boolean value reflecting the current state.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/managing-subscription/javascript.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst isSubscribed = client.isSubscribedToDapp()\n\nclient.watchIsSubscribed(isSubbed => console.log({ isSubbed }))\n```\n\n----------------------------------------\n\nTITLE: Replacing Default RainbowKit Configuration with WagmiAdapter Configuration in TypeScript\nDESCRIPTION: Demonstrates how to fully replace the RainbowKit default config with a new wagmiAdapter configuration. It shows creating a list of supported networks and instantiating a WagmiAdapter with project ID, server-side rendering enabled, and custom storage using cookies. This setup enables AppKit to connect with wagmi for Ethereum network support and project identity.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-rainbowkit-next.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { WagmiAdapter } from '@reown/appkit-adapter-wagmi'\nimport { arbitrum, mainnet } from '@reown/appkit/networks'\nexport const projectId = 'YOUR_PROJECT_ID'\n\nexport const networks = [mainnet, arbitrum]\n\n//Set up the Wagmi Adapter (Config)\nexport const wagmiAdapter = new WagmiAdapter({\n  storage: createStorage({\n    storage: cookieStorage\n  }),\n  ssr: true,\n  networks,\n  projectId\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Blockchain Account with Notify SDK in Kotlin\nDESCRIPTION: Prepares registration parameters including the account identifier and a signing callback, to verify blockchain ownership via EIP191 signatures. Uses NotifyClient.register to initiate registration and handle success or failure asynchronously.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_29\n\nLANGUAGE: Kotlin\nCODE:\n```\nval params = Notify.Params.Registration(\n    account = /*CAIP-10 accountId*/,\n    onSign = {\n        // Sign message for ownership verification\n        return CacaoSigner.sign(message, /*privateKey*/, SignatureType.EIP191)\n        // Return null if user declines to sign\n        return null\n    }\n)\n\nNotifyClient.register(\n      params,\n      onSuccess = {\n          // Successful registration callback\n      },\n      onError = { error: Notify.Model.Error ->\n          // Registration failure callback\n      }\n  )\n```\n\n----------------------------------------\n\nTITLE: Responding to Session Requests with User Feedback in TypeScript\nDESCRIPTION: Implementation for responding to session requests with proper loading state management. This code handles both approval and rejection of session requests and includes UI state management to provide feedback to users during the process.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/best-practices.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n    await walletKit.respondSessionRequest(params);\n    // update UI -> remove the loader\n} catch (error) {\n    // present error to the user\n}\n```\n\n----------------------------------------\n\nTITLE: Disconnecting a Session (Swift)\nDESCRIPTION: Terminates a session connection between the wallet and the dapp using `Sign.instance.disconnect`. Requires the session topic.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_20\n\nLANGUAGE: Swift\nCODE:\n```\ntry await Sign.instance.disconnect(topic: session.topic)\n```\n\n----------------------------------------\n\nTITLE: Configuring App Redirect with Custom URL Scheme in AppKit for Unity\nDESCRIPTION: Configures AppKit with a custom URL scheme to handle redirects from wallets back to the app after connection or request approval. Requires registering URL schemes in platform-specific settings.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/options.mdx#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// AppKit configuration\nvar appKitConfig = new AppKitConfig\n{\n    projectId = \"884a........2cc\",\n    metadata = new Metadata(\n        \"My app\",\n        \"My app\",\n        \"https://example.com\",\n        \"https://..../appkit-icon.png\",\n        new RedirectData\n        {\n            // Used by native wallets to redirect back to the app after approving requests\n            Native = \"my-url-schema://\"\n        }\n    ),\n};\n\n\nawait AppKit.InitializeAsync(\n    appKitConfig\n);\n```\n\n----------------------------------------\n\nTITLE: Using useAppKitAccount Hook to Access Client Info in React\nDESCRIPTION: This snippet demonstrates how to utilize the useAppKitAccount hook to obtain client-specific details such as address and connection status within a React component. It depends on the '@reown/appkit/react' package and provides account data to facilitate user interactions or displays.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/solana/hooks.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useAppKitAccount } from \"@reown/appkit/react\";\n\nfunction Components() {\n  const { address, caipAddress, isConnected } = useAppKitAccount();\n\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit and Wagmi Adapter - Vue - bash\nDESCRIPTION: Installs Reown AppKit, the Wagmi adapter, Vue Query, and Wagmi for Vue to support full integration in Vue applications. Use after uninstalling all Web3Modal v5, Vue, and Wagmi legacy dependencies. The commands set up state management and networking foundations required by AppKit.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit @reown/appkit-adapter-wagmi @tanstack/vue-query @wagmi/vue\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit @reown/appkit-adapter-wagmi @tanstack/vue-query @wagmi/vue\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun a @reown/appkit @reown/appkit-adapter-wagmi @tanstack/vue-query @wagmi/vue\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit @reown/appkit-adapter-wagmi @tanstack/vue-query @wagmi/vue\n```\n\n----------------------------------------\n\nTITLE: Installing and Uninstalling Libraries using Bash\nDESCRIPTION: Shell commands to install Reown's AppKit libraries along with the wagmi adapter and to uninstall the RainbowKit package. Commands are provided for various package managers including npm, Yarn, Bun, and pnpm, facilitating the transition in the Node.js environment. These commands ensure that the required dependencies for AppKit are added while removing RainbowKit to avoid conflicts.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-rainbowkit-next.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit @reown/appkit-adapter-wagmi && npm uninstall @rainbow-me/rainbowkit\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit @reown/appkit-adapter-wagmi&& yarn remove @rainbow-me/rainbowkit\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @reown/appkit @reown/appkit-adapter-wagmi && npm uninstall @rainbow-me/rainbowkit\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit @reown/appkit-adapter-wagmi&& pnpm remove @rainbow-me/rainbowkit\n```\n\n----------------------------------------\n\nTITLE: Activating a pairing in React Native SDK\nDESCRIPTION: Activates an existing pairing by providing its `topic`, typically after the peer has successfully paired. Ensures the pairing is active for subsequent operations.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait sdkClient.core.pairing.activate({ topic: \"1b3eda3f4...\" })\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Dapp Notification Channel in Kotlin\nDESCRIPTION: Prepares subscription parameters with Dapp URI and CAIP-10 account, then calls NotifyClient.subscribe to establish the subscription. Includes success and error callbacks for handling the subscription process.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_31\n\nLANGUAGE: Kotlin\nCODE:\n```\nval subscribeParams = Notify.Params.Subscribe(/*Dapp URI*/, /*CAIP-10 account*/)\n\nNotifyClient.subscribe(\n    params = subscribeParams,\n    onSuccess = {\n        // Subscription success callback\n    },\n    onError = { error: Notify.Model.Error ->\n        // Subscription failure callback\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Importing the Reown AppKit package\nDESCRIPTION: Imports the core package required for using Reown AppKit functionalities in a Flutter app, providing access to modal and app kit classes.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/usage.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"package:reown_appkit/reown_appkit.dart\";\n```\n\n----------------------------------------\n\nTITLE: Unregistering Account WalletConnect Notify Kotlin\nDESCRIPTION: Demonstrates how to unregister an account from the WalletConnect Notify API. This action removes all subscriptions and messages associated with the specified account from the client's local storage. It requires the CAIP-10 account identifier and uses success/error callbacks.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/notifications/notify/usage.mdx#_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval params = Notify.Params.Unregistration(/*CAIP-10 account*/)\nNotifyClient.unregister(\n  params,\n  onSuccess = {\n      // callback for when the unregistration was successful\n  },\n  onError = { error ->\n    // callback for when the unregistration has failed\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering AppKit Button with React TSX\nDESCRIPTION: This snippet provides a basic implementation of a React functional component that renders the `<appkit-button>` web component. The web component handles the logic for opening AppKit when clicked. It demonstrates the simplicity of integrating the pre-built web component within a React application, leveraging its global availability.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/wagmi/about/triggermodal.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function ConnectButton() {\n  return <appkit-button />\n}\n```\n\n----------------------------------------\n\nTITLE: Opening WalletConnect Modal - Android View Navigation Component\nDESCRIPTION: Demonstrates how to open the WalletConnect modal from an Android View fragment using the Navigation Component. It calls `openWalletConnectModal` on the `NavController`, passing the action ID to the modal destination.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_30\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.navigation.fragment.findNavController\nimport com.walletconnect.wcmodal.ui.openWalletConnectModal\n\nfindNavController().openWalletConnectModal(id = R.id.action_to_bottomSheet)\n```\n\n----------------------------------------\n\nTITLE: Disconnecting Session with WalletConnect Modal - Android Kotlin\nDESCRIPTION: Demonstrates how to disconnect an active WalletConnect session using the SDK in Android Kotlin. It requires the session topic and provides success and error callbacks.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_35\n\nLANGUAGE: kotlin\nCODE:\n```\nval disconnectParams = WalletConnectModal.Params.Disconnect(topic)\n\nWalletConnectModal.disconnect(\n    disconnect = disconnectParams,\n    onSuccess = {\n    /* callback that letting you know that you have successfully disconnected */\n    },\n    onError = { error ->\n    /* callback for error while trying to disconnection with a peer */\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Web3Inbox Client - React - TypeScript\nDESCRIPTION: This snippet demonstrates the updated method for initializing the Web3Inbox client. Unlike the previous version which used a hook, the client is now initialized via a simple function call. It takes configuration parameters like projectId, domain, and application scope flags.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/migration/react.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useInitWeb3InboxClient } from '@web3inbox/widget-react'\nimport { initWeb3InboxClient } from '@web3inbox/react'\n\nuseInitWeb3inboxClient({ projectId, domain, isLimited })\ninitWeb3inboxClient({ projectId, domain, allApps })\n```\n\n----------------------------------------\n\nTITLE: Signing Process for hedera_signMessage - JavaScript Pseudocode\nDESCRIPTION: Outlines, in JavaScript-like pseudocode, the cryptographic process by which a controller encodes and signs a message for hedera_signMessage. It defines how the message is UTF-8 encoded with a standard prefix and length, and signed using the user's Ed25519 or ECDSA key, producing a compatible signature for Hedera operations.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/hedera-rpc.mdx#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n<Ed25519 or ECDSA Key>.sign(\"\\x19Hedera Signed Message:\\n\" + len(message) + message)\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Authentication Responses in AppKit\nDESCRIPTION: Code example showing how to subscribe to the authResponsePublisher to monitor for successful SIWE authentication responses. This allows your app to detect when a user has successfully authenticated.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/one-click-auth.mdx#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nAppKit.instance.authResponsePublisher.sink { (id, result) in\n    switch result {\n    case .success((session, cacaos)):\n        // User has authenticated\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: WalletConnect Modal Publishers - iOS Swift\nDESCRIPTION: Lists the various Combine publishers available in the iOS Swift SDK for subscribing to modal and session-related events. These publishers provide asynchronous updates on session status, connection state, and more.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_26\n\nLANGUAGE: swift\nCODE:\n```\npublic var sessionPublisher: AnyPublisher<[Session], Never>\npublic var sessionSettlePublisher: AnyPublisher<Session, Never>\npublic var sessionRejectionPublisher: AnyPublisher<(Session.Proposal, Reason), Never>\npublic var sessionDeletePublisher: AnyPublisher<(String, Reason), Never>\npublic var sessionResponsePublisher: AnyPublisher<Response, Never>\npublic var socketConnectionStatusPublisher: AnyPublisher<SocketConnectionStatus, Never>\n```\n\n----------------------------------------\n\nTITLE: Monitoring Session Proposal Expiration - Swift\nDESCRIPTION: This snippet subscribes to session proposal expiration events, automatically closing proposal modals and alerting the user when a proposal expires after 5 minutes. It helps manage the UI flow during user decision timeframes. Uses Combine framework with WalletKit SDK.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/best-practices.mdx#_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nWalletKit.instance.sessionProposalExpirationPublisher.sink { _ in\n    // let user know that session proposal has expired, update UI\n}.store(in: &publishers)\n```\n\n----------------------------------------\n\nTITLE: Defining the NotifyNotification Interface in TypeScript\nDESCRIPTION: Defines the structure of a notification object as used in messaging events. The NotifyNotification interface specifies required string, number, and nullable fields corresponding to notification metadata and content. This interface is used to ensure type safety in notification-related event handlers. No dependencies are required beyond a TypeScript project. Inputs and outputs are not applicable; this defines data structure.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/events/javascript.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface NotifyNotification {\n  title: string\n  sentAt: number\n  body: string\n  id: string\n  url: string | null\n  type: string\n}\n```\n\n----------------------------------------\n\nTITLE: Rejecting a WalletConnect Authentication Request in Kotlin\nDESCRIPTION: Rejects an incoming WalletConnect authentication request. Calls `SignClient.rejectAuthenticate` with parameters including the request ID (`sessionAuthenticate.id`) and a rejection reason string. Includes callbacks for success and error handling.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_39\n\nLANGUAGE: kotlin\nCODE:\n```\nval rejectParams = Sign.Params.RejectAuthenticate(\n    id = sessionAuthenticate.id,\n    reason = \"Reason\"\n)\n\nSignClient.rejectAuthenticate(rejectParams,\n  onSuccess = {\n        //Success\n  },\n  onError = { error ->\n      //Handle error\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Using CloudBanner React Component\nDESCRIPTION: Implements the CloudBanner component within JSX to embed a cloud-themed banner into the UI. This straightforward usage promotes user engagement or informative display.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/embedded-widget/usage.mdx#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n<CloudBanner />\n```\n\n----------------------------------------\n\nTITLE: Installing WalletConnectModal Flutter Package (Dart)\nDESCRIPTION: Displays the command needed to add the WalletConnectModal Flutter package to a Flutter project using the flutter pub package manager. The package integrates WalletConnectModal UI capabilities into Flutter apps.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/about.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub add walletconnect_modal_flutter\n```\n\n----------------------------------------\n\nTITLE: Creating crypto polyfill for Expo SDK 48 in JavaScript\nDESCRIPTION: Defines a Crypto class that wraps the getRandomValues method from expo-crypto to provide a polyfill for the missing native crypto object in Expo SDK 48. It conditionally assigns this polyfilled crypto to the global window object if the native crypto is undefined. This ensures that libraries expecting a global crypto object can function correctly.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/expo/additional-expo48.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// src/crypto-polyfill.js\n\n// Apply only with Expo SDK 48\nimport { getRandomValues as expoCryptoGetRandomValues } from \"expo-crypto\";\n\nclass Crypto {\n  getRandomValues = expoCryptoGetRandomValues;\n}\n\n// eslint-disable-next-line no-undef\nconst webCrypto = typeof crypto !== \"undefined\" ? crypto : new Crypto();\n\n(() => {\n  if (typeof crypto === \"undefined\") {\n    Object.defineProperty(window, \"crypto\", {\n      configurable: true,\n      enumerable: true,\n      get: () => webCrypto,\n    });\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Defining a Strongly Typed RpcResponse Class for eth_getTransactionReceipt in C#\nDESCRIPTION: Defines the TransactionReceipt class which represents the strongly typed response for the 'eth_getTransactionReceipt' RPC method. Uses Newtonsoft.Json attributes to map JSON properties to fields and applies RpcMethod and RpcRequestOptions attributes for method identification and response expiry settings. This class enables correct deserialization of the Ethereum transaction receipt response.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_45\n\nLANGUAGE: csharp\nCODE:\n```\nusing Newtonsoft.Json;\nusing System.Numerics;\n\n[RpcMethod(\"eth_getTransactionReceipt\"), RpcRequestOptions(Clock.ONE_MINUTE, 99995)]\npublic class TransactionReceipt\n{\n    [JsonProperty(\"transactionHash\")]\n    public string TransactionHash;\n\n    [JsonProperty(\"transactionIndex\")]\n    public BigInteger TransactionIndex;\n\n    [JsonProperty(\"blockHash\")]\n    public string BlockHash;\n\n    [JsonProperty(\"blockNumber\")]\n    public BigInteger BlockNumber;\n\n    [JsonProperty(\"from\")]\n    public string From;\n\n    [JsonProperty(\"to\")]\n    public string To;\n\n    [JsonProperty(\"cumulativeGasUsed\")]\n    public BigInteger CumulativeGasUsed;\n\n    [JsonProperty(\"effectiveGasPrice \")]\n    public BigInteger EffectiveGasPrice ;\n\n    [JsonProperty(\"gasUsed\")]\n    public BigInteger GasUsed;\n\n    [JsonProperty(\"contractAddress\")]\n    public string ContractAddress;\n\n    [JsonProperty(\"logs\")]\n    public object[] Logs;\n\n    [JsonProperty(\"logsBloom\")]\n    public string LogBloom;\n\n    [JsonProperty(\"type\")]\n    public BigInteger Type;\n\n    [JsonProperty(\"status\")]\n    public BigInteger Status;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing obsolete network addition code\nDESCRIPTION: This code snippet illustrates removing legacy code lines that add extra or test networks to the chain presets, replaced by new methods applicable to the updated network management.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-flutter.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Remove the code lines below\nW3MChainPresets.chains.addAll(W3MChainPresets.extraChains);\nW3MChainPresets.chains.addAll(W3MChainPresets.testChains);\n\nfinal testNetworks = ReownAppKitModalNetworks.test['eip155'] ?? [];\nfinal extraNetworks = ReownAppKitModalNetworks.extra['eip155'] ?? Siemens\nReownAppKitModalNetworks.addNetworks('eip155', testNetworks);\nReownAppKitModalNetworks.addNetworks('eip155', extraNetworks);\n```\n\n----------------------------------------\n\nTITLE: Replacing ConnectKit Button with w3m-button in Next.js Homepage - React TypeScript\nDESCRIPTION: This code snippet demonstrates replacing the ConnectKitButton component with the w3m-button custom element in the /pages/index.tsx file of a Next.js application. Required dependencies are Next.js and prior AppKit integration. The Home component renders a styled container with centered wallet connection button using w3m-button. Inputs are React props and context set up in prior migration steps. Output is an updated homepage that connects users with Reown AppKit instead of ConnectKit. Ensure that the web component w3m-button is available and AppKit setup is complete before using this snippet.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-connectkit-next.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { NextPage } from 'next';\n// import { ConnectKitButton } from 'connectkit';\n\nconst Home: NextPage = () => {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        height: '100vh',\n      }}\n    >\n      <w3m-button />   \n    </div>\n  );\n};\nexport default Home;\n```\n\n----------------------------------------\n\nTITLE: Monitoring Session Request Expiry - Swift\nDESCRIPTION: This snippet subscribes to session request expiration events, informing users when a request expires after a defined period (between 5 minutes and 7 days). It ensures the UI is updated accordingly. Utilizes Combine and WalletKit SDK.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/best-practices.mdx#_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\nWalletKit.instance.requestExpirationPublisher.sink { _ in\n    // let user know that request has expired\n}.store(in: &publishers)\n```\n\n----------------------------------------\n\nTITLE: Opening Modal UI with Specific View (useAppKit) TypeScript\nDESCRIPTION: This snippet shows how to call the `open` function obtained from the useAppKit hook with an options object. This object allows specifying the initial view of the modal ('Account', 'Connect', 'Networks', 'WhatIsANetwork', 'WhatIsAWallet') and an optional `namespace` ('solana', 'bip122', 'eip155') when using the 'Connect' view to filter wallet options.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/hooks.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nopen({ view: 'Account' })\n\n// to connect and show multi wallets view\nopen({ view: 'Connect'})\n\n// to connect and show only solana wallets\nopen({ view: 'Connect', namespace: 'solana' })\n\n// to connect and show only bitcoin wallets\nopen({ view: 'Connect', namespace: 'bip122' })\n\n// to connect and show only ethereum wallets\nopen({ view: 'Connect', namespace: 'eip155' })\n```\n\n----------------------------------------\n\nTITLE: Handling Redirect After Session Authentication in Dart/Flutter\nDESCRIPTION: Shows the implementation of redirecting back to the Dapp after handling a session authentication request (`_onSessionAuthRequest`) using the `_walletKit.redirectToDapp` method in Dart. This flow applies to wallets supporting One-Click Auth and utilizes the proposer's redirect metadata from the authentication request event. Depends on the WalletKit SDK.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/mobile-linking.mdx#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n// If your wallet supports One-Click Auth\n_walletKit!.onSessionAuthRequest.subscribe(_onSessionAuthRequest);\n//\nvoid _onSessionAuthRequest(SessionAuthRequest? event) async {\n  if (event != null) {\n    // Process session authentication\n    // ....\n    // Redirect back to proposer dapp\n    try {\n      await _walletKit.redirectToDapp(\n        topic: topic,\n        redirect: event.params.proposer.metadata.redirect,\n      );\n    } catch (e) {\n      ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Android Intent Filter XML for Deep Linking\nDESCRIPTION: Defines an intent filter configuration in AndroidManifest.xml to associate a custom URI scheme with the wallet application, enabling it to handle deep link URLs for session initiation and responses.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/mobile-linking.mdx#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<intent-filter>\n    <action android:name=\"android.intent.action.VIEW\" />\n    <category android:name=\"android.intent.category.DEFAULT\" />\n    <category android:name=\"android.intent.category.BROWSABLE\" />\n    <data android:scheme=\"examplewallet\" /> <!-- your own custom scheme -->\n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Installing AppKit and Adapters for Wagmi + Bitcoin (Bash)\nDESCRIPTION: These bash commands show how to install AppKit alongside adapters for both Wagmi and Bitcoin support. Select the command for your preferred package manager. Requires Node.js and the respective package manager. Installs @reown/appkit, @reown/appkit-adapter-wagmi, and @reown/appkit-adapter-bitcoin.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/multichain.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit @reown/appkit-adapter-wagmi @reown/appkit-adapter-bitcoin\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit @reown/appkit-adapter-wagmi @reown/appkit-adapter-bitcoin\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun a @reown/appkit @reown/appkit-adapter-wagmi @reown/appkit-adapter-bitcoin\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit @reown/appkit-adapter-wagmi @reown/appkit-adapter-bitcoin\n```\n\n----------------------------------------\n\nTITLE: Configuring AppKit Bitcoin Integration in React Application\nDESCRIPTION: This code demonstrates the complete setup process for integrating Bitcoin wallet functionality in a React application using AppKit. It covers project ID configuration, network setup, Bitcoin adapter initialization, metadata definition, modal creation with features, and event handlers for triggering the connection modal.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/bitcoin/about/implementation.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// App.tsx\nimport { createAppKit } from '@reown/appkit'\nimport { BitcoinAdapter } from '@reown/appkit-adapter-bitcoin'\nimport { bitcoin } from '@reown/appkit/networks'\n\n// 1. Get projectId from https://cloud.reown.com\nconst projectId = 'YOUR_PROJECT_ID'\n\n// 2. Set the networks\nconst networks = [bitcoin]\n\n// 3. Set up Bitcoin Adapter\nconst bitcoinAdapter = new BitcoinAdapter({\n  projectId\n})\n\n// 4. Create a metadata object - optional\nconst metadata = {\n  name: 'AppKit',\n  description: 'AppKit Bitcoin Example',\n  url: 'https://example.com', // origin must match your domain & subdomain\n  icons: ['https://avatars.githubusercontent.com/u/179229932']\n}\n\n// 5. Create modal\nconst modal = createAppKit({\n  adapters: [bitcoinAdapter],\n  networks,\n  metadata,\n  projectId,\n  features: {\n    analytics: true // Optional - defaults to your Cloud configuration,\n    email: false,\n    socials: []\n  }\n})\n\n// 6. Trigger modal programaticaly\nconst openConnectModalBtn = document.getElementById('open-connect-modal')\nconst openNetworkModalBtn = document.getElementById('open-network-modal')\n\nopenConnectModalBtn.addEventListener('click', () => modal.open())\nopenNetworkModalBtn.addEventListener('click', () => modal.open({ view: 'Networks' }))\n```\n\n----------------------------------------\n\nTITLE: Initializing AppKit with DefaultSIWX for Multi-Chain Authentication (TypeScript)\nDESCRIPTION: Demonstrates how to set up the AppKit instance with SIWX authentication using the DefaultSIWX configuration from @reown/appkit-siwx. Requires @reown/appkit and @reown/appkit-siwx packages. Key parameters include projectId, networks, metadata, and optionally the siwx parameter for enabling the default SIWX handler. The resulting appkit instance is configured for multi-chain support, enabling users to sign-in with supported blockchain wallets.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/siwx/siwx-default.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAppKit } from \"@reown/appkit\";\n// Add the following code line\nimport { DefaultSIWX } from \"@reown/appkit-siwx\";\n\nconst appkit = createAppKit({\n  projectId,\n  networks,\n  metadata,\n  // Add the following code line\n  siwx: new DefaultSIWX(), // add this line to enable SIWX\n});\n```\n\n----------------------------------------\n\nTITLE: Installing AppKit SIWE Package (Yarn) - Bash\nDESCRIPTION: This snippet shows the installation of @reown/appkit-siwe and siwe via Yarn. Both libraries are necessary for setting up SIWE authentication in an AppKit-based application. Execute this command from your project folder to add the dependencies.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/siwe.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit-siwe siwe\n```\n\n----------------------------------------\n\nTITLE: Installing Updated AppKit v5 Dependencies with Yarn - React - Bash\nDESCRIPTION: This Yarn command adds the latest versions of AppKit's Wagmi integration, Wagmi v2.x, Viem v2.x, and @tanstack/react-query v5.x for use in React projects. Dependencies include Node.js and Yarn. This setup ensures the latest compatible AppKit features and removes reliance on older modules. Key parameters are package names and minimum version constraints.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/appkitv2.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @web3modal/wagmi@latest wagmi@2.x viem@2.x @tanstack/react-query@5.x\n```\n\n----------------------------------------\n\nTITLE: Launching Current Wallet - Flutter Example\nDESCRIPTION: Demonstrates how to programmatically launch the currently connected wallet application using the Flutter SDK. This is achieved by calling the `launchCurrentWallet()` method on the service object.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_39\n\nLANGUAGE: dart\nCODE:\n```\nservice.launchCurrentWallet()\n```\n\n----------------------------------------\n\nTITLE: User Sign-In and Sign-Out Callback Handlers for SIWE in JavaScript\nDESCRIPTION: Optional callback functions triggered respectively when a user signs in or signs out. `onSignIn` receives an optional session object when invoked, allowing the application to react to successful authentication events. `onSignOut` is called without parameters to handle user sign-out events, supporting custom UI updates or cleanup.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/siwe/parameters.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nonSignIn `(session?: SIWESession) => void`\n\nCallback when user signs in (Optional).\n```\n\nLANGUAGE: typescript\nCODE:\n```\nonSignOut `() => void`\n\nCallback when user signs out (Optional).\n```\n\n----------------------------------------\n\nTITLE: Setting/Retrieving Web3Inbox Account - React - TypeScript\nDESCRIPTION: This snippet illustrates the change in managing user accounts. Previously, a `setAccount` function from `useW3iAccount` was used. The new approach utilizes `useWeb3InboxAccount` which directly provides the account data (`data: account`) based on the provided account address. Note the package rename from `@web3inbox/widget-react` to `@web3inbox/react`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/migration/react.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n- import { useW3iAccount } from \"@web3inbox/widget-react\"\n+ import { useWeb3InboxAccount } from \"@web3inbox/react\"\n- const { setAccount } = useW3iAccount()\n\nsetAccount(`eip155:1:0x...`)\n+ const { data: account } = useWeb3InboxAccount(`eip155:1:0x...`)\n```\n\n----------------------------------------\n\nTITLE: Installing Updated AppKit v5 Dependencies with npm - React - Bash\nDESCRIPTION: This command installs the latest AppKit Wagmi integration and updates Wagmi, Viem, and @tanstack/react-query to the required versions for React applications. Prerequisites: Node.js and npm should be installed. The command removes the need for deprecated v2 dependencies and ensures compatibility with AppKit v5. The parameters specify package names and compatible versions, installing dependencies required for using AppKit with React.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/appkitv2.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @web3modal/wagmi@latest wagmi@2.x viem@2.x @tanstack/react-query@5.x\n```\n\n----------------------------------------\n\nTITLE: Installing Updated AppKit v5 Dependencies with npm - JavaScript - Bash\nDESCRIPTION: This npm command upgrades JavaScript applications to AppKit v5 by installing @web3modal/wagmi@latest, @wagmi/connectors, @wagmi/core@2.x, and viem@2.x. Prerequisites are Node.js and npm. The dependencies ensure that the installed packages are compatible with AppKit v5 in non-React (vanilla JavaScript) environments.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/appkitv2.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @web3modal/wagmi@latest @wagmi/connectors @wagmi/core@2.x viem@2.x\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket Connection State - Swift\nDESCRIPTION: This example tracks the WebSocket connection status with the relay server, updating the UI based on connection events such as connected or disconnected. It aids in providing real-time feedback on network status. Depends on WalletKit SDK and Combine framework.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/best-practices.mdx#_snippet_8\n\nLANGUAGE: Swift\nCODE:\n```\nWalletKit.instance.socketConnectionStatusPublisher\n    .receive(on: DispatchQueue.main)\n    .sink { status in\n    switch status {\n    case .connected:\n        // ...\n    case .disconnected:\n        // ...\n    }\n}.store(in: &publishers)\n```\n\n----------------------------------------\n\nTITLE: Signing Typed Data (EIP-712) via EVM in C#\nDESCRIPTION: Shows how to sign structured data conforming to the EIP-712 standard using `AppKit.EVM.SignTypedDataAsync()` in C#. Takes the JSON string representation of the typed data and returns the signature as a hex string.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/actions.mdx#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nstring typedData = \"{ /* Your EIP-712 typed data structure */ }\";\nstring signature = await AppKit.EVM.SignTypedDataAsync(typedData);\n```\n\n----------------------------------------\n\nTITLE: Using AppKitModalAccountButton to view account details\nDESCRIPTION: A button that displays connected wallet account information such as address and balance, and opens the account details view when tapped.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/usage.mdx#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nAppKitModalAccountButton(appKitModal: _appKitModal)\n```\n\n----------------------------------------\n\nTITLE: Customizing Modal Theme with useAppKitTheme in TypeScript\nDESCRIPTION: Illustrates using the `useAppKitTheme` hook from `@reown/appkit/react` to get and set the modal's theme mode (e.g., 'dark') and theme variables for custom styling. Includes examples of using `setThemeMode` and `setThemeVariables`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/hooks.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAppKitTheme } from \"@reown/appkit/react\";\nconst { themeMode, themeVariables, setThemeMode, setThemeVariables } =\n  useAppKitTheme();\n\nsetThemeMode(\"dark\");\n\nsetThemeVariables({\n  \"--w3m-color-mix\": \"#00BB7F\",\n  \"--w3m-color-mix-strength\": 40,\n});\n```\n\n----------------------------------------\n\nTITLE: Listening for Notification-Related Events in React\nDESCRIPTION: This React snippet sets up event listeners for notification events, enabling real-time response to notification actions such as clicks or dismissals. It integrates with the notification API to facilitate event-driven behaviors.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/notifications/frontend-integration/api.mdx#_snippet_7\n\nLANGUAGE: MDX\nCODE:\n```\n<Events />\n```\n\n----------------------------------------\n\nTITLE: Opening Wallet Connection Modal with 'Connect' View in TypeScript\nDESCRIPTION: Shows how to invoke the wallet modal displaying the list of available wallets or network selection, using the `open` function with 'Connect' as the view. It serves as the default connection interface.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/core/open.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nopen({ view: \"Connect\" });\n```\n\n----------------------------------------\n\nTITLE: Opening WalletConnect Modal - Android Compose Navigation\nDESCRIPTION: Shows how to open the WalletConnect modal when using Jetpack Compose navigation. It uses the `openWalletConnectModal` extension function on the `NavController`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.walletconnect.wcmodal.ui.openWalletConnectModal\n\nnavController.openWalletConnectModal()\n```\n\n----------------------------------------\n\nTITLE: Rejecting Session Proposals (TypeScript/React Native)\nDESCRIPTION: Rejects a session proposal received from a dapp in a React Native wallet using WalletKit. Calls `rejectSession` with parameters and includes error handling and UI update logic (e.g., removing a loader).\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n    await walletKit.rejectSession(params);\n    // update UI -> remove the loader\n} catch (error) {\n    // present error to the user\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring & Initializing WalletConnectModal iOS\nDESCRIPTION: Shows how to define application metadata and configure the WalletConnectModal client for iOS using Swift. This is a required step before using the modal.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet metadata = AppMetadata(\n    name: \"Example Wallet\",\n    description: \"Wallet description\",\n    url: \"example.wallet\",\n    icons: [\"https://avatars.githubusercontent.com/u/37784886\"],\n    // Used for the Verify: to opt-out verification ignore this parameter\n    verifyUrl: \"verify.walletconnect.com\"\n)\n\nWalletConnectModal.configure(\n    projectId: PROJECT_ID,\n    metadata: metadata\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Session Request Expiry Event in WalletKit\nDESCRIPTION: Describes how to subscribe to the 'session_request_expire' event on WalletKit. This event indicates that a session request initiated by the dapp has expired and the corresponding UI element should be removed.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/best-practices.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nwalletKit.on(\"session_request_expire\", (event) => {\n    // request expired and any modal displaying it should be removed\n    const { id } = event;\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Authentication Features in createAppKit (TypeScript)\nDESCRIPTION: Shows how to enable and configure specific authentication methods within the `createAppKit` initialization. The `features` object allows enabling email authentication (`email`), specifying supported social logins (`socials`), and controlling whether wallets are shown during email login (`emailShowWallets`). Requires `projectId`, `chains`, and the previously defined `config` object.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers/email.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ncreateAppKit({\n  projectId,\n  chains,\n  config,\n  features: {\n    email: true, // default to true\n    socials: [\"x\", \"discord\", \"apple\"], // default value\n    emailShowWallets: true, // default to true\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Registration with @wagmi useSignMessage Hook in TypeScript\nDESCRIPTION: This snippet illustrates how to perform user registration in a Web3 context without using hooks, by leveraging @wagmi's useSignMessage hook to sign messages asynchronously before registration. It involves preparing registration parameters, signing a message, and then completing registration with the signature. Dependencies include @wagmi's useSignMessage hook, and the flow is useful for secure user onboarding in a dApp. The code showcases asynchronous message signing and passing signed data for registration.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/migration/javascript.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useSignMessage } from '@wagmi'\nconst { signMessageAsync } = useSignMessage()\n\nclient.register(signMessageAsync)\n+ const { registerParams, message } = client.prepareRegistration({ account: 'eip155:1:0x..' })\n+ const signature = await signMessageAsync(message)\n+ client.register({ registerParams, signature })\n```\n\n----------------------------------------\n\nTITLE: Handling Session Request Expiry WalletKit Kotlin\nDESCRIPTION: This snippet demonstrates implementing `WalletKit.WalletDelegate` to handle session request expiry events. When a request expires (based on dapp-defined expiry), this event is triggered, signaling the wallet to dismiss the request modal from the UI.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/best-practices.mdx#_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval walletDelegate = object : WalletKit.WalletDelegate {\n    override fun onRequestExpired(request: Wallet.Model.ExpiredRequest) {\n        //Here this event is triggered when a session request expires - update your UI\n    }\n    ...other callbacks\n}\nWalletKit.setWalletDelegate(walletDelegate)\n```\n\n----------------------------------------\n\nTITLE: Updating Reown AppKit Imports (JavaScript/TypeScript)\nDESCRIPTION: This snippet shows the required changes to import statements when migrating a plain JavaScript application. It demonstrates removing imports related to Web3Modal v5 and adding imports for `createAppKit`, AppKit networks, and the Ethers v5 adapter from the `@reown` scope.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers5-web.mdx#_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\n// Remove the following imports\n- import { createWeb3Modal, defaultConfig } from '@web3modal/ethers5'\n\n// Add the following imports\n+ import { createAppKit } from '@reown/appkit'\n+ import { arbitrum, mainnet } from '@reown/appkit/networks'\n+ import { EthersAdapter } from '@reown/appkit-adapter-ethers5'\n```\n\n----------------------------------------\n\nTITLE: Updating Session with New Chains in JavaScript\nDESCRIPTION: Shows how to update a session by adding support for a new blockchain network (Polygon) while maintaining existing configurations and adding corresponding accounts.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/usage.mdx#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst namespaces = session.namespaces;\nconst chains = [\"eip155:1\", \"eip155:137\"];\nconst accounts = [\n  \"eip155:1:0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb\",\n  \"eip155:137:0x1234567890123456789012345678901234567890\",\n];\nconst updatedNamespaces = {\n  ...namespaces,\n  eip155: {\n    ...namespaces.eip155,\n    accounts,\n    chains,\n  },\n};\nawait walletKit.updateSession({\n  topic: session.topic,\n  namespaces: updatedNamespaces,\n});\n```\n\n----------------------------------------\n\nTITLE: Initialize WalletConnect Notify Client in Android Application Class Using Kotlin\nDESCRIPTION: Demonstrates initializing WalletConnect Notify SDK on Android by first initializing CoreClient with the project ID, connection type flags, application context, and app metadata (including name, description, URL, icons, and redirect URI). Then, creates a Notify.Params.Init object with CoreClient and calls NotifyClient.initialize with a callback to handle initialization errors. This setup should occur in the Application class to ensure Notify services are available app-wide.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\nval projectId = \"\" // Get Project ID at https://cloud.reown.com/\nval connectionType = ConnectionType.AUTOMATIC or ConnectionType.MANUAL\nval appMetaData = Core.Model.AppMetaData(\n    name = \"Wallet Name\",\n    description = \"Wallet Description\",\n    url = \"Wallet URL\",\n    icons = /*list of icon url strings*/,\n    redirect = \"kotlin-wallet-wc:/request\" // Custom Redirect URI\n)\n\nCoreClient.initialize(projectId = projectId, connectionType = connectionType, application = this, metaData = appMetaData)\n\nval init = Notify.Params.Init(CoreClient)\n\nNotifyClient.initialize(init) { error ->\n    // Error will be thrown if there's an issue during initialization\n}\n```\n\n----------------------------------------\n\nTITLE: Using AppKit Web Components with HTML\nDESCRIPTION: This snippet demonstrates embedding the AppKit button component directly within an HTML template using a custom web component `<appkit-button>`. Web components are globally available HTML elements that do not require import statements, providing an easy way to incorporate AppKit UI elements into a web project.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/ethers/about/triggermodal.mdx#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<template>\n  <appkit-button />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Telemetry Features in WalletKit SDK in Swift\nDESCRIPTION: Enables or disables telemetry data collection within the SDK, affecting local storage and server transmission of trace and error events. This helps monitor connection flows without tracking sensitive user data.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/usage.mdx#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Handling Incoming Deeplinks in AppDelegate (Swift)\nDESCRIPTION: Implements the `application(_:open:options:)` method in `AppDelegate` to capture incoming URL deeplinks. It then calls `AppKit.instance.handleDeeplink(_:)` to allow AppKit to process the URL, which is necessary for features like connecting via mobile wallets or handling transaction results.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/options.mdx#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nimport CoinbaseWalletSDK\n\noverride func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -> Bool {\n    AppKit.instance.handleDeeplink(url)\n}\n```\n\n----------------------------------------\n\nTITLE: Monitoring Pairing State - Swift\nDESCRIPTION: This snippet shows how to subscribe to the pairing state publisher to update the UI based on whether the wallet is awaiting a session proposal. It uses Combine's sink method to listen to changes and updates a boolean variable to toggle loading indicators. Dependencies include Combine framework and WalletKit SDK.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/best-practices.mdx#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nWalletKit.instance.pairingStatePublisher\n    .receive(on: DispatchQueue.main)\n    .sink { [weak self] isPairing in\n    self?.showPairingLoading = isPairing\n}.store(in: &disposeBag)\n```\n\n----------------------------------------\n\nTITLE: Disconnecting Wallet via AppKit Adapter in TypeScript\nDESCRIPTION: Illustrates how to disconnect the connected wallet by accessing the adapter's connection controller client via `modal.adapter?.connectionControllerClient?.disconnect()`. Requires an initialized `modal` instance with a connected adapter.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/actions.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nmodal.adapter?.connectionControllerClient?.disconnect();\n```\n\n----------------------------------------\n\nTITLE: Initializing AppKit with SIWE Configuration - TypeScript\nDESCRIPTION: This TypeScript snippet illustrates how to initialize the AppKit instance with a custom siweConfig for enabling SIWE authentication. The function takes an options object that may include network configuration, WalletConnect adapters, projectId, analytics settings, and a mandatory siweConfig object. Make sure all dependencies, such as wagmiAdapter and the correctly structured siweConfig, are available. The expected output is a modal or connection instance configured for SIWE-based authentication.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/siwe.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Pass your siweConfig inside the createAppKit() function\nconst modal = createAppKit({\n  adapters: [wagmiAdapter], //or your Ethers adapter\n  projectId,\n  networks: [mainnet, arbitrum],\n  defaultNetwork: mainnet,\n  features: {\n    analytics: true, // Optional - defaults to your Cloud configuration\n  },\n  siweConfig: siweConfig, // pass your siweConfig\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Notification History Pagination\nDESCRIPTION: Method for loading notification history with pagination support. Returns a boolean indicating if more notifications are available to load.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/notifications/notify/usage.mdx#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nfunc fetchHistory(subscription: NotifySubscription, after: String?, limit: Int) async throws -> Bool\n```\n\n----------------------------------------\n\nTITLE: Using AppKit Web Component Button in HTML\nDESCRIPTION: This snippet demonstrates embedding an AppKit web component button within an HTML template. The web component `<appkit-button />` functions as a global HTML element without the need for explicit imports, providing a reusable button UI element. It enables developers to incorporate standardized AppKit buttons seamlessly into their interfaces.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/solana/triggermodal.mdx#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<template>\n  <appkit-button />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Importing Components Module in JavaScript\nDESCRIPTION: This code imports a set of shared UI components from an MDX file located at '/snippets/appkit/shared/components.mdx'. It establishes the dependency required for rendering these components within the application. The import statement enables reuse of complex UI elements across multiple pages.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/components.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Components from \"/snippets/appkit/shared/components.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Supporting Multiple Namespaces in Session Proposal Handling\nDESCRIPTION: This code demonstrates how to build approved namespaces for multiple blockchain networks (e.g., EIP155, Cosmos, Near) by passing respective namespace objects. It allows handling proposals that support multiple chains, methods, and accounts, enabling flexible multi-chain interactions during session approval.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/usage.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst approvedNamespaces = buildApprovedNamespaces({\n    proposal: params,\n    supportedNamespaces: {\n        eip155: {...},\n        cosmos: {...},\n        near: {...}\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with Ethers v6 using Bun\nDESCRIPTION: Command for custom installation of Reown AppKit with Ethers v6 adapter using Bun package manager. Installs required dependencies including ethers v6.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/installation.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nbun add @reown/appkit @reown/appkit-adapter-ethers ethers\n```\n\n----------------------------------------\n\nTITLE: Preparing registration parameters with @wagmi/core in TypeScript\nDESCRIPTION: This snippet demonstrates how to use @wagmi/core to prepare registration parameters for an account, sign a message asynchronously, and register the account. Dependencies include the @wagmi/core library, and functions involve asynchronous calls to prepare registration and sign messages, followed by registration. It assumes a connected client with methods for registration and account status checks.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/registering-accounts/javascript.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { signMessageAsync } from '@wagmi/core'\n\nconst { registerParams, signature } = await client.prepareRegistration({\n  account\n})\nconst isRegistered = await client.getAccountIsRegistered(account)\nconst signature = await signMessageAsync({ message })\nawait register({ registerParams, signature })\n```\n\n----------------------------------------\n\nTITLE: Prepare Transaction Data - Wagmi/Viem - TypeScript\nDESCRIPTION: Encodes the function call data using the contract ABI and prepares the transaction object. This object contains the recipient address, transaction value, and the encoded data needed to execute the specific smart contract function.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/sponsoring-first-transaction.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst purchaseDonutCallData = encodeFunctionData({\n  abi: donutContractAbi,\n  functionName: 'purchase',\n  args: [1]\n})\n\nconst TEST_TX = {\n  to: donutContactaddress,\n  value: parseEther('0.0001'),\n  data: purchaseDonutCallData\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response for hedera_signAndExecuteTransaction - JSON\nDESCRIPTION: Depicts the error result for hedera_signAndExecuteTransaction. This standard error structure, using WalletConnect code 9000 and including a message and ResponseCodeEnum data, is returned for pre-processing validation failures such as expired transactions.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/hedera-rpc.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"error\": {\n    \"code\": 9000,\n    \"message\": \"The transaction failed with precheck code...\",\n    \"data\": 6\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Chain Abstraction with Sample Wallets and Lab\nDESCRIPTION: This section provides links to sample wallets for iOS and Android, along with a link to the AppKit laboratory for testing chain abstraction features, including token transfers like USDC and USDT. It includes a demo video demonstration.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/docs/walletkit/flutter/early-access/chain-abstraction.mdx#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for React Native\nDESCRIPTION: Installs additional packages needed for async storage, network information, random values generation, and text encoding that are required for WalletKit to function properly in React Native.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/installation.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @react-native-async-storage/async-storage @react-native-community/netinfo react-native-get-random-values fast-text-encoding\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom SIWXMessenger for Message Generation (TypeScript)\nDESCRIPTION: Defines a new messenger class by extending the SIWXMessenger abstract class, customizing the message format for authentication. Requires @reown/appkit-siwx and @reown/appkit-core for types. Must implement 'version' and a 'stringify' method that creates the exact message to be signed. Inputs include the SIWX message data and outputs a string for user signature. The main constraint is ensuring your custom logic aligns with your app's requirements and any protocol standards.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/siwx/siwx-default.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SIWXMessenger } from \"@reown/appkit-siwx\";\nimport type { SIWXMessage } from \"@reown/appkit-core\";\n\nexport class MyMessenger extends SIWXMessenger {\n  protected readonly version = \"1\";\n\n  protected override stringify(params: SIWXMessage.Data): string {\n    // Implement your message format here\n    return `My message for ${params.accountAddress} on ${params.chainId}`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Incoming Deep Link (Swift)\nDESCRIPTION: Processes an incoming deep link URL, likely received from a wallet or other external source, by calling the `handleDeeplink` method on the `AppKit` instance. This integrates the deep link into the AppKit's flow. Requires the deep link `url`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/actions.mdx#_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\nAppKit.instance.handleDeeplink(url)\n```\n\n----------------------------------------\n\nTITLE: Defining AccountAddress Type for BitcoinConnector Response in TypeScript\nDESCRIPTION: Describes the structure returned for an account address. It includes the Bitcoin public address string, an optional public key in hexadecimal (without 0x prefix), an optional derivation path for hierarchical deterministic wallets, and a purpose field specifying the address’s usage type ('payment', 'ordinal', or 'stx'). This type standardizes address metadata expected from getAccountAddresses method.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/bitcoin-provider.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type AccountAddress = {\n  /**\n   * Public address belonging to the account.\n   */\n  address: string\n  /**\n   * Public key for the derivation path in hex, without 0x prefix\n   */\n  publicKey?: string\n  /**\n   * The derivation path of the address e.g. \"m/84'/0'/0'/0/0\"\n   */\n  path?: string\n  /**\n   * The purpose of the address\n   */\n  purpose: 'payment' | 'ordinal' | 'stx'\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Modal State with useAppKitState in Vue\nDESCRIPTION: Shows how to import and use the `useAppKitState` composable from `@reown/appkit/vue`. It provides reactive access to the internal state of the AppKit modal, specifically whether it is currently open (`stateData.open`) and the ID of the network selected by the user (`stateData.selectedNetworkId`).\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/composables.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAppKitState } from \"@reown/appkit/vue\";\n\nconst stateData = useAppKitState();\n```\n\n----------------------------------------\n\nTITLE: Handling WalletConnect Session Authentication Events in TypeScript\nDESCRIPTION: Demonstrates how to subscribe to the `session_authenticate` event using `walletKit`. This event listener is triggered when a dApp initiates an authentication request, allowing the wallet to process it by populating the payload, formatting the message, presenting it to the user, signing it, and finally approving or rejecting the session.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/one-click-auth.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nwalletKit.on(\"session_authenticate\", async (payload) => {\n  // Process the authentication request here.\n  // Steps include:\n  // 1. Populate the authentication payload with the supported chains and methods\n  // 2. Format the authentication message using the payload and the user's account\n  // 3. Present the authentication message to the user\n  // 4. Sign the authentication message(s) to create a verifiable authentication object(s)\n  // 5. Approve the authentication request with the authentication object(s)\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Active Account from Web3Inbox Client in TypeScript\nDESCRIPTION: This snippet retrieves the CAIP-10 account currently active in the Web3Inbox client instance using client.getAccount(). The method returns a string representing the current account identifier. This value can be used for display, logging, or to trigger conditional logic based on the active account.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/setting-account/javascript.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst account = client.getAccount() // eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029\n```\n\n----------------------------------------\n\nTITLE: Installing Universal Provider using Package Managers\nDESCRIPTION: Demonstrates how to install the `@walletconnect/universal-provider` library using common JavaScript package managers: npm, Yarn, Bun, and pnpm.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/providers/universal.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @walletconnect/universal-provider\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @walletconnect/universal-provider\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @walletconnect/universal-provider\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @walletconnect/universal-provider\n```\n\n----------------------------------------\n\nTITLE: Approving a WalletConnect Authentication Request in Kotlin\nDESCRIPTION: Approves an authentication request after preparing the necessary authentication objects (`Sign.Model.Cacao` stored in `auths`). Calls `SignClient.approveAuthenticate` with the authentication request ID (`sessionAuthenticate.id`) and the list of Cacao objects. Includes callbacks for success (potentially handling Dapp redirection) and error handling.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_38\n\nLANGUAGE: kotlin\nCODE:\n```\n val approveAuthenticate = Sign.Params.ApproveAuthenticate(id = sessionAuthenticate.id, auths = auths)\nSignClient.approveAuthenticate(approveProposal,\n  onSuccess = {\n    //Redirect back to the dapp if redirect is set: sessionAuthenticate.participant.metadata?.redirect\n  },\n  onError = { error ->\n      //Handle error\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Network Switching Function\nDESCRIPTION: Changes required when switching networks in Reown AppKit compared to Web3Modal v5.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers-web.mdx#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following code line\nmodal.switchNetwork(137);\n\n// Add the following code lines\nimport { polygon } from \"@reown/appkit/networks\";\nmodal.switchNetwork(polygon);\n```\n\n----------------------------------------\n\nTITLE: Initializing SDK for Sign Requests in Kotlin with Deep Link\nDESCRIPTION: Sets up the Dapp's WalletConnect SDK with a unique redirect URL, enabling it to handle responses to signing requests and redirect the user back to the Dapp after approval or rejection.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/mobile-linking.mdx#_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nval redirect = \"kotlin-dapp-wc://request\" //should be unique for your Dapp\n\nval appMetaData = Core.Model.AppMetaData(\n    name = \"Dapp Name\",\n    description = \"Dapp Description\",\n    url = \"Dapp URL\",\n    icons = listOfIconUrlStrings,\n    redirect = redirect\n)\n\nCoreClient.initialize(projectId = projectId, connectionType = connectionType, application = application, metaData = appMetaData)\n\nval init = Sign.Params.Init(core = CoreClient)\nSignClient.initialize(init)\n```\n\n----------------------------------------\n\nTITLE: Approving Authentication Requests in Kotlin\nDESCRIPTION: Demonstrates how to approve an authentication request by creating authorization objects for each chain, signing messages, and calling approveSessionAuthenticate to establish a session with the dApp. This process ensures secure multi-chain authentication, with the possibility of sessionless authentication.\n\nNote that at least one SIWE message must be signed to create a session, but multiple can be signed for different chains.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/one-click-auth.mdx#_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nval approveAuthenticate = Wallet.Params.ApproveSessionAuthenticate(id = sessionAuthenticate.id, auths = auths)\nWalletKit.approveSessionAuthenticate(approveProposal,\n  onSuccess = {\n    //Redirect back to the dapp if redirect is set: sessionAuthenticate.participant.metadata?.redirect\n  },\n  onError = { error ->\n      //Handle error\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Supported Chains for Reown AppKit (Kotlin)\nDESCRIPTION: Configures the EVM-compatible blockchain networks that Reown AppKit will support. This method must be called on the AppKit singleton before opening the AppKit modal. The example demonstrates using a preset list of Ethereum chains.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/usage.mdx#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nAppKit.setChains(AppKitChainsPresets.ethChains.values.toList())\n```\n\n----------------------------------------\n\nTITLE: Pairing Wallet in .NET SDK\nDESCRIPTION: Performs pairing by passing a URI string to the `Pair()` method, establishing a secure communication channel between wallet and dapp.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\nvar uri = \"...\";\nPairingStruct pairingData = await core.Pairing.Pair(uri);\n```\n\n----------------------------------------\n\nTITLE: Defining SignPSBTParams Type for BitcoinConnector in TypeScript\nDESCRIPTION: Specifies the structure for parameters to sign a Partially Signed Bitcoin Transaction (PSBT). It requires the PSBT as a base64 encoded string and an array of signInputs, each including the signing address, input index, and sighash types. It also optionally includes a broadcast flag that defaults to false, indicating whether to broadcast the transaction after signing. This type covers detailed transaction signing behaviors.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/bitcoin-provider.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type SignPSBTParams = {\n  /**\n   * The PSBT to be signed, string base64 encoded\n   */\n  psbt: string\n  signInputs: {\n    /**\n     * The address whose private key to use for signing.\n     */\n    address: string\n    /**\n     * Specifies which input to sign\n     */\n    index: number\n    /**\n     * Specifies which part(s) of the transaction the signature commits to\n     */\n    sighashTypes: number[]\n  }[]\n\n  /**\n   * If `true`, the PSBT will be broadcasted after signing. Default is `false`.\n   */\n  broadcast?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Deep Linking URL Types\nDESCRIPTION: XML snippet for the iOS `Info.plist` file. It configures the app's custom URL schemes (`CFBundleURLTypes` and `CFBundleURLSchemes`) to handle deep links redirecting back to the app.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<key>CFBundleURLTypes</key>\n<array>\n    <dict>\n        <key>CFBundleURLSchemes</key>\n        <array>\n            <string>flutterdapp</string> <!-- Change \"flutterdapp\" to be your deep link -->\n        </array>\n        <key>CFBundleURLName</key>\n        <string>com.walletconnect.flutterdapp</string> <!-- Change this package name to be your package -->\n    </dict>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with Bitcoin using pnpm\nDESCRIPTION: Command for custom installation of Reown AppKit with Bitcoin adapter using pnpm package manager. Installs required dependencies for Bitcoin integration.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/installation.mdx#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit @reown/appkit-adapter-bitcoin\n```\n\n----------------------------------------\n\nTITLE: Overriding AppKitTheme Color Attributes in XML\nDESCRIPTION: Lists all overrideable AppKitTheme color attributes (such as modalAccent100, modalForeground100, modalBackground100, grayGlass, success, error) in an XML resources block. Used to customize theme colors in the XML-based view system by redefining these attributes. Requires placement in a valid resources file (e.g., attrs.xml or styles.xml). Inputs: color resource values for each attribute. Outputs: custom colors in the app's runtime theme.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/theming.mdx#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\nYou can override those values in AppKitTheme in your style.xml file\n\n<resources>\n    <attr name=\"modalAccent100\" format=\"color\"/>\n    <attr name=\"modalAccent90\" format=\"color\"/>\n    <attr name=\"modalAccent80\" format=\"color\"/>\n    <attr name=\"modalForeground100\" format=\"color\"/>\n    <attr name=\"modalForeground125\" format=\"color\"/>\n    <attr name=\"modalForeground150\" format=\"color\"/>\n    <attr name=\"modalForeground175\" format=\"color\"/>\n    <attr name=\"modalForeground200\" format=\"color\"/>\n    <attr name=\"modalForeground225\" format=\"color\"/>\n    <attr name=\"modalForeground250\" format=\"color\"/>\n    <attr name=\"modalForeground275\" format=\"color\"/>\n    <attr name=\"modalForeground300\" format=\"color\"/>\n    <attr name=\"modalBackground100\" format=\"color\"/>\n    <attr name=\"modalBackground125\" format=\"color\"/>\n    <attr name=\"modalBackground150\" format=\"color\"/>\n    <attr name=\"modalBackground175\" format=\"color\"/>\n    <attr name=\"modalBackground200\" format=\"color\"/>\n    <attr name=\"modalBackground225\" format=\"color\"/>\n    <attr name=\"modalBackground250\" format=\"color\"/>\n    <attr name=\"modalBackground275\" format=\"color\"/>\n    <attr name=\"modalBackground300\" format=\"color\"/>\n    <attr name=\"modalGrayGlass\" format=\"color\"/>\n    <attr name=\"modalSuccess\" format=\"color\"/>\n    <attr name=\"modalError\" format=\"color\"/>\n\n</resources>\n\n```\n\n----------------------------------------\n\nTITLE: BitcoinProviderInterface React Component\nDESCRIPTION: This snippet represents the BitcoinProviderInterface React component imported from shared snippets, which likely provides context or hooks for Bitcoin wallet interactions within the React app. It serves as a connector for wallet functionalities that are configured via the AppKit setup.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/bitcoin/about/implementation.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<BitcoinProviderInterface />\n```\n\n----------------------------------------\n\nTITLE: Dispatching Incoming URLs to WalletKit\nDESCRIPTION: Handles the incoming app link URL by retrieving it from the intent and passing it to WalletKit's dispatchEnvelope method. Includes error handling callback to process potential errors during request dispatch.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/link-mode.mdx#_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\nval url = intent.dataString\nWalletKit.dispatchEnvelope(url) { error -> \n    //handle error\n}\n```\n\n----------------------------------------\n\nTITLE: Installing WalletConnectModal React Native Package via Expo (bash)\nDESCRIPTION: Shows commands for installing WalletConnectModal libraries and related dependencies in Expo managed React Native projects using `npx expo install`. Includes additional packages for async storage, polyfills, modals, SVG rendering, and network status monitoring.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/about.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @walletconnect/modal-react-native\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @react-native-async-storage/async-storage react-native-get-random-values react-native-modal react-native-svg @react-native-community/netinfo @walletconnect/react-native-compat\n```\n\n----------------------------------------\n\nTITLE: Opening Reown AppKit Modal via XML Navigation (Kotlin)\nDESCRIPTION: Opens the Reown AppKit modal by navigating to its destination within a navigation graph defined in XML. This uses an extension function on the `NavController` obtained via `findNavController()`, after the AppKit graph has been included using the `<include>` tag in XML.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/usage.mdx#_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.navigation.fragment.findNavController\nimport com.reown.appkit.ui.openAppKit\n\nfindNavController().openAppKit(\n    shouldOpenChooseNetwork = true | false\n    onError = {  }\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Active Subscriptions in Kotlin\nDESCRIPTION: Calls NotifyClient.getActiveSubscriptions to retrieve a map of all current subscriptions keyed by topic, facilitating management of active notifications.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_34\n\nLANGUAGE: Kotlin\nCODE:\n```\nNotifyClient.getActiveSubscriptions()\n```\n\n----------------------------------------\n\nTITLE: AppKitTheme Mode Enum Definition - Kotlin\nDESCRIPTION: Defines the Mode enum within AppKitTheme, representing selectable theme modes: LIGHT, DARK, and AUTO. Used as the mode parameter for configuring appearance in Compose-based theming. No dependencies beyond Kotlin enum support. Inputs: the selected Mode member. Output: corresponding theme styling applied. No additional configuration required.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/theming.mdx#_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n    enum class Mode {\n        LIGHT, DARK, AUTO\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Sending Unsigned Transaction for Signing via WalletConnect Client in JavaScript\nDESCRIPTION: Sends a signing request to a paired wallet through WalletConnect client's 'request' method specifying the chain ID, session topic, signing method ('polkadot_signTransaction'), and transaction payload. This triggers the wallet to prompt the user for signing and returns a signature result upon approval. The chain ID uses the CAIP format for identification.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/polkadot/dapp-integration-guide.mdx#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst result = await client.request({\n  chainId: \"polkadot:91b171bb158e2d3848fa23a9f1c25182\",\n  topic: walletConnectSession.topic,\n  request: {\n    method: \"polkadot_signTransaction\",\n    params: {\n      address: selectedWalletConnectAddress,\n      transactionPayload: unsignedTransaction,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with pnpm in JavaScript\nDESCRIPTION: This snippet details the pnpm command to add Reown AppKit dependencies in JavaScript projects.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit @reown/appkit-adapter-wagmi\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Chain in Wagmi with TypeScript\nDESCRIPTION: Sets the default blockchain network to Polygon. When a user connects their wallet, they will be prompted to switch to Polygon if they are currently on a different network.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/web3modal/v2/_partials/options/defaultChain.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\ndefaultChain: polygon\n```\n\n----------------------------------------\n\nTITLE: Implementing Notification History Pagination with React Native FlatList\nDESCRIPTION: A React component that demonstrates how to fetch notification history with pagination using WalletConnect Notify Client and React Native's FlatList for infinite scrolling.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/notify/usage.mdx#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function SubscriptionDetailsScreen() {\n  const {topic} = useRoute().params as {topic: string};\n  const [notifications, setNotifications] = React.useState([]);\n  const [hasMore, setHasMore] = React.useState(false);\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  const lastItem = notifications?.[notifications.length - 1]?.id;\n\n  async function getNotificationHistory(startingAfter?: string) {\n    setIsLoading(true);\n\n    const notificationHistory = await notifyClient.getNotificationHistory({\n      topic,\n      limit: 15,\n      startingAfter,\n    });\n\n    setNotifications(\n      prevNotifications => prevNotifications.concat(notificationHistory.notifications),\n    );\n    setHasMore(notificationHistory.hasMore);\n    setIsLoading(false);\n\n    return notificationHistory;\n  }\n\n  React.useEffect(() => {\n    getNotificationHistory();\n  }, [topic]);\n\n  return (\n    <FlatList\n      data={sortedByDate}\n      keyExtractor={item => item.sentAt.toString()}\n      onEndReached={() => {\n        if (hasMore && lastItem) {\n          getNotificationHistory(lastItem)\n        }\n      }}\n      ListFooterComponent={() => {\n        if (!isLoading) return null\n        return <NotifcationItemSkeleton />\n      }}\n      renderItem={({item}) => (\n        <NotificationItem key={item.id} item={item} />\n      )}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Smart Account MDX Component\nDESCRIPTION: This code imports a Smart Account MDX component from the snippets directory and renders it on the page. The component likely contains the actual documentation about Smart Accounts.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/smart-accounts.mdx#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport SmartAccount from \"/snippets/appkit/shared/smart-accounts.mdx\";\n\n<SmartAccount />\n```\n\n----------------------------------------\n\nTITLE: Executing Chain Abstraction with WalletKit in Swift\nDESCRIPTION: This snippet shows how to execute chain abstraction via WalletKit, broadcasting necessary transactions, monitoring cross-chain transfer processes, and retrieving transaction status and results. It requires uiFields, route signatures, and initial transaction signatures as parameters.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/docs/walletkit/flutter/early-access/chain-abstraction.mdx#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nFuture<ExecuteDetailsCompat> execute({\n  required UiFieldsCompat uiFields,\n  required List<String> routeTxnSigs,\n  required String initialTxnSig,\n})\n```\n\n----------------------------------------\n\nTITLE: Disconnecting Active Session - WalletKit - Kotlin\nDESCRIPTION: Disconnects an active session. Requires the session topic, a disconnection reason string, and a disconnection code, referencing CAIP-25 for standard codes.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/usage.mdx#_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval disconnectionReason: String = /*The reason for disconnecting the Session*/\nval disconnectionCode: String = /*The code for disconnecting the Session*/\nval sessionTopic: String = /*Topic from the Session*/\nFor reference use CAIP-25: https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-25.md\nval disconnectParams = Wallet.Params.SessionDisconnect(sessionTopic, disconnectionReason, disconnectionCode)\n\nWalletKit.disconnectSession(disconnectParams) { error -> /*callback for error while disconnecting a session*/ }\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Info.plist for Wallet Detection\nDESCRIPTION: Modifies the iOS Info.plist to enable detection of installed wallet apps on iOS devices. This requires adding wallet URL schemes to the LSApplicationQueriesSchemes section.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/options.mdx#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n    <dict>\n        ...\n\n        <key>LSApplicationQueriesSchemes</key>\n        <array>\n            <string>metamask</string>\n            <string>trust</string>\n            <string>safe</string>\n            <string>rainbow</string>\n            <string>uniswap</string>\n            <string>zerion</string>\n            <string>imtokenv2</string>\n            <string>spot</string>\n            <string>omni</string>\n            <string>dfw</string>\n            <string>tpoutside</string>\n            <string>robinhood-wallet</string>\n        </array>\n\n        ...\n    </dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Enabling Wallet Detection on Android via AndroidManifest.xml Queries (XML)\nDESCRIPTION: Describes the configuration snippet to add within the <queries> element of AndroidManifest.xml for enabling WalletConnectModal to detect installed wallets by listing the specific wallet package names as <package> elements. Similar to iOS, only listed packages will be detectable.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/about.mdx#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<queries>\\n  <package android:name=\"io.metamask\"/>\\n  <package android:name=\"com.wallet.crypto.trustapp\"/>\\n  <package android:name=\"io.gnosis.safe\"/>\\n  <package android:name=\"me.rainbow\"/>\\n  <!-- Add other wallet package names here -->\\n</queries>\n```\n\n----------------------------------------\n\nTITLE: Decrypt Push Notifications Using UNNotificationServiceExtension in Swift\nDESCRIPTION: Describes overriding the UNNotificationServiceExtension method didReceive(_:withContentHandler:) to intercept incoming push notifications. It extracts the encrypted ciphertext and topic from notification userInfo, uses NotifyDecryptionService to decrypt the ciphertext into a PushMessage, then updates the notification content’s title and body with the decrypted data before calling the content handler. This requires importing WalletConnectNotify, setting up a shared keychain group, and is necessary because all push notifications are delivered encrypted via APNs.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\noverride func didReceive(_ request: UNNotificationRequest, withContentHandler contentHandler: @escaping (UNNotificationContent) -> Void) {\n    bestAttemptContent = (request.content.mutableCopy() as? UNMutableNotificationContent)\n    if let bestAttemptContent = bestAttemptContent {\n        let topic = bestAttemptContent.userInfo[\"topic\"] as! String\n        let ciphertext = bestAttemptContent.userInfo[\"blob\"] as! String\n        do {\n            let service = NotifyDecryptionService()\n            let pushMessage = try service.decryptMessage(topic: topic, ciphertext: ciphertext)\n            bestAttemptContent.title = pushMessage.title\n            bestAttemptContent.body = pushMessage.body\n            contentHandler(bestAttemptContent)\n            return\n        }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: iOS Relay SDK Networking Client Configuration\nDESCRIPTION: Shows how to configure the Relay SDK's networking client by specifying the app group identifier, project ID, and WebSocket factory instance. The configuration enables sharing keychain data between SDK components and manages WebSocket creation and connection according to app requirements.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/relay.mdx#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nNetworking.configure(groupIdentifier: <String>, projectId: <String>, socketFactory: SocketFactory())\n```\n\n----------------------------------------\n\nTITLE: Triggering AppKit Modal Using Vue Composables in TypeScript\nDESCRIPTION: This Vue 3 snippet demonstrates importing the useAppKit composable from the '@reown/appkit/vue' package within a <script setup lang=\"ts\"> block. The composable returns a modal object with an open method, which can be called with optional parameters to display modals or specific views. The template binds button clicks to modal.open calls to open different modal views dynamically. Dependencies include Vue 3 and the AppKit composable package.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/ethers5/triggermodal.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<script setup lang=\"ts\">\n  import { useAppKit } from \"@reown/appkit/vue\";\n\n  // Use modal composable\n  const modal = useAppKit();\n</script>\n\n<template>\n  <button @click=\"modal.open()\">Open Connect Modal</button>\n  <button @click=\"modal.open({ view: 'Networks' })\">Open Network Modal</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Restore Last Session (TypeScript)\nDESCRIPTION: Retrieves all active sessions stored locally by the SignClient. This code snippet specifically gets the last session from the array, typically used for restoring the previous connection state after a page reload.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst lastKeyIndex = signClient.session.getAll().length - 1;\nconst lastSession = signClient.session.getAll()[lastKeyIndex];\n```\n\n----------------------------------------\n\nTITLE: Retrieving Errors from the Reown AppKit Modal in TypeScript\nDESCRIPTION: This concise snippet shows how to invoke the getError method on the AppKit modal instance to retrieve any error state information. It assumes the modal is pre-initialized and accessible in the scope. The function Components demonstrates acquiring the error to allow conditional rendering or error handling logic elsewhere in the user interface. This snippet requires prior modal setup.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/ethers5/hooks.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nfunction Components() {\n  const error = modal.getError();\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Pairing Expiry Events (TypeScript/React Native)\nDESCRIPTION: Subscribes to the 'pairing_expire' event from the core pairing module in a React Native environment. This allows the wallet to detect when an inactive pairing expires (typically after 5 minutes) and update the UI accordingly.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ncore.pairing.events.on(\"pairing_expire\", (event) => {\n    // pairing expired before user approved/rejected a session proposal\n    const { topic } = topic;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining and Using a Custom Network Object in Reown AppKit (JavaScript)\nDESCRIPTION: Demonstrates how to define a custom network object using the `defineChain` function from `@reown/appkit/networks`. This object includes essential network details like ID, name, CAIP ID, namespace, native currency, RPC URLs, block explorers, and contract addresses. The snippet also shows how to pass this custom network object to the `createAppKit` configuration function, along with an optional mapping for custom network logos.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/custom-networks.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineChain } from '@reown/appkit/networks';\n\n// Define the custom network\nconst customNetwork = defineChain({\n  id: 123456789,\n  caipNetworkId: 'eip155:123456789',\n  chainNamespace: 'eip155',\n  name: 'Custom Network',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'Ether',\n    symbol: 'ETH',\n  },\n  rpcUrls: {\n    default: {\n      http: ['RPC_URL'],\n      webSocket: ['WS_RPC_URL'],\n    },\n  },\n  blockExplorers: {\n    default: { name: 'Explorer', url: 'BLOCK_EXPLORER_URL' },\n  },\n  contracts: {\n    // Add the contracts here\n  }\n})\n\n// Then pass it to the AppKit\ncreateAppKit({\n    adapters: [...],\n    networks: [customNetwork],\n    chainImages: { // Customize networks' logos\n      123456789: '/custom-network-logo.png', // <chainId>: 'www.network.com/logo.png'\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Signing Out a SIWE User Session in JavaScript\nDESCRIPTION: An asynchronous method to destroy the current SIWE user session, effectively signing the user out. It returns a Promise resolving to a boolean indicating whether the sign-out operation succeeded.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/siwe/parameters.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nsignOut `() => Promise<boolean>`\n\nThe users session can be destroyed calling `signOut`.\n```\n\n----------------------------------------\n\nTITLE: Customizing DefaultSIWX with Predefined Components (TypeScript)\nDESCRIPTION: Shows how to instantiate DefaultSIWX using modular predefined components for messenger, verifiers, and storage, all provided by @reown/appkit-siwx. Required dependencies are @reown/appkit-siwx and optionally @reown/appkit-core for type support. You can specify parameters for domain, URI, nonce generation, verifier arrays (supporting EIP155, Solana, etc.), and the underlying storage backend. Promotes extensibility and chain-agnostic authentication sessions.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/siwx/siwx-default.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  DefaultSIWX,\n  InformalMessenger,\n  EIP155Verifier,\n  SolanaVerifier,\n  LocalStorage,\n} from \"@reown/appkit-siwx\";\n\nconst siwx = new DefaultSIWX({\n  messenger: new InformalMessenger({\n    domain: \"reown.com\",\n    uri: \"https://reown.com\",\n    getNonce: async () => Math.round(Math.random() * 10000).toString(),\n  }),\n  verifiers: [new EIP155Verifier(), new SolanaVerifier()],\n  storage: new LocalStorage({ key: \"@appkit/siwx\" }),\n});\n```\n\n----------------------------------------\n\nTITLE: Triggering Reown AppKit Modal in Vue using JavaScript\nDESCRIPTION: Demonstrates how to open the Reown AppKit modal in a Vue component. It uses the composition API to import and invoke useAppKit from @reown/appkit/vue, defining a method to trigger the modal open function on button click. Requires Vue 3 with setup syntax and @reown/appkit/vue package. This snippet enables integration of modal opening with custom Vue buttons.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n<template>\n  <div>\n    <button @click=\"openAppKit\">Open</button>\n  </div>\n</template>\n\n  <script>\n  import { useAppKit } from \"@reown/appkit/vue\";\n\n  export default {\n    name: \"AppKitButton\",\n    setup() {\n      const { open } = useAppKit();\n      const openAppKit = () => open();\n\n      return {\n        openAppKit,\n      };\n    },\n  };\n  </script>\n```\n\n----------------------------------------\n\nTITLE: Registering for Push Notifications Using Apple Push Notification Service in Swift\nDESCRIPTION: Defines the method registerForPushNotifications that requests user authorization to display alerts, play sounds, and update app badge numbers via UNUserNotificationCenter. Upon successful authorization, the method triggers registration for remote notifications with APNs on the main thread. This function should be called early in the app lifecycle to initiate the push notification registration process. It requires importing UserNotifications and proper app capabilities enabled in Xcode.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nfunc registerForPushNotifications() {\n    UNUserNotificationCenter.current()\n        .requestAuthorization(\n            options: [.alert, .sound, .badge]\n        ) { granted, error in\n            guard granted else { return }\n            DispatchQueue.main.async {\n                UIApplication.shared.registerForRemoteNotifications()\n            }\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Reinitializing and requesting with Reown AppKit in Kotlin\nDESCRIPTION: This snippet shows replacing Web3Modal singleton references with the new AppKit class, modifying initialization and request method calls to match the AppKit API for proper functionality.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-android.mdx#_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Remove the following code lines\n- Web3Modal.initialize(Wallet.Params.Init(core = CoreClient), onSuccess, onError)\n- Web3Modal.request(request, onSuccess, onError)\n\n+ AppKit.initialize(Wallet.Params.Init(core = CoreClient), onSuccess, onError)\n+ AppKit.request(request, onSuccess, onError)\n```\n\n----------------------------------------\n\nTITLE: Handling Connection State Changes WalletKit Kotlin\nDESCRIPTION: This snippet shows how to implement `WalletKit.WalletDelegate` to receive notifications about changes in the WebSocket connection state to the WalletConnect relay server. This allows the wallet application to display the current connection status to the user.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/best-practices.mdx#_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval walletDelegate = object : WalletKit.WalletDelegate {\n    override fun onConnectionStateChange(state: Wallet.Model.ConnectionState) {\n        //Here this event is triggered when a connection state has changed\n    }\n    ...other callbacks\n}\nWalletKit.setWalletDelegate(walletDelegate)\n```\n\n----------------------------------------\n\nTITLE: Querying ERC20 Token Balance Using WalletKit - Swift\nDESCRIPTION: Defines an asynchronous method to retrieve the ERC20 token balance for a specified user address on a given blockchain network. The method requires the chain ID, token contract address, and owner address as inputs, returning the balance as a string. It is part of WalletKit's functionality related to chain abstraction and token management.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/chain-abstraction.mdx#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nFuture<String> erc20TokenBalance({\n  required String chainId, // chain id\n  required String token, // token address\n  required String owner, // user address\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Updated AppKit v5 Dependencies with Yarn - JavaScript - Bash\nDESCRIPTION: This command upgrades a JavaScript project to AppKit v5 using Yarn by installing the necessary packages: @web3modal/wagmi@latest, @wagmi/connectors, @wagmi/core@2.x, and viem@2.x. Requires Node.js and Yarn. All installed modules are essential for a functional AppKit v5 upgrade in JavaScript environments.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/appkitv2.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @web3modal/wagmi@latest @wagmi/connectors @wagmi/core@2.x viem@2.x\n```\n\n----------------------------------------\n\nTITLE: Rejecting a WalletConnect JSON-RPC Request in Kotlin\nDESCRIPTION: Sends an error response (rejection) to a JSON-RPC request received from a Dapp during a session. Requires the session topic and a `Sign.Model.JsonRpcResponse.JsonRpcError` object containing the request ID, error code, and message. The `SignClient.respond` function is used, including an error callback.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_32\n\nLANGUAGE: kotlin\nCODE:\n```\nval sessionTopic: String = /*Topic of Session*/\nval jsonRpcResponseError: Sign.Model.JsonRpcResponse.JsonRpcError = /*Session Request ID along with error code and message*/\nval result = Sign.Params.Response(sessionTopic = sessionTopic, jsonRpcResponse = jsonRpcResponseError)\n\nSignClient.respond(result) { error -> /*callback for error while responding session request*/ }\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Wallet Packages in AndroidManifest.xml (RN CLI)\nDESCRIPTION: Adds common wallet package names (like io.metamask, com.wallet.crypto.trustapp) to the `<queries>` section in `AndroidManifest.xml` for Android React Native CLI projects. This configuration allows the AppKit to detect if these specific wallet applications are installed on the user's device.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/installation.mdx#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<queries>\n  <package android:name=\"io.metamask\"/>\n  <package android:name=\"com.wallet.crypto.trustapp\"/>\n  <package android:name=\"io.gnosis.safe\"/>\n  <package android:name=\"me.rainbow\"/>\n  <!-- Add other wallet package names here -->\n</queries>\n```\n\n----------------------------------------\n\nTITLE: Unity Core Package Git URL (Text)\nDESCRIPTION: Git URL for adding the WalletConnectUnity Core package via Unity Package Manager's 'Add package from git URL' option.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nhttps://github.com/WalletConnect/WalletConnectUnity.git?path=Packages/com.walletconnect.core\n```\n\n----------------------------------------\n\nTITLE: Handling Authentication Requests (Swift)\nDESCRIPTION: Subscribes to the `authenticateRequestPublisher` using Combine to receive incoming authentication requests from dapps. The received result should be processed, typically involving user interaction to approve or reject.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_21\n\nLANGUAGE: Swift\nCODE:\n```\nSign.instance.authenticateRequestPublisher\n    .receive(on: DispatchQueue.main)\n    .sink { result in\n        // Process the authentication request here.\n        // This involves displaying UI to the user.\n    }\n    .store(in: &subscriptions) // Assuming `subscriptions` is where you store your Combine subscriptions.\n```\n\n----------------------------------------\n\nTITLE: Requesting Signature from Wallet After Session Creation - Flutter (Dart)\nDESCRIPTION: Illustrates making a signature request post-session establishment in a Flutter dApp. It uses signClient.request specifying the session topic, targeted chainId, and SessionRequestParams (method and parameters to be signed). Requires an active established session and returns the wallet's signature response. Key for EIP-155-compliant flows and dApps that initiate user transaction requests.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_32\n\nLANGUAGE: dart\nCODE:\n```\nfinal signature = await signClient.request(\n    topic: session.topic,\n    chainId: 'eip155:1',\n    request: SessionRequestParams(\n        method: 'eth_signTransaction',\n        params: 'json serializable parameters',\n    ),\n);\n```\n\n----------------------------------------\n\nTITLE: Using the Wallet Button component in a React project\nDESCRIPTION: This code demonstrates rendering the Wallet Button component with the 'metamask' wallet option, enabling users to connect their Metamask wallet through a streamlined interface.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/components.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<appkit-wallet-button wallet=\"metamask\" />\n```\n\n----------------------------------------\n\nTITLE: Querying Account Balance using Nethereum with WalletConnect in Unity (C#)\nDESCRIPTION: Demonstrates querying the account balance using the Nethereum.Web3 package in Unity, with WalletConnect providing the session context and RPC endpoint. This code retrieves the correct namespace, builds the RPC URL, and fetches both Wei and Ether values of the address. Dependencies: WalletConnect Unity integration and Nethereum.Web3. Inputs are the active session and configuration; outputs are balance logs.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\nprivate static async Task GetAccountBalance()\n{\n    var session = WalletConnect.Instance.ActiveSession;\n\n    // Because one session can have multiple namespaces, we need to select one.\n    // In most cases, especially in games, dapp will use only one namespace.\n    var @namespace = session.Namespaces.First();\n    var address = session.CurrentAddress(@namespace.Key).Address;\n\n    var config = ProjectConfiguration.Load();\n\n    // Using WalletConnect Blockchain API: https://docs.walletconnect.com/cloud/blockchain-api\n    var url = $\"https://rpc.walletconnect.com/v1?chainId={@namespace.Value.Chains[0]}&projectId={config.Id}\";\n\n    var web3 = new Nethereum.Web3.Web3(url);\n    var balance = await web3.Eth.GetBalance.SendRequestAsync(address);\n    Debug.Log($\"Balance of {address} in Wei: {balance.Value}\");\n\n    var etherAmount = Nethereum.Web3.Web3.Convert.FromWei(balance.Value);\n    Debug.Log($\"Balance of {address} in Ether: {etherAmount}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Wallet Address with TypeScript\nDESCRIPTION: Retrieves the currently connected wallet address using the `modal.getAddress()` method. Returns the address as a string or potentially undefined/null if not connected.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/solana/actions.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst address = modal.getAddress();\n```\n\n----------------------------------------\n\nTITLE: Rendering AppKit Web Component Button in React - TypeScript\nDESCRIPTION: Defines a default React functional component named ConnectButton that renders the 'appkit-button' custom HTML element, which is a web component provided by AppKit. No external dependencies are needed beyond React and availability of AppKit web components on the page. The rendered button allows users to interact with AppKit features via the native web component interface. Input parameters are not required, and the function returns JSX output. Ensure that the AppKit web component script is loaded globally in your HTML, as imports are not used within the snippet.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/wagmi/about/triggermodal.mdx#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nexport default function ConnectButton() {\n  return <appkit-button />\n}\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Dapp Notifications\nDESCRIPTION: Method to opt-out from receiving notifications from a specific dapp by deleting the subscription associated with its topic.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/notifications/notify/usage.mdx#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\ntry await Notify.instance.deleteSubscription(topic: String)\n```\n\n----------------------------------------\n\nTITLE: Registering Device Token for Push Notifications - WalletKit - Kotlin\nDESCRIPTION: Registers the wallet device with WalletConnect's Push Server to receive push notifications via Firebase Cloud Messaging (FCM). Requires the FCM access token and includes success/error callbacks.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/usage.mdx#_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nval firebaseAccessToken: String = //FCM access token received through the Firebase Messaging SDK\n\nWalletKit.registerDeviceToken(\n    firebaseAccessToken,\n    onSuccess = {\n        // callback triggered once registered successfully with the Push Server\n    },\n    onError = { error: Wallet.Model.Error ->\n        // callback triggered if there's an exception thrown during the registration process\n    })\n\n```\n\n----------------------------------------\n\nTITLE: Adding Signature to ExtrinsicPayload using Polkadot.js API in JavaScript\nDESCRIPTION: Creates an ExtrinsicPayload type from the unsigned transaction and adds the signature returned by the wallet to the transaction via 'addSignature'. This prepares the transaction object for submission by authenticating it with the wallet's signature. The signature is bound to the sender's address and the original unsigned payload.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/polkadot/dapp-integration-guide.mdx#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n// create the extrinsic payload using the unsigned transaction\nconst rawUnsignedTransaction = api.registry.createType(\n  \"ExtrinsicPayload\",\n  unsignedTransaction,\n  {\n    version: unsignedTransaction.version,\n  }\n);\n\n// add the signature to the extrinsic payload\ntx.addSignature(\n  selectedWalletConnectAddress,\n  result.signature,\n  rawUnsignedTransaction\n);\n```\n\n----------------------------------------\n\nTITLE: Preparing a test transaction object for EVM send operation\nDESCRIPTION: Constructs a transaction object specifying the recipient address and amount (in Gwei). This setup is used as input for the wallet's transaction signing and sending process, targeting an EVM-compatible chain.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/ethers-send-transaction.mdx#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// test transaction\nconst TEST_TX = {\n  to: \"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\" as Address, // vitalik address\n  value: parseUnits('0.0001', 'gwei')\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Redirect After Sign Request Response in Dart/Flutter\nDESCRIPTION: Illustrates redirecting back to the Dapp after processing and responding to a sign request within a registered request handler (e.g., `personalSignRequestHandler`). This Dart code retrieves the current session using the topic, accesses the peer's (Dapp's) redirect metadata, and then calls `_walletKit.redirectToDapp` to navigate the user back. Requires the WalletKit SDK and a registered handler for the specific request method.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/mobile-linking.mdx#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n// Your registered request handler for the given requested method will be triggered\nFuture<void> personalSignRequestHandler(String topic, dynamic parameters) async {\n  // Process signing requests\n  // ...\n  // With the given topic with retrieve the current session data\n  final session = _walletKit.sessions.get(topic);\n  // And we get the peer metadata to trigger dapp's redirect value\n  try {\n    await _walletKit.redirectToDapp(\n      topic: topic,\n      redirect: session!.peer.metadata.redirect,\n    );\n  } catch (e) {\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Presenting WalletConnect Modal - iOS Swift Default\nDESCRIPTION: Shows the basic way to present the WalletConnect modal in iOS using Swift. This method attempts to automatically find the top-most view controller to present from, suitable for SwiftUI.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_24\n\nLANGUAGE: swift\nCODE:\n```\nWalletConnectModal.present()\n```\n\n----------------------------------------\n\nTITLE: Updating Reown AppKit Imports (Vue/TypeScript)\nDESCRIPTION: This snippet shows the required changes to import statements when migrating a Vue application. It demonstrates removing imports related to Web3Modal v5 and adding imports for `createAppKit`, AppKit networks, and the Ethers v5 adapter from the `@reown` scope.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers5-web.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following imports\n- import { createWeb3Modal, defaultConfig } from \"@web3modal/ethers5/vue\";\n\n// Add the following imports\n+ import { createAppKit } from \"@reown/appkit/vue\";\n+ import { arbitrum, mainnet } from \"@reown/appkit/networks\";\n+ import { Ethers5Adapter } from \"@reown/appkit-adapter-ethers5\";\n```\n\n----------------------------------------\n\nTITLE: Rejecting a Session Proposal in C#\nDESCRIPTION: This code shows how to reject a session proposal using the SDK's rejection method within an event handler, passing a rejection reason string. This effectively declines the session request from the dapp.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/usage.mdx#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nsdk.SessionProposed += async (sender, @event) =>\n{\n    var proposal = @event.Proposal;\n    await sdk.RejectSession(proposal, \"User rejected\");\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring AndroidManifest Intent-Filter for Universal Links (XML)\nDESCRIPTION: This XML code defines an intent-filter for Android's AndroidManifest.xml to declare an app link with autoVerify enabled, allowing Android to automatically associate chosen domains for universal links. The filter specifies the VIEW action, proper categories, and describes supported host, scheme, and path pattern. Ensure that your Android app uses this configuration and that the corresponding assetlinks.json file on your domain is updated for full compatibility.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/link-mode.mdx#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<intent-filter android:autoVerify=\"true\">\n  <action android:name=\"android.intent.action.VIEW\" />\n\n  <category android:name=\"android.intent.category.DEFAULT\" />\n  <category android:name=\"android.intent.category.BROWSABLE\" />\n\n  <data android:scheme=\"https\" />\n  <data android:host=\"example.com\" />\n  <data android:pathPattern=\"/example_wallet\" />\n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Signing Transaction Hash on Server (Conceptual Node.js)\nDESCRIPTION: Conceptual server-side JavaScript/Node.js code showing how to sign the transaction hash (obtained from the `signatureRequest.hash` property of the `makePrepareCalls` response) using the server's private key (stored securely, e.g., in `APPLICATION_PRIVATE_KEY`).\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/smart-sessions.mdx#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Use the private key to sign the hash\nconst signature = await signatureCall(APPLICATION_PRIVATE_KEY, response.signatureRequest.hash);\n```\n\n----------------------------------------\n\nTITLE: Import Statements for Expo index.js\nDESCRIPTION: Required imports to add to the index.js file in Expo projects to enable WalletConnect compatibility.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/notify/installation.mdx#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport \"@walletconnect/react-native-compat\";\nimport \"./expo-crypto-shim.js\";\n```\n\n----------------------------------------\n\nTITLE: Destructuring Web3Inbox Account Details with useW3iAccount Hook (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to use the `useW3iAccount` hook, likely from a Web3Inbox library, to manage a specific CAIP-10 account ('eip155:1:0x9A...'). It destructures the returned object to access the active account data (`account`), its registration status (`isRegistered`), the identity key (`identityKey`), a function to change the account (`setAccount`), potential error messages (`error`), and the loading state (`isLoading`). The surrounding text provides explanations for each destructured variable.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/setting-account/react.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst {\n  data: account,\n  isRegistered,\n  identityKey,\n  setAccount,\n  error,\n  isLoading\n} = useW3iAccount('eip155:1:0x9A...')\n```\n\n----------------------------------------\n\nTITLE: Initializing WalletConnectSharpv2 Client with SignClientOptions in C#\nDESCRIPTION: Defines the SignClientOptions object with required ProjectId and Metadata properties to configure the WalletConnectSharpv2 client. Optionally specifies storage modules (defaulting to FileSystemStorage if not overridden). This snippet sets client metadata such as description, icons, name, and URL which are transmitted during session requests. These options are prerequisites before client initialization.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_34\n\nLANGUAGE: csharp\nCODE:\n```\nvar dappOptions = new SignClientOptions()\n{\n    ProjectId = \"39f3dc0a2c604ec9885799f9fc5feb7c\",\n    Metadata = new Metadata()\n    {\n        Description = \"An example dapp to showcase WalletConnectSharpv2\",\n        Icons = new[] { \"https://walletconnect.com/meta/favicon.ico\" },\n        Name = \"WalletConnectSharpv2 Dapp Example\",\n        Url = \"https://walletconnect.com\"\n    },\n    // Uncomment to disable persistent storage\n    // Storage = new InMemoryStorage()\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring AndroidManifest.xml for Firebase Messaging Service\nDESCRIPTION: XML configuration snippet to register the `SampleFirebaseService` class in the app's manifest, enabling it to receive Firebase Cloud Messaging events. This registration is required for the service to handle background and foreground messages properly.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/notifications/push.mdx#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<application...>\n    <service android:name=\".SampleFirebaseService\">\n        <intent-filter>\n            <action android:name=\"com.google.firebase.MESSAGING_EVENT\" />\n        </intent-filter>\n    </service>\n</application>\n```\n\n----------------------------------------\n\nTITLE: Monitoring WebSocket Connection State in TypeScript\nDESCRIPTION: Code for tracking the connection state with the relay server. This implementation allows applications to monitor and respond to changes in the WebSocket connection state, which is crucial for ensuring continuous communication with dapps.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/best-practices.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ncore.relayer.on(\"relayer_connect\", () => {\n    // connection to the relay server is established\n})\n\ncore.relayer.on(\"relayer_disconnect\", () => {\n// connection to the relay server is lost\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Wallet Schemes in Info.plist (RN CLI)\nDESCRIPTION: Adds common wallet URL schemes (like metamask, trust, safe) to the `LSApplicationQueriesSchemes` array in `Info.plist` for iOS React Native CLI projects. This configuration allows the AppKit to detect if these specific wallet applications are installed on the user's device.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/installation.mdx#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<key>LSApplicationQueriesSchemes</key>\n<array>\n  <string>metamask</string>\n  <string>trust</string>\n  <string>safe</string>\n  <string>rainbow</string>\n  <string>uniswap</string>\n  <!-- Add other wallet schemes names here -->\n</array>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom TestNet to Reown AppKit Context Provider in TypeScript\nDESCRIPTION: Modifies the `context/index.tsx` file to register the custom Tenderly Virtual TestNet (`vTestnet`) as a supported network. It imports `vTestnet` and includes it in the `networks` array passed to the `createAppKit` function. This makes the Tenderly Virtual TestNet available for selection and interaction within the AppKit UI components (like the connection modal) and context. The snippet also shows the setup of the necessary providers (`WagmiProvider`, `QueryClientProvider`) and metadata configuration.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/tenderly-virtual-testnets.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { wagmiAdapter, projectId } from \"@/config\";\nimport { createAppKit } from \"@reown/appkit/react\";\nimport { mainnet, arbitrum } from \"@reown/appkit/networks\";\nimport { vTestnet } from \"@/app/tenderly.config\";\n\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport React, { type ReactNode } from \"react\";\nimport { cookieToInitialState, WagmiProvider, type Config } from \"wagmi\";\n\n// Set up queryClient\nconst queryClient = new QueryClient();\n\nif (!projectId) {\n  throw new Error(\"Project ID is not defined\");\n}\n\n// Set up metadata\nconst metadata = {\n  //this is optional\n  name: \"appkit-example\",\n  description: \"AppKit Example - EVM\",\n  url: \"https://exampleapp.com\", // origin must match your domain & subdomain\n  icons: [\"https://avatars.githubusercontent.com/u/37784886\"],\n};\n\n// Create the modal\nconst modal = createAppKit({\n  adapters: [wagmiAdapter],\n  projectId,\n  networks: [mainnet, arbitrum, vTestnet],\n  metadata: metadata,\n  features: {\n    analytics: true, // Optional - defaults to your Cloud configuration\n  },\n});\n\nfunction ContextProvider({\n  children,\n  cookies,\n}: {\n  children: ReactNode;\n  cookies: string | null;\n}) {\n  const initialState = cookieToInitialState(\n    wagmiAdapter.wagmiConfig as Config,\n    cookies\n  );\n\n  return (\n    <WagmiProvider\n      config={wagmiAdapter.wagmiConfig as Config}\n      initialState={initialState}\n    >\n      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>\n    </WagmiProvider>\n  );\n}\n\nexport default ContextProvider;\n```\n\n----------------------------------------\n\nTITLE: Importing useAppKitWallet Hook (React/TSX)\nDESCRIPTION: Shows the required import statement for the `useAppKitWallet` hook. This hook is part of the `@reown/appkit-wallet-button` package and allows direct wallet connections without the main AppKit modal.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/hooks.mdx#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAppKitWallet } from \"@reown/appkit-wallet-button/react\";\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit and Adapter Packages with npm, Yarn, Bun, and pnpm\nDESCRIPTION: Lists commands to install the Reown AppKit core and wagmi adapter libraries for React, JavaScript, and Vue environments using popular package managers: npm, Yarn, Bun, and pnpm. This covers removal of Web3Modal v4 dependencies and installing required AppKit packages for upgrading. Commands are environment-specific with dependencies varying by framework.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit @reown/appkit-adapter-wagmi\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit @reown/appkit-adapter-wagmi\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun a @reown/appkit @reown/appkit-adapter-wagmi\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit @reown/appkit-adapter-wagmi\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from a Dapp in JavaScript\nDESCRIPTION: This snippet unsubscribes an account from a specific dapp by deleting the subscription using its topic. This stops further notifications from that dapp.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/notify/usage.mdx#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nnotifyClient.deleteSubscription({\n  topic: \"subscription_topic_to_unsubscribe_from\",\n});\n```\n\n----------------------------------------\n\nTITLE: Building Supported Namespaces for Session Proposal\nDESCRIPTION: This snippet shows how to construct a supported namespaces object for a session proposal using WalletKit and walletconnect/utils. The utility simplifies parsing the proposal and preparing the approved namespaces with chains, methods, events, and accounts, facilitating user approval of session requests.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/usage.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { WalletKit, WalletKitTypes } from '@reown/walletkit'\nimport { buildApprovedNamespaces, getSdkError } from '@walletconnect/utils'\n\nasync function onSessionProposal({ id, params }: WalletKitTypes.SessionProposal){\n  try{\n    const approvedNamespaces = buildApprovedNamespaces({\n      proposal: params,\n      supportedNamespaces: {\n        eip155: {\n          chains: ['eip155:1', 'eip155:137'],\n          methods: ['eth_sendTransaction', 'personal_sign'],\n          events: ['accountsChanged', 'chainChanged'],\n          accounts: [\n            'eip155:1:0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb',\n            'eip155:137:0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb'\n          ]\n        }\n      }\n    })\n    const session = await walletKit.approveSession({\n      id,\n      namespaces: approvedNamespaces\n    })\n  }catch(error){\n    await walletKit.rejectSession({\n      id: proposal.id,\n      reason: getSdkError(\"USER_REJECTED\")\n    })\n  }\n}\n\nwalletKit.on('session_proposal', onSessionProposal)\n```\n\n----------------------------------------\n\nTITLE: VerifyContext Data Class - WalletKit - Kotlin\nDESCRIPTION: Defines the data class for VerifyContext, which provides domain verification information for incoming requests (SessionProposal, SessionRequest, AuthRequest). It includes the request ID, origin URL, validation status (VALID, INVALID, UNKNOWN), and the verify URL.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/usage.mdx#_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class VerifyContext(\n    val id: Long,\n    val origin: String,\n    val validation: Model.Validation,\n    val verifyUrl: String\n)\n\nenum class Validation {\n    VALID, INVALID, UNKNOWN\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Incoming Link Mode Requests with WalletKit in Swift\nDESCRIPTION: This Swift code shows how to pass an incoming Universal Link URL, received by the application (e.g., in `AppDelegate` or `SceneDelegate`), to the WalletKit instance for processing. The URL's absolute string representation is passed to `WalletKit.instance.dispatchEnvelope` to handle the embedded request payload when Link Mode is enabled.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/link-mode.mdx#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\ntry WalletKit.instance.dispatchEnvelope(url.absoluteString)\n```\n\n----------------------------------------\n\nTITLE: Handling Connection State Change Callback - WalletConnect Kotlin (Android)\nDESCRIPTION: This Kotlin snippet illustrates implementing the 'onConnectionStateChange' callback within a 'WalletKit.WalletDelegate'. This method is called when the connection state to the Relay server changes, providing the new state. Applications should use this to update connection status indicators in the UI.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\nval walletDelegate = object : WalletKit.WalletDelegate {\n  override fun onConnectionStateChange(state: Wallet.Model.ConnectionState) {\n    // Here this event is triggered when a connection state has changed\n  }\n  // ...other callbacks\n}\nWalletKit.setWalletDelegate(walletDelegate)\n```\n\n----------------------------------------\n\nTITLE: Setting metadata for createAppKit in TypeScript\nDESCRIPTION: Shows how to provide metadata such as app name, description, icon URLs, and a base URL when initializing createAppKit. These metadata values assist UI elements like wallet connections and message signing screens. If omitted, metadata is retrieved from the website's document object. The metadata object supports name, description, icons array, and url properties.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateAppKit({\n  // ...\n  metadata: {\n    name: \"My App\",\n    description: \"My App Description\",\n    icons: [\"https://myapp.com/icon.png\"],\n    url: \"https://myapp.com\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications via Notify API using cURL\nDESCRIPTION: Shows how to send a notification using a cURL command. It makes a POST request to the `https://notify.walletconnect.com/<PROJECT_ID>/notify` endpoint, authenticating with the `NOTIFY_API_SECRET` via the Authorization header and providing the notification payload in the JSON request body.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/notifications/backend-integration.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST 'https://notify.walletconnect.com/<PROJECT_ID>/notify' \\\n  --header 'Authorization: Bearer <NOTIFY_API_SECRET>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"notification\": {\n      \"type\": \"a1e53b95-18e5-4af8-9f03-9308ec87b687\",\n      \"title\": \"The price of Ethereum has risen\",\n      \"body\": \"The price of Ethereum has gone up 10%\",\n      \"url\": \"https://app.example.com\"\n    },\n    \"accounts\": [\n      \"eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029\"\n    ]\n  }'\n```\n\n----------------------------------------\n\nTITLE: Setting the Default Chain with Universal Provider (TypeScript)\nDESCRIPTION: Demonstrates how to change the default target chain for the provider using the `setDefaultChain` method. This determines the chain used for subsequent requests if not explicitly specified. An optional RPC URL for the new chain can also be provided.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/providers/universal.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// set the default chain to 56\nprovider.setDefaultChain(`eip155:56`, rpcUrl?: string | undefined);\n```\n\n----------------------------------------\n\nTITLE: Installing Notify Client SDK Packages (Web)\nDESCRIPTION: Provides commands for installing the primary WalletConnect Notify client package `@walletconnect/notify-client` for web development. These commands utilize common Node.js package managers.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @walletconnect/notify-client\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @walletconnect/notify-client\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun a @walletconnect/notify-client\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @walletconnect/notify-client\n```\n\n----------------------------------------\n\nTITLE: Opening On-Ramp Modal with AppKit in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to invoke the On-Ramp modal by calling the modal.open function with the 'OnRampProviders' view option. It requires that a modal API with an open method is available in the execution context, typically provided by the AppKit or similar UI library. The function expects a configuration object with at least a 'view' property specifying the desired modal view ('OnRampProviders') and returns a promise or UI side effect. Ensure modal management and AppKit dependencies are correctly initialized before use.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/transactions/onramp.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodal.open({ view: 'OnRampProviders' })\n```\n\n----------------------------------------\n\nTITLE: Creating WalletConnect Pairing URI (Swift)\nDESCRIPTION: Creates a new pairing URI by calling the asynchronous `createPairing` method on the `AppKit` instance. This URI is used to initiate a connection with a wallet. It returns a `WalletConnectURI` object.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/actions.mdx#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nlet uri: WalletConnectURI = try await AppKit.instance.createPairing()\n```\n\n----------------------------------------\n\nTITLE: Android Proguard Rules for WalletKit Dependencies - Gradle\nDESCRIPTION: Proguard configuration rules to prevent minification and obfuscation issues when using WalletKit and its native dependencies such as JNA and Uniffi in Android applications. These rules preserve annotations, native methods, public and protected members, and suppress warnings, enabling proper runtime operation of native interfaces.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/chain-abstraction.mdx#_snippet_6\n\nLANGUAGE: gradle\nCODE:\n```\n-keepattributes *Annotation*\n-keep class com.sun.jna.** { *; }\n-keepclassmembers class com.sun.jna.** {\n    native <methods>;\n    *;\n}\n-keep class uniffi.** { *; }\n# Preserve all public and protected fields and methods\n-keepclassmembers class ** {\n    public *;\n    protected *;\n}\n-dontwarn uniffi.**\n-dontwarn com.sun.jna.**\n```\n\n----------------------------------------\n\nTITLE: Marking All Notifications as Read via Reown Notify API using cURL\nDESCRIPTION: Example using cURL to make a POST request to the `/v1/<project-id>/mark-all-as-read` endpoint. This action marks all existing notifications as read across all subscribers and requires the Authorization header with the Notify API Secret (Bearer token).\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/backend-integration.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST 'https://notify.walletconnect.com/v1/<PROJECT_ID>/mark-all-as-read' \\\n  --header 'Authorization: Bearer <NOTIFY_API_SECRET>'\n```\n\n----------------------------------------\n\nTITLE: Implementing AppKit ModalDelegate to Handle Wallet Session Events in Kotlin\nDESCRIPTION: This snippet defines an implementation of the `AppKit.ModalDelegate` interface in Kotlin to handle various wallet session lifecycle callbacks such as session approval, rejection, updates, extension, and events. It also includes handling session deletions, request responses, expired proposals and requests, connection state changes, and errors within the SDK. The delegate object must be set on AppKit to start receiving these updates. Dependencies include the AppKit SDK and Modal model classes representing session and connection data structures.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/actions.mdx#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval appKitModalDelegate = object : AppKit.ModalDelegate {\n    override fun onSessionApproved(approvedSession: Modal.Model.ApprovedSession) {\n        // Triggered when receives the session approval from wallet\n    }\n\n    override fun onSessionRejected(rejectedSession: Modal.Model.RejectedSession) {\n        // Triggered when receives the session rejection from wallet\n    }\n\n    override fun onSessionUpdate(updatedSession: Modal.Model.UpdatedSession) {\n        // Triggered when receives the session update from wallet\n    }\n\n    override fun onSessionExtend(session: Modal.Model.Session) {\n        // Triggered when receives the session extend from wallet\n    }\n\n    override fun onSessionEvent(sessionEvent: Modal.Model.SessionEvent) {\n        // Triggered when the peer emits events that match the list of events agreed upon session settlement\n    }\n\n    override fun onSessionDelete(deletedSession: Modal.Model.DeletedSession) {\n        // Triggered when receives the session delete from wallet\n    }\n\n    override fun onSessionRequestResponse(response: Modal.Model.SessionRequestResponse) {\n        // Triggered when receives the session request response from wallet\n    }\n\n    override fun onProposalExpired(proposal: Modal.Model.ExpiredProposal) {\n        // Triggered when a proposal becomes expired\n    }\n\n    override fun onRequestExpired(request: Modal.Model.ExpiredRequest) {\n        // Triggered when a request becomes expired\n    }\n\n    override fun onConnectionStateChange(state: Modal.Model.ConnectionState) {\n        //Triggered whenever the connection state is changed\n    }\n\n    override fun onError(error: Modal.Model.Error) {\n        // Triggered whenever there is an issue inside the SDK\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Smart Contract Wallets using web3.js in JavaScript\nDESCRIPTION: Uses the web3.js library to determine if a given Ethereum address corresponds to a smart contract. It fetches the bytecode using `web3.eth.getCode()` and checks if it's non-empty after stripping leading zeros. Requires the `web3` library and an RPC URL.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/smart-contract-wallet-usage.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Web3 from \"web3\";\n\nconst web3 = new Web3(rpcUrl);\n\nconst bytecode = await web3.eth.getCode(address);\n\nconst isSmartContract = bytecode && utils.hexStripZeros(bytecode) !== \"0x\";\n```\n\n----------------------------------------\n\nTITLE: Declaring AppKit Dependency in Swift Package.swift\nDESCRIPTION: This snippet shows how to declare the AppKit package as a dependency within the `dependencies` array of a Swift Package Manager manifest file (`Package.swift`). It specifies the GitHub URL of the repository and a version constraint using `.upToNextMajor`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/installation.mdx#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\ndependencies: [\n  .package(\n    name: \"AppKit\",\n    url: \"https://github.com/reown-com/reown-swift\",\n    .upToNextMajor(from: \"1.0.0\")\n  ),\n\n  // Any other dependencies you have...\n],\n```\n\n----------------------------------------\n\nTITLE: cURL for Fetching All Subscribers List\nDESCRIPTION: This cURL command retrieves the complete list of subscriber accounts for the project, which could be resource-intensive due to large data volume. It performs a GET request with an authorization header containing the API secret. Inputs are project URL and credentials, and the response contains an array of subscriber account identifiers.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/notifications/backend-integration.mdx#_snippet_5\n\nLANGUAGE: cURL\nCODE:\n```\ncurl 'https://notify.walletconnect.com/<PROJECT_ID>/subscribers' \\\n  --header 'Authorization: Bearer <NOTIFY_API_SECRET>'\n```\n\n----------------------------------------\n\nTITLE: Rejecting Session Proposals (TypeScript/Web)\nDESCRIPTION: Rejects a session proposal received from a dapp in a web wallet using WalletKit. It involves calling `rejectSession` with appropriate parameters and handling potential errors, typically updating the UI upon success or failure.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n    await walletKit.rejectSession(params);\n    // update UI -> remove the loader\n} catch (error) {\n    // present error to the user\n}\n```\n\n----------------------------------------\n\nTITLE: Approving Authentication Requests (Swift)\nDESCRIPTION: Approves an authentication request by calling `Sign.instance.approveSessionAuthenticate`. Requires the original request ID and an array of `AuthObject` instances created for the supported chains.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_23\n\nLANGUAGE: Swift\nCODE:\n```\nlet session = try await Sign.instance.approveSessionAuthenticate(requestId: requestId, auths: authObjects)\n```\n\n----------------------------------------\n\nTITLE: Handling Pairing Expiry CoreClient Kotlin\nDESCRIPTION: This snippet illustrates how to implement a CoreClient.CoreDelegate to be notified when a pairing connection expires. This event allows the wallet to update its UI or internal state, acknowledging that the pairing is no longer valid. Expiry times vary based on pairing activity.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/best-practices.mdx#_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval coreDelegate = object : CoreClient.CoreDelegate {\n    override fun onPairingExpired(expiredPairing: Core.Model.ExpiredPairing) {\n        //Here a pairing expiry is triggered\n    }\n    ...other callbacks\n}\n\nCoreClient.setDelegate(coreDelegate)\n```\n\n----------------------------------------\n\nTITLE: Defining Verify API Context Model - C#\nDESCRIPTION: This C# code defines the `VerifiedContext` class and `Validation` enum used within the Verify API. This structure is designed to carry domain verification details for requests such as `SessionProposal` or `SessionRequest`, including the `origin` domain, the `validation` status (VALID, INVALID, or UNKNOWN), and a `verifyUrl`. The class handles the conversion between the string representation of the validation status (used in JSON) and the C# enum.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/verify.mdx#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class VerifiedContext\n{\n    [JsonProperty(\"origin\")]\n    public string Origin;\n\n    [JsonProperty(\"validation\")]\n    private string _validation;\n\n    public string ValidationString => _validation;\n\n    public Validation Validation\n    {\n        get\n        {\n            return FromString();\n        }\n        set\n        {\n\n            _validation = AsString(value);\n        }\n    }\n\n    [JsonProperty(\"verifyUrl\")]\n    public string VerifyUrl { get; set; }\n\n    private Validation FromString()\n    {\n        switch (ValidationString.ToLowerInvariant())\n        {\n            case \"VALID\":\n                return Validation.Valid;\n            case \"INVALID\":\n                return Validation.Invalid;\n            default:\n                return Validation.Unknown;\n        }\n    }\n\n    private string AsString(Validation str)\n    {\n        switch (str)\n        {\n            case Validation.Invalid:\n                return \"INVALID\";\n            case Validation.Valid:\n                return \"VALID\";\n            default:\n                return \"UNKNOWN\";\n        }\n    }\n}\n\npublic enum Validation\n{\n    Unknown,\n    Valid,\n    Invalid,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Verify API Context Struct in Swift\nDESCRIPTION: This Swift struct `VerifyContext` encapsulates the data related to domain verification for API requests, relevant to the `verifyDapp` function. It includes the `origin` domain, a `validation` status (unknown, valid, or invalid) indicating the verification outcome based on the domain registry and security checks, and the `verifyUrl` server endpoint. It provides domain verification information for Session.Proposal and Request.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/verify.mdx#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\npublic struct VerifyContext: Equatable, Hashable {\n   public enum ValidationStatus {\n       case unknown\n       case valid\n       case invalid\n   }\n\n   public let origin: String?\n   public let validation: ValidationStatus\n   public let verifyUrl: String\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering the Modal in Vue and JavaScript\nDESCRIPTION: How to trigger the Reown AppKit modal in Vue and JavaScript applications.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers-web.mdx#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\ndocument.getElementById('my-button').addEventListener('click', () => {\n    modal.open()\n})\n\n<button id=\"my-button\">Connect Wallet</button>\n```\n\n----------------------------------------\n\nTITLE: Overriding Theme Mode in AppKit Initialization - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to override the default theme mode of AppKit by explicitly setting the 'themeMode' property to 'light' during initialization. To use this code, ensure AppKit is installed and available in your project. The 'themeMode' parameter accepts user preferences ('light' or 'dark') and directly controls the application's appearance. Output is an instance of AppKit configured with the specified theme mode. Valid values for 'themeMode' are typically platform-defined constants.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/theming.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateAppKit({\n  //...\n  themeMode: \"light\",\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Wallet Connection by Specific Network in TypeScript\nDESCRIPTION: Illustrates how to open the wallet modal pre-filtered to a specific blockchain network such as Solana, Bitcoin (bip122), or Ethereum (eip155) by setting the `namespace` parameter. Useful for targeted wallet connections.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/core/open.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nopen({ view: \"Connect\", namespace: \"solana\" });\n```\n\n----------------------------------------\n\nTITLE: Result Response for hedera_executeTransaction - JSON\nDESCRIPTION: This shows the typical success response when calling hedera_executeTransaction. The nodeId, transactionHash, and transactionId fields allow the client to track transaction verification and processing within Hedera.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/hedera-rpc.mdx#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"nodeId\": \"0.0.3\",\n    \"transactionHash\": \"252b8fd...\",\n    \"transactionId\": \"0.0.12345678@1689281510.675369303\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AppKit SIWX Package with Package Managers\nDESCRIPTION: Commands to install the AppKit SIWX package using different JavaScript package managers including npm, yarn, pnpm, and bun.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/travel-rule.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit-siwx\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit-siwx\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit-siwx\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @reown/appkit-siwx\n```\n\n----------------------------------------\n\nTITLE: Building Namespace Mapping Using Builder Pattern in C#\nDESCRIPTION: This code demonstrates creating a Namespace object via the builder pattern, chaining methods to add chain, method, event, and account details for 'eip155' namespace. Use this pattern for more readable and maintainable namespace configuration during session proposal or approval.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/usage.mdx#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nvar TestNamespaces = new Namespaces()\n  .WithNamespace(\"eip155\", new Namespace()\n      .WithChain(\"eip155:1\")\n      .WithMethod(\"eth_signTransaction\")\n      .WithEvent(\"chainChanged\")\n      .WithAccount(\"eip155:1:0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb\")\n  );\n```\n\n----------------------------------------\n\nTITLE: Error Response for hedera_executeTransaction - JSON\nDESCRIPTION: Depicts the consistent error output for hedera_executeTransaction used for rejected or invalid transaction submissions. The error field includes a standardized code, message, and reason identifier from the Hedera network for diagnostic use.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/hedera-rpc.mdx#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"error\": {\n    \"code\": 9000,\n    \"message\": \"The transaction failed with precheck code...\",\n    \"data\": 6\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a custom network object using @reown/appkit/networks in JavaScript\nDESCRIPTION: This snippet demonstrates how to define a custom blockchain network for Reown AppKit by creating a chain object with specific properties such as ID, name, CAIP ID, RPC URLs, and block explorers. It requires importing 'defineChain' from '@reown/appkit/networks' and passing the configuration object to establish the network within AppKit.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/custom-networks.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { defineChain } from '@reown/appkit/networks';\n\n// Define the custom network\nconst customNetwork = defineChain({\n  id: 123456789,\n  caipNetworkId: 'eip155:123456789',\n  chainNamespace: 'eip155',\n  name: 'Custom Network',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'Ether',\n    symbol: 'ETH',\n  },\n  rpcUrls: {\n    default: {\n      http: ['RPC_URL'],\n      webSocket: ['WS_RPC_URL'],\n    },\n  },\n  blockExplorers: {\n    default: { name: 'Explorer', url: 'BLOCK_EXPLORER_URL' },\n  },\n  contracts: {\n    // Add the contracts here\n  }\n})\n\n// Then pass it to the AppKit\ncreateAppKit({\n    adapters: [...],\n    networks: [customNetwork],\n    chainImages: { // Customize networks' logos\n      123456789: '/custom-network-logo.png', // <chainId>: 'www.network.com/logo.png'\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Imports in Vue\nDESCRIPTION: Code changes required to update imports from Web3Modal v5 to Reown AppKit in Vue applications, highlighting removed and added imports.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-solana-web.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following imports\n- import { createWeb3Modal, defaultSolanaConfig, useWeb3ModalAccount, useWeb3ModalProvider } from '@web3modal/solana/vue'\n- import { solana, solanaTestnet, solanaDevnet } from '@web3modal/solana/chains'\n\n// Add the following imports\n+ import { solana, solanaTestnet, solanaDevnet } from '@reown/appkit/networks'\n+ import { createAppKit } from '@reown/appkit/vue'\n+ import { SolanaAdapter } from '@reown/appkit-adapter-solana/vue'\n```\n\n----------------------------------------\n\nTITLE: Installing Solana Wallet Adapter Dependencies Using Bash\nDESCRIPTION: These snippets provide the commands to install @solana/wallet-adapter-wallets for use with Solana wallet integrations. The package is required for enabling support for different Solana wallets in a project. Each snippet uses a different JavaScript package manager (npm, Yarn, Bun, pnpm). There are no parameters or outputs; the result is a local dependency installation.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/custom-connectors.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @solana/wallet-adapter-wallets\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @solana/wallet-adapter-wallets\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun a @solana/wallet-adapter-wallets\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @solana/wallet-adapter-wallets\n```\n\n----------------------------------------\n\nTITLE: Retrieving Approved Chains using Reown AppKit (Dart)\nDESCRIPTION: Calls the `getApprovedChains` method on the `_appKitModal` instance. This function returns a list of blockchain chain IDs that the connected wallet has granted the dApp permission to interact with during the current session. It's useful for determining which networks the dApp can operate on.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/actions.mdx#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\n_appKitModal.getApprovedChains();\n```\n\n----------------------------------------\n\nTITLE: Responding to Session Request - WalletConnect Typescript\nDESCRIPTION: This Typescript snippet demonstrates how to respond to a session request using 'walletKit.respondSessionRequest'. It shows the typical pattern of wrapping the call in a try-catch block to handle potential errors during the response process (e.g., network issues, expired request). UI updates (like removing a loader) should be performed upon success.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n    await walletKit.respondSessionRequest(params);\n    // update UI -> remove the loader\n} catch (error) {\n    // present error to the user\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Reown AppKit (Vue/TypeScript)\nDESCRIPTION: This snippet shows how to replace the Web3Modal `createWeb3Modal` call with the Reown AppKit `createAppKit` function in a Vue context. It demonstrates passing configuration options, including the `adapters` array (containing `Ethers5Adapter`), the `networks` array, `metadata`, `projectId`, and `features`. The result is assigned to a `modal` variable.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers5-web.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following code line\n- createWeb3Modal({ ethersConfig, projectId, chains })\n\n// Add the following code lines\n+ const modal = createAppKit({\n adapters: [new Ethers5Adapter()],\n networks: [mainnet, arbitrum],\n metadata,\n projectId,\n features: {\n   analytics: true,\n }\n})\n```\n\n----------------------------------------\n\nTITLE: Replacing Configure Method Call from Web3Modal to AppKit - Swift\nDESCRIPTION: This code snippet instructs replacing calls to the static configure method from Web3Modal to AppKit. Any configuration routines previously set up for Web3Modal must now initialize AppKit with equivalent or updated parameters. Dependencies include the new AppKit SDK, and migration may require validating that parameters for AppKit.configure match the former method’s requirements. Input is the old configuration call; expected output is using the new branding.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-ios.mdx#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\n- Web3Modal.configure(\n-     ...\n- )\n\n+ AppKit.configure(\n+     ...\n+ )\n```\n\n----------------------------------------\n\nTITLE: Updating Coinbase Wallet Connector Import in Wagmi - TypeScript\nDESCRIPTION: This snippet shows how to replace the import for coinbaseConnector from @web3modal/coinbase-wagmi-react-native with its AppKit equivalent from @reown/appkit-coinbase-wagmi-react-native. This import update is essential for continued Coinbase Wallet support after migration.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-react-native.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following code lines\nimport { coinbaseConnector } from \"@web3modal/coinbase-wagmi-react-native\";\n\n// Add the following code lines\nimport { coinbaseConnector } from \"@reown/appkit-coinbase-wagmi-react-native\";\n```\n\n----------------------------------------\n\nTITLE: Rejecting Session Proposals in Swift\nDESCRIPTION: Rejects an incoming session proposal from a dapp. This is used when a user decides not to approve a connection request.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/usage.mdx#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\ntry await WalletKit.instance.reject(requestId: request.id)\n```\n\n----------------------------------------\n\nTITLE: Initialize useSendCalls Hook with Callbacks - Wagmi/React - TypeScript\nDESCRIPTION: Initializes the `useSendCalls` hook within a React component, configuring callbacks for handling transaction success and error states. This sets up the function `sendCalls` that will be used to initiate the transaction and provides UI feedback.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/sponsoring-first-transaction.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Inside the Component\n\nconst { sendCalls } = useSendCalls({\n  mutation: {\n    onSuccess: hash => {\n      setLoading(false)\n      toast({\n        title: 'SendCalls Success',\n        description: hash,\n        type: 'success'\n      })\n    },\n    onError: () => {\n      setLoading(false)\n      toast({\n        title: 'SendCalls Error',\n        description: 'Failed to send calls',\n        type: 'error'\n      })\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Universal Link Responses in AppKit\nDESCRIPTION: Code snippet showing how to handle deeplink responses when using Link Mode. Your app needs to pass incoming universal link URLs to AppKit for processing authentication responses.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/one-click-auth.mdx#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nAppKit.instance.handleDeeplink(url)\n```\n\n----------------------------------------\n\nTITLE: Subscribe to Sessions Publisher (Swift)\nDESCRIPTION: Subscribes to the `sessionsPublisher` provided by the WalletConnect Sign instance. This publisher emits updates whenever the list of active sessions changes, allowing the iOS Dapp to update its UI or state accordingly.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nSign.instance.sessionsPublisher\n    .receive(on: DispatchQueue.main)\n    .sink { [unowned self] (sessions: [Session]) in\n        // reload UI\n    }.store(in: &publishers)\n```\n\n----------------------------------------\n\nTITLE: Configuring LSApplicationQueriesSchemes for Wallet Detection (XML)\nDESCRIPTION: Modifies the iOS `Info.plist` file to add `LSApplicationQueriesSchemes`, listing URL schemes for wallets the app should be able to detect. This is necessary for AppKit to check if wallet apps are installed on the device. Each string entry represents a wallet's URL scheme (e.g., \"metamask\", \"trust\").\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/options.mdx#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<key>LSApplicationQueriesSchemes</key>\n<array>\n  <string>metamask</string>\n  <string>trust</string>\n  <string>safe</string>\n  <string>rainbow</string>\n  <string>uniswap</string>\n  <!-- Add other wallet schemes names here -->\n</array>\n```\n\n----------------------------------------\n\nTITLE: Importing Multiple Networks Supported by Viem in JavaScript\nDESCRIPTION: This snippet shows how to import various networks using '@reown/appkit/networks' for use with Reown AppKit, leveraging Viem under the hood. It supports mainnet and other EVM-compatible networks like Arbitrum, Base, Scroll, and Polygon, facilitating easy network support expansion.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/wagmi/about/implementation.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createAppKit } from '@reown/appkit'\nimport { mainnet, arbitrum, base, scroll, polygon } from '@reown/appkit/networks'\n```\n\n----------------------------------------\n\nTITLE: Triggering Reown AppKit Modal (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to open the initialized Reown AppKit modal in a plain JavaScript context. It demonstrates adding an event listener to a button element (e.g., with ID 'my-button') that calls `modal.open()` when clicked, presenting the connection interface to the user.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers5-web.mdx#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\ndocument.getElementById('my-button').addEventListener('click', () => {\n    modal.open()\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring AppKit with AuthRequestParams for SIWE\nDESCRIPTION: Basic configuration of AppKit client with AuthRequestParams required for SIWE authentication. This sets up the foundation for creating and handling SIWE messages that users will sign.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/one-click-auth.mdx#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nAppKit.configure(\n    ...\n    authRequestParams: authRequestParams,\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Signing Message personal_sign JSON\nDESCRIPTION: Demonstrates a JSON-RPC request for the `personal_sign` method, which calculates an Ethereum-specific signature for a given message and account. It includes the standard JSON-RPC structure with 'id', 'jsonrpc', 'method', and 'params' fields, showing example input values for the message and the signing address, and the expected signature as a DATA string result.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/ethereum-rpc.mdx#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n// Request\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"personal_sign\",\n  \"params\":[\"0xdeadbeaf\",\"0x9b2055d370f73ec7d8a03e965129118dc8f5bf83\"],\n}\n\n// Result\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": \"0xa3f20717a250c2b0b729b7e5becbff67fdaef7e0699da4de7ca5895b02a170a12d887fd3b17bfdce3481f10bea41f45ba9f709d39ce8325427b57afcfc994cee1b\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Data from Smart Contracts via EVM in C#\nDESCRIPTION: Provides C# examples for reading data from EVM smart contracts using `AppKit.EVM.ReadContractAsync<T>()`. This is a gas-free operation. Shows how to specify the contract address, ABI (JSON or human-readable format), method name, and optional arguments. Also demonstrates using a `ReadContractParams` object. The return type `T` should match the expected output of the contract method.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/actions.mdx#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n// Using JSON ABI\nstring jsonAbi = \"[ /* Your contract ABI */ ]\";\nstring tokenSymbol = await AppKit.EVM.ReadContractAsync<string>(\n    \"0x123...\", // contract address\n    jsonAbi,\n    \"symbol\" // method name\n);\n\n// Using human-readable ABI\nstring humanReadableAbi = \"function symbol() view returns (string)\";\nstring tokenSymbol = await AppKit.EVM.ReadContractAsync<string>(\n    \"0x123...\", // contract address\n    humanReadableAbi,\n    \"symbol\" // method name\n);\n\n// With arguments\nstring balance = await AppKit.EVM.ReadContractAsync<string>(\n    \"0x123...\", // contract address\n    jsonAbi,\n    \"balanceOf\", // method name\n    new object[] { \"0x456...\" } // arguments\n);\n\n// Using parameters object\nvar readContractParams = new ReadContractParams\n{\n    ContractAddress = \"0x123...\",\n    ContractAbi = jsonAbi,\n    MethodName = \"balanceOf\",\n    Arguments = new object[] { \"0x456...\" }\n};\nstring balance = await AppKit.EVM.ReadContractAsync<string>(readContractParams);\n```\n\n----------------------------------------\n\nTITLE: Rendering AppKit Button in TSX\nDESCRIPTION: This TSX snippet defines a simple React component named `ConnectButton`. It directly renders the `<appkit-button>` web component provided by AppKit. AppKit web components are global and do not require explicit imports within the component file itself.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/bitcoin/about/triggermodal.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function ConnectButton() {\n  return <appkit-button />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Connection Options in WalletConnect for Unity (C#)\nDESCRIPTION: This C# snippet demonstrates how to create and assign ConnectOptions for WalletConnect sessions in Unity, defining required namespaces, permitted methods, supported chains, and subscription events. The example specifies the 'eip155' namespace and common Ethereum operations, supporting chain ID 1 and common wallet events. Intended for use in WalletConnect-enabled Unity apps, it requires the WalletConnect Unity SDK and expects arrays of methods and events.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/options.mdx#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nConnectOptions = new ConnectOptions\n{\n    RequiredNamespaces = new RequiredNamespaces\n    {\n        {\n            \"eip155\", new ProposedNamespace\n            {\n                Methods = new[]\n                {\n                    \"eth_sendTransaction\",\n                    \"personal_sign\",\n                    \"eth_signTypedData\"\n                },\n                Chains = new[]\n                {\n                    \"eip155:1\"\n                },\n                Events = new[]\n                {\n                    \"chainChanged\",\n                    \"accountsChanged\"\n                },\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Send Transaction Button in React JSX\nDESCRIPTION: Renders a button in the UI that triggers the `handleSendTx` function when clicked. Like the sign message button, it is conditionally displayed based on the `isConnected` status from the AppKit hook.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/bitcoin-send-transaction.mdx#_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\nreturn (\n  isConnected && (\n    <div>\n      <button onClick={handleSendTx}>Send Transaction</button>\n    </div>\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Disabling WalletGuide Explorer in TypeScript\nDESCRIPTION: Configuration option to disable the WalletGuide explorer feature in WalletConnect. When set to false, the application will not fetch wallet options from WalletGuide (https://walletguide.walletconnect.network/).\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/web3modal/v2/_partials/options/enableExplorer.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenableExplorer: false\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit for Solana\nDESCRIPTION: Command-line instructions for uninstalling the Web3Modal v5 Solana package and installing the required Reown AppKit dependencies, including the Solana adapter.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-solana-web.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @web3modal/solana\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn remove @web3modal/solana\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun remove @web3modal/solana\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm remove @web3modal/solana\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit @reown/appkit-adapter-solana @solana/wallet-adapter-wallets\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit @reown/appkit-adapter-solana @solana/wallet-adapter-wallets\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun a @reown/appkit @reown/appkit-adapter-solana @solana/wallet-adapter-wallets\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit @reown/appkit-adapter-solana @solana/wallet-adapter-wallets\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Modal Presenter in Unity AppKit\nDESCRIPTION: Shows how to replace the default modal view with a custom presenter by creating an instance and registering it with RouterController, replacing the existing modal behavior in the MVP architecture. Facilitates custom UI logic for modal views within Unity.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/customization.mdx#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n// Get a reference to ModalController and cast it to ModalControllerUtk.\n// ModalControllerUtk is used by UI Toolkit version of the AppKit.\n// It's used on all platforms except WebGL.\nvar modalController = (ModalControllerUtk)AppKit.ModalController;\nif (modalController != null)\n{\n    // Get RouterController\n    var routerController = modalController.RouterController;\n\n    // Create an instance of the custom presenter and register it as a `Account` modal view.\n    var customAccountPresenter = new CustomAccountPresenter(routerController, routerController.RootVisualElement);\n    routerController.RegisterModalView(ViewType.Account, customAccountPresenter);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Wallet Provider with TypeScript\nDESCRIPTION: Retrieves the underlying wallet provider object (e.g., an EIP-1193 compatible provider) using `modal.getWalletProvider()`. This allows for direct interaction with the wallet provider's API.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/solana/actions.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst walletProvider = modal.getWalletProvider();\n```\n\n----------------------------------------\n\nTITLE: Updating Swift Package Manager Dependency URL in Package.swift - Swift\nDESCRIPTION: This snippet demonstrates how to update the Swift Package Manager (SPM) dependency for integrating Reown AppKit into an iOS project in place of Web3Modal. Required for all projects that previously referenced Web3Modal under the WalletConnect GitHub repository. The key parameter is the package URL, which must be changed to the new Reown repository. The expected outcome is that SPM now resolves and fetches the AppKit dependency.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-ios.mdx#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n- .package(url: \"https://github.com/WalletConnect/web3modal-swift\", from: \"1.0.0\"),\n\n+ .package(url: \"https://github.com/reown-com/reown-swift\", from: \"1.0.0\"),\n```\n\n----------------------------------------\n\nTITLE: Destructuring Notification Types and Update Method with TypeScript\nDESCRIPTION: This snippet demonstrates destructuring data and an update function from the useNotificationTypes hook. The data variable, renamed as types, provides a map of notification scopes, while update is a method to enable or disable specific notification scopes by passing an array of enabled scope names. It depends on the useNotificationTypes hook being properly implemented and returns an object containing these properties.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/types/react.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { data: types, update } = useNotificationTypes()\n```\n\n----------------------------------------\n\nTITLE: Handling eth_sendTransaction Session Requests Using Chain Abstraction - Swift\nDESCRIPTION: Demonstrates intercepting `eth_sendTransaction` session requests to determine if chain abstraction is required and invoke the appropriate prepare and execute methods. The handler obtains the last pending session request, extracts transaction details, checks if input data is provided, and performs the chain abstraction preparation. If available, it prompts for user approval, signs transaction hashes, executes the transaction, and responds with the receipt. Otherwise, it proceeds with normal transaction sending or rejects the request if declined. Dependencies include WalletKit session handling, JSON-RPC request/response structures, and custom signing and sending functions.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/chain-abstraction.mdx#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nFuture<void> _ethSendTransactionHandler(String topic, dynamic params) async {\n  final SessionRequest pendingRequest = _walletKit.pendingRequests.getAll().last;\n  final int requestId = pendingRequest.id;\n  final String chainId = pendingRequest.chainId;\n\n  final transaction = (params as List<dynamic>).first as Map<String, dynamic>;\n\n  // Intercept to check if Chain Abstraction is required\n  if (transaction.containsKey('input') || transaction.containsKey('data')) {\n    final inputData = transaction.containsKey('input') ?? transaction.containsKey('data');\n    final response = await _walletKit.prepare(\n      chainId: chainId,\n      from: transaction['from'],\n      call: CallCompat(\n        to: transaction['to'],\n        input: inputData,\n      ),\n    );\n    response.when(\n      success: (PrepareDetailedResponseSuccessCompat deatailResponse) {\n        deatailResponse.when(\n          available: (UiFieldsCompat uiFieldsCompat) {\n            // Only if the route is available, present a Chain Abstraction approval modal \n            // and proceed with execute() method\n            if (approved) {\n              final TxnDetailsCompat initial = uiFieldsCompat.initial;\n              final List<TxnDetailsCompat> route = uiFieldsCompat.route;\n              \n              final String initialSignature = signHashMethod(initial.transactionHashToSign);\n              final List<String> routeSignatures = route.map((route) {\n                final String rSignature = signHashMethod(route.transactionHashToSign);\n                return rSignature;\n              }).toList();\n\n              final executeResponse = await _walletKit.execute(\n                uiFields: uiFields,\n                initialTxnSig: initialSignature,\n                routeTxnSigs: routeSignatures,\n              );\n\n              // Respond to the session request. Flow shouldn't end here as the transaction was processed\n              return await _walletKit.respondSessionRequest(\n                topic: topic,\n                response: JsonRpcResponse(\n                  id: requestId, \n                  jsonrpc: '2.0', \n                  result: executeResponse.initialTxnReceipt,\n                ),\n              );\n            }\n          },\n          // If deatailResponse is not `available` type\n          // then let the flow to continue to regular send transacrion\n        );\n      },\n    );\n  }\n\n  // display a prompt for the user to approve or reject the request\n  // if approved\n  if (approved) {\n    final signedTx = await sendTransaction(transaction, int.parse(chainId));\n    // respond to requester\n    await _walletKit.respondSessionRequest(\n      topic: topic,\n      response: JsonRpcResponse(\n        id: requestId, \n        jsonrpc: '2.0', \n        result: signedTx,\n      ),\n    );\n  }\n\n  // if rejected\n  return _walletKit.respondSessionRequest(\n    topic: topic,\n    response: JsonRpcResponse(\n      id: id,\n      jsonrpc: '2.0',\n      error: const JsonRpcError(code: 5001, message: 'User rejected method'),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Wallet Information with useWalletInfo in Vue\nDESCRIPTION: Shows how to import and use the `useWalletInfo` composable from `@reown/appkit/vue`. This provides reactive access to information about the currently connected wallet via the destructured `walletInfo` object.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/composables.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWalletInfo } from '@reown/appkit/vue'\n\n\nexport default Component(){\n  const { walletInfo } = useWalletInfo()\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Blockchain Account with Notify API Using SIWE in Kotlin\nDESCRIPTION: Checks if a blockchain account (CAIP-10 format) is registered with Notify API. If unregistered, prepares registration by obtaining a SIWE message to be signed. Provides two signing options: using CacaoSigner or a custom method. After signing, registers the account asynchronously using NotifyClient.register. Handles success and error cases in callbacks. Requires WalletConnect Notify SDK, CacaoSigner SDK or equivalent signing implementation. Inputs: account string, domain, private key for signing. Outputs: registration success or failure.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/notifications/notify/usage.mdx#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval account: String = \"\"// The CAIP-10 account i.e. \"eip155:1:0xAbC1234567890DefABC1234567890dEFABC12345\"\nval domain = BuildConfig.APPLICATION_ID\n\n// Caution: This function is blocking and runs on the current thread. It is advised that this function be called from background operation\nval isRegistered = NotifyClient.isRegistered(params = Notify.Params.IsRegistered(account = account, domain = domain))\n\nif (!isRegistered) {\n    NotifyClient.prepareRegistration(\n        params = Notify.Params.PrepareRegistration(account = account, domain = domain),\n        onSuccess = { cacaoPayloadWithIdentityPrivateKey, message ->\n\n            // Pick one of the following methods to sign the message:\n\n            // 1. Using CacaoSigner to sign the message\n            val signature = CacaoSigner.sign(\n              message,\n              PRIVATE_KEY, // Private key used to signing a message,\n              SignatureType.EIP191\n            )\n\n            // 2. Alternatively, you can use your own signing method\n            /** Add imports:\n                import com.reown.android.cacao.signature.SignatureType\n                import com.reown.android.internal.common.signing.signature.Signature\n                import com.reown.android.internal.common.signing.signature.toCacaoSignature\n             */\n\n            val signature: String = // Here developers provide signed message using their own signing method\n            val cacaoSignature = Notify.Model.Cacao.Signature(SignatureType.EIP191.header, Signature.fromString(signature).toCacaoSignature())\n\n            // Once the message has been signed, call the register function\n\n            NotifyClient.register(\n                params = Notify.Params.Register(cacaoPayloadWithIdentityPrivateKey = cacaoPayloadWithIdentityPrivateKey, signature = signature),\n                onSuccess = {\n                  // Registration was successful\n                 },\n                onError = {\n                  // There was an error while trying to register the account\n                }\n            )\n\n        },\n        onError = {\n          // There was an error while trying to prepare the registration\n        }\n    )\n} else {\n  // Great! Account is already registered\n}\n```\n\n----------------------------------------\n\nTITLE: Responding to Session Requests in JavaScript with WalletKit\nDESCRIPTION: Demonstrates how to handle session_request events, extract request parameters, sign messages, and respond with the signed result. This pattern works for all JSON-RPC methods across supported chains.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/usage.mdx#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nwalletKit.on(\n  \"session_request\",\n  async (event: WalletKitTypes.SessionRequest) => {\n    const { topic, params, id } = event;\n    const { request } = params;\n    const requestParamsMessage = request.params[0];\n\n    // convert `requestParamsMessage` by using a method like hexToUtf8\n    const message = hexToUtf8(requestParamsMessage);\n\n    // sign the message\n    const signedMessage = await wallet.signMessage(message);\n\n    const response = { id, result: signedMessage, jsonrpc: \"2.0\" };\n\n    await walletKit.respondSessionRequest({ topic, response });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Obtaining the Connection Type Using AppKit in Kotlin\nDESCRIPTION: This snippet returns information about the type of connection currently established via AppKit by calling `getConnectorType()`. This can provide details such as connection protocol or transport used. The call requires an active connection context to fetch meaningful data.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/actions.mdx#_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nAppKit.getConnectorType()\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with Solana Adapter Using Bash\nDESCRIPTION: Details installation commands for setting up the Reown AppKit with the Solana blockchain adapter and Solana wallet adapter wallets library in Vue projects. It supports npm, Yarn, Bun, and pnpm to install the required dependencies to integrate Solana blockchain wallets.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/installation.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit @reown/appkit-adapter-solana @solana/wallet-adapter-wallets\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit @reown/appkit-adapter-solana @solana/wallet-adapter-wallets\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @reown/appkit @reown/appkit-adapter-solana @solana/wallet-adapter-wallets\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit @reown/appkit-adapter-solana @solana/wallet-adapter-wallets\n```\n\n----------------------------------------\n\nTITLE: Enabling Flutter Deep Linking on iOS (XML/Plist)\nDESCRIPTION: Specifies adding the `FlutterDeepLinkingEnabled` key set to `true` within the iOS `Info.plist` file. This is an additional step required for Flutter applications to correctly handle deep links on iOS, alongside the standard `CFBundleURLTypes` configuration.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/mobile-linking.mdx#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>FlutterDeepLinkingEnabled</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: Handling Universal and App Links with Flutter EventChannel on iOS - Swift\nDESCRIPTION: This Swift snippet shows how to capture universal links and deep links on iOS using UIApplicationDelegate methods, then forward these links to the Flutter side via a FlutterEventChannel named 'com.exampledapp/events'. Required dependencies are Flutter and UIKit. The AppDelegate sets up the EventChannel and defines a LinkStreamHandler to queue or immediately send link events to Flutter. Methods such as application(_:open:), application(_:continue:restorationHandler:), and didFinishLaunchingWithOptions: are overridden to handle link receptions. Inputs include user activities or URL opens from the OS; outputs are string URLs passed to the Dart layer via an event sink. Limitations involve proper initialization and registration, and only one EventChannel is handled.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/installation.mdx#_snippet_8\n\nLANGUAGE: Swift\nCODE:\n```\nimport Flutter\nimport UIKit\n\n@main\n@objc class AppDelegate: FlutterAppDelegate {\n  private static let EVENTS_CHANNEL = \"com.exampledapp/events\"\n  private var eventsChannel: FlutterEventChannel?\n  private let linkStreamHandler = LinkStreamHandler()\n\n  override func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    GeneratedPluginRegistrant.register(with: self)\n\n    let controller = window.rootViewController as! FlutterViewController\n    eventsChannel = FlutterEventChannel(name: AppDelegate.EVENTS_CHANNEL, binaryMessenger: controller.binaryMessenger)\n    eventsChannel?.setStreamHandler(linkStreamHandler)\n\n    if let userActivityDictionary = launchOptions?[.userActivityDictionary] as? [String: Any],\n      let userActivity = userActivityDictionary[\"UIApplicationLaunchOptionsUserActivityKey\"] as? NSUserActivity,\n      userActivity.activityType == NSUserActivityTypeBrowsingWeb {\n\n      handleIncomingUniversalLink(userActivity: userActivity)\n    }\n\n    return super.application(application, didFinishLaunchingWithOptions: launchOptions)\n  }\n\n  override func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -> Bool {\n    return linkStreamHandler.handleLink(url.absoluteString)\n  }\n\n  override func application(_ application: UIApplication, continue userActivity: NSUserActivity, restorationHandler: @escaping ([UIUserActivityRestoring]?) -> Void) -> Bool {\n    if userActivity.activityType == NSUserActivityTypeBrowsingWeb {\n      handleIncomingUniversalLink(userActivity: userActivity)\n      return true\n    }\n\n    return false\n  }\n\n  private func handleIncomingUniversalLink(userActivity: NSUserActivity) {\n    if let url = userActivity.webpageURL {\n      print(\"App launched with Universal Link: \\(url.absoluteString)\")\n      let _ = linkStreamHandler.handleLink(url.absoluteString)\n    }\n  }\n}\n\nclass LinkStreamHandler: NSObject, FlutterStreamHandler {\n  var eventSink: FlutterEventSink?\n  var queuedLinks = [String]()\n\n  func onListen(withArguments arguments: Any?, eventSink events: @escaping FlutterEventSink) -> FlutterError? {\n    self.eventSink = events\n    queuedLinks.forEach({ events($0) })\n    queuedLinks.removeAll()\n    return nil\n  }\n\n  func onCancel(withArguments arguments: Any?) -> FlutterError? {\n    self.eventSink = nil\n    return nil\n  }\n\n  func handleLink(_ link: String) -> Bool {\n    guard let eventSink = eventSink else {\n      queuedLinks.append(link)\n      return false\n    }\n    eventSink(link)\n    return true\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Replacing RainbowKit Config Imports with WagmiAdapter Import in TypeScript\nDESCRIPTION: Updates configuration imports by removing RainbowKit's getDefaultConfig and replacing it with the WagmiAdapter from the @reown/appkit-adapter-wagmi package. This step is foundational for configuring AppKit using wagmi instead of RainbowKit, enabling new adapter-based configurations.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-rainbowkit-next.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n- import { getDefaultConfig } from '@rainbow-me/rainbowkit';\n+ import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'\n```\n\n----------------------------------------\n\nTITLE: Updating Subscription Settings WalletConnect Notify Kotlin\nDESCRIPTION: Shows how to modify an active subscription's notification settings. Users can select which specific notification types they wish to receive from a dapp based on the available types. The method requires the subscription topic, a list of desired notification type IDs, and an optional timeout.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/notifications/notify/usage.mdx#_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval topic: String = // active subscription topic\nval scope: List<String> = // list of notification types\nval timeout: Duration? = // Optional. Timeout - min 5 sec, max 60 sec, default 60 sec\nval params = Notify.Params.UpdateSubscription(topic, scope, timeout)\n\nNotifyClient.update(params).let { result ->\n    when (result) {\n        is Notify.Result.UpdateSubscription.Success -> {\n          // callback for when the update request was successful\n        }\n        is Notify.Result.UpdateSubscription.Error -> {\n          // callback for when the update request has failed\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the ScopeMap Type (TypeScript)\nDESCRIPTION: Defines the `ScopeMap` type alias in TypeScript. It represents a record (or dictionary) where keys are scope names (strings), and values are objects containing the scope's `name`, `description`, and `enabled` status (boolean). This type is often used as the return type for functions retrieving scope information.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/types/javascript.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype ScopeMap = Record<\n  string,\n  {\n    name: string\n    description: string\n    enabled: boolean\n  }\n>\n```\n\n----------------------------------------\n\nTITLE: Formatting Message - WalletKit - Kotlin\nDESCRIPTION: Formats a message for signing, typically used for Sign-In With Ethereum (SIWE). Requires the payload parameters received in the `onAuthRequest` callback and the issuer DID (following DID-PKH).\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/usage.mdx#_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nval payloadParams: Wallet.Params.PayloadParams = //PayloadParams received in the onAuthRequest callback\nval issuer = //MUST be the same as send with the respond methods and follows: https://github.com/w3c-ccg/did-pkh/blob/main/did-pkh-method-draft.md\nval formatMessage = Wallet.Params.FormatMessage(event.payloadParams, issuer)\n\nWalletKit.formatMessage(formatMessage)\n```\n\n----------------------------------------\n\nTITLE: Installing WalletConnectUnity Core Package in Unity via OpenUPM CLI\nDESCRIPTION: This snippet demonstrates installing the WalletConnectUnity core package using OpenUPM CLI in Unity, which simplifies package management for Unity versions supporting OpenUPM integration. It requires Node.js and openupm-cli pre-installation.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/overview.mdx#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nopenupm add com.walletconnect.core\n```\n\n----------------------------------------\n\nTITLE: Defining defaultNetwork option using Wagmi networks in TypeScript\nDESCRIPTION: Illustrates setting the defaultNetwork property to establish which network the app connects to initially, using the Wagmi compatible mainnet import from @reown/appkit/networks. This option expects a network object defining the blockchain network used by default.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { mainnet } from \"@reown/appkit/networks\";\n\ncreateAppKit({\n  //...\n  defaultNetwork: mainnet,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ConnectOptions with RequiredNamespaces in C#\nDESCRIPTION: Creates ConnectOptions specifying required blockchain namespaces, including chains, RPC methods, and events that the dapp will request access to. Shows both constructor syntax and builder pattern style approaches. This defines the permission scope for sessions. RequiredNamespaces is a dictionary keyed by namespace (e.g., 'eip155') with methods like 'eth_sendTransaction' and events such as 'chainChanged'.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_35\n\nLANGUAGE: csharp\nCODE:\n```\nvar dappConnectOptions = new ConnectOptions()\n{\n    RequiredNamespaces = new RequiredNamespaces()\n    {\n        {\n            \"eip155\", new RequiredNamespace()\n            {\n                Methods = new[]\n                {\n                    \"eth_sendTransaction\",\n                    \"eth_signTransaction\",\n                    \"eth_sign\",\n                    \"personal_sign\",\n                    \"eth_signTypedData\",\n                },\n                Chains = new[]\n                {\n                    \"eip155:1\"\n                },\n                Events = new[]\n                {\n                    \"chainChanged\",\n                    \"accountsChanged\",\n                }\n            }\n        }\n    }\n};\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar dappConnectOptions1 = new ConnectOptions()\n    .RequireNamespace(\"eip155\", new RequiredNamespace()\n        .WithMethod(\"eth_sendTransaction\")\n        .WithMethod(\"eth_signTransaction\")\n        .WithMethod(\"eth_sign\")\n        .WithMethod(\"personal_sign\")\n        .WithMethod(\"eth_signTypedData\")\n        .WithChain(\"eip155:1\")\n        .WithEvent(\"chainChanged\")\n        .WithEvent(\"accountsChanged\")\n    );\n```\n\n----------------------------------------\n\nTITLE: Configuring AppKit for SIWE - Kotlin\nDESCRIPTION: This snippet shows how to set the authentication request parameters for AppKit. These parameters are crucial for constructing the SIWE message that the user's wallet will prompt them to sign, enabling authentication.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/one-click-auth.mdx#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n AppKit.setAuthRequestParams(authPayloadParams)\n```\n\n----------------------------------------\n\nTITLE: Rejecting a WalletConnect Session Proposal in JavaScript\nDESCRIPTION: This snippet demonstrates rejecting a session proposal by calling rejectSession with a reason obtained from the '@walletconnect/utils' library. It is used to decline incoming connection requests from dapps when the user does not approve.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/usage.mdx#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { getSdkError } from \"@walletconnect/utils\";\n\nwalletKit.on(\"session_proposal\", async (proposal) => {\n  await walletKit.rejectSession({\n    id: proposal.id,\n    reason: getSdkError(\"USER_REJECTED_METHODS\")\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Web3Inbox Subscription Status - TypeScript\nDESCRIPTION: Demonstrates how to retrieve the current subscription status for the set account using `getSubscription`. It also shows how to set up a real-time watcher using `watchSubscription` that triggers a callback function whenever the subscription status changes.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/usage/example/javascript.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Get the current notification subscription or watch for updates\nconst subscription = client.getSubscription()\nclient.watchSubscription(subscription => console.log({ subscription }))\n```\n\n----------------------------------------\n\nTITLE: Approving Session Proposals (Kotlin/Android)\nDESCRIPTION: Approves a session proposal in an Android wallet using the WalletKit SDK. Calls `approveSession` with the approval parameters and provides success and error callbacks for handling the asynchronous response and updating the UI.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#_snippet_11\n\nLANGUAGE: kotlin\nCODE:\n```\nWalletKit.approveSession(approveProposal,\n  onSuccess = {\n    //Session approval response was sent successfully - update your UI\n  }\n    onError = { error ->\n      //Error while sending session approval - update your UI\n  })\n```\n\n----------------------------------------\n\nTITLE: Updating and Extending Sessions in JavaScript\nDESCRIPTION: Code examples showing how to update namespaces in an existing session and how to extend a session's duration using WalletKit.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/usage.mdx#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nawait _walletKit.updateSession(topic: 'topic', namespaces: '{}')\n\n// To extend the session\nawait _walletKit.extendSession(topic: 'topic')\n```\n\n----------------------------------------\n\nTITLE: Signing Messages via EVM in C#\nDESCRIPTION: Provides C# examples for signing messages using the active account's private key via `AppKit.EVM.SignMessageAsync()`. It covers signing simple strings, raw byte arrays, and optionally specifying the signing address. Returns the signature as a hex string.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/actions.mdx#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// Sign a string message\nstring signature = await AppKit.EVM.SignMessageAsync(\"Hello World\");\n\n// Sign raw bytes\nbyte[] rawMessage = System.Text.Encoding.UTF8.GetBytes(\"Hello World\");\nstring signature = await AppKit.EVM.SignMessageAsync(rawMessage);\n\n// Sign with specific address (optional)\nstring signature = await AppKit.EVM.SignMessageAsync(\"Hello World\", \"0x123...\");\n```\n\n----------------------------------------\n\nTITLE: Accessing Modal State with useAppKitState (Ethers v5) TypeScript\nDESCRIPTION: This snippet demonstrates using the useAppKitState hook from `@reown/appkit-ethers5-react-native` to access the current reactive state of the modal. It shows destructuring the `open` (boolean indicating modal visibility) and `selectedNetworkId` (number representing the current chain ID) properties from the hook's return value. These values update automatically as the modal state changes.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/hooks.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useAppKitState } from '@reown/appkit-ethers5-react-native'\n\nconst { open, selectedNetworkId } = useAppKitState()\n```\n\n----------------------------------------\n\nTITLE: Importing CoinbaseWalletSDK in iOS AppDelegate (Swift)\nDESCRIPTION: Imports the `CoinbaseWalletSDK` framework into the `AppDelegate.swift` file. This import is required before implementing the URL handling logic needed for Coinbase Wallet interactions on iOS.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/installation.mdx#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport CoinbaseWalletSDK\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with Ethers v6 using npm\nDESCRIPTION: Command for custom installation of Reown AppKit with Ethers v6 adapter using npm package manager. Installs required dependencies including ethers v6.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/installation.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit @reown/appkit-adapter-ethers ethers\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Dapp for Notifications in JavaScript\nDESCRIPTION: This snippet illustrates how to subscribe an account to a dapp by extracting the domain from the explorer data and calling the subscribe method. Successful subscription triggers relevant events, allowing the app to update UI or internal state.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/notify/usage.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Extract dapp domain from explorer data\nconst appDomain = new URL(fetchedExplorerDapp.platform_browser).hostname;\n\n// Subscribe to the dapp\nawait notifyClient.subscribe({\n  account,\n  appDomain,\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Notification Preferences\nDESCRIPTION: Method to modify which types of notifications a user receives from a subscribed dapp by updating the scope settings.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/notifications/notify/usage.mdx#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\npublic func update(topic: String, scope: Set<String>) async throws\n```\n\n----------------------------------------\n\nTITLE: Approving a WalletConnect Session with a Dapp via WCURI in JavaScript\nDESCRIPTION: This code snippet illustrates how to handle a session proposal event by approving the session with the appropriate namespaces. It also shows how to initiate pairing with a dapp by calling the 'pair' method with the obtained WalletConnect URI. This workflow is essential for establishing a user-approved connection between wallet and dapp.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/usage.mdx#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { getSdkError } from \"@walletconnect/utils\";\n\nwalletKit.on(\"session_proposal\", async (proposal) => {\n  const session = await walletKit.approveSession({\n    id: proposal.id,\n    namespaces,\n  });\n});\n\n// When the WCURI is received (e.g., via QR code or deep link)\nawait walletKit.pair({ uri: wcuri });\n```\n\n----------------------------------------\n\nTITLE: Initializing CoinbaseProvider and adding it to default configuration in React Native\nDESCRIPTION: This snippet demonstrates how to initialize the CoinbaseProvider with redirect options and RPC URL, then integrate it into the default app configuration. The provider allows your app to connect with Coinbase Wallet for authentication and blockchain interactions.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers/about/coinbase.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CoinbaseProvider } from '@reown/appkit-coinbase-ethers-react-native'\n\nconst coinbaseProvider = new CoinbaseProvider({\n  redirect: 'https://your-app-universal-link.com' || 'YOUR_APP_SCHEME://'\n  rpcUrl: mainnet.rpcUrl\n})\n\nconst config = defaultConfig({\n  metadata,\n  coinbase: coinbaseProvider\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling analytics feature in createAppKit configuration in TypeScript\nDESCRIPTION: Illustrates enabling the analytics feature to obtain user activity insights, which are accessible via the Reown Cloud dashboard. The features option is an object where individual features such as analytics can be toggled by boolean flags.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateAppKit({\n  //...\n  features: {\n    analytics: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: AppKitTheme Mode Attribute in XML\nDESCRIPTION: Declares the modalMode attribute in Android resources for XML-based theming, providing enum values AUTO (0), DARK (1), and LIGHT (2). Used in conjunction with AppKitTheme styles to control which mode is active. Requires placement inside a <resources> tag. Inputs are enum values; output is the runtime selection of theme mode.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/theming.mdx#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <attr name=\"modalMode\" format=\"enum\">\n        <enum name=\"AUTO\" value=\"0\"/>\n        <enum name=\"DARK\" value=\"1\"/>\n        <enum name=\"LIGHT\" value=\"2\"/>\n    </attr>\n</resources>\n\n```\n\n----------------------------------------\n\nTITLE: Installing AppKit SIWE Package (Bun) - Bash\nDESCRIPTION: This command installs the @reown/appkit-siwe and siwe packages using Bun as the package manager. Both packages must be present for proper SIWE integration. Run this line in your project's root directory to install the dependencies.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/siwe.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbun a @reown/appkit-siwe siwe\n```\n\n----------------------------------------\n\nTITLE: Handling incoming requests with MessageHandler in .NET SDK\nDESCRIPTION: Sets up an event handler to process incoming requests matching a specific topic, allowing the application to respond appropriately.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\ncore.MessageHandler.MessageEventHandler<MyRequest, MyResponse>()\n    .FilterRequests(r => r.Topic == pairingData.Topic)\n    .OnRequest +=\n        async delegate(RequestEventArgs<MyRequest, MyResponse> eventArgs)\n        {\n            Console.WriteLine(eventArgs.Request);\n            eventArgs.Response = new MyResponse()\n            {\n                // ...\n            };\n        };\n```\n\n----------------------------------------\n\nTITLE: Building Authentication Objects (Swift)\nDESCRIPTION: Defines a function `buildAuthObjects` that creates an array of `AuthObject` instances required for approving authentication requests. It involves identifying common supported chains, building authentication payloads, formatting messages using `Sign.instance.formatAuthMessage`, signing the message (using a placeholder `signMessage` function), and finally building the signed `AuthObject` using `Sign.instance.buildSignedAuthObject`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_22\n\nLANGUAGE: Swift\nCODE:\n```\nfunc buildAuthObjects(request: AuthenticationRequest, account: Account, privateKey: String) throws -> [AuthObject] {\n    let requestedChains = Set(request.payload.chains.compactMap { Blockchain($0) })\n    let supportedChains: Set<Blockchain> = [Blockchain(\"eip155:1\")!, Blockchain(\"eip155:137\")!, Blockchain(\"eip155:69\")!]\n    let commonChains = requestedChains.intersection(supportedChains)\n    let supportedMethods = [\"personal_sign\", \"eth_sendTransaction\"]\n\n    var authObjects = [AuthObject]()\n    for chain in commonChains {\n        let accountForChain = Account(blockchain: chain, address: account.address)!\n        let supportedAuthPayload = try Sign.instance.buildAuthPayload(\n            payload: request.payload,\n            supportedEVMChains: Array(commonChains),\n            supportedMethods: supportedMethods\n        )\n        let formattedMessage = try Sign.instance.formatAuthMessage(payload: supportedAuthPayload, account: accountForChain)\n        let signature = // Assume `signMessage` is a function you've implemented to sign messages.\n            signMessage(message: formattedMessage, privateKey: privateKey)\n\n        let authObject = try Sign.instance.buildSignedAuthObject(\n            authPayload: supportedAuthPayload,\n            signature: signature,\n            account: accountForChain\n        )\n        authObjects.append(authObject)\n    }\n    return authObjects\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Message Signatures via EVM in C#\nDESCRIPTION: Demonstrates how to verify if a standard message signature corresponds to a given address and original message using `AppKit.EVM.VerifyMessageSignatureAsync()`. Shows both direct parameter usage and using a `VerifyMessageSignatureParams` object. Returns `true` if the signature is valid, `false` otherwise.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/actions.mdx#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n// Basic verification\nbool isValid = await AppKit.EVM.VerifyMessageSignatureAsync(\n    \"0x123...\", // address\n    \"Hello World\", // original message\n    \"0xabc...\" // signature\n);\n\n// Using parameters object\nvar verifyMessageParams = new VerifyMessageSignatureParams\n{\n    Address = \"0x123...\",\n    Message = \"Hello World\",\n    Signature = \"0xabc...\"\n};\nbool isValid = await AppKit.EVM.VerifyMessageSignatureAsync(verifyMessageParams);\n```\n\n----------------------------------------\n\nTITLE: Handling Last Modal Event with useAppKitEvents (Ethers v5) TypeScript\nDESCRIPTION: This snippet shows how to use the useAppKitEvents hook from `@reown/appkit-ethers5-react-native`. This hook returns the last tracked modal event. It also accepts an optional callback function that will be executed whenever a new event is triggered, allowing for reactive handling of modal events.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/hooks.mdx#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useAppKitEvents } from '@reown/appkit-ethers5-react-native'\n\nconst event = useAppKitEvents(event => {\n  // your code here\n})\n```\n\n----------------------------------------\n\nTITLE: Decrypting a Message via Notify SDK in Kotlin\nDESCRIPTION: Sets up decryption parameters with the target topic and encrypted message, then calls NotifyClient.decryptMessage. Provides success and error callbacks to handle decrypted message data or failure.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_37\n\nLANGUAGE: Kotlin\nCODE:\n```\nval params = Notify.Params.DecryptMessage(topic = /*topic*/, encryptedMessage = /*encrypted message*/)\n\nNotifyClient.decryptMessage(\n    params,\n    onSuccess = { message: Notify.Model.Message ->\n        // Handle successful decryption\n    },\n    onError = { error: Notify.Model.Error ->\n        // Handle decryption failure\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Replacing Unity Package Dependencies in manifest.json with JSON\nDESCRIPTION: This JSON snippet shows how to remove the old WalletConnect Web3Modal package dependencies and add the new Reown AppKit package in the Unity project's manifest.json. It involves deleting the \"com.walletconnect.web3modal\" package and its scoped registry scope \"com.walletconnect\", then adding \"com.reown.appkit\" and its corresponding scope \"com.reown\" to ensure Unity resolves the new package sources correctly.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-unity.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    // Remove the following code lines\n    \"com.walletconnect.web3modal\": \"1.0.0\",\n\n    // Add the following code lines\n    \"com.reown.appkit\": \"0.4.2\"\n  },\n  \"scopedRegistries\": [\n    {\n      \"name\": \"package.openupm.com\",\n      \"url\": \"https://package.openupm.com\",\n      \"scopes\": [\n        // Remove the following code lines\n        \"com.walletconnect\",\n\n        // Add the following code lines\n        \"com.reown\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Deep Links in AppKit - Kotlin\nDESCRIPTION: After configuring Link Mode, incoming deep links from the wallet need to be processed by AppKit. This snippet shows how to pass the received URL to `AppKit.handleDeepLink` to allow the SDK to process the response payload contained within the link, handling any potential errors.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/one-click-auth.mdx#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nAppKit.handleDeepLink(url) { error ->\n    //handle error\n\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Reown AppKit Modal Using useAppKit Hook in React Native (TypeScript)\nDESCRIPTION: This snippet illustrates how to programmatically open the AppKit modal by using the `useAppKit` hook from '@reown/appkit-ethers-react-native'. It defines a functional component with a Pressable element that calls the `open` function from the hook when pressed, allowing custom control over modal trigger logic within the app UI. Dependencies include React Native components and the Reown AppKit hook.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers/about/implementation.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Pressable, Text } from \"react-native\";\nimport { useAppKit } from \"@reown/appkit-ethers-react-native\";\n\nexport default function ConnectView() {\n  const { open } = useAppKit();\n\n  return (\n    <>\n      <Pressable onClick={() => open()}>\n        <Text>Open Connect Modal</Text>\n      </Pressable>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Unity Core Package Versioned Git URL (Text)\nDESCRIPTION: Git URL for adding a specific version of the WalletConnectUnity Core package via Unity Package Manager by appending the desired git tag.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nhttps://github.com/WalletConnect/WalletConnectUnity.git?path=Packages/com.walletconnect.core#core/1.0.1\n```\n\n----------------------------------------\n\nTITLE: Retrieving Connected Wallet Info with useWalletInfo (Ethers) TypeScript\nDESCRIPTION: This snippet illustrates how to use the useWalletInfo hook from `@reown/appkit-ethers-react-native`. This hook provides access to metadata information about the currently connected wallet. It shows how to destructure the `walletInfo` object from the hook's return value.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/hooks.mdx#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useWalletInfo } from '@reown/appkit-ethers-react-native'\n\nconst { walletInfo } = useWalletInfo()\n\n```\n\n----------------------------------------\n\nTITLE: Usage example of the `<appkit-wallet-button />` React component\nDESCRIPTION: Demonstrates how to embed the wallet connection button into a React application by including the `<appkit-wallet-button />` component with a specified wallet property, allowing users to connect their chosen wallet directly.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/components.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<appkit-wallet-button wallet=\"metamask\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Info.plist for Deep Linking (Ruby/XML)\nDESCRIPTION: Defines the necessary `CFBundleURLTypes` entry within an iOS application's `Info.plist` file to register a custom URL scheme. This enables other applications (like Dapps) to open the wallet app using this scheme (e.g., `examplewallet://`). The `CFBundleURLSchemes` array should contain the desired custom scheme.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/mobile-linking.mdx#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<key>CFBundleURLTypes</key>\n<array>\n\t<dict>\n\t\t<key>CFBundleTypeRole</key>\n\t\t<string>Editor</string>\n\t\t<key>CFBundleURLName</key>\n\t\t<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>\n\t\t<key>CFBundleURLSchemes</key>\n\t\t<array>\n\t\t\t<string>examplewallet</string> <!-- your custom scheme goes here -->\n\t\t</array>\n\t</dict>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Initializing AppKit with SIWE Configuration in TypeScript\nDESCRIPTION: Demonstrates adding the configured siweConfig object to the AppKit initialization call to integrate Sign In With Ethereum authentication into the application. This snippet emphasizes the injection of the authentication configuration during AppKit creation, linking wallet connection and SIWE workflows for a seamless developer experience.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/siwe.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { siweConfig } from \"./siweConfig.ts\";\n\ncreateAppKit({\n  //..\n  siweConfig,\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Modal State with useAppKitState (React)\nDESCRIPTION: Provides real-time access to the current state of the AppKit modal, such as whether it is open or closed and the currently selected network ID. Useful for synchronizing UI elements with the modal's status. Required dependency: `@reown/appkit/react`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/hooks.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAppKitState } from \"@reown/appkit/react\";\n\nconst { open, selectedNetworkId } = useAppKitState();\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Watching All Subscriptions via Client API in TypeScript\nDESCRIPTION: This snippet demonstrates retrieving all current account's dapp subscriptions as a non-reactive array and watching for changes reactively. The array contains objects in the documented subscription format. The watcher callback is invoked for every update to the subscriptions list.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/managing-subscription/javascript.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst subscriptions = client.getSubscriptions()\n\nclient.watchSubscriptions(subscriptions => console.log({ subscriptions }))\n```\n\n----------------------------------------\n\nTITLE: Adding ConnectButton in Jetpack Compose with Kotlin\nDESCRIPTION: Presents how to integrate the ConnectButton in a Compose UI. Imports ConnectButton and connection size enums from the AppKit library with state management. It uses rememberAppKitState to create the button's state linked with NavController. Parameters include the buttonSize which can be NORMAL or SMALL. This component is intended for initiating connection workflows within the app UI and displays an interactive button accordingly.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/components.mdx#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.reown.appkit.ui.components.button.ConnectButton\nimport com.reown.appkit.ui.components.button.ConnectButtonSize\nimport com.reown.appkit.ui.components.button.rememberAppKitState\n\nYourAppScreen(navController: NavController) {\n    val appKitState = rememberAppKitState(navController = navController)\n    ConnectButton(\n        state = appKitState,\n        buttonSize = ConnectButtonSize.NORMAL || ConnectButtonSize.SMALL\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Building Namespace Mapping Using Constructor in C#\nDESCRIPTION: This snippet constructs a Namespace object via constructor syntax, assigning accounts, chains, methods, and events for the 'eip155' namespace. It serves as a detailed example of manually setting up namespace parameters needed for proposing or approving a session.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/usage.mdx#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nvar TestNamespaces = new Namespaces()\n{\n    {\n        \"eip155\", new Namespace()\n            {\n                Accounts = new [] { \"eip155:1:0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb\" },\n                Chains = new []{ \"eip155:1\" },\n                Methods = new[] { \"eth_signTransaction\" },\n                Events = new[] { \"chainChanged\" }\n            }\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Web3Button with Android XML Views\nDESCRIPTION: Shows XML markup to add a Web3Button component inside a LinearLayout in an Android View context. The component uses custom attributes connect_button_size and account_button_type to specify button size and type. These attributes accept values \"NORMAL\" or \"SMALL\" for size and \"NORMAL\" or \"MIXED\" for button type. This snippet assumes the Reown AppKit UI components library is included and proper XML namespaces are declared. Input parameters are configured via XML attributes; output is the rendered Web3Button view.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/components.mdx#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<LinearLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:gravity=\"center\"\n    android:orientation=\"vertical\">\n\n        <com.reown.appkit.ui.components.button.views.Web3Button\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            app:connect_button_size=\"NORMAL\" || \"SMALL\"\n            app:account_button_type=\"NORMAL\" || \"MIXED\"\n        />\n</LinearLayout>\n```\n\n----------------------------------------\n\nTITLE: Rejecting Authentication Requests (TypeScript)\nDESCRIPTION: This snippet shows how to reject an authentication request by calling 'rejectSessionAuthenticate' with the request ID and a reason, typically indicating user rejection or other issues. The 'getSdkError' utility is used to standardize error reasons.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/one-click-auth-siws.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getSdkError } from \"@walletconnect/utils\";\n\nawait walletKit.rejectSessionAuthenticate({\n  id: payload.id,\n  reason: getSdkError(\"USER_REJECTED\"), // or choose a different reason if applicable\n});\n```\n\n----------------------------------------\n\nTITLE: Using getAccount Action in React with Wagmi\nDESCRIPTION: Demonstrates how to access Ethereum account data and connection status using Wagmi's getAccount action. Requires a configured wagmiConfig instance to be imported from a main file.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/wagmi/actions.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getAccount } from \"@wagmi/core\";\nimport { wagmiConfig } from \"./main\";\n\nconst account = getAccount(wagmiConfig);\n```\n\n----------------------------------------\n\nTITLE: Installing AppKit SIWE Package with PNPM\nDESCRIPTION: Command for installing the One-Click Auth dependencies including the AppKit SIWE package, the SIWE library, and viem using PNPM package manager.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/siwe.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit-siwe siwe viem\n```\n\n----------------------------------------\n\nTITLE: Updating WalletConnect Notify Subscription Scope (JavaScript)\nDESCRIPTION: Shows how to modify the enabled notification types (scope) for an existing subscription using `notifyClient.update()`. It requires the subscription `topic` and an array specifying the new desired scopes. The outcome is communicated through the `notify_update` and `notify_subscriptions_changed` events.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// `topic` - subscription topic of the subscription that should be updated.\n// `scope` - an array of notification types that should be enabled going forward. The current scopes can be found under `subscription.scope`.\nawait notifyClient.update({\n  topic,\n  scope: [\"alerts\"],\n});\n// -> Success/Failure will be received via the `notify_update` event registered previously.\n// -> Updated subscription will be emitted via the `notify_subscriptions_changed` watcher event.\n\n// get notification types by accessing `scope` member of a dapp's subscription\nconst notificationTypes = notifyClient\n  .getActiveSubscriptions({ account })\n  .filter((subscription) => subscription.topic === topic).scope;\n```\n\n----------------------------------------\n\nTITLE: Defining DApp Metadata Structure in TypeScript\nDESCRIPTION: TypeScript interface that specifies the required metadata properties for a decentralized application. This information will be displayed to users during transaction or permission approval requests in cryptocurrency wallets.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/web3modal/v2/_partials/options/metadata.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmetadata: {\n  name: string;\n  description: string;\n  url: string;\n  icons: string[];\n};\n```\n\n----------------------------------------\n\nTITLE: Registering an Account with Web3Inbox using Ethereum Signatures in TypeScript\nDESCRIPTION: This code demonstrates how to register an account with Web3Inbox using Ethereum signatures. It imports necessary hooks from wagmi and Web3Inbox libraries, prepares registration parameters, signs a message, and submits the registration. EIP-1271 signatures from smart wallets are supported in version 1.1.0 and above.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/registering-accounts/react.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSignMessage } from '@wagmi'\nconst { signMessageAsync } = useSignMessage()\n\nconst { isRegistered } = useW3iAccount('eip155:1:0x9A...')\n\nconst { prepareRegistration } = usePrepareRegistration()\nconst { register, isLoading: isRegistering } = useRegister()\n\nconst handleRegistration = async () => {\n  try {\n    const { message, registerParams } = await prepareRegistration()\n    const signature = await signMessageAsync({ message: message })\n    await register({ registerParams, signature })\n  } catch (registerIdentityError: any) {\n    console.error(registerIdentityError)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ReownAppKitModal with SIWE Configuration in Flutter\nDESCRIPTION: Example showing how to initialize the ReownAppKitModal component with the SIWEConfig object, which enables Sign In With Ethereum authentication in your application.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/siwe.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfinal _appKitModal = ReownAppKitModal(\n  context: context,\n  projectId: '{YOUR_PROJECT_ID}',\n  metadata: const PairingMetadata(\n    name: 'Example App',\n    description: 'Example app description',\n    url: 'https://example.com/',\n    icons: ['https://example.com/logo.png'],\n    redirect: Redirect(\n      native: 'exampleapp://',\n      universal: 'https://reown.com/exampleapp',\n    ),\n  ),\n  siweConfig: SIWEConfig(...),\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Address from a Static Wallet in JavaScript\nDESCRIPTION: Demonstrates using getAccountAddresses with a static wallet that reuses the same address for payments and change. Returns only the first external address with its derivation path.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/dogecoin-rpc.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"getAccountAddresses\",\n    \"params\": {\n        \"account\": \"DTyt9wHTgizR8CwK8HAsWDaoMMxcaRuLWJ\"\n    }\n}\n\n// Result\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"result\": [\n        {\n            \"address\": \"DTyt9wHTgizR8CwK8HAsWDaoMMxcaRuLWJ\",\n            \"path\": \"m/44'/3'/0'/0/0\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ProGuard Rules for WalletKit in Android\nDESCRIPTION: Updates ProGuard configuration rules to keep the new WalletKit classes from being obfuscated. Changes package paths from com.walletconnect to com.reown for Wallet model and client classes.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/upgrade/from-web3wallet-android.mdx#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n/* highlight-delete-start */\n- -keep class com.walletconnect.web3.wallet.client.Wallet$Model { *; }\n- -keep class com.walletconnect.web3.wallet.client.Wallet { *; }\n/* highlight-delete-end */\n/* highlight-add-start */\n+ -keep class com.reown.walletkit.client.Wallet$Model { *; }\n+ -keep class com.reown.walletkit.client.Wallet { *; }\n/* highlight-add-end */\n```\n\n----------------------------------------\n\nTITLE: Configuring SIWEConfig Object for AppKit Integration in Flutter\nDESCRIPTION: A complete example of how to configure the SIWEConfig object with all required methods for Sign In With Ethereum authentication, including nonce generation, message parameter creation, message formatting, verification, and session management.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/siwe.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfinal _siweConfig = SIWEConfig(\n  getNonce: () async {\n    // The getNonce method functions as a safeguard\n    // against spoofing, akin to a CSRF token.\n\n    return await yourApi.getNonce();\n  },\n  getMessageParams: () async {\n    // Parameters to create the SIWE message internally.\n    // More info in https://github.com/ChainAgnostic/CAIPs/blob/main/CAIPs/caip-222.method\n\n    return SIWEMessageArgs(\n      domain: 'yourdomain.com',\n      uri: 'https://yourdomain.com/login',\n      statement: 'Please sign with your account',\n      methods: ['personal_sign', 'eth_sendTransaction'],\n    );\n  },\n  createMessage: (SIWECreateMessageArgs args) {\n    // Method for generating an EIP-4361-compatible message.\n    // You can use our provided formatMessage() method or implement your own\n\n    return SIWEUtils.formatMessage(args);\n  },\n  verifyMessage: (SIWEVerifyMessageArgs args) async {\n    // This function ensures the message is valid,\n    // has not been tampered with, and has been appropriately\n    // signed by the wallet address.\n\n    try {\n      final isValidMessage = await yourApi.verifyMessage(args.toJson());\n      return isValidMessage;\n    } catch (error) {\n      // error validating message\n      return false;\n    }\n  },\n  getSession: () async {\n    // Called after verifyMessage() succeeds\n    // The backend session should store the associated address and chainId\n    // and return it via the `getSession` method.\n\n    try {\n      final session = await yourApi.getSession();\n      return SIWESession(address: session.address, chains: [session.chainId]);\n    } catch (error) {\n      // error getting session\n      rethrow;\n    }\n  },\n  onSignIn: (SIWESession session) {\n    // Called after getSession() succeeds\n  },\n  signOut: () async {\n    // Called when wallet disconnects if `signOutOnDisconnect == true` and/or when\n    // `signOutOnAccountChange == true` and/or\n    // `signOutOnNetworkChange == true`\n    try {\n      final success = await yourApi.signOut();\n      return success;\n    } catch (error) {\n      // error signing out\n      return false;\n    }\n  },\n  onSignOut: () {\n    // Called after signOut() succeeds\n  },\n  // enabled: true, // OPTIONAL. Enables One-Click Auth + SIWE logic, if `false`, regular session proposal will be used. (default `true`)\n  // signOutOnDisconnect: true, // OPTIONAL (default `true`)\n  // signOutOnAccountChange: true, // OPTIONAL (default `true`)\n  // signOutOnNetworkChange: true, // OPTIONAL (default `true`)\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Notify Client with WalletConnect CoreClient in Kotlin\nDESCRIPTION: Initializes the Notify client in an Android Kotlin application by creating a CoreClient instance with project metadata and passing it to Notify.initialize. Includes an onError callback to handle initialization failures. Requires WalletConnect CoreClient and Notify SDKs. Inputs include projectId, application context, and app metadata; output is Notify client initialization or error event.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/notifications/notify/usage.mdx#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval projectId = PROJECT_ID\nval appMetaData = Core.Model.AppMetaData(\n    name = /* The name of your project as a String */,\n    description = /* A description of your project as a String */,\n    url = /* A url for your project as a String */,\n    icons = /* A list of URLs to icons related to your project as Strings */,\n    redirect = /* A redirect URI used by Dapps to deeplink back to your wallet. This is a String value  */\n)\n\nCoreClient.initialize(projectId = projectId, connectionType = ConnectionType.AUTOMATIC, application = this, metaData = appMetaData)\n\nNotify.initialize(init = Notify.Params.Init(core = CoreClient) { error: Notify.Model.Error ->\n    // Error will be thrown if there's an issue during initialization\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Notification Data Structure in TypeScript\nDESCRIPTION: This snippet defines the structure of a notification object, detailing its properties and methods, such as id, sentAt (timestamp), body, read status, type, related URL, and a method to mark as read (Promise<void>). Dependencies include the TypeScript type system. This structure clarifies required and optional fields for handling notification data programmatically and supports features introduced in version 1.3.0, such as isRead and read().\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/managing-notifications/javascript.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  title: string\n  sentAt: number\n  body: string\n  id: string\n  isRead: boolean // since 1.3.0\n  url: string | null\n  type: string\n  read: () => Promise<void> // since 1.3.0\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering SponsoredTransactions Component in React (JavaScript/MDX)\nDESCRIPTION: This snippet imports the SponsoredTransactions React component from a shared MDX snippet file and renders it inline. The import path uses an alias pointing to the shared snippets directory, enabling code reuse across the documentation project. The component is expected to capture and display information related to sponsored transactions within the UI. There are no parameters shown in this snippet and no outputs other than the visual rendering of the component itself. Dependencies include a React environment that supports MDX imports and the existence of the referenced snippet file.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/transactions/sponsored-transactions.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport SponsoredTransactions from \"/snippets/appkit/shared/sponsored-transactions.mdx\";\n\n<SponsoredTransactions />\n```\n\n----------------------------------------\n\nTITLE: Utility Functions for SIWE Implementation in Flutter\nDESCRIPTION: Examples of utility functions provided by SIWEUtils for generating nonces, formatting messages, verifying signatures, and extracting information from SIWE messages.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/siwe.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Generate a timestamp-based nonce\nSIWEUtils.generateNonce();\n\n// Create EIP-4361 message based on input arguments\nSIWEUtils.formatMessage(args);\n\n// Verify a SIWE signature (calls your backend verification)\nawait SIWEUtils.verifySignature(\n  address,\n  message,\n  signature,\n  chainId,\n  projectId\n);\n\n// Get the chain ID from a SIWE message\nSIWEUtils.getChainIdFromMessage(message);\n\n// Get the address from a SIWE message\nSIWEUtils.getAddressFromMessage(message);\n```\n\n----------------------------------------\n\nTITLE: Preparing Blockchain Calls on Server (Conceptual Node.js)\nDESCRIPTION: Conceptual server-side JavaScript/Node.js code illustrating the call to `makePrepareCalls`. This function interacts with the Blockchain API via RPC (e.g., WalletConnect RPC) to prepare the transaction details (like nonce, gas) for signing by the server.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/smart-sessions.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n // make the prepare calls in our example\n // arg -> is the array of arguments to call the contract\nconst response = await makePrepareCalls(userAddress, chainId, contractAddress, ABI, functionName, context, arg);\n```\n\n----------------------------------------\n\nTITLE: Adding jitpack.io Maven Repository in Root Gradle (Kotlin DSL)\nDESCRIPTION: This snippet demonstrates how to add the jitpack.io Maven repository alongside mavenCentral() in the root project's Gradle build script using Kotlin DSL. Including jitpack.io is necessary to resolve the WalletConnect Notify dependencies hosted there. The snippet modifies the allprojects block to add the new repository URL. It requires a Gradle environment configured for Kotlin DSL and internet connectivity to access remote repositories.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/notifications/notify/installation.mdx#_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nallprojects {\n repositories {\n    mavenCentral()\n    maven { url \"https://jitpack.io\" }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Ethereum Transaction Receipt Request Object in C#\nDESCRIPTION: Defines the C# class EthGetTransactionReceipt representing the request type for the eth_getTransactionReceipt RPC method. This class inherits from List<string> and includes constructors needed for proper JSON deserialization. It forms the data structure used to receive transaction hash parameters in wallet session requests.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/usage.mdx#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n[RpcMethod(\"eth_getTransactionReceipt\"), RpcRequestOptions(Clock.ONE_MINUTE, 99994)]\npublic class EthGetTransactionReceipt : List<string>\n{\n    public EthGetTransactionReceipt(params string[] hashes) : base(hashes)\n    {\n    }\n\n    // needed for proper json deserialization\n    public EthGetTransactionReceipt()\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscription Object Structure Definition in TypeScript\nDESCRIPTION: This snippet defines the structure of the subscription object returned by individual and multiple subscription queries. The object contains properties for topic, account, relay configuration, metadata, scope, expiry time, symmetric key, and unread count. This helps consumers understand the shape of returned data for better integration.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/managing-subscription/javascript.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  topic: string\n  account: string\n  relay: relayertypes.protocoloptions\n  metadata: Metadata\n  scope: ScopeMap\n  expiry: number\n  symkey: string\n  unreadCount: number\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VerifyContext Structure in Swift\nDESCRIPTION: Defines the structure for dapp verification context, which provides information about the origin and validation status of a dapp making a session proposal or request.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/usage.mdx#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\npublic struct VerifyContext: Equatable, Hashable {\n   public enum ValidationStatus {\n       case unknown\n       case valid\n       case invalid\n   }\n\n   public let origin: String?\n   public let validation: ValidationStatus\n   public let verifyUrl: String\n}\n```\n\n----------------------------------------\n\nTITLE: Presenting AppKit UI Modal from Specific View Controller in Swift\nDESCRIPTION: Calls the `present(from:)` method to display the AppKit UI modal, explicitly providing the `viewController` from which the modal should be presented. This method is useful when more control over the presentation context is needed, typically in UIKit applications.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/usage.mdx#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nAppKit.present(from: viewController)\n```\n\n----------------------------------------\n\nTITLE: Installation commands for '@reown/appkit-wallet-button' using various package managers\nDESCRIPTION: Provides shell commands to install the '@reown/appkit-wallet-button' package across different package managers like npm, yarn, bun, and pnpm, enabling developers to add the wallet button library to their project dependencies.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/components.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit-wallet-button\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit-wallet-button\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun a @reown/appkit-wallet-button\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit-wallet-button\n```\n\n----------------------------------------\n\nTITLE: Retrieving Connected Wallet Information with useWalletInfo (React)\nDESCRIPTION: Provides detailed information about the currently connected wallet. This hook is useful for displaying wallet-specific details, branding, or enabling wallet-specific features in the UI. Required dependency: `@reown/appkit/react`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/hooks.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWalletInfo } from '@reown/appkit/react'\n\nexport default Component(){\n  const { walletInfo } = useWalletInfo()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AppKit with CloudAuthSIWX in TypeScript\nDESCRIPTION: Shows how to initialize the AppKit instance in a TypeScript project with CloudAuthSIWX, enabling SIWX functionalities. The snippet illustrates importing necessary modules, creating the appkit with configuration parameters, and integrating the SIWX instance.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/siwx/siwx-cloud-auth.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createAppKit } from '@reown/appkit'\n// Add the following code line\nimport { CloudAuthSIWX } from '@reown/appkit-siwx'\n\nconst appkit = createAppKit({\n  projectId,\n  networks,\n  metadata,\n  // Add the following code line\n  siwx: new CloudAuthSIWX()\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Session Request Expiry Events in TypeScript\nDESCRIPTION: Code for listening to session request expiry events. This allows applications to update their UI when a request expires (time defined by the dapp between 5 minutes and 7 days), ensuring that expired request modals are removed from the UI.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/best-practices.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nwalletKit.on(\"session_request_expire\", (event) => {\n    // request expired and any modal displaying it should be removed\n    const { id } = event;\n});\n```\n\n----------------------------------------\n\nTITLE: Define Notify Request Body Type in TypeScript\nDESCRIPTION: This TypeScript definition specifies the structure expected by the `/notify` API endpoint. It includes fields for an optional idempotency ID, the notification content (type, title, body, optional URL), and a list of target account IDs.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/notifications/backend-integration.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype RequestBody = {\n  notification_id?: string | null;\n  notification: {\n    type: string;\n    title: string;\n    body: string;\n    url?: string | null;\n  };\n  accounts: string[];\n};\n```\n\n----------------------------------------\n\nTITLE: Disconnecting a Wallet Session with Optional Reason in C#\nDESCRIPTION: Illustrates how to disconnect a wallet session given its session topic using walletClient.Disconnect. Optionally, a reason for disconnection can be supplied using an Error object with a predefined error type, such as USER_DISCONNECTED. Requires knowledge of the session's topic string to identify the session.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/usage.mdx#_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nvar sessionTopic = sessionData.Topic;\nawait walletClient.Disconnect(sessionTopic);\n\n// or\n\nawait walletClient.Disconnect(sessionTopic, Error.FromErrorType(ErrorType.USER_DISCONNECTED));\n```\n\n----------------------------------------\n\nTITLE: Declaring Installed Wallet Query Permissions in AndroidManifest XML\nDESCRIPTION: Specifies AndroidManifest.xml queries to declare the packages your app intends to query, enabling the visibility of installed wallets using the INSTALLED icon in wallet lists. Required for Android 11+ to ensure apps can detect installed packages matching wallet apps. This snippet provides the necessary XML manifest structure including the queries element and a placeholder for package names. Proper declaration is mandatory to leverage installed wallet features.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/options.mdx#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <queries>\n        <package android:name=\"...\"/>\n    </queries>\n\n    <application>\n        ...\n    </application>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Previous RainbowKit Provider Usage in Next.js App Component (Deprecated)\nDESCRIPTION: Shows the prior implementation of the Next.js main application component where RainbowKitProvider and WagmiProvider wrap the app component tree alongside QueryClientProvider from react-query. This snippet is intended for reference to be removed or replaced by an AppKit-based provider setup during migration.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-rainbowkit-next.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyApp({ Component, pageProps }: AppProps) {\n  return (\n    <WagmiProvider config={config}>\n      <QueryClientProvider client={client}>\n        \n        <RainbowKitProvider>\n          \n          <Component {...pageProps} />\n          \n        </RainbowKitProvider>\n        \n      </QueryClientProvider>\n    </WagmiProvider>\n  )\n}\n\nexport default MyApp\n```\n\n----------------------------------------\n\nTITLE: Retrieving Web3Inbox Notifications - React - TypeScript\nDESCRIPTION: This snippet shows the new way to retrieve user notifications, replacing the old `useMessages` hook with `useNotifications`. A key addition is the support for paging, including 'infinite scroll' functionality which retains older pages. The hook accepts parameters for notifications per page and whether to use infinite scroll, and provides a `nextPage` function to fetch subsequent pages.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/migration/react.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n- import { useMessages } from \"@web3inbox/widget-react\"\n+ import { useNotifications } from \"@web3inbox/react\"\n\n- const { messages } = useMessages()\n+ const notificationsPerPage = 5\n+ const isInfiniteScroll = true\n+\n+ const { data: notifications, nextPage } = useNotifications(\n+   notificationsPerPage,\n+   isInfiniteScroll\n+ )\n+\n+ const getMoreNotifications = () => {\n+   nextPage()\n+ }\n```\n\n----------------------------------------\n\nTITLE: Initializing Reown AppKit and CoreClient (Kotlin)\nDESCRIPTION: Initializes the CoreClient SDK and the Reown AppKit singleton. CoreClient requires project ID, connection type, application context, and application metadata. AppKit initialization depends on the initialized CoreClient and accepts callbacks for success and error handling. This setup is crucial before using other AppKit features.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/usage.mdx#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval connectionType = ConnectionType.AUTOMATIC or ConnectionType.MANUAL\nval projectId = \"\" // Get Project ID at https://cloud.reown.com/\nval appMetaData = Core.Model.AppMetaData(\n    name = \"Kotlin.AppKit\",\n    description = \"Kotlin AppKit Implementation\",\n    url = \"kotlin.reown.com\",\n    icons = listOf(\"https://gblobscdn.gitbook.com/spaces%2F-LJJeCjcLrr53DcT1Ml7%2Favatar.png?alt=media\"),\n    redirect = \"kotlin-modal-wc://request\"\n)\n\nCoreClient.initialize(projectId = projectId, connectionType = connectionType, application = this, metaData = appMetaData)\n\nAppKit.initialize(\n    init = Modal.Params.Init(CoreClient),\n    onSuccess = {\n        // Callback will be called if initialization is successful\n     },\n    onError = { error ->\n        // Error will be thrown if there's an issue during initialization\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Approving session authentication in TypeScript with signature signing\nDESCRIPTION: This snippet depicts two approaches for approving authentication requests. The first involves signing a formatted message with a private key to produce a signature, constructing an authentication object, and approving the session. The second approach signs separate messages per chain/account pair, creating multiple authentication objects for approval. Dependencies include cryptoWallet's signMessage method and walletKit's approveSessionAuthenticate function.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/one-click-auth.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Approach 1\n// Sign the authentication message(s) to create a verifiable authentication object(s)\nconst signature = await cryptoWallet.signMessage(message, privateKey);\n// Build the authentication object(s)\nconst auth = buildAuthObject(\n  authPayload,\n  {\n    t: \"eip191\",\n    s: signature,\n  },\n  iss\n);\n// Approve the session\nawait walletKit.approveSessionAuthenticate({\n  id: payload.id,\n  auths: [auth],\n});\n\n// Approach 2\n// Sign multiple messages for each chain/account pair\nconst auths = [];\nauthPayload.chains.forEach(async (chain) => {\n  const message = walletKit.formatAuthMessage({\n    request: authPayload,\n    iss: `${chain}:${cryptoWallet.address}`,\n  });\n  const signature = await cryptoWallet.signMessage(message);\n  const auth = buildAuthObject(\n    authPayload,\n    {\n      t: \"eip191\",\n      s: signature,\n    },\n    `${chain}:${cryptoWallet.address}`\n  );\n  auths.push(auth);\n});\n// Approve multiple authentication objects\nawait walletKit.approveSessionAuthenticate({\n  id: payload.id,\n  auths,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Desktop or Web Wallets Configuration in TypeScript\nDESCRIPTION: This TypeScript snippet defines an array named `desktopWallets` where each element represents a wallet configuration object. Each wallet contains an `id` and `name` string, along with a `links` object that includes a `native` string for the deeplinking URL (e.g., \"ledgerlive://\") and a `universal` string for web-based fallback or redirection URLs. Required dependencies include TypeScript for type annotations. This configuration enables specifying multiple wallets with their respective deep link and universal links, which can be `undefined` by default if not provided.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/web3modal/v2/_partials/options/desktopWallets.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndesktopWallets: [\n  {\n    id: string,\n    name: string,\n    links: {\n      native: string\n      universal: string,\n    },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Checking Transaction Status on Server (Conceptual Node.js)\nDESCRIPTION: Conceptual server-side JavaScript/Node.js code showing how to periodically call `getCallsStatus` using the user operation identifier (`userOpIdentifier`) or hash (`userOpHash`) received from `sendPreparedCalls`. This checks if the transaction status has reached 'CONFIRMED'.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/smart-sessions.mdx#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst userOpIdentifier = sendPreparedCallsResponse[0];\n\n// function from our example to call wallet_getCallsStatus\nconst response = await getCallsStatus(userOpHash);\nif (response.status === \"CONFIRMED\") { // check when the tx is confirmed\n    return response;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Web3Button with Jetpack Compose in Kotlin\nDESCRIPTION: Demonstrates how to add a Web3Button component in a Jetpack Compose screen. It imports required button and state management packages from com.reown.appkit.ui.components.button. The snippet requires a NavController passed to YourAppScreen and creation of appKitState using rememberAppKitState. Parameters such as AccountButtonType and ConnectButtonSize configure the button appearance and behavior. This button facilitates Web3 account connection and interaction within Compose UI. Inputs are the button state and configuration enums; output is a composable Web3Button in the UI.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/components.mdx#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.reown.appkit.ui.components.button.Web3Button\nimport com.reown.appkit.ui.components.button.ConnectButtonSize\nimport com.reown.appkit.ui.components.button.AccountButtonType\nimport com.reown.appkit.ui.components.button.rememberAppKitState\n\nYourAppScreen(navController: NavController) {\n    val appKitState = rememberAppKitState(navController = navController)\n    Web3Button(\n        state = appKitState,\n        accountButtonType = AccountButtonType.NORMAL || AccountButtonType.MIXED,\n        connectButtonSize = ConnectButtonSize.NORMAL || ConnectButtonSize.SMALL\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SIWX Custom Component in MDX\nDESCRIPTION: This snippet shows how to import the SIWX Custom React component into an MDX file for documentation or usage purposes. It requires the component at the specified path and prepares it for rendering. The main goal is to facilitate embedding a custom component inside MDX documentation pages.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/authentication/siwx/siwx-custom.mdx#_snippet_0\n\nLANGUAGE: MDX\nCODE:\n```\nimport SiwxCustom from \"/snippets/appkit/shared/siwx/siwx-custom.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Sending a Wallet Request Using AppKit in Kotlin\nDESCRIPTION: This snippet shows how to create and send a custom request to the wallet using AppKit. A `Modal.Params.Request` object is constructed with the specified RPC method and its parameters. Then, the `AppKit.request()` function is called, providing the request object along with `onSuccess` and `onError` callbacks to handle the response or any potential errors during the request. This requires knowledge of valid method names and expected parameter structure for the wallet.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/actions.mdx#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval requestParams = Modal.Params.Request(\n    method = /* Selected method */,\n    params = /* Method params  */, \n)\n\nAppKit.request(\n    request = requestParams,\n    onSuccess = {\n    /* callback that letting you know that you have successful request */\n    },\n    onError = { error ->\n    /* callback for error */\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Basic ABI Reference Configuration in JSON Policy\nDESCRIPTION: Demonstrates how to store a contract ABI in policyStaticProps and reference it in metadata for callData method validation. This pattern allows the policy to interpret callData based on the contract's interface.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/cloud/paymaster.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"policyStaticProps\": {\n    \"contract1\": {\n      \"abi\": [...Contract ABI goes here]\n    }\n  }\n  \"params\": {\n    \"key\": \"callData\",\n    \"op\": \"callDataMethodEquals\",\n    \"value\": \"methodBaz\"\n  },\n  {\n    \"metadata\": {\n      \"contractAbi\": \"<contract1.abi>\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Wallets - TypeScript\nDESCRIPTION: Shows how to add custom wallet entries to the modal's main view using the `customWallets` option. This is an array of objects, each defining properties like ID, name, and optional links (homepage, mobile, desktop, etc.) for a custom wallet.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/options.mdx#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\ncreateAppKit({\n  //...\n  customWallets: [\n    {\n      id: \"myCustomWallet\",\n      name: \"My Custom Wallet\",\n      homepage: \"www.mycustomwallet.com\", // Optional\n      mobile_link: \"mobile_link\", // Optional - Deeplink or universal\n      link_mode: \"universal_link\", // Optional - Universal link if the wallet supports link-mode\n      desktop_link: \"desktop_link\", // Optional - Deeplink\n      webapp_link: \"webapp_link\", // Optional\n      app_store: \"app_store\", // Optional\n      play_store: \"play_store\", // Optional\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing SignClient.WalletDelegate (Kotlin/Android)\nDESCRIPTION: Sets up the `SignClient.WalletDelegate` to handle asynchronous events from the SignClient, such as incoming session proposals, authentication requests, session requests, session deletions, and state changes. An implementation of this delegate must be set using `SignClient.setWalletDelegate`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_26\n\nLANGUAGE: Kotlin\nCODE:\n```\nval walletDelegate = object : SignClient.WalletDelegate {\n    override fun onSessionProposal(sessionProposal: Sign.Model.SessionProposal, verifyContext: Sign.Model.VerifyContext) {\n        // Triggered when wallet receives the session proposal sent by a Dapp\n    }\n\n    val onSessionAuthenticate: ((Sign.Model.SessionAuthenticate, Sign.Model.VerifyContext) -> Unit)? get() = null\n    // Triggered when wallet receives the session authenticate sent by a Dapp\n\n    override fun onSessionRequest(sessionRequest: Sign.Model.SessionRequest, verifyContext: Sign.Model.VerifyContext) {\n        // Triggered when a Dapp sends SessionRequest to sign a transaction or a message\n    }\n\n    override fun onSessionDelete(deletedSession: Sign.Model.DeletedSession) {\n        // Triggered when the session is deleted by the peer\n    }\n\n    override fun onSessionSettleResponse(settleSessionResponse: Sign.Model.SettledSessionResponse) {\n        // Triggered when wallet receives the session settlement response from Dapp\n    }\n\n    override fun onSessionUpdateResponse(sessionUpdateResponse: Sign.Model.SessionUpdateResponse) {\n        // Triggered when wallet receives the session update response from Dapp\n    }\n\n    override fun onConnectionStateChange(state: Sign.Model.ConnectionState) {\n        //Triggered whenever the connection state is changed\n    }\n\n    override fun onError(error: Sign.Model.Error) {\n        // Triggered whenever there is an issue inside the SDK\n    }\n}\nSignClient.setWalletDelegate(walletDelegate)\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with Ethers v5 using npm\nDESCRIPTION: Command for custom installation of Reown AppKit with Ethers v5 adapter using npm package manager. Installs required dependencies including ethers v5.7.2.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/installation.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit @reown/appkit-adapter-ethers5 ethers@5.7.2\n```\n\n----------------------------------------\n\nTITLE: Approving Authentication Requests via Signatures (TypeScript)\nDESCRIPTION: This code demonstrates two approaches to approve authentication requests: one signing the formatted message with a private key and constructing an auth object, and another signing multiple chain-specific messages for detailed authorization. The approval is completed via walletKit's 'approveSessionAuthenticate' method. Proper handling of cryptographic signing is critical here.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/one-click-auth-siws.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Approach 1\n// Sign the authentication message(s)\nconst signature = await cryptoWallet.signMessage(message, privateKey);\n// Build authentication object\nconst auth = buildAuthObject(\n  authPayload,\n  {\n    t: \"caip122\",\n    s: signature,\n  },\n  iss\n);\n// Approve session\nawait walletKit.approveSessionAuthenticate({\n  id: payload.id,\n  auths: [auth],\n});\n\n// Approach 2\n// Sign messages for each chain/address pair\nconst auths = [];\nauthPayload.chains.forEach(async (chain) => {\n  const message = walletKit.formatAuthMessage({\n    request: authPayload,\n    iss: `${chain}:${cryptoWallet.address}`,\n  });\n  const signature = await cryptoWallet.signMessage(message);\n  const auth = buildAuthObject(\n    authPayload,\n    {\n      t: \"caip122\",\n      s: signature,\n    },\n    `${chain}:${cryptoWallet.address}`\n  );\n  auths.push(auth);\n});\n// Approve with multiple auths\nawait walletKit.approveSessionAuthenticate({\n  id: payload.id,\n  auths,\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing Singleton Instance and Publisher References from Web3Modal to AppKit - Swift\nDESCRIPTION: This snippet highlights changing all references of the Web3Modal singleton (Web3Modal.instance) to AppKit.instance when subscribing to authentication publishers. It is essential for updating any callback-based or reactive code using Web3Modal's published events. The main dependency is that your project must use the latest version of AppKit, which exposes a similar publisher API. Inputs are lines referencing Web3Modal.instance; outputs are their AppKit equivalents. Code may be limited to authentication use cases if the publisher's name hasn't changed.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-ios.mdx#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\n- Web3Modal.instance.authResponsePublisher.sink { (id, result) in\n-     // Your code here\n- }\n\n+ AppKit.instance.authResponsePublisher.sink { (id, result) in\n+     // Your code here\n+ }\n```\n\n----------------------------------------\n\nTITLE: Updating Email Wallet Provider Import in Ethers - TypeScript\nDESCRIPTION: This snippet updates the import for email-related authentication from EmailProvider in @web3modal/email-ethers-react-native to AuthProvider from @reown/appkit-auth-ethers-react-native. It is required for projects supporting authentication via email as part of the new AppKit's wallet authentication mechanisms.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-react-native.mdx#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following code lines\nimport { EmailProvider } from \"@web3modal/email-ethers-react-native\";\n\n// Add the following code lines\nimport { AuthProvider } from \"@reown/appkit-auth-ethers-react-native\";\n```\n\n----------------------------------------\n\nTITLE: Accessing Modal State with useAppKitState (Wagmi) TypeScript\nDESCRIPTION: This snippet demonstrates using the useAppKitState hook from `@reown/appkit-wagmi-react-native` to access the current reactive state of the modal. It shows destructuring the `open` (boolean indicating modal visibility) and `selectedNetworkId` (number representing the current chain ID) properties from the hook's return value. These values update automatically as the modal state changes.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/hooks.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useAppKitState } from '@reown/appkit-wagmi-react-native'\n\nconst { open, selectedNetworkId } = useAppKitState()\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Call Status Using Wagmi's useCallsStatus Hook\nDESCRIPTION: This example depicts how to track the status of sendCalls transactions using Wagmi's useCallsStatus hook. Since sendCalls does not return a transaction hash, monitoring call identifiers is essential for confirming transaction success or failure within the Dapp.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/switching-to-send-calls.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { status } = useCallsStatus(callIdentifier);\n// Use status to determine transaction outcome\n```\n\n----------------------------------------\n\nTITLE: Subscribing to WalletConnect Session Events and Registering Handlers - Flutter (Dart)\nDESCRIPTION: The example demonstrates how a Flutter dApp can subscribe to wallet events and register custom event handlers using onSessionEvent and registerEventHandler. Developers can track chain changes or other protocol-specific events, specifically for chains such as Kadena. Requires a running SignClient and should be integrated post-session establishment. Handlers will be triggered on relevant incoming wallet events.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_33\n\nLANGUAGE: dart\nCODE:\n```\nsignClient.onSessionEvent.subscribe((SessionEvent? session) {\n    // Do something with the event\n});\n\nsignClient.registerEventHandler(\n    namespace: 'kadena',\n    event: 'kadena_transaction_updated',\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Session Proposal Expiry Event in WalletKit\nDESCRIPTION: Explains how to listen for the 'proposal_expire' event emitted by WalletKit. This event signifies that a session proposal has expired (typically after 5 minutes) and should be removed from the user interface.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/best-practices.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nwalletKit.on(\"proposal_expire\", (event) => {\n    // proposal expired and any modal displaying it should be removed\n    const { id } = event;\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Active Wallet Sessions\nDESCRIPTION: This code demonstrates how to retrieve and list all active sessions currently maintained by WalletKit, allowing applications to manage and display session information such as connected dapps and chains.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/usage.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst activeSessions = walletKit.getActiveSessions();\n```\n\n----------------------------------------\n\nTITLE: Pairing Wallet with Dapp (JavaScript/Web)\nDESCRIPTION: Initiates a pairing connection between a web-based wallet and a dapp using the WalletKit client. Requires a pairing URI and includes basic error handling.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst uri = 'xxx'; // pairing uri\ntry {\n    await walletKit.pair({ uri });\n} catch (error) {\n    // some error happens while pairing - check Expected errors section\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies from Web3Modal to Reown AppKit in build.gradle\nDESCRIPTION: This snippet outlines the changes to the Gradle dependencies required to switch from the deprecated Web3Modal library to the new Reown AppKit, including replacing implementation lines for core components and updating repository BOM references.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-android.mdx#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Remove the following code lines\n- dependencies {\n-    implementation(platform(\"com.walletconnect:android-bom:{BOM version}\"))\n-    implementation(\"com.walletconnect:android-core\")\n-    implementation(\"com.walletconnect:web3modal\")\n- }\n\n+ dependencies {\n+    implementation(platform(\"com.reown:android-bom:{BOM version}\"))\n+    implementation(\"com.reown:android-core\")\n+    implementation(\"com.reown:appkit\")\n+ }\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Web3Modal v5 Dependency (Bash/Multiple Package Managers)\nDESCRIPTION: These commands demonstrate how to remove the outdated Web3Modal v5 Ethers package (`@web3modal/ethers5`) using different Node.js package managers as the initial step in the migration process.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers5-web.mdx#_snippet_0\n\nLANGUAGE: bash npm\nCODE:\n```\nnpm uninstall @web3modal/ethers5\n```\n\nLANGUAGE: bash Yarn\nCODE:\n```\nyarn remove @web3modal/ethers5\n```\n\nLANGUAGE: bash Bun\nCODE:\n```\nbun remove @web3modal/ethers5\n```\n\nLANGUAGE: bash pnpm\nCODE:\n```\npnpm remove @web3modal/ethers5\n```\n\n----------------------------------------\n\nTITLE: Updating Subscription Notification Settings in JavaScript\nDESCRIPTION: This code updates the types of notifications a user wants to receive by modifying the scope of an existing subscription via the `update()` method. It allows filtering notifications based on user preferences.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/notify/usage.mdx#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait notifyClient.update({\n  topic,\n  scope: [\"alerts\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Initiating Swap Operation in Wallet Modal in TypeScript\nDESCRIPTION: Demonstrates how to open the 'Swap' view with specific arguments like amount and token exchange details, facilitating token swaps within the wallet modal. Required parameters include amount, fromToken, and toToken.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/core/open.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nopen({\n  view: 'Swap',\n  arguments: {\n    amount: '321.123',\n    fromToken: 'USDC',\n    toToken: 'ETH'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Session Request Expiry Callback - WalletConnect Kotlin (Android)\nDESCRIPTION: This Kotlin snippet illustrates implementing the 'onRequestExpired' callback within a 'WalletKit.WalletDelegate'. This method is called when a session request expires, providing the expired request model. Wallet applications should use this to update their UI and inform the user.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\nval walletDelegate = object : WalletKit.WalletDelegate {\n  override fun onRequestExpired(request: Wallet.Model.ExpiredRequest) {\n      // Here this event is triggered when a session request expires - update your UI\n  }\n  // ...other callbacks\n}\nWalletKit.setWalletDelegate(walletDelegate)\n```\n\n----------------------------------------\n\nTITLE: Opening On-Ramp Modal using AppKit Hook - JavaScript\nDESCRIPTION: This snippet demonstrates how to programmatically trigger the On-Ramp flow. It uses the `useAppKit` hook to get the `open` function and calls it with a configuration object, specifying 'OnRampProviders' as the initial view to display within the modal. This requires the AppKit library to be installed and initialized.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/transactions/onramp.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { open } = useAppKit()\n\nopen({ view: 'OnRampProviders' })\n```\n\n----------------------------------------\n\nTITLE: Adding custom wallets to createAppKit modal in TypeScript\nDESCRIPTION: Shows how to add custom wallet configurations as objects within the customWallets array, each defining properties such as id, name, homepage URL, icon image URL, and platform-specific links (mobile, desktop, webapp, app store). This enables integration of additional wallets beyond defaults.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateAppKit({\n  //...\n  customWallets: [\n    {\n      id: \"myCustomWallet\",\n      name: \"My Custom Wallet\",\n      homepage: \"www.mycustomwallet.com\", // Optional\n      image_url: \"my_custom_wallet_image\", // Optional\n      mobile_link: \"mobile_link\", // Optional - Deeplink or universal\n      desktop_link: \"desktop_link\", // Optional - Deeplink\n      webapp_link: \"webapp_link\", // Optional\n      app_store: \"app_store\", // Optional\n      play_store: \"play_store\", // Optional\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Reown AppKit and Tenderly Virtual TestNet (JSX)\nDESCRIPTION: This snippet provides the format for setting environment variables in a `.env` file at the project's root. It assigns the Reown Cloud Project ID and the Tenderly Virtual TestNet RPC URL to variables exposed to the Next.js app, enabling secure references in the application code. It highlights the importance of handling public environment variables carefully.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/tenderly-virtual-testnets.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nNEXT_PUBLIC_PROJECT_ID = <YOUR_PROJECT_ID_HERE>\\nTENDERLY_VIRTUAL_TESTNET_RPC = <YOUR_TENDERLY_VIRTUAL_TESTNET_RPC_URL>\n```\n\n----------------------------------------\n\nTITLE: Defining defaultNetwork option manually for Ethers in TypeScript\nDESCRIPTION: Example defining a defaultNetwork object manually for an Ethers (Ethereum) network with essential chain details such as chainId, name, currency, explorer URL, and RPC URL. This demonstrates creating a network object without importing it, for compatibility with createAppKit's defaultNetwork parameter.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst mainnet = {\n  chainId: 1,\n  name: \"Ethereum\",\n  currency: \"ETH\",\n  explorerUrl: \"https://etherscan.io\",\n  rpcUrl: \"https://cloudflare-eth.com\",\n};\n\ncreateAppKit({\n  //...\n  defaultNetwork: mainnet,\n});\n```\n\n----------------------------------------\n\nTITLE: Getting List of Active Sessions - Android Kotlin\nDESCRIPTION: Provides the Kotlin code to retrieve a list of all currently active WalletConnect sessions. The `getListOfActiveSessions()` function returns a list of `Modal.Model.Session` objects.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_37\n\nLANGUAGE: kotlin\nCODE:\n```\nWalletConnectModal.getListOfActiveSessions()\n```\n\n----------------------------------------\n\nTITLE: Handling Incoming Deeplinks with SwiftUI onOpenURL (Swift)\nDESCRIPTION: Attaches the `.onOpenURL` modifier to a SwiftUI view or window group to handle incoming URL deeplinks. The closure receives the URL and passes it to `AppKit.instance.handleDeeplink(_:)`, allowing AppKit to manage the deeplink flow, essential for mobile wallet interactions in a SwiftUI application.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/options.mdx#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nWindowGroup {\n  YourView()\n      .onOpenURL { url in\n          AppKit.instance.handleDeeplink(url)\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Session Requests in Swift\nDESCRIPTION: Sets up a listener for incoming requests from connected dapps, such as signing transactions or messages.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/usage.mdx#_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nWalletKit.instance.sessionRequestPublisher\n  .receive(on: DispatchQueue.main)\n  .sink { [weak self] session in\n      self?.verifyDapp(session.context)\n      self?.showSessionRequest(session.request)\n  }.store(in: &publishers)\n```\n\n----------------------------------------\n\nTITLE: Marking All Notifications as Read via Reown Notify API using JavaScript Fetch\nDESCRIPTION: JavaScript `fetch` example showing how to make a one-time POST request to the `/v1/<project-id>/mark-all-as-read` endpoint. This marks all existing notifications as read for all users. Requires Project ID and Notify API Secret for Bearer token authentication.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/backend-integration.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst PROJECT_ID = \"<PROJECT_ID>\";\nconst NOTIFY_API_SECRET = \"<NOTIFY_API_SECRET>\";\nconst response = await fetch(\n  `https://notify.walletconnect.com/v1/${PROJECT_ID}/mark-all-as-read`,\n  {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${NOTIFY_API_SECRET}`,\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Project ID for Reown Integration in TypeScript\nDESCRIPTION: This snippet declares a variable 'projectId' of type string, representing the unique identifier for the Reown project. It is used for enabling functionalities like wallet and chain logos, WalletConnect RPC, and multi-wallet support within AppKit. The value should be obtained from the Reown cloud platform and is initially undefined, awaiting assignment.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/web3modal/v2/_partials/options/projectId.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nprojectId: string\n```\n\n----------------------------------------\n\nTITLE: Creating CAIP-10 Account Identifiers in Swift\nDESCRIPTION: Creates a properly formatted account identifier following the CAIP-10 specification, which combines chain identifier and account address.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/usage.mdx#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nlet account = Account(\"eip155:1:0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb\")!\n```\n\n----------------------------------------\n\nTITLE: Updating Initialization Call to WalletKit (JavaScript)\nDESCRIPTION: Illustrates how to modify the initialization code in JavaScript/TypeScript to use `WalletKit.init()` instead of the previous `Web3Wallet.init()` after switching to the `@reown/walletkit` package.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/upgrade/from-web3wallet-react-native.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/* highlight-delete-start */\nawait Web3Wallet.init()\n/* highlight-delete-end */\n/* highlight-add-start */\nawait WalletKit.init()\n/* highlight-add-end */\n```\n\n----------------------------------------\n\nTITLE: Displaying a Sign Message Button Conditionally in React JSX\nDESCRIPTION: This JSX code conditionally renders a 'Sign Message' button, visible only when the user is connected to their wallet. When clicked, the button triggers the handleSignMsg function to initiate the message signing modal. This pattern keeps wallet actions gated behind a successful connection.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/solana-send-transaction.mdx#_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nreturn (\n  isConnected && (\n    <div>\n      <button onClick={handleSignMsg}>Sign Message</button>\n    </div>\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Active Subscriptions\nDESCRIPTION: Method to retrieve all active notification subscriptions associated with a specific blockchain account.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/notifications/notify/usage.mdx#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\npublic func getActiveSubscriptions(account: Account) -> [NotifySubscription]\n```\n\n----------------------------------------\n\nTITLE: Managing Subscription Settings with JavaScript\nDESCRIPTION: This snippet imports and renders the 'Managing' component, allowing users to control their notification subscriptions. It depends on the 'managing-subscription/javascript.mdx' module and provides an interface for subscription management.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/notifications/frontend-integration/api.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Managing />\n```\n\n----------------------------------------\n\nTITLE: Retrieving Message History for a Subscription in Kotlin\nDESCRIPTION: Constructs message history parameters with a subscription topic and calls NotifyClient.getMessageHistory to fetch all messages related to that subscription, returned as a map of message records by request ID.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_36\n\nLANGUAGE: Kotlin\nCODE:\n```\nval subscriptionTopic = /*Subscription Topic*/\nval messageHistoryParams = Notify.Params.MessageHistory(subscriptionTopic)\nval mapOfMessages: Map<Long, Notify.Model.MessageRecord> = NotifyClient.getMessageHistory(messageHistoryParams)\n```\n\n----------------------------------------\n\nTITLE: Sending a message to the Everscale network with ever_sendMessage (JavaScript)\nDESCRIPTION: This code illustrates how to create and send a message to the Everscale blockchain using 'ever_sendMessage'. It includes parameters for value, bounce flag, destination address, and payload data with ABI, method, and parameters. The response contains the transaction ID. Prerequisites include setting up a JSON-RPC client and specifying message details.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/everscale-rpc.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Request\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"ever_sendMessage\",\n  \"params\": {\n        \"source_address\": \"0:695e42...b8d\",\n        \"value\": 1000000000,\n        \"bounce\": false,\n        \"destAddress\": \"0:b38d96...708\",\n        \"destPayload\": {\n            \"abi\": \"\",\n            \"method\": \"\",\n            \"params\": {}\n        },\n    }\n}\n\n// Result\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\":  {\n        \"txId\": \"743e1c0046b82a48a2cf8cbe9a2059ce6f3862cfae377c77d9f1b4efd88d7acb\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Wallet Detection Queries (XML)\nDESCRIPTION: Adds `<queries>` elements with specific wallet package names (e.g., `io.metamask`, `com.wallet.crypto.trustapp`) to the `AndroidManifest.xml` file outside the `<application>` scope. This is required on Android 11 (API level 30) and higher for the app to have visibility into specific installed packages, enabling wallet detection.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/installation.mdx#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <queries>\n        <package android:name=\"io.metamask\"/>\n        <package android:name=\"com.wallet.crypto.trustapp\"/>\n        <package android:name=\"io.gnosis.safe\"/>\n        <package android:name=\"me.rainbow\"/>\n        <!-- Add other wallet schemes names here -->\n    </queries>\n\n    <application>\n        ...\n    </application>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Generating Request and Granting Smart Session Permissions in JavaScript\nDESCRIPTION: JavaScript code showing the `generateRequest` helper function to format permission data into a `SmartSessionGrantPermissionsRequest` object. It then calls the imported `grantPermissions` function with this request, which prompts the user for wallet approval to delegate actions.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/smart-sessions.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n const generateRequest = (dataForRequest) => {\n      const request: SmartSessionGrantPermissionsRequest = {\n        expiry: dataForRequest.expiry,\n        chainId: toHex(dataForRequest.chainId),\n        address: dataForRequest.userAddress as `0x${string}`,\n        signer: {\n          type: 'keys',\n          data: {\n            keys :[{\n            type: 'secp256k1',\n            publicKey: dataForRequest.dAppECDSAPublicKey\n          }]\n          }\n        },\n        permissions: [ {\n          type: 'contract-call',\n          data: {\n            address: dataForRequest.contractAddress,\n            abi: dataForRequest.abi,\n            functions: [ {\n              functionName: dataForRequest.functionName\n            } ]\n          }\n        }],\n        policies: []\n      }\n      return request;\n    }\n\n    // Grant permissions for smart session\n    // This step requests permission from the user's wallet to allow the dApp to make contract calls on their behalf\n    // Once approved, these permissions will be used to create a smart session on the backend\n    const approvedPermissions = await grantPermissions(request);\n```\n\n----------------------------------------\n\nTITLE: Accessing Error Information with getError Method in Reown AppKit (TypeScript)\nDESCRIPTION: This simple snippet illustrates how to retrieve the latest error state from the Reown AppKit modal instance using the 'getError' method. The code assumes a previously-created modal object and outputs the error value, which can then be handled or displayed as needed. No external dependencies are required beyond the AppKit modal itself. The method returns the most recent error or undefined if no error has occurred.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/ethers/hooks.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction Components() {\n  const error = modal.getError();\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Rejecting a Session Request in JavaScript\nDESCRIPTION: Shows how to format a JSON-RPC error response to reject a session request. The error code 5000 indicates a user rejection, which is a common pattern for user-denied operations.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/usage.mdx#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = {\n  id,\n  jsonrpc: \"2.0\",\n  error: {\n    code: 5000,\n    message: \"User rejected.\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Triggering Modals Using AppKit Composables in HTML\nDESCRIPTION: This snippet illustrates how to trigger modals via the `useAppKit` composable by calling its `open` method. It provides example buttons that open modals with different views, demonstrating event handling and interaction with the composable API. It requires the composable to be properly imported and used within the framework context.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/solana/triggermodal.mdx#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<template>\n  <button @click=\"modal.open()\">Open Connect Modal</button>\n  <button @click=\"modal.open({ view: 'Networks' })\">Open Network Modal</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Responding to Signing Requests with Deep Link in Kotlin\nDESCRIPTION: Handles signing requests by initializing the redirect URL based on the active session's redirect property, then calls the SDK's respondSessionRequest method. On success, it opens the deep link to redirect the user back to the Dapp.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/mobile-linking.mdx#_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\nval redirect = WalletKit.getActiveSessionByTopic(sessionRequest.topic)?.redirect?.toUri()\nWalletKit.respondSessionRequest(response,\n        onSuccess = {\n        // trigger deeplink: redirect\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Wrapping MaterialApp with ReownAppKitModalTheme in Dart\nDESCRIPTION: Wraps the MaterialApp widget with ReownAppKitModalTheme to provide theming capabilities to the entire Flutter application. This is required for ReownAppKitModal widgets to consume the theme settings. No parameters or configuration are specified here; default theming will be applied unless overridden further.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/theming.mdx#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nreturn ReownAppKitModalTheme(\n  child: MaterialApp(\n    ...\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing ReownWalletKit with Core and Metadata in JavaScript\nDESCRIPTION: Creates a new instance of ReownWalletKit by configuring the core with a project ID and setting up wallet metadata including name, description, URL, icons, and redirect information.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/usage.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfinal _walletKit = ReownWalletKit(\n  core: ReownCore(\n    projectId: '{YOUR_PROJECT_ID}',\n  ),\n  metadata: PairingMetadata(\n    name: 'Example Wallet',\n    description: 'Example wallet description',\n    url: 'https://example.com/',\n    icons: ['https://example.com/logo.png'],\n    redirect: Redirect(\n      native: 'examplewallet://',\n      universal: 'https://reown.com/examplewallet',\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Installing @web3inbox/core with pnpm\nDESCRIPTION: Command to install the @web3inbox/core package using pnpm package manager.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/usage/installation/javascript.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @web3inbox/core\n```\n\n----------------------------------------\n\nTITLE: Importing Network Definitions for Reown AppKit (JS)\nDESCRIPTION: This snippet demonstrates how to import specific EVM network definitions (like `mainnet`, `arbitrum`, `base`, `scroll`, `polygon`) from the `@reown/appkit/networks` package. These Viem-based network objects are required when configuring the `networks` parameter for `createAppKit` or specific adapters like `WagmiAdapter`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/wagmi/about/implementation.mdx#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { createAppKit } from '@reown/appkit'\nimport { mainnet, arbitrum, base, scroll, polygon } from '@reown/appkit/networks'\n```\n\n----------------------------------------\n\nTITLE: Installation commands for @reown/appkit-siwx using Shell\nDESCRIPTION: Provides various shell commands to install the @reown/appkit-siwx package using npm, yarn, bun, and pnpm package managers. These commands are necessary prerequisites before implementing the SIWX features in a project.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/siwx/siwx-cloud-auth.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit-siwx\n```\n\nLANGUAGE: Yarn\nCODE:\n```\nyarn add @reown/appkit-siwx\n```\n\nLANGUAGE: Bun\nCODE:\n```\nbun a @reown/appkit-siwx\n```\n\nLANGUAGE: pnpm\nCODE:\n```\npnpm add @reown/appkit-siwx\n```\n\n----------------------------------------\n\nTITLE: Rejecting a WalletConnect Session Proposal – JavaScript\nDESCRIPTION: Listens for the 'session_proposal' event and demonstrates how to reject a session proposal when user or wallet settings prevent connection. Utilizes the WalletConnect utility getSdkError to supply standardized error information. Requires @walletconnect/utils and user rejection interface logic.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/polkadot/wallet-integration-guide.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Note: session_request is emitted when the client on the dapp end calls the request method\n// import getSdkError to create predefined ErrorResponse types\nimport { getSdkError } from \"@walletconnect/utils\";\n\nwalletKit.on(\"session_proposal\", async (proposal) => {\n  // optionally show user a modal or way to reject or approve session\n  showWalletConnectModal();\n\n  // handle user reject action\n  await walletKit.rejectSession({\n    id: proposal.id,\n    reason: getSdkError(\"USER_REJECTED\"),\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering AppKit Button Using Web Components in HTML\nDESCRIPTION: This snippet shows how to use the AppKit web component <appkit-button> directly in an HTML template without needing to import or register it. The web components provided by AppKit are globally available HTML elements that simplify integration by avoiding extra setup. This method is ideal for quick usage or non-Vue environments.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/ethers5/triggermodal.mdx#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <appkit-button />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Enabling Auth-Only Mode in TypeScript for Reown Project\nDESCRIPTION: This code snippet demonstrates how to enable the auth-only mode by setting the boolean flag 'enableAuthMode' to true. It modifies the application's configuration to restrict wallet fetching to authenticated wallets when in modal. Dependencies include the project's configuration framework, and the key parameter is 'enableAuthMode'.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/web3modal/v2/_partials/options/enableAuthMode.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nenableAuthMode: true\n```\n\n----------------------------------------\n\nTITLE: Initializing and Connecting WalletConnectSharpv2 SDK in C#\nDESCRIPTION: Demonstrates asynchronously initializing the WalletConnectSignClient with SignClientOptions, then connecting using ConnectOptions to request session approval. The returned ConnectResponse contains the 'Uri' for establishing the wallet pairing and an Approval Task which resolves with the SessionStruct upon user approval or throws on timeout/rejection.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_36\n\nLANGUAGE: csharp\nCODE:\n```\nvar dappClient = await WalletConnectSignClient.Init(dappOptions);\nvar connectData = await dappClient.Connect(dappConnectOptions);\n\nExampleShowQRCode(connectData.Uri);\n\nTask<SessionStruct> sessionConnectTask = connectData.Approval;\nSessionStruct sessionData = await sessionConnectTask;\n\n// or\n// SessionStruct sessionData = await connectData.Approval;\n```\n\n----------------------------------------\n\nTITLE: solana_signAndSendTransaction - Sign and Broadcast a Transaction\nDESCRIPTION: This method signs a serialized transaction with optional send parameters like skipPreflight and commitment levels, then sends it to the Solana network. It returns a signature string, which acts as the transaction ID. Handling of options influences preflight checks and retry behavior during transmission.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/solana-rpc.mdx#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Request\n{\n\t\"id\": 1,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"solana_signAndSendTransaction\",\n\t\"params\": {\n    \"transaction\": string,\n    \"sendOptions\": {\n\t    \"skipPreflight\"?: boolean,\n\t    \"preflightCommitment\"?: 'processed' | 'confirmed' | 'finalized' | 'recent' | 'single' | 'singleGossip' | 'root' | 'max',\n\t    \"maxRetries\"?: number,\n\t    \"minContextSlot\"?: number\n\t}\n\t}\n}\n\n// Response\n{\n\t\"id\": 1,\n\t\"jsonrpc\": \"2.0\",\n\t\"result\":  {\n\t  \"signature\": string\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring the prepare Method for Chain Abstraction in Swift\nDESCRIPTION: Defines the Swift `prepare` method within WalletKit's Chain Abstraction feature. This asynchronous function checks if a cross-chain operation is required based on the provided chain ID, sender address, transaction details (`Call`), available accounts, and local currency. It returns a `PrepareDetailedResponse` which indicates if abstraction is needed and provides transaction details if so, or the original transaction if not. Note the experimental status indicated by the `@available` attribute.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/chain-abstraction.mdx#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n@available(*, message: \"This method is experimental. Use with caution.\")\npublic func prepare(chainId: String, from: FfiAddress, call: Call, accounts: [String], localCurrency: Currency) async throws -> PrepareDetailedResponse \n}\n```\n\n----------------------------------------\n\nTITLE: Handling WalletConnect Session Request Events – JavaScript\nDESCRIPTION: Implements logic for the 'session_request' event, enabling dapps to request wallet actions like signing messages or transactions. Uses addresses to locate wallet state, determines supported methods, generates signatures, and returns responses per WalletConnect protocol. Throws a standardized error on unsupported methods using getSdkError. Requires previously initialized walletKit, method implementations for signMessage/signTransaction, and getPolkadotWallet.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/polkadot/wallet-integration-guide.mdx#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nwalletKit.on(\"session_request\", async (requestEvent) => {\n  const { params, id } = requestEvent;\n  const { request } = params;\n  const address = request.params?.address;\n\n  // check that the request address is in your users list of wallets\n  // Example:\n  const wallet = getPolkadotWallet(address); //\n\n  if (!wallet) {\n    throw new Error(\"Polkadot wallet does not exist\");\n  }\n\n  // handle supported methods (polkadot_signMessage, polkadot_signTransaction)\n  switch (request.method) {\n    case \"polkadot_signMessage\":\n      // call function used by wallet to sign message and return the signature\n      const signature = await yourwallet.signMessage(request.params.message);\n\n      // create the response containing the signature in the result\n      const response = { id, result: { signature: signature }, jsonrpc: \"2.0\" };\n\n      // respond to the dapp request with the response and topic\n      await walletKit.respondSessionRequest({ topic, response });\n\n    case \"polkadot_signTransaction\":\n      // call function used by wallet to sign transactions and return the signature\n      const signature = await yourwallet.signTransaction(\n        request.params.transactionPayload\n      );\n\n      // create the response containing the signature in the result\n      const response = { id, result: { signature: signature }, jsonrpc: \"2.0\" };\n\n      // respond to the dapp request with the response and topic\n      await walletKit.respondSessionRequest({ topic, response });\n\n    // throw error for methods your wallet doesn't support\n    default:\n      throw new Error(getSdkError(\"INVALID_METHOD\").message);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Modal Connection Lifecycle Events in JavaScript\nDESCRIPTION: Demonstrates how to subscribe to various events related to the modal's state and connection lifecycle using the `_appKitModal` object. Events include connect, update, network change, disconnect, and error, each passing a specific event object type to the callback.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/events.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n_appKitModal.onModalConnect.subscribe((ModalConnect? event) {});\n\n_appKitModal.onModalUpdate.subscribe((ModalConnect? event) {});\n\n_appKitModal.onModalNetworkChange.subscribe((ModalNetworkChange? event) {});\n\n_appKitModal.onModalDisconnect.subscribe((ModalDisconnect? event) {});\n\n_appKitModal.onModalError.subscribe((ModalError? event) {});\n```\n\n----------------------------------------\n\nTITLE: Creating Expo Config Plugin for Android Wallet Detection (queries.js)\nDESCRIPTION: Defines an Expo config plugin (`queries.js`) using `expo/config-plugins`. This plugin programmatically adds specified wallet package names to the `<queries>` section of the `AndroidManifest.xml` during the prebuild process, enabling wallet detection for Android Expo builds.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/installation.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// based on https://github.com/expo/config-plugins/issues/123#issuecomment-1746757954\n\nconst {\n  AndroidConfig,\n  withAndroidManifest,\n  createRunOncePlugin,\n} = require(\"expo/config-plugins\");\n\nconst queries = {\n  package: [\n    { $: { \"android:name\": \"com.wallet.crypto.trustapp\" } },\n    { $: { \"android:name\": \"io.metamask\" } },\n    { $: { \"android:name\": \"me.rainbow\" } },\n    { $: { \"android:name\": \"io.zerion.android\" } },\n    { $: { \"android:name\": \"io.gnosis.safe\" } },\n    { $: { \"android:name\": \"com.uniswap.mobile\" } },\n    // Add other wallet package names here\n  ],\n};\n\n/**\n * @param {import('@expo/config-plugins').ExportedConfig} config\n */\nconst withAndroidManifestService = (config) => {\n  return withAndroidManifest(config, (config) => {\n    config.modResults.manifest = {\n      ...config.modResults.manifest,\n      queries,\n    };\n\n    return config;\n  });\n};\n\nmodule.exports = createRunOncePlugin(\n  withAndroidManifestService,\n  \"withAndroidManifestService\",\n  \"1.0.0\"\n);\n```\n\n----------------------------------------\n\nTITLE: Android Wallet Detection - AndroidManifest.xml Configuration\nDESCRIPTION: This XML configuration demonstrates how to modify the AndroidManifest.xml for wallet detection by adding package queries outside the application scope. It aids in detecting installed wallets via native Android package queries, with links to official Android documentation for detailed schema listing.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/about.mdx#_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <queries>\n        <package android:name=\"io.metamask\"/>\n        <package android:name=\"com.wallet.crypto.trustapp\"/>\n        <package android:name=\"io.gnosis.safe\"/>\n        <package android:name=\"me.rainbow\"/>\n        <!-- Add other wallet schemes names here -->\n    </queries>\n\n    <application>\n        ...\n    </application>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Signing Cosmos Amino Transactions via JSON-RPC (JavaScript/JSON)\nDESCRIPTION: This JSON-RPC method (`cosmos_signAmino`) signs a provided document using the Amino signing standard for a specified signer address. It requires the `signerAddress` and a `signDoc` object including blockchain identifiers (`chain_id`, `account_number`, `sequence`), transaction details (`memo`, `msgs`), and fee information (`fee`). It returns an object with the signature details (`signature`) including the public key, and the original signed document (`signed`).\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/cosmos-rpc.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n// Request\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"cosmos_signAmino\",\n    \"params\": {\n        \"signerAddress\": \"cosmos1sguafvgmel6f880ryvq8efh9522p8zvmrzlcrq\",\n        \"signDoc\": {\n            \"chain_id\": \"foochain\",\n            \"account_number\": \"7\",\n            \"sequence\": \"54\"\n            \"memo\": \"hello, world\",\n            \"msgs\": [],\n            \"fee\": { \"amount\": [], \"gas\": \"23\" }\n        }\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n// Result\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"result\":  {\n        \"signature\": {\n            \"pub_key\": {\n                \"type\": \"tendermint/PubKeySecp256k1\",\n                \"value\": \"AgSEjOuOr991QlHCORRmdE5ahVKeyBrmtgoYepCpQGOW\"\n            },\n            \"signature\": \"AnTrXtS2lr9CBwhTpRa8ZlKcVR9PeIXGaTpvodyJU05QvRKVjIkQfOZl5JhdkfxCY+a6rhwCOYVcbKQTJlMw4w==\"\n        },\n        \"signed\": {\n            \"chain_id\": \"foochain\",\n            \"account_number\": \"7\",\n            \"sequence\": \"54\"\n            \"memo\": \"hello, world\",\n            \"msgs\": [],\n            \"fee\": { \"amount\": [{\"denom\": \"ufoo\", \"amount\": \"10000\"}], \"gas\": \"23\" }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Firebase Service in AndroidManifest.xml\nDESCRIPTION: Registers the custom FirebaseMessagingService subclass in the AndroidManifest.xml to enable the app to receive Firebase Cloud Messaging events. It associates the service with the necessary intent filter to handle messaging events.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_27\n\nLANGUAGE: XML\nCODE:\n```\n<application...>\n    <service android:name=\".CustomFirebaseService\">\n        <intent-filter>\n            <action android:name=\"com.google.firebase.MESSAGING_EVENT\" />\n        </intent-filter>\n    </service>\n</application>\n```\n\n----------------------------------------\n\nTITLE: Rendering SmartSessions React component\nDESCRIPTION: This snippet renders the imported SmartSessions component within a React application. It displays session management UI or behavior linked to the SmartSessions component, assuming React and relevant dependencies are installed.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/early-access/smart-session.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<SmartSessions />\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Authentication Responses using Publisher in Swift\nDESCRIPTION: Uses the Combine framework to subscribe to authentication responses from wallets via the authResponsePublisher. It handles success cases (with or without session creation) and failure scenarios, enabling the dApp to respond accordingly to the authentication outcome in real time.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_18\n\nLANGUAGE: Swift\nCODE:\n```\nSign.instance.authResponsePublisher\n    .receive(on: DispatchQueue.main)\n    .sink { response in\n        switch response.result {\n        case .success(let (session, _)):\n            if let session = session {\n                // Authentication successful, session established\n                handleSuccessfulAuthentication(session)\n            } else {\n                // Authentication successful, but no session created (SIWE-only flow)\n                handleSuccessfulAuthenticationWithoutSession()\n            }\n        case .failure(let error):\n            // Authentication request was rejected or failed\n            handleAuthenticationFailure(error)\n        }\n    }\n    .store(in: &subscriptions)\n```\n\n----------------------------------------\n\nTITLE: Installing AppKit and Adapters for Ethers5 + Solana (Bash)\nDESCRIPTION: Install AppKit for integration with Ethers5 and Solana by running the appropriate command for your package manager. You need Node.js and your package manager of choice. Installs @reown/appkit, @reown/appkit-adapter-ethers5, and @reown/appkit-adapter-solana, enabling Ethers5 (legacy Ethers) and Solana integrations.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/multichain.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit @reown/appkit-adapter-ethers5 @reown/appkit-adapter-solana\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit @reown/appkit-adapter-ethers5 @reown/appkit-adapter-solana\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun a @reown/appkit @reown/appkit-adapter-ethers5 @reown/appkit-adapter-solana\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit @reown/appkit-adapter-ethers5 @reown/appkit-adapter-solana\n```\n\n----------------------------------------\n\nTITLE: Defining Return Type for useAppKitAccount in TypeScript\nDESCRIPTION: Provides the TypeScript type definitions for `EmbeddedWalletInfo`, `ConnectionStatus`, and the overall return type `UseAppKitAccountReturnType` of the `useAppKitAccount` hook, detailing the structure of the returned data.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/hooks.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype EmbeddedWalletInfo {\n  user: {\n    username: string\n    email: string\n  },\n  accountType: 'eoa' | 'smartAccount',\n  authProvider: 'google' | 'apple' | 'facebook' | 'x' | 'discord' | 'farcaster' | 'github' | 'email',\n  isSmartAccountDeployed: boolean\n}\n\ntype ConnectionStatus = 'connected' | 'disconnected' | 'connecting' | 'reconnecting'\n\ntype UseAppKitAccountReturnType = {\n  isConnected: boolean\n  allAccounts: Account[]\n  status?: ConnectionStatus\n  address?: string\n  caipAddress?: `${string}:${string}`\n  embeddedWalletInfo?: EmbeddedWalletInfo\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Reown AppKit Modal (Vue/JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to open the initialized Reown AppKit modal in a Vue context. It demonstrates adding an event listener to a button element (e.g., with ID 'my-button') that calls `modal.open()` when clicked, presenting the connection interface to the user.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers5-web.mdx#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\ndocument.getElementById('my-button').addEventListener('click', () => {\n    modal.open()\n})\n```\n\n----------------------------------------\n\nTITLE: Configure Chains and Initialize Web3Modal with AppKit in React\nDESCRIPTION: Sets up chain configurations and creates a Web3Modal instance targeting Solana, including project ID and metadata. It verifies the presence of the Project ID and initializes the modal with specified parameters, enabling wallet connection features.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-anza-adapter-react.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst chains = [solana, solanaTestnet, solanaDevnet]\n\nconst projectId = import.meta.env.VITE_PROJECT_ID\nif (!projectId) throw new Error('Project ID is undefined')\n\nconst metadata = {\n  name: 'Appkit Solana Example',\n  description: 'Appkit Solana Example',\n  url: 'https://example.com',\n  icons: ['https://avatars.githubusercontent.com/u/179229932']\n}\n\nconst solanaConfig = defaultSolanaConfig({\n  metadata,\n  chains,\n  projectId,\n  auth: {\n    email: true,\n    socials: ['google', 'x', 'farcaster', 'github']\n  }\n})\n\ncreateWeb3Modal({\n  metadata,\n  solanaConfig,\n  chains,\n  projectId\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Web3Modal to AppKit Method Calls in Unity with C#\nDESCRIPTION: This C# snippet illustrates updating method calls when migrating from Web3Modal to Reown AppKit in Unity code. It shows removing older calls like Web3Modal.Open() and await Web3Modal.Evm.SendTransactionAsync, replacing them with AppKit.Open() and await AppKit.Evm.SendTransactionAsync respectively. These adjustments reflect changes in API naming and usage following the migration.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-unity.mdx#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// Remove the following code line\nWeb3Modal.Open();\n\n// Add the following code line\nAppKit.Open();\n\n// Remove the following code line\nawait Web3Modal.Evm.SendTransactionAsync(address, value);\n\n// Add the following code line\nawait AppKit.Evm.SendTransactionAsync(address, value);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Wallet Connection and Address with AppKit Hooks in JavaScript\nDESCRIPTION: This code demonstrates how to use AppKit hooks to access the current Solana blockchain connection and obtain information about the connected wallet, including its address and connection status. The hooks rely on context provided by the AppKit provider, and their results are prerequisites for further wallet operations.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/solana-send-transaction.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { connection } = useAppKitConnection();\nconst { isConnected, address } = useAppKitAccount();\n```\n\n----------------------------------------\n\nTITLE: Detecting Smart Contract Wallets using ethers.js in JavaScript\nDESCRIPTION: Uses the ethers.js library to check if a given Ethereum address belongs to a smart contract by fetching its bytecode. The `provider.getCode()` method retrieves the code at the address, and `utils.hexStripZeros()` helps determine if the bytecode is non-empty (indicating a contract). Requires `ethers` library installed and an RPC URL.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/smart-contract-wallet-usage.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { providers, utils } from \"ethers\";\n\nconst provider = new providers.JsonRpcProvider(rpcUrl);\n\nconst bytecode = await provider.getCode(address);\n\nconst isSmartContract = bytecode && utils.hexStripZeros(bytecode) !== \"0x\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign Message Handler with AppKit\nDESCRIPTION: Defines an asynchronous function `handleSignMsg` that uses the `walletProvider.signMessage` method to prompt the connected wallet to sign a specific string message. It requires the user's `address` and the `message` content. The resulting `signature` is logged to the console upon successful signing.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/bitcoin-send-transaction.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// function to sign a message\nconst handleSignMsg = async () => {\n  // raise the modal to sign the message\n  const signature = await walletProvider.signMessage({\n    address,\n    message: \"Hello Reown AppKit!\",\n  });\n\n  // Print the signed message in console\n  console.log(signature);\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Pairing State Changes CoreClient Kotlin\nDESCRIPTION: This snippet shows how to implement a CoreClient.CoreDelegate to receive updates on the pairing state. The pairing state indicates whether the wallet should show a loading indicator while awaiting a session proposal (true) or prepare to display the proposal dialog (false).\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/best-practices.mdx#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval coreDelegate = object : CoreClient.CoreDelegate {\n    override fun onPairingState(pairingState: Core.Model.PairingState) {\n        //Here a pairing state is triggered\n    }\n    ...other callbacks\n}\n\nCoreClient.setDelegate(coreDelegate)\n```\n\n----------------------------------------\n\nTITLE: Setting Delegate on AppKit to Receive Wallet Session Updates in Kotlin\nDESCRIPTION: This snippet demonstrates how to register the previously defined `ModalDelegate` instance with AppKit by calling `setDelegate()`. This enables the application to receive real-time callbacks related to wallet session state changes and events through the delegate methods. It requires a valid delegate object implementing `AppKit.ModalDelegate`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/actions.mdx#_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nAppKit.setDelegate(appKitModalDelegate)\n```\n\n----------------------------------------\n\nTITLE: Example WalletConnect URIs for Deep and Universal Links (Bash)\nDESCRIPTION: Illustrates the structure of URIs used for initiating WalletConnect sessions or triggering signing requests via deep links and universal links on mobile platforms. The first set shows complete URIs for establishing connections, while the second set shows incomplete URIs used solely for redirecting users during signing requests.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/mobile-linking.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# For deep links\nexamplewallet://wc?uri=wc:94caa59c77dae0dd234b5818fb7292540d017b27d41f7f387ee75b22b9738c94@2?relay-protocol=irn&symKey=ce3a2c7724c03cf1769ba8b1bdedad5414cc7b920aa3fb72112b997d1916266f\n\n# For universal links\nhttps://example.wallet/wc?uri=wc:94caa59c77dae0dd234b5818fb7292540d017b27d41f7f387ee75b22b9738c94@2?relay-protocol=irn&symKey=ce3a2c7724c03cf1769ba8b1bdedad5414cc7b920aa3fb72112b997d1916266f\n```\n\nLANGUAGE: bash\nCODE:\n```\n# For deep links\nexamplewallet://wc?uri=wc:00e46b69-d0cc-4b3e-b6a2-cee442f97188@2\n\n# For universal links\nhttps://example.wallet/wc?uri=wc:00e46b69-d0cc-4b3e-b6a2-cee442f97188@2\n```\n\n----------------------------------------\n\nTITLE: Requesting Ethereum Accounts via Provider (TypeScript/JavaScript)\nDESCRIPTION: Demonstrates how to send an RPC request using the provider to request user accounts or other methods. Includes an example of using `request` and `sendAsync` for compatibility.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/providers/ethereum.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst result = await provider.request({ method: \"eth_requestAccounts\" });\n\n// OR\n\nprovider.sendAsync({ method: \"eth_requestAccounts\" }, CallBackFunction);\n```\n\n----------------------------------------\n\nTITLE: Opening Modal Views in Wallet Integration – TypeScript\nDESCRIPTION: These TypeScript code snippets demonstrate various ways to call the open function to display specific modal views for a wallet integration. Dependencies include access to the open function, typically from a wallet library, and relevant type definitions. The function accepts an object with a view property (such as \"Account\", \"Connect\", or \"Swap\"), and can take optional parameters like namespace to target specific blockchains (e.g., solana, bip122, or eip155) or arguments for custom views. Inputs are configuration objects specifying the desired view and options; outputs are UI modals reflecting these selections. This implementation assumes an environment supporting TypeScript and the wallet modal component.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/core/open.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nopen({ view: \"Account\" });\n\n// to connect and show multi wallets view\nopen({ view: \"Connect\" });\n\n// to connect and show only solana wallets\nopen({ view: \"Connect\", namespace: \"solana\" });\n\n// to connect and show only bitcoin wallets\nopen({ view: \"Connect\", namespace: \"bip122\" });\n\n// to connect and show only ethereum wallets\nopen({ view: \"Connect\", namespace: \"eip155\" });\n\n// to open swap with arguments\nopen({\n  view: 'Swap',\n  arguments: {\n    amount: '321.123',\n    fromToken: 'USDC',\n    toToken: 'ETH'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Session Approval and Dapp Redirection with React Native - JavaScript\nDESCRIPTION: This JavaScript snippet provides a React Native implementation of automatic Dapp redirection after wallet session approval. It utilizes the 'Linking' API from 'react-native' to open the Dapp using a custom scheme extracted from the proposal's metadata. The function 'onApprove' first approves the session via 'walletKit.approveSession', then retrieves the required deep link from the session object and attempts to redirect the user. If the metadata is missing, it gracefully prompts the user to return manually. Dependencies include 'react-native', 'walletKit', and standard ES6 features. The function expects 'proposal' and 'namespaces' as input, handles asynchronous control flow, and outputs a navigation side effect or a user prompt.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/mobile-linking.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Linking } from \"react-native\";\n\nasync function onApprove(proposal, namespaces) {\n  const session = await walletKit.approveSession({\n    id: proposal.id,\n    namespaces,\n  });\n\n  const dappScheme = session.peer.metadata.redirect?.native;\n\n  if (dappScheme) {\n    Linking.openURL(dappScheme);\n  } else {\n    // Inform the user to manually return to the DApp\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Reown AppKit Modal with React Native in TypeScript\nDESCRIPTION: This snippet imports compatibility and AppKit modules, sets up blockchain chain configurations for Ethereum mainnet and Polygon, creates the AppKit configuration including metadata, and initializes the modal with necessary parameters such as projectId, chains, and optional analytics flag. Finally, it renders the AppKit React component in the default export App function. Dependencies include '@walletconnect/react-native-compat' for React Native WalletConnect compatibility and '@reown/appkit-ethers-react-native' for AppKit components and hooks.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers/about/implementation.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"@walletconnect/react-native-compat\";\n\nimport {\n  createAppKit,\n  defaultConfig,\n  AppKit,\n} from \"@reown/appkit-ethers-react-native\";\n\n// 1. Get projectId from https://cloud.reown.com\nconst projectId = \"YOUR_PROJECT_ID\";\n\n// 2. Create config\nconst metadata = {\n  name: \"AppKit RN\",\n  description: \"AppKit RN Example\",\n  url: \"https://reown.com/appkit\",\n  icons: [\"https://avatars.githubusercontent.com/u/179229932\"],\n  redirect: {\n    native: \"YOUR_APP_SCHEME://\",\n  },\n};\n\nconst config = defaultConfig({ metadata });\n\n// 3. Define your chains\nconst mainnet = {\n  chainId: 1,\n  name: \"Ethereum\",\n  currency: \"ETH\",\n  explorerUrl: \"https://etherscan.io\",\n  rpcUrl: \"https://cloudflare-eth.com\",\n};\n\nconst polygon = {\n  chainId: 137,\n  name: \"Polygon\",\n  currency: \"MATIC\",\n  explorerUrl: \"https://polygonscan.com\",\n  rpcUrl: \"https://polygon-rpc.com\",\n};\n\nconst chains = [mainnet, polygon];\n\n// 4. Create modal\ncreateAppKit({\n  projectId,\n  chains,\n  config,\n  enableAnalytics: true, // Optional - defaults to your Cloud configuration\n});\n\nexport default function App() {\n  return (\n    <>\n      // Rest of your app...\n      <AppKit />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EVM Smart Contract Address and ABI in JavaScript\nDESCRIPTION: Defines the contract address (storageSC) and Application Binary Interface (storageABI) for a simple storage smart contract deployed on the Sepolia Testnet. The ABI details the 'retrieve' (read) and 'store' (write) functions, necessary for interacting with the contract using web3 libraries.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/EVM-smart-contract-interaction.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst storageSC = \"0xEe6D291CC60d7CeD6627fA4cd8506912245c8cA4\";\n\nconst storageABI = [\n  {\n    inputs: [],\n    name: \"retrieve\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"num\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"store\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Button to trigger transaction sending in React\nDESCRIPTION: Displays a button that, when clicked, executes the send transaction function. It allows users to initiate and complete a blockchain transfer through the wallet interface.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/ethers-send-transaction.mdx#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nreturn (\n  isConnected && (\n    <div>\n      <button onClick={handleSendTx}>Send Transaction</button>\n    </div>\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Updating network presets\nDESCRIPTION: This snippet shows how network preset manipulations change: replacing chains, info objects, and adding networks with new parameter names such as 'name', 'currency', and 'explorerUrl'.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-flutter.mdx#_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n<Table\n  headers={[\"Old\", \"New\", \"Notes\"]}\n  data=[\n    { old: { code: \"W3MChainPresets\" }, new: { code: \"ReownAppKitModalNetworks\" }, notes: \"\" },\n    { old: { code: \"W3MChainInfo\" }, new: { code: \"ReownAppKitModalNetworkInfo\" }, notes: \"`chainName` parameter is now `name`\\n`tokenName` parameter is now `currency`\\n`blockExplorer` parameter is now `explorerUrl`\\n`namespace` parameter is not needed anymore\" }\n  ]\n/>\n```\n\n----------------------------------------\n\nTITLE: Using WalletConnect Interceptor with Nethereum Web3 in C#\nDESCRIPTION: Demonstrates how to integrate WalletConnect with Nethereum's Web3 instance in Unity using an interceptor. It initializes Web3, obtains the WalletConnect instance, creates a WalletConnectUnityInterceptor, assigns it to the Web3 client, and then uses Nethereum's contract service to call the `transfer` method of an ERC20 contract. The interceptor automatically handles routing the signing request to the connected wallet via WalletConnect.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_46\n\nLANGUAGE: csharp\nCODE:\n```\n// Nethereum's Web3 instance\nvar web3 = new Web3();\n\n// Instance of WalletConnect singleton\nvar walletConnect = WalletConnect.Instance;\n\n// Interceptor that will route requests requiring signing to the wallet connected with WalletConnect\nvar walletConnectUnityInterceptor = new WalletConnectUnityInterceptor(walletConnect);\n\n// Assign the interceptor to the Web3 instance\nweb3.Client.OverridingRequestInterceptor = walletConnectUnityInterceptor;\n\nconst string contractAddress = \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\";\nconst string recipientAddress = \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\";\nconst BigInteger amount = 1;\n\n// Get ERC20 contract service\nvar contractService = Web3Modal.Web3.Eth.ERC20.GetContractService(contractAddress);\n\n// Call transfer method of ERC20 contract\nawait contractService.TransferRequestAsync(recipientAddress, amount);\n```\n\n----------------------------------------\n\nTITLE: Implementing Get Balance Handler and UTXO Helpers\nDESCRIPTION: Defines an asynchronous function `handleGetBalance` that calculates the total balance of a Bitcoin address by summing the values of its Unspent Transaction Outputs (UTXOs). It uses a helper function `getUTXOs` to fetch UTXOs from the mempool.space API and includes a type definition for the UTXO structure. The `isTestnet` flag allows switching between mainnet and testnet.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/bitcoin-send-transaction.mdx#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n\n\nconst handleGetBalance = () => {\n    const isTestnet = true; // change to false if you want to get the balance on mainnet\n\n    // get all the utxos from the address\n    const response = await fetch(\n        `https://mempool.space${isTestnet ? '/testnet' : ''}/api/address/${address}/utxo`\n    );\n    const data = await response.json();\n\n    // get the utxos - the list of unspent transactions that the sender has\n    const utxos = await getUTXOs(address, isTestnet)\n    // return the sum of the utxos ... The balance of the sender\n    const balance = utxos.reduce((sum, utxo) => sum + utxo.value, 0)\n\n    // print the balance in console\n    console.log(balance);\n}\n\n// Get the utxos ... List of unspent transactions that the sender has\nconst getUTXOs = async (address: string, isTestnet: boolean = false): Promise<UTXO[]> => {\n    const response = await fetch(\n        `https://mempool.space${isTestnet ? '/testnet' : ''}/api/address/${address}/utxo`\n    )\n    return await response.json();\n}\n\n// Type of the UTXO ... List of unspent transactions that the sender has\ntype UTXO = {\n    txid: string\n    vout: number\n    value: number\n    status: {\n        confirmed: boolean\n        block_height: number\n        block_hash: string\n        block_time: number\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create WalletConnect Modal Instance (JavaScript)\nDESCRIPTION: Creates an instance of the WalletConnectModal, which provides a UI for connecting wallets, typically by displaying a QR code. Requires a Project ID and can optionally specify supported chains.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { WalletConnectModal } from \"@walletconnect/modal\";\n\nconst walletConnectModal = new WalletConnectModal({\n  projectId: \"<YOUR_PROJECT_ID>\",\n  // `standaloneChains` can also be specified when calling `walletConnectModal.openModal(...)` later on.\n  standaloneChains: [\"eip155:1\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Structure Paymaster Capabilities Object - Wagmi - TypeScript\nDESCRIPTION: Shows the required structure for the `paymasterService` object within the `capabilities` parameter passed to `sendCalls`. This object specifies the URL of the paymaster service that will be used to sponsor the transaction.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/sponsoring-first-transaction.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\npaymasterService: {\n  url: 'https://paymaster-api.reown.com/<CHAIN_ID>/rpc?projectId=<YOUR_PROJECT_ID>',\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing connect button with override property\nDESCRIPTION: Demonstrates overriding default button styles with a custom widget, allowing for tailored UI consistent with app branding.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/usage.mdx#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nAppKitModalConnectButton(\n  appKit: _appKitModal,\n  custom: MyCustomButton(\n    onPressed: () {\n      _appKitModal.openModalView();\n    },\n    child: const Text('CONNECT WALLET'),\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Listening for Notification Events with JavaScript\nDESCRIPTION: This snippet imports and uses the 'Events' component to listen for various notification-related events such as new messages or status changes. It relies on the 'events/javascript.mdx' module to facilitate real-time event handling.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/notifications/frontend-integration/api.mdx#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Events />\n```\n\n----------------------------------------\n\nTITLE: Handling Device Token Registration Callback for APNs in Swift\nDESCRIPTION: Implements the AppDelegate method application(_:didRegisterForRemoteNotificationsWithDeviceToken:) which receives the device token from APNs after successful registration. This token is then asynchronously registered with the Notify instance using Swift concurrency's Task mechanism at high priority. This method is integral for enabling server-side push notifications by associating the device with the Notify push server.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nfunc application(\n  _ application: UIApplication,\n  didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data\n) {\n    Task(priority: .high) {\n        try await Notify.instance.register(deviceToken: deviceToken)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Intent Filter for App Links (Android Manifest)\nDESCRIPTION: Shows an example `<intent-filter>` configuration for an Android app's `AndroidManifest.xml` file. This filter enables the app to handle incoming HTTPS links matching the specified host and path pattern, with `android:autoVerify=\"true\"` enabling automatic verification of App Links, necessary for Link Mode functionality on Android.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/link-mode.mdx#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<intent-filter android:autoVerify=\"true\">\n  <action android:name=\"android.intent.action.VIEW\" />\n\n  <category android:name=\"android.intent.category.DEFAULT\" />\n  <category android:name=\"android.intent.category.BROWSABLE\" />\n\n  <data android:scheme=\"https\" />\n  <data android:host=\"your_wallet_universal_link.com\" />\n  <data android:pathPattern=\"/open\" />\n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Fetching Notification Types WalletConnect Notify Kotlin\nDESCRIPTION: Demonstrates how to fetch the list of available notification types defined by a specific dapp. This function requires the dapp's domain and optionally accepts a timeout duration. The result is a map where keys are notification type IDs and values are `Notify.Model.NotificationType` objects.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/notifications/notify/usage.mdx#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval appMetadata: Core.Model.AppMetaData = // App Metadata could be fetched from NotifyClient.getActiveSubscriptions()\nval appDomain: String = URI(appMetadata.url).host\nval timeout: Duration? = // Optional. Timeout - min 5 sec, max 60 sec, default 60 sec\n\nval params = Notify.Params.NotificationTypes(appDomain, timeout)\ntry {\n  val result: Map<String, Notify.Model.NotificationType> = NotifyClient.getNotificationTypes(params)\n} catch (e: Exception) {\n  // callback for when the get notification types request has failed\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit Packages\nDESCRIPTION: Commands to install the required Reown AppKit packages using different package managers.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers-web.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit @reown/appkit-adapter-ethers\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit @reown/appkit-adapter-ethers\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun a @reown/appkit @reown/appkit-adapter-ethers\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit @reown/appkit-adapter-ethers\n```\n\n----------------------------------------\n\nTITLE: Requesting Deploy Signature with WalletConnect - Casper (JSON)\nDESCRIPTION: This snippet illustrates a JSON-RPC request to invoke casper_sign_deploy, asking the user to approve or reject the signing of a Casper deploy object via their wallet. Required parameters include a Casper-formatted address string and a deploy object adhering to the Casper protocol. The deploy contains detailed transaction information including chain name, payment, session, and an array of approvals. A valid response will return the signed deploy; if rejected, a USER_REJECTED error is expected. Ensure compliance with the Casper deploy format and WalletConnect SDK requirements.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/casper-rpc.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"casper_sign_deploy\",\n  \"params\": {\n    \"deploy\": {\n      \"hash\": \"a3301c9da7f0183f1c8904bed7fc72cf563454509462cada378b3f42a92f7b4f\",\n      \"header\": {\n        \"account\": \"02032E126170e5f28443775330B5B5Fe29dCE1a1dD3269910349525935ccbaf352EA\",\n        \"timestamp\": \"2024-02-01T08:41:59.207Z\",\n        \"ttl\": \"30m\",\n        \"gas_price\": 1,\n        \"body_hash\": \"188d88eedd3dc64b4ac3f8ca9b74be2b2fa588e2d537875d22b7e1a68658d19e\",\n        \"dependencies\": [],\n        \"chain_name\": \"casper-test\"\n      },\n      \"payment\": {\n        \"ModuleBytes\": {\n          \"module_bytes\": \"\",\n          \"args\": [[\"amount\", { \"bytes\": \"0400e1f505\", \"cl_type\": \"U512\" }]]\n        }\n      },\n      \"session\": {\n        \"Transfer\": {\n          \"args\": [\n            [\"amount\", { \"bytes\": \"0500f2052a01\", \"cl_type\": \"U512\" }],\n            [\n              \"target\",\n              {\n                \"bytes\": \"0202e99759649fa63a72c685b72e696b30c90f1deabb02d0d9b1de45eb371a73e5bb\",\n                \"cl_type\": \"PublicKey\"\n              }\n            ],\n            [\n              \"id\",\n              { \"bytes\": \"01d204000000000000\", \"cl_type\": { \"Option\": \"U64\" } }\n            ]\n          ]\n        }\n      },\n      \"approvals\": []\n    },\n    \"address\": \"casper:casper-test:02032E126170e5f28443775330B5B5Fe29dCE1a1dD3269910349525935ccbaf352EA\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Networking Client with Shared Keychain Group in Swift\nDESCRIPTION: Shows how to configure the Networking client within the main wallet application, specifically setting the `groupIdentifier`. This identifier must match the keychain group used by the notification service extension to enable secure sharing of cryptographic keys required for decrypting push notifications.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/notifications/push.mdx#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nNetworking.configure(\n    groupIdentifier: \"group.com.walletconnect.sdk\",\n    projectId: InputConfig.projectId,\n    socketFactory: DefaultSocketFactory()\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Legacy AppKit SIWE Package with NPM\nDESCRIPTION: Command for installing the legacy SIWE dependencies including the AppKit SIWE package and SIWE library using NPM package manager.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/siwe.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit-siwe siwe\n```\n\n----------------------------------------\n\nTITLE: Integrating Reown AppKit using Compose Component and ModalBottomSheetLayout (Kotlin)\nDESCRIPTION: Integrates Reown AppKit into a Jetpack Compose UI using a standard `ModalBottomSheetLayout` and the `AppKitComponent` composable. The `AppKitComponent` is used directly as the `sheetContent`, providing flexibility without requiring the Navigation library for modal handling.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/usage.mdx#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.material.ExperimentalMaterialApi\nimport androidx.compose.material.ModalBottomSheetState\nimport androidx.navigation.compose.NavHost\nimport androidx.navigation.compose.composable\nimport androidx.navigation.compose.rememberNavController\nimport androidx.compose.material.ModalBottomSheetLayout\n\nsetContent {\n    val modalSheetState = rememberModalBottomSheetState(initialValue = ModalBottomSheetValue.Hidden, skipHalfExpanded = true)\n    val coroutineScope = rememberCoroutineScope()\n    val navController = rememberNavController()\n\n    ModalBottomSheetLayout(\n        sheetContent = {\n            AppKitComponent(\n                shouldOpenChooseNetwork = true | false,\n                closeModal = { coroutineScope.launch { modalSheetState.hide() } }\n            )\n        }\n    ) {\n        // content\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Subscribers from Reown Notify API using cURL\nDESCRIPTION: Example using cURL to query the `/v1/<project-id>/subscribers` endpoint for subscription status of specific accounts. It demonstrates a POST request with the Authorization header (Bearer token) and a JSON body containing the list of accounts (CAIP-10 format) to check.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/backend-integration.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST 'https://notify.walletconnect.com/v1/<PROJECT_ID>/subscribers' \\\n  --header 'Authorization: Bearer <NOTIFY_API_SECRET>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"accounts\": [\n      \"eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029\",\n      \"eip155:1:0x0000000000000000000000000000000000000000\"\n    ]\n  }'\n```\n\n----------------------------------------\n\nTITLE: Configuring optionalNamespaces with multiple blockchain support\nDESCRIPTION: This snippet shows how to set the optionalNamespaces property in ReownAppKitModal to include support for eip155 (EVM), Solana, and Polkadot networks. It maps supported networks' chainIds, and specifies methods and events for each. Overwriting optionalNamespaces requires including all relevant chain info.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/custom-chains.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Configure optionalNamespaces with multiple blockchain support\noptionalNamespaces: {\n  'eip155': RequiredNamespace.fromJson({\n    'chains': ReownAppKitModalNetworks.getAllSupportedNetworks(\n      namespace: 'eip155',\n    ).map((chain) => '${chain.chainId}').toList(),\n    'methods': NetworkUtils.defaultNetworkMethods['eip155']!.toList(),\n    'events': NetworkUtils.defaultNetworkEvents['eip155']!.toList(),\n  }),\n  'solana': RequiredNamespace.fromJson({\n    'chains': ReownAppKitModalNetworks.getAllSupportedNetworks(\n      namespace: 'solana',\n    ).map((chain) => '${chain.chainId}').toList(),\n    'methods': NetworkUtils.defaultNetworkMethods['solana']!.toList(),\n    'events': [],\n  }),\n  'polkadot': RequiredNamespace.fromJson({\n    'chains': ReownAppKitModalNetworks.getAllSupportedNetworks(\n      namespace: 'polkadot',\n    ).map((chain) => '${chain.chainId}').toList(),\n    'methods': [\n      'polkadot_signMessage',\n      'polkadot_signTransaction',\n    ],\n    'events': []\n  }),\n},\n\n```\n\n----------------------------------------\n\nTITLE: Updating Main Import for Reown WalletKit in JavaScript\nDESCRIPTION: Shows how to replace the import statement for Web3Wallet from @walletconnect/web3wallet with the WalletKit import from @reown/walletkit in your JavaScript/TypeScript code.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/upgrade/from-web3wallet-web.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/* highlight-delete-start */\nimport { Web3Wallet } from \"@walletconnect/web3wallet\";\n/* highlight-delete-end */\n/* highlight-add-start */\nimport { WalletKit } from \"@reown/walletkit\";\n/* highlight-add-end */\n```\n\n----------------------------------------\n\nTITLE: Example Proposal Namespace Structure (JavaScript/JSON)\nDESCRIPTION: Illustrates the JSON-like structure of a `proposalNamespace` object used in WalletConnect. This example shows how a dapp specifies required chains (Polkadot, Kusama, Ethereum, Polygon, Cosmos), methods (`polkadot_signMessage`, `eth_sign`, `cosmos_signDirect`), and events (`accountsChanged`, `someCosmosEvent`) it intends to use during a session across multiple blockchain ecosystems.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/polkadot/namespaces-guide.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"polkadot\": {\n    \"chains\": [\n        \"polkadot:91b171bb158e2d3848fa23a9f1c25182\", // Polkadot\n        \"polkadot:b0a8d493285c2df73290dfb7e61f870f\", // Kusama\n        ],\n    \"methods\": [\"polkadot_signMessage\"],\n    \"events\": [\"accountsChanged\"]\n  },\n  \"eip155\": {\n    \"chains\": [\n        \"eip155:1\",   // Ethereum\n        \"eip155:137\"  // Polygon\n        ],\n    \"methods\": [\"eth_sign\"],\n    \"events\": [\"accountsChanged\"]\n  },\n  \"cosmos\": {\n    \"chains\": [\"cosmos:cosmoshub-4\"], // Cosmos\n    \"methods\": [\"cosmos_signDirect\"],\n    \"events\": [\"someCosmosEvent\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Reown AppKit Modal via Kotlin DSL Navigation (Kotlin)\nDESCRIPTION: Opens the Reown AppKit modal by navigating to its destination within a navigation graph defined using Kotlin DSL. This is achieved using an extension function on the `NavController` obtained via `findNavController()`, after the AppKit graph has been included.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/usage.mdx#_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.navigation.fragment.findNavController\nimport com.reown.appkit.ui.openAppKit\n\nfindNavController().openAppKit(\n    shouldOpenChooseNetwork = true | false\n    onError = {  }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating WalletKit Instance with Metadata for React Native in JavaScript\nDESCRIPTION: This snippet shows the initialization of WalletKit in a React Native environment with the necessary metadata. It highlights the importance of importing '@walletconnect/react-native-compat' alongside WalletKit dependencies to ensure React Native compatibility. The code initializes WalletKit with core settings and app-specific metadata, facilitating session management and wallet interactions.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/usage.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport '@walletconnect/react-native-compat';\nimport { Core } from \"@walletconnect/core\";\nimport { WalletKit } from \"@reown/walletkit\";\n\nconst core = new Core({\n  projectId: 'YOUR_PROJECT_ID',\n});\n\nconst walletKit = await WalletKit.init({\n  core,\n  metadata: {\n    name: \"Demo React Native Wallet\",\n    description: \"Demo RN Wallet to interface with Dapps\",\n    url: \"https://yourapp.com\",\n    icons: [\"https://your_icon.png\"],\n    redirect: {\n      native: \"yourwalletscheme://\",\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Rejecting a Session Proposal with Reason\nDESCRIPTION: This snippet shows how to handle an incoming session proposal event by rejecting it, using the rejectSession method and providing a reason generated via getSdkError, typically when user declines or cancels the connection request.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/usage.mdx#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nwalletKit.on(\n  \"session_proposal\",\n  async (proposal: WalletKitTypes.SessionProposal) => {\n    await walletKit.rejectSession({\n      id: proposal.id,\n      reason: getSdkError(\"USER_REJECTED_METHODS\"),\n    });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Integrating AppKit with Web Component in React\nDESCRIPTION: This snippet demonstrates rendering the AppKit button using its custom HTML element `<appkit-button>` within a React functional component. Web components are global HTML elements and do not require explicit importing in the component file.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/ethers5/triggermodal.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function ConnectButton() {\n  return <appkit-button />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring User Account for Web3Inbox in JavaScript\nDESCRIPTION: This snippet sets the user's account within the Web3Inbox system by importing and rendering the 'SettingAccount' component. It relies on the 'setting-account/javascript.mdx' module and facilitates linking user account details for subsequent notification actions.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/notifications/frontend-integration/api.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<SettingAccount />\n```\n\n----------------------------------------\n\nTITLE: Switching Networks with Reown AppKit\nDESCRIPTION: Example showing the difference in network switching methods between Web3Modal v5 and Reown AppKit, highlighting the use of network objects instead of chain IDs.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-solana-web.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following code line\nmodal.switchNetwork(103);\n\n// Add the following code lines\nimport { solanaDevnet } from \"@reown/appkit/networks\";\nmodal.switchNetwork(solanaDevnet);\n```\n\n----------------------------------------\n\nTITLE: Signing Message eth_sign JSON\nDESCRIPTION: Demonstrates a JSON-RPC request for the `eth_sign` method, used to calculate an Ethereum-specific signature for a message using a specific account. It shows the standard JSON-RPC format with 'id', 'jsonrpc', 'method', and 'params' (address and message). The result is the calculated signature as a DATA string. Note that the address used for signing must be unlocked.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/ethereum-rpc.mdx#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n// Request\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"eth_sign\",\n  \"params\": [\"0x9b2055d370f73ec7d8a03e965129118dc8f5bf83\", \"0xdeadbeaf\"],\n}\n\n\n// Result\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": \"0xa3f20717a250c2b0b729b7e5becbff67fdaef7e0699da4de7ca5895b02a170a12d887fd3b17bfdce3481f10bea41f45ba9f709d39ce8325427b57afcfc994cee1b\"\n}\n```\n\n----------------------------------------\n\nTITLE: Declare Notification Subscription Publishers for Reactive Event Handling in Swift\nDESCRIPTION: Exposes multiple public reactive publishers of type AnyPublisher to emit events related to Notify SDK push subscriptions: new subscriptions, notify messages, subscription deletions, subscription updates (with success or error Result), and active subscriptions list. These publishers allow subscribers to react asynchronously to subscription lifecycle changes and incoming push messages from dapps. Each property returns an event stream that does not emit errors (Never).\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\npublic var newSubscriptionPublisher: AnyPublisher<NotifySubscription, Never> {\n\npublic var notifyMessagePublisher: AnyPublisher<PushMessage, Never>\n\npublic var deleteSubscriptionPublisher: AnyPublisher<String, Never>\n\npublic var updateSubscriptionPublisher: AnyPublisher<Result<PushSubscription, Error>, Never> {\n\npublic var subscriptionsPublisher: AnyPublisher<[PushSubscription], Never>\n```\n\n----------------------------------------\n\nTITLE: Extending Wallet Session Expiry in C#\nDESCRIPTION: Shows how to extend the expiry time of an existing wallet session to keep it active using walletClient.Extend with the session topic. The extension request is awaited along with its acknowledgement to ensure the session expiry time is updated.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/usage.mdx#_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nvar request = await walletClient.Extend(sessionTopic);\nawait request.Acknowledged();\n```\n\n----------------------------------------\n\nTITLE: Implementing AppKit Modal Actions with TypeScript\nDESCRIPTION: Demonstrates how to use the AppKit actions to programmatically open the modal. Shows event listener implementation for both the main connect modal and opening the modal with the Networks view.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/ethers/about/triggermodal.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Trigger modal programaticaly\n// Add this code inside `main.js` file at the end of the code file\nconst openConnectModalBtn = document.getElementById(\"open-connect-modal\");\nconst openNetworkModalBtn = document.getElementById(\"open-network-modal\");\n\nopenConnectModalBtn.addEventListener(\"click\", () => modal.open());\nopenNetworkModalBtn.addEventListener(\"click\", () =>\n  modal.open({ view: \"Networks\" })\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Session Authenticate Response - Kotlin\nDESCRIPTION: This callback function, part of `AppKit.ModalDelegate`, is triggered when the dapp receives a response to a session authentication request. It allows the application to check if the authentication was successful, potentially resulting in a session being established or a SIWE-only flow completion, or if the request was rejected or failed.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/one-click-auth.mdx#_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nfun onSessionAuthenticateResponse(response: Modal.Model.SessionAuthenticateResponse) {\n    // Triggered when Dapp receives the session authenticate response from wallet\n\n    if (response is Modal.Model.SessionAuthenticateResponse.Result) {\n        if (response.session != null) {\n            // Authentication successful, session established\n        } else {\n            // Authentication successful, but no session created (SIWE-only flow)\n        }\n    } else {\n        // Authentication request was rejected or failed\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Initializing AppKit Modal - Vue - TypeScript (tsx)\nDESCRIPTION: Details the creation of AppKit modal instances and QueryClient initialization for Vue, replacing legacy Web3Modal methods. The snippet explains how to pass adapters, networks, metadata, and features into createAppKit, and it integrates Vue Query's plugin for state management. Use in main.ts or main.js to activate AppKit and state across your Vue application root. Ensure projectId and compatible chain imports are correctly set.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following code line\n- createWeb3Modal({ wagmiConfig, projectId, chains })\n\n// Add the following code lines\n+ const modal = createAppKit({\n adapters: [wagmiAdapter],\n networks: [mainnet, arbitrum],\n metadata: metadata,\n projectId,\n features: {\n   analytics: true,\n }\n})\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following code lines\n- import { createWeb3Modal } from \"@web3modal/wagmi/vue\";\n- import { defaultWagmiConfig } from \"@web3modal/wagmi/react/config\";\n- import { WagmiConfig } from \"wagmi\";\n- import { arbitrum, mainnet } from \"viem/chains\";\n\nimport { createApp } from \"vue\";\n// Add the following import\nimport { QueryClient, VueQueryPlugin } from \"@tanstack/vue-query\";\n\nimport App from \"./App.vue\";\n// Add the following code line\nconst queryClient = new QueryClient();\n\ncreateApp(App)\n  // Add the following code line\n  .use(VueQueryPlugin, { queryClient })\n  .mount(\"#app\");\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Modal Events with useAppKitEvents (React)\nDESCRIPTION: Allows subscribing to various modal and wallet-related events. This is useful for tracking user interactions, implementing analytics, or reacting to specific events within your application. Required dependency: `@reown/appkit/react`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/hooks.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAppKitEvents } from \"@reown/appkit/react\";\n\nconst events = useAppKitEvents();\n```\n\n----------------------------------------\n\nTITLE: Migrating Web3Modal Configuration to AppKit in React\nDESCRIPTION: Steps to replace the Web3Modal configuration with the Reown AppKit setup in React applications.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers-web.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following code line\n-createWeb3Modal({ ethersConfig, projectId, chains })\n\n// Add the following code lines\n  createAppKit({\n    adapters: [new EthersAdapter()],\n    networks: [mainnet, arbitrum],\n    metadata,\n    projectId,\n    features: {\n      analytics: true,\n    },\n  });\n```\n\n----------------------------------------\n\nTITLE: Closing WalletConnect Modal - JavaScript Example\nDESCRIPTION: Shows a simple JavaScript example of how to close the WalletConnect modal programmatically. This action dismisses the modal from the user interface.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nmodal.closeModal();\n```\n\n----------------------------------------\n\nTITLE: Installing iOS Native Modules via CocoaPods\nDESCRIPTION: Command to install the necessary native iOS modules using CocoaPods after adding the required React Native packages. This step ensures native dependencies are correctly linked in an iOS project.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/wagmi/email.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx pod-install\n```\n\n----------------------------------------\n\nTITLE: TypeScript Abstract Method for Executing Chain Transactions\nDESCRIPTION: Defines the abstract method 'execute' used to broadcast the necessary bridging and initial transactions, then waits for their completion. It requires the orchestration ID, signed bridge transactions, and the initial signed transaction, returning the execution result.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/chain-abstraction.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\npublic abstract execute(params: {\n  orchestrationId: ChainAbstractionTypes.OrchestrationId;\n  bridgeSignedTransactions: ChainAbstractionTypes.SignedTransaction[];\n  initialSignedTransaction: ChainAbstractionTypes.SignedTransaction;\n}): ChainAbstractionTypes.ExecuteResult;\n```\n\n----------------------------------------\n\nTITLE: Updating Reown AppKit Imports (React/TypeScript)\nDESCRIPTION: This snippet shows the required changes to import statements in a React application. It demonstrates removing imports related to Web3Modal v5 and `viem/chains` and adding imports for `createAppKit`, AppKit networks, and the Ethers v5 adapter from the `@reown` scope.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers5-web.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following imports\n- import { createWeb3Modal, defaultConfig } from '@web3modal/ethers5/react'\n- import { arbitrum, mainnet } from 'viem/chains'\n\n// Add the following imports\n+ import { createAppKit } from '@reown/appkit/react'\n+ import { arbitrum, mainnet } from '@reown/appkit/networks'\n+ import { Ethers5Adapter } from '@reown/appkit-adapter-ethers5'\n```\n\n----------------------------------------\n\nTITLE: Updating Interface Import to WalletKit (JavaScript)\nDESCRIPTION: Provides an example of updating type/interface imports, specifically replacing `IWeb3Wallet` from `@walletconnect/web3wallet` with `IWalletKit` from `@reown/walletkit` in JavaScript/TypeScript code as part of the library upgrade.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/upgrade/from-web3wallet-react-native.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/* highlight-delete-start */\nimport { IWeb3Wallet } from \"@walletconnect/web3wallet\";\n/* highlight-delete-end */\n/* highlight-add-start */\nimport { IWalletKit } from \"@reown/walletkit\";\n/* highlight-add-end */\n```\n\n----------------------------------------\n\nTITLE: Installing Unity Core Package (OpenUPM Shell)\nDESCRIPTION: Use the openupm-cli tool to add the com.walletconnect.core package to your Unity project using the OpenUPM registry.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nopenupm add com.walletconnect.core\n```\n\n----------------------------------------\n\nTITLE: Removing all test networks from support\nDESCRIPTION: This snippet illustrates how to clear all test networks from the supported networks list, which may be useful in production environments or to prevent testing chains from appearing.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/custom-chains.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Remove all test networks\nReownAppKitModalNetworks.removeTestNetworks();\n\n```\n\n----------------------------------------\n\nTITLE: Defining and Implementing a Custom Wallet Method (TypeScript/JavaScript)\nDESCRIPTION: Demonstrates how to extend WalletConnect functionality by defining a custom method (`polkadot_getSignedHex`) in the session namespace and providing its implementation in the wallet's codebase (TypeScript example shown). The example shows adding the method to the `methods` array in the namespace definition and includes a sample `getSignedHex` function that signs a payload and returns the transaction hex.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/polkadot/namespaces-guide.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Example Session Namespace\n{\n  \"polkadot\": {\n    \"accounts\": [\n        \"polkadot:91b171bb158e2d3848fa23a9f1c25182:AZBEwbZhYeiofodZnM2iAoshP3pXRPNSJEKFqEPDmvv1mY7\"\n    ],\n    \"methods\": [\n        \"polkadot_signMessage\",\n        \"polkadot_signTransaction\"\n        \"polkadot_getSignedHex\",\n    ],\n    \"events\": [\"accountsChanged\"],\n  }\n }\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// In the wallets codebase, you'd add functionality to be called when this new method is called from a WalletConnect session\n// Specific Example Implementation:\n\npublic async getSignedHex(payload: SignerPayloadJSON) {\n    this.registry.setSignedExtensions(payload.signedExtensions)\n    const txPayload = this.registry.createType('ExtrinsicPayload', payload, {\n      version: payload.version\n    });\n\n    const { signature } = txPayload.sign(this.keypair)\n\n    const extrinsic = registry.createType(\n        'Extrinsic',\n        { method: payload.method },\n        { version: payload.version }\n    );\n\n    extrinsic.addSignature(unsigned.address, signature, unsigned);\n\n    const hex = extrinsic.toHex();\n\n    return { hex };\n  }\n```\n\n----------------------------------------\n\nTITLE: Emitting bip122_addressesChanged Session Event in WalletConnect - JSON\nDESCRIPTION: This snippet provides an example JSON payload for the bip122_addressesChanged event following WalletConnect's session event specifications. The payload contains the event id, topic (session id), and parameters with the event name and an array of address detail objects. Each address object includes the associated Bitcoin address, its public key, and derivation path. Dapps use this structure to monitor the set of wallet addresses with UTXOs and react to changes in account state. Inputs include event metadata; outputs deliver the list of changed addresses. Limitations: This is an example payload for documentation, not a live implementation.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/bitcoin-rpc.mdx#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1675759795769537,\n  \"topic\": \"95d6aca451b8e3c6d9d176761bf786f1cc0a6d38dffd31ed896306bb37f6ae8d\",\n  \"params\": {\n    \"event\": {\n      \"name\": \"bip122_addressesChanged\",\n      \"data\": [\n        {\n          \"address\": \"bc1qcr8te4kr609gcawutmrza0j4xv80jy8z306fyu\",\n          \"publicKey\": \"0330d54fd0dd420a6e5f8d3624f5f3482cae350f79d5f0753bf5beef9c2d91af3c\",\n          \"path\": \"m/84'/0'/0'/0/0\"\n        },\n        {\n          \"address\": \"3KHhcgwPgYF9hE77zaKy2G36dpkcNtvQ33\",\n          \"publicKey\": \"03b90230ca20150142bc2849a3df4517073978f32466214a0ebc00cac52f996989\",\n          \"path\": \"m/49'/0'/0'/0/7\"\n        },\n        {\n          \"address\": \"bc1qp59yckz4ae5c4efgw2s5wfyvrz0ala7rgvuz8z\",\n          \"publicKey\": \"038ffea936b2df76bf31220ebd56a34b30c6b86f40d3bd92664e2f5f98488dddfa\",\n          \"path\": \"m/84'/0'/0'/0/2\"\n        },\n        {\n          \"address\": \"bc1qgl5vlg0zdl7yvprgxj9fevsc6q6x5dmcyk3cn3\",\n          \"publicKey\": \"03de7490bcca92a2fb57d782c3fd60548ce3a842cad6f3a8d4e76d1f2ff7fcdb89\",\n          \"path\": \"m/84'/0'/0'/0/3\"\n        },\n        {\n          \"address\": \"bc1qm97vqzgj934vnaq9s53ynkyf9dgr05rargr04n\",\n          \"publicKey\": \"03995137c8eb3b223c904259e9b571a8939a0ec99b0717684c3936407ca8538c1b\",\n          \"path\": \"m/84'/0'/0'/0/4\"\n        },\n        {\n          \"address\": \"bc1qv6vaedpeke2lxr3q0wek8dd7nzhut9w0eqkz9z\",\n          \"publicKey\": \"03d0d243b6a3176fa20fa95cd7fb0e8e0829b83fc2b52053633d088c1a4ba91edf\",\n          \"path\": \"m/84'/0'/0'/1/3\"\n        },\n        {\n          \"address\": \"bc1qetrkzfslk0d4kqjnu29fdh04tkav9vj3k36vuh\",\n          \"publicKey\": \"02a8dee7573bcc7d3c1e9b9e267dbf0cd717343c31d322c5b074a3a97090a0d952\",\n          \"path\": \"m/84'/0'/0'/1/4\"\n        }\n      ]\n    },\n    \"chainId\": \"bip122:000000000019d6689c085ae165831e93\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side SIWE Routes with Express and Viem\nDESCRIPTION: This code demonstrates setting up server-side Express routes for handling the SIWE flow. It includes endpoints for generating a nonce (`/nonce`), verifying the message and signature using `viem` (`/verify`), and retrieving the stored session (`/session`). It uses `express-session` for session management and `cors` for handling cross-origin requests.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/siwe/code.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport cors from \"cors\";\nimport express from \"express\";\nimport Session from \"express-session\";\nimport { generateNonce } from \"siwe\";\nimport {\n  /*verifySignature,*/\n  getAddressFromMessage,\n  getChainIdFromMessage,\n} from \"@reown/appkit-siwe\";\nimport { createPublicClient, http } from \"viem\";\n\nconst app = express();\n\nconst projectId = \"YOUR_PROJECT_ID\";\n\n// configure cors and sessions\napp.use(\n  cors({\n    origin: \"http://localhost:5173\", // frontend URL\n    credentials: true,\n  })\n);\napp.use(express.json());\napp.use(\n  Session({\n    name: \"siwe-quickstart\",\n    secret: \"siwe-quickstart-secret\",\n    resave: true,\n    saveUninitialized: true,\n    cookie: { secure: false, sameSite: true },\n  })\n);\n\napp.get(\"/nonce\", function (_, res) {\n  res.setHeader(\"Content-Type\", \"text/plain\");\n  res.send(generateNonce());\n});\n\n// verify the message\napp.post(\"/verify\", async (req, res) => {\n  try {\n    if (!req.body.message) {\n      return res.status(400).json({ error: \"SiweMessage is undefined\" });\n    }\n\n    // save the session with the address and chainId (SIWESession)\n    req.session.siwe = { address, chainId };\n    req.session.save(() => res.status(200).send(true));\n\n    const message = req.body.message;\n    const signature = req.body.signature;\n    const address = getAddressFromMessage(message);\n    let chainId = getChainIdFromMessage(message);\n\n    // for the moment, the verifySignature is not working with social logins and emails  with non deployed smart accounts\n    // for this reason we recommend using the viem to verify the signature\n    const publicClient = createPublicClient({\n      transport: http(\n        `https://rpc.walletconnect.org/v1/?chainId=${chainId}&projectId=${projectId}`\n      ),\n    });\n    const isValid = await publicClient.verifyMessage({\n      message,\n      address,\n      signature,\n    });\n    if (!isValid) {\n      // throw an error if the signature is invalid\n      throw new Error(\"Invalid signature\");\n    }\n    if (chainId.includes(\":\")) {\n      chainId = chainId.split(\":\")[1];\n    }\n\n    // Convert chainId to a number\n    chainId = Number(chainId);\n\n    if (isNaN(chainId)) {\n      throw new Error(\"Invalid chainId\");\n    }\n\n    // save the session with the address and chainId (SIWESession)\n    req.session.siwe = { address, chainId };\n    req.session.save(() => res.status(200).send(true));\n  } catch (e) {\n    // clean the session\n    req.session.siwe = null;\n    req.session.nonce = null;\n    req.session.save(() => res.status(500).json({ message: e.message }));\n  }\n});\n\n/// ... check the github repository for the others endpoints\n\n// get the session\napp.get(\"/session\", (req, res) => {\n  res.setHeader(\"Content-Type\", \"application/json\");\n  res.send(req.session.siwe);\n});\n```\n\n----------------------------------------\n\nTITLE: Rejecting WalletConnect Session Authentication Requests in TypeScript\nDESCRIPTION: Shows how to reject an incoming authentication request using `walletKit.rejectSessionAuthenticate`. It takes the request ID (`payload.id`) and a reason for rejection, typically obtained using `getSdkError` from `@walletconnect/utils` (e.g., `getSdkError(\"USER_REJECTED\")`). Requires the `@walletconnect/utils` dependency.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/one-click-auth.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getSdkError } from \"@walletconnect/utils\";\n\nawait walletKit.rejectSessionAuthenticate({\n  id: payload.id,\n  reason: getSdkError(\"USER_REJECTED\"), // or choose a different reason if applicable\n});\n```\n\n----------------------------------------\n\nTITLE: React app setup for Bitcoin wallet connection using Reown AppKit\nDESCRIPTION: Sets up the React environment for integrating Bitcoin wallets by importing necessary functions and classes from Reown's AppKit libraries. It configures the project ID, networks, and Bitcoin adapter outside of React components to optimize rendering. The setup includes defining metadata for branding and creating the AppKit modal with specified features like analytics and social integrations.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/bitcoin/about/implementation.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n<script setup lang=\"ts\">\n\nimport { createAppKit } from '@reown/appkit/react'\nimport { BitcoinAdapter } from '@reown/appkit-adapter-bitcoin'\nimport { bitcoin } from '@reown/appkit/networks'\n\n// 1. Get projectId from https://cloud.reown.com\nconst projectId = 'YOUR_PROJECT_ID'\n\n// 2. Set the networks\nconst networks = [bitcoin]\n\n// 3. Set up Bitcoin Adapter\nconst bitcoinAdapter = new BitcoinAdapter({\n  projectId\n})\n\n// 4. Create a metadata object - optional\nconst metadata = {\n  name: 'AppKit',\n  description: 'AppKit Bitcoin Example',\n  url: 'https://example.com', // origin must match your domain \\u0026 subdomain\n  icons: ['https://avatars.githubusercontent.com/u/179229932']\n}\n\n// 5. Create modal\ncreateAppKit({\n  adapters: [bitcoinAdapter],\n  networks,\n  metadata,\n  projectId,\n  features: {\n    analytics: true // Optional - defaults to your Cloud configuration,\n    email: false,\n    socials: []\n  }\n})\n</script>\n\n<template> // Rest of your app ... </template>\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying Analytics Component in MDX\nDESCRIPTION: This code snippet demonstrates how to import an Analytics component from a snippets directory and render it within an MDX document. The component is likely containing detailed documentation about analytics functionality.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/cloud/analytics.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Analytics from \"/snippets/cloud/analytics.mdx\";\n\n<Analytics />\n```\n\n----------------------------------------\n\nTITLE: Send Notify Notification via cURL in Bash\nDESCRIPTION: This cURL command shows how to send a notification from the command line. It performs a POST request to the `/notify` endpoint, setting the Authorization and Content-Type headers and providing the notification data in the request body.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/notifications/backend-integration.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST 'https://notify.walletconnect.com/<PROJECT_ID>/notify' \\\n  --header 'Authorization: Bearer <NOTIFY_API_SECRET>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"notification\": {\n      \"type\": \"a1e53b95-18e5-4af8-9f03-9308ec87b687\",\n      \"title\": \"The price of Ethereum has risen\",\n      \"body\": \"The price of Ethereum has gone up 10%\",\n      \"url\": \"https://app.example.com\"\n    },\n    \"accounts\": [\n      \"eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029\"\n    ]\n  }'\n```\n\n----------------------------------------\n\nTITLE: Updating Initialization Call for Reown WalletKit in JavaScript\nDESCRIPTION: Illustrates updating the initialization code from using `Web3Wallet.init()` to `WalletKit.init()` after importing the new @reown/walletkit package.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/upgrade/from-web3wallet-web.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/* highlight-delete-start */\nawait Web3Wallet.init()\n/* highlight-delete-end */\n/* highlight-add-start */\nawait WalletKit.init()\n/* highlight-add-end */\n```\n\n----------------------------------------\n\nTITLE: Updating imports for React implementation\nDESCRIPTION: Replace Web3Modal imports with Reown AppKit imports, including the Wagmi adapter and network imports. This setup is required to transition from Web3Modal to AppKit in React applications.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following imports\n- import { createWeb3Modal, defaultWagmiConfig } from '@web3modal/wagmi/react'\n- import { WagmiConfig } from 'wagmi'\n- import { arbitrum, mainnet } from 'wagmi/chains'\n\n// Add the following imports\n+ import { createAppKit } from '@reown/appkit/react'\n+ import { arbitrum, mainnet } from '@reown/appkit/networks'\n+ import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'\n+ import { WagmiProvider } from 'wagmi'\n\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\n```\n\n----------------------------------------\n\nTITLE: Using useAppKitError Hook for Error Handling in React Native\nDESCRIPTION: This code illustrates the use of useAppKitError to retrieve error states within a React component, allowing developers to handle or display errors related to AppKit wallet operations effectively.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers/hooks.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useAppKitError } from \"@reown/appkit-ethers-react-native\";\n\nfunction Components() {\n  const { error } = useAppKitError();\n\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Parameters for Starknet Sign Typed Data JSON-RPC\nDESCRIPTION: This JSON object provides an example of the `params` structure required for the `starknet_signTypedData` RPC call. It includes the `accountAddress` to be used for signing and the `typedData` object, which conforms to the Starknet Off-chain message specification, containing type definitions, domain information, and the message content to be signed.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/starknet-rpc.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"accountAddress\" : \"0x003a8278a26f32452f156260d81b93efb0eca126b44df7b005a5b27e2bbc4a64\",\n    \"typedData\" : {\n          \"types\" : {\n              \"StarkNetDomain \": [\n                  { \"name\" : \"name\", \"type\" : \"felt\" },\n                  { \"name\" : \"version\", \"type\" : \"felt\" },\n                  { \"name\" : \"chainId\", \"type\" : \"felt\" }\n              ],\n              \"Person\" : [\n                  { \"name\": \"name\", \"type\" : \"felt\" },\n                  { \"name\": \"wallet\", \"type\" : \"felt\" }eron\"\n              ],\n              \"Mail\": [\n                  { \"name\": \"from\", \"type\": \"Person\" },\n                  { \"name\": \"to\", \"type\": \"Person\" },\n                  { \"name\": \"contents\", \"type\" : \"felt\" }\n              ]\n          },\n          \"primaryType\" : \"Mail\",\n          \"domain\" : {\n              \"name\" : \"StarkNet Mail\",\n              \"version\" : \"1\",\n              \"chainId\" : 1\n          },\n          \"message\" : {\n              \"from\" : {\n                  \"name\" : \"Cow\",\n                  \"wallet\" : \"0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826\"\n              },\n              \"to\": {\n                  \"name\" : \"Bob\",\n                  \"wallet\" : \"0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB\"\n              },\n              \"contents\" : \"Hello, Bob!\"\n          }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing and Handling eth_getTransactionReceipt Session Requests in C#\nDESCRIPTION: Shows how to register an event handler OnEthTransactionReceiptRequest to respond asynchronously to incoming eth_getTransactionReceipt session requests from a dApp via the walletClient.Engine.SessionRequestEvents interface. The handler uses RequestEventArgs to access request parameters and set the response containing the transaction receipt. Dependencies include Task-based asynchronous programming and Wallet client event subscription.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/usage.mdx#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nwalletClient.Engine.SessionRequestEvents<EthGetTransactionReceipt, TransactionReceipt>().OnRequest += OnEthTransactionReceiptRequest;\n\nprivate Task OnEthTransactionReceiptRequest(RequestEventArgs<EthGetTransactionReceipt, TransactionReceipt> e)\n{\n    // logic for request goes here\n    // set e.Response to return a response\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\nprivate async Task OnEthTransactionReceiptRequest(RequestEventArgs<EthGetTransactionReceipt, TransactionReceipt> e)\n{\n    var txHash = e.Request.Params[0];\n    var receipt = await EthGetTransactionReceipt(txHash);\n    e.Response = receipt;\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to WalletConnect Modal State - JavaScript Example\nDESCRIPTION: Illustrates how to subscribe to changes in the WalletConnect modal's state using JavaScript. The provided callback function will be invoked whenever the modal's state updates.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nmodal.subscribeModal((state) => console.log(state));\n```\n\n----------------------------------------\n\nTITLE: Setting Account for Web3Inbox in React\nDESCRIPTION: This React component snippet handles setting the user account in Web3Inbox, a Web3 notification service. It requires the import of setting account logic and manages user identity for notifications.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/notifications/frontend-integration/api.mdx#_snippet_1\n\nLANGUAGE: MDX\nCODE:\n```\n<SettingAccount />\n```\n\n----------------------------------------\n\nTITLE: Checking Connection Status with TypeScript\nDESCRIPTION: Checks if a wallet is currently connected using `modal.getIsConnected()`. Returns a boolean value: true if connected, false otherwise.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/solana/actions.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst isConnected = modal.getIsConnected();\n```\n\n----------------------------------------\n\nTITLE: Logging Out Account from Notify API\nDESCRIPTION: Method to unregister an account from the Notify API, removing all associated subscriptions and messages from the client's storage.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/notifications/notify/usage.mdx#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\npublic func unregister(account: Account) async throws\n```\n\n----------------------------------------\n\nTITLE: Using useAppKitConnection Hook to Access Connection Object\nDESCRIPTION: This example illustrates how to employ the useAppKitConnection hook for obtaining the connection object in a React component, which interfaces with the Solana network. It refers to the official Connection class documentation for more details. The hook depends on '@reown/appkit-adapter-solana/react'.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/solana/hooks.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useAppKitConnection } from '@reown/appkit-adapter-solana/react'\n\n...\n\nconst { connection } = useAppKitConnection()\n```\n\n----------------------------------------\n\nTITLE: iOS WebSocketFactory with Allowed Domains in URLRequest\nDESCRIPTION: Provides an alternative WebSocketFactory implementation that customizes WebSocket requests with headers, specifically setting the 'Origin' header to a specific domain. This approach is useful when there are domain restrictions in the Reown Cloud Dashboard and ensures correct origin declaration during WebSocket handshake.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/relay.mdx#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nimport Starscream\n\nextension WebSocket: WebSocketConnecting { }\n\nstruct DefaultSocketFactory: WebSocketFactory {\n    func create(with url: URL) -> WebSocketConnecting {\n        var urlRequest = URLRequest(url: url)\n        urlRequest.addValue(\"allowed.domain.com\", forHTTPHeaderField: \"Origin\")\n        return WebSocket(request: urlRequest)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using WalletConnectModalConnect Widget Flutter\nDESCRIPTION: Shows how to use the built-in `WalletConnectModalConnect` Flutter widget, which provides a button that interacts with the WalletConnectModalService to open the modal and manages its state based on the connection.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nWalletConnectModalConnect(\n  walletConnectModalService: _service,\n),\n```\n\n----------------------------------------\n\nTITLE: Updating imports for JavaScript implementation\nDESCRIPTION: Replace Web3Modal JavaScript imports with Reown AppKit imports. This setup enables the transition from Web3Modal to AppKit in vanilla JavaScript applications.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_22\n\nLANGUAGE: ts\nCODE:\n```\n// Remove the following imports\n- import { createWeb3Modal, defaultWagmiConfig } from '@web3modal/wagmi'\n- import { createConfig } from '@wagmi/core'\n- import { mainnet, arbitrum } from '@wagmi/core/chains'\n\n// Add the following imports\n+ import { createAppKit } from '@reown/appkit'\n+ import { arbitrum, mainnet } from '@reown/appkit/networks'\n+ import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with Ethers (v6) Adapter Using Bash\nDESCRIPTION: Lists the command-line commands to install Reown AppKit along with the Ethers (v6) adapter for Vue, enabling Ethereum blockchain integration using the latest ethers version. Multiple package managers are supported to facilitate user choice.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/installation.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit @reown/appkit-adapter-ethers ethers\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit @reown/appkit-adapter-ethers ethers\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @reown/appkit @reown/appkit-adapter-ethers ethers\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit @reown/appkit-adapter-ethers ethers\n```\n\n----------------------------------------\n\nTITLE: WebGL Build Requirements for WalletConnect Unity\nDESCRIPTION: This section explains the limitations of WebGL builds regarding asynchronous code execution and introduces the WebGLThreadingPatcher package, which enables multithreading-like behavior by modifying Unity WebGL's threading model.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/overview.mdx#_snippet_10\n\nLANGUAGE: Text\nCODE:\n```\nDue to WebGL's single-threaded nature, certain async operations like Task.Run and ConfigureAwait(false) are unsupported.\nTo enable these, add the WebGLThreadingPatcher package:\nhttps://github.com/VolodymyrBS/WebGLThreadingPatcher.git\n```\n\n----------------------------------------\n\nTITLE: Extracting Wallet Provider and Account Details with AppKit Hooks in JavaScript\nDESCRIPTION: This snippet uses the useAppKitProvider and useAppKitAccount hooks to retrieve the walletProvider instance (enabling signing and transactions) and account connection status/details. It is required for subsequent wallet actions like message signing and should be placed within a component tree where AppKit context is available.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/solana-send-transaction.mdx#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Get the wallet provider with the AppKit hook\nconst { walletProvider } = useAppKitProvider < Provider > \"solana\";\n\n// AppKit hook to get the address and check if the user is connected\nconst { address, isConnected } = useAppKitAccount();\n```\n\n----------------------------------------\n\nTITLE: Launching Block Explorer using Reown AppKit (Dart)\nDESCRIPTION: Invokes the `launchBlockExplorer` method provided by `_appKitModal`. This action opens the default web browser to the block explorer URL configured for the currently selected blockchain network, allowing users to easily view on-chain activity.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/actions.mdx#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\n_appKitModal.launchBlockExplorer();\n```\n\n----------------------------------------\n\nTITLE: Installing WalletKit with bun in bash\nDESCRIPTION: Installs the required WalletKit and WalletConnect packages using the bun package manager, supporting fast JavaScript and TypeScript bundling. Requires bun to be configured in the development environment.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/installation.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbun add @reown/walletkit @walletconnect/utils @walletconnect/core\n```\n\n----------------------------------------\n\nTITLE: Updating imports for Vue implementation\nDESCRIPTION: Replace Web3Modal Vue imports with Reown AppKit Vue imports, including the Wagmi adapter. This setup is required to transition from Web3Modal to AppKit in Vue applications.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following imports\n- import { createWeb3Modal, defaultWagmiConfig } from '@web3modal/wagmi/vue'\n- import { WagmiConfig } from 'wagmi'\n- import { arbitrum, mainnet } from 'wagmi/chains'\n\n// Add the following imports\n+ import { createAppKit } from '@reown/appkit/vue'\n+ import { arbitrum, mainnet } from '@reown/appkit/networks'\n+ import { WagmiAdapter } from '@reown/appkit-adapter-wagmi'\n+ import { WagmiPlugin } from '@wagmi/vue';\n```\n\n----------------------------------------\n\nTITLE: Delete an Existing Push Notification Subscription by Topic in Swift\nDESCRIPTION: Shows the usage of awaitable function deleteSubscription(topic:) on the Notify singleton instance to delete a subscription identified by its String topic. The call is throwable, thus it must be awaited and wrapped in do-catch or propagated. This operation removes the subscription for the given topic from the Notify server.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\ntry await Notify.instance.deleteSubscription(topic: String)\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Deep Linking Schemes\nDESCRIPTION: XML snippet for the iOS `Info.plist` file. It adds supported URL schemes (`LSApplicationQueriesSchemes`) allowing the app to query if specific wallet apps are installed for deep linking.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<key>LSApplicationQueriesSchemes</key>\n<array>\n  <string>metamask</string>\n  <string>rainbow</string>\n  <string>trust</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Installing Core Reown AppKit & Web3 Libraries via Expo CLI\nDESCRIPTION: This command uses the Expo CLI (`npx expo install`) to install the primary Reown AppKit package for React Native (`@reown/appkit-wagmi-react-native`), along with essential Web3 libraries Wagmi, Viem, and the state management library TanStack React Query. Using `npx expo install` ensures compatibility with the project's Expo SDK version.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/wagmi/about/installation-expo.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo install @reown/appkit-wagmi-react-native wagmi viem @tanstack/react-query\n```\n\n----------------------------------------\n\nTITLE: Sending Bitcoin Transfer via sendTransfer JSON-RPC\nDESCRIPTION: Example JSON-RPC request and response for the `sendTransfer` method. The request specifies the sender account (first external address), recipient address, amount in satoshis, and an optional memo. The successful response returns the transaction ID (txid).\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/bitcoin-rpc.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// Request\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"sendTransfer\",\n    \"params\": {\n        \"account\": \"bc1qcr8te4kr609gcawutmrza0j4xv80jy8z306fyu\",\n        \"recipientAddress\": \"bc1pmzfrwwndsqmk5yh69yjr5lfgfg4ev8c0tsc06e\",\n        \"amount\": \"123000000\",\n        \"memo\": \"636861726c6579206c6f766573206865\"\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n// Result\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"txid\": \"f007551f169722ce74104d6673bd46ce193c624b8550889526d1b93820d725f7\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Blockchain API Component in JavaScript\nDESCRIPTION: This snippet imports the BlockchainAPI React component from an external module located at \"/snippets/cloud/blockchain-api.mdx\". It prepares the component for rendering within a React application, facilitating blockchain interactions.\n\nDependencies include React and the specified module path. The import statement must be placed at the top of the React component file to utilize <BlockchainAPI > in rendering.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/cloud/blockchain-api.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BlockchainAPI from \"/snippets/cloud/blockchain-api.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Retrieving Web3Inbox Notification Types - React - TypeScript\nDESCRIPTION: This snippet demonstrates how to fetch available notification types using the new `useNotificationTypes` hook, which replaces `useSubscriptionScopes`. Notification types now contain image URLs in different sizes (`sm`, `md`, `lg`), which can be accessed from the fetched `notificationTypes` data using the notification's type.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/migration/react.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n- import { useSubscriptionScopes } from \"@web3inbox/widget-react\"\n+ import { useNotificationTypes } from \"@web3inbox/react\"\n\n- const { scopes } = useSubscriptionScopes()\n+ const { data: notificationTypes } = useNotificationTypes()\n+ const notificationImageUrl = notificationTypes[notification.type].imageUrls.md;\n```\n\n----------------------------------------\n\nTITLE: Rejecting Authentication Requests in Swift\nDESCRIPTION: This snippet shows how to reject an authentication request when it cannot be approved or when a user chooses to decline it. It uses the rejectSession method with the request ID.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/one-click-auth.mdx#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\ntry await WalletKit.instance.rejectSession(requestId: requestId)\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Modal Events with useAppKitEvents in Vue\nDESCRIPTION: Shows how to import and use the `useAppKitEvents` composable from `@reown/appkit/vue`. This allows subscribing to events emitted by the AppKit modal. The returned `events` object provides access to event data including `timestamp`, event name (`data.event`), and additional event properties (`data.properties`).\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/composables.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAppKitEvents } from \"@reown/appkit/vue\";\n\nconst events = useAppKitEvents();\n```\n\n----------------------------------------\n\nTITLE: SIWE Configuration Interface Definition\nDESCRIPTION: This snippet defines the SIWEConfig interface outlining mandatory methods for nonce retrieval, message creation, message verification, session fetching, and signing out, along with optional lifecycle callbacks and session management flags. It provides the structure for implementing blockchain-based session management in web applications.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/siwe.mdx#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface SIWEConfig {\n  // Required\n  getNonce: () => Promise<string>;\n  createMessage: (args: SIWECreateMessageArgs) => string;\n  verifyMessage: (args: SIWEVerifyMessageArgs) => Promise<boolean>;\n  getSession: () => Promise<SIWESession | null>;\n  signOut: () => Promise<boolean>;\n\n  // Optional\n  onSignIn?: (session?: SIWESession) => void;\n  onSignOut?: () => void;\n  // Defaults to true\n  enabled?: boolean;\n  // In milliseconds, defaults to 5 minutes\n  nonceRefetchIntervalMs?: number;\n  // In milliseconds, defaults to 5 minutes\n  sessionRefetchIntervalMs?: number;\n  // Defaults to true\n  signOutOnDisconnect?: boolean;\n  // Defaults to true\n  signOutOnAccountChange?: boolean;\n  // Defaults to true\n  signOutOnNetworkChange?: boolean;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Managing Subscription Preferences in React\nDESCRIPTION: This snippet provides a React component for managing user subscription preferences, allowing users to activate or deactivate notification subscriptions. It forms part of the subscription management workflow in the notification API.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/notifications/frontend-integration/api.mdx#_snippet_3\n\nLANGUAGE: MDX\nCODE:\n```\n<Managing />\n```\n\n----------------------------------------\n\nTITLE: TypeScript for Retrieving Subscribers via /v1/<project-id>/subscribers\nDESCRIPTION: This code demonstrates how to request subscriber information for a list of accounts, testing whether each is subscribed and retrieving their notification types. It involves constructing a POST request with account IDs, including authorization headers, and parsing the response into a map of accounts and their notification types. Dependencies include fetch API; input parameters are account IDs, output is subscriber data or empty if not subscribed.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/notifications/backend-integration.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst PROJECT_ID = '<PROJECT_ID>';\nconst NOTIFY_API_SECRET = '<NOTIFY_API_SECRET>';\nconst requestBody: RequestBody = {\n  accounts: [\n    'eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029',\n    'eip155:1:0x0000000000000000000000000000000000000000'\n  ]\n};\n\nconst response = await fetch(`https://notify.walletconnect.com/v1/${PROJECT_ID}/subscribers`, {\n  method: 'POST',\n  headers: {\n    Authorization: `Bearer ${NOTIFY_API_SECRET}`\n  },\n  body: JSON.stringify(requestBody)\n});\n\nconst subscribers: ResponseBody = await response.json();\n\n// Types\n// type RequestBody = {\n//   accounts: string[] // Max 100 accounts\n// }\n// type ResponseBody = {\n//   [account: string]: Subscriber\n// }\n// type Subscriber = {\n//   notification_types: string[]\n// }\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Token Contracts Mapping - TypeScript\nDESCRIPTION: This TypeScript object assigns custom token contract addresses to specific blockchain networks using their numeric chain IDs (e.g., 1 for Ethereum Mainnet, 137 for Polygon). Dependencies include a configuration or account view module that supports a 'tokenContracts' field. Expected input is an object with chain ID keys mapped to contract address strings; outputs are updated token balances based on these custom contracts. This allows user interfaces to display balances for tokens differing from the default configuration. Addresses must be valid Ethereum contract addresses. If omitted, defaults to undefined and built-in contracts are used.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/web3modal/v2/_partials/options/tokenContracts.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntokenContracts: {\n  1: '0x1f9840a85d5af5bf1d1762f925bdaddc4201f984',\n  137: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174'\n}\n```\n\n----------------------------------------\n\nTITLE: Installing WalletConnectModal in Android using Gradle and Kotlin (Gradle)\nDESCRIPTION: Details setup instructions to include WalletConnectModal on Android with Kotlin using Gradle configuration files. Lists the addition of mavenCentral and jitpack repositories and usage of the Android BOM for consistent dependency versions. Requires Android minimum SDK 23 and Java 11. Includes implementation lines for android-core and walletconnect-modal libraries.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/about.mdx#_snippet_2\n\nLANGUAGE: gradle\nCODE:\n```\nallprojects {\\n   repositories {\\n      mavenCentral()\\n      maven { url \"https://jitpack.io\" }\\n   }\\n}\n```\n\nLANGUAGE: gradle\nCODE:\n```\nimplementation(platform(\"com.walletconnect:android-bom:$BOM_VERSION\"))\\nimplementation(\"com.walletconnect:android-core\")\\nimplementation(\"com.walletconnect:walletconnect-modal\")\n```\n\n----------------------------------------\n\nTITLE: Opening WalletConnect Modal - Android View Kotlin DSL\nDESCRIPTION: Demonstrates how to open the WalletConnect modal from an Android View fragment when using Kotlin DSL navigation. It calls the `openWalletConnectModal` extension function on the `NavController`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_32\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.navigation.fragment.findNavController\nimport com.walletconnect.wcmodal.ui.openWalletConnectModal\n\nfindNavController().openWalletConnectModal()\n```\n\n----------------------------------------\n\nTITLE: Integrating Custom TestNet into WagmiAdapter Configuration in TypeScript\nDESCRIPTION: Updates `config/index.tsx` to integrate the custom Tenderly Virtual TestNet (`vTestnet`). It imports the `vTestnet` configuration, adds it to the `networks` array alongside other networks like `mainnet` and `arbitrum`, and configures its specific HTTP transport within the `WagmiAdapter` instance using the RPC URL from the `TENDERLY_VIRTUAL_TESTNET_RPC` environment variable. This step ensures Wagmi and AppKit can communicate with the Tenderly Virtual TestNet.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/tenderly-virtual-testnets.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { cookieStorage, createStorage, http } from \"@wagmi/core\";\nimport { WagmiAdapter } from \"@reown/appkit-adapter-wagmi\";\nimport { mainnet, arbitrum } from \"@reown/appkit/networks\";\nimport { vTestnet } from \"@/app/tenderly.config\";\n\n// Get projectId from https://cloud.reown.com\nexport const projectId = process.env.NEXT_PUBLIC_PROJECT_ID;\n\nif (!projectId) {\n  throw new Error(\"Project ID is not defined\");\n}\n\nexport const networks = [mainnet, arbitrum, vTestnet];\n\n//Set up the Wagmi Adapter (Config)\nexport const wagmiAdapter = new WagmiAdapter({\n  storage: createStorage({\n    storage: cookieStorage,\n  }),\n  ssr: true,\n  transports: {\n    [vTestnet.id]: http(process.env.TENDERLY_VIRTUAL_TESTNET_RPC!),\n  },\n  networks,\n  projectId,\n});\n\nexport const config = wagmiAdapter.wagmiConfig;\n```\n\n----------------------------------------\n\nTITLE: Initializing Web3Modal with Custom Wagmi Config in JavaScript (TS)\nDESCRIPTION: This advanced JavaScript (TypeScript) snippet shows how to manually configure Wagmi with mainnet and sepolia chains using connectors such as walletConnect, injected, and coinbaseWallet, along with http transports for these chains. Metadata including app name, description, URL, and icon is included to configure connectors properly. It also imports reconnect from wagmi/core and invokes it after config creation to maintain connection state. createWeb3Modal is called with the configuration and projectId, enabling optional analytics. The snippet removes legacy EthereumClient and Web3Modal imports, focusing on a modern modular setup.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/appkitv2.mdx#_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport { Web3Modal, walletConnectProvider } from '@web3modal/wagmi'\nimport { createConfig, reconnect, http } from '@wagmi/core'\nimport { mainnet, sepolia } from '@wagmi/core/chains'\nimport { walletConnect, injected, coinbaseWallet } from '@wagmi/connectors'\n\nconst projectId = 'YOUR_PROJECT_ID'\n\nconst metadata = {\n  name: 'AppKit',\n  description: 'AppKit Example',\n  url: 'https://example.com',\n  icons: ['https://avatars.githubusercontent.com/u/179229932']\n}\n\nconst wagmiConfig = createConfig({\n  chains: [mainnet, sepolia],\n  transports: {\n    [mainnet.id]: http(),\n    [sepolia.id]: http()\n  },\n  connectors: [\n    walletConnect({ projectId, metadata, showQrModal: false }),\n    injected({ shimDisconnect: true }),\n    coinbaseWallet({ appName: metadata.name, appLogoUrl: metadata.icons[0] })\n  ]\n})\n\nreconnect(wagmiConfig)\n\ncreateWeb3Modal({\n  wagmiConfig,\n  projectId,\n  enableAnalytics: true\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Web3Inbox Widget with Bun (Bash)\nDESCRIPTION: Uses Bun to add @web3inbox/core and @web3inbox/widget-react to the project. Requires that Bun is installed and initialized in the project directory. This approach helps developers who prefer Bun for fast JavaScript and TypeScript package management, ensuring the project is set up for Web3Inbox Widget integration.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/notifications/embedded-widget/about.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbun a @web3inbox/core @web3inbox/widget-react\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue.js setup with Solana web3.js for counter increment operation\nDESCRIPTION: This Vue.js setup function initializes state variables, wallet and connection providers, and defines a function to create and increment a counter account on the Solana blockchain. It manages account creation, transaction assembly, signing, and confirmation, with error handling to update the UI message accordingly.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/solana/programs.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ref } from 'vue';\nimport {\n  SystemProgram,\n  PublicKey,\n  Keypair,\n  Transaction,\n  TransactionInstruction,\n  LAMPORTS_PER_SOL\n} from '@solana/web3.js';\nimport { useAppKitAccount, useAppKitProvider } from '@reown/appkit/vue'\nimport { useAppKitConnection, type Provider } from '@reown/appkit-adapter-solana/vue'\n\nexport default {\n  setup() {\n    const counterMessage = ref('');\n    const { address } = useAppKitAccount();\n    const { connection } = useAppKitConnection()\n    const { walletProvider } = useAppKitProvider<Provider>('solana')\n\n    function deserializeCounterAccount(data) {\n      if (data?.byteLength !== 8) {\n        throw Error('Need exactly 8 bytes to deserialize counter');\n      }\n\n      return {\n        count: Number(data[0])\n      };\n    }\n\n    async function onIncrementCounter() {\n      try {\n        const PROGRAM_ID = new PublicKey('Cb5aXEgXptKqHHWLifvXu5BeAuVLjojQ5ypq6CfQj1hy');\n\n        const counterKeypair = Keypair.generate();\n        const counter = counterKeypair.publicKey;\n\n        const balance = await connection.getBalance(walletProvider.publicKey);\n        if (balance < LAMPORTS_PER_SOL / 100) {\n          throw Error('Not enough SOL in wallet');\n        }\n\n        const COUNTER_ACCOUNT_SIZE = 8;\n        const allocIx = SystemProgram.createAccount({\n          fromPubkey: walletProvider.publicKey,\n          newAccountPubkey: counter,\n          lamports: await connection.getMinimumBalanceForRentExemption(COUNTER_ACCOUNT_SIZE),\n          space: COUNTER_ACCOUNT_SIZE,\n          programId: PROGRAM_ID\n        });\n\n        const incrementIx = new TransactionInstruction({\n          programId: PROGRAM_ID,\n          keys: [\n            {\n              pubkey: counter,\n              isSigner: false,\n              isWritable: true\n            }\n          ],\n          data: Buffer.from([0x0])\n        });\n\n        const tx = new Transaction().add(allocIx).add(incrementIx);\n\n        tx.feePayer = walletProvider.publicKey;\n        tx.recentBlockhash = (await connection.getLatestBlockhash('confirmed')).blockhash;\n\n        await walletProvider.signAndSendTransaction(tx, [counterKeypair]);\n\n        const counterAccountInfo = await connection.getAccountInfo(counter, {\n          commitment: 'confirmed'\n        });\n\n        if (!counterAccountInfo) {\n          throw new Error('Expected counter account to have been created');\n        }\n\n        const counterAccount = deserializeCounterAccount(counterAccountInfo?.data);\n\n        if (counterAccount.count !== 1) {\n          throw new Error('Expected count to have been 1');\n        }\n\n        counterMessage.value = `[alloc+increment] count is: ${counterAccount.count}`;\n      } catch (error) {\n        console.error(error);\n        counterMessage.value = `Error: ${error.message}`;\n      }\n    }\n\n    return {\n      onIncrementCounter,\n      counterMessage\n    };\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Excluding Wallet IDs from WalletConnect Options in Unity (C#)\nDESCRIPTION: This C# snippet describes how to create an array of wallet IDs to exclude from availability within WalletConnect's wallet lists. By listing IDs copied from WalletGuide, developers can prevent specified wallets from appearing in user options. This configuration depends on the WalletConnect Unity SDK, and should be set prior to session initialization for expected effect.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/options.mdx#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nExcludedWalletIds = new[]\n{\n    \"c57ca95b47569778a828d19178114f4db188b89b763c899ba0be274e97267d96\", // MetaMask\n    \"4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0\", // Trust\n}\n```\n\n----------------------------------------\n\nTITLE: Sending an EVM Transaction Using wagmi Hooks in React\nDESCRIPTION: This code illustrates how to estimate gas for a transaction, send the transaction with wagmi's useSendTransaction hook, and check user connection status via Reown AppKit. It includes preparing transaction parameters, estimating gas, and defining a function to initiate the transaction when triggered by user interaction.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/wagmi-send-transaction.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useEstimateGas, useSendTransaction } from \"wagmi\";\nimport { parseGwei, type Address } from \"viem\";\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// test transaction details\nconst TEST_TX = {\n  to: \"0xd8da6bf26964af9d7eed9e03e53415d37aa96045\" as Address, // vitalik address\n  value: parseGwei('0.0001')\n};\n\n// Wagmi hook to estimate gas\nconst { data: gas } = useEstimateGas({ ...TEST_TX });\n\n// Wagmi hook to send transaction\nconst { data: hash, sendTransaction } = useSendTransaction();\n\n// AppKit hook to check if user is connected\nconst { isConnected } = useAppKitAccount();\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// function to send transaction\nconst handleSendTx = () => {\n  try {\n    sendTransaction({\n      ...TEST_TX,\n      gas, // include estimated gas\n    });\n  } catch (err) {\n    console.log(\"Error sending transaction:\", err);\n  }\n};\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Rendering button to trigger transaction sending when connected\nreturn (\n  isConnected && (\n    <div>\n      <button onClick={handleSendTx}>Send Transaction</button>\n    </div>\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Getting Wallet Provider Type with TypeScript\nDESCRIPTION: Retrieves the type or protocol name of the connected wallet provider using `modal.getWalletProviderType()`. Useful for identifying the specific wallet or connection method (e.g., 'MetaMask', 'WalletConnect').\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/solana/actions.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst walletProviderType = modal.getWalletProviderType();\n```\n\n----------------------------------------\n\nTITLE: Defining Default Session Parameters in Swift\nDESCRIPTION: Illustrates how to define standard required namespaces for a dApp connection, specifying supported blockchains (like eip155:1 for Ethereum mainnet), methods (like eth_sendTransaction, personal_sign), and events. These parameters are used by default if not explicitly overridden during configuration.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/usage.mdx#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet methods: Set<String> = [\"eth_sendTransaction\", \"personal_sign\", \"eth_signTypedData\"]\nlet events: Set<String> = [\"chainChanged\", \"accountsChanged\"]\nlet blockchains: Set<Blockchain> = [Blockchain(\"eip155:1\")!]\nlet namespaces: [String: ProposalNamespace] = [\n    \"eip155\": ProposalNamespace(\n        chains: blockchains,\n        methods: methods,\n        events: events\n    )\n]\n\nlet defaultSessionParams =  SessionParams(\n                                requiredNamespaces: namespaces,\n                                optionalNamespaces: nil,\n                                sessionProperties: nil\n                            )\n```\n\n----------------------------------------\n\nTITLE: Adding Web3Inbox Core and Widget via Yarn (Bash)\nDESCRIPTION: Adds @web3inbox/core and @web3inbox/widget-react as dependencies using the Yarn package manager. Execute this command from your project directory with Yarn already set up. This updates package.json and installs new dependencies into node_modules. Yarn must be installed prior to running this command.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/embedded-widget/about.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @web3inbox/core @web3inbox/widget-react\n```\n\n----------------------------------------\n\nTITLE: Listening for WalletConnect Notify Events (JavaScript)\nDESCRIPTION: Illustrates setting up event listeners on the `notifyClient` instance to handle various asynchronous events. Events covered include successful subscriptions (`notify_subscription`), incoming messages (`notify_message`), subscription updates (`notify_update`), and changes to the list of active subscriptions (`notify_subscriptions_changed`). These handlers are essential for reacting to SDK activity and updating the application state or UI.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Handle response to a `notifyClient.subscribe(...)` call\nnotifyClient.on(\"notify_subscription\", async ({ params }) => {\n  const { error } = params;\n\n  if (error) {\n    // Setting up the subscription failed.\n    // Inform the user of the error and/or clean up app state.\n    console.error(\"Setting up subscription failed: \", error);\n  } else {\n    // New subscription was successfully created.\n    // Inform the user and/or update app state to reflect the new subscription.\n    console.log(\"Subscribed successfully.\");\n  }\n});\n\n// Handle an incoming notification\nnotifyClient.on(\"notify_message\", ({ params }) => {\n  const { message } = params;\n  // e.g. build a notification using the metadata from `message` and show to the user.\n});\n\n// Handle response to a `notifyClient.update(...)` call\nnotifyClient.on(\"notify_update\", ({ params }) => {\n  const { error } = params;\n\n  if (error) {\n    // Updating the subscription's scope failed.\n    // Inform the user of the error and/or clean up app state.\n    console.error(\"Setting up subscription failed: \", error);\n  } else {\n    // Subscription's scope was updated successfully.\n    // Inform the user and/or update app state to reflect the updated subscription.\n    console.log(\"Successfully updated subscription scope.\");\n  });\n\n// Handle a change in the existing subscriptions (e.g after a subscribe or update)\nnotifyClient.on(\"notify_subscriptions_changed\", ({ params }) => {\n  const { subscriptions } = params;\n  // `subscriptions` will contain any *changed* subscriptions since the last time this event was emitted.\n  // To get a full list of subscriptions for a given account you can use `notifyClient.getActiveSubscriptions({ account: 'eip155:1:0x63Be...' })`\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current ReownAppKitModalThemeData in Dart\nDESCRIPTION: Accesses the currently active ReownAppKitModalThemeData in the widget tree by calling ReownAppKitModalTheme.getDataOf(context). This returns the effective theme data used for theming ReownAppKitModal widgets. Requires passing a valid BuildContext.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/theming.mdx#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nfinal data = ReownAppKitModalTheme.getDataOf(context);\n```\n\n----------------------------------------\n\nTITLE: Handling Pairing Expiry Event in WalletKit\nDESCRIPTION: Shows how to subscribe to the 'pairing_expire' event on the core pairing object. This event is emitted when a pairing connection expires, allowing the wallet UI to update accordingly.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/best-practices.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncore.pairing.events.on(\"pairing_expire\", (event) => {\n    // pairing expired before user approved/rejected a session proposal\n    const { topic } = topic;\n});\n```\n\n----------------------------------------\n\nTITLE: Installing WalletConnect Modal using OpenUPM CLI (Bash Command)\nDESCRIPTION: This script demonstrates how to add the WalletConnect Modal package to a Unity project using the OpenUPM command-line interface. Dependencies include Node.js and openupm-cli, and it simplifies package management via terminal commands.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/about.mdx#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nopenupm add com.walletconnect.modal\n```\n\n----------------------------------------\n\nTITLE: Create Custom Theme Data - WalletConnectModal Flutter - Dart\nDESCRIPTION: Shows an example of creating a `WalletConnectModalThemeData` object with various color and dimension properties to define a custom visual theme for the WalletConnectModal in Flutter.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/theming.mdx#_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\n// Dark Mode Theme\nWalletConnectModalThemeData(\n  primary100: Color(0xFF47A1FF),\n  primary090: Color(0xFF59AAFF),\n  primary080: Color(0xFF6CB4FF),\n  overlay002: Color.fromARGB(5, 255, 255, 255),\n  overlay005: Color.fromARGB(13, 255, 255, 255),\n  overlay010: Color.fromARGB(26, 255, 255, 255),\n  overlay020: Color.fromARGB(51, 255, 255, 255),\n  overlay030: Color.fromARGB(77, 255, 255, 255),\n  foreground100: Color(0xFFE4E7E7),\n  foreground200: Color(0xFF949E9E),\n  foreground275: Color(0xFF788181),\n  foreground300: Color(0xFF6E7777),\n  background100: Color(0xFF141414),\n  background200: Color(0xFF272A2A),\n  background300: Color(0xFF3B4040),\n  inverse000: Color(0xFF000000),\n  inverse100: Color(0xFFFFFFFF),\n  error: Color(0xFFF25A67),\n  success: Color(0xFF26D962),\n  fontFamily: 'roboto',\n  radius4XS: 6.0,\n  radius3XS: 8.0,\n  radius2XS: 12.0,\n  radiusXS: 16.0,\n  radiusS: 20.0,\n  radiusM: 28.0,\n  radiusL: 36.0,\n  radius3XL: 80.0,\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Link Mode with AppMetadata in AppKit\nDESCRIPTION: Implementation example for setting up Link Mode in AppKit, which enables low-latency authentication via universal links. This requires configuring AppMetadata.Redirect with valid universal links and enabling the linkMode property.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/one-click-auth.mdx#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet metadata = AppMetadata(\n    ...\n    redirect: try! AppMetadata.Redirect(native: \"exampleApp://\", universal: \"https://example.com/example_dapp\", linkMode: true)\n)\n\nAppKit.configure(\n    ...\n    metadata: metadata,\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Expo-Specific Dependencies\nDESCRIPTION: Installs the expo-application package which is specifically required when using WalletKit with Expo projects.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/installation.mdx#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx expo install expo-application\n```\n\n----------------------------------------\n\nTITLE: Subscribing to AppKit Events in C#\nDESCRIPTION: This snippet shows how to attach event handlers to key AppKit events using C#. It covers initialization, account connection/disconnection, account changes, and chain changes. Dependencies include the AppKit library and appropriate imports for event arguments. Handlers often receive the sender and eventArgs parameters, with eventArgs exposing properties like Account and Chain for accessing updated state. The handlers enable custom logic to be executed when specific AppKit lifecycle events occur.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/events.mdx#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n//Invoked after successful initialization of AppKit\nAppKit.Initialized += (sender, eventArgs) => { };\n\n// Invoked after successful connection of an account\nAppKit.AccountConnected += (sender, eventArgs) => {\n    Account activeAccount = eventArgs.GetAccount();\n};\n\n// Invoked after successful disconnection of an account\nAppKit.AccountDisconnected += (sender, eventArgs) => { };\n\n// Invoked after account has changed\n// This happens when the wallet updates a session or the user changes the active chain.\nAppKit.AccountChanged += (sender, eventArgs) => {\n    Account newAccount = eventArgs.Account;\n};\n\n// Invoked after active chain has changed\nAppKit.ChainChanged += (sender, eventArgs) => {\n    Chain newChain = eventArgs.Chain;\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Reown AppKit with Ethers Adapter in React TypeScript (TSX)\nDESCRIPTION: This snippet defines a new AppKit configuration file ('context/appkit.tsx') that sets up the Reown AppKit instance using the EthersAdapter and specifies blockchain networks (mainnet and arbitrum). It includes project metadata (name, description, URL, icons) and a required projectId obtained from https://cloud.reown.com. The exported AppKit component wraps the application, requiring the presence of <appkit-button> within the app. Dependencies include '@reown/appkit/react', '@reown/appkit-adapter-ethers', and '@reown/appkit/networks'.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/ethers/about/implementation.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { createAppKit } from \"@reown/appkit/react\";\nimport { EthersAdapter } from \"@reown/appkit-adapter-ethers\";\nimport { mainnet, arbitrum } from \"@reown/appkit/networks\";\n\n// 1. Get projectId at https://cloud.reown.com\nconst projectId = \"YOUR_PROJECT_ID\";\n\n// 2. Create a metadata object\nconst metadata = {\n  name: \"My Website\",\n  description: \"My Website description\",\n  url: \"https://mywebsite.com\", // origin must match your domain & subdomain\n  icons: [\"https://avatars.mywebsite.com/\"],\n};\n\n// 3. Create the AppKit instance\ncreateAppKit({\n  adapters: [new EthersAdapter()],\n  metadata,\n  networks: [mainnet, arbitrum],\n  projectId,\n  features: {\n    analytics: true, // Optional - defaults to your Cloud configuration\n  },\n});\n\nexport function AppKit() {\n  return (\n    <YourApp /> //make sure you have configured the <appkit-button> inside\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Android Intent Filter for Deep Linking (XML)\nDESCRIPTION: Shows how to add an `<intent-filter>` to the `AndroidManifest.xml` file to handle deep links on Android. This filter declares the custom scheme (e.g., `examplewallet`) that the wallet app will respond to when triggered by a Dapp, enabling connection and signing flows.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/mobile-linking.mdx#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<intent-filter>\n    <action android:name=\"android.intent.action.VIEW\" />\n    <category android:name=\"android.intent.category.DEFAULT\" />\n    <category android:name=\"android.intent.category.BROWSABLE\" />\n    <data android:scheme=\"examplewallet\" /> <!-- your own custom scheme -->\n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Removing Web3Modal defaultConfig Variable (React/Vue/JavaScript)\nDESCRIPTION: This code snippet, applicable across React, Vue, and plain JavaScript setups, illustrates the removal of the `ethersConfig` variable that was previously initialized using the `defaultConfig` function from Web3Modal v5, as this configuration approach is replaced by the new AppKit structure.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers5-web.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst projectId = 'YOUR_PROJECT_ID'\nconst queryClient = new QueryClient()\n\nconst metadata = { //optional\n    name: 'AppKit',\n    description: 'AppKit Example',\n    url: 'https://example.com',\n    icons: ['https://avatars.githubusercontent.com/u/179229932']\n}\n\n// Remove the following code line\n- const ethersConfig = defaultConfig({ ... })\n```\n\n----------------------------------------\n\nTITLE: Configuring Associated Domains in iOS Entitlements XML\nDESCRIPTION: Defines the `com.apple.developer.associated-domains` entitlement in the app's property list file to enable universal link association with specified domains. This XML snippet must be present in the `your_project.entitlement` file to allow the iOS app to open links from the configured domain, which is crucial for enabling Link Mode universal link support.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/link-mode.mdx#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n  <key>com.apple.developer.associated-domains</key>\n  <array>\n    <string>applinks:example.com</string>\n  </array>\n</dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Importing SmartSessions component in JavaScript\nDESCRIPTION: This snippet imports the SmartSessions component from a shared MDX file for use within the application. It depends on module resolution for the specified path and enables React component integration.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/early-access/smart-session.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport SmartSessions from \"/snippets/appkit/shared/smart-sessions.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Establishing WalletConnect Session (Swift)\nDESCRIPTION: Initiates a WalletConnect session by calling the asynchronous `connect` method on the `AppKit` instance. Variations allow specifying required and optional namespaces and session properties, or using default namespace values. The `topic` parameter connects to an existing session or creates a new one if nil.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/actions.mdx#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\ntry await AppKit.instance.connect(\n    requiredNamespaces: [String: ProposalNamespace],\n    optionalNamespaces: [String: ProposalNamespace]?,\n    sessionProperties: [String: String]?,\n    topic: topic // Can be existing topic or nil to create new one\n)\n\n```\n\nLANGUAGE: Swift\nCODE:\n```\ntry await AppKit.instance.connect(\n    topic: topic // Can be existing topic or nil to create new one\n)\n\n```\n\n----------------------------------------\n\nTITLE: Adding WalletConnectUnity Core via Unity Package Manager with OpenUPM Registry\nDESCRIPTION: This guide outlines the steps to manually add the WalletConnectUnity core package through Unity's Package Manager using a custom scoped registry for OpenUPM, emphasizing configuration steps and menu navigation in Unity Editor.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/overview.mdx#_snippet_8\n\nLANGUAGE: Text\nCODE:\n```\n1. Open `Advanced Project Settings` from the gear ⚙ menu\n2. Add a new scoped registry:\n   - Name: `OpenUPM`\n   - URL: `https://package.openupm.com`\n   - Scope(s): `com.walletconnect`\n3. Save changes\n4. Open Package Manager, click +, select `Add package by name...`\n5. Enter `com.walletconnect.core`\n6. Press `Add`\n```\n\n----------------------------------------\n\nTITLE: Rejecting Authentication Requests (Swift)\nDESCRIPTION: Rejects an authentication request using `Sign.instance.rejectSession`. Requires the original request ID.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_24\n\nLANGUAGE: Swift\nCODE:\n```\ntry await Sign.instance.rejectSession(requestId: requestId)\n```\n\n----------------------------------------\n\nTITLE: Configuring babel.config.js for React Native CLI\nDESCRIPTION: JavaScript configuration for babel.config.js that sets up module resolution aliases needed for the cryptographic libraries in React Native CLI projects.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/notify/installation.mdx#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  presets: ['module:metro-react-native-babel-preset'],\n  plugins: [\n   [\n     'module-resolver',\n     {\n       alias: {\n         'crypto': 'react-native-quick-crypto',\n         'stream': 'stream-browserify',\n         'buffer': '@craftzdog/react-native-buffer',\n       },\n     },\n   ],\n    ...\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Adding AppKit Product to Swift Target Dependencies\nDESCRIPTION: This snippet demonstrates how to add a specific product (likely 'AppKit') from a declared Swift package dependency to a target's dependencies array within the `Package.swift` file. This makes the module(s) provided by the AppKit package available for use in the specified target.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/installation.mdx#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\n.target(\n  name: \"MyTargetName\",\n  dependencies: [\n    // The product(s) you want (most likely AppKit).\n    .product(name: \"AppKit\", package: \"AppKit\"),\n  ]\n),\n```\n\n----------------------------------------\n\nTITLE: Get Subscribers Status via Fetch API in JavaScript\nDESCRIPTION: This JavaScript snippet queries the `/v1/<project-id>/subscribers` endpoint to check the subscription status and types for a list of accounts. It sends a POST request with the account IDs in the body and retrieves a JSON object mapping subscribed accounts to their notification types.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/notifications/backend-integration.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst PROJECT_ID = '<PROJECT_ID>'\nconst NOTIFY_API_SECRET = '<NOTIFY_API_SECRET>'\nconst requestBody: RequestBody = {\n  accounts: [\n    'eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029',\n    'eip155:1:0x0000000000000000000000000000000000000000'\n  ]\n}\n\nconst response = await fetch(`https://notify.walletconnect.com/v1/${PROJECT_ID}/subscribers`, {\n  method: 'POST',\n  headers: {\n    Authorization: `Bearer ${NOTIFY_API_SECRET}`\n  }\n  body: JSON.stringify(requestBody)\n})\n\nconst subscribers: ResponseBody = await response.json()\n\ntype RequestBody = {\n  // Max 100 accounts\n  accounts: string[]\n}\ntype ResponseBody = {\n  [account: string]: Subscriber\n}\ntype Subscriber = {\n  notification_types: string[]\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Multiple Supported Namespaces\nDESCRIPTION: This example illustrates how to handle multiple namespaces such as 'eip155', 'cosmos', and 'near' by building a composite namespaces object. This is useful when supporting multiple blockchain ecosystems and handling various session proposals.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/usage.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// ------- namespaces builder util ------------ //\nconst approvedNamespaces = buildApprovedNamespaces({\n    proposal: params,\n    supportedNamespaces: {\n        eip155: {...},\n        cosmos: {...},\n        near: {...}\n    },\n});\n// ------- end namespaces builder util ------------ //\n```\n\n----------------------------------------\n\nTITLE: Using AppKitModalBalanceButton to show wallet balance\nDESCRIPTION: Displays the current wallet balance on the selected network and can trigger UI updates or modal openings when tapped.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/usage.mdx#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nAppKitModalBalanceButton(appKitModal: _appKitModal, onTap: _appKitModal.openModalView)\n```\n\n----------------------------------------\n\nTITLE: Disconnecting an active pairing via Android SDK\nDESCRIPTION: Terminates a pairing session by calling `disconnect()` with the specific topic of the pairing. The topic can be retrieved from the active pairings list.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#_snippet_19\n\nLANGUAGE: Kotlin\nCODE:\n```\nCoreClient.Pairing.disconnect(topic = /*Pairing topic*/\") { error -> }\n```\n\n----------------------------------------\n\nTITLE: Handling Relayer Disconnection Event in WalletKit\nDESCRIPTION: Shows how to subscribe to the 'relayer_disconnect' event on the core relayer object. This event is emitted when the WebSocket connection to the relay server is lost, allowing the wallet to update its connection status UI.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/best-practices.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ncore.relayer.on(\"relayer_disconnect\", () => {\n// connection to the relay server is lost\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Reown AppKit Navigation Graph with Kotlin DSL\nDESCRIPTION: Defines a navigation graph programmatically using the Android Navigation Kotlin DSL. This includes a standard fragment destination and incorporates the AppKit navigation graph using a dedicated DSL extension function (`appKit()`).\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/usage.mdx#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.navigation.createGraph\nimport androidx.navigation.fragment.fragment\nimport com.reown.appkit.ui.appKitGraph\n\nnavController.graph = navController.createGraph(\"Home\") {\n    fragment<HomeFragment>(\"Home\")\n    appKit()\n}\n```\n\n----------------------------------------\n\nTITLE: Android Compose Navigation Setup with WalletConnect Modal\nDESCRIPTION: Provides a Kotlin example for setting up Jetpack Compose navigation using Accompanist Navigation Material, specifically integrating the WalletConnect modal. It shows the necessary imports and the structure for using `ModalBottomSheetLayout` and `NavHost`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.material.ExperimentalMaterialApi\nimport androidx.compose.material.ModalBottomSheetState\nimport androidx.navigation.compose.NavHost\nimport androidx.navigation.compose.composable\nimport androidx.navigation.compose.rememberNavController\nimport com.google.accompanist.navigation.material.BottomSheetNavigator\nimport com.google.accompanist.navigation.material.ExperimentalMaterialNavigationApi\nimport com.google.accompanist.navigation.material.ModalBottomSheetLayout\nimport com.google.accompanist.navigation.material.bottomSheet\nimport com.walletconnect.wcmodal.ui.walletConnectModalGraph\n\nsetContent {\n    val modalSheetState = rememberModalBottomSheetState(initialValue = ModalBottomSheetValue.Hidden, skipHalfExpanded = true)\n    val bottomSheetNavigator = BottomSheetNavigator(modalSheetState)\n    val navController = rememberNavController(bottomSheetNavigator)\n\n    ModalBottomSheetLayout(bottomSheetNavigator = bottomSheetNavigator) {\n        NavHost(\n            navController = navController,\n            startDestination = \"home\"\n        ) {\n            composable(\"home\") {\n                HomeScreen()\n            }\n            walletConnectModalGraph(navController)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AppKit Web Components in HTML\nDESCRIPTION: Shows how to add AppKit web components to an HTML document. These components are global HTML elements that don't require importing and provide a simple way to integrate AppKit functionality.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/ethers/about/triggermodal.mdx#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n  <body>\n    <div id=\"app\">\n      <appkit-button />\n      <appkit-network-button />\n    </div>\n    <script type=\"module\" src=\"/src/main.js\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Example Response Format for Get Subscribers Endpoint\nDESCRIPTION: Provides an example JSON response structure from the `/v1/<project-id>/subscribers` endpoint when querying specific accounts. The response is an object where keys are the subscribed account IDs (from the request) and values are objects detailing their subscribed `notification_types`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/notifications/backend-integration.mdx#_snippet_5\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029\": {\n    \"notification_types\": [\"4d1c97ad-c182-4097-8f2c-8f80c0674df2\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disconnecting a WalletConnect Session in Kotlin\nDESCRIPTION: Disconnects from a settled WalletConnect session. Requires the session topic, a disconnection reason string, and a disconnection code (referencing CAIP-25). The `SignClient.disconnect` function is called with these parameters and includes an error callback.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_30\n\nLANGUAGE: kotlin\nCODE:\n```\nval disconnectionReason: String = /*The reason for disconnecting the Session*/\nval disconnectionCode: String = /*The code for disconnecting the Session*/\nval sessionTopic: String = /*Topic from the Session*/\nFor reference use CAIP-25: https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-25.md\nval disconnectParams = Sign.Params.Disconnect(sessionTopic, disconnectionReason, disconnectionCode)\n\nSignClient.disconnect(disconnectParams) { error -> /*callback for error while disconnecting a session*/ }\n```\n\n----------------------------------------\n\nTITLE: Registering Firebase Token with Web3Inbox SDK in TypeScript\nDESCRIPTION: This snippet demonstrates how to obtain a Firebase Messaging token using `getToken` and register it with the Web3Inbox client via the `registerWithPushServer` method. It requires initializing the Firebase messaging object (firebaseMessaging) and providing your Firebase VAPID key. The `client` object is assumed to be obtained from the `useWeb3InboxClient` hook.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/registering-push/react.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getToken } from 'firebase/messaging'\n\nconst { data: client } = useWeb3InboxClient()\n\n// initialize Firebase's messaging object via Firebase's `getMessaging` function\n\nconst firebaseToken = getToken(firebaseMessaging, {\n  vapidKey: 'YOUR_FIREBASE_VAPID_KEY'\n})\n\nclient.registerWithPushServer(firebaseToken)\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Subscription in Kotlin\nDESCRIPTION: Fetches an active subscription topic and constructs update parameters with desired notification types (scope). Calls NotifyClient.update to modify the subscription, providing an error callback for failures.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_32\n\nLANGUAGE: Kotlin\nCODE:\n```\nval topic = // active subscription topic\nval scope = // list of notification types\nval params = Notify.Params.Update(topic, scope)\n\nNotifyClient.update(params) { error ->\n    // Callback if the update fails\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Intent Filter for Android App Links (XML)\nDESCRIPTION: This XML snippet demonstrates the necessary configuration within the Android application's `AndroidManifest.xml` file to define an intent filter that allows the app to handle incoming App Links. It specifies the action (`VIEW`), categories (`DEFAULT`, `BROWSABLE`), scheme (`https`), host, and an optional path pattern (`/open`) to match the incoming URL. The `android:autoVerify=\"true\"` attribute is essential for verifying the association between the domain and the app, a requirement for App Links used in WalletKit Link Mode. This filter tells Android which URLs should be handled by this specific app activity.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/link-mode.mdx#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<intent-filter android:autoVerify=\"true\">\n  <action android:name=\"android.intent.action.VIEW\" />\n\n  <category android:name=\"android.intent.category.DEFAULT\" />\n  <category android:name=\"android.intent.category.BROWSABLE\" />\n\n  <data android:scheme=\"https\" />\n  <data android:host=\"your_wallet_universal_link.com\" />\n  <data android:pathPattern=\"/open\" />\n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Extracting Ethereum Address from SIWE Message in TypeScript\nDESCRIPTION: Examples how to obtain the Ethereum address embedded within a SIWE message string using the getAddressFromMessage helper function. This utility parses the message according to EIP-4361 format to return the address that signed the message, facilitating verification or UI display.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/siwe.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getAddressFromMessage } from \"@reown/appkit-siwe-react-native\";\n\nconst address = getAddressFromMessage(message);\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Dapp WalletConnect Notify Kotlin\nDESCRIPTION: Explains the process for a user to unsubscribe from receiving notifications from a dapp. This involves deleting the active subscription associated with the dapp. The method requires the topic of the subscription to be deleted and supports an optional timeout.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/notifications/notify/usage.mdx#_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval topic: String = // active subscription topic\nval timeout: Duration? = // Optional. Timeout - min 5 sec, max 60 sec, default 60 sec\nval params = Notify.Params.DeleteSubscription(topic)\n\nNotifyClient.deleteSubscription(params).let { result ->\n    when (result) {\n        is Notify.Result.DeleteSubscription.Success -> {\n          // callback for when the delete request was successful\n        }\n\n        is Notify.Result.DeleteSubscription.Error -> {\n          // callback for when the delete request has failed\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Flutter WalletConnect Modal Setup with Web3App or Project ID & Metadata\nDESCRIPTION: Explains how to instantiate WalletConnectModalService in Flutter using either a Web3App instance or a project ID with pairing metadata. The code demonstrates setting up callback registration for wallet interactions, enabling developers to connect wallets in Flutter applications with customizable metadata and namespace configurations.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/options.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nfinal Web3App web3App = await Web3App.createInstance(\n  projectId: 'YOUR_PROJECT_ID',\n  metadata: const PairingMetadata(\n    name: 'Flutter Dapp Example',\n    description: 'Flutter Dapp Example',\n    url: 'https://www.walletconnect.com/',\n    icons: ['https://walletconnect.com/walletconnect-logo.png'],\n    redirect: Redirect(\n      native: 'flutterdapp://',\n      universal: 'https://www.walletconnect.com',\n    ),\n  ),\n);\n\n// Register callbacks on the Web3App\n\nWalletConnectModalService service = WalletConnectModalService(\n  web3App: web3App,\n);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nWalletConnectModalService service = WalletConnectModalService(\n  projectId: projectId,\n  metadata: const PairingMetadata(\n    name: 'Flutter Dapp Example',\n    description: 'Flutter Dapp Example',\n    url: 'https://www.walletconnect.com/',\n    icons: ['https://walletconnect.com/walletconnect-logo.png'],\n    redirect: Redirect(\n      native: 'flutterdapp://',\n      universal: 'https://www.walletconnect.com',\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with Bitcoin using Yarn\nDESCRIPTION: Command for custom installation of Reown AppKit with Bitcoin adapter using Yarn package manager. Installs required dependencies for Bitcoin integration.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/installation.mdx#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit @reown/appkit-adapter-bitcoin\n```\n\n----------------------------------------\n\nTITLE: Example Dynamic Wallet getAccountAddresses Request and Response - Litecoin JavaScript\nDESCRIPTION: Demonstrates a JSON-RPC request to the `getAccountAddresses` method for a dynamic wallet and the expected response. The request specifies the connected account. The response returns an array of address objects, including their paths, potentially listing multiple addresses with UTXOs and several unused addresses.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/litecoin-rpc.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Request\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"getAccountAddresses\",\n    \"params\": {\n        \"account\": \"ltc1q8c6fshw2dlwun7ekn9qwf37cu2rn755u9ym7p0\"\n    }\n}\n\n// Result\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"result\": [\n        {\n            \"address\": \"ltc1q8c6fshw2dlwun7ekn9qwf37cu2rn755u9ym7p0\",\n            \"path\": \"m/84'/2'/0'/0/0\"\n        },\n        {\n            \"address\": \"LXkGhTKmZpviAtYdDaxWbiJsdg4tA6EzrU\",\n            \"path\": \"m/49'/2'/0'/0/7\"\n        },\n        {\n            \"address\": \"ltc1qj4plcuyhuzw0sycf99gcayzhhcddfj6xkcke5g\",\n            \"path\": \"m/84'/2'/0'/0/2\"\n        },\n        {\n            \"address\": \"ltc1qsdxa6pseqekqg5d3uksaxnwrey2s2ujcx03alc\",\n            \"path\": \"m/84'/2'/0'/0/3\"\n        },\n        {\n            \"address\": \"ltc1qhuvt3sq8xmx9ktzdfznkzvjl5zup7mg9zpwllw\",\n            \"path\": \"m/84'/2'/0'/0/4\"\n        },\n        {\n            \"address\": \"ltc1qtjd3y5a2axpwzfjcj4y9zy50qfjuxwzm0vu5fq\",\n            \"path\": \"m/84'/2'/0'/1/3\"\n        },\n        {\n            \"address\": \"ltc1qp7ujtprgl0quvcg0dj335p37r2mc2cxdc8xumq\",\n            \"path\": \"m/84'/2'/0'/1/4\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Example for Sending Notifications via /notify Endpoint\nDESCRIPTION: This code snippet demonstrates how to send a notification to specific accounts using the Reown WalletConnect API with a POST request. It constructs the request body with notification details and account list, and includes necessary headers for authorization. Dependencies include fetch API and valid API credentials. Inputs are notification type, title, body, optional URL, and target accounts; output is the API response confirming delivery.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/notifications/backend-integration.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst PROJECT_ID = \"<PROJECT_ID>\";\nconst NOTIFY_API_SECRET = \"<NOTIFY_API_SECRET>\";\nconst response = await fetch(\n  `https://notify.walletconnect.com/${PROJECT_ID}/notify`,\n  {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${NOTIFY_API_SECRET}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      notification: {\n        type: \"a1e53b95-18e5-4af8-9f03-9308ec87b687\",\n        title: \"The price of Ethereum has risen\",\n        body: \"The price of Ethereum has gone up 10%\",\n        url: \"https://app.example.com\",\n      },\n      accounts: [\"eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029\"],\n    }),\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Updated AppKit v5 Dependencies with pnpm - React - Bash\nDESCRIPTION: This pnpm command installs AppKit Wagmi latest, Wagmi v2.x, Viem v2.x, and @tanstack/react-query v5.x dependencies for React-based projects upgrading to AppKit v5. Requires Node.js and pnpm. This ensures projects are using the most up-to-date and compatible package versions. All key parameters are names and versions of dependencies.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/appkitv2.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @web3modal/wagmi@latest wagmi@2.x viem@2.x @tanstack/react-query@5.x\n```\n\n----------------------------------------\n\nTITLE: Installing AppKit SIWE Package with NPM\nDESCRIPTION: Command for installing the One-Click Auth dependencies including the AppKit SIWE package, the SIWE library, and viem using NPM package manager.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/siwe.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit-siwe siwe viem\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Relay Component in MDX\nDESCRIPTION: This code imports the Relay component from the cloud snippets directory and renders it on the page. The snippet demonstrates how to include reusable documentation components in an MDX file.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/cloud/relay.mdx#_snippet_0\n\nLANGUAGE: MDX\nCODE:\n```\n---\ntitle: Relay\n---\n\nimport Relay from \"/snippets/cloud/relay.mdx\";\n\n<Relay />\n```\n\n----------------------------------------\n\nTITLE: Initializing WalletConnectModal Flutter\nDESCRIPTION: Demonstrates how to create and initialize the `WalletConnectModalService` in Flutter using Dart. This service is the main class for interacting with the modal and requires a project ID and pairing metadata.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nWalletConnectModalService service = WalletConnectModalService(\n  projectId: 'YOUR_PROJECT_ID',\n  metadata: const PairingMetadata(\n    name: 'Flutter WalletConnect',\n    description: 'Flutter WalletConnectModal Sign Example',\n    url: 'https://walletconnect.com/',\n    icons: ['https://walletconnect.com/walletconnect-logo.png'],\n    redirect: Redirect(\n      native: 'flutterdapp://',\n      universal: 'https://www.walletconnect.com',\n    ),\n  ),\n);\nawait service.init();\n```\n\n----------------------------------------\n\nTITLE: Marking All Notifications as Read with JavaScript\nDESCRIPTION: JavaScript example of marking all notifications as read for a project, useful when initially implementing unread status tracking in an application.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/notifications/backend-integration.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst PROJECT_ID = \"<PROJECT_ID>\";\nconst NOTIFY_API_SECRET = \"<NOTIFY_API_SECRET>\";\nconst response = await fetch(\n  `https://notify.walletconnect.com/v1/${PROJECT_ID}/mark-all-as-read`,\n  {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${NOTIFY_API_SECRET}`,\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Emitting a Session Event using SignClient (JavaScript/TypeScript)\nDESCRIPTION: Provides an example of emitting a session event (`accountsChanged`) using the `signClient.emit` method in WalletConnect. It specifies the session topic, event name, event data (e.g., new accounts), and the relevant chain ID. This allows other parties in the session to react to state changes.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/polkadot/namespaces-guide.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait signClient.emit({\n  topic,\n  event: {\n    name: \"accountsChanged\",\n    data: [\"AZBEwbZhYeiofodZnM2iAoshP3pXRPNSJEKFqEPDmvv1mY7\"],\n  },\n  chainId: \"polkadot:91b171bb158e2d3848fa23a9f1c25182\",\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Authentication Requests with WalletKit in Swift\nDESCRIPTION: This snippet shows how to subscribe to authentication requests using Combine's publisher pattern in WalletKit. It uses the authenticateRequestPublisher to receive and process incoming authentication requests on the main thread.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/one-click-auth.mdx#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nWalletKit.instance.authenticateRequestPublisher\n    .receive(on: DispatchQueue.main)\n    .sink { result in\n        // Process the authentication request here.\n        // This involves displaying UI to the user.\n    }\n    .store(in: &subscriptions) // Assuming `subscriptions` is where you store your Combine subscriptions.\n```\n\n----------------------------------------\n\nTITLE: Replacing Dependency in pubspec.yaml - YAML\nDESCRIPTION: Shows how to replace the old `walletconnect_flutter_v2` dependency with the new `reown_walletkit` dependency in your Flutter project's `pubspec.yaml` file. This requires running `flutter clean && flutter pub get` afterwards to update project dependencies.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/upgrade/from-web3wallet-flutter.mdx#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n/* highlight-delete-start */\nwalletconnect_flutter_v2: ^X.Y.Z\n/* highlight-delete-end */\n/* highlight-add-start */\nreown_walletkit: ^1.0.0\n/* highlight-add-end */\n```\n\n----------------------------------------\n\nTITLE: Customize Theme Variables - WalletConnectModal Web - TSX\nDESCRIPTION: Demonstrates how to apply custom CSS variables to override the default styling of the WalletConnectModal on the web. This allows fine-grained control over fonts, colors, and other visual properties.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/theming.mdx#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nconst modal = new WalletConnectModal({\n  themeVariables: {\n    \"--wcm-font-family\": \"Roboto, sans-serif\",\n    \"--wcm-accent-color\": \"#F5841F\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Vue: Configuring Reown AppKit - Import, Adapter Creation, and Usage\nDESCRIPTION: Demonstrates the process of importing 'createAppKit' for Vue, removing deprecated imports, creating a wagmiAdapter, and integrating AppKit into Vue components with proper plugins and global configurations.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\n// Import createAppKit and networks\nimport { createAppKit } from '@reown/appkit/vue'\nimport { arbitrum, mainnet } from '@reown/appkit/networks'\nimport { WagmiAdapter } from '@reown/appkit-adapter-wagmi'\n// Remove old Web3Modal imports\n// Create wagmiAdapter with networks and projectId\nconst projectId = 'YOUR_PROJECT_ID'\nconst wagmiAdapter = new WagmiAdapter({\n  networks: [mainnet, arbitrum],\n  projectId\n})\n// Create AppKit instance\nconst modal = createAppKit({\n  adapters: [wagmiAdapter],\n  networks: [mainnet, arbitrum],\n  metadata: {\n    name: 'AppKit',\n    description: 'AppKit Example',\n    url: 'https://example.com',\n    icons: ['https://avatars.githubusercontent.com/u/179229932']\n  },\n  projectId,\n  features: { analytics: true }\n})\n// Usage in Vue component\nexport default {\n  // Inside setup or component lifecycle\n  mounted() {\n    this.$app = modal\n  }\n}\n// In main.ts, initialize Vue Query\nimport { createApp } from 'vue'\nimport { QueryClient, VueQueryPlugin } from '@tanstack/vue-query'\nimport App from './App.vue'\nconst queryClient = new QueryClient()\ncreateApp(App)\n  .use(VueQueryPlugin, { queryClient })\n  .mount('#app')\n```\n\n----------------------------------------\n\nTITLE: Adding Coinbase Wallet Scheme to LSApplicationQueriesSchemes (XML)\nDESCRIPTION: Adds the specific `cbwallet` URL scheme to the `LSApplicationQueriesSchemes` array in the iOS `Info.plist`. This enables the application to detect if the Coinbase Wallet app is installed on the device, as required for Coinbase Wallet support.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/options.mdx#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<key>LSApplicationQueriesSchemes</key>\n<array>\n  <string>cbwallet</string>\n  <!-- Any other scheme previously added -->\n</array>\n```\n\n----------------------------------------\n\nTITLE: Handling wallet session authentication requests in TypeScript\nDESCRIPTION: This snippet demonstrates subscribing to the 'session_authenticate' event and outlines the steps to process incoming authentication requests, including preparing payloads, formatting messages, and signing them for verification. It relies on the walletKit SDK and utility functions to facilitate these tasks.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/one-click-auth.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nwalletKit.on(\"session_authenticate\", async (payload) => {\n  // Process the authentication request here.\n  // Steps include:\n  // 1. Populate the authentication payload with the supported chains and methods\n  // 2. Format the authentication message using the payload and the user's account\n  // 3. Present the authentication message to the user\n  // 4. Sign the authentication message(s) to create a verifiable authentication object(s)\n  // 5. Approve the authentication request with the authentication object(s)\n});\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies for React Solana AppKit\nDESCRIPTION: Provides commands for installing all project dependencies using npm, Yarn, Bun, or pnpm, ensuring the developer has the necessary packages to run the React Solana AppKit application.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-anza-adapter-react.mdx#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: Shell\nCODE:\n```\nyarn install\n```\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: Shell\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Dispatching Captured Link to WalletKit (Dart)\nDESCRIPTION: This snippet illustrates how to handle an incoming Universal Link or App Link that has been captured by the native platform integration (iOS or Android). It shows the critical step of calling `_walletKit.dispatchEnvelope(link)` with the captured link string. This allows the WalletKit SDK to process the link, which contains the incoming request from the dApp, enabling communication via Link Mode. This function should be called from within the native code callbacks (e.g., `AppDelegate`, `SceneDelegate` on iOS, or Activity `onCreate`, `onNewIntent` on Android) that handle incoming links, after the link has been passed to the Flutter side.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/link-mode.mdx#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nvoid _onLinkCaptured(String link) async {\n  await _walletKit.dispatchEnvelope(link);\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching and Displaying Solana Wallet Balance Using Async Function in JavaScript\nDESCRIPTION: This asynchronous function calculates and logs a wallet's SOL balance in a React environment. It uses the user's public key to query the Solana network for their lamport balance, then converts the result to SOL. Dependencies include a Solana connection object and the LAMPORTS_PER_SOL constant; a connected wallet address is required.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/solana-send-transaction.mdx#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// function to get the balance\nconst handleGetBalance = async () => {\n  const wallet = new PublicKey(address);\n  const balance = await connection?.getBalance(wallet); // get the amount in LAMPORTS\n\n  console.log(`${balance / LAMPORTS_PER_SOL} SOL`);\n};\n```\n\n----------------------------------------\n\nTITLE: WalletConnect Modal OpenOptions Interface - TypeScript\nDESCRIPTION: Defines the `OpenOptions` interface used by the `openModal` function. It specifies the required `uri` property and the optional `chains` property for overriding initial chains.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ninterface OpenOptions {\n  // Uri that will be used to generate qrcode and mobile links, required\n  uri: string;\n  // CAIP-2 compliant chain ids to override initial chains defined when creating the modal\n  // Learn about CAIP-10: https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-10.md\n  chains?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: cURL for Marking All Notifications as Read\nDESCRIPTION: This cURL command marks all notifications as read, which is useful for resetting unread status in the user interface. It performs a POST request with authorization headers to the designated endpoint. Dependencies are curl and valid API credentials; inputs are project-specific URL and secret, output is confirmation response from server.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/notifications/backend-integration.mdx#_snippet_7\n\nLANGUAGE: cURL\nCODE:\n```\ncurl -X POST 'https://notify.walletconnect.com/<PROJECT_ID>/mark-all-as-read' \\\n  --header 'Authorization: Bearer <NOTIFY_API_SECRET>'\n```\n\n----------------------------------------\n\nTITLE: Handling Pairing Expiry Events (Swift/iOS)\nDESCRIPTION: Subscribes to the pairing expiration publisher in the iOS WalletKit SDK. This allows the wallet to react when a pairing expires, typically to inform the user if it expired before becoming active.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nWalletKit.instance.pairingExpirationPublisher\n    .receive(on: DispatchQueue.main)\n    .sink { pairing in\n    guard !pairing.active else { return }\n    // let user know that pairing has expired\n}.store(in: &publishers)\n```\n\n----------------------------------------\n\nTITLE: Installing Web3Inbox via pnpm\nDESCRIPTION: Adds the '@web3inbox/core' and '@web3inbox/react' packages using the pnpm (performant npm) package manager. This command updates your project's package.json and pnpm-lock.yaml files. Requires Node.js and pnpm to be installed.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/usage/installation/react.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @web3inbox/core @web3inbox/react\n```\n\n----------------------------------------\n\nTITLE: Deleting a Subscription in Kotlin\nDESCRIPTION: Prepares delete parameters with the subscription topic and invokes NotifyClient.deleteSubscription to remove the subscription. Includes an error callback to handle failures.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_33\n\nLANGUAGE: Kotlin\nCODE:\n```\nval topic = // active subscription topic\nval params = Notify.Params.DeleteSubscription(topic)\n\nNotifyClient.deleteSubscription(params) { error ->\n    // Callback upon delete failure\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Active Session - WalletKit - Kotlin\nDESCRIPTION: Updates an existing session with new namespace data. Requires the session topic and a map defining the updated namespaces, including accounts (following CAIP-10), methods, and events.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/usage.mdx#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval sessionTopic: String = /*Topic of Session*/\nval namespace: String = /*Namespace identifier, see for reference: https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-2.md#syntax*/\nval accounts: List<String> = /*List of accounts on chains*/\nval methods: List<String> = /*List of methods that wallet approves*/\nval events: List<String> = /*List of events that wallet approves*/\nval namespaces: Map<String, Wallet.Model.Namespaces.Session> = mapOf(namespace, Wallet.Model.Namespaces.Session(accounts, methods, events))\nval updateParams = Wallet.Params.SessionUpdate(sessionTopic, namespaces)\n\nWalletKit.updateSession(updateParams) { error -> /*callback for error while sending session update*/ }\n```\n\n----------------------------------------\n\nTITLE: Installing iOS Native Modules with CocoaPods\nDESCRIPTION: Executes `pod-install` using `npx` to link the native modules (like `react-native-webview`) required for iOS builds after adding new dependencies. This step is specific to React Native development on iOS.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers/email.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx pod-install\n```\n\n----------------------------------------\n\nTITLE: Initializing WalletConnect Adapter in React (TSX)\nDESCRIPTION: Demonstrates how to import and initialize the `WalletConnectWalletAdapter` within a React context provider (`SolanaContext`). It uses `@solana/wallet-adapter-react` and configures the adapter with the network (Mainnet) and a required `projectId` obtained from Reown Cloud. This setup enables WalletConnect connections within the Solana dApp.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/providers/solana-adapter.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ReactNode, useMemo, useState } from \"react\";\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport { WalletModalProvider } from \"@solana/wallet-adapter-react-ui\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\n\nimport \"@solana/wallet-adapter-react-ui/styles.css\";\n\nimport { WalletConnectWalletAdapter } from \"@walletconnect/solana-adapter\";\n\nexport const SolanaContext = ({ children }: { children: ReactNode }) => {\n  const endpoint = useMemo(\n    () => clusterApiUrl(WalletAdapterNetwork.Mainnet),\n    []\n  );\n\n  const wallets = useMemo(\n    () => [\n      new WalletConnectWalletAdapter({\n        network: WalletAdapterNetwork.Mainnet,\n        options: {\n          projectId: \"YOUR_PROJECT_ID\",\n        },\n      }),\n    ],\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider wallets={wallets} autoConnect>\n        <WalletModalProvider>{children}</WalletModalProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Extending WalletConnect Session Lifetime in Swift\nDESCRIPTION: Illustrates how to programmatically extend an active session's lifetime using the Sign client in Swift. By calling the asynchronous extend method with the session topic, the dApp can prolong the session validity by one week, preventing automatic expiration after the default 7-day period.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_21\n\nLANGUAGE: Swift\nCODE:\n```\ntry await Sign.instance.extend(topic: session.topic)\n```\n\n----------------------------------------\n\nTITLE: Installing Reown Coinbase Connector for Ethers (RN CLI)\nDESCRIPTION: Command to install the Reown AppKit connector package (`@reown/appkit-coinbase-ethers-react-native`) using yarn. This package facilitates the integration of Coinbase Wallet specifically within React Native CLI projects using the Ethers v6 library.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/installation.mdx#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @reown/appkit-coinbase-ethers-react-native\n```\n\n----------------------------------------\n\nTITLE: Getting Current AppKit Modal State in TypeScript\nDESCRIPTION: Shows how to retrieve the current state of the AppKit modal, specifically the `open` status (boolean) and `selectedNetworkId` (number), using `modal.getState()`. Requires initializing the modal with `createAppKit`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/actions.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst modal = createAppKit({\n  adapters: [wagmiAdapter],\n  networks: [mainnet, arbitrum],\n  projectId,\n});\n\nconst { open, selectedNetworkId } = modal.getState();\n```\n\n----------------------------------------\n\nTITLE: Rendering Web3Inbox Notifications Component in React\nDESCRIPTION: Creates a React component for displaying Web3Inbox notifications with read status indicators and management. Shows unread count and provides functionality to mark notifications as read.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/usage/example/react.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Notifications.tsx\nimport { useNotifications } from '@web3inbox/react'\nimport React from 'react'\nimport styles from '@/styles/Notifications.module.css'\n\nfunction Notifications() {\n  const { data: subscription } = useSubscription()\n  const { data: notifications } = useNotifications(5)\n\n  return (\n    <div>\n      <h2 className={styles.heading}>Notifications</h2>\n      <p>You have {subscription.unreadCount} unread notifications.</p>\n      <div className={styles.notificationsContainer}>\n        {!notifications?.length ? (\n          <p className={styles.fallbackText}>No notifications yet.</p>\n        ) : (\n          notifications.map(({ id, ...message }) => (\n            <div key={id} className={styles.message}>\n              <h3>{message.title}</h3>\n              <p>{message.body}</p>\n              <p>{message.isRead ? 'Read' : 'Unread'}</p>\n              <button onClick={message.markAsRead}>Mark as read</button>\n            </div>\n          ))\n        )}\n      </div>\n      <button onClick={nextPage}>Next page</button>\n    </div>\n  )\n}\n\nexport default Notifications\n```\n\n----------------------------------------\n\nTITLE: Initializing CoreClient with AppMetaData in Kotlin\nDESCRIPTION: Initializes the CoreClient with the previously configured AppMetaData, establishing the core configuration necessary for handling Link Mode operations in the wallet application.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/link-mode.mdx#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nCoreClient.initialize(\n   metaData: appMetaData,\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Supporting Session Events in JavaScript\nDESCRIPTION: Shows how to register and emit session events like chainChanged or accountChanged across multiple blockchain networks.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/usage.mdx#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfinal supportedChains = ['eip155:1', 'eip155:137'];\nconst supportedEvents = ['chainChanged', 'accountChanged'];\nfor (var chainId in supportedChains) {\n  for (var event in supportedEvents) {\n    _walletKit.registerEventEmitter(\n      chainId: chainId,\n      event: event,\n    );\n  }\n}\n\n// To emit an event\nawait _walletKit.emitSessionEvent(\n  topic: session.topic,\n  chainId: 'eip155:1',\n  event: SessionEventParams(\n    name: 'chainChanged',\n    data: 1,\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Verifying SIWE Messages Using the siwe Package in JavaScript\nDESCRIPTION: Asynchronously verifies that an SIWE message has not been altered, is properly signed by the given wallet address, and meets other validation criteria defined in EIP-4361. The function returns a Promise resolving to a boolean indicating successful verification. The legacy variant explicitly uses `SiweMessage(message).validate(signature)` from the siwe package for message validation.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/siwe/parameters.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nverifyMessage `(args: SIWEVerifyMessageArgs) => Promise<boolean>`\n\nThe function to ensure the message is valid, has not been tampered with, and has been appropriately signed by the wallet address.\n```\n\nLANGUAGE: javascript\nCODE:\n```\nverifyMessage `(args: SIWEVerifyMessageArgs) => Promise<boolean>`\n\nThe `verifyMessage` method should lean on the siwe package's new\n\n```js\nSiweMessage(message).validate(signature);\n```\n\nto ensure the message is valid, has not been tampered with, and has been appropriately signed by the wallet address.\n```\n\n----------------------------------------\n\nTITLE: AppKitTheme Colors Interface Definition - Kotlin\nDESCRIPTION: Defines a Colors interface for AppKitTheme, specifying required color properties for theming, including various accent shades, foreground and background palettes, and status colors for success and error states. Used in Compose to enable color customization. Dependencies: Kotlin interface, Color and ColorPalette definitions. No inputs; implementing classes must provide all properties. Used as a model for providing theme colors.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/theming.mdx#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n    interface Colors {\n        val accent100: Color\n        val accent90: Color\n        val accent80: Color\n        val foreground: ColorPalette\n        val background: ColorPalette\n        val grayGlass: Color\n        val success: Color\n        val error: Color\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Entries with GET /v3/all\nDESCRIPTION: Demonstrates fetching all listed entries from the explorer, with optional pagination. This endpoint consolidates wallets, dApps, hybrids, and other entries.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/cloud/explorer.mdx#_snippet_3\n\nLANGUAGE: HTTP\nCODE:\n```\nGET https://explorer-api.walletconnect.com/v3/all?projectId=YOUR_PROJECT_ID&entries=5&page=1\n```\n\n----------------------------------------\n\nTITLE: iOS WebSocketFactory Implementation Using Starscream v3\nDESCRIPTION: Defines a WebSocketFactory implementation leveraging the Starscream library to create WebSocket connections. It includes an extension to conform WebSocket to WebSocketConnecting and a factory struct that creates WebSocket instances. Ensures WebSocket creation with user-defined URLs for iOS SDK integration.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/relay.mdx#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport Starscream\n\nextension WebSocket: WebSocketConnecting { }\n\nstruct SocketFactory: WebSocketFactory {\n    func create(with url: URL) -> WebSocketConnecting {\n        return WebSocket(url: url)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VerifyContext Data Class and Validation Enum in Kotlin\nDESCRIPTION: Defines the Kotlin data class `VerifyContext` used to encapsulate domain verification information for SessionProposals, SessionRequests, and AuthRequests. It includes the request origin, validation status, and verify URL. Also defines the `Validation` enum representing the possible verification states: `VALID`, `INVALID`, or `UNKNOWN`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/verify.mdx#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndata class VerifyContext(\n    val id: Long,\n    val origin: String,\n    val validation: Model.Validation,\n    val verifyUrl: String\n)\n\nenum class Validation {\n    VALID, INVALID, UNKNOWN\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing and Handling eth_getTransactionReceipt Session Requests Asynchronously in C#\nDESCRIPTION: Demonstrates subscribing to the session request event for 'eth_getTransactionReceipt' requests and registering an asynchronous callback handler. The callback receives typed request and response arguments and must set the response property with the RPC response object. Optionally demonstrates filtering requests by session topic to handle only relevant session requests.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_47\n\nLANGUAGE: csharp\nCODE:\n```\nwalletClient.Engine.SessionRequestEvents<EthGetTransactionReceipt, TransactionReceipt>().OnRequest += OnEthTransactionReceiptRequest;\n\nprivate Task OnEthTransactionReceiptRequest(RequestEventArgs<EthGetTransactionReceipt, TransactionReceipt> e)\n{\n    // logic for request goes here\n    // set e.Response to return a response\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\nwalletClient.Engine.SessionRequestEvents<EthGetTransactionReceipt, TransactionReceipt>()\n    .FilterRequests(r => r.Topic == sessionTopic)\n    .OnRequest += OnEthTransactionReceiptRequest;\n```\n\nLANGUAGE: csharp\nCODE:\n```\nprivate async Task OnEthTransactionReceiptRequest(RequestEventArgs<EthGetTransactionReceipt, TransactionReceipt> e)\n{\n    var txHash = e.Request.Params[0];\n    var receipt = await EthGetTransactionReceipt(txHash);\n    e.Response = receipt;\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Reown AppKit with Compose Accompanist Navigation (Kotlin)\nDESCRIPTION: Sets up the Jetpack Compose UI hierarchy to integrate Reown AppKit using Accompanist Navigation Material. This involves configuring a `ModalBottomSheetLayout` and a `NavHost` with a `BottomSheetNavigator` to manage the AppKit modal as a navigation destination.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/usage.mdx#_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.compose.material.ExperimentalMaterialApi\nimport androidx.compose.material.ModalBottomSheetState\nimport androidx.navigation.compose.NavHost\nimport androidx.navigation.compose.composable\nimport androidx.navigation.compose.rememberNavController\nimport com.google.accompanist.navigation.material.BottomSheetNavigator\nimport com.google.accompanist.navigation.material.ExperimentalMaterialNavigationApi\nimport com.google.accompanist.navigation.material.ModalBottomSheetLayout\nimport com.google.accompanist.navigation.material.bottomSheet\nimport com.reown.appkit.ui.appKitGraph\n\nsetContent {\n    val modalSheetState = rememberModalBottomSheetState(initialValue = ModalBottomSheetValue.Hidden, skipHalfExpanded = true)\n    val bottomSheetNavigator = BottomSheetNavigator(modalSheetState)\n    val navController = rememberNavController(bottomSheetNavigator)\n\n    ModalBottomSheetLayout(bottomSheetNavigator = bottomSheetNavigator) {\n        NavHost(\n            navController = navController,\n            startDestination = \"home\"\n        ) {\n            composable(\"home\") {\n                HomeScreen()\n            }\n            appKitGraph(navController)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening WalletConnect Modal - JavaScript Example\nDESCRIPTION: Demonstrates how to programmatically open the WalletConnect modal in a JavaScript or TypeScript environment. It requires a connection URI to generate the necessary QR code and mobile links.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nawait modal.openModal({\n  uri: \"YOUR_CONNECTION_URI\",\n});\n```\n\n----------------------------------------\n\nTITLE: Getting AppKit Connection Object (TSX)\nDESCRIPTION: Shows how to use the `useAppKitConnection` hook, typically provided by a chain-specific adapter like `@reown/appkit-adapter-solana/vue`, to obtain the blockchain network connection object. This object is essential for interacting with the network (e.g., fetching data, sending transactions). Required dependency: `@reown/appkit-adapter-solana/vue` (or similar adapter).\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/solana/composables.mdx#_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useAppKitConnection } from '@reown/appkit-adapter-solana/vue'\n\n...\n\nconst { connection } = useAppKitConnection()\n```\n\n----------------------------------------\n\nTITLE: Registering for Device Push Notifications Using JavaScript\nDESCRIPTION: This code snippet involves the 'RegisteringPush' component, enabling registration of the user's device for push notifications. It requires the 'registering-push/javascript.mdx' module and ensures push notifications are received on the device.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/notifications/frontend-integration/api.mdx#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n<RegisteringPush />\n```\n\n----------------------------------------\n\nTITLE: Creating DeployedContract Object for Reown AppKit (Dart)\nDESCRIPTION: Demonstrates how to create a `DeployedContract` object, which is a prerequisite for interacting with smart contracts using AppKit's `requestReadContract` or `requestWriteContract`. It requires the contract's ABI (as a JSON string or object) and its deployed address on the blockchain, typically provided as a hexadecimal string.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/actions.mdx#_snippet_8\n\nLANGUAGE: Dart\nCODE:\n```\n// Create DeployedContract object using contract's ABI and address\nfinal tetherContract = DeployedContract(\n  ContractAbi.fromJson(\n    jsonEncode([{.....}]), // ABI object\n    'Tether USD',\n  ),\n  EthereumAddress.fromHex('0xdAC17F958D2ee523a2206206994597C13D831ec7'), // https://etherscan.io/token/0xdAC17F958D2ee523a2206206994597C13D831ec7\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring reown AppKit with Wagmi and Custom Connectors (TSX)\nDESCRIPTION: This snippet shows how to initialize `reown/appkit` using the `WagmiAdapter`. It demonstrates creating and adding custom Wagmi connectors like WalletConnect, injected, and Coinbase Wallet, along with specifying supported networks. It also sets up the necessary React context providers for Wagmi and React Query to wrap the application.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/custom-connectors.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createAppKit } from '@reown/appkit/react'\nimport { WagmiAdapter } from '@reown/appkit-adapter-wagmi'\n\nimport { http, WagmiProvider, CreateConnectorFn } from 'wagmi'\nimport { sepolia } from '@reown/appkit/networks'\nimport { walletConnect, coinbaseWallet, injected } from 'wagmi/connectors'\n\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\n\nconst queryClient = new QueryClient()\n\nconst projectId = 'YOUR_PROJECT_ID'\n\nconst metadata = {\n  //...\n}\n\n// create the connectors (delete the ones you don't need)\nconst connectors: CreateConnectorFn[] = []\nconnectors.push(walletConnect({ projectId, metadata, showQrModal: false })) // showQrModal must be false\nconnectors.push(injected({ shimDisconnect: true }))\nconnectors.push(\n  coinbaseWallet({\n    appName: metadata.name,\n    appLogoUrl: metadata.icons[0]\n  })\n)\n\nexport const networks = [sepolia]\n\nexport const wagmiAdapter = new WagmiAdapter({\n  storage:\n  transports: {\n    [sepolia.id]: http()\n  },\n  connectors,\n  projectId,\n  networks\n})\n\nexport const config = wagmiAdapter.wagmiConfig\n\ncreateAppKit({\n  adapters: [wagmiAdapter],\n  projectId,\n  networks: [sepolia]\n})\n\nexport function ContextProvider({ children }) {\n  return (\n    <WagmiProvider config={config}>\n      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>\n    </WagmiProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Deep Linking Queries\nDESCRIPTION: XML snippet for the Android `AndroidManifest.xml` file. This configures the `<queries>` block to allow the app to query for specific packages and URLs, enabling deep linking to installed wallet applications on Android 11+.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <!-- Intent so you can deep link to wallets -->\n    <queries>\n        <intent>\n            <action android:name=\"android.intent.action.VIEW\" />\n            <category android:name=\"android.intent.category.BROWSABLE\" />\n            <data android:scheme=\"https\" />\n        </intent>\n        <package android:name=\"io.metamask\"/>\n        <package android:name=\"com.wallet.crypto.trustapp\"/>\n        <package android:name=\"io.gnosis.safe\"/>\n        <package android:name=\"me.rainbow\"/>\n        <package android:name=\"io.zerion.android\"/>\n        <package android:name=\"com.imtoken.app\"/>\n        <!-- Add other wallets you would like to launch from within the app -->\n    </queries>\n    ...\n```\n\n----------------------------------------\n\nTITLE: Example Session Namespace Structure (JavaScript/JSON)\nDESCRIPTION: Shows the JSON-like structure of a `sessionNamespace` returned by a wallet in WalletConnect upon approving a connection proposal. It confirms the approved accounts, methods (e.g., `polkadot_signMessage`, `eth_sign`, `cosmos_signDirect`, `personal_sign`), and events (`accountsChanged`, `someCosmosEvent`, `proofFinalized`) for the established session, potentially including more permissions or accounts than initially requested by the dapp.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/polkadot/namespaces-guide.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"polkadot\": {\n    \"accounts\": [\n        \"polkadot:91b171bb158e2d3848fa23a9f1c25182:AZBEwbZhYeiofodZnM2iAoshP3pXRPNSJEKFqEPDmvv1mY7\"\n    ]\n    \"methods\": [\"polkadot_signMessage\", \"polkadot_signTransaction\"],\n    \"events\": [\"accountsChanged\"]\n  },\n  \"eip155\": {\n    \"accounts\": [\n      \"eip155:137:0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb\",\n      \"eip155:1:0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb\"\n    ],\n    \"methods\": [\"eth_sign\"],\n    \"events\": [\"accountsChanged\"]\n  },\n  \"cosmos\": {\n    \"accounts\": [\n      \"cosmos:cosmoshub-4:cosmos1t2uflqwqe0fsj0shcfkrvpukewcw40yjj6hdc0\"\n    ],\n    \"methods\": [\"cosmos_signDirect\", \"personal_sign\"],\n    \"events\": [\"someCosmosEvent\", \"proofFinalized\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Populating and Formatting Authentication Payloads with WalletConnect Utils in TypeScript\nDESCRIPTION: Shows how to prepare the authentication payload for a SIWE message. It utilizes `populateAuthPayload` from `@walletconnect/utils` to include supported chains and methods based on the dApp's request payload (`payload.params.authPayload`). It also demonstrates formatting the user's address into CAIP-10 format (`iss`) and using `walletKit.formatAuthMessage` to create the final message string to be presented to the user for signing. Requires the `@walletconnect/utils` dependency.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/one-click-auth.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { populateAuthPayload } from \"@walletconnect/utils\";\n\n// EVM chains that your wallet supports\nconst supportedChains = [\"eip155:1\", \"eip155:2\", 'eip155:137'];\n// EVM methods that your wallet supports\nconst supportedMethods = [\"personal_sign\", \"eth_sendTransaction\", \"eth_signTypedData\"];\n// Populate the authentication payload with the supported chains and methods\nconst authPayload = populateAuthPayload({\n  authPayload: payload.params.authPayload,\n  chains: supportedChains,\n  methods: supportedMethods,\n});\n// Prepare the user's address in CAIP10(https://github.com/ChainAgnostic/CAIPs/blob/main/CAIPs/caip-10.md) format\nconst iss = `eip155:1:0x0Df6d2a56F90e8592B4FfEd587dB3D5F5ED9d6ef`;\n// Now you can use the authPayload to format the authentication message\nconst message = walletKit.formatAuthMessage({\n  request: authPayload,\n  iss\n});\n\n// Present the authentication message to the user\n...\n```\n\n----------------------------------------\n\nTITLE: Triggering AppKit Connect Modal with React Hook - TypeScript\nDESCRIPTION: This snippet illustrates using the useAppKit hook from the @reown/appkit/react package in a React (TypeScript) application to manually open the AppKit Connect modal. The 'open' function from the hook can be triggered to show either the default connect view or the Networks modal by passing an options object. Required dependency: @reown/appkit/react must be installed. This approach provides finer control over modal invocation and allows configuration of the displayed view. Inputs include button click events; outputs are modal UI changes. Useful for apps needing custom button styling or advanced modal logic.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/ethers/about/triggermodal.mdx#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useAppKit } from \"@reown/appkit/react\";\n\nexport default function ConnectButton() {\n  // 4. Use modal hook\n  const { open } = useAppKit();\n\n  return (\n    <>\n      <button onClick={() => open()}>Open Connect Modal</button>\n      <button onClick={() => open({ view: \"Networks\" })}>\n        Open Network Modal\n      </button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing WalletConnectModal Web\nDESCRIPTION: This snippet shows how to import and initialize the WalletConnectModal in a web project using JavaScript. It requires your project ID and a list of supported chains.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { WalletConnectModal } from \"@walletconnect/modal\";\n\nconst modal = new WalletConnectModal({\n  projectId: \"YOUR_PROJECT_ID\",\n  chains: [\"eip155:1\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Get All Subscribers via Fetch API in JavaScript\nDESCRIPTION: This JavaScript snippet retrieves a list of all accounts subscribed to the application using the Fetch API. It makes a GET request to the `/<project-id>/subscribers` endpoint, authenticating with the API Secret, and expects a JSON array of account IDs.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/notifications/backend-integration.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst PROJECT_ID = \"<PROJECT_ID>\";\nconst NOTIFY_API_SECRET = \"<NOTIFY_API_SECRET>\";\nconst response = await fetch(\n  `https://notify.walletconnect.com/${PROJECT_ID}/subscribers`,\n  {\n    headers: {\n      Authorization: `Bearer ${NOTIFY_API_SECRET}`,\n    },\n  }\n);\nconst subscribers: string[] = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Example Parameters eth_sendTransaction javascript\nDESCRIPTION: Shows an example transaction object used as the parameter for the `eth_sendTransaction` method. This object specifies the details of the transaction, including the sender ('from'), recipient ('to'), data payload ('data'), gas limit ('gas'), gas price ('gasPrice'), and value ('value') in ether to be sent.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/ethereum-rpc.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    from: \"0xb60e8dd61c5d32be8058bb8eb970870f07233155\",\n    to: \"0xBDE1EAE59cE082505bB73fedBa56252b1b9C60Ce\",\n    data: \"0x\",\n    gasPrice: \"0x029104e28c\",\n    gas: \"0x5208\",\n    value: \"0x00\",\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: cURL Example for Sending Notifications via /notify Endpoint\nDESCRIPTION: This cURL command illustrates how to send a notification to a specific account using the Reown WalletConnect API. It specifies the POST method, endpoint URL, necessary authorization header with bearer token, content type, and JSON payload including notification details and target account list. Dependencies are curl and valid API credentials. Inputs include notification metadata and account IDs; output is the server response confirming request receipt.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/notifications/backend-integration.mdx#_snippet_1\n\nLANGUAGE: cURL\nCODE:\n```\ncurl -X POST 'https://notify.walletconnect.com/<PROJECT_ID>/notify' \\\n  --header 'Authorization: Bearer <NOTIFY_API_SECRET>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"notification\": {\n      \"type\": \"a1e53b95-18e5-4af8-9f03-9308ec87b687\",\n      \"title\": \"The price of Ethereum has risen\",\n      \"body\": \"The price of Ethereum has gone up 10%\",\n      \"url\": \"https://app.example.com\"\n    },\n    \"accounts\": [\n      \"eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029\"\n    ]\n  }'\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with npm in JavaScript\nDESCRIPTION: Provides the npm command to install Reown AppKit packages for JavaScript projects, replacing previous Web3Modal dependencies.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit @reown/appkit-adapter-wagmi\n```\n\n----------------------------------------\n\nTITLE: Handling Pairing Expiry Events (Kotlin/Android)\nDESCRIPTION: Implements the `onPairingExpired` callback within a `CoreClient.CoreDelegate` in the Android WalletKit SDK. This method is invoked when a pairing expires, allowing the wallet to handle the event.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval coreDelegate = object : CoreClient.CoreDelegate {\n    override fun onPairingExpired(expiredPairing: Core.Model.ExpiredPairing) {\n        // Here a pairing expiry is triggered\n    }\n    // ...other callbacks\n}\n\nCoreClient.setDelegate(coreDelegate)\n\n```\n\n----------------------------------------\n\nTITLE: Uninstall Old Solana Wallet Adapter Packages Using npm, Yarn, Bun, and pnpm\nDESCRIPTION: Removes previous Solana wallet adapter packages from the project to prepare for installing AppKit. The code provides commands for npm, Yarn, Bun, and pnpm package managers, ensuring cross-compatibility.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-anza-adapter-react.mdx#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm uninstall @solana/wallet-adapter-base @solana/wallet-adapter-react @solana/wallet-adapter-react-ui\n```\n\nLANGUAGE: Shell\nCODE:\n```\nyarn remove @solana/wallet-adapter-base @solana/wallet-adapter-react @solana/wallet-adapter-react-ui\n```\n\nLANGUAGE: Shell\nCODE:\n```\nnpm uninstall @solana/wallet-adapter-base @solana/wallet-adapter-react @solana/wallet-adapter-react-ui\n```\n\nLANGUAGE: Shell\nCODE:\n```\npnpm remove @solana/wallet-adapter-base @solana/wallet-adapter-react @solana/wallet-adapter-react-ui\n```\n\n----------------------------------------\n\nTITLE: Complete Policy Example with All Components\nDESCRIPTION: A fully functional policy combining contract targeting, method validation with ABI parsing, and chain/time configuration. This policy enforces rules about which contract methods can be called in a UserOperation.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/cloud/paymaster.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"policyType\": \"useroperation_payload_control\", /* currently the only one supported */\n  \"policyStaticProps\": {\n    \"contract1\": {\n      \"abi\": [...Contract ABI goes here]\n    }\n  },\n  {\n    \"metadata\": {\n      \"chainIds\": [\n        1,        // Etheruem\n        137,      // Polygon\n        11155111  // Sepolia (Testnet)\n      ],\n      \"startTime\": \"2024-10-23T15:50:00.000Z\",\n      \"endTime\": null\n    }\n  },\n  \"params\": {\n    \"key\": \"callData\",\n    \"op\": \"callDataToEquals\",\n    \"value\": \"0xa123cd918...\"\n  },\n  \"ands\": [\n    {\n      \"params\": {\n        \"key\": \"callData\",\n        \"op\": \"callDataMethodEquals\",\n        \"value\": \"methodFoo\"\n      },\n      \"metadata\": {\n        \"contractAbi\": \"<contract1.abi>\"\n      }\n    }\n  ],\n  \"ors\": [\n    {\n      \"params\": {\n        \"key\": \"callData\",\n        \"op\": \"callDataMethodEquals\",\n        \"value\": \"methodBar\"\n      },\n      \"metadata\": {\n        \"contractAbi\": \"<contract1.abi>\"\n      }\n    },\n    {\n      \"params\": {\n        \"key\": \"callData\",\n        \"op\": \"callDataMethodEquals\",\n        \"value\": \"methodBaz\"\n      },\n      \"metadata\": {\n        \"contractAbi\": \"<contract1.abi>\"\n      }\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AppKit for Vue applications\nDESCRIPTION: Initialize AppKit with the Wagmi adapter for Vue and update component structure. This includes configuring WagmiPlugin to work with AppKit in the Vue ecosystem.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following code line\n- createWeb3Modal({ wagmiConfig, projectId, chains })\n\n// Add the following code lines\n+ const modal = createAppKit({\n adapters: [wagmiAdapter],\n networks: [mainnet, arbitrum],\n metadata: metadata,\n projectId,\n features: {\n   analytics: true,\n }\n})\n\nexport default function App() {\n  return (\n    <>\n    // Add the following code line\n+   <WagmiPlugin config=\"{{ wagmiAdapter.wagmiConfig }}\">\n      <HomePage />\n    // Add the following code line\n+   </WagmiPlugin>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling On-Ramp Feature in AppKit (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to initialize AppKit using the `createAppKit` function while explicitly disabling the integrated Coinbase On-Ramp feature. The `onramp` flag within the `features` object is set to `false`; if omitted or set to `true`, the feature would be enabled by default. This configuration applies to both EVM and Solana networks.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/onramp.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst modal = createAppKit({\n  adapters: [wagmiAdapter],\n  projectId,\n  networks: [mainnet, arbitrum],\n  metadata: metadata,\n  features: {\n    onramp: false // Optional - true by default\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Signing Messages with useSignMessage Hook using React Native and Wagmi in TypeScript\nDESCRIPTION: This snippet shows how to use the useSignMessage hook from the wagmi library in a React Native application to enable message signing with a connected blockchain account. It imports React Native components and the hook to manage signing state (data, isError, isPending, isSuccess) and the signMessage function. The user can initiate signing via a Pressable component, which calls signMessage with a predefined message. It displays the signature or error messages conditionally based on the hook's asynchronous status. Dependencies include React Native and wagmi packages.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/wagmi/hooks.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, Text, Pressable } from \"react-native\";\nimport { useSignMessage } from \"wagmi\";\n\nfunction App() {\n  const { data, isError, isPending, isSuccess, signMessage } = useSignMessage();\n\n  return (\n    <View>\n      <Pressable\n        disabled={isPending}\n        onPress={() => signMessage({ message: \"hello world\" })}\n      >\n        <Text>Sign message</Text>\n      </Pressable>\n      {isSuccess && <Text>Signature: {data}</Text>}\n      {isError && <Text>Error signing message</Text>}\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Notify Message History by Topic Using WalletConnect Notify SDK in Swift\nDESCRIPTION: Invokes getMessageHistory(topic:) on the Notify instance to fetch historical push messages for a specified subscription topic. This function facilitates access to past push notifications within the app based on the subscription topic string.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\nNotify.instance.getMessageHistory(topic: subscription.topic)\n```\n\n----------------------------------------\n\nTITLE: Importing Multichain Component in AppKit (MDX/JavaScript)\nDESCRIPTION: This snippet demonstrates how to import the Multichain component from a shared directory in the project using JavaScript import syntax within an MDX file. The user must have the '/snippets/appkit/shared/multichain.mdx' file available in the project. The imported component can then be rendered as part of the documentation or application interface, supporting modular documentation authoring. The input is the path to the component and the output is a usable React/MDX component instance.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/multichain.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Multichain from \"/snippets/appkit/shared/multichain.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Installing expo-crypto package with Expo CLI\nDESCRIPTION: Command to install the expo-crypto package using Expo's package manager, which provides cryptographic functionality for Expo applications.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/expo/additional-expo48.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-crypto\n```\n\n----------------------------------------\n\nTITLE: Implementing Web3Inbox Registration and Subscription in React with Wagmi\nDESCRIPTION: Demonstrates how to use Web3Inbox hooks alongside Wagmi for user registration via message signing (SIWE) and managing notification subscriptions. Includes UI elements for registration, subscription toggling, and notification display.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/usage/example/react.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Index.tsx\nimport {\n  useNotifications,\n  usePrepareRegistration,\n  useRegister,\n  useSubscribe,\n  useSubscription,\n  useUnsubscribe,\n  useWeb3InboxAccount,\n  useWeb3InboxClient\n} from '@web3inbox/react'\nimport { useCallback, useEffect } from 'react'\nimport { useSignMessage, useAccount } from 'wagmi'\n\nimport Notifications from './Notifications'\n\nexport default function App() {\n  // Wagmi Hooks\n  const { address } = useAccount()\n  const { signMessageAsync } = useSignMessage()\n\n  // W3I Hooks\n  const { prepareRegistration } = usePrepareRegistration()\n  const { register, isLoading: isRegistering } = useRegister()\n  const { data: w3iClient, isLoading: w3iClientIsLoading } = useWeb3InboxClient()\n  const { isRegistered } = useWeb3InboxAccount(`eip155:1:${address}`)\n\n  // Registration of your address to allow notifications\n  // This is done via a signature of a message (SIWE) and the\n  // signMessageAsync function from wagmi\n  const handleRegistration = async () => {\n    try {\n      const { message, registerParams } = await prepareRegistration()\n      const signature = await signMessageAsync({ message: message })\n      await register({ registerParams, signature })\n    } catch (registerIdentityError: any) {\n      console.error(registerIdentityError)\n    }\n  }\n\n  // Subscription to dapp notifications\n  // Subscribe can be called as a function post registration\n  // Can be moved above but shown for example clarity\n  const { subscribe, isLoading: isSubscribing } = useSubscribe()\n  const { unsubscribe, isLoading: isUnsubscribing } = useUnsubscribe()\n  const { data: subscription } = useSubscription()\n  const isSubscribed = Boolean(subscription)\n\n  // Note: We are using AppKit for the dapp <> wallet connection.\n  // The <appkit-button /> module is from AppKit. Check AppKit Docs for further info.\n  return (\n    <>\n      <main className={styles.main}>\n        {w3iClientIsLoading ? (\n          <div>Loading W3I Client</div>\n        ) : (\n          <div>\n            <h1>W3I QuickStart</h1>\n            <appkit-button />\n            <div className={styles.flexColumn}>\n              <button onClick={handleRegistration} disabled={isRegistered}>\n                {isRegistered ? 'Registered' : 'Register'}\n              </button>\n              <button\n                onClick={isSubscribed ? unsubscribe : subscribe}\n                disabled={isSubscribing || isUnsubscribing}\n              >\n                {isSubscribed ? 'Unsubscribe' : 'Subscribe'}\n              </button>\n              <hr />\n              {isSubscribed ? <Notifications /> : null}\n            </div>\n          </div>\n        )}\n      </main>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Example Parameters eth_signTypedData javascript\nDESCRIPTION: Provides an example of the complex object structure required as the second parameter for the `eth_signTypedData` method. This object conforms to EIP-712 for signing structured data. It defines the data types, the primary type being signed, the domain separator information, and the actual message content.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/ethereum-rpc.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  \"0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826\",\n  {\n    types: {\n      EIP712Domain: [\n        {\n          name: \"name\",\n          type: \"string\",\n        },\n        {\n          name: \"version\",\n          type: \"string\",\n        },\n        {\n          name: \"chainId\",\n          type: \"uint256\",\n        },\n        {\n          name: \"verifyingContract\",\n          type: \"address\",\n        },\n      ],\n      Person: [\n        {\n          name: \"name\",\n          type: \"string\",\n        },\n        {\n          name: \"wallet\",\n          type: \"address\",\n        },\n      ],\n      Mail: [\n        {\n          name: \"from\",\n          type: \"Person\",\n        },\n        {\n          name: \"to\",\n          type: \"Person\",\n        },\n        {\n          name: \"contents\",\n          type: \"string\",\n        },\n      ],\n    },\n    primaryType: \"Mail\",\n    domain: {\n      name: \"Ether Mail\",\n      version: \"1\",\n      chainId: 1,\n      verifyingContract: \"0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC\",\n    },\n    message: {\n      from: {\n        name: \"Cow\",\n        wallet: \"0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826\",\n      },\n      to: {\n        name: \"Bob\",\n        wallet: \"0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB\",\n      },\n      contents: \"Hello, Bob!\",\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Handling URI Display Event and Connecting without AppKit (TypeScript/JavaScript)\nDESCRIPTION: Shows how to subscribe to the `display_uri` event from the provider to handle QR code or deep link generation. Also illustrates connecting to a wallet directly or enabling the provider for account access, suitable for custom UI handling of connection prompts.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/providers/ethereum.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction handleURI(uri: string) {\n  // Handle the URI, e.g., generate QR code or redirect\n}\n\nprovider.on(\"display_uri\", handleURI);\n\nawait provider.connect();\n// or\nconst accounts = await provider.enable();\n```\n\n----------------------------------------\n\nTITLE: Configuring Push Notifications with Firebase and Notifee in React Native\nDESCRIPTION: A complete setup for handling push notifications in a React Native application using WalletConnect Notify Client with Firebase Messaging and Notifee. Includes device registration, token management, and notification display.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/notify/usage.mdx#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nimport { AppRegistry } from \"react-native\";\nimport { name as appName } from \"./app.json\";\nimport crypto from \"react-native-quick-crypto\";\n\nimport messaging from \"@react-native-firebase/messaging\";\nimport notifee, {\n  AndroidImportance,\n  AndroidVisibility,\n  EventType,\n} from \"@notifee/react-native\";\nimport { NotifyClient } from \"@walletconnect/notify-client\";\nimport { decryptMessage } from \"@walletconnect/notify-message-decrypter\";\n\nimport App from \"./src/App\";\n\nconst polyfillDigest = async (algorithm, data) => {\n  const algo = algorithm.replace(\"-\", \"\").toLowerCase();\n  const hash = crypto.createHash(algo);\n  hash.update(data);\n  return hash.digest();\n};\n\nglobalThis.crypto = crypto;\nglobalThis.crypto.subtle = {\n  digest: polyfillDigest,\n};\n\n// Create notification channel (Android only feature)\nnotifee.createChannel({\n  id: \"default\",\n  name: \"Default Channel\",\n  lights: false,\n  vibration: true,\n  importance: AndroidImportance.HIGH,\n  visibility: AndroidVisibility.PUBLIC,\n});\n\nlet notifyClient;\n\nconst projectId = process.env.ENV_PROJECT_ID;\n\nasync function registerAppWithFCM() {\n  // This is expected to be automatically handled on iOS. See https://rnfirebase.io/reference/messaging#registerDeviceForRemoteMessages\n  if (Platform.OS === \"android\") {\n    await messaging().registerDeviceForRemoteMessages();\n  }\n}\n\nasync function registerClient(deviceToken, clientId) {\n  const body = JSON.stringify({\n    client_id: clientId,\n    token: deviceToken,\n    type: \"fcm\",\n    always_raw: true,\n  });\n\n  const requestOptions = {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body,\n  };\n\n  return fetch(\n    `https://echo.walletconnect.com/${projectId}/clients`,\n    requestOptions\n  )\n    .then((response) => response.json())\n    .then((result) => console.log(\">>> registered client\", result))\n    .catch((error) => console.log(\">>> error while registering client\", error));\n}\n\nasync function handleGetToken(token) {\n  const status = await messaging().requestPermission();\n  const enabled =\n    status === messaging.AuthorizationStatus.AUTHORIZED ||\n    status === messaging.AuthorizationStatus.PROVISIONAL;\n\n  if (enabled) {\n    notifyClient = await NotifyClient.init({ projectId });\n    const clientId = await notifyClient.core.crypto.getClientId();\n    return registerClient(token, clientId);\n  }\n}\n\nmessaging().getToken().then(handleGetToken);\nmessaging().onTokenRefresh(handleGetToken);\n\nasync function onMessageReceived(remoteMessage) {\n  if (!remoteMessage.data?.blob || !remoteMessage.data?.topic) {\n    console.log(\"Missing blob or topic on notification message.\");\n    return;\n  }\n\n  const decryptedMessage = await decryptMessage({\n    topic: remoteMessage.data?.topic,\n    encryptedMessage: remoteMessage.data?.blob,\n  });\n\n  return notifee.displayNotification({\n    title: decryptedMessage.title,\n    body: decryptedMessage.body,\n    id: \"default\",\n    android: {\n      channelId: \"default\",\n      importance: AndroidImportance.HIGH,\n      visibility: AndroidVisibility.PUBLIC,\n      smallIcon: \"ic_launcher\", // optional, defaults to 'ic_launcher'.\n      // pressAction is needed if you want the notification to open the app when pressed. See https://notifee.app/react-native/docs/ios/interaction#press-action\n      pressAction: {\n        id: \"default\",\n      },\n    },\n  });\n}\n\nmessaging().onMessage(onMessageReceived);\nmessaging().setBackgroundMessageHandler(onMessageReceived);\n\nnotifee.onBackgroundEvent(async ({ type, detail }) => {\n  const { notification, pressAction } = detail;\n\n  // Check if the user pressed the \"Mark as read\" action\n  if (type === EventType.ACTION_PRESS && pressAction.id === \"mark-as-read\") {\n    // Remove the notification\n    await notifee.cancelNotification(notification.id);\n  }\n});\n\nfunction HeadlessCheck({ isHeadless }) {\n  if (isHeadless) {\n    // App has been launched in the background by iOS, ignore\n    return null;\n  }\n\n  // Render the app component on foreground launch\n  return <App />;\n}\n\nAppRegistry.registerComponent(appName, () => HeadlessCheck);\n```\n\n----------------------------------------\n\nTITLE: Using Wallet Provider with Ethers in Vue\nDESCRIPTION: Demonstrates how to use the useAppKitProvider hook to access wallet provider functionality and sign messages using ethers.js library.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/ethers5/composables.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  useAppKitAccount,\n  useAppKitProvider,\n  useAppKitNetwork,\n} from \"@reown/appkit/vue\";\nimport { ethers } from \"ethers\";\nimport { useAppKitProvider } from \"@reown/appkit/vue\";\n\nfunction Components() {\n  const { walletProvider } = useAppKitProvider(\"eip155\");\n  const { address } = useAppKitAccount();\n  const { chainId } = useAppKitNetwork();\n\n  async function onSignMessage() {\n    const provider = new ethers.providers.Web3Provider(walletProvider, chainId);\n    const signer = provider.getSigner(address);\n    const signature = await signer?.signMessage(\"Hello AppKit Ethers\");\n    console.log(signature);\n  }\n\n  return <button onClick={() => onSignMessage()}>Sign Message</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with pnpm in React\nDESCRIPTION: This snippet shows the pnpm command to install Reown AppKit packages in React, replacing Web3Modal dependencies.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit @reown/appkit-adapter-wagmi @tanstack/react-query\n```\n\n----------------------------------------\n\nTITLE: Approving Session Proposal - WalletKit - Kotlin\nDESCRIPTION: Approves a received session proposal from a dapp. Requires the proposer's public key and a map defining the approved namespaces, including allowed accounts (following CAIP-10), methods, and events.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/usage.mdx#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval proposerPublicKey: String = /*Proposer publicKey from SessionProposal object*/\nval namespace: String = /*Namespace identifier, see for reference: https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-2.md#syntax*/\nval accounts: List<String> = /*List of accounts on chains*/\nval methods: List<String> = /*List of methods that wallet approves*/\nval events: List<String> = /*List of events that wallet approves*/\nval namespaces: Map<String, Wallet.Model.Namespaces.Session> = mapOf(namespace, Wallet.Model.Namespaces.Session(accounts, methods, events))\n\nval approveParams: Wallet.Params.SessionApprove = Wallet.Params.SessionApprove(proposerPublicKey, namespaces)\nWalletKit.approveSession(approveParams) { error -> /*callback for error while approving a session*/ }\n```\n\n----------------------------------------\n\nTITLE: Pairing Wallet with Dapp (JavaScript/React Native)\nDESCRIPTION: Initiates a pairing connection between a React Native wallet and a dapp using the WalletKit client. Requires a pairing URI and includes basic error handling.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst uri = 'xxx'; // pairing uri\ntry {\n    await walletKit.pair({ uri });\n} catch (error) {\n    // some error happens while pairing - check Expected errors section\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling WalletConnect Modal via Package Managers - Bash\nDESCRIPTION: Demonstrates how to remove the @walletconnect/modal package from a project using popular JavaScript package managers (npm, Yarn, Bun, pnpm). These commands are prerequisites before switching to AppKit Core. Each command should be run in the terminal from the project root. No specific inputs or outputs, but ensures the dependency is removed to prevent conflicts.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/wcm.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @walletconnect/modal\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn remove @walletconnect/modal\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun remove @walletconnect/modal\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm remove @walletconnect/modal\n```\n\n----------------------------------------\n\nTITLE: Adding AppKit Dependencies in App Gradle File\nDESCRIPTION: Adds the required dependencies to the app's build.gradle.kts file, using the Android BOM (Bill of Materials) for version management along with the core and appkit libraries.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/installation.mdx#_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\nimplementation(platform(\"com.reown:android-bom:$BOM_VERSION\"))\nimplementation(\"com.reown:android-core\")\nimplementation(\"com.reown:appkit\")\n```\n\n----------------------------------------\n\nTITLE: Handling Coinbase Wallet Responses in iOS AppDelegate (Swift)\nDESCRIPTION: Overrides `application(_:open:options:)` and `application(_:continue:restorationHandler:)` methods in `AppDelegate.swift` to intercept and handle incoming URLs. It specifically checks if the `CoinbaseWalletSDK` is configured and attempts to process URLs originating from the Coinbase Wallet app, facilitating the dApp-wallet communication.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/installation.mdx#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\noverride func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -> Bool {\n    if #available(iOS 13.0, *) {\n      if (CoinbaseWalletSDK.isConfigured == true) {\n        if (try? CoinbaseWalletSDK.shared.handleResponse(url)) == true {\n            return true\n        }\n      }\n    }\n\n    return super.application(app, open: url, options: options)\n}\n\noverride func application(_ application: UIApplication, continue userActivity: NSUserActivity, restorationHandler: @escaping ([UIUserActivityRestoring]?) -> Void) -> Bool {\n    if #available(iOS 13.0, *) {\n      if (CoinbaseWalletSDK.isConfigured == true) {\n        if let url = userActivity.webpageURL,\n            (try? CoinbaseWalletSDK.shared.handleResponse(url)) == true {\n            return true\n        }\n      }\n    }\n\n    return super.application(application, continue: userActivity, restorationHandler: restorationHandler)\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching All Subscribers from Reown Notify API using JavaScript Fetch\nDESCRIPTION: JavaScript example using `fetch` to retrieve a list of all accounts subscribed to the app's notifications. It sends a GET request to the `/<project-id>/subscribers` endpoint with the necessary Authorization header (Bearer token). Note this is an expensive, rate-limited operation.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/backend-integration.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst PROJECT_ID = \"<PROJECT_ID>\";\nconst NOTIFY_API_SECRET = \"<NOTIFY_API_SECRET>\";\nconst response = await fetch(\n  `https://notify.walletconnect.com/${PROJECT_ID}/subscribers`,\n  {\n    headers: {\n      Authorization: `Bearer ${NOTIFY_API_SECRET}`,\n    },\n  }\n);\nconst subscribers: string[] = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Fetching Pending WalletConnect Session Requests by Topic - Kotlin\nDESCRIPTION: This snippet retrieves pending session requests for a given topic via SignClient.getPendingRequests, returning a PendingRequest object with request details including requestId, method, chainId, and params. The method requires a topic parameter (session identifier). It's utilized to monitor unprocessed or outstanding session requests within the WalletConnect protocol.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\nSignClient.getPendingRequests(topic: String)\n```\n\n----------------------------------------\n\nTITLE: Setting up Solana Adapter and AppKit Configuration\nDESCRIPTION: Code showing how to replace the Web3Modal configuration with Reown AppKit setup, including creating a Solana adapter and configuring networks.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-solana-web.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following code lines\n- const solanaConfig = defaultSolanaConfig({ ... });\n- createWeb3Modal( ... });\n\n// Add the following code lines\n+ const solanaAdapter = new SolanaAdapter({\n+   wallets: [new PhantomWalletAdapter(), new SolflareWalletAdapter()]\n+ })\n\n+ const modal = createAppKit({\n+   projectId,\n+   metadata,\n+   networks: [solana, solanaTestnet, solanaDevnet],\n+   adapters: [solanaAdapter],\n+ })\n```\n\n----------------------------------------\n\nTITLE: Rejecting session authentication requests in TypeScript\nDESCRIPTION: This snippet shows how to reject an incoming authentication request using the rejectSessionAuthenticate method, providing a reason such as USER_REJECTED from the SDK's error utilities. This is used when the user declines authentication or it cannot be approved.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/one-click-auth.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getSdkError } from \"@walletconnect/utils\";\n\nawait walletKit.rejectSessionAuthenticate({\n  id: payload.id,\n  reason: getSdkError(\"USER_REJECTED\"), // or choose a different reason if applicable\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Networks for EVM Chains with Reown AppKit (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import available EVM chain networks from Reown AppKit for quick configuration. Required dependency is '@reown/appkit/networks', and it shows how to select specific networks for app use. The imported networks are supplied as options to Reown AppKit functions for unified blockchain connectivity. Supports Viem's wide network range.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/wagmi/about/implementation.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createAppKit } from '@reown/appkit/vue'\nimport { mainnet, arbitrum, base, scroll, polygon } from '@reown/appkit/networks'\n```\n\n----------------------------------------\n\nTITLE: Defining BitcoinConnector Interface in TypeScript\nDESCRIPTION: Defines the BitcoinConnector interface extending ChainAdapterConnector and Provider interfaces. It specifies asynchronous methods for getting account addresses, signing messages, sending transfers, and signing PSBTs, each returning Promises of specified types. This interface serves as the primary contract for interacting with Bitcoin blockchain functionality within an application, requiring proper implementations of these methods.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/bitcoin-provider.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface BitcoinConnector extends ChainAdapterConnector, Provider {\n  getAccountAddresses(): Promise<BitcoinConnector.AccountAddress[]>;\n  signMessage(params: BitcoinConnector.SignMessageParams): Promise<string>;\n  sendTransfer(params: BitcoinConnector.SendTransferParams): Promise<string>;\n  signPSBT(\n    params: BitcoinConnector.SignPSBTParams\n  ): Promise<BitcoinConnector.SignPSBTResponse>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AppKit with Custom Solana Adapters - TypeScript\nDESCRIPTION: This snippet demonstrates initializing the reown/appkit library using the SolanaAdapter and including custom Solana wallet adapters. It involves importing necessary modules and specific wallet adapters like Phantom and Solflare, creating an instance of `SolanaAdapter` with an array of desired adapters, defining networks and metadata, and finally initializing the AppKit modal with the configured adapter, networks, metadata, and project ID. Requires `@reown/appkit/vue`, `@reown/appkit-adapter-solana/vue`, and `@solana/wallet-adapter-wallets`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/custom-connectors.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { createAppKit } from \"@reown/appkit/vue\";\nimport { SolanaAdapter } from \"@reown/appkit-adapter-solana/vue\";\nimport { solana, solanaTestnet, solanaDevnet } from \"@reown/appkit/networks\";\n\nimport {\n  SolflareWalletAdapter,\n  PhantomWalletAdapter,\n} from \"@solana/wallet-adapter-wallets\";\n\n// 0. Set up Solana adapter\nconst solanaWeb3JsAdapter = new SolanaAdapter({\n  wallets: [new PhantomWalletAdapter(), new SolflareWalletAdapter()],\n});\n\n// 1. Get projectId from https://cloud.reown.com\nconst projectId = \"YOUR_PROJECT_ID\";\n\n// 2. Set up the metadata\nconst metadata = {\n  //...\n};\n\n// 3. Create the modal\nconst modal = createAppKit({\n  adapters: [solanaWeb3JsAdapter],\n  networks: [solana, solanaTestnet, solanaDevnet],\n  metadata: metadata,\n  projectId,\n  features: {\n    analytics: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Chain Logo Image Mapping in TypeScript\nDESCRIPTION: This TypeScript snippet defines an object named \"chainImages\" that maps blockchain network chain IDs (such as 1 for Ethereum and 137 for Polygon) to their respective logo image file paths. No external dependencies are required, though accurate chain IDs should align with those listed on chainlist.org. The input is a set of key-value pairs where keys are numeric chain IDs and values are string file paths; the output is an object usable for network-to-logo lookups in web applications. To extend, additional chain IDs and image paths can be added. The mapping defaults to undefined if a chain ID is not present, and image files must exist at the specified locations.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/web3modal/v2/_partials/options/chainImages.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nchainImages: {\n  1: \"/images/ethereum.webp\",\n  137: \"/images/polygon.webp\",\n};\n```\n\n----------------------------------------\n\nTITLE: Disconnecting the User Session in C#\nDESCRIPTION: Shows how to asynchronously disconnect the current user and clear the active session using the `AppKit.DisconnectAsync()` method in C#.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/actions.mdx#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nawait AppKit.DisconnectAsync();\n```\n\n----------------------------------------\n\nTITLE: Sending Pre-Signed Raw Transactions via EVM in C#\nDESCRIPTION: Demonstrates how to broadcast a pre-signed transaction to the network using `AppKit.EVM.SendRawTransactionAsync()` in C#. Takes the signed transaction data as a hex string and returns the transaction hash.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/actions.mdx#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nstring txHash = await AppKit.EVM.SendRawTransactionAsync(\n    \"0x123...\" // signed transaction data\n);\n```\n\n----------------------------------------\n\nTITLE: Polyfilling Crypto in Expo SDK 48 for WalletConnectModal React Native (JavaScript)\nDESCRIPTION: Provides a JavaScript polyfill to support the crypto.getRandomValues method in Expo SDK 48 environments where the native crypto API is not available. This polyfill uses expo-crypto's getRandomValues implementation and conditionally defines window.crypto to ensure compatibility for WalletConnectModal components.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/about.mdx#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n// src/crypto-polyfill.js\\n\\n// Apply only with Expo SDK 48\\nimport { getRandomValues as expoCryptoGetRandomValues } from \"expo-crypto\";\\n\\nclass Crypto {\\n  getRandomValues = expoCryptoGetRandomValues;\\n}\\n\\n// eslint-disable-next-line no-undef\\nconst webCrypto = typeof crypto !== \"undefined\" ? crypto : new Crypto();\\n\\n(() => {\\n  if (typeof crypto === \"undefined\") {\\n    Object.defineProperty(window, \"crypto\", {\\n      configurable: true,\\n      enumerable: true,\\n      get: () => webCrypto,\\n    });\\n  }\\n})();\n```\n\n----------------------------------------\n\nTITLE: Updating SPM Dependency URL for reown-swift\nDESCRIPTION: Modifies the Package.swift file to replace the old WalletConnectSwiftV2 repository URL with the new reown-swift repository URL when using Swift Package Manager. This is necessary to fetch the WalletKit library.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/upgrade/from-web3wallet-ios.mdx#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n/* highlight-delete-start */\n- .package(url: \"https://github.com/WalletConnect/WalletConnectSwiftV2\", from: \"1.0.0\"),\n/* highlight-delete-end */\n/* highlight-add-start */\n+ .package(url: \"https://github.com/reown-com/reown-swift\", from: \"1.0.0\"),\n/* highlight-add-end */\n```\n\n----------------------------------------\n\nTITLE: Getting Current AppKit Theme Mode in TypeScript\nDESCRIPTION: Shows how to retrieve the currently active theme mode ('dark' or 'light') of the AppKit modal using the `modal.getThemeMode()` method. Requires an initialized `modal` instance.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/actions.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst modal = createAppKit({ wagmiConfig, projectId });\n\nconst themeMode = modal.getThemeMode();\n```\n\n----------------------------------------\n\nTITLE: Initializing Reown WalletKit with Link Mode enabled (Dart)\nDESCRIPTION: This snippet shows how to initialize the `ReownWalletKit` instance in a Flutter application. It configures the `ReownCore` with a project ID and sets up the `PairingMetadata` for the wallet. Crucially, it demonstrates how to enable Link Mode by providing a `Redirect` object with `universal` and `native` URLs and setting the `linkMode` property to `true`. This configuration allows the wallet to receive requests via Universal/App Links.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/link-mode.mdx#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nfinal _walletKit = ReownWalletKit(\n  core: ReownCore(\n    projectId: '{YOUR_PROJECT_ID}',\n  ),\n  metadata: PairingMetadata(\n    name: 'Example Wallet',\n    description: 'Example wallet description',\n    url: 'https://example.com/',\n    icons: ['https://example.com/logo.png'],\n    redirect: Redirect(\n      native: 'examplewallet://',\n      universal: 'https://example.com/wallet',\n      linkMode: true,\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Result Response for hedera_signAndExecuteTransaction - JSON\nDESCRIPTION: Shows the expected JSON-RPC success result for hedera_signAndExecuteTransaction, returning nodeId, transactionHash, and transactionId. Used by clients to confirm transaction submission to Hedera. The result contains network identifiers as strings.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/hedera-rpc.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"nodeId\": \"0.0.3\",\n    \"transactionHash\": \"252b8fd...\",\n    \"transactionId\": \"0.0.12345678@1689281510.675369303\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Reown AppKit Modal in React (TypeScript)\nDESCRIPTION: This TypeScript/React snippet demonstrates replacing the default useWeb3Modal hook with useAppKit from '@reown/appkit/react' to trigger the Reown modal. The HomePage component initializes the modal handler and renders a button that opens the modal on click. Dependencies include React and the '@reown/appkit/react' package. The key parameter is the open function from useAppKit, which requires no arguments. Output: the modal is displayed when the button is clicked. This integration assumes use of functional React components and ES module imports.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_39\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Remove the following import\n- import { useWeb3Modal } from '@web3modal/wagmi/react'\n\n// Add the following import\n+ import { useAppKit } from '@reown/appkit/react'\n\nfunction HomePage() {\n  const { open } = useAppKit()\n\n  return <button onClick={open}>Connect</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with Bun in JavaScript\nDESCRIPTION: This command installs Reown AppKit packages using Bun for JavaScript project setup.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\nbun a @reown/appkit @reown/appkit-adapter-wagmi\n```\n\n----------------------------------------\n\nTITLE: Approving a Session Proposal - Swift\nDESCRIPTION: This snippet illustrates how to approve a session proposal by calling the approve method with proposal ID, session namespaces, and properties. It includes error handling to present issues to the user. Used during user acceptance of a session proposal. Dependencies include WalletKit SDK.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/best-practices.mdx#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\ndo {\n    try await WalletKit.instance.approve(proposalId: proposal.id, namespaces: sessionNamespaces, sessionProperties: proposal.sessionProperties)\n    // Update UI, remove loader\n} catch {\n    // present error\n}\n```\n\n----------------------------------------\n\nTITLE: Install WalletConnect Modal (npm)\nDESCRIPTION: Installs the WalletConnectModal library using npm, providing the UI components necessary for connecting wallets in Web and React Native Dapps.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @walletconnect/modal\n```\n\n----------------------------------------\n\nTITLE: Installing @web3inbox/core with Bun\nDESCRIPTION: Command to install the @web3inbox/core package using Bun package manager.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/usage/installation/javascript.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbun a @web3inbox/core\n```\n\n----------------------------------------\n\nTITLE: Fetching Server Public Key via API in JavaScript\nDESCRIPTION: Frontend JavaScript code demonstrating how to fetch the server's public key from a designated API endpoint (`/api/signer`) using the `fetch` API. This public key is required to specify the delegate signer in the permission request.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/smart-sessions.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await fetch(`${apiURL}/api/signer`);\nconst { publicKey: dAppECDSAPublicKey } = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Subscribing to WalletConnect Session Events in JavaScript\nDESCRIPTION: Shows how to subscribe to session-specific events like expiration, updates, and general session events using `_appKitModal`. These events are explicitly noted as being available only when using the WalletConnect protocol, not for Coinbase Wallet, Email, or Social Logins.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/events.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n_appKitModal.onSessionExpireEvent.subscribe((SessionExpire? event) {});\n\n_appKitModal.onSessionUpdateEvent.subscribe((SessionUpdate? event) {});\n\n_appKitModal.onSessionEventEvent.subscribe((SessionEvent? event) {});\n```\n\n----------------------------------------\n\nTITLE: Overriding AppKit Theme Variables with TypeScript\nDESCRIPTION: This code snippet defines a TypeScript object named \"themeVariables\" for specifying CSS custom property overrides used by the AppKit framework. The object uses CSS variable names as keys and custom values for overriding font family, accent color, and other parameters. To use this snippet, ensure that you are integrating with AppKit and have access to the appropriate CSS variable hooks. The expected input is a mapping of CSS custom properties (keys) to their desired values (strings), and the output is an object that AppKit can use to apply the theme across components. Note that not all variables are shown in this example; refer to the theming section of the AppKit documentation for full options.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/web3modal/v2/_partials/options/themeVariables.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nthemeVariables: {\n  \"--w3m-font-family\": \"Roboto, sans-serif\",\n  \"--w3m-accent-color\": \"#F5841F\",\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Add WalletConnect Notify SDK Dependencies in Android app/build.gradle.kts\nDESCRIPTION: Includes the required platform dependencies for the WalletConnect Android BOM along with the core and notify modules in the app-level Gradle build script. Replace ::release_version with the appropriate release tag. This setup ensures version alignment and availability of core WalletConnect and Notify functionality for the Android app.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_24\n\nLANGUAGE: gradle\nCODE:\n```\nimplementation(platform(\"com.walletconnect:android-bom::release_version\"))\nimplementation(\"com.walletconnect:android-core\")\nimplementation(\"com.walletconnect:notify\")\n```\n\n----------------------------------------\n\nTITLE: Updating Imports in JavaScript\nDESCRIPTION: Code changes required to update imports from Web3Modal v5 to Reown AppKit in JavaScript applications, highlighting removed and added imports.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-solana-web.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following imports\n- import { createWeb3Modal, defaultSolanaConfig, useWeb3ModalAccount, useWeb3ModalProvider } from '@web3modal/solana/react'\n- import { solana, solanaTestnet, solanaDevnet } from '@web3modal/solana/chains'\n\n// Add the following imports\n+ import { solana, solanaTestnet, solanaDevnet } from '@reown/appkit/networks'\n+ import { createAppKit } from '@reown/appkit'\n+ import { SolanaAdapter } from '@reown/appkit-adapter-solana'\n```\n\n----------------------------------------\n\nTITLE: Installing @reown/appkit-wallet-button via pnpm\nDESCRIPTION: This snippet details installing the package with pnpm, offering an alternative package management tool for project setup.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/components.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit-wallet-button\n```\n\n----------------------------------------\n\nTITLE: Configuring Partial CSP for WalletConnect AppKit\nDESCRIPTION: This snippet provides a partial Content Security Policy (CSP) configuration specifically designed to accommodate WalletConnect's libraries and services when used with AppKit. It defines allowed sources for various content types like scripts, styles, images, fonts, connections (including WalletConnect relays and RPCs), and frames. This policy should be extended with additional sources required by the application's specific dependencies and features.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/security/content-security-policy.mdx#_snippet_0\n\nLANGUAGE: CSP\nCODE:\n```\ndefault-src 'self';\nscript-src 'self';\nstyle-src https://fonts.googleapis.com;\nimg-src * 'self' data: blob: https://walletconnect.org https://walletconnect.com https://secure.walletconnect.com https://secure.walletconnect.org https://tokens-data.1inch.io https://tokens.1inch.io https://ipfs.io https://cdn.zerion.io;\nfont-src 'self' https://fonts.gstatic.com;\nconnect-src 'self' https://rpc.walletconnect.com https://rpc.walletconnect.org https://relay.walletconnect.com https://relay.walletconnect.org wss://relay.walletconnect.com wss://relay.walletconnect.org https://pulse.walletconnect.com https://pulse.walletconnect.org https://api.web3modal.com https://api.web3modal.org https://keys.walletconnect.com https://keys.walletconnect.org https://notify.walletconnect.com https://notify.walletconnect.org https://echo.walletconnect.com https://echo.walletconnect.org https://push.walletconnect.com https://push.walletconnect.org wss://www.walletlink.org;\nframe-src 'self' https://verify.walletconnect.com https://verify.walletconnect.org https://secure.walletconnect.com https://secure.walletconnect.org;\n```\n\n----------------------------------------\n\nTITLE: Triggering Modal in React\nDESCRIPTION: Example showing how to update the code for opening the modal in React applications using the new useAppKit hook from Reown AppKit.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-solana-web.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following code line\n- import { useWeb3Modal } from '@web3modal/wagmi/react'\n\n// Add the following code lines\n+ import { useAppKit } from '@reown/appkit/react'\nfunction HomePage() {\n  const { open } = useAppKit()\n  return <button onClick={open}>Connect</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WalletDelegate - WalletKit - Kotlin\nDESCRIPTION: Sets up a WalletDelegate object to receive asynchronous callbacks from the WalletKit SDK. This delegate handles various events like session proposals, authentication requests, session requests (signing), authorization requests, session deletions, session settle/update responses, connection state changes, and errors.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/usage.mdx#_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval walletDelegate = object : WalletKit.WalletDelegate {\n    override fun onSessionProposal(sessionProposal: Wallet.Model.SessionProposal, verifyContext: Wallet.Model.VerifyContext) {\n        // Triggered when wallet receives the session proposal sent by a Dapp\n    }\n\n    fun onSessionAuthenticate(sessionAuthenticate: Wallet.Model.SessionAuthenticate, verifyContext: Wallet.Model.VerifyContext) {\n      // Triggered when wallet receives the session authenticate sent by a Dapp\n    }\n\n    override fun onSessionRequest(sessionRequest: Wallet.Model.SessionRequest, verifyContext: Wallet.Model.VerifyContext) {\n        // Triggered when a Dapp sends SessionRequest to sign a transaction or a message\n    }\n\n    override fun onAuthRequest(authRequest: Wallet.Model.AuthRequest, verifyContext: Wallet.Model.VerifyContext) {\n        // Triggered when Dapp / Requester makes an authorization request\n    }\n\n    override fun onSessionDelete(sessionDelete: Wallet.Model.SessionDelete) {\n        // Triggered when the session is deleted by the peer\n    }\n\n    override fun onSessionSettleResponse(settleSessionResponse: Wallet.Model.SettledSessionResponse) {\n        // Triggered when wallet receives the session settlement response from Dapp\n    }\n\n    override fun onSessionUpdateResponse(sessionUpdateResponse: Wallet.Model.SessionUpdateResponse) {\n        // Triggered when wallet receives the session update response from Dapp\n    }\n\n    override fun onConnectionStateChange(state: Wallet.Model.ConnectionState) {\n        //Triggered whenever the connection state is changed\n    }\n\n    override fun onError(error: Wallet.Model.Error) {\n        // Triggered whenever there is an issue inside the SDK\n    }\n}\nWalletKit.setWalletDelegate(walletDelegate)\n```\n\n----------------------------------------\n\nTITLE: Updating AppKit Theme classes\nDESCRIPTION: This snippet highlights the change from Web3Modal theme classes to Reown AppKit theme classes, suggesting how to replace old class references with new ones for consistent theming.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-flutter.mdx#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n<Table\n  headers={[\"Old\", \"New\"]}\n  data=[\n    { old: { code: \"Web3ModalThemeData\" }, new: { code: \"ReownAppKitModalThemeData\" } },\n    { old: { code: \"Web3ModalTheme\" }, new: { code: \"ReownAppKitModalTheme\" } },\n    { old: { code: \"Web3ModalColors\" }, new: { code: \"ReownAppKitModalColors\" } },\n    { old: { code: \"Web3ModalRadiuses\" }, new: { code: \"ReownAppKitModalRadiuses\" } }\n  ]\n/>\n```\n\n----------------------------------------\n\nTITLE: Registering Request Handlers for Session Management in JavaScript\nDESCRIPTION: Demonstrates how to register request handlers for supported blockchain chains and methods, including implementation of personal_sign and eth_sendTransaction handlers with approval flow.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/usage.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfinal supportedChains = ['eip155:1', 'eip155:137'];\nMap<String, dynamic Function(String, dynamic)> supportedMethods = {\n  'personal_sign': _personalSignHandler,\n  'eth_sendTransaction': _ethSendTransactionHandler,\n};\nfor (var chainId in supportedChains) {\n  for (var method in supportedMethods.entries) {\n    _walletKit.registerRequestHandler(\n      chainId: chainId,\n      method: method.key,\n      handler: method.value,\n    );\n  }\n}\n\nFuture<void> _personalSignHandler(String topic, dynamic params) async {\n  final SessionRequest pendingRequest = _walletKit.pendingRequests.getAll().last;\n  final int requestId = pendingRequest.id;\n\n  // message should arrive encoded\n  final decoded = hex.decode(params.first.substring(2));\n  final message = utf8.decode(decoded);\n\n  // display a prompt for the user to approve or reject the request\n  // if approved\n  if (approved) {\n    // Your code to sign the message here\n    final signature = await signMessage(message);\n\n    return _walletKit.respondSessionRequest(\n      topic: topic,\n      response: JsonRpcResponse(\n        id: requestId,\n        jsonrpc: '2.0',\n        result: signature,\n      ),\n    );\n  }\n\n  // if rejected\n  return _walletKit.respondSessionRequest(\n    topic: topic,\n    response: JsonRpcResponse(\n      id: id,\n      jsonrpc: '2.0',\n      error: const JsonRpcError(code: 5001, message: 'User rejected method'),\n    ),\n  );\n}\n\nFuture<void> _ethSendTransactionHandler(String topic, dynamic params) async {\n  final SessionRequest pendingRequest = _walletKit.pendingRequests.getAll().last;\n  final int requestId = pendingRequest.id;\n  final String chainId = pendingRequest.chainId;\n\n  final transaction = (params as List<dynamic>).first as Map<String, dynamic>;\n\n  // display a prompt for the user to approve or reject the request\n  // if approved\n  if (approved) {\n    final signedTx = await sendTransaction(transaction, int.parse(chainId));\n    // respond to requester\n    await _walletKit.respondSessionRequest(\n      topic: topic,\n      response: JsonRpcResponse(\n        id: requestId, \n        jsonrpc: '2.0', \n        result: signedTx,\n      ),\n    );\n  }\n\n  // if rejected\n  return _walletKit.respondSessionRequest(\n    topic: topic,\n    response: JsonRpcResponse(\n      id: id,\n      jsonrpc: '2.0',\n      error: const JsonRpcError(code: 5001, message: 'User rejected method'),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Detailed SIWX Interface Definitions in TypeScript\nDESCRIPTION: Comprehensive type definitions for all SIWX-related interfaces including SIWXConfig, SIWXSession, SIWXMessage, and Cacao. These interfaces are exported from the @reown/appkit-core package.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/siwx/siwx-custom.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * This interface represents the SIWX configuration plugin, which is used to create and manage SIWX messages and sessions.\n * AppKit provides predefined implementations for this interface through `@reown/appkit-siwx`.\n * You may use it to create a custom implementation following your needs, but watch close for the methods requirements.\n */\nexport interface SIWXConfig {\n  /**\n   * This method will be called to create a new message to be signed by the user.\n   *\n   * Constraints:\n   * - The message MUST be unique and contain all the necessary information to verify the user's identity.\n   * - SIWXMessage.toString() method MUST be implemented to return the message string.\n   *\n   * @param input SIWXMessage.Input\n   * @returns SIWXMessage\n   */\n  createMessage: (input: SIWXMessage.Input) => Promise<SIWXMessage>\n\n  /**\n   * This method will be called to store a new single session.\n   *\n   * Constraints:\n   * - This method MUST verify if the session is valid and store it in the storage successfully.\n   *\n   * @param session SIWXSession\n   */\n  addSession: (session: SIWXSession) => Promise<void>\n\n  /**\n   * This method will be called to revoke all the sessions stored for a specific chain and address.\n   *\n   * Constraints:\n   * - This method MUST delete all the sessions stored for the specific chain and address successfully.\n   *\n   * @param chainId CaipNetworkId\n   * @param address string\n   */\n  revokeSession: (chainId: CaipNetworkId, address: string) => Promise<void>\n\n  /**\n   * This method will be called to replace all the sessions in the storage with the new ones.\n   *\n   * Constraints:\n   * - This method MUST verify all the sessions before storing them in the storage;\n   * - This method MUST replace all the sessions in the storage with the new ones successfully otherwise it MUST throw an error.\n   *\n   * @param sessions SIWXSession[]\n   */\n  setSessions: (sessions: SIWXSession[]) => Promise<void>\n\n  /**\n   * This method will be called to get all the sessions stored for a specific chain and address.\n   *\n   * Constraints:\n   * - This method MUST return only sessions that are verified and valid;\n   * - This method MUST NOT return expired sessions.\n   *\n   * @param chainId CaipNetworkId\n   * @param address string\n   * @returns\n   */\n  getSessions: (chainId: CaipNetworkId, address: string) => Promise<SIWXSession[]>\n}\n\n/**\n * This interface represents a SIWX session, which is used to store the user's identity information.\n */\nexport interface SIWXSession {\n  data: SIWXMessage.Data\n  message: string\n  signature: string\n  cacao?: Cacao\n}\n\n/**\n * This interface represents a SIWX message, which is used to create a message to be signed by the user.\n * This must contain the necessary information to verify the user's identity and how to generate the string message.\n */\nexport interface SIWXMessage extends SIWXMessage.Data, SIWXMessage.Methods {}\n\nexport namespace SIWXMessage {\n  /**\n   * This interface represents the SIWX message data, which is used to create a message to be signed by the user.\n   */\n  export interface Data extends Input, Metadata, Identifier {}\n\n  /**\n   * This interface represents the SIWX message input.\n   * Here must contain what is different for each user of the application.\n   */\n  export interface Input {\n    accountAddress: string\n    chainId: CaipNetworkId\n    notBefore?: Timestamp\n  }\n\n  /**\n   * This interface represents the SIWX message metadata.\n   * Here must contain the main data related to the app.\n   */\n  export interface Metadata {\n    domain: string\n    uri: string\n    version: string\n    nonce: string\n    statement?: string\n    resources?: string[]\n  }\n\n  /**\n   * This interface represents the SIWX message identifier.\n   * Here must contain the request id and the timestamps.\n   */\n  export interface Identifier {\n    requestId?: string\n    issuedAt?: Timestamp\n    expirationTime?: Timestamp\n  }\n\n  /**\n   * This interface represents the SIWX message methods.\n   * Here must contain the method to generate the message string and any other method performed by the SIWX message.\n   */\n  export interface Methods {\n    toString: () => string\n  }\n\n  /**\n   * The timestamp is a UTC string representing the time in ISO 8601 format.\n   */\n  export type Timestamp = string\n}\n\n/**\n * The Cacao interface is a reference of CAIP-74 and represents a chain-agnostic Object Capability (OCAP).\n * https://chainagnostic.org/CAIPs/caip-74\n */\nexport interface Cacao {\n  h: Cacao.Header\n  p: Cacao.Payload\n  s: {\n    t: 'eip191' | 'eip1271'\n    s: string\n    m?: string\n  }\n}\n\nexport namespace Cacao {\n  export interface Header {\n    t: 'caip122'\n  }\n\n  export interface Payload {\n    domain: string\n    aud: string\n    nonce: string\n    iss: string\n    version?: string\n    iat?: string\n    nbf?: string\n    exp?: string\n    statement?: string\n    requestId?: string\n    resources?: string[]\n    type?: string\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Responding to Session Request - WalletConnect Swift (iOS)\nDESCRIPTION: This Swift snippet shows how to use 'WalletKit.instance.respond' to approve or reject a session request asynchronously. It requires the request ID, signature (for approval), and the account. The operation is wrapped in a do-catch block to manage errors like invalid session or timeout. Successful execution implies the UI loader should be removed.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\ndo {\n    try await WalletKit.instance.respond(requestId: request.id, signature: signature, from: account)\n    // update UI -> remove the loader\n} catch {\n    // present error to the user\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a User Account for Notifications in React\nDESCRIPTION: This React component snippet manages user registration for notifications, enabling user-specific notification subscriptions. It relies on registered account management logic to authenticate and set up user notification preferences.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/notifications/frontend-integration/api.mdx#_snippet_2\n\nLANGUAGE: MDX\nCODE:\n```\n<Registering />\n```\n\n----------------------------------------\n\nTITLE: Enabling legal checkbox feature in createAppKit in TypeScript\nDESCRIPTION: Illustrates how to enable the legalCheckbox option to require users to agree to terms of service and/or privacy policy via a checkbox before connecting wallets. This feature is configured in the features object and can be toggled on or off.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateAppKit({\n  //...\n  features: {\n    legalCheckbox: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Reown Coinbase Connector for Ethers v5 (RN CLI)\nDESCRIPTION: Command to install the Reown AppKit connector package (`@reown/appkit-coinbase-ethers-react-native`) using yarn. This package facilitates the integration of Coinbase Wallet specifically within React Native CLI projects using the Ethers v5 library.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/installation.mdx#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @reown/appkit-coinbase-ethers-react-native\n```\n\n----------------------------------------\n\nTITLE: Creating Namespaces from RequiredNamespaces for Session Approval in C#\nDESCRIPTION: This snippet demonstrates responding to a session proposal event by extracting required namespaces and creating an approved Namespaces object using them. The approved namespaces are then augmented with specific accounts before approval. This process facilitates seamless session acceptance with appropriate permissions.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/usage.mdx#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nsdk.SessionProposed += async (sender, @event) =>\n{\n    var proposal = @event.Proposal;\n    var requiredNamespaces = proposal.RequiredNamespaces;\n    var approvedNamespaces = new Namespaces(requiredNamespaces);\n    approvedNamespaces[\"eip155\"].WithAccount(\"eip155:1:0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb\");\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Features with Solana in AppKit\nDESCRIPTION: Illustrates the configuration of email and social login authentication using the Solana adapter in AppKit. Includes setup for Solana networks and social platform integration.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/socials.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst modal = createAppKit({\n  adapters: [solanaWeb3JsAdapter],\n  projectId,\n  networks: [solana, solanaTestnet, solanaDevnet],\n  metadata,\n  features: {\n    email: true, // default to true\n    socials: [\n      \"google\",\n      \"x\",\n      \"discord\",\n      \"farcaster\",\n      \"github\",\n      \"apple\",\n      \"facebook\",\n    ],\n    emailShowWallets: true, // default to true\n  },\n  allWallets: \"SHOW\", // default to SHOW\n});\n```\n\n----------------------------------------\n\nTITLE: Pairing API Usage Methods (TypeScript)\nDESCRIPTION: Demonstrates common methods for interacting with the Pairing API in TypeScript, including creating, pairing, activating, updating, retrieving, pinging, and disconnecting pairings via an SDK client instance.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n // Creates a new (inactive) pairing. Returns the URI for a peer to consume via `pair`, as well as the pairing topic.\nconst {topic, uri} = await sdkClient.core.pairing.create()\n\n// Pair with a peer's proposed pairing, extracted from the provided `uri` parameter.\nawait sdkClient.core.pairing.pair({ uri: \"wc:1b3eda3f4...\" })\n\n// Activate a previously created pairing (e.g. after the peer has paired), by providing the pairing topic.\nawait sdkClient.core.pairing.activate({ topic: \"1b3eda3f4...\" })\n\n// Updates the expiry of an existing pairing, by providing the pairing topic and an `expiry` in seconds (e.g. `60` for one minute from now)\nawait sdkClient.core.pairing.updateExpiry({ topic: \"1b3eda3f4...\", expiry: 60 })\n\n// Updates a pairing's metadata, by providing the pairing topic and the desired metadata.\nawait sdkClient.core.pairing.updateMetadata({ topic: \"1b3eda3f4...\", metadata: { name: \"MyDapp\", ... } })\n\n// Returns an array of all existing pairings.\nconst pairings = sdkClient.core.pairing.getPairings()\n\n// Pings a pairing's peer, by providing the pairing topic.\nawait sdkClient.core.pairing.ping({ topic: \"1b3eda3f4...\" })\n\n// Disconnects/Removes a pairing, by providing the pairing topic.\nawait sdkClient.core.pairing.disconnect({ topic: \"1b3eda3f4...\" })\n```\n\n----------------------------------------\n\nTITLE: Updating Type Imports for Reown WalletKit in JavaScript/TypeScript\nDESCRIPTION: Provides an example of how to update type imports, such as replacing `IWeb3Wallet` from @walletconnect/web3wallet with `IWalletKit` from @reown/walletkit, relevant for TypeScript projects or JavaScript with type checking.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/upgrade/from-web3wallet-web.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/* highlight-delete-start */\nimport { IWeb3Wallet } from \"@walletconnect/web3wallet\";\n/* highlight-delete-end */\n/* highlight-add-start */\nimport { IWalletKit } from \"@reown/walletkit\";\n/* highlight-add-end */\n```\n\n----------------------------------------\n\nTITLE: Handling Universal and Deep Links in AppDelegate (Swift)\nDESCRIPTION: This Swift code shows the necessary AppDelegate.mm implementation for handling incoming deep links and universal links in a React Native iOS app. It leverages RCTLinkingManager's helper methods within the openURL and continueUserActivity delegates, enabling the app to respond to URL-based navigation as required for Link Mode. Ensure that React Native's Linking library is linked, and the app's universal links have been registered per Apple documentation.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/link-mode.mdx#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\n#import <React/RCTLinkingManager.h>\n\n// Enable deeplinks\n- (BOOL)application:(UIApplication *)application\n   openURL:(NSURL *)url\n   options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options\n{\n  return [RCTLinkingManager application:application openURL:url options:options];\n}\n\n// Enable Universal Links\n- (BOOL)application:(UIApplication *)application continueUserActivity:(nonnull NSUserActivity *)userActivity\n restorationHandler:(nonnull void (^)(NSArray<id<UIUserActivityRestoring>> * _Nullable))restorationHandler\n{\n return [RCTLinkingManager application:application\n                  continueUserActivity:userActivity\n                    restorationHandler:restorationHandler];\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Active Subscriptions for an Account in JavaScript\nDESCRIPTION: This snippet fetches the list of current, active subscriptions for a given account, providing a mapping of subscription topics. It is useful for managing or displaying current notification subscriptions within the application.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/notify/usage.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst accountSubscriptions = notifyClient.getActiveSubscriptions({\n  account: `eip155:1:0x63Be...`,\n});\n```\n\n----------------------------------------\n\nTITLE: Processing Incoming Links for AppKit Link Mode (Dart)\nDESCRIPTION: Shows how to handle a captured Universal Link or App Link string in a Flutter application. The function `_onLinkCaptured` takes the link string and passes it to the `_appKitModal.dispatchEnvelope` method, allowing AppKit to process the incoming request or response via Link Mode. Requires an initialized `ReownAppKitModal` instance (`_appKitModal`).\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/link-mode.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvoid _onLinkCaptured(String link) async {\n  await _appKitModal.dispatchEnvelope(link);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting All Subscribers with JavaScript\nDESCRIPTION: JavaScript example of retrieving all subscribers for a project, which returns a simple array of account IDs that are subscribed to the app.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/notifications/backend-integration.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst PROJECT_ID = \"<PROJECT_ID>\";\nconst NOTIFY_API_SECRET = \"<NOTIFY_API_SECRET>\";\nconst response = await fetch(\n  `https://notify.walletconnect.com/${PROJECT_ID}/subscribers`,\n  {\n    headers: {\n      Authorization: `Bearer ${NOTIFY_API_SECRET}`,\n    },\n  }\n);\nconst subscribers: string[] = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Adding WalletConnect Modal package via Unity Package Manager with OpenUPM registry\nDESCRIPTION: This guide explains how to manually configure Unity Package Manager to include the OpenUPM registry, then add the WalletConnect Modal package by name, requiring user interface interactions for registry setup and package addition.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/about.mdx#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Fetching Specific Subscribers via Notify API using cURL\nDESCRIPTION: Demonstrates how to check subscription status for specific accounts using cURL. It sends a POST request to the `https://notify.walletconnect.com/v1/<PROJECT_ID>/subscribers` endpoint, authenticating with the `NOTIFY_API_SECRET` and providing the list of account IDs in the JSON request body.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/notifications/backend-integration.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST 'https://notify.walletconnect.com/v1/<PROJECT_ID>/subscribers' \\\n  --header 'Authorization: Bearer <NOTIFY_API_SECRET>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"accounts\": [\n      \"eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029\",\n      \"eip155:1:0x0000000000000000000000000000000000000000\"\n    ]\n  }'\n```\n\n----------------------------------------\n\nTITLE: Customizing Chain Images - TypeScript\nDESCRIPTION: Explains how to add or override the default network images displayed in the modal. This is achieved by providing a `chainImages` object mapping chain IDs to the desired image URLs.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/options.mdx#_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\ncreateAppKit({\n  // ...\n  chainImages: {\n    1: \"https://my.images.com/eth.png\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Registering for Push Notifications in Swift\nDESCRIPTION: Registers the wallet to receive WalletConnect push notifications by providing a device token to the WalletKit instance.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/usage.mdx#_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\nWalletKit.instance.register(deviceToken: deviceToken, enableEncrypted: true)\n```\n\n----------------------------------------\n\nTITLE: Creating Expo Wallet Project with WalletKit using npx (Bash)\nDESCRIPTION: This experimental and unofficial command uses npx to quickly generate a new Expo project pre-configured with WalletKit, simplifying the setup for building a mobile wallet. It requires npx (included with Node.js/npm) and takes the desired project directory name as an argument.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/resources.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-wc-wallet-expo@latest newWallet\n```\n\n----------------------------------------\n\nTITLE: Embedding Web3Inbox Widget and Managing View State in TypeScript React\nDESCRIPTION: This snippet demonstrates how to import the W3iWidget component and useManageView hook from the @web3inbox/widget-react library in a TypeScript React environment. It includes importing the compiled CSS styles, calling the open function to display the widget, and rendering the W3iWidget with essential props such as account (an EIP-155 formatted address), projectId (widget configuration identifier), and event handlers (onSign and onConnect). This enables embedding a ready-made Web3Inbox widget with controlled visibility and interaction handling.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/notifications/embedded-widget/usage.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { W3iWidget, useManageView } from \"@web3inbox/widget-react\";\nimport \"@web3inbox/widget-react/dist/compiled.css\";\n...\n\nconst { open } = useManageView()\nopen();\n\nreturn (\n\t<W3iWidget\n\t\taccount=\"eip155:1:0x...\"\n\t\tprojectId=\"7a...\"\n\t\tonSign={yourSignFunction}\n\t\tonConnect={connectFunction}\n\t/>\n)\n\n```\n\n----------------------------------------\n\nTITLE: Defining and Sending Custom JSON-RPC Requests with WalletConnectSharp in C#\nDESCRIPTION: Explains the creation of strongly typed request and transaction data classes compatible with WalletConnectSharp and Newtonsoft.Json serialization. Implements the EthSendTransaction request as a subclass of List<Transaction> with required RpcMethod and RpcRequestOptions attributes. Demonstrates sending the request asynchronously with dappClient.Request, passing session topic, request object, and chain ID. Response is expected as a string representing transaction hash.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_39\n\nLANGUAGE: csharp\nCODE:\n```\nusing Newtonsoft.Json;\n\npublic class Transaction\n{\n    public string from;\n\n    // Newtonsoft.Json attributes can be used\n    [JsonProperty(\"to\")]\n    public string To;\n\n    [JsonProperty(\"gas\", NullValueHandling = NullValueHandling.Ignore)]\n    public string Gas;\n\n    // Properties have limited support\n    [JsonProperty(\"gasPrice\", NullValueHandling = NullValueHandling.Ignore)]\n    public string GasPrice { get; set; }\n\n    [JsonProperty(\"value\")]\n    public string Value { get; set; }\n\n    [JsonProperty(\"data\", NullValueHandling = NullValueHandling.Ignore)]\n    public string Data { get; set; } = \"0x\";\n}\n\n[RpcMethod(\"eth_sendTransaction\"), RpcRequestOptions(Clock.ONE_MINUTE, 99997)]\npublic class EthSendTransaction : List<Transaction>\n{\n    public EthSendTransaction(params Transaction[] transactions) : base(transactions)\n    {\n    }\n}\n\nvar wallet = GetCurrentAddress();\nvar request = new EthSendTransaction(new Transaction()\n{\n    From = wallet.Address,\n    To = wallet.Address,\n    Value = \"0\"\n});\n\n// Returns the transaction hash or throws an error\nstring result = await dappClient.Request<EthSendTransaction, string>(sessionTopic, request, wallet.ChainId);\n```\n\n----------------------------------------\n\nTITLE: Sending Dogecoin Transaction with sendTransfer Method in JavaScript\nDESCRIPTION: Demonstrates how to use the sendTransfer JSON-RPC method to transfer 1.23 DOGE with an optional memo. The request includes the account address, recipient address, amount in satoshis, and returns a transaction ID.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/dogecoin-rpc.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"sendTransfer\",\n    \"params\": {\n        \"account\": \"DTyt9wHTgizR8CwK8HAsWDaoMMxcaRuLWJ\",\n        \"recipient\": \"DBcZSePDaMMduBMLymWHXhkE5ArFEvkagU\",\n        \"amount\": \"123000000\",\n        \"memo\": \"636861726c6579206c6f766573206865\"\n    }\n}\n\n// Result\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"txid\": \"f007551f169722ce74104d6673bd46ce193c624b8550889526d1b93820d725f7\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Query for AppKit\nDESCRIPTION: Configure Vue Query in the main.ts file to work with AppKit. This setup is necessary for proper data fetching and state management with the Wagmi adapter.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following import\nimport { createApp } from \"vue\";\n\n// Add the following imports\n+ import { QueryClient, VueQueryPlugin } from \"@tanstack/vue-query\";\n+ import App from \"./App.vue\";\n\n// Add the following code line\n+ const queryClient = new QueryClient();\n\ncreateApp(App)\n  // Add the following code line\n  .use(VueQueryPlugin, { queryClient })\n  .mount(\"#app\");\n```\n\n----------------------------------------\n\nTITLE: Using prepare and execute for Chain Abstraction in Swift\nDESCRIPTION: Illustrates the typical usage flow for WalletKit's Chain Abstraction in Swift. It first calls `prepare` to check if abstraction is needed. If available (`case .available`), it signs the necessary routing transactions and the initial transaction using a `signer`. Finally, it calls `execute` with the UI fields and signatures. If abstraction is not required (`case .notRequired`), the original transaction should be signed and broadcast. Error handling (`case .error`) is also shown.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/chain-abstraction.mdx#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nlet routeResponseSuccess = try await WalletKit.instance.ChainAbstraction.prepare(\n    chainId: selectedNetwork.chainId.absoluteString,\n    from: myAccount.address,\n    call: call,\n    accounts: caip10Accounts,\n    localCurrency: .usd\n)\n\nswitch routeResponseSuccess {\ncase .success(let routeResponse):\n    switch routeResponse {\n    case .available(let UiFileds):\n        // If the route is available, present a CA transaction flow\n        for txnDetails in uiFields.route {\n            let hash = txnDetails.transactionHashToSign\n            let sig = try! signer.signHash(hash)\n            routeTxnSigs.append(sig)\n        }\n        \n        // sign initial transaction hash\n        let initialTxHash = uiFields.initial.transactionHashToSign\n        let initialTxnSig = try! signer.signHash(initialTxHash)      \n        \n        let executeDetails = try await WalletKit.instance.ChainAbstraction.execute(uiFields: uiFields, routeTxnSigs: routeTxnSigs, initialTxnSig: initialTxnSig)\n        \n    case .notRequired:\n        // user does not need to move funds from other chains, sign and broadcast original transaction\n        \n    }\ncase .error(let routeResponseError):\n    // Show an error\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting with dApps in Swift\nDESCRIPTION: Code showing how to connect a wallet to a dApp by pairing with a URI and handling the session proposal event. This is the first step in establishing a WalletConnect session.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\ntry await Pair.instance.pair(uri: uri)\n\nSign.instance.sessionProposalPublisher\n    .receive(on: DispatchQueue.main)\n    .sink { [weak self] session in\n        self?.verifyDapp(session.context)\n        self?.showSessionProposal(session.proposal)\n    }.store(in: &publishers)\n```\n\n----------------------------------------\n\nTITLE: React Component for Managing User Account Settings\nDESCRIPTION: This snippet renders the SettingAccount React component, enabling users to configure their account details for web3inbox integration. It depends on the shared API module and provides UI elements for account setup and credential management.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/frontend-integration/api.mdx#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n<SettingAccount />\n```\n\n----------------------------------------\n\nTITLE: Excluding Wallets by ID - TypeScript\nDESCRIPTION: Demonstrates how to exclude specific wallets from being displayed in the modal by providing an array of their IDs to the `excludeWalletIds` option. All other wallets will be shown as usual.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/options.mdx#_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\ncreateAppKit({\n  //...\n  excludeWalletIds: [\n    \"4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0\", // Trust\n    \"fd20dc426fb37566d803205b19bbc1d4096b248ac04548e3cfb6b3a38bd033aa\", // Coinbase\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing ReownAppKitModal with Configuration Options in Dart\nDESCRIPTION: This snippet demonstrates how to initialize the ReownAppKitModal with various configuration options including project ID, metadata, and optional parameters for analytics, SIWE configuration, and wallet filtering.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/options.mdx#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal _appKitModal = ReownAppKitModal(\n  context: context,\n  projectId: '{YOUR_PROJECT_ID}',\n  metadata: const PairingMetadata(\n    name: 'Example App',\n    description: 'Example app description',\n    url: 'https://example.com/',\n    icons: ['https://example.com/logo.png'],\n    redirect: Redirect( // OPTIONAL\n      native: 'exampleapp://',\n      universal: 'https://reown.com/exampleapp',\n      linkMode: false,\n    ),\n  ),\n  // disconnectOnDispose: false,\n  // enableAnalytics: true, // OPTIONAL - null by default\n  // siweConfig: SIWEConfig(...), // OPTIONAL - null by default\n  // featuresConfig: FeaturesConfig(\n  //   email: true, // OPTIONAL - false by default\n  //   socials: [...], // OPTIONAL - empty by default\n  //   showMainWallets: true, // OPTIONAL - true by default\n  // ),\n  // getBalanceFallback: () async { }, OPTIONAL - null by default\n  // requiredNamespaces: {}, OPTIONAL - null by default\n  // optionalNamespaces: {}, OPTIONAL - null by default\n  // featuredWalletIds: {}, OPTIONAL - null by default\n  // includedWalletIds: {}, OPTIONAL - null by default\n  // excludedWalletIds: {}, OPTIONAL - null by default\n);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to WalletConnect Session Events in Unity (C#)\nDESCRIPTION: Illustrates handling session lifecycle events in Unity by subscribing to ActiveSessionChanged and SessionDisconnected. This pattern ensures game UI responds to wallet connection or disconnection events. Required dependency is the WalletConnect Unity library. Inputs are event triggers; outputs include navigation or UI updates in response to wallet session changes.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_43\n\nLANGUAGE: C#\nCODE:\n```\nWalletConnectModal.Ready += (sender, args) =>\n{\n    // ....\n\n    // Invoked after wallet connected\n    WalletConnect.Instance.ActiveSessionChanged += (_, sessionStruct) =>\n    {\n        // Session connected/updated, proceed to the game if sessionStruct.topic is not null/empty\n    };\n\n    // Invoked after wallet disconnected\n    WalletConnect.Instance.SessionDisconnected += (_, _) =>\n    {\n        // Session deleted, show sign in screen\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Excluded Wallets in AppKit for Unity\nDESCRIPTION: Configures AppKit to exclude specific wallets by their IDs from WalletGuide. These wallets will not appear in the wallet selection interface.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/options.mdx#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait AppKit.InitializeAsync(new AppKitConfig\n{\n    excludedWalletIds = new []\n    {\n        \"c57ca95...74e97267d96\",\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Chain Abstraction Transactions with WalletKit - Swift\nDESCRIPTION: Defines the `execute` method that carries out chain abstraction operations by broadcasting all routing and initial transactions in the correct order, monitoring the cross-chain transfer process, and returning execution details containing transaction status and results. This method requires UI-related transaction fields and precomputed signatures for initial and route transactions. It is dependent on the prepare-step output and requires valid transaction signatures to proceed.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/chain-abstraction.mdx#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nFuture<ExecuteDetailsCompat> execute({\n  required UiFieldsCompat uiFields,\n  required List<String> routeTxnSigs,\n  required String initialTxnSig,\n})\n```\n\n----------------------------------------\n\nTITLE: Registering AppKit in Activity to Receive Coinbase Wallet Responses in Kotlin\nDESCRIPTION: Shows how to register the AppKit instance in the Android Activity lifecycle's onCreate method, which is necessary for the Coinbase Wallet SDK integration. This registration enables the Activity to receive responses from Coinbase wallet after transactions or interactions. Requires Kotlin and AppKit SDK with Coinbase integration enabled. This snippet must be added to your Activity to handle Coinbase callbacks properly.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/options.mdx#_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n    fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        AppKit.register(this)\n        // Your content\n    }\n```\n\n----------------------------------------\n\nTITLE: Initializing AppKit Modal with Excluded Wallets in Kotlin\nDESCRIPTION: Configures the AppKit modal to exclude a specified list of wallet IDs fetched from WalletGuide, which prevents these wallets from appearing in wallet selection interfaces. The excludedWalletIds parameter accepts a list of wallet ID strings. This snippet requires Kotlin and relevant AppKit components including CoreClient. It handles asynchronous initialization with success and error callbacks similar to recommended wallets initialization.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/options.mdx#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval excludedWalletIds = listOf<String>(\n    \"1ae92b26df02f0abca6304df07debccd18262fdf5fe82daa81593582dac9a369\",\n    \"4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0\"\n)\n\nval initParams = Modal.Params.Init(core = CoreClient, excludedWalletIds = excludedWalletIds)\n\nAppKit.initialize(\n    init = initParams,\n    onSuccess = {\n        // Callback will be called if initialization is successful\n    },\n    onError = { error ->\n        // Error will be thrown if there's an issue during initialization\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Client Account Information with AppKit React Hook in TypeScript\nDESCRIPTION: This React code snippet demonstrates how to use the useAppKitAccount hook from the @reown/appkit/react package to obtain the current user's blockchain address, CAIP address, and connection status inside a functional component. The snippet requires installing @reown/appkit/react as a dependency. The hook returns an object with key properties such as address (the user's wallet address), caipAddress (wallet address in CAIP format), and isConnected (boolean indicating connection status). Expected inputs are none for this hook, and the outputs are the account details. The snippet is intended for use in React TypeScript (TSX) environments.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/wagmi/hooks.mdx#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useAppKitAccount } from \"@reown/appkit/react\";\n\nfunction Components() {\n  const { address, caipAddress, isConnected } = useAppKitAccount();\n\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Web3Inbox React Widget with TypeScript\nDESCRIPTION: Shows how to import Web3Inbox widget components in a React project using TypeScript, including styling and managing widget view. The code demonstrates opening the widget view and rendering the W3iWidget component with required props such as account, projectId, and event handlers for signing and connecting.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/embedded-widget/usage.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { W3iWidget, useManageView } from \"@web3inbox/widget-react\";\nimport \"@web3inbox/widget-react/dist/compiled.css\";\n...\n\nconst { open } = useManageView()\nopen();\n\nreturn (\n\t<W3iWidget\n\t\taccount=\"eip155:1:0x...\"\n\t\tprojectId=\"7a...\"\n\t\tonSign={yourSignFunction}\n\t\tonConnect={connectFunction}\n\t/>\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing React AppKit with Bitcoin Adapter and Configuration (TypeScript)\nDESCRIPTION: This snippet sets up the main configuration for integrating Bitcoin wallets into a React application using Reown's AppKit. It involves importing necessary libraries, defining project info, network settings, and creating the app with specified adapters and features. The configuration functions are called outside of React components to optimize rerendering behavior.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/bitcoin/about/implementation.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// App.tsx\nimport { createAppKit } from '@reown/appkit/react'\nimport { BitcoinAdapter } from '@reown/appkit-adapter-bitcoin'\nimport { bitcoin } from '@reown/appkit/networks'\n\n// 1. Get projectId from https://cloud.reown.com\nconst projectId = 'YOUR_PROJECT_ID'\n\n// 2. Set the networks\nconst networks = [bitcoin]\n\n// 3. Set up Bitcoin Adapter\nconst bitcoinAdapter = new BitcoinAdapter({\n  projectId\n})\n\n// 4. Create a metadata object - optional\nconst metadata = {\n  name: 'AppKit',\n  description: 'AppKit Bitcoin Example',\n  url: 'https://example.com', // origin must match your domain & subdomain\n  icons: ['https://avatars.githubusercontent.com/u/179229932']\n}\n\n// 5. Create modal\ncreateAppKit({\n  adapters: [bitcoinAdapter],\n  networks,\n  metadata,\n  projectId,\n  features: {\n    analytics: true // Optional - defaults to your Cloud configuration,\n    email: false,\n    socials: []\n  }\n})\n\nexport default function App() {\n  return <YourApp />\n}\n\n```\n\n----------------------------------------\n\nTITLE: Opening AppKit Connect Modal using useAppKit React Hook in TypeScript JSX\nDESCRIPTION: This snippet illustrates programmatic control over the AppKit connect modal by utilizing the useAppKit React hook from the '@reown/appkit/react' package. It imports the hook and destructures the open function, which triggers the modal. Two buttons demonstrate invoking open with default parameters to show the standard connect modal and with an options object to open the modal directly on the \"Networks\" view. This approach requires React and the @reown/appkit/react dependency. It provides flexibility to control the modal's state and view based on user interaction.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/ethers5/triggermodal.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAppKit } from \"@reown/appkit/react\";\n\nexport default function ConnectButton() {\n  // 4. Use modal hook\n  const { open } = useAppKit();\n\n  return (\n    <>\n      <button onClick={() => open()}>Open Connect Modal</button>\n      <button onClick={() => open({ view: \"Networks\" })}>\n        Open Network Modal\n      </button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Pairing a Wallet Session Using Session URI in C#\nDESCRIPTION: Enables the wallet to pair an incoming session with the given session URI. This allows the wallet to receive a connection proposal from the dApp, which can either be approved or rejected by the user.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_42\n\nLANGUAGE: csharp\nCODE:\n```\nProposalStruct proposal = await walletClient.Pair(connectData.Uri);\n```\n\n----------------------------------------\n\nTITLE: Handling Session Requests (Swift)\nDESCRIPTION: Subscribes to the `sessionRequestPublisher` using Combine to receive session requests from a connected dapp. Upon receiving a request, it verifies the dapp's context and displays the request details to the user.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_15\n\nLANGUAGE: Swift\nCODE:\n```\nSign.instance.sessionRequestPublisher\n    .receive(on: DispatchQueue.main)\n    .sink { [weak self] session in\n        self?.verifyDapp(session.context)\n        self?.showSessionRequest(session.request)\n    }.store(in: &publishers)\n```\n\n----------------------------------------\n\nTITLE: React Initialization Component for Notification Service\nDESCRIPTION: This snippet renders the Initialization React component, which sets up the notification service environment when included. It requires the initialization module to configure necessary APIs and establish connections for further notification handling.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/frontend-integration/api.mdx#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n<Initialization />\n```\n\n----------------------------------------\n\nTITLE: Importing Wallet Button React component\nDESCRIPTION: This snippet illustrates your code to import the Wallet Button React component into your project after installation, enabling the use of the `<appkit-wallet-button />` in React apps.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/components.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"@reown/appkit-wallet-button/react\";\n```\n\n----------------------------------------\n\nTITLE: Excluding specific wallet IDs from default wallets in createAppKit in TypeScript\nDESCRIPTION: Illustrates excluding particular wallets from all wallet lists and recommended views by listing their wallet IDs in excludeWalletIds. Wallets excluded will not appear in the UI, while other wallets remain unaffected.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateAppKit({\n  //...\n  excludeWalletIds: [\n    \"1ae92b26df02f0abca6304df07debccd18262fdf5fe82daa81593582dac9a369\",\n    \"4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0\",\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Adding terms and conditions URL in createAppKit configuration in TypeScript\nDESCRIPTION: Example of setting the termsConditionsUrl property to provide a link to terms and conditions documentation, displayed in the modal. This property expects a string URL.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateAppKit({\n  //...\n  termsConditionsUrl: \"https://www.mytermsandconditions.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: Building Session Namespaces Using AutoNamespaces Utility in Swift\nDESCRIPTION: Constructs required and optional namespaces for a wallet session based on a session proposal, supported chains, methods, events, and user accounts. Provides an example of proper usage and handling of potential errors during build.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/usage.mdx#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\ndo {\n    sessionNamespaces = try AutoNamespaces.build(\n        sessionProposal: proposal,\n        chains: [Blockchain(\"eip155:1\")!, Blockchain(\"eip155:137\")!],\n        methods: [\"eth_sendTransaction\", \"personal_sign\"],\n        events: [\"accountsChanged\", \"chainChanged\"],\n        accounts: [\n            Account(blockchain: Blockchain(\"eip155:1\")!, address: \"0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb\")!,\n            Account(blockchain: Blockchain(\"eip155:137\")!, address: \"0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb\")!\n        ]\n    )\n} catch let error as AutoNamespacesError {\n    // reject session proposal if AutoNamespace build function threw\n    try await reject(proposal: proposal, reason: RejectionReason(from: error))\n    return\n}\n// approve session with sessionNamespaces\ntry await WalletKit.instance.approve(proposalId: proposal.id, namespaces: sessionNamespaces)\n```\n\n----------------------------------------\n\nTITLE: Initializing .NET Core and Pairing (C#)\nDESCRIPTION: Initialize the WalletConnect Core library and configure the Pairing API with application metadata, which describes your application's appearance.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar metadata = new Metadata()\n{\n    Name = \"my-app\",\n    Description = \"My app description\",\n    Icons = new[] { \"https://walletconnect.com/meta/favicon.ico\" },\n    Url = \"https://walletconnect.com\",\n}\n\nvar options = new CoreOptions()\n{\n    ProjectId = \"...\",\n    Name = \"my-app\",\n}\n\nvar core = new WalletConnectCore(options);\ncore.Pairing.Configure(metadata);\n```\n\n----------------------------------------\n\nTITLE: Define prepare method for chain abstraction in Kotlin\nDESCRIPTION: This snippet declares the prepare function marked with @ChainAbstractionExperimentalApi annotation. It checks if chain abstraction is necessary for a transaction and returns either an available or not required result. It requires an initial transaction, a list of accounts, and success/error callbacks.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/chain-abstraction.mdx#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\n@ChainAbstractionExperimentalApi\nfun prepare(\n  initialTransaction: Wallet.Model.InitialTransaction,\n  accounts: List<String>,\n  onSuccess: (Wallet.Model.PrepareSuccess) -> Unit,\n  onError: (Wallet.Model.PrepareError) -> Unit\n)\n```\n\n----------------------------------------\n\nTITLE: Signing XRPL Transactions using xrpl_signTransaction (JSON)\nDESCRIPTION: Demonstrates a JSON-RPC request to sign and potentially submit a single-signer XRPL transaction using the `xrpl_signTransaction` method. The example shows creating a DEX offer. Key parameters include `tx_json` (the transaction details), optional `autofill` (defaults to true for automatic field completion), and optional `submit` (defaults to true for immediate submission). The response includes the fully signed `tx_json`, including auto-filled fields and the transaction hash.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/xrpl-rpc.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// Request\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"xrpl_signTransaction\",\n    \"params\": {\n        \"tx_json\": {\n            \"TransactionType\": \"OfferCreate\",\n            \"Account\": \"rMBzp8CgpE441cp5PVyA9rpVV7oT8hP3ys\",\n            \"Flags\": 524288,\n            \"LastLedgerSequence\": 7108682,\n            \"Expiration\": 595640108,\n            \"TakerGets\": \"15000000000\",\n            \"TakerPays\": {\n                \"currency\": \"USD\",\n                \"issuer\": \"rvYAfWj5gh67oV6fW32ZzP3Aw4Eubs59B\",\n                \"value\": \"7072.8\"\n            }\n        }\n    }\n}\n\n// Result\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"tx_json\": {\n            \"Account\": \"rMBzp8CgpE441cp5PVyA9rpVV7oT8hP3ys\",\n            \"Expiration\": 595640108,\n            \"Fee\": \"10\",\n            \"Flags\": 524288,\n            \"OfferSequence\": 1752791,\n            \"Sequence\": 1752792,\n            \"LastLedgerSequence\": 7108682,\n            \"SigningPubKey\": \"03EE83BB432547885C219634A1BC407A9DB0474145D69737D09CCDC63E1DEE7FE3\",\n            \"TakerGets\": \"15000000000\",\n            \"TakerPays\": {\n                \"currency\": \"USD\",\n                \"issuer\": \"rvYAfWj5gh67oV6fW32ZzP3Aw4Eubs59B\",\n                \"value\": \"7072.8\"\n            },\n            \"TransactionType\": \"OfferCreate\",\n            \"TxnSignature\": \"30440220143759437C04F7B61F012563AFE90D8DAFC46E86035E1D965A9CED282C97D4CE02204CFD241E86F17E011298FC1A39B63386C74306A5DE047E213B0F29EFA4571C2C\",\n            \"hash\": \"73734B611DDA23D3F5F62E20A173B78AB8406AC5015094DA53F53D39B9EDB06C\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Wallet Logos in TypeScript\nDESCRIPTION: This TypeScript object, `walletImages`, provides a mapping to override default logos for specified wallets. Keys represent wallet IDs (which can be from WalletGuide, custom `mobileWallets`/`desktopWallets` lists, or wagmi connector IDs), and values are the paths to the custom image files. In this example, custom logos are defined for 'rainbow' and 'metaMask' wallets.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/web3modal/v2/_partials/options/walletImages.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nwalletImages: {\n  rainbow: \"/images/rainbow.webp\",\n  metaMask: \"/images/metamask.webp\",\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Session Namespaces (Swift)\nDESCRIPTION: Updates the chains, accounts, methods, or events for an existing session using `Sign.instance.update`. Requires the session topic and the new namespaces configuration.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_18\n\nLANGUAGE: Swift\nCODE:\n```\ntry await Sign.instance.update(topic: session.topic, namespaces: newNamespaces)\n```\n\n----------------------------------------\n\nTITLE: Defining Notification Request Body Type in TypeScript\nDESCRIPTION: TypeScript type definition for the request body sent to the `/notify` endpoint. It outlines the structure including optional `notification_id`, required `notification` object (with `type`, `title`, `body`, optional `url`), and an array of `accounts`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/backend-integration.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype RequestBody = {\n  notification_id?: string | null;\n  notification: {\n    type: string;\n    title: string;\n    body: string;\n    url?: string | null;\n  };\n  accounts: string[];\n};\n```\n\n----------------------------------------\n\nTITLE: Signing a blockchain message with ever_signMessage (JavaScript)\nDESCRIPTION: This snippet demonstrates signing a message for blockchain transmission using 'ever_signMessage'. It requires message parameters similar to 'ever_sendMessage' and outputs a signed external message along with expiration timestamp. It enables offline signing before dispatching to the network.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/everscale-rpc.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Request\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"ever_processMessage\",\n  \"params\": {\n        \"source_address\": \"0:695e42...b8d\",\n        \"value\": 1000000000,\n        \"bounce\": false,\n        \"destAddress\": \"0:b38d96...708\",\n        \"destPayload\": {\n            \"abi\": \"\",\n            \"method\": \"\",\n            \"params\": {}\n        },\n    }\n}\n\n// Result\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\":  {\n        \"signedExtMessage\": \"c0b0996a9f0ea8e472041857ff2da9cf8086a78603f823a7170891f43a217ff1\",\n        \"expireAt\": 1685594678\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Notification Scopes Structure with TypeScript\nDESCRIPTION: This snippet defines a TypeScript type alias ScopeMap as a record where keys are strings representing scope names, and values are objects containing a name, description, and enabled boolean. This shape models the structure of notification scope data used in the application for type safety and clear contract. It has no dependencies and describes the data format stored in the types map.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/types/react.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype ScopeMap = Record<\n  string,\n  {\n    name: string\n    description: string\n    enabled: boolean\n  }\n>\n```\n\n----------------------------------------\n\nTITLE: Enabling Fullscreen Mode in WebGL with AppKit for Unity\nDESCRIPTION: JavaScript code for properly enabling fullscreen mode in WebGL builds while ensuring the modal UI remains visible. Uses requestFullscreen on the container instead of Unity's SetFullscreen method.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/options.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Use this instead of unityInstance.SetFullscreen(1) to enable full screen\ndocument.querySelector(\"#canvas-container\").requestFullscreen();\n```\n\n----------------------------------------\n\nTITLE: Requesting hedera_signAndExecuteTransaction via JSON-RPC - JSON\nDESCRIPTION: Demonstrates how to call the hedera_signAndExecuteTransaction method via JSON-RPC. This example sends the required parameters to sign and execute a transaction on Hedera, using a base64-encoded transaction list. Requires a valid signerAccountId and transactionList as input. Expects an object containing transaction results or an error upon submission.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/hedera-rpc.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"hedera_signAndExecuteTransaction\",\n  \"params\": {\n    \"signerAccountId\": \"hedera:testnet:0.0.12345\",\n    \"transactionList\": \"Co8BKowBCocBChoKDAjchKWmBhDW...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Session with New Accounts in JavaScript\nDESCRIPTION: Demonstrates how to update an existing session by adding new accounts while preserving existing namespace configurations. Includes handling for acknowledgment of the update.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/usage.mdx#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst namespaces = session.namespaces;\nconst accounts = [\n  \"eip155:1:0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb\",\n  \"eip155:1:0x1234567890123456789012345678901234567890\",\n];\nconst updatedNamespaces = {\n  ...namespaces,\n  eip155: {\n    ...namespaces.eip155,\n    accounts,\n  },\n};\nconst { acknowledged } = await walletKit.updateSession({\n  topic: session.topic,\n  namespaces: updatedNamespaces,\n});\n// If you wish to be notified when the dapp acknowledges the update.\n// note that if the dapp is offline `acknowledged` will not resolve until it comes back online\nawait acknowledged();\n```\n\n----------------------------------------\n\nTITLE: Defining Custom ReownAppKitModalThemeData Colors in Dart\nDESCRIPTION: Shows how to create a ReownAppKitModalThemeData instance with customized color schemes for both light and dark themes. The ReownAppKitModalColors.lightMode and darkMode objects are copied and modified using copyWith, allowing specification of accent100 and background125 colors. Requires Colors class (usually from Flutter's material package). The resulting _themeData should be passed into the theme widget.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/theming.mdx#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal _themeData = ReownAppKitModalThemeData(\n  lightColors: ReownAppKitModalColors.lightMode.copyWith(\n    accent100: Colors.red,\n    background125: Colors.yellow.shade300,\n  ),\n  darkColors: ReownAppKitModalColors.darkMode.copyWith(\n    accent100: Colors.green,\n    background125: Colors.brown,\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Wrapping a Composable with AppKitTheme in Compose - Kotlin\nDESCRIPTION: Wraps any Composable component with AppKitTheme to apply global theming in a Jetpack Compose application. Requires dependency on com.reown.appkit.ui.AppKitTheme. Key parameters: \"mode\" (selects AUTO, LIGHT, or DARK mode), \"lightColors\" and \"darkColors\" (optionally override color palettes). Accepts a content Composable as a lambda block. Output is the content rendered with the selected theme. Theme responsiveness and color overrides are supported.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/theming.mdx#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.reown.appkit.ui.AppKitTheme\n\nAppKitTheme(\n    mode = AppKitTheme.Mode.AUTO || AppKitTheme.Mode.LIGHT || AppKitTheme.Mode.DARK,\n    lightColors = AppKitTheme.provideLightAppKitColors(\n        // Override colors\n    ),\n    darkColors = AppKitTheme.provideDarkAppKitColors(\n        // Override colors\n    )\n)    {\n    /* any AppKit component or graph */\n}\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Relay Component in JSX\nDESCRIPTION: This snippet shows how to render the Relay component within a React JSX context. It indicates that Relay is used as a self-closing component, likely to display or manage data related to the relay functionality. It assumes that React and the imported Relay component are properly set up.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/cloud/relay.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Relay />\n```\n\n----------------------------------------\n\nTITLE: Defining RpcRequest Class for eth_getTransactionReceipt in C#\nDESCRIPTION: Defines the EthGetTransactionReceipt class for the RPC request of method 'eth_getTransactionReceipt'. Inherits from List<string> to model the params as an array of transaction hashes. The class is decorated with RpcMethod and RpcRequestOptions attributes to specify method name and request options, which are required for session request handling.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_46\n\nLANGUAGE: csharp\nCODE:\n```\n[RpcMethod(\"eth_getTransactionReceipt\"), RpcRequestOptions(Clock.ONE_MINUTE, 99994)]\npublic class EthGetTransactionReceipt : List<string>\n{\n    public EthGetTransactionReceipt(params string[] hashes) : base(hashes)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rejecting Session Proposals (Kotlin/Android)\nDESCRIPTION: Rejects a session proposal in an Android wallet using the WalletKit SDK. Calls `rejectSession` with the rejection parameters and provides success and error callbacks for handling the asynchronous response and updating the UI.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#_snippet_15\n\nLANGUAGE: kotlin\nCODE:\n```\nWalletKit.rejectSession(reject,\n  onSuccess = {\n      //Session rejection response was sent successfully - update your UI\n  },\n  onError = { error ->\n        //Error while sending session rejection - update your UI\n  })\n```\n\n----------------------------------------\n\nTITLE: WalletConnect ModalState Interface - TypeScript\nDESCRIPTION: Defines the `ModalState` interface used in the `subscribeModal` callback. It currently includes a single boolean property `open` to indicate whether the modal is currently visible.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ModalState {\n  open: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering SiwxIndex React Component\nDESCRIPTION: This snippet renders the imported SiwxIndex component in a React environment, enabling the Sign In With X interface to be displayed on the page. Requires React and JSX support.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/siwx.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<SiwxIndex />\n```\n\n----------------------------------------\n\nTITLE: Initializing WalletConnectSharpv2 SDK with SignClientOptions in C#\nDESCRIPTION: Sets up the SignClientOptions object which includes the ProjectId and Metadata describing the wallet. Optionally, a storage module can be specified; otherwise, FileSystemStorage is used by default. This configuration is required before initializing the WalletConnectSignClient SDK.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_40\n\nLANGUAGE: csharp\nCODE:\n```\nvar walletOptions = new SignClientOptions()\n{\n    ProjectId = \"39f3dc0a2c604ec9885799f9fc5feb7c\",\n    Metadata = new Metadata()\n    {\n        Description = \"An example wallet to showcase WalletConnectSharpv2\",\n        Icons = new[] { \"https://walletconnect.com/meta/favicon.ico\" },\n        Name = \"WalletConnectSharpv2 Wallet Example\",\n        Url = \"https://walletconnect.com\"\n    },\n    // Uncomment to disable persistent storage\n    // Storage = new InMemoryStorage()\n};\n```\n\n----------------------------------------\n\nTITLE: solana_signAllTransactions - Sign Multiple Transactions Atomically\nDESCRIPTION: This method allows signing a list of transactions simultaneously, expecting an array of base64-encoded serialized transactions as input. It returns an array of signed transactions in the same order. Wallets must either sign all transactions or report an error if unable to sign any, ensuring atomicity.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/solana-rpc.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Request\n{\n\t\"id\": 1,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"solana_signAllTransactions\",\n\t\"params\": {\n    \"transactions\": string[]\n\t}\n}\n\n// Response\n{\n\t\"id\": 1,\n\t\"jsonrpc\": \"2.0\",\n\t\"result\":  {\n\t  \"transactions\": string[]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: WalletConnect Modal subscribeModal API Reference - TypeScript\nDESCRIPTION: Provides the TypeScript signature for the `subscribeModal` function. It indicates that the function accepts a callback function that receives a `ModalState` object as an argument.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nsubscribeModal: (callback: (state: ModalState) => void) => void\n```\n\n----------------------------------------\n\nTITLE: Implementing Deep Link Handler for Phantom Wallet (Dart)\nDESCRIPTION: Shows a `DeepLinkHandler` class in Flutter that uses an `EventChannel` ('com.exampledapp/events') to listen for deep links coming from the native platform side. When a link is received (e.g., from Phantom Wallet), it calls `_appKitModal.dispatchEnvelope(link)` to pass the link data to the AppKit SDK for processing, enabling communication with wallets like Phantom that rely on deep/universal links.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/installation.mdx#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/foundation.dart';\nimport 'package:flutter/services.dart';\nimport 'package:reown_appkit/modal/i_appkit_modal_impl.dart';\n\nclass DeepLinkHandler {\n  static const _eventChannel = EventChannel('com.exampledapp/events');\n  static late IReownAppKitModal _appKitModal;\n\n  static void init(IReownAppKitModal appKitModal) {\n    if (kIsWeb) return;\n\n    try {\n      _appKitModal = appKitModal;\n      _eventChannel.receiveBroadcastStream().listen(_onLink, onError: _onError);\n    } catch (e) {\n      debugPrint('[SampleDapp] checkInitialLink $e');\n    }\n  }\n\n  static void _onLink(dynamic link) async {\n    try {\n      _appKitModal.dispatchEnvelope(link);\n    } catch (e) {\n      print(e);\n    }\n  }\n\n  static void _onError(dynamic error) {\n    print(error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Wallet Chain Abstraction in Swift during Session Request\nDESCRIPTION: This snippet illustrates intercepting an Ethereum transaction request to trigger chain abstraction within a session handler. It uses prepare to check requirement, then executes and responds to the session based on user approval, handling both success (with transaction receipts) and user rejection scenarios.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/docs/walletkit/flutter/early-access/chain-abstraction.mdx#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nFuture<void> _ethSendTransactionHandler(String topic, dynamic params) async {\n  final SessionRequest pendingRequest = _walletKit.pendingRequests.getAll().last;\n  final int requestId = pendingRequest.id;\n  final String chainId = pendingRequest.chainId;\n\n  final transaction = (params as List<dynamic>).first as Map<String, dynamic>;\n\n  // Intercept to check if Chain Abstraction is required\n  if (transaction.containsKey('input') || transaction.containsKey('data')) {\n    final inputData = transaction.containsKey('input') ?? transaction.containsKey('data');\n    final response = await _walletKit.prepare(\n      chainId: chainId,\n      from: transaction['from'],\n      call: CallCompat(\n        to: transaction['to'],\n        input: inputData,\n      ),\n    );\n    response.when(\n      success: (PrepareDetailedResponseSuccessCompat deatailResponse) {\n        deatailResponse.when(\n          available: (UiFieldsCompat uiFieldsCompat) {\n            if (approved) {\n              final TxnDetailsCompat initial = uiFieldsCompat.initial;\n              final List<TxnDetailsCompat> route = uiFieldsCompat.route;\n              final String initialSignature = signHashMethod(initial.transactionHashToSign);\n              final List<String> routeSignatures = route.map((route) {\n                final String rSignature = signHashMethod(route.transactionHashToSign);\n                return rSignature;\n              }).toList();\n              final executeResponse = await _walletKit.execute(\n                uiFields: uiFields,\n                initialTxnSig: initialSignature,\n                routeTxnSigs: routeSignatures,\n              );\n              return await _walletKit.respondSessionRequest(\n                topic: topic,\n                response: JsonRpcResponse(\n                  id: requestId, \n                  jsonrpc: '2.0', \n                  result: executeResponse.initialTxnReceipt,\n                ),\n              );\n            }\n          },\n        );\n      },\n    );\n  }\n\n  if (approved) {\n    final signedTx = await sendTransaction(transaction, int.parse(chainId));\n    await _walletKit.respondSessionRequest(\n      topic: topic,\n      response: JsonRpcResponse(\n        id: requestId, \n        jsonrpc: '2.0', \n        result: signedTx,\n      ),\n    );\n  }\n\n  return _walletKit.respondSessionRequest(\n    topic: topic,\n    response: JsonRpcResponse(\n      id: id,\n      jsonrpc: '2.0',\n      error: const JsonRpcError(code: 5001, message: 'User rejected method'),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Apply Theme - WalletConnectModal Android Compose - Kotlin\nDESCRIPTION: Shows how to wrap Composable content with `WalletConnectModalTheme` to apply custom accent and on-accent colors in Android Compose applications, allowing themes to propagate down the UI tree.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/theming.mdx#_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nWalletConnectModalTheme(\n    accentColor = Color(0xFF3496ff),\n    onAccentColor = Color.White\n) {\n    ModalBottomSheetLayout() {  }\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Multiple Encoded NEAR Transactions Using JSON-RPC in JavaScript\nDESCRIPTION: Defines the 'near_signTransactions' method used to sign multiple encoded NEAR transactions in batch. It accepts an array of objects each containing encoded transactions represented as Uint8Array buffers (via near-api-js encoding). The result is an array of SignedTransaction encoded Uint8Arrays. This batch method optimizes signing workflows for dApps handling multiple transactions.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/near-rpc.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Request\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"near_signTransactions\",\n  \"params\": {\n  \"transactions\": [\n      { \"type\": \"Buffer\", \"data\": [32, 0, 0, 0, 100, 101, 118, 45, 49, 54, 55, 49, 53, 52, 49, 55, 56, 57, 51, 50 ...] },\n      { \"type\": \"Buffer\", \"data\": [32, 0, 0, 0, 100, 101, 118, 45, 49, 54, 55, 49, 53, 52, 49, 55, 56, 57, 51, 50 ...] }\n    ]\n  }\n}\n\n// Result\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": [\n    { \"type\": \"Buffer\", \"data\": [32, 0, 0, 0, 100, 101, 118, 45, 49, 54, 55, 49, 53, 52, 49, 55, 56, 57, 51, 50 ...] },\n    { \"type\": \"Buffer\", \"data\": [32, 0, 0, 0, 100, 101, 118, 45, 49, 54, 55, 49, 53, 52, 49, 55, 56, 57, 51, 50 ...] }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Connecting WalletConnect Client with Namespace and Chain Parameters in JavaScript\nDESCRIPTION: Demonstrates how to establish a WalletConnect session requesting specific chain namespaces, their supported methods, underlying chains identified by CAIP-13 chain IDs, and relevant wallet events. The example includes support for Polkadot mainnet, Hydradx parachain, and Turing network. The 'connect' method returns a URI for QR code generation and an approval promise that resolves once the wallet approves the connection.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/polkadot/dapp-integration-guide.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst params = {\n  requiredNamespaces: {\n    polkadot: {\n      methods: [\"polkadot_signTransaction\", \"polkadot_signMessage\"],\n      chains: [\n        \"polkadot:91b171bb158e2d3848fa23a9f1c25182\",\n        \"polkadot:afdc188f45c71dacbaa0b62e16a91f72\",\n        \"polkadot:0f62b701fb12d02237a33b84818c11f6\",\n      ],\n      events: ['chainChanged\", \"accountsChanged'],\n    },\n  },\n};\n\nconst { uri, approval } = await provider.client.connect(params);\n```\n\n----------------------------------------\n\nTITLE: Triggering Reown AppKit Modal Programmatically Using useAppKit Hook in React Native (TypeScript)\nDESCRIPTION: This snippet illustrates how to programmatically open the Reown AppKit modal using the useAppKit hook provided by @reown/appkit-ethers5-react-native. It imports React Native components and the hook, obtains the open function from the hook, and assigns it to an onClick (onPress) event of a pressable UI element. This enables custom UI logic for modal invocation. Dependencies include the Reown appkit library and React Native. Input: user interaction triggering open(); Output: modal window appears. This approach offers flexibility compared to using default buttons.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers5/about/implementation.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Pressable, Text } from \"react-native\";\nimport { useAppKit } from \"@reown/appkit-ethers5-react-native\";\n\nexport default function ConnectView() {\n  const { open } = useAppKit();\n\n  return (\n    <>\n      <Pressable onClick={() => open()}>\n        <Text>Open Connect Modal</Text>\n      </Pressable>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Unsigned Transaction Object with Polkadot Metadata in JavaScript\nDESCRIPTION: Builds an unsigned transaction object containing polymorphic metadata fetched from the blockchain via Polkadot.js API. This includes 'specVersion', 'transactionVersion', block hashes, block numbers, era info, genesis hash, method call data, nonce, signed extensions, tip, and transaction version. This object structure is necessary for further signing processes and must match chain specifics for validity.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/polkadot/dapp-integration-guide.mdx#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst unsignedTransaction = {\n  specVersion: api.runtimeVersion.specVersion.toHex(),\n  transactionVersion: api.runtimeVersion.transactionVersion.toHex(),\n  address: selectedWalletConnectAccountAddress,\n  blockHash: lastHeader.hash.toHex(),\n  blockNumber: blockNumber.toHex(),\n  era: era.toHex(),\n  genesisHash: api.genesisHash.toHex(),\n  method: method.toHex(),\n  nonce: nonce.toHex(),\n  signedExtensions: [\n    \"CheckNonZeroSender\",\n    \"CheckSpecVersion\",\n    \"CheckTxVersion\",\n    \"CheckGenesis\",\n    \"CheckMortality\",\n    \"CheckNonce\",\n    \"CheckWeight\",\n    \"ChargeTransactionPayment\",\n  ],\n  tip: api.registry.createType(\"Compact<Balance>\", 0).toHex(),\n  version: tx.version,\n};\n```\n\n----------------------------------------\n\nTITLE: Kotlin Initialization of WalletConnectModal on Android\nDESCRIPTION: Shows how to initialize WalletConnect modal on Android by setting recommended or excluded wallet IDs, using Kotlin. The process involves creating initialization parameters with wallet IDs, then calling the initialize method with success and error callbacks, suitable for native Android apps integrating WalletConnect.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/options.mdx#_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nval recommendedWalletsIds = listOf<String>(\n    \"1ae92b26df02f0abca6304df07debccd18262fdf5fe82daa81593582dac9a369\",\n    \"4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0\"\n)\n\nval initParams = Modal.Params.Init(core = CoreClient, recommendedWalletsIds = recommendedWalletsIds)\n\nWalletConnectModal.initialize(\n    init = initParams,\n    onSuccess = {\n        // Callback on success\n    },\n    onError = { error ->\n        // Handle error\n    }\n)\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nval excludedWalletIds = listOf<String>(\n    \"1ae92b26df02f0abca6304df07debccd18262fdf5fe82daa81593582dac9a369\",\n    \"4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0\"\n)\n\nval initParams = Modal.Params.Init(core = CoreClient, excludedWalletIds = excludedWalletIds)\n\nWalletConnectModal.initialize(\n    init = initParams,\n    onSuccess = {\n        // Callback on success\n    },\n    onError = { error ->\n        // Handle error\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Connecting to WalletConnect Session with Namespaces - Kotlin\nDESCRIPTION: This snippet demonstrates how to initiate a WalletConnect session by specifying required and optional namespaces, which include chains, methods, and events. It uses the SignClient.connect method and provides onSuccess and error callbacks for handling the connection lifecycle. The core dependencies include the WalletConnect SDK and the SignClient, and required parameters are the session namespaces and a pairing object (active or inactive). The output is a successful connection initiation or an error state. Proper mapping of namespaces is crucial for correct session setup.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\nval namespace: String = /*Namespace identifier, see for reference: https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-2.md#syntax*/\nval chains: List<String> = /*List of chains that wallet will be requested for*/\nval methods: List<String> = /*List of methods that wallet will be requested for*/\nval events: List<String> = /*List of events that wallet will be requested for*/\nval requiredNamespaces: Map<String, Sign.Model.Namespaces.Proposal> = mapOf(namespace, Sign.Model.Namespaces.Proposal(accounts, methods, events)) /*Required namespaces to setup a session*/\nval optionalNamespaces: Map<String, Sign.Model.Namespaces.Proposal> = mapOf(namespace, Sign.Model.Namespaces.Proposal(accounts, methods, events)) /*Optional namespaces to setup a session*/\nval pairing: Core.Model.Pairing = /*Either an active or inactive pairing*/\nval connectParams = Sign.Params.Connect(requiredNamespaces, optionalNamespaces, pairing)\n\nfun SignClient.connect(connectParams,\n    { onSuccess ->\n        /*callback that returns letting you know that you have successfully initiated connecting*/\n    },\n    { error ->\n        /*callback for error while trying to initiate a connection with a peer*/\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Using `<appkit-button>` Web Component in HTML Template\nDESCRIPTION: This snippet showcases how to embed the `<appkit-button>` web component within an HTML template. The `<appkit-button>` is a global custom element provided by AppKit that requires no import statements and can be directly used in HTML markup to create a button with predefined styles and behavior.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/solana/about/triggermodal.mdx#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <appkit-button />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Accessing Wallet, Connection, and Provider Objects for Solana Transactions in JavaScript\nDESCRIPTION: This code retrieves the user's connection state, wallet address, a Solana blockchain connection instance, and a walletProvider capable of sending transactions. It uses AppKit React hooks and requires the components to be within the AppKit context provider. Required before creating or sending transactions through the wallet.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/solana-send-transaction.mdx#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst { isConnected, address } = useAppKitAccount();\nconst { connection } = useAppKitConnection();\nconst { walletProvider } = useAppKitProvider < Provider > \"solana\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Privacy Policy URL in TypeScript Settings\nDESCRIPTION: This snippet defines a configuration property named privacyPolicyUrl in TypeScript, assigning it a string containing the link to a privacy policy. When this value is provided (not undefined), a modal will include a footer with legal information linking to the specified URL. No external dependencies are required, and the only input parameter is a string URL; the output is an updated configuration object containing this setting.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/web3modal/v2/_partials/options/privacyPolicyUrl.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nprivacyPolicyUrl: 'https://example.com/privacy-policy'\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with Ethers v5 Adapter Using Bash\nDESCRIPTION: Contains the installation commands for adding Reown AppKit with the Ethers v5 blockchain adapter and specific ethers version 5.7.2 to support Ethereum interactions in Vue applications. Commands are given for multiple package managers to ensure flexible setup.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/installation.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit @reown/appkit-adapter-ethers5 ethers@5.7.2\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit @reown/appkit-adapter-ethers5 ethers@5.7.2\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @reown/appkit @reown/appkit-adapter-ethers5 ethers@5.7.2\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit @reown/appkit-adapter-ethers5 ethers@5.7.2\n```\n\n----------------------------------------\n\nTITLE: Retrieving WalletConnect Notify Subscriptions (JavaScript)\nDESCRIPTION: Shows how to fetch a list of all currently active notification subscriptions for a specific account. The `notifyClient.getActiveSubscriptions()` method takes the account address as a parameter and returns the list.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Will return all active subscriptions for the provided account, keyed by subscription topic.\nconst accountSubscriptions = notifyClient.getActiveSubscriptions({\n  account: `eip155:1:0x63Be...`,\n});\n```\n\n----------------------------------------\n\nTITLE: Example Get Subscribers Status Response JSON\nDESCRIPTION: This JSON snippet shows the expected structure of the response from the `/v1/<project-id>/subscribers` endpoint. It maps each subscribed account ID to an object containing a list of the notification type IDs they are subscribed to.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/notifications/backend-integration.mdx#_snippet_5\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029\": {\n    \"notification_types\": [\"4d1c97ad-c182-4097-8f2c-8f80c0674df2\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pairing Wallet with Dapp (Swift/iOS)\nDESCRIPTION: Initiates a pairing connection between an iOS wallet and a dapp using the WalletKit SDK. Requires converting the pairing URI string to a WalletConnectURI object and executing the pair function asynchronously.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet uri = WalletConnectURI(string: urlString)\n\nif let uri {\nTask {\ntry await WalletKit.instance.pair(uri: uri)\n}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Sign Client in Swift\nDESCRIPTION: Code for initializing a WalletConnect Sign client in iOS by configuring it with a crypto provider, which is required for cryptographic operations.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nSign.configure(crypto: CryptoProvider)\n```\n\n----------------------------------------\n\nTITLE: Responding to Session Requests with Strongly Typed Classes in C#\nDESCRIPTION: This snippet explains creating a response class for the 'eth_getTransactionReceipt' method, with JSON properties matching the expected response format. It uses Newtonsoft.Json annotations for serialization. This helps manage session request responses in a strongly typed manner, facilitating precise data handling.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/usage.mdx#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nusing Newtonsoft.Json;\nusing System.Numerics;\n\n[RpcMethod(\"eth_getTransactionReceipt\"), RpcRequestOptions(Clock.ONE_MINUTE, 99995)]\npublic class TransactionReceipt\n{\n    [JsonProperty(\"transactionHash\")]\n    public string TransactionHash;\n\n    [JsonProperty(\"transactionIndex\")]\n    public BigInteger TransactionIndex;\n\n    [JsonProperty(\"blockHash\")]\n    public string BlockHash;\n\n    [JsonProperty(\"blockNumber\")]\n    public BigInteger BlockNumber;\n\n    [JsonProperty(\"from\")]\n    public string From;\n\n    [JsonProperty(\"to\")]\n    public string To;\n\n    [JsonProperty(\"cumulativeGasUsed\")]\n    public BigInteger CumulativeGasUsed;\n\n    [JsonProperty(\"effectiveGasPrice\")]\n    public BigInteger EffectiveGasPrice;\n\n    [JsonProperty(\"gasUsed\")]\n    public BigInteger GasUsed;\n\n    [JsonProperty(\"contractAddress\")]\n    public string ContractAddress;\n\n    [JsonProperty(\"logs\")]\n    public object[] Logs;\n\n    [JsonProperty(\"logsBloom\")]\n    public string LogBloom;\n\n    [JsonProperty(\"type\")]\n    public BigInteger Type;\n\n    [JsonProperty(\"status\")]\n    public BigInteger Status;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Coinbase Wallet Deeplink Responses in React Native\nDESCRIPTION: TypeScript (TSX) code snippet demonstrating how to set up a listener for incoming deep links using `Linking.addEventListener` within a `useEffect` hook. It uses the `handleResponse` function from `@coinbase/wallet-mobile-sdk` to process URLs originating from the Coinbase Wallet app.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/installation.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleResponse } from \"@coinbase/wallet-mobile-sdk\";\n\n// Your app's deeplink handling code\nuseEffect(() => {\n  const sub = Linking.addEventListener(\"url\", ({ url }) => {\n    const handledBySdk = handleResponse(new URL(url));\n    if (!handledBySdk) {\n      // Handle other deeplinks\n    }\n  });\n\n  return () => sub.remove();\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Setting Custom AppKit Theme Variables in TypeScript\nDESCRIPTION: Illustrates how to apply custom theme variables (CSS custom properties) to the AppKit modal after initialization using the `modal.setThemeVariables({})` method. Requires an initialized `modal` instance.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/actions.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst modal = createAppKit({ wagmiConfig, projectId })\n\nmodal.setThemeVariables({ ... })\n```\n\n----------------------------------------\n\nTITLE: Setting IncludedWalletIds for ReownAppKitModal in Dart\nDESCRIPTION: This snippet demonstrates how to filter wallet display by specifying exactly which wallets should be shown in the modal. When includedWalletIds is set, only the listed wallets will appear in the connection interface.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/options.mdx#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal Set<String> includedWalletIds = {\n  'c57ca95b47569778a828d19178114f4db188b89b763c899ba0be274e97267d96', // MetaMask\n  '4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0', // Trust\n  'fd20dc426fb37566d803205b19bbc1d4096b248ac04548e3cfb6b3a38bd033aa', // Coinbase Wallet\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Error Information with getError Method\nDESCRIPTION: Shows how to retrieve error information from the AppKit modal. This method returns the current error state which can be used for error handling and displaying user feedback.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/ethers5/hooks.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nfunction Components() {\n  const error = modal.getError();\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Get Balance Button in React JSX\nDESCRIPTION: Renders a button that executes the `handleGetBalance` function when clicked, allowing the user to retrieve and view their Bitcoin balance. The button is only visible if the user is currently connected via AppKit.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/bitcoin-send-transaction.mdx#_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\nreturn (\n  isConnected && (\n    <div>\n      <button onClick={handleGetBalance}>Get Balance</button>\n    </div>\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching and Managing Dapp Notifications with useNotifications Hook in TypeScript\nDESCRIPTION: This snippet demonstrates initializing the useNotifications hook in TypeScript to retrieve and manage notification data for a dapp. It configures the hook with pagination (notificationsPerPage), infinite scroll (isInfiniteScroll), and sorting of unread messages (unreadFirst). The useNotifications hook returns notifications, functions for pagination and marking notifications as read. Prerequisites include having a valid account and domain, along with the definition of an optional onRead callback. The hook supports options for filtering, sorts unread messages at the top by default, and provides methods for marking messages read or unread as required.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/managing-notifications/react.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// watch notifications of current account's subscription to current dapp\nconst notificationsPerPage = 5\nconst isInfiniteScroll = true\nconst unreadFirst = true\n\nconst {\n  data: notifications,\n  nextPage,\n  markNotificationsAsRead,\n  markAllNotificationsAsRead\n} = useNotifications(\n  notificationsPerPage,\n  isInfiniteScroll,\n  account,\n  domain,\n  unreadFirst,\n  onRead // optional function to run whenever messages are read\n)\n```\n\n----------------------------------------\n\nTITLE: Example: Sending Tezos Operations (JSON-RPC)\nDESCRIPTION: This example illustrates how to construct a JSON-RPC request for the `tezos_send` method. It requires an `account` address and an array of `operations`. The snippet also shows the structure of the successful JSON-RPC response, which includes the hash of the submitted operation.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/tezos-rpc.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"tezos_send\",\n    \"params\": {\n        \"account\": \"tz1VQA4RP4fLjEEMW2FR4pE9kAg5abb5h5GL\",\n        \"operations\": [\n            {\n                \"kind\": \"transaction\";\n                \"amount\": \"1\";\n                \"destination\": \"tz1VQA4RP4fLjEEMW2FR4pE9kAg5abb5h5GL\";\n            }\n        ]\n    }\n}\n\n// Result\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"result\":  {\n        \"operationHash\": \"op...\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Approved Events using Reown AppKit (Dart)\nDESCRIPTION: Calls the `getApprovedEvents` method on the `_appKitModal` instance. This function returns a list of blockchain-related events (e.g., `accountsChanged`, `chainChanged`) that the connected wallet has approved the dApp to subscribe to or receive notifications for during the current session.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/actions.mdx#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\n_appKitModal.getApprovedEvents();\n```\n\n----------------------------------------\n\nTITLE: Rendering Chain Abstraction Component in JSX\nDESCRIPTION: This snippet shows the usage of the imported ChainAbstraction component within a JSX context, rendering it as a React component. It allows the Chain Abstraction's UI or logic to be integrated seamlessly into the application's interface.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/experimental/chain-abstraction.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ChainAbstraction />\n```\n\n----------------------------------------\n\nTITLE: Retrieving NEAR Accounts with JSON-RPC in JavaScript\nDESCRIPTION: Implements the 'near_getAccounts' JSON-RPC method which retrieves all accounts visible to the session. Each account returned includes the account name ('accountId') and its linked public key as a string formatted with key type and base58 bytes. No parameters are required, and the result is an array of account objects. This method is used to list accessible NEAR accounts for session context.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/near-rpc.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Request\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"near_getAccounts\",\n  \"params\": {}\n}\n\n// Result\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": [{\n    \"accountId\": \"alice.near\",\n    \"publicKey\": \"ed25519:DmnRVNb89cLKZY1cH1Zcr3rxMVD9r1cVfnDac7RFwM94\"\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Reown AppKit Configuration in Unity with C#\nDESCRIPTION: This C# snippet provides an example of asynchronously initializing the Reown AppKit within a Unity script. It replaces the older WalletConnectProjectConfig and Web3ModalConfig with a single AppKitConfig instance that includes project ID and metadata like name, description, URL, and icon URL. This initialization is typically placed in the Start() method to set up AppKit for usage in the Unity application.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-unity.mdx#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate async void Start()\n{\n    await AppKit.InitializeAsync(\n        new AppKitConfig(\n            projectId: \"Your Project ID from WalletConnectProjectConfig\",\n            new Metadata(\n                name: \"My Game\",\n                description: \"Example description\",\n                url: \"https://example.com\",\n                iconUrl: \"Your icon URL\"\n            )\n        )\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom UXML Layout Instance in Unity AppKit\nDESCRIPTION: Overrides the CreateViewInstance method to provide a custom UXML layout path for static view customization, allowing developers to define bespoke layout files for views like AccountView, enabling tailored UI configurations.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/customization.mdx#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nprotected override AccountView CreateViewInstance()\n{\n    return new AccountView(\"UI/CustomAccountView\");\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AppKit with Backend-Integrated SIWE Configuration (C#)\nDESCRIPTION: Shows how to initialize AppKit in C# using an `AppKitConfig` object configured for backend-integrated SIWE. This configuration includes the project ID, application metadata, redirect URIs, and assigns the comprehensive `SiweConfig` object (created for backend communication) to the `siweConfig` property. This setup enables full SIWE authentication flow involving nonce generation, message verification, and session management via a backend.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/siwe.mdx#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar appKitConfig = new AppKitConfig\n{\n    // Project ID from https://cloud.reown.com/\n    projectId = \"MY_PROJECT_ID\",\n    metadata = new Metadata(\n        \"App Name\",\n        \"App Description\",\n        \"https://reown.com\",\n        \"https://raw.githubusercontent.com/reown-com/reown-dotnet/main/media/appkit-icon.png\",\n        new RedirectData\n        {\n            // Used by native wallets to redirect back to the app after approving requests\n            Native = \"my-app://\"\n        }\n    ),\n    // Assign the SIWE configuration created above. Can be null if SIWE is not used.\n    siweConfig = siweConfig\n};\n```\n\n----------------------------------------\n\nTITLE: Updating pairing metadata in React Native SDK\nDESCRIPTION: Modifies the metadata associated with a pairing, such as the name or description, through `updateMetadata()`, to reflect changes in the application's state or identity.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait sdkClient.core.pairing.updateMetadata({ topic: \"1b3eda3f4...\", metadata: { name: \"MyDapp\", ... } })\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit Dependencies (Bash/Multiple Package Managers)\nDESCRIPTION: These commands add the necessary Reown AppKit core package (`@reown/appkit`) and the specific Ethers v5 adapter package (`@reown/appkit-adapter-ethers5`) to your project using various Node.js package managers.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers5-web.mdx#_snippet_1\n\nLANGUAGE: bash npm\nCODE:\n```\nnpm install @reown/appkit @reown/appkit-adapter-ethers5\n```\n\nLANGUAGE: bash Yarn\nCODE:\n```\nyarn add @reown/appkit @reown/appkit-adapter-ethers5\n```\n\nLANGUAGE: bash Bun\nCODE:\n```\nbun a @reown/appkit @reown/appkit-adapter-ethers5\n```\n\nLANGUAGE: bash pnpm\nCODE:\n```\npnpm add @reown/appkit @reown/appkit-adapter-ethers5\n```\n\n----------------------------------------\n\nTITLE: Defining BIP44 Derivation Path Structure for Dogecoin\nDESCRIPTION: Shows the standard BIP44 derivation path structure used for Dogecoin accounts, which follows the format 'm / purpose' / coin_type' / account' / change / address_index' where coin_type 3 is used for Dogecoin.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/dogecoin-rpc.mdx#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nm / purpose' / coin_type' / account' / change / address_index\n```\n\n----------------------------------------\n\nTITLE: Get Subscribers Status via cURL in Bash\nDESCRIPTION: This cURL command queries the `/v1/<project-id>/subscribers` endpoint with a list of accounts to check their subscription status. It uses a POST request with the accounts array in the JSON body and includes the necessary authorization header.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/notifications/backend-integration.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST 'https://notify.walletconnect.com/v1/<PROJECT_ID>/subscribers' \\\n  --header 'Authorization: Bearer <NOTIFY_API_SECRET>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"accounts\": [\n      \"eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029\",\n      \"eip155:1:0x0000000000000000000000000000000000000000\"\n    ]\n  }'\n```\n\n----------------------------------------\n\nTITLE: Adding Coinbase Scheme to Info.plist (RN CLI)\nDESCRIPTION: Adds the Coinbase Wallet URL scheme (`cbwallet`) to the `LSApplicationQueriesSchemes` array in `Info.plist` for iOS React Native CLI projects. This enables the application to detect the Coinbase Wallet app and handle deep links from it.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/installation.mdx#_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n// Info.plist\n\n<key>LSApplicationQueriesSchemes</key>\n<array>\n  <!-- other schemes -->\n  <string>cbwallet</string>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Usage example of chain abstraction in Kotlin\nDESCRIPTION: This code demonstrates how to utilize the prepare and execute functions. It checks if chain abstraction is needed, signs route and initial transactions, and executes the chain operation. Error handling involves sending JsonRpcError to the dapp and displaying errors to the user.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/chain-abstraction.mdx#_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nval initialTransaction = Wallet.Model.Transaction(...)\nWalletKit.ChainAbstraction.prepare(\n  initialTransaction,\n  caip10Accounts,\n  onSuccess = { prepareSuccess ->\n    when (prepareSuccess) {\n      is Wallet.Model.PrepareSuccess.Available -> {\n        // Sign route transactions\n        transactionsDetails?.route?.forEach { route ->\n          route.transactionDetails.forEach { transactionDetails ->\n            val signedTransaction = Signer.signHash(transactionDetails.transactionHashToSign, EthAccountDelegate.privateKey)\n            eip155Signatures.add(signedTransaction)\n          }\n        }\n        // Sign initial transaction\n        val signedInitialTx = Signer.signHash(transactionsDetails?.initialDetails?.transactionHashToSign, EthAccountDelegate.privateKey)\n        // Call execute\n        WalletKit.ChainAbstraction.execute(prepareSuccess, eip155Signatures, signedInitialTx,\n          onSuccess = {\n            // Handle successful execution\n          },\n          onError = {\n            // Handle execution error\n          }\n        )\n      }\n      is Wallet.Model.PrepareSuccess.NotRequired -> {\n        // No chain abstraction needed, sign and broadcast original transaction\n      }\n    }\n  },\n  onError = { prepareError ->\n    // Handle preparation error, send JsonRpcError\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Defining the Request Body Type for Sending Notifications in TypeScript\nDESCRIPTION: Defines the TypeScript type `RequestBody` for the payload sent to the `/notify` endpoint. It includes an optional `notification_id` for idempotency, notification details (`type`, `title`, `body`, optional `url`), and an array of recipient `accounts` (CAIP-10 format).\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/notifications/backend-integration.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype RequestBody = {\n  notification_id?: string | null;\n  notification: {\n    type: string;\n    title: string;\n    body: string;\n    url?: string | null;\n  };\n  accounts: string[];\n};\n```\n\n----------------------------------------\n\nTITLE: Installation Commands for @walletconnect/ethereum-provider\nDESCRIPTION: Commands to install the WalletConnect Ethereum Provider package using different package managers. These commands are necessary prerequisites before initializing the provider in your application.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/providers/ethereum.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @walletconnect/ethereum-provider\n```\n\nLANGUAGE: Yarn\nCODE:\n```\nyarn add @walletconnect/ethereum-provider\n```\n\nLANGUAGE: Bun\nCODE:\n```\nbun add @walletconnect/ethereum-provider\n```\n\nLANGUAGE: pnpm\nCODE:\n```\npnpm add @walletconnect/ethereum-provider\n```\n\n----------------------------------------\n\nTITLE: SIWEConfig Class Reference for Flutter Implementation\nDESCRIPTION: The complete SIWEConfig class reference showing all available properties and their default values, including callbacks for sign-in/sign-out events and configuration options for session management.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/siwe.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass SIWEConfig {\n  final Future<String> Function() getNonce;\n  final Future<SIWEMessageArgs> Function() getMessageParams;\n  final String Function(SIWECreateMessageArgs args) createMessage;\n  final Future<bool> Function(SIWEVerifyMessageArgs args) verifyMessage;\n  final Future<SIWESession?> Function() getSession;\n  final Future<bool> Function() signOut;\n  // Callback when user signs in\n  final Function(SIWESession session)? onSignIn;\n  // Callback when user signs out\n  final VoidCallback? onSignOut;\n  // Defaults to true\n  final bool enabled;\n  // In milliseconds, defaults to 5 minutes\n  final int nonceRefetchIntervalMs;\n  // In milliseconds, defaults to 5 minutes\n  final int sessionRefetchIntervalMs;\n  // Defaults to true\n  final bool signOutOnDisconnect;\n  // Defaults to true\n  final bool signOutOnAccountChange;\n  // Defaults to true\n  final bool signOutOnNetworkChange;\n  //\n\n  SIWEConfig({\n    required this.getNonce,\n    required this.getMessageParams,\n    required this.createMessage,\n    required this.verifyMessage,\n    required this.getSession,\n    required this.signOut,\n    this.onSignIn,\n    this.onSignOut,\n    this.enabled = true,\n    this.signOutOnDisconnect = true,\n    this.signOutOnAccountChange = true,\n    this.signOutOnNetworkChange = true,\n    this.nonceRefetchIntervalMs = 300000,\n    this.sessionRefetchIntervalMs = 300000,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Session Params iOS\nDESCRIPTION: Provides the Swift code to update session parameters after the initial configuration using the `set` method. This allows dynamic changes to session requirements.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nWalletConnectModal.set(sessionParams: SessionParams(...))\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit and Ethers Libraries with Yarn\nDESCRIPTION: Installs the primary React Native package for Reown's AppKit with Ethers integration, ensuring dependencies for interacting with Ethereum networks within the app. Requires Yarn package manager.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers/about/installation.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @reown/appkit-ethers-react-native ethers\n```\n\n----------------------------------------\n\nTITLE: Integrating AppKit with Only Core Networks (TypeScript)\nDESCRIPTION: Provides a minimal example of integrating AppKit with selected EVM and Solana-based networks without any specified adapters. Relies on @reown/appkit and its network definitions. Requires a projectId for authentication and may optionally include metadata. Suitable for simple use cases or for extending with adapters later.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/multichain.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAppKit } from \"@reown/appkit\";\nimport { solana, solanaTestnet, solanaDevnet } from \"@reown/appkit/networks\";\nimport { mainnet, arbitrum, sepolia } from \"@reown/appkit/networks\";\n\n// 1. Get projectId from https://cloud.reown.com\nconst projectId = \"YOUR_PROJECT_ID\";\n\n// 2. Set up the metadata - Optional\nconst metadata = {\n  name: \"AppKit\",\n  description: \"AppKit Example\",\n  url: \"https://example.com\", // origin must match your domain & subdomain\n  icons: [\"https://avatars.githubusercontent.com/u/179229932\"],\n};\n\n// 3. Create the AppKit instance\nconst modal = createAppKit({\n  networks: [mainnet, arbitrum, sepolia, solana, solanaTestnet, solanaDevnet],\n  metadata: metadata,\n  projectId,\n  features: {\n    analytics: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Pairing with a peer using Android SDK\nDESCRIPTION: Pairs the wallet with a dapp by passing the pairing URI encapsulated in `Core.Params.Pair` to the `pair()` method. Handles errors via callback.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\nval pairingParams = Core.Params.Pair(pairingUri)\nCoreClient.Pairing.pair(pairingParams) { error -> }\n```\n\n----------------------------------------\n\nTITLE: Supported Ethereum Methods and Events in WalletConnect Ethereum Provider\nDESCRIPTION: This snippet lists the default Ethereum JSON-RPC methods and associated events supported by WalletConnect's Ethereum provider SDK, enabling dapps to perform standard blockchain interactions and listen for wallet events.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/usage.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  methods: [\n    \"eth_accounts\",\n    \"eth_requestAccounts\",\n    \"eth_sendRawTransaction\",\n    \"eth_sign\",\n    \"eth_signTransaction\",\n    \"eth_signTypedData\",\n    \"eth_signTypedData_v3\",\n    \"eth_signTypedData_v4\",\n    \"eth_sendTransaction\",\n    \"personal_sign\",\n    \"wallet_switchEthereumChain\",\n    \"wallet_addEthereumChain\",\n    \"wallet_getPermissions\",\n    \"wallet_requestPermissions\",\n    \"wallet_registerOnboarding\",\n    \"wallet_watchAsset\",\n    \"wallet_scanQRCode\",\n    \"wallet_sendCalls\",\n    \"wallet_getCallsStatus\",\n    \"wallet_showCallsStatus\",\n    \"wallet_getCapabilities\",\n  ],\n  events: [\n    \"chainChanged\",\n    \"accountsChanged\",\n    \"message\",\n    \"disconnect\",\n    \"connect\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Toggling Dark and Light Themes in ReownAppKitModalTheme in Dart\nDESCRIPTION: Demonstrates how to toggle between default light and dark mode themes for ReownAppKitModal by setting the isDarkMode parameter within ReownAppKitModalTheme. The _isDarkMode boolean determines the theme selection. Requires that _isDarkMode is defined in the surrounding context or state.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/theming.mdx#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nreturn ReownAppKitModalTheme(\n  isDarkMode: _isDarkMode,\n  child: MaterialApp(\n    ...\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to WalletConnect Session Events in C#\nDESCRIPTION: Shows how to subscribe to named session events, e.g., 'chainChanged', with a handler method callback. This enables dapp clients to react to blockchain or account changes propagated from the wallet.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_41\n\nLANGUAGE: csharp\nCODE:\n```\ndappClient.SubscribeToSessionEvent(\"chainChanged\", OnChainChanged);\n```\n\n----------------------------------------\n\nTITLE: Adding Android Internet Permission\nDESCRIPTION: XML snippet for the Android `AndroidManifest.xml` file. This adds the necessary permission to allow the application to access the internet.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    ...\n    <!-- Permission to access the internet -->\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\n    ...\n```\n\n----------------------------------------\n\nTITLE: Responding to Session Request Callback - WalletConnect Kotlin (Android)\nDESCRIPTION: This Kotlin snippet demonstrates responding to a session request using 'WalletKit.respondSessionRequest'. It utilizes success and error callbacks to handle the outcome asynchronously. The 'onSuccess' callback is triggered when the response is sent successfully, allowing UI updates, while 'onError' handles errors.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\nWalletKit.respondSessionRequest(Wallet.Params.SessionRequestResponse,\n  onSuccess = {\n      //Session request response was sent successfully - update your UI\n  },\n  onError = { error ->\n      //Error while sending session response - update your UI\n  })\n```\n\n----------------------------------------\n\nTITLE: Handling Relayer Connection Event in WalletKit\nDESCRIPTION: Illustrates subscribing to the 'relayer_connect' event on the core relayer object. This event fires when the wallet successfully establishes a WebSocket connection with the relay server.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/best-practices.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ncore.relayer.on(\"relayer_connect\", () => {\n    // connection to the relay server is established\n})\n```\n\n----------------------------------------\n\nTITLE: Responding to Session Requests in Swift\nDESCRIPTION: Sends a response back to the dapp after processing a signing request. This is used to return signed transactions or messages.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/usage.mdx#_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nlet response: AnyCodable = sign(request: sessionRequest) // Implement your signing method\ntry await WalletKit.instance.respond(topic: request.topic, requestId: request.id, response: .response(response))\n```\n\n----------------------------------------\n\nTITLE: Creating Basic SIWE Configuration for Local Verification (C#)\nDESCRIPTION: Defines a basic `SiweConfig` object in C# for local Ethereum address verification using Sign-In With Ethereum (SIWE) within AppKit. It sets up parameters for the SIWE message (`Domain`, `Uri`), disables automatic sign-out on chain changes, and subscribes to success/failure events for the verification process. This configuration is suitable when no backend interaction is required.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/siwe.mdx#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Create SIWE configuration\nvar siweConfig = new SiweConfig\n{\n    // The properties from `SiweMessageParams` be used to generate SIWE message.\n    // There're no strict rules on what Domain and Uri parameters have to be on native platforms.\n    // In this example we use website domain and app URL scheme.\n    GetMessageParams = () => new SiweMessageParams\n    {\n        Domain = \"mywebsite.com\",\n        Uri = \"my-app://\"\n    },\n    // By setting this to false, we disable a requirement to sign a new SIWE message\n    // every time the active chain changes in AppKit or wallet.\n    SignOutOnChainChange = false\n};\n\n// Subscribe to SIWE events\nsiweConfig.SignInSuccess += _ => Debug.Log(\"Address verified successfully!\");\nsiweConfig.SignOutSuccess += () => Debug.Log(\"Address verification canceled or wallet disconnected.\");\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with Ethers v5 adapter using Bash\nDESCRIPTION: Provides installation commands to add Reown AppKit and Ethers v5 adapter packages along with a specific ethers version (5.7.2) using npm, Yarn, Bun, and pnpm. These commands prepare the environment for integrating Ethers v5 into React apps with Reown AppKit. They assume Node.js and the corresponding package manager are installed.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/installation.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install npm install @reown/appkit @reown/appkit-adapter-ethers5 ethers@5.7.2\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add npm install @reown/appkit @reown/appkit-adapter-ethers5 ethers@5.7.2\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add npm install @reown/appkit @reown/appkit-adapter-ethers5 ethers@5.7.2\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add npm install @reown/appkit @reown/appkit-adapter-ethers5 ethers@5.7.2\n```\n\n----------------------------------------\n\nTITLE: Configuring AppKit Excluded Wallets (Swift)\nDESCRIPTION: Configures the AppKit SDK to exclude specific wallets fetched from WalletGuide. Requires an array of wallet IDs obtained from the WalletConnect explorer. These wallets will not be displayed to the user.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/options.mdx#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nAppKit.configure(\n    ...\n    excludedWalletIds: [String]\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Smart Session Permission Data in JavaScript\nDESCRIPTION: JavaScript object defining the parameters for a smart session permission request. It includes the server's public key (`dAppECDSAPublicKey`), chain ID, target contract details (address, ABI, function name), expiry timestamp, and the user's address.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/smart-sessions.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n    const dataForRequest = {\n        dAppECDSAPublicKey: publickey as `0x${string}`, // public key from the server address\n        chainId: Number(chainId),  // chain Id\n        contractAddress: storageSC as `0x${string}`, // address of the smart contract\n        abi: storageABI, // the ABI of the smart contract\n        functionName: \"store\", // the function we allow the server to execute\n        expiry: Math.floor(Date.now() / 1000) + 24 * 60 * 60, // The duration for which the permission is granted. (24hs)\n        userAddress: address as `0x${string}`, // Default actual address\n      };\n```\n\n----------------------------------------\n\nTITLE: Filtering eth_getTransactionReceipt Requests by Session Topic in C#\nDESCRIPTION: Demonstrates how to filter incoming eth_getTransactionReceipt session requests by a specific session topic using the FilterRequests method before subscribing to the OnRequest event. This allows handling only requests associated with the specified session topic, improving event filtering and processing efficiency.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/usage.mdx#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nwalletClient.Engine.SessionRequestEvents<EthGetTransactionReceipt, TransactionReceipt>()\n    .FilterRequests(r => r.Topic == sessionTopic)\n    .OnRequest += OnEthTransactionReceiptRequest;\n```\n\n----------------------------------------\n\nTITLE: Customizing connector images in createAppKit using Wagmi connectors in TypeScript\nDESCRIPTION: Demonstrates how to set or override connector icons by specifying a mapping from connector IDs to image URLs, compatible with Wagmi connectors such as coinbaseWallet and metaMask. This customization updates the visuals of connection options presented to users in the modal.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateAppKit({\n  connectorImages: {\n    coinbaseWallet: \"https://images.mydapp.com/coinbase.png\",\n    metaMask: \"https://images.mydapp.com/metamask.png\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Registering for Device Push Notifications in React\nDESCRIPTION: This React component manages registration for device push notifications, requesting permission from the user and enabling push notifications through the browser or device APIs. It relies on the push registration logic imported and ensures the app can send push notifications.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/notifications/frontend-integration/api.mdx#_snippet_6\n\nLANGUAGE: MDX\nCODE:\n```\n<RegisteringPush />\n```\n\n----------------------------------------\n\nTITLE: Approving a WalletConnect Session in Kotlin\nDESCRIPTION: Approves a proposed WalletConnect session. This involves providing the proposer's public key and defining the approved namespaces, including accounts (following CAIP-10), methods, and events (namespace identifier following CAIP-2). The `SignClient.approveSession` function is called with the approval parameters, including an error callback.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\nval proposerPublicKey: String = /*Proposer publicKey from SessionProposal object*/\nval namespace: String = /*Namespace identifier, see for reference: https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-2.md#syntax*/\nval accounts: List<String> = /*List of accounts on chains*/\nval methods: List<String> = /*List of methods that wallet approves*/\nval events: List<String> = /*List of events that wallet approves*/\nval namespaces: Map<String, Sign.Model.Namespaces.Session> = mapOf(namespace, Sign.Model.Namespaces.Session(accounts, methods, events))\n\nval approveParams: Sign.Params.Approve = Sign.Params.Approve(proposerPublicKey, namespaces)\nSignClient.approveSession(approveParams) { error -> /*callback for error while approving a session*/ }\n```\n\n----------------------------------------\n\nTITLE: Importing Wagmi Hooks for Contract Interaction in React\nDESCRIPTION: Imports the `useReadContract` and `useWriteContract` hooks from the Wagmi library. These hooks are essential for initiating read and write operations on an EVM smart contract within a React component using Wagmi.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/EVM-smart-contract-interaction.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useReadContract, useWriteContract } from \"wagmi\";\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Get Subscribers Endpoint\nDESCRIPTION: Illustrates the JSON response format when successfully retrieving subscriber information for specific accounts. The response is an object where keys are the subscribed account IDs (CAIP-10 format) and values are objects containing a list of `notification_types` the account is subscribed to.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/backend-integration.mdx#_snippet_5\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029\": {\n    \"notification_types\": [\"4d1c97ad-c182-4097-8f2c-8f80c0674df2\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reown AppKit Write Contract Function Signature (Dart)\nDESCRIPTION: Provides the function signature for `requestWriteContract`, used to execute state-changing methods on smart contracts on EVM chains. It requires session and chain details, a `DeployedContract`, the function name, and a `Transaction` object specifying sender details. Optional parameters and a method override can be provided. It returns a future resolving to the result of the transaction (e.g., hash).\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/actions.mdx#_snippet_10\n\nLANGUAGE: Dart\nCODE:\n```\nFuture<dynamic> requestWriteContract({\n  required String? topic,\n  required String chainId,\n  required DeployedContract deployedContract,\n  required String functionName,\n  required Transaction transaction,\n  List<dynamic> parameters = const [],\n  String? method,\n});\n```\n\n----------------------------------------\n\nTITLE: Extracting Chain ID from SIWE Message\nDESCRIPTION: This utility function demonstrates how to retrieve the chain ID embedded within a SIWE message string, facilitating validation or logic conditional on the chain used.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/siwe.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getChainIdFromMessage } from \"@reown/appkit-siwe\";\n\nconst chainId = getChainIdFromMessage(message);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Notification Object Schema for useNotifications Hook\nDESCRIPTION: This TypeScript type definition describes the structure of a notification object returned by useNotifications. It includes fields such as id, sentAt, body, read status, url, type, and a markAsRead method for updating read status. This schema is essential for maintaining consistency and leveraging TypeScript's type-checking when handling notification data within the dapp.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/managing-notifications/react.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  title: string\n  sentAt: number\n  body: string\n  id: string\n  isRead: boolean\n  url: string | null\n  type: string\n  markAsRead: () => Promise<void>\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Relay with Android CoreClient (Kotlin)\nDESCRIPTION: Demonstrates how to pass a custom implementation of RelayConnectionInterface when initializing the Android CoreClient for advanced use cases.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\n...\nval optionalRelay: RelayConnectionInterface = /*implement interface*/\n\nCoreClient.initialize(projectId = projectId, connectionType = connectionType, application = application, relay = optionalRelay)\n```\n\n----------------------------------------\n\nTITLE: Rejecting WalletKit Authentication Requests in JavaScript\nDESCRIPTION: This snippet demonstrates how to reject an incoming authentication session request in WalletKit by calling rejectSessionAuthenticate with the session ID and an error code. It uses Errors.getSdkError to fetch a standardized user rejection error. Required dependencies are the Errors module and WalletKit SDK. The main parameters are the ID of the auth request (args.id) and the error reason, and the output is a rejected request signaling to the dApp that authentication was declined.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/one-click-auth.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait _walletKit!.rejectSessionAuthenticate(\n  id: args.id,\n  reason: Errors.getSdkError(Errors.USER_REJECTED_AUTH).toSignError(),\n);\n```\n\n----------------------------------------\n\nTITLE: Listening for Session Proposal Expiry Event - WalletConnect Typescript\nDESCRIPTION: This snippet demonstrates how to subscribe to the 'proposal_expire' event emitted by the WalletConnect Wallet Kit SDK. This event is triggered when a session proposal expires after its 5-minute window, indicating that any UI displaying the proposal should be removed. The event object contains the 'id' of the expired proposal.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nwalletKit.on(\"proposal_expire\", (event) => {\n    // proposal expired and any modal displaying it should be removed\n    const { id } = event;\n});\n```\n\n----------------------------------------\n\nTITLE: Installing and Uninstalling Web3 Packages using Multiple Package Managers - bash\nDESCRIPTION: This snippet demonstrates how to install the Reown AppKit packages (@reown/appkit and @reown/appkit-adapter-wagmi) and remove the ConnectKit package using various package managers (npm, Yarn, Bun, pnpm). Required dependencies are the aforementioned AppKit packages. The commands must be executed in the project's root directory and require network access. Successful execution will update package.json and node_modules appropriately. Ensure you have the corresponding package manager installed for each command.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-connectkit-next.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit @reown/appkit-adapter-wagmi && npm uninstall connectkit\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit @reown/appkit-adapter-wagmi&& yarn remove connectkit\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @reown/appkit @reown/appkit-adapter-wagmi && npm uninstall connectkit\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit @reown/appkit-adapter-wagmi&& pnpm remove connectkit\n```\n\n----------------------------------------\n\nTITLE: solana_signMessage - Sign a Message with a Wallet via JSON-RPC\nDESCRIPTION: This method signs a specified message with the wallet, returning a signature string. It requires a message (base58 encoded) and the signer's public key as parameters. The output is an object containing the signature. Dependencies include the signing functionality within the wallet and appropriate JSON-RPC communication setup.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/solana-rpc.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Request\n{\n\t\"id\": 1,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"solana_signMessage\",\n\t\"params\": {\n\t\t\"message\": \"37u9WtQpcm6ULa3VtWDFAWoQc1hUvybPrA3dtx99tgHvvcE7pKRZjuGmn7VX2tC3JmYDYGG7\",\n\t\t\"pubkey\": \"AqP3MyNwDP4L1GJKYhzmaAUdrjzpqJUZjahM7kHpgavm\"\n\t}\n}\n\n// Result\n{\n\t\"id\": 1,\n\t\"jsonrpc\": \"2.0\",\n\t\"result\":  { signature: \"2Lb1KQHWfbV3pWMqXZveFWqneSyhH95YsgCENRWnArSkLydjN1M42oB82zSd6BBdGkM9pE6sQLQf1gyBh8KWM2c4\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AppKit in Unity Start Method (C#)\nDESCRIPTION: Demonstrates initializing the Reown AppKit within the `Start` method of a Unity MonoBehaviour script. Assumes an `AppKitConfig` object (`config`) has been created with project details, and the `Reown AppKit` prefab is present in the scene. This ensures AppKit is ready before other operations.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/installation.mdx#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic async void Start()\n{\n    var config = new AppKitConfig(/*...*/);\n    await AppKit.InitializeAsync(config);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Android Wallet Detection Plugin in app.json (Expo)\nDESCRIPTION: Adds a reference to the custom `queries.js` config plugin within the `plugins` array in `app.json` or `app.config.js` for Expo projects. This plugin handles the necessary modifications to `AndroidManifest.xml` for Android wallet detection.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/installation.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"plugins\": [\n    // other plugins,\n    \"./queries.js\"\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current ReownAppKitModalColors in Dart\nDESCRIPTION: Obtains the current color palette from the active theme by calling ReownAppKitModalTheme.colorsOf(context). Returns a ReownAppKitModalColors object reflecting the theme's color configuration. Needs a BuildContext from the widget tree.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/theming.mdx#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nfinal colors = ReownAppKitModalTheme.colorsOf(context);\n```\n\n----------------------------------------\n\nTITLE: Updating pairing expiry in React Native SDK\nDESCRIPTION: Extends or reduces the expiry duration of a pairing by specifying the `topic` and an `expiry` time in seconds, allowing dynamic control over pairing lifespan.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait sdkClient.core.pairing.updateExpiry({ topic: \"1b3eda3f4...\", expiry: 60 })\n```\n\n----------------------------------------\n\nTITLE: Rendering Wallet List with Search and Clipboard Copy in React JavaScript\nDESCRIPTION: Defines a React functional component named WalletList that asynchronously fetches a list of wallets via the WalletConnect Explorer API, then displays the results as clickable cards within a styled grid. The component attaches an input event handler for live searching/filtering wallets by name and handles copying the wallet ID to the clipboard when a wallet card is clicked. Dependencies are React (for JSX/functional component), browser APIs (fetch, DOM access, navigator.clipboard), and a compatible DOM environment. The input is user-driven (search value, click), the output is dynamic DOM rendering of matching wallets. Requires network connectivity to the specified API endpoint and clipboard permissions. Does not persist state across renders and does not work in server-side-rendered environments.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/walletlist.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const WalletList = () => {\n  let wallets = [];\n  let originalWalletsArray = [];\n\n  if (typeof document !== \"undefined\") {\n    fetch(\n      \"https://explorer-api.walletconnect.com/v3/wallets?projectId=8e998cd112127e42dce5e2bf74122539\"\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        wallets = data.listings;\n        originalWalletsArray = Object.keys(data.listings).map((key) => ({\n          ...data.listings[key],\n          namespace: key,\n        }));\n        renderWallets(wallets);\n\n        const searchInput = document.querySelector(\".search-bar\");\n        if (searchInput) {\n          searchInput.addEventListener(\"input\", (event) => {\n            const query = event.target.value.toLowerCase();\n            const filteredwallets = Object.fromEntries(\n              Object.entries(wallets).filter(([_, wallet]) =>\n                wallet.name.toLowerCase().includes(query)\n              )\n            );\n            renderWallets(filteredwallets);\n          });\n        }\n      })\n      .catch((error) => console.error(error));\n  }\n\n  const renderWallets = (wallets) => {\n    const container = document.querySelector(\".wallet-card-container\");\n    if (container) {\n      container.innerHTML = \"\";\n      Object.keys(wallets).forEach((key) => {\n        const wallet = wallets[key];\n        const card = document.createElement(\"button\");\n        card.className = `\n          flex flex-col items-center justify-center \n          border border-gray-500 p-2 text-center \n          w-full dark:bg-gray-600 dark:text-white h-20\n        `;\n        card.innerHTML = `\n          <img src=\"${wallet.image_url.sm}\" width=\"40\" height=\"40\" class=\"p-0 m-0\" alt=\"${wallet.name}\" />\n          <span>${wallet.name}</span>\n        `;\n        card.onclick = () => {\n          navigator.clipboard.writeText(wallet.id);\n          card.innerHTML = \"Wallet ID copied!\";\n          setTimeout(() => {\n            card.innerHTML = `\n              <img src=\"${wallet.image_url.sm}\" width=\"40\" height=\"40\" class=\"p-0 m-0\" alt=\"${wallet.name}\" />\n              <span>${wallet.name}</span>\n            `;\n          }, 3000);\n        };\n        container.appendChild(card);\n      });\n    }\n  };\n\n  return (\n    <div className=\"wallet-list\">\n      <input\n        type=\"text\"\n        className=\"search-bar\"\n        placeholder=\"Search for a wallet...\"\n        style={{\n          width: \"100%\",\n          padding: \"8px\",\n          marginBottom: \"20px\",\n          marginTop: \"20px\",\n          boxSizing: \"border-box\",\n        }}\n      />\n      <div\n        className=\"wallet-card-container\"\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: \"repeat(auto-fill, minmax(200px, 1fr))\",\n          gap: \"8px\",\n        }}\n      ></div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Pairing with WalletConnect URI - Swift\nDESCRIPTION: This code demonstrates how to initiate a pairing process by creating a WalletConnect URI object from a string and calling the pair method on WalletKit. It ensures proper unwrapping and async/await syntax for asynchronous operation, enabling a wallet to establish a connection with a dApp. Dependencies include WalletKit SDK and Foundation libraries.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/best-practices.mdx#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nlet uri = WalletConnectURI(string: urlString)\n\nif let uri {\nTask {\ntry await WalletKit.instance.pair(uri: uri)\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Watching Notification Type Changes using Client (TypeScript)\nDESCRIPTION: Subscribes to changes in the notification types (scopes) for a specific account's subscription to a specific dapp using `client.watchNotificationTypes()`. Executes the provided callback function with the updated scope data whenever changes occur.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/types/javascript.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// watch scopes of specific account's subscription to specific dapp\nclient.watchNotificationTypes(scp => {\n  console.log(scp)\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Currently Connected Address from Session in C#\nDESCRIPTION: Defines the Caip25Address class and helper methods to extract the currently connected Ethereum address and chain ID from the active session namespaces by parsing the first account string in CAIP-25 format. Handles null or empty chain cases and returns null if no accounts exist. Uses the dappClient.Session object for accessing session information.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_37\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Caip25Address\n{\n    public string Address;\n    public string ChainId;\n}\n\npublic Caip25Address GetCurrentAddress(string chain)\n{\n    if (string.IsNullOrWhiteSpace(chain))\n        return null;\n\n    var defaultNamespace = currentSession.Namespaces[chain];\n\n    if (defaultNamespace.Accounts.Length == 0)\n        return null;\n\n    var fullAddress = defaultNamespace.Accounts[0];\n    var addressParts = fullAddress.Split(\":\");\n\n    var address = addressParts[2];\n    var chainId = string.Join(':', addressParts.Take(2));\n\n    return new Caip25Address()\n    {\n        Address = address,\n        ChainId = chainId,\n    };\n}\n\npublic Caip25Address GetCurrentAddress()\n{\n    var currentSession = dappClient.Session.Get(dappClient.Session.Keys[0]);\n\n    var defaultChain = currentSession.Namespaces.Keys.FirstOrDefault();\n\n    if (string.IsNullOrWhiteSpace(defaultChain))\n        return null;\n\n    return GetCurrentAddress(defaultChain);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring reown AppKit with Solana Adapter and Custom Wallets (TS)\nDESCRIPTION: This snippet illustrates how to set up `reown/appkit` for the Solana ecosystem using the `SolanaAdapter`. It shows how to instantiate and provide specific Solana wallet adapters, such as Phantom and Solflare, to the adapter configuration, along with setting the supported networks, metadata, and project ID.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/custom-connectors.mdx#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { createAppKit } from \"@reown/appkit/react\";\nimport { SolanaAdapter } from \"@reown/appkit-adapter-solana/react\";\nimport { solana, solanaTestnet, solanaDevnet } from \"@reown/appkit/networks\";\n\nimport {\n  SolflareWalletAdapter,\n  PhantomWalletAdapter,\n} from \"@solana/wallet-adapter-wallets\";\n\n// 0. Set up Solana adapter\nconst solanaWeb3JsAdapter = new SolanaAdapter({\n  wallets: [new PhantomWalletAdapter(), new SolflareWalletAdapter()],\n});\n\n// 1. Get projectId from https://cloud.reown.com\nconst projectId = \"YOUR_PROJECT_ID\";\n\n// 2. Set up the metadata\nconst metadata = {\n  //...\n};\n\n// 3. Create the modal\nconst modal = createAppKit({\n  adapters: [solanaWeb3JsAdapter],\n  networks: [solana, solanaTestnet, solanaDevnet],\n  metadata: metadata,\n  projectId,\n  features: {\n    analytics: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Define execute method for chain abstraction in Kotlin\nDESCRIPTION: This snippet declares the execute function, which broadcasts the prepared transactions and waits for completion, returning a success object with transaction hash and receipt. It requires a prepared available object, signed route transactions, a signed initial transaction, and success/error callbacks.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/chain-abstraction.mdx#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\n@ChainAbstractionExperimentalApi\nfun execute(\n  prepareAvailable: Wallet.Model.PrepareSuccess.Available,\n  prepareSignedTxs: List<Wallet.Model.RouteSig>,\n  initSignedTx: String,\n  onSuccess: (Wallet.Model.ExecuteSuccess) -> Unit,\n  onError: (Wallet.Model.Error) -> Unit\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Solana Web3.js Library via bun Bash Command\nDESCRIPTION: This snippet uses bun's package manager to install @solana/web3.js. This setup step is fundamental for accessing Solana blockchain methods in JavaScript React projects and should be run before developing wallet or transaction features.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/solana-send-transaction.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun add @solana/web3.js\n```\n\n----------------------------------------\n\nTITLE: TypeScript for Fetching All Subscribers List\nDESCRIPTION: This snippet shows how to retrieve the complete list of subscriber accounts for a project, which can involve high latency and rate limits due to the potentially large dataset. It makes a GET request with authorization headers, then parses the JSON response into an array of subscriber accounts. Dependencies include fetch API; inputs are project-specific URL and credentials, with output being an array of subscriber account strings.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/notifications/backend-integration.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst PROJECT_ID = \"<PROJECT_ID>\";\nconst NOTIFY_API_SECRET = \"<NOTIFY_API_SECRET>\";\nconst response = await fetch(\n  `https://notify.walletconnect.com/${PROJECT_ID}/subscribers`,\n  {\n    headers: {\n      Authorization: `Bearer ${NOTIFY_API_SECRET}`\n    },\n  }\n);\nconst subscribers: string[] = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Triggering Reown AppKit Modal in Vue (JavaScript)\nDESCRIPTION: This Vue.js snippet shows how to programmatically trigger the Reown AppKit modal by importing the useAppKit composable from '@reown/appkit/vue'. A button in the template calls openAppKit, which executes the open function to display the modal. Dependencies are Vue.js and '@reown/appkit/vue'. The handler function openAppKit does not require parameters. On button press, the modal appears. This integration targets single-file Vue components and the composition API.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_40\n\nLANGUAGE: JavaScript\nCODE:\n```\n<template>\n  <div>\n    <button @click=\"openAppKit\">Open</button>\n  </div>\n</template>\n\n  <script>\n  import { useAppKit } from \"@reown/appkit/vue\";\n\n  export default {\n    name: \"AppKitButton\",\n    setup() {\n      const { open } = useAppKit();\n      const openAppKit = () => open();\n\n      return {\n        openAppKit,\n      };\n    },\n  };\n  </script>\n\n```\n\n----------------------------------------\n\nTITLE: Excluding Wallets from WalletGuide in TypeScript\nDESCRIPTION: Defines the explorerExcludedWalletIds configuration option to exclude wallets by their IDs fetched from WalletGuide. This option accepts either an array of wallet IDs (string hashes) to exclude individually or the string \"ALL\" to exclude all wallets except those specifically included via explorerRecommendedWalletIds. Dependencies include knowledge of valid wallet IDs obtainable from the WalletGuide explorer. The input is an array of wallet ID strings or the keyword \"ALL\". The output effectively filters wallets during fetching, preventing listed wallets from being loaded.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/web3modal/v2/_partials/options/explorerExcludedWalletIds.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexplorerExcludedWalletIds: [\n  '1ae92b26df02f0abca6304df07debccd18262fdf5fe82daa81593582dac9a369',\n  '4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0'\n]\n// -- or -- //\nexplorerExcludedWalletIds: 'ALL'\n```\n\n----------------------------------------\n\nTITLE: Initializing AppKit Modal with Recommended Wallets in Kotlin\nDESCRIPTION: Initializes the AppKit modal with a prioritized list of recommended wallet IDs fetched from WalletGuide. This allows specifying which wallets should appear as recommended to users. Requires Kotlin and the AppKit SDK with access to CoreClient. The recommendedWalletsIds parameter is a list of wallet ID strings representing prioritized wallet identifiers. The initialization includes success and error callbacks to handle the asynchronous setup result.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/options.mdx#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval recommendedWalletsIds = listOf<String>(\n    \"1ae92b26df02f0abca6304df07debccd18262fdf5fe82daa81593582dac9a369\",\n    \"4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0\"\n)\n\nval initParams = Modal.Params.Init(core = CoreClient, recommendedWalletsIds = recommendedWalletsIds)\n\nAppKit.initialize(\n    init = initParams,\n    onSuccess = {\n        // Callback will be called if initialization is successful\n    },\n    onError = { error ->\n        // Error will be thrown if there's an issue during initialization\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing PushMessagingService to Handle FCM Messages in Kotlin\nDESCRIPTION: A custom service class extending PushMessagingService to handle new tokens, message reception, errors, and default behaviors in Firebase Cloud Messaging. This class must be registered in the AndroidManifest.xml. It processes incoming `Core.Model.Message` instances and FCM RemoteMessages for background notification handling.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/notifications/push.mdx#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nclass SampleFirebaseService: PushMessagingService() {\n\n    override fun newToken(token: String) {\n        // Triggered when Firebase Cloud Messaging creates a new token\n    }\n\n    override fun registeringFailed(token: String, throwable: Throwable) {\n        // Triggered when Firebase Cloud Messaging if there is an error with registering with the Push Server with a new token\n    }\n\n    override fun onMessage(message: Core.Model.Message, originalMessage: RemoteMessage) {\n        // Triggered when a message is sent from the Push Server through Firebase Cloud Messaging and the message contains `Core.Model.Message`. The original FCM RemoteMessage is also returned\n    }\n\n    override fun onDefaultBehavior(message: RemoteMessage) {\n        // Triggered when a message is sent from the Push Server through Firebase Cloud Messaging and the message does not contain `Core.Model.Message` in the payload. The original FCM RemoteMessage returned instead\n    }\n\n    override fun onError(throwable: Throwable, defaultMessage: RemoteMessage) {\n        // Triggered when there is an error that occurs when a message is received from the Push Server\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with Bitcoin using npm\nDESCRIPTION: Command for custom installation of Reown AppKit with Bitcoin adapter using npm package manager. Installs required dependencies for Bitcoin integration.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/installation.mdx#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit @reown/appkit-adapter-bitcoin\n```\n\n----------------------------------------\n\nTITLE: Replace Wallet Button with AppKit Button in React Component\nDESCRIPTION: Updates the React component to use `<appkit-button />` instead of the deprecated `<WalletMultiButton />` from previous wallet UI implementation. This enables the use of AppKit's custom HTML component for wallet actions.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-anza-adapter-react.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst Content: FC = () => {\n\n-   return <WalletMultiButton />;\n\n+   return <appkit-button />\n\n};\n```\n\n----------------------------------------\n\nTITLE: Receiving bip122_addressesChanged session_event payload in JSON\nDESCRIPTION: This JSON snippet represents a session_event payload as received by a dapp through WalletConnect 2.0, specifically for the bip122_addressesChanged event. The event data includes an array of address and derivation path pairs, indicating addresses for which UTXO or balance changes should be monitored. Required dependencies include a WalletConnect client and implementation supporting event subscription. Inputs include event metadata (id, topic) and parameters containing event name and data. The output is a structured event notification used by dapps to update UTXO and balance states. There are no special constraints beyond adherence to the WalletConnect 2.0 specification.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/dogecoin-rpc.mdx#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"id\": 1675759795769537,\n  \"topic\": \"95d6aca451b8e3c6d9d176761bf786f1cc0a6d38dffd31ed896306bb37f6ae8d\",\n  \"params\": {\n    \"event\": {\n      \"name\": \"bip122_addressesChanged\",\n      \"data\": [\n        {\n            \"address\": \"DTyt9wHTgizR8CwK8HAsWDaoMMxcaRuLWJ\",\n            \"path\": \"m/44'/3'/0'/0/0\"\n        },\n        {\n            \"address\": \"DA6rZ9aV3mkz9uxNvddzzbXEEcSPN8SCUS\",\n            \"path\": \"m/44'/3'/0'/0/2\"\n        },\n        {\n            \"address\": \"DDtQfA541GQU2KDrY3ofF5F5hsKxkFiUuG\",\n            \"path\": \"m/44'/3'/0'/0/3\"\n        },\n        {\n            \"address\": \"D5A6wPFhCNChUiQHGXftD8DiNgc2G7yT1L\",\n            \"path\": \"m/44'/3'/0'/0/4\"\n        },\n        {\n            \"address\": \"DFG9R8ENG4mK5gUiU1VRr3FBT13LfWJ4Fb\",\n            \"path\": \"m/44'/3'/0'/1/3\"\n        },\n        {\n            \"address\": \"D7rakaGgZvaBH1vGTxnsQ3ZdV7ejX57hRy\",\n            \"path\": \"m/44'/3'/0'/1/4\"\n        }\n      ]\n    },\n    \"chainId\": \"bip122:1a91e3dace36e2be3bf030a65679fe821\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Session Proposal Expiry Event - WalletConnect Swift (iOS)\nDESCRIPTION: This Swift snippet shows how to use the 'sessionProposalExpirationPublisher' from the WalletConnect WalletKit instance to handle session proposal expiry. It subscribes to updates using Combine's 'sink' method to receive notifications when a proposal expires, allowing the application to update the UI accordingly.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nWalletKit.instance.sessionProposalExpirationPublisher.sink { _ in\n    // let user know that session proposal has expired, update UI\n}.store(in: &publishers)\n```\n\n----------------------------------------\n\nTITLE: Initializing Web3Modal with Wagmi Default Config in JavaScript (TS)\nDESCRIPTION: This snippet details using the default Wagmi configuration in a JavaScript (TypeScript) environment. After importing createWeb3Modal and defaultWagmiConfig from '@web3modal/wagmi/react', it sets up metadata and defines chains including arbitrum and mainnet. The defaultWagmiConfig is used to generate wagmiConfig for these chains with the supplied projectId and app name. createWeb3Modal is then called with this config and projectId to enable wallet connection functionalities. It removes older EthereumClient and Web3Modal imports to streamline initialization.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/appkitv2.mdx#_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport { createWeb3Modal, defaultWagmiConfig } from '@web3modal/wagmi/react'\nimport { createConfig } from '@wagmi/core'\nimport { arbitrum, mainnet } from 'viem/chains'\n\nconst chains = [arbitrum, mainnet]\nconst projectId = 'YOUR_PROJECT_ID'\n\nconst metadata = {\n  name: 'AppKit',\n  description: 'AppKit Example',\n  url: 'https://example.com',\n  icons: ['https://avatars.githubusercontent.com/u/179229932']\n}\n\nconst wagmiConfig = defaultWagmiConfig({ chains, projectId, appName: metadata.name })\n\ncreateWeb3Modal({\n  wagmiConfig,\n  projectId,\n  enableAnalytics: true\n})\n```\n\n----------------------------------------\n\nTITLE: Sending Pairing URI to Dapp via Deep Link in Kotlin\nDESCRIPTION: Initiates the pairing process by creating an intent to open the deep link URI with the pairing URI, which causes the wallet app to open on the device for connection requests from the Dapp.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/mobile-linking.mdx#_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nrequireActivity().startActivity(Intent(Intent.ACTION_VIEW, deeplinkPairingUri.toUri()))\n```\n\n----------------------------------------\n\nTITLE: Enabling Universal Links Handling in iOS AppDelegate Using Swift\nDESCRIPTION: Configures the iOS AppDelegate to handle incoming Universal Links and deep links by implementing delegate methods that forward these events to React Native's Linking Manager. This is essential for the wallet app to respond to Universal Link activations and process Link Mode requests. Dependencies include React Native and its `RCTLinkingManager` module.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/link-mode.mdx#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\n#import <React/RCTLinkingManager.h>\n\n// Enable deeplinks\n- (BOOL)application:(UIApplication *)application\n   openURL:(NSURL *)url\n   options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options\n{\n  return [RCTLinkingManager application:application openURL:url options:options];\n}\n\n// Enable Universal Links\n- (BOOL)application:(UIApplication *)application continueUserActivity:(nonnull NSUserActivity *)userActivity\n restorationHandler:(nonnull void (^)(NSArray<id<UIUserActivityRestoring>> * _Nullable))restorationHandler\n{\n return [RCTLinkingManager application:application\n                  continueUserActivity:userActivity\n                    restorationHandler:restorationHandler];\n}\n```\n\n----------------------------------------\n\nTITLE: Installing WalletConnectModal React Native Package with Dependencies (bash)\nDESCRIPTION: Shows how to install WalletConnectModal React Native package and essential dependencies for async storage, polyfills, modals, SVG support, and network info. Provides commands for npm, yarn, bun, and pnpm package managers. These are necessary for using WalletConnectModal within React Native CLI projects.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/about.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @walletconnect/modal-react-native\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @walletconnect/modal-react-native\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun a @walletconnect/modal-react-native\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @walletconnect/modal-react-native\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-native-async-storage/async-storage react-native-get-random-values react-native-modal react-native-svg @react-native-community/netinfo @walletconnect/react-native-compat\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @react-native-async-storage/async-storage react-native-get-random-values react-native-modal react-native-svg @react-native-community/netinfo @walletconnect/react-native-compat\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun a @react-native-async-storage/async-storage react-native-get-random-values react-native-modal react-native-svg @react-native-community/netinfo @walletconnect/react-native-compat\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @react-native-async-storage/async-storage react-native-get-random-values react-native-modal react-native-svg @react-native-community/netinfo @walletconnect/react-native-compat\n```\n\n----------------------------------------\n\nTITLE: Define Theme Style - WalletConnectModal Android View - XML\nDESCRIPTION: Provides an XML style definition to override the default accent and on-accent colors for the WalletConnectModal when using Android View system. This style should be applied to the activity or application theme.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/theming.mdx#_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<style name=\"WalletConnectModalTheme\">\n    <item name=\"accentColor\">#FF47A1FF</item>\n    <item name=\"onAccentColor\">#FFFFFFFF</item>\n</style>\n```\n\n----------------------------------------\n\nTITLE: Getting Current AppKit Theme Variables in TypeScript\nDESCRIPTION: Explains how to retrieve the currently set custom theme variables for the AppKit modal using the `modal.getThemeVariables()` method. Requires an initialized `modal` instance.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/actions.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst modal = createAppKit({ wagmiConfig, projectId });\n\nconst themeMode = modal.getThemeVariables();\n```\n\n----------------------------------------\n\nTITLE: Disconnecting a WalletConnect Session with Optional Error Reason in C#\nDESCRIPTION: Shows how to properly disconnect an active session using its topic. An optional error reason can be passed when disconnecting to provide context, such as indicating a user-initiated disconnection.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_48\n\nLANGUAGE: csharp\nCODE:\n```\nawait walletClient.Disconnect(sessionTopic);\n\n// or\n\nawait walletClient.Disconnect(sessionTopic, Error.FromErrorType(ErrorType.USER_DISCONNECTED));\n```\n\n----------------------------------------\n\nTITLE: Fetching Wallets List with GET /v3/wallets\nDESCRIPTION: This snippet explains how to retrieve a list of wallets from the Cloud Explorer API, including optional pagination and filtering by platform. It demonstrates constructing GET requests with required projectId and optional query parameters.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/cloud/explorer.mdx#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nGET https://explorer-api.walletconnect.com/v3/wallets?projectId=YOUR_PROJECT_ID&entries=5&page=1\n```\n\nLANGUAGE: HTTP\nCODE:\n```\nGET https://explorer-api.walletconnect.com/v3/wallets?projectId=YOUR_PROJECT_ID&platforms=injected\n```\n\n----------------------------------------\n\nTITLE: Supported Ethereum Methods and Events in WalletConnect Ethereum Provider\nDESCRIPTION: This list enumerates the default Ethereum JSON-RPC methods and events supported by the '@walletconnect/ethereum-provider'. It serves as a reference for the available capabilities, including transaction handling, account management, chain switching, and event listening.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/usage.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  methods: [\n    \"eth_accounts\",\n    \"eth_requestAccounts\",\n    \"eth_sendRawTransaction\",\n    \"eth_sign\",\n    \"eth_signTransaction\",\n    \"eth_signTypedData\",\n    \"eth_signTypedData_v3\",\n    \"eth_signTypedData_v4\",\n    \"eth_sendTransaction\",\n    \"personal_sign\",\n    \"wallet_switchEthereumChain\",\n    \"wallet_addEthereumChain\",\n    \"wallet_getPermissions\",\n    \"wallet_requestPermissions\",\n    \"wallet_registerOnboarding\",\n    \"wallet_watchAsset\",\n    \"wallet_scanQRCode\",\n    \"wallet_sendCalls\",\n    \"wallet_getCallsStatus\",\n    \"wallet_showCallsStatus\",\n    \"wallet_getCapabilities\",\n  ],\n  events: [\n    \"chainChanged\",\n    \"accountsChanged\",\n    \"message\",\n    \"disconnect\",\n    \"connect\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dapp Pairing in TypeScript with WalletKit\nDESCRIPTION: Code for establishing a connection between a wallet and a dapp using WalletKit's pair method, with basic error handling. This is a fundamental first step to enable communication between a wallet and a decentralized application.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/best-practices.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst uri = 'xxx'; // pairing uri\ntry {\n    await walletKit.pair({ uri });\n} catch (error) {\n    // some error happens while pairing - check Expected errors section\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js Application with Create-Next-App CLI (bash)\nDESCRIPTION: This snippet demonstrates how to initialize a new Next.js application named \"appkit-vTestnet-example\" using the npx command-line interface. It serves as the foundational step for building a Web3 app integrated with Reown AppKit and Tenderly Virtual TestNets.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/tenderly-virtual-testnets.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest appkit-vTestnet-example\n```\n\n----------------------------------------\n\nTITLE: Rendering AppKit Connect Button using Web Components in TypeScript JSX\nDESCRIPTION: This snippet demonstrates the usage of AppKit's global web component <appkit-button /> to render a connect button without the need for any imports or React-specific logic. Web components are custom HTML elements that work natively in browsers and integrate seamlessly with JSX. The component simply returns the HTML element, providing a declarative way to embed the AppKit connect UI. No dependencies beyond supporting web browsers are required. The output is a UI button that triggers the AppKit connect modal when clicked.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/ethers5/triggermodal.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function ConnectButton() {\n  return <appkit-button />;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Recommended Wallet IDs with WalletConnect in JavaScript\nDESCRIPTION: This snippet shows how to override default recommended wallets by specifying a set of prioritized wallet IDs using a JavaScript Set of strings. Each ID represents a unique wallet, which can be copied from the WalletGuide explorer. The set determines order of recommendation, and is intended to be passed as a configuration to WalletConnect integrations. No external library is required other than WalletConnect, and wallet IDs should be gathered from WalletGuide.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/options.mdx#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nfinal Set<String> recommendedWalletIds = {\n  'c57ca95b47569778a828d19178114f4db188b89b763c899ba0be274e97267d96', // MetaMask\n  '4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0', // Trust\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing WalletKit SDK in Swift with App Metadata\nDESCRIPTION: Sets up the WalletKit client by configuring app metadata, crypto provider, push host, environment, and telemetry setting. The code ensures proper SDK initialization for further wallet-session interactions and push notifications, integrating with the WalletConnect SDK.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/usage.mdx#_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nlet telemetryEnabled = true;\nlet metadata = AppMetadata(\n    name: \"Example Wallet\",\n    description: \"Wallet description\",\n    url: \"example.wallet\",\n    icons: [\"https://avatars.githubusercontent.com/u/37784886\"],\n    redirect: AppMetadata.Redirect(native: \"example://\", universal: nil)\n)\n\nWalletKit.configure(\n    metadata: metadata,\n    crypto: DefaultCryptoProvider(),\n    // Used for the Push: \"echo.walletconnect.com\" will be used by default if not provided\n    pushHost: \"echo.walletconnect.com\",\n    // Used for the Push: \"APNSEnvironment.production\" will be used by default if not provided\n    environment: .production,\n    telemetryEnabled: telemetryEnabled\n)\n```\n\n----------------------------------------\n\nTITLE: Building Authentication Objects for SIWE in Swift\nDESCRIPTION: This function creates authentication objects required for approving authentication requests. It generates payloads for supported chains, formats authentication messages, and signs them to create verifiable authentication objects.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/one-click-auth.mdx#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nfunc buildAuthObjects(request: AuthenticationRequest, account: Account, privateKey: String) throws -> [AuthObject] {\n    let requestedChains = Set(request.payload.chains.compactMap { Blockchain($0) })\n    let supportedChains: Set<Blockchain> = [Blockchain(\"eip155:1\")!, Blockchain(\"eip155:137\")!, Blockchain(\"eip155:69\")!]\n    let commonChains = requestedChains.intersection(supportedChains)\n    let supportedMethods = [\"personal_sign\", \"eth_sendTransaction\"]\n\n    var authObjects = [AuthObject]()\n    for chain in commonChains {\n        let accountForChain = Account(blockchain: chain, address: account.address)!\n        let supportedAuthPayload = try WalletKit.instance.buildAuthPayload(\n            payload: request.payload,\n            supportedEVMChains: Array(commonChains),\n            supportedMethods: supportedMethods\n        )\n        let formattedMessage = try WalletKit.instance.formatAuthMessage(payload: supportedAuthPayload, account: accountForChain)\n        let signature = // Assume `signMessage` is a function you've implemented to sign messages.\n            signMessage(message: formattedMessage, privateKey: privateKey)\n\n        let authObject = try WalletKit.instance.buildSignedAuthObject(\n            authPayload: supportedAuthPayload,\n            signature: signature,\n            account: accountForChain\n        )\n        authObjects.append(authObject)\n    }\n    return authObjects\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Provider Type with Modal Adapter in JavaScript\nDESCRIPTION: Calls modal.getWalletProviderType() to obtain the current type of the connection provider (e.g., 'EVM', 'Solana', etc.), helpful in multi-chain or multi-provider dApp environments. Requires an established connection via the modal. Input: None. Output: String indicating provider type.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers5-web.mdx#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst providerType = modal.getWalletProviderType();\nconsole.log(providerType); // e.g., 'EVM', 'Solana', etc.\n```\n\n----------------------------------------\n\nTITLE: Configuring Included Wallets in AppKit for Unity\nDESCRIPTION: Configures AppKit to prioritize specific wallets by their IDs from WalletGuide. The order of wallet IDs in the array determines their display priority in the explorer.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/options.mdx#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nawait AppKit.InitializeAsync(new AppKitConfig\n{\n    includedWalletIds = new []\n    {\n        \"c57ca95...74e97267d96\",\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Hidden Buttons for Email & Social Wallets Support\nDESCRIPTION: Instantiate invisible AppKitModalConnectButton and AppKitModalAccountButton to support Email & Social Wallets functionality. This is required when you don't use these buttons visibly but still need to maintain the wallet functionality.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/email.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nAppKitModalConnectButton(\n  appKit: _appKitModal,\n  custom: SizedBox.shrink(), // Will make the button invisible\n),\nAppKitModalAccountButton(\n  appKit: _appKitModal,\n  custom: SizedBox.shrink(), // Will make the button invisible\n),\n```\n\n----------------------------------------\n\nTITLE: Import AppKit Modules in React TypeScript Application\nDESCRIPTION: Adds imports from @web3modal/solana/react and @web3modal/solana/chains into App.tsx for configuring and utilizing the new AppKit wallet connection components. Also includes removal of older Solana wallet adapter imports.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-anza-adapter-react.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createWeb3Modal, defaultSolanaConfig, useWeb3ModalAccount, useWeb3ModalProvider } from '@web3modal/solana/react'\nimport { solana, solanaTestnet, solanaDevnet } from '@web3modal/solana/chains'\n```\n\n----------------------------------------\n\nTITLE: Android Push Notification Message Handler Implementation in Kotlin\nDESCRIPTION: Demonstrates how to handle incoming push notifications in Android using NotifyClient, creating notification channels for different message types, and building notification objects with appropriate properties.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_38\n\nLANGUAGE: kotlin\nCODE:\n```\noverride fun onMessage(message: Notify.Model.Message, originalMessage: RemoteMessage) {\n    val appMetadata = NotifyClient.getActiveSubscriptions()[message.topic]?.metadata ?: throw IllegalStateException(\"No active subscription for topic: ${message.topic}\")\n    val appDomain = URI(appMetadata.url).host ?: throw IllegalStateException(\"Unable to parse domain from $appMetadata.url\")\n\n    val typeName = NotifyClient.getNotificationTypes(Notify.Params.NotificationTypes(appDomain))[message.type]?.name\n        ?: throw IllegalStateException(\"No notification type for topic:${message.topic} and type: ${message.type}\")\n\n    val channelId = message.type\n    val channelName = (appMetadata.name + \": \" + typeName)\n\n    val notificationBuilder = NotificationCompat.Builder(this, channelId)\n        .setContentTitle(message.title)\n        .setSmallIcon(android.R.drawable.ic_popup_reminder) // specify icon for notification\n        .setContentText(message.body)\n        .setAutoCancel(true) // clear notification after click\n        .setSound(defaultSoundUri) // specify sound for notification\n        .setContentIntent(pendingIntent) // specify pendingIntent\n\n    // Since android Oreo notification channel is needed.\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n        val channel = NotificationChannel(channelId, channelName, NotificationManager.IMPORTANCE_HIGH)\n        notificationManager.createNotificationChannel(channel)\n    }\n\n    notificationManager.notify(message.hashCode(), notificationBuilder.build()) // specify id of notification\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Coinbase Wallet Query to AndroidManifest.xml (XML)\nDESCRIPTION: Adds a `<package>` query for `org.toshi` (Coinbase Wallet's package name) within the `<queries>` section of the `AndroidManifest.xml` file. This allows the Android app to detect and interact with the Coinbase Wallet application.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/installation.mdx#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <queries>\n        <package android:name=\"org.toshi\"/>\n        <!-- Any other scheme previously added -->\n    </queries>\n\n    <application>\n        ...\n    </application>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Opening AppKit with Hooks in React (TSX)\nDESCRIPTION: Illustrates how to use the `useAppKit` hook from the `@reown/appkit/react` package within a React component (TSX). The hook provides an `open` function which can be called, typically in response to an event like a button click, to programmatically display the AppKit modal. It also shows how to pass options to `open` to specify an initial view, such as 'Networks'. Requires the `@reown/appkit/react` package to be installed.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/ethers/about/triggermodal.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAppKit } from \"@reown/appkit/react\";\n\nexport default function ConnectButton() {\n  // 4. Use modal hook\n  const { open } = useAppKit();\n\n  return (\n    <>\n      <button onClick={() => open()}>Open Connect Modal</button>\n      <button onClick={() => open({ view: \"Networks\" })}>\n        Open Network Modal\n      </button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Android Build Configuration for Jitpack Support\nDESCRIPTION: This setup snippet shows how to add Jitpack repository support in the Android project's build.gradle file, along with optional rules for handling minification issues related to JNA and uniffi libraries.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/docs/walletkit/flutter/early-access/chain-abstraction.mdx#_snippet_4\n\nLANGUAGE: Groovy\nCODE:\n```\nallprojects {\n    repositories {\n        google()\n        mavenCentral()\n        maven { url 'https://jitpack.io' } // <- add jitpack url\n    }\n}\n```\n\nLANGUAGE: Groovy\nCODE:\n```\n-keepattributes *Annotation*\n\n-keep class com.sun.jna.** { *; }\n-keepclassmembers class com.sun.jna.** {\n    native <methods>;\n    *;\n}\n\n-keep class uniffi.** { *; }\n\n# Preserve all public and protected fields and methods\n-keepclassmembers class ** {\n    public *;\n    protected *;\n}\n\ndontwarn uniffi.**\ndontwarn com.sun.jna.**\n```\n\n----------------------------------------\n\nTITLE: Configuring FeaturedWalletIds for ReownAppKitModal in Dart\nDESCRIPTION: This snippet shows how to override default recommended wallets by defining an array of wallet IDs to prioritize in the display order. This allows developers to customize which wallets are featured prominently in the connection modal.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/options.mdx#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal Set<String> featuredWalletIds = {\n  'c57ca95b47569778a828d19178114f4db188b89b763c899ba0be274e97267d96', // MetaMask\n  '4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0', // Trust\n  'fd20dc426fb37566d803205b19bbc1d4096b248ac04548e3cfb6b3a38bd033aa', // Coinbase Wallet\n}\n```\n\n----------------------------------------\n\nTITLE: Using AppKitModalConnectButton to initiate wallet connection\nDESCRIPTION: A UI button that triggers the modal to open and start the wallet connection process, supporting social options or wallet selection.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/usage.mdx#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nAppKitModalConnectButton(appKit: _appKitModal)\n```\n\n----------------------------------------\n\nTITLE: Initializing CoinbaseProvider in React Native with Reown AppKit\nDESCRIPTION: This code snippet demonstrates how to initialize the CoinbaseProvider and add it to the default configuration in a React Native application. It requires setting up a redirect URL (preferably a universal link) and a RPC URL for the Ethereum network.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers5/about/coinbase.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CoinbaseProvider } from '@reown/appkit-coinbase-ethers-react-native'\n\nconst coinbaseProvider = new CoinbaseProvider({\n  redirect: 'https://your-app-universal-link.com' || 'YOUR_APP_SCHEME://'\n  rpcUrl: mainnet.rpcUrl\n})\n\nconst config = defaultConfig({\n  metadata,\n  coinbase: coinbaseProvider\n})\n```\n\n----------------------------------------\n\nTITLE: Staging and Committing Changes in Git (Bash)\nDESCRIPTION: Stages all modified and new files in the current directory (`git add .`) and then creates a commit with a descriptive message (`git commit -m \"Description of your changes\"`). This sequence records your changes in the local repository history.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ngit add .\ngit commit -m \"Description of your changes\"\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket permissions in macOS for Flutter\nDESCRIPTION: This configuration snippet adds network access permissions in the entitlements files for macOS builds to permit WebSocket communications essential for WalletConnect operations within Flutter apps.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/overview.mdx#_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<key>com.apple.security.network.client</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: Installing Reown Coinbase Connector for Wagmi (RN CLI)\nDESCRIPTION: Command to install the Reown AppKit connector package (`@reown/appkit-coinbase-wagmi-react-native`) using yarn. This package facilitates the integration of Coinbase Wallet specifically within React Native CLI projects using the Wagmi library.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/installation.mdx#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @reown/appkit-coinbase-wagmi-react-native\n```\n\n----------------------------------------\n\nTITLE: Installing Solana Wallet Adapters Package (Bash)\nDESCRIPTION: These commands show how to install the `@solana/wallet-adapter-wallets` package, which provides common Solana wallet implementations, using various Node.js package managers like npm, yarn, bun, and pnpm. This package is a prerequisite for integrating specific Solana wallets.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/custom-connectors.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @solana/wallet-adapter-wallets\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @solana/wallet-adapter-wallets\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun a @solana/wallet-adapter-wallets\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @solana/wallet-adapter-wallets\n```\n\n----------------------------------------\n\nTITLE: React Component for Registering User Accounts\nDESCRIPTION: This snippet uses the Registering React component to facilitate user account registration processes within the notification system. It involves UI and logic for creating or verifying accounts in the backend, relying on previous API setup.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/frontend-integration/api.mdx#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n<Registering />\n```\n\n----------------------------------------\n\nTITLE: Registering Identity Key as a Dapp in React Native\nDESCRIPTION: Demonstrates how to register an identity key for a specific domain as a dapp in React Native, which enables cross-device account syncing.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nconst account = `eip155:1:0x63Be2c680685d2A9620c11b0068291261aa62d76`\nconst domain =  'app.mydomain.com', // pass the domain (i.e. the hostname) where your dapp is hosted.\nconst allApps =  false // The user will be prompted to authorize this dapp to send and receive messages on their behalf for only this specific domain using their WalletConnect identity.\n\n\n// No need to register and sign message if already registered.\nif (notifyClient.isRegistered({ account, domain, allApps })) return;\n\nconst {registerParams, message}  = notifyClient.prepareRegistration({\n  account,\n  domain,\n  allApps\n});\n\nconst signature = await ethersWallet.signMessage(message);\n\nawait notifyClient.register({\n  registerParams,\n  signature,\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Event Listeners for NotifyClient in React Native\nDESCRIPTION: Demonstrates how to set up event listeners for NotifyClient to handle subscription responses, incoming notifications, update responses, and subscription changes.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n// Handle response to a `notifyClient.subscribe(...)` call\nnotifyClient.on(\"notify_subscription\", async ({ params }) => {\n  const { error } = params;\n\n  if (error) {\n    // Setting up the subscription failed.\n    // Inform the user of the error and/or clean up app state.\n    console.error(\"Setting up subscription failed: \", error);\n  } else {\n    // New subscription was successfully created.\n    // Inform the user and/or update app state to reflect the new subscription.\n    console.log(`Subscribed successfully.`);\n  }\n});\n\n// Handle an incoming notification\nnotifyClient.on(\"notify_message\", ({ params }) => {\n  const { message } = params;\n  // e.g. build a notification using the metadata from `message` and show to the user.\n});\n\n// Handle response to a `notifyClient.update(...)` call\nnotifyClient.on(\"notify_update\", ({ params }) => {\n  const { error } = params;\n\n  if (error) {\n    // Updating the subscription's scope failed.\n    // Inform the user of the error and/or clean up app state.\n    console.error(\"Setting up subscription failed: \", error);\n  } else {\n    // Subscription's scope was updated successfully.\n    // Inform the user and/or update app state to reflect the updated subscription.\n    console.log(`Successfully updated subscription scope.`);\n  }\n});\n\n// Handle a change in the existing subscriptions (e.g after a subscribe or update)\nnotifyClient.on(\"notify_subscriptions_changed\", ({ params }) => {\n  const { subscriptions } = params;\n  // `subscriptions` will contain any *changed* subscriptions since the last time this event was emitted.\n  // To get a full list of subscriptions for a given account you can use `notifyClient.getActiveSubscriptions({ account: 'eip155:1:0x63Be...' })`\n});\n```\n\n----------------------------------------\n\nTITLE: Using AppKitModalAddressButton to display wallet address\nDESCRIPTION: Displays the current wallet address on the selected network and provides an option to open the modal view for account details.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/usage.mdx#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nAppKitModalAddressButton(appKitModal: _appKitModal, onTap: _appKitModal.openModalView)\n```\n\n----------------------------------------\n\nTITLE: Requesting Message Signature with WalletConnect - Casper (JSON)\nDESCRIPTION: This snippet shows a JSON-RPC request for casper_sign_message, soliciting a user signature for an arbitrary, prefixed text message using their Casper account. Dependencies include a properly-formatted Casper address and a text message (recommended to be human-readable for user security). The wallet prepends 'Casper Message:\\n' to the message before signing. If rejected, a USER_REJECTED error will be returned.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/casper-rpc.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"casper_sign_message\",\n  \"params\": {\n    \"message\": \"CSPR.studio wants you to sign in with your Casper account:\\n0x01953...808f3 \\n\\nIssued At: 07/21/2023 10:07:25\\nnonce: 428b62e4\",\n    \"address\": \"casper:casper-test:0202a8e3e5E32800792F37F738d95BF2610d86E97922D13ab97945bb062824ed9E8A\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Abstract Method for Preparing Chain Transactions\nDESCRIPTION: Defines the abstract method 'prepare' to check if a transaction requires additional bridging transactions before execution. It takes transaction parameters and returns a response indicating whether bridging is required, not needed, or available for processing.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/chain-abstraction.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\npublic abstract prepare(params: {\n  transaction: ChainAbstractionTypes.PartialTransaction;\n}): ChainAbstractionTypes.PrepareResponse;\n```\n\n----------------------------------------\n\nTITLE: Handling Last Modal Event with useAppKitEvents (Ethers) TypeScript\nDESCRIPTION: This snippet shows how to use the useAppKitEvents hook from `@reown/appkit-ethers-react-native`. This hook returns the last tracked modal event. It also accepts an optional callback function that will be executed whenever a new event is triggered, allowing for reactive handling of modal events.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/hooks.mdx#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useAppKitEvents } from '@reown/appkit-ethers-react-native'\n\nconst event = useAppKitEvents(event => {\n  // your code here\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Pairing Expiration Events - Swift\nDESCRIPTION: This code subscribes to pairing expiration events, allowing the app to detect when an inactive pairing expires (after 5 minutes) and when an active pairing (after session proposal approval) expires (after 30 days). It enables UI updates to inform the user of expiration status. Requires Combine framework and WalletKit SDK.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/best-practices.mdx#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nWalletKit.instance.pairingExpirationPublisher\n    .receive(on: DispatchQueue.main)\n    .sink { pairing in\n    guard !pairing.active else { return }\n    // let user know that pairing has expired\n}.store(in: &publishers)\n```\n\n----------------------------------------\n\nTITLE: Connect Wallet and Establish Session (JavaScript)\nDESCRIPTION: Initiates a connection request with the WalletConnect SignClient, optionally reusing an existing pairing. Specifies the required namespaces, methods, chains, and events the Dapp needs permission for. Opens the WalletConnectModal if a new URI is generated.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  const { uri, approval } = await signClient.connect({\n    // Optionally: pass a known prior pairing (e.g. from `signClient.core.pairing.getPairings()`) to skip the `uri` step.\n    pairingTopic: pairing?.topic,\n    // Provide the namespaces and chains (e.g. `eip155` for EVM-based chains) we want to use in this session.\n    requiredNamespaces: {\n      eip155: {\n        methods: [\n          \"eth_sendTransaction\",\n          \"eth_signTransaction\",\n          \"eth_sign\",\n          \"personal_sign\",\n          \"eth_signTypedData\"\n        ],\n        chains: [\"eip155:1\"],\n        events: [\"chainChanged\", \"accountsChanged\"]\n      }\n    }\n  });\n\n  // Open QRCode modal if a URI was returned (i.e. we're not connecting an existing pairing).\n  if (uri) {\n    walletConnectModal.openModal({ uri });\n    // Await session approval from the wallet.\n    const session = await approval();\n    // Handle the returned session (e.g. update UI to \"connected\" state).\n    // * You will need to create this function *\n    onSessionConnect(session);\n    // Close the QRCode modal in case it was open.\n    walletConnectModal.closeModal();\n  }\n} catch (e) {\n  console.error(e);\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Typed Data eth_signTypedData JSON\nDESCRIPTION: Demonstrates a JSON-RPC request for the `eth_signTypedData` method, used to calculate an Ethereum-specific signature for structured data (EIP-712) using a specific account. It follows the standard JSON-RPC format with 'id', 'jsonrpc', 'method', and 'params' (address and the structured data object). The result is the calculated signature as a DATA string. The signing address must be unlocked.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/ethereum-rpc.mdx#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n// Request\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"eth_signTypedData\",\n  \"params\": [\"0x9b2055d370f73ec7d8a03e965129118dc8f5bf83\", {see above}],\n}\n'\n\n// Result\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": \"0x4355c47d63924e8a72e509b65029052eb6c299d53a04e167c5775fd466751c9d07299936d304c153f6443dfa05f40ff007d72911b6f72307f996231605b915621c\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing iOS Dependencies for React Native CLI\nDESCRIPTION: Command to install iOS-specific dependencies using CocoaPods for React Native CLI projects.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/notify/installation.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd ios && pod install\n```\n\n----------------------------------------\n\nTITLE: Updating Repository Dependencies for WalletKit in Android\nDESCRIPTION: Updates the Gradle dependencies from Web3Wallet library to WalletKit. Replaces the walletconnect dependencies with reown dependencies including the BOM, core, and walletkit artifacts.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/upgrade/from-web3wallet-android.mdx#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n/* highlight-delete-start */\n- dependencies {\n-     implementation(platform(\"com.walletconnect:android-bom:{BOM version}\"))\n-     implementation(\"com.walletconnect:android-core\")\n-     implementation(\"com.walletconnect:web3wallet\")\n- }\n/* highlight-delete-end */\n/* highlight-add-start */\n+ dependencies {\n+     implementation(platform(\"com.reown:android-bom:{BOM version}\"))\n+     implementation(\"com.reown:android-core\")\n+     implementation(\"com.reown:walletkit\")\n+ }\n/* highlight-add-end */\n```\n\n----------------------------------------\n\nTITLE: Executing and Receiving Result for Starknet Invoke Transaction JSON-RPC\nDESCRIPTION: These JSON structures demonstrate a complete JSON-RPC request object for the `starknet_requestAddInvokeTransaction` method, referencing the example parameters. They also show the expected successful JSON-RPC response containing the `result` object, which includes the `transaction_hash` of the submitted invoke transaction.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/starknet-rpc.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"starknet_requestAddInvokeTransaction\",\n  \"params\":{see above}\n}\n\n// Result\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": { \"transaction_hash\" : \"0x01d666de4dc4d7e888190475ea6381a862e7d77cc3cb425e72ebf85e1d5144fa\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Entries by IDs for Allowlisting with GET /v3/all?ids\nDESCRIPTION: Provides example of retrieving specific listing entries by their IDs, which can be obtained from WalletGuide. Intended for allowlisting or detailed lookups.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/cloud/explorer.mdx#_snippet_4\n\nLANGUAGE: HTTP\nCODE:\n```\nGET https://explorer-api.walletconnect.com/v3/all?projectId=YOUR_PROJECT_ID&ids=be49f0a78d6ea1beed3804c3a6b62ea71f568d58d9df8097f3d61c7c9baf273d,4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0\n```\n\n----------------------------------------\n\nTITLE: Removing WalletConnect Notify Subscription (JavaScript)\nDESCRIPTION: Provides the code snippet to delete an existing notification subscription using the `notifyClient.deleteSubscription()` method. This action requires specifying the `topic` of the subscription that should be removed.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// `topic` - subscription topic of the subscription that should be deleted.\nawait notifyClient.deleteSubscription({ topic });\n```\n\n----------------------------------------\n\nTITLE: Implementing modal trigger in Vue\nDESCRIPTION: Create a button component in Vue to trigger the AppKit modal. This implementation allows users to open the wallet connection dialog in Vue applications.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_26\n\nLANGUAGE: js\nCODE:\n```\n<template>\n  <div>\n    <button @click=\"openAppKit\">Open</button>\n  </div>\n</template>\n\n  <script>\n  import { useAppKit } from \"@reown/appkit/vue\";\n\n  export default {\n    name: \"AppKitButton\",\n    setup() {\n      const { open } = useAppKit();\n      const openAppKit = () => open();\n\n      return {\n        openAppKit,\n      };\n    },\n  };\n  </script>\n```\n\n----------------------------------------\n\nTITLE: Complete Policy with Conditional Logic and ABI Parsing\nDESCRIPTION: A complete policy example demonstrating complex conditional logic with AND/OR operations. This policy validates UserOps by checking the target contract address and verifying the method being called against an ABI.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/cloud/paymaster.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"policyType\": \"useroperation_payload_control\", /* currently the only one supported */\n  \"policyStaticProps\": {\n    \"contract1\": {\n      \"abi\": [...Contract ABI goes here]\n    }\n  }\n\n  \"params\": {\n    \"key\": \"callData\",\n    \"op\": \"callDataToEquals\",\n    \"value\": \"0xa123cd918...\"\n  },\n  \"ands\": [\n    {\n      \"params\": {\n        \"key\": \"callData\",\n        \"op\": \"callDataMethodEquals\",\n        \"value\": \"methodFoo\"\n      },\n      \"metadata\": {\n        \"contractAbi\": \"<contract1.abi>\"\n      }\n    }\n  ],\n  \"ors\": [\n    {\n      \"params\": {\n        \"key\": \"callData\",\n        \"op\": \"callDataMethodEquals\",\n        \"value\": \"methodBar\"\n      },\n      \"metadata\": {\n        \"contractAbi\": \"<contract1.abi>\"\n      }\n    },\n    {\n      \"params\": {\n        \"key\": \"callData\",\n        \"op\": \"callDataMethodEquals\",\n        \"value\": \"methodBaz\"\n      },\n      \"metadata\": {\n        \"contractAbi\": \"<contract1.abi>\"\n      }\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Wagmi Configuration with Reown AppKit in TSX\nDESCRIPTION: Configures the Wagmi adapter for Reown AppKit integration in a Next.js application. It sets up cookie storage, enables SSR, defines the project ID from environment variables, and specifies supported blockchain networks using `@reown/appkit/networks`. This configuration is intended for a file outside the client component tree (e.g., `config/index.tsx`).\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/wagmi/about/implementation.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { cookieStorage, createStorage, http } from '@wagmi/core'\nimport { WagmiAdapter } from '@reown/appkit-adapter-wagmi'\nimport { mainnet, arbitrum } from '@reown/appkit/networks'\n\n// Get projectId from https://cloud.reown.com\nexport const projectId = process.env.NEXT_PUBLIC_PROJECT_ID\n\nif (!projectId) {\n  throw new Error('Project ID is not defined')\n}\n\nexport const networks = [mainnet, arbitrum]\n\n//Set up the Wagmi Adapter (Config)\nexport const wagmiAdapter = new WagmiAdapter({\n  storage: createStorage({\n    storage: cookieStorage\n  }),\n  ssr: true,\n  projectId,\n  networks\n})\n\nexport const config = wagmiAdapter.wagmiConfig\n```\n\n----------------------------------------\n\nTITLE: cURL for Retrieving Subscribers via /v1/<project-id>/subscribers\nDESCRIPTION: This cURL command fetches subscriber information for specified accounts to verify subscription status and get notification types. It makes a POST request with account IDs, authorization header, and expects a JSON response containing subscriber details. Dependencies include curl and valid API credentials. Inputs are account IDs, and outputs are subscriber data if subscribed.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/notifications/backend-integration.mdx#_snippet_3\n\nLANGUAGE: cURL\nCODE:\n```\ncurl -X POST 'https://notify.walletconnect.com/<PROJECT_ID>/subscribers' \\\n  --header 'Authorization: Bearer <NOTIFY_API_SECRET>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"accounts\": [\n      \"eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029\",\n      \"eip155:1:0x0000000000000000000000000000000000000000\"\n    ]\n  }'\n```\n\n----------------------------------------\n\nTITLE: Configuring WagmiAdapter and createAppKit with Custom RPC URLs (TypeScript)\nDESCRIPTION: Shows how to consistently apply custom RPC URL settings across both the WagmiAdapter and createAppKit to ensure that the same RPC endpoints are used within the application. It defines a CustomRpcUrlMap object containing custom mainnet and Polygon URLs and passes this object when initializing both WagmiAdapter and createAppKit. This eliminates conflicts and guarantees uniform RPC behavior in the app environment.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst customRpcUrls: CustomRpcUrlMap = {\n  'eip155:1': [{ url: 'https://your-custom-mainnet-url.com' }],\n  'eip155:137': [{ url: 'https://your-custom-polygon-url.com' }]\n}\n\nconst wagmiAdapter = new WagmiAdapter({\n  networks: [...],\n  projectId: \"project-id\",\n  customRpcUrls\n})\n\nconst modal = createAppKit({\n  adapters: [...],\n  networks: [...],\n  projectId: \"project-id\",\n  customRpcUrls\n})\n```\n\n----------------------------------------\n\nTITLE: Result Response for hedera_signTransaction - JSON\nDESCRIPTION: Shows the standard success response for hedera_signTransaction. The result field contains a base64-encoded signatureMap representing the signed TransactionBody returned to the client upon successful transaction signing.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/hedera-rpc.mdx#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"signatureMap\": \"VGhpcyBpcyBqdXN0IHNvbWUgc3R1...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Out from NEAR dApps Removing Function Call Keys Using JavaScript JSON-RPC\nDESCRIPTION: Implements the 'near_signOut' JSON-RPC method to delete one or more FunctionCall access keys previously created with 'signIn'. The method accepts an array of account objects with 'accountId' and 'publicKey' referencing keys to remove. The method returns void. This explicitly signs users out from specific smart contracts within NEAR dApps.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/near-rpc.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Request\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"near_signOut\",\n  \"params\": {\n    \"accounts\": [{\n      \"accountId\": \"alice.near\",\n      \"publicKey\": \"ed25519:DmnRVNb89cLKZY1cH1Zcr3rxMVD9r1cVfnDac7RFwM94\"\n    }]\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Example sendTransfer Request and Response - Litecoin JavaScript\nDESCRIPTION: Shows a JSON-RPC request payload for the `sendTransfer` method and its successful JSON response. The request specifies the connected account, recipient address, amount in litoshis, and an optional memo. The response includes the transaction ID (txid).\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/litecoin-rpc.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Request\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"sendTransfer\",\n    \"params\": {\n        \"account\": \"ltc1q8c6fshw2dlwun7ekn9qwf37cu2rn755u9ym7p0\",\n        \"recipient\": \"ltc1qn9h77dt0s6ar78ptxq58t2ne7tyhvfnruc3e7d\",\n        \"amount\": \"123000000\",\n        \"memo\": \"636861726c6579206c6f766573206865\"\n    }\n}\n\n// Result\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"txid\": \"f007551f169722ce74104d6673bd46ce193c624b8550889526d1b93820d725f7\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Universal Provider Configuration in AppKit (TypeScript)\nDESCRIPTION: Allows advanced customization of the universal provider's behavior in AppKit by overriding supported methods, chains, events, RPC URLs, and default chain per namespace. The example shows setting 'eip155' namespace properties including RPC methods, subscribed events, RPC URL mappings, and the default chain. This enables fine-tuning of provider interactions to suit specific application or network requirements.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#_snippet_31\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateAppKit({\n  //...\n  universalProviderConfigOverride: {\n    methods: { eip155: ['eth_sendTransaction', 'personal_sign'] },\n    chains: { eip155: ['1', '137'] },\n    events: { eip155: ['chainChanged', 'accountsChanged'] },\n    rpcMap: { \"eip155:1\": 'https://ethereum.publicnode.com' },\n    defaultChain: 'eip155:1'\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Example Namespace Formats in JSON\nDESCRIPTION: JSON examples of proposal namespaces requested by dApps and session namespaces responded by wallets, showing the required format for chains, methods, events, and accounts.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n// Example proposal namespaces request:\n{\n  \"eip155\": {\n    \"chains\": [\"eip155:137\", \"eip155:1\"],\n    \"methods\": [\"eth_sign\"],\n    \"events\": [\"accountsChanged\"]\n  },\n  \"cosmos\": {\n    \"chains\": [\"cosmos:cosmoshub-4\"],\n    \"methods\": [\"cosmos_signDirect\"],\n    \"events\": [\"someCosmosEvent\"]\n  }\n}\n\n// Example session namespaces response:\n{\n  \"eip155\": {\n    \"accounts\": [\n      \"eip155:137:0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb\",\n      \"eip155:1:0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb\"\n    ],\n    \"methods\": [\"eth_sign\"],\n    \"events\": [\"accountsChanged\"]\n  },\n  \"cosmos\": {\n    \"accounts\": [\n      \"cosmos:cosmoshub-4:cosmos1t2uflqwqe0fsj0shcfkrvpukewcw40yjj6hdc0\"\n    ],\n    \"methods\": [\"cosmos_signDirect\", \"personal_sign\"],\n    \"events\": [\"someCosmosEvent\", \"proofFinalized\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Decrypting data with ever_decryptData (JavaScript)\nDESCRIPTION: This snippet shows how to decrypt data encrypted with 'ever_encryptData' using the 'ChaCha20Poly1305' algorithm. Required parameters include algorithm, recipient's public key, data, and nonce, all in base64 or hex formats. The output provides the decrypted base64 data.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/everscale-rpc.mdx#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Request\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"ever_decryptData\",\n  \"params\": {\n       \"sourceAddress\": \"0:695e42...b8d\",\n       \"algorithm\": \"ChaCha20Poly1305\",\n       \"recipientPublicKey\": \"0x6e74...4e95\",\n       \"data\": \"ZW5jRGF0YTE=\",\n       \"nonce\": \"bm9uY2Ux\"\n  }\n}\n\n// Result\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n       \"data\": \"ZGF0YQ==\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Past Notification Messages in React Native\nDESCRIPTION: Shows how to retrieve the history of all past notification messages for a specific subscription topic.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\n// Will return all past Notify messages for the provided subscription topic, keyed by messageId.\nconst messageHistory = notifyClient.getNotificationHistory({ topic });\n```\n\n----------------------------------------\n\nTITLE: React Function Component for Chain List with Fetch, Render, and Search Functionality\nDESCRIPTION: This snippet defines a React functional component 'ChainList' that fetches chain data from an external API, renders clickable chain buttons, and implements a live search filter. It relies on DOM querying and event listeners for user input and clipboard interactions. Dependencies include React's rendering lifecycle and browser APIs like fetch, querySelector, and clipboard.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/chainlist.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const ChainList = () => {\n  let chains = [];\n  let filteredChains = [];\n\n  if (typeof document !== \"undefined\") {\n    fetch(\n      \"https://explorer-api.walletconnect.com/v3/chains?projectId=8e998cd112127e42dce5e2bf74122539\"\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        chains = Object.keys(data.chains).map((key) => ({\n          name: data.chains[key].name, \n          namespace: key, \n        }));\n        filteredChains = [...chains];\n        renderChains(filteredChains);\n\n        const searchInput = document.querySelector(\".search-bar\");\n        if (searchInput) {\n          searchInput.addEventListener(\"input\", (event) => {\n            const query = event.target.value.toLowerCase();\n            filteredChains = chains.filter((chain) =>\n              chain.name.toLowerCase().includes(query)\n            );\n            renderChains(filteredChains);\n          });\n        }\n      })\n      .catch((error) => console.error(error));\n  }\n\n  const renderChains = (chains) => {\n    const container = document.querySelector(\".chain-card-container\");\n    if (container) {\n      container.innerHTML = \"\";\n      chains.forEach((chain) => {\n        const card = document.createElement(\"button\");\n        card.className = `\n          flex items-center justify-center \n          border border-gray-500 p-2 text-center \n          w-full dark:bg-gray-600 dark:text-white h-20\n        `;\n        card.innerText = chain.name;\n        card.onclick = () => {\n          navigator.clipboard.writeText(chain.namespace);\n          card.innerText = \"Chain ID copied!\";\n          setTimeout(() => {\n            card.innerText = chain.name;\n          }, 3000);\n        };\n        container.appendChild(card);\n      });\n    }\n  };\n\n  return (\n    <div className=\"chain-list\">\n      <input\n        type=\"text\"\n        className=\"search-bar\"\n        placeholder=\"Search for a chain...\"\n        style={{\n          width: \"100%\",\n          padding: \"8px\",\n          marginBottom: \"20px\",\n          marginTop: \"20px\",\n          boxSizing: \"border-box\",\n        }}\n      />\n      <div\n        className=\"chain-card-container\"\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: \"repeat(auto-fill, minmax(200px, 1fr))\",\n          gap: \"8px\",\n        }}\n      ></div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Authenticating with WalletConnect and ReCaps - Kotlin\nDESCRIPTION: This example illustrates how to use the authenticate() method to simultaneously request EVM wallet authentication and session establishment using ReCap URIs for permissions. The snippet constructs an Authenticate parameter set, invokes SignClient.authenticate and processes success/error callbacks. Required parameters include the domain, chains, methods, uri, nonce, statement, and optionally resources (capabilities). The output is an authentication URI for user interaction; subsequent responses are handled asynchronously. The dApp must process onSessionAuthenticateResponse to finalize the flow.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\n val authenticateParams = Sign.Params.Authenticate(\n            domain = \"your.domain\",\n            chains = listof(\"eip155:1\", \"eip155:137\"),\n            methods = listOf(\"personal_sign\", \"eth_signTypedData\"),\n            uri = \"https://yourDappDomain.com/login\",\n            nonce = randomNonce,\n            statement = \"Sign in with wallet.\",\n            resources = null, // here your dapp may request authorization with recaps\n        )\n\nSignClient.authenticate(authenticateParams,\n    onSuccess = { url ->\n        //Handle authentication URI. Show as a QR code a send via deeplink\n    },\n    onError = { error ->\n        //Handle error\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Using the <appkit-button /> Web Component in HTML\nDESCRIPTION: Defines the customizable properties for the `<appkit-button />` web component. Optional properties include `disabled` (boolean), `balance` ('show' | 'hide'), `size` ('md' | 'sm'), `label` (string), `loadingLabel` (string), and `namespace` ('eip155' | 'solana' | 'bip122') to control its appearance, behavior, and associated account information.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/components.mdx#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<appkit-button />\n```\n\n----------------------------------------\n\nTITLE: Adding Coinbase Package to AndroidManifest.xml (RN CLI)\nDESCRIPTION: Adds the Coinbase Wallet package name (`org.toshi`) to the `<queries>` section in `AndroidManifest.xml` for Android React Native CLI projects. This configuration allows the application to detect if the Coinbase Wallet app is installed.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/installation.mdx#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n// AndroidManifest.xml\n\n<queries>\n  <!-- other queries -->\n  <package android:name=\"org.toshi\" />\n</queries>\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with Ethers v5 using Yarn\nDESCRIPTION: Command for custom installation of Reown AppKit with Ethers v5 adapter using Yarn package manager. Installs required dependencies including ethers v5.7.2.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/installation.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit @reown/appkit-adapter-ethers5 ethers@5.7.2\n```\n\n----------------------------------------\n\nTITLE: React Component for Managing Notifications\nDESCRIPTION: This snippet utilizes the ManagingNotifications React component to handle notification preferences and delivery management. It provides interfaces for viewing, updating, and processing user notifications within the application.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/frontend-integration/api.mdx#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n<ManagingNotifications />\n```\n\n----------------------------------------\n\nTITLE: Defining & Setting Session Params Android\nDESCRIPTION: Shows how to define custom session parameters (namespaces, methods, events, chains) in Kotlin for Android and apply them using `WalletConnectModal.setSessionParams`. Note that parameters must be set before opening the modal.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nval methods: List<String> = listOf(\"eth_sendTransaction\", \"personal_sign\", \"eth_sign\", \"eth_signTypedData\")\nval events: List<String> = listOf(\"chainChanged\", \"accountsChanged\")\nval chains: List<String> = listOf(\"eip155:1\")\nval namespaces = mapOf(\n    \"eip155\" to Modal.Model.Namespace.Proposal(\n        chains = chains,\n        methods = methods,\n        events = events\n    )\n)\n\nval sessionParams = Modal.Params.SessionParams(\n    requiredNamespaces = namespaces,\n    optionalNamespaces = null,\n    properties = null\n)\n\nWalletConnectModal.setSessionParams(sessionParams)\n```\n\n----------------------------------------\n\nTITLE: Defining the Peer Metadata Interface (TypeScript)\nDESCRIPTION: Provides the TypeScript interface definition for `Metadata`, accessible via `provider.session.peer.metadata`. This interface describes the structure of the connected wallet's metadata, including its name, description, URL, icons, and optional verification URL or redirect information.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/providers/universal.mdx#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\ninterface Metadata {\n  name: string;\n  description: string;\n  url: string;\n  icons: string[];\n  verifyUrl?: string;\n  redirect?: {\n    native?: string;\n    universal?: string;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with Solana using npm\nDESCRIPTION: Command for custom installation of Reown AppKit with Solana adapter using npm package manager. Installs required dependencies including Solana wallet adapter wallets.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/installation.mdx#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit @reown/appkit-adapter-solana @solana/wallet-adapter-wallets\n```\n\n----------------------------------------\n\nTITLE: Configuring Clipboard Client - TypeScript\nDESCRIPTION: Explains how to integrate a preferred clipboard library by providing a `clipboardClient` object with a `setString` method. This allows AppKit to use the specified library for copying addresses and URIs.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/options.mdx#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport * as Clipboard from 'expo-clipboard' // or `@react-native-clipboard/clipboard`\n\ncreateAppKit({\n  //...\n  clipboardClient: {\n    setString: async (value: string) => {\n      await Clipboard.setStringAsync(value)\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Theme Variables in AppKit - TypeScript\nDESCRIPTION: This TypeScript snippet showcases how to define custom theme variables when initializing AppKit. The 'themeVariables' object lets you override UI color settings, such as 'accent', used for buttons, icons, and labels. AppKit must be installed in your project. The parameters in 'themeVariables' should match supported variable names as documented. Expected input is a key-value map of variable names to CSS color values; the output is an AppKit instance styled per your definitions. Only supported variables will affect the UI appearance.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/theming.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateAppKit({\n  //...\n  themeVariables: {\n    accent: \"#00BB7F\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing WalletConnect Notify Dependencies in App Module Gradle (Kotlin DSL)\nDESCRIPTION: This snippet shows how to add the WalletConnect Notify platform BOM and associated libraries into the app module's Gradle file using Kotlin DSL. The platform BOM ensures consistent versioning for the 'android-core' and 'notify' libraries. These dependencies enable the app to use WalletConnect's core functionality and the Notify API for integrating notification features. Requires minimum Android API 23 and Java 11 as per prerequisites.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/notifications/notify/installation.mdx#_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\nimplementation(platform(\"com.reown:android-bom:release_version\"))\nimplementation(\"com.reown:android-core\")\nimplementation(\"com.reown:notify\")\n```\n\n----------------------------------------\n\nTITLE: Configuring AppMetadata for WalletKit Link Mode in Swift\nDESCRIPTION: This Swift code snippet demonstrates how to configure the `AppMetadata` for WalletKit. It sets the `universal` link for the wallet within the `AppMetadata.Redirect` object and explicitly enables Link Mode by setting `linkMode` to `true`. This metadata object is then used when initializing WalletKit via `WalletKit.configure`. One-Click Auth must be implemented beforehand.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/link-mode.mdx#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet metadata = AppMetadata(\n    ...\n    redirect: try! AppMetadata.Redirect(\n        native: \"exampleApp://\",\n        universal: \"https://example.com/example_wallet\",\n        linkMode: true\n    )\n)\n\nWalletKit.configure(\n    metadata: metadata,\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Response to Signed Deploy Request - Casper (JSON)\nDESCRIPTION: This snippet demonstrates a successful response object for casper_sign_deploy, returning a completed deploy with an approvals array that includes the user's signature. The response mirrors the request's deploy object, with the addition of a new approval entry. Consumers should validate this structure against the Casper deploy specification. If the user rejects, a USER_REJECTED error is returned instead of this object.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/casper-rpc.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"deploy\": {\n      \"hash\": \"a3301c9da7f0183f1c8904bed7fc72cf563454509462cada378b3f42a92f7b4f\",\n      \"header\": {\n        \"account\": \"02032E126170e5f28443775330B5B5Fe29dCE1a1dD3269910349525935ccbaf352EA\",\n        \"timestamp\": \"2024-02-01T08:41:59.207Z\",\n        \"ttl\": \"30m\",\n        \"gas_price\": 1,\n        \"body_hash\": \"188d88eedd3dc64b4ac3f8ca9b74be2b2fa588e2d537875d22b7e1a68658d19e\",\n        \"dependencies\": [],\n        \"chain_name\": \"casper-test\"\n      },\n      \"payment\": {\n        \"ModuleBytes\": {\n          \"module_bytes\": \"\",\n          \"args\": [[\"amount\", { \"bytes\": \"0400e1f505\", \"cl_type\": \"U512\" }]]\n        }\n      },\n      \"session\": {\n        \"Transfer\": {\n          \"args\": [\n            [\"amount\", { \"bytes\": \"0500f2052a01\", \"cl_type\": \"U512\" }],\n            [\n              \"target\",\n              {\n                \"bytes\": \"0202e99759649fa63a72c685b72e696b30c90f1deabb02d0d9b1de45eb371a73e5bb\",\n                \"cl_type\": \"PublicKey\"\n              }\n            ],\n            [\n              \"id\",\n              { \"bytes\": \"01d204000000000000\", \"cl_type\": { \"Option\": \"U64\" } }\n            ]\n          ]\n        }\n      },\n      \"approvals\": [\n        {\n          \"signer\": \"02032E126170e5f28443775330B5B5Fe29dCE1a1dD3269910349525935ccbaf352EA\",\n          \"signature\": \"02ad07c25d7cef27598f67c7bafce3e07e4198de7884f0e48041965c0f0be2690956d25bae0510bec9463da4aa6a5e591fb3cb88c8f31df85bc0b6f857b80f64e2\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Notifications as Read in TypeScript Dapp\nDESCRIPTION: This snippet illustrates various ways to mark notifications as read using asynchronous operations in TypeScript. It demonstrates marking a single notification as read using the markAsRead() method, and marking multiple notifications as read with markNotificationsAsRead, allowing for specification of the target account and domain. Limitations include a maximum of 1000 notification IDs per batch operation. These operations facilitate accurate tracking of read status across different user contexts and dapp domains.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/managing-notifications/react.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// marking a single notification as read\nawait notifications[0].markAsRead()\n\n// mark specific notifications as read for default account and under default domain\nawait markNotificationsAsRead(notifications.slice(2).map(n => n.id))\n\n// mark specific notifications as read for specified account under default domain\nawait markNotificationsAsRead(\n  notifications.slice(2).map(n => n.id),\n  differentAccount\n)\n\n// mark specific notifications as read for default account under specified domain\nawait markNotificationsAsRead(\n  notifications.slice(2).map(n => n.id),\n  undefined,\n  differentDomain\n)\n\n// mark specific notifications as read for specified account under specified domain\nawait markNotificationsAsRead(\n  notifications.slice(2).map(n => n.id),\n  differentAccount,\n  differentDomain\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with Ethers v5 using Bun\nDESCRIPTION: Command for custom installation of Reown AppKit with Ethers v5 adapter using Bun package manager. Installs required dependencies including ethers v5.7.2.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/installation.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbun add @reown/appkit @reown/appkit-adapter-ethers5 ethers@5.7.2\n```\n\n----------------------------------------\n\nTITLE: Initializing AppKit with SIWE Configuration in JavaScript\nDESCRIPTION: This code demonstrates how to initialize AppKit by passing a SIWE configuration object, allowing blockchain authentication workflows. The configuration includes required methods like getNonce, createMessage, verifyMessage, getSession, and signOut, as well as optional callbacks and flags for session management. Dependencies include the SIWEConfig interface and relevant network adapters.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/siwe.mdx#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Pass your siweConfig inside the createAppKit() function\nconst modal = createAppKit({\n  adapters: [wagmiAdapter], //or your Ethers adapter\n  projectId,\n  networks: [mainnet, arbitrum],\n  defaultNetwork: mainnet,\n  features: {\n    analytics: true // Optional - defaults to your Cloud configuration\n  },\n  siweConfig: siweConfig // pass your siweConfig\n});\n\n```\n\n----------------------------------------\n\nTITLE: Using AccountButton in Android XML Views\nDESCRIPTION: An XML layout example showing the AccountButton component embedded in a LinearLayout. Custom attributes are used to define the account_button_type with values NORMAL or MIXED, controlling the button style and functionality. This snippet assumes the presence of Reown AppKit UI library and its custom view implementations. The AccountButton reflects account-related UI controls on the Android View system.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/components.mdx#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<LinearLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:gravity=\"center\"\n    android:orientation=\"vertical\">\n\n        <com.reown.appkit.ui.components.button.views.AccountButton\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            app:account_button_type=\"NORMAL\" || \"MIXED\"\n        />\n</LinearLayout>\n```\n\n----------------------------------------\n\nTITLE: Resuming the Last WalletConnect Session in Unity Using C#\nDESCRIPTION: This snippet attempts to resume a previously active WalletConnect session. If resumption fails, it proceeds to establish a new connection using provided options. It also illustrates how to generate a QR code texture from the connection URI for user scanning, which is critical in wallet connection workflows. The code depends on WalletConnectUnity and QRCode utility classes and handles asynchronous session management.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\n// Try to resume the last session\nvar sessionResumed = await WalletConnect.Instance.TryResumeSessionAsync();\nif (!sessionResumed)\n{\n    var connectedData = await WalletConnect.Instance.ConnectAsync(connectOptions);\n\n    // Create QR code texture\n    var texture = WalletConnectUnity.Core.Utils.QRCode.EncodeTexture(connectedData.Uri);\n\n    // ... Display QR code texture\n\n    // Wait for wallet approval\n    await connectedData.Approval;\n}\n```\n\n----------------------------------------\n\nTITLE: Opening On-Ramp Modal with AppKit in JavaScript\nDESCRIPTION: This snippet shows how to use the open function from the useAppKit hook to display the On-Ramp modal interface. The code requires AppKit to be installed and properly configured in your project. The open function accepts a configuration object, where the view parameter specifies the modal section to display; here, 'OnRampProviders' opens the on-ramp providers view. Returns undefined; triggers UI modal as a side effect. Ensure useAppKit is called within a React function component context.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/transactions/onramp.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { open } = useAppKit()\n\nopen({ view: 'OnRampProviders' })\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Specific Modal Event (useAppKitEventSubscription) (Ethers) TypeScript\nDESCRIPTION: This snippet demonstrates using the useAppKitEventSubscription hook from `@reown/appkit-ethers-react-native` to subscribe to specific named modal events. It takes the event name (e.g., 'MODAL_OPEN') as the first argument and a callback function to be executed when the event occurs as the second argument. This allows for granular event handling.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/hooks.mdx#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useAppKitEventSubscription } from '@reown/appkit-ethers-react-native'\n\nuseAppKitEventSubscription('MODAL_OPEN', newEvent => {\n  // your code here\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Client Account Information with useAppKitAccount Hook in TypeScript\nDESCRIPTION: This snippet demonstrates using the useAppKitAccount hook from the @reown/appkit/react package to access blockchain client wallet information within a React component. The hook returns details such as the wallet address, CAIP (Chain Agnostic Improvement Proposal) formatted address, and connection status. It requires React environment and the @reown/appkit/react dependency. The snippet exemplifies extracting and potentially using client account data to conditionally render or interact within the component.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/wagmi/hooks.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAppKitAccount } from \"@reown/appkit/react\";\n\nfunction Components() {\n  const { address, caipAddress, isConnected } = useAppKitAccount();\n\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Web3Modal Modal with a Custom Button in JavaScript\nDESCRIPTION: This JavaScript snippet illustrates how to use a custom button to open the Web3Modal modal by directly calling the 'open' method of an object named 'modal'. The example demonstrates event listener attachment to a button with an ID of 'my-button', replacing the deprecated 'web3modal.openModal()' call. Assumes the 'modal' object is properly initialized with Web3Modal and available in scope. Inputs include a user click event; output is the wallet connection modal appearing.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/appkitv2.mdx#_snippet_13\n\nLANGUAGE: js\nCODE:\n```\ndocument.getElementById('my-button').addEventListener('click', () => {\n  modal.open()\n})\n\n<button id=\"my-button\">Connect Wallet</button>\n```\n\n----------------------------------------\n\nTITLE: Using Default AppKitButton Component to Trigger Modal in React Native (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import and render the AppKitButton component from @reown/appkit-ethers5-react-native to provide a default UI button that triggers the AppKit connection modal. It enables users to open the modal without custom logic. The dependency is the library providing AppKitButton. The snippet assumes an existing React Native functional component and does not require additional parameters. The output is a button integrated into the view that opens the modal on press.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers5/about/implementation.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AppKitButton } from \"@reown/appkit-ethers5-react-native\";\n\nexport default function ConnectView() {\n  return (\n    <>\n      ...rest of your view\n      <AppKitButton />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Querying ERC20 Token Balance using WalletKit in Swift\nDESCRIPTION: This method checks the token balance of a specified owner address on a given chain, for a specific token. It requires chain id, token address, and owner address as parameters, returning the token balance as a string.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/docs/walletkit/flutter/early-access/chain-abstraction.mdx#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nFuture<String> erc20TokenBalance({\n  required String chainId, // chain id\n  required String token, // token address\n  required String owner, // user address\n});\n```\n\n----------------------------------------\n\nTITLE: Installing WalletKit with npm in bash\nDESCRIPTION: Installs WalletKit along with WalletConnect utilities and core packages using the npm package manager. These packages are essential to begin integrating the WalletKit SDK into your JavaScript or TypeScript project. Requires Node.js and npm installed in the environment.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/installation.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/walletkit @walletconnect/utils @walletconnect/core\n```\n\n----------------------------------------\n\nTITLE: Specifying Included Wallet IDs with WalletConnect in Unity (C#)\nDESCRIPTION: This C# snippet illustrates how to define an array of wallet IDs to prioritize as included wallets within a WalletConnect/Unity integration. These IDs override default recommendations fetched from WalletGuide. The array respects order, and IDs are copied from WalletGuide explorer. Requires the WalletConnect Unity SDK, and should be set as a configuration property before connection.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/options.mdx#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nIncludedWalletIds = new[]\n{\n    \"c57ca95b47569778a828d19178114f4db188b89b763c899ba0be274e97267d96\", // MetaMask\n    \"4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0\", // Trust\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering BlockchainAPI Component in MDX\nDESCRIPTION: This snippet demonstrates how to import a BlockchainAPI component from a snippets directory and render it in an MDX documentation page. The component likely contains detailed API documentation for blockchain-related functionality.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/cloud/blockchain-api.mdx#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntitle: Blockchain API\n---\n\nimport BlockchainAPI from \"/snippets/cloud/blockchain-api.mdx\";\n\n<BlockchainAPI />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Blockchain API Documentation in MDX\nDESCRIPTION: This snippet demonstrates how to import a Blockchain API documentation component from a snippets directory and render it within the current page. It uses MDX syntax to include external documentation.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/cloud/blockchain-api.mdx#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntitle: Blockchain API\n---\n\nimport BlockchainAPI from \"/snippets/cloud/blockchain-api.mdx\";\n\n<BlockchainAPI />\n```\n\n----------------------------------------\n\nTITLE: Creating ReownAppKit instance using createInstance\nDESCRIPTION: Generates an ReownAppKit object with project ID and metadata, which can then be passed to ReownAppKitModal for enhanced modularity and reusability.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/usage.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// AppKit instance\nfinal appKit = ReownAppKit.createInstance(\n  projectId: '{YOUR_PROJECT_ID}',\n  metadata: const PairingMetadata(\n    name: 'Example App',\n    description: 'Example app description',\n    url: 'https://example.com/',\n    icons: ['https://example.com/logo.png'],\n    redirect: Redirect(\n      native: 'exampleapp://',\n      universal: 'https://reown.com/exampleapp',\n      linkMode: true|false,\n    ),\n  ),\n);\n\n// AppKit Modal instance using pre-created appKit\nfinal _appKitModal = ReownAppKitModal(\n  context: context,\n  appKit: appKit,\n);\n\n// Initialize the modal\nawait _appKitModal.init();\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with Solana using pnpm\nDESCRIPTION: Command for custom installation of Reown AppKit with Solana adapter using pnpm package manager. Installs required dependencies including Solana wallet adapter wallets.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/installation.mdx#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit @reown/appkit-adapter-solana @solana/wallet-adapter-wallets\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit and Dependencies with npm (bash)\nDESCRIPTION: This snippet installs Reown AppKit along with its Wagmi adapter, Wagmi Ethereum library, and React Query for state management via npm. These dependencies are required to enable wallet connections, interaction with Ethereum-compatible chains, and efficient data fetching in the Next.js app.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/tenderly-virtual-testnets.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit @reown/appkit-wagmi-adapter wagmi @tanstack/react-query\n```\n\n----------------------------------------\n\nTITLE: Handling WalletConnect Session Authentication Responses - Kotlin\nDESCRIPTION: This snippet shows how to process responses from the WalletConnect authentication flow using the onSessionAuthenticateResponse callback. It determines whether the authentication was successful and if a session was created, distinguishing between established sessions and SIWE-only flows. It requires prior execution of SignClient.authenticate and listens for session responses. The response parameter provides session status; callbacks guide post-authentication logic.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\n fun onSessionAuthenticateResponse(sessionAuthenticateResponse: Sign.Model.SessionAuthenticateResponse) {\n        // Triggered when Dapp receives the session authenticate response from wallet\n\n        if (sessionAuthenticateResponse is Sign.Model.SessionAuthenticateResponse.Result) {\n            if (sessionAuthenticateResponse.session != null) {\n                // Authentication successful, session established\n            } else {\n                // Authentication successful, but no session created (SIWE-only flow)\n            }\n        } else {\n            // Authentication request was rejected or failed\n        }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Modal Error State with AppKit in TypeScript\nDESCRIPTION: This sample shows how to call the getError method on the AppKit modal instance to retrieve the latest error state within a React component. Its only dependency is the initialized modal object as established previously. The function modal.getError() returns any error encountered during modal usage, and the resulting value can be displayed or handled accordingly. No parameters are required and the output will be null or an error object.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/ethers/hooks.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction Components() {\n  const error = modal.getError();\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using AppKitState Object in Kotlin with Jetpack Compose\nDESCRIPTION: Shows creation of the appKitState object using the rememberAppKitState function that requires a NavController. This state object facilitates synchronization between your app and the AppKit UI components providing state flows for UI conditions. The snippet also details usage of methods isOpen and isConnected returning StateFlow<Boolean>, indicating if the component is open or if an active session exists. Inputs include the navigation controller, outputs are state flows for UI reactive updates.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/components.mdx#_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nval appKitState = rememberAppKitState(navController)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nappKitState.isOpen\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nappKitState.isConnected\n```\n\n----------------------------------------\n\nTITLE: Configuring NetworkButton with Android XML Views\nDESCRIPTION: XML layout snippet demonstrating how to include the NetworkButton component inside a LinearLayout. The component requires no additional attributes or parameters besides layout width and height. This snippet uses Reown AppKit UI components with declared android namespace. The NetworkButton will display network status and allow interaction based on internal state management linked to the Java/Kotlin app environment.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/components.mdx#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<LinearLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:gravity=\"center\"\n    android:orientation=\"vertical\">\n\n        <com.reown.appkit.ui.components.button.views.NetworkButton\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n        />\n</LinearLayout>\n```\n\n----------------------------------------\n\nTITLE: Enabling Wallet Detection in Expo iOS via app.json Configuration (JSON)\nDESCRIPTION: Details how to enable WalletConnectModal wallet detection within Expo iOS projects by adding the LSApplicationQueriesSchemes array of wallet scheme strings into the ios.infoPlist section of app.json (or app.config.js). Only including the wallets listed here allows detection within the Expo environment, with no support for Android equivalent due to Expo limitations.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/about.mdx#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"expo\": {\\n    \"ios\": {\\n      \"bundleIdentifier\": \"com.your.app\",\\n      \"infoPlist\": {\\n        \"LSApplicationQueriesSchemes\": [\\n          \"metamask\",\\n          \"trust\",\\n          \"safe\",\\n          \"rainbow\",\\n          \"uniswap\"\\n          // Add other wallet schemes names here\\n        ]\\n      }\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Opening AppKit Modal with Hooks in React\nDESCRIPTION: This snippet shows how to use the `useAppKit` hook from `@reown/appkit/react` to get an `open` function. This function can be called, typically via a button's `onClick` event, to display the AppKit modal. An optional configuration object can be passed to `open` to specify the initial view, such as `{ view: \"Networks\" }`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/ethers5/triggermodal.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAppKit } from \"@reown/appkit/react\";\n\nexport default function ConnectButton() {\n  // 4. Use modal hook\n  const { open } = useAppKit();\n\n  return (\n    <>\n      <button onClick={() => open()}>Open Connect Modal</button>\n      <button onClick={() => open({ view: \"Networks\" })}>\n        Open Network Modal\n      </button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting with WalletConnect Modal - Android Kotlin\nDESCRIPTION: Illustrates how to initiate a connection using the WalletConnect Modal SDK in Android Kotlin. It shows how to prepare the required and optional namespaces and call the `WalletConnectModal.connect` function with success and error callbacks.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_34\n\nLANGUAGE: kotlin\nCODE:\n```\nval namespace: String = /*Namespace identifier, see for reference: https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-2.md#syntax*/\nval chains: List<String> = /*List of chains that wallet will be requested for*/\nval methods: List<String> = /*List of methods that wallet will be requested for*/\nval events: List<String> = /*List of events that wallet will be requested for*/\nval requiredNamespaces: Map<String, Modal.Model.Namespaces.Proposal> = mapOf(namespace, Modal.Model.Namespaces.Proposal(accounts, methods, events)) /*Required namespaces to setup a session*/\nval optionalNamespaces: Map<String, Modal.Model.Namespaces.Proposal> = mapOf(namespace, Modal.Model.Namespaces.Proposal(accounts, methods, events)) /*Optional namespaces to setup a session*/\nval pairing: Core.Model.Pairing = /*Either an active or inactive pairing*/\nval connectParams = Modal.Params.Connect(requiredNamespaces, optionalNamespaces, pairing)\n\nWalletConnectModal.connect(\n    connect = connectParams,\n    onSuccess = {\n        /* callback that letting you know that you have successfully initiated connecting */\n    },\n    onError = { error =>\n        /* callback for error while trying to initiate a connection with a peer */\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Responding to a Session Request - Swift\nDESCRIPTION: This code allows a wallet to respond to a session request with approval or rejection, by calling respond with request ID, signature, and account info. It includes error handling to show issues. Used for user-accepted session requests. Requires WalletKit SDK.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/best-practices.mdx#_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\ndo {\n    try await WalletKit.instance.respond(requestId: request.id, signature: signature, from: account)\n    // update UI -> remove the loader\n} catch {\n    // present error to the user\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AppKit and Adapters for Wagmi + Solana (Bash)\nDESCRIPTION: These snippets demonstrate how to install AppKit and the necessary adapters to enable both Wagmi (for EVM) and Solana blockchain support using various package managers (npm, yarn, bun, pnpm). Ensure Node.js and the selected package manager are already installed. The core packages are @reown/appkit, @reown/appkit-adapter-wagmi, and @reown/appkit-adapter-solana. No direct script input/output.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/multichain.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit @reown/appkit-adapter-wagmi @reown/appkit-adapter-solana\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit @reown/appkit-adapter-wagmi @reown/appkit-adapter-solana\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun a @reown/appkit @reown/appkit-adapter-wagmi @reown/appkit-adapter-solana\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit @reown/appkit-adapter-wagmi @reown/appkit-adapter-solana\n```\n\n----------------------------------------\n\nTITLE: Extending Session Lifetime (Swift)\nDESCRIPTION: Extends the expiration time of a user's session by another 7 days using `Sign.instance.extend`. Requires the session topic.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_19\n\nLANGUAGE: Swift\nCODE:\n```\ntry await Sign.instance.extend(topic: session.topic)\n```\n\n----------------------------------------\n\nTITLE: Example: Retrieving Tezos Accounts (JSON-RPC)\nDESCRIPTION: This snippet demonstrates the structure of a JSON-RPC request to call the `tezos_getAccounts` method, which requires no parameters. It also shows the expected JSON-RPC response format, containing an array of account objects, each detailing the signing algorithm, address, and public key.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/tezos-rpc.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"tezos_getAccounts\",\n    \"params\": {}\n}\n\n// Result\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"result\":  [\n        {\n            \"algo\": \"ed25519\",\n            \"address\": \"tz1VQA4RP4fLjEEMW2FR4pE9kAg5abb5h5GL\",\n            \"pubkey\": \"edpku4US3ZykcZifjzSGFCmFr3zRgCKndE82estE4irj4d5oqDNDvf\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Options component in JavaScript\nDESCRIPTION: This code snippet shows how to import the 'Options' component from a shared module using ES6 import syntax. It is used to incorporate the Options component into the current file for rendering or further use.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/options.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Options from \"/snippets/appkit/shared/options.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Retrieving Approved RPC Methods using Reown AppKit (Dart)\nDESCRIPTION: Invokes the `getApprovedMethods` method provided by `_appKitModal`. This method returns a list of specific RPC methods (e.g., `eth_sendTransaction`, `personal_sign`) that the connected wallet has approved the dApp to call within the established session.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/actions.mdx#_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\n_appKitModal.getApprovedMethods();\n```\n\n----------------------------------------\n\nTITLE: Installing Web3Inbox Widget with Yarn (Bash)\nDESCRIPTION: Adds @web3inbox/core and @web3inbox/widget-react as dependencies using the Yarn package manager. Yarn must be pre-installed. Executes in a terminal session within the target project directory. This command prepares your project for integrating the Web3Inbox Widget, compatible with React.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/notifications/embedded-widget/about.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @web3inbox/core @web3inbox/widget-react\n```\n\n----------------------------------------\n\nTITLE: Extracting WalletConnect Account Addresses from Session Namespaces in JavaScript\nDESCRIPTION: Retrieves the connected wallet accounts from the approved WalletConnect session namespaces. The accounts are returned in CAIP format and then parsed to extract the actual blockchain address by splitting the string. This allows the dapp to have a clean list of user addresses for transaction construction and signing.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/polkadot/dapp-integration-guide.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst walletConnectAccount = Object.values(walletConnectSession.namespaces)\n  .map((namespace) => namespace.accounts)\n  .flat();\n\n// grab account addresses from CAIP account formatted accounts\nconst accounts = wcAccounts.map((wcAccount) => {\n  const address = wcAccount.split(\":\")[2];\n  return address;\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving active pairings list with Android SDK\nDESCRIPTION: Fetches the list of current active pairings by invoking `getPairings()`, which returns a list of pairing objects with relevant details.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#_snippet_18\n\nLANGUAGE: Kotlin\nCODE:\n```\nval listOfActivePairings: List<Core.Model.Pairing> = CoreClient.Pairing.getPairings()\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with npm in React\nDESCRIPTION: This snippet provides the command to install Reown AppKit-related packages via npm for React projects, replacing Web3Modal dependencies.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit @reown/appkit-adapter-wagmi @tanstack/react-query\n```\n\n----------------------------------------\n\nTITLE: Passing Custom ThemeData into ReownAppKitModalTheme in Dart\nDESCRIPTION: Illustrates how to use previously defined custom theme data, _themeData, in the ReownAppKitModalTheme by assigning it to the themeData parameter. The isDarkMode state can still be toggled, and the custom colors will be applied across the app. Assumes _isDarkMode and _themeData are set in scope.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/theming.mdx#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nreturn ReownAppKitModalTheme(\n  isDarkMode: _isDarkMode,\n  themeData: _themeData,\n  child: MaterialApp(\n    ...\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Specific Modal Event (useAppKitEventSubscription) (Ethers v5) TypeScript\nDESCRIPTION: This snippet demonstrates using the useAppKitEventSubscription hook from `@reown/appkit-ethers5-react-native` to subscribe to specific named modal events. It takes the event name (e.g., 'MODAL_OPEN') as the first argument and a callback function to be executed when the event occurs as the second argument. This allows for granular event handling.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/hooks.mdx#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useAppKitEventSubscription } from '@reown/appkit-ethers5-react-native'\n\nuseAppKitEventSubscription('MODAL_OPEN', newEvent => {\n  // your code here\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Specific Modal Event (useAppKitEventSubscription) (Wagmi) TypeScript\nDESCRIPTION: This snippet demonstrates using the useAppKitEventSubscription hook from `@reown/appkit-wagmi-react-native` to subscribe to specific named modal events. It takes the event name (e.g., 'MODAL_OPEN') as the first argument and a callback function to be executed when the event occurs as the second argument. This allows for granular event handling.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/hooks.mdx#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useAppKitEventSubscription } from '@reown/appkit-wagmi-react-native'\n\nuseAppKitEventSubscription('MODAL_OPEN', newEvent => {\n  // your code here\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Connection Status with Modal Adapter in JavaScript\nDESCRIPTION: Uses the modal.getIsConnected() method to determine if the currently selected network adapter (e.g., Wagmi or Solana) is actively connected. Returns a boolean indicating connection status for the active namespace. Requires initialization of the modal object and correct network selection. Input: None. Output: Boolean (true if connected, false otherwise). Adapter-specific limitations apply when switching between incompatible wallets.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers5-web.mdx#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst isConnected = modal.getIsConnected();\nconsole.log(isConnected); // true or false\n```\n\n----------------------------------------\n\nTITLE: Handling Errors with useAppKitError in TypeScript\nDESCRIPTION: This snippet shows how to use the useAppKitError hook to access AppKit wallet error information in a React Native application. The hook, imported from @reown/appkit-ethers5-react-native, provides the current error object if any. It requires the AppKit context to be set up and is typically used for error monitoring and UI feedback in wallet-enabled applications. The hook returns an error property which can be inspected or used to show error dialogs.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers5/hooks.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useAppKitError } from \"@reown/appkit-ethers5-react-native\";\n\nfunction Components() {\n  const { error } = useAppKitError();\n\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with Yarn in JavaScript\nDESCRIPTION: Shows the Yarn command to add Reown AppKit packages for JavaScript projects, ensuring proper dependency management.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit @reown/appkit-adapter-wagmi\n```\n\n----------------------------------------\n\nTITLE: Initializing Reown AppKit (JavaScript/TypeScript)\nDESCRIPTION: This snippet shows how to replace the Web3Modal `createWeb3Modal` call with the Reown AppKit `createAppKit` function in a plain JavaScript context. It demonstrates passing configuration options, including the `adapters` array (containing `Ethers5Adapter`), the `networks` array, `metadata`, `projectId`, and `features`. The result is assigned to a `modal` variable.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers5-web.mdx#_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\n// Remove the following code line\n- const modal = createWeb3Modal({\n  ethersConfig,\n  projectId,\n  enableAnalytics: true\n})\n\n// Add the following code lines\n+ const modal = createAppKit({\n  adapters: [new Ethers5Adapter()],\n  networks: [mainnet, arbitrum],\n  metadata,\n  projectId,\n  features: {\n    analytics: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using WalletConnectRouter for Automatic Dapp Redirection (Swift)\nDESCRIPTION: Shows how to implement automatic redirection back to the Dapp from an iOS wallet using `WalletConnectRouter` in Swift. After approving a session proposal (`Sign.instance.approve`), it retrieves the Dapp's redirect URI from the proposal metadata (`proposal.proposer.redirect?.native`) and uses `WalletConnectRouter.goBack(uri:)` to navigate back. Includes a fallback for manual user return if the redirect URI is not available.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/mobile-linking.mdx#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport WalletConnectRouter\n\ntry await Sign.instance.approve(proposalId: <proposalId>, namespaces: <namespaces>)\n\nif let uri = proposal.proposer.redirect?.native {\n    WalletConnectRouter.goBack(uri: uri)\n} else {\n    // Inform the user to manually return to the DApp\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating Authentication Request with ReCaps in Swift\nDESCRIPTION: Illustrates how to asynchronously initiate an authentication request using the ReCaps extension (ERC-5573) for scoped permissions in Swift. The method authenticates the user and establishes a session by generating a pairing URI that can be presented to the user. Requires a properly configured AuthRequestParams object containing domain, chains, nonce, resource permissions, and methods.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_17\n\nLANGUAGE: Swift\nCODE:\n```\nfunc initiateAuthentication() {\n    Task {\n        do {\n            let authParams = AuthRequestParams.stub() // Customize your AuthRequestParams as needed\n            let uri = try await Sign.instance.authenticate(authParams)\n            // Present the URI to the user, e.g., show a QR code or send a deep link\n            presentAuthenticationURI(uri)\n        } catch {\n            print(\"Failed to initiate authentication request: \\(error)\")\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure WalletConnect Sign Instance (Swift)\nDESCRIPTION: Configures the WalletConnect Sign instance for iOS applications. Requires providing a `CryptoProvider` for cryptographic operations, which is essential for the client's security and functionality.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nSign.configure(crypto: CryptoProvider)\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Analytics Component in MDX\nDESCRIPTION: This code imports an Analytics component from a snippets directory and renders it on the page. The import statement specifies the absolute path to the component file, and the component is then used as a JSX element in the document.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/cloud/analytics.mdx#_snippet_0\n\nLANGUAGE: MDX\nCODE:\n```\nimport Analytics from \"/snippets/cloud/analytics.mdx\";\n\n<Analytics />\n```\n\n----------------------------------------\n\nTITLE: Installing WalletConnect NotifyClient Package\nDESCRIPTION: Command to install the WalletConnect NotifyClient package and React Native compatibility layer using yarn.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/notify/installation.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @walletconnect/notify-client @walletconnect/react-native-compat\n```\n\n----------------------------------------\n\nTITLE: Installing Updated AppKit v5 Dependencies with Bun - React - Bash\nDESCRIPTION: The Bun command installs the latest integration for AppKit Wagmi along with Wagmi v2.x, Viem v2.x, and @tanstack/react-query v5.x in React projects. Prerequisite: Bun must be installed. It streamlines migration to AppKit v5 by updating dependencies in projects using the Bun package manager. All listed parameters are package names and version specifiers.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/appkitv2.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbun a @web3modal/wagmi@latest wagmi@2.x viem@2.x @tanstack/react-query@5.x\n```\n\n----------------------------------------\n\nTITLE: Adding Web3Inbox Core and Widget via pnpm (Bash)\nDESCRIPTION: Installs @web3inbox/core and @web3inbox/widget-react packages using the pnpm package manager. Run this command from your project's root with pnpm already setup. It will manage installation with a virtual store and update relevant lock files. pnpm must be installed.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/embedded-widget/about.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @web3inbox/core @web3inbox/widget-react\n```\n\n----------------------------------------\n\nTITLE: Initializing WalletConnect Core and WalletKit – JavaScript\nDESCRIPTION: This snippet instantiates the Core object with a required projectId (registered on WalletConnect cloud) and asynchronously initializes WalletKit, providing metadata to uniquely identify the wallet. All parameters such as projectId, metadata name, description, URL, and icons are required for session context. Output is an active WalletKit instance ready to manage WalletConnect sessions.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/polkadot/wallet-integration-guide.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst core = new Core({ projectId: \"fgu234234njbhvhv23525bj\" });\nconst walletKit = await WalletKit.init({\n  core: core,\n  metadata: {\n    name: \"Example WalletConnect Wallet\",\n    description: \"Example WalletConnect Integration\",\n    url: \"myexamplewallet.com\",\n    icons: [],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching All Subscribers via Notify API using JavaScript Fetch\nDESCRIPTION: Shows how to retrieve a list of all accounts subscribed to the app using the JavaScript `fetch` API. It makes a GET request to the `https://notify.walletconnect.com/<PROJECT_ID>/subscribers` endpoint, requiring `PROJECT_ID` and `NOTIFY_API_SECRET` for authentication. The response is an array of account ID strings. Note the low rate limit for this endpoint.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/notifications/backend-integration.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst PROJECT_ID = \"<PROJECT_ID>\";\nconst NOTIFY_API_SECRET = \"<NOTIFY_API_SECRET>\";\nconst response = await fetch(\n  `https://notify.walletconnect.com/${PROJECT_ID}/subscribers`,\n  {\n    headers: {\n      Authorization: `Bearer ${NOTIFY_API_SECRET}`,\n    },\n  }\n);\nconst subscribers: string[] = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Closing the AppKit Modal in C#\nDESCRIPTION: Shows the C# code to programmatically close the AppKit modal using the `AppKit.CloseModal()` method.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/actions.mdx#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nAppKit.CloseModal();\n```\n\n----------------------------------------\n\nTITLE: Example SIWE Auth Payload Params - Kotlin\nDESCRIPTION: This example demonstrates how to create a `Modal.Model.AuthPayloadParams` object. It specifies the required parameters like chains, domain, uri, and nonce, as well as optional fields like statement, methods, and resources (for ReCaps). These parameters define the scope and details of the SIWE request.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/one-click-auth.mdx#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n val authParams = Modal.Model.AuthPayloadParams(\n    chains = [\"eip155:1\", \"eip155:137\"],\n    domain = \"yourDappDomain.com\",\n    uri = \"https://yourDappDomain.com/login\",\n    nonce = //uniqueNonce,\n    statement = \"I accept the Terms of Service: https://yourDappDomain.com/\",\n    methods = [\"personal_sign\", \"eth_sendTransaction\"],\n    resources = null //// Here your dapp may request authorization with ReCaps\n)\n```\n\n----------------------------------------\n\nTITLE: Using ConnectButton in Android XML Views\nDESCRIPTION: XML snippet showing the declaration of ConnectButton inside a LinearLayout for Android View usage. Uses custom XML attributes to specify the button size (NORMAL or SMALL). This snippet requires the custom namespace for app-specific attributes. It displays a button that handles connection logic integrated with the AppKit state framework.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/components.mdx#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<LinearLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:gravity=\"center\"\n    android:orientation=\"vertical\">\n\n        <com.reown.appkit.ui.components.button.views.ConnectButton\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            app:connect_button_size=\"NORMAL\" || \"SMALL\"\n        />\n</LinearLayout>\n```\n\n----------------------------------------\n\nTITLE: Disabling Account View Modal in TypeScript\nDESCRIPTION: This snippet configures the application to disable the account view modal by setting enableAccountView to false. It assumes the existence of a configuration file or object where such settings are stored.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/web3modal/v2/_partials/options/enableAccountView.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nenableAccountView: false\n```\n\n----------------------------------------\n\nTITLE: Adding AppKit Button Web Component in Vue Template - TSX/HTML\nDESCRIPTION: This snippet demonstrates adding the <appkit-button> custom element inside a template block, commonly used in Vue components. No additional dependencies, imports, or registrations are necessary because AppKit web components are globally available. The <appkit-button> can be embedded as shown to render the button UI within the hosting framework, with no props required; developers should ensure AppKit web components are loaded on the page for correct rendering.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/bitcoin/about/triggermodal.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<template>\n  <appkit-button />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Declaring the execute Method for Chain Abstraction in Swift\nDESCRIPTION: Defines the Swift `execute` method for WalletKit's Chain Abstraction. This asynchronous function takes UI field details and signatures for both routing transactions (`routeTxnSigs`) and the initial transaction (`initialTxnSig`). It manages broadcasting transactions in the correct sequence and monitors the cross-chain process, returning `ExecuteDetails` upon completion or failure. The `@available` attribute marks it as experimental.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/chain-abstraction.mdx#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\n@available(*, message: \"This method is experimental. Use with caution.\")\npublic func execute(uiFields: UiFields, routeTxnSigs: [FfiPrimitiveSignature], initialTxnSig: FfiPrimitiveSignature) async throws -> ExecuteDetails {\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Events with useAppKitEvents in TypeScript\nDESCRIPTION: Demonstrates how to import and use the `useAppKitEvents` hook from `@reown/appkit/react` to subscribe to modal and wallet events, allowing for tracking user interactions or triggering actions based on events.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/hooks.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAppKitEvents } from \"@reown/appkit/react\";\n\nconst events = useAppKitEvents();\n```\n\n----------------------------------------\n\nTITLE: Registering Device Token for Push Notifications in Swift\nDESCRIPTION: Enables wallet push notifications by registering the device token with WalletKit, communicating with Apple Push Notification Service. The method is asynchronous and requires the device token obtained from APNs.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/usage.mdx#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\ntry await WalletKit.instance.register(deviceToken: deviceToken)\n```\n\n----------------------------------------\n\nTITLE: Install WalletConnect Modal (Yarn)\nDESCRIPTION: Installs the WalletConnectModal library using Yarn, providing the UI components necessary for connecting wallets in Web and React Native Dapps.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @walletconnect/modal\n```\n\n----------------------------------------\n\nTITLE: Triggering Web3Modal Modal Using Hook in React (TSX)\nDESCRIPTION: This React snippet demonstrates how to use the 'useWeb3Modal' hook from the '@web3modal/wagmi/react' package to trigger the wallet connect modal. It is intended for integration in a React component, with the hook providing an 'open' function that displays the modal when a button is clicked. Key dependencies include React and '@web3modal/wagmi/react', and the code assumes that the component is rendered within an environment correctly set up with Web3Modal context. The input is a button press event, and the output is the display of the connection modal.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/appkitv2.mdx#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useWeb3Modal } from '@web3modal/wagmi/react'\n\nfunction HomePage() {\n  const { open } = useWeb3Modal()\n\n  return <button onClick={() => open()}>Connect</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Solana Blockchain and AppKit Functions for Sending Transactions in JavaScript\nDESCRIPTION: This snippet imports hooks and classes needed to construct and send transactions using Solana via AppKit in a React app. It includes the transaction and program constructs plus hooks for connection, account, and provider management. All listed modules must be installed and configured in your project.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/solana-send-transaction.mdx#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useAppKitConnection } from \"@reown/appkit-adapter-solana/react\";\nimport { PublicKey, Transaction, SystemProgram } from \"@solana/web3.js\";\nimport { useAppKitAccount, useAppKitProvider } from \"@reown/appkit/react\";\nimport type { Provider } from \"@reown/appkit-adapter-solana/react\";\n```\n\n----------------------------------------\n\nTITLE: Overriding RPC Transports in WagmiAdapter with Priority Handling (TypeScript)\nDESCRIPTION: Explains that when both 'customRpcUrls' and Wagmi's 'transports' are configured in the WagmiAdapter, the transports setting has precedence and overrides URLs defined in customRpcUrls. Demonstrates how a custom RPC URL for mainnet can be overridden by a transport configuration. Users must be aware of this behavior to avoid unexpected connectivity issues or conflicts between endpoint configurations.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#_snippet_30\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst wagmiAdapter = new WagmiAdapter({\n  //...\n  customRpcUrls: {\n    'eip155:1': [{ url: 'https://custom-rpc-1.com' }] // This will be overridden\n  },\n  transports: {\n    [mainnet.id]: http('https://transport-rpc-1.com') // This takes precedence\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Web Components in MDX/JSX\nDESCRIPTION: This snippet renders the imported Components within a React/MDX context using the <Components /> tag. It allows the inclusion of a predefined set of UI components into the page, promoting modularity and consistency across the interface.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/components.mdx#_snippet_1\n\nLANGUAGE: MDX\nCODE:\n```\n<Components />\n```\n\n----------------------------------------\n\nTITLE: Updating Component Imports for AppKit in Ethers - TypeScript\nDESCRIPTION: This code block instructs you to replace component imports like W3mAccountButton and Web3Modal from @web3modal/ethers-react-native with components such as AccountButton and AppKit from @reown/appkit-ethers-react-native. This allows your UI components to align with the new AppKit system and styles for managing wallet connectivity.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-react-native.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following code lines\nimport {\n  W3mAccountButton,\n  W3mButton,\n  W3mConnectButton,\n  W3mNetworkButton,\n  Web3Modal,\n} from \"@web3modal/ethers-react-native\";\n\n// Add the following code lines\nimport {\n  AccountButton,\n  AppKitButton,\n  ConnectButton,\n  NetworkButton,\n  AppKit,\n} from \"@reown/appkit-ethers-react-native\";\n```\n\n----------------------------------------\n\nTITLE: Managing Notifications in JavaScript\nDESCRIPTION: This code snippet facilitates notification management by utilizing the 'ManagingNotifications' component from its module. It provides controls for viewing, enabling, or disabling notifications as part of the user experience.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/notifications/frontend-integration/api.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ManagingNotifications />\n```\n\n----------------------------------------\n\nTITLE: Displaying a Send Transaction Button Conditionally in React JSX\nDESCRIPTION: This JSX code renders a 'Send Transaction' button only when the user is connected, ensuring transactions are only attempted from authenticated wallets. Clicking the button triggers the handleSendTx function, which opens the modal for wallet transaction review and confirmation.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/solana-send-transaction.mdx#_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nreturn (\n  isConnected && (\n    <div>\n      <button onClick={handleSendTx}>Send Transaction</button>\n    </div>\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Flutter WalletConnect Modal Optional Namespace Configuration\nDESCRIPTION: Shows optional parameters for namespace configuration within Flutter WalletConnect setup, allowing setting of required and optional namespaces dynamically at runtime using `setRequiredNamespaces` and `setOptionalNamespaces`, facilitating flexible request parameters for DApp connections.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/options.mdx#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nfinal Web3App web3App = await Web3App.createInstance(\n  projectId: 'YOUR_PROJECT_ID',\n  /* other params */\n);\n\n// Set required namespaces later\nweb3App.setRequiredNamespaces(\n  /* namespace object */\n);\n\n// Set optional namespaces later\nweb3App.setOptionalNamespaces(\n  /* namespace object */\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Account Addresses for Dynamic Wallets via getAccountAddresses\nDESCRIPTION: Example JSON-RPC request and response for the `getAccountAddresses` method targeting a dynamic wallet. The request specifies the account identifier. The response provides an array of address objects, including the primary address, addresses with UTXOs, and unused addresses, each with optional public key and derivation path.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/bitcoin-rpc.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n// Request\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"getAccountAddresses\",\n    \"params\": {\n        \"account\": \"bc1qcr8te4kr609gcawutmrza0j4xv80jy8z306fyu\"\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n// Result\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"result\": [\n        {\n            \"address\": \"bc1qcr8te4kr609gcawutmrza0j4xv80jy8z306fyu\",\n            \"publicKey\": \"0330d54fd0dd420a6e5f8d3624f5f3482cae350f79d5f0753bf5beef9c2d91af3c\",\n            \"path\": \"m/84'/0'/0'/0/0\"\n        },\n        {\n            \"address\": \"3KHhcgwPgYF9hE77zaKy2G36dpkcNtvQ33\",\n            \"publicKey\": \"03b90230ca20150142bc2849a3df4517073978f32466214a0ebc00cac52f996989\",\n            \"path\": \"m/49'/0'/0'/0/7\"\n        },\n        {\n            \"address\": \"bc1qp59yckz4ae5c4efgw2s5wfyvrz0ala7rgvuz8z\",\n            \"publicKey\": \"038ffea936b2df76bf31220ebd56a34b30c6b86f40d3bd92664e2f5f98488dddfa\",\n            \"path\": \"m/84'/0'/0'/0/2\"\n        },\n        {\n            \"address\": \"bc1qgl5vlg0zdl7yvprgxj9fevsc6q6x5dmcyk3cn3\",\n            \"publicKey\": \"03de7490bcca92a2fb57d782c3fd60548ce3a842cad6f3a8d4e76d1f2ff7fcdb89\",\n            \"path\": \"m/84'/0'/0'/0/3\"\n        },\n        {\n            \"address\": \"bc1qm97vqzgj934vnaq9s53ynkyf9dgr05rargr04n\",\n            \"publicKey\": \"03995137c8eb3b223c904259e9b571a8939a0ec99b0717684c3936407ca8538c1b\",\n            \"path\": \"m/84'/0'/0'/0/4\"\n        },\n        {\n            \"address\": \"bc1qv6vaedpeke2lxr3q0wek8dd7nzhut9w0eqkz9z\",\n            \"publicKey\": \"03d0d243b6a3176fa20fa95cd7fb0e8e0829b83fc2b52053633d088c1a4ba91edf\",\n            \"path\": \"m/84'/0'/0'/1/3\"\n        },\n        {\n            \"address\": \"bc1qetrkzfslk0d4kqjnu29fdh04tkav9vj3k36vuh\",\n            \"publicKey\": \"02a8dee7573bcc7d3c1e9b9e267dbf0cd717343c31d322c5b074a3a97090a0d952\",\n            \"path\": \"m/84'/0'/0'/1/4\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Web3Inbox Core and Widget via Bun (Bash)\nDESCRIPTION: Uses the Bun package manager to add @web3inbox/core and @web3inbox/widget-react packages to your project. The command should be executed within a Bun-initialized JavaScript or TypeScript project. No extra parameters required; updates Bun.lockb and node_modules. Requires Bun to be installed.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/embedded-widget/about.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbun a @web3inbox/core @web3inbox/widget-react\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Wallets to AppKit Configuration (Swift)\nDESCRIPTION: Configures the AppKit SDK to include wallets not present in the default WalletGuide list. Requires an array of Wallet objects with details like ID, name, image URL, etc. These custom wallets will be displayed alongside fetched ones.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/options.mdx#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nAppKit.configure(\n    ...\n    customWallets: [\n                .init(\n                    id: \"swift-sample\",\n                    name: \"Swift Sample Wallet\",\n                    homepage: \"https://reown.com/\",\n                    imageUrl: \"https://avatars.githubusercontent.com/u/179229932?s=200&v=4\",\n                    order: 1,\n                    mobileLink: \"walletapp://\",\n                    linkMode: \"https://appkit-lab.reown.com/example\"\n                )\n            ]\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Legacy SIWE Configuration Using SiweMessage Class\nDESCRIPTION: This legacy code example creates a SIWE message using the SiweMessage class from the siwe package, handling nonce management and message signing manually within a Next.js app, suitable if integrating with older systems or without @reown/appkit-siwe.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/siwe.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getCsrfToken, signIn, signOut, getSession } from \"next-auth/react\";\nimport { SiweMessage } from \"siwe\";\nimport type {\n  SIWEVerifyMessageArgs,\n  SIWECreateMessageArgs\n} from \"@reown/appkit-siwe\";\nimport { createSIWEConfig, formatMessage } from \"@reown/appkit-siwe\";\n\nexport const siweConfig = createSIWEConfig({\n  createMessage: ({ nonce, address, chainId }: SIWECreateMessageArgs) =>\n    new SiweMessage({\n      version: \"1\",\n      domain: window.location.host,\n      uri: window.location.origin,\n      address,\n      chainId,\n      nonce,\n      statement: \"Sign in With Ethereum.\",\n    }).prepareMessage(),\n  getNonce: async () => {\n    const nonce = await getCsrfToken();\n    if (!nonce) {\n      throw new Error(\"Failed to get nonce!\");\n    }\n    return nonce;\n  },\n  getSession,\n  verifyMessage: async ({ message, signature }: SIWEVerifyMessageArgs) => {\n    try {\n      const success = await signIn(\"credentials\", {\n        message,\n        redirect: false,\n        signature,\n        callbackUrl: \"/protected\",\n      });\n      return Boolean(success?.ok);\n    } catch (error) {\n      return false;\n    }\n  },\n  signOut: async () => {\n    try {\n      await signOut({\n        redirect: false,\n      });\n      return true;\n    } catch (error) {\n      return false;\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Additional Required Dependencies for AppKit in Expo\nDESCRIPTION: Installs auxiliary packages needed for full functionality, including shims, async storage, random values generation, SVG support, modal components, network info, and wallet connectivity features.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers5/about/installation-expo.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @ethersproject/shims@5.7.0 @react-native-async-storage/async-storage react-native-get-random-values react-native-svg react-native-modal @react-native-community/netinfo @walletconnect/react-native-compat expo-application\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Native CLI\nDESCRIPTION: Command to install the necessary cryptographic and utility packages for React Native CLI projects.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/notify/installation.mdx#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn add react-native-quick-crypto react-native-quick-base64 stream-browserify @craftzdog/react-native-buffer babel-plugin-module-resolver\n```\n\n----------------------------------------\n\nTITLE: Installing WalletConnect Solana Adapter Package\nDESCRIPTION: Shows commands for adding the `@walletconnect/solana-adapter` package to a project using npm, Yarn, Bun, or pnpm package managers. This package is necessary to integrate WalletConnect functionality with the Solana Wallet Adapter library.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/providers/solana-adapter.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @walletconnect/solana-adapter\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @walletconnect/solana-adapter\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @walletconnect/solana-adapter\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @walletconnect/solana-adapter\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages via Yarn\nDESCRIPTION: Command to install the Reown AppKit auth connector for Wagmi and the React Native WebView dependency using the Yarn package manager. These packages are essential prerequisites for the integration.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/wagmi/email.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @reown/appkit-auth-wagmi-react-native react-native-webview\n```\n\n----------------------------------------\n\nTITLE: Setting AppKit Theme Mode in TypeScript\nDESCRIPTION: Explains how to programmatically set the theme mode (e.g., 'dark' or 'light') for the AppKit modal after initialization using the `modal.setThemeMode()` method. Requires an initialized `modal` instance.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/actions.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst modal = createAppKit({ wagmiConfig, projectId });\n\nmodal.setThemeMode(\"dark\");\n```\n\n----------------------------------------\n\nTITLE: Extending Session Lifetime in Swift\nDESCRIPTION: Extends the lifetime of a session beyond the default 7-day period. This is useful for long-term relationships between wallets and dapps.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/usage.mdx#_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\ntry await WalletKit.instance.extend(topic: session.topic)\n```\n\n----------------------------------------\n\nTITLE: Extending Session Lifetime in JavaScript\nDESCRIPTION: Shows how to extend the lifetime of a WalletConnect session to prevent it from expiring, which triggers a session_update event.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/usage.mdx#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nawait walletKit.extendSession({ topic });\n```\n\n----------------------------------------\n\nTITLE: Handling Last Modal Event with useAppKitEvents (Wagmi) TypeScript\nDESCRIPTION: This snippet shows how to use the useAppKitEvents hook from `@reown/appkit-wagmi-react-native`. This hook returns the last tracked modal event. It also accepts an optional callback function that will be executed whenever a new event is triggered, allowing for reactive handling of modal events.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/hooks.mdx#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useAppKitEvents } from '@reown/appkit-wagmi-react-native'\n\nconst event = useAppKitEvents(event => {\n  // your code here\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit and Wagmi Adapter - React - bash\nDESCRIPTION: Installs the Reown AppKit core, Wagmi adapter, and React Query for React-based projects. Requires npm, yarn, bun, or pnpm. Replace all previous Web3Modal dependencies with the listed packages to ensure compatibility with the new AppKit architecture. Commands support the project setup but do not handle versioning conflicts.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit @reown/appkit-adapter-wagmi @tanstack/react-query\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit @reown/appkit-adapter-wagmi @tanstack/react-query\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun a @reown/appkit @reown/appkit-adapter-wagmi @tanstack/react-query\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit @reown/appkit-adapter-wagmi @tanstack/react-query\n```\n\n----------------------------------------\n\nTITLE: Registering WalletConnect Notify Identity as Wallet (JavaScript)\nDESCRIPTION: Shows the registration process for a Wallet application to register an account's identity key for syncing. Similar to Dapp registration, it requires preparing parameters and signing a message, but typically sets `allApps` to true to authorize the wallet for all domains.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst account = `eip155:1:0x63Be2c680685d2A9620c11b0068291261aa62d76`\nconst domain =  'app.mydomain.com', // pass the domain (i.e. the hostname) where your dapp is hosted.\nconst allApps =  true // The user will be prompted to authorize this wallet to send and receive messages on their behalf for ALL domains using their WalletConnect identity.\n\n// No need to register and sign message if already registered.\nif (notifyClient.isRegistered({ account, domain, allApps })) return;\n\nconst {registerParams, message}  = notifyClient.prepareRegistration({\n  account,\n  domain,\n  allApps\n});\n\nconst signature = await ethersWallet.signMessage(message);\n\nawait notifyClient.register({\n  registerParams,\n  signature,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Chains with wagmi in AppKit (JavaScript)\nDESCRIPTION: This snippet demonstrates the setup of mainnet, avalanche, and arbitrum chains for a dApp using wagmi. It relies on wagmi's chain configuration API and requires importing the necessary modules from wagmi. The configuration object specifies each network's details, enabling seamless multi-chain support within the application.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/web3modal/v2/_partials/customisation/customWagmiChains.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { configureChains } from 'wagmi'\n\nconst { chains, publicClient, webSocketPublicClient } = configureChains(\n  [\n    { id: 1, name: 'Ethereum Mainnet' },\n    { id: 43114, name: 'Avalanche Mainnet' },\n    { id: 42161, name: 'Arbitrum One' }\n  ],\n  // Additional chain parameters can be added here\n)\n\n// Further configuration or initialization code can follow\n```\n\n----------------------------------------\n\nTITLE: Watching for Account Changes with Web3Inbox Client in TypeScript\nDESCRIPTION: This snippet sets up a listener for account changes using client.watchAccount(), which invokes the provided callback each time the active CAIP-10 account updates in the client. The callback receives the current account identifier as its parameter and, in this example, logs it to the console. Useful for responding to account changes in real time within the application. Requires prior account setup and an available client instance.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/setting-account/javascript.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nclient.watchAccount(account => {\n  console.log({ account }) // eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Wallet Metadata in C#\nDESCRIPTION: This snippet creates a Metadata object describing the wallet, including its description, icon URLs, name, and website URL. This metadata is used during WalletKit client initialization to provide identifying details about the wallet application, which helps in user recognition and display.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/usage.mdx#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar metadata = new Metadata()\n{\n    Description = \"An example wallet to showcase WalletKit\",\n    Icons = new[] { \"https://walletconnect.com/meta/favicon.ico\" },\n    Name = $\"wallet-csharp-test\",\n    Url = \"https://walletconnect.com\",\n};\n```\n\n----------------------------------------\n\nTITLE: Send Notify Notification via Fetch API in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to send a notification using the Fetch API. It makes a POST request to the `/notify` endpoint, including the API Secret in the Authorization header and the notification details and target accounts in the JSON body.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/notifications/backend-integration.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst PROJECT_ID = \"<PROJECT_ID>\";\nconst NOTIFY_API_SECRET = \"<NOTIFY_API_SECRET>\";\nconst response = await fetch(\n  `https://notify.walletconnect.com/${PROJECT_ID}/notify`,\n  {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${NOTIFY_API_SECRET}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      notification: {\n        type: \"a1e53b95-18e5-4af8-9f03-9308ec87b687\",\n        title: \"The price of Ethereum has risen\",\n        body: \"The price of Ethereum has gone up 10%\",\n        url: \"https://app.example.com\",\n      },\n      accounts: [\"eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029\"],\n    }),\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using AppKit Web Component to Open AppKit in HTML\nDESCRIPTION: This snippet shows a minimal HTML file that integrates the <appkit-button> web component, which can be used to open AppKit functionality. Web components are global HTML elements and do not require explicit importing within the document. The snippet includes a script tag referencing a JavaScript module (main.js) for additional app logic or component initialization if needed.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/solana/about/triggermodal.mdx#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>HTML Example</title>\n  </head>\n  <body>\n    <appkit-button />\n    <script type=\"module\" src=\"main.js\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Reown AppKit Read Contract Function Signature (Dart)\nDESCRIPTION: Provides the function signature for `requestReadContract`, which is used to call read-only methods on smart contracts deployed on EVM-compatible chains. It requires the session topic, chain ID, a `DeployedContract` object, the function name, optional sender address, and function parameters. The function returns a future that resolves to a list of dynamic values representing the contract function's output.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/actions.mdx#_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\nFuture<List<dynamic>> requestReadContract({\n  required String? topic,\n  required String chainId,\n  required DeployedContract deployedContract,\n  required String functionName,\n  EthereumAddress? sender,\n  List parameters = const [],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Android App Links - XML\nDESCRIPTION: This XML snippet shows the necessary configuration within the Android Manifest file (`AndroidManifest.xml`) to set up App Links. It declares an intent filter for `ACTION_VIEW` with `autoVerify=\"true\"`, specifying the scheme and host your dapp will use for universal links, which is required for Link Mode functionality.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/one-click-auth.mdx#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<intent-filter android:autoVerify=\"true\">\n    <action android:name=\"android.intent.action.VIEW\" />\n    <category android:name=\"android.intent.category.DEFAULT\" />\n    <category android:name=\"android.intent.category.BROWSABLE\" />\n\n    <data android:scheme=\"https\" android:host=\"your_host\" />\n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Setting Preset Theme Radiuses in ReownAppKitModalThemeData in Dart\nDESCRIPTION: Demonstrates how to customize modal border radiuses by assigning a preset object to the radiuses parameter of ReownAppKitModalThemeData. Provides examples for square corners using ReownAppKitModalRadiuses.square. The snippet also redefines custom colors. Requires ReownAppKitModalRadiuses and color presets from the package.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/theming.mdx#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal _themeData = ReownAppKitModalThemeData(\n  lightColors: ReownAppKitModalColors.lightMode.copyWith(\n    accent100: Colors.red,\n    background125: Colors.yellow.shade300,\n  ),\n  darkColors: ReownAppKitModalColors.darkMode.copyWith(\n    accent100: Colors.green,\n    background125: Colors.brown,\n  ),\n  // No corner radius, modal will look square, use ReownAppKitModalRadiuses.circular to make everything circular\n  radiuses: ReownAppKitModalRadiuses.square,\n);\n```\n\n----------------------------------------\n\nTITLE: Adding reown-swift Pod Dependency Using Cocoapods in Ruby\nDESCRIPTION: This Ruby snippet shows how to add the 'reown-swift' WalletConnect SDK to a Podfile as a dependency. It includes a simple pod declaration for the latest source as well as an example specifying a Git repository URL and a tag version (1.0.0). The snippet is used for installing the SDK via Cocoapods, a dependency manager for iOS projects. Users must run 'pod install' after updating the Podfile to include these entries. This facilitates version-managed integration of the SDK in Xcode projects.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/installation.mdx#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\npod 'reown-swift'\n```\n\nLANGUAGE: ruby\nCODE:\n```\npod 'reown-swift', :git => 'https://github.com/reown-com/reown-swift.git', :tag => '1.0.0'\n```\n\n----------------------------------------\n\nTITLE: Implementing SIWXConfig Interface in TypeScript\nDESCRIPTION: The core SIWXConfig interface definition that must be implemented to create a custom SIWX feature. This interface includes methods for message creation, session management, and retrieval.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/siwx/siwx-custom.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SIWXConfig {\n  createMessage: (input: SIWXMessage.Input) => Promise<SIWXMessage>\n  addSession: (session: SIWXSession) => Promise<void>\n  revokeSession: (chainId: CaipNetworkId, address: string) => Promise<void>\n  setSessions: (sessions: SIWXSession[]) => Promise<void>\n  getSessions: (chainId: CaipNetworkId, address: string) => Promise<SIWXSession[]>\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SignClient (Kotlin/Android)\nDESCRIPTION: Initializes the CoreClient and SignClient for an Android wallet. Requires a Project ID from cloud.reown.com, connection type settings, and application metadata (name, description, URL, icons, redirect URI). Initialization is typically done in the Application class.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_25\n\nLANGUAGE: Kotlin\nCODE:\n```\nval projectId = \"\" // Get Project ID at https://cloud.reown.com/\nval connectionType = ConnectionType.AUTOMATIC or ConnectionType.MANUAL\nval appMetaData = Core.Model.AppMetaData(\n    name = \"Wallet Name\",\n    description = \"Wallet Description\",\n    url = \"Wallet URL\",\n    icons = /*list of icon url strings*/,\n    redirect = \"kotlin-wallet-wc:/request\" // Custom Redirect URI\n)\n\nCoreClient.initialize(projectId = projectId, connectionType = connectionType, application = this, metaData = appMetaData)\n\nval init = Sign.Params.Init(core = CoreClient)\n\nSignClient.initialize(init) { error ->\n    // Error will be thrown if there's an issue during initialization\n}\n```\n\n----------------------------------------\n\nTITLE: Updating package.json Dependency for WalletKit\nDESCRIPTION: Demonstrates how to replace the `@walletconnect/web3wallet` dependency with `@reown/walletkit` in the `package.json` file. This is the first step in migrating to the new WalletKit library for React Native.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/upgrade/from-web3wallet-react-native.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n/* highlight-delete-start */\n\"@walletconnect/web3wallet\": \"^x.y.z\"\n/* highlight-delete-end */\n/* highlight-add-start */\n\"@reown/walletkit\": \"^1.0.0\"\n/* highlight-add-end */\n```\n\n----------------------------------------\n\nTITLE: Requesting Node Addresses with hedera_getNodeAddresses\nDESCRIPTION: Request for getting Hedera node addresses known to the controller. This method allows dApps to determine which nodes the controller can submit transactions to.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/hedera-rpc.mdx#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"hedera_getNodeAddresses\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Notification Types with JavaScript\nDESCRIPTION: This snippet imports the 'Types' component for selecting or displaying different notification categories. It relies on the 'types/javascript.mdx' module to categorize notification preferences and types.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/notifications/frontend-integration/api.mdx#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Types />\n```\n\n----------------------------------------\n\nTITLE: Triggering Reown AppKit Modal Using Default Button Component in React Native (TypeScript)\nDESCRIPTION: This snippet demonstrates how to include the pre-built AppKitButton component from '@reown/appkit-ethers-react-native' to trigger the AppKit modal. It shows a simple functional component that renders the button within a React Native view. No additional parameters are needed, and this approach leverages the integrated modal opening logic encapsulated within the button.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers/about/implementation.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AppKitButton } from \"@reown/appkit-ethers-react-native\";\n\nexport default function ConnectView() {\n  return (\n    <>\n      ...rest of your view\n      <AppKitButton />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Reown AppKit Modal in React using TypeScript\nDESCRIPTION: Shows how to open the Reown AppKit modal in a React functional component using TypeScript. It demonstrates replacing the previous Web3Modal hook with Reown AppKit's useAppKit hook, using the open function from the hook to trigger the modal on button click. Requires React and @reown/appkit/react package. This snippet focuses on implementing modal trigger via a React button.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following import\n- import { useWeb3Modal } from '@web3modal/wagmi/react'\n\n// Add the following import\n+ import { useAppKit } from '@reown/appkit/react'\n\nfunction HomePage() {\n  const { open } = useAppKit()\n\n  return <button onClick={open}>Connect</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribe to Notify Messages with WalletConnect Metadata and Account on Swift\nDESCRIPTION: Defines an asynchronous throwing function subscribe(metadata:account:onSign:) enabling the app to create a Notify Subscription that links a Dapp’s metadata and a wallet account, requiring a signing callback for user authorization. Parameters include the Dapp's publicly discoverable metadata, the wallet account to associate the subscription with, and a signing callback returning the required signature. This function facilitates push notifications for Dapp-to-wallet communication.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\npublic func subscribe(metadata: AppMetadata, account: Account, onSign: @escaping SigningCallback) async throws {\n```\n\n----------------------------------------\n\nTITLE: Replacing Import Statement - Dart\nDESCRIPTION: Demonstrates replacing the old import statement for `walletconnect_flutter_v2` with the new import statement for `reown_walletkit` in your Dart code. This updates the references to the new library.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/upgrade/from-web3wallet-flutter.mdx#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\n/* highlight-delete-start */\nimport 'package:walletconnect_flutter_v2/walletconnect_flutter_v2.dart';\n/* highlight-delete-end */\n/* highlight-add-start */\nimport 'package:reown_walletkit/reown_walletkit.dart';\n/* highlight-add-end */\n```\n\n----------------------------------------\n\nTITLE: XML Dependency Replacement in Project File for WalletKit\nDESCRIPTION: This code snippet shows how to update your .NET project file to replace the old WalletConnect.Web3Wallet package reference with the new Reown.WalletKit package. It highlights the removal of the previous dependency and addition of the new one to ensure proper package management during migration.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/upgrade/from-web3wallet-unity.mdx#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n    <!-- ... -->\n\n  <ItemGroup>\n    /* highlight-delete-start */\n    <PackageReference Include=\"WalletConnect.Web3Wallet\" Version=\"2.4.2\" />\n    /* highlight-delete-end */\n    /* highlight-add-start */\n    <PackageReference Include=\"Reown.WalletKit\" Version=\"1.0.0\" />\n    /* highlight-add-end */\n  </ItemGroup>\n\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Including specific wallet IDs to override defaults in createAppKit in TypeScript\nDESCRIPTION: Shows how to specify an explicit list of wallet IDs via includeWalletIds, which restricts the wallets shown in the 'All Wallets' view and recommended wallets to only those included. The wallet IDs are string hashes representing known wallets from the Wallets List. This overrides default recommendations.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateAppKit({\n  //...\n  includeWalletIds: [\n    \"1ae92b26df02f0abca6304df07debccd18262fdf5fe82daa81593582dac9a369\",\n    \"4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0\",\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Firebase Messaging Token with Web3Inbox SDK - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to retrieve a push notification token from Firebase Cloud Messaging using the getToken function and register it with the Web3Inbox SDK's registerWithPushServer method. Dependencies include the firebase/messaging SDK module and the Web3Inbox client. The getToken call requires a valid VAPID key, which should be supplied for FCM web applications. The firebaseToken is asynchronous and must be awaited if used in an async context. The registerWithPushServer function accepts the token and returns a client ID, useful for debugging and logging. Inputs: firebaseMessaging instance and the VAPID key. Outputs: The registration client ID. Limitations: Does not detail error handling or platform selection ('fcm' vs. 'apns').\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/registering-push/javascript.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getToken } from 'firebase/messaging\n\n// initialize Firebase's messaging object via Firebase's `getMessaging` function\n\nconst firebaseToken = getToken(firebaseMessaging, {\n  vapidKey: \"YOUR_FIREBASE_VAPID_KEY\"\n})\n\n// The Client ID that registered with this token, can be used for debugging purposes or logs\nconst clientId = client.registerWithPushServer(firebaseToken)\n\n```\n\n----------------------------------------\n\nTITLE: Controlling Modal UI with useAppKit (Ethers v5) TypeScript\nDESCRIPTION: This snippet demonstrates how to use the useAppKit hook from the `@reown/appkit-ethers5-react-native` package to obtain functions for opening and closing the modal UI. It shows the import statement and how to destructure the `open` and `close` functions from the hook's return value. These functions are used to programmatically control the visibility of the AppKit modal.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/hooks.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useAppKit } from '@reown/appkit-ethers5-react-native'\n\nexport default function Component() {\n  const { open, close } = useAppKit()\n\nopen()\n\n//...\n}\n```\n\n----------------------------------------\n\nTITLE: Unregistering an Account from Notify API in JavaScript\nDESCRIPTION: This snippet demonstrates how to unregister an account, removing all its subscriptions and messages from the client’s storage. This is used when a user logs out or no longer wishes to receive notifications.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/notify/usage.mdx#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst account = `eip155:1:0x63Be2c680685d2A9620c11b0068291261aa62d76`;\n\nawait notifyClient.unregister({\n  account,\n});\n```\n\n----------------------------------------\n\nTITLE: Post-migration Testing Recommendations\nDESCRIPTION: This step emphasizes thoroughly testing the application after code and configuration updates to ensure all integrated functionalities work as expected with the new AppKit library.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-android.mdx#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Updating Class References from Web3Wallet to WalletKit in Android\nDESCRIPTION: Replaces all instances of Web3Wallet class with WalletKit in method calls. Updates initialization and session approval methods to use the new class name.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/upgrade/from-web3wallet-android.mdx#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n/* highlight-delete-start */\n- Web3Wallet.initialize(Wallet.Params.Init(core = CoreClient), onSuccess, onError)\n- Web3Wallet.approveSession(approveProposal, onSuccess, onError)\n/* highlight-delete-end */\n/* highlight-add-start */\n+ WalletKit.initialize(Wallet.Params.Init(core = CoreClient), onSuccess, onError)\n+ WalletKit.approveSession(approveProposal, onSuccess, onError)\n/* highlight-add-end */\n```\n\n----------------------------------------\n\nTITLE: Retrieving a User Session for SIWE Authentication in JavaScript\nDESCRIPTION: Defines an asynchronous method to fetch the current user session associated with SIWE authentication, returning the session object containing the wallet address and chainId if a session exists, or null if not. This typically interacts with backend session storage.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/siwe/parameters.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetSession `() => Promise<SIWESession | null>`\n\nThe backend session should store the associated address and chainId and return it via the `getSession` method.\n```\n\n----------------------------------------\n\nTITLE: Unregistering WalletConnect Notify Identity (JavaScript)\nDESCRIPTION: Provides the code snippet to unregister an account's previously registered identity key from the Notify system. This action requires specifying the `account` address.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst account = `eip155:1:0x63Be2c680685d2A9620c11b0068291261aa62d76`;\n\nawait notifyClient.unregister({\n  account,\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Raw Transaction eth_sendRawTransaction JSON\nDESCRIPTION: Demonstrates a JSON-RPC request for the `eth_sendRawTransaction` method. This method broadcasts a signed transaction to the Ethereum network. The request includes the standard JSON-RPC fields and takes the raw, signed transaction data as its parameter. The expected result is the transaction hash (DATA, 32 Bytes) if the transaction is successfully submitted and accepted by the network.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/ethereum-rpc.mdx#_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n// Request\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"eth_sendRawTransaction\",\n  \"params\":[\n    \"0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f07244567\"\n  ],\n}\n\n// Result\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": \"0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331\"\n}\n```\n\n----------------------------------------\n\nTITLE: Populating Authentication Payload for SIWE with ReCaps\nDESCRIPTION: How to populate an authentication payload with supported chains and methods, format an authentication message, and prepare for user consent.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { populateAuthPayload } from \"@walletconnect/utils\";\n\n// EVM chains that your wallet supports\nconst supportedChains = [\"eip155:1\", \"eip155:2\", 'eip155:137'];\n// EVM methods that your wallet supports\nconst supportedMethods = [\"personal_sign\", \"eth_sendTransaction\", \"eth_signTypedData\"];\n// Populate the authentication payload with the supported chains and methods\nconst authPayload = populateAuthPayload({\n  authPayload: payload.params.authPayload,\n  chains: supportedChains,\n  methods: supportedMethods,\n});\n// Prepare the user's address in CAIP10(https://github.com/ChainAgnostic/CAIPs/blob/main/CAIPs/caip-10.md) format\nconst iss = `eip155:1:0x0Df6d2a56F90e8592B4FfEd587dB3D5F5ED9d6ef`;\n// Now you can use the authPayload to format the authentication message\nconst message = walletKit.formatAuthMessage({\n  request: authPayload,\n  iss\n});\n\n// Present the authentication message to the user\n...\n```\n\n----------------------------------------\n\nTITLE: Example APNs Payload for Encrypted WalletKit Notifications\nDESCRIPTION: Illustrates the structure of an encrypted push notification payload received via APNs. It includes standard APNs fields like `aps` (with `content-available` and `mutable-content` for background processing) and WalletKit-specific fields: `message` (the encrypted payload), `topic` (the subscription topic), and `tag` (identifying the relay message type).\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/notifications/push.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aps\": {\n    \"content-available\": 1,\n    \"mutable-content\": 1\n  },\n  \"message\": \"String\", // Encrypted payload\n  \"topic\": \"String\", // Subscription topic\n  \"tag\": \"String\" // Tag of the associated relay message\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Wallet Detection on iOS via Info.plist Configuration (XML)\nDESCRIPTION: Provides the XML snippet needed to enable WalletConnectModal wallet detection on iOS devices by adding the LSApplicationQueriesSchemes key with an array of wallet scheme strings in the Info.plist file. This allows the SDK to query for installed wallets, though only those explicitly listed will be detected.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/about.mdx#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<key>LSApplicationQueriesSchemes</key>\\n<array>\\n  <string>metamask</string>\\n  <string>trust</string>\\n  <string>safe</string>\\n  <string>rainbow</string>\\n  <string>uniswap</string>\\n  <!-- Add other wallet schemes names here -->\\n</array>\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Custom URL Scheme for Deep Linking (XML/Plist)\nDESCRIPTION: Defines how to register a custom URL scheme (e.g., `examplewallet://`) in the iOS `Info.plist` file using the `CFBundleURLTypes` key. This configuration is essential for enabling Dapps to open the wallet application via deep links for connection or signing requests.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/mobile-linking.mdx#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n<key>CFBundleURLTypes</key>\n<array>\n\t<dict>\n\t\t<key>CFBundleTypeRole</key>\n\t\t<string>Editor</string>\n\t\t<key>CFBundleURLName</key>\n\t\t<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>\n\t\t<key>CFBundleURLSchemes</key>\n\t\t<array>\n\t\t\t<string>examplewallet</string> <!-- your custom scheme goes here -->\n\t\t</array>\n\t</dict>\n</array>\n```\n\n----------------------------------------\n\nTITLE: Handling Authentication Requests with walletKit Event Listener (TypeScript)\nDESCRIPTION: This snippet demonstrates subscribing to the 'session_authenticate' event to process incoming authentication requests. The process involves preparing the payload, formatting auth messages, and handling user approval or rejection, thereby enabling secure wallet authentication workflows.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/one-click-auth-siws.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nwalletKit.on(\"session_authenticate\", async (payload) => {\n  // Process the authentication request here.\n  // Steps include:\n  // 1. Populate the authentication payload with the supported chains and methods\n  // 2. Format the authentication message using the payload and the user's account\n  // 3. Present the authentication message to the user\n  // 4. Sign the authentication message(s) to create a verifiable authentication object(s)\n  // 5. Approve the authentication request with the authentication object(s)\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing and Adding Coinbase Connector in React Native App\nDESCRIPTION: This snippet demonstrates how to import, initialize, and add the Coinbase connector to the wagmi configuration in a React Native application. The coinbaseConnector requires a redirect URL which can be either a universal link or a custom app scheme, with universal links being preferred to avoid app verification warnings.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/wagmi/about/coinbase.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { coinbaseConnector } from '@reown/appkit-coinbase-wagmi-react-native'\n\nconst coinbase = coinbaseConnector({\n  redirect: 'https://your-app-universal-link.com' || 'YOUR_APP_SCHEME://'\n})\n\nconst wagmiConfig = defaultWagmiConfig({\n  chains,\n  projectId,\n  metadata,\n  extraConnectors: [coinbase]\n})\n```\n\n----------------------------------------\n\nTITLE: Triggering Modals with useAppKit Composable in JavaScript\nDESCRIPTION: This snippet shows how to trigger modals programmatically using the `useAppKit` composable. The example includes buttons that invoke the `open()` method on the modal object, optionally passing configuration such as 'view: Networks'. This approach allows dynamic control over UI components through JavaScript functions.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/ethers/about/triggermodal.mdx#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<template>\n  <button @click=\"modal.open()\">Open Connect Modal</button>\n  <button @click=\"modal.open({ view: 'Networks' })\">Open Network Modal</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Example of Calling Reown AppKit Write Contract Function (Dart) - Simple Write\nDESCRIPTION: Provides another example of using `requestWriteContract` for a straightforward contract write function (`sayHello`) that takes a single string parameter. It illustrates setting up the transaction with the sender's address and passing the simple string parameter to the contract function.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/actions.mdx#_snippet_12\n\nLANGUAGE: Dart\nCODE:\n```\n// Write a message data\nFuture<void> writeMessage() async {\n  final chainId = _appKitModal.selectedChain!.chainId;\n  final namespace = ReownAppKitModalNetworks.getNamespaceForChainId(chainId);\n\n  final result = await _appKitModal.requestWriteContract(\n    topic: _appKitModal.session!.topic,\n    chainId: chainId,\n    deployedContract: deployedContract,\n    functionName: 'sayHello',\n    transaction: Transaction(\n      from: EthereumAddress.fromHex(_appKitModal.session!.getAddress(namespace)), // sender address\n    ),\n    parameters: ['Hello world!'],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AuthProvider in defaultConfig (TypeScript)\nDESCRIPTION: Demonstrates how to import `AuthProvider` from `@reown/appkit-auth-ethers-react-native`, instantiate it with a `projectId` and `metadata`, and then integrate it into the application's configuration using `defaultConfig` by adding it to the `extraConnectors` array. This connects the Reown authentication provider to the AppKit setup.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers/email.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Add the following code lines\nimport { AuthProvider } from \"@reown/appkit-auth-ethers-react-native\";\n\nconst authProvider = new AuthProvider({ projectId, metadata });\n\nconst config = defaultConfig({\n  metadata,\n  // Add the following code line\n  extraConnectors: [authProvider],\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Signature Map from Hedera\nDESCRIPTION: Response structure from a JSON-RPC call that returns a signature map, typically used for transaction signing in Hedera.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/hedera-rpc.mdx#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"signatureMap\": \"CAAQABjMrxoYABIGCAAQABgHGIDIr...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Notification History for a Subscription in JavaScript\nDESCRIPTION: This snippet demonstrates how to fetch historical notifications for a specific account, enabling users to view past alerts related to their subscriptions. It calls the `getNotificationHistory()` method with the account as a parameter.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/notify/usage.mdx#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst notifications = notifyClient.getNotificationHistory(account);\n```\n\n----------------------------------------\n\nTITLE: Creating a crypto polyfill for Expo SDK 48\nDESCRIPTION: JavaScript code for implementing a crypto polyfill that uses expo-crypto's getRandomValues function. This polyfill ensures the global crypto object is available when needed by other libraries.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/expo/additional-expo48.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// src/crypto-polyfill.js\n\n// Apply only with Expo SDK 48\nimport { getRandomValues as expoCryptoGetRandomValues } from 'expo-crypto'\n\nclass Crypto {\n  getRandomValues = expoCryptoGetRandomValues\n}\n\n// eslint-disable-next-line no-undef\nconst webCrypto = typeof crypto !== 'undefined' ? crypto : new Crypto()\n\n;(() => {\n  if (typeof crypto === 'undefined') {\n    Object.defineProperty(window, 'crypto', {\n      configurable: true,\n      enumerable: true,\n      get: () => webCrypto\n    })\n  }\n})()\n```\n\n----------------------------------------\n\nTITLE: Embedding the AppKit Button Web Component in HTML\nDESCRIPTION: This HTML snippet shows the basic structure for using the `<appkit-button>` web component. The component is placed directly in the `<body>`, and a JavaScript file (`main.js`) is referenced via a module script tag, likely containing logic for AppKit initialization or interaction. Web components like `<appkit-button>` don't require explicit HTML imports.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/bitcoin/about/triggermodal.mdx#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>HTML AppKit Example</title>\n  </head>\n  <body>\n    <appkit-button />\n    <script type=\"module\" src=\"main.js\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Updating AppKit Config Import in Ethers - TypeScript\nDESCRIPTION: Updates the import from createWeb3Modal in @web3modal/ethers-react-native to createAppKit in @reown/appkit-ethers-react-native when updating Ethers config for AppKit. This change is critical for shifting to the new AppKit configuration setup in Ethers-based React Native projects, and does not alter the way the configuration is constructed except for the import source.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-react-native.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following code lines\nimport { createWeb3Modal } from \"@web3modal/ethers-react-native\";\n\n// Add the following code lines\nimport { createAppKit } from \"@reown/appkit-ethers-react-native\";\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with Vue-Specific Dependencies via Multiple Package Managers\nDESCRIPTION: Provides commands for upgrading Vue projects from Web3Modal v4 to Reown AppKit, removing old dependencies and installing new core, wagmi adapter, and Vue query packages. Supports npm, Yarn, Bun, and pnpm. This ensures Vue ecosystem compatibility including @tanstack/vue-query and @wagmi/vue along with Reown AppKit components.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit @reown/appkit-adapter-wagmi @tanstack/vue-query @wagmi/vue\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit @reown/appkit-adapter-wagmi @tanstack/vue-query @wagmi/vue\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun a @reown/appkit @reown/appkit-adapter-wagmi @tanstack/vue-query @wagmi/vue\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit @reown/appkit-adapter-wagmi @tanstack/vue-query @wagmi/vue\n```\n\n----------------------------------------\n\nTITLE: Configuring Paymaster Service in sendCalls (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to integrate a paymaster service into an EIP-5792 transaction call using the `sendCalls` function. It shows how to set the `paymasterService` capability, providing the paymaster URL and an optional context object. This configuration directs the wallet or smart account to interact with the specified paymaster for potential transaction sponsorship.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/sponsored-transactions.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nsendCalls({\n  calls: ...callsToSend,\n  capabilities: {\n    paymasterService: {\n      url: paymasterServiceUrl,\n      context?: {\n        // Any additional context\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Session Proposal Verify Context (JavaScript)\nDESCRIPTION: This snippet demonstrates how a wallet application can subscribe to session proposal events and access the `verifyContext` object. By checking the `validation` property and the `isScam` flag within `verifyContext`, the wallet can determine the domain's risk level (scam, invalid, valid, unknown) and inform the user accordingly.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/verify.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n_walletKit!.onSessionProposal.subscribe((SessionProposalEvent? args) {\n  if (args != null) {\n    final scamApp = args.verifyContext?.validation.scam;\n    final invalidApp = args.verifyContext?.validation.invalid;\n    final validApp = args.verifyContext?.validation.valid;\n    final unknown = args.verifyContext?.validation.unknown;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing WalletConnectModal via NPM and CDNs for Web (JavaScript)\nDESCRIPTION: Shows how to install the WalletConnectModal package using various package managers (npm, yarn, bun, pnpm) on the web platform. It also demonstrates how to include the modal via a CDN link using unpkg, allowing usage without direct package installation. These snippets require a JavaScript environment supporting ES modules when using the CDN approach.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/about.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @walletconnect/modal\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @walletconnect/modal\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun a @walletconnect/modal\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @walletconnect/modal\n```\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\\n  import { WalletConnectModal } from \"https://unpkg.com/@walletconnect/modal\";\\n</script>\n```\n\n----------------------------------------\n\nTITLE: Preparing Chain Abstraction Transactions with WalletKit - Swift\nDESCRIPTION: Defines the `prepare` method used to check whether chain abstraction is required for a transaction. This asynchronous function takes the target chain ID, sender address, transaction call data, and optionally local currency, returning a compatibility response that indicates if preparation is needed and provides transaction details. The function returns either a detailed response with route and funding info or a not-required response with the original transaction. Dependencies include WalletKit SDK objects and types like `CallCompat` and `Currency`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/chain-abstraction.mdx#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nFuture<PrepareDetailedResponseCompat> prepare({\n  required String chainId,\n  required String from,\n  required CallCompat call,\n  Currency? localCurrency,\n});\n```\n\n----------------------------------------\n\nTITLE: Updating WalletConnect Session Namespaces in Kotlin\nDESCRIPTION: Updates the namespaces of an active WalletConnect session, potentially adding new methods, events, accounts, or chains. Requires the session topic and a map of updated namespaces (following CAIP-10 and CAIP-2). The `SignClient.update` function is called with these parameters and includes an error callback.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_33\n\nLANGUAGE: kotlin\nCODE:\n```\nval sessionTopic: String = /*Topic of Session*/\nval namespace: String = /*Namespace identifier, see for reference: https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-2.md#syntax*/\nval accounts: List<String> = /*List of accounts on authorized chains*/\nval methods: List<String> = /*List of methods that wallet approves*/\nval events: List<String> = /*List of events that wallet approves*/\nval namespaces: Map<String, Sign.Model.Namespaces.Session> = mapOf(namespace, Sign.Model.Namespaces.Session(accounts, methods, events))\nval updateParams = Sign.Params.Update(sessionTopic, namespaces)\n\nSignClient.update(updateParams) { error -> /*callback for error while sending session update*/ }\n```\n\n----------------------------------------\n\nTITLE: Setting Terms of Service URL in TypeScript\nDESCRIPTION: Configures the URL to the terms of service page for the Reown modal. When specified, this URL will cause the modal to display a special legal information footer. If not provided, the feature defaults to undefined.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/web3modal/v2/_partials/options/termsOfServiceUrl.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntermsOfServiceUrl: 'https://example.com/terms-and-conditions'\n```\n\n----------------------------------------\n\nTITLE: Enabling Swaps Feature - TypeScript\nDESCRIPTION: Shows how to explicitly enable the swap feature within the `features` option by setting the `swaps` property to `true`. This feature is enabled by default.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/options.mdx#_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\ncreateAppKit({\n  //...\n  features: {\n    swaps: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing CocoaPods for iOS Native Module Integration\nDESCRIPTION: Runs the CocoaPods installation command to link native modules and dependencies for iOS platform compatibility within the React Native project. It ensures native code components are correctly configured after adding new packages.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers/about/installation.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx pod-install\n```\n\n----------------------------------------\n\nTITLE: Subscribing to WalletConnect Relay Client Events in JavaScript\nDESCRIPTION: Illustrates subscribing to events directly from the WalletConnect relay client, accessed via `_appKitModal.appKit!.core.relayClient`. This allows monitoring the underlying connection status (connect, error, disconnect) of the relay mechanism used by WalletConnect.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/events.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n_appKitModal.appKit!.core.relayClient.onRelayClientConnect.subscribe((EventArgs? event) {});\n\n_appKitModal.appKit!.core.relayClient.onRelayClientError.subscribe((EventArgs? event) {});\n\n_appKitModal.appKit!.core.relayClient.onRelayClientDisconnect.subscribe((EventArgs? event) {});\n```\n\n----------------------------------------\n\nTITLE: Installing AppKit SDK Package Using Bash\nDESCRIPTION: This snippet shows the various package manager commands to install the @reown/appkit-experimental package, which is required to use Smart Sessions functionality in a dApp. The commands cover npm, Yarn, Bun, and pnpm, providing flexibility depending on the developer's environment.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/smart-sessions.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit-experimental\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit-experimental\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun a @reown/appkit-experimental\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit-experimental\n```\n\n----------------------------------------\n\nTITLE: Adding Coinbase Wallet Scheme to iOS Info.plist (XML)\nDESCRIPTION: Includes the `cbwallet` URL scheme within the `LSApplicationQueriesSchemes` array in the `Info.plist` file. This specific step is necessary to enable interaction with the Coinbase Wallet app on iOS, as it uses its own communication mechanism.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/installation.mdx#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<key>LSApplicationQueriesSchemes</key>\n<array>\n  <string>cbwallet</string>\n  <!-- Any other scheme previously added -->\n</array>\n```\n\n----------------------------------------\n\nTITLE: Fetching Notification Types in Kotlin\nDESCRIPTION: Prepares parameters based on app metadata and domain, then calls NotifyClient.getNotificationTypes to retrieve supported notification types, returned as a map keyed by notification type IDs.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_35\n\nLANGUAGE: Kotlin\nCODE:\n```\nval appMetadata: Core.Model.AppMetaData = /*fetch app metadata*/\nval appDomain: String = /*App URI host*/ \nval notificationTypesParams = Notify.Params.NotificationTypes(appDomain)\nNotifyClient.getNotificationTypes(notificationTypesParams)\n```\n\n----------------------------------------\n\nTITLE: Signing Transaction eth_signTransaction JSON\nDESCRIPTION: Demonstrates a JSON-RPC request for the `eth_signTransaction` method. This method signs a transaction object offline, returning the raw signed transaction data rather than sending it. The request follows the standard JSON-RPC format with 'id', 'jsonrpc', 'method', and 'params' (the transaction object). The expected result is the signed transaction data as a DATA string.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/ethereum-rpc.mdx#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n// Request\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"eth_signTransaction\",\n  \"params\":[{see above}],\n}\n\n// Result\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": \"0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331\"\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Reown AppKit Modal (React/TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the `useAppKit` hook within a React functional component to access the `open` function, which can be used to programmatically trigger the display of the Reown AppKit connection modal, typically bound to a button click event.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers5-web.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following import\n- import { useWeb3Modal } from '@web3modal/ethers5/react'\n\n// Add the following import\n+ import { useAppKit } from '@reown/appkit/react'\nfunction HomePage() {\n  const { open } = useAppKit()\n  return <button onClick={open}>Connect</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Rejecting a WalletConnect Session Proposal in Kotlin\nDESCRIPTION: Rejects a proposed WalletConnect session. Requires the proposer's public key, a rejection reason string, and a rejection code (referencing CAIP-25). The `SignClient.rejectSession` function is called with these parameters and includes an error callback.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nval proposerPublicKey: String = /*Proposer publicKey from SessionProposal object*/\nval rejectionReason: String = /*The reason for rejecting the Session Proposal*/\nval rejectionCode: String = /*The code for rejecting the Session Proposal*/\nFor reference use CAIP-25: https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-25.md\n\nval rejectParams: Sign.Params.Reject = Reject(proposerPublicKey, rejectionReason, rejectionCode)\nSignClient.rejectSession(rejectParams) { error -> /*callback for error while rejecting a session*/ }\n```\n\n----------------------------------------\n\nTITLE: Implementing Send Transaction Handler with AppKit\nDESCRIPTION: Defines a function `handleSendTx` that calls `walletProvider.sendTransfer` to initiate a Bitcoin transaction. It requires the `recipient` address and the `amount` to send, specified in satoshis. The function is asynchronous as it awaits the wallet's response. The transaction signature is logged on completion.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/bitcoin-send-transaction.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// function to send a TX\nconst handleSendTx = () => {\n    const signature = await walletProvider.sendTransfer({\n        recipient: recipientAddress,\n        amount: \"1000\" // amount in satoshis\n      })\n\n    // print the Transaction Signature in console\n    console.log(signature);\n}\n```\n\n----------------------------------------\n\nTITLE: Add SignClient Event Listeners (JavaScript)\nDESCRIPTION: Adds listeners to the WalletConnect SignClient for various session lifecycle events. This includes handling session updates, deletion, and events like chain changes or account changes, allowing the Dapp to react to state changes.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsignClient.on(\"session_event\", ({ event }) => {\n  // Handle session events, such as \"chainChanged\", \"accountsChanged\", etc.\n});\n\nsignClient.on(\"session_update\", ({ topic, params }) => {\n  const { namespaces } = params;\n  const _session = signClient.session.get(topic);\n  // Overwrite the `namespaces` of the existing session with the incoming one.\n  const updatedSession = { ..._session, namespaces };\n  // Integrate the updated session state into your dapp state.\n  onSessionUpdate(updatedSession);\n});\n\nsignClient.on(\"session_delete\", () => {\n  // Session was deleted -> reset the dapp state, clean up from user session, etc.\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing WalletConnectModal React Native\nDESCRIPTION: Shows how to import necessary packages and initialize the WalletConnect Modal component in a React Native application using TSX. Requires a project ID and provider metadata including app name, description, URL, icons, and redirect links.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"@walletconnect/react-native-compat\";\nimport { WalletConnectModal } from \"@walletconnect/modal-react-native\";\n\nconst projectId = \"YOUR_PROJECT_ID\";\n\nconst providerMetadata = {\n  name: \"YOUR_PROJECT_NAME\",\n  description: \"YOUR_PROJECT_DESCRIPTION\",\n  url: \"https://your-project-website.com/\",\n  icons: [\"https://your-project-logo.com/\"],\n  redirect: {\n    native: \"YOUR_APP_SCHEME://\",\n    universal: \"YOUR_APP_UNIVERSAL_LINK.com\",\n  },\n};\n\nfunction App() {\n  return (\n    <>\n      <WalletConnectModal\n        projectId={projectId}\n        providerMetadata={providerMetadata}\n      />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding WalletConnect Unity packages via Git URL in Unity Package Manager\nDESCRIPTION: This process involves adding WalletConnect Unity packages through git URLs in Unity Package Manager, requiring manual input of specific package URLs for core, UI, and modal components, in a specified sequence to ensure correct dependencies are met.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/about.mdx#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Parsing Session Request Parameters (Swift)\nDESCRIPTION: Demonstrates how to parse parameters from a `sessionRequest` based on the request method (`personal_sign`, `eth_signTypedData`, `eth_sendTransaction`). It uses `request.params.get()` to decode the parameters into the expected type (e.g., `[String]`, `[EthereumTransaction]`). Note: Force unwrapping (`try!`) is used here for brevity but proper error handling should be implemented.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_16\n\nLANGUAGE: Swift\nCODE:\n```\nif sessionRequest.method == \"personal_sign\" {\n    let params = try! sessionRequest.params.get([String].self)\n} else if method == \"eth_signTypedData\" {\n    let params = try! sessionRequest.params.get([String].self)\n} else if method == \"eth_sendTransaction\" {\n    let params = try! sessionRequest.params.get([EthereumTransaction].self)\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Authentication Requests via WalletKit.WalletDelegate (Kotlin)\nDESCRIPTION: This snippet demonstrates how to set up the WalletKit.WalletDelegate's onSessionAuthenticate callback to process incoming authentication requests from a dApp. It triggers when a session authentication request is received, allowing the application to approve or reject the request based on custom logic.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/one-click-auth.mdx#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\noverride val onSessionAuthenticate: ((Wallet.Model.SessionAuthenticate, Wallet.Model.VerifyContext) -> Unit)\n  get() = { sessionAuthenticate, verifyContext ->\n      // Triggered when wallet receives the session authenticate sent by a Dapp\n      // Process the authentication request here\n      // This involves displaying UI to the user\n}\n```\n\n----------------------------------------\n\nTITLE: Create Button Event Handler for Sponsored Call - Wagmi/React - TypeScript\nDESCRIPTION: Defines a memoized callback function triggered by a button click. This handler prepares the transaction request, ensuring the paymaster service URL is available, and invokes the `sendCalls` function with the transaction details and the paymaster capabilities object to request sponsorship.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/sponsoring-first-transaction.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst onSendCalls = useCallback(() => {\n  setLoading(true)\n  if (!paymasterServiceUrl) {\n    throw Error('paymasterServiceUrl not set')\n  }\n  sendCalls({\n    calls: [TEST_TX],\n    capabilities: {\n      paymasterService: {\n        url: paymasterServiceUrl,\n        context\n      }\n    } \n  })\n}, [sendCalls, paymasterServiceUrl])\n```\n\n----------------------------------------\n\nTITLE: Customizing Modal Theme with useAppKitTheme (React)\nDESCRIPTION: This hook allows controlling the visual appearance of the AppKit modal, including setting the theme mode (dark/light) and customizing theme variables. Use this to match the modal's look and feel with your application's branding. Required dependency: `@reown/appkit/react`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/hooks.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAppKitTheme } from \"@reown/appkit/react\";\nconst { themeMode, themeVariables, setThemeMode, setThemeVariables } =\n  useAppKitTheme();\n\nsetThemeMode(\"dark\");\n\nsetThemeVariables({\n  \"--w3m-color-mix\": \"#00BB7F\",\n  \"--w3m-color-mix-strength\": 40,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Wallet Detection Schemes (XML)\nDESCRIPTION: Adds specific wallet URL schemes (e.g., `metamask`, `trust`, `safe`, `rainbow`) to the `Info.plist` file under the `LSApplicationQueriesSchemes` key. This configuration allows the Flutter application to check if these corresponding wallet apps are installed on the iOS device.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/installation.mdx#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>LSApplicationQueriesSchemes</key>\n<array>\n  <string>metamask</string>\n  <string>trust</string>\n  <string>safe</string>\n  <string>rainbow</string>\n  <!-- Add other wallet schemes names here -->\n</array>\n```\n\n----------------------------------------\n\nTITLE: Configuring Wagmi with Reown Auth Connector in TypeScript\nDESCRIPTION: Illustrates how to import the `authConnector` from `@reown/appkit-auth-wagmi-react-native`, initialize it with `projectId` and `metadata`, and then add it to the `extraConnectors` array when calling `defaultWagmiConfig`. This integrates the Reown authentication flow into the Wagmi configuration.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/wagmi/email.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Add the following code lines\nimport { authConnector } from \"@reown/appkit-auth-wagmi-react-native\";\n\nconst auth = authConnector({ projectId, metadata });\n\nconst wagmiConfig = defaultWagmiConfig({\n  chains,\n  projectId,\n  metadata,\n  // Add the following code line\n  extraConnectors: [auth],\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Authentication Features in Reown AppKit (TypeScript)\nDESCRIPTION: Demonstrates how to enable and configure specific authentication features (email, social logins, email wallet visibility) within the `createAppKit` function. The `features` object allows customization of the available login methods provided by the Reown AppKit.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/wagmi/email.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ncreateAppKit({\n  projectId,\n  wagmiConfig,\n  // Add the following code line\n  features: {\n    email: true, // default to true\n    socials: [\"x\", \"discord\", \"apple\"], // default value\n    emailShowWallets: true, // default to true\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Wallet SDK with Deep Link Redirect in Kotlin\nDESCRIPTION: Configures the Wallet Kotlin SDK with application metadata, including a unique redirect URL, to handle session proposals and sign requests via deep links. It sets up the SDK to listen for incoming deep link responses from the wallet.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/mobile-linking.mdx#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nval redirect = \"examplewallet://request\" //should be unique for your wallet\n\nval appMetaData = Core.Model.AppMetaData(\n    name = \"Wallet Name\",\n    description = \"Wallet Description\",\n    url = \"Wallet Url\",\n    icons = listOfIconUrlStrings,\n    redirect = redirect\n)\n\nCoreClient.initialize(projectId = projectId, connectionType = connectionType, application = application, metaData = appMetaData)\n\nval init = Wallet.Params.Init(coreClient = CoreClient)\nWalletKit.initialize(init)\n```\n\n----------------------------------------\n\nTITLE: Initializing WalletKit Client with Core and Metadata in C#\nDESCRIPTION: This snippet demonstrates how to create and configure a Core instance with ProjectId and Name, define wallet metadata including description, icons, and URL, then initialize the WalletKitClient asynchronously. It lays the groundwork for establishing a wallet connection, ensuring the client is properly set up with required parameters.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/usage.mdx#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar options = new CoreOptions()\n{\n    ProjectId = \"...\",\n    Name = \"my-app\",\n}\n\nvar core = new CoreClient(options);\n```\n\n----------------------------------------\n\nTITLE: Generating and handling message signing with Reown AppKit and Ethers\nDESCRIPTION: Defines an async function to create a provider and signer, then prompts the user to sign a custom message using their wallet. The signature is logged for further verification or use within the application.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/ethers-send-transaction.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// function to sign a msg\nconst handleSignMsg = async () => {\n  // create the provider and signer\n  const provider = new BrowserProvider(walletProvider, chainId);\n  const signer = new JsonRpcSigner(provider, address);\n  // sign the message\n  const signature = await signer?.signMessage(\"Hello Reown AppKit!\");\n  // log the signature\n  console.log(signature);\n};\n```\n\n----------------------------------------\n\nTITLE: Importing AppKit Connection and Solana Web3 Components in JavaScript\nDESCRIPTION: This snippet imports critical AppKit React hooks and Solana web3.js types required for wallet connectivity and balance operations. Dependencies include @reown/appkit-adapter-solana/react for blockchain connection and @solana/web3.js for PublicKey and lamports constants. These imports must be present before using related wallet functions.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/solana-send-transaction.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useAppKitConnection } from \"@reown/appkit-adapter-solana/react\";\nimport { useAppKitAccount } from \"@reown/appkit/react\";\nimport { PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n```\n\n----------------------------------------\n\nTITLE: Installing One-Click Auth and SIWE Packages using Various Package Managers\nDESCRIPTION: Provides shell commands to install the @reown/appkit-siwe and siwe packages required for implementing One-Click Authentication with SIWE in AppKit. It includes installation commands for npm, Yarn, Bun, and pnpm package managers. Using these packages enables support for Ethereum-based authentication and signature handling as per EIP-4361 and related standards.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/siwe.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit-siwe siwe\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit-siwe siwe\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun a @reown/appkit-siwe siwe\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit-siwe siwe\n```\n\n----------------------------------------\n\nTITLE: Rejecting Authentication Requests in TypeScript\nDESCRIPTION: Code showing how to reject an authentication request using the rejectSession method with a specific error reason from WalletConnect utilities.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getSdkError } from \"@walletconnect/utils\";\n\nawait walletKit.rejectSessionAuthenticate({\n  id: payload.id,\n  reason: getSdkError(\"USER_REJECTED\"), // or choose a different reason if applicable\n});\n```\n\n----------------------------------------\n\nTITLE: Marking All Notifications as Read via API using JavaScript Fetch\nDESCRIPTION: Illustrates how to mark all existing notifications as read for a project using the JavaScript `fetch` API. This involves making a POST request to the `/v1/<project-id>/mark-all-as-read` endpoint, authenticated using the `PROJECT_ID` and `NOTIFY_API_SECRET`. This is intended as a one-time operation to reset unread counts.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/notifications/backend-integration.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst PROJECT_ID = \"<PROJECT_ID>\";\nconst NOTIFY_API_SECRET = \"<NOTIFY_API_SECRET>\";\nconst response = await fetch(\n  `https://notify.walletconnect.com/v1/${PROJECT_ID}/mark-all-as-read`,\n  {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${NOTIFY_API_SECRET}`,\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Listening for pairing events using Node.js EventEmitter\nDESCRIPTION: Demonstrates how to listen for 'pairing_delete' events emitted by the WalletConnect SDK using Node.js' EventEmitter interface. When such an event occurs, the callback is invoked with event parameters such as 'id' and 'topic' for cleanup or further processing.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nsdkClient.core.pairing.events.on(\"pairing_delete\", ({ id, topic }) => {\n  // clean up after the pairing for `topic` was deleted.\n});\n```\n\n----------------------------------------\n\nTITLE: React Component for Displaying Notification Types\nDESCRIPTION: This snippet demonstrates the Types React component, which displays available notification types or categories. It depends on the shared API definitions and helps users select or view notification preferences.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/frontend-integration/api.mdx#_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n<Types />\n```\n\n----------------------------------------\n\nTITLE: Initializing WalletConnectUnity Singleton Asynchronously in C#\nDESCRIPTION: This snippet shows how to initialize the WalletConnectUnity singleton instance asynchronously. It is essential for setting up the WalletConnect environment before establishing wallet connections. The code ensures proper initialization and readiness for subsequent operations, and it demonstrates handling both singleton and manual instances. Prerequisites include having the WalletConnectUnity SDK imported into the Unity project.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\n// Initialize singleton\nawait WalletConnect.Instance.InitializeAsync();\n```\n\n----------------------------------------\n\nTITLE: Accessing Account State with useAppKitAccount (React)\nDESCRIPTION: This essential hook provides access to the user's wallet connection state and information, such as address, connection status, and embedded wallet details. Use it whenever you need to check if a user is connected or display their account information. Required dependency: `@reown/appkit/react`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/hooks.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAppKitAccount } from \"@reown/appkit/react\";\n\nconst { address, isConnected, caipAddress, status, embeddedWalletInfo } =\n  useAppKitAccount();\n```\n\n----------------------------------------\n\nTITLE: Updating Error Handling Pattern - TSX\nDESCRIPTION: Illustrates the change in handling SDK errors, specifically showing how `Errors.getSdkError` is now followed by a method call like `toSignError()` in the new `reown_walletkit` pattern. Although shown with TSX highlighting, this indicates a functional change in how errors are processed.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/upgrade/from-web3wallet-flutter.mdx#_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\n/* highlight-delete-start */\nErrors.getSdkError(Errors.USER_REJECTED);\n/* highlight-delete-end */\n/* highlight-add-start */\nErrors.getSdkError(Errors.USER_REJECTED).toSignError();\n/* highlight-add-end */\n```\n\n----------------------------------------\n\nTITLE: Installing iOS Native Dependencies with CocoaPods - Shell\nDESCRIPTION: This command runs CocoaPods to install the native iOS dependencies required by the React Native packages added in the previous steps. It should be executed within the project directory after adding JavaScript dependencies, ensuring that all native modules are properly linked for the iOS platform. Requires Node.js, npx, and CocoaPods.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/wagmi/about/installation.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx pod-install\n```\n\n----------------------------------------\n\nTITLE: Paginating Web3Inbox Notifications - TypeScript\nDESCRIPTION: Shows how to fetch notifications for the current account in pages. Configurable parameters include the number of notifications per page and whether to enable infinite scrolling. The callback function receives the fetched notifications, which accumulate if infinite scrolling is enabled.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/usage/example/javascript.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Get notification history\nconst notificationsPerPage = 5\nconst isInfiniteScroll = true\n\nclient.pageNotifications(\n  notificationsPerPage,\n  isInfiniteScroll\n)(notifications => {\n  // add logic to display notifications here.\n  // if isInfiniteScroll is true, notifications will contain all notifications fetched so far, else it will only fetch current page\n  // See API docs for more information on `pageNotifications()` and how to use `notifications`\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Wallet Provider with Modal Adapter in JavaScript\nDESCRIPTION: Invokes modal.getWalletProvider() to fetch the currently active connection provider for the modal adapter, typically returning an object that represents the connection (such as an EVM or Solana provider). Requires a properly initialized modal instance with an established connection. Input: None. Output: Provider object or null.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers5-web.mdx#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst provider = modal.getWalletProvider();\nconsole.log(provider); // provider object or null\n```\n\n----------------------------------------\n\nTITLE: Using useAppKitTheme Composable for Theme Control in Vue\nDESCRIPTION: Demonstrates importing and using the `useAppKitTheme` composable from `@reown/appkit/vue`. This composable returns an object (`themeAction`) or allows destructuring methods (`setThemeMode`, `setThemeVariables`) to get the current theme settings or update the modal's theme mode ('light' or 'dark') and CSS variables.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/composables.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAppKitTheme } from \"@reown/appkit/vue\";\nconst themeAction = useAppKitTheme();\n// or\n// const { setThemeMode, setThemeVariables } = useAppKitTheme()\n```\n\n----------------------------------------\n\nTITLE: Initializing WalletConnect SignClient in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize the `@walletconnect/sign-client` in a JavaScript application. It imports the `SignClient` class and calls its static `init` method, passing the required `projectId` obtained from the WalletConnect cloud dashboard (cloud.reown.com). This step is necessary to connect the client application to the WalletConnect Relay service.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/cloud/relay.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport SignClient from '@walletconnect/sign-client'\nconst signClient = await SignClient.init({\n  projectId: 'c4f79cc821944d9680842e34466bfb'\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Session Proposal Expiry Callback - WalletConnect Kotlin (Android)\nDESCRIPTION: This Kotlin snippet illustrates implementing the 'onProposalExpired' callback within a 'WalletKit.WalletDelegate'. This method is invoked when a session proposal expires, providing the expired proposal model. Applications should use this callback to trigger UI updates, such as removing the proposal display.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nval walletDelegate = object : WalletKit.WalletDelegate {\n  override fun onProposalExpired(proposal: Wallet.Model.ExpiredProposal) {\n          // Here this event is triggered when a proposal expires - update your UI\n  }\n  // ...other callbacks\n}\nWalletKit.setWalletDelegate(walletDelegate)\n```\n\n----------------------------------------\n\nTITLE: Importing Core and WalletKit from WalletConnect – JavaScript\nDESCRIPTION: This snippet demonstrates how to import the main SDK dependencies needed for WalletConnect integration: Core and WalletKit. Prerequisites include installing the @walletconnect/core and @walletconnect/wallekit NPM packages. These imports provide the fundamental APIs for initiation and management of the WalletConnect protocol processes.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/polkadot/wallet-integration-guide.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Core } from \"@walletconnect/core\";\nimport { WalletKit } from \"@walletconnect/wallekit\";\n```\n\n----------------------------------------\n\nTITLE: Accessing Wallet Provider and Signing Messages with useAppKitProvider in TSX\nDESCRIPTION: This example uses the useAppKitProvider hook to access the walletProvider object, which is then used alongside ethers.js v5 to sign messages. Dependencies include @reown/appkit-ethers5-react-native and ethers. It demonstrates how to wrap the walletProvider in an ethers Web3Provider, retrieve a signer, and sign a plaintext message. The snippet assumes an initialized wallet provider and is suitable for any feature needing message authentication.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers5/hooks.mdx#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport { ethers } from \"ethers\";\nimport { useAppKitProvider } from \"@reown/appkit-ethers5-react-native\";\n\nfunction Components() {\n  const { walletProvider } = useAppKitProvider();\n\n  async function onSignMessage() {\n    const provider = new ethers.providers.Web3Provider(walletProvider);\n    const signer = provider.getSigner();\n    const signature = await signer?.signMessage(\"Hello AppKit Ethers\");\n    console.log(signature);\n  }\n\n  return <button onClick={() => onSignMessage()}>Sign Message</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript for Marking All Notifications as Read\nDESCRIPTION: This code shows how to mark all existing notifications as read for a specific project, which resets unread statuses and can improve user experience. It sends a POST request with authorization headers to the relevant endpoint. Dependencies include fetch API; input is project ID and API secret, output is the server response confirming the action.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/notifications/backend-integration.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst PROJECT_ID = \"<PROJECT_ID>\";\nconst NOTIFY_API_SECRET = \"<NOTIFY_API_SECRET>\";\nconst response = await fetch(\n  `https://notify.walletconnect.com/v1/${PROJECT_ID}/mark-all-as-read`,\n  {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${NOTIFY_API_SECRET}`,\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Providing Parameters for Starknet Invoke Transaction JSON-RPC\nDESCRIPTION: This JSON object illustrates the required parameters structure for the `starknet_requestAddInvokeTransaction` RPC call. It specifies the `accountAddress` and the `executionRequest` object, detailing the array of contract calls (`calls`) with their addresses, entrypoints, and optional calldata, as well as an optional array of contract ABIs (`abis`) for displaying calls.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/starknet-rpc.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n      \"accountAddress\": \"0x003a8278a26f32452f156260d81b93efb0eca126b44df7b005a5b27e2bbc4a64\",\n      \"executionRequest\" : {\n            \"calls\" : [\n                {\n                  \"contractAddress\": \"0x003a8278a26f32452f156260d81b93efb0eca126b44df7b005a5b27e2bbc4a64\",\n                  \"entrypoint\": \"0x555278a26f32452f156260d81b93efb0eca126b44df7b005a5b27e2bbc4a64\",\n                  \"calldata\": [\"0x003\", \"0xa82705a5b27e2bbc4a64\"]\n                },\n                {\n                    \"contractAddress\": \"0x00111178a26f32452f156260d81b93efb0eca126b44df7b005a5b27e2bbc4a64\",\n                    \"entrypoint\": \"0x0022228a26f32452f156260d81b93efb0eca126b44df7b005a5b27e2bbc4a64\"\n                }\n            ],\n            \"abis\" : [{\n                \"inputs\": [{ \"name\": \"amount\", \"type\": \"felt\" }],\n                \"name\": \"set_balance\",\n                \"outputs\": [],\n                \"type\": \"function\"\n            }]\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding WalletConnect SDK via Swift Package Manager in iOS\nDESCRIPTION: This snippet instructs developers on integrating the WalletConnect SDK into an iOS project using Swift Package Manager. It guides through opening Xcode, adding the package URL, and selecting the WalletConnect package. It ensures proper setup for secure wallet connectivity within iOS applications.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/overview.mdx#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nOpen XCode\nGo to File -> Add Packages\nPaste the repo GitHub URL: https://github.com/reown-com/reown-swift\nTap Add Package\nSelect WalletConnect check mark\n```\n\n----------------------------------------\n\nTITLE: Android Show Installed Wallets Label via Manifest Configuration\nDESCRIPTION: Provides manifest configuration snippets required to display 'INSTALLED' labels under wallet icons in Android WalletConnect integration, by declaring query packages. This is essential for showing installed wallet statuses within Android apps that handle wallet intents.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/options.mdx#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <queries>\n        <package android:name=\"...\"/>\n    </queries>\n\n    <application>\n        ...\n    </application>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Updating Wallet Session Namespaces in C#\nDESCRIPTION: Shows how to update a wallet session by adding or removing namespaces for a given topic using the walletClient.UpdateSession call. The snippet also demonstrates awaiting the acknowledgement of the update request, ensuring session information changes are confirmed. Requires an existing session topic and namespace data.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/usage.mdx#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nvar newNamespaces = new Namespaces(...);\nvar request = await walletClient.UpdateSession(sessionTopic, newNamespaces);\nawait request.Acknowledged();\n```\n\n----------------------------------------\n\nTITLE: Requesting hedera_executeTransaction via JSON-RPC - JSON\nDESCRIPTION: This snippet demonstrates a JSON-RPC request to the hedera_executeTransaction method. The method relays an already-signed base64-encoded transactionList to Hedera for execution, returning submission details or errors in a standardized structure.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/hedera-rpc.mdx#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"hedera_executeTransaction\",\n  \"params\": {\n    \"transactionList\": \"Co8BKowBCocBChoKDAjchKWmBhDW...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating WalletConnect SDK with CocoaPods in iOS\nDESCRIPTION: This guide details updating CocoaPods repos, initializing a Podfile, and adding the WalletConnect SDK pod. It includes an alternative Git URL if manual repository specification is needed, ensuring flexibility in dependency management for iOS projects.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/overview.mdx#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\npod repo update\npod init # if needed\n\n# Add to Podfile:\npod 'WalletConnectSwiftV2'\n\n# Install pods:\npod install\n\n# Alternative specifying exact repo version\npod 'WalletConnectSwiftV2', :git => 'https://github.com/reown-com/reown-swift.git', :tag => '1.0.5'\n```\n\n----------------------------------------\n\nTITLE: Installing Legacy AppKit SIWE Package with Yarn\nDESCRIPTION: Command for installing the legacy SIWE dependencies including the AppKit SIWE package and SIWE library using Yarn package manager.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/siwe.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit-siwe siwe\n```\n\n----------------------------------------\n\nTITLE: Configure Gradle Repositories for WalletConnect Notify Android SDK Integration\nDESCRIPTION: Sets up Gradle repositories in root/build.gradle.kts to include Maven Central and the JitPack repository to resolve WalletConnect dependencies. This is a prerequisite for retrieving the Notify and core SDK modules. Maven URLs must be configured correctly to fetch the required packages.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_23\n\nLANGUAGE: gradle\nCODE:\n```\nallprojects {\n repositories {\n    mavenCentral()\n    maven { url \"https://jitpack.io\" }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing and Receiving Result for Starknet Sign Typed Data JSON-RPC\nDESCRIPTION: These JSON structures illustrate a complete JSON-RPC request for the `starknet_signTypedData` method, including the account address and typed data parameters. They also show the expected successful JSON-RPC response, where the `result` contains the generated signature as an array of Felt values.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/starknet-rpc.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"starknet_signTypedData\",\n  \"params\": [\"0x003a8278a26f32452f156260d81b93efb0eca126b44df7b005a5b27e2bbc4a64\", {see above}]\n}\n\n\n// Result\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": { \"signature\" : [\"0x3a8278a26f32452f156260d81b93efb0eca126b44df7b005a5b27e2bbc4a64\", \"0x072e509b6502e2bbc4a649052eb6c299d53a04e16605b915621c\", \"0x07897a1b93efb0eca126b44df4646\", \"0x072e509b6502e2bbc4a649052eb6c299d53a04e16605b915621c\"] }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications with cURL\nDESCRIPTION: Example of sending a notification using cURL, showing how to pass the authorization header, content type, and JSON payload with notification details and target accounts.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/notifications/backend-integration.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST 'https://notify.walletconnect.com/<PROJECT_ID>/notify' \\\n  --header 'Authorization: Bearer <NOTIFY_API_SECRET>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"notification\": {\n      \"type\": \"a1e53b95-18e5-4af8-9f03-9308ec87b687\",\n      \"title\": \"The price of Ethereum has risen\",\n      \"body\": \"The price of Ethereum has gone up 10%\",\n      \"url\": \"https://app.example.com\"\n    },\n    \"accounts\": [\n      \"eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029\"\n    ]\n  }'\n```\n\n----------------------------------------\n\nTITLE: Sending message request in .NET SDK after pairing\nDESCRIPTION: Sends a message request over the established pairing channel using the pairing topic and request data, handling responses asynchronously.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\nlong id = await core.MessageHandler.SendRequest<MyRequest, MyResponse>(pairingTopic, data);\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with Wagmi Adapter Using Bash\nDESCRIPTION: Provides the command-line instructions for installing the Reown AppKit with the Wagmi blockchain adapter in Vue.js projects using various package managers such as npm, Yarn, Bun, and pnpm. This snippet facilitates setting up the necessary dependencies for interacting with Ethereum-based networks via Wagmi in a Vue environment.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/installation.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit @reown/appkit-adapter-wagmi @tanstack/vue-query @wagmi/vue viem\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit @reown/appkit-adapter-wagmi @tanstack/vue-query @wagmi/vue viem\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @reown/appkit @reown/appkit-adapter-wagmi @tanstack/vue-query @wagmi/vue viem\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit @reown/appkit-adapter-wagmi @tanstack/vue-query @wagmi/vue viem\n```\n\n----------------------------------------\n\nTITLE: Installing @reown/appkit-siwx via npm (Bash)\nDESCRIPTION: Runs the npm command to install the @reown/appkit-siwx package, which provides SIWX authentication utilities for Dapps. Assumes that Node.js and npm are pre-installed in the environment. No additional parameters are required, and the package will be added to your project's dependencies.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/siwx/siwx-default.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit-siwx\n```\n\n----------------------------------------\n\nTITLE: Defining SendTransferParams Type for BitcoinConnector in TypeScript\nDESCRIPTION: Defines the parameters required to send a Bitcoin transfer. It includes the amount to be transferred (in satoshis) as a string, and the recipient’s Bitcoin address. This structure ensures the sendTransfer method receives necessary details to execute a transfer correctly.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/bitcoin-provider.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type SendTransferParams = {\n  /**\n   * The amount to be sent in satoshis\n   */\n  amount: string\n  /**\n   * The address to send the transfer to\n   */\n  recipient: string\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Initializing a WalletConnectUnity Instance Manually in C#\nDESCRIPTION: This code demonstrates how to create a new WalletConnectUnity instance manually and initialize it asynchronously. It provides an alternative to singleton initialization, suitable for scenarios requiring multiple or isolated wallet connections. The key steps include instantiating the class and calling the initialization function, handling potential asynchronous completion.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_43\n\nLANGUAGE: C#\nCODE:\n```\nvar walletConnectUnity = new WalletConnect();\nawait walletConnectUnity.InitializeAsync();\n```\n\n----------------------------------------\n\nTITLE: Defining ConnectParams Interface for Universal Provider (TypeScript)\nDESCRIPTION: Defines the `ConnectParams` TypeScript interface used for the `connect` method in WalletConnect's Universal Provider. It outlines the optional parameters like `requiredNamespaces`, `optionalNamespaces`, `sessionProperties`, `pairingTopic`, and `relays` used when initiating a connection request from a dapp.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/polkadot/namespaces-guide.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ConnectParams {\n  requiredNamespaces?: ProposalTypes.RequiredNamespaces;\n  optionalNamespaces?: ProposalTypes.OptionalNamespaces;\n  sessionProperties?: ProposalTypes.SessionProperties;\n  pairingTopic?: string;\n  relays?: RelayerTypes.ProtocolOptions[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Session Params iOS\nDESCRIPTION: This Swift snippet illustrates how to define default session parameters including required methods, events, and blockchains that the wallet should support when connecting via WalletConnectModal.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet methods: Set<String> = [\"eth_sendTransaction\", \"personal_sign\", \"eth_signTypedData\"]\nlet events: Set<String> = [\"chainChanged\", \"accountsChanged\"]\nlet blockchains: Set<Blockchain> = [Blockchain(\"eip155:1\")!]\nlet namespaces: [String: ProposalNamespace] = [\n    \"eip155\": ProposalNamespace(\n        chains: blockchains,\n        methods: methods,\n        events: events\n    )\n]\n\nlet defaultSessionParams =  SessionParams(\n                                requiredNamespaces: namespaces,\n                                optionalNamespaces: nil,\n                                sessionProperties: nil\n                            )\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto Sign-Out on Wallet Disconnect in SIWE JavaScript Flows\nDESCRIPTION: A boolean configuration option defaulting to true, which determines whether the user should be automatically signed out of their session when their wallet disconnects. This setting enhances security by ensuring session termination aligns with wallet availability.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/siwe/parameters.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nsignOutOnDisconnect `boolean`\n\n- defaults to `true`\n\nWhether or not to sign out when the user disconnects their wallet (Optional).\n```\n\n----------------------------------------\n\nTITLE: Checking Web3Inbox Client Status - React - TypeScript\nDESCRIPTION: This snippet shows how to check the ready status of the Web3Inbox client using the `useWeb3InboxClient` hook. It is recommended to use this hook to ensure the client is fully loaded and ready before utilizing other Web3Inbox functionalities. The `isLoading` property indicates the client's readiness.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/migration/react.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useWeb3InboxClient } from '@web3inbox/react'\n\nconst { isLoading: w3iClientIsLoading } = useWeb3InboxClient()\n```\n\n----------------------------------------\n\nTITLE: Hashing Messages for EIP-1271 using ethers.js in JavaScript\nDESCRIPTION: Demonstrates how to compute an EIP-191 compliant message hash using the ethers.js library. This hash is the required input (`_hash`) for the `isValidSignature` function defined in the EIP-1271 standard for verifying signatures from smart contract wallets. Requires the `ethers` library.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/smart-contract-wallet-usage.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { utils } from \"ethers\";\n\nconst hash = utils.hashMessage(message);\n```\n\n----------------------------------------\n\nTITLE: Installing Solana Web3.js Library via pnpm Bash Command\nDESCRIPTION: Here, the pnpm package manager is used to add the @solana/web3.js dependency to a project. The library is essential for Solana connectivity, wallet actions, and on-chain transactions in JavaScript applications. Should be executed before using Solana-related hooks or APIs.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/solana-send-transaction.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @solana/web3.js\n```\n\n----------------------------------------\n\nTITLE: Responding to Session Request WalletKit Kotlin\nDESCRIPTION: This snippet shows how a wallet responds to a session request from a dapp (e.g., signing a transaction, sending a method call). The `respondSessionRequest` method is used, including parameters for success or error responses. Callbacks handle the outcome of sending the response.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/best-practices.mdx#_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nWalletKit.respondSessionRequest(Wallet.Params.SessionRequestResponse,\n    onSuccess = {\n        //Session request response was sent successfully - update your UI\n    },\n    onError = { error ->\n        //Error while sending session response - update your UI\n    })\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Verification Component in React JavaScript\nDESCRIPTION: This snippet imports a Verify component from an external MDX snippet file located at '/snippets/cloud/verify.mdx' and renders it within a React component context. It depends on the proper configuration of MDX imports and React environment to work correctly. The snippet's purpose is to integrate verification functionality, which may include user authentication or validation processes, into the current UI component tree.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/cloud/verify.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Verify from \"/snippets/cloud/verify.mdx\";\n\n<Verify />\n```\n\n----------------------------------------\n\nTITLE: Support for only Solana blockchain\nDESCRIPTION: This code snippet removes EVM networks and instantiates ReownAppKitModal supporting only Solana, enabling specific social features and configurations.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/custom-chains.mdx#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Remove EVM support to support only Solana\nReownAppKitModalNetworks.removeSupportedNetworks('eip155');\n// Instantiate container supporting only Solana\nconst _appKitModal = ReownAppKitModal(\n  context: context,\n  projectId: '{YOUR_PROJECT_ID}',\n  metadata: {...},\n  featuresConfig: {...},\n);\n\n```\n\n----------------------------------------\n\nTITLE: Handling Socket Connection Status - WalletConnect Swift (iOS)\nDESCRIPTION: This Swift snippet demonstrates how to monitor the socket connection status to the Relay server using the 'socketConnectionStatusPublisher'. It subscribes to this Combine publisher to react to connection status changes ('connected', 'disconnected') and update the UI or application state accordingly.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#_snippet_26\n\nLANGUAGE: swift\nCODE:\n```\nWalletKit.instance.socketConnectionStatusPublisher\n  .receive(on: DispatchQueue.main)\n  .sink { status in\n  switch status {\n  case .connected:\n    // ...\n  case .disconnected:\n    // ...\n  }\n}.store(in: &publishers)\n```\n\n----------------------------------------\n\nTITLE: Defining Theme Mode Type in TypeScript\nDESCRIPTION: TypeScript type definition for the `themeMode` configuration option. It accepts either 'dark' or 'light' as string literals. This setting controls the visual appearance of the AppKit application, defaulting to the user's system preference if not explicitly set.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/web3modal/v2/_partials/options/themeMode.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nthemeMode: 'dark' | 'light'\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with Bitcoin adapter using Bash\nDESCRIPTION: This collection of commands installs the Reown AppKit with Bitcoin adapter support using npm, Yarn, Bun, and pnpm package managers. It sets up the necessary environment for React projects to integrate Bitcoin blockchain features using Reown AppKit. Prerequisites are Node.js and the respective package manager.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/installation.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit @reown/appkit-adapter-bitcoin\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit @reown/appkit-adapter-bitcoin\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @reown/appkit @reown/appkit-adapter-bitcoin\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit @reown/appkit-adapter-bitcoin\n```\n\n----------------------------------------\n\nTITLE: Smart contract interaction using wagmi's readContract\nDESCRIPTION: Demonstrates how to use wagmi's `readContract` function to query a token's total supply on Ethereum, requiring wagmiConfig and ABI definitions. Enables decentralized contract reading capabilities.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/installation.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { readContract } from \"@wagmi/core\";\nimport { USDTAbi } from \"../abi/USDTAbi\";\n\nconst USDTAddress = \"0x...\";\n\nconst data = readContract(wagmiConfig, {\n  address: USDTAddress,\n  abi: USDTAbi,\n  functionName: \"totalSupply\",\n  args: [],\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Connected Wallet Info with useWalletInfo (Ethers v5) TypeScript\nDESCRIPTION: This snippet illustrates how to use the useWalletInfo hook from `@reown/appkit-ethers5-react-native`. This hook provides access to metadata information about the currently connected wallet. It shows how to destructure the `walletInfo` object from the hook's return value.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/hooks.mdx#_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useWalletInfo } from '@reown/appkit-ethers5-react-native'\n\nconst { walletInfo } = useWalletInfo()\n```\n\n----------------------------------------\n\nTITLE: Highlighting Featured Wallets by ID - TypeScript\nDESCRIPTION: Explains how to prioritize and prominently display a specific list of wallets in the modal's main view and at the beginning of the 'All Wallets' list. This is done by providing an array of wallet IDs to the `featuredWalletIds` option.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/options.mdx#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\ncreateAppKit({\n  //...\n  featuredWalletIds: [\n    \"1ae92b26df02f0abca6304df07debccd18262fdf5fe82daa81593582dac9a369\", // Rainbow\n    \"4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0\", // Trust\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Deserializing Counter Account Data in TypeScript\nDESCRIPTION: This function deserializes an 8-byte Buffer representing a counter value on the Solana blockchain, verifying data length before conversion. It requires no dependencies beyond standard Buffer handling and is used primarily to interpret account data retrieved via connection.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/solana/about/programs.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction deserializeCounterAccount(data?: Buffer): { count: number } {\n  if (data?.byteLength !== 8) {\n    throw Error('Need exactly 8 bytes to deserialize counter')\n  }\n\n  return {\n    count: Number(data[0])\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Active Account Connected via AppKit in Kotlin\nDESCRIPTION: This simple snippet demonstrates how to get the currently active blockchain account connected through the AppKit SDK by calling `AppKit.getAccount()`. It returns the active account object or identifier for use within the application. There are no parameters required, and it depends on an existing active session.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/actions.mdx#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nAppKit.getAccount()\n```\n\n----------------------------------------\n\nTITLE: Creating Wagmi adapter for React\nDESCRIPTION: Configure the Wagmi adapter with networks and project ID, replacing the previous Web3Modal Wagmi configuration. This adapter connects AppKit to the Wagmi library for blockchain interactions.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nconst projectId = 'YOUR_PROJECT_ID'\nconst queryClient = new QueryClient()\n\nconst metadata = { //optional\n    name: 'AppKit',\n    description: 'AppKit Example',\n    url: 'https://example.com',\n    icons: ['https://avatars.githubusercontent.com/u/179229932']\n}\n\n// Remove the existing Wagmi Config\n- const wagmiConfig = defaultWagmiConfig({ chains, projectId, metadata })\n\n// Create the Wagmi adapter\n+ const wagmiAdapter = new WagmiAdapter({\n  networks: [mainnet, arbitrum],\n  projectId\n})\n```\n\n----------------------------------------\n\nTITLE: Listening for Session Request Expiry Event - WalletConnect Typescript\nDESCRIPTION: This snippet demonstrates how to subscribe to the 'session_request_expire' event emitted by the WalletConnect Wallet Kit SDK. This event is triggered when a session request expires. Applications should listen for this event to remove any UI modal or indicator related to the expired request.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nwalletKit.on(\"session_request_expire\", (event) => {\n  // request expired and any modal displaying it should be removed\n  const { id } = event;\n});\n```\n\n----------------------------------------\n\nTITLE: Adding WalletConnect Notify via CocoaPods\nDESCRIPTION: Configures CocoaPods to include the WalletConnect Notify package by updating spec repositories, initializing a Podfile if necessary, and adding the pod dependency with options for versioning or custom repository paths. This ensures the necessary dependencies are fetched and integrated into an iOS project.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/notifications/notify/installation.mdx#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\npod 'WalletConnectSwiftV2/WalletConnectNotify'\n```\n\nLANGUAGE: Ruby\nCODE:\n```\npod 'WalletConnectSwiftV2/WalletConnectNotify', :git => 'https://github.com/reown-com/reown-swift.git', :tag => '1.8.0'\n```\n\n----------------------------------------\n\nTITLE: Retrieving WalletConnect Notify Message History (JavaScript)\nDESCRIPTION: Demonstrates how to retrieve past notification messages for a given subscription topic using `notifyClient.getNotificationHistory()`. The method requires the `topic` and supports optional parameters for pagination and filtering like `limit`, `startingAfter`, and `unreadFirst`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Will return all past Notify messages for the provided subscription topic, keyed by messageId.\nconst messageHistory = notifyClient.getNotificationHistory({\n  topic,\n  limit: 10,\n  startingAfter: \"notification-id\",\n  unreadFirst: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Using useAppKitAccount Hook in React Native\nDESCRIPTION: This snippet demonstrates how to utilize the useAppKitAccount hook to access client account details such as address, chainId, and connection status within a React component. It depends on @reown/appkit-ethers-react-native and assumes the hook is used within a React functional component.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers/hooks.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useAppKitAccount } from \"@reown/appkit-ethers-react-native\";\n\nfunction Components() {\n  const { address, chainId, isConnected } = useAppKitAccount();\n\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Initializing AppKit (C#)\nDESCRIPTION: Initializes the Reown AppKit asynchronously using `AppKit.InitializeAsync`. Requires an `AppKitConfig` object populated with a valid `projectId` obtained from Reown Cloud and `Metadata` details (name, description, url, iconUrl) for the application.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/installation.mdx#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait AppKit.InitializeAsync(\n    new AppKitConfig(\n        projectId: \"YOUR PROJECT ID\",\n        new Metadata(\n            name: \"My Game\",\n            description: \"Short description\",\n            url: \"https://example.com\",\n            iconUrl: \"https://example.com/logo.png\"\n        )\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Refactoring the main service class from W3MService to ReownAppKitModal\nDESCRIPTION: This snippet indicates the update of the primary service class, emphasizing that the 'context' parameter is now required in the new class, affecting how the service is instantiated and used.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-flutter.mdx#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n<Table\n  headers={[\"Old\", \"New\", \"Notes\"]}\n  data=[\n    { old: { code: \"W3MService\" }, new: { code: \"ReownAppKitModal\" }, notes: \"`context` parameter is now required\" }\n  ]\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Additional Helper Libraries for React Native\nDESCRIPTION: Installs supplementary libraries for async storage, cryptographic functions, SVG rendering, modal dialogs, network status detection, and wallet connection compatibility. These libraries support enhanced app functionality and cross-platform compatibility.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers/about/installation.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @react-native-async-storage/async-storage react-native-get-random-values react-native-svg react-native-modal @react-native-community/netinfo @walletconnect/react-native-compat\n```\n\n----------------------------------------\n\nTITLE: Testing Authentication Workflow with AppKit Labs (HTML/Link)\nDESCRIPTION: This snippet provides a card component linking to AppKit Labs for testing and verifying the wallet's support for One-click Auth via Solana SIWS. It serves as a user-friendly entry point for developers to validate integration and functionality.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/one-click-auth-siws.mdx#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<Card\n  title=\"Test One-click Auth\"\n  href=\"https://appkit-lab.reown.com/library/solana-siws/\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Pairing with Dapp via URI in JavaScript\nDESCRIPTION: Shows how to establish a pairing with a dapp by parsing a URI (typically from a QR code) and initiating the pairing process, which triggers session proposal events.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/usage.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nUri uri = Uri.parse(scannedUriString);\nawait _walletKit.pair(uri: uri);\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Features with Wagmi in AppKit\nDESCRIPTION: Demonstrates how to set up email and social login authentication using the Wagmi adapter in AppKit. Includes configuration for enabling email login, social platform options, and UI display settings.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/socials.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst modal = createAppKit({\n  adapters: [wagmiAdapter],\n  projectId,\n  networks: [mainnet, arbitrum],\n  metadata,\n  features: {\n    email: true, // default to true\n    socials: [\n      \"google\",\n      \"x\",\n      \"github\",\n      \"discord\",\n      \"apple\",\n      \"facebook\",\n      \"farcaster\",\n    ],\n    emailShowWallets: true, // default to true\n  },\n  allWallets: \"SHOW\", // default to SHOW\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieve Wallet Account and Provider in React\nDESCRIPTION: Uses hooks to obtain the connected wallet address and provider instances (`walletProvider` and `connection`). These are essential for constructing and sending transactions on the Solana network.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-anza-adapter-react.mdx#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst { address } = useWeb3ModalAccount()\nconst { walletProvider, connection } = useWeb3ModalProvider()\n```\n\n----------------------------------------\n\nTITLE: VerifyContext Data Class Definition (Kotlin)\nDESCRIPTION: Defines the `VerifyContext` data class, which provides domain verification information about session proposals and requests. It includes the request ID, dapp origin URL, validation status (VALID, INVALID, UNKNOWN), and the verification server URL.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_27\n\nLANGUAGE: Kotlin\nCODE:\n```\ndata class VerifyContext(\n    val id: Long,\n    val origin: String,\n    val validation: Model.Validation,\n    val verifyUrl: String\n)\n\nenum class Validation {\n    VALID, INVALID, UNKNOWN\n}\n```\n\n----------------------------------------\n\nTITLE: Including Specific Wallets by ID - TypeScript\nDESCRIPTION: Shows how to completely override the default recommended wallets fetched from the WalletGuide, displaying *only* the wallets whose IDs are provided in the `includeWalletIds` array. These will be the only wallets shown in the 'All Wallets' view.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/options.mdx#_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\ncreateAppKit({\n  //...\n  includeWalletIds: [\n    \"1ae92b26df02f0abca6304df07debccd18262fdf5fe82daa81593582dac9a369\", // Rainbow\n    \"4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0\", // Trust\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching All Subscribers from Reown Notify API using cURL\nDESCRIPTION: Example using cURL to retrieve the list of all subscribed accounts via a GET request to the `/<project-id>/subscribers` endpoint. Requires the Authorization header with the Notify API Secret (Bearer token). Be aware of the performance impact and low rate limits for this endpoint.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/backend-integration.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://notify.walletconnect.com/<PROJECT_ID>/subscribers' \\\n  --header 'Authorization: Bearer <NOTIFY_API_SECRET>'\n```\n\n----------------------------------------\n\nTITLE: Enabling onramp feature in createAppKit configuration in TypeScript\nDESCRIPTION: Demonstrates enabling the onramp feature to allow fiat-to-crypto onramp options within the app. Like swaps, onramp is enabled by default and toggled through the features object.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateAppKit({\n  //...\n  features: {\n    onramp: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding token asset to an account with ever_addTokenAsset (JavaScript)\nDESCRIPTION: This snippet adds a token asset, TIP-3 or native tokens, to a specific account using 'ever_addTokenAsset'. The root contract address identifies the asset; an empty address indicates native coins. The result indicates if a new asset was added (true) or already exists (false).\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/everscale-rpc.mdx#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Request\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"ever_addTokenAsset\",\n  \"params\": {\n        \"sourceAddress\": \"0:695e42...b8d\",\n        \"rootContract\": \"0:b38d96...708\"\n    }\n}\n\n// Result\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\":  {\n        \"newAsset\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Contract ABI and Address - Wagmi/Viem - TypeScript\nDESCRIPTION: Defines the Application Binary Interface (ABI) and contract address for the target smart contract. This information is necessary for encoding function calls to interact with the contract on the blockchain.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/sponsoring-first-transaction.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst donutContractAbi = [\n  {\n    inputs: [\n      {\n        internalType: 'uint256',\n        name: 'amount',\n        type: 'uint256'\n      }\n    ],\n    name: 'purchase',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function'\n  },\n]\n\nconst donutContactAddress = '0x2E65BAfA07238666c3b239E94F32DaD3cDD6498D' as const\n```\n\n----------------------------------------\n\nTITLE: Creating Wagmi adapter for Vue\nDESCRIPTION: Configure the Wagmi adapter for Vue applications with networks and project ID, replacing the previous Web3Modal Wagmi configuration. This adapter connects AppKit to the Wagmi library in Vue context.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nconst projectId = 'YOUR_PROJECT_ID'\n\nconst metadata = { //optional\n    name: 'AppKit',\n    description: 'AppKit Example',\n    url: 'https://example.com',\n    icons: ['https://avatars.githubusercontent.com/u/179229932']\n}\n\n// Remove the existing Wagmi Config\n- const wagmiConfig = defaultWagmiConfig({ chains, projectId, metadata })\n\n// Create the Wagmi adapter\n+ const wagmiAdapter = new WagmiAdapter({\n  networks: [mainnet, arbitrum],\n  projectId\n})\n```\n\n----------------------------------------\n\nTITLE: Example Parameters eth_signTransaction javascript\nDESCRIPTION: Shows an example transaction object used as the parameter for the `eth_signTransaction` method. This object defines the transaction details (from, to, data, gas, gasPrice, value, nonce) for a transaction that will be signed offline, rather than immediately sent to the network.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/ethereum-rpc.mdx#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    from: \"0xb60e8dd61c5d32be8058bb8eb970870f07233155\",\n    to: \"0xd46e8dd67c5d32be8058bb8eb970870f07244567\",\n    data: \"0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675\",\n    gas: \"0x76c0\", // 30400\n    gasPrice: \"0x9184e72a000\", // 10000000000000\n    value: \"0x9184e72a\", // 2441406250\n    nonce: \"0x117\", // 279\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Example Static Wallet getAccountAddresses Request and Response - Litecoin JavaScript\nDESCRIPTION: Illustrates a JSON-RPC request to the `getAccountAddresses` method for a static wallet and the expected response. The request specifies the connected account. The response returns a single address object (the first external address), as a static wallet typically reuses this address.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/litecoin-rpc.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Request\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"getAccountAddresses\",\n    \"params\": {\n        \"account\": \"ltc1q8c6fshw2dlwun7ekn9qwf37cu2rn755u9ym7p0\"\n    }\n}\n\n// Result\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"result\": [\n        {\n            \"address\": \"ltc1q8c6fshw2dlwun7ekn9qwf37cu2rn755u9ym7p0\",\n            \"path\": \"m/84'/2'/0'/0/0\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a User Account via JavaScript API\nDESCRIPTION: This snippet handles user account registration through the 'Registering' component, imported from its respective module. It enables new account creation within the notification framework, preparing the system for personalized notifications.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/notifications/frontend-integration/api.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Registering />\n```\n\n----------------------------------------\n\nTITLE: Call Transaction Sending Function on Button Click\nDESCRIPTION: Connects the transaction functionality with a React UI button to enable user-initiated transfers. When clicked, it executes the previous transaction function to send SOL to the recipient.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-anza-adapter-react.mdx#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n<button onClick={handleSendTransaction}>Send Transaction</button>\n```\n\n----------------------------------------\n\nTITLE: Installing Legacy SIWE Packages including viem with Various Package Managers\nDESCRIPTION: Lists installation commands for the legacy approach to integrating SIWE, which includes @reown/appkit-siwe, siwe, and viem packages. This setup is recommended if additional blockchain interaction via viem is needed, though it is noted that One-Click Auth offers better user experience. Commands are provided for npm, Yarn, Bun, and pnpm.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/siwe.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit-siwe siwe viem\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit-siwe siwe viem\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun a @reown/appkit-siwe siwe viem\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit-siwe siwe viem\n```\n\n----------------------------------------\n\nTITLE: Pinging a WalletConnect Session Peer in Kotlin\nDESCRIPTION: Pings the peer connected via a WalletConnect session to check connectivity. Requires the session topic and a `Sign.Listeners.SessionPing` listener object to handle success (echoed topic) or error responses. The `SignClient.ping` function initiates the ping.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_35\n\nLANGUAGE: kotlin\nCODE:\n```\nval sessionTopic: String = /*Topic of Session*/\nval pingParams = Sign.Params.Ping(sessionTopic)\nval listener = object : Sign.Listeners.SessionPing {\n    override fun onSuccess(pingSuccess: Model.Ping.Success) {\n        // Topic being pinged\n    }\n\n    override fun onError(pingError: Model.Ping.Error) {\n        // Error\n    }\n}\n\nSignClient.ping(pingParams, listener)\n```\n\n----------------------------------------\n\nTITLE: Configuring index.js for React Native CLI Projects\nDESCRIPTION: JavaScript code for the index.js file that sets up crypto polyfills required for WalletConnect in React Native CLI environments.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/notify/installation.mdx#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { AppRegistry } from \"react-native\";\nimport App from \"./App\";\nimport { name as appName } from \"./app.json\";\nimport crypto from \"react-native-quick-crypto\";\n\nconst polyfillDigest = async (algorithm, data) => {\n  const algo = algorithm.replace(\"-\", \"\").toLowerCase();\n  const hash = crypto.createHash(algo);\n  hash.update(data);\n  return hash.digest();\n};\n\nglobalThis.crypto = crypto;\nglobalThis.crypto.subtle = {\n  digest: polyfillDigest,\n};\n\nAppRegistry.registerComponent(appName, () => App);\n```\n\n----------------------------------------\n\nTITLE: Importing crypto polyfill in Expo React Native app root file in JavaScript\nDESCRIPTION: Shows how to import the crypto-polyfill.js file in the root App.js file of an Expo React Native project. This import should be done at the top to ensure the polyfill is applied globally before other modules that might require the crypto API, such as walletconnect or Reown appkit packages.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/expo/additional-expo48.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// src/App.js\n\nimport './crypto-polyfill.js'\nimport '@walletconnect/react-native-compat';\n...\nimport { createAppKit } from '@reown/appkit-...'\n```\n\n----------------------------------------\n\nTITLE: ColorPalette Data Class Definition - Kotlin\nDESCRIPTION: Defines a ColorPalette data class with several color gradations (color100 through color300) used for fine-grained theme customization. This struct is used within AppKitTheme to encapsulate foreground and background color groupings. Inputs: Color values for each field. Output: bundle of related color values for rapid theme switching or overrides. No runtime logic; serves purely as a data container.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/theming.mdx#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\n    data class ColorPalette(\n        val color100: Color,\n        val color125: Color,\n        val color150: Color,\n        val color175: Color,\n        val color200: Color,\n        val color225: Color,\n        val color250: Color,\n        val color275: Color,\n        val color300: Color,\n    )\n\n```\n\n----------------------------------------\n\nTITLE: Registering Identity Key as a Wallet in React Native\nDESCRIPTION: Shows how to register an identity key as a wallet in React Native, allowing the wallet to send and receive messages on behalf of all domains.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nconst account = `eip155:1:0x63Be2c680685d2A9620c11b0068291261aa62d76`\nconst domain =  'app.mydomain.com', // pass the domain (i.e. the hostname) where your dapp is hosted.\nconst allApps =  true // The user will be prompted to authorize this wallet to send and receive messages on their behalf for ALL domains using their WalletConnect identity.\n\n\n\n// No need to register and sign message if already registered.\nif (notifyClient.isRegistered({ account, domain, allApps })) return;\n\nconst {registerParams, message}  = notifyClient.prepareRegistration({\n  account,\n  domain,\n  allApps\n});\n\nconst signature = await ethersWallet.signMessage(message);\n\nawait notifyClient.register({\n  registerParams,\n  signature,\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Socials Component in JavaScript\nDESCRIPTION: This snippet imports the Socials component from the specified path, enabling its usage within the current file. It relies on module systems (likely ES6 modules). The purpose is to incorporate shared social media functionality into the page, which is then rendered with the <Socials /> tag.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/socials.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Socials from \"/snippets/appkit/shared/socials.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Defining the Session Namespaces Interface (TypeScript)\nDESCRIPTION: Provides the TypeScript interface definition for `Namespaces`, which is part of the session data accessible via `provider.session.namespaces`. This interface outlines the structure for optional approved chains, mandatory accounts, methods, and events for a given namespace within the established session.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/providers/universal.mdx#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\ninterface Namespaces {\n  chains?: string[];\n  accounts: string[];\n  methods: string[];\n  events: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing isDarkMode Property from ReownAppKitModalTheme in Dart\nDESCRIPTION: Shows how to query the current dark mode state in a Flutter context by calling ReownAppKitModalTheme.of(context).isDarkMode or safely using maybeOf. These methods return a boolean indicating if dark mode is active. Requires a valid BuildContext parameter.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/theming.mdx#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfinal isDarkMode = ReownAppKitModalTheme.of(context).isDarkMode;\nfinal isMaybeDarkMode = ReownAppKitModalTheme.maybeOf(context)?.isDarkMode;\n```\n\n----------------------------------------\n\nTITLE: Importing Reown AppKit hooks and Ethers dependencies in React\nDESCRIPTION: Imports necessary hooks from Reown AppKit for wallet interactions and core classes/functions from Ethers.js for blockchain communication. These imports are essential prerequisites for accessing wallet data and performing blockchain operations within React components.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/ethers-send-transaction.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {\n  useAppKitAccount,\n  useAppKitProvider,\n  useAppKitNetworkCore,\n  type Provider\n} from \"@reown/appkit/react\";\nimport {\n  BrowserProvider,\n  JsonRpcSigner,\n  formatEther,\n  parseUnits\n} from \"ethers\";\n```\n\n----------------------------------------\n\nTITLE: Sending WalletConnect Request (Swift)\nDESCRIPTION: Sends a request within an active WalletConnect session using the asynchronous `request` method on the `AppKit` instance. The parameters specify the session topic, method name, payload, and chain ID. Requires a `params` object containing `topic`, `method`, `params` (payload), and `chainId`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/actions.mdx#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\ntry await AppKit.instance.request(\n    params: .init(\n        topic: session.topic,\n        method: \"some_method\",\n        params: AnyCodable(payload),\n        chainId: Blockchain\n    )\n)\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Manifest for Wallet Detection\nDESCRIPTION: Modifies the Android Manifest to enable detection of installed wallet apps on Android devices. This requires adding wallet package names to the queries section outside the application scope.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/options.mdx#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n\n    <queries>\n        <package android:name=\"io.metamask\"/>\n        <package android:name=\"com.wallet.crypto.trustapp\"/>\n        <package android:name=\"io.gnosis.safe\"/>\n        <package android:name=\"me.rainbow\"/>\n        <!-- Add other wallet schemes names here -->\n    </queries>\n\n    <application>\n        ...\n    </application>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Registering Web3Inbox Account - TypeScript\nDESCRIPTION: Walks through the registration process for a user account with Web3Inbox. It involves preparing a registration message and parameters from the client, signing the message using a wallet provider (like wagmi), and then completing the registration by submitting the signature and parameters back to the client.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/usage/example/javascript.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { message, registerParams } = await client.prepareRegistration({ account })\nconst { signature } = await signMessage(message)\nawait client.register({ signature, registerParams })\n```\n\n----------------------------------------\n\nTITLE: Android SDK Connection Type Initialization\nDESCRIPTION: Illustrates the initialization of the core client with manual connection control on Android, specifying the project ID and connection type. Subsequent connect and disconnect calls enable explicit WebSocket management, providing developers flexibility over connection lifecycle.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/relay.mdx#_snippet_4\n\nLANGUAGE: Kotlin\nCODE:\n```\nCoreClient.initialize(projectId = projectId, connectionType = ConnectionType.MANUAL, application = application)\n\nCoreClient.Relay.connect() { error -> /*Error when wrong connection type is in use*/}\n\nCoreClient.Relay.disconnect() { error -> /*Error when wrong connection type is in use*/}\n```\n\n----------------------------------------\n\nTITLE: Handling and Decrypting Notifications in UNNotificationServiceExtension (Swift)\nDESCRIPTION: Provides an implementation example for the `didReceive` method within a `UNNotificationServiceExtension`. It extracts the `topic`, encrypted `message`, and `tag` from the incoming notification's `userInfo`, then uses the `tag` to determine if the message can be handled by `WalletKitDecryptionService` or `NotifyDecryptionService` before decrypting and passing the content.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/notifications/push.mdx#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\noverride func didReceive(_ request: UNNotificationRequest, withContentHandler contentHandler: @escaping (UNNotificationContent) -> Void) {\n        self.contentHandler = contentHandler\n        self.bestAttemptContent = request.content\n\n        if let content = bestAttemptContent,\n           let topic = content.userInfo[\"topic\"] as? String,\n           let ciphertext = content.userInfo[\"message\"] as? String,\n           let tag = content.userInfo[\"tag\"] as? UInt {\n\n            if WalletKitDecryptionService.canHandle(tag: tag) {\n                let mutableContent = handleWalletKitNotification(content: content, topic: topic, tag: tag, ciphertext: ciphertext)\n                contentHandler(mutableContent)\n            } else if NotifyDecryptionService.canHandle(tag: tag) {\n                let mutableContent = handleNotifyNotification(content: content, topic: topic, ciphertext: ciphertext)\n                contentHandler(mutableContent)\n            } else {\n                let mutableContent = content.mutableCopy() as! UNMutableNotificationContent\n                mutableContent.title = \"Error: unknown message tag\"\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Sending Session Request with WalletConnect Modal - Android Kotlin\nDESCRIPTION: Shows how to send a request within an active WalletConnect session using the SDK in Android Kotlin. It requires the session topic, method, parameters, and chain ID, providing success and error callbacks.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_36\n\nLANGUAGE: kotlin\nCODE:\n```\nval requestParams = Modal.Params.Request(\n    sessionTopic = sessionTopic,\n    method = /* Selected method */,\n    params = /* Method params  */,\n    chainId = /* Chain id */\n)\n\nWalletConnectModal.request(\n    request = requestParams,\n    onSuccess = {\n    /* callback that letting you know that you have successful request */\n    },\n    onError = { error ->\n    /* callback for error */\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Requesting hedera_signTransaction via JSON-RPC - JSON\nDESCRIPTION: Demonstrates how to request a transaction signature using hedera_signTransaction. The JSON-RPC call includes signerAccountId and a base64-encoded transactionBody. This operation returns a base64-encoded SignatureMap if successful.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/hedera-rpc.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"hedera_signTransaction\",\n  \"params\": {\n    \"signerAccountId\": \"hedera:testnet:0.0.12345\",\n    \"transactionBody\": \"Co8BKowBCocBChoKDAjchKWmBhDW...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Web3Inbox Widget with pnpm (Bash)\nDESCRIPTION: Installs both @web3inbox/core and @web3inbox/widget-react using pnpm. Requires pnpm to be installed globally. Command should be executed from the project's root directory. This sets up necessary dependencies to begin integrating the Web3Inbox Widget according to future instructions.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/notifications/embedded-widget/about.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @web3inbox/core @web3inbox/widget-react\n```\n\n----------------------------------------\n\nTITLE: Mark All Notifications as Read via Fetch API in JavaScript\nDESCRIPTION: This JavaScript snippet calls the `/v1/<project-id>/mark-all-as-read` endpoint to mark all existing notifications for the project as read. It uses the Fetch API to send a POST request with the API Secret in the Authorization header.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/notifications/backend-integration.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst PROJECT_ID = \"<PROJECT_ID>\";\nconst NOTIFY_API_SECRET = \"<NOTIFY_API_SECRET>\";\nconst response = await fetch(\n  `https://notify.walletconnect.com/v1/${PROJECT_ID}/mark-all-as-read`,\n  {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${NOTIFY_API_SECRET}`,\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating AppMetadata object for WalletConnect iOS SDK\nDESCRIPTION: Creates an `AppMetadata` object to describe the application’s appearance in a Web browser, including mandatory `redirect` field starting from SDK version 1.9.5. The metadata is used to configure the Pair instance for establishing connections.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#_snippet_13\n\nLANGUAGE: Swift\nCODE:\n```\nlet metadata = AppMetadata(name: <String>,\n                           description: <String>,\n                           url: <String>,\n                           icons: <[String]>,\n                           redirect: AppMetadata.Redirect(native: \"example://\", universal: nil))\n\nPair.configure(metadata: metadata)\n```\n\n----------------------------------------\n\nTITLE: Sending an external message with ever_sendExternalMessage (JavaScript)\nDESCRIPTION: This code illustrates how to send an external message directly to a contract using 'ever_sendExternalMessage', specifying the destination address and payload. It returns the transaction ID. Suitable for transmitting external data without prior signing within the application.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/everscale-rpc.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Request\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"ever_sendExternalMessage\",\n  \"params\": {\n        \"sourceAddress\": \"0:695e42...b8d\",\n        \"destAddress\": \"0:b38d96...708\",\n        \"destPayload\": {\n            \"abi\": \"\",\n            \"method\": \"\",\n            \"params\": {}\n        },\n    }\n}\n\n// Result\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\":  {\n        \"txId\": \"743e1c0046b82a48a2cf8cbe9a2059ce6f3862cfae377c77d9f1b4efd88d7acb\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Usage Analytics - TypeScript\nDESCRIPTION: Demonstrates how to enable analytics tracking for user activity within the AppKit instance by setting the `enableAnalytics` option to `true`. Insights can be viewed in the Reown Cloud dashboard.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/options.mdx#_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\ncreateAppKit({\n  //...\n  enableAnalytics: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Reading Ether Balance using AppKit.Evm in C#\nDESCRIPTION: Shows how to retrieve the Ether balance for the currently connected account. It first gets the account information using `AppKit.GetAccountAsync` and then fetches the balance in Wei using `AppKit.Evm.GetBalanceAsync`. The balance is then converted from Wei to ETH for logging purposes.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/usage.mdx#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nAccount account = await AppKit.GetAccountAsync();\nBigInteger balance = await AppKit.Evm.GetBalanceAsync(account.Address);\n\nDebug.Log($\"Balance: {Web3.Convert.FromWei(balance.Value)} ETH\");\n```\n\n----------------------------------------\n\nTITLE: Rendering Socials component in a frontend framework\nDESCRIPTION: This snippet renders the imported 'Socials' component within the page using a self-closing JSX tag, which is typical in React-like frameworks. It displays social media links or widgets as part of the page layout, allowing for easy updates and component-based design.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/socials.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Socials />\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository and Navigating into Directory (Bash)\nDESCRIPTION: Clones the specified Git repository (`git clone ...`) to the local machine and then changes the current directory (`cd ...`) into the newly created project folder. Replace `your-username` with the actual GitHub username when cloning a fork.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/README.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\ngit clone https://github.com/your-username/reown-docs.git\ncd reown-docs\n```\n\n----------------------------------------\n\nTITLE: Retrieving List of Settled Sessions - Kotlin\nDESCRIPTION: Demonstrates how to retrieve the latest settled sessions using SignClient.getListOfSettledSessions. The method returns a list of Session objects representing currently active sessions. This is a synchronous API call in the WalletConnect SDK with no required parameters and provides a complete session list for management purposes.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\nSignClient.getListOfSettledSessions()\n```\n\n----------------------------------------\n\nTITLE: Customizing connectMethodsOrder in createAppKit features in TypeScript\nDESCRIPTION: Allows customization of the order in which connection methods such as 'wallet', 'email', and 'social' are presented in the modal. The default order is ['wallet', 'email', 'social'], but this snippet overrides it to ['social', 'email', 'wallet'] via the features configuration.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateAppKit({\n  //...\n  features: {\n    connectMethodsOrder: [\"social\", \"email\", \"wallet\"],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Blockchain Chain ID Using Reown AppKit in TypeScript\nDESCRIPTION: Shows how to obtain the current connected blockchain network's chain ID using modal.getChainId(). The returned value is a number representing the blockchain network identifier (e.g., mainnet, arbitrum). Useful for network-specific logic within the app.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/ethers/actions.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst chainId = modal.getChainId();\n```\n\n----------------------------------------\n\nTITLE: Handling Session Proposal Event with Approval\nDESCRIPTION: This code captures the 'session_proposal' event, prompts the user for session approval, and upon confirmation, approves the session by passing in the proposal ID and validated namespaces. It exemplifies user interaction handling in session initiation.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/usage.mdx#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nwalletKit.on(\n  \"session_proposal\",\n  async (proposal: WalletKitTypes.SessionProposal) => {\n    const session = await walletKit.approveSession({\n      id: proposal.id,\n      namespaces,\n    });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Opening and Closing the AppKit Modal in TypeScript\nDESCRIPTION: Demonstrates initializing the AppKit modal using `createAppKit` and controlling its visibility with the `modal.open()` and `modal.close()` methods. Assumes `createAppKit`, adapters (like `wagmiAdapter`), networks (like `mainnet`, `arbitrum`), and `projectId` are defined elsewhere.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/actions.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst modal = createAppKit({\n  adapters: [wagmiAdapter],\n  networks: [mainnet, arbitrum],\n  projectId,\n});\n\nmodal.open();\n\nmodal.close();\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Analytics Component in JSX\nDESCRIPTION: This snippet imports the Analytics component from a path and renders it within the current file. It depends on the Analytics component being properly exported from the specified snippet file. No parameters are passed to the component, and it is used as a self-closing JSX tag to integrate analytics functionality into the application UI.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/cloud/analytics.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Analytics from \"/snippets/cloud/analytics.mdx\";\n\n<Analytics />\n```\n\n----------------------------------------\n\nTITLE: Opening Reown AppKit Modal via Compose Accompanist Navigation (Kotlin)\nDESCRIPTION: Navigates to and opens the Reown AppKit modal bottom sheet within a Compose UI setup using Accompanist Navigation. This is done by calling an extension function on the `NavController` after the AppKit navigation graph has been included.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/usage.mdx#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.reown.appkit.ui.openAppKit\n\nnavController().openAppKit(\n    shouldOpenChooseNetwork = true | false\n    onError = {  }\n)\n```\n\n----------------------------------------\n\nTITLE: Standard EVM Methods and Events in TypeScript\nDESCRIPTION: Lists the default Ethereum methods and events supported by the @walletconnect/ethereum-provider SDK, which includes transaction handling, signing, chain switching, and event notifications.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/usage.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n{\n  //...\n  methods: [\n    \"eth_accounts\",\n    \"eth_requestAccounts\",\n    \"eth_sendRawTransaction\",\n    \"eth_sign\",\n    \"eth_signTransaction\",\n    \"eth_signTypedData\",\n    \"eth_signTypedData_v3\",\n    \"eth_signTypedData_v4\",\n    \"eth_sendTransaction\",\n    \"personal_sign\",\n    \"wallet_switchEthereumChain\",\n    \"wallet_addEthereumChain\",\n    \"wallet_getPermissions\",\n    \"wallet_requestPermissions\",\n    \"wallet_registerOnboarding\",\n    \"wallet_watchAsset\",\n    \"wallet_scanQRCode\",\n    \"wallet_sendCalls\",\n    \"wallet_getCallsStatus\",\n    \"wallet_showCallsStatus\",\n    \"wallet_getCapabilities\",\n  ],\n  events: [\n    \"chainChanged\",\n    \"accountsChanged\",\n    \"message\",\n    \"disconnect\",\n    \"connect\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Multi-Chain Account Info with useAppKitAccount in TypeScript\nDESCRIPTION: Illustrates using the `useAppKitAccount` hook with a `namespace` parameter to fetch account information specific to different blockchain types (EVM, Solana, Bitcoin) in a multi-chain environment.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/hooks.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAppKitAccount } from \"@reown/appkit/react\";\n\nconst eip155Account = useAppKitAccount({ namespace: \"eip155\" }); // for EVM chains\nconst solanaAccount = useAppKitAccount({ namespace: \"solana\" });\nconst bip122Account = useAppKitAccount({ namespace: \"bip122\" }); // for bitcoin\n```\n\n----------------------------------------\n\nTITLE: Executing Chain Abstraction Transactions with WalletKit (TypeScript)\nDESCRIPTION: Defines the abstract method signature for broadcasting signed bridging and initial transactions as part of the chain abstraction flow. It requires the orchestration ID, signed bridge transactions, and the signed initial transaction to proceed.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/chain-abstraction.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\npublic abstract execute(params: {\n  orchestrationId: ChainAbstractionTypes.OrchestrationId;\n  bridgeSignedTransactions: ChainAbstractionTypes.SignedTransaction[];\n  initialSignedTransaction: ChainAbstractionTypes.SignedTransaction;\n}): ChainAbstractionTypes.ExecuteResult;\n```\n\n----------------------------------------\n\nTITLE: Getting Subscriber Information with cURL\nDESCRIPTION: cURL command example for querying subscriber information by posting a list of accounts to check against the subscribers endpoint.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/notifications/backend-integration.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST 'https://notify.walletconnect.com/v1/<PROJECT_ID>/subscribers' \\\n  --header 'Authorization: Bearer <NOTIFY_API_SECRET>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"accounts\": [\n      \"eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029\",\n      \"eip155:1:0x0000000000000000000000000000000000000000\"\n    ]\n  }'\n```\n\n----------------------------------------\n\nTITLE: Broadcasting a message internally without waiting on transaction (JavaScript)\nDESCRIPTION: This snippet demonstrates broadcasting an internal message with 'ever_broadcastMessage', which does not wait for the transaction confirmation. It returns message hash, destination account, and expiration timestamp, useful for fire-and-forget message dispatching.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/everscale-rpc.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Request\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"ever_broadcastMessage\",\n  \"params\": {\n        \"sourceAddress\": \"0:695e42...b8d\",\n        \"value\": 1000000000,\n        \"bounce\": false,\n        \"destAddress\": \"0:b38d96...708\",\n        \"destPayload\": {\n            \"abi\": \"\",\n            \"method\": \"\",\n            \"params\": {}\n        },\n    }\n}\n\n// Result\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\":  {\n        \"hash\": \"743e1c0046b82a48a2cf8cbe9a2059ce6f3862cfae377c77d9f1b4efd88d7acb\",\n        \"account\": \"0:695e42...b8d\",\n        \"expireAt\": 1684327417543\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Unregister Blockchain Account from Notify SDK in Kotlin\nDESCRIPTION: Configures unregistration parameters with the target account and invokes NotifyClient.unregister to remove local data, unregister from Keyserver, and unsubscribe from all active notifications. Handles success or failure via callback functions.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_30\n\nLANGUAGE: Kotlin\nCODE:\n```\nval unregistrationParams = Notify.Params.Unregistration(/*CAIP-10 account*/)\nNotifyClient.unregister(\n  unregistrationParams,\n  onSuccess = {\n      // Callback when unregistration succeeds\n  },\n  onError = { error ->\n    // Callback when unregistration fails\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Generating and Handling SIWE Nonce Tokens in JavaScript\nDESCRIPTION: Provides a method to asynchronously generate or retrieve a nonce, which acts as a security token to protect against replay attacks and spoofing in SIWE authentication flows. The nonce can be generated via the siwe package's helper or fetched from a backend CSRF token implementation. This method returns a Promise resolving to the nonce string.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/siwe/parameters.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetNonce `() => Promise<string>`\n\nThe getNonce method functions as a safeguard against spoofing, akin to a CSRF token. The siwe package provides a generateNonce() helper, or you can utilize an existing CSRF token from your backend if available.\n```\n\n----------------------------------------\n\nTITLE: Importing Socials component in JavaScript\nDESCRIPTION: This snippet imports the 'Socials' component from a shared module located at '/snippets/appkit/shared/socials.mdx', enabling reuse of social media link or widget functionalities in the current page. The import statement supports modularization and maintains code consistency across the project.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/socials.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Socials from \"/snippets/appkit/shared/socials.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Installing Additional Required Dependencies for Reown AppKit in Expo\nDESCRIPTION: Command to install supporting packages required by Reown AppKit including async storage, random values polyfill, SVG support, modal components, network information, and WalletConnect compatibility layer.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers/about/installation-expo.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @react-native-async-storage/async-storage react-native-get-random-values react-native-svg react-native-modal @react-native-community/netinfo @walletconnect/react-native-compat expo-application\n```\n\n----------------------------------------\n\nTITLE: Overriding chain images in modal with createAppKit in TypeScript\nDESCRIPTION: Illustrates configuring the chainImages property to set or override blockchain network images displayed in the modal. This expects a mapping from chain ID numbers to image URLs, allowing customized network branding or visuals within the wallet connection modal UI.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateAppKit({\n  // ...\n  chainImages: {\n    1: \"https://my.images.com/eth.png\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Session Proposals in Swift\nDESCRIPTION: Sets up a listener for incoming session proposals from dapps. This allows the wallet to verify the dapp and display the session proposal to the user for approval or rejection.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/usage.mdx#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nWalletKit.instance.sessionProposalPublisher\n    .receive(on: DispatchQueue.main)\n    .sink { [weak self] session in\n        self?.verifyDapp(session.context)\n        self?.showSessionProposal(session.proposal)\n    }.store(in: &publishers)\n```\n\n----------------------------------------\n\nTITLE: Configuring Crypto Polyfill for Expo Projects\nDESCRIPTION: JavaScript code for the expo-crypto-shim.js file that polyfills the crypto API using expo-crypto, required for WalletConnect to function in Expo environments.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/notify/installation.mdx#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { digest } from \"expo-crypto\";\n\n// eslint-disable-next-line no-undef\nconst webCrypto = typeof crypto !== \"undefined\" ? crypto : new Crypto();\nwebCrypto.subtle = {\n  digest: (algo, data) => {\n    const buf = Buffer.from(data);\n    return digest(algo, buf);\n  },\n};\n(() => {\n  if (typeof crypto === \"undefined\") {\n    Object.defineProperty(window, \"crypto\", {\n      configurable: true,\n      enumerable: true,\n      get: () => webCrypto,\n    });\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Registering Account with SIWE Authentication in Notify API\nDESCRIPTION: Demonstrates how to register a blockchain account with the Notify API using SIWE (Sign-In with Ethereum) authentication. The process involves preparing a registration request, signing a message, and submitting the signature.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/notifications/notify/usage.mdx#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet params = try await Notify.instance.prepareRegistration(account: account, domain: \"com.YOURAPPDOMAIN\")\nlet signature = onSign(message: params.message) // Sign message with your signer\ntry await Notify.instance.register(params: params, signature: signature)\n```\n\n----------------------------------------\n\nTITLE: Rejecting Authentication Requests in Kotlin\nDESCRIPTION: Provides a method to reject an authentication request by specifying a reason. The rejectSessionAuthenticate function handles user cancellations or unsupported requests, ensuring proper flow control and user feedback.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/one-click-auth.mdx#_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\nval rejectParams = Wallet.Params.RejectSessionAuthenticate(\n    id = sessionAuthenticate.id,\n    reason = \"Reason\"\n)\n\nWalletKit.rejectSessionAuthenticate(rejectParams,\n  onSuccess = {\n        //Success\n  },\n  onError = { error ->\n      //Handle error\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Rejecting Session Proposals (Swift/iOS)\nDESCRIPTION: Rejects a session proposal in an iOS wallet using the WalletKit SDK. Calls the asynchronous `reject` method with the proposal ID and a reason (e.g., user rejected), handling errors and updating the UI.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\ndo {\n    try await WalletKit.instance.reject(proposalId: proposal.id, reason: .userRejected)\n    // Update UI, remove loader\n} catch {\n    // present error\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Session Request Parameters in Swift\nDESCRIPTION: Extracts and parses the parameters from session requests based on the method type, allowing the wallet to properly handle different types of signing requests.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/usage.mdx#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nif sessionRequest.method == \"personal_sign\" {\n    let params = try! sessionRequest.params.get([String].self)\n} else if method == \"eth_signTypedData\" {\n    let params = try! sessionRequest.params.get([String].self)\n} else if method == \"eth_sendTransaction\" {\n    let params = try! sessionRequest.params.get([EthereumTransaction].self)\n}\n```\n\n----------------------------------------\n\nTITLE: Switching Networks with AppKit in React\nDESCRIPTION: Demonstrates how to initialize the AppKit modal with specific networks and then switch to another network programmatically. Requires configuration with adapters, networks, and metadata parameters.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/next/ethers5/hooks.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createAppKit } from \"@reown/appkit/react\";\nimport { mainnet, arbitrum, polygon } from \"@reown/appkit/networks\";\n\nconst modal = createAppKit({\n  adapters: [wagmiAdapter],\n  projectId,\n  networks: [mainnet, arbitrum],\n  metadata: metadata,\n  features: {\n    analytics: true,\n  },\n});\n\nmodal.switchNetwork(polygon);\n```\n\n----------------------------------------\n\nTITLE: Getting Selected Blockchain Chain Using AppKit in Kotlin\nDESCRIPTION: This snippet shows how to retrieve the currently selected blockchain chain by invoking `getSelectedChain()` on the AppKit object. It requires the AppKit SDK initialized and available in the environment. The method returns the active chain context used for wallet interactions.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/actions.mdx#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nAppKit.getSelectedChain()\n```\n\n----------------------------------------\n\nTITLE: Using Formatted Errors in JavaScript\nDESCRIPTION: Examples of pre-defined error objects available in the ReOwn SDK for handling common error scenarios in wallet applications.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/usage.mdx#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// When user rejects session proposal or method request.\nfinal userRejectedError = Errors.getSdkError(Errors.USER_REJECTED).toSignError();\n\n// When the request coming to your wallet can not be unparsed\nfinal malformedRequest = Errors.getSdkError(Errors.MALFORMED_REQUEST_PARAMS).toSignError();\n\n// When user disconnects the session\nfinal userDisconnected = Errors.getSdkError(Errors.USER_DISCONNECTED).toSignError();\n\n// When dapp request an unsupported method to your wallet\nfinal unsupportedMethods = Errors.getSdkError(Errors.UNSUPPORTED_METHODS).toSignError();\n```\n\n----------------------------------------\n\nTITLE: Installing Coinbase Mobile SDK and MMKV (RN CLI)\nDESCRIPTION: Command to install the Coinbase Mobile SDK (`@coinbase/wallet-mobile-sdk`) and the required `react-native-mmkv` storage library using yarn. These are necessary dependencies for enabling Coinbase Wallet interactions in a React Native CLI project.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/installation.mdx#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @coinbase/wallet-mobile-sdk react-native-mmkv\n```\n\n----------------------------------------\n\nTITLE: Refactoring web3app instance to appKit\nDESCRIPTION: This snippet demonstrates updating the web3app instance usage to appKit, specifically replacing event subscription calls from 'web3App' to 'appKit' to align with new service class naming.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-flutter.mdx#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Remove the code line below\n_w3mService.web3App!.getActiveSessions();\n\n// Replace with\n_appKitModal.appKit!.getActiveSessions();\n```\n\n----------------------------------------\n\nTITLE: Configuring AppKit Client with Custom Session Parameters in Swift\nDESCRIPTION: Demonstrates how to initialize the AppKit client with a project ID, metadata, and explicitly defined custom session parameters. This allows developers to specify different or additional required/optional namespaces compared to the library's default.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/usage.mdx#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet metadata = AppMetadata(...)\n\nlet sessionParams = SessionParams(...)\n\nAppKit.configure(\n    projectId: PROJECT_ID,\n    metadata: metadata,\n    sessionParams: sessionParams\n)\n```\n\n----------------------------------------\n\nTITLE: Using useAppKit Composable for Modal Control in Vue\nDESCRIPTION: Demonstrates importing and using the `useAppKit` composable from `@reown/appkit/vue` within a Vue component. It destructures the `open` and `close` functions, which can be used to programmatically control the visibility of the AppKit modal.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/composables.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAppKit } from \"@reown/appkit/vue\";\n\nexport default function Component() {\n  const { open, close } = useAppKit();\n}\n```\n\n----------------------------------------\n\nTITLE: RequestBody Type Definition for Sending Notifications in TypeScript\nDESCRIPTION: TypeScript interface defining the structure of the request body for sending notifications, including optional notification_id, notification details (type, title, body, url), and target accounts.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/notifications/backend-integration.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype RequestBody = {\n  notification_id?: string | null;\n  notification: {\n    type: string;\n    title: string;\n    body: string;\n    url?: string | null;\n  };\n  accounts: string[];\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Logos with GET /v3/logo/:size/:image_id\nDESCRIPTION: Describes how to access logo images by specifying size ('sm', 'md', 'lg') and the image id, with required projectId parameter. Supports retrieving logos for explorer entries.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/cloud/explorer.mdx#_snippet_6\n\nLANGUAGE: HTTP\nCODE:\n```\nGET https://explorer-api.walletconnect.com/v3/logo/md/32a77b79-ffe8-42c3-61a7-3e02e019ca00?projectId=YOUR_PROJECT_ID\n```\n\n----------------------------------------\n\nTITLE: Android View Navigation Component Setup with WalletConnect Modal\nDESCRIPTION: Provides an XML snippet showing how to integrate the WalletConnect modal into an Android View application using the Navigation Component. It defines the modal as a `<dialog>` destination in the navigation graph.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_29\n\nLANGUAGE: xml\nCODE:\n```\n<navigation >\n    <fragment\n        android:id=\"@+id/HomeFragment\"\n        android:name=\"com.walletconnect.sample.HomeFragment\">\n\n        <action\n            android:id=\"@+id/action_to_bottomSheet\"\n            app:destination=\"@id/bottomSheet\" />\n    </fragment>\n\n    <dialog\n        android:id=\"@+id/bottomSheet\"\n        android:name=\"com.walletconnect.wcmodal.ui.WalletConnectModalSheet\" />\n</navigation>\n```\n\n----------------------------------------\n\nTITLE: Initializing Wallet Connection Modal with View 'Account' in TypeScript\nDESCRIPTION: This snippet demonstrates how to open a wallet modal focusing on the user's account view after connection, using the `open` function with a view parameter. It's used for displaying user profile details after authentication.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/core/open.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nopen({ view: \"Account\" });\n```\n\n----------------------------------------\n\nTITLE: Installing AppKit SIWE Package (pnpm) - Bash\nDESCRIPTION: This snippet provides the pnpm command for installing @reown/appkit-siwe and siwe, which are needed to add SIWE authentication via AppKit. Use this in your project folder to add the required packages to your dependencies.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/siwe.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit-siwe siwe\n```\n\n----------------------------------------\n\nTITLE: Retrieving Wallet Provider Instance Using Reown AppKit in TypeScript\nDESCRIPTION: Shows how to access the underlying wallet provider through modal.getWalletProvider(). The returned provider instance can be used for advanced interactions such as sending transactions or signing messages, depending on the wallet capabilities.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/ethers/actions.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst walletProvider = modal.getWalletProvider();\n```\n\n----------------------------------------\n\nTITLE: Button for triggering balance retrieval in React component\nDESCRIPTION: Renders a button in React conditionally based on user connection status. When clicked, it invokes the balance-fetching function to display the user's ETH balance in the console.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/ethers-send-transaction.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nreturn (\n  isConnected && (\n    <div>\n      <button onClick={getBalance}>Get Balance</button>\n    </div>\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Using the <appkit-connect-button /> Web Component in HTML\nDESCRIPTION: Defines the customizable properties for the `<appkit-connect-button />` web component. Optional properties include `size` ('md' | 'sm'), `label` (string) for the default text, and `loadingLabel` (string) for the text shown when the connection modal is open.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/components.mdx#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<appkit-connect-button />\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Signing for SIWE Authentication\nDESCRIPTION: Shows how to implement a message signing function for SIWE authentication using Web3 SPM package. Creates a signature using the provided private key and MessageSignerFactory.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/notifications/notify/usage.mdx#_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nfunc onSign(message: String) -> CacaoSignature {\n    let privateKey = Data(hex: privateKey)\n    let signer = MessageSignerFactory(signerFactory: DefaultSignerFactory()).create()\n    let signature = try! signer.sign(message: message, privateKey: privateKey, type: .eip191)\n    return signature\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Session Event - WalletKit - Kotlin\nDESCRIPTION: Emits a specific event within an active session, such as `accountsChanged`. Requires the session topic, chain ID, and the event data object.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/usage.mdx#_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nval sessionTopic: String = /*Topic of Session*/\nval event: Wallet.Model.SessiomEvent = SessionEvent(name = \"accountsChanged\", data = \"0x000000000\")\n\nval sessionEmit = Wallet.Params.SessionEmit(topic = sessionTopic, chainId = \"eip155:1\", event = event)\n\nWalletKit.emitSessionEvent(sessionEmit) { error -> /*callback for error while emiting an event*/ }\n```\n\n----------------------------------------\n\nTITLE: Getting Current Notification Types using Client (TypeScript)\nDESCRIPTION: Fetches the current notification types (scopes) associated with the account's subscription to the current decentralized application (dapp) using the `client.getNotificationTypes()` method. The result is typically a map (`ScopeMap`) containing details for each scope.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/types/javascript.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// get scopes of current account's subscription to current dapp\nconst types = client.getNotificationTypes()\n```\n\n----------------------------------------\n\nTITLE: Installing Solana Wallet Adapters Package - Bash\nDESCRIPTION: These commands show how to install the `@solana/wallet-adapter-wallets` package using different Node.js package managers. This package contains various common Solana wallet adapter implementations and is a necessary dependency before configuring AppKit with custom Solana wallet support.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/custom-connectors.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @solana/wallet-adapter-wallets\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @solana/wallet-adapter-wallets\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun a @solana/wallet-adapter-wallets\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @solana/wallet-adapter-wallets\n```\n\n----------------------------------------\n\nTITLE: Create and Send a Solana Transaction Function\nDESCRIPTION: Defines an asynchronous function that checks for necessary wallet and connection objects, constructs a transfer transaction to a specified recipient, assigns recent blockhash, details the fee payer, and then sends the transaction. This exemplifies direct interaction with the Solana network.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-anza-adapter-react.mdx#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst handleSendTransaction = async () => {\n  if (!walletProvider || !address || !connection) {\n    return\n  }\n\n  const recipientAddress = new PublicKey('DG1Bq6muEMqaW6MHzWZFfQ8MmHiwvEuQcjVefVmPoV3j')\n\n  const transaction = new Transaction().add(\n    SystemProgram.transfer({\n      fromPubkey: walletProvider.publicKey,\n      toPubkey: recipientAddress,\n      lamports: 10000000\n    })\n  )\n  transaction.feePayer = walletProvider.publicKey\n\n  const { blockhash } = await connection.getLatestBlockhash()\n  transaction.recentBlockhash = blockhash\n  const tx = await walletProvider.sendTransaction(transaction, connection as Connection)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Notification Types on an Existing Subscription in React Native\nDESCRIPTION: Demonstrates how to update notification types on an existing subscription by specifying the topic and the new scope of notification types.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\n// `topic` - subscription topic of the subscription that should be updated.\n// `scope` - an array of notification types that should be enabled going forward. The current scopes can be found under `subscription.scope`.\nawait notifyClient.update({\n  topic,\n  scope: [\"alerts\"],\n});\n\n// -> Success/Failure will be received via the `notify_update` event registered previously.\n// -> Updated subscription will be emitted via the `notify_subscriptions_changed` watcher event.\n\n// get notification types by accessing `scope` member of a dapp's subscription\nconst notificationTypes = notifyClient\n  .getActiveSubscriptions({ account })\n  .filter((subscription) => subscription.topic === topic).scope;\n```\n\n----------------------------------------\n\nTITLE: Initializing Web3Inbox Client in React\nDESCRIPTION: Sets up the Web3Inbox client with project ID and domain configuration in the root App component. This initialization should be executed once in the application.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/usage/example/react.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n//App.tsx\nimport { initWeb3InboxClient } from \"@web3inbox/react\";\n\n...\n// The project ID and domain you setup in the Domain Setup section\nconst projectId = process.env.NEXT_PUBLIC_PROJECT_ID!;\nconst appDomain = process.env.NEXT_PUBLIC_APP_DOMAIN!;\n\ninitWeb3InboxClient({\n  projectId,\n  domain: appDomain,\n  allApps: process.env.NODE_ENV !== \"production\",\n});\n```\n\n----------------------------------------\n\nTITLE: Adding WalletConnectModal SDK to an iOS Project Using Swift Package Manager (Swift)\nDESCRIPTION: Provides instructions to add WalletConnectModal to an iOS project via Swift Package Manager both through Xcode UI and manifest files. Dependencies include linking against the WalletConnectV2 GitHub repository products. The snippets show the dependency declaration for Package.swift manifest and how to add the product to a target's dependencies. The SDK is currently in Alpha and may change.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/about.mdx#_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\ndependencies: [\\n  .package(\\n    name: \"WalletConnectV2\",\\n    url: \"https://github.com/WalletConnectV2/WalletConnectSwiftV2.git\",\\n    .upToNextMajor(from: \"1.6.4\")\\n  ),\\n\\n  // Any other dependencies you have...\\n],\n```\n\nLANGUAGE: swift\nCODE:\n```\n.target(\\n  name: \"MyTargetName\",\\n  dependencies: [\\n    // The product(s) you want (e.g. WalletConnectModal).\\n    .product(name: \"WalletConnectModal\", package: \"WalletConnectV2\"),\\n  ]\\n),\n```\n\n----------------------------------------\n\nTITLE: Updating ProGuard rules for AppKit usage\nDESCRIPTION: This code snippet guides updating ProGuard configuration to maintain necessary class keep rules for the new AppKit classes, replacing old Web3Modal package references with the updated AppKit package names.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-android.mdx#_snippet_3\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Remove the following code lines\n- -keep class com.walletconnect.web3.modal.client.Wallet$Model { *; }\n- -keep class com.walletconnect.web3.modal.client.Wallet { *; }\n\n+ -keep class com.reown.appkit.client.Wallet$Model { *; }\n+ -keep class com.reown.appkit.client.Wallet { *; }\n```\n\n----------------------------------------\n\nTITLE: Configuring Social Login Features - TypeScript\nDESCRIPTION: Explains how to specify which social platforms (X, Discord, Apple) are enabled for user authentication by providing an array of platform names to the `socials` property within the `features` option. Setting it to `false` or an empty array disables the feature.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/options.mdx#_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\ncreateAppKit({\n  //...\n  features: {\n    socials: [\"x\", \"discord\", \"apple\"],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Available Notification Types from Subscriptions in JavaScript\nDESCRIPTION: This snippet shows how to access the latest notification types specified by a dapp by examining the scope of an active subscription. These types determine the kinds of notifications a user can enable or disable.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/notify/usage.mdx#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst notificationTypes = notifyClient\n  .getActiveSubscriptions({ account })\n  .filter((subscription) => subscription.topic === topic).scope;\n```\n\n----------------------------------------\n\nTITLE: Retrieving DApps List with GET /v3/dapps\nDESCRIPTION: This snippet demonstrates how to fetch all listed dApps from the Cloud Explorer API, including pagination options. Requires a valid projectId and demonstrates typical request structure.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/cloud/explorer.mdx#_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nGET https://explorer-api.walletconnect.com/v3/dapps?projectId=YOUR_PROJECT_ID&entries=5&page=1\n```\n\n----------------------------------------\n\nTITLE: Configuring intent filter for Android deep links\nDESCRIPTION: Guides modifying the AndroidManifest.xml to handle custom URL schemes, allowing the app to be opened via deep links initiated by the wallet redirect.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/usage.mdx#_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<intent-filter>\n    <action android:name=\"android.intent.action.VIEW\" />\n    <category android:name=\"android.intent.category.DEFAULT\" />\n    <category android:name=\"android.intent.category.BROWSABLE\" />\n    <data android:scheme=\"exampleapp\" />\n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Customizing connector images in createAppKit for Solana connectors in TypeScript\nDESCRIPTION: Illustrates setting connector images for Solana specific connectors such as coinbaseWallet, phantom, and walletConnect. This visualization is critical for user recognition during wallet connection on Solana networks.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateAppKit({\n  connectorImages: {\n    coinbaseWallet: \"https://images.mydapp.com/coinbase.png\",\n    phantom: \"https://images.mydapp.com/phantom.png\",\n    walletConnect: \"https://images.mydapp.com/walletconnect.png\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Data Fetch with JavaScript\nDESCRIPTION: This code initializes a data fetch operation from an API endpoint, handling asynchronous requests and response parsing. It requires the fetch API and handles potential errors gracefully.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/onboarding/wallet-features.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function fetchData(url) {\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Fetch error:', error);\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Modules for Coinbase SDK (RN CLI)\nDESCRIPTION: Command to install the necessary Expo modules framework into a React Native CLI project using `npx`. This step is a prerequisite for integrating the Coinbase Mobile SDK, which relies on Expo modules.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/installation.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx install-expo-modules@latest\n```\n\n----------------------------------------\n\nTITLE: Retrieving Wallet Connection Error Using Reown AppKit in TypeScript\nDESCRIPTION: This snippet demonstrates how to access any error related to the wallet connection state using modal.getError(). It returns an error object or undefined if no error is currently present, helping in debugging connection or provider issues.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/ethers/actions.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst error = modal.getError();\n```\n\n----------------------------------------\n\nTITLE: Using <appkit-button> Web Component in HTML\nDESCRIPTION: This snippet demonstrates how to incorporate the <appkit-button> web component within a Vue.js template. The web component is used as a self-closing custom HTML tag, requiring no prior import due to its global availability in the project.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/wagmi/about/triggermodal.mdx#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<template>\n  <appkit-button />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing Mintlify CLI Globally using npm (Bash)\nDESCRIPTION: Installs the Mintlify command-line interface globally using npm (`npm install -g mintlify`). This allows the `mintlify` command to be run from any directory, enabling local documentation previews. Requires Node.js and npm.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/README.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install -g mintlify\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: Installs the required `react-native-webview` and `@reown/appkit-auth-ethers-react-native` packages using the Yarn package manager. These are necessary dependencies for integrating Reown's Ethers-based authentication in a React Native project.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers/email.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add react-native-webview @reown/appkit-auth-ethers-react-native\n```\n\n----------------------------------------\n\nTITLE: Subscribing to WalletConnect Session Events in C#\nDESCRIPTION: Shows how to subscribe to WalletConnect session events using the SignClient. This specific example subscribes to the `chainChanged` event, providing `OnChainChanged` as the callback method to handle the event when the connected wallet switches chains.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_48\n\nLANGUAGE: csharp\nCODE:\n```\nvar signClient = WalletConnect.Instance.SignClient;\nsignClient.SubscribeToSessionEvent(\"chainChanged\", OnChainChanged);\n```\n\n----------------------------------------\n\nTITLE: Configuring WalletConnect Notify Instance (iOS Swift)\nDESCRIPTION: Explains how to configure the main `Notify` instance in an iOS Swift project. This configuration requires specifying the APNS `environment` (debug or release) and providing a conforming implementation for the `CryptoProvider` protocol.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_14\n\nLANGUAGE: Swift\nCODE:\n```\ntry Notify.configure(environment: APNSEnvironment, crypto: CryptoProvider)\n```\n\n----------------------------------------\n\nTITLE: Controlling Modal Visibility with useAppKit (React)\nDESCRIPTION: This hook is the primary way to control the visibility and behavior of the AppKit modal. It provides functions to programmatically open and close the modal. Required dependency: `@reown/appkit/react`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/hooks.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAppKit } from \"@reown/appkit/react\";\n\nexport default function Component() {\n  const { open, close } = useAppKit();\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Enabled Notification Types using Client (TypeScript)\nDESCRIPTION: Updates the set of enabled notification types (scopes) by calling `client.update()` with an array of strings representing the names of the scopes to be enabled. This modifies the subscription settings for the current account and dapp.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/api/types/javascript.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclient.update(['enabledType-1', 'enabledType-2'])\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Repositories in Gradle (Kotlin)\nDESCRIPTION: Explains how to add `mavenCentral` and `jitpack.io` repositories to the `allprojects` block in the root `build.gradle.kts` file. This configuration is necessary to resolve dependencies hosted in these repositories, including the WalletKit library.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/installation.mdx#_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nallprojects {\n repositories {\n    mavenCentral()\n    maven { url \"https://jitpack.io\" }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Session Data (Swift)\nDESCRIPTION: Deletes all stored data associated with a specific topic, such as pairings, sessions, and keys, by calling the `cleanup` method on the `AppKit` instance. This helps in removing outdated or unwanted session information. Requires the session `topic`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/actions.mdx#_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\nAppKit.instance.cleanup(topic)\n```\n\n----------------------------------------\n\nTITLE: Marking WalletConnect Notify Messages as Read (JavaScript)\nDESCRIPTION: Shows how to mark one or more specific notification messages as read using `notifyClient.markNotificationsAsRead()`. This method requires the `topic` of the subscription and an array of the `notificationIds` to be marked.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Will mark the 2 specific notifications as read\nconst messageHistory = notifyClient.markNotificationsAsRead({\n  topic,\n  notificationIds: [\"notification-1\", \"notification-2\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing SIWX Custom Component in JavaScript\nDESCRIPTION: This snippet imports the SIWX Custom component from its relative path within the project structure. No code execution is provided, it's merely an import statement establishing dependency for usage in other parts of the application.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/siwx-custom.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport SiwxCustom from \"/snippets/appkit/shared/siwx/siwx-custom.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Installing Smart Session Experimental Package\nDESCRIPTION: Commands to install the `@reown/appkit-experimental` package, which includes the Smart Session feature, using various package managers (npm, Yarn, Bun, pnpm). This package is required for the smart session functionality.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/smart-sessions.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit-experimental\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit-experimental\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @reown/appkit-experimental\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit-experimental\n```\n\n----------------------------------------\n\nTITLE: Extending Session Duration in JavaScript\nDESCRIPTION: Demonstrates how to extend a session's expiry by an additional 7 days using the extendSession method, with optional handling of acknowledgment from the dapp.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/usage.mdx#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst { acknowledged } = await walletKit.extendSession({ topic });\n// if you wish to be notified when the dapp acks the extend\n// note that if the dapp is offline `acknowledged` will not resolve until it comes back online\nawait acknowledged();\n```\n\n----------------------------------------\n\nTITLE: Configuring AppKit Recommended Wallets (Swift)\nDESCRIPTION: Configures the AppKit SDK to prioritize specific wallets when fetching from WalletGuide. Requires an array of wallet IDs obtained from the WalletConnect explorer. This affects the order and visibility of wallets presented to the user.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/options.mdx#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nAppKit.configure(\n    ...\n    recommendedWalletIds: [String]\n    ...\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Verify API Domain Validation in WalletKit with JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to listen to the 'auth_request' event on the walletKit object to access the Verify API's domain validation information within the verifyContext. It shows how to extract validation status, origin, and scam flag to conditionally warn users and handle connection requests based on domain trustworthiness. Dependencies include the walletKit library that supports the 'auth_request' event with a verifyContext in the authentication request payload. Inputs include the authRequest object containing domain verification data. Outputs involve conditional logic to warn users or proceed with connections depending on domain validation status ('VALID', 'INVALID', 'UNKNOWN') and scam flag. This snippet assumes an asynchronous event handler and focuses on improving security by prompting users when suspicious domains are detected.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/verify.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n...\nwalletKit.on(\"auth_request\", async (authRequest) => {\n  const { verifyContext } = authRequest\n  const validation = verifyContext.verified.validation // can be VALID, INVALID or UNKNOWN\n  const origin = verifyContext.verified.origin // the actual verified origin of the request\n  const isScam = verifyContext.verified.isScam // true if the domain is flagged as malicious\n\n  // if the domain is flagged as malicious, you should warn the user as they may lose their funds - check the `Threat` case for more info\n  if(isScam) {\n    // show a warning screen to the user\n    // and proceed only if the user accepts the risk\n  }\n\n  switch(validation) {\n    case \"VALID\":\n      // proceed with the request - check the `Domain match` case for more info\n      break\n    case \"INVALID\":\n      // show a warning dialog to the user - check the `Mismatch` case for more info\n      // and proceed only if the user accepts the risk\n      break\n    case \"UNKNOWN\":\n      // show a warning dialog to the user - check the `Unverified` case for more info\n      // and proceed only if the user accepts the risk\n      break\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Get All Subscribers via cURL in Bash\nDESCRIPTION: This cURL command fetches a list of all accounts subscribed to the application. It performs a GET request to the `/<project-id>/subscribers` endpoint, including the necessary Authorization header with the API Secret.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/notifications/backend-integration.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://notify.walletconnect.com/<PROJECT_ID>/subscribers' \\\n  --header 'Authorization: Bearer <NOTIFY_API_SECRET>'\n```\n\n----------------------------------------\n\nTITLE: Extending a WalletConnect Session in Kotlin\nDESCRIPTION: Extends the expiry time of an active WalletConnect session by 7 days. Requires the session topic. The `SignClient.extend` function is called with the session topic parameter and includes an error callback.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_34\n\nLANGUAGE: kotlin\nCODE:\n```\nval sessionTopic: String = /*Topic of Session*/\nval extendParams = Sign.Params.Extend(sessionTopic = sessionTopic)\n\nSignClient.extend(extendParams) { error -> /*callback for error while extending a session*/ }\n```\n\n----------------------------------------\n\nTITLE: Rendering Socials Component in JSX\nDESCRIPTION: This snippet renders the imported Socials component within the page. It assumes a React (or similar) environment where components are used as JSX tags. The purpose is to incorporate social media links or content into the page layout.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/socials.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Socials />\n```\n\n----------------------------------------\n\nTITLE: Updating package.json Dependency for Reown WalletKit\nDESCRIPTION: Demonstrates how to replace the @walletconnect/web3wallet dependency with @reown/walletkit in your project's package.json file. This is the first step in the migration process.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/upgrade/from-web3wallet-web.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n/* highlight-delete-start */\n\"@walletconnect/web3wallet\": \"^x.y.z\"\n/* highlight-delete-end */\n/* highlight-add-start */\n\"@reown/walletkit\": \"^1.0.0\"\n/* highlight-add-end */\n```\n\n----------------------------------------\n\nTITLE: Extending Active Session - WalletKit - Kotlin\nDESCRIPTION: Extends the expiration time of an active session. Requires only the session topic. Calling this function typically extends the session by a fixed duration (e.g., 7 days).\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/usage.mdx#_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval sessionTopic: String = /*Topic of Session*/\nval extendParams = Wallet.Params.SessionExtend(sessionTopic = sessionTopic)\n\nWalletKit.extendSession(extendParams) { error -> /*callback for error while extending a session*/ }\n```\n\n----------------------------------------\n\nTITLE: Example Response for Subscriber Information\nDESCRIPTION: JSON response example from the subscribers endpoint, showing subscription information for an account including the notification types they're subscribed to.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/notifications/backend-integration.mdx#_snippet_5\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"eip155:1:0x9AfEaC202C837df470b5A145e0EfD6a574B21029\": {\n    \"notification_types\": [\"4d1c97ad-c182-4097-8f2c-8f80c0674df2\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Chains with GET /v3/chains\nDESCRIPTION: Shows how to retrieve chain data registered under CASA namespace, with options to include testnets and filter by namespace(s). Useful for exploring supported chains.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/cloud/explorer.mdx#_snippet_5\n\nLANGUAGE: HTTP\nCODE:\n```\nGET https://explorer-api.walletconnect.com/v3/chains?projectId=YOUR_PROJECT_ID\n```\n\nLANGUAGE: HTTP\nCODE:\n```\nGET https://explorer-api.walletconnect.com/v3/chains?projectId=YOUR_PROJECT_ID&testnets=false\n```\n\nLANGUAGE: HTTP\nCODE:\n```\nGET https://explorer-api.walletconnect.com/v3/chains?projectId=YOUR_PROJECT_ID&namespaces=eip155,cosmos\n```\n\n----------------------------------------\n\nTITLE: Installing Web3Inbox via npm\nDESCRIPTION: Installs the '@web3inbox/core' and '@web3inbox/react' packages using the Node Package Manager (npm). This command adds the specified packages as dependencies to your project's package.json file. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/usage/installation/react.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @web3inbox/core @web3inbox/react\n```\n\n----------------------------------------\n\nTITLE: Registering Device Token with WalletKit in Kotlin\nDESCRIPTION: This function registers the device token obtained from FCM or APNs with WalletKit to enable push notifications. It requires the Firebase access token, an encrypted flag, and callbacks for success and error handling. Dependencies include WalletKit SDK and Firebase Messaging SDK.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/notifications/push.mdx#_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nval firebaseAccessToken: String = //FCM access token received through the Firebase Messaging SDK\nval enableEncrypted: Boolean = true //Flag that enables receiveing the detailed notifications\n\nWalletKit.registerDeviceToken(\n    firebaseAccessToken = firebaseAccessToken,\n    enableEncrypted = enableEncrypted,\n    onSuccess = {\n        // callback triggered once registered successfully with the Push Server\n    },\n    onError = { error: Wallet.Model.Error ->\n        // callback triggered if there's an exception thrown during the registration process\n    })\n```\n\n----------------------------------------\n\nTITLE: Enabling swaps feature in createAppKit configuration in TypeScript\nDESCRIPTION: Shows how to enable the swaps feature, which allows token swap operations within the AppKit. This feature is enabled by default, but can be explicitly defined through the features object.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateAppKit({\n  //...\n  features: {\n    swaps: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using the <appkit-account-button /> Web Component in HTML\nDESCRIPTION: Defines the customizable properties for the `<appkit-account-button />` web component. Optional properties include `disabled` (boolean) to enable/disable the button and `balance` ('show' | 'hide') to control the display of the user's balance.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/components.mdx#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<appkit-account-button />\n```\n\n----------------------------------------\n\nTITLE: Mark All Notifications as Read via cURL in Bash\nDESCRIPTION: This cURL command triggers the `/v1/<project-id>/mark-all-as-read` endpoint to mark all notifications associated with the project as read. It sends a POST request including the Authorization header with the API Secret.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/notifications/backend-integration.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST 'https://notify.walletconnect.com/v1/<PROJECT_ID>/mark-all-as-read' \\\n  --header 'Authorization: Bearer <NOTIFY_API_SECRET>'\n```\n\n----------------------------------------\n\nTITLE: Notification Types Definition in React\nDESCRIPTION: This snippet defines various notification types used within the app, enabling categorization and filtering of notifications. It offers a structured approach to manage different notification categories.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/notifications/frontend-integration/api.mdx#_snippet_5\n\nLANGUAGE: MDX\nCODE:\n```\n<Types />\n```\n\n----------------------------------------\n\nTITLE: Importing Analytics Component in JavaScript\nDESCRIPTION: This snippet illustrates importing the Analytics component from the specified path. It prepares the component for use within a React application, relying on MDX files as modules. The import statement depends on a build setup that supports MDX files as React components.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/cloud/analytics.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Analytics from \"/snippets/cloud/analytics.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Retrieving Wallet Provider Type Using Reown AppKit in TypeScript\nDESCRIPTION: Demonstrates retrieving the type of the connected wallet provider via modal.getWalletProviderType(). This typically returns a string or enum indicating the wallet type (e.g., MetaMask, WalletConnect), enabling provider-specific logic in the app.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/ethers/actions.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst walletProviderType = modal.getWalletProviderType();\n```\n\n----------------------------------------\n\nTITLE: Adding MacOS Network Permissions for reown_walletkit\nDESCRIPTION: XML configuration that needs to be added to MacOS entitlements files to allow the reown_walletkit package to connect to WebSocket servers. This should be added to both DebugProfile.entitlements and Release.entitlements files.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/installation.mdx#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<key>com.apple.security.network.client</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: Installation commands for Ethers SDK without version restriction\nDESCRIPTION: Provides commands for installing the Ethers SDK, compatible with any version, using multiple package managers. Facilitates flexibility for project requirements.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/installation.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm\ninstall @reown/appkit @reown/appkit-adapter-ethers ethers\n```\n\nLANGUAGE: bash\nCODE:\n```\nYarn\nadd @reown/appkit @reown/appkit-adapter-ethers ethers\n```\n\nLANGUAGE: bash\nCODE:\n```\nBun\nbun add @reown/appkit @reown/appkit-adapter-ethers ethers\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm\nadd @reown/appkit @reown/appkit-adapter-ethers ethers\n```\n\n----------------------------------------\n\nTITLE: Pushing Git Branch to Remote Fork (Bash)\nDESCRIPTION: Pushes the current local branch (e.g., 'feature/your-feature-name') to the remote repository named 'origin', which is typically the user's fork. This makes the branch available on the remote for creating a Pull Request.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ngit push origin feature/your-feature-name\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies using pnpm (Bash)\nDESCRIPTION: Installs the project's dependencies listed in the lockfile using the `pnpm install` command. This step is necessary before running the documentation development server with pnpm. Requires Node.js and pnpm to be installed.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Server-Side Database Dependency (Node.js)\nDESCRIPTION: Shows the installation commands for the `lokijs` package, which is a required dependency when using the WalletConnect Notify SDK in a Node.js server environment. This package is not needed for browser-only implementations.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install lokijs --save\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add lokijs --save\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun a lokijs --save\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add lokijs --save\n```\n\n----------------------------------------\n\nTITLE: Initializing the Notification System using JavaScript\nDESCRIPTION: This snippet initializes the notification system by importing and rendering the 'Initialization' component, which prepares the environment for further notification management operations. It depends on the 'initialization/javascript.mdx' module and is essential for setting up the API context.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/notifications/frontend-integration/api.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Initialization />\n```\n\n----------------------------------------\n\nTITLE: Initializing WalletConnect Notify Client (JavaScript)\nDESCRIPTION: Demonstrates how to import and initialize the `NotifyClient` instance from the SDK. Initialization is asynchronous and requires your project's unique `projectId` obtained from the WalletConnect Cloud dashboard.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NotifyClient } from \"@walletconnect/notify-client\";\n\nconst notifyClient = await NotifyClient.init({\n  projectId: \"<YOUR PROJECT ID>\",\n});\n```\n\n----------------------------------------\n\nTITLE: Installing WalletConnect Sign Client npm Package in Web Environment\nDESCRIPTION: This code snippet provides shell commands to install the WalletConnect Sign Client package via npm, Yarn, Bun, or pnpm for web development. It includes additional steps to install LokiJS for Node.js storage management, vital for persistent session management in web applications.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/overview.mdx#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n```bash\nnpm install @walletconnect/sign-client\n```\n```bash\nYarn add @walletconnect/sign-client\n```\n```bash\nBun add @walletconnect/sign-client\n```\n```bash\npnpm add @walletconnect/sign-client\n```\n\n# For Node.js storage requirement\n```bash\nnpm install --save @walletconnect/sign-client lokijs@1.x\n```\n```bash\nYarn add @walletconnect/sign-client lokijs@1.x\n```\n```bash\nBun add --save @walletconnect/sign-client lokijs@1.x\n```\n```bash\npnpm add @walletconnect/sign-client lokijs@1.x\n```\n```\n\n----------------------------------------\n\nTITLE: Including Reown AppKit Navigation Graph in XML\nDESCRIPTION: Includes the predefined AppKit navigation graph into a main application navigation graph defined in XML. This makes the destinations within the AppKit graph available for navigation from other destinations in the main graph.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/usage.mdx#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<navigation >\n    <fragment\n        android:id=\"@+id/HomeFragment\"\n        android:name=\"com.reown.sample.HomeFragment\">\n    </fragment>\n\n    <include app:graph =\"@navigation/appkit_graph\"/>\n</navigation>\n```\n\n----------------------------------------\n\nTITLE: Installing WalletConnect Sign Client via NuGet in .NET\nDESCRIPTION: This command provides how to add the WalletConnect Sign Client library to a .NET project using NuGet Package Manager, facilitating integration of WalletConnect protocol functionalities within .NET applications.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/overview.mdx#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ndotnet add package WalletConnect.Sign\n```\n\n----------------------------------------\n\nTITLE: Marking All Notifications as Read with cURL\nDESCRIPTION: cURL command for marking all notifications as read for a project, using a POST request with authorization.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/notifications/backend-integration.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST 'https://notify.walletconnect.com/v1/<PROJECT_ID>/mark-all-as-read' \\\n  --header 'Authorization: Bearer <NOTIFY_API_SECRET>'\n```\n\n----------------------------------------\n\nTITLE: Subscribing to AppKit Theme Changes in TypeScript\nDESCRIPTION: Demonstrates how to subscribe to changes in the AppKit modal's theme (either mode or variables) using `modal.subscribeTheme(callback)`. The callback receives the new theme object. Returns an unsubscribe function. Requires an initialized `modal` instance.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/actions.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst unsubscribe = modal.subscribeTheme((newTheme) => console.log(newTheme));\n```\n\n----------------------------------------\n\nTITLE: React Component for Registering Device Push Notifications\nDESCRIPTION: This snippet includes the RegisteringPush React component for registering user devices for push notifications. It manages device tokens and permissions necessary for push notification delivery in web or mobile environments.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/frontend-integration/api.mdx#_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n<RegisteringPush />\n```\n\n----------------------------------------\n\nTITLE: Data Processing Utility in Python\nDESCRIPTION: This Python script performs data cleaning by removing null entries and normalizing text fields. It depends on the pandas library and is used to prepare datasets for analysis.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/onboarding/wallet-features.mdx#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport pandas as pd\n\ndef clean_data(df):\n    df = df.dropna()\n    df['text'] = df['text'].str.lower()\n    return df\n\n```\n\n----------------------------------------\n\nTITLE: Updating Import Statements in React\nDESCRIPTION: Changes required in the import statements when migrating from Web3Modal v5 to Reown AppKit in React applications.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers-web.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following imports\n- import { createWeb3Modal, defaultConfig } from '@web3modal/ethers/react'\n- import { arbitrum, mainnet } from 'viem/chains'\n\n// Add the following imports\n+ import { createAppKit } from '@reown/appkit/react'\n+ import { arbitrum, mainnet } from '@reown/appkit/networks'\n+ import { EthersAdapter } from '@reown/appkit-adapter-ethers'\n```\n\n----------------------------------------\n\nTITLE: Error Handling with getError Method in AppKit\nDESCRIPTION: Shows how to retrieve errors from an AppKit modal instance using the getError method, which can be useful for debugging or displaying error messages to users.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/ethers/composables.mdx#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nfunction Components() {\n  const error = modal.getError();\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing expo-crypto dependency via npm shell command\nDESCRIPTION: Installs the expo-crypto package using Expo CLI's npm interface. This package is required to provide cryptographic functionality when the native crypto API is unavailable on Expo SDK 48 environments.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/expo/additional-expo48.mdx#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpx expo install expo-crypto\n```\n\n----------------------------------------\n\nTITLE: Defining defaultNetwork option using Solana network in TypeScript\nDESCRIPTION: Shows usage of the Solana network imported from @reown/appkit/networks as the defaultNetwork configuration. This enables the modal and AppKit to start connections on Solana's network.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { solana } from \"@reown/appkit/networks\";\n\ncreateAppKit({\n  //...\n  defaultNetwork: solana,\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling wallet guide text in createAppKit configuration in TypeScript\nDESCRIPTION: Illustrates disabling the wallet guide instructional text that helps users who do not yet have wallets, by setting enableWalletGuide to false. The guide is enabled by default to improve user onboarding.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateAppKit({\n  //...\n  enableWalletGuide: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Rejecting a Session in JavaScript\nDESCRIPTION: Demonstrates how to reject a session proposal by providing an appropriate error code and reason according to protocol specifications.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/usage.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n_walletKit.onSessionProposal.subscribe((SessionProposalEvent? event) async {\n  // display a prompt for the user to approve or reject the session\n  // ....\n  // If rejected\n  await _walletKit.rejectSession(\n    id: event.id,\n    reason: Errors.getSdkError(Errors.USER_REJECTED).toSignError(),\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing WalletConnect Sign Client in a Wallet\nDESCRIPTION: Set up the WalletConnect Sign client with your project ID and optional parameters like relay URL and wallet metadata.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst signClient = await SignClient.init({\n  projectId: \"<YOUR PROJECT ID>\",\n  // optional parameters\n  relayUrl: \"<YOUR RELAY URL>\",\n  metadata: {\n    name: \"Wallet name\",\n    description: \"A short description for your wallet\",\n    url: \"<YOUR WALLET'S URL>\",\n    icons: [\"<URL TO WALLET'S LOGO/ICON>\"],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing modal trigger in JavaScript\nDESCRIPTION: Add event listeners to trigger the AppKit modal in JavaScript. This implementation allows users to open the wallet connection dialog in vanilla JavaScript applications.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_27\n\nLANGUAGE: js\nCODE:\n```\ndocument.getElementById('my-button').addEventListener('click', () => {\n    modal.open()\n})\n\n<button id=\"my-button\">Connect Wallet</button>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Analytics Component in MDX\nDESCRIPTION: This snippet demonstrates how to import an Analytics component from a snippets directory and render it within an MDX file. The component is imported from a relative path and then rendered as a JSX element.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/cloud/analytics.mdx#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntitle: Analytics\n---\n\nimport Analytics from \"/snippets/cloud/analytics.mdx\";\n\n<Analytics />\n```\n\n----------------------------------------\n\nTITLE: Importing and Implementing Socials Component in MDX\nDESCRIPTION: This snippet shows how to import the Socials component from the appkit shared snippets directory and implement it in an MDX file. The component likely provides social media integration functionality.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/socials.mdx#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Socials from \"/snippets/appkit/shared/socials.mdx\";\n\n<Socials />\n```\n\n----------------------------------------\n\nTITLE: Pinging a pairing peer in React Native SDK\nDESCRIPTION: Sends a ping message to a peer by calling `ping()` with the pairing's `topic`, used to verify the connection's health.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait sdkClient.core.pairing.ping({ topic: \"1b3eda3f4...\" })\n```\n\n----------------------------------------\n\nTITLE: Opening On-Ramp Modal using AppKit Hook - JavaScript\nDESCRIPTION: This snippet demonstrates how to programmatically open the On-Ramp modal using the `open` function obtained from the `useAppKit` hook. It calls the `open` function with a configuration object, specifying the initial view of the modal, such as 'OnRampProviders', allowing developers to control the user experience when opening the feature. Requires integration with the AppKit library providing the hook.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/transactions/onramp.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { open } = useAppKit()\n\nopen({ view: 'OnRampProviders' })\n```\n\n----------------------------------------\n\nTITLE: Installing @reown/appkit-wallet-button via npm\nDESCRIPTION: This snippet shows how to install the @reown/appkit-wallet-button package using npm, ensuring the required dependencies are added to the project for wallet button functionalities.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/components.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit-wallet-button\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with Yarn in React\nDESCRIPTION: This snippet provides the command to install Reown AppKit packages using Yarn for React projects, ensuring dependencies are correctly added.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit @reown/appkit-adapter-wagmi @tanstack/react-query\n```\n\n----------------------------------------\n\nTITLE: Android View Kotlin DSL Navigation Setup with WalletConnect Modal\nDESCRIPTION: Shows how to set up Android View navigation using the Kotlin DSL to include the WalletConnect modal. It defines the navigation graph programmatically, including the modal destination.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_31\n\nLANGUAGE: kotlin\nCODE:\n```\nimport androidx.navigation.createGraph\nimport androidx.navigation.fragment.fragment\nimport com.walletconnect.wcmodal.ui.walletConnectModal\n\nnavController.graph = navController.createGraph(\"Home\") {\n    fragment<HomeFragment>(\"Home\")\n    walletConnectModal()\n}\n```\n\n----------------------------------------\n\nTITLE: Disconnecting Sessions in JavaScript\nDESCRIPTION: Demonstrates how to disconnect a session including the optional removal of pairing topic, with appropriate error handling.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/usage.mdx#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nawait _walletKit.disconnectSession(\n  topic: session.topic,\n  reason: Errors.getSdkError(Errors.USER_DISCONNECTED).toSignError(),\n);\n\n// To disconnect the pairing topic as well\nawait _walletKit.core.pairing.disconnect(\n  topic: pairing.topic,\n);\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server using pnpm (Bash)\nDESCRIPTION: Runs the development script defined in the project's package.json, typically starting a local development server for the Mintlify documentation site. Requires dependencies to be installed via `pnpm install` first.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Importing Relay Component in JavaScript\nDESCRIPTION: This snippet demonstrates the import of the Relay component from a specified path within the project, enabling its usage in the current module. It sets up the component for rendering or further configuration in the React application.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/cloud/relay.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Relay from \"/snippets/cloud/relay.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Pairing with Dapps using WalletKit in Swift\nDESCRIPTION: Initiates a pairing connection using a URI extracted from a QR code. This is the first step in establishing a connection between a wallet and a dapp.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/usage.mdx#_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\ntry await WalletKit.instance.pair(uri: uri)\n```\n\n----------------------------------------\n\nTITLE: Pairing with a peer's URI in React Native SDK\nDESCRIPTION: Pairs with a peer by passing the `uri` object to the `pair()` method. This finalizes the connection and activates communication between wallet and dapp.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait sdkClient.core.pairing.pair({ uri: \"wc:1b3eda3f4...\" })\n```\n\n----------------------------------------\n\nTITLE: Updating, Extending, and Pinging WalletConnect Sessions in C#\nDESCRIPTION: Shows how to manage existing sessions by updating namespaces, extending session lifetime, and sending ping requests for session health checks. Each method requires the session topic identifier and awaits acknowledgment confirming the operation.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_44\n\nLANGUAGE: csharp\nCODE:\n```\nvar newNamespaces = new Namespaces(...);\nvar request = await walletClient.UpdateSession(sessionTopic, newNamespaces);\nawait request.Acknowledged();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar request = await walletClient.Extend(sessionTopic);\nawait request.Acknowledged();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar request = await walletClient.Ping(sessionTopic);\nawait request.Acknowledged();\n```\n\n----------------------------------------\n\nTITLE: Using useAppKitAccount Hook in Vue for Web3 Account Information\nDESCRIPTION: Demonstrates how to use the useAppKitAccount hook to access a client's wallet information including the wallet address and connection status.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/ethers/composables.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAppKitAccount } from \"@reown/appkit/vue\";\n\nconst { address, status, isConnected } = useAppKitAccount();\n```\n\n----------------------------------------\n\nTITLE: Set Accent Color - WalletConnectModal React Native - TS\nDESCRIPTION: Illustrates how to set the `accentColor` prop on the WalletConnectModal component in React Native to customize the primary highlight color used throughout the modal. Defaults to undefined, allowing system or default colors.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/theming.mdx#_snippet_3\n\nLANGUAGE: TS\nCODE:\n```\n<WalletConnectModal\n  ...\n  accentColor=\"#9090FF\"\n/>\n```\n\n----------------------------------------\n\nTITLE: WalletConnect Modal closeModal API Reference - TypeScript\nDESCRIPTION: Provides the TypeScript signature for the `closeModal` function. It shows that the function takes no arguments and returns void, indicating a synchronous action.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ncloseModal: () => void\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with Wagmi using pnpm\nDESCRIPTION: Command for custom installation of Reown AppKit with Wagmi adapter using pnpm package manager. Installs required dependencies including wagmi, viem, and react-query.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/installation.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit @reown/appkit-adapter-wagmi wagmi viem @tanstack/react-query\n```\n\n----------------------------------------\n\nTITLE: Installing WalletConnect Nethereum Interceptor via openupm\nDESCRIPTION: This command uses the openupm command-line interface to add the WalletConnect Nethereum interceptor package to a Unity project. This package facilitates routing Nethereum transaction signing requests through WalletConnect.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\nopenupm add com.walletconnect.nethereum\n```\n\n----------------------------------------\n\nTITLE: Initializing Unity SDK and Core (C#)\nDESCRIPTION: Initialize the WalletConnect Unity SDK, either as a singleton or manually, and obtain a reference to the Core instance for accessing the Pairing API.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n// Initialize singleton\nawait WalletConnect.Instance.InitializeAsync();\n\n// Or handle instancing manually\nvar walletConnectUnity = new WalletConnect();\nawait walletConnectUnity.InitializeAsync();\n\nvar core = WalletConnect.Instance.SignClient.Core;\n```\n\n----------------------------------------\n\nTITLE: Updating Import Statements in JavaScript\nDESCRIPTION: Changes required in the import statements when migrating from Web3Modal v5 to Reown AppKit in JavaScript applications.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers-web.mdx#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n// Remove the following imports\n- import { createWeb3Modal, defaultConfig } from '@web3modal/ethers'\n\n// Add the following imports\n+ import { createAppKit } from '@reown/appkit'\n+ import { arbitrum, mainnet } from '@reown/appkit/networks'\n+ import { EthersAdapter } from '@reown/appkit-adapter-ethers'\n```\n\n----------------------------------------\n\nTITLE: Configuring Repository Sources in Root Gradle File\nDESCRIPTION: Sets up the necessary Maven repositories in the root build.gradle.kts file to access Reown dependencies, including JitPack for external packages.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/core/installation.mdx#_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nallprojects {\n   repositories {\n      mavenCentral()\n      maven { url \"https://jitpack.io\" }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Install WalletConnect Modal (pnpm)\nDESCRIPTION: Installs the WalletConnectModal library using pnpm, providing the UI components necessary for connecting wallets in Web and React Native Dapps.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @walletconnect/modal\n```\n\n----------------------------------------\n\nTITLE: Importing Cloud Banner Component from MDX Module\nDESCRIPTION: Imports the CloudBanner component from an MDX file, enabling its usage within React components to display a cloud-themed banner or information snippet.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/embedded-widget/usage.mdx#_snippet_0\n\nLANGUAGE: MDX\nCODE:\n```\nimport CloudBanner from \"/snippets/cloud-banner.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Creating pairing in React Native with WalletConnect SDK\nDESCRIPTION: Creates a new pairing asynchronously, returning the pairing `topic` and `uri` which can be shared with a peer. Useful for establishing initial connection.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {topic, uri} = await sdkClient.core.pairing.create()\n```\n\n----------------------------------------\n\nTITLE: Getting Active Session by Topic - Android Kotlin\nDESCRIPTION: Shows how to retrieve a specific active WalletConnect session using its topic in Android Kotlin. The `getActiveSessionByTopic()` function returns a `Modal.Model.Session` object for the given topic.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_38\n\nLANGUAGE: kotlin\nCODE:\n```\nWalletConnectModal.getActiveSessionByTopic(topic)\n```\n\n----------------------------------------\n\nTITLE: Enabling Network Selection View in TypeScript\nDESCRIPTION: Configuration option to enable the network selection view before wallet selection when multiple chains are configured. When set to true, users will be presented with a network selection screen first.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/web3modal/v2/_partials/options/enableNetworkView.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenableNetworkView: true\n```\n\n----------------------------------------\n\nTITLE: Importing useAppKitWallet Hook in TSX\nDESCRIPTION: Shows the necessary import statement to bring the `useAppKitWallet` hook into a React project using TypeScript/TSX, required for using wallet-specific connection buttons.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/hooks.mdx#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAppKitWallet } from \"@reown/appkit-wallet-button/react\";\n```\n\n----------------------------------------\n\nTITLE: Installing AppKit SIWE Package with Yarn\nDESCRIPTION: Command for installing the One-Click Auth dependencies including the AppKit SIWE package, the SIWE library, and viem using Yarn package manager.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/siwe.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit-siwe siwe viem\n```\n\n----------------------------------------\n\nTITLE: Creating a new pairing with WalletConnect Android SDK\nDESCRIPTION: Initializes a new pairing object by calling `CoreClient.Pairing.create()`, which returns a pairing instance containing a URI for establishing a connection with a peer.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#_snippet_16\n\nLANGUAGE: Kotlin\nCODE:\n```\nval pairing: Pairing? = CoreClient.Pairing.create() { error -> }\n```\n\n----------------------------------------\n\nTITLE: Creating WalletConnect Notify Subscription (JavaScript)\nDESCRIPTION: Demonstrates how to initiate a new notification subscription for an account to a specific dapp using `notifyClient.subscribe()`. It requires the target account address and the domain of the dapp to subscribe to. The result is reflected via the previously registered `notify_update` and `notify_subscriptions_changed` events.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Get the domain of the target dapp from the Explorer API response\nconst appDomain = new URL(fetchedExplorerDapp.platform_browser).hostname;\n\n// Subscribe to `fetchedExplorerDapp` by passing the account to be subscribed and the domain of the target dapp.\nawait notifyClient.subscribe({\n  account,\n  appDomain,\n});\n\n// -> Success/Failure will be received via the `notify_update` event registered previously.\n// -> New subscription will be emitted via the `notify_subscriptions_changed` watcher event.\n```\n\n----------------------------------------\n\nTITLE: Installing Expo Crypto Package\nDESCRIPTION: Command to install the Expo Crypto package to provide cryptographic functionality in Expo projects.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/notifications/notify/installation.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add expo-crypto\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode - TypeScript\nDESCRIPTION: Explains how to activate debug mode for the AppKit instance by setting the `debug` option to `true`. This enables UI alerts which are helpful during the debugging process.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/options.mdx#_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\ncreateAppKit({\n  //...\n  debug: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Example Session Namespaces Response in JSON\nDESCRIPTION: Shows the format of namespace responses from wallets, which include the accounts, methods, and events the wallet supports for each blockchain.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/usage.mdx#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"eip155\": {\n    \"accounts\": [\n      \"eip155:137:0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb\",\n      \"eip155:1:0xab16a96d359ec26a11e2c2b3d8f8b8942d5bfcdb\"\n    ],\n    \"methods\": [\"eth_sign\"],\n    \"events\": [\"accountsChanged\"]\n  },\n  \"cosmos\": {\n    \"accounts\": [\n      \"cosmos:cosmoshub-4:cosmos1t2uflqwqe0fsj0shcfkrvpukewcw40yjj6hdc0\"\n    ],\n    \"methods\": [\"cosmos_signDirect\", \"personal_sign\"],\n    \"events\": [\"someCosmosEvent\", \"proofFinalized\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Stub Extension for AuthRequestParams in Swift\nDESCRIPTION: Provides a utility extension method to create a stub AuthRequestParams object with default or custom values. This facilitates quick generation of authentication request parameters including domain, chains, nonce, URI, statement, resources for ReCaps scopes, and authorization methods. It enables easier testing and integration of the authenticate() method.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_19\n\nLANGUAGE: Swift\nCODE:\n```\nextension AuthRequestParams {\n    static func stub(\n        domain: String = \"yourDappDomain.com\",\n        chains: [String] = [\"eip155:1\", \"eip155:137\"],\n        nonce: String = \"uniqueNonce\",\n        uri: String = \"https://yourDappDomain.com/login\",\n        statement: String? = \"I accept the Terms of Service: https://yourDappDomain.com/tos\",\n        resources: [String]? = nil, // here your dapp may request authorization with recaps\n        methods: [String]? = [\"personal_sign\", \"eth_sendTransaction\"]\n    ) -> AuthRequestParams {\n        return try! AuthRequestParams(\n            domain: domain,\n            chains: chains,\n            nonce: nonce,\n            uri: uri,\n            statement: statement,\n            resources: resources,\n            methods: methods\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Proposal Namespaces in JSON\nDESCRIPTION: Shows the format of namespace requests from dapps, which specify the blockchains, methods, and events the dapp wants to interact with.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/usage.mdx#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"eip155\": {\n    \"chains\": [\"eip155:137\", \"eip155:1\"],\n    \"methods\": [\"eth_sign\"],\n    \"events\": [\"accountsChanged\"]\n  },\n  \"cosmos\": {\n    \"chains\": [\"cosmos:cosmoshub-4\"],\n    \"methods\": [\"cosmos_signDirect\"],\n    \"events\": [\"someCosmosEvent\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating CocoaPods Dependency from Web3Wallet to WalletKit\nDESCRIPTION: Provides the necessary change for projects using CocoaPods. The Podfile entry should be updated from `pod 'Web3Wallet', '~> 1.0'` to `pod 'WalletKit', '~> 1.0'` to include the correct library.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/upgrade/from-web3wallet-ios.mdx#_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\n/* highlight-delete-start */\n- pod 'Web3Wallet', '~> 1.0'\n/* highlight-delete-end */\n/* highlight-add-start */\n+ pod 'WalletKit', '~> 1.0'\n/* highlight-add-end */\n```\n\n----------------------------------------\n\nTITLE: Installing Additional Utility Packages via Expo CLI\nDESCRIPTION: This command uses the Expo CLI (`npx expo install`) to add supplementary packages often required for full-featured React Native applications using Web3 functionality. These include async storage for persistence, random value generation polyfills, SVG rendering capabilities, modals, network information access, a compatibility layer for WalletConnect, and Expo application utilities.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/wagmi/about/installation-expo.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx expo install @react-native-async-storage/async-storage react-native-get-random-values react-native-svg react-native-modal @react-native-community/netinfo @walletconnect/react-native-compat expo-application\n```\n\n----------------------------------------\n\nTITLE: Configuring ExcludedWalletIds for ReownAppKitModal in Dart\nDESCRIPTION: This snippet shows how to exclude specific wallets from appearing in the connection modal. This is useful when you want to prevent certain wallets from being offered as connection options to your users.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/options.mdx#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal Set<String> excludedWalletIds = {\n  'c57ca95b47569778a828d19178114f4db188b89b763c899ba0be274e97267d96', // MetaMask\n  '4622a2b2d6af1c9844944291e5e7351a6aa24cd7b23099efac1b2fd875da31a0', // Trust\n  'fd20dc426fb37566d803205b19bbc1d4096b248ac04548e3cfb6b3a38bd033aa', // Coinbase Wallet\n}\n```\n\n----------------------------------------\n\nTITLE: Available Publishers for Sign Client in Swift\nDESCRIPTION: A list of available publishers that iOS developers can subscribe to for monitoring various WalletConnect events like session proposals, requests, connection status, and more.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/wallet-usage.mdx#_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\npublic var sessionsPublisher: AnyPublisher<[Session], Never>\npublic var sessionProposalPublisher: AnyPublisher<(proposal: Session.Proposal, context: VerifyContext?), Never>\npublic var sessionRequestPublisher: AnyPublisher<(request: Request, context: VerifyContext?), Never>\npublic var socketConnectionStatusPublisher: AnyPublisher<SocketConnectionStatus, Never>\npublic var sessionSettlePublisher: AnyPublisher<Session, Never>\npublic var sessionDeletePublisher: AnyPublisher<(String, Reason), Never>\npublic var sessionResponsePublisher: AnyPublisher<Response, Never>\npublic var sessionRejectionPublisher: AnyPublisher<(Session.Proposal, Reason), Never>\npublic var sessionUpdatePublisher: AnyPublisher<(sessionTopic: String, namespaces: [String : SessionNamespace]), Never>\npublic var sessionEventPublisher: AnyPublisher<(event: Session.Event, sessionTopic: String, chainId: Blockchain?), Never>\npublic var sessionUpdateExpiryPublisher: AnyPublisher<(sessionTopic: String, expiry: Date), Never>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Analytics Component in MDX\nDESCRIPTION: This snippet demonstrates how to import an analytics component from a snippets directory and render it in an MDX documentation page. The import statement references a component file located at '/snippets/cloud/analytics.mdx'.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/cloud/analytics.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Analytics from \"/snippets/cloud/analytics.mdx\";\n\n<Analytics />\n```\n\n----------------------------------------\n\nTITLE: Configuring AppKit and updating React components\nDESCRIPTION: Initialize AppKit with the Wagmi adapter and update React component structure. This includes replacing WagmiConfig with WagmiProvider while maintaining QueryClientProvider for data fetching.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following code line\n- createWeb3Modal({ wagmiConfig, projectId, chains })\n\n// Add the following code lines\n+ createAppKit({\n adapters: [wagmiAdapter],\n networks: [mainnet, arbitrum],\n metadata: metadata,\n projectId,\n features: {\n   analytics: true,\n }\n})\n\nexport default function App() {\n  return (\n    <>\n    // Remove the following code line\n-   <WagmiConfig config={wagmiConfig}>\n\n    // Add the following code line\n+   <WagmiProvider config={wagmiAdapter.wagmiConfig}>\n    <QueryClientProvider client={queryClient}>\n      <HomePage />\n    </QueryClientProvider>\n    // Remove the following code line\n-   <WagmiConfig />\n\n    // Add the following code line\n+   </WagmiProvider>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Session Params iOS\nDESCRIPTION: Shows how to configure WalletConnectModal with custom session parameters during initialization in Swift, allowing specification of required/optional namespaces and session properties.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nlet metadata = AppMetadata(...)\n\nlet sessionParams = SessionParams(...)\n\nWalletConnectModal.configure(\n    projectId: PROJECT_ID,\n    metadata: metadata,\n    sessionParams: sessionParams\n)\n```\n\n----------------------------------------\n\nTITLE: Triggering Modal in Vue and JavaScript\nDESCRIPTION: Example of how to open the modal in Vue and JavaScript applications using an event listener with Reown AppKit.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-solana-web.mdx#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\ndocument.getElementById('my-button').addEventListener('click', () => {\n    modal.open()\n})\n\n<button id=\"my-button\">Connect Wallet</button>\n```\n\n----------------------------------------\n\nTITLE: Tracking Active Sessions in Swift\nDESCRIPTION: Sets up a listener for changes to active sessions, allowing the wallet to update its UI accordingly.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/usage.mdx#_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nWalletKit.instance.sessionsPublisher\n    .receive(on: DispatchQueue.main)\n    .sink { [weak self] sessions in\n        // Reload UI\n    }.store(in: &publishers)\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Notification Updates with Combine\nDESCRIPTION: Publishers for receiving updates when new notifications arrive, either for a specific topic or for all subscriptions.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/notifications/notify/usage.mdx#_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\npublic func messagesPublisher(topic: String) -> AnyPublisher<[NotifyMessageRecord], Never>\n\npublic var messagesPublisher: AnyPublisher<[NotifyMessageRecord], Never>\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with Solana using Yarn\nDESCRIPTION: Command for custom installation of Reown AppKit with Solana adapter using Yarn package manager. Installs required dependencies including Solana wallet adapter wallets.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/installation.mdx#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit @reown/appkit-adapter-solana @solana/wallet-adapter-wallets\n```\n\n----------------------------------------\n\nTITLE: Configure Theme Mode - WalletConnectModal Web - TSX\nDESCRIPTION: Shows how to set the theme mode ('dark' or 'light') when initializing the WalletConnectModal instance for web applications. This overrides the user's system preference.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/theming.mdx#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nconst modal = new WalletConnectModal({\n  themeMode: \"dark\",\n});\n```\n\n----------------------------------------\n\nTITLE: Pairing Dapp and Wallet in .NET SDK\nDESCRIPTION: Creates a pairing and retrieves its topic and URI, which can be shared via QR code or deep link for establishing the connection.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\nvar pairData = await core.Pairing.Create();\nstring topic = pairData.Topic;\nstring uri = pairData.Uri;\n```\n\n----------------------------------------\n\nTITLE: Using useAppKitAccount Hook in Vue\nDESCRIPTION: Demonstrates how to use the useAppKitAccount hook to retrieve a client's wallet information including address and connection status.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/ethers5/composables.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAppKitAccount } from \"@reown/appkit/vue\";\n\nconst { address, status, isConnected } = useAppKitAccount();\n```\n\n----------------------------------------\n\nTITLE: Broadcasting an external message without wait with ever_broadcastExternalMessage (JavaScript)\nDESCRIPTION: This code enables sending an external message directly to a contract via 'ever_broadcastExternalMessage', returning message hash, account, and expiration timestamp. It facilitates non-blocking external contract communication.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/everscale-rpc.mdx#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Request\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"ever_broadcastExternalMessage\",\n  \"params\": {\n        \"sourceAddress\": \"0:695e42...b8d\",\n        \"destAddress\": \"0:b38d96...708\",\n        \"destPayload\": {\n            \"abi\": \"\",\n            \"method\": \"\",\n            \"params\": {}\n        },\n    }\n}\n\n// Result\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\":  {\n        \"hash\": \"743e1c0046b82a48a2cf8cbe9a2059ce6f3862cfae377c77d9f1b4efd88d7acb\",\n        \"account\": \"0:b38d96...708\",\n        \"expireAt\": 1684327417543\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting All Subscribers with cURL\nDESCRIPTION: cURL command for retrieving all subscribers for a project, requiring just the project ID and API secret for authorization.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/notifications/backend-integration.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://notify.walletconnect.com/<PROJECT_ID>/subscribers' \\\n  --header 'Authorization: Bearer <NOTIFY_API_SECRET>'\n```\n\n----------------------------------------\n\nTITLE: Disconnecting Sessions in JavaScript\nDESCRIPTION: Demonstrates how to properly disconnect a WalletConnect session by providing the topic and a reason using the getSdkError utility.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/usage.mdx#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nawait walletKit.disconnectSession({\n  topic,\n  reason: getSdkError(\"USER_DISCONNECTED\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Toggling Initial Wallet Display with Email Login - TypeScript\nDESCRIPTION: Shows how to control whether wallet options are displayed on the first connect screen when email/social logins are active. Setting the `emailShowWallets` boolean within `features` to `false` will hide wallets initially and potentially show a button redirecting to them.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/options.mdx#_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\ncreateAppKit({\n  //...\n  features: {\n    emailShowWallets: false,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Notification History\nDESCRIPTION: Method to get the current notification records for a specific subscription topic. Useful for displaying the initial state of notifications.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/notifications/notify/usage.mdx#_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\npublic func getMessageHistory(topic: String) -> [NotifyMessageRecord]\n```\n\n----------------------------------------\n\nTITLE: Migrating Web3Modal Configuration to AppKit in Vue\nDESCRIPTION: Steps to replace the Web3Modal configuration with the Reown AppKit setup in Vue applications.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers-web.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following code line\n- createWeb3Modal({ ethersConfig, projectId, chains })\n\n// Add the following code lines\n const modal = createAppKit({\n adapters: [new EthersAdapter()],\n networks: [mainnet, arbitrum],\n metadata,\n projectId,\n features: {\n   analytics: true,\n }\n})\n```\n\n----------------------------------------\n\nTITLE: Install WalletConnect Modal (Bun)\nDESCRIPTION: Installs the WalletConnectModal library using Bun, providing the UI components necessary for connecting wallets in Web and React Native Dapps.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbun add @walletconnect/modal\n```\n\n----------------------------------------\n\nTITLE: Defining Proposal Namespaces in JavaScript/JSON\nDESCRIPTION: This snippet exemplifies the structure of a 'Proposal Namespace' object used by a dapp to request access to specific blockchain chains, methods, and events from a wallet. It shows requests for Ethereum (eip155) and Cosmos chains, specifying required methods like 'eth_sign' and 'cosmos_signDirect', and events like 'accountsChanged'.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/glossary.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"eip155\": {\n    \"chains\": [\"eip155:137\", \"eip155:1\"],\n    \"methods\": [\"eth_sign\"],\n    \"events\": [\"accountsChanged\"]\n  },\n  \"cosmos\": {\n    \"chains\": [\"cosmos:cosmoshub-4\"],\n    \"methods\": [\"cosmos_signDirect\"],\n    \"events\": [\"someCosmosEvent\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Unity WebGL Threading Patcher Git URL (Text)\nDESCRIPTION: Git URL for adding the WebGLThreadingPatcher package, which is required to enable certain asynchronous operations in Unity WebGL builds.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nhttps://github.com/VolodymyrBS/WebGLThreadingPatcher.git\n```\n\n----------------------------------------\n\nTITLE: Importing and rendering Blockchain API documentation in MDX\nDESCRIPTION: This code snippet imports a reusable documentation component for the Blockchain API from a snippets directory and renders it on the current page.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/android/cloud/blockchain-api.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport BlockchainAPI from \"/snippets/cloud/blockchain-api.mdx\";\n\n<BlockchainAPI />\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with Ethers v6 using Yarn\nDESCRIPTION: Command for custom installation of Reown AppKit with Ethers v6 adapter using Yarn package manager. Installs required dependencies including ethers v6.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/installation.mdx#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit @reown/appkit-adapter-ethers ethers\n```\n\n----------------------------------------\n\nTITLE: Retrieving all active pairings in React Native SDK\nDESCRIPTION: Fetches a list of all current pairings by calling `getPairings()`, which returns an array of pairing objects with their details.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst pairings = sdkClient.core.pairing.getPairings()\n```\n\n----------------------------------------\n\nTITLE: Initializing WalletKit with CoreClient in Kotlin\nDESCRIPTION: Initializes WalletKit by passing in the CoreClient instance, enabling the wallet to handle requests transmitted over link mode through the core configuration.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/link-mode.mdx#_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\nWalletKit.initialize(Wallet.Params.Init(core = CoreClient))\n```\n\n----------------------------------------\n\nTITLE: Installing Legacy AppKit SIWE Package with PNPM\nDESCRIPTION: Command for installing the legacy SIWE dependencies including the AppKit SIWE package and SIWE library using PNPM package manager.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/siwe.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit-siwe siwe\n```\n\n----------------------------------------\n\nTITLE: Installing Legacy AppKit SIWE Package with Bun\nDESCRIPTION: Command for installing the legacy SIWE dependencies including the AppKit SIWE package and SIWE library using Bun package manager.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/siwe.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbun a @reown/appkit-siwe siwe\n```\n\n----------------------------------------\n\nTITLE: Enabling Email Login Feature - TypeScript\nDESCRIPTION: Demonstrates how to enable the email login feature by setting the `email` property to `true` within the `features` option. This feature is enabled by default.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/options.mdx#_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\ncreateAppKit({\n  //...\n  features: {\n    email: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Active WalletConnect Sessions (Swift)\nDESCRIPTION: Retrieves a list of currently active WalletConnect sessions by calling the `getSessions` method on the `AppKit` instance. This method returns an array of `Session` objects.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/actions.mdx#_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nAppKit.instance.getSessions()\n```\n\n----------------------------------------\n\nTITLE: Formatting JSON-RPC Response with WalletConnect Utilities\nDESCRIPTION: Example of using the formatJsonRpcResult utility from @walletconnect/jsonrpc-utils to create a properly formatted response object when signing transactions.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/usage.mdx#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { formatJsonRpcResult } from \"@walletconnect/jsonrpc-utils\";\n\nconst signature = await cryptoWallet.signTransaction(signTransaction);\nconst response = await walletKit.respondSessionRequest({\n  topic: session.topic,\n  response: formatJsonRpcResult(id, signature),\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cosmos Accounts via JSON-RPC (JavaScript/JSON)\nDESCRIPTION: This JSON-RPC method (`cosmos_getAccounts`) retrieves an array of key pairs available in the wallet, mapped with their signing algorithm and blockchain address. It takes no parameters and returns an array of account objects, each containing the algorithm (`algo`), the address (`address`), and the base64 encoded public key (`pubkey`).\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/cosmos-rpc.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// Request\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"cosmos_getAccounts\",\n    \"params\": {}\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n// Result\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"result\":  [\n        {\n            \"algo\": \"secp256k1\",\n            \"address\": \"cosmos1sguafvgmel6f880ryvq8efh9522p8zvmrzlcrq\",\n            \"pubkey\": \"AgSEjOuOr991QlHCORRmdE5ahVKeyBrmtgoYepCpQGOW\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling network switch functionality in createAppKit modal in TypeScript\nDESCRIPTION: Example showing how to disable the user interface option for switching networks within the modal by setting enableNetworkSwitch to false. By default, network switching is enabled, allowing users to change blockchain networks in the connection modal.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateAppKit({\n  //...\n  enableNetworkSwitch: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Mobile Wallets Array Type in TypeScript\nDESCRIPTION: This TypeScript snippet defines the structure for an array of custom mobile wallets, each containing an id, name, and a set of links with native and universal URLs. The native link typically represents the deeplinking URL to open the wallet app directly, whereas the universal link serves as a web URL for fallback or redirect. Dependencies include maintaining corresponding wallet images for UI representation. Input is an array of wallet objects; output is a typed structure ensuring conformity.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/web3modal/v2/_partials/options/mobileWallets.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nmobileWallets: [\n  {\n    id: string,\n    name: string,\n    links: {\n      native: string\n      universal: string,\n    },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Core AppKit Package for Expo with ethers.js v5\nDESCRIPTION: Installs the main @reown/appkit-ethers5-react-native package along with ethers.js v5.7.2 using Expo's installation method to ensure compatibility.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers5/about/installation-expo.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @reown/appkit-ethers5-react-native ethers@5.7.2\n```\n\n----------------------------------------\n\nTITLE: Installing WalletConnect SDK in Android with Kotlin\nDESCRIPTION: This snippet provides Gradle build configuration code to add WalletConnect Android SDK dependencies in an Android project, specifying repositories and implementation versions. It requires min SDK 23 and Java 11, ensuring compatibility and proper setup for Android applications.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/overview.mdx#_snippet_3\n\nLANGUAGE: Gradle\nCODE:\n```\nallprojects {\n repositories {\n    mavenCentral()\n    maven { url \"https://jitpack.io\" }\n }\n}\n\n// In app/build.gradle.kts:\nimplementation(\"com.walletconnect:android-core:release_version\")\nimplementation(\"com.walletconnect:sign:release_version\")\n```\n\n----------------------------------------\n\nTITLE: Updating Component Imports for AppKit in Wagmi - TypeScript\nDESCRIPTION: This code updates the import of UI components, switching from the Web3Modal widget components in @web3modal/wagmi-react-native to AppKit's own set found in @reown/appkit-wagmi-react-native. Key components such as W3mAccountButton and Web3Modal are replaced by AccountButton and AppKit, ensuring consistency with AppKit's UI structure and API.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-react-native.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following code lines\nimport {\n  W3mAccountButton,\n  W3mButton,\n  W3mConnectButton,\n  W3mNetworkButton,\n  Web3Modal,\n} from \"@web3modal/wagmi-react-native\";\n\n// Add the following code lines\nimport {\n  AccountButton,\n  AppKitButton,\n  ConnectButton,\n  NetworkButton,\n  AppKit,\n} from \"@reown/appkit-wagmi-react-native\";\n```\n\n----------------------------------------\n\nTITLE: Getting Error State with TypeScript\nDESCRIPTION: Retrieves the current error state from the modal using `modal.getError()`. Returns an error object or null/undefined if there is no error.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/solana/actions.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst error = modal.getError();\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Development Dependencies\nDESCRIPTION: Adds recommended TypeScript type definitions for the WalletConnect JSON-RPC API to improve development experience with TypeScript.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/installation.mdx#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @walletconnect/jsonrpc-types --dev\n```\n\n----------------------------------------\n\nTITLE: WalletConnect Modal openModal API Reference - TypeScript\nDESCRIPTION: Provides the TypeScript signature for the `openModal` function. It shows that the function accepts an optional `OpenOptions` object and returns a Promise that resolves to void.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nopenModal: (options?: OpenOptions) => Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Error Handling in AppKit\nDESCRIPTION: Shows how to retrieve errors from the AppKit modal instance for handling within components.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/ethers5/composables.mdx#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nfunction Components() {\n  const error = modal.getError();\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing WalletKit Core Packages\nDESCRIPTION: Installs the main WalletKit package along with WalletConnect React Native compatibility library using Yarn.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/installation.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @reown/walletkit @walletconnect/react-native-compat\n```\n\n----------------------------------------\n\nTITLE: Rendering Analytics Component in JSX\nDESCRIPTION: This snippet demonstrates rendering the imported Analytics component within JSX syntax. It displays how to embed the component in a React component to enable analytics functionality on the page.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/cloud/analytics.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Analytics />\n```\n\n----------------------------------------\n\nTITLE: Defining SignMessageParams Type for BitcoinConnector in TypeScript\nDESCRIPTION: Specifies the structure for parameters to the signMessage method. It requires the message to be signed as a string and the Bitcoin address with which the message should be signed. These parameters ensure the signMessage method receives the correct and necessary data to produce a digital signature.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/bitcoin-provider.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type SignMessageParams = {\n  /**\n   * The message to be signed\n   */\n  message: string\n  /**\n   * The address to sign the message with\n   */\n  address: string\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Core Reown AppKit Packages with Expo\nDESCRIPTION: Command to install the main Reown AppKit package with Ethers.js integration for React Native using Expo's package manager.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react-native/ethers/about/installation-expo.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @reown/appkit-ethers-react-native ethers\n```\n\n----------------------------------------\n\nTITLE: Initializing NotifyClient SDK in React Native\nDESCRIPTION: Shows how to initialize the NotifyClient SDK in a React Native application by providing a project ID.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NotifyClient } from \"@walletconnect/notify-client\";\n\nconst notifyClient = await NotifyClient.init({\n  projectId: \"<YOUR PROJECT ID>\",\n});\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Web3Modal Ethers Package\nDESCRIPTION: Commands to remove the Web3Modal v5 ethers dependency using different package managers.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers-web.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @web3modal/ethers\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn remove @web3modal/ethers\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun remove @web3modal/ethers\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm remove @web3modal/ethers\n```\n\n----------------------------------------\n\nTITLE: Installing .NET Core Package (Shell)\nDESCRIPTION: Use the dotnet CLI tool to add the WalletConnect.Core NuGet package to your .NET project.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package WalletConnect.Core\n```\n\n----------------------------------------\n\nTITLE: Adding Android Core Dependency (Gradle)\nDESCRIPTION: Add the WalletConnect Android Core SDK dependency to the app/build.gradle file using the implementation configuration.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\nimplementation(\"com.walletconnect:android-core:release_version\")\n```\n\n----------------------------------------\n\nTITLE: Removing an Existing Subscription in React Native\nDESCRIPTION: Shows how to remove an existing notification subscription by specifying the subscription topic to be deleted.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\n// `topic` - subscription topic of the subscription that should be deleted.\nawait notifyClient.deleteSubscription({ topic });\n```\n\n----------------------------------------\n\nTITLE: Fetching Account Address for Static Wallets via getAccountAddresses\nDESCRIPTION: Example JSON-RPC request and response for the `getAccountAddresses` method targeting a static wallet. The request specifies the account identifier. The response returns a single address object representing the primary address used for all transactions.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/bitcoin-rpc.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n// Request\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"getAccountAddresses\",\n    \"params\": {\n        \"account\": \"bc1qcr8te4kr609gcawutmrza0j4xv80jy8z306fyu\"\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n// Result\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"result\": [\n        {\n            \"address\": \"bc1qcr8te4kr609gcawutmrza0j4xv80jy8z306fyu\",\n            \"publicKey\": \"0330d54fd0dd420a6e5f8d3624f5f3482cae350f79d5f0753bf5beef9c2d91af3c\",\n            \"path\": \"m/84'/0'/0'/0/0\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Theme Mode and Variables with useAppKitTheme in Vue\nDESCRIPTION: Provides specific examples of using the `setThemeMode` and `setThemeVariables` functions returned by `useAppKitTheme`. Shows setting the theme to 'dark' and customizing theme colors using CSS custom properties.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/composables.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nsetThemeMode(\"dark\");\n\nsetThemeVariables({\n  \"--w3m-color-mix\": \"#00BB7F\",\n  \"--w3m-color-mix-strength\": 40,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing WalletConnect NotifyClient Package in React Native\nDESCRIPTION: Commands to install the WalletConnect NotifyClient package using different package managers including npm, Yarn, Bun, and pnpm.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @walletconnect/notify-client @walletconnect/react-native-compat\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @walletconnect/notify-client @walletconnect/react-native-compat\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun a @walletconnect/notify-client @walletconnect/react-native-compat\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @walletconnect/notify-client @walletconnect/react-native-compat\n```\n\n----------------------------------------\n\nTITLE: Retrieving Active Wallet Sessions in JavaScript\nDESCRIPTION: This snippet retrieves the current active sessions established in the wallet via the 'getActiveSessions' method. The returned object contains session details, enabling dapps or wallet interfaces to manage ongoing connections.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/usage.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst activeSessions = walletKit.getActiveSessions();\n```\n\n----------------------------------------\n\nTITLE: Installing AppKit via OpenUPM CLI (Bash)\nDESCRIPTION: Installs the `com.reown.appkit.unity` package using the OpenUPM command-line interface. Requires Node.js and openupm-cli to be installed beforehand. This command adds the necessary AppKit package to the Unity project manifest.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/installation.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenupm add com.reown.appkit.unity\n```\n\n----------------------------------------\n\nTITLE: Available Sign Event Publishers (Swift)\nDESCRIPTION: Lists the various Combine publishers available on the WalletConnect Sign instance for subscribing to different types of events. These publishers allow iOS Dapps to react to session proposals, requests, status changes, deletions, responses, and updates.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/sign/dapp-usage.mdx#_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\n    public var sessionsPublisher: AnyPublisher<[Session], Never>\n    public var sessionProposalPublisher: AnyPublisher<Session.Proposal, Never>\n    public var sessionRequestPublisher: AnyPublisher<Request, Never>\n    public var socketConnectionStatusPublisher: AnyPublisher<SocketConnectionStatus, Never>\n    public var sessionSettlePublisher: AnyPublisher<Session, Never>\n    public var sessionDeletePublisher: AnyPublisher<(String, Reason), Never>\n    public var sessionResponsePublisher: AnyPublisher<Response, Never>\n    public var sessionRejectionPublisher: AnyPublisher<(Session.Proposal, Reason), Never>\n    public var sessionUpdatePublisher: AnyPublisher<(sessionTopic: String, namespaces: [String : SessionNamespace]), Never>\n    public var sessionEventPublisher: AnyPublisher<(event: Session.Event, sessionTopic: String, chainId: Blockchain?), Never>\n    public var sessionUpdateExpiryPublisher: AnyPublisher<(sessionTopic: String, expiry: Date), Never>\n```\n\n----------------------------------------\n\nTITLE: Setting Theme Mode in AppKit using TypeScript\nDESCRIPTION: This snippet demonstrates how to override the default theme mode in AppKit by explicitly setting it to 'light' using the createAppKit function. It assumes that createAppKit is a function that initializes the theme configuration. This configuration affects the overall appearance mode of the app, following system settings by default.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/theming.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateAppKit({\n  //...\n  themeMode: \"light\",\n});\n```\n\n----------------------------------------\n\nTITLE: Installing WalletKit with yarn in bash\nDESCRIPTION: Installs WalletKit and related WalletConnect packages using yarn. Ensures the project dependencies include all necessary SDK components for wallet integration. Requires yarn to be installed and configured correctly.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/installation.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/walletkit @walletconnect/utils @walletconnect/core\n```\n\n----------------------------------------\n\nTITLE: Handling Session Request Expiry Event - WalletConnect Swift (iOS)\nDESCRIPTION: This Swift snippet shows how to use the 'requestExpirationPublisher' from the WalletConnect WalletKit instance to handle session request expiry. It subscribes using Combine's 'sink' to be notified when a request expires, prompting the application to inform the user and update the UI.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/best-practices.mdx#_snippet_23\n\nLANGUAGE: swift\nCODE:\n```\nWalletKit.instance.requestExpirationPublisher.sink { _ in\n    // let user know that request has expired\n}.store(in: &publishers)\n```\n\n----------------------------------------\n\nTITLE: Creating React Component with appkit-button - TSX\nDESCRIPTION: This snippet defines a simple React functional component named `ConnectButton` that renders the global `<appkit-button>` web component. This web component is typically used to initiate the process of opening the AppKit interface when interacted with (e.g., clicked). It assumes React is available and the `<appkit-button>` web component has been globally registered.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/react/bitcoin/about/triggermodal.mdx#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nexport default function ConnectButton() {\n  return <appkit-button />\n}\n```\n\n----------------------------------------\n\nTITLE: Render Button to Trigger Sponsored Call - Wagmi/React - TypeScript/TSX\nDESCRIPTION: Renders a button component in the React application. The button's `onClick` event is tied to the `onSendCalls` handler, allowing the user to trigger the sponsored transaction when clicked. The button is disabled if the `sendCalls` function is not ready.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/sponsoring-first-transaction.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nreturn (\n  <Button\n    onClick={onSendCalls}\n    disabled={!sendCalls}\n  >\n    SendCalls w/ Paymaster Service\n  </Button>\n)\n```\n\n----------------------------------------\n\nTITLE: Importing grantPermissions Function in JavaScript\nDESCRIPTION: Imports the necessary `grantPermissions` function from the `@reown/appkit-experimental/smart-session` module for use in the frontend React application to initiate the permission granting flow.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/smart-sessions.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { grantPermissions } from '@reown/appkit-experimental/smart-session'\n```\n\n----------------------------------------\n\nTITLE: Updating Import Statements in Kotlin files\nDESCRIPTION: This snippet demonstrates replacing Web3Modal-specific import statements with the corresponding Reown AppKit imports to ensure the code references the correct classes and packages for the new library.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-android.mdx#_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Remove the following code lines\n- import com.walletconnect.android.*\n- import com.walletconnect.web3.modal.*\n\n+ import com.reown.android.*\n+ import com.reown.appkit.*\n```\n\n----------------------------------------\n\nTITLE: iOS Manual WebSocket Connection Management\nDESCRIPTION: Demonstrates how to manually manage WebSocket connections within the SDK by setting the connection type to manual and explicitly connecting or disconnecting. This allows developers to control WebSocket lifecycle for custom connection handling.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/relay.mdx#_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nNetworking.configure(projectId: <String>, socketFactory: SocketFactory(), socketConnectionType: .manual)\n\ntry Networking.instance.connect()\n\ntry Networking.instance.disconnect()\n```\n\n----------------------------------------\n\nTITLE: Importing ExplorerSubmission React Component in JavaScript\nDESCRIPTION: This snippet imports the ExplorerSubmission component from a specified path, enabling its use within the current MDX or React file. It relies on JavaScript ES6 module syntax and assumes the component is correctly exported at the given location.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/cloud/explorer-submission.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ExplorerSubmission from \"/snippets/cloud/explorer-submission.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Replacing dependencies in pubspec.yaml\nDESCRIPTION: This code snippet guides updating the project dependencies by removing 'web3modal_flutter' and adding 'reown_appkit', followed by running Flutter commands to clean and fetch packages.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-flutter.mdx#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\n// Remove the code line below\nweb3modal_flutter: ^X.Y.Z\n\n// Add the new dependency\nreown_appkit: ^1.0.0\n```\n\n----------------------------------------\n\nTITLE: Installing AppKit Wallet Button Package (Bash)\nDESCRIPTION: Provides installation commands for the `@reown/appkit-wallet-button` package using various Node.js package managers. This package contains the `useAppKitWallet` hook and related components for connecting wallets directly without the modal.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/hooks.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit-wallet-button\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit-wallet-button\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun a @reown/appkit-wallet-button\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit-wallet-button\n```\n\n----------------------------------------\n\nTITLE: Installing Solana Web3.js Library via npm Bash Command\nDESCRIPTION: This snippet installs the @solana/web3.js package using npm, necessary for interacting with the Solana blockchain from a JavaScript or React application. The dependency must be installed before using any provided React hooks or Solana program constructs. Expected output is a successful addition of @solana/web3.js to your project dependencies.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/solana-send-transaction.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @solana/web3.js\n```\n\n----------------------------------------\n\nTITLE: Updating Coinbase Wallet Provider Import in Ethers - TypeScript\nDESCRIPTION: This snippet replaces the import of CoinbaseProvider from @web3modal/coinbase-ethers-react-native to @reown/appkit-coinbase-ethers-react-native, ensuring Coinbase Wallet support continues under the AppKit API for Ethers integration. Only the import source changes; usage is otherwise unchanged.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-react-native.mdx#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following code lines\nimport { CoinbaseProvider } from \"@web3modal/coinbase-ethers-react-native\";\n\n// Add the following code lines\nimport { CoinbaseProvider } from \"@reown/appkit-coinbase-ethers-react-native\";\n```\n\n----------------------------------------\n\nTITLE: Updating Singleton Instance Access from Web3Wallet to WalletKit in Swift\nDESCRIPTION: Demonstrates updating code that accesses the shared instance of the wallet library. References to `Web3Wallet.instance` should be changed to `WalletKit.instance` to interact with the WalletKit API, such as accessing the `authRequestPublisher`.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/upgrade/from-web3wallet-ios.mdx#_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\n/* highlight-delete-start */\n- Web3Wallet.instance.authRequestPublisher.sink { (id, result) in\n-    // Your code here\n- }\n/* highlight-delete-end */\n/* highlight-add-start */\n+ WalletKit.instance.authRequestPublisher.sink { (id, result) in\n+     // Your code here\n+ }\n/* highlight-add-end */\n```\n\n----------------------------------------\n\nTITLE: Example: Signing Tezos Payload (JSON-RPC)\nDESCRIPTION: This snippet provides an example of the JSON-RPC request for the `tezos_sign` method. It requires the `account` address for the signing key and the `payload` string to be signed. The example also shows the expected JSON-RPC response format, containing the resulting `signature` string.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/tezos-rpc.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Request\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"tezos_sign\",\n    \"params\": {\n        \"account\": \"tz1VQA4RP4fLjEEMW2FR4pE9kAg5abb5h5GL\",\n        \"payload\": \"05010000004254\",\n    }\n}\n\n// Result\n{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"result\":  {\n        \"signature\": \"edsig...\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AppKit SIWE Package (npm) - Bash\nDESCRIPTION: This snippet demonstrates how to install the @reown/appkit-siwe and siwe packages using npm. Both dependencies are required for integrating SIWE authentication with AppKit. Run this command in your project's root directory to add the packages to your node_modules.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/siwe.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit-siwe siwe\n```\n\n----------------------------------------\n\nTITLE: Initializing Notify Client for iOS\nDESCRIPTION: Configures a Notify instance with the appropriate environment and crypto provider. The environment should be set to 'debug' for debug builds and 'release' for release builds. A CryptoProvider implementation is required.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/notifications/notify/usage.mdx#_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\ntry Notify.configure(environment: APNSEnvironment, crypto: CryptoProvider)\n```\n\n----------------------------------------\n\nTITLE: Implementing Get Public Key Handler with AppKit\nDESCRIPTION: Defines an asynchronous function `handleGetPublicKey` that retrieves the public key associated with the currently connected Bitcoin account. It searches the `allAccounts` array provided by the `useAppKitAccount` hook for the account matching the current `address` and extracts its `publicKey`, logging it to the console.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/bitcoin-send-transaction.mdx#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst handleGetPublicKey = async () => {\n  // get the public key from the account\n  const bip122Account = allAccounts?.find((a) => a.address === address);\n  let publicKey = bip122Account?.publicKey || \"\";\n\n  // print the public key in console\n  console.log(publicKey);\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Sign Message Button in React JSX\nDESCRIPTION: Renders a button that calls the `handleSignMsg` function when clicked. The button is conditionally rendered only if the user's wallet is connected (`isConnected` is true), ensuring the signing operation is only attempted when a provider is available.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/bitcoin-send-transaction.mdx#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nreturn (\n  isConnected && (\n    <div>\n      <button onClick={handleSignMsg}>Sign Message</button>\n    </div>\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Presenting WalletConnect Modal - iOS Swift from ViewController\nDESCRIPTION: Demonstrates how to present the WalletConnect modal in iOS Swift by explicitly specifying the source view controller. This is useful when the automatic top-most controller detection is not desired.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/walletconnectmodal/usage.mdx#_snippet_25\n\nLANGUAGE: swift\nCODE:\n```\nWalletConnectModal.present(from: viewController)\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with Wagmi using npm\nDESCRIPTION: Command for custom installation of Reown AppKit with Wagmi adapter using npm package manager. Installs required dependencies including wagmi, viem, and react-query.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/installation.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit @reown/appkit-adapter-wagmi wagmi viem @tanstack/react-query\n```\n\n----------------------------------------\n\nTITLE: Defining Token Symbol to Logo Mapping in TypeScript\nDESCRIPTION: A TypeScript object that maps cryptocurrency token symbols to their corresponding logo image file paths. This configuration allows for consistent token logo display throughout the application.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/web3modal/v2/_partials/options/tokenImages.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntokenImages: {\n  ETH: \"/images/eth.webp\",\n  AVAX: \"/images/avax.webp\",\n};\n```\n\n----------------------------------------\n\nTITLE: Response to Signed Message Request - Casper (JSON)\nDESCRIPTION: This snippet presents the response object to a casper_sign_message JSON-RPC request, providing the resulting signature as a hex-encoded string in the 'signature' field. The response associates the signature with the original message and address provided. Only generated upon user approval; otherwise, a USER_REJECTED error is returned.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/casper-rpc.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"casper_sign_message\",\n  \"result\": {\n    \"signature\": \"b52482afd2392b715cc43d9ad9f1f7067752a10ba5b49b89bc61b398e478841e6d8a4a224aeb944a34f23d98a232cdab6e5a60a5e886e8b0719d7b84277c405f\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Solana Wallet Adapter Wallets using Various Package Managers\nDESCRIPTION: Provides commands to install the `@solana/wallet-adapter-wallets` package, which contains adapters for various Solana wallets, using npm, Yarn, Bun, or pnpm.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/custom-connectors.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @solana/wallet-adapter-wallets\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @solana/wallet-adapter-wallets\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun a @solana/wallet-adapter-wallets\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @solana/wallet-adapter-wallets\n```\n\n----------------------------------------\n\nTITLE: Getting the Active Blockchain Chain in C#\nDESCRIPTION: Shows how to retrieve the currently active blockchain network (`Chain` object) using the `AppKit.NetworkController.ActiveChain` property in C#.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/actions.mdx#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nChain activeChain = AppKit.NetworkController.ActiveChain;\n```\n\n----------------------------------------\n\nTITLE: solana_signTransaction - Sign a Serialized Transaction via JSON-RPC\nDESCRIPTION: This method signs a base64-encoded serialized transaction, optionally including deprecated parameters like feePayer, instructions, recentBlockhash, and signatures. It returns a signature string and optionally the signed transaction. It is essential to ensure transaction serialization and encoding follow Solana standards and that deprecated parameters are avoided in versioned transactions.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/solana-rpc.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Request\n{\n\t\"id\": 1,\n\t\"jsonrpc\": \"2.0\",\n\t\"method\": \"solana_signTransaction\",\n\t\"params\": {\n\t\t\"feePayer\": \"AqP3MyNwDP4L1GJKYhzmaAUdrjzpqJUZjahM7kHpgavm\",\n\t\t\"instructions\": [{\n\t\t\t\"programId\": \"Vote111111111111111111111111111111111111111\",\n\t\t\t\"data\": \"37u9WtQpcm6ULa3VtWDFAWoQc1hUvybPrA3dtx99tgHvvcE7pKRZjuGmn7VX2tC3JmYDYGG7\",\n\t\t\t\"keys\": [{\n\t\t\t\t\"isSigner\": true,\n\t\t\t\t\"isWritable\": true,\n\t\t\t\t\"pubkey\": \"AqP3MyNwDP4L1GJKYhzmaAUdrjzpqJUZjahM7kHpgavm\"\n\t\t\t}]\n\t\t}],\n\t\t\"recentBlockhash\": \"2bUz6wu3axM8cDDncLB5chWuZaoscSjnoMD2nVvC1swe\",\n\t\t\"signatures\": [{\n\t\t\t\"pubkey\": \"AqP3MyNwDP4L1GJKYhzmaAUdrjzpqJUZjahM7kHpgavm\",\n\t\t\t\"signature\": \"2Lb1KQHWfbV3pWMqXZveFWqneSyhH95YsgCENRWnArSkLydjN1M42oB82zSd6BBdGkM9pE6sQLQf1gyBh8KWM2c4\"\n\t\t}],\n    \"transaction\": \"r32f2..FD33r\"\n\t}\n}\n\n// Result\n{\n\t\"id\": 1,\n\t\"jsonrpc\": \"2.0\",\n\t\"result\":  { signature: \"2Lb1KQHWfbV3pWMqXZveFWqneSyhH95YsgCENRWnArSkLydjN1M42oB82zSd6BBdGkM9pE6sQLQf1gyBh8KWM2c4\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Pod Install for iOS Dependencies (RN CLI)\nDESCRIPTION: Command to install native iOS dependencies using CocoaPods (`pod install`). This should be run in the `ios` directory of a React Native CLI project after adding new native modules like the Coinbase SDK to link them correctly.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/core/installation.mdx#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnpx pod-install\n```\n\n----------------------------------------\n\nTITLE: Rendering Socials Component in JSX\nDESCRIPTION: This snippet imports the 'Socials' React component from a relative path within the project and renders it directly within the JSX markup. The component likely displays social media links and email contact details as part of the UI. It depends on a proper React environment and the referenced component being correctly exported and available at the specified path.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/core/socials.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Socials from \"/snippets/appkit/shared/socials.mdx\";\n\n<Socials />\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with Wagmi using Bun\nDESCRIPTION: Command for custom installation of Reown AppKit with Wagmi adapter using Bun package manager. Installs required dependencies including wagmi, viem, and react-query.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/installation.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun add @reown/appkit @reown/appkit-adapter-wagmi wagmi viem @tanstack/react-query\n```\n\n----------------------------------------\n\nTITLE: Response format for hedera_getNodeAddresses\nDESCRIPTION: Response structure containing an array of node addresses available to the controller. Each address is in the format <shard>.<realm>.<num><-optional-checksum>.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/hedera-rpc.mdx#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"nodes\": [\"0.0.3\", \"0.0.4\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up HTML Structure for AppKit Modal Actions\nDESCRIPTION: Creates the HTML structure with buttons that will be used to trigger AppKit modals programmatically. Includes buttons for opening the main connect modal and the networks view.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/javascript/ethers/about/triggermodal.mdx#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>HTML Example</title>\n  </head>\n  <body>\n    <div id=\"app\">\n      <button id=\"open-connect-modal\">Open Modal</button>\n      <button id=\"open-network-modal\">Open Networks</button>\n    </div>\n    <script type=\"module\" src=\"main.js\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Setting privacy policy URL in createAppKit configuration in TypeScript\nDESCRIPTION: Shows how to configure a privacyPolicyUrl for the privacy policy link in the modal, passing a string URL. This allows users to access privacy information from the wallet connection interface.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/options.mdx#_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateAppKit({\n  //...\n  privacyPolicyUrl: \"https://www.myprivacypolicy.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: Switching Network in Reown AppKit using TypeScript\nDESCRIPTION: Illustrates migrating a network switch from passing a chain ID number in Web3Modal v5 to passing a network object in Reown AppKit v1. Shows removal of number-based switchNetwork call and import/use of a network object (e.g., polygon) from @reown/appkit/networks for switching chains. Requires importing desired network objects and correctly passing these to modal.switchNetwork().\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following code line\n- modal.switchNetwork(137);\n\n// Add the following code lines\n+ import { polygon } from \"@reown/appkit/networks\";\n+ modal.switchNetwork(polygon);\n```\n\n----------------------------------------\n\nTITLE: Register Identity Key for Cross-Device Account Sync in Swift Using Signing Callback\nDESCRIPTION: Demonstrates registering an identity key required for enabling cross-device push notification syncing by invoking Notify.instance.register with an account and a signing callback. The onSign callback receives a message string, signs it using a custom signer implementation returning a CacaoSignature wrapped in SigningResult.signed. This is a one-time setup that must be provided on initial account registration to enable identity-based notifications.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\nNotify.instance.register(account: account, onSign: onSign)\n\nfunc onSign(message: String) -> SigningResult {\n\n    // Provide your own sing function implementation that returns CacaoSignature\n    // For more detailed example see our sample WalletApp\n    let signature = try! signer.sign(message: message)\n    return .signed(signature)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering ExplorerSubmission Component in JavaScript/JSX\nDESCRIPTION: This snippet imports the ExplorerSubmission React component from an external snippet file and renders it within the current MDX page. It requires the component to be exported from the specified path and assumes a React-compatible environment for rendering JSX. The snippet does not take any parameters and outputs the UI elements defined by the ExplorerSubmission component.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/cloud/explorer-submission.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ExplorerSubmission from \"/snippets/cloud/explorer-submission.mdx\";\n\n<ExplorerSubmission />\n```\n\n----------------------------------------\n\nTITLE: Installing WalletKit Client Package (Bash)\nDESCRIPTION: Use this command with the .NET CLI to add the Reown.WalletKit package from Nuget to your project. It updates the project file with the necessary dependency.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/installation.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Reown.WalletKit\n```\n\n----------------------------------------\n\nTITLE: Installing WalletKit with pnpm in bash\nDESCRIPTION: Adds WalletKit and associated dependencies with pnpm, a performant package manager that uses symlinks to save disk space. Ensures WalletKit environment is properly set up. Requires pnpm installed in the local system.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/installation.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/walletkit @walletconnect/utils @walletconnect/core\n```\n\n----------------------------------------\n\nTITLE: Requesting hedera_signMessage via JSON-RPC - JSON\nDESCRIPTION: Illustrates a client request for signing an arbitrary message through hedera_signMessage. The request includes the signer's Hedera account ID and the message string to be signed, returning a base64-encoded SignatureMap upon success. This can be used for non-transactional proof-of-identity scenarios.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/hedera-rpc.mdx#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"hedera_signMessage\",\n  \"params\": {\n    \"signerAccountId\": \"hedera:testnet:0.0.12345\"\n    \"message\": \"Co8BKowBCocBChoKDAjchKWmBhDW...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Verify Component in React JavaScript\nDESCRIPTION: This snippet imports the Verify component from a local module located at '/snippets/cloud/verify.mdx' and renders it in the component's output. The snippet requires a React environment configured to support JSX and MDX imports. The main parameter is the Verify component itself, which is likely responsible for performing some verification operation when rendered. This snippet expects no inputs and outputs a rendered React element representing the Verify component. It assumes proper bundler support for MDX files and React components.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/vue/cloud/verify.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Verify from \"/snippets/cloud/verify.mdx\";\n\n<Verify />\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with Bun in React\nDESCRIPTION: This snippet offers the Bun package manager command to install Reown AppKit dependencies necessary for React project setup.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-web.mdx#_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nbun a @reown/appkit @reown/appkit-adapter-wagmi @tanstack/react-query\n```\n\n----------------------------------------\n\nTITLE: Adding WalletConnect Notify SDK (iOS Swift)\nDESCRIPTION: Provides instructions for integrating the WalletConnect SDK into an iOS project using Swift Package Manager (SPM) in Xcode. This involves adding the specified GitHub repository URL as a package dependency.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/notify/usage.mdx#_snippet_13\n\nLANGUAGE: Swift\nCODE:\n```\ntry Notify.configure(environment: APNSEnvironment, crypto: CryptoProvider)\n```\n\n----------------------------------------\n\nTITLE: Installation commands for Bitcoin SDK\nDESCRIPTION: Contains package installation commands for integrating Bitcoin SDK with necessary adapters, compatible across various JavaScript package managers.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/installation.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm\ninstall @reown/appkit @reown/appkit-adapter-bitcoin\n```\n\nLANGUAGE: bash\nCODE:\n```\nYarn\nadd @reown/appkit @reown/appkit-adapter-bitcoin\n```\n\nLANGUAGE: bash\nCODE:\n```\nBun\nbun add @reown/appkit @reown/appkit-adapter-bitcoin\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm\npnpm add @reown/appkit @reown/appkit-adapter-bitcoin\n```\n\n----------------------------------------\n\nTITLE: Set Up Environment Variable for Project ID\nDESCRIPTION: Creates a `.env` file containing the `VITE_PROJECT_ID` key required for authentication with Reown Cloud and Web3Modal. Users should replace `<Add_your_project_id>` with their actual project ID.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-anza-adapter-react.mdx#_snippet_5\n\nLANGUAGE: None\nCODE:\n```\nVITE_PROJECT_ID=<Add_your_project_id>\n```\n\n----------------------------------------\n\nTITLE: Setting iOS Platform Version in Podfile (Ruby)\nDESCRIPTION: Specifies the minimum iOS deployment target version (13.0) in the project's `Podfile`. This is often a prerequisite for using certain libraries or SDKs like AppKit.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/installation.mdx#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nplatform :ios, '13.0'\n```\n\n----------------------------------------\n\nTITLE: Installing Updated AppKit v5 Dependencies with Bun - JavaScript - Bash\nDESCRIPTION: This Bun command is used to install the latest AppKit Wagmi integration and required dependencies (@wagmi/connectors, @wagmi/core@2.x, viem@2.x) for plain JavaScript projects. Bun should be set up before running this command. It provides the necessary libraries for leveraging new AppKit v5 features post-upgrade.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/appkitv2.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbun a @web3modal/wagmi@latest @wagmi/connectors @wagmi/core@2.x viem@2.x\n```\n\n----------------------------------------\n\nTITLE: Understanding Bitcoin BIP44 Derivation Path Structure\nDESCRIPTION: Illustrates the standard structure for hierarchical deterministic wallet derivation paths as defined in BIP44 and used by related BIPs (49, 84, 86). The path defines levels for purpose, coin type, account, change chain, and address index.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/bitcoin-rpc.mdx#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nm / purpose' / coin_type' / account' / change / address_index\n```\n\n----------------------------------------\n\nTITLE: Importing SiwxIndex Component in JavaScript\nDESCRIPTION: This snippet imports the SiwxIndex component from the specified relative path within the project. It is intended to enable the use of the Sign In With X component within the application's interface.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/core/siwx.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport SiwxIndex from \"/snippets/appkit/shared/siwx/index.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Installing @reown/appkit-siwx via pnpm (Bash)\nDESCRIPTION: Executes the pnpm add command to install @reown/appkit-siwx for decentralized authentication support in Dapps. Use this if you're managing dependencies with pnpm. The package will be ready for import in your application code post-installation.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/siwx/siwx-default.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit-siwx\n```\n\n----------------------------------------\n\nTITLE: Adding ReownAppKit Pod to Cocoapods Podfile\nDESCRIPTION: This snippet provides the syntax for adding the 'ReownAppKit' subspec from the 'reown-swift' repository as a dependency in a Cocoapods Podfile. It specifies the Git repository URL and a specific tag ('1.0.4') for the version. Note that Cocoapods support may be deprecated.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/core/installation.mdx#_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\npod 'reown-swift/ReownAppKit', :git => 'https://github.com/reown-com/reown-swift.git', :tag => '1.0.4'\n```\n\n----------------------------------------\n\nTITLE: Updating import statements in Dart files\nDESCRIPTION: This snippet demonstrates replacing the import statement for Web3Modal with the new import from Reown AppKit, ensuring the project references the correct package after migration.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-flutter.mdx#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\n// Remove the code line below\nimport 'package:web3modal_flutter/web3modal_flutter.dart';\n\n// Add the new import\nimport 'package:reown_appkit/reown_appkit.dart';\n```\n\n----------------------------------------\n\nTITLE: Custom Presenter Class for Dynamic View Extension in Unity UI Toolkit\nDESCRIPTION: Defines a custom presenter class inheriting from AccountPresenter to add a new button linking to OpenSea profile. It demonstrates method overriding for dynamic view modification within the MVP pattern, including button creation and event handling.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/customization.mdx#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CustomAccountPresenter : AccountPresenter\n{\n    public CustomAccountPresenter(RouterController router, VisualElement parent) : base(router, parent)\n    {\n    }\n\n    protected override void CreateButtons(VisualElement buttonsListView)\n    {\n        CreateOpenSeaButton(buttonsListView);\n\n        base.CreateButtons(buttonsListView);\n    }\n\n    private void CreateOpenSeaButton(VisualElement buttonsListView)\n    {\n        var openSeaIcon = Resources.Load<Sprite>(\"OpenSea Logo\");\n        var openSeaButton = new ListItem(\n            \"OpenSea\",\n            openSeaIcon,\n            OnOpenSeaButtonClick,\n            iconType: ListItem.IconType.Circle,\n            iconStyle: ListItem.IconStyle.Accent);\n\n        Buttons.Add(openSeaButton);\n        buttonsListView.Add(openSeaButton);\n    }\n\n    private void OnOpenSeaButtonClick()\n    {\n        var address = AppKit.AccountController.Address;\n        var url = $\"https://opensea.io/{address}\";\n        Application.OpenURL(url);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @web3inbox/core with npm\nDESCRIPTION: Command to install the @web3inbox/core package using npm package manager.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/usage/installation/javascript.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @web3inbox/core\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Verify Component in React JSX\nDESCRIPTION: This snippet shows how to import a Verify component from a local snippet located at '/snippets/cloud/verify.mdx' and render it within JSX. The import statement assumes a module export of a React component, which is then used by including <Verify /> in JSX. It requires a build setup that supports MDX imports and React rendering context.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/cloud/verify.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Verify from \"/snippets/cloud/verify.mdx\";\n\n<Verify />\n```\n\n----------------------------------------\n\nTITLE: Installing @reown/appkit-wallet-button via Yarn\nDESCRIPTION: This snippet demonstrates the installation of the Wallet Button package using Yarn, allowing integration via Yarn's package management system.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/components.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit-wallet-button\n```\n\n----------------------------------------\n\nTITLE: Installing Web3Inbox via Bun\nDESCRIPTION: Installs the '@web3inbox/core' and '@web3inbox/react' packages using the Bun runtime and package manager. The 'a' is shorthand for 'add'. This command modifies your project's dependency files. Requires Bun to be installed.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/usage/installation/react.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbun a @web3inbox/core @web3inbox/react\n```\n\n----------------------------------------\n\nTITLE: Installing @web3inbox/core with Yarn\nDESCRIPTION: Command to install the @web3inbox/core package using Yarn package manager.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/usage/installation/javascript.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @web3inbox/core\n```\n\n----------------------------------------\n\nTITLE: Run the React Solana AppKit Development Server\nDESCRIPTION: Starts the development server to run and test the React application, using commands compatible with npm, Yarn, Bun, or pnpm. Ensures the app is hosted locally for verification and debugging.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-anza-adapter-react.mdx#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: Shell\nCODE:\n```\nyarn dev\n```\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: Shell\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Basic AppKit Notifications Usage Example in React\nDESCRIPTION: Placeholder for a basic code example demonstrating how to use AppKit Notifications in React to subscribe to and receive notifications. The actual implementation details are found in the imported MDX file. Refer to the API reference for more advanced usage.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/frontend-integration/usage.mdx#_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<Example/>\n\n(Content imported from /snippets/appkit/shared/notifications/frontend-integration/usage/example/react.mdx)\n```\n\n----------------------------------------\n\nTITLE: Support for only EVM blockchains\nDESCRIPTION: This snippet describes removing support for Solana networks to limit support strictly to EVM-based chains, with subsequent configuration of ReownAppKitModal accordingly.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/core/custom-chains.mdx#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Remove support for Solana to support only EVM\nReownAppKitModalNetworks.removeSupportedNetworks('solana');\n// Instantiate ReownAppKitModal with EVM support\nconst _appKitModal = ReownAppKitModal(\n  context: context,\n  projectId: '{YOUR_PROJECT_ID}',\n  metadata: {...},\n  siweConfig: {...},\n  featuresConfig: {...},\n);\n\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering React Component JSX\nDESCRIPTION: Imports the Options React component from a shared snippet and renders it within the current file. This snippet requires React environment support and assumes the component exists at the specified path. It serves to modularly include reusable UI elements or documentation parts.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/options.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Options from \"/snippets/appkit/shared/options.mdx\";\n\n<Options />\n```\n\n----------------------------------------\n\nTITLE: Updating Import Statement from Web3Modal to AppKit - Swift\nDESCRIPTION: This snippet shows how to modify import statements in Swift files by replacing Web3Modal with AppKit. This change is required throughout all source code files where Web3Modal's APIs are accessed. No external dependencies other than having AppKit available are expected. Input is the old import line; output is the corrected import statement, ensuring the compiler resolves AppKit symbols.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-ios.mdx#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\n- import Web3Modal\n\n+ import AppKit\n```\n\n----------------------------------------\n\nTITLE: Migrating Web3Modal Configuration to AppKit in JavaScript\nDESCRIPTION: Steps to replace the Web3Modal configuration with the Reown AppKit setup in JavaScript applications.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/to-reown-appkit-ethers-web.mdx#_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\n// Remove the following code line\n- const modal = createWeb3Modal({\n  ethersConfig,\n  projectId,\n  enableAnalytics: true\n})\n\n// Add the following code lines\n+ const modal = createAppKit({\n  adapters: [new EthersAdapter()],\n  networks: [mainnet, arbitrum],\n  metadata,\n  projectId,\n  features: {\n    analytics: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Updating button component classes\nDESCRIPTION: This snippet provides mapping from old button classes to their new counterparts, noting changes in parameters such as 'service' and 'context' to adapt to the new API.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-flutter.mdx#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n<Table\n  headers={[\"Old\", \"New\", \"Notes\"]}\n  data=[\n    { old: { code: \"W3MNetworkSelectButton\" }, new: { code: \"AppKitModalNetworkSelectButton\" }, notes: \"`service` parameter is now `appKit`\\n`context` parameter is not required anymore but still available\" },\n    { old: { code: \"W3MConnectWalletButton\" }, new: { code: \"AppKitModalConnectButton\" }, notes: \"`service` parameter is now `appKit`\\n`context` parameter is not required anymore but still available\" },\n    { old: { code: \"W3MAccountButton\" }, new: { code: \"AppKitModalAccountButton\" }, notes: \"`service` parameter is now `appKit`\\n`context` parameter is not required anymore but still available\" }\n  ]\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Maven Central and Jitpack Repositories (Gradle)\nDESCRIPTION: Configure the root build.gradle.kts file to include the necessary Maven Central and Jitpack repositories for fetching WalletConnect dependencies in Android projects.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/api/core/pairing.mdx#_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nallprojects {\n repositories {\n    mavenCentral()\n    maven { url \"https://jitpack.io\" }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Jitpack Repository in Android Gradle Build - Gradle\nDESCRIPTION: Configuration snippet for Android projects adding Jitpack repository support in the root `build.gradle` file's `allprojects` block. This setup is required to resolve dependencies hosted on Jitpack used in the WalletKit or other required libraries. It ensures the Gradle build has access to Google's Maven repository, Maven Central, and Jitpack.io as artifact sources.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/chain-abstraction.mdx#_snippet_5\n\nLANGUAGE: gradle\nCODE:\n```\nallprojects {\n    repositories {\n        google()\n        mavenCentral()\n        maven { url 'https://jitpack.io' } // <- add jipack url\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Core AppKit Package (Bash)\nDESCRIPTION: Installs only the core AppKit package without any blockchain-specific adapters, via your preferred package manager. This is suitable for users planning to add adapters at a later stage or keep a minimal setup. The commands only require Node.js and the corresponding package manager.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/multichain.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @reown/appkit\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @reown/appkit\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun a @reown/appkit\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @reown/appkit\n```\n\n----------------------------------------\n\nTITLE: Installing Reown AppKit with Bitcoin using Bun\nDESCRIPTION: Command for custom installation of Reown AppKit with Bitcoin adapter using Bun package manager. Installs required dependencies for Bitcoin integration.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/installation.mdx#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nbun add @reown/appkit @reown/appkit-adapter-bitcoin\n```\n\n----------------------------------------\n\nTITLE: Embedding ExplorerSubmission Component in MDX JSX\nDESCRIPTION: This snippet renders the imported ExplorerSubmission component within the MDX file as JSX. It allows the component to be displayed on the webpage, utilizing React's component rendering capabilities. No additional parameters are passed; it uses default component behavior.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/c-sharp/cloud/explorer-submission.mdx#_snippet_1\n\nLANGUAGE: MDX\nCODE:\n```\n<ExplorerSubmission />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Verify Component in React JSX\nDESCRIPTION: This snippet imports the Verify component from the relative path \"/snippets/cloud/verify.mdx\" and renders it inside the JSX markup. There are no parameters passed to the component. This is intended to show a simple integration or usage of the Verify component in a React codebase. The snippet assumes React environment and necessary build tooling to resolve .mdx imports.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/react-native/cloud/verify.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport Verify from \"/snippets/cloud/verify.mdx\";\n\n<Verify />\n```\n\n----------------------------------------\n\nTITLE: Installing Web3Inbox via Yarn\nDESCRIPTION: Adds the '@web3inbox/core' and '@web3inbox/react' packages using the Yarn package manager. This command updates your project's package.json and yarn.lock files. Requires Node.js and Yarn to be installed.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/usage/installation/react.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @web3inbox/core @web3inbox/react\n```\n\n----------------------------------------\n\nTITLE: Installing Web3Inbox Core and Widget via npm (Bash)\nDESCRIPTION: Installs both @web3inbox/core and @web3inbox/widget-react packages using the npm package manager. This command should be run in the root directory of your JavaScript or TypeScript project. No additional parameters are required, and it will update your package.json and node_modules. Requires npm to be installed and initialized in the project.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/embedded-widget/about.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @web3inbox/core @web3inbox/widget-react\n```\n\n----------------------------------------\n\nTITLE: Running the Development Server using Bash\nDESCRIPTION: Executes the `dev` script defined in the project's `package.json` using the Node Package Manager (npm). This command typically starts the application's development server (e.g., Next.js development server), allowing developers to view and test the application locally with the newly configured Tenderly Virtual TestNet integration. The surrounding text notes that `yarn dev`, `pnpm dev`, or `bun dev` can be used as alternatives depending on the package manager.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/recipes/tenderly-virtual-testnets.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Starting Mintlify Development Server (Bash)\nDESCRIPTION: Starts the Mintlify development server using the `mintlify dev` command. This command should be executed from the root directory of the documentation project. It builds and serves the documentation locally, typically at `http://localhost:3000`, with hot reloading.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/README.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\nmintlify dev\n```\n\n----------------------------------------\n\nTITLE: Importing BitcoinProviderInterface component\nDESCRIPTION: Imports the BitcoinProviderInterface React component from an external MDX file, which likely provides a user interface or context for Bitcoin wallet interactions within the application.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/vue/bitcoin/about/implementation.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport BitcoinProviderInterface from \"/snippets/appkit/shared/bitcoin-provider.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Analytics Component in MDX\nDESCRIPTION: This code imports an Analytics MDX component from the snippets/cloud directory and renders it within the current documentation page.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/ios/cloud/analytics.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Analytics from \"/snippets/cloud/analytics.mdx\";\n\n<Analytics />\n```\n\n----------------------------------------\n\nTITLE: Renaming USS Variables from WalletConnect to Reown in CSS\nDESCRIPTION: This CSS snippet shows an example of renaming USS (Unity Style Sheets) variable names from using the old prefix \"--wui\" to the new \"--ro\" prefix as part of the migration from Web3Modal to AppKit. This step is necessary if custom USS variables were previously defined for the WalletConnect UI and need to reflect the new Reown AppKit naming conventions for styles.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-unity.mdx#_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n// Remove the following code line\n--wui-color-accent-100: rgb(156, 81, 65);\n\n// Add the following code line\n--ro-color-accent-100: rgb(156, 81, 65);\n```\n\n----------------------------------------\n\nTITLE: Importing Web3Inbox Dependencies - TypeScript\nDESCRIPTION: Imports necessary classes and functions from the @web3inbox/core and @wagmi/core libraries to interact with the Web3Inbox service and perform signature operations.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/snippets/appkit/shared/notifications/frontend-integration/usage/example/javascript.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3InboxClient } from '@web3inbox/core'\nimport { signMessage } from '@wagmi/core'\n```\n\n----------------------------------------\n\nTITLE: WalletKit SDK redirectToDapp Method Signature (Dart)\nDESCRIPTION: Presents the Dart function signature for the `redirectToDapp` method provided by the WalletKit SDK. This asynchronous method is used to programmatically redirect the user back to the requesting Dapp after wallet interactions, requiring the session topic and the Dapp's redirect metadata.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/flutter/mobile-linking.mdx#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nFuture<bool> redirectToDapp({\n  required String topic,\n  required Redirect? redirect,\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Main Class Import to WalletKit (JavaScript)\nDESCRIPTION: Shows how to update the main import statement in JavaScript/TypeScript code from `Web3Wallet` of `@walletconnect/web3wallet` to `WalletKit` from the new `@reown/walletkit` package during the migration process.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/upgrade/from-web3wallet-react-native.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/* highlight-delete-start */\nimport { Web3Wallet } from \"@walletconnect/web3wallet\";\n/* highlight-delete-end */\n/* highlight-add-start */\nimport { WalletKit } from \"@reown/walletkit\";\n/* highlight-add-end */\n```\n\n----------------------------------------\n\nTITLE: Emitting bip122_addressesChanged Event for WalletConnect - JSON\nDESCRIPTION: This JSON snippet represents a session_event payload as received by a dapp in response to a bip122_addressesChanged event. The event notifies the dapp of the currently accessible Litecoin addresses along with their derivation paths. Dapps must be able to parse this payload and extract both the address and BIP32 path information for each account. No dependencies are required other than the ability to handle JSON-formatted messages, and the snippet assumes communication via the WalletConnect specification.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/advanced/multichain/rpc-reference/litecoin-rpc.mdx#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"id\": 1675759795769537,\n  \"topic\": \"95d6aca451b8e3c6d9d176761bf786f1cc0a6d38dffd31ed896306bb37f6ae8d\",\n  \"params\": {\n    \"event\": {\n      \"name\": \"bip122_addressesChanged\",\n      \"data\": [\n        {\n            \"address\": \"ltc1q8c6fshw2dlwun7ekn9qwf37cu2rn755u9ym7p0\",\n            \"path\": \"m/84'/2'/0'/0/0\"\n        },\n        {\n            \"address\": \"LXkGhTKmZpviAtYdDaxWbiJsdg4tA6EzrU\",\n            \"path\": \"m/49'/2'/0'/0/7\"\n        },\n        {\n            \"address\": \"ltc1qj4plcuyhuzw0sycf99gcayzhhcddfj6xkcke5g\",\n            \"path\": \"m/84'/2'/0'/0/2\"\n        },\n        {\n            \"address\": \"ltc1qsdxa6pseqekqg5d3uksaxnwrey2s2ujcx03alc\",\n            \"path\": \"m/84'/2'/0'/0/3\"\n        },\n        {\n            \"address\": \"ltc1qhuvt3sq8xmx9ktzdfznkzvjl5zup7mg9zpwllw\",\n            \"path\": \"m/84'/2'/0'/0/4\"\n        },\n        {\n            \"address\": \"ltc1qtjd3y5a2axpwzfjcj4y9zy50qfjuxwzm0vu5fq\",\n            \"path\": \"m/84'/2'/0'/1/3\"\n        },\n        {\n            \"address\": \"ltc1qp7ujtprgl0quvcg0dj335p37r2mc2cxdc8xumq\",\n            \"path\": \"m/84'/2'/0'/1/4\"\n        }\n      ]\n    },\n    \"chainId\": \"bip122:12a765e31ffd4059bada1e25190f6e98\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Final notes on migration and testing\nDESCRIPTION: This section emphasizes the importance of updating configurations, thorough testing, and consulting the AppKit example repository to ensure the migration's success.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-flutter.mdx#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Importing and Rendering Smart Sessions Documentation in MDX\nDESCRIPTION: This snippet demonstrates how to import a shared MDX component for Smart Sessions documentation and render it in the current page. It uses a relative import path and JSX syntax to include the component.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/experimental/smart-session.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport SmartSessions from \"/snippets/appkit/shared/smart-sessions.mdx\";\n\n<SmartSessions />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering SIWX Custom Component in MDX for Next.js\nDESCRIPTION: This snippet imports the SIWX Custom React component from a shared code snippets directory and renders it within an MDX file, which is used in a Next.js environment. It demonstrates the modular use of components for documentation or UI purposes. The snippet relies on the React and Next.js framework to process the MDX file and render components accordingly. Inputs include no explicit props to the component in this example, and the output is the UI rendered by the SIWX Custom component. The snippet assumes the component file exists at the specified path.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/core/siwx-custom.mdx#_snippet_0\n\nLANGUAGE: MDX\nCODE:\n```\nimport SiwxCustom from \"/snippets/appkit/shared/siwx/siwx-custom.mdx\";\n\n# SIWX Custom Usage\n\n<SiwxCustom />\n```\n\n----------------------------------------\n\nTITLE: Rendering Verify Component in MDX\nDESCRIPTION: This MDX snippet renders a component named 'Verify', which is imported from '/snippets/cloud/verify.mdx'. It serves to include and display the content defined within that external file on the current page.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/cloud/verify.mdx#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n<Verify />\n```\n\n----------------------------------------\n\nTITLE: Creating a New Git Branch for Contributions (Bash)\nDESCRIPTION: Creates and switches to a new Git branch named 'feature/your-feature-name'. This isolates your changes for a specific feature or fix, following standard Git contribution workflow.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ngit checkout -b feature/your-feature-name\n```\n\n----------------------------------------\n\nTITLE: Rendering BlockchainAPI React Component\nDESCRIPTION: This snippet renders the imported BlockchainAPI React component within JSX, enabling its UI and functionality to be integrated into a React app. It demonstrates the component-based architecture common in React development, allowing blockchain capabilities to be embedded directly into the user interface.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/flutter/cloud/blockchain-api.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<BlockchainAPI />\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying Verify Component in MDX\nDESCRIPTION: This snippet imports a Verify component from a cloud snippets directory and renders it on the page. The component likely contains documentation about verification processes or functionality.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react/cloud/verify.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport Verify from \"/snippets/cloud/verify.mdx\";\n\n<Verify />\n```\n\n----------------------------------------\n\nTITLE: Updating App.tsx Imports to Remove RainbowKit and Add AppKit Components in TypeScript\nDESCRIPTION: Modifies the import statements in the main application file to remove RainbowKit dependencies and add AppKit equivalents. Specifically, it removes the RainbowKitProvider and wagmi provider imports and replaces them with imports of wagmiAdapter, projectId from the new config as well as the createAppKit function from AppKit's React integration. Also removes RainbowKit's CSS import to avoid styling conflicts.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/migration/from-rainbowkit-next.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport '../styles/globals.css';\n- import '@rainbow-me/rainbowkit/styles.css';\n\nimport type { AppProps } from 'next/app';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\n\n- import { WagmiProvider } from 'wagmi';\n- import { config } from '../wagmi';\n\n+ import { wagmiAdapter, projectId } from '@/config'\n\n- import { RainbowKitProvider } from '@rainbow-me/rainbowkit';\n\n+ import { createAppKit } from \"@reown/appkit/react\"\n```\n\n----------------------------------------\n\nTITLE: Bash Commands to Update Packages via .NET CLI\nDESCRIPTION: This code snippet demonstrates how to remove the deprecated WalletConnect.Web3Wallet package and add the new Reown.WalletKit package using .NET CLI commands. These commands facilitate updating project dependencies efficiently without manual editing of project files.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/upgrade/from-web3wallet-unity.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Remove the old package\n dotnet remove package WalletConnect.Web3Wallet\n\n# Add the new package\n dotnet add package Reown.WalletKit\n```\n\n----------------------------------------\n\nTITLE: Updating AppKit Config Import in Wagmi - TypeScript\nDESCRIPTION: This shows how to change the import statement for creating your modal configuration by replacing the old createWeb3Modal import from @web3modal/wagmi-react-native with the new createAppKit import from @reown/appkit-wagmi-react-native. No parameters need adjustment, but the origin package must be switched to fully enable AppKit functionality.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-react-native.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Remove the following code lines\nimport { createWeb3Modal } from \"@web3modal/wagmi-react-native\";\n\n// Add the following code lines\nimport { createAppKit } from \"@reown/appkit-wagmi-react-native\";\n```\n\n----------------------------------------\n\nTITLE: Rendering the Chain List Component in MDX\nDESCRIPTION: Imports the `ChainList` component from a separate MDX file and renders it on the page. This component displays an interactive list of supported blockchain chains from WalletGuide.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/cloud/chains/chain-list.mdx#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport { ChainList } from \"/snippets/chainlist.mdx\"\n\n<ChainList />\n```\n\n----------------------------------------\n\nTITLE: Updating exception class names\nDESCRIPTION: This simple mapping updates the exception class used in error handling from the old to the new, reflecting the change in class naming conventions.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/upgrade/from-web3modal-flutter.mdx#_snippet_8\n\nLANGUAGE: Markdown\nCODE:\n```\n<Table\n  headers={[\"Old\", \"New\"]}\n  data=[\n    { old: { code: \"W3MServiceException\" }, new: { code: \"ReownAppKitModalException\" } }\n  ]\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing AppKit Notifications in React\nDESCRIPTION: Placeholder for the code snippet detailing the installation process for AppKit Notifications within a React project. It likely involves installing packages via npm or yarn as described in the imported MDX file.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/next/notifications/frontend-integration/usage.mdx#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n<Installation/>\n\n(Content imported from /snippets/appkit/shared/notifications/frontend-integration/usage/installation/react.mdx)\n```\n\n----------------------------------------\n\nTITLE: Importing and Including Smart Account MDX Snippet\nDESCRIPTION: This code imports a shared MDX snippet component and includes it in the current document. The implementation uses the import statement to reference a component from a specific path and then renders it as JSX.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/smart-accounts.mdx#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport SmartAccount from \"/snippets/appkit/shared/smart-accounts.mdx\";\n\n<SmartAccount />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Relay Documentation Component in MDX\nDESCRIPTION: This snippet shows how to import a Relay documentation component from the snippets directory and render it within the current MDX file. It uses the import statement to bring in the Relay component and then renders it directly.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/android/cloud/relay.mdx#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntitle: Relay\n---\n\nimport Relay from \"/snippets/cloud/relay.mdx\";\n\n<Relay />\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Analytics Component in MDX\nDESCRIPTION: This code imports an Analytics component from an external MDX file located at '/snippets/cloud/analytics.mdx' and renders it on the page.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/ios/cloud/analytics.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport Analytics from \"/snippets/cloud/analytics.mdx\";\n\n<Analytics />\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying Theming Component in MDX\nDESCRIPTION: This snippet demonstrates how to import a shared Theming component from a snippets directory and display it within an MDX document. It uses JSX syntax embedded within Markdown.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/javascript/core/theming.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Theming from \"/snippets/appkit/shared/theming.mdx\";\n\n<Theming />\n```\n\n----------------------------------------\n\nTITLE: Testing One-click Auth support with AppKit Lab\nDESCRIPTION: This section briefly mentions available testing resources for verifying the implementation of One-click Auth, suggesting the usage of the AppKit Lab platform for comprehensive testing. It does not contain code snippets but provides links to the testing tool.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/walletkit/web/one-click-auth.mdx#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Importing and Rendering Smart Account Component in MDX\nDESCRIPTION: This snippet demonstrates how to import an MDX component from a snippets directory and render it within a documentation page. The code imports a Smart Account component and displays it on the page.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/unity/core/smart-accounts.mdx#_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n---\ntitle: Smart Accounts\n---\n\nimport SmartAccount from \"/snippets/appkit/shared/smart-accounts.mdx\";\n\n<SmartAccount />\n```\n\n----------------------------------------\n\nTITLE: Installing AppKit Notifications in JavaScript Applications\nDESCRIPTION: Shows how to install the required dependencies for implementing AppKit Notifications in JavaScript applications. The code is imported from an external MDX file.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/react-native/notifications/frontend-integration/usage.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Installation />\n```\n\n----------------------------------------\n\nTITLE: Rendering SIWX Custom Component in MDX\nDESCRIPTION: This snippet involves rendering the imported SIWX Custom component within the MDX content. It demonstrates how to include the component in the documentation page, which allows users to see and interact with the customized SIWX features directly within the documentation interface.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/authentication/siwx/siwx-custom.mdx#_snippet_1\n\nLANGUAGE: MDX\nCODE:\n```\n<SiwxCustom />\n```\n\n----------------------------------------\n\nTITLE: Fetching Hybrid Entries with GET /v3/hybrid\nDESCRIPTION: Shows how to obtain hybrid entries listed in the explorer, with support for pagination via entries and page query parameters. Useful for accessing hybrid assets support.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/cloud/explorer.mdx#_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nGET https://explorer-api.walletconnect.com/v3/hybrid?projectId=YOUR_PROJECT_ID&entries=5&page=1\n```\n\n----------------------------------------\n\nTITLE: Importing and Using SIWX Default Component in MDX\nDESCRIPTION: This snippet shows how to import the SIWX default implementation component from the snippets directory and incorporate it into an MDX documentation page. The component is likely responsible for rendering the Sign In With X authentication interface.\nSOURCE: https://github.com/reown-com/reown-docs/blob/main/appkit/authentication/siwx/siwx-default.mdx#_snippet_0\n\nLANGUAGE: MDX\nCODE:\n```\nimport SiwxDefault from \"/snippets/appkit/shared/siwx/siwx-default.mdx\";\n\n# SIWX Default Usage\n\n<SiwxDefault />\n```"
  }
]