[
  {
    "owner": "refactoringguru",
    "repo": "design-patterns-go",
    "content": "TITLE: Running Go Design Pattern Examples via Command Line\nDESCRIPTION: Command for executing the design pattern examples from the repository. This example shows how to navigate to a specific pattern directory (builder) and run the Go code. Requires Go v1.19 to be installed.\nSOURCE: https://github.com/refactoringguru/design-patterns-go/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd <examples-dir>/builder; go run .\n```\n\n----------------------------------------\n\nTITLE: Vending Machine Operation Log\nDESCRIPTION: Console output showing a sequence of vending machine operations including item requests, payment validation, and dispensing actions. The log shows multiple transactions with inventory updates.\nSOURCE: https://github.com/refactoringguru/design-patterns-go/blob/main/state/output.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nItem requestd\nMoney entered is ok\nDispensing Item\n\nAdding 2 items\n\nItem requestd\nMoney entered is ok\nDispensing Item\n```\n\n----------------------------------------\n\nTITLE: Terminal Output of OTP Generation and Notification Process\nDESCRIPTION: Terminal output showing the process of generating a one-time password (OTP), saving it to cache, and sending it via SMS and email channels. The output demonstrates how the same OTP value (1234) is processed through different notification channels with consistent steps.\nSOURCE: https://github.com/refactoringguru/design-patterns-go/blob/main/template/output.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nSMS: generating random otp 1234\nSMS: saving otp: 1234 to cache\nSMS: sending sms: SMS OTP for login is 1234\n\nEMAIL: generating random otp 1234\nEMAIL: saving otp: 1234 to cache\nEMAIL: sending email: EMAIL OTP for login is 1234\n```\n\n----------------------------------------\n\nTITLE: Recursive File Search Log Output\nDESCRIPTION: Console log output showing the traversal of directories and files while searching for the keyword 'rose'. The search spans multiple folders (Folder1, Folder2) and files (File1, File2, File3).\nSOURCE: https://github.com/refactoringguru/design-patterns-go/blob/main/composite/output.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nSerching recursively for keyword rose in folder Folder2\nSearching for keyword rose in file File2\nSearching for keyword rose in file File3\nSerching recursively for keyword rose in folder Folder1\nSearching for keyword rose in file File1\n```\n\n----------------------------------------\n\nTITLE: House Specifications Output\nDESCRIPTION: Console output showing the specifications of two different house types - a normal house and an igloo house. Each house type lists its door type, window type, and number of floors.\nSOURCE: https://github.com/refactoringguru/design-patterns-go/blob/main/builder/output.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nNormal House Door Type: Wooden Door\nNormal House Window Type: Wooden Window\nNormal House Num Floor: 2\n\nIgloo House Door Type: Snow Door\nIgloo House Window Type: Snow Window\nIgloo House Num Floor: 1\n```\n\n----------------------------------------\n\nTITLE: Defining Dress Color Constants in Go\nDESCRIPTION: Defines color type constants and values for dresses. Uses custom types to enforce type safety and associates specific colors with dress types.\nSOURCE: https://github.com/refactoringguru/design-patterns-go/blob/main/flyweight/output.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nDressColorType: ctDress\nDressColor: green\nDressColorType: tDress\nDressColor: red\n```\n\n----------------------------------------\n\nTITLE: Printing on Mac with HP Printer\nDESCRIPTION: This snippet demonstrates a print request for a Mac operating system using an HP printer. It showcases how the printing process might be initiated for this specific combination.\nSOURCE: https://github.com/refactoringguru/design-patterns-go/blob/main/bridge/output.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nPrint request for mac\\nPrinting by a HP Printer\n```\n\n----------------------------------------\n\nTITLE: Printing on Windows with HP Printer\nDESCRIPTION: This snippet demonstrates a print request for a Windows operating system using an HP printer. It shows how the printing process might be implemented for a different operating system while using the same printer brand as in the Mac example.\nSOURCE: https://github.com/refactoringguru/design-patterns-go/blob/main/bridge/output.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nPrint request for windows\\nPrinting by a HP Printer\n```\n\n----------------------------------------\n\nTITLE: Printing on Mac with EPSON Printer\nDESCRIPTION: This snippet shows a print request for a Mac operating system using an EPSON printer. It illustrates how the printing process might differ when using a different printer brand on the same operating system.\nSOURCE: https://github.com/refactoringguru/design-patterns-go/blob/main/bridge/output.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nPrint request for mac\\nPrinting by a EPSON Printer\n```\n\n----------------------------------------\n\nTITLE: Displaying User Struct Data in Go\nDESCRIPTION: Output from a Go program that prints user struct data. The struct appears to have 'name' and 'age' fields, and the program is printing pointer references to these structs.\nSOURCE: https://github.com/refactoringguru/design-patterns-go/blob/main/iterator/output.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nUser is &{name:a age:30}\nUser is &{name:b age:20}\n```\n\n----------------------------------------\n\nTITLE: Initiating Print Request on Windows\nDESCRIPTION: This snippet shows the beginning of a print request for a Windows operating system. It appears to be incomplete, possibly demonstrating how the printing process is initiated before specifying the printer type.\nSOURCE: https://github.com/refactoringguru/design-patterns-go/blob/main/bridge/output.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nPrint request for windows\n```\n\n----------------------------------------\n\nTITLE: Logo Size Configuration Entries\nDESCRIPTION: Configuration entries defining logo names and their corresponding size values. Each logo (Nike and Adidas) is listed twice with a size value of 14.\nSOURCE: https://github.com/refactoringguru/design-patterns-go/blob/main/abstractFactory/output.txt#2025-04-22_snippet_0\n\nLANGUAGE: config\nCODE:\n```\nLogo: nike\nSize: 14\nLogo: nike\nSize: 14\nLogo: adidas\nSize: 14\nLogo: adidas\nSize: 14\n```"
  }
]