[
  {
    "owner": "netbirdio",
    "repo": "netbird",
    "content": "TITLE: Running Netbird Management Server via Docker with TLS - Bash\nDESCRIPTION: Provides a sequence of Docker commands to create a volume and run the `netbirdio/management:latest` container. Configures port mapping (33073, 443), volume mapping (`netbird-mgmt:/var/lib/netbird`), config file mapping (`./config.json:/etc/netbird/config.json`), and uses the `--letsencrypt-domain` flag to enable automatic TLS using Let's Encrypt. Requires a public domain and public IP for the server.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/management/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n# create a volume\ndocker volume create netbird-mgmt\n# run the docker container\ndocker run -d --name netbird-management \\\n-p 33073:33073  \\\n-p 443:443  \\\n-v netbird-mgmt:/var/lib/netbird  \\\n-v ./config.json:/etc/netbird/config.json  \\\nnetbirdio/management:latest \\\n--letsencrypt-domain <YOUR-DOMAIN>\n```\n\n----------------------------------------\n\nTITLE: Running Netbird Signal Server with TLS (Let's Encrypt)\nDESCRIPTION: This command demonstrates how to run the Netbird Signal Server with TLS enabled using Let's Encrypt.  It creates a docker volume, maps ports 10000 and 443, mounts the volume, and specifies the Let's Encrypt domain.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/signal/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# create a volume\ndocker volume create netbird-signal\n# run the docker container\ndocker run -d --name netbird-signal \\\n-p 10000:10000  \\\n-p 443:443  \\\n-v netbird-signal:/var/lib/netbird  \\\nnetbirdio/signal:latest \\\n--letsencrypt-domain <YOUR-DOMAIN>\n```\n\n----------------------------------------\n\nTITLE: Running Self-Hosted NetBird Installation Script (Bash)\nDESCRIPTION: This bash script downloads and executes an installation script to quickly set up a self-hosted NetBird instance.  It exports the NETBIRD_DOMAIN environment variable before running the script. Requires curl and jq.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport NETBIRD_DOMAIN=netbird.example.com; curl -fsSL https://github.com/netbirdio/netbird/releases/latest/download/getting-started-with-zitadel.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Running Netbird Management Server via Docker without TLS - Bash\nDESCRIPTION: Provides Docker commands to create a volume and run the `netbirdio/management:latest` container. Configures port mapping (33073) and volume mapping (`netbird-mgmt:/var/lib/netbird`, `./config.json:/etc/netbird/config.json`). This configuration runs the server without TLS encryption, which is not recommended for production environments.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/management/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n# create a volume\ndocker volume create netbird-mgmt\n# run the docker container\ndocker run -d --name netbird-management \\\n-p 33073:33073  \\\n-v netbird-mgmt:/var/lib/netbird  \\\n-v ./config.json:/etc/netbird/config.json  \\\nnetbirdio/management:latest\n```\n\n----------------------------------------\n\nTITLE: Installing Go Dependencies - Shell\nDESCRIPTION: Runs the Go module tidy command to add missing and remove unused modules, ensuring that all Go dependencies for the project are correctly installed. Should be run from within the project root. Requires Go to be installed.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngo mod tidy\n```\n\n----------------------------------------\n\nTITLE: Cloning the NetBird Repository - Shell\nDESCRIPTION: Clones a forked NetBird repository from GitHub onto the local machine, replacing <your_github_username> with the actual GitHub username. Prerequisites include installed Git and a forked repository existing under the userâ€™s account. The output is a local clone of the repository.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/<your_github_username>/netbird.git\n```\n\n----------------------------------------\n\nTITLE: Adding Upstream Remote Repository - Shell\nDESCRIPTION: Adds the original NetBird repository as an 'upstream' remote in the local Git configuration, allowing contributors to fetch updates from the source project. Assumes the user is inside the repository directory. Needed for staying up-to-date with project changes.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit remote add upstream https://github.com/netbirdio/netbird.git\n```\n\n----------------------------------------\n\nTITLE: Opening Project in Visual Studio Code - Bash\nDESCRIPTION: Opens the current project folder in Visual Studio Code using the 'code' CLI command. Prerequisites include VS Code installed and the code command available in the system PATH. This step is required to use dev container features within VS Code.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncode .\n```\n\n----------------------------------------\n\nTITLE: Pulling Netbird Signal Server Docker Image\nDESCRIPTION: This command pulls the latest Netbird Signal Server Docker image from Docker Hub. This image is used to run the signal server in a containerized environment.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/signal/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull netbirdio/signal:latest\n```\n\n----------------------------------------\n\nTITLE: Running Test Suite - Shell\nDESCRIPTION: This command initiates the test suite for the Netbird project. It navigates into the `netbird` directory and uses `go test` with the `-exec sudo` flag to run the tests with elevated privileges using `sudo`.  The `./...` argument indicates that all tests in all subdirectories should be executed.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/CONTRIBUTING.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ncd netbird\ngo test -exec sudo ./...\n```\n\n----------------------------------------\n\nTITLE: Starting the NetBird Client in Foreground - Shell\nDESCRIPTION: Runs the NetBird client binary in the foreground with debug log level, sending logs to the console. On Unix systems, 'sudo' is used to ensure necessary network permissions. The client must be built beforehand and executed from the directory containing the binary.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/CONTRIBUTING.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsudo ./client up --log-level debug --log-file console\n```\n\n----------------------------------------\n\nTITLE: Building the Project with Goreleaser - Shell\nDESCRIPTION: Runs the Goreleaser utility to build the NetBird project in snapshot mode and cleans up previous builds. Ensure Goreleaser is installed and at the version specified in the release workflow configuration. This command must be executed from the repository root and produces build artifacts for testing and review. Output consists of built binaries, and prerequisites are Goreleaser installed and project dependencies resolved.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngoreleaser build --snapshot --clean\n```\n\n----------------------------------------\n\nTITLE: Building the NetBird Client - Go\nDESCRIPTION: Compiles the NetBird client code using Go with cgo disabled, generating a binary for the client service. The user must first change into the 'client' directory. Requires a Go toolchain installed and all dependencies fetched. Produces a standalone executable for the NetBird client.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ncd client\nCGO_ENABLED=0 go build .\n```\n\n----------------------------------------\n\nTITLE: Building the NetBird Management Service - Go\nDESCRIPTION: Compiles the management service after changing into the 'management' directory and running the 'go build' command. A Go toolchain installation and valid project dependencies are required. The output is an executable for managing the NetBird service.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/CONTRIBUTING.md#_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ncd management\ngo build .\n```\n\n----------------------------------------\n\nTITLE: Building the NetBird Signal Service - Go\nDESCRIPTION: Compiles the NetBird signal service by changing into the 'signal' directory and running the 'go build' command. Requires a Go toolchain and all dependencies resolved. Produces the signal service executable for subsequent service start commands.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/CONTRIBUTING.md#_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ncd signal\ngo build .\n```\n\n----------------------------------------\n\nTITLE: Documenting Netbird Management CLI Options - Shell\nDESCRIPTION: Explains the command-line arguments for the `netbird-mgmt management` command. Lists available flags like `--cert-file`, `--cert-key`, `--datadir`, `--letsencrypt-domain`, `--port`, and global flags like `--config`, `--log-file`, `--log-level`. Describes the purpose of each flag for configuring the management server.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/management/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nstart Netbird Management Server\n\nUsage:\n  netbird-mgmt management [flags]\n\nFlags:\n      --cert-file string            Location of your SSL certificate. Can be used when you have an existing certificate and don't want a new certificate be generated automatically. If letsencrypt-domain is specified this property has no effect\n      --cert-key string             Location of your SSL certificate private key. Can be used when you have an existing certificate and don't want a new certificate be generated automatically. If letsencrypt-domain is specified this property has no effect\n      --datadir string              server data directory location\n  -h, --help                        help for management\n      --letsencrypt-domain string   a domain to issue Let's Encrypt certificate for. Enables TLS using Let's Encrypt. Will fetch and renew certificate, and run the server with TLS\n      --port int                    server port to listen on (default 33073)\n\nGlobal Flags:\n      --config string      Netbird config file location to write new config to (default \"/etc/netbird\")\n      --log-file string    sets Netbird log path. If console is specified the the log will be output to stdout (default \"/var/log/netbird/management.log\")\n      --log-level string    (default \"info\")\n```\n\n----------------------------------------\n\nTITLE: Netbird Signal Server Command Options\nDESCRIPTION: These are the command-line flags accepted by the Netbird Signal Server daemon. It includes options for setting the port, enabling TLS with Let's Encrypt, and specifying SSL certificate locations.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/signal/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nstart Netbird Signal Server daemon\n\nUsage:\n  netbird-signal run [flags]\n\nFlags:\n  -h, --help                        help for run\n      --letsencrypt-domain string   a domain to issue Let's Encrypt certificate for. Enables TLS using Let's Encrypt. Will fetch and renew certificate, and run the server with TLS\n      --port int                    Server port to listen on (e.g. 10000) (default 10000)\n      --ssl-dir string              server ssl directory location. *Required only for Let's Encrypt certificates. (default \"/var/lib/netbird/\")\n      --cert-file string            Location of your SSL certificate. Can be used when you have an existing certificate and don't want a new certificate be generated automatically. If letsencrypt-domain is specified this property has no effect\n      --cert-key string             Location of your SSL certificate private key. Can be used when you have an existing certificate and don't want a new certificate be generated automatically. If letsencrypt-domain is specified this property has no effect\n\nGlobal Flags:\n      --log-file string    sets Netbird log path. If console is specified the the log will be output to stdout (default \"/var/log/netbird/signal.log\")\n      --log-level string    (default \"info\")\n```\n\n----------------------------------------\n\nTITLE: Running Netbird Signal Server with Docker\nDESCRIPTION: This command runs the Netbird Signal Server Docker container. It maps port 10000 on the host to port 10000 in the container and names the container 'netbird-signal'.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/signal/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d --name netbird-signal -p 10000:10000 netbirdio/signal:latest\n```\n\n----------------------------------------\n\nTITLE: Starting the NetBird Management Service - Shell\nDESCRIPTION: Starts the management service binary with debug logging, writing logs to the console and loading configuration from './management.json'. Assumes the management binary has been built and a valid configuration file is present. Requires proper permissions for files and network ports.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/CONTRIBUTING.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n./management management --log-level debug --log-file console --config ./management.json\n```\n\n----------------------------------------\n\nTITLE: Running Netbird Management Server via Docker Debug Image - Shell\nDESCRIPTION: Shows how to run the `netbirdio/management:debug-latest` Docker image, mapping ports and volumes similar to other examples. It then demonstrates how to use `docker exec -ti` to get an interactive shell inside the running debug container, which is useful for troubleshooting and development due to the included debugging tools and `distroless/base:debug` base image.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/management/README.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nshell $ docker run -d --name netbird-management-debug \\\n-p 33073:33073  \\\n-v netbird-mgmt:/var/lib/netbird  \\\n-v ./config.json:/etc/netbird/config.json  \\\nnetbirdio/management:debug-latest\n\nshell $ docker exec -ti netbird-management-debug /bin/sh\ncontainer-shell $ \n```\n\n----------------------------------------\n\nTITLE: Running Netbird Signal Server with Docker and Log Level\nDESCRIPTION: This command runs the Netbird Signal Server Docker container with a specified log level. It maps port 10000 and sets the log level to DEBUG using the `--log-level` flag.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/signal/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d --name netbird-signal -p 10000:10000 netbirdio/signal:latest --log-level DEBUG\n```\n\n----------------------------------------\n\nTITLE: Installing Go gRPC Development Tools - Bash\nDESCRIPTION: Provides two `go install` commands. The first installs `protoc-gen-go@v1.26`, the Go plugin for the Protocol Buffers compiler. The second installs `protoc-gen-go-grpc@v1.1`, the Go plugin for gRPC code generation. These tools are prerequisites for generating Go source code from `.proto` files for gRPC services.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/management/README.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\n#!/bin/bash\ngo install google.golang.org/protobuf/cmd/protoc-gen-go@v1.26\ngo install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.1\n```\n\n----------------------------------------\n\nTITLE: Installing gRPC Tools for Go\nDESCRIPTION: These commands install the necessary gRPC tools for Go development. This includes the protocol buffer compiler plugin for Go and the gRPC Go plugin.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/signal/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\ngo install google.golang.org/protobuf/cmd/protoc-gen-go@v1.26\ngo install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.1\n```\n\n----------------------------------------\n\nTITLE: Generating Go gRPC Code from Proto File - Bash\nDESCRIPTION: Shows the `protoc` command used to compile a Protocol Buffers definition file (`proto/management.proto`). It specifies the include path (`-I proto/`) and uses the installed Go plugins (`--go_out=.` and `--go-grpc_out=.`) to generate Go source files for the Protobuf messages and gRPC service definitions in the current directory (`.`). This is a typical step in Go gRPC development workflows.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/management/README.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\n#!/bin/bash\nprotoc -I proto/ proto/management.proto --go_out=. --go-grpc_out=.\n```\n\n----------------------------------------\n\nTITLE: Building Client - Shell\nDESCRIPTION: This command builds the client application for the Netbird project, specifically targeting the Windows amd64 architecture.  It uses the `go build` command with specific CGO, GOOS, and GOARCH settings. It also disables CGO by setting CGO_ENABLED to 0. The resulting executable, `netbird.exe`, is then moved to the distribution directory for the Windows installer.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/CONTRIBUTING.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nCGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -o netbird.exe ./client/\nmv netbird.exe ./dist/netbird_windows_amd64/\n```\n\n----------------------------------------\n\nTITLE: Building Windows Installer - Shell\nDESCRIPTION: This command compiles the Netbird Windows installer using the NSIS compiler.  It sets the `APPVER` environment variable and then invokes `makensis` to build the installer script located at `client/installer.nsis`. The `-V4` flag specifies verbose output during the compilation process.  The output is an installer executable named `netbird-installer.exe`.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/CONTRIBUTING.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nexport APPVER=0.0.0.1\nmakensis -V4 client/installer.nsis\n```\n\n----------------------------------------\n\nTITLE: Building UI client - Shell\nDESCRIPTION: This shell command builds the UI client for the Netbird application targeting the Windows amd64 architecture.  It utilizes `go build` and specifies the compiler (`CC`), CGO settings, GOOS, GOARCH, and ldflags to create an executable named `netbird-ui.exe`. The `-ldflags \"-s -w -H windowsgui\"`  flags are used for stripping debug symbols, disabling stack frame pointers and enabling windows GUI subsystem to avoid console window. Finally, it moves the created executable to the distribution directory.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/CONTRIBUTING.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nCC=x86_64-w64-mingw32-gcc CGO_ENABLED=1 GOOS=windows GOARCH=amd64 go build -o netbird-ui.exe -ldflags \\\"-s -w -H windowsgui\\\" ./client/ui\nmv netbird-ui.exe ./dist/netbird_windows_amd64/\n```\n\n----------------------------------------\n\nTITLE: Inspect Ing Docker Volume Mountpoint - Shell\nDESCRIPTION: Provides the `docker volume inspect` command followed by the volume name. This command outputs detailed information about the specified Docker volume, including its `Mountpoint` property, which shows the absolute path on the host machine where the volume data is stored. Useful for locating persisted data like certificates.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/management/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ndocker volume inspect netbird-mgmt\n[\n    {\n        \"CreatedAt\": \"2021-07-25T20:45:28Z\",\n        \"Driver\": \"local\",\n        \"Labels\": {},\n        \"Mountpoint\": \"/var/lib/docker/volumes/mgmt/_data\",\n        \"Name\": \"netbird-mgmt\",\n        \"Options\": {},\n        \"Scope\": \"local\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Generating PacketFilter Mock using mockgen (Bash)\nDESCRIPTION: This Bash command utilizes the 'mockgen' tool to generate a Go mock implementation for the 'PacketFilter' interface located in the 'github.com/netbirdio/netbird/iface' package. The generated mock code will be saved to 'iface/mocks/filter.go' within the 'mocks' package. Requires 'mockgen' (https://github.com/golang/mock) to be installed beforehand.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/client/iface/mocks/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmockgen -destination iface/mocks/filter.go -package mocks github.com/netbirdio/netbird/iface PacketFilter\n```\n\n----------------------------------------\n\nTITLE: Generating IFaceMapper mock in Go using mockgen\nDESCRIPTION: This command uses mockgen to generate a mock implementation of the IFaceMapper interface. It creates the mock file at mocks/iface_mapper.go within the ./client/internal/acl directory and places the generated code in the mocks package. mockgen needs to be installed before running the command.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/client/internal/acl/mocks/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmockgen -destination mocks/iface_mapper.go -package mocks . IFaceMapper\n```\n\n----------------------------------------\n\nTITLE: Building and Running Go UDP Socket Example\nDESCRIPTION: Builds the Go executable named sharedsock from source code in the current directory, then runs it with sudo privileges. This Go program handles incoming UDP packets on port 51820 and parses STUN binding requests, displaying relevant output.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/sharedsock/example/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo build -o sharedsock && sudo ./sharedsock\n```\n\n----------------------------------------\n\nTITLE: Sending a STUN Binding Request Packet via netcat in Bash\nDESCRIPTION: Defines a hex string representing a STUN binding request packet, converts it to binary using xxd, and sends it to localhost UDP port 51820 using netcat with a timeout of 1 second. This tests the Go program's handling and recognition of STUN packets.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/sharedsock/example/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nSTUN_PACKET=\"000100002112A4425454\" \necho -n $STUN_PACKET | xxd -r -p | nc -u -w 1 localhost 51820\n```\n\n----------------------------------------\n\nTITLE: Generating gRPC Code from Proto File\nDESCRIPTION: This command generates gRPC code from the `signalexchange.proto` file.  It uses the `protoc` compiler with the Go and gRPC Go plugins to create Go source files.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/signal/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\nprotoc -I proto/ proto/signalexchange.proto --go_out=. --go-grpc_out=.\n```\n\n----------------------------------------\n\nTITLE: Listening on UDP Port 51820 Using netcat in Bash\nDESCRIPTION: Sets up netcat to listen persistently (-k) in verbose and UDP mode (-u), on UDP port 51820 using Linux-compatible netcat. This external process receives and outputs UDP packets for testing interactions with the Go program.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/sharedsock/example/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnc -kluvw 1 51820\n```\n\n----------------------------------------\n\nTITLE: Triggering Let's Encrypt Certificate Generation - Bash\nDESCRIPTION: Shows a simple `curl` command to access the server via its domain. This triggers the Let's Encrypt challenge within the running Docker container, initiating the process of fetching and configuring the SSL certificate.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/management/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ncurl https://<YOUR-DOMAIN>\n```\n\n----------------------------------------\n\nTITLE: Starting the NetBird Signal Service - Shell\nDESCRIPTION: Runs the compiled NetBird signal service with debug-level logging directed to the console. Assumes build artifacts are present in the current directory. Designed for use on Unix-like systems.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/CONTRIBUTING.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n./signal run --log-level debug --log-file console\n```\n\n----------------------------------------\n\nTITLE: Receiving Output Indicating STUN Packet Handling in Go\nDESCRIPTION: An example output line from the Go program that confirms reading a STUN packet of size 18 bytes, demonstrating successful capture and parsing within the Go UDP socket listener.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/sharedsock/example/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nread a STUN packet of size 18 from ...\n```\n\n----------------------------------------\n\nTITLE: Sending a Non-STUN UDP Packet Using netcat in Bash\nDESCRIPTION: Sends a plain text UDP message 'hello' to localhost on UDP port 51820 using netcat with 1 second timeout. The Go program will not produce any output in response, illustrating selective packet processing for STUN packets only.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/sharedsock/example/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\necho -n 'hello' |  nc -u -w 1 localhost 51820\n```\n\n----------------------------------------\n\nTITLE: Defining bpf_printk Macro for eBPF Debugging in C\nDESCRIPTION: This C preprocessor macro defines `bpf_printk` as a wrapper around the `bpf_trace_printk` eBPF helper function. It allows formatted string output with variable arguments for debugging purposes within eBPF programs. Usage requires the `CONFIG_BPF_EVENTS` kernel module to be loaded.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/client/internal/ebpf/ebpf/src/readme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define bpf_printk(fmt, ...)                                                   \\\n  ({                                                                           \\\n    char ____fmt[] = fmt;                                                      \\\n    bpf_trace_printk(____fmt, sizeof(____fmt), ##__VA_ARGS__);                 \\\n  })\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to netbird - Shell\nDESCRIPTION: Changes the current working directory to the 'netbird' folder, which contains the cloned project files. This must be executed after the repository has been successfully cloned.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd netbird\n```\n\n----------------------------------------\n\nTITLE: Creating dist directory - Shell\nDESCRIPTION: This command creates the distribution directory structure for the Windows Netbird installer.  It uses `mkdir -p` to create the necessary directories recursively, ensuring the target directory `dist/netbird_windows_amd64` exists.  This directory will hold the built binaries.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/CONTRIBUTING.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p dist/netbird_windows_amd64\n```\n\n----------------------------------------\n\nTITLE: Running golangci-lint for Code Linting - Shell\nDESCRIPTION: Executes the golangci-lint tool to perform linting checks on the repository, identifying code quality and style issues based on configured rules. The tool must be installed according to the workflowâ€™s YAML file. Run this from the repository root. No parameters are required; results are printed to the console.\nSOURCE: https://github.com/netbirdio/netbird/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngolangci-lint run\n```"
  }
]