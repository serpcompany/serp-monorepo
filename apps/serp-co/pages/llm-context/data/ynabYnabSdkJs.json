[
  {
    "owner": "ynab",
    "repo": "ynab-sdk-js",
    "content": "TITLE: Basic Usage of YNAB SDK to Fetch Budgets\nDESCRIPTION: TypeScript example demonstrating how to initialize the YNAB API with an access token and fetch budget data asynchronously.\nSOURCE: https://github.com/ynab/ynab-sdk-js/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst ynab = require(\"ynab\");\nconst accessToken = \"b43439eaafe2_this_is_fake_b43439eaafe2\";\nconst ynabAPI = new ynab.API(accessToken);\n\n(async function() {\n  const budgetsResponse = await ynabAPI.budgets.getBudgets();\n  const budgets = budgetsResponse.data.budgets;\n  for (let budget of budgets) {\n    console.log(`Budget Name: ${budget.name}`);\n  }\n})();\n```\n\n----------------------------------------\n\nTITLE: Utility Functions for Working with YNAB API Dates and Currency in TypeScript\nDESCRIPTION: A collection of utility functions for working with ISO 8601 date formats and milliunits currency amounts in the YNAB API. These functions simplify date handling and currency conversion operations commonly needed when working with the API.\nSOURCE: https://github.com/ynab/ynab-sdk-js/blob/main/README.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Returns the current month (system timezone) in ISO 8601 format (i.e. '2015-12-01')\nutils.getCurrentMonthInISOFormat(): string;\n// Returns the current date (system timezone) in ISO 8601 format (i.e. '2015-12-15')\nutils.getCurrentDateInISOFormat(): string;\n// Converts an ISO 8601 formatted string to a JS date object\nutils.convertFromISODateString(isoDateString: string): Date;\n// Converts a milliunits amount to a currency amount\nutils.convertMilliUnitsToCurrencyAmount(milliunits: number, currencyDecimalDigits: number): number;\n```\n\n----------------------------------------\n\nTITLE: Error Handling with YNAB SDK\nDESCRIPTION: TypeScript example showing how to handle errors when using the YNAB API, specifically for cases like invalid authentication tokens.\nSOURCE: https://github.com/ynab/ynab-sdk-js/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst ynab = require(\"ynab\");\nconst accessToken = \"invalid_token\";\nconst ynabAPI = new ynab.API(accessToken);\n\nconst budgetsResponse = ynabAPI.budgets\n  .getBudgets()\n  .then(budgetsResponse => {\n    // Won't get here because an error will be thrown\n  })\n  .catch(e => {\n    console.log(e);\n    // {\n    //   error: {\n    //    id: \"401\",\n    //    name: \"unauthorized\",\n    //    detail: \"Unauthorized\"\n    //   }\n    // }\n  });\n```\n\n----------------------------------------\n\nTITLE: Installing YNAB SDK with npm\nDESCRIPTION: Command to install the YNAB JavaScript SDK using npm package manager.\nSOURCE: https://github.com/ynab/ynab-sdk-js/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install ynab\n```\n\n----------------------------------------\n\nTITLE: Importing YNAB SDK in CommonJS/Node Environment\nDESCRIPTION: Code snippet showing how to require the YNAB SDK in a CommonJS or Node.js environment.\nSOURCE: https://github.com/ynab/ynab-sdk-js/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst ynab = require(\"ynab\");\n```\n\n----------------------------------------\n\nTITLE: Importing YNAB SDK in ESM/TypeScript Environment\nDESCRIPTION: Code snippet showing how to import the YNAB SDK in an ESM or TypeScript environment.\nSOURCE: https://github.com/ynab/ynab-sdk-js/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as ynab from \"ynab\";\n```\n\n----------------------------------------\n\nTITLE: Including YNAB SDK in Browser with Script Tag\nDESCRIPTION: HTML and JavaScript code demonstrating how to include and use the YNAB SDK in a browser environment with a script tag.\nSOURCE: https://github.com/ynab/ynab-sdk-js/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<script src=\"ynab.js\" async></script>\n...\n<script>\n  // This assignment is not necessary but demonstrates that\n  // once the library is loaded, the global 'ynab' object will be available.\n  var ynab = window.ynab;\n</script>\n```\n\n----------------------------------------\n\nTITLE: Including YNAB SDK via CDN in Browser\nDESCRIPTION: HTML code showing how to load the YNAB SDK from the unpkg CDN in a browser environment.\nSOURCE: https://github.com/ynab/ynab-sdk-js/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<script src=\"https://unpkg.com/ynab@latest/dist/browser/ynab.js\" async></script>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for YNAB SDK Development\nDESCRIPTION: Command to install npm dependencies for the project. This is the first step in setting up the development environment.\nSOURCE: https://github.com/ynab/ynab-sdk-js/blob/main/DEVELOPMENT.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Building and Testing YNAB SDK\nDESCRIPTION: Command chain to build the SDK and run the test suite. This verifies that the development environment is properly set up.\nSOURCE: https://github.com/ynab/ynab-sdk-js/blob/main/DEVELOPMENT.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build && npm run test\n```\n\n----------------------------------------\n\nTITLE: Generating API Client from OpenAPI Specification\nDESCRIPTION: Command to generate the API client from the latest OpenAPI specification. This should be run before opening a PR with updates.\nSOURCE: https://github.com/ynab/ynab-sdk-js/blob/main/DEVELOPMENT.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run generate\n```"
  }
]