[
  {
    "owner": "schemathesis",
    "repo": "schemathesis",
    "content": "TITLE: Setting Authentication Credentials in Python Tests\nDESCRIPTION: This code snippet demonstrates how to set authentication credentials (header, cookie, and query parameter) directly within a Schemathesis test function. It uses the `case.call_and_validate` method to send the request with the specified credentials. The example assumes that a Schemathesis schema is already loaded from a URL.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/auth.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\n\nschema = schemathesis.openapi.from_url(\"https://example.schemathesis.io/openapi.json\")\n\n\n@schema.parametrize()\ndef test_api(case):\n    # Header\n    case.call_and_validate(headers={\"Authorization\": \"Bearer TOKEN\"})\n    # Cookie\n    case.call_and_validate(cookies={\"session\": \"SECRET\"})\n    # Query parameter\n    case.call_and_validate(params={\"Api-Key\": \"KEY\"})\n```\n\n----------------------------------------\n\nTITLE: Global Authentication Configuration in TOML\nDESCRIPTION: This snippet demonstrates how to configure global authentication settings in a Schemathesis TOML configuration file. It showcases basic authentication and bearer token authentication methods. The username and password for basic authentication, and the bearer token, can be defined using environment variables.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/configuration.md#_snippet_2\n\nLANGUAGE: TOML\nCODE:\n```\n[auth]\n# Basic authentication\nbasic = { username = \"${USERNAME}\", password = \"${PASSWORD}\" }\n\n# Bearer token authentication\nbearer = \"${TOKEN}\"\n```\n\n----------------------------------------\n\nTITLE: Fill Missing Examples Configuration (TOML)\nDESCRIPTION: Demonstrates how to configure Schemathesis to generate simple examples for API operations that lack them. Setting `fill-missing-examples` to `true` ensures every operation is tested during the examples phase.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/openapi/examples.md#_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[generation]\nfill-missing-examples = true\n```\n\n----------------------------------------\n\nTITLE: API Authorization with Requests and Setup Hook\nDESCRIPTION: This snippet shows how to implement API authorization using the `requests` library and the `setup` hook. It makes a login request, parses the response to extract the authentication token, and stores the token in the headers, which are then used for subsequent API calls. It uses `setup` to ensure the login request is always executed before any other requests.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/stateful.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\n\nclass APIWorkflow(schema.as_state_machine()):\n    headers: dict\n\n    def setup(self):\n        # Make a login request\n        response = requests.post(\n            \"http://0.0.0.0/api/login\", json={\"login\": \"test\", \"password\": \"password\"}\n        )\n        # Parse the response and store the token in headers\n        token = response.json()[\"auth_token\"]\n        self.headers = {\"Authorization\": f\"Bearer {token}\"}\n\n    def get_call_kwargs(self, case):\n        # Use stored headers\n        return {\"headers\": self.headers}\n```\n\n----------------------------------------\n\nTITLE: Run Schemathesis with Config File\nDESCRIPTION: This command runs Schemathesis with a custom configuration file.  It loads settings from the specified TOML file. Make sure the file exists and is accessible in the current working directory. The configuration file allows for centralized management of test parameters.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/ci/overview.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ st --config-file my-config.toml run http://api-host:port/openapi.json\n```\n\n----------------------------------------\n\nTITLE: Using Schemathesis in Python Code\nDESCRIPTION: This Python code snippet demonstrates how to integrate Schemathesis into a Python project. It imports the `schemathesis` library, loads an OpenAPI schema from a URL, and defines a test function decorated with `schema.parametrize()` to execute test cases against the API.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/README.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\n\nschema = schemathesis.openapi.from_url(\"https://example.schemathesis.io/openapi.json\")\n\n\n@schema.parametrize()\ndef test_api(case):\n    case.call_and_validate()\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Examples per Operation in Schemathesis (TOML)\nDESCRIPTION: This snippet sets the maximum number of test cases generated per API operation to 200 in Schemathesis. The `max-examples` setting controls the maximum number of examples generated during the fuzzing and stateful testing phases. This value must be greater than or equal to 1.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_40\n\nLANGUAGE: TOML\nCODE:\n```\n[generation]\nmax-examples = 200\n```\n\n----------------------------------------\n\nTITLE: Implementing Refresh Tokens in Schemathesis Authentication\nDESCRIPTION: This code demonstrates how to implement refresh tokens for authentication in Schemathesis. The `MyAuth` class holds a `refresh_token` and uses it to refresh the access token when necessary. If no refresh token is available, it performs a login to obtain a new access token and refresh token.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/auth.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nimport schemathesis\n\nTOKEN_ENDPOINT = \"https://auth.myapp.com/api/token/\"\nREFRESH_ENDPOINT = \"https://auth.myapp.com/api/refresh/\"\nUSERNAME = \"demo\"\nPASSWORD = \"test\"\n\n\n@schemathesis.auth()\nclass MyAuth:\n    def __init__(self):\n        self.refresh_token = None\n\n    def get(self, case, context):\n        if self.refresh_token is not None:\n            return self.refresh(context)\n        return self.login(context)\n\n    def login(self, context):\n        response = requests.post(\n            TOKEN_ENDPOINT,\n            json={\"username\": USERNAME, \"password\": PASSWORD},\n        )\n        data = response.json()\n        self.refresh_token = data[\"refresh_token\"]\n        return data[\"access_token\"]\n\n    def refresh(self, context):\n        response = requests.post(\n            REFRESH_ENDPOINT,\n            headers={\"Authorization\": f\"Bearer {self.refresh_token}\"},\n        )\n        data = response.json()\n        self.refresh_token = data[\"refresh_token\"]\n        return data[\"access_token\"]\n\n    def set(self, case, data, context):\n        case.headers = case.headers or {}\n        case.headers = {\"Authorization\": f\"Bearer {data}\"}\n```\n\n----------------------------------------\n\nTITLE: Using Bearer Token Authentication\nDESCRIPTION: Demonstrates how to use Bearer token authentication by setting the `Authorization` header with the token. This is a standard method for authenticating API requests using tokens.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/cli.md#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --header \"Authorization: Bearer your-token-here\"\n```\n\n----------------------------------------\n\nTITLE: Testing your own API using local schema file\nDESCRIPTION: This snippet shows how to run Schemathesis against your own API using a local OpenAPI schema file. The `--url` option specifies the base URL of the API to test.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/getting-started.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n# If you have a local schema file\n$ st run ./openapi.yaml --url https://your-api.com\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Failures in TOML\nDESCRIPTION: Demonstrates how to set the maximum number of failures before terminating the test run. This example sets the maximum number of failures to 42.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\nmax-failures = 42\n```\n\n----------------------------------------\n\nTITLE: Providing API Key from Environment Variable\nDESCRIPTION: Uses an environment variable to provide an API key via header. This helps to avoid exposing sensitive API keys directly in the command history, making the commands more secure.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/cli.md#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --header \"X-API-Key: ${API_KEY}\"\n```\n\n----------------------------------------\n\nTITLE: Schemathesis GitHub Action Workflow\nDESCRIPTION: This YAML file defines a GitHub Actions workflow that runs Schemathesis tests on every pull request. It checks out the code, starts the application using Docker Compose, runs the Schemathesis action against the specified schema, and then stops the containers. Requires the `schemathesis/action@v1` action and `docker-compose` setup.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/ci/github-actions.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nname: Schemathesis Test\n\non: [pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Start containers\n      run: docker compose up -d --build\n\n    - uses: schemathesis/action@v1\n      with:\n        schema: 'http://127.0.0.1:5123/openapi.json'\n\n    - name: Stop containers\n      if: always()\n      run: docker-compose down\n```\n\n----------------------------------------\n\nTITLE: Basic API Test with Schemathesis in Python\nDESCRIPTION: This code snippet demonstrates the basic usage of Schemathesis to load an API schema from a URL and execute tests for all operations defined in the schema. The `schema.parametrize()` decorator generates test cases for each API operation, and `case.call_and_validate()` executes each test and validates the response against the schema.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/python.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\n\nschema = schemathesis.openapi.from_url(\"https://example.schemathesis.io/openapi.json\")\n\n\n@schema.parametrize()\ndef test_api(case):\n    case.call_and_validate()\n```\n\n----------------------------------------\n\nTITLE: Phase Configuration in TOML\nDESCRIPTION: This snippet demonstrates how to configure test phases in a Schemathesis TOML configuration file.  It allows you to enable or disable specific phases, such as coverage, fuzzing, or stateful, and to configure phase-specific settings like the maximum number of examples or API call sequences. This allows for fine-grained control over the testing process.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/configuration.md#_snippet_4\n\nLANGUAGE: TOML\nCODE:\n```\n[phases]\n# Disable a specific phase\ncoverage.enabled = false\n\n# Phase-specific settings\n# Maximum number of distinct API call sequences\nstateful.generation.max-examples = 30\n# Maximum examples per operation in fuzzing phase\nfuzzing.generation.max-examples = 200\n```\n\n----------------------------------------\n\nTITLE: Modifying Data with a Schemathesis Hook (Python)\nDESCRIPTION: This example shows how to use a Schemathesis hook to modify generated data.  It modifies the query parameters to always test with a specific user ID (101). This is useful for ensuring that tests include specific, predefined values.  It's important to explicitly return the modified data from the hook. It depends on `schemathesis` library.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/extending.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@schemathesis.hook\ndef map_query(context, query):\n    # Always test with known test user ID\n    query[\"user_id\"] = 101\n    return query\n```\n\n----------------------------------------\n\nTITLE: Enabling JUnit Report Generation in TOML\nDESCRIPTION: Shows how to enable the generation of JUnit reports.  Replace `<format>` with `junit`, `vcr`, or `har` to enable other formats.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[reports.junit]\nenabled = true\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Substitution in TOML\nDESCRIPTION: Shows how to use environment variables within a TOML configuration file for Schemathesis, allowing for dynamic configuration based on the environment. This example sets the base URL and authorization header using environment variables.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nbase-url = \"https://${API_HOST}/v1\"\nheaders = { Authorization = \"Bearer ${API_TOKEN}\" }\n```\n\n----------------------------------------\n\nTITLE: Testing FastAPI Applications with Schemathesis (ASGI)\nDESCRIPTION: This snippet demonstrates how to use Schemathesis with a FastAPI application, an ASGI framework. It initializes a FastAPI app, defines an API endpoint, and uses `schemathesis.openapi.from_asgi` to load the schema from the application. This allows for synchronous testing of ASGI applications without actual network calls.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/python.rst#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\nimport schemathesis\n\napp = FastAPI()\n\n\n@app.get(\"/v1/users\")\nasync def users():\n    return [{\"name\": \"Robin\"}]\n\n\n# Load the schema from the ASGI app\nschema = schemathesis.openapi.from_asgi(\"/openapi.json\", app)\n\n\n@schema.parametrize()\ndef test_api(case):\n    # The test case will make a call to the application and validate the response\n    # against the defined schema automatically.\n    case.call_and_validate()\n```\n\n----------------------------------------\n\nTITLE: Integrating Hypothesis Strategies with Schemathesis\nDESCRIPTION: This snippet demonstrates how to integrate Hypothesis strategies with Schemathesis to enhance data generation. It uses `schema.given` to provide additional strategies to the test function, enabling more complex and conditional data generation, specifically modifying the request body based on the generated data.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/python.rst#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom hypothesis import strategies as st\n\nschema = ...  # Load the API schema here\n\n\n@schema.include(path=\"/api/auth/password/reset/\").parametrize()\n@schema.given(data=st.data())\ndef test_password_reset(data, case, user):\n    if data.draw(st.booleans()):\n        case.body[\"token\"] = data.draw(\n            (st.emails() | st.just(user.email)).map(create_reset_password_token)\n        )\n    case.call_and_validate()\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom hypothesis import strategies as st, settings, Phase\n\n...\n\n@schema.parametrize()\n@schema.given(data=st.data())\n@settings(phases=set(Phase) - {Phase.explicit})\ndef test_api(data, case, user):\n    ...\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom hypothesis import settings, Phase\n\n...\n\n@schema.parametrize()\n@settings(phases=[Phase.explicit])\ndef test_explicit_examples(data, case, user):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Maximum Test Cases Configuration - Console\nDESCRIPTION: This command sets the maximum number of test cases per API operation in Schemathesis to 100.  The value must be an integer greater than or equal to 1.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_35\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --max-examples 100\n```\n\n----------------------------------------\n\nTITLE: Conditional Validation Based on Response and Case\nDESCRIPTION: This snippet shows how to run different checks based on the result of the previous API call using response status code and `case` parameters to validate the API response. It defines a `check_condition` function that performs different assertions depending on the response status code of `GET /items/{id}` API call. It leverages the `validate_response` method of the APIWorkflow class to include this custom check alongside default checks.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/stateful.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef check_condition(response, case):\n    if case.source is not None:\n        # Run this check only for `GET /items/{id}`\n        if case.method == \"GET\" and case.path == \"/items/{id}\":\n            value = response.json()\n            if case.source.response.status_code == 201:\n                assert value in (\"IN_PROGRESS\", \"COMPLETE\")\n            if case.source.response.status_code == 400:\n                assert value == \"REJECTED\"\n\n\nclass APIWorkflow(schema.as_state_machine()):\n    def validate_response(self, response, case):\n        # Run all default checks together with the new one\n        super().validate_response(response, case, additional_checks=(check_condition,))\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Authentication Mechanism in Python\nDESCRIPTION: This code demonstrates the implementation of a custom authentication mechanism for Schemathesis.  The `MyAuth` class defines the `get` and `set` methods. The `get` method retrieves an authentication token from an endpoint, and the `set` method adds the token to the request headers. The snippet requires the `requests` library.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/auth.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nTOKEN_ENDPOINT = \"https://example.schemathesis.io/api/token/\"\nUSERNAME = \"demo\"\nPASSWORD = \"test\"\n\n\nclass MyAuth:\n    def get(self, case, context):\n        response = requests.post(\n            TOKEN_ENDPOINT,\n            json={\"username\": USERNAME, \"password\": PASSWORD},\n        )\n        data = response.json()\n        return data[\"access_token\"]\n\n    def set(self, case, data, context):\n        case.headers = case.headers or {}\n        case.headers[\"Authorization\"] = f\"Bearer {data}\"\n```\n\n----------------------------------------\n\nTITLE: Running Schemathesis excluding deprecated operations\nDESCRIPTION: This command executes Schemathesis, skipping all API operations marked as deprecated. This ensures the tests focus on current and supported endpoints.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --exclude-deprecated\n```\n\n----------------------------------------\n\nTITLE: Load API Schema from WSGI/ASGI App in Python\nDESCRIPTION: This example shows how to load an API schema directly from a WSGI or ASGI application using `schemathesis.openapi.from_wsgi` or `schemathesis.openapi.from_asgi`. This is more efficient as it avoids network requests.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/python.rst#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom project import app\n\n# WSGI\nschema = schemathesis.openapi.from_wsgi(\"/api/openapi.json\", app)\n# Or ASGI\nschema = schemathesis.openapi.from_asgi(\"/api/openapi.json\", app)\n```\n\n----------------------------------------\n\nTITLE: Include and Exclude Operations in Schemathesis Python Tests\nDESCRIPTION: This code snippet demonstrates how to narrow the scope of Schemathesis tests by including or excluding specific operations based on tags and HTTP methods.  The `schema.include()` and `schema.exclude()` methods are used to select specific operations for testing. The `parametrize()` decorator generates the tests.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/python.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@schema.include(tag=\"admin\").exclude(method=\"POST\").parametrize()\ndef test_api(case):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Project-Specific Settings - TOML\nDESCRIPTION: These snippets illustrate how to override global defaults with project-specific settings. They show defining different base URLs, worker counts, generation settings, and hooks for different API projects.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/configuration.md#_snippet_27\n\nLANGUAGE: TOML\nCODE:\n```\n[[projects]]\ntitle = \"Payment Processing API\"\nbase-url = \"https://payments.example.com\"\nworkers = 4\ngeneration.max-examples = 200\nhooks = \"test.config.hooks.example\"\n```\n\nLANGUAGE: TOML\nCODE:\n```\n[[projects]]\ntitle = \"User Management API\"\nbase-url = \"https://users.example.com\"\nworkers = 2\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Authentication at Schema Level\nDESCRIPTION: This snippet demonstrates registering a custom authentication mechanism at the schema level in Schemathesis. The `@schema.auth()` decorator is used to register the `MyAuth` class with the schema instance, applying the authentication to all tests generated from the schema. Requires definition of `MyAuth`.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/auth.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\n\nschema = schemathesis.openapi.from_url(\"https://example.schemathesis.io/openapi.json\")\n\n\n@schema.auth()\nclass MyAuth:\n    # Here goes your implementation\n    ...\n```\n\n----------------------------------------\n\nTITLE: Custom Filter Function in Schemathesis Python Tests\nDESCRIPTION: This example shows how to use a custom filter function to include specific API operations in Schemathesis tests, based on a condition defined within the filter.  The function receives a `ctx` object, which contains information about the current operation. The return value should be a boolean indicating whether to include the operation.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/python.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef my_custom_filter(ctx):\n    return ctx.operation.definition.resolved.get(\"x-property\") == 42\n\n@schema.include(my_custom_filter).parametrize()\ndef test_api(case):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Running Schemathesis with custom headers\nDESCRIPTION: This command executes Schemathesis, adding two custom HTTP headers to every request. This is useful for including API keys or specifying accepted languages.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml \\\n  --header \"X-API-Key: abcdef123456\" \\\n  --header \"Accept-Language: en-US\"\n```\n\n----------------------------------------\n\nTITLE: Lazy Schema Loading with pytest Fixture\nDESCRIPTION: This Python snippet demonstrates lazy schema loading for stateful testing using a pytest fixture. The state machine is created within the fixture, allowing the use of pytest fixtures during schema loading.  The test_statefully function then runs the state machine. This approach is useful when the application depends on test fixtures and loading the schema too early should be avoided.  It assumes an openapi.json file is available at the specified URL.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/stateful.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nimport schemathesis\n\n\n@pytest.fixture\ndef state_machine():\n    # You may use any schema loader here\n    # or use any pytest fixtures\n    schema = schemathesis.openapi.from_url(\"https://example.schemathesis.io/openapi.json\")\n    return schema.as_state_machine()\n\n\ndef test_statefully(state_machine):\n    state_machine.run()\n```\n\n----------------------------------------\n\nTITLE: Filtering Operations by HTTP Method - POST\nDESCRIPTION: Filters API operations to include only POST requests for testing. This example provides a specific use case for the `--include-method` flag.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/cli.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ st run --include-method POST ...\n```\n\n----------------------------------------\n\nTITLE: Conditional Authentication with apply_to and skip_for\nDESCRIPTION: This snippet showcases the use of `apply_to` and `skip_for` to apply authentication conditionally to specific API operations based on path and method.  In this example, authentication is applied to all `/users/` paths except for the `POST` method. Requires definition of `MyAuth`.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/auth.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\n\n\n@schemathesis.auth().apply_to(path=\"/users/\").skip_for(method=\"POST\")\nclass MyAuth:\n    # Here goes your implementation\n    ...\n\n\nschema = schemathesis.openapi.from_url(\"https://example.schemathesis.io/openapi.json\")\n\n\n@schema.auth(MyAuth).apply_to(path=\"/users/\").skip_for(method=\"POST\")\n@schema.parametrize()\ndef test_api(case):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Configuration File\nDESCRIPTION: Specifies a custom configuration file for Schemathesis to use during the test run. This allows users to define authentication settings, overrides, and other configurations in a structured file rather than through command-line arguments. The command uses the `--config-file` option.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/cli.md#_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ st --config-file config.toml run openapi.yaml\n```\n\n----------------------------------------\n\nTITLE: Running Pytest Tests (Shell)\nDESCRIPTION: Executes pytest tests with a short traceback output. This command initiates the test suite defined in the `/tests` directory, providing a concise overview of any failures or errors.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/example/README.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\npytest tests --tb=short\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Test Functions with Schemathesis\nDESCRIPTION: This example demonstrates how to use Schemathesis with asynchronous test functions using `pytest-asyncio` or `pytest-trio`. It shows a basic asynchronous test function decorated with `@pytest.mark.trio` and `@schema.parametrize()`, indicating that Schemathesis supports asynchronous tests without additional configuration.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/python.rst#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nimport schemathesis\n\nschema = ...\n\n@pytest.mark.trio\n@schema.parametrize()\nasync def test_api(case):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Operation Filter by Path in TOML\nDESCRIPTION: This snippet shows how to filter operations by path using the `include-path` option in a Schemathesis TOML configuration file. This includes operation-specific configuration, such as `generation.max-examples`.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/configuration.md#_snippet_11\n\nLANGUAGE: TOML\nCODE:\n```\n[[operations]]\ninclude-path = \"/users/{id}\"\ngeneration.max-examples = 150\n```\n\n----------------------------------------\n\nTITLE: Running a Basic Schemathesis Test\nDESCRIPTION: Executes default tests against an API schema loaded from a URL. This command loads the schema, generates test cases, runs checks against API responses, and minimizes failing cases. It demonstrates the most basic usage of the `st run` command.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/cli.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ st run https://example.schemathesis.io/openapi.json\n```\n\n----------------------------------------\n\nTITLE: Hypothesis Configuration with Lazy Loading\nDESCRIPTION: This Python snippet demonstrates configuring Hypothesis settings when using lazy schema loading with pytest. The settings are passed directly to the state_machine.run() method within the test function. This approach allows for dynamic configuration of Hypothesis based on the test context, specifically when the state machine is created within a fixture. max_examples and stateful_step_count are set.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/stateful.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom hypothesis import settings\nimport pytest\n\n\n@pytest.fixture\ndef state_machine():\n    ...\n\n\ndef test_statefully(state_machine):\n    state_machine.run(\n        settings=settings(\n            max_examples=200,\n            stateful_step_count=5,\n        )\n    )\n```\n\n----------------------------------------\n\nTITLE: Filtering Operations by Operation ID\nDESCRIPTION: Focuses on specific API operations by their unique ID. This command uses the `--include-operation-id` flag to test 'createUser' and 'getUser' operations only, enabling targeted testing of particular API functions.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/cli.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ st run --include-operation-id createUser --include-operation-id getUser ...\n```\n\n----------------------------------------\n\nTITLE: Running Schemathesis with rate limit (per minute)\nDESCRIPTION: This command limits the rate of test requests to 100 per minute, preventing the test suite from overwhelming the API under test.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_21\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --rate-limit 100/m\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Authentication in TOML\nDESCRIPTION: Demonstrates how to provide basic authentication credentials using environment variables for username and password.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_21\n\nLANGUAGE: toml\nCODE:\n```\n[auth]\nbasic = { username = \"${USERNAME}\", password = \"${PASSWORD}\" }\n```\n\n----------------------------------------\n\nTITLE: Setting a Request Timeout in Schemathesis (TOML)\nDESCRIPTION: This snippet sets a 5-second timeout for each network request made by Schemathesis. If a request takes longer than 5 seconds to complete, it will be aborted. The `request-timeout` value must be a positive number, representing the timeout in seconds.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_35\n\nLANGUAGE: TOML\nCODE:\n```\nrequest-timeout = 5.0\n```\n\n----------------------------------------\n\nTITLE: Testing Flask Applications with Schemathesis (WSGI)\nDESCRIPTION: This snippet showcases how to use Schemathesis with a Flask application, a WSGI framework. It initializes a Flask app, defines routes for the schema and API endpoints, and then uses `schemathesis.openapi.from_wsgi` to load the schema from the application, enabling testing against the live application without network calls.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/python.rst#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\nimport schemathesis\n\napp = Flask(\"test_app\")\n\n\n@app.route(\"/schema.json\")\ndef schema():\n    return {...}  # Your API schema\n\n\n@app.route(\"/v1/users\", methods=[\"GET\"])\ndef users():\n    return [{\"name\": \"Robin\"}]\n\n\n# Load the schema from the WSGI app\nschema = schemathesis.openapi.from_wsgi(\"/schema.json\", app)\n\n\n@schema.parametrize()\ndef test_api(case):\n    # The test case will make a call to the application and validate the response\n    # against the defined schema automatically.\n    case.call_and_validate()\n```\n\n----------------------------------------\n\nTITLE: Response Validation without Data Generation\nDESCRIPTION: This example shows how to validate API responses using Schemathesis when not utilizing its data generation capabilities. It fetches an API response using the `requests` library and then uses `schema[...].validate_response(response)` or `schema[...].is_response_valid(response)` to validate the response against the schema.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/python.rst#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nschema = schemathesis.openapi.from_url(\"http://0.0.0.0/openapi.json\")\n\n\ndef test_api():\n    response = requests.get(\"http://0.0.0.0/api/users\")\n    # Raises a validation error\n    schema[\"/users\"][\"GET\"].validate_response(response)\n    # Returns a boolean value\n    schema[\"/users\"][\"GET\"].is_response_valid(response)\n```\n\n----------------------------------------\n\nTITLE: Schema Compliance Testing with --checks\nDESCRIPTION: This snippet shows how to run only the checks that validate response status codes, content types, and schema structures. This ensures responses use the expected status codes, content types, and schema structures. The argument `openapi.yaml` specifies the OpenAPI definition file.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/cli.md#_snippet_26\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --checks \\\n    status_code_conformance,content_type_conformance,response_schema_conformance\n```\n\n----------------------------------------\n\nTITLE: Providing API Key via Header\nDESCRIPTION: Provides an API key for authentication using the `--header` flag. The example sets the `X-API-Key` header to a specific API key value, allowing Schemathesis to make authenticated requests.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/cli.md#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --header \"X-API-Key: your-api-key-here\"\n```\n\n----------------------------------------\n\nTITLE: Using HTTP Basic and Digest Authentication in Schemathesis\nDESCRIPTION: This snippet shows how to use HTTP Basic and HTTP Digest authentication with Schemathesis in Python tests. It utilizes the `requests.auth` module to create authentication objects and passes them to the `case.call_and_validate` method using the `auth` argument. The code requires the `requests` library.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/auth.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\nfrom requests.auth import HTTPDigestAuth\n\nschema = schemathesis.openapi.from_url(\"https://example.schemathesis.io/openapi.json\")\n\n\n@schema.parametrize()\ndef test_api(case):\n    # HTTP Basic\n    case.call_and_validate(auth=(\"user\", \"password\"))\n    # HTTP Digest\n    case.call_and_validate(auth=HTTPDigestAuth(\"user\", \"password\"))\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Custom Headers in Schemathesis (TOML)\nDESCRIPTION: This snippet demonstrates how to add multiple custom HTTP headers to all API requests made by Schemathesis. It shows setting both `X-API-Key` and `Accept-Language` headers with values obtained from environment variables or specified directly. This allows passing multiple pieces of custom information with each API request.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_27\n\nLANGUAGE: TOML\nCODE:\n```\nheaders = { \"X-API-Key\" = \"${API_KEY}\", \"Accept-Language\" = \"en-US\" }\n```\n\n----------------------------------------\n\nTITLE: Combining Strategies for API Testing in Python\nDESCRIPTION: Demonstrates how to create and combine strategies for different API operations in Schemathesis. Includes creating strategies for `POST /pet/`, `GET /pet/{pet_id}/`, and `getBooks` query. Also shows how to create strategies for all methods in a path, all operations, and all queries/mutations.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/python.rst#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\ncreate_pet = schema[\"/pet/\"][\"POST\"]\nget_pet = schema[\"/pet/{pet_id}/\"][\"GET\"]\nget_books = graphql_schema[\"Query\"][\"getBooks\"]\n\n# The following strategies generate test cases for different sub-sets of API operations\n# For `POST /pet/`\ncreate_pet_strategy = create_pet.as_strategy()\n# For `POST /pet` AND `GET /pet/{pet_id}/`\nget_or_create_pet_strategy = get_pet.as_strategy() | create_pet.as_strategy()\n# For the `getBooks` query\nget_books_strategy = get_books.as_strategy()\n# For all methods in the `/pet/` path\nall_pet_strategy = schema[\"/pet/\"].as_strategy()\n# For all operations\nall_operations_strategy = schema.as_strategy()\n# For all queries\nqueries_strategy = graphql_schema[\"Query\"].as_strategy()\n# For all mutations & queries\nmutations_and_queries_strategy = graphql_schema.as_strategy()\n```\n\n----------------------------------------\n\nTITLE: Specifying JUnit Report Path in TOML\nDESCRIPTION: Demonstrates how to specify a custom path for the JUnit report. Replace `<format>` with `junit`, `vcr`, or `har` to configure other formats.  Setting the path automatically enables report generation.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[reports.junit]\npath = \"./test-reports/schemathesis-results.xml\"\n```\n\n----------------------------------------\n\nTITLE: Using a Custom CA Bundle for TLS Verification in Schemathesis (TOML)\nDESCRIPTION: This snippet shows how to specify a custom CA (Certificate Authority) bundle file for TLS certificate verification in Schemathesis. Setting `tls-verify` to a file path will use the certificates in that file to validate TLS connections. This is useful when testing against servers with self-signed certificates or certificates issued by a non-public CA.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_31\n\nLANGUAGE: TOML\nCODE:\n```\ntls-verify = \"/path/to/ca-bundle.pem\"\n```\n\n----------------------------------------\n\nTITLE: Custom Check with Test Runner - Python\nDESCRIPTION: Shows how to provide custom checks to the Schemathesis test runner's execute function. These checks are callables that accept a `requests.Response` object and a `models.Case` object, enabling custom assertions based on the response.\n\nRequired dependencies: `schemathesis`.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/extending.rst#_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import timedelta\nfrom schemathesis import runner, models\n\n\ndef not_too_long(response, case: models.Case):\n    assert response.elapsed < timedelta(milliseconds=300)\n\n\nschema = schemathesis.openapi.from_url(\"http://127.0.0.1:8080/swagger.json\")\nrunner = schemathesis.runner.from_schema(schema, checks=[not_too_long])\nfor event in runner.execute():\n    ...  # do something with event\n```\n\n----------------------------------------\n\nTITLE: Operation-Specific Authentication - TOML\nDESCRIPTION: This snippet shows how to override authentication settings for specific API operations. The `auth` key allows specifying different authentication schemes, such as a bearer token from an environment variable, for particular endpoints.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/configuration.md#_snippet_20\n\nLANGUAGE: TOML\nCODE:\n```\n[[operations]]\ninclude-name = \"POST /orders\"\nauth = { bearer = \"${TOKEN}\" }\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Security Schemes Configuration in TOML\nDESCRIPTION: This snippet demonstrates how to configure OpenAPI security schemes in a Schemathesis TOML configuration file.  It allows mapping security schemes defined in your OpenAPI specification to authentication parameters, such as usernames, passwords, API keys, and OAuth2 credentials, sourced from environment variables.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/configuration.md#_snippet_3\n\nLANGUAGE: TOML\nCODE:\n```\n[auth.openapi]\n# Basic HTTP authentication\nBasicAuth = { username = \"${USERNAME}\", password = \"${PASSWORD}\" }\n\n# Bearer token authentication\nBearerAuth = { token = \"${TOKEN}\" }\n\n# API Key authentication\nApiKeyAuth = { value = \"${API_KEY}\" }\n\n# OAuth2 authentication\nOAuth2 = { client_id = \"${CLIENT_ID}\", client_secret = \"${CLIENT_SECRET}\" }\n```\n\n----------------------------------------\n\nTITLE: Setting Client Certificate and Key in Schemathesis (TOML)\nDESCRIPTION: This snippet configures Schemathesis to use a client certificate and a separate private key for authentication. The `request-cert` setting specifies the file path to the client certificate, and the `request-cert-key` setting specifies the file path to the private key file. This setup is used when the certificate and key are stored in separate files.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_38\n\nLANGUAGE: TOML\nCODE:\n```\n# Set certificate and separate private key\nrequest-cert = \"/path/to/client-cert.crt\"\nrequest-cert-key = \"/path/to/private-key.key\"\n```\n\n----------------------------------------\n\nTITLE: Authentication with FastAPI in Schemathesis\nDESCRIPTION: This code demonstrates how to integrate Schemathesis authentication with a FastAPI application using Starlette's TestClient. The `get` method makes a POST request to the token endpoint, retrieves the access token from the response, and the `set` method sets the `Authorization` header for each case.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/auth.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom myapp import app\nfrom starlette_testclient import TestClient\n\nschema = schemathesis.openapi.from_asgi(\"/openapi.json\", app=app)\n\nTOKEN_ENDPOINT = \"/auth/token/\"\nUSERNAME = \"demo\"\nPASSWORD = \"test\"\n\n\n@schema.auth()\nclass MyAuth:\n    def get(self, case, context):\n        client = TestClient(context.app)\n        response = client.post(\n            TOKEN_ENDPOINT, json={\"username\": USERNAME, \"password\": PASSWORD}\n        )\n        return response.json()[\"access_token\"]\n\n    def set(self, case, data, context):\n        case.headers = case.headers or {}\n        case.headers[\"Authorization\"] = f\"Bearer {data}\"\n```\n\n----------------------------------------\n\nTITLE: Using Basic Authentication\nDESCRIPTION: Demonstrates using HTTP Basic Authentication with the `--auth` flag. Schemathesis automatically encodes the provided username and password in the `Authorization` header.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/cli.md#_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --auth username:password\n```\n\n----------------------------------------\n\nTITLE: Project-Specific Operations - TOML\nDESCRIPTION: These snippets show how to customize operations within a project. They demonstrate setting `generation.max-examples` and `headers` for a specific operation within the 'Payment Processing API' project. Another example shows setting `request-timeout` for operations with the 'slow' tag.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/configuration.md#_snippet_28\n\nLANGUAGE: TOML\nCODE:\n```\n[[projects]]\ntitle = \"Payment Processing API\"\n\n[[projects.operations]]\ninclude-name = \"POST /payments\"\ngeneration.max-examples = 80\nheaders = { \"X-Idempotency-Key\" = \"${IDEMPOTENCY_KEY}\" }\n```\n\nLANGUAGE: TOML\nCODE:\n```\n[[projects.operations]]\ninclude-tag = \"slow\"\nrequest-timeout = 10.0\n```\n\n----------------------------------------\n\nTITLE: Configuration File Example\nDESCRIPTION: This TOML snippet demonstrates configuring authentication via a configuration file. The example shows how to set a bearer token globally and configure an API key specifically for an OpenAPI security scheme.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/cli.md#_snippet_17\n\nLANGUAGE: toml\nCODE:\n```\n[auth]\nbearer = \"${TOKEN}\"\n\n[auth.openapi]\nApiKeyAuth = { value = \"${API_KEY}\" }\n```\n\n----------------------------------------\n\nTITLE: Global Check Configuration in TOML\nDESCRIPTION: This snippet demonstrates how to configure checks globally using the `[checks]` section in a Schemathesis TOML configuration file. It shows how to disable checks and set check parameters, such as expected statuses. This allows for customized API response validation.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/configuration.md#_snippet_6\n\nLANGUAGE: TOML\nCODE:\n```\n[checks]\n# Disable checks globally\ncontent_type_conformance.enabled = false\n\n# Set check parameters\npositive_data_acceptance.expected-statuses = [200, 201, 202]\nnegative_data_rejection.expected-statuses = [400, 422]\n```\n\n----------------------------------------\n\nTITLE: Registering Payload Strategy for Media Type - Python\nDESCRIPTION: Registers a custom Hypothesis strategy for generating payloads of a specific media type. This allows Schemathesis to generate custom payload content based on the media type specified in the API schema.\n\nRequired dependencies: `hypothesis`, `schemathesis`.\nThe `schemathesis.openapi.media_type` function associates a strategy with a media type, and optionally, aliases.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/extending.rst#_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nfrom hypothesis import strategies as st\nimport schemathesis\n\n# Define your own strategy for generating PDFs\n# NOTE: This is a simplified example, actual PDF generation is much more complex\npdfs = st.sampled_from([b\"%PDF-1.5...\", b\"%PDF-1.6...\"])\n\n# Register the strategy for \"application/pdf\" media type\nschemathesis.openapi.media_type(\"application/pdf\", pdfs)\n# You can also specify one or more additional aliases for the media type\nschemathesis.openapi.media_type(\"application/pdf\", pdfs, aliases=[\"application/x-pdf\"])\n```\n\n----------------------------------------\n\nTITLE: API Testing with Schemathesis and Hypothesis in Python\nDESCRIPTION: Presents an example of integrating Schemathesis with Hypothesis for API testing. Shows how to define a test case that uses a generated strategy and validates the API response using `case.call_and_validate()`.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/python.rst#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nfrom unittest import TestCase\nfrom hypothesis import given\nimport schemathesis\n\nschema = schemathesis.openapi.from_url(\"http://0.0.0.0:8080/schema.json\")\ncreate_pet = schema[\"/pet/\"][\"POST\"]\ncreate_pet_strategy = create_pet.as_strategy()\n\nclass TestAPI(TestCase):\n    @given(case=create_pet_strategy)\n    def test_pets(self, case):\n        case.call_and_validate()\n```\n\n----------------------------------------\n\nTITLE: Running Schemathesis with max failures limit\nDESCRIPTION: This command executes Schemathesis, terminating the test suite after reaching 5 failures or errors. This option is useful for stopping tests when a certain error threshold is reached.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --max-failures 5\n```\n\n----------------------------------------\n\nTITLE: Include Operations with path_regex in Schemathesis Python Tests\nDESCRIPTION: This code shows how to include only API operations where the path matches a certain regular expression.  In this case, it matches paths starting with `/api/users`.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/python.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@schema.include(path_regex=\"^/api/users\").parametrize()\ndef test_api(case):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Ensuring Reproducibility with --seed\nDESCRIPTION: This snippet demonstrates the `--seed` option to make test data generation reproducible. Using a fixed seed generates the same sequence of test data within the same environment, helping reproduce issues and create predictable test runs in CI/CD environments. The argument `openapi.yaml` specifies the OpenAPI definition file, and `42` is the seed value.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/cli.md#_snippet_22\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --seed 42\n```\n\n----------------------------------------\n\nTITLE: Setting a Different Rate Limit in Schemathesis (TOML)\nDESCRIPTION: This snippet configures a rate limit of 5 requests per second for Schemathesis tests, preventing the test suite from overwhelming the API server.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_33\n\nLANGUAGE: TOML\nCODE:\n```\nrate-limit = \"5/s\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables and Shell Alias (Shell)\nDESCRIPTION: Defines environment variables and a shell alias for simplified Schemathesis Docker commands. The alias sets up the Docker container with necessary flags like volume mounting, network configuration, and environment variables for custom extensions.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/example/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport SCHEMA_URL=\"http://127.0.0.1:5123/openapi.json\"\nalias schemathesis-docker='docker run --rm -it -e SCHEMATHESIS_HOOKS=tests.extensions --network=\"host\" -v $(pwd):/app schemathesis/schemathesis:stable'\n```\n\n----------------------------------------\n\nTITLE: Complete Multi-Project Configuration - TOML\nDESCRIPTION: This snippet demonstrates a complete multi-project configuration, including global defaults and project-specific settings. It shows how settings are inherited and overridden, allowing each project to use its own configurations while sharing defaults.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/configuration.md#_snippet_29\n\nLANGUAGE: TOML\nCODE:\n```\n# Global defaults\ngeneration.max-examples = 50\nworkers = 2\n\n[[projects]]\ntitle = \"Payment Processing API\"\nbase-url = \"https://payments.example.com\"\ngeneration.max-examples = 100\n\n# Operations for payments\n[[projects.operations]]\ninclude-name = \"POST /payments\"\ngeneration.max-examples = 200\nparameters = { amount = [10, 100, 1000] }\nchecks.positive_data_acceptance.expected-statuses = [200, 201]\n\n# Users project settings\n[[projects]]\ntitle = \"User Management API\"\nbase-url = \"https://users.example.com\"\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Authentication at Test Level\nDESCRIPTION: This snippet demonstrates registering a custom authentication mechanism at the test function level in Schemathesis. The `@schema.auth(MyAuth)` decorator is used to register the `MyAuth` class with the specific test function, applying the authentication only to that test. Requires definition of `MyAuth`.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/auth.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\n\nschema = schemathesis.openapi.from_url(\"https://example.schemathesis.io/openapi.json\")\n\n\nclass MyAuth:\n    # Here goes your implementation\n    ...\n\n\n@schema.auth(MyAuth)\n@schema.parametrize()\ndef test_api(case):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Specifying Hooks Module in TOML\nDESCRIPTION: Demonstrates how to specify a Python module path where custom hooks for extending Schemathesis functionality are located. This allows you to define custom checks, adjust data generation, or extend CLI.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_13\n\nLANGUAGE: toml\nCODE:\n```\n# Global hooks for all projects\nhooks = \"myproject.tests.hooks\"\n\n# Or project-specific hooks\n# [[projects]]\n# hooks = \"myproject.payments.hooks\"\n```\n\n----------------------------------------\n\nTITLE: Excluding Operations by Path Pattern\nDESCRIPTION: Excludes API operations based on a path pattern using regular expressions. This command uses `--exclude-path-regex` to skip testing of user-related endpoints, allowing for focused testing on other areas of the API.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/cli.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ st run --exclude-path-regex '^/users' ...\n```\n\n----------------------------------------\n\nTITLE: Applying Hooks with Filters - Python\nDESCRIPTION: This example demonstrates how to apply a hook to specific API operations using filters. It applies the `filter_body` hook to all operations with the `/users/` path but skips it for the `POST` method. Requires Python 3.9+ for the decorator syntax.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/extending.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\n\n\n    @schemathesis.hook.apply_to(path=\"/users/\").skip_for(method=\"POST\")\n    def filter_body(context, body):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Response Time Validation with --max-response-time\nDESCRIPTION: This snippet demonstrates the `--max-response-time` option to ensure API responses are received within a specified time frame.  Tests will fail for any API response that takes longer than 500 milliseconds. The argument `openapi.yaml` specifies the OpenAPI definition file.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/cli.md#_snippet_25\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --max-response-time 0.5\n```\n\n----------------------------------------\n\nTITLE: Define Open API Links in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define Open API links within your API schema to specify dependencies between operations.  The example shows how the output from a POST /users call can be used as input for a GET /users/{userId} call.  This is done by linking the id returned in the response body of the POST operation to the userId path parameter of the GET operation.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/stateful.rst#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /users:\n    post:\n      summary: Creates a user and returns the user ID\n      operationId: createUser\n      requestBody:\n        required: true\n        description: User object\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        '201':\n          ...\n          links:\n            GetUserByUserId:\n              operationId: getUser  # The target operation\n              parameters:\n                userId: '$response.body#/id'\n  /users/{userId}:\n    get:\n      summary: Gets a user by ID\n      operationId: getUser\n      parameters:\n        - in: path\n          name: userId\n          required: true\n          schema:\n            type: integer\n            format: int64\n```\n\n----------------------------------------\n\nTITLE: Running Schemathesis with selected checks\nDESCRIPTION: This command executes Schemathesis, enabling only the `not_a_server_error` and `response_schema_conformance` checks. This allows for targeted validation of API responses.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --checks not_a_server_error,response_schema_conformance\n```\n\n----------------------------------------\n\nTITLE: Filtering Operations by Tag\nDESCRIPTION: Filters API operations by tag using the `--include-tag` flag. This example tests only endpoints with the 'admin' tag. Useful for testing specific sets of endpoints that are grouped logically.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/cli.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ st run --include-tag admin ...\n```\n\n----------------------------------------\n\nTITLE: Basic API Test with Schemathesis in Python\nDESCRIPTION: Illustrates a simple API test using Schemathesis, involving schema loading, test parametrization, and validation.  The example showcases loading a schema from a URL and using `@schema.parametrize()` to generate tests for each path/method combination.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/python.rst#_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\n\nschema = schemathesis.openapi.from_url(\"https://example.schemathesis.io/openapi.json\")\n\n\n@schema.parametrize()\ndef test_api(case):\n    case.call_and_validate()\n```\n\n----------------------------------------\n\nTITLE: Initializing API Calls with Specific Payload\nDESCRIPTION: This snippet shows how to initialize API calls with a specific payload using `APIOperation.make_case`. It creates a case with a predefined `username` and uses it as input for the `POST /users/` operation. This is useful when the API expects specific input, which is hard to generate randomly.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/stateful.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom hypothesis.stateful import initialize\n\nschema = ...  # Load the API schema here\n\nBaseAPIWorkflow = schema.as_state_machine()\n\n\nclass APIWorkflow(BaseAPIWorkflow):\n    @initialize(\n        target=BaseAPIWorkflow.bundles[\"/users/\"][\"POST\"],\n    )\n    def init_user(self):\n        case = schema[\"/users/\"][\"POST\"].make_case(body={\"username\": \"Test\"})\n        return self.step(case)\n```\n\n----------------------------------------\n\nTITLE: Running Schemathesis including by path regex\nDESCRIPTION: This command executes Schemathesis, including only operations whose paths match the regular expression `/api/v1/.*`. This enables testing of specific API version endpoints.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --include-path-regex \"/api/v1/.*\"\n```\n\n----------------------------------------\n\nTITLE: Testing with a Local Schema File\nDESCRIPTION: Runs Schemathesis tests against a local schema file, specifying the test server's URL. It's necessary to provide the `--url` flag to indicate the server where the API is hosted. Useful when the API schema is stored locally and needs to be tested against a specific environment.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/cli.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ st run ./openapi.json --url http://localhost:8000\n```\n\n----------------------------------------\n\nTITLE: Overriding Phase Settings in TOML\nDESCRIPTION: This snippet shows how to override global settings for specific test phases. It sets a global default for `generation.max-examples` and then overrides it for the `stateful` phase. This allows for different behavior across different test phases.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/configuration.md#_snippet_5\n\nLANGUAGE: TOML\nCODE:\n```\n# Global setting\ngeneration.max-examples = 200\n\n[phases]\n# Override for stateful phase\nstateful.generation.max-examples = 30\n```\n\n----------------------------------------\n\nTITLE: Generating Dependent Data with `flatmap` Hook (Python)\nDESCRIPTION: This code snippet shows how to use a `flatmap` hook in Schemathesis to generate data with dependencies between different pieces of data. It ensures that the 'permissions' field in the request body aligns with the 'role' field. If the role is 'admin', permissions are chosen from a specific set that is valid for admins; otherwise, they are chosen from a different set. It depends on the `schemathesis` library and `hypothesis` library.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/extending.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\nfrom hypothesis import strategies as st\n\n\n@schemathesis.hook\ndef flatmap_body(context, body):\n    # Ensure 'permissions' align with 'role'\n    role = body[\"role\"]\n    if role == \"admin\":\n        permissions = [\n            [\"project:admin\", \"project:read\"],\n            [\"organization:admin\", \"organization:read\"],\n        ]\n    else:\n        permissions = [[\"project:read\"], [\"organization:read\"]]\n    return st.sampled_from(permissions).map(lambda p: {\"role\": role, \"permissions\": p})\n```\n\n----------------------------------------\n\nTITLE: Hypothesis Configuration on TestCase\nDESCRIPTION: This Python snippet shows how to configure Hypothesis settings directly on the TestCase class. The settings object is modified to adjust parameters such as max_examples and stateful_step_count. This allows for controlling the number of test cases generated and the maximum steps per stateful test scenario. The schema must be loaded before creating the TestCase.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/stateful.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom hypothesis import settings\n\nschema = ...  # Load the API schema here\n\nTestCase = schema.as_state_machine().TestCase\nTestCase.settings = settings(max_examples=200, stateful_step_count=5)\n```\n\n----------------------------------------\n\nTITLE: Set Custom Authentication\nDESCRIPTION: This code snippet demonstrates how to set up custom authentication mechanisms using the `requests` library within Schemathesis. It uses `schemathesis.auth.set_from_requests` with a third-party authentication implementation (HttpNtlmAuth) to authenticate API requests during testing.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/CHANGELOG.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\nfrom requests_ntlm import HttpNtlmAuth\n\nschemathesis.auth.set_from_requests(HttpNtlmAuth(\"domain\\\\username\", \"password\"))\n```\n\n----------------------------------------\n\nTITLE: Applying Complex Logic with `before_generate` Hook (Python)\nDESCRIPTION: This code demonstrates how to use the `before_generate` hook in Schemathesis to apply complex logic to data generation. It combines filtering and mapping within the same function. It filters generated data to include only even 'id' values and then maps those values to their squares. This can enhance readability and organization when dealing with intricate data generation logic. It depends on `schemathesis` library.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/extending.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\n\n\n@schemathesis.hook\ndef before_generate_query(context, strategy):\n    # Only even 'id' values during test generation\n    return strategy.filter(lambda x: x[\"id\"] % 2 == 0).map(\n        lambda x: {\"id\": x[\"id\"] ** 2}\n    )\n```\n\n----------------------------------------\n\nTITLE: before_load_schema Hook - Python\nDESCRIPTION: This hook is called just before a schema instance is created.  It takes a raw schema representation as a dictionary and allows you to modify the schema before loading.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/extending.rst#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\n    from typing import Any, Dict\n\n\n    @schemathesis.hook\n    def before_load_schema(\n        context: schemathesis.HookContext,\n        raw_schema: dict[str, Any],\n    ) -> None:\n        ...\n```\n\n----------------------------------------\n\nTITLE: Custom Response Validation with Schemathesis Checks\nDESCRIPTION: This snippet illustrates how to customize response validation in Schemathesis by specifying which checks to run. It demonstrates how to pass a tuple of specific checks using the `checks` argument in `case.call_and_validate` to only execute the listed checks and how to use the `additional_checks` argument to run custom checks.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/python.rst#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom schemathesis.checks import not_a_server_error\n\n...\n\n\n@schema.parametrize()\ndef test_api(case):\n    case.call_and_validate(checks=(not_a_server_error,))\n```\n\nLANGUAGE: python\nCODE:\n```\n...\n\n\ndef my_check(response, case):\n    ...  # some awesome assertions\n\n\n@schema.parametrize()\ndef test_api(case):\n    case.call_and_validate(additional_checks=(my_check,))\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom schemathesis.checks import not_a_server_error\n\n...\n\n\n@schema.parametrize()\ndef test_api(case):\n    case.call_and_validate(excluded_checks=(not_a_server_error,))\n```\n\n----------------------------------------\n\nTITLE: Basic TOML Configuration\nDESCRIPTION: This snippet shows a basic TOML configuration file for Schemathesis, including global settings and operation-specific settings. It defines the base URL and maximum number of examples to generate globally and overrides the maximum examples and request timeout for a specific API operation.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/configuration.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n# Global settings\nbase-url = \"https://api.example.com\"\ngeneration.max-examples = 100\n\n# Operation-specific settings\n[[operations]]\ninclude-name = \"GET /users\"\ngeneration.max-examples = 200\nrequest-timeout = 5.0\n```\n\n----------------------------------------\n\nTITLE: Selecting Checks with --checks\nDESCRIPTION: This snippet shows how to customize the test run by specifying the checks to include using the `--checks` option.  It lists specific checks like `not_a_server_error` and `response_schema_conformance` to be included in the test run. The argument `openapi.yaml` specifies the OpenAPI definition file.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/cli.md#_snippet_23\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --checks not_a_server_error,response_schema_conformance\n```\n\n----------------------------------------\n\nTITLE: before_process_path Hook - Python\nDESCRIPTION: This hook is called before each API path is processed. This example shows how to modify the schema before processing, specifically setting a parameter as a constant by querying the database for an existing order ID.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/extending.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\n    from typing import Any\n\n    database = ...  # Init the DB\n\n\n    @schemathesis.hook\n    def before_process_path(\n        context: schemathesis.HookContext, path: str, methods: dict[str, Any]\n    ) -> None:\n        if path == \"/orders/{order_id}\":\n            order_id = database.get_orders().first().id\n            methods[\"get\"][\"parameters\"][0][\"schema\"][\"const\"] = order_id\n```\n\n----------------------------------------\n\nTITLE: Initializing Schemathesis with a Pytest Fixture (FastAPI)\nDESCRIPTION: This snippet demonstrates how to initialize Schemathesis with a pytest fixture that returns a FastAPI application schema. It defines a pytest fixture 'web_app' that creates a FastAPI application with a lifespan event for database connection management and then loads the schema using `schemathesis.openapi.from_dict`. The schema is then used with `schemathesis.pytest.from_fixture` to define the testing schema.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/python.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom contextlib import asynccontextmanager\nfrom fastapi import FastAPI\nimport pytest\nimport schemathesis\n\n\n@pytest.fixture\ndef web_app(db):\n    @asynccontextmanager\n    async def lifespan(_: FastAPI):\n        await db.connect()\n        yield\n        await db.disconnect()\n\n    # some dynamically built application\n    # that depends on other fixtures\n    app = FastAPI(lifespan=lifespan)\n\n    return schemathesis.openapi.from_dict(app.openapi(), app)\n\n\nschema = schemathesis.pytest.from_fixture(\"web_app\")\n\n\n@schema.parametrize()\ndef test_api(case):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Enable Deterministic Generation - Console\nDESCRIPTION: This command enables deterministic mode in Schemathesis, eliminating random variation between tests. This ensures consistency across multiple runs.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_38\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --generation-deterministic\n```\n\n----------------------------------------\n\nTITLE: Setting Base URL in TOML\nDESCRIPTION: Shows how to set the base URL for the API under test. This setting is required when testing with a file-based schema.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\n# Optionally under a named project\n# [[projects]]\nbase-url = \"https://api.example.com\"\n```\n\n----------------------------------------\n\nTITLE: Adding a Single Custom Header in Schemathesis (TOML)\nDESCRIPTION: This snippet demonstrates how to add a custom HTTP header to all API requests made by Schemathesis. It shows setting the `X-API-Key` header with a value obtained from the environment variable `${API_KEY}`. This allows passing authentication or other custom information with each API request.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_26\n\nLANGUAGE: TOML\nCODE:\n```\nheaders = { \"X-API-Key\" = \"${API_KEY}\" }\n```\n\n----------------------------------------\n\nTITLE: Conditional Authentication with Regular Expressions\nDESCRIPTION: This snippet demonstrates applying conditional authentication using regular expressions for path matching. Several examples show different ways to use `path_regex` to apply authentication to paths starting with `/u`, case-insensitively, and also demonstrates combining multiple conditions with `apply_to`. Requires definition of `MyAuth`.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/auth.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport re\nimport schemathesis\n\nschema = schemathesis.openapi.from_url(\"https://example.schemathesis.io/openapi.json\")\n\n\n# Only `/users/`\n@schema.auth().apply_to(path=\"/users/\")\n# Only `/users/` and `/orders/`\n@schema.auth().apply_to(path=[\"/users/\", \"/orders/\"])\n# Only paths starting with `/u`\n@schema.auth().apply_to(path_regex=\"^/u\")\n# Only paths starting with `/u` case insensitive\n@schema.auth().apply_to(path_regex=re.compile(\"^/u\", re.IGNORECASE))\n# Only `GET /users/` or `POST /orders/`\n@schema.auth().apply_to(\n    method=\"GET\",\n    path=\"/users/\",\n).apply_to(\n    method=\"POST\",\n    path=\"/orders/\",\n)\nclass MyAuth:\n    # Here goes your implementation\n    ...\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Substitution in TOML\nDESCRIPTION: This snippet demonstrates how to use environment variables in a Schemathesis TOML configuration file. It shows how to define the base URL and headers using environment variables and override headers for specific operations. This allows for different testing environments without modifying the configuration file.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/configuration.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\n# Use environment variables for sensitive or environment-specific values\nbase-url = \"https://${API_HOST}/v1\"\nheaders = { Authorization = \"Bearer ${API_TOKEN}\" }\n\n[[operations]]\ninclude-name = \"POST /payments\"\nheaders = { \"X-API-Key\" = \"${API_KEY}\" }\n```\n\n----------------------------------------\n\nTITLE: Running Schemathesis excluding by tag regex\nDESCRIPTION: This command executes Schemathesis, excluding operations with tags matching the regular expression `admin|internal`. This prevents testing of administrative or internal API endpoints.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --exclude-tag-regex \"admin|internal\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Operations by HTTP Method\nDESCRIPTION: Demonstrates how to filter API operations to be tested based on the HTTP method. This command uses the `--include-method` flag to only include GET requests in the test scope, improving focus and efficiency during testing.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/cli.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ st run --include-method GET ...\n```\n\n----------------------------------------\n\nTITLE: Running Schemathesis with rate limit (per second)\nDESCRIPTION: This command sets a rate limit of 5 requests per second for Schemathesis test execution, managing the request frequency.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_22\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --rate-limit 5/s\n```\n\n----------------------------------------\n\nTITLE: Running Schemathesis with client cert and key\nDESCRIPTION: This command executes Schemathesis using a client certificate and separate private key for authentication, allowing more secure connections with the API.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_25\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml \\\n  --request-cert /path/to/client-cert.crt \\\n  --request-cert-key /path/to/private-key.key\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Headers\nDESCRIPTION: Shows how to specify multiple headers using the `--header` option multiple times. Useful when you need to provide multiple authentication or context headers like `Authorization` and `X-Tenant-ID`.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/cli.md#_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml \\\n  --header \"Authorization: Bearer ${TOKEN}\" \\\n  --header \"X-Tenant-ID: ${TENANT_ID}\"\n```\n\n----------------------------------------\n\nTITLE: Maximizing Response Time in Data Generation (TOML)\nDESCRIPTION: This snippet guides input generation towards values that maximize response time using targeted property-based testing.  By setting `maximize` to \"response_time\", Schemathesis focuses on generating inputs more likely to expose bugs related to performance.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_46\n\nLANGUAGE: TOML\nCODE:\n```\n[generation]\nmaximize = \"response_time\"\n```\n\n----------------------------------------\n\nTITLE: Phase-Specific Settings - TOML\nDESCRIPTION: This snippet demonstrates configuring phase-specific settings within individual operations.  It sets default values and then overrides `generation.max-examples` for both `fuzzing` and `stateful` phases.  This allows fine-grained control over each phase's behavior.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/configuration.md#_snippet_21\n\nLANGUAGE: TOML\nCODE:\n```\n[[operations]]\ninclude-name = \"GET /users\"\n# Default settings for this operation\ngeneration.max-examples = 100\nrequest-timeout = 5.0\n\n# Phase-specific overrides for this operation\n# Increase examples for fuzzing\nphases.fuzzing.generation.max-examples = 200 \n# Reduce examples for stateful tests\nphases.stateful.generation.max-examples = 30\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch\nDESCRIPTION: This shell command creates and checks out a new branch named `add-schemathesis-action` in your local git repository. This is for making changes specific to the Schemathesis GitHub Action integration.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/ci/github-actions.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ git checkout -b add-schemathesis-action\n```\n\n----------------------------------------\n\nTITLE: Setting a Rate Limit in Schemathesis (TOML)\nDESCRIPTION: This snippet configures a rate limit of 100 requests per minute for Schemathesis tests. The `rate-limit` setting uses the format '<limit>/<duration>', where '<limit>' is the number of requests and '<duration>' is the time period ('s' for seconds, 'm' for minutes, 'h' for hours).\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_32\n\nLANGUAGE: TOML\nCODE:\n```\nrate-limit = \"100/m\"\n```\n\n----------------------------------------\n\nTITLE: Filtering by Schema Properties\nDESCRIPTION: Filters operations based on properties defined within the API schema. This example selects operations where the `x-priority` property is equal to 'high' using the `--include-by` flag and a JSON Pointer expression.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/cli.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ st run --include-by=\"/x-priority == 'high'\" ...\n```\n\n----------------------------------------\n\nTITLE: Exclusion Filters - TOML\nDESCRIPTION: These snippets demonstrate how to exclude operations based on path or tag. `exclude-path` prevents testing of the `/internal/status` endpoint, and `exclude-tag` skips operations with the `deprecated` tag. The `enabled` flag is set to `false` to disable these operations.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/configuration.md#_snippet_17\n\nLANGUAGE: TOML\nCODE:\n```\n[[operations]]\nexclude-path = \"/internal/status\"\nenabled = false\n```\n\nLANGUAGE: TOML\nCODE:\n```\n[[operations]]\nexclude-tag = \"deprecated\"\nenabled = false\n```\n\n----------------------------------------\n\nTITLE: Operation-Specific Parameter Overrides - TOML\nDESCRIPTION: These snippets demonstrate how to override API operation parameters for better test case control, specifically for the `GET /users/{user_id}` endpoint.  Examples include setting a fixed value, multiple values for random selection, using an environment variable, and disambiguating parameters with the same name.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/configuration.md#_snippet_22\n\nLANGUAGE: TOML\nCODE:\n```\n[[operations]]\ninclude-name = \"GET /users/{user_id}\"\n# Fixed value\nparameters = { user_id = 42 }\n```\n\nLANGUAGE: TOML\nCODE:\n```\n[[operations]]\ninclude-name = \"GET /users/{user_id}\"\n# Multiple values for random selection\nparameters = { user_id = [1, 42, 499] }\n```\n\nLANGUAGE: TOML\nCODE:\n```\n[[operations]]\ninclude-name = \"GET /users/{user_id}\"\n# Using an environment variable\nparameters = { user_id = \"${USER_ID}\" }\n```\n\nLANGUAGE: TOML\nCODE:\n```\n[[operations]]\ninclude-name = \"GET /users/{user_id}\"\n# Disambiguate parameters with the same name\nparameters = { \"path.user_id\" = 42, \"query.user_id\" = 100 }\n```\n\n----------------------------------------\n\nTITLE: Schema with Multiple Examples (YAML)\nDESCRIPTION: Illustrates how Schemathesis uses multiple examples (using `examples`) by employing a round-robin strategy. It will create tests using each value provided in the `examples` array.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/openapi/examples.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nproperties:\n  name:\n    type: string\n    example: \"John\"\n  age:\n    type: integer\n    examples: [25, 30, 35]\n```\n\n----------------------------------------\n\nTITLE: Testing your own API using URL to schema\nDESCRIPTION: This snippet shows how to run Schemathesis against your own API by specifying the URL to the OpenAPI schema.  The API should be running and accessible at the provided URL.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/getting-started.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n# If your API serves its own schema\n$ st run https://your-api.com/openapi.json\n```\n\n----------------------------------------\n\nTITLE: Customize Stateful Test with pytest Fixture\nDESCRIPTION: This Python snippet illustrates how to customize the behavior of a state machine by extending it within a pytest fixture.  A custom APIWorkflow class is created, inheriting from the state machine generated by Schemathesis. The setup method is overridden to implement specific scenario setup logic. This allows for fine-grained control over the test execution process.  It assumes an openapi.json file is available at the specified URL.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/stateful.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\n\n@pytest.fixture\ndef state_machine():\n    schema = schemathesis.openapi.from_url(\"https://example.schemathesis.io/openapi.json\")\n\n    class APIWorkflow(schema.as_state_machine()):\n        def setup(self):\n            ...  # your scenario setup\n\n    return APIWorkflow\n```\n\n----------------------------------------\n\nTITLE: Customizing VCR and HAR Report Paths\nDESCRIPTION: This snippet showcases how to customize the output paths for VCR cassettes and HAR files using `--report-vcr-path` and `--report-har-path` respectively. The argument `openapi.yaml` specifies the OpenAPI definition file. The VCR cassettes will be saved to `./debug/api-responses.yaml`, and the HAR file to `./analysis/http-archive.har`.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/cli.md#_snippet_30\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --report-vcr-path ./debug/api-responses.yaml\n$ st run openapi.yaml --report-har-path ./analysis/http-archive.har\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Response Time in TOML\nDESCRIPTION: Shows how to set the maximum allowed API response time in seconds. Responses exceeding this limit will be reported as failures.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_18\n\nLANGUAGE: toml\nCODE:\n```\nmax-response-time = 2.0\n```\n\n----------------------------------------\n\nTITLE: Filtering Query Parameters with Schemathesis Hook (Python)\nDESCRIPTION: This code snippet demonstrates how to use a Schemathesis hook to filter query parameters.  It defines a hook that checks if the 'key' parameter has a specific value ('42') and excludes it from the test if it does. The hook is registered using the `@schemathesis.hook` decorator.  It depends on the `schemathesis` library and returns True if the parameter should be included, False otherwise.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/extending.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\n\n\n@schemathesis.hook\ndef filter_query(context, query):\n    # Simple filtering to avoid a specific query parameter value\n    return query[\"key\"] != \"42\"\n```\n\n----------------------------------------\n\nTITLE: CLI Overrides - Bash\nDESCRIPTION: These snippets demonstrate how to override configuration file settings using command-line arguments when running Schemathesis. Examples include overriding `max-examples`, `phases`, and `checks`.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/configuration.md#_snippet_30\n\nLANGUAGE: Bash\nCODE:\n```\n# Override the max-examples setting\nst run --max-examples=300 http://api.example.com/openapi.json\n```\n\nLANGUAGE: Bash\nCODE:\n```\n# Override phases\nst run --phases=examples,fuzzing http://api.example.com/openapi.json\n```\n\nLANGUAGE: Bash\nCODE:\n```\n# Override check settings\nst run --checks=not_a_server_error http://api.example.com/openapi.json\n```\n\n----------------------------------------\n\nTITLE: Running Schemathesis excluding by method\nDESCRIPTION: This command executes Schemathesis, excluding all DELETE operations. This is useful for temporarily skipping tests related to specific HTTP methods.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --exclude-method DELETE\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI Authentication in TOML\nDESCRIPTION: Demonstrates how to define authentication settings for OpenAPI security schemes, including Basic HTTP, Bearer token, API Key, and OAuth2 authentication, all using environment variables.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_23\n\nLANGUAGE: toml\nCODE:\n```\n[auth.openapi]\n# Basic HTTP authentication\nBasicAuth = { username = \"${USERNAME}\", password = \"${PASSWORD}\" }\n\n# Bearer token authentication\nBearerAuth = { token = \"${API_TOKEN}\" }\n\n# API Key authentication\nApiKeyAuth = { value = \"${API_KEY}\" }\n\n# OAuth2 authentication\nOAuth2 = { client_id = \"${CLIENT_ID}\", client_secret = \"${CLIENT_SECRET}\" }\n```\n\n----------------------------------------\n\nTITLE: Conditional Authentication\nDESCRIPTION: This code snippet illustrates how to apply authentication conditionally to specific API operations using decorators. It defines a custom authentication class (`MyAuth`) and uses `@schemathesis.auth().apply_to()` and `@schemathesis.auth().skip_for()` to control when the authentication is applied based on the path and HTTP method.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/CHANGELOG.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\n\n\n# Apply auth only for operations that path starts with `/users/` but not the `POST` method\n@schemathesis.auth().apply_to(path_regex=\"^/users/\").skip_for(method=\"POST\")\nclass MyAuth:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Operation Filter by Method in TOML\nDESCRIPTION: This snippet shows how to filter operations by HTTP method using the `include-method` option in a Schemathesis TOML configuration file. The included operation configures the `request-timeout`.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/configuration.md#_snippet_12\n\nLANGUAGE: TOML\nCODE:\n```\n[[operations]]\ninclude-method = \"POST\"\nrequest-timeout = 3.0\n```\n\n----------------------------------------\n\nTITLE: Schema with Example for Schemathesis (YAML)\nDESCRIPTION: Demonstrates a schema with an example for the `name` property and missing examples for `age` and `address`. Schemathesis will use the example for `name` and generate minimal valid values for the other properties.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/openapi/examples.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nschema:\n  type: object\n  properties:\n    name:\n      type: string\n      example: \"John\"\n    age:\n      type: integer\n    address:\n      type: string\n```\n\n----------------------------------------\n\nTITLE: Running Schemathesis with max response time\nDESCRIPTION: This command executes Schemathesis, setting a maximum allowed API response time of 2.5 seconds. Responses exceeding this limit are reported as failures, aiding in performance monitoring.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --max-response-time 2.5\n```\n\n----------------------------------------\n\nTITLE: Run Schemathesis with File-Based Schema\nDESCRIPTION: This command runs Schemathesis against a local schema file and specifies the target URL for the API.  This is useful when the schema is maintained separately from the API deployment.  Ensure the schema file is kept in sync with the actual API behavior.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/ci/overview.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ st run ./path/to/openapi.json --url http://api-host:port\n```\n\n----------------------------------------\n\nTITLE: Load API Schema from a Remote URL in Python\nDESCRIPTION: This code shows how to load an API schema from a remote URL using `schemathesis.openapi.from_url`. This method fetches the schema from the specified URL.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/python.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nschema = schemathesis.openapi.from_url(\"http://app.com/api/openapi.json\")\n```\n\n----------------------------------------\n\nTITLE: Filtering Data with a Schemathesis Hook (Python)\nDESCRIPTION: This code demonstrates how to use a Schemathesis hook to filter generated data. Specifically, it filters query parameters to exclude tests using a specific user ID. This is useful for avoiding testing with known test users or invalid data. The hook checks if the `user_id` parameter is equal to 1 and excludes it if it is. It depends on `schemathesis` library.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/extending.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@schemathesis.hook\ndef filter_query(context, query):\n    # Excluding a known test user ID from tests\n    return query[\"user_id\"] != 1\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Filter Hooks with Custom Names (Python)\nDESCRIPTION: This snippet showcases how to apply multiple Schemathesis hooks with the same underlying functionality (filtering query parameters) but with different filtering criteria.  It uses custom names within the `@schemathesis.hook` decorator to differentiate the hooks and avoid conflicts.  Each hook filters based on a different 'key' value (41, 42, 43).  It depends on `schemathesis` library.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/extending.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\n\n\n@schemathesis.hook\ndef filter_query(context, query):\n    return query[\"key\"] != \"41\"\n\n\n@schemathesis.hook(\"filter_query\")\ndef avoid_42(context, query):\n    return query[\"key\"] != \"42\"\n\n\n@schemathesis.hook(\"filter_query\")\ndef avoid_43(context, query):\n    return query[\"key\"] != \"43\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Test Execution with Access Token and Max Response Time\nDESCRIPTION: This YAML snippet shows how to customize the Schemathesis test run by setting an environment variable and passing arguments to the action. It sets an access token as an environment variable and adds an authorization header and a maximum response time to the Schemathesis command. Requires the `schemathesis/action@v1` action.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/ci/github-actions.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\n- name: Set access token\n  run: echo \"TOKEN=super-secret\" >> $GITHUB_ENV\n\n- uses: schemathesis/action@v1\n  with:\n    schema: 'http://127.0.0.1:5123/openapi.json'\n    args: '-H \"Authorization: Bearer ${{ env.TOKEN }}\" --max-response-time=200'\n```\n\n----------------------------------------\n\nTITLE: Excluding Deprecated Operations in TOML\nDESCRIPTION: Shows how to skip deprecated API operations during testing.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_16\n\nLANGUAGE: toml\nCODE:\n```\nexclude-deprecated = true\n```\n\n----------------------------------------\n\nTITLE: Load API Schema from a Local Path with Base URL in Python\nDESCRIPTION: This example shows how to load an API schema from a local file, and override the base URL. Useful when the schema contains a different host than the test server.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/python.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nschema = schemathesis.openapi.from_path(\n    \"/tmp/openapi.json\", base_url=\"http://127.0.0.1:8000/v2\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting String Generation Codec in Schemathesis (TOML)\nDESCRIPTION: This snippet sets the codec used for generating strings to \"ascii\" in Schemathesis. The `codec` setting defines the character encoding for string generation. Other options include 'utf-8', 'latin-1', etc.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_45\n\nLANGUAGE: TOML\nCODE:\n```\n[generation]\ncodec = \"ascii\"\n```\n\n----------------------------------------\n\nTITLE: Running a Single Test Phase\nDESCRIPTION: Demonstrates how to run a single test phase by specifying it in the `--phases` option. This example focuses on the 'coverage' phase for targeted testing of boundary values and edge cases.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/cli.md#_snippet_19\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --phases coverage\n```\n\n----------------------------------------\n\nTITLE: Setting SCHEMATHESIS_HOOKS Environment Variable\nDESCRIPTION: This bash command shows how to set the `SCHEMATHESIS_HOOKS` environment variable to the Python file containing the custom authentication registration for use with the Schemathesis CLI. After setting the variable, Schemathesis is run against the API.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/auth.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nSCHEMATHESIS_HOOKS=my_file\nst run http://127.0.0.1/openapi.yaml\n```\n\n----------------------------------------\n\nTITLE: Filtering with Expressions - TOML\nDESCRIPTION: These snippets demonstrate advanced filtering using JSONPath-like expressions. The `include-by` and `exclude-by` parameters allow targeting operations based on specific fields within the operation definitions, offering more granular control.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/configuration.md#_snippet_19\n\nLANGUAGE: TOML\nCODE:\n```\n[[operations]]\ninclude-by = \"tags/0 == 'user'\"\ngeneration.max-examples = 150\n```\n\nLANGUAGE: TOML\nCODE:\n```\n[[operations]]\ninclude-by = \"operationId == null\"\nenabled = false\n```\n\nLANGUAGE: TOML\nCODE:\n```\n[[operations]]\nexclude-by = \"responses/200/description != 'Success'\"\nchecks.response_schema_conformance.enabled = false\n```\n\n----------------------------------------\n\nTITLE: Filling Missing Examples in Schemathesis (TOML)\nDESCRIPTION: This snippet enables generation of random examples for API operations that do not have explicit examples in the OpenAPI schema. Setting `fill-missing-examples` to `true` allows Schemathesis to generate data for operations lacking examples, improving test coverage. This helps test endpoints which may not have defined examples in the specification.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_52\n\nLANGUAGE: TOML\nCODE:\n```\n[generation]\nfill-missing-examples = true\n```\n\n----------------------------------------\n\nTITLE: Raising the upper cap for generated test cases (Shell)\nDESCRIPTION: This snippet shows how to increase the upper limit of generated test cases per operation using the `--hypothesis-max-examples` option. This affects only the `generate` phase, allowing to control the number of generated test cases.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/data-generation.rst#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n--hypothesis-max-examples=1000\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Filters\nDESCRIPTION: Demonstrates how to combine multiple filters to refine the test scope. This example tests only POST and PUT operations that do not have the 'admin' tag, combining `--include-method` and `--exclude-tag` flags for more precise control.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/cli.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ st run --include-method POST --include-method PUT --exclude-tag admin ...\n```\n\n----------------------------------------\n\nTITLE: Running in Multiple Threads (Shell)\nDESCRIPTION: Executes Schemathesis tests in parallel using 8 threads. This improves the test execution time by utilizing multiple CPU cores, achieved by using the `-w` flag.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/example/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nschemathesis-docker run -w 8 $SCHEMA_URL\n```\n\n----------------------------------------\n\nTITLE: Flatmap Body with Condition - Python\nDESCRIPTION: This Python code snippet defines a function `flatmap_body` that conditionally modifies a body based on the value of a field. If the field `someField` equals certain value, then the function modifies the body and returns a Just monad. Otherwise, it returns the body unchanged.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/extending.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef flatmap_body(context, body):\n        node = body.definitions[0].selection_set.selections[0]\n        if node.name.value == \"someField\":\n            return st.just(body).map(lambda b: modify_body(b, \"someDependentField\"))\n        return body\n```\n\n----------------------------------------\n\nTITLE: Limiting Test Cases with --max-examples\nDESCRIPTION: This snippet demonstrates how to use the `--max-examples` option to control the maximum number of test cases generated by Schemathesis for an OpenAPI specification. It limits the number of test cases per operation during unit testing phases. The argument `openapi.yaml` specifies the OpenAPI definition file.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/cli.md#_snippet_21\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --max-examples 50\n```\n\n----------------------------------------\n\nTITLE: Excluding Deprecated Operations\nDESCRIPTION: Excludes all API operations marked as deprecated in the schema. This is achieved using the `--exclude-deprecated` flag. Helpful for skipping tests on older or phased-out endpoints.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/cli.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ st run --exclude-deprecated ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Expected Status Codes for Checks in Schemathesis (TOML)\nDESCRIPTION: This snippet shows how to configure the expected HTTP status codes for specific checks in Schemathesis using a TOML configuration file. It defines the expected status codes for the `positive_data_acceptance` check, specifying that 200, 201, and 202 are considered successful responses when valid data is sent to the API. This customization allows tailoring validation for APIs with non-standard success or error codes.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_25\n\nLANGUAGE: TOML\nCODE:\n```\n[checks]\npositive_data_acceptance.expected-statuses = [200, 201, 202]\n```\n\n----------------------------------------\n\nTITLE: Schemathesis Test Runner - Python\nDESCRIPTION: Demonstrates the usage of the Schemathesis test runner to execute tests against a given schema URI. The runner generates events during test execution, which can be handled for custom logic.\n\nRequired dependency: `schemathesis`.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/extending.rst#_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\n\nschema = schemathesis.openapi.from_url(\"http://127.0.0.1:8080/swagger.json\")\n\nrunner = schemathesis.runner.from_schema(schema)\nfor event in runner.execute():\n    ...  # do something with event\n```\n\n----------------------------------------\n\nTITLE: Generating Dependent Data for GraphQL with `flatmap_body` (Python)\nDESCRIPTION: This snippet indicates the use of `flatmap_body` hook for generating dependent data in GraphQL requests within Schemathesis. The actual implementation details of data dependency generation is not provided in the given document snippet. It requires `hypothesis` and `schemathesis`.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/extending.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom hypothesis import strategies as st\n\n\n@schema.hook\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Schema Example - YAML\nDESCRIPTION: This YAML snippet defines a schema for an API endpoint `/orders/{order_id}` with a `GET` method. It specifies a path parameter `order_id` with integer format.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/extending.rst#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\n /orders/{order_id}:\n      get:\n        parameters:\n          - description: Order ID to retrieve\n            in: path\n            name: order_id\n            required: true\n            schema:\n              format: int64\n              type: integer\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Authentication in Schemathesis CLI\nDESCRIPTION: This snippet showcases how to register a custom authentication mechanism for use with the Schemathesis CLI.  The `@schemathesis.auth()` decorator registers the `MyAuth` class globally.  The `SCHEMATHESIS_HOOKS` environment variable then points to the file containing this registration code. Requires the definition of `MyAuth`.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/auth.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\n\n\n@schemathesis.auth()\nclass MyAuth:\n    # Here goes your implementation\n    ...\n```\n\n----------------------------------------\n\nTITLE: Running Schemathesis with custom worker count\nDESCRIPTION: This command executes Schemathesis with a specified number of workers. The `--workers` option controls the concurrency of unit test phases, impacting the overall execution speed.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --workers 4\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Schema with oneOf Keyword in YAML\nDESCRIPTION: Illustrates the usage of the `oneOf` keyword in an OpenAPI schema defined in YAML, showcasing potential validation issues and demonstrating how to resolve them using `required` and `additionalProperties` keywords. It highlights the importance of explicitly defining required properties and restricting additional properties when using `oneOf`.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/faq.rst#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /pets:\n    patch:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: '#/components/schemas/Cat'\n                - $ref: '#/components/schemas/Dog'\n      responses:\n        '200':\n          description: Updated\ncomponents:\n  schemas:\n    Dog:\n      type: object\n      properties:\n        bark:\n          type: boolean\n        breed:\n          type: string\n          enum: [Dingo, Husky, Retriever, Shepherd]\n    Cat:\n      type: object\n      properties:\n        hunts:\n          type: boolean\n        age:\n          type: integer\n```\n\n----------------------------------------\n\nTITLE: Rate Limiting with Schemathesis in Python\nDESCRIPTION: Demonstrates how to configure rate limiting when loading an OpenAPI schema in Schemathesis to avoid exceeding API rate limits during testing.  Explains different rate limit formats and their meanings.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/python.rst#_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\n\n# 3 requests per second - `3/s`\n# 100 requests per minute - `100/m`\n# 1000 requests per hour - `1000/h`\n# 10000 requests per day - `10000/d`\nRATE_LIMIT = \"3/s\"\n\nschema = schemathesis.openapi.from_url(\n    \"https://example.schemathesis.io/openapi.json\",\n    rate_limit=RATE_LIMIT,\n)\n```\n\n----------------------------------------\n\nTITLE: Extracting Data from Headers using Regex\nDESCRIPTION: This snippet shows how to extract data from the `Location` header using a regular expression in the OpenAPI specification. It uses the `$response.header.Location#regex:/users/(.+)` expression to extract the user ID from the header. The regular expression should be a valid Python regular expression and should contain a single capturing group.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/stateful.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\npaths:\n  /users:\n    post:\n      ...\n      responses:\n        '201':\n          ...\n          links:\n            GetUserByUserId:\n              operationId: getUser\n              parameters:\n                userId: '$response.header.Location#regex:/users/(.+)'\n```\n\n----------------------------------------\n\nTITLE: Running Schemathesis with Hooks in Docker (Bash)\nDESCRIPTION: This snippet shows how to run Schemathesis with custom hooks inside a Docker container.  It mounts the current directory (`$(pwd)`) to the `/app` directory in the container and sets the `SCHEMATHESIS_HOOKS` environment variable to the name of the hooks file (`hooks`).  It also uses `--network=host` to allow the container to access the host network. It requires that the hooks file is in the current directory and that the OpenAPI schema is accessible at `http://127.0.0.1:8081/schema.yaml`.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/extending.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v $(pwd):/app -e SCHEMATHESIS_HOOKS=hooks --network=host \n    schemathesis/schemathesis:stable run http://127.0.0.1:8081/schema.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting an HTTP Proxy in Schemathesis (TOML)\nDESCRIPTION: This snippet shows how to configure Schemathesis to use an HTTP proxy for all network requests. It specifies the proxy URL as `http://localhost:8080`. All API requests will be routed through this proxy.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_28\n\nLANGUAGE: TOML\nCODE:\n```\nproxy = \"http://localhost:8080\"\n```\n\n----------------------------------------\n\nTITLE: Including only generate and shrink phases (Shell)\nDESCRIPTION: This snippet demonstrates how to include only the `generate` and `shrink` phases in Schemathesis using the `--hypothesis-phases` option. This allows you to customize the test generation process by selecting specific phases.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/data-generation.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n--hypothesis-phases=generate,shrink\n```\n\n----------------------------------------\n\nTITLE: Disabling shrinking phase in Schemathesis (Shell)\nDESCRIPTION: This snippet demonstrates how to disable the shrinking phase in Schemathesis using the `--hypothesis-no-phases` option. This is useful when the source of an error is apparent and can be debugged straightforwardly.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/data-generation.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n--hypothesis-no-phases=shrink\n```\n\n----------------------------------------\n\nTITLE: Override API Parameters in Schemathesis Python Tests\nDESCRIPTION: This example demonstrates how to override API parameters, like query and path parameters. The `schema.override` decorator is used to set specific values for parameters that are used in the tests.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/python.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nschema = ...  # Load the API schema here\n\n\n@schema.parametrize()\n@schema.override(path_parameters={\"user_id\": \"42\"}, query={\"apiKey\": \"secret\"})\ndef test_api(case):\n```\n\n----------------------------------------\n\nTITLE: Docker Volume Mounting for Local Files (bash/zsh/sh)\nDESCRIPTION: This snippet demonstrates how to mount a local directory into a Docker container, making local files accessible to Schemathesis. The current working directory is mounted to `/app` inside the container, allowing Schemathesis to access the local `openapi.json` file. This example uses bash, zsh, or sh syntax.  `$(pwd)` gets the present working directory.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/cli.md#_snippet_35\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -v $(pwd):/app schemathesis/schemathesis:stable \\\n    run /app/openapi.json\n```\n\n----------------------------------------\n\nTITLE: Docker Volume Mounting for Report Output\nDESCRIPTION: This snippet demonstrates how to mount a local directory into a Docker container for report output.  It mounts the current working directory to `/app` and specifies that the JUnit report should be generated in the `test-results` directory within the mounted volume, making it accessible on the local machine. `$(pwd)` gets the present working directory.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/cli.md#_snippet_36\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -v $(pwd):/app schemathesis/schemathesis:stable \\\n    run /app/openapi.json \\\n    --report junit --report-dir /app/test-results\n```\n\n----------------------------------------\n\nTITLE: Customize Test Run with pytest Fixtures\nDESCRIPTION: This Python snippet demonstrates how to customize the entire test run using pytest fixtures and extending the TestAPI class. Fixtures like database can be used to set up and tear down resources before and after the tests.  The @pytest.mark.usefixtures decorator ensures that the database fixture is applied to the TestAPI class.  This approach provides control over the test environment and lifecycle.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/stateful.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\nAPIWorkflow = schema.as_state_machine()\n\n\n@pytest.fixture()\ndef database():\n    # create tables & data\n    yield\n    # drop tables\n\n\n@pytest.mark.usefixtures(\"database\")\nclass TestAPI(APIWorkflow.TestCase):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Database Storage Configuration - Console\nDESCRIPTION: These commands configure the storage for examples discovered by Schemathesis. The first command uses in-memory storage, and the second uses a persistent file `./schemathesis_examples.db`. Using `none` disables database storage.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_44\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --generation-database \":memory:\"\n```\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --generation-database ./schemathesis_examples.db\n```\n\n----------------------------------------\n\nTITLE: Generating Reports with --report\nDESCRIPTION: This snippet shows how to generate structured reports using the `--report` option with a comma-separated list of formats.  It generates JUnit XML and VCR cassettes. The argument `openapi.yaml` specifies the OpenAPI definition file.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/cli.md#_snippet_27\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --report junit,vcr\n```\n\n----------------------------------------\n\nTITLE: Running Schemathesis including by expression\nDESCRIPTION: This command executes Schemathesis, including only operations where the first tag in the list is 'user', using a JSON Pointer expression. This allows for more complex filtering logic.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --include-by \"/tags/0 == 'user'\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Test Case Shrinking in Schemathesis (TOML)\nDESCRIPTION: This snippet disables test case shrinking in Schemathesis. When `no-shrink` is set to `true`, Schemathesis will not attempt to simplify failing test cases. Disabling shrinking improves performance but can make test failures harder to debug, as the test cases will not be minimized to the simplest failing input.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_42\n\nLANGUAGE: TOML\nCODE:\n```\n[generation]\nno-shrink = true\n```\n\n----------------------------------------\n\nTITLE: before_init_operation Hook - Python\nDESCRIPTION: This hook allows modifying just initialized API operation, overriding the existing schema.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/extending.rst#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\n    from schemathesis.schemas import APIOperation\n\n\n    @schemathesis.hook\n    def before_init_operation(\n        context: schemathesis.HookContext, operation: APIOperation\n    ) -> None:\n        # Overrides the existing schema\n        operation.query[0].definition[\"schema\"] = {\"enum\": [42]}\n```\n\n----------------------------------------\n\nTITLE: Conditional Authentication with Custom Functions\nDESCRIPTION: This code illustrates how to use a custom function to determine whether to apply or skip authentication for a given operation.  The `is_deprecated` function checks if the API operation is marked as deprecated. Authentication is skipped for deprecated operations. Requires definition of `MyAuth`.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/auth.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\n\nschema = schemathesis.openapi.from_url(\"https://example.schemathesis.io/openapi.json\")\n\n\ndef is_deprecated(ctx):\n    return ctx.operation.definition.get(\"deprecated\") is True\n\n\n# Skip auth for all deprecated API operations\n@schema.auth().skip_for(is_deprecated)\nclass MyAuth:\n    # Here goes your implementation\n    ...\n```\n\n----------------------------------------\n\nTITLE: Enabling Schemathesis Hooks via Environment Variable (Bash)\nDESCRIPTION: This snippet shows how to enable Schemathesis hooks using the `SCHEMATHESIS_HOOKS` environment variable in a Bash shell.  It sets the variable to the module containing the hooks (e.g., `myproject.tests.hooks`) and then runs the `st run` command. It requires that the hooks are defined in a separate Python module and that the module is importable.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/extending.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport SCHEMATHESIS_HOOKS=myproject.tests.hooks\nst run http://127.0.0.1/openapi.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Generation Mode in Schemathesis (TOML)\nDESCRIPTION: This snippet demonstrates how to configure the data generation mode in Schemathesis using a TOML configuration file. It sets the `mode` to `\"negative\"`, which instructs Schemathesis to generate only invalid data to test error handling in the API. Other possible values are `\"positive\"` for valid data only, and `\"all\"` for both valid and invalid data.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_39\n\nLANGUAGE: TOML\nCODE:\n```\n[generation]\nmode = \"negative\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Unexpected Methods for Coverage Phase in TOML\nDESCRIPTION: Shows how to list the HTTP methods to use when generating test cases with methods not specified in the API during the coverage phase.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_20\n\nLANGUAGE: toml\nCODE:\n```\n[phases.coverage]\nunexpected-methods = [\"PATCH\"]\n```\n\n----------------------------------------\n\nTITLE: GraphQL Custom Scalar Strategy Definition in Python\nDESCRIPTION: This snippet demonstrates how to define a custom scalar strategy for a GraphQL schema in Schemathesis. It involves importing necessary modules, creating a strategy using `hypothesis.strategies`, mapping the generated values to the appropriate AST node using `schemathesis.graphql.nodes.String`, and registering the scalar with Schemathesis.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/graphql.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom hypothesis import strategies as st\nimport schemathesis\nfrom schemathesis.graphql import nodes\n\nschemathesis.graphql.scalar(\"Date\", st.dates().map(nodes.String))\n```\n\n----------------------------------------\n\nTITLE: Configuring Bearer Token Authentication in TOML\nDESCRIPTION: Shows how to specify a bearer token for authentication using an environment variable.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_22\n\nLANGUAGE: toml\nCODE:\n```\n[auth]\nbearer = \"${API_TOKEN}\"\n```\n\n----------------------------------------\n\nTITLE: Running Schemathesis with selected phases\nDESCRIPTION: This command executes Schemathesis, limiting the test phases to `examples` and `fuzzing`. The `--phases` option allows selective testing of different API aspects.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --phases examples,fuzzing\n```\n\n----------------------------------------\n\nTITLE: CSV Data Conversion Function (Python)\nDESCRIPTION: This Python function, `to_csv`, converts a list of dictionaries into a CSV string using the `csv` module. It handles empty input data and uses `StringIO` to create an in-memory file-like object for CSV writing. The function assumes all dictionaries in the list have the same keys and returns an empty string for empty input.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/data-generation.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport csv\nfrom io import StringIO\n\n\ndef to_csv(data):\n    if not data:\n        # Empty CSV file\n        return \"\"\n    output = StringIO()\n    # Assume all items have the same fields\n    field_names = sorted(data[0].keys())\n    writer = csv.DictWriter(output, field_names)\n    writer.writeheader()\n    writer.writerows(data)\n    return output.getvalue()\n```\n\n----------------------------------------\n\nTITLE: Exclude Deprecated Operations in Schemathesis Python Tests\nDESCRIPTION: This example demonstrates how to exclude deprecated operations from the test suite.  The `exclude(deprecated=True)` argument will filter out deprecated operations.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/python.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@schema.exclude(deprecated=True).parametrize()\ndef test_api(case):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Request Body Definition with Runtime Expressions\nDESCRIPTION: This example shows how Schemathesis extends the Open API standard by allowing the evaluation of runtime expressions within the requestBody object or array. It dynamically retrieves values from the response body to construct the request payload.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/stateful.rst#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"key\": \"$response.body#/key\",\n    \"items\": [\"$response.body#/first\", \"literal\", 42]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Operation-Specific Configuration in TOML\nDESCRIPTION: This snippet demonstrates the basic structure for operation-specific configuration in a Schemathesis TOML file. It shows how to include operations by path or tag, and how to set operation-specific settings such as the maximum number of examples and request timeout.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/configuration.md#_snippet_9\n\nLANGUAGE: TOML\nCODE:\n```\n[[operations]]\ninclude-path = \"/users\"\ngeneration.max-examples = 200\nrequest-timeout = 5.0\n\n[[operations]]\ninclude-tag = \"admin\"\nenabled = false\n```\n\n----------------------------------------\n\nTITLE: Basic Docker Usage\nDESCRIPTION: This snippet demonstrates the simplest way to run Schemathesis via Docker using a remote schema URL.  The command pulls and runs the `schemathesis/schemathesis:stable` Docker image and executes the `run` command against the specified OpenAPI schema.  `http://api.example.com/openapi.json` is the URL to the OpenAPI schema.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/cli.md#_snippet_31\n\nLANGUAGE: console\nCODE:\n```\n$ docker run schemathesis/schemathesis:stable \\\n    run http://api.example.com/openapi.json\n```\n\n----------------------------------------\n\nTITLE: Install Schemathesis using uv\nDESCRIPTION: This snippet shows how to install Schemathesis using the uv package installer for Python. Uv is a faster alternative to pip for managing Python packages and environments.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/getting-started.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip install schemathesis\n```\n\n----------------------------------------\n\nTITLE: Using Persistent Storage for Examples in Schemathesis (TOML)\nDESCRIPTION: This snippet configures Schemathesis to use persistent storage for examples in a custom directory. Setting `database` to a file path (e.g., `./.schemathesis/examples/`) will store generated examples in that directory, allowing them to be reused across test runs.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_50\n\nLANGUAGE: TOML\nCODE:\n```\n[generation]\ndatabase = \"./.schemathesis/examples/\"\n```\n\n----------------------------------------\n\nTITLE: Narrowing Testing Scope (Shell)\nDESCRIPTION: Specifies the testing scope to include only `POST` operations with paths starting with `/internal`, using `--include-method` and `--include-path-regex`. This demonstrates how to target specific API endpoints.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/example/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nschemathesis-docker run --include-method POST --include-path-regex '^/internal' $SCHEMA_URL\n```\n\n----------------------------------------\n\nTITLE: Operation Filter by Name in TOML\nDESCRIPTION: This snippet shows how to filter operations by name using the `include-name` option in a Schemathesis TOML configuration file. The name is in the format of `METHOD /path` for OpenAPI specifications, and `Type.field` for GraphQL specifications. The maximum number of examples is configured.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/configuration.md#_snippet_13\n\nLANGUAGE: TOML\nCODE:\n```\n[[operations]]\ninclude-name = \"GET /users\"\ngeneration.max-examples = 200\n\n[[operations]]\ninclude-name = \"Query.getUser\"  # For GraphQL\ngeneration.max-examples = 200\n```\n\n----------------------------------------\n\nTITLE: Integrating Schemathesis in CI/CD with GitHub Actions\nDESCRIPTION: This YAML snippet demonstrates how to integrate Schemathesis into a GitHub Actions workflow for CI/CD. It uses the `schemathesis/action@v1` action and specifies the OpenAPI schema URL. This setup automates API testing as part of the CI/CD pipeline.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/README.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# GitHub Actions example\nsteps:\n  - uses: schemathesis/action@v1\n    with:\n      schema: \"https://example.schemathesis.io/openapi.json\"\n```\n\n----------------------------------------\n\nTITLE: Authentication with Flask in Schemathesis\nDESCRIPTION: This code demonstrates how to integrate Schemathesis authentication with a Flask application using Werkzeug's Client. The `get` method makes a POST request to the token endpoint, retrieves the access token from the response, and the `set` method sets the `Authorization` header for each case.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/auth.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom myapp import app\nimport werkzeug\n\nschema = schemathesis.openapi.from_wsgi(\"/openapi.json\", app=app)\n\nTOKEN_ENDPOINT = \"/auth/token/\"\nUSERNAME = \"demo\"\nPASSWORD = \"test\"\n\n\n@schema.auth()\nclass MyAuth:\n    def get(self, case, context):\n        client = werkzeug.Client(context.app)\n        response = client.post(\n            TOKEN_ENDPOINT, json={\"username\": USERNAME, \"password\": PASSWORD}\n        )\n        return response.json[\"access_token\"]\n\n    def set(self, case, data, context):\n        case.headers = case.headers or {}\n        case.headers[\"Authorization\"] = f\"Bearer {data}\"\n```\n\n----------------------------------------\n\nTITLE: Maximize Metric Configuration - Console\nDESCRIPTION: This command guides the input generation in Schemathesis to values more likely to expose bugs by maximizing the `response_time` metric.  This is useful for property-based testing.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_41\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --generation-maximize response_time\n```\n\n----------------------------------------\n\nTITLE: Using Third-Party Authentication with Schemathesis\nDESCRIPTION: This code demonstrates how to use third-party authentication libraries with Schemathesis by passing a `requests.auth.AuthBase` subclass instance to `auth.set_from_requests`. This example specifically shows how to use the `requests-ntlm` library for NTLM HTTP Authentication.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/auth.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\nfrom requests_ntlm import HttpNtlmAuth\n\nschemathesis.auth.set_from_requests(HttpNtlmAuth(\"domain\\\\username\", \"password\"))\n```\n\n----------------------------------------\n\nTITLE: Running Schemathesis with custom report directory\nDESCRIPTION: This command saves generated JUnit reports to a custom directory named `./test-reports`. The `--report-dir` option specifies the destination directory.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_27\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --report junit --report-dir ./test-reports\n```\n\n----------------------------------------\n\nTITLE: Initializing API Calls with Hypothesis\nDESCRIPTION: This snippet demonstrates how to use the `initialize` decorator from Hypothesis's stateful module to make API calls as preparation for testing, such as creating test data.  It defines a rule that uses the `POST /users/` operation's strategy to generate random data and stores the result in a bundle for dependent API calls. This ensures the rule runs at the beginning of any test scenario.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/stateful.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom hypothesis.stateful import initialize\n\nschema = ...  # Load the API schema here\n\nBaseAPIWorkflow = schema.as_state_machine()\n\n\nclass APIWorkflow(BaseAPIWorkflow):\n    @initialize(\n        target=BaseAPIWorkflow.bundles[\"/users/\"][\"POST\"],\n        case=schema[\"/users/\"][\"POST\"].as_strategy(),\n    )\n    def init_user(self, case):\n        return self.step(case)\n```\n\n----------------------------------------\n\nTITLE: Parameter Overrides in TOML\nDESCRIPTION: Shows how to override parameters globally or at the operation level. This allows customizing request parameters for different API operations or setting global defaults.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n# Global parameters\n[parameters]\napi_version = \"v2\"\n\n# Operation-specific parameters\n[[operations]]\ninclude-name = \"GET /users/\"\nparameters = { limit = 50, offset = 0 }\n\n[[operations]]\ninclude-name = \"GET /users/{user_id}/\"\n# Disambiguate parameters with the same name\nparameters = { \"path.user_id\" = 42, \"query.user_id\" = 100 }\n```\n\n----------------------------------------\n\nTITLE: Disabling Response Schema Conformance Check in TOML\nDESCRIPTION: Shows how to disable a specific check, in this case, the response schema conformance check. Replace `response_schema_conformance` with other check names to disable them.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_24\n\nLANGUAGE: toml\nCODE:\n```\n[checks]\nresponse_schema_conformance.enabled = false\n```\n\n----------------------------------------\n\nTITLE: Running Schemathesis with request timeout\nDESCRIPTION: This command sets a timeout of 5 seconds for each network request during testing, preventing tests from hanging indefinitely.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_23\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --request-timeout 5.0\n```\n\n----------------------------------------\n\nTITLE: Load API Schema from a Raw String in Python\nDESCRIPTION: This example shows how to load a schema from a raw string using the `schemathesis.openapi.from_file` method.  It takes a JSON string representation of the OpenAPI schema.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/python.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# The first argument is a valid Open API schema as a JSON string\nschema = schemathesis.openapi.from_file('{\"paths\": {}, ...}')\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Test Client in Schemathesis Python Tests\nDESCRIPTION: This code demonstrates how to use a custom test client within Schemathesis Python tests, allowing you to share authentication data or execute custom events during session startup or shutdown. It uses a context manager to create a `TestClient` instance and passes it to `case.call_and_validate`.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/auth.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom myapp import app\nfrom starlette_testclient import TestClient\n\nschema = schemathesis.openapi.from_asgi(\"/openapi.json\", app=app)\n\n\n@schema.parametrize()\ndef test_api(case):\n    with TestClient(app) as session:\n        case.call_and_validate(session=session)\n```\n\n----------------------------------------\n\nTITLE: Filtering by Operation ID - TOML\nDESCRIPTION: This snippet demonstrates how to include specific operations based on their `operationId` in the OpenAPI specification.  It sets the `generation.max-examples` for the matched operation.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/configuration.md#_snippet_15\n\nLANGUAGE: TOML\nCODE:\n```\n[[operations]]\ninclude-operation-id = \"getUserById\"\ngeneration.max-examples = 150\n```\n\n----------------------------------------\n\nTITLE: Setting Third-Party Authentication in Python Tests\nDESCRIPTION: This code demonstrates how to set third-party authentication in Schemathesis Python tests. It sets the authentication using `schema.auth.set_from_requests` before parametrizing and running the tests. This is similar to setting authentication via a hook for the CLI.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/auth.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\nfrom requests_ntlm import HttpNtlmAuth\n\nschema = schemathesis.openapi.from_url(\"https://example.schemathesis.io/openapi.json\")\n\nschema.auth.set_from_requests(HttpNtlmAuth(\"domain\\\\username\", \"password\"))\n\n\n@schema.parametrize()\ndef test_api(case):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Running Schemathesis with All Available Checks (Shell)\nDESCRIPTION: Runs Schemathesis tests with all available checks, enabling comprehensive API testing. This command expands on the basic usage by including the `--checks all` flag.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/example/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nschemathesis-docker run --checks all $SCHEMA_URL\n```\n\n----------------------------------------\n\nTITLE: Enabling Schemathesis Hooks with Custom PYTHONPATH (Bash)\nDESCRIPTION: This example shows how to use `PYTHONPATH` environment variable to define location of custom Schemathesis hooks. Useful when the hooks module isn't in standard Python's path. The `SCHEMATHESIS_HOOKS` env var points to the hooks module.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/extending.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport PYTHONPATH=$(pwd)\nexport SCHEMATHESIS_HOOKS=myproject.tests.hooks\nst run https://example.com/api/swagger.json\n```\n\n----------------------------------------\n\nTITLE: Multiple Values for Filters in TOML\nDESCRIPTION: This snippet shows how to use an array of strings to match multiple values for filters in a Schemathesis TOML configuration file. The snippet includes configuration for path and tag filtering.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/configuration.md#_snippet_10\n\nLANGUAGE: TOML\nCODE:\n```\n[[operations]]\ninclude-path = [\"/users\", \"/accounts\", \"/profiles\"]\ngeneration.max-examples = 150\n\n[[operations]]\ninclude-tag = [\"admin\", \"management\"]\nrequest-timeout = 3.0\n```\n\n----------------------------------------\n\nTITLE: Installing pre-commit hooks\nDESCRIPTION: This command installs the pre-commit hooks for the Schemathesis project.  Pre-commit hooks run automatically before each commit, ensuring code quality and consistency. This requires `pre-commit` to be installed.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/CONTRIBUTING.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Targeted Schemathesis Testing (Console)\nDESCRIPTION: This command runs Schemathesis tests against the `openapi.yaml` specification, limiting the number of examples to 10000, and utilizes `--generation-maximize response_time` to favor inputs with longer response times. Targeted testing can often discover performance issues with fewer examples compared to standard testing.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/advanced/targeted.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --max-examples=10000 --generation-maximize response_time\n```\n\n----------------------------------------\n\nTITLE: Generating More Examples per Operation (Shell)\nDESCRIPTION: Configures Schemathesis to generate up to 1000 examples per tested API operation. This is done using the `--hypothesis-max-examples` flag, which increases the test coverage.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/example/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nschemathesis-docker run --hypothesis-max-examples 1000 $SCHEMA_URL\n```\n\n----------------------------------------\n\nTITLE: Include Operations with Admin Tag in Schemathesis Python Tests\nDESCRIPTION: This shows how to include only API operations that are tagged with `admin`. This is achieved by using `schema.include(tag=\"admin\")`.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/python.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@schema.include(tag=\"admin\").parametrize()\ndef test_api(case):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configure Hypothesis Settings in Schemathesis Python Tests\nDESCRIPTION: This example demonstrates how to configure Hypothesis settings for Schemathesis tests using the `hypothesis.settings` decorator.  In this case, the maximum number of examples is set to 1000.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/python.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom hypothesis import settings, Phase\n\nschema = ...  # Load the API schema here\n\n\n@schema.parametrize()\n@settings(max_examples=1000)\ndef test_api(case):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Run Schemathesis against a Sample API\nDESCRIPTION: This command runs Schemathesis against a specified OpenAPI schema URL to test an example API. It loads the schema, generates test cases, sends requests, and validates responses.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/getting-started.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ st run https://example.schemathesis.io/openapi.json\n```\n\n----------------------------------------\n\nTITLE: Adjusting Header Generation - Python\nDESCRIPTION: Demonstrates how to customize header generation in Schemathesis by extending the `GenerationConfig` class and modifying its `headers` attribute with a custom Hypothesis strategy.\n\nRequired dependencies: `hypothesis`, `schemathesis`.\nThe `HeaderConfig` object allows specifying a custom strategy for header values.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/extending.rst#_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\nfrom schemathesis import GenerationConfig, HeaderConfig\nfrom hypothesis import strategies as st\n\nschema = schemathesis.openapi.from_url(\n    \"https://example.schemathesis.io/openapi.json\",\n    generation_config=GenerationConfig(\n        headers=HeaderConfig(\n            strategy=st.text(\n                alphabet=st.characters(\n                    min_codepoint=1, \n                    max_codepoint=127,\n                ).map(str.strip)\n            )\n        )\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Verifying Responses with Custom Check (Shell)\nDESCRIPTION: Runs Schemathesis tests with a custom response check named `not_so_slow`. This shows how to use the `-c` flag to incorporate custom checks in the test suite.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/example/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nschemathesis-docker run -c not_so_slow $SCHEMA_URL\n```\n\n----------------------------------------\n\nTITLE: Running Schemathesis with custom TLS CA bundle\nDESCRIPTION: This command runs Schemathesis with a custom CA bundle specified for TLS certificate verification, ensuring secure communication with the API.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_20\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --tls-verify /path/to/ca-bundle.pem\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Entries of the Same Type\nDESCRIPTION: This snippet demonstrates how to load multiple entries of the same type using `initialize` and `multiple`. It creates multiple users with different attributes and stores them in the `POST /users/` bundle.  This approach requires importing both `initialize` and `multiple` from `hypothesis.stateful`.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/stateful.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom hypothesis.stateful import initialize, multiple\n\nschema = ...  # Load the API schema here\n\nBaseAPIWorkflow = schema.as_state_machine()\n# These users will be created at the beginning of each scenario\nUSERS = [\n    {\"is_admin\": True, \"username\": \"Admin\"},\n    {\"is_admin\": False, \"username\": \"Customer\"},\n]\n\n\nclass APIWorkflow(BaseAPIWorkflow):\n    @initialize(\n        target=BaseAPIWorkflow.bundles[\"/users/\"][\"POST\"],\n    )\n    def init_users(self):\n        result = []\n        # Create each user via the API\n        for user in USERS:\n            case = schema[\"/users/\"][\"POST\"].make_case(body=user)\n            result.append(self.step(case))\n        # Store them in the `POST /users/` bundle\n        return multiple(*result)\n```\n\n----------------------------------------\n\nTITLE: Report Byte Preservation Configuration - Console\nDESCRIPTION: This command configures Schemathesis to retain the exact byte sequence of payloads in VCR cassettes, encoded as base64, when generating reports.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_31\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --report vcr --report-preserve-bytes\n```\n\n----------------------------------------\n\nTITLE: Enabling Deterministic Mode in Schemathesis (TOML)\nDESCRIPTION: This snippet enables deterministic mode in Schemathesis. When `deterministic` is set to `true`, Schemathesis eliminates random variation between tests, ensuring consistency in test outcomes. This is useful for maintaining predictable test results.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_43\n\nLANGUAGE: TOML\nCODE:\n```\n[generation]\ndeterministic = true\n```\n\n----------------------------------------\n\nTITLE: Running Schemathesis with TLS verification disabled\nDESCRIPTION: This command executes Schemathesis with TLS certificate verification disabled, which is generally not recommended for production environments.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_19\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --tls-verify false\n```\n\n----------------------------------------\n\nTITLE: Excluding Checks with --exclude-checks\nDESCRIPTION: This snippet illustrates how to disable specific checks while retaining others by using the `--exclude-checks` option.  It excludes the `negative_data_rejection` check from the test run. The argument `openapi.yaml` specifies the OpenAPI definition file.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/cli.md#_snippet_24\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --exclude-checks negative_data_rejection\n```\n\n----------------------------------------\n\nTITLE: Pytest Example Showing Schemathesis Integration\nDESCRIPTION: This snippet shows an example of running the Schemathesis tests using pytest. It shows the output of pytest including the number of collected items and the results of the tests (PASSED in this case).\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/python.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ pytest -v test_api.py\n====================== test session starts ======================\nplatform linux -- Python 3.8.5, pytest-5.4.3\ncachedir: .pytest_cache\nhypothesis profile 'default'\nrootdir: /tmp, inifile: pytest.ini\nplugins: hypothesis-5.23.0, schemathesis-2.5.0\ncollected 3 items\n\ntest_api.py::test_api[GET /api/path_variable/{key}] PASSED [ 33%]\ntest_api.py::test_api[GET /api/success] PASSED             [ 66%]\ntest_api.py::test_api[POST /api/users/] PASSED             [100%]\n\n======================= 3 passed in 1.55s =======================\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Schema for CSV Data\nDESCRIPTION: Defines an OpenAPI schema for CSV data with two fields, 'first_name' and 'last_name'. It uses the 'array' type to describe the CSV structure and specifies string properties with a pattern restricted to ASCII letters. It requires 'first_name' and 'last_name' as mandatory fields.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/data-generation.rst#_snippet_14\n\nLANGUAGE: null\nCODE:\n```\npaths:\n  /csv:\n    post:\n      requestBody:\n        content:\n          text/csv:\n            schema:\n              items:\n                additionalProperties: false\n                properties:\n                  first_name:\n                    pattern: \\A[A-Za-z]*\\Z\n                    type: string\n                  last_name:\n                    pattern: \\A[A-Za-z]*\\Z\n                    type: string\n                required:\n                - first_name\n                - last_name\n                type: object\n              type: array\n            required: true\n          responses:\n            '200':\n              description: OK\n```\n\n----------------------------------------\n\nTITLE: Configuring Reports Directory in TOML\nDESCRIPTION: Shows how to configure the directory where test reports are stored. This example sets the directory to \"test-results\".\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[reports]\ndirectory = \"test-results\"\n```\n\n----------------------------------------\n\nTITLE: Schemathesis: Generate Only Required Parameters in Python\nDESCRIPTION: This hook modifies Schemathesis's behavior to only generate required parameters for API testing. It iterates through each parameter and body definition in the operation, applying a transformation that removes any optional properties from the schema. The `transform` function recursively traverses the schema, and the `drop_optional_properties` function removes properties not listed in the 'required' field.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/recipes.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\n\n\n@schemathesis.hook\ndef before_init_operation(context, operation):\n    for parameter in operation.iter_parameters():\n        schema = parameter.definition.get(\"schema\", {})\n        transform(schema, drop_optional_properties)\n    for alternative in operation.body:\n        schema = alternative.definition.get(\"schema\", {})\n        transform(schema, drop_optional_properties)\n\n\ndef transform(schema, callback):\n    if isinstance(schema, dict):\n        schema = callback(schema)\n        for key, sub_item in schema.items():\n            schema[key] = transform(sub_item, callback)\n    elif isinstance(schema, list):\n        schema = [transform(sub_item, callback) for sub_item in schema]\n    return schema\n\n\ndef drop_optional_properties(schema):\n    required = schema.get(\"required\", [])\n    properties = schema.get(\"properties\", {})\n    for name in list(properties):\n        if name not in required:\n            del properties[name]\n    return schema\n```\n\n----------------------------------------\n\nTITLE: String generation configuration in Python\nDESCRIPTION: This snippet shows how to configure string generation in Python to disallow \\x00 bytes and use the ASCII codec using `GenerationConfig`.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/data-generation.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n    import schemathesis\n    from schemathesis import GenerationConfig\n\n    schema = schemathesis.openapi.from_url(\n        \"https://example.schemathesis.io/openapi.json\",\n        generation_config=GenerationConfig(allow_x00=False, codec='ascii'),\n    )\n```\n\n----------------------------------------\n\nTITLE: Pull and Run Schemathesis using Docker\nDESCRIPTION: These commands pull the stable version of the Schemathesis Docker image and then run it to verify the installation by displaying the version number. Docker provides a containerized environment for running Schemathesis.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/getting-started.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker pull schemathesis/schemathesis:stable\n$ docker run schemathesis/schemathesis:stable --version\n```\n\n----------------------------------------\n\nTITLE: State Machine Test Runner Example\nDESCRIPTION: This code snippet demonstrates how to use the Schemathesis state machine test runner to execute stateful tests without using pytest. It shows how to initialize the state machine, run the tests, consume events, and collect statistics about the test run.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/stateful.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\nfrom schemathesis.stateful import events\n\nschema = schemathesis.openapi.from_url(\"http://127.0.0.1:8080/swagger.json\")\nstate_machine = schema.as_state_machine()\nsink = state_machine.sink()\n\nrunner = state_machine.runner()\nfor event in runner.execute():\n    sink.consume(event)\n    if isinstance(event, events.RunFinished):\n        print(\"Test run finished\")\nprint(\"Duration:\", sink.duration)\nfor failure in sink.failures:\n    print(failure)\n```\n\n----------------------------------------\n\nTITLE: Property-Level Example Definition in OpenAPI (YAML)\nDESCRIPTION: Illustrates defining examples at the property level within an OpenAPI schema. This defines example values for both `name` (string) and `age` (integer) properties. This method provides specific example values for each property, allowing Schemathesis to generate test cases with these predefined values.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/openapi/examples.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nproperties:\n  name:\n    type: string\n    example: \"John Doe\"\n  age:\n    type: integer\n    example: 30\n```\n\n----------------------------------------\n\nTITLE: Applying Hooks with Different Scopes (Python)\nDESCRIPTION: This example demonstrates how to apply Schemathesis hooks at different scopes: global, schema-specific, and test-specific. It defines a global hook, a schema-specific hook, and a function hook applied to a specific test. Hooks are applied sequentially based on scope. It depends on the `schemathesis` library and an OpenAPI schema at `http://0.0.0.0:8080/swagger.json`.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/extending.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\n\n\n@schemathesis.hook(\"filter_query\")\ndef global_hook(context, query):\n    return query[\"key\"] != \"42\"\n\n\nschema = schemathesis.openapi.from_url(\"http://0.0.0.0:8080/swagger.json\")\n\n\n@schema.hook(\"filter_query\")\ndef schema_hook(context, query):\n    return query[\"key\"] != \"43\"\n\n\ndef function_hook(context, query):\n    return query[\"key\"] != \"44\"\n\n\n@schema.hooks.apply(function_hook)\n@schema.parametrize()\ndef test_api(case):\n    ...\n```\n\n----------------------------------------\n\nTITLE: after_call Hook - Python\nDESCRIPTION: This hook is called right after any successful test request during CLI runs. It allows inspecting (and modifying in-place if you want) the received responses and their source cases.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/extending.rst#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nimport json\n    import schemathesis\n\n\n    @schemathesis.hook\n    def after_call(context, case, response):\n        parsed = response.json()\n        response._content = json.dumps({\"my-wrapper\": parsed}).encode()\n```\n\n----------------------------------------\n\nTITLE: Adjusting Header Generation with Hook - Python\nDESCRIPTION: Demonstrates customizing header generation in Schemathesis using the `after_load_schema` hook and a Hypothesis strategy.\n\nRequired dependencies: `hypothesis`, `schemathesis`.\nThe hook modifies the schema's `generation_config.headers.strategy` attribute.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/extending.rst#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\nfrom hypothesis import strategies as st\n\n@schemathesis.hook\ndef after_load_schema(context, schema) -> None:\n    schema.generation_config.headers.strategy = st.text(\n        alphabet=st.characters(min_codepoint=1, max_codepoint=127)\n    )\n```\n\n----------------------------------------\n\nTITLE: Running Schemathesis with multiple reports\nDESCRIPTION: This command generates both JUnit and HAR reports after the Schemathesis test run. Multiple report formats are specified using a comma-separated list.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_26\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --report junit,har\n```\n\n----------------------------------------\n\nTITLE: Setting an HTTPS Proxy with Authentication in Schemathesis (TOML)\nDESCRIPTION: This snippet shows how to configure Schemathesis to use an HTTPS proxy with authentication. It specifies the proxy URL with the username and password embedded in the URL: `https://${USERNAME}:${PASSWORD}@proxy.example.com:8443`. All API requests will be routed through this authenticated proxy.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_29\n\nLANGUAGE: TOML\nCODE:\n```\nproxy = \"https://${USERNAME}:${PASSWORD}@proxy.example.com:8443\"\n```\n\n----------------------------------------\n\nTITLE: Output Sanitization Configuration - Console\nDESCRIPTION: This command enables or disables automatic output sanitization in Schemathesis, which is used to obscure sensitive data in the test output. Setting it to `false` disables sanitization.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_32\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --output-sanitize false\n```\n\n----------------------------------------\n\nTITLE: Operation Filter by Tag in TOML\nDESCRIPTION: This snippet shows how to filter operations by tag using the `include-tag` option in a Schemathesis TOML configuration file.  It sets a tag of `payment`, along with the `generation.max-examples` and `rate-limit` configurations.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/configuration.md#_snippet_14\n\nLANGUAGE: TOML\nCODE:\n```\n[[operations]]\ninclude-tag = \"payment\"\ngeneration.max-examples = 150\nrate-limit = \"20/s\"\n```\n\n----------------------------------------\n\nTITLE: Setting Another Request Timeout in Schemathesis (TOML)\nDESCRIPTION: This snippet sets a 0.5-second (500 millisecond) timeout for each network request made by Schemathesis. The `request-timeout` value must be a positive number, representing the timeout in seconds.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_36\n\nLANGUAGE: TOML\nCODE:\n```\nrequest-timeout = 0.5\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Schema with required and additionalProperties in YAML\nDESCRIPTION: Shows an updated OpenAPI schema in YAML that includes the `required` and `additionalProperties` keywords to address potential validation issues when using `oneOf`. This ensures that both `Dog` and `Cat` schemas explicitly define required properties and prevent additional properties, leading to more accurate validation.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/faq.rst#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  schemas:\n    Dog:\n      type: object\n      properties:\n        bark:\n          type: boolean\n        breed:\n          type: string\n          enum: [Dingo, Husky, Retriever, Shepherd]\n      required: [bark, breed]      # List all the required properties\n      additionalProperties: false  # And forbid any others\n    Cat:\n      type: object\n      properties:\n        hunts:\n          type: boolean\n        age:\n          type: integer\n      required: [hunts, age]       # List all the required properties\n      additionalProperties: false  # And forbid any others\n```\n\n----------------------------------------\n\nTITLE: Test Data Generation Mode Configuration - Console\nDESCRIPTION: This command sets the test data generation mode in Schemathesis to `all`, which means it will generate both valid and invalid data during the tests.  Possible values are `positive`, `negative`, `all`.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_34\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --mode all\n```\n\n----------------------------------------\n\nTITLE: Registering Custom String Format Strategy - Python\nDESCRIPTION: Registers a custom Hypothesis strategy for generating strings that comply with a specified format. This allows Schemathesis to generate more precise test data for custom string formats defined in an Open API schema.\n\nRequired dependencies: `hypothesis`, `schemathesis`.\nThe `schemathesis.openapi.format` function associates a strategy with a specific format name.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/extending.rst#_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nfrom hypothesis import strategies as st\nimport schemathesis\n\n\n# Example Luhn algorithm validator\ndef luhn_validator(card_number: str) -> bool:\n    # Actual validation logic is omitted for brevity\n    return True\n\n\n# Strategy generating a 16-digit number, starting with \"4\"\nstrategy = st.from_regex(r\"\\A4[0-9]{15}\\Z\").filter(luhn_validator)\n\n# Registering the strategy for \"card_number\" format\nschemathesis.openapi.format(\"card_number\", strategy)\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query with Custom Scalar Value\nDESCRIPTION: This snippet presents an example GraphQL query that includes a custom scalar value generated by a custom scalar strategy in Schemathesis. It shows how the generated value is used within a query parameter.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/graphql.rst#_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{ getByDate(created: \"2000-01-01\") }\n```\n\n----------------------------------------\n\nTITLE: GitLab CI Configuration for Schemathesis Tests\nDESCRIPTION: This YAML snippet configures a GitLab CI job named 'api-tests' to run Schemathesis tests. It uses the 'schemathesis/schemathesis:stable' Docker image and executes the 'st run' command against an OpenAPI definition. The application setup should be done before this step if needed.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/ci/gitlab-ci.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\napi-tests:\n  stage: test\n  image:\n    name: schemathesis/schemathesis:stable\n    entrypoint: [\"\"]\n  script:\n    # Set up application here if needed\n    - st run http://127.0.0.1:5000/api/openapi.json\n```\n\n----------------------------------------\n\nTITLE: Running Schemathesis excluding checks\nDESCRIPTION: This command executes Schemathesis, running all checks except `response_schema_conformance`. This configuration can be helpful for temporarily disabling specific validations.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --checks all --exclude-checks response_schema_conformance\n```\n\n----------------------------------------\n\nTITLE: Exploring Schemas and Strategies in Python\nDESCRIPTION: Demonstrates how to explore schemas and strategies manually in Schemathesis. It includes accessing an operation, generating a strategy from it, and printing an example `Case` instance.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/python.rst#_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\n\nschema = schemathesis.openapi.from_url(\"http://api.com/schema.json\")\n\noperation = schema[\"/pet\"][\"POST\"]\nstrategy = operation.as_strategy()\nprint(strategy.example())\n# Case(\n#     path='/pet',\n#     method='POST',\n#     path_parameters={},\n#     headers={},\n#     cookies={},\n#     query={},\n#     body={\n#         'name': '\\x15.\\x13\\U0008f42a',\n#         'photoUrls': ['\\x08\\U0009f29a', '']\n#     },\n# )\n```\n\n----------------------------------------\n\nTITLE: Docker Network Configuration on macOS\nDESCRIPTION: This snippet demonstrates how to access services on the host machine from within a Docker container on macOS by using the `host.docker.internal` DNS name. It runs Schemathesis in a Docker container and specifies that it should use `host.docker.internal` to access services running on the host machine. `http://host.docker.internal:8000/openapi.json` is the URL to the OpenAPI schema on the host machine.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/cli.md#_snippet_33\n\nLANGUAGE: console\nCODE:\n```\n$ docker run schemathesis/schemathesis:stable \\\n    run http://host.docker.internal:8000/openapi.json\n```\n\n----------------------------------------\n\nTITLE: Load API Schema from a Local Path in Python\nDESCRIPTION: This example shows how to load an API schema from a local file path using `schemathesis.openapi.from_path`. It loads the API definition from the given file path.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/python.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nschema = schemathesis.openapi.from_path(\"/tmp/openapi.json\")\n```\n\n----------------------------------------\n\nTITLE: Defining Projects - TOML\nDESCRIPTION: This snippet demonstrates how to define projects in the `[[projects]]` section by matching the API's title. It shows setting the `title` and `base-url` for a specific API project, which Schemathesis uses to apply project-specific settings.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/configuration.md#_snippet_26\n\nLANGUAGE: TOML\nCODE:\n```\n[[projects]]\n# Projects are matched by the API schema's `info.title``\ntitle = \"Payment Processing API\"\nbase-url = \"https://payments.example.com\"\n```\n\n----------------------------------------\n\nTITLE: Setting Client Certificate in Schemathesis (TOML)\nDESCRIPTION: This snippet configures Schemathesis to use a client certificate for authentication. The `request-cert` setting specifies the file path to the client certificate file, which can be a PEM file containing both the certificate and the private key.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_37\n\nLANGUAGE: TOML\nCODE:\n```\n# Client certificate with bundled private key\nrequest-cert = \"/path/to/client-cert.pem\"\n```\n\n----------------------------------------\n\nTITLE: Docker Network Configuration on Linux\nDESCRIPTION: This snippet shows how to access services running on the local machine when using Docker on Linux by using the `--network=host` parameter. It runs Schemathesis in a Docker container and specifies that it should use the host's network interface, allowing it to access services running on localhost. `http://localhost:8000/openapi.json` is the URL to the local OpenAPI schema.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/cli.md#_snippet_32\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --network=host schemathesis/schemathesis:stable \\\n    run http://localhost:8000/openapi.json\n```\n\n----------------------------------------\n\nTITLE: Running Schemathesis with client certificate\nDESCRIPTION: This command executes Schemathesis, using a client certificate for authentication, which enhances security during API requests.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_24\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --request-cert /path/to/client-cert.pem\n```\n\n----------------------------------------\n\nTITLE: Providing Query Data for GraphQL Requests (Python)\nDESCRIPTION: This example shows how to provide query data for GraphQL requests using the `map_query` hook in Schemathesis.  Since Schemathesis does not generate query parameters for GraphQL requests, this hook allows you to specify the query parameters manually.  The hook returns a dictionary containing the query parameter \"q\" with the value \"42\". Depends on the `schemathesis` library.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/extending.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@schema.hook\ndef map_query(context, query):\n    return {\"q\": \"42\"}\n```\n\n----------------------------------------\n\nTITLE: Schemathesis Configuration File Example\nDESCRIPTION: This is an example of a `schemathesis.toml` configuration file used to configure Schemathesis behavior. It shows how to set API key authentication, disable response schema conformance checks, and configure JUnit report path. Environment variables are used for dynamic configuration.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/ci/overview.md#_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[auth.openapi]\nApiKeyAuth = { value = \"${API_KEY}\" }\n\n[checks]\nresponse_schema_conformance.enabled = false\n\n[reports.junit]\npath = \"${JUNIT_REPORT_PATH}\"\n```\n\n----------------------------------------\n\nTITLE: Disabling TLS Verification in Schemathesis (TOML)\nDESCRIPTION: This snippet shows how to disable TLS certificate verification for network requests made by Schemathesis. Setting `tls-verify` to `false` will skip the validation of TLS certificates, which can be useful in certain testing environments. Disabling TLS verification is generally discouraged for production environments due to security risks.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_30\n\nLANGUAGE: TOML\nCODE:\n```\ntls-verify = false\n```\n\n----------------------------------------\n\nTITLE: Replaying the Test Log (Shell)\nDESCRIPTION: Replays the test log from a file named `cassette.yaml`. This enables reproducing previous test runs, which is useful for debugging and regression testing.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/example/README.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nschemathesis-docker replay cassette.yaml\n```\n\n----------------------------------------\n\nTITLE: Running Schemathesis via Command Line\nDESCRIPTION: This command demonstrates how to quickly start Schemathesis to test an API by providing the URL of an OpenAPI schema.  It uses `uvx` for executing the Schemathesis command.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/index.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# Quickest way to start:\n$ uvx schemathesis run http://example.schemathesis.io/openapi.json\n```\n\n----------------------------------------\n\nTITLE: Disallowing NULL Bytes in GraphQL Queries (TOML)\nDESCRIPTION: This snippet configures Schemathesis to disallow the use of `\\x00` bytes in generated GraphQL queries. Setting `graphql-allow-null` to `false` prevents the generation of these bytes, which can cause issues with some GraphQL implementations. This setting is only applicable for GraphQL API testing.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_48\n\nLANGUAGE: TOML\nCODE:\n```\n[generation]\ngraphql-allow-null = false\n```\n\n----------------------------------------\n\nTITLE: Docker Network Configuration on Windows\nDESCRIPTION: This snippet demonstrates how to access services on the host machine from within a Docker container on Windows by using the `host.docker.internal` DNS name. It runs Schemathesis in a Docker container and specifies that it should use `host.docker.internal` to access services running on the host machine. `http://host.docker.internal:8000/openapi.json` is the URL to the OpenAPI schema on the host machine.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/cli.md#_snippet_34\n\nLANGUAGE: console\nCODE:\n```\n$ docker run schemathesis/schemathesis:stable \\\n   run http://host.docker.internal:8000/openapi.json\n```\n\n----------------------------------------\n\nTITLE: Running Schemathesis waiting for schema\nDESCRIPTION: This command tells Schemathesis to wait for the API schema to become available for up to 5 seconds. This is useful when testing APIs that might take some time to initialize.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ st run https://api.example.com/openapi.json --wait-for-schema 5.0\n```\n\n----------------------------------------\n\nTITLE: Installing Schemathesis via pip\nDESCRIPTION: This command shows how to install Schemathesis using pip, the standard package installer for Python. This will install the latest stable version of Schemathesis.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ pip install schemathesis\n```\n\n----------------------------------------\n\nTITLE: Registering a CSV Serializer (Python)\nDESCRIPTION: This code snippet demonstrates how to register a custom serializer for the 'text/csv' media type in Schemathesis using the `@schemathesis.serializer` decorator. The decorated class, `CSVSerializer`, will handle the serialization of data to CSV format when Schemathesis encounters the specified media type.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/data-generation.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\n\n\n@schemathesis.serializer(\"text/csv\")\nclass CSVSerializer:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Parameter Type Disambiguation - TOML\nDESCRIPTION: This snippet demonstrates how to disambiguate parameters with the same name by prefixing them with their location (path, query, header, cookie). This ensures that Schemathesis correctly applies the parameter value to the intended location.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/configuration.md#_snippet_24\n\nLANGUAGE: TOML\nCODE:\n```\n[parameters]\n\"path.id\" = 42                      # Path parameter\n\"query.id\" = 100                    # Query parameter\n\"header.X-API-Version\" = \"2.0\"      # Header parameter\n\"cookie.session\" = \"${SESSION_ID}\"  # Cookie parameter\n```\n\n----------------------------------------\n\nTITLE: Operation-Specific Check Configuration in TOML\nDESCRIPTION: This snippet demonstrates how to override check settings for a specific operation in a Schemathesis TOML configuration file. It sets operation-specific check settings, such as expected statuses for positive data acceptance and enabling/disabling schema conformance for the response.  This provides a way to customize checks for individual API endpoints.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/configuration.md#_snippet_7\n\nLANGUAGE: TOML\nCODE:\n```\n[[operations]]\ninclude-name = \"POST /users\"\n# Operation-specific check settings\nchecks.positive_data_acceptance.expected-statuses = [201]\nchecks.response_schema_conformance.enabled = false\n```\n\n----------------------------------------\n\nTITLE: Using Parameter Arrays - TOML\nDESCRIPTION: This snippet illustrates how to provide an array of values for a parameter. Schemathesis will randomly select one value from the array for each test case, allowing for distribution of values like `role` (`admin`, `user`, `guest`) across tests.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/configuration.md#_snippet_25\n\nLANGUAGE: TOML\nCODE:\n```\n[[operations]]\ninclude-name = \"GET /users\"\nparameters = { role = [\"admin\", \"user\", \"guest\"] }\n```\n\n----------------------------------------\n\nTITLE: Registering a Before-Generate Query Hook in Schemathesis\nDESCRIPTION: This code snippet demonstrates how to register a hook in Schemathesis to be executed before generating a query.  It applies the `before_generate_query` function to a test function that uses `@schema.parametrize`. This hook allows customization of the query generation process. It takes a `context` object, providing information about the current test context, and a `strategy` object representing the generation strategy.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/api.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef before_generate_query(context, strategy):\n    ...\n\n\n@schema.hooks.apply(before_generate_query)\n@schema.parametrize()\ndef test_api(case):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Running Schemathesis with custom HAR path\nDESCRIPTION: This command saves the HAR file to a custom location: `./custom-har.json`. The location of the HAR output can be controlled in this way.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_30\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --report har --report-har-path ./custom-har.json\n```\n\n----------------------------------------\n\nTITLE: Modifying case object in Schemathesis Python\nDESCRIPTION: Modifies the `case` object within a Schemathesis test. It assumes a URL template like `/api/users/{user_id}` and sets the `user_id` path parameter to a specific value. Requires the `schema` object to be loaded with the API schema.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/faq.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nschema = ...  # Load the API schema here\n\n\n@schema.parametrize()\ndef test_api(case):\n    case.path_parameters[\"user_id\"] = 42\n```\n\n----------------------------------------\n\nTITLE: Running Schemathesis suppressing health checks\nDESCRIPTION: This command executes Schemathesis with specific health checks disabled. The `--suppress-health-check` option prevents early termination due to potential test generation or performance issues.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --suppress-health-check too_slow,data_too_large\n```\n\n----------------------------------------\n\nTITLE: Negative testing via CLI (Text)\nDESCRIPTION: This snippet demonstrates how to enable negative testing via the CLI using the `-D negative` option.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/data-generation.rst#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n    $ st run -D negative https://example.schemathesis.io/openapi.json\n```\n\n----------------------------------------\n\nTITLE: Applying Hooks to Specific Operations - Python\nDESCRIPTION: This example applies a hook to synchronize the `item_id` path parameter with the `id` value from the request body, but only for test cases targeting `PATCH /items/{item_id}/`.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/extending.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\n\n\n    @schemathesis.hook.apply_to(name=\"PATCH /items/{item_id}/\")\n    def map_case(context, case):\n        case.path_parameters[\"item_id\"] = case.body[\"data\"][\"id\"]\n        return case\n```\n\n----------------------------------------\n\nTITLE: Filtering with Regular Expressions - TOML\nDESCRIPTION: These snippets show how to use regular expressions for filtering operations based on path, method, or operation ID. The `include-path-regex` filters by path, `include-method-regex` by HTTP method, and `include-operation-id-regex` by operation ID.  Each example sets a related configuration parameter.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/configuration.md#_snippet_16\n\nLANGUAGE: TOML\nCODE:\n```\n[[operations]]\ninclude-path-regex = \"/(users|orders)/\"\ngeneration.max-examples = 150\n```\n\nLANGUAGE: TOML\nCODE:\n```\n[[operations]]\ninclude-method-regex = \"(POST|PUT|PATCH)\"\nrequest-timeout = 3.0\n```\n\nLANGUAGE: TOML\nCODE:\n```\n[[operations]]\ninclude-operation-id-regex = \".*User.*\"\nchecks.not_a_server_error.enabled = false\n```\n\n----------------------------------------\n\nTITLE: Running Schemathesis with proxy\nDESCRIPTION: This command configures Schemathesis to use a specified HTTP proxy for all network requests, directing traffic through the proxy server.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_18\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --proxy http://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Schema with minLength for string (Shell)\nDESCRIPTION: This snippet demonstrates a schema with a `minLength` constraint for a string property, showcasing how Schemathesis minimizes failing test cases to make them easier to debug.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/data-generation.rst#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n    # Schema\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": {\"type\": \"string\", \"minLength\": 5}\n      }\n    }\n\n    # Failing test case\n    {\"name\": \"Very long name\"}\n\n    # Minimized test case\n    {\"name\": \"aaaaa\"}\n```\n\n----------------------------------------\n\nTITLE: Minimal Stateful Test Example in Python\nDESCRIPTION: This Python snippet showcases a minimal example of adding stateful tests to your test suite using Schemathesis.  It loads an API schema from a URL and defines a state machine (APIWorkflow) and a test case (TestAPI). The state machine allows customization of test behavior, while the test case can include pytest fixtures that apply to all scenarios.  The example assumes the schema.yaml file is accessible at the specified URL.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/stateful.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\n\nschema = schemathesis.openapi.from_url(\"http://0.0.0.0/schema.yaml\")\n\nAPIWorkflow = schema.as_state_machine()\nTestAPI = APIWorkflow.TestCase\n```\n\n----------------------------------------\n\nTITLE: Running Schemathesis including by tag\nDESCRIPTION: This command executes Schemathesis, including only operations with the tag 'users'. This focuses the test run on a specific subset of API endpoints.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --include-tag users\n```\n\n----------------------------------------\n\nTITLE: Global Parameter Overrides - TOML\nDESCRIPTION: This snippet shows how to apply parameter overrides across all operations. The specified values will only be used if an API operation uses parameters with those names, such as `api_version`, `limit`, and `offset`.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/configuration.md#_snippet_23\n\nLANGUAGE: TOML\nCODE:\n```\n[parameters]\napi_version = \"v2\"\nlimit = 50\noffset = 0\n```\n\n----------------------------------------\n\nTITLE: Changing Report Directory with --report-dir\nDESCRIPTION: This snippet shows how to change the default report directory using the `--report-dir` option. It generates a JUnit report and stores it in the `./test-results` directory. The argument `openapi.yaml` specifies the OpenAPI definition file.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/cli.md#_snippet_28\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --report junit --report-dir ./test-results\n```\n\n----------------------------------------\n\nTITLE: Setting the Test Data Mode to Positive\nDESCRIPTION: Sets the test data generation mode to 'positive', which generates only valid data that should be accepted by the API. This mode is useful during initial API development to focus on core functionality before error handling.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/cli.md#_snippet_20\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --mode positive\n```\n\n----------------------------------------\n\nTITLE: Running tests with tox\nDESCRIPTION: This command runs the test suite for Schemathesis using tox. `tox` is a tool for automating testing in multiple environments. The `-e py311` option specifies that the tests should be run in a Python 3.11 environment.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/CONTRIBUTING.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntox -e py311\n```\n\n----------------------------------------\n\nTITLE: Negative testing configuration in Python\nDESCRIPTION: This snippet shows how to configure negative testing in Python using the `DataGenerationMethod.negative` option.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/data-generation.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n    import schemathesis\n    from schemathesis import DataGenerationMethod\n\n    schema = schemathesis.openapi.from_url(\n        \"https://example.schemathesis.io/openapi.json\",\n        data_generation_methods=[DataGenerationMethod.negative],\n    )\n\n\n    @schema.parametrize()\n    def test_api(case):\n        case.call_and_validate()\n```\n\n----------------------------------------\n\nTITLE: Running Schemathesis with custom JUnit path\nDESCRIPTION: This command creates a JUnit XML report at a specific path: `./custom-junit.xml`. This option provides greater control over report file locations.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_28\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --report junit --report-junit-path ./custom-junit.xml\n```\n\n----------------------------------------\n\nTITLE: Load API Schema from a Python Dictionary\nDESCRIPTION: This code demonstrates loading an API schema directly from a Python dictionary using `schemathesis.openapi.from_dict`. This is useful when the schema is generated dynamically within the application.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/python.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nraw_schema = {\n    \"swagger\": \"2.0\",\n    \"paths\": {\n        # Open API operations here\n    },\n}\nschema = schemathesis.openapi.from_dict(raw_schema)\n```\n\n----------------------------------------\n\nTITLE: Disable Test Case Shrinking - Console\nDESCRIPTION: This command disables test case shrinking in Schemathesis. Disabling shrinking can improve performance but makes test failures harder to debug.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_37\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --no-shrink\n```\n\n----------------------------------------\n\nTITLE: Defining Cache Key for Authentication in Schemathesis\nDESCRIPTION: This code snippet illustrates how to define a custom cache key for authentication in Schemathesis to distinguish tokens based on specific criteria, like OAuth scopes. It defines a `cache_by_key` function that extracts scopes from the security definition and uses them as a cache key.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/auth.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef get_scopes(context):\n    security = context.operation.definition.raw.get(\"security\", [])\n    if not security:\n        return None\n    scopes = security[0][context.operation.get_security_requirements()[0]]\n    if not scopes:\n        return None\n    return frozenset(scopes)\n\ndef cache_by_key(case: Case, context: AuthContext) -> str:\n    scopes = get_scopes(context) or []\n    return \",\".join(scopes)\n\n@schema.auth(cache_by_key=cache_by_key)\nclass OAuth2Bearer:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Multiple Examples Definition in OpenAPI (YAML)\nDESCRIPTION: Demonstrates defining multiple examples for a string property using the `examples` keyword in an OpenAPI 3.0+ schema.  This is useful for providing a variety of valid inputs for testing purposes.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/openapi/examples.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nschema:\n  type: object\n  properties:\n    name:\n      type: string\n      examples:\n        - \"John Doe\"\n        - \"Jane Smith\"\n```\n\n----------------------------------------\n\nTITLE: Unique Test Inputs Configuration - Console\nDESCRIPTION: This command forces the generation of unique test cases in Schemathesis. When enabled, Schemathesis will ensure that no duplicate test inputs are used within a single test phase.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_45\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --generation-unique-inputs\n```\n\n----------------------------------------\n\nTITLE: XML Schema defining attribute serialization\nDESCRIPTION: This snippet demonstrates an OpenAPI schema definition for XML serialization, specifying that 'id' should be serialized as an attribute.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/data-generation.rst#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n/upload:\n  post:\n    requestBody:\n      content:\n        application/xml:\n          schema:\n            additionalProperties: false\n            properties:\n              id:\n                type: integer\n                xml:\n                  # Specifies that 'id' should be serialized as an attribute\n                  attribute: true\n            required:\n            - id\n            type: object\n      required: true\n```\n\n----------------------------------------\n\nTITLE: Valid Schema Paths in Python\nDESCRIPTION: Illustrates the correct way to reference paths within a Schemathesis schema, emphasizing that paths are relative to the schema's base path (host + basePath in OpenAPI 2.0 and server.url in OpenAPI 3.0).\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/python.rst#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n# your ``basePath`` is ``/api/v1``\nschema[\"/pet\"][\"POST\"]  # VALID\nschema[\"/api/v1/pet\"][\"POST\"]  # INVALID\n```\n\n----------------------------------------\n\nTITLE: Setting Wait-For-Schema Timeout in TOML\nDESCRIPTION: Demonstrates how to set the maximum duration, in seconds, to wait for the API schema to become available. Useful when testing services that take time to start up.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_15\n\nLANGUAGE: toml\nCODE:\n```\nwait-for-schema = 5.0\n```\n\n----------------------------------------\n\nTITLE: String generation with specific configurations (Text)\nDESCRIPTION: This snippet demonstrates how to configure string generation globally via CLI to disallow ``\\x00`` bytes and use the ASCII codec.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/data-generation.rst#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n    $ st run --generation-allow-x00=false ...\n    $ st run --generation-codec=ascii ...\n```\n\n----------------------------------------\n\nTITLE: Selecting Test Phases\nDESCRIPTION: Demonstrates how to select specific test phases using the `--phases` option. This example runs only the 'examples' and 'fuzzing' phases, reducing test duration and focusing on specific types of API testing.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/cli.md#_snippet_18\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --phases examples,fuzzing\n```\n\n----------------------------------------\n\nTITLE: External Example Definition in OpenAPI (YAML)\nDESCRIPTION: Demonstrates referencing an external JSON file for an example in an OpenAPI schema. The `externalValue` property points to a URL where the example JSON is located. Schemathesis will load and cache the external example during testing.  The example also uses a `summary` to describe the example.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/openapi/examples.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncontent:\n  application/json:\n    schema:\n      $ref: '#/components/schemas/User'\n    examples:\n      user:\n        summary: \"A typical user\"\n        externalValue: 'http://example.com/examples/user.json'\n```\n\n----------------------------------------\n\nTITLE: Reproducing Failures in Stateful Tests\nDESCRIPTION: This snippet shows the Python code generated by Schemathesis to reproduce an error found in a stateful test. It creates an instance of the `APIWorkflow` class, then calls `state.step` multiple times to simulate a sequence of API calls. It passes the `case` and `previous` parameters in `state.step` to maintain the stateful context and reproduce the failure.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/stateful.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nstate = APIWorkflow()\nv1 = state.step(\n    case=state.schema[\"/users/\"][\"POST\"].make_case(body={\"username\": \"000\"}),\n    previous=None,\n)\nstate.step(\n    case=state.schema[\"/users/{user_id}\"][\"PATCH\"].make_case(\n        path_parameters={\"user_id\": 0},\n        query={\"common\": 0},\n        body={\"username\": \"\"},\n    ),\n    previous=(\n        v1,\n        schema[\"/users/\"][\"POST\"].links[\"201\"][\"UpdateUserById\"],\n    ),\n)\nstate.teardown()\n```\n\n----------------------------------------\n\nTITLE: Starting the Docker Compose Application\nDESCRIPTION: This shell command starts the Flask application defined in the `docker-compose.yml` file in detached mode, making the API accessible for testing. Docker Compose is required for this to run correctly.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/ci/github-actions.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ docker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Filtering GraphQL Queries with `filter_body` Hook (Python)\nDESCRIPTION: This code demonstrates how to filter GraphQL queries using the `filter_body` hook in Schemathesis.  It checks if the first field name in the query is \"excludeThisField\" and excludes the query if it is. It depends on the `schemathesis` library.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/extending.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@schema.hook\ndef filter_body(context, body):\n    node = body.definitions[0].selection_set.selections[0]\n    return node.name.value != \"excludeThisField\"\n```\n\n----------------------------------------\n\nTITLE: Base URL Override CLI Example\nDESCRIPTION: Demonstrates how to override the base URL using the Schemathesis CLI. It includes the base URL with a base path. It overrides the base path defined in the schema. Requires the schemathesis CLI tool.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/CHANGELOG.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nschemathesis run --base-url=http://127.0.0.1:8080/api/v2 ...\n```\n\n----------------------------------------\n\nTITLE: Random Seed Configuration - Console\nDESCRIPTION: This command sets the random seed for the test run in Schemathesis to 42, making the test run reproducible. Using the same seed value will result in the same sequence of generated test cases.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_36\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --seed 42\n```\n\n----------------------------------------\n\nTITLE: CSVSerializer Methods: as_requests, as_werkzeug (Python)\nDESCRIPTION: These methods, `as_requests` and `as_werkzeug`, are part of the `CSVSerializer` class and define how to serialize data for `requests` and `werkzeug` clients, respectively. They convert the input `value` to CSV using the `to_csv` function and return a dictionary containing the CSV data under the 'data' key. Binary data is handled directly without conversion.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/data-generation.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n...\n\n\nclass CSVSerializer:\n    def as_requests(self, context, value):\n        if isinstance(value, bytes):\n            return {\"data\": value}\n        return {\"data\": to_csv(value)}\n\n    def as_werkzeug(self, context, value):\n        if isinstance(value, bytes):\n            return {\"data\": value}\n        return {\"data\": to_csv(value)}\n```\n\n----------------------------------------\n\nTITLE: Customizing Sanitization Configuration in Schemathesis\nDESCRIPTION: This code snippet demonstrates how to customize the sanitization process. It replaces the default configuration with a custom replacement string, keys to sanitize, and sensitive markers.  This allows for more fine-grained control over the sanitization process.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/sanitizing.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\n\n# Replace configuration\nschemathesis.sanitization.configure(\n    replacement=\"[Custom]\",\n    keys_to_sanitize=[\"X-Customer-ID\"],\n    sensitive_markers=[\"address\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling Output Sanitization in TOML\nDESCRIPTION: Shows how to disable automatic sanitization of output data. This may be useful when the default sanitization interferes with debugging.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n[output]\nsanitize = false\n```\n\n----------------------------------------\n\nTITLE: Custom Check Definition - Python\nDESCRIPTION: This code demonstrates how to define a custom check in Schemathesis.  The check function takes `ctx`, `response`, and `case` as parameters and should raise an `AssertionError` to signify a check failure.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/extending.rst#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\n\n\n    @schemathesis.check\n    def my_check(ctx, response, case) -> None:\n        ...\n```\n\n----------------------------------------\n\nTITLE: Operation-Specific Configuration in TOML\nDESCRIPTION: Demonstrates how to configure Schemathesis to apply custom settings to specific API operations, using include-path, exclude-method, include-name, include-tag, and include-operation-id. This allows targeting specific operations for testing.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[[operations]]\n# By exact path\ninclude-path = \"/users\"\n# By HTTP method\nexclude-method = \"POST\"\n# By full operation name\n# include-name = \"POST /users/\"\n# By Open API tag\n# include-tag = \"admin\"\n# By Open API operation ID\n# include-operation-id = \"delete-user\"\n```\n\n----------------------------------------\n\nTITLE: Allow Null Bytes Generation - Console\nDESCRIPTION: This command disables the generation of 'NULL' bytes within strings during test data generation in Schemathesis. The default is to allow them.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_39\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --generation-allow-x00 false\n```\n\n----------------------------------------\n\nTITLE: Running Schemathesis with schema and URL\nDESCRIPTION: This command executes Schemathesis against an API defined by an OpenAPI schema file. It requires the path to the schema file and the base URL of the API to test.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --url https://api.example.com\n```\n\n----------------------------------------\n\nTITLE: Forcing Unique Test Case Generation (TOML)\nDESCRIPTION: This snippet forces the generation of unique test cases within a single test phase. Setting `unique-inputs` to `true` will ensure that no duplicate test inputs are used, potentially increasing test coverage and finding more issues.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_51\n\nLANGUAGE: TOML\nCODE:\n```\n[generation]\nunique-inputs = true\n```\n\n----------------------------------------\n\nTITLE: Include Operations with Specific Names in Schemathesis Python Tests\nDESCRIPTION: This snippet shows how to include operations by their full name (`HTTP_METHOD PATH`). Multiple names can be included by providing a list.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/python.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@schema.include(name=[\"GET /users\", \"POST /orders\"]).parametrize()\ndef test_api(case):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Criteria - TOML\nDESCRIPTION: This snippet illustrates how to combine multiple criteria within a single configuration entry. In this case, only POST requests matching any other specified (but commented out) criteria would be included. It also demonstrates setting the `request-timeout` parameter.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/configuration.md#_snippet_18\n\nLANGUAGE: TOML\nCODE:\n```\n[[operations]]\ninclude-method = \"POST\"\n# include-tag = \"users\"\nrequest-timeout = 3.0\n```\n\n----------------------------------------\n\nTITLE: Run Schemathesis with URL-Based Schema\nDESCRIPTION: This command runs Schemathesis against an API whose schema is exposed through a URL. It is crucial to ensure the API is running and accessible before executing this command.  The schema at the specified URL will be used for testing.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/ci/overview.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ st run http://api-host:port/openapi.json\n```\n\n----------------------------------------\n\nTITLE: OpenAPI schema example (Shell)\nDESCRIPTION: This example schema demonstrates how Schemathesis uses predefined examples from the schema, filling missing parts with random data. This tests explicitly defined examples.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/data-generation.rst#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n   # Schema\n  {\n    \"type\": \"object\",\n    \"properties\": {\n      \"name\": {\"type\": \"string\", \"example\": \"John\"},\n      \"age\": {\"type\": \"integer\", \"examples\": [42, 43]},\n      \"street\": {\"type\": \"string\"}\n    }\n  }\n  # Test cases\n  {\"name\": \"John\", \"age\": 42, \"street\": \"<RANDOM STRING>\"}\n  {\"name\": \"John\", \"age\": 43, \"street\": \"<ANOTHER RANDOM STRING>\"}\n```\n\n----------------------------------------\n\nTITLE: Suppressing Health Checks in TOML\nDESCRIPTION: Shows how to suppress specific health checks during test execution. This example disables `too_slow` and `data_too_large` health checks.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\nsuppress-health-check = [\"too_slow\", \"data_too_large\"]\n```\n\n----------------------------------------\n\nTITLE: Disabling Output Sanitization via CLI in Schemathesis\nDESCRIPTION: This command shows how to disable the automatic sanitization of sensitive data in Schemathesis output using the `--sanitize-output` CLI option. Setting the value to `false` turns off the sanitization process.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/sanitizing.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nschemathesis run --sanitize-output=false ...\n```\n\n----------------------------------------\n\nTITLE: Specifying Number of Workers in TOML\nDESCRIPTION: Shows how to specify the number of concurrent workers for running unit test phases. The default is the number of available CPUs.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_14\n\nLANGUAGE: toml\nCODE:\n```\nworkers = 4       # Use exactly 4 workers\n```\n\n----------------------------------------\n\nTITLE: String Codec Configuration - Console\nDESCRIPTION: This command specifies the character encoding used for generating strings in Schemathesis as 'ascii'. This defines the codec for string generation.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_40\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --generation-codec ascii\n```\n\n----------------------------------------\n\nTITLE: Disallowing NULL Bytes in String Generation in Schemathesis (TOML)\nDESCRIPTION: This snippet configures Schemathesis to disallow the generation of NULL bytes (0x00) within strings. Setting `allow-x00` to `false` prevents the generation of these bytes, which can cause issues with some systems.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_44\n\nLANGUAGE: TOML\nCODE:\n```\n[generation]\nallow-x00 = false\n```\n\n----------------------------------------\n\nTITLE: Operation-Level Example Definition in OpenAPI (YAML)\nDESCRIPTION: Shows how to define an example for a request body at the operation level in an OpenAPI schema. It references a schema for a `User` and provides an example of a JSON payload containing `name` and `age`. This allows you to specify example request bodies for API operations directly within the schema.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/openapi/examples.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nrequestBody:\n  content:\n    application/json:\n      schema:\n        $ref: '#/components/schemas/User'\n      example:\n        name: \"John Doe\"\n        age: 30\n```\n\n----------------------------------------\n\nTITLE: after_load_schema Hook - Python\nDESCRIPTION: This hook is called just after a schema instance is created. It takes a loaded schema and allows you to modify it. This is useful, for example, to programmatically add Open API links before tests.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/extending.rst#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\n\n\n    @schemathesis.hook\n    def after_load_schema(\n        context: schemathesis.HookContext,\n        schema: schemathesis.BaseSchema,\n    ) -> None:\n        ...\n```\n\n----------------------------------------\n\nTITLE: Accessing API Operations in Schemathesis Python\nDESCRIPTION: Shows how to access a specific API operation within a Schemathesis schema using path and method for OpenAPI, and type and field name for GraphQL. Provides examples for accessing POST operations on the `/pet` path and the `getBooks` query.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/python.rst#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\noperation = schema[\"/pet\"][\"POST\"]\n```\n\nLANGUAGE: python\nCODE:\n```\noperation = schema[\"Query\"][\"getBooks\"]\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Loading and Execution in Schemathesis (Python)\nDESCRIPTION: This snippet demonstrates how to load a GraphQL schema from a URL, initialize a test runner with the schema, and execute tests using the runner. It showcases the basic steps required to integrate Schemathesis with a GraphQL API endpoint for automated testing.  The example uses the `schemathesis` library.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/CHANGELOG.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\n\n# Load schema\nschema = schemathesis.graphql.from_url(\"http://127.0.0.1:8000/graphql\")\n# Initialize runner\nrunner = schemathesis.runner.from_schema(schema)\n# Emit events\nfor event in runner.execute():\n    ...\n```\n\n----------------------------------------\n\nTITLE: Installing Pytest Dependencies (Shell)\nDESCRIPTION: Installs the necessary Python dependencies for running pytest tests, as specified in the `requirements-pytest.txt` file. This ensures that all required libraries are available before running the tests.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/example/README.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\npython -m pip install -r requirements-pytest.txt\n```\n\n----------------------------------------\n\nTITLE: Running Schemathesis from Command Line\nDESCRIPTION: This command shows how to run Schemathesis against a specified OpenAPI schema URL. The `st run` command initiates the testing process using the provided schema.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ st run https://example.schemathesis.io/openapi.json\n```\n\n----------------------------------------\n\nTITLE: Setting a Random Seed in Schemathesis (TOML)\nDESCRIPTION: This snippet sets a random seed of 42 for reproducible test runs in Schemathesis. Setting the `seed` value to a specific integer ensures that the same sequence of test cases will be generated each time the tests are run, making it easier to debug and reproduce test failures.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_41\n\nLANGUAGE: TOML\nCODE:\n```\n[generation]\nseed = 42\n```\n\n----------------------------------------\n\nTITLE: Customizing JUnit Report Path with --report-junit-path\nDESCRIPTION: This snippet shows how to customize the output path for a specific report type, in this case, JUnit XML, using the `--report-junit-path` option. The argument `openapi.yaml` specifies the OpenAPI definition file.  The JUnit report will be saved to `./jenkins/schemathesis-results.xml`.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/cli.md#_snippet_29\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --report-junit-path ./jenkins/schemathesis-results.xml\n```\n\n----------------------------------------\n\nTITLE: OpenAPI specification for requestBody (YAML)\nDESCRIPTION: This snippet represents an OpenAPI specification snippet defining a request body with content type `application/json` and a schema of type object. Emphasized line is line 7.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/data-generation.rst#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nopenapi: 3.0.0\npaths:\n  /pet:\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n        required: true\n```\n\n----------------------------------------\n\nTITLE: Installing Schemathesis via Docker\nDESCRIPTION: This command shows how to pull the latest stable Docker image for Schemathesis. This allows running Schemathesis in a containerized environment.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker pull schemathesis/schemathesis:stable\n```\n\n----------------------------------------\n\nTITLE: Preserving Bytes in Reports in TOML\nDESCRIPTION: Demonstrates how to retain the exact byte sequences of payloads in reports, encoded as base64. This can be useful for debugging purposes.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[reports]\npreserve-bytes = true\n```\n\n----------------------------------------\n\nTITLE: Open API 2.0 YAML Example\nDESCRIPTION: This YAML configuration shows an example of an Open API 2.0 schema defining a host and a base path.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/python.rst#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nswagger: \"2.0\"\nhost: \"petstore.swagger.io\"\nbasePath: \"/v2\"\n```\n\n----------------------------------------\n\nTITLE: Schema definition example (Shell)\nDESCRIPTION: This snippet demonstrates a schema definition used for positive and negative testing. Schemathesis uses `--data-generation-method` to generate valid or invalid test cases based on the schema.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/data-generation.rst#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n    # Schema\n    {\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": {\"type\": \"string\"}\n      }\n    }\n\n    # Positive testing\n    {\"name\": \"John\"}\n\n    # Negative testing\n    {\"name\": 42}\n```\n\n----------------------------------------\n\nTITLE: Run Example-Based Tests (Console)\nDESCRIPTION: Shows the command-line instruction to run only example-based tests using Schemathesis. The `--phases=examples` option restricts testing to the examples phase.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/openapi/examples.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ st run --phases=examples https://example.schemathesis.io/openapi.json\n```\n\n----------------------------------------\n\nTITLE: Filtering Operations by Path Pattern\nDESCRIPTION: Shows how to filter API operations to be tested based on a path pattern using regular expressions. The `--include-path-regex` flag allows focusing on specific paths, such as those starting with `/users`, for more targeted testing.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/cli.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ st run --include-path-regex '^/users' ...\n```\n\n----------------------------------------\n\nTITLE: Extending CLI with Custom Option - Python\nDESCRIPTION: This code demonstrates how to add a custom CLI option (`--custom-counter`) and an event handler (`EventCounter`) that uses it. The handler increments a counter for each event and adds a summary line with the final count when the test run finishes.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/extending.rst#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom schemathesis import cli, runner\n\n\n    cli.add_option(\"--custom-counter\", type=int)\n\n\n    @cli.handler()\n    class EventCounter(cli.EventHandler):\n        def __init__(self, *args, **params):\n            self.counter = params[\"custom_counter\"] or 0\n\n        def handle_event(self, context, event) -> None:\n            self.counter += 1\n            if isinstance(event, runner.events.Finished):\n                context.add_summary_line(\n                    f\"Counter: {self.counter}\",\n                )\n```\n\n----------------------------------------\n\nTITLE: Standard Schemathesis Testing (Console)\nDESCRIPTION: This command runs Schemathesis tests against the `openapi.yaml` specification with a limit of 10000 examples. This showcases how standard testing might need a large number of examples to uncover performance issues.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/advanced/targeted.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --max-examples=10000\n```\n\n----------------------------------------\n\nTITLE: Generated Test Case Example (JSON)\nDESCRIPTION: Illustrates the JSON payload generated by Schemathesis based on the previous schema. The `name` property uses the provided example value, while `age` and `address` are populated with minimal valid values generated by Schemathesis.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/openapi/examples.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\"name\": \"John\", \"age\": 42, \"address\": \"abc\"}\n```\n\n----------------------------------------\n\nTITLE: Disabling All Checks Except Selected Ones in TOML\nDESCRIPTION: This snippet shows how to disable all checks by default and then enable only specific ones in a Schemathesis TOML configuration file. This allows users to run only the checks they are interested in.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/using/configuration.md#_snippet_8\n\nLANGUAGE: TOML\nCODE:\n```\n[checks]\nenabled = false\n\n# Enable only selected checks\nnot_a_server_error.enabled = true\nstatus_code_conformance.enabled = true\n```\n\n----------------------------------------\n\nTITLE: process_call_kwargs Hook - Python\nDESCRIPTION: This hook allows modifying what keyword arguments will be given to `case.call` in CLI.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/extending.rst#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\n\n\n    @schemathesis.hook\n    def process_call_kwargs(context, case, kwargs):\n        kwargs[\"allow_redirects\"] = False\n```\n\n----------------------------------------\n\nTITLE: Extending Sanitization Configuration in Schemathesis\nDESCRIPTION: This code snippet demonstrates how to extend the existing sanitization configuration. It adds additional keys to sanitize and sensitive markers to the default configuration, allowing for customization without overwriting the default settings.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/sanitizing.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\n\n# Extend existing configuration\nschemathesis.sanitization.extend(\n    keys_to_sanitize=[\"Additional-Key\"],\n    sensitive_markers=[\"password\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling Output Sanitization via Python Configuration in Schemathesis\nDESCRIPTION: This code snippet demonstrates how to disable output sanitization within a Python test by using the `OutputConfig` class.  Setting `sanitize` to `False` in the `OutputConfig` will disable automatic sanitization.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/sanitizing.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom schemathesis import OutputConfig\n\nschema = schemathesis.openapi.from_dict({...}).configure(\n    output=OutputConfig(sanitize=False)\n)\n```\n\n----------------------------------------\n\nTITLE: Exclude POST Method Operations in Schemathesis Python Tests\nDESCRIPTION: This code snippet shows how to exclude all POST method operations from the Schemathesis tests by using the `exclude` method with `method=\"POST\"` argument.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/python.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@schema.exclude(method=\"POST\").parametrize()\ndef test_api(case):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Running Schemathesis with basic auth\nDESCRIPTION: This command executes Schemathesis, authenticating all API requests using HTTP Basic Authentication with the provided username and password.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --auth username:password\n```\n\n----------------------------------------\n\nTITLE: Run Schemathesis without installation using uvx\nDESCRIPTION: This snippet demonstrates how to execute Schemathesis directly without installation using uvx, part of the uv ecosystem. It fetches and runs Schemathesis against a specified OpenAPI schema URL.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/getting-started.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ uvx schemathesis run https://example.schemathesis.io/openapi.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Caching in Schemathesis\nDESCRIPTION: This code snippet demonstrates how to configure the authentication caching time in Schemathesis. The `refresh_interval` parameter specifies the number of seconds for which authentication data will be cached after a non-cached `get` call. Setting `refresh_interval` to None disables caching completely.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/auth.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\n\n\n@schemathesis.auth(refresh_interval=600)\nclass MyAuth:\n    # Here goes your implementation\n    ...\n```\n\n----------------------------------------\n\nTITLE: before_add_examples Hook - Python\nDESCRIPTION: This hook allows adding additional test cases that will be executed in the Hypothesis `explicit` phase.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/extending.rst#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\n    from schemathesis import Case\n\n\n    @schemathesis.hook\n    def before_add_examples(\n        context: schemathesis.HookContext,\n        examples: list[Case],\n    ) -> None:\n        examples.append(Case(operation=context.operation, query={\"foo\": \"bar\"}))\n```\n\n----------------------------------------\n\nTITLE: Schemathesis URI Loading (After)\nDESCRIPTION: Demonstrates the new way to load a schema from a URI. This new method enforces the use of keyword arguments for all parameters except the first one.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/CHANGELOG.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# NOW\nschema = schemathesis.from_uri(\n    \"http://example.com/openapi.json\", base_url=\"http://127.0.0.1:8000/\", method=\"GET\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Another Rate Limit in Schemathesis (TOML)\nDESCRIPTION: This snippet configures a rate limit of 1000 requests per hour for Schemathesis tests. The `rate-limit` setting uses the format '<limit>/<duration>', where '<limit>' is the number of requests and '<duration>' is the time period ('s' for seconds, 'm' for minutes, 'h' for hours).\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_34\n\nLANGUAGE: TOML\nCODE:\n```\nrate-limit = \"1000/h\"\n```\n\n----------------------------------------\n\nTITLE: Maximizing Response Time with Schemathesis (Console)\nDESCRIPTION: This command instructs Schemathesis to run tests against the `openapi.yaml` specification and favor inputs that maximize the `response_time` metric. It's useful for finding performance bottlenecks and denial-of-service vulnerabilities.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/advanced/targeted.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --generation-maximize response_time\n```\n\n----------------------------------------\n\nTITLE: Running Schemathesis with Default Checks (Shell)\nDESCRIPTION: Executes Schemathesis tests for all API operations using the default checks, targeting the specified schema URL. This command demonstrates the basic usage of the `schemathesis-docker` alias.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/example/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nschemathesis-docker run $SCHEMA_URL\n```\n\n----------------------------------------\n\nTITLE: Multiple Examples Output (JSON)\nDESCRIPTION: Shows the JSON payloads generated by Schemathesis based on the previous schema that uses multiple examples.  The name is taken from the `example`, and each age is taken from the `examples` array.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/openapi/examples.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\"name\": \"John\", \"age\": 25, ...}\n{\"name\": \"John\", \"age\": 30, ...}\n{\"name\": \"John\", \"age\": 35, ...}\n```\n\n----------------------------------------\n\nTITLE: Disabling ANSI Color Output in TOML\nDESCRIPTION: Demonstrates how to disable ANSI color output in the Schemathesis CLI. This is useful in environments where color output is not supported or desired.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\ncolor = false\n```\n\n----------------------------------------\n\nTITLE: Storing Test Log to a File (Shell)\nDESCRIPTION: Stores the test log to a file named `cassette.yaml`. This allows replaying the tests later and analyzing the test results using the `--cassette-path` flag.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/example/README.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nschemathesis-docker run --cassette-path=cassette.yaml $SCHEMA_URL\n```\n\n----------------------------------------\n\nTITLE: before_call Hook - Python\nDESCRIPTION: This hook is called right before any test request during CLI runs. It allows modifying generated cases in-place.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/extending.rst#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\n\n\n    @schemathesis.hook\n    def before_call(context, case):\n        case.query = {\"q\": \"42\"}\n```\n\n----------------------------------------\n\nTITLE: Verify Schemathesis Installation\nDESCRIPTION: These commands verify the Schemathesis installation by displaying the version number using both the full command and its alias. This confirms that Schemathesis is correctly installed and accessible.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/getting-started.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ schemathesis --version\n# or using the shorter command alias\n$ st --version\nSchemathesis 4.0.0\n```\n\n----------------------------------------\n\nTITLE: Disabling Security Parameters Generation in Schemathesis (TOML)\nDESCRIPTION: This snippet disables the generation of security parameters during testing in Schemathesis. Setting `with-security-parameters` to `false` prevents Schemathesis from including security-related parameters in test data based on the API's security schemes.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_47\n\nLANGUAGE: TOML\nCODE:\n```\n[generation]\nwith-security-parameters = false\n```\n\n----------------------------------------\n\nTITLE: Disabling Coverage Phase in TOML\nDESCRIPTION: Demonstrates how to disable a testing phase. Replace `<phase>` with `examples`, `coverage`, `fuzzing`, or `stateful` to disable other phases.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_19\n\nLANGUAGE: toml\nCODE:\n```\n[phases.coverage]\nenabled = false\n```\n\n----------------------------------------\n\nTITLE: Modify Body Function - Python\nDESCRIPTION: This Python code snippet defines a function `modify_body` that takes a body and a new field name as input. It creates a new field with the given name and appends it to the query's selections, returning the modified body.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/extending.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef modify_body(body, new_field_name):\n        # Create a new field\n        new_field = ...  # Create a new field node\n        new_field.name.value = new_field_name\n\n        # Add the new field to the query\n        body.definitions[0].selection_set.selections.append(new_field)\n\n        return body\n```\n\n----------------------------------------\n\nTITLE: Disabling Output Truncation in TOML\nDESCRIPTION: Demonstrates how to disable truncation of long output in error messages. This can provide more detailed error information.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n[output]\ntruncate = false\n```\n\n----------------------------------------\n\nTITLE: Multiple Examples in OpenAPI 2.0 (YAML)\nDESCRIPTION: Shows how to define multiple examples in OpenAPI 2.0 using the `x-examples` extension.  The `definitions` section defines a `User` object, and `x-examples` provides a list of example user objects.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/openapi/examples.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndefinitions:\n  User:\n    type: object\n    properties:\n      name:\n        type: string\n    x-examples:\n      - name: \"John Doe\"\n      - name: \"Jane Smith\"\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing Changes\nDESCRIPTION: These shell commands stage the workflow file, commits it with a message, and pushes the new branch to the remote repository. This makes the workflow available for execution within the GitHub Actions environment.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/ci/github-actions.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n$ git add .github/workflows/schemathesis.yml\n$ git commit -m \"Add Schemathesis GitHub Action\"\n$ git push -u origin add-schemathesis-action\n```\n\n----------------------------------------\n\nTITLE: Output Truncation Configuration - Console\nDESCRIPTION: This command enables or disables truncation of schemas and responses in error messages within Schemathesis, which is done to improve readability. Setting it to `false` disables truncation.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_33\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --output-truncate false\n```\n\n----------------------------------------\n\nTITLE: GraphQL Null Values Configuration - Console\nDESCRIPTION: This command disables the use of `null` values for optional arguments in GraphQL queries during API testing with Schemathesis. It is applicable only for GraphQL API testing.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_43\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --generation-graphql-allow-null false\n```\n\n----------------------------------------\n\nTITLE: Flask Route for Unicode Error Handling\nDESCRIPTION: This Python snippet defines a Flask route that simulates improper Unicode handling. It expects a JSON payload with a 'text' field, attempts to encode it as ASCII, and returns a 500 error if a UnicodeEncodeError occurs, demonstrating a common API error.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/ci/github-actions.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n@app.route(\"/improper-unicode-encoding\", methods=[\"POST\"])\ndef improper_unicode_encoding():\n    data = request.json\n    if \"text\" not in data:\n        return jsonify({\"success\": False, \"error\": \"Missing text\"}), 400\n\n    try:\n        # Simulating improper Unicode handling\n        data[\"text\"].encode(\"ascii\")\n        return jsonify({\"success\": True})\n    except UnicodeEncodeError:\n        return jsonify({\"success\": False, \"error\": \"Unicode error\"}), 500\n```\n\n----------------------------------------\n\nTITLE: Base URL Configuration Example\nDESCRIPTION: Illustrates the change in base URL handling in Schemathesis. The example showcases how the full URLs are constructed before and after the change, highlighting the correct URL construction when overriding the base URL with a base path. This change was introduced in version 2.0.0.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/CHANGELOG.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nBase URL in the schema         : http://0.0.0.0:8081/api/v1\n`--base-url` value in CLI      : http://0.0.0.0:8081/api/v2\nFull URLs before this change   : http://0.0.0.0:8081/api/v2/api/v1/users/  # INVALID!\nFull URLs after this change    : http://0.0.0.0:8081/api/v2/users/         # VALID!\n```\n\n----------------------------------------\n\nTITLE: Generated data sample for XML serialization (Python)\nDESCRIPTION: This snippet shows an example of generated data by Schemathesis based on the OpenAPI schema defined for XML serialization.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/data-generation.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n{\"id\": 42}\n```\n\n----------------------------------------\n\nTITLE: Running Schemathesis continuing on failure\nDESCRIPTION: This command executes Schemathesis, continuing to run all test cases within a scenario even after encountering failures. This ensures all potential issues are identified within a test run.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --continue-on-failure\n```\n\n----------------------------------------\n\nTITLE: Formatting State Machine Transition Rules in Python\nDESCRIPTION: This code snippet shows the output of the `APIStateMachine.format_rules` method. It visualizes the possible state transitions in a stateful testing scenario. The output represents the flow of API calls, like POST to create a user, followed by GET to retrieve users, and then DELETE to remove a user.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/CHANGELOG.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nPOST /user\n└── 201\n    ├── GET /users/{ids}\n    └── DELETE /user/{id}\n\nGET /users/{ids}\n└── 200\n    └── PATCH /user\n\nDELETE /user/{id}\n└── 204\n    └── DELETE /user/{id}\n```\n\n----------------------------------------\n\nTITLE: XML Data Example\nDESCRIPTION: Shows an example of serialized XML data.  This XML represents a 'PropertyAsAttribute' with an 'id' attribute set to '42'.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/data-generation.rst#_snippet_13\n\nLANGUAGE: null\nCODE:\n```\n<PropertyAsAttribute id=\"42\"></PropertyAsAttribute>\n```\n\n----------------------------------------\n\nTITLE: Generate Security Parameters - Console\nDESCRIPTION: This command disables the generation of security parameters during testing in Schemathesis. The default is to generate security parameters.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_42\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --generation-with-security-parameters false\n```\n\n----------------------------------------\n\nTITLE: Open API 3.0 YAML Example\nDESCRIPTION: This YAML configuration shows an example of an Open API 3.0 schema defining a servers list with URLs.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/python.rst#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: 3.0.0\nservers:\n  - url: https://petstore.swagger.io/v2\n  - url: http://petstore.swagger.io/v2\n```\n\n----------------------------------------\n\nTITLE: Running Simple HTTP Server\nDESCRIPTION: Changes directory to the docs build folder and starts a simple Python HTTP server, serving the generated documentation.  This allows previewing documentation changes in a web browser.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/CONTRIBUTING.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd docs/\nmake html\npython -m http.server -d _build/html/\n```\n\n----------------------------------------\n\nTITLE: Resulting Payload after Runtime Expression Evaluation\nDESCRIPTION: This example demonstrates the output after evaluating runtime expressions in the requestBody. The values are dynamically retrieved from the response body, replacing the expressions with actual values.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/stateful.rst#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"key\": \"foo\",\n    \"items\": [\"bar\", \"literal\", 42]\n}\n```\n\n----------------------------------------\n\nTITLE: Schema-Level Authentication\nDESCRIPTION: This code snippet showcases the unified Schemathesis custom authentication usage via the `schema.auth` decorator. It replaces the previous `schema.auth.register` and `schema.auth.apply` methods for defining authentication at the schema level.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/CHANGELOG.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\n\nschema = schemathesis.from_uri(\"https://example.schemathesis.io/openapi.json\")\n\n\n# Schema-level auth\n# Before: @schema.auth.register()\n@schema.auth()\nclass MyAuth:\n    ...\n\n\n# Test-level auth\n# Before: @schema.auth.apply(MyAuth)\n@schema.auth(MyAuth)\n@schema.parametrize()\ndef test_api(case):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Running Schemathesis with custom VCR path\nDESCRIPTION: This command saves VCR cassettes to a specified file, `./custom-vcr.yaml`. This provides a custom file path for storing the VCR recordings.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/cli.md#_snippet_29\n\nLANGUAGE: console\nCODE:\n```\n$ st run openapi.yaml --report vcr --report-vcr-path ./custom-vcr.yaml\n```\n\n----------------------------------------\n\nTITLE: Disabling NULL byte generation in Schemathesis CLI\nDESCRIPTION: Demonstrates how to prevent Schemathesis from generating NULL bytes in strings via the command-line interface by setting the `--generation-allow-x00` option to `false`. This is useful for systems that reject inputs containing NULL bytes.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/faq.rst#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n$ st run --generation-allow-x00=false ...\n```\n\n----------------------------------------\n\nTITLE: Using In-Memory Storage for Examples in Schemathesis (TOML)\nDESCRIPTION: This snippet configures Schemathesis to use temporary in-memory storage for examples. Setting `database` to `:memory:` will store generated examples in memory, which is useful for testing or when persistent storage is not required. The examples will be lost when the Schemathesis process ends.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_49\n\nLANGUAGE: TOML\nCODE:\n```\n[generation]\ndatabase = \":memory:\"\n```\n\n----------------------------------------\n\nTITLE: Continuing on Failure in TOML\nDESCRIPTION: Demonstrates how to continue executing all test cases within a scenario, even after encountering failures.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/reference/configuration.md#_snippet_17\n\nLANGUAGE: toml\nCODE:\n```\ncontinue-on-failure = true\n```\n\n----------------------------------------\n\nTITLE: Modifying GraphQL Query with `map_body` Hook (Python)\nDESCRIPTION: This code shows how to use the `map_body` hook in Schemathesis to modify a GraphQL query. It accesses the first node in the query, changes the field name to \"addedViaHook\", and returns the modified query. This allows for customization of the GraphQL query before it is executed. Requires `graphql` library to parse and modify the query.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/extending.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@schema.hook\ndef map_body(context, body):\n    # Access the first node in the GraphQL query\n    node = body.definitions[0].selection_set.selections[0]\n\n    # Change the field name\n    node.name.value = \"addedViaHook\"\n\n    # Return the modified body\n    return body\n```\n\n----------------------------------------\n\nTITLE: Disabling NULL byte generation in Schemathesis Python\nDESCRIPTION: Demonstrates how to prevent Schemathesis from generating NULL bytes in strings using Python code by setting the `allow_x00` parameter in the `GenerationConfig` to `False`. The configuration ensures that no NULL bytes are included in string data generated during testing.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/faq.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\nfrom schemathesis import GenerationConfig\n\nschema = schemathesis.openapi.from_url(\n    \"https://example.schemathesis.io/openapi.json\",\n    generation_config=GenerationConfig(allow_x00=False),\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Headers (Shell)\nDESCRIPTION: Demonstrates how to add custom headers to the API requests during testing, specifically adding an `Authorization` header with a bearer token. This is achieved using the `-H` flag.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/example/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nschemathesis-docker run -H 'Authorization: Bearer SECRET' $SCHEMA_URL\n```\n\n----------------------------------------\n\nTITLE: Single Example Definition in OpenAPI (YAML)\nDESCRIPTION: Defines a single example for a string property using the `example` keyword in an OpenAPI schema. This example shows how to specify a default value for the `name` property within the schema.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/openapi/examples.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nschema:\n  type: object\n  properties:\n    name:\n      type: string\n      example: \"John Doe\"\n```\n\n----------------------------------------\n\nTITLE: Example API Endpoint with Performance Issue (Python)\nDESCRIPTION: This Python code defines an asynchronous API endpoint that introduces a performance issue. The endpoint becomes progressively slower as the number of zeros in the input increases, and fails completely when the number of zeros exceeds 10.  It uses the `asyncio` library for asynchronous operations.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/advanced/targeted.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def performance(request):\n    decoded = await request.json()\n    number = str(decoded).count(\"0\")\n    if number > 0:\n        # Progressively slower as zeros increase\n        await asyncio.sleep(0.01 * number)\n    if number > 10:\n        # Fails with too many zeros\n        raise ServerError()\n    return {\"result\": \"success\"}\n```\n\n----------------------------------------\n\nTITLE: Specific Custom Check Example - Python\nDESCRIPTION: This is an example of a specific custom check. It ensures that when an `item_id` of 42 is used, the response contains the text \"Answer to the Ultimate Question\".\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/extending.rst#_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nimport schemathesis\n\n    ANSWER = \"Answer to the Ultimate Question\"\n\n\n    @schemathesis.check\n    def my_check(ctx, response, case) -> None:\n        if case.path_parameters.get(\"item_id\") == 42 and ANSWER not in response.text:\n            raise AssertionError(\"The ultimate answer not found!\")\n```\n\n----------------------------------------\n\nTITLE: Installing Schemathesis via uv\nDESCRIPTION: This command shows how to install Schemathesis using the uv package installer. uv is a modern and fast package installer for Python.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ uv pip install schemathesis\n```\n\n----------------------------------------\n\nTITLE: Creating Strategies for Operations in Python\nDESCRIPTION: Introduces a shortcut in Python to create strategies for all or a subset of operations within a schema using `schema.as_strategy()` and `schema[\"/path/\"].as_strategy()`. This allows for simplified test case generation based on the API schema.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nschema.as_strategy()\nschema[\"/path/\"].as_strategy()\n```\n\n----------------------------------------\n\nTITLE: JSON Example Validating Against Dog Schema\nDESCRIPTION: Presents a JSON object that is considered valid against the `Dog` schema defined in the previous YAML snippet, but may lead to `oneOf` validation issues due to the absence of property restrictions in the `Cat` schema.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/faq.rst#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bark\": true,\n  \"breed\": \"Dingo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing pre-commit and tox in Python\nDESCRIPTION: This command installs the `pre-commit` and `tox` tools using Python's package manager, pip. These tools are required for code contributions to Schemathesis. `pre-commit` is used for code formatting and linting, while `tox` is used for running tests in isolated environments.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/CONTRIBUTING.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install pre-commit tox\n```\n\n----------------------------------------\n\nTITLE: Installing Development Tools for Schemathesis\nDESCRIPTION: This command installs development dependencies for Schemathesis using pip. The `-e` flag installs the package in editable mode, and `\".[dev]\"` specifies that the dependencies listed under the `dev` extra should be installed. This includes packages needed for documentation and testing.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/CONTRIBUTING.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -e \".[dev]\"\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Dependencies\nDESCRIPTION: Installs dependencies required for building Schemathesis documentation, using pip. The -e flag installs in editable mode, and \".[docs]\" specifies the 'docs' extra dependencies in setup.py.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/CONTRIBUTING.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -e \".[docs]\"\n```\n\n----------------------------------------\n\nTITLE: Schemathesis URI Loading (Before)\nDESCRIPTION: Demonstrates the old way to load a schema from a URI. The arguments were positional and not keyword-only which could lead to confusion.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/CHANGELOG.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# BEFORE\nschema = schemathesis.from_uri(\n    \"http://example.com/openapi.json\", \"http://127.0.0.1:8000/\", \"GET\"\n)\n```\n\n----------------------------------------\n\nTITLE: Cloning the Demo Repository\nDESCRIPTION: These shell commands clone the Schemathesis demo repository to the user's local machine and navigates into the newly created directory.\nSOURCE: https://github.com/schemathesis/schemathesis/blob/master/docs/ci/github-actions.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ git clone https://github.com/YOUR-USERNAME/schemathesis-demo.git\n$ cd schemathesis-demo\n```"
  }
]