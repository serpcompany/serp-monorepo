[
  {
    "owner": "santiment",
    "repo": "sanpy",
    "content": "TITLE: Fetching metric data by slug\nDESCRIPTION: This Python code uses the `san.get` function to fetch the `price_usd` metric for the `bitcoin` slug between the specified dates, with a 1-day interval.  The result is a pandas DataFrame.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport san\nsan.get(\n  \"price_usd\",\n  slug=\"bitcoin\",\n  from_date=\"2022-01-01\",\n  to_date=\"2022-01-05\",\n  interval=\"1d\"\n)\n```\n\n----------------------------------------\n\nTITLE: Fetching Price Data with sanpy in Python\nDESCRIPTION: This code retrieves price data using `san.get(\"prices\", ...)` for a specified slug, date range, and interval.  Dependencies: `san`. Input: metric, slug, from_date, to_date, interval. Output: time series of the specified price data.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nsan.get(\n    \"prices\",\n    slug=\"santiment\",\n    from_date=\"2018-06-01\",\n    to_date=\"2018-06-05\",\n    interval=\"1d\"\n)\n```\n\n----------------------------------------\n\nTITLE: Executing Arbitrary GraphQL Query with Sanpy\nDESCRIPTION: This code snippet demonstrates how to execute a raw GraphQL query using the `san.graphql.execute_gql` function. It fetches the 'price_usd' metric for 'ethereum' and 'bitcoin' over a specified time period, then parses the result into a Pandas DataFrame.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport san\nimport pandas as pd\n\nresult = san.graphql.execute_gql(\"\"\"\n{\n  getMetric(metric: \\\"price_usd\\\") {\n    timeseriesDataPerSlug(\n      selector: {slugs: [\\\"ethereum\\\", \\\"bitcoin\\\"]}\n      from: \\\"2022-05-05T00:00:00Z\\\"\n      to: \\\"2022-05-08T00:00:00Z\\\"\n      interval: \\\"1d\\\") {\n        datetime\n        data{\n          value\n          slug\n        }\n    }\n  }\n}\n\"\"\")\n\ndata = result['getMetric']['timeseriesDataPerSlug']\nrows = []\nfor datetime_point in data:\n    row = {'datetime': datetime_point['datetime']}\n    for slug_data in datetime_point['data']:\n        row[slug_data['slug']] = slug_data['value']\n    rows.append(row)\n\ndf = pd.DataFrame(rows)\ndf.set_index('datetime', inplace=True)\n```\n\n----------------------------------------\n\nTITLE: Batching Queries with Sanpy Batch Class\nDESCRIPTION: This code demonstrates how to batch multiple queries using the `san.Batch` class. It adds two `san.get` calls to the batch and then executes them using `batch.execute()`. The result is a list containing the results of each query in the batch.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom san import Batch\n\nbatch = Batch()\n\nbatch.get(\n    \"daily_active_addresses\",\n    slug=\"santiment\",\n    from_date=\"2018-06-01\",\n    to_date=\"2018-06-05\",\n    interval=\"1d\"\n)\n\nbatch.get(\n    \"transaction_volume\",\n    slug=\"santiment\",\n    from_date=\"2018-06-01\",\n    to_date=\"2018-06-05\",\n    interval=\"1d\"\n)\n\n[daa, trx_volume] = batch.execute()\n```\n\n----------------------------------------\n\nTITLE: Batching Queries with Sanpy AsyncBatch Class\nDESCRIPTION: This code demonstrates how to batch multiple queries using the `san.AsyncBatch` class. It adds `san.get` and `san.get_many` calls to the batch and then executes them concurrently using `batch.execute()`.  The `max_workers` parameter controls the level of concurrency. AsyncBatch improves performance by making calls in different HTTP requests which prevents complexity issues.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom san import AsyncBatch\n\nbatch = AsyncBatch()\n\nbatch.get(\n    \"daily_active_addresses\",\n    slug=\"santiment\",\n    from_date=\"2018-06-01\",\n    to_date=\"2018-06-05\",\n    interval=\"1d\"\n)\nbatch.get_many(\n    \"daily_active_addresses\",\n    slugs=[\"bitcoin\", \"ethereum\"],\n    from_date=\"2018-06-01\",\n    to_date=\"2018-06-05\",\n    interval=\"1d\"\n)\n[daa, daa_many] = batch.execute(max_workers=10)\n```\n\n----------------------------------------\n\nTITLE: Fetching OHLCV Data in Python\nDESCRIPTION: This code snippet demonstrates how to retrieve Open, High, Low, Close prices, Volume, and Marketcap data using `san.get(\"ohlcv/santiment\", ...)` for a specific slug, date range, and interval.  Dependencies: `san`. Input: metric, slug, from_date, to_date, interval. Output: time series data containing OHLCV metrics.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nsan.get(\n    \"ohlcv/santiment\",\n    from_date=\"2018-06-01\",\n    to_date=\"2018-06-05\",\n    interval=\"1d\"\n)\n```\n\n----------------------------------------\n\nTITLE: Fetching metric data by selector\nDESCRIPTION: This example fetches `dev_activity` data for the 'google' organization using the `selector` parameter.  `selector` is useful when metrics are associated to something else than a slug, like a Github organization.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport san\nsan.get(\n  \"dev_activity\",\n  selector={\"organization\": \"google\"},\n  from_date=\"2022-01-01\",\n  to_date=\"2022-01-05\",\n  interval=\"1d\"\n)\n```\n\n----------------------------------------\n\nTITLE: Get Top Transfers for a Project - Python\nDESCRIPTION: Retrieves the top transfers for a specified project using the `san.get` function.  It fetches data for the last 30 days. The `slug` parameter specifies the project. Returns a pandas DataFrame.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nsan.get(\n    \"top_transfers\",\n    slug=\"santiment\",\n    from_date=\"utc_now-30d\",\n    to_date=\"utc_now\",\n)\n```\n\n----------------------------------------\n\nTITLE: Get Historical Balance in Python\nDESCRIPTION: This code retrieves the historical balance for a given address using the `san.get(\"historical_balance\", ...)` function. Dependencies: `san`. Input: metric, slug, address, from_date, to_date, interval. Output: time series data containing historical balance.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nsan.get(\n    \"historical_balance\",\n    slug=\"santiment\",\n    address=\"0x1f3df0b8390bb8e9e322972c5e75583e87608ec2\",\n    from_date=\"2019-04-18\",\n    to_date=\"2019-04-23\",\n    interval=\"1d\"\n)\n```\n\n----------------------------------------\n\nTITLE: Fetching Timeseries Metric Data with Sanpy\nDESCRIPTION: This code snippet fetches timeseries data for a specific metric and slug using the `san.get()` function. It specifies the metric name, slug, start date, end date, and interval. The result is a Pandas DataFrame containing the requested data.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport san\n\nsan.get(\n    \"daily_active_addresses\",\n    slug=\"santiment\",\n    from_date=\"2018-06-01\",\n    to_date=\"2018-06-05\",\n    interval=\"1d\"\n)\n```\n\n----------------------------------------\n\nTITLE: Collecting Ethereum Price Data with Sanpy\nDESCRIPTION: This snippet fetches Ethereum price data from the Santiment API using san.get(). It retrieves the closing price in USD ('closePriceUsd') for the period between '2020-02-01' and '2020-05-01' with a '1d' interval. The result is stored in a pandas DataFrame named 'prices', and the 'closePriceUsd' column is renamed to 'ethereum'.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/triple_barrier.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nprices = pd.DataFrame()\nprices = pd.DataFrame(san.get(\"ohlcv/ethereum\", from_date=\"2020-02-01\", to_date=\"2020-05-01\", interval=\"1d\").closePriceUsd)\nprices.rename(columns={\"closePriceUsd\": \"ethereum\"}, inplace=True)\n```\n\n----------------------------------------\n\nTITLE: Get Top Transfers for a Project with Address - Python\nDESCRIPTION: Retrieves top transfers filtered by a specific address and transaction type for a project. Uses `san.get` to fetch the data. The `address` and `transaction_type` parameters filter the results.  Returns a pandas DataFrame.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nsan.get(\n    \"top_transfers\",\n    slug=\"santiment\",\n    address=\"0x26e068650ae54b6c1b149e1b926634b07e137b9f\",\n    transaction_type=\"ALL\",\n    from_date=\"utc_now-30d\",\n    to_date=\"utc_now\",\n)\n```\n\n----------------------------------------\n\nTITLE: Get Emerging Trends - Python\nDESCRIPTION: Fetches emerging trends for a given time period using the `san.get` function.  The `from_date`, `to_date`, `interval`, and `size` parameters define the query. Returns a pandas DataFrame.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nsan.get(\n    \"emerging_trends\",\n    from_date=\"2019-07-01\",\n    to_date=\"2019-07-02\",\n    interval=\"1d\",\n    size=5\n)\n```\n\n----------------------------------------\n\nTITLE: Collecting OHLCV Data\nDESCRIPTION: Retrieves OHLCV data for Bitcoin and Ethereum using the san.get() function. It calculates the daily active addresses performance for Ethereum and a rolling standard deviation.  The OHLCV data is used to create a price dataframe for event study.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/event_study.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndata = san.get(\"ohlcv/bitcoin\")\ndata[\"bitcoin\"] = data.closePriceUsd\ndata[\"ETH_close\"] = san.get(\"ohlcv/ethereum\").closePriceUsd\ndata[\"daily_active_addresses_ETH\"] = san.get(\"daily_active_addresses/ethereum\")\n\ndata[\"daa_performance\"] = np.log(data[\"daily_active_addresses_ETH\"].pct_change() + 1)\ndata[\"sd_rolling\"] = data[\"daa_performance\"].rolling(100).std()\n\nprice = data[[\"ETH_close\", \"bitcoin\"]]\nprice = price.tz_convert(None)  # Event Study needs date instead of datetime\n```\n\n----------------------------------------\n\nTITLE: Calculating Metric Complexity using sanpy in Python\nDESCRIPTION: This code demonstrates how to fetch the complexity of a specific metric using the `san.metric_complexity()` function. It requires the metric name, a start date, an end date, and an interval as input.  Dependencies: `san`. Input: metric name, from_date, to_date, interval. Output: The metric complexity is returned.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nsan.metric_complexity(\n    metric=\"price_usd\",\n    from_date=\"2020-01-01\",\n    to_date=\"2020-02-20\",\n    interval=\"1d\"\n)\n```\n\n----------------------------------------\n\nTITLE: Building Portfolio for Date Range in Python\nDESCRIPTION: This snippet builds the portfolio for a specified date range using the `build_portfolio` method. The `start_dt` and `end_dt` parameters define the date range for which the portfolio is constructed.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/Strategy.ipynb#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nindex.build_portfolio(\"2021-01-01\", \"2021-01-03\")\n```\n\n----------------------------------------\n\nTITLE: Adding Rebalance Signals to Strategy in Python\nDESCRIPTION: This snippet adds rebalance signals to the strategy using the `add` method on the `signals` object. The signal type is specified as 'r' for rebalance, and the `rebalance_signals` DataFrame is passed as the signal data. A signal name is also given. The added signals can then be accessed using `index.signals.rebalance_signals`.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/Strategy.ipynb#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Add rebalance signals\nindex.signals.add(\"r\", rebalance_signals, signal_name=\"rebalance\")\nindex.signals.rebalance_signals\n```\n\n----------------------------------------\n\nTITLE: Adding Sell Signals to Strategy in Python\nDESCRIPTION: This snippet adds sell signals to the strategy using the `add` method on the `signals` object. The signal type is specified as 's' for sell, and the DataFrames `sell_signals_1` and `sell_signals_2` are passed as the signal data. A signal name is also given for each. The added signals can then be accessed using `index.signals.sell_signals`.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/Strategy.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Add sell signals to the index\nindex.signals.add(\"s\", sell_signals_1, signal_name=\"sell_1\")\nindex.signals.add(\"s\", sell_signals_2, signal_name=\"sell_2\")\nindex.signals.sell_signals\n```\n\n----------------------------------------\n\nTITLE: Plot performance data\nDESCRIPTION: Plots the performance of the portfolio price over time. This visualizes the portfolio's growth or decline during the backtesting period.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/Backtest.ipynb#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nbacktest.portfolio_price[\"performance\"].plot()\n```\n\n----------------------------------------\n\nTITLE: Fetching metric data for multiple slugs\nDESCRIPTION: This Python code demonstrates fetching the `price_usd` metric for multiple slugs (`bitcoin`, `ethereum`, `tether`) using the `san.get_many` function. The returned data frame contains a column for each slug.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport san\nsan.get_many(\n  \"price_usd\",\n  slugs=[\"bitcoin\", \"ethereum\", \"tether\"],\n  from_date=\"2022-01-01\",\n  to_date=\"2022-01-05\",\n  interval=\"1d\"\n)\n```\n\n----------------------------------------\n\nTITLE: Event Study Execution\nDESCRIPTION: Formats the sell signals using the signals_format function and executes the event study using the event_study function. It takes price data, formatted signals, and a starting point as input.  The starting_point parameter sets the period considered prior to the signal.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/event_study.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Helper function to get the signals in the right format:\nsignals = signals_format(data[\"sell\"], \"ETH_close\")\n\n# Calling the event study:\nevent_study(price, signals, starting_point=30)\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Query and Setting Index with Sanpy\nDESCRIPTION: This code snippet executes an SQL query and sets the 'dt' column as the index of the resulting Pandas DataFrame using the `set_index` parameter of the `san.execute_sql` function. This demonstrates how to manipulate the output DataFrame directly within the query execution.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport san\nsan.execute_sql(query=\"SELECT * FROM daily_metrics_v2 LIMIT 5\", set_index=\"dt\")\n```\n\n----------------------------------------\n\nTITLE: Fetching Project Fields with GraphQL using Sanpy\nDESCRIPTION: This code snippet retrieves a specific set of fields (slug, name, ticker, infrastructure, mainContractAddress, twitterLink) for a project using a GraphQL query executed with `san.graphql.execute_gql`. The results are then displayed in a Pandas DataFrame.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport san\nimport pandas as pd\n\nresult = san.graphql.execute_gql(\"\"\"{ \n  projectBySlug(slug: \\\"santiment\\\") {\n    slug\n    name\n    ticker\n    infrastructure\n    mainContractAddress\n    twitterLink\n  }\n}\"\"\")\n\npd.DataFrame(result[\"projectBySlug\"], index=[0])\n```\n\n----------------------------------------\n\nTITLE: Transforming Retrieved Data in Python\nDESCRIPTION: This code shows how to apply transformations to retrieved data using the `transform` parameter in the `san.get()` function.  It shows an example of using moving average transform. Dependencies: `san`. Input: metric name, slug, from_date, to_date, interval, transform, aggregation. Output: Returns time series data with the transformation applied.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nsan.get(\n  \"price_usd\",\n  slug=\"santiment\",\n  from_date=\"2020-06-01\",\n  to_date=\"2021-06-05\",\n  interval=\"1d\",\n  transform={\"type\": \"moving_average\", \"moving_average_base\": 100},\n  aggregation=\"LAST\"\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Rate Limit Exceptions in Python\nDESCRIPTION: This code snippet demonstrates how to handle rate limit exceptions when using the `san` library. It retrieves time series data, catches exceptions, checks if the exception is due to rate limiting, and sleeps for the remaining time until the rate limit expires.  Dependencies: `time`, `san`.  Input: None.  Output: Prints the sleep duration to console, if rate limited.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nimport time\nimport san\n\ntry:\n  san.get(\n    \"price_usd\",\n    slug=\"santiment\",\n    from_date=\"utc_now-30d\",\n    to_date=\"utc_now\",\n    interval=\"1d\"\n  )\nexcept Exception as e:\n  if san.is_rate_limit_exception(e):\n    rate_limit_seconds = san.rate_limit_time_left(e)\n    print(f\"Will sleep for {rate_limit_seconds}\")\n    time.sleep(rate_limit_seconds)\n```\n\n----------------------------------------\n\nTITLE: Listing Available Metrics for a Slug with Sanpy\nDESCRIPTION: This code snippet retrieves a list of available metrics for a specific slug (e.g., \"santiment\") using the `san.available_metrics_for_slug()` function. This allows filtering the metrics relevant to a particular asset.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nsan.available_metrics_for_slug(\"santiment\")\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Query with Sanpy\nDESCRIPTION: This code snippet executes an SQL query against the Santiment Queries database using `san.execute_sql`. It retrieves the first 5 rows from the `daily_metrics_v2` table and returns the result as a Pandas DataFrame. An API key is required for successful execution.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport san\nsan.execute_sql(query=\"SELECT * FROM daily_metrics_v2 LIMIT 5\")\n```\n\n----------------------------------------\n\nTITLE: Fetching Timeseries Metric Data with Default Parameters\nDESCRIPTION: This code snippet demonstrates using the `san.get()` function with default parameters to fetch timeseries data. By omitting the `from_date`, `to_date`, and `interval` parameters, the function returns the last year of data with a 1-day interval.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nsan.get(\"daily_active_addresses\", slug=\"santiment\")\nsan.get(\"price_usd\", slug=\"santiment\")\n```\n\n----------------------------------------\n\nTITLE: Fetching trade volume by DEX\nDESCRIPTION: This snippet fetches the `total_trade_volume_by_dex` metric for `ethereum` on `UniswapV2`. It requires a Santiment API PRO key.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport san\n# This requires Santiment API PRO apikey configured\nsan.get(\n  \"total_trade_volume_by_dex\",\n  selector={\"slug\": \"ethereum\", \"label\": \"decentralized_exchange\", \"owner\": \"UniswapV2\"},\n  from_date=\"2022-01-01\",\n  to_date=\"2022-01-05\",\n  interval=\"1d\"\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Portfolio in Python\nDESCRIPTION: This snippet accesses the built portfolio, which presumably contains the asset allocations for the specified date range after running `index.build_portfolio()`. The portfolio data would be stored in `index.portfolio`.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/Strategy.ipynb#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nindex.portfolio\n```\n\n----------------------------------------\n\nTITLE: Adding Periodic Rebalance in Python\nDESCRIPTION: This snippet adds a periodic rebalancing schedule to the strategy using the `add_periodic_rebalance` method. The first parameter is a cron expression specifying the rebalance schedule.  `skip_rebalance_on_init` determines if a rebalance should occur upon initialization.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/Strategy.ipynb#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# add default monthly rebalancing\nindex.add_periodic_rebalance(\"0 0 1 * *\", skip_rebalance_on_init=False)\n```\n\n----------------------------------------\n\nTITLE: Listing Available Metrics with Sanpy\nDESCRIPTION: This code snippet retrieves a list of all available metrics from the Santiment API using the `san.available_metrics()` function.  The returned value is a list of strings representing the available metrics.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nsan.available_metrics()\n```\n\n----------------------------------------\n\nTITLE: Access net returns data\nDESCRIPTION: Retrieves the net returns data calculated by the Backtest instance. This data shows the returns of the portfolio at each step.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/Backtest.ipynb#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nbacktest.net_returns\n```\n\n----------------------------------------\n\nTITLE: Create Prices DataFrame\nDESCRIPTION: Creates a Pandas DataFrame representing the prices of different assets over time. It defines the asset prices for specific dates, setting the 'dt' column as the index. The 'dt' column is converted to datetime objects before setting it as the index.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/Backtest.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nprices_df = pd.DataFrame(\n    {\n        \"dt\": [\n            \"2020-01-01\",\n            \"2020-01-01\",\n            \"2020-01-01\",\n            \"2020-01-02\",\n            \"2020-01-02\",\n            \"2020-01-02\",\n            \"2020-01-03\",\n            \"2020-01-03\",\n            \"2020-01-03\",\n            \"2020-01-04\",\n            \"2020-01-04\",\n            \"2020-01-04\",\n            \"2020-01-05\",\n            \"2020-01-05\",\n            \"2020-01-05\",\n        ],\n        \"asset\": [\n            \"eth\",\n            \"uni\",\n            \"maker\",\n        ]\n        * 5,\n        \"price\": [\n            1000,\n            100,\n            500,\n            1500,\n            100,\n            500,\n            1800,\n            80,\n            500,\n            2250,\n            100,\n            500,\n            2250,\n            100,\n            500,\n        ],\n    }\n).set_index(\"dt\")\n\nprices_df.set_index(pd.to_datetime(prices_df.index), inplace=True)\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries\nDESCRIPTION: Imports necessary libraries including datetime, numpy, san, and specific modules from san.extras for event study analysis.  These modules provide functionalities for data retrieval, manipulation, and statistical analysis.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/event_study.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\nimport numpy as np\nimport san\n\nfrom san.extras.event_study import event_study, signals_format, hypothesis_test\n```\n\n----------------------------------------\n\nTITLE: Create Trades DataFrame\nDESCRIPTION: Creates a Pandas DataFrame representing the trades executed on specific dates. The 'dt' column represents the date of the trade and is set as the index. The 'dt' column is converted to datetime objects before being set as the index.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/Backtest.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntrades_df = pd.DataFrame({\"dt\": [\"2020-01-04\"] * 5}).set_index(\"dt\")\n\ntrades_df.set_index(pd.to_datetime(trades_df.index), inplace=True)\n```\n\n----------------------------------------\n\nTITLE: Reading API key from the environment in Python\nDESCRIPTION: This Python code snippet demonstrates how `sanpy` reads the API key from the `SANPY_APIKEY` environment variable after the `san` module is imported.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport san\n>>> san.ApiConfig.api_key\n'my_apikey'\n```\n\n----------------------------------------\n\nTITLE: Manually setting the API key\nDESCRIPTION: This Python code snippet shows how to manually configure the Santiment API key using the `san.ApiConfig.api_key` attribute. This method overrides any key set via environment variable.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport san\nsan.ApiConfig.api_key = \"my_apikey\"\n```\n\n----------------------------------------\n\nTITLE: Setting API key from environment variable\nDESCRIPTION: This shell command sets the Santiment API key as an environment variable, which `sanpy` automatically reads during module loading.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nexport SANPY_APIKEY=\"my_apikey\"\n```\n\n----------------------------------------\n\nTITLE: Fetching Metric Metadata with Sanpy\nDESCRIPTION: This code snippet fetches metadata for a specific metric (e.g., \"nvt\") using the `san.metadata()` function.  It specifies the metric and a list of metadata fields to retrieve. The output is a dictionary containing the requested metadata.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nsan.metadata(\n    \"nvt\",\n    arr=[\"availableSlugs\", \"defaultAggregation\", \"humanReadableName\", \"isAccessible\", \"isRestricted\", \"restrictedFrom\", \"restrictedTo\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Setting the start date\nDESCRIPTION: Defines the start date for the backtest. This date will be used to initialize the backtest and filter the data.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/Backtest.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nSTART_DT = \"2020-01-01\"\n```\n\n----------------------------------------\n\nTITLE: Fetching non-timeseries data (all projects)\nDESCRIPTION: This Python code retrieves a list of all available projects using `san.get` with the `projects/all` argument. This fetches non-timeseries data.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport san\nsan.get(\"projects/all\")\n```\n\n----------------------------------------\n\nTITLE: Create Portfolio DataFrame\nDESCRIPTION: Creates a Pandas DataFrame representing the portfolio composition over time.  It defines the asset shares for specific dates, which are then set as the index.  The 'dt' column is converted to datetime objects before being set as the index.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/Backtest.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nportfolio_df = pd.DataFrame(\n    {\n        \"dt\": [\n            \"2020-01-01\",\n            \"2020-01-01\",\n            \"2020-01-02\",\n            \"2020-01-02\",\n            \"2020-01-03\",\n            \"2020-01-03\",\n            \"2020-01-04\",\n            \"2020-01-04\",\n            \"2020-01-04\",\n            \"2020-01-05\",\n            \"2020-01-05\",\n            \"2020-01-05\",\n        ],\n        \"asset\": [\"eth\", \"uni\", \"eth\", \"uni\", \"eth\", \"uni\", \"eth\", \"uni\", \"maker\", \"eth\", \"uni\", \"maker\"],\n        \"share\": [0.5, 0.5, 0.6, 0.4, 0.7, 0.3, 0.5, 0.25, 0.25, 0.5, 0.25, 0.25],\n    }\n).set_index(\"dt\")\nportfolio_df.set_index(pd.to_datetime(portfolio_df.index), inplace=True)\n\nportfolio_df\n```\n\n----------------------------------------\n\nTITLE: Creating Signal Dataframe for Sanpy Analysis\nDESCRIPTION: This snippet creates a pandas DataFrame called 'signals' to represent trading signals. It initializes the DataFrame with 'slug', 'side', and 'datetime' columns, then populates the 'datetime' column with specific dates. The 'slug' column is set to 'ethereum'. Finally, it sets 'datetime' as the index of the DataFrame.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/triple_barrier.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsignals = pd.DataFrame(pd.DataFrame(columns=[\"slug\", \"side\", \"datetime\"]))\nsignals[\"datetime\"] = pd.DatetimeIndex(\n    [\n        \"2020-02-06\",\n        \"2020-02-08\",\n        \"2020-02-13\",\n        \"2020-02-15\",\n        \"2020-04-07\",\n        \"2020-04-08\",\n        \"2020-04-19\",\n        \"2020-04-26\",\n        \"2020-05-19\",\n    ],\n    dtype=\"datetime64[ns]\",\n    name=\"datetime\",\n    freq=None,\n)\nsignals[\"slug\"] = \"ethereum\"\nsignals.set_index(\"datetime\", inplace=True)\n```\n\n----------------------------------------\n\nTITLE: Creating Buy Signals DataFrame in Python\nDESCRIPTION: This snippet creates a Pandas DataFrame to represent buy signals. It includes columns for date ('dt'), asset ('asset'), trade percentage ('trade_percantage'), and decision delay ('decision_delay'). The 'trade_percantage' column is populated based on the asset type, and the 'decision_delay' is set using `datetime.timedelta`.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/Strategy.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nbuy_signals = pd.DataFrame(\n    {\"dt\": [\"2021-01-05\", \"2021-01-05\", \"2021-02-10\", \"2021-03-10\"], \"asset\": [\"ethereum\", \"uniswap\", \"ethereum\", \"uniswap\"]}\n)\n\nbuy_signals[\"trade_percantage\"] = buy_signals.apply(lambda x: 0.5 if x[\"asset\"] == \"ethereum\" else 0.8, axis=1)\nbuy_signals[\"decision_delay\"] = datetime.timedelta(days=2)\n```\n\n----------------------------------------\n\nTITLE: Executing Parameterized SQL Query with Sanpy\nDESCRIPTION: This code snippet demonstrates how to execute a parameterized SQL query using `san.execute_sql`. It uses named parameters (enclosed in double curly brackets) within the query and provides a dictionary of parameter values. This allows for dynamic query construction.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nsan.execute_sql(query=\"\"\"\n  SELECT\n    get_metric_name(metric_id) AS metric,\n    get_asset_name(asset_id) AS asset,\n    dt,\n    argMax(value, computed_at)\n  FROM daily_metrics_v2\n  WHERE\n    asset_id = get_asset_id({{slug}}) AND\n    metric_id = get_metric_id({{metric}}) AND\n    dt >= now() - INTERVAL {{last_n_days}} DAY\n  GROUP BY dt, metric_id, asset_id\n  ORDER BY dt ASC\n\"\"\",\nparameters={'slug': 'bitcoin', 'metric': 'daily_active_addresses', 'last_n_days': 7},\nset_index=\"dt\")\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries for Sanpy Triple Barrier Analysis\nDESCRIPTION: This snippet imports necessary libraries: san for data retrieval, pandas for data manipulation, seaborn for plotting, and the evaluate and plot functions from san.extras.triple_barrier for performing the triple barrier method and visualizing results. These libraries are essential for fetching financial data, creating signals, evaluating their performance using the triple barrier method, and generating visualizations.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/triple_barrier.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport san\nimport pandas as pd\nimport seaborn as sns\nfrom san.extras.triple_barrier import evaluate, plot\n\nsns.set()\n```\n\n----------------------------------------\n\nTITLE: Adding Reserve Assets to Strategy in Python\nDESCRIPTION: This snippet demonstrates how to add a reserve asset to the strategy's asset list. The `add` method is used to specify the asset and the date range during which it is considered a reserve asset. The asset type is set to 'r' for reserve. After adding the asset, `index.assets.reserve_assets` can be used to view the updated list of reserve assets.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/Strategy.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# add reserve asset\nindex.assets.add(assets={\"dai\": [\"2021-01-01\", \"2021-01-04\"]}, assets_type=\"r\")\nindex.assets.reserve_assets\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with Incomplete Data Flag in Python\nDESCRIPTION: This code snippet shows how to include incomplete data for daily metrics by using the `include_incomplete_data=True` flag in the `san.get()` function. Dependencies: `san`. Input: metric name, from_date, to_date, interval, include_incomplete_data. Output: Returns time series data including the incomplete current day data point.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nsan.get(\n  \"daily_active_addresses/bitcoin\",\n  from_date=\"utc_now-3d\",\n  to_date=\"utc_now\",\n  interval=\"1d\",\n  include_incomplete_data=True\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Time Constants for Triple Barrier Evaluation\nDESCRIPTION: This snippet defines the time window used for signal evaluation.  It establishes constants for the from date, to date, and resolution to be used when analyzing the signals.  These variables are not directly used within the shown code snippets, implying they are consumed elsewhere within the broader analysis.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/triple_barrier.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nFROM_TIMESTAMP = \"2020-01-01\"\nTO_TIMESTAMP = \"2020-03-20\"\nRESOLUTION = \"1d\"\n```\n\n----------------------------------------\n\nTITLE: Get Ethereum Spent Over Time in Python\nDESCRIPTION: This code retrieves the amount of ETH spent over time from a project's team wallets using `san.get(\"eth_spent_over_time\", ...)` function. Dependencies: `san`. Input: metric, slug, from_date, to_date, interval. Output: time series data containing ETH spent over time.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nsan.get(\n    \"eth_spent_over_time\",\n    slug=\"santiment\",\n    from_date=\"2019-04-18\",\n    to_date=\"2019-04-23\",\n    interval=\"1d\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Prices DataFrame in Python\nDESCRIPTION: This snippet creates a Pandas DataFrame to represent asset prices. It uses `itertools.product` to generate all combinations of dates and assets, sets the 'dt' column as the index, and assigns a 'price' value for each combination.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/Strategy.ipynb#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nprices = pd.DataFrame(\n    list(itertools.product([\"2021-01-01\", \"2021-01-02\", \"2021-01-03\"], [\"ethereum\", \"dai\", \"uniswap\"])), columns=[\"dt\", \"asset\"]\n).set_index(\"dt\")\nprices[\"price\"] = [4000, 1, 100, 4100, 1, 90, 4200, 1, 110]\n```\n\n----------------------------------------\n\nTITLE: Defining Buy/Sell Signals\nDESCRIPTION: Defines buy and sell signals based on the daily active addresses (DAA) performance relative to its rolling standard deviation.  The buy signal triggers when DAA performance is below two standard deviations, and the sell signal triggers when it's above two standard deviations.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/event_study.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Defining signals:\n# Buy Signal: Is the current trend lower than two standard deviations?\ndata[\"buy\"] = data[\"daa_performance\"] < (data[\"sd_rolling\"] * (-1) * 2)\n# Sell Signal: Is the current trend higher than two standard deviations?\ndata[\"sell\"] = data[\"daa_performance\"] > (data[\"sd_rolling\"] * 2)\n```\n\n----------------------------------------\n\nTITLE: Creating Sell Signals DataFrames in Python\nDESCRIPTION: This snippet creates two Pandas DataFrames (`sell_signals_1` and `sell_signals_2`) to represent sell signals.  Each DataFrame includes columns for date ('dt') and asset ('asset'). These DataFrames can then be used to add sell signals to the index.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/Strategy.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsell_signals_1 = pd.DataFrame({\"dt\": [\"2021-02-05\", \"2021-03-15\"], \"asset\": [\"ethereum\", \"uniswap\"]})\n\nsell_signals_2 = pd.DataFrame({\"dt\": [\"2021-03-01\"], \"asset\": [\"uniswap\"]})\n```\n\n----------------------------------------\n\nTITLE: Get Ethereum Top Transactions in Python\nDESCRIPTION: This code retrieves the top Ethereum transactions for a project's team wallets using `san.get(\"eth_top_transactions\", ...)` function.  Dependencies: `san`. Input: metric, slug, from_date, to_date, limit, transaction_type. Output: time series data containing top ethereum transactions.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nsan.get(\n    \"eth_top_transactions\",\n    slug=\"santiment\",\n    from_date=\"2019-04-18\",\n    to_date=\"2019-04-30\",\n    limit=5,\n    transaction_type=\"ALL\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Buy Signals to Strategy in Python\nDESCRIPTION: This snippet adds buy signals to the strategy using the `add` method on the `signals` object. The signal type is specified as 'b' for buy, and the `buy_signals` DataFrame is passed as the signal data. A signal name is also given.  The added signals can then be accessed using `index.signals.buy_signals`.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/Strategy.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Add buy signals to the index\nindex.signals.add(\"b\", buy_signals, signal_name=\"buy\")\nindex.signals.buy_signals\n```\n\n----------------------------------------\n\nTITLE: Removing Common Assets from Strategy in Python\nDESCRIPTION: This snippet demonstrates how to remove an asset from the list of common assets for a specific date range using the `remove` method.  The asset and date range are specified, and then `index.assets.common_assets` is used to view the updated list of common assets after the removal.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/Strategy.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Remove uniswap for 2021-01-03 - 2021-01-05\nindex.assets.remove({\"uniswap\": [\"2021-01-03\", \"2021-01-04\"]})\nindex.assets.common_assets\n```\n\n----------------------------------------\n\nTITLE: Create Fees DataFrame\nDESCRIPTION: Creates a Pandas DataFrame representing the transaction fees over time.  The 'value' column contains the fee amount for each date. The 'dt' column is converted to datetime objects before being set as the index.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/Backtest.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfees_df = pd.DataFrame(\n    {\n        \"dt\": [\"2020-01-01\", \"2020-01-02\", \"2020-01-03\", \"2020-01-04\", \"2020-01-05\"],\n        \"value\": [5] * 5,\n    }\n).set_index(\"dt\")\nfees_df.set_index(pd.to_datetime(fees_df.index), inplace=True)\n```\n\n----------------------------------------\n\nTITLE: Get Token Top Transactions in Python\nDESCRIPTION: This code retrieves the top transactions for a project's token using the `san.get(\"token_top_transactions\", ...)` function.  Dependencies: `san`. Input: metric, slug, from_date, to_date, limit. Output: time series data containing top token transactions.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nsan.get(\n    \"token_top_transactions\",\n    slug=\"santiment\",\n    from_date=\"2019-04-18\",\n    to_date=\"2019-04-30\",\n    limit=5\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Common Assets to Strategy in Python\nDESCRIPTION: This snippet adds common assets to the strategy. The `add` method is used to specify the asset and the date ranges during which they are considered common assets.  `index.assets.common_assets` is then used to access the list of common assets.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/Strategy.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# add common assets\nindex.assets.add({\"ethereum\": [\"2021-01-01\", \"2021-01-02\", \"2021-01-04\", \"2021-01-04\"], \"uniswap\": [\"2021-01-01\", \"2021-01-04\"]})\nindex.assets.common_assets\n```\n\n----------------------------------------\n\nTITLE: Initializing Strategy with init_asset in Python\nDESCRIPTION: This snippet initializes a `Strategy` object with a start date and an initial asset. The `start_dt` parameter specifies the starting date for the strategy, and `init_asset` specifies the initial asset held by the investor before the strategy begins. The Strategy class is imported from san.extras.strategy.strategy.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/Strategy.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nindex = Strategy(start_dt=\"2021-01-01\", init_asset=\"dai\")\n```\n\n----------------------------------------\n\nTITLE: Evaluating Signals with Triple Barrier Method\nDESCRIPTION: This snippet utilizes the 'evaluate' function from the 'san.extras.triple_barrier' module to evaluate the trading signals against the price data. It takes 'prices' and 'signals' as input and returns 'labels', which represents the outcome of the triple barrier method applied to these signals.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/triple_barrier.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nlabels = evaluate(prices, signals)\nlabels\n```\n\n----------------------------------------\n\nTITLE: Removing Sell Signals from Strategy in Python\nDESCRIPTION: This snippet removes sell signals from the strategy using the `remove` method on the `signals` object. The signal type is specified as 's' for sell, and the `signal_name` of the signals to remove is passed. The remaining sell signals can then be accessed using `index.signals.sell_signals`.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/Strategy.ipynb#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Remove part of the sell signals\nindex.signals.remove(\"s\", signal_name=\"sell_2\")\nindex.signals.sell_signals\n```\n\n----------------------------------------\n\nTITLE: Plotting Prices and Labels using Sanpy\nDESCRIPTION: This snippet uses the 'plot' function from the 'san.extras.triple_barrier' module to visualize the price data and the evaluated labels generated by the triple barrier method. It takes 'prices' and 'labels' as input and generates a plot showing the results.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/triple_barrier.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nplot(prices, labels)\n```\n\n----------------------------------------\n\nTITLE: Get API Calls Made/Remaining in Python\nDESCRIPTION: This code snippet shows how to use `san.api_calls_made()` and `san.api_calls_remaining()` to retrieve information about API call usage.  Dependencies: `san`.  Input: None.  Output: Returns data about API calls made and remaining.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\ncalls_by_day = san.api_calls_made()\ncalls_remaining = san.api_calls_remaining()\n```\n\n----------------------------------------\n\nTITLE: Fetching metric data for a contract address\nDESCRIPTION: This snippet fetches the `contract_transactions_count` for a specific contract address, using the `selector` parameter to specify the `contractAddress`. The result is a pandas DataFrame.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport san\nsan.get(\n  \"contract_transactions_count\",\n  selector={\"contractAddress\": \"0x00000000219ab540356cBB839Cbe05303d7705Fa\"},\n  from_date=\"2022-01-01\",\n  to_date=\"2022-01-05\",\n  interval=\"1d\"\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying First Few Rows of Price Dataframe\nDESCRIPTION: This snippet displays the first few rows of the 'prices' DataFrame using the '.head()' method. This is used to inspect the structure and content of the DataFrame, ensuring the data has been loaded and formatted correctly.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/triple_barrier.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nprices.head()\n```\n\n----------------------------------------\n\nTITLE: Fetching metric data for top holders\nDESCRIPTION: This code retrieves the `amount_in_top_holders` metric for the `santiment` slug, specifying that it should consider the top 10 holders using the `holdersCount` parameter in `selector`.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport san\nsan.get(\n  \"amount_in_top_holders\",\n  selector={\"slug\": \"santiment\", \"holdersCount\": 10},\n  from_date=\"2022-01-01\",\n  to_date=\"2022-01-05\",\n  interval=\"1d\"\n)\n```\n\n----------------------------------------\n\nTITLE: Find Available Metric Since for Slug in Python\nDESCRIPTION: This code demonstrates how to find the first datetime for which a metric is available for a given slug using `san.available_metric_for_slug_since()`.  Dependencies: `san`. Input: metric name, slug. Output: Returns the datetime.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nsan.available_metric_for_slug_since(metric=\"daily_active_addresses\", slug=\"santiment\")\n```\n\n----------------------------------------\n\nTITLE: Hypothesis Test\nDESCRIPTION: Performs a hypothesis test to assess the statistical significance of the event study results. It uses the hypothesis_test function with price data, signals, a starting point, a benchmark (Bitcoin), an intercept, and a confidence interval (CI).\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/event_study.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Calling the hypothesis test:\nhypothesis_test(price, signals, starting_point=30, benchmark=\"bitcoin\", intercept=True, CI=0.95)\n```\n\n----------------------------------------\n\nTITLE: Creating Rebalance Signals DataFrame in Python\nDESCRIPTION: This snippet creates a Pandas DataFrame to represent rebalance signals.  The DataFrame includes a column for date ('dt'). This DataFrame can then be used to add rebalance signals to the index.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/Strategy.ipynb#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Define rebalance signals df\nrebalance_signals = pd.DataFrame({\"dt\": [\"2021-02-01\", \"2021-03-01\"]})\n```\n\n----------------------------------------\n\nTITLE: Displaying First Few Rows of Signal Dataframe\nDESCRIPTION: This snippet displays the first few rows of the 'signals' DataFrame using the '.head()' method. This allows for checking the structure and contents of the signals dataframe.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/triple_barrier.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsignals.head()\n```\n\n----------------------------------------\n\nTITLE: Getting Available Projects in Python\nDESCRIPTION: This code retrieves a DataFrame containing all available projects from the Santiment API using `san.get(\"projects/all\")`.  Dependencies: `san`. Input: None. Output: Returns a Pandas DataFrame.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nsan.get(\"projects/all\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Prices by Date in Strategy in Python\nDESCRIPTION: This snippet demonstrates how to access the prices for a specific date using `.loc` on the `prices` DataFrame stored within the strategy. The date \"2021-01-01\" is used as an example.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/Strategy.ipynb#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nindex.prices.prices.loc[[\"2021-01-01\"]]\n```\n\n----------------------------------------\n\nTITLE: Add data to Backtest instance\nDESCRIPTION: Adds the portfolio, prices, fees, and trades data to the Backtest instance. This prepares the Backtest object with the necessary data for the backtesting process.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/Backtest.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nbacktest.add_portfolio(portfolio_df)\nbacktest.prices.set(prices_df)\nbacktest.add_fees(fees_df)\nbacktest.add_trades(trades_df)\n```\n\n----------------------------------------\n\nTITLE: Run Integration Tests - Bash\nDESCRIPTION: Runs the project's integration tests using pytest. The `-m integration` flag selects tests marked with the `integration` marker. Executed within the pipenv environment.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_47\n\nLANGUAGE: bash\nCODE:\n```\npipenv run pytest -m integration\n```\n\n----------------------------------------\n\nTITLE: Setting Prices in Strategy in Python\nDESCRIPTION: This snippet sets the prices for the assets in the strategy using the `set` method on the `prices` object. The `prices` DataFrame, created in the previous snippet, is passed as the price data.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/Strategy.ipynb#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nindex.prices.set(prices)\n```\n\n----------------------------------------\n\nTITLE: Installing sanpy with extra dependencies\nDESCRIPTION: This command installs sanpy along with extra dependencies required for scripts in the `extras` directory, related to backtesting and event studies.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install sanpy[extras]\n```\n\n----------------------------------------\n\nTITLE: Fetching metric data by concatenated string\nDESCRIPTION: This Python code uses the `san.get` function to fetch the `daily_active_addresses` metric for the `bitcoin` slug. The metric and slug are provided as a single string, separated by a `/`. This method is discouraged.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport san\n\nsan.get(\n    \"daily_active_addresses/bitcoin\",\n    from_date=\"2018-06-01\",\n    to_date=\"2018-06-05\",\n    interval=\"1d\"\n)\n```\n\n----------------------------------------\n\nTITLE: Run Tests (Alternative) - Bash\nDESCRIPTION: Runs the project's tests using pytest. This is an alternative command without using pipenv directly. It assumes pytest is available in the environment.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_48\n\nLANGUAGE: bash\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: Install Dev Dependencies - Bash\nDESCRIPTION: Installs development dependencies specified using the `dev` extra.  The `-e .` flag installs the current project in editable mode.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\npipenv run pip install -e '.[dev]'\n```\n\n----------------------------------------\n\nTITLE: Build portfolio price\nDESCRIPTION: Builds the portfolio price series using the provided data and the specified start date. This calculates the portfolio's value over time.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/Backtest.ipynb#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nbacktest.build_portfolio_price(START_DT)\n```\n\n----------------------------------------\n\nTITLE: Install Ruff - Bash\nDESCRIPTION: Installs the Ruff linter and formatter tool using pip. It's a fast alternative to other linters.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_50\n\nLANGUAGE: bash\nCODE:\n```\npip install ruff\n```\n\n----------------------------------------\n\nTITLE: Import pandas and Backtest module\nDESCRIPTION: Imports the necessary libraries: pandas for data manipulation and Backtest from san.extras.backtest for portfolio backtesting.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/Backtest.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nfrom san.extras.backtest import Backtest\n```\n\n----------------------------------------\n\nTITLE: Setup Project - Bash\nDESCRIPTION: Sets up the project using pipenv to manage the local environment. Installs dependencies specified in the Pipfile.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\npipenv install\n```\n\n----------------------------------------\n\nTITLE: Run Ruff Linter - Bash\nDESCRIPTION: Runs the Ruff linter to check for code style and potential errors in the codebase.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\nruff check\n```\n\n----------------------------------------\n\nTITLE: Initialize Backtest Instance\nDESCRIPTION: Creates an instance of the Backtest class, using the specified start date. This initializes the backtesting environment.\nSOURCE: https://github.com/santiment/sanpy/blob/master/examples/extras/Backtest.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nbacktest = Backtest(START_DT)\n```\n\n----------------------------------------\n\nTITLE: Format Code with Ruff - Python\nDESCRIPTION: Formats the code using the Ruff formatter to adhere to consistent style guidelines.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_51\n\nLANGUAGE: python\nCODE:\n```\nruff format\n```\n\n----------------------------------------\n\nTITLE: Installing sanpy with pip\nDESCRIPTION: This command installs the latest version of the sanpy library from the Python Package Index (PyPI).\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install sanpy\n```\n\n----------------------------------------\n\nTITLE: Upgrading sanpy with pip\nDESCRIPTION: This command upgrades the sanpy library to the latest version available on PyPI, ensuring you have the most recent features and bug fixes.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade sanpy\n```\n\n----------------------------------------\n\nTITLE: Install Main Dependencies - Bash\nDESCRIPTION: Installs the main project dependencies using pipenv.  The `-e .` flag installs the current project in editable mode.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\npipenv run pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Run Tests - Bash\nDESCRIPTION: Runs the project's tests using pytest.  Executed within the pipenv environment.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\npipenv run pytest\n```\n\n----------------------------------------\n\nTITLE: Install Dev Dependencies for Linting - Bash\nDESCRIPTION: Installs the development dependencies including linting tools using pipenv. This allows running linters like Ruff.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_52\n\nLANGUAGE: bash\nCODE:\n```\npip install '.[dev]'\n```\n\n----------------------------------------\n\nTITLE: Install Extra Dependencies - Bash\nDESCRIPTION: Installs extra dependencies specified using the `extras` extra. The `-e .` flag installs the current project in editable mode.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\npipenv run pip install -e '.[extras]'\n```\n\n----------------------------------------\n\nTITLE: Run Integration Tests (Alternative) - Bash\nDESCRIPTION: Runs the project's integration tests using pytest. The `-m integration` flag selects tests marked with the `integration` marker.  This is an alternative command without using pipenv directly, and assumes pytest is available.\nSOURCE: https://github.com/santiment/sanpy/blob/master/README.md#_snippet_49\n\nLANGUAGE: bash\nCODE:\n```\npytest -m integration\n```"
  }
]