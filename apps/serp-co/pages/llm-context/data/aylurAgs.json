[
  {
    "owner": "aylur",
    "repo": "ags",
    "content": "TITLE: Migrating App Configuration (JavaScript)\nDESCRIPTION: This snippet demonstrates the change in the entry point and how to configure the application in AGS v2. The `App.config` method is replaced by `App.start` and initialization code should be placed inside the `main` function. This ensures code execution within `main` or `client` callbacks, aligning with the client mode recommendation.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/migrate.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nApp.config({ // [!code --:5]\n    windows: [\n        // window instances\n    ]\n})\nimport { App } from \"astal/gtk3\" // [!code ++:7]\n\nApp.start({\n    main() {\n        // any initialization code\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Templating with JSX\nDESCRIPTION: This snippet demonstrates the shift from using `Widget` constructor to using JSX for templating in AGS v2. JSX is now the recommended approach for defining widgets and their properties, providing a more declarative syntax. It shows various examples of replacing widget configurations with JSX equivalents, including property binding and component composition.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/migrate.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nconst _ = Widget.Box({ // [!code --:6]\n    vertical: true,\n    children: [\n        Widget.Label(\"hello\")\n    ]\n})\nconst _ = <box vertical> // [!code ++:3]\n    <label label=\"hello\" />\n</box>\n\nconst _ = Widget.Box({ // [!code --:3]\n    child: var.bind().as(v => MyWidget(v))\n})\nconst _ = <box>  // [!code ++:3]\n    {var(v => <MyWidget v={v} />)}\n</box>\n\nconst _ = Widget.Box({ // [!code --:5]\n    children: var.bind().as(v => [\n        MyWidget(v)\n    ])\n})\nconst _ = <box>  // [!code ++:5]\n    {var(v => <>\n        <MyWidget v={v} />\n    </>)}\n</box>\n```\n\n----------------------------------------\n\nTITLE: Variable Usage and Reactivity\nDESCRIPTION: This snippet illustrates the changes in creating, binding, and watching for changes in `Variable` objects. In AGS v2, `.poll()`, `.watch()`, and `.observe()` replace the config object from AGS v1. Furthermore, getting and setting values are done using `.value` and `.set()` instead of `.getValue()` and `.setValue()`. The connect signal is replaced with `subscribe`.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/migrate.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// creating\nconst v = Variable(\"0\", { // [!code --:3]\n    poll: [1000, \"command\"],\n})\nconst v = Variable(\"initial\") // [!code ++:2]\n    .poll(1000, \"command\")\n\n// binding\nconst b1: Binding<number, any, any> = v1.bind().as(Number) // [!code --]\nconst b2: Binding<number> = v2(Number) // [!code ++]\n\n// get and set\nv.getValue() // [!code --:4]\nv.value\nv.setValue(\"value\")\nv.value = \"value\"\nv.get() // [!code ++:2]\nv.set(\"value\")\n\n// watching for changes\nv.connect('changed', ({ value }) => { // [!code --:3]\n    console.log(value)\n})\nv.subscribe(value => { // [!code ++:3]\n    console.log(value)\n})\n```\n\n----------------------------------------\n\nTITLE: Utility Function Imports\nDESCRIPTION: This snippet shows how utility functions like `exec`, `readFile`, and `timeout` are now available as separate modules.  Instead of `Utils.exec()`, you would now import and use `exec()`. Icon lookup is available from Astal.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/migrate.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nUtils.exec(\"command\") // [!code --:3]\nUtils.readFile(\"file\")\nUtils.timeout(1000, callback)\nimport { exec, readFile, timeout } from \"astal\" // [!code ++:4]\nexec(\"command\")\nreadFile(\"file\")\ntimeout(1000, callback)\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nUtils.lookUpIcon(\"icon-name\") // [!code --]\nimport { Astal } from \"astal/gtk3\" // [!code ++:2]\nAstal.Icon.lookup_icon(\"icon-name\")\n```\n\n----------------------------------------\n\nTITLE: Reactivity with Bindings and Variables\nDESCRIPTION: This snippet illustrates changes in reactivity using `Binding` objects and widget constructors. In AGS v2, widgets can directly utilize Variables with a function that takes the variable's value as an argument. This example demonstrates how to bind a `label`'s text to a `Variable` using both the old `Label` widget and the new JSX syntax.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/migrate.md#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nconst label = Variable(\"hello\")\n\nLabel({ // [!code --:3]\n    label: label.bind().as(hello => `${hello} world`)\n})\n<label // [!code ++:3]\n    label={label(hello => `${hello} world`)}\n/>\n```\n\n----------------------------------------\n\nTITLE: CLI Request Handling\nDESCRIPTION: This snippet details how to handle requests sent from the command line. The previous `ags --run-js` has been retired, replaced by requests. The `requestHandler` function within `App.start` handles incoming requests and provides responses.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/migrate.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nglobalThis.myfunction = () => { // [!code --:3]\n    print(\"hello\")\n}\nApp.start({ // [!code ++:8]\n    requestHandler(request: string, res: (response: any) => void) {\n        if (request == \"myfunction\") {\n            res(\"hello\")\n        }\n        res(\"unknown command\")\n    },\n})\n```\n\nLANGUAGE: Bash\nCODE:\n```\nags -r \"myfunction()\" # [!code --]\nags request myfunction # [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Instantiating Widgets (JavaScript)\nDESCRIPTION: This snippet illustrates the recommended way of instantiating widgets. Instead of creating top-level instances, widgets are now created within the `main` callback in AGS v2 to avoid issues with client mode.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/migrate.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst win = Widget.Window() // [!code --:5]\n\nApp.config({\n    windows: [win]\n})\nApp.main({ // [!code ++:5]\n    main() {\n        new Widget.Window()\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Define AGS Home Manager module configuration\nDESCRIPTION: This Nix code defines the Home Manager module configuration for AGS. It enables the AGS program, specifies the configuration directory to symlink, and adds additional packages to GJS's runtime. These extra packages extend AGS's functionality by including required dependencies.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/nix.md#_snippet_5\n\nLANGUAGE: nix\nCODE:\n```\n{ inputs, pkgs, ... }:\n{  # add the home manager module  imports = [ inputs.ags.homeManagerModules.default ];\n  programs.ags = {    enable = true;\n    # symlink to ~/.config/ags    configDir = ../ags;\n    # additional packages to add to gjs's runtime    extraPackages = with pkgs; [      inputs.ags.packages.${pkgs.system}.battery      fzf    ];  };}\n```\n\n----------------------------------------\n\nTITLE: Custom Service Implementation\nDESCRIPTION: This snippet demonstrates how to create custom \"Services\" in AGS v2 by creating a `GObject.Object` subclass. The older approach of using `Service.register` is replaced with decorators and class properties.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/migrate.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass MyService extends Service { // [!code --:12]\n    static {\n        Service.register(this, {\n            'my-signal': ['float'],\n        }, {\n            'my-value': ['float', 'rw'],\n        });\n    }\n\n    get my_value(): number\n    set my_value(v: number)\n}\nimport { GObject, register, signal, property } from \"astal/gobject\" // [!code ++:7]\n\n@register()\nclass MyService extends GObject.Object {\n    @property(Number) declare myValue: number\n    @signal(Number) declare mySignal: (n: number): void\n}\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript types with ags types\nDESCRIPTION: This code snippet shows the usage of the `ags types` command for generating TypeScript types. It explains the command's arguments and flags, including the `-d` for directory, `-h` for help, `-i` for ignore, and `-p` for package update. It gives examples such as ignoring modules and using specific patterns.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/types.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nags types --help\n\nGenerate TypeScript types\n\nUsage:\n  ags types [pattern] [flags]\n\nExamples:\n  ags types Astal* --ignore Gtk3 --ignore Astal3\n\nFlags:\n  -d, --directory string     target directory (default \"~/.config/ags\")\n  -h, --help                 help for types\n  -i, --ignore stringArray   modules that should be ignored\n  -p, --package              update package.json\n```\n\n----------------------------------------\n\nTITLE: Install AGS using yay (Arch Linux)\nDESCRIPTION: This snippet shows the command to install AGS using the yay package manager on Arch Linux.  It installs the 'aylurs-gtk-shell' package which contains AGS. Requires yay package manager to be installed.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/install.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyay -S aylurs-gtk-shell\n```\n\n----------------------------------------\n\nTITLE: TypeScript Application with Astal and Blueprint\nDESCRIPTION: This TypeScript code creates a Gtk4 application using Astal and a Blueprint template. It registers a custom `Bar` window and displays it with specified anchors. This uses gjs to run the file directly.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/bundling.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n#!/usr/bin/gjs -m\nimport { register } from \"astal/gobject\"\nimport { App, Astal } from \"astal/gtk4\"\nimport Template from \"./Bar.blp\"\n\nconst { TOP, LEFT, RIGHT } = Astal.WindowAnchor\n\n@register({ GTypeName: \"Bar\", Template })\nclass Bar extends Astal.Window {\n}\n\nApp.start({\n    instanceName: \"bar\",\n    main() {\n        new Bar({\n            application: App,\n            anchor: TOP | LEFT | RIGHT,\n            visible: true,\n        })\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Dialog with AGS and Astal in TypeScript\nDESCRIPTION: This TypeScript snippet defines a simple dialog using the Astal library within the AGS framework. It creates a window with yes/no buttons.  The `App.start` function initializes the application with specified CSS styling and a main function defining the dialog's structure and behavior.  The dialog handles key presses and button clicks to provide user interaction.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/example.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n#!/usr/bin/env -S ags run\nimport { App, Astal, Gtk, Gdk } from \"astal/gtk3\"\n\nconst { TOP, BOTTOM, LEFT, RIGHT } = Astal.WindowAnchor\nconst { IGNORE } = Astal.Exclusivity\nconst { EXCLUSIVE } = Astal.Keymode\nconst { CENTER } = Gtk.Align\n\nApp.start({\n    instanceName: \"tmp\" + Date.now(),\n    gtkTheme: \"adw-gtk3-dark\",\n    css: /* css */`\n        window {\n            all: unset;\n            background-color: alpha(black, 0.3);\n        }\n\n        window > box {\n            margin: 10px;\n            padding: 6px;\n            box-shadow: 2px 3px 5px 0 alpha(black, 0.6);\n            border-radius: 11px;\n            background-color: #181818;\n            color: white;\n            min-width: 200px;\n        }\n\n        box > label {\n            font-size: large;\n            margin: 6px;\n        }\n\n        label.title {\n            font-size: 1.4em;\n        }\n\n        .action {\n            color: alpha(white, 0.8);\n        }\n\n        button {\n            margin: 6px;\n        }\n    `,\n    main: (action = \"XYZ\") => {\n        function yes() {\n            print(\"yes\")\n            App.quit()\n        }\n\n        function no() {\n            print(\"no\")\n            App.quit()\n        }\n\n        function onKeyPress(_: Astal.Window, event: Gdk.Event) {\n            if (event.get_keyval()[1] === Gdk.KEY_Escape) {\n                no()\n            }\n        }\n\n        <window\n            onKeyPressEvent={onKeyPress}\n            exclusivity={IGNORE}\n            keymode={EXCLUSIVE}\n            anchor={TOP | BOTTOM | LEFT | RIGHT}>\n            <box halign={CENTER} valign={CENTER} vertical>\n                <label className=\"title\" label=\"Are you sure you want to do\" />\n                <label className=\"action\" label={`${action}?`} />\n                <box homogeneous>\n                    <button onClicked={yes}>\n                        Yes\n                    </button>\n                    <button onClicked={no}>\n                        No\n                    </button>\n                </box>\n            </box>\n        </window>\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing AGS project with `ags init`\nDESCRIPTION: This command initializes a new AGS project. It accepts flags to specify the target directory, force overriding existing files, and set the GTK version.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/init.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ ags init --help\n\nInitialize a project directory by setting up files needed by TypeScript,\ngenerating types and setting up a basic bar example\n\nUsage:\n  ags init [flags]\n\nFlags:\n  -d, --directory string   target directory (default \"~/.config/ags\")\n  -f, --force              override existing files\n  -g, --gtk int            gtk version to use (default 3)\n  -h, --help               help for init\n```\n\n----------------------------------------\n\nTITLE: Custom Widgets with Gtk Subclassing\nDESCRIPTION: This code snippet shows how to use subclassing with Gtk widgets. In AGS v1 some widgets were builtin, but in AGS v2 you may have to create a subclass using astalify to import non-builtin Gtk widgets.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/migrate.md#_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\nconst cb = Widget.ColorButton() // [!code --]\nconst ColorButton = astalify(Gtk.ColorButton) // [!code ++:2]\nconst cb = <ColorButton />\n```\n\n----------------------------------------\n\nTITLE: Meson Build Configuration for Data Files\nDESCRIPTION: This Meson build configuration defines how to install data files and bundle the application. It also demonstrates how to define `DATADIR` for use in the application.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/bundling.md#_snippet_11\n\nLANGUAGE: Meson\nCODE:\n```\nprefix = get_option('prefix')\npkgdatadir = prefix / get_option('datadir') / meson.project_name()\nbindir = prefix / get_option('bindir')\n\ninstall_data(\n  files('data/data.txt'),\n  install_dir: pkgdatadir,\n)\n\ncustom_target(\n  command: [\n    find_program('ags'),\n    'bundle',\n    '--define', 'DATADIR=\"' + pkgdatadir + '\"',\n    '--root', meson.project_source_root(),\n    meson.project_source_root() / 'app.ts',\n    meson.project_name(),\n  ],\n  output: [meson.project_name()],\n  input: files('app.ts'),\n  install: true,\n  install_dir: bindir,\n)\n```\n\n----------------------------------------\n\nTITLE: Bundling and Executing the Application\nDESCRIPTION: These shell commands bundle the TypeScript application into an executable file, make it executable, and then run it.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/bundling.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\nags bundle ./app.ts bar\nchmod +x ./bar\n\n./bar\n```\n\n----------------------------------------\n\nTITLE: Handling Requests with Astal CLI\nDESCRIPTION: This TypeScript snippet demonstrates how to handle requests within the Astal CLI application. It starts the application with a request handler that checks for specific commands (e.g., \"say hi\") and returns corresponding responses or an \"unknown command\" message if the request is not recognized. The request and response are strings.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/astal-cli.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nApp.start({\n    requestHandler(request: string, res: (response: any) => void) {\n        if (request == \"say hi\") {\n            res(\"hi cli\")\n        }\n        res(\"unknown command\")\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Bundle AGS project using Nix flake\nDESCRIPTION: This Nix code defines a flake output that uses `ags.lib.bundle` to bundle an AGS project. It specifies the project source, executable name, entry point, and additional packages required for the GJS runtime. The `gtk4` flag indicates whether to include GTK4 dependencies.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/nix.md#_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n{  inputs = {    nixpkgs.url = \"github:nixos/nixpkgs?ref=nixos-unstable\";    ags.url = \"github:aylur/ags\";  };\n\n  outputs = { self, nixpkgs, ags }: let    system = \"x86_64-linux\";    pkgs = nixpkgs.legacyPackages.${system};  in {    packages.${system}.default = ags.lib.bundle { # [!code focus:12]      inherit pkgs;      src = ./.;      name = \"my-shell\"; # name of executable      entry = \"app.ts\";      gtk4 = false;\n\n      # additional libraries and executables to add to gjs' runtime      extraPackages = [        # ags.packages.${system}.battery        # pkgs.fzf      ];    };  };}\n```\n\n----------------------------------------\n\nTITLE: Service Migration\nDESCRIPTION: This snippet outlines the transition of Services in AGS v2. Services are no longer a distinct entity but are now external libraries implemented in Vala or C. They need to be installed separately and are accessed as GObject subclasses. The code shows how to import these libraries and bind to their properties.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/migrate.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n// importing\nconst battery = await Service.import(\"battery\") // [!code --]\nimport Battery from \"gi://AstalBattery\" // [!code ++:2]\nconst battery = Battery.get_default()\n\n// binding\nconst b = battery.bind(\"percentage\").as() // [!code --]\nimport { bind } from \"astal\" // [!code ++:2]\nconst b = bind(battery, \"percentage\").as()\n```\n\n----------------------------------------\n\nTITLE: Sending a request with Astal CLI\nDESCRIPTION: This shell snippet shows how to send a request to an Astal application instance using the Astal CLI and the AGS alias. It demonstrates sending a \"say hi\" request to the \"astal\" instance and the expected response.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/astal-cli.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nastal say hi --instance astal\n# hi cli\n```\n\nLANGUAGE: shell\nCODE:\n```\nags request \"say hi\" --instance astal\n# hi cli\n```\n\n----------------------------------------\n\nTITLE: TypeScript Code Using DATADIR\nDESCRIPTION: This TypeScript code shows how to use the `DATADIR` constant to construct a file path to a data file.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/bundling.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst data = `${DATADIR}/data.txt`\n```\n\n----------------------------------------\n\nTITLE: Configure AGS with Home Manager module in NixOS\nDESCRIPTION: This Nix code demonstrates how to integrate AGS into a Home Manager configuration. It defines a flake output that includes the `home-manager` input and passes inputs as special arguments to the home manager configuration, allowing to import your home.nix file.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/nix.md#_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\n{  inputs = {    nixpkgs.url = \"github:nixos/nixpkgs/nixos-unstable\";    home-manager = {      url = \"github:nix-community/home-manager\";      inputs.nixpkgs.follows = \"nixpkgs\";    };\n    ags.url = \"github:aylur/ags\"; # [!code focus]  };\n\n  outputs = { home-manager, nixpkgs, ... }@inputs:  let    system = \"x86_64-linux\";  in  {    homeConfigurations.\"${username}\" = home-manager.lib.homeManagerConfiguration {      pkgs = import nixpkgs { inherit system; };\n      # pass inputs as specialArgs # [!code focus:2]      extraSpecialArgs = { inherit inputs; };\n      # import your home.nix # [!code focus:2]      modules = [ ./home-manager/home.nix ];    };  };}\n```\n\n----------------------------------------\n\nTITLE: Toggling a window with Astal CLI\nDESCRIPTION: This shell snippet illustrates how to toggle a specific window by its name within an Astal application instance using the Astal CLI and the AGS alias. The `--toggle-window` flag and the `toggle` command are used, respectively.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/astal-cli.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nastal --toggle-window window-name --instance astal\n```\n\nLANGUAGE: shell\nCODE:\n```\nags toggle window-name --instance astal\n```\n\n----------------------------------------\n\nTITLE: Run Astal notifd help command\nDESCRIPTION: This command executes the `astal-notifd` CLI with the `--help` flag. This displays the available options and usage information for the `astal-notifd` tool.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/nix.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nastal-notifd --help\n```\n\n----------------------------------------\n\nTITLE: Opening the inspector with Astal CLI\nDESCRIPTION: This shell snippet demonstrates how to open the inspector for an Astal application instance using both the Astal CLI and the AGS alias. The `--instance` flag specifies the target instance.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/astal-cli.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nastal --inspector --instance astal\n```\n\nLANGUAGE: shell\nCODE:\n```\nags inspect --instance astal\n```\n\n----------------------------------------\n\nTITLE: Install Astal CLI tools in home environment with Nix\nDESCRIPTION: This Nix code demonstrates how to add the `astal` CLI tool to the home environment using Home Manager. This allows users to access the `astal` command directly from their shell after applying the Home Manager configuration.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/nix.md#_snippet_6\n\nLANGUAGE: nix\nCODE:\n```\nhome.packages = [ inputs.ags.packages.${pkgs.system}.io ];\n```\n\n----------------------------------------\n\nTITLE: Define AGS development shell with Nix flake\nDESCRIPTION: This Nix code defines a development shell using `pkgs.mkShell` and includes the `ags.packages.${system}.default` package. It allows overriding the default package to include additional packages required for the AGS development environment, such as cherry-picked libraries.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/nix.md#_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\n{  inputs = {    nixpkgs.url = \"github:nixos/nixpkgs?ref=nixos-unstable\";    ags.url = \"github:aylur/ags\";  };\n\n  outputs = { self, nixpkgs, ags }: let    system = \"x86_64-linux\";    pkgs = nixpkgs.legacyPackages.${system};  in {    devShells.${system}.default = pkgs.mkShell {      buildInputs = [        # includes astal3 astal4 astal-io by default        (ags.packages.${system}.default.override { # [!code focus:5]          extraPackages = [            # cherry pick packages          ];        })      ];    };  };}\n```\n\n----------------------------------------\n\nTITLE: Install Astal notifd tool in home environment\nDESCRIPTION: This Nix configuration uses Home Manager to add the `astal-notifd` tool to the user's home environment. By adding this package, the `astal-notifd` command becomes available in the shell.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/nix.md#_snippet_8\n\nLANGUAGE: nix\nCODE:\n```\nhome.packages = [ inputs.ags.packages.${pkgs.system}.notifd ];\n```\n\n----------------------------------------\n\nTITLE: Listing options with Astal CLI\nDESCRIPTION: This shell snippet shows how to list available options for an Astal application using both the Astal CLI and the AGS alias.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/astal-cli.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nastal --list\n```\n\nLANGUAGE: shell\nCODE:\n```\nags list\n```\n\n----------------------------------------\n\nTITLE: Quitting the application with Astal CLI\nDESCRIPTION: This shell snippet shows how to quit an Astal application instance using the Astal CLI and the AGS alias. The `--quit` flag and the `quit` command are used, respectively.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/astal-cli.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nastal --quit --instance astal\n```\n\nLANGUAGE: shell\nCODE:\n```\nags quit --instance astal\n```\n\n----------------------------------------\n\nTITLE: Meson Build Configuration for Gtk4 with Layer Shell\nDESCRIPTION: This Meson build configuration defines how to bundle a Gtk4 application with layer shell support. It creates a wrapper script and configures it with the necessary paths.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/bundling.md#_snippet_15\n\nLANGUAGE: Meson\nCODE:\n```\npkgdatadir = get_option('prefix') / get_option('datadir') / meson.project_name()\nmain = meson.project_name() + '.wrapped'\n\ncustom_target(\n  command: [\n    find_program('ags'),\n    'bundle',\n    '--root', meson.project_source_root(),\n    meson.project_source_root() / 'app.ts',\n    main,\n  ],\n  output: main,\n  input: files('app.ts'),\n  install: true,\n  install_dir: pkgdatadir,\n)\n\nconfigure_file(\n  input: files('wrapper.sh'),\n  output: meson.project_name(),\n  configuration: {\n    'MAIN_PROGRAM': pkgdatadir / main,\n    'LAYER_SHELL_LIBDIR': dependency('gtk4-layer-shell-0').get_variable('libdir'),\n  },\n  install: true,\n  install_dir: get_option('prefix') / get_option('bindir'),\n)\n```\n\n----------------------------------------\n\nTITLE: Run Astal CLI help command\nDESCRIPTION: This command executes the `astal` CLI with the `--help` flag. This displays the available options and usage information for the `astal` tool, enabling users to understand how to use it effectively.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/nix.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nastal --help\n```\n\n----------------------------------------\n\nTITLE: Blueprint Bar Example\nDESCRIPTION: This Blueprint code defines a custom `Bar` window using Astal components. It includes a CenterBox with a Label displaying \"hello\".\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/bundling.md#_snippet_8\n\nLANGUAGE: Blueprint\nCODE:\n```\nusing Gtk 4.0;\nusing Astal 4.0;\n\ntemplate $Bar: Astal.Window {\n    // bitfields currently don't work in blueprint\n    // anchor: top | left | right;\n    exclusivity: exclusive;\n\n    CenterBox {\n        center-widget: Label {\n            label: \"hello\";\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Run AGS in a temporary NixOS shell\nDESCRIPTION: Uses the Nix package manager to create a temporary shell environment with AGS available. It fetches the AGS repository directly from GitHub. This command requires Nix to be installed and configured.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/quick-start.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnix shell github:aylur/ags # ags in a temporary shell\n```\n\n----------------------------------------\n\nTITLE: AGS project file structure\nDESCRIPTION: This code snippet shows the default file structure created by the `ags init` command. It includes directories for generated types (`@girs`), node modules (`node_modules`), and widgets (`widget`), as well as configuration files for TypeScript (`tsconfig.json`) and the project (`package.json`).\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/init.md#_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n.\n├── @girs/\n├── node_modules/\n│   └── astal\n├── widget/\n│   └── Bar.tsx\n├── app.ts\n├── env.d.ts\n├── style.scss\n├── package.json\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Gtk4 Layer Shell Wrapper Script\nDESCRIPTION: This bash script is a wrapper for Gtk4 applications using layer shell. It preloads the layer shell library before running the main program to ensure proper linking.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/bundling.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\n#!/bin/bash\nLD_PRELOAD=\"@LAYER_SHELL_LIBDIR@/libgtk4-layer-shell.so\" @MAIN_PROGRAM@ $@\n```\n\n----------------------------------------\n\nTITLE: Importing Text File with Inline Plugin\nDESCRIPTION: This TypeScript code imports a text file using the inline plugin. The imported `data` variable contains the content of the file as a string, which is then printed to the console.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/bundling.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport data from \"inline:./data.txt\"\n\nprint(ui)\n// Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do.\n```\n\n----------------------------------------\n\nTITLE: Move AGS binary after Go installation\nDESCRIPTION: This snippet moves the AGS binary from the Go installation directory to a more traditional Linux directory. It shows moving the binary to both '/usr/bin/ags' using sudo and '~/.local/bin/ags' without sudo.  Requires sudo for moving to /usr/bin/ags.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/install.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsudo mv $GOPATH/bin/ags /usr/bin/ags\nmv $GOPATH/bin/ags ~/.local/bin/ags\n```\n\n----------------------------------------\n\nTITLE: Run AGS project with GTK4\nDESCRIPTION: Runs an existing AGS project explicitly using GTK4. This command starts the AGS application, ensuring it utilizes GTK version 4.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/quick-start.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nags run --gtk4\n```\n\n----------------------------------------\n\nTITLE: Global Imports\nDESCRIPTION: This snippet explains that `App`, `Service`, `Utils`, `Widget`, and `Variable` are no longer globally available in AGS v2. Instead, they must be explicitly imported from their respective modules.  This promotes better code organization and reduces the risk of naming conflicts.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/migrate.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Widget, App } from \"astal/gtk3\"\nimport * as fileUtils from \"astal/file\"\nimport * as procUtils from \"astal/process\"\nimport * as timeUtils from \"astal/time\"\nimport Variable from \"astal/variable\"\n```\n\n----------------------------------------\n\nTITLE: Importing Blueprint in TypeScript\nDESCRIPTION: This TypeScript code imports a BLP file using the BLP plugin. The imported `ui` variable contains the XML template definition as a string, which is then printed to the console.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/bundling.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport ui from \"./ui.blp\"\n\nprint(ui)\n// <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n// <interface>\n//   <requires lib=\"gtk\" version=\"4.0\"/>\n//   <object class=\"GtkLabel\">\n//     <property name=\"label\" translatable=\"yes\">hello</property>\n//   </object>\n// </interface>\n```\n\n----------------------------------------\n\nTITLE: Displaying help message for ags types command\nDESCRIPTION: This command displays the help message for the `ags types` command, which provides information on how to generate TypeScript types. It shows the usage, examples, and available flags for the command.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/types.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nags types --help\n```\n\n----------------------------------------\n\nTITLE: SCSS Example with SASS Plugin\nDESCRIPTION: This SCSS code snippet defines a variable `$color` and uses it to set the color property of a selector. It demonstrates the use of the SASS plugin in AGS bundling, where SCSS files are transpiled to CSS.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/bundling.md#_snippet_1\n\nLANGUAGE: SCSS\nCODE:\n```\n$color: white;\n\nselector {\n    color: $color;\n}\n```\n\n----------------------------------------\n\nTITLE: Blueprint Example with BLP Plugin\nDESCRIPTION: This Blueprint code snippet defines a simple Label widget using the Gtk 4.0 toolkit. It shows how the BLP plugin can be used to inline XML template definitions into the bundled application.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/bundling.md#_snippet_3\n\nLANGUAGE: Blueprint\nCODE:\n```\nusing Gtk 4.0;\n\nLabel {\n    label: _(\"hello\");\n}\n```\n\n----------------------------------------\n\nTITLE: Features section configuration in YAML\nDESCRIPTION: This YAML snippet configures the features section of the AGS documentation home page. It defines a list of features, each with a title and details.  The details include inline code snippets demonstrating the usage of AGS commands such as `ags init`, `ags types`, `ags bundle`, and `ags run`.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/index.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nfeatures:\n  - title: Initialize projects\n    details: With <code>ags init</code> you can initialize a project, which generates a basic template.\n  - title: Generate TypeScript types.\n    details: With <code>ags types</code> you can generate types from GObject based libraries.\n  - title: Bundle projects\n    details: With <code>ags bundle</code> you can bundle your project into a single executable script.\n  - title: Run projects\n    details: With <code>ags run</code> you can run a projects without bundling them first.\n```\n\n----------------------------------------\n\nTITLE: Install Astal gjs package from source\nDESCRIPTION: This snippet clones the Astal repository, navigates to the gjs directory, sets up the build environment using meson, and installs the package.  Requires meson and ninja build tools, and git for cloning the repository. Installs to /usr prefix.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/install.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/aylur/astal\ncd astal/lang/gjs\nmeson setup --prefix /usr build\nmeson install -C build\n```\n\n----------------------------------------\n\nTITLE: Initialize AGS project with GTK3\nDESCRIPTION: Initializes an AGS project using GTK3. This command creates the necessary files and directories for a new AGS project configured to use GTK version 3.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/quick-start.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nags init --gtk 3\n```\n\n----------------------------------------\n\nTITLE: Custom CSS styling\nDESCRIPTION: This CSS snippet defines custom styles for the AGS documentation home page. It customizes the appearance of the hero section, background gradients, code snippets, footer, and navigation bar.  It also includes media queries for different screen sizes to adjust the hero image blur effect.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/index.md#_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n:root {\n  --vp-home-hero-name-color: transparent;\n  --vp-home-hero-name-background: -webkit-linear-gradient(120deg, var(--vp-c-purple-3), var(--vp-c-brand-3));\n\n  --vp-home-hero-image-background-image: linear-gradient(-45deg, var(--vp-c-purple-3), var(--vp-c-brand-3));\n  --vp-home-hero-image-filter: blur(44px);\n}\n\n:root {\n  --overlay-gradient: color-mix(in srgb, var(--vp-c-brand-1), transparent 55%);\n}\n\n.dark {\n  --overlay-gradient: color-mix(in srgb, var(--vp-c-brand-1), transparent 85%);\n}\n\n.home-page {\n  background:\n    linear-gradient(215deg, var(--overlay-gradient), transparent 40%),\n    radial-gradient(var(--overlay-gradient), transparent 40%) no-repeat -60vw -40vh / 105vw 200vh,\n    radial-gradient(var(--overlay-gradient), transparent 65%) no-repeat 50% calc(100% + 20rem) / 60rem 30rem;\n\n  .VPFeature code {\n    background-color: var(--vp-code-line-highlight-color);\n    color: var(--vp-code-color);\n    padding: 2px;\n    border-radius: 4px;\n    padding: 3px 6px;\n  }\n\n  .VPFooter {\n    background-color: transparent !important;\n    border: none;\n  }\n\n  .VPNavBar:not(.top) {\n    background-color: transparent !important;\n    -webkit-backdrop-filter: blur(16px);\n    backdrop-filter: blur(16px);\n\n    div.divider {\n      display: none;\n    }\n  }\n}\n\n@media (min-width: 640px) {\n  :root {\n    --vp-home-hero-image-filter: blur(56px);\n  }\n}\n\n@media (min-width: 960px) {\n  :root {\n    --vp-home-hero-image-filter: blur(68px);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install AGS from source using Go\nDESCRIPTION: This snippet clones the AGS repository, navigates to the AGS directory, and installs AGS using the 'go install' command. It uses ldflags to set the 'gtk4LayerShell' and 'astalGjs' variables. Requires Go to be installed and configured.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/install.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/aylur/ags.git\ncd ags\n\ngo install -ldflags \"\\\n    -X 'main.gtk4LayerShell=$(pkg-config --variable=libdir gtk4-layer-shell-0)/libgtk4-layer-shell.so' \\\n    -X 'main.astalGjs=$(pkg-config --variable=srcdir astal-gjs)'\"\n```\n\n----------------------------------------\n\nTITLE: Executing the Dialog Script from Shell\nDESCRIPTION: This shell script demonstrates how to execute the dialog script and capture its output to perform an action.  It checks if the dialog returns \"yes\" and, if so, executes the `shutdown now` command.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/example.md#_snippet_1\n\nLANGUAGE: Shell Script\nCODE:\n```\nif [[ \"$(./dialog.ts -a Shutdown)\" == \"yes\" ]]; then\n    shutdown now\nfi\n```\n\n----------------------------------------\n\nTITLE: AGS JavaScript Configuration\nDESCRIPTION: This JavaScript code snippet demonstrates a basic AGS configuration. It defines the `SRC` variable, which points to the directory of the entry file and prints its value to the console.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/bundling.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n#!/usr/bin/ags run\nApp.start({\n    main() {\n        print(`source dir is ${SRC}`)\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration for DATADIR\nDESCRIPTION: This TypeScript code declares a global constant `DATADIR` as a string. This allows the application to access the data directory path.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/bundling.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare const DATADIR: string\n```\n\n----------------------------------------\n\nTITLE: Instance Name Definition\nDESCRIPTION: This snippet demonstrates how the instance name is defined. Previously, the instance name was defined in the cli. Now the name is defined in code.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/migrate.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nApp.start({\n    instanceName: \"name\"\n})\n```\n\nLANGUAGE: Bash\nCODE:\n```\nags -i name # [!code --:2]\nags -t window-name -i name\nags run # [!code ++:2]\nags toggle window-name -i name\n```\n\n----------------------------------------\n\nTITLE: Enter AGS development shell with Nix\nDESCRIPTION: This command enters a Nix shell environment that includes the `agsFull` package. This package provides AGS along with all Astal libraries, enabling development and testing of AGS configurations.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/nix.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnix shell github:aylur/ags#agsFull\n```\n\n----------------------------------------\n\nTITLE: Initialize AGS project with Nix flake\nDESCRIPTION: This command initializes a new AGS project directory using the provided GitHub template. It leverages Nix flakes to create a reproducible environment.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/nix.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnix flake init --template github:aylur/ags\n```\n\n----------------------------------------\n\nTITLE: Run AGS project with GTK3\nDESCRIPTION: Runs an existing AGS project using the default GTK version (typically GTK3 if not explicitly specified during initialization). This command starts the AGS application.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/quick-start.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nags run\n```\n\n----------------------------------------\n\nTITLE: Widget Hooks\nDESCRIPTION: This snippet demonstrates how to handle widget signals and custom object connections using hooks. In AGS v2, `.keybind` and `.poll` hooks are removed, replaced by event handlers directly in the JSX code and the `Variable` object. Polling should be done in `Variable`, and keybinds in `onKeyPressEvent` signal handler.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/migrate.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nWidget.Button({ // [!code --:6]\n    setup: self => {\n        self.on(\"signal-name\", handler)\n        self.hook(obj, handler, \"changed\")\n    }\n})\n<button // [!code ++:7]\n    onSignalName={handler}\n    setup={self => {\n        self.hook(subscribable, handler)\n        self.hook(connectable, \"signal-name\", handler)\n    }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Hero section configuration in YAML\nDESCRIPTION: This YAML snippet configures the hero section of the AGS documentation home page. It defines the title (name), subtitle (text), tagline, image URL, and action buttons for the hero section. The action buttons provide links to the quick start guide and Astal documentation.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/index.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nhero:\n  name: \"AGS\"\n  text: \"Scaffolding CLI for Astal+TypeScript\"\n  tagline: Initialize, bundle, or run Astal projects written in TypeScript/JavaScript with a single command\n  image: https://aylur.github.io/astal/icon.svg\n  actions:\n    - theme: brand\n      text: Quick Start\n      link: /guide/quick-start\n    - theme: alt\n      text: Astal Documentation\n      link: https://aylur.github.io/astal/\n```\n\n----------------------------------------\n\nTITLE: Importing SCSS in TypeScript\nDESCRIPTION: This TypeScript code imports an SCSS file using the SASS plugin.  The imported `style` variable contains the compiled CSS as a string, which is then printed to the console.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/bundling.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport style from \"./style.scss\"\n\nprint(style)\n// selector {\n//   color: white;\n// }\n```\n\n----------------------------------------\n\nTITLE: Displaying AGS Bundle Help\nDESCRIPTION: This shell command displays the help information for the `ags bundle` command, showing usage instructions, available flags, and examples.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/bundling.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ ags bundle --help\n```\n\n----------------------------------------\n\nTITLE: Install AGS on Arch Linux\nDESCRIPTION: Installs the 'aylurs-gtk-shell-git' package using the yay package manager on Arch Linux. This command assumes that yay is already installed and configured on the system.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/quick-start.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyay -S aylurs-gtk-shell-git\n```\n\n----------------------------------------\n\nTITLE: Text File Example for Inline Plugin\nDESCRIPTION: This text file contains sample data that will be inlined into the application using the inline plugin.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/bundling.md#_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do.\n```\n\n----------------------------------------\n\nTITLE: CLI Window Toggling\nDESCRIPTION: This snippet describes how windows are made toggleable through the CLI.  You must now pass the `App` instance to `Window` instances.  In the old config, an array of windows was passed to `App.config`.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/migrate.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nApp.config({ // [!code --:5]\n    windows: [\n        Widget.Window({ name: \"window-name\" })\n    ]\n})\nApp.start({ // [!code ++:5]\n    main() {\n        <window name=\"window-name\" application={App}></window>\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Initialize AGS project with GTK4\nDESCRIPTION: Initializes an AGS project using GTK4. This command creates the necessary files and directories for a new AGS project configured to use GTK version 4.\nSOURCE: https://github.com/aylur/ags/blob/main/docs/guide/quick-start.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nags init --gtk 4\n```"
  }
]