[
  {
    "owner": "openstatushq",
    "repo": "openstatus",
    "content": "TITLE: Implementing Unkey Authentication Middleware in Hono.js\nDESCRIPTION: Middleware function that verifies API keys using Unkey. It extracts the key from the x-openstatus-key header, verifies it with Unkey, and sets the workspaceId in the context for downstream route handlers.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/secure-api-with-unkey.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { verifyKey } from \"@unkey/api\";\nimport type { Context, Next } from \"hono\";\n\nimport type { Variables } from \"./index\";\n\nexport async function middleware(\n  c: Context<{ Variables: Variables }, \"/api/v1/*\">,\n  next: Next,\n) {\n  const key = c.req.header(\"x-openstatus-key\");\n\n  if (!key) return c.text(\"Unauthorized\", 401);\n\n  const { error, result } = await verifyKey(key);\n\n  // up to you if you want to pass the actual message to your users\n  // or simply return \"Internal Server Error\"\n  if (error) return c.text(error.message, 500);\n  if (!result.valid) return c.text(\"Unauthorized\", 401);\n\n  c.set(\"workspaceId\", result.ownerId);\n\n  await next();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up OpenStatus GitHub Action Workflow\nDESCRIPTION: GitHub Action workflow configuration that runs OpenStatus synthetic tests on push to main branch or manual trigger. Uses the OpenStatus GitHub Action with API key authentication.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/guides/how-to-run-synthetic-test-github-action.mdx#2025-04-12_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Run OpenStatus Synthetics CI\n\non:\n  workflow_dispatch:\n  push:\n    branches: [ main ]\n\njobs:\n  synthetic_ci:\n    runs-on: ubuntu-latest\n    name: Run OpenStatus Synthetics CI\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      - name: Run OpenStatus Synthetics CI\n        uses: openstatushq/openstatus-github-action@v1\n        with:\n          api_key: ${{ secrets.OPENSTATUS_API_KEY }}\n```\n\n----------------------------------------\n\nTITLE: React Status Widget Implementation\nDESCRIPTION: Complete React component implementation for displaying service status with TypeScript, Zod validation, and Tailwind CSS styling\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/status-page/advanced/widget.mdx#2025-04-12_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as z from \"zod\";\n\nconst statusEnum = z.enum([\n  \"operational\",\n  \"degraded_performance\",\n  \"partial_outage\",\n  \"major_outage\",\n  \"under_maintenance\",\n  \"unknown\",\n  \"incident\",\n]);\n\nconst statusSchema = z.object({ status: statusEnum });\n\nconst dictionary = {\n  operational: {\n    label: \"Operational\",\n    color: \"bg-green-500\",\n  },\n  degraded_performance: {\n    label: \"Degraded Performance\",\n    color: \"bg-yellow-500\",\n  },\n  partial_outage: {\n    label: \"Partial Outage\",\n    color: \"bg-yellow-500\",\n  },\n  major_outage: {\n    label: \"Major Outage\",\n    color: \"bg-red-500\",\n  },\n  unknown: {\n    label: \"Unknown\",\n    color: \"bg-gray-500\",\n  },\n  incident: {\n    label: \"Incident\",\n    color: \"bg-yellow-500\",\n  },\n  under_maintenance: {\n    label: \"Under Maintenance\",\n    color: \"bg-gray-500\",\n  },\n} as const;\n\nexport async function StatusWidget({ slug }: { slug: string }) {\n  const res = await fetch(`https://api.openstatus.dev/public/status/${slug}`, {\n    next: { revalidate: 60 }, // cache request for 60 seconds\n  });\n  const data = await res.json();\n  const parsed = statusSchema.safeParse(data);\n\n  if (!parsed.success) {\n    return null;\n  }\n\n  const key = parsed.data.status;\n  const { label, color } = dictionary[key];\n\n  return (\n    <a\n      className=\"border-border text-foreground/70 hover:bg-muted hover:text-foreground inline-flex max-w-fit items-center gap-2 rounded-md border px-3 py-1 text-sm\"\n      href={`https://${slug}.openstatus.dev`}\n      target=\"_blank\"\n      rel=\"noreferrer\"\n    >\n      {label}\n      <span className=\"relative flex h-2 w-2\">\n        {parsed.data.status === \"operational\" ? (\n          <span\n            className={`absolute inline-flex h-full w-full animate-ping rounded-full ${color} opacity-75 duration-1000`}\n          />\n        ) : null}\n        <span\n          className={`relative inline-flex h-2 w-2 rounded-full ${color}`}\n        />\n      </span>\n    </a>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Secured API Routes with Hono.js\nDESCRIPTION: Implementation of a monitor API endpoint that uses the workspaceId from the authentication context to secure data access. It retrieves the monitor data from the database, ensuring users can only access their own resources.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/secure-api-with-unkey.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Variables } from \"./index\";\n\nexport const monitorApi = new Hono<{ Variables: Variables }>();\n\nmonitorApi.get(\"/:id\", async (c) => {\n  const workspaceId = c.get(\"workspaceId\");\n  const { id } = c.req.valid(\"param\");\n\n  // ...fetch data from your database [e.g. via Drizzle ORM]\n  const monitor = await db\n    .select()\n    .from(monitor)\n    .where(\n      and(\n        eq(monitor.id, Number(id)),\n        eq(monitor.workspaceId, Number(workspaceId)),\n      ),\n    )\n    .get();\n\n  return c.json(monitor);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstash QStash Keys\nDESCRIPTION: This snippet shows the proper format for setting up Upstash QStash keys in the .env file. It includes the current and next signing keys, as well as the QStash token and URL.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/contributing/setup-env.mdx#2025-04-12_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n# UPSTASH for queue\nQSTASH_CURRENT_SIGNING_KEY=sig_•••••••••••••••••••••••••\nQSTASH_NEXT_SIGNING_KEY=sig_•••••••••••••••••••••••••\nQSTASH_TOKEN=ey••••••••••••••••••••••••••••••••\nQSTASH_URL=https://qstash.upstash.io/v1/publish/\n```\n\n----------------------------------------\n\nTITLE: Adding Event Tracking to Hono OpenAPI Routes\nDESCRIPTION: This code shows how to add event tracking to Hono API routes using the zod-openapi middleware system, applying the tracking middleware to a specific route.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/event-analytics-implementation.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// apps/web/src/pages/post.ts\nimport { createRoute } from \"@hono/zod-openapi\";\nimport { Events } from \"@openstatus/analytics\";\nimport { trackMiddleware } from \"../middleware\";\n\nconst postRoute = createRoute({\n  method: \"post\",\n  tags: [\"page\"],\n  description: \"Create a new Page\",\n  path: \"/\",\n  middleware: [trackMiddleware(Events.CreatePage)],\n  request: { /* ... */ },\n  responses: { /* ... */},\n});\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Using Typed Fetch Function for Custom Status Widget\nDESCRIPTION: Demonstration of using the getStatus function to fetch status data and create a custom status widget. It shows how to access the typed response and status values.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/tools/react.mdx#2025-04-12_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getStatus } from \"@openstatus/react\";\n\n// React Server Component\nasync function CustomStatusWidget() {\n  const res = await getStatus(\"slug\");\n  // ^StatusResponse = { status: Status }\n\n  const { status } = res;\n  // ^Status = \"unknown\" | \"operational\" | \"degraded_performance\" | \"partial_outage\" | \"major_outage\" | \"under_maintenance\" | \"incident\"\n\n  return <div>{/* customize */}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenPanel Analytics SDK\nDESCRIPTION: This snippet sets up the OpenPanel analytics SDK and provides a setupAnalytics function that handles both user identification and event tracking.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/event-analytics-implementation.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// packages/analytics/src/index.ts\nimport {\n  OpenPanel,\n  type PostEventPayload,\n  type IdentifyPayload,\n} from \"@openpanel/sdk\";\nimport { type EventProps } from \"@openstatus/analytics\";\n\nconst op = new OpenPanel({\n  clientId: process.env.OPENPANEL_CLIENT_ID,\n  clientSecret: process.env.OPENPANEL_CLIENT_SECRET,\n});\n\nexport async function setupAnalytics(props: Partial<IdentifyPayload>) {\n  if (props.profileId) {\n    await op.identify(props):  \n  }\n\n  return {\n    track: (opts: EventProps & PostEventPayload[\"properties\"]) => {\n      const { name, ...rest } = opts;\n      return op.track(name, rest);\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Hono.js Base Routes with API Middleware\nDESCRIPTION: Configuration of a Hono.js application with base path and middleware setup. Creates an API instance at /api/v1, applies authentication middleware to all routes, and defines a monitor endpoint.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/secure-api-with-unkey.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { middleware } from \"./middleware\";\nimport { monitorApi } from \"./monitor\";\n\nexport type Variables = { workspaceId: string }; // Context\n\nconst api = new Hono<{ Variables: Variables }>().basePath(\"/api/v1\");\n\napi.use(\"/*\", middleware);\napi.route(\"/monitor\", monitorApi);\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Implementing tRPC Middleware for Event Tracking\nDESCRIPTION: This code creates a tRPC middleware that handles event tracking by processing events defined in procedure metadata. It executes tracking asynchronously after the procedure has completed, and only tracks successful operations.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/event-analytics-implementation.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// packages/trpc/src/index.ts\nimport { after } from \"next/server\";\nimport { initTRPC } from \"@trpc/server\";\nimport { setupAnalytics, type EventProps } from \"@openstatus/analytics\";\nimport type { User } from \"@openstatus/auth\";\n\ntype Context = { user?: User };\ntype Meta = { track?: EventProps };\n\nexport const t = initTRPC\n  .context<Context>()\n  .meta<Meta>()\n  .create({ /* ... */ });\n\n\nconst trackEvent = t.middleware(async opts => {\n  const result = await opts.next(opts.ctx);\n  \n  if (!result.ok) return result;\n\n  if (opts.meta.track) {\n    after(async () => {\n      const identify = opts.ctx.user ? { userId: opts.ctx.user.id } : {};\n      const analytics = await setupAnalytics(identify);\n      await analytics.track(opts.meta.track);\n    })\n  }\n  return result;\n});\n\nconst enforceUserSession = t.middleware(async opts => { \n  // ... set user to ctx\n});\n\nexport const protectedProcedure = t.procedure\n  .use(enforceUserSession)\n  .use(trackEvent);\n```\n\n----------------------------------------\n\nTITLE: Configuring Synthetic Checks in YAML\nDESCRIPTION: Create a config.openstatus.yaml file in the root of your project to specify which synthetic checks to run by listing their monitor IDs.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/cli/commands/run.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntests:\n  ids:\n     - monitor-id-1\n     - monitor-id-2\n```\n\n----------------------------------------\n\nTITLE: Creating and Revoking API Keys with Unkey SDK in Next.js Server Actions\nDESCRIPTION: Server actions for creating and revoking API keys using Unkey's TypeScript SDK. The create function generates a new key with the workspace ID as the owner identifier, while the revoke function invalidates an existing key.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/secure-api-with-unkey.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"use server\";\n\nimport { Unkey } from \"@unkey/api\";\n\nconst unkey = new Unkey({ token: process.env.UNKEY_TOKEN });\n\nexport async function create(ownerId: number) {\n  const key = await unkey.keys.create({\n    apiId: process.env.UNKEY_API_ID,\n    ownerId: String(ownerId), // workspaceId\n    prefix: \"os\", // os_1234567890\n    // include more options like 'ratelimit', 'expires', 'remaining'\n  });\n  return key;\n}\n\nexport async function revoke(keyId: string) {\n  const res = await unkey.keys.revoke({ keyId });\n  return res;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenStatus Synthetics CI in GitHub Workflow\nDESCRIPTION: A simple YAML configuration that demonstrates how to use the OpenStatus GitHub Action in your workflow. It references the action from the marketplace and requires an API key stored in GitHub Secrets.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/changelog/github-action.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Run OpenStatus Synthetics CI\n    uses: openstatushq/openstatus-github-action@v1\n    with:\n        api_key: ${{ secrets.OPENSTATUS_API_KEY }}\n```\n\n----------------------------------------\n\nTITLE: SQLite Table Migration Process in Drizzle ORM\nDESCRIPTION: This SQL snippet demonstrates the manual migration process required when altering tables in SQLite. It shows the four-step process: renaming old tables, dropping them, creating new tables with updated schemas, and handling foreign key relationships.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/migration-planetscale-to-turso.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE `incident` RENAME TO `incident_old`;--> statement-breakpoint\nALTER TABLE `incident_update` RENAME TO `incident_update_old`;--> statement-breakpoint\n\nDROP TABLE `incident_old`;--> statement-breakpoint\nDROP TABLE `incident_update_old`;--> statement-breakpoint\n\nCREATE TABLE `incident` (\n`id` integer PRIMARY KEY NOT NULL,\n`status` text(4) NOT NULL,\n`title` text(256) NOT NULL,\n`created_at` integer DEFAULT (strftime('%s', 'now')),\n`updated_at` integer DEFAULT (strftime('%s', 'now')),\n`workspace_id` integer NOT NULL,\nFOREIGN KEY (`workspace_id`) REFERENCES `workspace`(`id`) ON UPDATE no action ON DELETE cascade\n);\n--> statement-breakpoint\n\nCREATE TABLE `incident_update` (\n`id` integer PRIMARY KEY NOT NULL,\n`status` text(4) NOT NULL,\n`date` integer NOT NULL,\n`message` text NOT NULL,\n`created_at` integer DEFAULT (strftime('%s', 'now')),\n`updated_at` integer DEFAULT (strftime('%s', 'now')),\n`incident_id` integer NOT NULL,\nFOREIGN KEY (`incident_id`) REFERENCES `incident`(`id`) ON UPDATE no action ON DELETE cascade\n);\n--> statement-breakpoint\n```\n\n----------------------------------------\n\nTITLE: Entrypoint Script for OpenStatus GitHub Action\nDESCRIPTION: This bash script serves as the entrypoint for the Docker container. It runs the OpenStatus CLI with the provided API key and optional configuration file, then exits with an appropriate status code.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/how-we-build-our-github-action.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\n\nif [ -z \"$INPUT_CONFIG_PATH\" ]; then\n    /home/openstatus/openstatus run --access-token $INPUT_API_KEY\nelse\n    /home/openstatus/openstatus run --access-token $INPUT_API_KEY --config $INPUT_CONFIG_PATH\nfi\n\nif [ $? -eq 0 ]\nthen\n    echo \"OpenStatus run successfully\"\n    exit 0\nelse\n    echo \"OpenStatus run failed\"\n    exit 1\nfi\n```\n\n----------------------------------------\n\nTITLE: Fetching OpenStatus Monitor Data in Astro\nDESCRIPTION: This TypeScript code fetches monitor data from the OpenStatus API using an API key stored in environment variables. It parses the JSON response using a schema validation, and filters the results to display only specific monitors by their IDs.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/guides/how-deploy-status-page-cf-pages.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await fetch(\"https://api.openstatus.dev/v1/monitor\", {\n  headers: {\n    \"x-openstatus-key\": env.API_KEY,\n  },\n});\n\nconst data = await response.json();\n\n\nconst r = monitorsSchema.parse(data);\n\n// our monitors id\nconst monitorIds = [1]\nconst result = r.filter((m) => monitorIds.find(id => m.id === id) );\n```\n\n----------------------------------------\n\nTITLE: Defining action.yml for OpenStatus GitHub Action\nDESCRIPTION: This YAML file defines the GitHub Action, specifying inputs, branding, and the Docker image to use. It sets up the action to use the OpenStatus CLI with the provided API key and optional configuration file.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/how-we-build-our-github-action.mdx#2025-04-12_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: 'OpenStatus Synthetics CI'\ndescription: 'Run your OpenStatus synthetics checks as part of your GitHub Actions workflow.'\nauthor: 'OpenStatus'\nbranding:\n  icon: 'zap'\n  color: gray-dark\n\ninputs:\n  api_key:\n    description: 'OpenStatus API key'\n    required: true\n  config_path:\n    description: 'Path to the OpenStatus configuration file'\n    required: false\n\nruns:\n  using: docker\n  image: docker://ghcr.io/openstatushq/action:latest\n  args:\n    - ${{ inputs.api_key }}\n    - ${{ inputs.config_path }}\n```\n\n----------------------------------------\n\nTITLE: Executing Tinybird Migration Steps\nDESCRIPTION: Commands for pushing new datasource schema, running backfill operations, and managing migration pipes. This sequence ensures data consistency during schema updates.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/packages/tinybird/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntb push _migration/ping_response.datasource\ntb push _migration/tb_materialized_until_change_ingest.pipe\n# after the given ts, it is time to run the backfill populate\ntb push _migration/tb_backfill_populate.pipe --populate --wait\n# after populate ends, it is time to remove the pipe\ntb pipe rm tb_backfill_populate  --yes\n```\n\n----------------------------------------\n\nTITLE: Status Calculation Function\nDESCRIPTION: Function to calculate service status based on uptime ratio.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/tools/status-widget.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getStatus(ratio: number) {\n  if (isNaN(ratio)) return Status.Unknown;\n  if (ratio >= 0.98) return Status.Operational;\n  if (ratio >= 0.6) return Status.DegradedPerformance;\n  if (ratio >= 0.3) return Status.PartialOutage;\n  if (ratio >= 0) return Status.MajorOutage;\n  return Status.Unknown;\n}\n```\n\n----------------------------------------\n\nTITLE: Event Type Definition in TypeScript\nDESCRIPTION: Defines the core Event type structure used for audit logging. Includes fields for event identification, actor details, affected resources, action type, timestamp, version control, and custom metadata.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/packages/tinybird/src/audit-log/README.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Event = {\n  /**\n   * Unique identifier for the event.\n   */\n  id: string;\n\n  /**\n   * The actor that triggered the event.\n   * @default { id: \"\", name: \"system\" }\n   * @example { id: \"1\", name: \"mxkaske\" }\n   */\n  actor?: {\n    id: string;\n    name: string;\n  };\n\n  /**\n   * The ressources affected by the action taken.\n   * @example [{ id: \"1\", name: \"monitor\" }]\n   */\n  targets?: {\n    id: string;\n    name: string;\n  }[];\n\n  /**\n   * The action that was triggered.\n   * @example monitor.down | incident.create\n   */\n  action: string;\n\n  /**\n   * The timestamp of the event in milliseconds since epoch UTC.\n   * @default Date.now()\n   */\n  timestamp?: number;\n\n  /**\n   * The version of the event. Should be incremented on each update.\n   * @default 1\n   */\n  version?: number;\n\n  /**\n   * Metadata for the event. Defined via zod schema.\n   */\n  metadata?: unknown;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Event Types for Analytics in TypeScript\nDESCRIPTION: This snippet defines the event types structure for analytics tracking, creating a typed record of events with standardized properties including name and channel.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/event-analytics-implementation.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// packages/analytics/src/events.ts\nexport type EventProps = {\n  name: string;\n  channel: string;\n};\n\nexport const Events = {\n  CreatePage: {\n    name: \"page_created\",\n    channel: \"page\",\n  },\n  UpdatePage: {\n    name: \"page_upated\",\n    channel: \"page\",\n  },\n  // ... add more events\n} as const satisfies Record<string, EventProps>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Next.js API Route with both GET and POST Methods\nDESCRIPTION: This code snippet defines a Next.js API route with both GET and POST methods. It uses 'force-dynamic' to prevent static optimization and sets a custom maxDuration to prevent bundling with other similar functions. The GET method returns a simple JSON response while the POST method returns the received body.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/monitoring-latency-vercel-edge-vs-serverless.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from \"next/server\";\n\nexport const dynamic = \"force-dynamic\";\n\nexport const maxDuration = 25; // to trick and not using the same function as the other ping route\n\nexport async function GET() {\n  return NextResponse.json({ ping: \"pong\" }, { status: 200 });\n}\n\nexport async function POST(req: Request) {\n  const body = await req.json();\n  return NextResponse.json({ ping: body }, { status: 200 });\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Monitor via OpenStatus CLI\nDESCRIPTION: Command to manually trigger a specific monitor using its monitor ID.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/cli/commands/monitors.mdx#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nopenstatus monitors trigger <monitor-id>\n```\n\n----------------------------------------\n\nTITLE: Creating Tinybird Endpoint for Response List\nDESCRIPTION: SQL query to create an endpoint in Tinybird for fetching response data with various filtering options.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/contributing/setup-env.mdx#2025-04-12_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\n%\n    SELECT id, latency, monitorId, pageId, region, statusCode, timestamp, url, workspaceId, cronTimestamp\n    FROM ping_response__v4\n    WHERE monitorId = {{ String(monitorId, 'openstatusPing') }}\n    {% if defined(region) %}\n    AND region = {{ String(region) }}\n    {% end %}\n    {% if defined(cronTimestamp) %}\n    AND cronTimestamp = {{ Int64(cronTimestamp) }}\n    {% end %}\n    {% if defined(fromDate) %}\n    AND cronTimestamp >= {{ Int64(fromDate) }}\n    {% end %}\n    {% if defined(toDate) %}\n    AND cronTimestamp <= {{ Int64(toDate) }}\n    {% end %}\n    ORDER BY timestamp DESC\n    LIMIT {{Int32(limit, 1000)}}\n```\n\n----------------------------------------\n\nTITLE: Defining API Schema with Protocol Buffers\nDESCRIPTION: A Protocol Buffer example showing how to define a voting API with message types for requests and responses. The example defines an enum for vote options and messages for handling vote requests and responses.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/introducing-goatstack.mdx#2025-04-12_snippet_0\n\nLANGUAGE: proto\nCODE:\n```\nsyntax = \"proto3\";\n\npackage goat.v1;\n\nenum Vote {\n  YES = 0;\n  NO = 1;\n}\n\nmessage VoteRequest {\n    Vote Vote = 1;\n}\nmessage VoteResponse {\n  bool Success = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Testing API Authentication with curl\nDESCRIPTION: Example curl command to test the secured API endpoint. It demonstrates how to include the API key in the x-openstatus-key header when making requests to the protected route.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/secure-api-with-unkey.mdx#2025-04-12_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'http://localhost:3000/api/v1/monitor/1' \\\n--header 'x-openstatus-key: os_1234567890'\n```\n\n----------------------------------------\n\nTITLE: Creating Tinybird Endpoint for Status Timezone\nDESCRIPTION: SQL query to create an endpoint in Tinybird for aggregating status data by timezone and day, including latency and success rate calculations.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/contributing/setup-env.mdx#2025-04-12_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nVERSION 0\n\nNODE group_by_cronTimestamp\nSQL >\n\n    %\n    SELECT\n        toDateTime(cronTimestamp / 1000, 'UTC') AS day,\n        -- only for debugging purposes\n        toTimezone(day, {{ String(timezone, 'Europe/Berlin') }}) as with_timezone,\n        toStartOfDay(with_timezone) as start_of_day,\n        avg(latency) AS avgLatency,\n        count() AS count,\n        count(multiIf((statusCode >= 200) AND (statusCode <= 299), 1, NULL)) AS ok\n    FROM ping_response__v4\n    WHERE\n        (day IS NOT NULL)\n        AND (day != 0)\n        AND monitorId = {{ String(monitorId, '1') }}\n        -- By default, we only only query the last 45 days\n        AND cronTimestamp >= toUnixTimestamp64Milli(\n            toDateTime64(toStartOfDay(date_sub(DAY, 45, now())), 3)\n        )\n    GROUP BY cronTimestamp, monitorId\n    ORDER BY day DESC\n\n\n\nNODE group_by_day\nSQL >\n\n    %\n    SELECT\n        start_of_day as day,\n        sum(count) as count,\n        sum(ok) as ok,\n        round(avg(avgLatency)) as avgLatency\n    FROM group_by_cronTimestamp\n    GROUP BY start_of_day\n    ORDER BY start_of_day DESC\n    LIMIT {{ Int32(limit, 100) }}\n```\n\n----------------------------------------\n\nTITLE: Creating a Root Layout with Parallel Routes in Next.js\nDESCRIPTION: Implementation of the root layout component in Next.js that utilizes parallel routes to render a breadcrumb alongside the main content. The layout accepts breadcrumb and children as props.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/dynamic-breadcrumb-nextjs.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function RootLayout({\n\tbreadcrumb,\n\tchildren,\n}: Readonly<{\n\tbreadcrumb: React.ReactNode;\n\tchildren: React.ReactNode;\n}>) {\n\treturn (\n\t\t<html lang=\"en\">\n\t\t\t<body>\n\t\t\t\t{breadcrumb}\n\t\t\t\t{children}\n\t\t\t</body>\n\t\t</html>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing React Component with Connect-Query\nDESCRIPTION: A React component that uses connect-query to interact with the GoaT backend service. The component renders a voting interface with Yes/No buttons that trigger mutations to the backend and navigate to a results page after voting.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/introducing-goatstack.mdx#2025-04-12_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// Our wrapper around tanstack query\nimport { useMutation } from \"@connectrpc/connect-query\";\nimport { createFileRoute, Link, useRouter } from \"@tanstack/react-router\";\n// Our generated query\nimport { vote } from \"../gen/proto/goat/v1/goat-GoatService_connectquery\";\n// Our generated types\nimport { Vote } from \"../gen/proto/goat/v1/goat_pb\";\nimport { Button } from \"@goat/ui/components/button\";\n\nexport const Route = createFileRoute(\"/\")({  \n  component: App,\n});\n\nfunction App() {\n  // Use the mutation hook with our generated query\n  const v = useMutation(vote);\n  const { navigate } = useRouter();\n  return (\n    <div>\n      <div >\n        <p>Is this the 🐐 stack?</p>\n        <div>\n          <Button\n            variant={\"outline\"}\n            disabled={v.isPending}\n            onClick={async () => {\n              await v.mutateAsync({\n                Vote: Vote.YES,\n              });\n              navigate({ to: \"/results\" });\n            }}\n          >\n            Yes\n          </Button>\n          <Button\n            variant={\"outline\"}\n            disabled={v.isPending}\n            onClick={async () => {\n              await v.mutateAsync({\n                Vote: Vote.NO,\n              });\n              navigate({ to: \"/results\" });\n            }}\n          >\n            No\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying OpenStatus CLI Installation\nDESCRIPTION: Command to verify the successful installation of the OpenStatus CLI by displaying the help information.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/cli/getting-started.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopenstatus --help\n```\n\n----------------------------------------\n\nTITLE: Using tRPC Events in Router Procedures\nDESCRIPTION: This snippet demonstrates how to use the event tracking middleware in a tRPC procedure by adding metadata that specifies which event to track when the procedure is executed.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/event-analytics-implementation.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// packages/trpc/src/router/page.ts\nimport { Events } from '@openstatus/analytics';\nimport { insertPageSchema } from \"@openstatus/db\";\nimport { createTRPCRouter, protectedProcedure } from \"../trpc\";\n\nexport const pageRouter = createTRPCRouter({\n  create: protectedProcedure\n    .meta({ track: Events.CreatePage })\n    .input(insertPageSchema)\n    .mutation(async (opts) => { /* ... */ })\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Dockerfile for OpenStatus GitHub Action\nDESCRIPTION: This Dockerfile sets up an Alpine-based image, installs curl, downloads the OpenStatus CLI, and sets the entrypoint script. It creates a lightweight image suitable for a GitHub Action.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/how-we-build-our-github-action.mdx#2025-04-12_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine:3.21.3\n\nRUN apk --no-cache add curl\n\nWORKDIR /home/openstatus\n\nCOPY entrypoint.sh .\n\nRUN  curl -o cli.tar.gz -L  https://github.com/openstatusHQ/cli/releases/latest/download/cli_Linux_x86_64.tar.gz\n\nRUN tar -xf ./cli.tar.gz\n\nENTRYPOINT [\"/home/openstatus/entrypoint.sh\"]\n```\n\n----------------------------------------\n\nTITLE: JSON Payload Structure for Monitor Recovery in OpenStatus\nDESCRIPTION: This JSON structure represents the webhook payload sent when a monitored service recovers after a failure. It includes monitor details, timestamp, status information, HTTP status code, and latency metrics.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/alerting/providers/webhook.mdx#2025-04-12_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"monitor\": {\n    \"id\": 1,\n    \"name\": \"test\",\n    \"url\": \"http://openstat.us\"\n  },\n  \"cronTimestamp\": 1744023705307,\n  \"status\": \"recovered\",\n  \"statusCode\": 200,\n  \"latency\": 1337\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Zod Schema for OpenStatus Webhook Payload Validation\nDESCRIPTION: This TypeScript code defines a Zod schema for validating webhook notification payloads. It specifies the required fields for monitor information, timestamp, and status, along with optional fields for status code, latency, and error messages.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/alerting/providers/webhook.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { z } from \"zod\";\n\nexport const PayloadSchema = z.object({\n  monitor: z.object({\n    id: z.number(),\n    name: z.string(),\n    url: z.string(),\n  }),\n  cronTimestamp: z.number(),\n  status: z.enum([\"degraded\", \"error\", \"recovered\"]),\n  statusCode: z.number().optional(),\n  latency: z.number().optional(),\n  errorMessage: z.string().optional(),\n});\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request to OpenStatus Checker API Using cURL in Bash\nDESCRIPTION: This snippet demonstrates how to use cURL to send a POST request to the OpenStatus Checker API endpoint. It includes setting the necessary headers and data payload to test a specific URL from a chosen region.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/changelog/checker-playground.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://checker.openstatus.dev/ping/ams \\\n  --header 'Content-Type: application/json' \\\n  --header 'x-openstatus-key: <YOUR_API_KEY>' \\\n  --header 'prefer-fly-region: ams' \\\n  --data '{\n  \"url\": \"https://api.openstatus.dev/ping\",\n  \"method\": \"GET\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Environment\nDESCRIPTION: Command to initialize the development environment using pnpm\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/contributing/getting-started.mdx#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npnpm dx\n```\n\n----------------------------------------\n\nTITLE: Configuring Resend API Key for Email Functionality\nDESCRIPTION: This snippet shows how to set up the Resend API key in the .env file for email functionality. The API key is obtained from the Resend website and should be pasted into the RESEND_API_KEY variable.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/contributing/setup-env.mdx#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# RESEND for email\nRESEND_API_KEY=re_••••••••••••••••••••••••••••••••\n```\n\n----------------------------------------\n\nTITLE: Rendering Monitor Types Card Grid with Astro Components\nDESCRIPTION: JSX code that creates a card grid layout with link cards for different monitor types (HTTP and TCP) using Astro Starlight components.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/monitoring/overview.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CardGrid>\n    <LinkCard\n        title=\"HTTP Monitor\"\n        href=\"/monitoring/type/http\"\n    />\n    <LinkCard\n        title=\"TCP Monitor\"\n        href=\"/monitoring/type/tcp\"\n    />\n</CardGrid>\n```\n\n----------------------------------------\n\nTITLE: Implementing Vote Handler in Golang\nDESCRIPTION: A Golang implementation of the Vote RPC handler that processes vote requests by storing them in a SQLite database. The function converts the enum vote value to a string, inserts it into the database, and returns a success response.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/introducing-goatstack.mdx#2025-04-12_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (h *goatHandler) Vote(ctx context.Context, req *connect.Request[goatv1.VoteRequest]) (*connect.Response[goatv1.VoteResponse], error) {\n\ttx := h.db.MustBegin()\n\tvar value string\n\tswitch req.Msg.Vote {\n\tcase goatv1.Vote_YES:\n\t\tvalue = \"yes\"\n\t\tbreak\n\tcase goatv1.Vote_NO:\n\t\tvalue = \"no\"\n\t\tbreak\n\tdefault:\n\t\tbreak\n\t}\n\tr := tx.MustExec(\"INSERT INTO vote (timestamp, vote) VALUES ($1, $2)\", time.Now().Unix(), value)\n\ttx.Commit()\n\tres := connect.NewResponse(&goatv1.VoteResponse{\n\t\tSuccess: true,\n\t})\n\treturn res, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Migration Completion\nDESCRIPTION: Commands to verify that all rows have been successfully migrated to the new datasource schema and cleanup of temporary migration pipes.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/packages/tinybird/README.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntb pipe _migration/tb_datasource_union.pipe\n# after checking the result of the pipe\ntb pipe rm tb_datasource_union.pipe --yes\n```\n\n----------------------------------------\n\nTITLE: Displaying HTTP Monitor Image in Markdown\nDESCRIPTION: This code snippet imports and displays an image of the HTTP monitor interface using Astro's Image component. It demonstrates how to include visual aids in the documentation.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/monitoring/type/http.mdx#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Image } from 'astro:assets';\n\nimport HttpMonitor from '../../../../assets/monitor/http-monitor.png';\n\n  <Image\n    src={HttpMonitor}\n    alt=\"Http Monitor\"\n  />\n```\n\n----------------------------------------\n\nTITLE: Configuring Tinybird API Key\nDESCRIPTION: This snippet demonstrates how to set up the Tinybird API key in the .env file. The API key is obtained from the Tinybird workspace and is used for data ingestion and transformation.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/contributing/setup-env.mdx#2025-04-12_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# TinyBird\nTINY_BIRD_API_KEY=\"•••••••••\"\n```\n\n----------------------------------------\n\nTITLE: React Status Widget Implementation\nDESCRIPTION: Complete React component implementation for displaying service status with TypeScript and Zod validation.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/tools/status-widget.mdx#2025-04-12_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as z from \"zod\";\n\nconst statusEnum = z.enum([\n  \"operational\",\n  \"degraded_performance\",\n  \"partial_outage\",\n  \"major_outage\",\n  \"under_maintenance\",\n  \"unknown\",\n  \"incident\",\n]);\n\nconst statusSchema = z.object({ status: statusEnum });\n\nconst dictionary = {\n  operational: {\n    label: \"Operational\",\n    color: \"bg-green-500\",\n  },\n  degraded_performance: {\n    label: \"Degraded Performance\",\n    color: \"bg-yellow-500\",\n  },\n  partial_outage: {\n    label: \"Partial Outage\",\n    color: \"bg-yellow-500\",\n  },\n  major_outage: {\n    label: \"Major Outage\",\n    color: \"bg-red-500\",\n  },\n  unknown: {\n    label: \"Unknown\",\n    color: \"bg-gray-500\",\n  },\n  incident: {\n    label: \"Incident\",\n    color: \"bg-yellow-500\",\n  },\n  under_maintenance: {\n    label: \"Under Maintenance\",\n    color: \"bg-blue-500\",\n  },\n} as const;\n\nexport async function StatusWidget({ slug }: { slug: string }) {\n  const res = await fetch(`https://api.openstatus.dev/public/status/${slug}`, {\n    next: { revalidate: 60 }, // cache request for 60 seconds\n  });\n  const data = await res.json();\n  const parsed = statusSchema.safeParse(data);\n\n  if (!parsed.success) {\n    return null;\n  }\n\n  const key = parsed.data.status;\n  const { label, color } = dictionary[key];\n\n  return (\n    <a\n      className=\"border-border text-foreground/70 hover:bg-muted hover:text-foreground inline-flex max-w-fit items-center gap-2 rounded-md border px-3 py-1 text-sm\"\n      href={`https://${slug}.openstatus.dev`}\n      target=\"_blank\"\n      rel=\"noreferrer\"\n    >\n      {label}\n      <span className=\"relative flex h-2 w-2\">\n        {parsed.data.status === \"operational\" ? (\n          <span\n            className={`absolute inline-flex h-full w-full animate-ping rounded-full ${color} opacity-75 duration-1000`}\n          />\n        ) : null}\n        <span\n          className={`relative inline-flex h-2 w-2 rounded-full ${color}`}\n        />\n      </span>\n    </a>\n  );\n```\n\n----------------------------------------\n\nTITLE: Implementing Controls Context Provider in React\nDESCRIPTION: A React context implementation for managing the expanded/collapsed state of controls in a data table. This pattern reduces unnecessary re-renders by using data attributes and CSS selectors instead of prop changes to control visibility.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/data-table-redesign.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ninterface ControlsContextType {\n  open: boolean;\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport const ControlsContext = React.createContext<ControlsContextType | null>(null);\n\nexport function ControlsProvider({ children }: { children: React.ReactNode }) {\n  const [open, setOpen] = React.useState(true);\n\n  return (\n    <ControlsContext.Provider value={{ open, setOpen }}>\n      <div\n        /**\n         * How to use the controls state without rerendering the children\n         * components that do not consume the context with tailwind:\n         * \"hidden group-data-[expanded=true]/controls:block\" (v3/v4)\n         * \"hidden group-data-expanded/controls:block\" (v4)\n         */\n        className=\"group/controls\"\n        data-expanded={open}\n      >\n        {children}\n      </div>\n    </ControlsContext.Provider>\n  );\n}\n\nexport function useControls() {\n  const context = React.useContext(ControlsContext);\n\n  if (!context) {\n    throw new Error(\"useControls must be used within a ControlsProvider\");\n  }\n\n  return context as ControlsContextType;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fly.io Deployment Settings\nDESCRIPTION: Fly.io deployment configuration file specifying app settings, build parameters, HTTP service configuration, and VM resources. Includes settings for auto-scaling and machine specifications.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/monitoring-latency-cf-workers-fly-koyeb-raylway-render.mdx#2025-04-12_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\napp = 'statuscode'\nprimary_region = 'ams'\n\n[build]\n  dockerfile = \"./Dockerfile\"\n\n[http_service]\n  internal_port = 3000\n  force_https = true\n  auto_stop_machines = true\n  auto_start_machines = true\n  min_machines_running = 0\n  processes = ['app']\n\n[[vm]]\n  cpu_kind = 'shared'\n  cpus = 1\n  memory_mb = 256\n```\n\n----------------------------------------\n\nTITLE: Astro Status Widget Implementation\nDESCRIPTION: Astro component implementation for displaying service status.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/tools/status-widget.mdx#2025-04-12_snippet_6\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport * as z from \"zod\"\n\nconst statusEnum = z.enum([\n  \"operational\",\n  \"degraded_performance\",\n  \"partial_outage\",\n  \"major_outage\",\n  \"under_maintenance\",\n  \"unknown\",\n  \"incident\",\n])\n\nconst statusSchema = z.object({ status: statusEnum })\n\nconst dictionary = {\n  operational: {\n    label: \"Operational\",\n    color: \"bg-green-500\",\n  },\n  degraded_performance: {\n    label: \"Degraded Performance\",\n    color: \"bg-yellow-500\",\n  },\n  partial_outage: {\n    label: \"Partial Outage\",\n    color: \"bg-yellow-500\",\n  },\n  major_outage: {\n    label: \"Major Outage\",\n    color: \"bg-red-500\",\n  },\n  unknown: {\n    label: \"Unknown\",\n    color: \"bg-gray-500\",\n  },\n  incident: {\n    label: \"Incident\",\n    color: \"bg-yellow-500\",\n  },\n  under_maintenance: {\n    label: \"Under Maintenance\",\n    color: \"bg-blue-500\",\n  },\n}\n\nconst slug = Astro.props.slug\n\nconst res = await fetch(`https://api.openstatus.dev/public/status/${slug}`, {\n  // @ts-ignore\n  next: { revalidate: 60 },\n})\nconst data = await res.json()\nconst parsed = statusSchema.safeParse(data)\nif (!parsed.success) {\n  return null\n}\nconst key = parsed.data.status\nconst { label, color } = dictionary[key]\n---\n\n<a\n  class=\"border-border text-foreground/70 hover:bg-muted hover:text-foreground inline-flex max-w-fit items-center gap-2 rounded-md border px-3 py-1 text-sm\"\n  href={`https://${slug}.openstatus.dev`}\n  target=\"_blank\"\n  rel=\"noreferrer\"\n>\n  {label}\n  <span class=\"relative flex h-2 w-2\">\n    {\n      parsed.data.status === \"operational\" ? (\n        <span\n          class:list={[\n            \"absolute\",\n            \"inline-flex\",\n            \"h-full\",\n            \"w-full\",\n            \"animate-ping\",\n            \"rounded-full\",\n            color,\n            \"opacity-75\",\n            \"duration-1000\",\n          ]}\n        />\n      ) : null\n    }\n    <span\n      class:list={[\n        \"relative\",\n        \"inline-flex\",\n        \"h-2\",\n        \"w-2\",\n        \"rounded-full\",\n        color,\n      ]}></span>\n  </span>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Running Database Migration\nDESCRIPTION: Command to execute database migration scripts to update the schema.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/packages/db/README.md#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm migrate\n```\n\n----------------------------------------\n\nTITLE: Client-Side Implementation of Infinite Query with Live Mode\nDESCRIPTION: React component using TanStack's useInfiniteQuery hook to handle both fetching older data (load more) and newer data (live mode). It defines query functions for fetching data in both directions and flattens the paged data for rendering.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/live-mode-infinite-query.mdx#2025-04-12_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport React from \"react\";\nimport { useInfiniteQuery } from \"@tanstack/react-query\";\n\nconst dataOptions = {\n  queryKey: [\n    \"my-key\",\n    // any other keys, e.g. for search params filters\n  ],\n  queryFn: async ({ pageParam }) => {\n    const { cursor, direction } = pageParam;\n    const res = await fetch(\n      `/api/get/data?cursor=${cursor}&direction=${direction}`,\n    );\n    const json = await res.json();\n    // For direction \"next\": { data: [...], nextCursor: 1741526294, prevCursor: null }\n    // For direction \"prev\": { data: [...], nextCursor: null, prevCursor: 1741526295 }\n    return json as ReturnType;\n  },\n  // Initialize with current timestamp and get the most recent data in the past\n  initialPageParam: { cursor: new Date().getTime(), direction: \"next\" },\n\t// Function to fetch newer data\n  getPreviousPageParam: (firstPage, allPages) => {\n    if (!firstPage.prevCursor) return null;\n    return { cursor: firstPage.prevCursor, direction: \"prev\" };\n  },\n\t// Function to fetch older data\n  getNextPageParam: (lastPage, allPages) => {\n    if (!lastPage.nextCursor) return null;\n    return { cursor: lastPage.nextCursor, direction: \"next\" };\n  },\n};\n\nexport function Component() {\n  const { data, fetchNextPage, fetchPreviousPage } = useInfiniteQuery(dataOptions);\n\n  const flatData = React.useMemo(\n    () => data?.pages?.flatMap((page) => page.data ?? []) ?? [],\n    [data?.pages],\n  );\n\n  return <div>{flatData.map((item) => {/* render item */})}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Status API Response Format\nDESCRIPTION: JSON response structure from the status API endpoint\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/status-page/advanced/widget.mdx#2025-04-12_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{ \"status\": \"operational\" }\n```\n\n----------------------------------------\n\nTITLE: JSON Payload Structure for Monitor Failure in OpenStatus\nDESCRIPTION: This JSON structure represents the webhook payload sent when a monitored service fails. It includes monitor details, timestamp, error status, and an error message describing the nature of the failure.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/alerting/providers/webhook.mdx#2025-04-12_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"monitor\": {\n    \"id\": 1,\n    \"name\": \"test\",\n    \"url\": \"http://openstat.us\"\n  },\n  \"cronTimestamp\": 1744023705307,\n  \"status\": \"error\",\n  \"errorMessage\": \"Connection refused\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing API Endpoint for Infinite Query with Live Mode Support\nDESCRIPTION: Next.js API route implementation that handles both 'prev' direction for live mode and 'next' direction for loading more data. It uses SQL queries with timestamp-based cursors to fetch the appropriate data ranges.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/live-mode-infinite-query.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// import ...\n\ntype TData = {\n  id: string;\n  timestamp: number;\n  // ...\n};\n\nexport async function GET(req: NextRequest) {\n  const searchParams = request.nextUrl.searchParams;\n  const cursor = searchParams.get(\"cursor\");\n  const direction = searchParams.get(\"direction\");\n\n  // Live mode\n  if (direction === \"prev\") {\n    const prevCursor = Date.now();\n    const data = await sql`\n      SELECT * FROM table\n      WHERE timestamp > ${cursor} AND timestamp <= ${prevCursor}\n      ORDER BY timestamp DESC\n    `;\n    const res: ReturnType<TData> = { data, prevCursor, nextCursor: null };\n    return Response.json(res);\n    // Load more\n  } else {\n    const data = await sql`\n      SELECT * FROM table\n      WHERE timestamp < ${cursor}\n      ORDER BY timestamp DESC\n      LIMIT 40\n    `;\n    const nextCursor = data.length > 0 ? data[data.length - 1].timestamp : null;\n    const res: ReturnType<TData> = { data, nextCursor, prevCursor: null };\n    return Response.json(res);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the OpenStatus Repository\nDESCRIPTION: Git command to clone the OpenStatus project repository from GitHub to the local machine.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/README.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/openstatushq/openstatus.git\n```\n\n----------------------------------------\n\nTITLE: Implementing StatusWidget in React Server Component\nDESCRIPTION: Example of how to use the StatusWidget component in a React Server Component. It demonstrates basic usage and how to customize the href property.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/tools/react.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StatusWidget } from \"@openstatus/react\";\n\nexport function Page() {\n  return <StatusWidget slug=\"status\" />;\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<StatusWidget slug=\"documenso\" href=\"https://status.documenso.com\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Turso Database Connection in .env\nDESCRIPTION: This snippet shows how to set up the Turso database connection in the .env file. It includes the database URL and authentication token obtained from the Turso CLI.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/contributing/setup-env.mdx#2025-04-12_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n# TURSO SQLITE\nDATABASE_URL=libsql://my-database-example.turso.io\nDATABASE_AUTH_TOKEN=ey••••••••••••••••••••••••••••••••\n```\n\n----------------------------------------\n\nTITLE: Implementing Auto-Refresh for Live Mode in React\nDESCRIPTION: A React component that implements a live mode button with auto-refresh functionality. It uses setTimeout with recursion to periodically fetch new data (using fetchPreviousPage) when live mode is active, ensuring sequential updates.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/live-mode-infinite-query.mdx#2025-04-12_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport * as React from \"react\";\nimport type { FetchPreviousPageOptions } from \"@tanstack/react-query\";\n\nconst REFRESH_INTERVAL = 5_000; // 5 seconds\n\ninterface LiveModeButtonProps {\n\tfetchPreviousPage?: (\n\t\toptions?: FetchPreviousPageOptions | undefined,\n\t) => Promise<unknown>;\n}\n\nexport function LiveModeButton({ fetchPreviousPage }: LiveModeButtonProps) {\n\t// or nuqs [isLive, setIsLive] = useQueryState(\"live\", parseAsBoolean)\n\tconst [isLive, setIsLive] = React.useState(false);\n\n\tReact.useEffect(() => {\n\t\tlet timeoutId: NodeJS.Timeout;\n\n\t\tasync function fetchData() {\n\t\t\tif (isLive) {\n\t\t\t\tawait fetchPreviousPage();\n\t\t\t\t// schedule the next fetch after REFRESH_INTERVAL \n\t\t\t\t// once the current fetch completes\n\t\t\t\ttimeoutId = setTimeout(fetchData, REFRESH_INTERVAL);\n\t\t\t} else {\n\t\t\t\tclearTimeout(timeoutId);\n\t\t\t}\n\t\t}\n\t\tfetchData();\n\n\t\treturn () => clearTimeout(timeoutId);\n\t}, [isLive, fetchPreviousPage]);\n\n\treturn <button onClick={() => setIsLive(!isLive)}>\n\t\t{isLive ? \"Stop live mode\" : \"Start live mode\"}\n\t</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Setting API Key Environment Variable for Cloudflare Pages\nDESCRIPTION: This environment variable configuration sets the OpenStatus API key needed to authenticate API requests. It must be added to the Cloudflare Pages environment settings for the status page to function properly.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/guides/how-deploy-status-page-cf-pages.mdx#2025-04-12_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nAPI_KEY=your-api-key\n```\n\n----------------------------------------\n\nTITLE: Database Environment Configuration\nDESCRIPTION: Environment variables configuration for database connection and authentication in the web app and db package.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/packages/db/README.md#2025-04-12_snippet_2\n\nLANGUAGE: env\nCODE:\n```\nDATABASE_URL=http://127.0.0.1:8080\nDATABASE_AUTH_TOKEN=any-token # no need to change token\n```\n\n----------------------------------------\n\nTITLE: Setting Up Upstash QStash and Redis Variables\nDESCRIPTION: This code block demonstrates the configuration of Upstash QStash and Redis variables in the .env file. It includes variables for QStash signing keys, token, URL, and Redis REST URL and token.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/contributing/setup-env.mdx#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# UPSTASH for queue\nQSTASH_CURRENT_SIGNING_KEY=qstash-current-signing-key\nQSTASH_NEXT_SIGNING_KEY=qstash-next-signing-key\nQSTASH_TOKEN=qstash-token\nQSTASH_URL=https://qstash.upstash.io/v1/publish/\n\n\n# UPSTASH redis for waiting list\nUPSTASH_REDIS_REST_URL=test\nUPSTASH_REDIS_REST_TOKEN=test\n```\n\n----------------------------------------\n\nTITLE: Implementing Hono Middleware for API Route Tracking\nDESCRIPTION: This middleware function for Hono routes tracks events after the response is finalized, ensuring tracking only occurs for successful requests and doesn't block the response.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/event-analytics-implementation.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// app/server/src/middleware.ts\nimport { setupAnalytics, type EventProps } from \"@openstatus/analytics\";\nimport type { Context, Next } from \"hono\";\nimport type { User } from \"@openstatus/auth\";\n\nexport function trackMiddleware(event: EventProps) {\n  return async (c: Context<{ Variables: { user?: User } }, \"/*\">, next: Next) => {\n    await next();\n    \n    const isValid = c.res.status.toString().startsWith(\"2\") && !c.error;\n\n    if (isValid) {\n      setTimeout(async () => {\n        const analytics = await setupAnalytics({\n          profileId: c.get(\"user\")?.id,\n        });\n        await analytics.track(event);\n      }, 0);\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Running Local Turso Database for Development\nDESCRIPTION: Command to start a local Turso database for development purposes using a pre-configured database file.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/contributing/setup-env.mdx#2025-04-12_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nturso dev --db-file openstatus-dev.db\n```\n\n----------------------------------------\n\nTITLE: Customized Size Status Badge Implementation in HTML\nDESCRIPTION: Implementation of the OpenStatus status badge with both dark theme and custom size parameters.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/status-page/advanced/badge.mdx#2025-04-12_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://YOUR-SLUG.openstatus.dev/badge?theme=dark&size=xl\" />\n```\n\n----------------------------------------\n\nTITLE: Running OpenStatus Checker in Docker\nDESCRIPTION: Commands to build a Docker image for the checker service and run it with port 8080 exposed. This allows running the service in a containerized environment.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/checker/README.md#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t checker .\ndocker run -p 8080:8080 checker\n```\n\n----------------------------------------\n\nTITLE: Audit Log Usage Example with Tinybird\nDESCRIPTION: Demonstrates the practical implementation of the audit logging system using Tinybird integration. Shows how to publish and retrieve audit log entries.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/packages/tinybird/src/audit-log/README.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst tb = new Tinybird({ token: process.env.TINY_BIRD_API_KEY || \"\" });\n\nconst auditLog = new AuditLog({ tb });\n\nawait auditLog.publishAuditLog({\n  id: \"monitor:1\",\n  action: \"monitor.down\",\n  targets: [{ id: \"1\", type: \"monitor\" }], // not mandatory, but could be useful later on\n  metadata: { region: \"gru\", statusCode: 400, message: \"timeout\" },\n});\n\nawait auditLog.getAuditLog({ event_id: \"monitor:1\" });\n```\n\n----------------------------------------\n\nTITLE: Scaling OpenStatus Checker to multiple regions in Fly.io\nDESCRIPTION: Command to scale the OpenStatus Checker to 35 instances across multiple global regions in Fly.io for improved geographic distribution and redundancy.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/checker/README.md#2025-04-12_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfly scale count 35 --region   ams,arn,atl,bog,bom,bos,cdg,den,dfw,ewr,eze,fra,gdl,gig,gru,hkg,iad,jnb,lax,lhr,mad,mia,nrt,ord,otp,phx,qro,scl,sjc,sea,sin,syd,waw,yul,yyz\n```\n\n----------------------------------------\n\nTITLE: Fetching Status via API Endpoint\nDESCRIPTION: HTTP request to fetch the current status of a monitored service using the OpenStatus API endpoint.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/tools/status-widget.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.openstatus.dev/public/status/:slug\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenStatus Test IDs in YAML\nDESCRIPTION: Basic YAML configuration file that specifies which OpenStatus monitor IDs to include in the synthetic tests. The IDs can be found in the monitor page URLs.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/guides/how-to-run-synthetic-test-github-action.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntests:\n  ids:\n    - 1\n    - 2\n```\n\n----------------------------------------\n\nTITLE: Dynamic Breadcrumb Component with Catch-All Routes in Next.js\nDESCRIPTION: Implementation of a dynamic breadcrumb component that uses catch-all routes to generate breadcrumbs based on the current URL path. This component is placed in @breadcrumb/[...all]/page.tsx and handles nested routes.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/dynamic-breadcrumb-nextjs.mdx#2025-04-12_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n\tBreadcrumb,\n\tBreadcrumbItem,\n\tBreadcrumbLink,\n\tBreadcrumbList,\n\tBreadcrumbPage,\n\tBreadcrumbSeparator,\n} from \"@/components/ui/breadcrumb\";\nimport React from \"react\";\nimport type { ReactElement } from \"react\";\n\nexport default function BreadcrumbSlot({\n\tparams,\n}: { params: { all: string[] } }) {\n\tconst breadcrumbItems: ReactElement[] = [];\n\tlet breadcrumbPage: ReactElement = <></>;\n\tfor (let i = 0; i < params.all.length; i++) {\n\t\tconst route = params.all[i];\n\t\tconst href = `/${params.all.at(0)}/${route}`;\n\t\tif (i === params.all.length - 1) {\n\t\t\tbreadcrumbPage = (\n\t\t\t\t<BreadcrumbItem>\n\t\t\t\t\t<BreadcrumbPage className=\"capitalize\">{route}</BreadcrumbPage>\n\t\t\t\t</BreadcrumbItem>\n\t\t\t);\n\t\t} else {\n\t\t\tbreadcrumbItems.push(\n\t\t\t\t<React.Fragment key={href}>\n\t\t\t\t\t<BreadcrumbItem>\n\t\t\t\t\t\t<BreadcrumbLink href={href} className=\"capitalize\">\n\t\t\t\t\t\t\t{route}\n\t\t\t\t\t\t</BreadcrumbLink>\n\t\t\t\t\t</BreadcrumbItem>\n\t\t\t\t</React.Fragment>,\n\t\t\t);\n\t\t}\n\t}\n\n\treturn (\n\t\t<Breadcrumb>\n\t\t\t<BreadcrumbList>\n\t\t\t\t<BreadcrumbItem>\n\t\t\t\t\t<BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n\t\t\t\t</BreadcrumbItem>\n\t\t\t\t{breadcrumbItems}\n\t\t\t\t<BreadcrumbSeparator />\n\t\t\t\t{breadcrumbPage}\n\t\t\t</BreadcrumbList>\n\t\t</Breadcrumb>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenStatus React Package via npm\nDESCRIPTION: Command to install the @openstatus/react package using npm.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/tools/react.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @openstatus/react\n```\n\n----------------------------------------\n\nTITLE: Testing OpenStatus API Check with Multiple Regions in TypeScript\nDESCRIPTION: This test function sends a POST request to the OpenStatus API to check the 'https://openstat.us' URL across multiple regions. It uses environment variables for authentication and specifies test parameters such as HTTP method, regions, and run count.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/unrelated/ci-cd-features-block.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntest(\"should fail if slow\", async () => {\n  const data = await fetch(\"https://api.openstatus.dev/v1/check\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"x-openstatus-key\": process.env.OPENSTATUS_API_KEY,\n    },\n    body: JSON.stringify({\n      url: \"https://openstat.us\",\n      method: \"GET\",\n      regions: [\"ams\", \"iad\", \"gru\"],\n      runCount: 5,\n      aggregated: true,\n    }),\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying OpenStatus Server to Fly.io\nDESCRIPTION: Command to deploy the OpenStatus server to Fly.io using a specified configuration and Dockerfile from the root directory.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/server/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflyctl deploy --config apps/server/fly.toml --dockerfile  apps/server/Dockerfile\n```\n\n----------------------------------------\n\nTITLE: Server-Side Breadcrumb Component for Individual Pet Pages in Next.js\nDESCRIPTION: Implementation of a server-side breadcrumb component for individual pet pages that fetches pet data to display the name in the breadcrumb. This component is placed in @breadcrumb/cats/[id]/page.tsx.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/dynamic-breadcrumb-nextjs.mdx#2025-04-12_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n\tBreadcrumbItem,\n\tBreadcrumbLink,\n\tBreadcrumbList,\n\tBreadcrumbPage,\n\tBreadcrumbSeparator,\n} from \"@/components/ui/breadcrumb\";\n\nexport default async function BreadcrumbSlot({params}: {params: {id: string}}) {\n\t// Fetch our cat information from the database\n\tconst cat = await fetchCat({id: params.id});\n\n\treturn (\n\t\t<BreadcrumbList>\n\t\t\t<BreadcrumbItem>\n\t\t\t\t<BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n\t\t\t</BreadcrumbItem>\n\t\t\t<BreadcrumbSeparator />\n\t\t\t<BreadcrumbItem>\n\t\t\t\t<BreadcrumbLink href=\"/cats\">Cats</BreadcrumbLink>\n\t\t\t</BreadcrumbItem>\n\t\t\t<BreadcrumbSeparator />\n\t\t\t<BreadcrumbItem>\n\t\t\t\t<BreadcrumbPage className=\"capitalize\">{cat.name}</BreadcrumbPage>\n\t\t\t</BreadcrumbItem>\n\t\t</BreadcrumbList>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting OpenStatus API Token as Environment Variable\nDESCRIPTION: Command to set the OpenStatus API token as an environment variable for authentication. This allows the CLI to access the OpenStatus API.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/cli/getting-started.mdx#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENSTATUS_API_TOKEN=your-api-token\n```\n\n----------------------------------------\n\nTITLE: Defining Response Type for Infinite Query API in TypeScript\nDESCRIPTION: TypeScript interface for the API response that includes data array and cursor information for pagination. The nextCursor is used for loading older data, while prevCursor is used for fetching newer data in live mode.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/live-mode-infinite-query.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ReturnType<T> = {\n  // The single \"page\" data to be rendered\n  data: T[];\n  // The timestamp to be used for the next page on _load more_\n  nextCursor?: number | null;\n  // The timestamp to be used for the previous page on _live mode_\n  prevCursor?: number | null;\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Status Page Data with cURL\nDESCRIPTION: This command demonstrates how to use cURL to access the public API endpoint for retrieving status page information. Replace `:slug` with your unique status page identifier to get the current status of your page.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/changelog/status-widget.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl https://api.openstatus.dev/public/status/:slug\n```\n\n----------------------------------------\n\nTITLE: Installing OpenStatus React Package\nDESCRIPTION: Commands for installing the @openstatus/react package using various package managers.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/packages/react/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @openstatus/react\npnpm add @openstatus/react\nyarn add @openstatus/react\nbun add @openstatus/react\n```\n\n----------------------------------------\n\nTITLE: Status Response Schema\nDESCRIPTION: JSON response structure from the status API endpoint.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/tools/status-widget.mdx#2025-04-12_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{ \"status\": \"operational\" }\n```\n\n----------------------------------------\n\nTITLE: Using getStatus Utility Function\nDESCRIPTION: Example of using the getStatus function in a React Server Component to fetch status data.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/packages/react/README.md#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getStatus } from \"@openstatus/react\";\n\n// React Server Component\nasync function CustomStatusWidget() {\n  const res = await getStatus(\"slug\");\n  // ^StatusResponse = { status: Status }\n\n  const { status } = res;\n  // ^Status = \"unknown\" | \"operational\" | \"degraded_performance\" | \"partial_outage\" | \"major_outage\" | \"under_maintenance\"\n\n  return <div>{/* customize */}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Status Enum Definition\nDESCRIPTION: TypeScript enum defining all possible status values for the service\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/status-page/advanced/widget.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nenum Status {\n  Operational = \"operational\",\n  DegradedPerformance = \"degraded_performance\",\n  PartialOutage = \"partial_outage\",\n  MajorOutage = \"major_outage\",\n  UnderMaintenance = \"under_maintenance\", // currently not in use\n  Unknown = \"unknown\",\n  Incident = \"incident\",\n}\n```\n\n----------------------------------------\n\nTITLE: Using StatusWidget in React Component\nDESCRIPTION: Implementing the StatusWidget component in a React Server Component with a specified slug.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/packages/react/README.md#2025-04-12_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StatusWidget } from \"@openstatus/react\";\n\nexport function Page() {\n  return <StatusWidget slug=\"status\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS for OpenStatus React Widget\nDESCRIPTION: Tailwind CSS configuration to include styles from the @openstatus/react package.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/tools/react.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// tailwind.config.js\nmodule.exports = {\n  content: [\n    \"./app/**/*.{tsx,ts,mdx,md}\",\n    \"./node_modules/@openstatus/react/**/*.{js,ts,jsx,tsx}\",\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n```\n\n----------------------------------------\n\nTITLE: Status Calculation Function\nDESCRIPTION: TypeScript function that calculates service status based on uptime ratio\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/status-page/advanced/widget.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getStatus(ratio: number) {\n  if (isNaN(ratio)) return Status.Unknown;\n  if (ratio >= 0.98) return Status.Operational;\n  if (ratio >= 0.6) return Status.DegradedPerformance;\n  if (ratio >= 0.3) return Status.PartialOutage;\n  if (ratio >= 0) return Status.MajorOutage;\n  return Status.Unknown;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Upstash Redis Configuration\nDESCRIPTION: This code block shows how to configure Upstash Redis in the .env file. It includes the Redis REST URL and token, which are obtained from the Upstash console.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/contributing/setup-env.mdx#2025-04-12_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n# UPSTASH redis for waiting list\nUPSTASH_REDIS_REST_URL=\"https://•••••••••.upstash.io\"\nUPSTASH_REDIS_REST_TOKEN=\"•••••••••\"\n```\n\n----------------------------------------\n\nTITLE: Installing OpenStatus CLI with Homebrew\nDESCRIPTION: This command installs the OpenStatus CLI package using Homebrew after adding the tap. Once installed, users can run the 'openstatus' command to see all available options.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/changelog/openstatus-cli.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install openstatus\n```\n\n----------------------------------------\n\nTITLE: Basic Status Badge Implementation in HTML\nDESCRIPTION: Basic implementation of the OpenStatus status badge using an image tag with a custom slug.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/status-page/advanced/badge.mdx#2025-04-12_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://YOUR-SLUG.openstatus.dev/badge\" />\n```\n\n----------------------------------------\n\nTITLE: Project Structure for Next.js App with Dynamic Breadcrumbs\nDESCRIPTION: The folder structure of a Next.js application showcasing how to organize files for implementing dynamic breadcrumbs, with routes for about, cats, dogs, and their respective dynamic ID pages.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/dynamic-breadcrumb-nextjs.mdx#2025-04-12_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsrc/\n    app/\n        about/\n            page.tsx\n        cats/\n            page.tsx\n            [id]/\n                page.tsx\n        dogs/\n            page.tsx\n            [id]/\n                page.tsx\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Request to Deployed OpenStatus Checker on Koyeb\nDESCRIPTION: This curl command demonstrates how to call the deployed OpenStatus checker on Koyeb. It sends a POST request to ping a specified region, including authorization headers and a JSON payload with the URL to check.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/guides/how-deploy-checker-koyeb.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://YOUR_KOYEB_URL.koyeb.app/ping/KOYEB_REGION \\\n  --header 'Authorization: Basic test' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"url\": \"https://www.openstatus.dev\",\n  \"method\": \"GET\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Local Turso Database\nDESCRIPTION: Command to create and run a local Turso database instance with a specified database file.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/packages/db/README.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ turso dev --db-file openstatus.db\n```\n\n----------------------------------------\n\nTITLE: Running Docker Image Locally\nDESCRIPTION: Command to run the OpenStatus Docker image locally on port 3000.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/server/README.md#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 3000:3000  registry.fly.io/openstatus-docker:openstatus-docker-v0\n```\n\n----------------------------------------\n\nTITLE: Retrieving Turso Database Information\nDESCRIPTION: These bash commands show the database information and create an authentication token for a Turso database. They're used to obtain the necessary credentials for connecting to the database.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/contributing/setup-env.mdx#2025-04-12_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nturso db show db-name\nturso db tokens create db-name\n```\n\n----------------------------------------\n\nTITLE: Running the OpenStatus Checker locally\nDESCRIPTION: Command to run the OpenStatus Checker service using Go's runtime environment. This executes the main.go file from the cmd directory.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/checker/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo run cmd/main.go\n```\n\n----------------------------------------\n\nTITLE: Using OpenStatus CLI with API Token Option\nDESCRIPTION: Example of running an OpenStatus CLI command with the API token provided as a command-line option for authentication.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/cli/getting-started.mdx#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nopenstatus [COMMAND] --access-token your-api-token\n```\n\n----------------------------------------\n\nTITLE: Creating a New Turso Database\nDESCRIPTION: This bash command creates a new database using the Turso CLI. It's used to set up a cloud-based database for the OpenStatus project.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/contributing/setup-env.mdx#2025-04-12_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nturso db create\n```\n\n----------------------------------------\n\nTITLE: Deploying OpenStatus Checker with Fly.io\nDESCRIPTION: Command to deploy the OpenStatus Checker service to Fly.io, a platform for running applications on a global edge network.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/checker/README.md#2025-04-12_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfly deploy\n```\n\n----------------------------------------\n\nTITLE: SVG Badge Implementation\nDESCRIPTION: HTML implementation for displaying an SVG status badge.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/tools/status-widget.mdx#2025-04-12_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n\t\t<img src='https://[slug].openstatus.dev/badge'>\n```\n\n----------------------------------------\n\nTITLE: Resetting Active Focus Element in React\nDESCRIPTION: Code snippet showing how to reset the active focus element by temporarily adding a tabindex to the body element, focusing it, and then removing the attribute. This provides a way to return to the first focusable element in the document.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/data-table-redesign.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\ndocument.body.setAttribute(\"tabindex\", \"0\");\ndocument.body.focus();\ndocument.body.removeAttribute(\"tabindex\");\n```\n\n----------------------------------------\n\nTITLE: Tinybird Resource Deployment Commands\nDESCRIPTION: Shell commands for deploying datasources and pipes to Tinybird infrastructure.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/packages/tinybird/src/audit-log/README.md#2025-04-12_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ntb push datasources/audit_log.datasource\ntb push pipes/endpoint_audit_log.pipe\n```\n\n----------------------------------------\n\nTITLE: Status Type Definition\nDESCRIPTION: TypeScript type definition for the Status enum used in the OpenStatus package.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/packages/react/README.md#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Status =\n  | \"operational\"\n  | \"degraded_performance\"\n  | \"partial_outage\"\n  | \"major_outage\"\n  | \"under_maintenance\"\n  | \"unknown\"\n  | \"incident\";\n```\n\n----------------------------------------\n\nTITLE: Deploying Astro Status Page to Cloudflare Pages\nDESCRIPTION: This bash command deploys the Astro Status Page to Cloudflare Pages. It uses the npm script 'pages:deploy' which is defined in the project's package.json file and handles the build and deployment process.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/guides/how-deploy-status-page-cf-pages.mdx#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run pages:deploy\n```\n\n----------------------------------------\n\nTITLE: Astro Widget Import Example\nDESCRIPTION: Example of importing and using the Astro Status Widget component.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/tools/status-widget.mdx#2025-04-12_snippet_7\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport StatusWidget from '../../components/StatusWidget.astro'\n---\n\n<StatusWidget slug=\"monitor-slug-here\" />\n```\n\n----------------------------------------\n\nTITLE: Managing Tinybird Pipes\nDESCRIPTION: Basic commands for pulling existing configurations and pushing new pipe configurations with population of aggregate data.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/packages/tinybird/README.md#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntb pull\ntb push aggregate_*.pipe --populate\ntb push endpoint_*.pipe\n...\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Styles for OpenStatus React Widget\nDESCRIPTION: Example of importing CSS styles for the OpenStatus React Widget when not using Tailwind CSS.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/tools/react.mdx#2025-04-12_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// app/layout.tsx\nimport \"@openstatus/react/dist/styles.css\";\n```\n\n----------------------------------------\n\nTITLE: Deploying to Fly.io with Custom Configuration\nDESCRIPTION: This command deploys the application to Fly.io using a custom configuration file and Dockerfile. It should be run from the root directory of the project.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/workflows/README.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflyctl deploy --config apps/workflows/fly.toml --dockerfile  apps/workflows/Dockerfile\n```\n\n----------------------------------------\n\nTITLE: Embedding OpenStatus Status Badge\nDESCRIPTION: HTML code snippet for embedding a service status badge from OpenStatus. Replace YOUR-SLUG with your OpenStatus service identifier to display the current status.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/changelog/status-page-badge.mdx#2025-04-12_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://YOUR-SLUG.openstatus.dev/badge\" />\n```\n\n----------------------------------------\n\nTITLE: Pushing to Fly Registry\nDESCRIPTION: Command to push the Docker image to Fly.io registry.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/server/README.md#2025-04-12_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker push registry.fly.io/openstatus-docker:openstatus-docker-v0\n```\n\n----------------------------------------\n\nTITLE: Basic Breadcrumb Component for Homepage in Next.js\nDESCRIPTION: Implementation of a basic breadcrumb component for the homepage in Next.js. This component is placed in @breadcrumb/page.tsx and displays only the Home link.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/dynamic-breadcrumb-nextjs.mdx#2025-04-12_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n\tBreadcrumb,\n\tBreadcrumbItem,\n\tBreadcrumbLink,\n\tBreadcrumbList,\n} from \"@/components/ui/breadcrumb\";\n\nexport default function BreadcrumbSlot() {\n\treturn (\n\t\t<Breadcrumb>\n\t\t\t<BreadcrumbList>\n\t\t\t\t<BreadcrumbItem>\n\t\t\t\t\t<BreadcrumbLink href=\"/\">Home</BreadcrumbLink>\n\t\t\t\t</BreadcrumbItem>\n\t\t\t</BreadcrumbList>\n\t\t</Breadcrumb>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image Locally\nDESCRIPTION: Command to build a Docker image locally with specific tag and platform configuration.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/server/README.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build . -t registry.fly.io/openstatus-docker:openstatus-docker-v0  --file  ./apps/server/Dockerfile --platform linux/amd64\n```\n\n----------------------------------------\n\nTITLE: Initializing Development Database\nDESCRIPTION: Command to launch the Turso development database with a specified database file\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/contributing/getting-started.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nturso dev --db-file openstatus-dev.db\n```\n\n----------------------------------------\n\nTITLE: Problematic Offset-Based Pagination Example for Reference\nDESCRIPTION: An example of using OFFSET for pagination, which is not recommended for applications with frequent data updates. This approach can cause duplicate items when new data is added during pagination.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/live-mode-infinite-query.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst limit = 40;\nconst offset = limit * cursor;\n\nconst data = await sql`\n  SELECT * FROM table \n  ORDER BY timestamp DESC \n  LIMIT ${limit} \n  OFFSET ${offset}\n`;\n```\n\n----------------------------------------\n\nTITLE: Deploying to Fly\nDESCRIPTION: Command to deploy the Docker image to Fly.io using a specific image from the registry.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/server/README.md#2025-04-12_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nflyctl deploy --app openstatus-docker \\\n  --image registry.fly.io/openstatus-docker:openstatus-docker-v0\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install project dependencies using pnpm package manager\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/contributing/getting-started.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying Status Page Image in Astro\nDESCRIPTION: This snippet shows how to import and display an image of a status page using Astro's image component. It imports the Image component from Astro and a local status page image, then renders it with alt text.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/status-page/overview.mdx#2025-04-12_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<Image\n    src={StatusPage}\n    alt=\"OpenStatus status page\"\n  />\n```\n\n----------------------------------------\n\nTITLE: Installing OpenStatus CLI via Homebrew\nDESCRIPTION: Commands to install the OpenStatus CLI using Homebrew package manager. This involves tapping the OpenStatus repository and then installing the CLI tool.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/cli/getting-started.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap openstatus/cli\n```\n\nLANGUAGE: bash\nCODE:\n```\nbrew install openstatus\n```\n\n----------------------------------------\n\nTITLE: React Widget Import Example\nDESCRIPTION: Example of importing and using the React Status Widget component.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/tools/status-widget.mdx#2025-04-12_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport StatusWidget from '../../components/StatusWidget.tsx'\n\n\n<StatusWidget slug=\"monitor-slug-here\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for OpenStatus\nDESCRIPTION: Command to install project dependencies using pnpm package manager for the OpenStatus project.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/README.md#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Fetching Status API Endpoint\nDESCRIPTION: cURL command to fetch the status from the OpenStatus public API endpoint using a page slug\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/status-page/advanced/widget.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.openstatus.dev/public/status/:slug\n```\n\n----------------------------------------\n\nTITLE: Installing OpenStatus CLI with Homebrew Tap\nDESCRIPTION: This command adds the OpenStatus repository to Homebrew's tap list, making the OpenStatus CLI package available for installation.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/changelog/openstatus-cli.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap openstatus/cli\n```\n\n----------------------------------------\n\nTITLE: Status Enum Definition\nDESCRIPTION: TypeScript enum defining all possible status values for the service monitoring.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/tools/status-widget.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nenum Status {\n  Operational = \"operational\",\n  DegradedPerformance = \"degraded_performance\",\n  PartialOutage = \"partial_outage\",\n  MajorOutage = \"major_outage\",\n  UnderMaintenance = \"under_maintenance\", // currently not in use\n  Unknown = \"unknown\",\n  Incident = \"incident\",\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Turso with Local SQLite Database\nDESCRIPTION: This bash command starts Turso with a local SQLite database named 'openstatus.db'. It's used for local development and testing of the OpenStatus project.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/contributing/setup-env.mdx#2025-04-12_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nturso dev --db-file openstatus.db\n```\n\n----------------------------------------\n\nTITLE: Launching Web Application\nDESCRIPTION: Command to start the web application in development mode on port 3000\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/contributing/getting-started.mdx#2025-04-12_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npnpm dev:web\n```\n\n----------------------------------------\n\nTITLE: Setting Up Tinybird CLI Environment\nDESCRIPTION: Commands for setting up a Python virtual environment and installing the Tinybird CLI tool for migration operations.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/packages/tinybird/README.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv .venv\nsource .venv/bin/activate\npip install tinybird-cli\ntb auth -i\n```\n\n----------------------------------------\n\nTITLE: Running Development Server with Bun\nDESCRIPTION: This command starts the development server using Bun. After running, the application will be accessible at http://localhost:3000.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/workflows/README.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbun run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Turso SQLite Database Manager\nDESCRIPTION: This bash command installs the Turso SQLite database manager using Homebrew. It's used for local database setup and management in the OpenStatus project.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/contributing/setup-env.mdx#2025-04-12_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbrew tap libsql/sqld\nbrew install sqld-beta\n```\n\n----------------------------------------\n\nTITLE: Dark Theme Status Badge Implementation in HTML\nDESCRIPTION: Implementation of the OpenStatus status badge with dark theme parameter.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/status-page/advanced/badge.mdx#2025-04-12_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://YOUR-SLUG.openstatus.dev/badge?theme=dark\" />\n```\n\n----------------------------------------\n\nTITLE: SQLite Migration Error Message in Drizzle ORM\nDESCRIPTION: This code snippet shows the error message generated by Drizzle ORM when attempting to drop a NOT NULL constraint from a column in SQLite. It explains that SQLite doesn't support this operation directly and manual migration steps are required.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/migration-planetscale-to-turso.mdx#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/*\n SQLite does not support \"Drop not null from column\" out of the box,\n we do not generate automatic migration for that, so it has to be done manually\n Please refer to: <https://www.techonthenet.com/sqlite/tables/alter_table.php>\n                  <https://www.sqlite.org/lang_altertable.html>\n                  <https://stackoverflow.com/questions/2083543/modify-a-columns-type-in-sqlite3>\n\n Due to that we don't generate migration automatically\n and it has to be done manually\n*/\n```\n\n----------------------------------------\n\nTITLE: Retrieving Monitor Information via OpenStatus CLI\nDESCRIPTION: Command to get detailed information about a specific monitor using its monitor ID.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/cli/commands/monitors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenstatus monitors info <monitor-id>\n```\n\n----------------------------------------\n\nTITLE: Starting Drizzle Studio for Database Management\nDESCRIPTION: Commands to navigate to the database package directory and start Drizzle Studio for database management and visualization.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/contributing/setup-env.mdx#2025-04-12_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/db\npnpm studio\n```\n\n----------------------------------------\n\nTITLE: Fly.io Deployment Timeout Configuration\nDESCRIPTION: Command to increase the deployment timeout duration on Fly.io to prevent deployment failures.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/migration-backend-from-vercel-to-fly.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflyctl deploy --wait-timeout=500\n```\n\n----------------------------------------\n\nTITLE: Running OpenStatus Notification Webhook with Bun\nDESCRIPTION: This command executes the main TypeScript file (src/index.ts) of the OpenStatus notification webhook project using Bun runtime.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/packages/notifications/webhook/README.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbun run src/index.ts\n```\n\n----------------------------------------\n\nTITLE: Running Synthetic Checks via Command Line\nDESCRIPTION: Execute the openstatus run command to run the synthetic checks defined in your configuration file.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/cli/commands/run.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopenstatus run\n```\n\n----------------------------------------\n\nTITLE: Installing pnpm Package Manager\nDESCRIPTION: Command to install pnpm globally using npm\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/contributing/requirements.mdx#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g pnpm\n```\n\n----------------------------------------\n\nTITLE: Listing Monitors via OpenStatus CLI\nDESCRIPTION: Command to list all active monitors. Includes optional --all flag to show inactive monitors as well.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/cli/commands/monitors.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopenstatus monitors list\n```\n\n----------------------------------------\n\nTITLE: Setting environment variables in Fish shell\nDESCRIPTION: Commands to set required environment variables in the Fish shell. This includes CRON_SECRET, CLOUD_PROVIDER, and TINYBIRD_TOKEN which are necessary for the checker service to function.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/checker/README.md#2025-04-12_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\nset CRON_SECRET YOLO\nset CLOUD_PROVIDER local\nset TINYBIRD_TOKEN random\n```\n\n----------------------------------------\n\nTITLE: Running the Notification Service\nDESCRIPTION: Command to execute the notification service by running the main TypeScript file using Bun runtime.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/packages/notifications/ntfy/README.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbun run src/index.ts\n```\n\n----------------------------------------\n\nTITLE: Generating Dockerfile with Dofigen\nDESCRIPTION: Commands to update dependent image versions and generate Dockerfile using Dofigen tool from the apps/server directory.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/server/README.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Update the dependent image versions\ndofigen update\n# Generate the Dockerfile\ndofigen gen\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Bun\nDESCRIPTION: Command to install project dependencies using the Bun package manager\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/packages/notifications/discord/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun install\n```\n\n----------------------------------------\n\nTITLE: Authenticating Turso CLI\nDESCRIPTION: This bash command authenticates the Turso CLI, which is necessary for creating and managing cloud-based databases with Turso.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/contributing/setup-env.mdx#2025-04-12_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nturso auth login\n```\n\n----------------------------------------\n\nTITLE: Launching Development Database for OpenStatus\nDESCRIPTION: Command to start a Turso development database for local OpenStatus development.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/README.md#2025-04-12_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nturso dev --db-file openstatus-dev.db\n```\n\n----------------------------------------\n\nTITLE: Generating Dockerfile with Dofigen\nDESCRIPTION: This command generates the Dockerfile using Dofigen. It should be run from the apps/workflows directory after updating the dependent image versions.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/workflows/README.md#2025-04-12_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndofigen gen\n```\n\n----------------------------------------\n\nTITLE: Running the Discord Notifications Module\nDESCRIPTION: Command to execute the Discord notifications module using Bun runtime with TypeScript support\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/packages/notifications/discord/README.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbun run src/index.ts\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Command to run the Next.js development server using pnpm. This will start the local development environment for the project.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Starting Web App for OpenStatus Development\nDESCRIPTION: Command to start the OpenStatus web application in development mode.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/README.md#2025-04-12_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\npnpm dev:web\n```\n\n----------------------------------------\n\nTITLE: Configuring Litestream for Database Replication\nDESCRIPTION: A YAML configuration for Litestream that sets up database replication to an S3-compatible storage bucket. The configuration specifies the path to the SQLite database and provides connection details for the Cloudflare R2 storage service.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/introducing-goatstack.mdx#2025-04-12_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndbs:\n  - path: /data/db\n    replicas:\n      - type: s3\n        endpoint: https://${CLOUDFLARE_R2_ACCOUNT_ID}.r2.cloudflarestorage.com/\n        bucket: goat-stack\n        access-key-id: ${CLOUDFLARE_R2_ACCESS_KEY_ID}\n        secret-access-key: ${CLOUDFLARE_R2_SECRET_ACCESS_KEY}\n```\n\n----------------------------------------\n\nTITLE: Building the OpenStatus Checker executable\nDESCRIPTION: Command to compile all Go files in the current directory into a single executable named 'checker'.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/checker/README.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo build -o checker *.go\n```\n\n----------------------------------------\n\nTITLE: Accessing the OpenStatus Docker Checker Image\nDESCRIPTION: The Docker image path for the OpenStatus checker, which can be pulled from GitHub Container Registry for deployment in various environments.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/changelog/docker-checker.mdx#2025-04-12_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\nghcr.io/openstatushq/checker:latest\n```\n\n----------------------------------------\n\nTITLE: Cloning OpenStatus Repository\nDESCRIPTION: Command to clone the OpenStatus project repository from GitHub to local machine\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/contributing/getting-started.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/openstatushq/openstatus.git\n```\n\n----------------------------------------\n\nTITLE: Initializing the GoaT Stack Project\nDESCRIPTION: A bash command that initializes the GoaT stack project by downloading all dependencies using the 'just' command runner.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/introducing-goatstack.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\njust init\n```\n\n----------------------------------------\n\nTITLE: Rendering Incident Detail Image in JSX\nDESCRIPTION: This code snippet renders an image of the incident detail page using the Image component from Astro. It displays a visual representation of the incident page, showing details such as the failed monitor and incident duration.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/incident/incident-detail.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n  <Image\n    src={IncidentDetail}\n    alt=\"Incident page\"\n  />\n```\n\n----------------------------------------\n\nTITLE: Importing OpenStatus Styles in Next.js\nDESCRIPTION: Importing the OpenStatus styles in the Next.js App Router layout file.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/packages/react/README.md#2025-04-12_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// app/layout.tsx\nimport \"@openstatus/react/dist/styles.css\";\n```\n\n----------------------------------------\n\nTITLE: Status Page URL Format\nDESCRIPTION: Shows the URL format for accessing a status page using the default OpenStatus domain. The slug is a custom identifier chosen during status page creation.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/status-page/create-status-page.mdx#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://<slug>.openstatus.dev/\n```\n\n----------------------------------------\n\nTITLE: Rendering Image Component in JSX for OpenStatus Status Page Description\nDESCRIPTION: This code snippet demonstrates how to import and use the Image component from Astro to display a screenshot of the OpenStatus status page description settings.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/status-page/advanced/description.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n  <Image\n    src={StatusPage}\n    alt=\"OpenStatus status page\"\n  />\n```\n\n----------------------------------------\n\nTITLE: Cloudflare Workers Request Flow Description\nDESCRIPTION: Diagram showing the request flow path from CF workers through Koyeb's Global load balancer to the backend\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/monitoring-latency-cf-workers-fly-koyeb-raylway-render.mdx#2025-04-12_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nCf workers -> koyeb Global load balancer -> koyeb backend\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind for OpenStatus Widget\nDESCRIPTION: Tailwind configuration to include OpenStatus Widget styles in the content array.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/packages/react/README.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// tailwind.config.js\nmodule.exports = {\n  content: [\n    \"./app/**/*.{tsx,ts,mdx,md}\",\n    // OpenStatus Widget\n    \"./node_modules/@openstatus/react/**/*.{js,ts,jsx,tsx}\",\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Tinybird CLI in Python Virtual Environment\nDESCRIPTION: Sets up a Python virtual environment and installs the Tinybird CLI for data processing tasks.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/contributing/setup-env.mdx#2025-04-12_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/tinybird\npython3 -m venv .venv\nsource .venv/bin/activate\npip install tinybird-cli\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for OpenStatus Notification Webhook with Bun\nDESCRIPTION: This command installs the necessary dependencies for the OpenStatus notification webhook project using Bun package manager.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/packages/notifications/webhook/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun install\n```\n\n----------------------------------------\n\nTITLE: Displaying TCP Monitor Image in Markdown\nDESCRIPTION: This snippet imports and displays an image of a TCP monitor using Astro's Image component. It sets the source and alt text for the image.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/monitoring/type/tcp.mdx#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { Image } from 'astro:assets';\n\nimport TCPMonitor from '../../../../assets/monitor/tcp-monitor.png';\n\n  <Image\n    src={TCPMonitor}\n    alt=\"TCP Monitor\"\n  />\n```\n\n----------------------------------------\n\nTITLE: Installing Devbox for OpenStatus Development\nDESCRIPTION: Command to install Devbox, a development environment manager used for the OpenStatus project setup.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -fsSL https://get.jetify.com/devbox | bash\n```\n\n----------------------------------------\n\nTITLE: Checking pnpm Version\nDESCRIPTION: Command to verify the installed version of pnpm\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/contributing/requirements.mdx#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm --version\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Bun\nDESCRIPTION: Command to install project dependencies using Bun package manager.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/packages/notifications/ntfy/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun install\n```\n\n----------------------------------------\n\nTITLE: Initializing Development Environment for OpenStatus\nDESCRIPTION: Command to initialize the development environment for OpenStatus project.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/README.md#2025-04-12_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npnpm dx\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Version\nDESCRIPTION: Command to verify the installed version of Node.js\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/contributing/requirements.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode --version\n```\n\n----------------------------------------\n\nTITLE: Updating Dependent Image Versions with Dofigen\nDESCRIPTION: This command updates the dependent image versions using Dofigen. It should be run from the apps/workflows directory.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/workflows/README.md#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndofigen update\n```\n\n----------------------------------------\n\nTITLE: Render Free Tier Shutdown Policy\nDESCRIPTION: Documentation excerpt explaining Render's free tier service shutdown policy after 15 minutes of inactivity\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/monitoring-latency-cf-workers-fly-koyeb-raylway-render.mdx#2025-04-12_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nRender spins down a Free web service that goes 15 minutes without receiving inbound traffic. Render spins the service back up whenever it next receives a request to process.\n```\n\n----------------------------------------\n\nTITLE: Starting Devbox Services for OpenStatus\nDESCRIPTION: Command to install project dependencies, build and start services using Devbox for OpenStatus development.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/README.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndevbox services up\n```\n\n----------------------------------------\n\nTITLE: Referencing React Component in Markdown\nDESCRIPTION: Markdown code snippet showing a generic React component syntax, used in the context of discussing future API designs for the OpenStatus project.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/data-table-redesign.mdx#2025-04-12_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n`<Component />`\n```\n\n----------------------------------------\n\nTITLE: Rendering Overview Image with Astro Components\nDESCRIPTION: JSX code that imports and renders an image component from Astro to display an overview chart showing status codes and response times for synthetic monitoring.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/monitoring/overview.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n    src={overview}\n    alt=\"Charts with status code and response time\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Community Links Card Grid\nDESCRIPTION: Creates a grid of link cards for users to join the OpenStatus community through Discord and Bluesky social platforms.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/index.mdx#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<CardGrid>\n<LinkCard href=\"https://www.openstatus.dev/discord\" title=\"Discord\"/>\n<LinkCard href=\"https://bsky.app/profile/openstatus.dev\" title=\"Bluesky\" />\n</CardGrid>\n```\n\n----------------------------------------\n\nTITLE: Importing Aside Component in MDX\nDESCRIPTION: Import statement for the Aside component from Starlight's component library, used for displaying premium feature notice.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/status-page/work/subscribers.mdx#2025-04-12_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport { Aside } from '@astrojs/starlight/components';\n```\n\n----------------------------------------\n\nTITLE: Creating Documentation Card Grid Navigation\nDESCRIPTION: Constructs a grid of navigation cards using Astro components to guide users to different sections of the documentation, including monitoring, guides, CLI, API, and GitHub repository.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/index.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CardGrid >\n\t<Card title=\"Synthetic Monitoring\" icon=\"open-book\">\n\t\tLearn how to <a href=\"/monitoring/create-monitor\">create</a> your first monitor with OpenStatus.\n\t</Card>\n\t<Card title=\"Guides \" icon=\"rocket\">\n\t\tRead our <a href=\"guides/introduction/\">guides</a> to discover what you can do with OpenStatus\n\t</Card>\n\t<Card title=\"CLI\" icon=\"seti:shell\">\n\t\tLearn more about our [CLI](/cli/getting-started) to manage and run your synthetic check.\n\t</Card>\n\t<Card title=\"API Reference\" icon=\"puzzle\">\n\t\tUse our <a href=\"https://api.openstatus.dev/v1\">API</a> to build amazing things on top of OpenStatus\n\t</Card>\n\t<Card title=\"Open Source\" icon=\"seti:github\">\n\t\tCheckout our [GitHub repository](https://www.github.com/openstatushq/openstatus) to contribute or report issues.\n\t</Card>\n</CardGrid>\n```\n\n----------------------------------------\n\nTITLE: Rendering Discord Notification Image\nDESCRIPTION: JSX code for displaying the Discord notification example image using Astro's Image component.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/alerting/overview.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n  <Image\n    src={DiscordNotification}\n    alt=\"Create your notification bot\"\n  />\n```\n\n----------------------------------------\n\nTITLE: Folder Structure for OpenStatus Light Viewer Dashboard\nDESCRIPTION: Directory structure showing the key components of the data-table-filters project implementation. Each file serves a specific purpose in building the dashboard, from API routing to search parameter handling.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/openstatus-light-viewer.mdx#2025-04-12_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n/src/app/light\n├── api\n│   └── route.ts\n├── client.tsx\n├── columns.tsx\n├── constants.tsx\n├── layout.tsx\n├── page.tsx\n├── query-options.ts\n└── search-params.ts\n```\n\n----------------------------------------\n\nTITLE: Importing Astro Components in Documentation Page\nDESCRIPTION: Imports Card, CardGrid, and LinkCard components from the Starlight component library to build the documentation interface, along with a custom CSS file for styling.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/index.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Card, CardGrid, LinkCard } from '@astrojs/starlight/components';\nimport \"../../custom.css\"\n```\n\n----------------------------------------\n\nTITLE: Defining Status Page Changelog in Markdown\nDESCRIPTION: Markdown frontmatter and content describing status page updates including new color schemes for different states, navigation changes, and status report redesign.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/changelog/status-page-colors-and-more.mdx#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Status Page rework\ndescription: New status specific colors, improved navigation and more.\npublishedAt: 2024-07-21\nimage: /assets/changelog/status-page-colors-and-more.png\n---\n```\n\n----------------------------------------\n\nTITLE: Notification Channels Card Grid\nDESCRIPTION: JSX markup defining the grid of notification channel options using Starlight's LinkCard components.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/alerting/overview.mdx#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<CardGrid>\n  <LinkCard title=\"Email ✉️\" href=\"/alerting/providers/email\" description=\" Receive an email\"/>\n  <LinkCard title=\"Slack 📣\" href=\"/alerting/providers/slack\" description=\"Get notified on Slack\" />\n  <LinkCard title=\"Discord 🤖\" href=\"/alerting/providers/discord\" description=\"Get notified on Discord\" />\n  <LinkCard title=\"SMS 📱\" href=\"/alerting/providers/sms\" description=\"Receive a text message\" />\n  <LinkCard title=\"ntfy.sh 🔔\" href=\"/alerting/providers/ntfy\" description=\"Receive a ntfy.sh notification\" />\n  <LinkCard title=\"Pagerduty 📟\" href=\"/alerting/providers/pagerduty\" description=\"Receive a pagerduty notification\"/ >\n  <LinkCard title=\"Phone 📞\" href=\"/alerting/providers/phone-call\" description=\"Get called on your phone\" />\n  <LinkCard title=\"Telegram 📡\" href=\"/alerting/providers/telegram\" description=\"Get notified on Telegram\" />\n  <LinkCard title=\"Webhook 🌐\" href=\"/alerting/providers/webhook\" description=\"Get notified by webhook\" />\n\n</CardGrid>\n```\n\n----------------------------------------\n\nTITLE: Monitor Cost Calculation\nDESCRIPTION: Mathematical calculation showing the monthly execution units and cost for running monitors on Vercel's Edge Functions across multiple regions.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/migration-backend-from-vercel-to-fly.mdx#2025-04-12_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n6 (10 min monitors) * 24 * 30 * 3 (average execution unit per monitor) * 6 (number of regions) = 77,760 executions units per month\n\n77,600 * (2/1,000,000) = 0.15c per monitor monthly\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js on Ubuntu Linux\nDESCRIPTION: Commands to install Node.js using apt package manager on Ubuntu Linux systems\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/contributing/requirements.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install nodejs\n```\n\n----------------------------------------\n\nTITLE: Starlight Project Structure\nDESCRIPTION: Directory structure of a typical Starlight + Astro project showing the organization of documentation files, assets, and configuration.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/README.md#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── public/\n├── src/\n│   ├── assets/\n│   ├── content/\n│   │   ├── docs/\n│   │   └── config.ts\n│   └── env.d.ts\n├── astro.config.mjs\n├── package.json\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Importing Components in OpenStatus Documentation\nDESCRIPTION: JSX component imports used for building the notification documentation page using Astro and Starlight components.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/alerting/overview.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Card } from '@astrojs/starlight/components';\nimport { CardGrid } from '@astrojs/starlight/components';\nimport { Image } from 'astro:assets';\nimport { LinkCard } from '@astrojs/starlight/components';\nimport DiscordNotification from '../../../assets/notification/discord-notification.png';\n```\n\n----------------------------------------\n\nTITLE: Calculating Self-Hosting Costs for Multi-Region Monitoring\nDESCRIPTION: A simple calculation demonstrating the monthly cost estimate for self-hosting a monitoring service across 35 regions using Fly Machines, showing why the $30 Starter plan offers better value.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/pricing-update-july-2024.mdx#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n35 (Number of Fly Regions) * $3 (Average price per Fly Machine) = $105 per month\n```\n\n----------------------------------------\n\nTITLE: Implementing NextAuth Adapter with Drizzle ORM\nDESCRIPTION: Code referenced but not directly shown. Explains extending the NextAuth adapter with custom user schema using Drizzle ORM, including overriding getUser and createUser functions to match existing database schema.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/migration-auth-clerk-to-next-auth.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Reference to implementation at:\n// https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/lib/auth/adapter.ts\n```\n\n----------------------------------------\n\nTITLE: Launching Drizzle Studio\nDESCRIPTION: Command to start Drizzle Studio for database visualization and management.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/packages/db/README.md#2025-04-12_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm studio\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying Image in JSX\nDESCRIPTION: This code snippet imports an Image component from Astro and a specific image file. It then uses the Image component to display the imported image with alt text.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/status-page/advanced/icon.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Image } from 'astro:assets';\n\nimport StatusPage from '../../../../assets/status-page/favicon.png';\n\n  <Image\n    src={StatusPage}\n    alt=\"OpenStatus status page\"\n  />\n```\n\n----------------------------------------\n\nTITLE: API Component Reference in Markdown\nDESCRIPTION: Reference to status-check implementation in OG image API context\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/packages/tracker/README.md#2025-04-12_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nstatus-check\n```\n\n----------------------------------------\n\nTITLE: Referencing API Endpoint Change in Markdown\nDESCRIPTION: This snippet shows the new API endpoint for status reports, replacing the previous incidents endpoint. It also includes a link to the documentation for more information.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/changelog/golang-monitor-checker.mdx#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> The API endpoint has also moved from `/v1/incidents` to `/v1/status_reports`.\n> Read more in the [docs](https://docs.openstatus.dev/incident/overview).\n```\n\n----------------------------------------\n\nTITLE: Extending Protocol Buffer Service Definition\nDESCRIPTION: Extended Protocol Buffer definition that adds new procedures to the GoatService including methods for getting votes and submitting votes, along with their respective request and response message types.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/introducing-goatstack.mdx#2025-04-12_snippet_2\n\nLANGUAGE: proto\nCODE:\n```\nservice GoatService {\n    rpc GetVotes(GetVotesRequest) returns (GetVotesResponse) {}\n    rpc Vote(VoteRequest) returns (VoteResponse) {}\n}\n\nmessage GetVotesRequest {}\n\nmessage GetVotesResponse {\n  int64 Yes = 1;\n  int64 No = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Inline Code Reference for Subscribe Button\nDESCRIPTION: Markdown inline code syntax highlighting the Subscribe button reference in the documentation.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/status-page/work/subscribers.mdx#2025-04-12_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`Subscribe`\n```\n\n----------------------------------------\n\nTITLE: UI Component Reference in Markdown\nDESCRIPTION: Reference to bar tracker component implementation for status page\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/packages/tracker/README.md#2025-04-12_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nbar\n```\n\n----------------------------------------\n\nTITLE: Displaying Minimum Cron Job Interval in Markdown\nDESCRIPTION: This snippet shows the minimum cron job interval value (10 minutes) that free users are limited to in the OpenStatus service.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/faq/limits.mdx#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`10m`\n```\n\n----------------------------------------\n\nTITLE: Referencing Drawer Component in Markdown\nDESCRIPTION: Markdown link referencing the Drawer component from the shadcn UI library, which is suggested for improving mobile navigation in the OpenStatus project.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/data-table-redesign.mdx#2025-04-12_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[`Drawer`](https://ui.shadcn.com/docs/components/drawer)\n```\n\n----------------------------------------\n\nTITLE: Installing Starlight with Astro\nDESCRIPTION: Command to create a new Astro project using the Starlight template.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/README.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm create astro@latest -- --template starlight\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Bun\nDESCRIPTION: This command installs the project dependencies using Bun package manager.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/workflows/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbun install\n```\n\n----------------------------------------\n\nTITLE: Component Reference in Markdown\nDESCRIPTION: Reference to status-check component implementation in status page context\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/packages/tracker/README.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nstatus-check\n```\n\n----------------------------------------\n\nTITLE: Installing SQLD via Homebrew\nDESCRIPTION: Commands for installing the SQLD database server using Homebrew package manager on macOS.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/packages/db/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ brew tap libsql/sqld\n$ brew install sqld-beta\n$ sqld --help\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the blog post defining metadata like title, image, author details and publication date.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/the-first-48-hours.mdx#2025-04-12_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 48 hours of public OpenStatus\nimage: /assets/posts/the-first-48-hours/48.png\ndescription: The numbers, limits we faced and consequences we have taken.\nauthor:\n  name: Maximilian Kaske\n  url: https://twitter.com/mxkaske\n  avatar: /assets/authors/max.png\npublishedAt: 2023-08-02\ntag: company\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenStatus Provider and Creating a Monitor in Terraform\nDESCRIPTION: This snippet shows how to configure the OpenStatus Terraform provider with an API token and create a monitor resource. The monitor is configured with specific URL, regions, periodicity, name, active status, and description parameters.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/docs/src/content/docs/tools/terraform.mdx#2025-04-12_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"openstatus\" {\n  openstatus_api_token= \"YOUR_API_TOKEN\"\n}\n\nresource \"openstatus_monitor\" \"my_monitor\" {\n  url   = \"https://www.openstatus.dev\"\n  regions= [\"iad\", \"jnb\"]\n  periodicity =  \"10m\"\n  name = \"test-monitor\"\n  active = true\n  description = \"This is a test monitor\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Hono Server in JavaScript\nDESCRIPTION: A simple Hono server implementation that returns a text response and includes logging middleware. The server provides status code responses via URL parameters.\nSOURCE: https://github.com/openstatusHQ/openstatus/blob/main/apps/web/src/content/posts/monitoring-latency-cf-workers-fly-koyeb-raylway-render.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst app = new Hono();\napp.use(\"*\", logger());\n\napp.use(\"*\", poweredBy());\n\napp.get(\"/\", (c) => {\n  return c.text(\n    \"Just return the desired http status code, e.g. /404 🤯 \\nhttps://www.openstatus.dev\",\n  );\n});\n```"
  }
]