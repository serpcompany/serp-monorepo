[
  {
    "owner": "rusty1s",
    "repo": "pytorch_scatter",
    "content": "TITLE: Basic scatter_max operation example in PyTorch\nDESCRIPTION: Example demonstrating the use of the scatter_max function from torch_scatter. It shows how to perform a scatter operation with max reduction on tensor data using specified indices.\nSOURCE: https://github.com/rusty1s/pytorch_scatter/blob/master/README.md#2025-04-21_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nimport torch\nfrom torch_scatter import scatter_max\n\nsrc = torch.tensor([[2, 0, 1, 4, 3], [0, 2, 1, 3, 4]])\nindex = torch.tensor([[4, 5, 4, 2, 3], [0, 0, 2, 2, 1]])\n\nout, argmax = scatter_max(src, index, dim=-1)\n```\n\n----------------------------------------\n\nTITLE: Installing PyTorch Scatter for PyTorch 2.6 using pip\nDESCRIPTION: Command to install PyTorch Scatter binary wheels for PyTorch 2.6.0 with different CUDA versions. The ${CUDA} variable should be replaced with cpu, cu118, cu124, or cu126 depending on your PyTorch installation.\nSOURCE: https://github.com/rusty1s/pytorch_scatter/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npip install torch-scatter -f https://data.pyg.org/whl/torch-2.6.0+${CUDA}.html\n```\n\n----------------------------------------\n\nTITLE: Installing PyTorch Scatter for PyTorch 2.5 using pip\nDESCRIPTION: Command to install PyTorch Scatter binary wheels for PyTorch 2.5.0/2.5.1 with different CUDA versions. The ${CUDA} variable should be replaced with cpu, cu118, cu121, or cu124 depending on your PyTorch installation.\nSOURCE: https://github.com/rusty1s/pytorch_scatter/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\npip install torch-scatter -f https://data.pyg.org/whl/torch-2.5.0+${CUDA}.html\n```\n\n----------------------------------------\n\nTITLE: Configuring PyTorch Scatter Library with CMake\nDESCRIPTION: A complete CMake configuration for building the PyTorch Scatter library. It handles basic project setup, optional CUDA and Python dependencies, source file collection, library compilation settings, and installation configuration.\nSOURCE: https://github.com/rusty1s/pytorch_scatter/blob/master/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\nproject(torchscatter)\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED)\nset(TORCHSCATTER_VERSION 2.1.2)\n\noption(WITH_CUDA \"Enable CUDA support\" OFF)\noption(WITH_PYTHON \"Link to Python when building\" ON)\n\nif(WITH_CUDA)\n  enable_language(CUDA)\n  add_definitions(-D__CUDA_NO_HALF_OPERATORS__)\n  add_definitions(-DWITH_CUDA)\n  set(CMAKE_CUDA_FLAGS \"${CMAKE_CUDA_FLAGS} --expt-relaxed-constexpr\")\nendif()\n\nif (WITH_PYTHON)\n  add_definitions(-DWITH_PYTHON)\n  find_package(Python3 COMPONENTS Development)\nendif()\nfind_package(Torch REQUIRED)\n\nfile(GLOB HEADERS csrc/*.h)\nfile(GLOB OPERATOR_SOURCES csrc/cpu/*.h csrc/cpu/*.cpp csrc/*.cpp)\nif(WITH_CUDA)\n  file(GLOB OPERATOR_SOURCES ${OPERATOR_SOURCES} csrc/cuda/*.h csrc/cuda/*.cu)\nendif()\n\nadd_library(${PROJECT_NAME} SHARED ${OPERATOR_SOURCES})\ntarget_link_libraries(${PROJECT_NAME} PRIVATE ${TORCH_LIBRARIES})\nif (WITH_PYTHON)\n  target_link_libraries(${PROJECT_NAME} PRIVATE Python3::Python)\nendif()\nset_target_properties(${PROJECT_NAME} PROPERTIES EXPORT_NAME TorchScatter)\n\ntarget_include_directories(${PROJECT_NAME} INTERFACE\n  \"$<BUILD_INTERFACE:${HEADERS}>\"\n  $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)\n\ninclude(GNUInstallDirs)\ninclude(CMakePackageConfigHelpers)\n\nset(TORCHSCATTER_CMAKECONFIG_INSTALL_DIR \"share/cmake/TorchScatter\" CACHE STRING \"install path for TorchScatterConfig.cmake\")\n\nconfigure_package_config_file(cmake/TorchScatterConfig.cmake.in\n  \"${CMAKE_CURRENT_BINARY_DIR}/TorchScatterConfig.cmake\"\n  INSTALL_DESTINATION ${TORCHSCATTER_CMAKECONFIG_INSTALL_DIR})\n\nwrite_basic_package_version_file(${CMAKE_CURRENT_BINARY_DIR}/TorchScatterConfigVersion.cmake\n  VERSION ${TORCHSCATTER_VERSION}\n  COMPATIBILITY AnyNewerVersion)\n\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/TorchScatterConfig.cmake\n  ${CMAKE_CURRENT_BINARY_DIR}/TorchScatterConfigVersion.cmake\n  DESTINATION ${TORCHSCATTER_CMAKECONFIG_INSTALL_DIR})\n\ninstall(TARGETS ${PROJECT_NAME}\n  EXPORT TorchScatterTargets\n  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n  )\n\ninstall(EXPORT TorchScatterTargets\n  NAMESPACE TorchScatter::\n  DESTINATION ${TORCHSCATTER_CMAKECONFIG_INSTALL_DIR})\n\ninstall(FILES ${HEADERS} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME})\ninstall(FILES\n  csrc/cpu/scatter_cpu.h\n  csrc/cpu/segment_coo_cpu.h\n  csrc/cpu/segment_csr_cpu.h\n  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}/cpu)\nif(WITH_CUDA)\n  install(FILES\n    csrc/cuda/scatter_cuda.h\n    csrc/cuda/segment_coo_cuda.h\n    csrc/cuda/segment_csr_cuda.h\n    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}/cuda)\nendif()\n\nif(WITH_CUDA)\n  set_property(TARGET torch_cuda PROPERTY INTERFACE_COMPILE_OPTIONS \"\")\n  set_property(TARGET torch_cpu PROPERTY INTERFACE_COMPILE_OPTIONS \"\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Output of scatter_max operation\nDESCRIPTION: The output tensors from the scatter_max operation. The first tensor contains the maximum values for each index position, and the second tensor contains the indices of the source elements that contributed the maximum values.\nSOURCE: https://github.com/rusty1s/pytorch_scatter/blob/master/README.md#2025-04-21_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nprint(out)\ntensor([[0, 0, 4, 3, 2, 0],\n        [2, 4, 3, 0, 0, 0]])\n\nprint(argmax)\ntensor([[5, 5, 3, 4, 0, 1]\n        [1, 4, 3, 5, 5, 5]])\n```\n\n----------------------------------------\n\nTITLE: Installing PyTorch Scatter from source\nDESCRIPTION: Command to install PyTorch Scatter from source after ensuring PyTorch is installed and CUDA paths are properly set.\nSOURCE: https://github.com/rusty1s/pytorch_scatter/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\npip install torch-scatter\n```\n\n----------------------------------------\n\nTITLE: Verifying PyTorch installation for source build\nDESCRIPTION: Commands to verify that PyTorch is correctly installed and that CUDA paths are properly set in environment variables before building PyTorch Scatter from source.\nSOURCE: https://github.com/rusty1s/pytorch_scatter/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ python -c \"import torch; print(torch.__version__)\"\n>>> 1.4.0\n\n$ echo $PATH\n>>> /usr/local/cuda/bin:...\n\n$ echo $CPATH\n>>> /usr/local/cuda/include:...\n```\n\n----------------------------------------\n\nTITLE: Building the C++ API for PyTorch Scatter\nDESCRIPTION: Commands to build and install the C++ API for PyTorch Scatter. The CMAKE_PREFIX_PATH should be set to the PyTorch installation path, which can be obtained using the provided Python command.\nSOURCE: https://github.com/rusty1s/pytorch_scatter/blob/master/README.md#2025-04-21_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nmkdir build\ncd build\n# Add -DWITH_CUDA=on support for CUDA support\ncmake -DCMAKE_PREFIX_PATH=\"...\" ..\nmake\nmake install\n```\n\n----------------------------------------\n\nTITLE: Documenting PyTorch Scatter Module with reStructuredText\nDESCRIPTION: This code uses reStructuredText directives to generate documentation for the torch_scatter module. It includes automodule and autofunction directives to automatically include documentation from docstrings in the Python code.\nSOURCE: https://github.com/rusty1s/pytorch_scatter/blob/master/docs/source/functions/scatter.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nScatter\n=======\n\n.. automodule:: torch_scatter\n   :noindex:\n\n.. autofunction:: scatter\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Directive for PyTorch Scatter Composite Module Documentation\nDESCRIPTION: A ReStructuredText directive that sets up automatic documentation for the torch_scatter.composite module. It specifies the current module, imports the module documentation, and configures options to include all members and undocumented members.\nSOURCE: https://github.com/rusty1s/pytorch_scatter/blob/master/docs/source/functions/composite.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\ncomposite\n=========\n\n.. currentmodule:: torch_scatter.composite\n\n.. automodule:: torch_scatter.composite\n   :members:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Defining RST Documentation Structure for segment_coo in PyTorch Scatter\nDESCRIPTION: This RST (reStructuredText) snippet sets up automatic documentation generation for the segment_coo function within the torch_scatter module. It uses Sphinx directives to include the module without an index and to automatically document the function.\nSOURCE: https://github.com/rusty1s/pytorch_scatter/blob/master/docs/source/functions/segment_coo.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nSegment COO\n===========\n\n.. automodule:: torch_scatter\n   :noindex:\n\n.. autofunction:: segment_coo\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation for segment_csr in torch_scatter\nDESCRIPTION: This snippet uses reStructuredText directives to automatically generate documentation for the segment_csr function in the torch_scatter module. It excludes the index and specifically targets the segment_csr function.\nSOURCE: https://github.com/rusty1s/pytorch_scatter/blob/master/docs/source/functions/segment_csr.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: torch_scatter\n   :noindex:\n\n.. autofunction:: segment_csr\n```\n\n----------------------------------------\n\nTITLE: Running tests for PyTorch Scatter\nDESCRIPTION: Command to run the test suite for PyTorch Scatter using pytest.\nSOURCE: https://github.com/rusty1s/pytorch_scatter/blob/master/README.md#2025-04-21_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: Setting CUDA architecture list for Docker containers\nDESCRIPTION: Command to set CUDA compute capabilities via environment variable when running in a Docker container without NVIDIA driver, to ensure PyTorch can evaluate compute capabilities correctly.\nSOURCE: https://github.com/rusty1s/pytorch_scatter/blob/master/README.md#2025-04-21_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nexport TORCH_CUDA_ARCH_LIST = \"6.0 6.1 7.2+PTX 7.5+PTX\"\n```\n\n----------------------------------------\n\nTITLE: Specifying PyTorch Scatter Dependencies\nDESCRIPTION: Lists required package dependencies including PyTorch CPU version 1.11.0 wheel file and Sphinx documentation tools with minimum version requirements.\nSOURCE: https://github.com/rusty1s/pytorch_scatter/blob/master/docs/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://download.pytorch.org/whl/cpu/torch-1.11.0%2Bcpu-cp38-cp38-linux_x86_64.whl\nsphinx>=3\nsphinx_rtd_theme\n```"
  }
]