[
  {
    "owner": "closedxml",
    "repo": "closedxml",
    "content": "TITLE: Creating a Basic Excel Workbook with ClosedXML\nDESCRIPTION: Example demonstrating how to create a new Excel workbook, add a worksheet, populate cells with values and formulas, and save the file without using Excel application.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/index.rst#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing var workbook = new XLWorkbook();\nvar worksheet = workbook.AddWorksheet(\"Sample Sheet\");\nworksheet.Cell(\"A1\").Value = \"Hello World!\";\nworksheet.Cell(\"A2\").FormulaA1 = \"MID(A1, 7, 5)\";\nworkbook.SaveAs(\"HelloWorld.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Inserting Data from DataTable in ClosedXML C#\nDESCRIPTION: Demonstrates how to insert data from a DataTable into an Excel worksheet using ClosedXML. This approach is particularly useful when working with ADO.NET as it allows direct insertion of database query results.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/bulk-insert-data.rst#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar dataTable = new DataTable();\ndataTable.Columns.Add(\"Name\", typeof(string));\ndataTable.Columns.Add(\"Sold\", typeof(int));\n\ndataTable.Rows.Add(\"Cheesecake\", 14);\ndataTable.Rows.Add(\"Medovik\", 6);\ndataTable.Rows.Add(\"Muffin\", 10);\n\nusing var wb = new XLWorkbook();\nvar ws = wb.AddWorksheet();\nws.Cell(\"B3\").InsertData(dataTable);\nwb.SaveAs(\"Demo-Bulk-Insert-Data-DataTable.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Pivot Table with Row and Column Fields in C#\nDESCRIPTION: Creates a pivot table from a data range with event and pastry data, setting up row labels, column labels and value calculations. Shows how to structure basic pivot table with row/column axes and value summarization.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/pivot-tables.rst#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing var wb = new XLWorkbook();            \nvar ws = wb.AddWorksheet();\nvar range = ws.FirstCell().InsertData(new object[]\n{\n    (\"Event\", \"Pastry\", \"Sold\", \"Cost\"),\n    (\"Charity\", \"Pie\", 14, 60),\n    (\"Sampling\", \"Cake\", 8, 80),\n    (\"Charity\", \"Cake\", 7, 75),\n    (\"Charity\", \"Pie\", 8, 38),\n});\n\nvar pivotTable = ws.PivotTables.Add(\"pvt\", ws.Cell(7, 1), range);\npivotTable.RowLabels.Add(\"Event\");\npivotTable.ColumnLabels.Add(\"Pastry\");\npivotTable.Values.Add(\"Sold\").SetSummaryFormula(XLPivotSummary.Sum);\npivotTable.SetShowGrandTotalsColumns(false);\n\nwb.SaveAs(\"pastry.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Excel Workbook with ClosedXML in C#\nDESCRIPTION: Example showing how to create a new Excel workbook, add a worksheet, set cell values, apply a formula, and save the file using ClosedXML. Demonstrates the basic workflow of the library.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/README.md#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing (var workbook = new XLWorkbook())\n{\n    var worksheet = workbook.Worksheets.Add(\"Sample Sheet\");\n    worksheet.Cell(\"A1\").Value = \"Hello World!\";\n    worksheet.Cell(\"A2\").FormulaA1 = \"=MID(A1, 7, 5)\";\n    workbook.SaveAs(\"HelloWorld.xlsx\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Worksheets in ClosedXML (C#)\nDESCRIPTION: Demonstrates different ways to add worksheets to a workbook using ClosedXML. Shows default behavior and custom naming/positioning of worksheets.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/worksheets.rst#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Add a 'Sheet1' as the last worksheet, in the case of a new workbook as a first sheet\nwb.AddWorksheet();\n\n// Add a worksheet with a name 'Export' as the last sheet of a workbook\nwb.AddWorksheet(\"Export\");\n\n// Add a worksheet Export at position 2, moving all other sheets to the right\n// 'Export' will be in the last position, the end result will be 'Sheet1', 'Import', 'Export'\nwb.AddWorksheet(\"Import\", 2);\n```\n\n----------------------------------------\n\nTITLE: Applying Themes to Tables in ClosedXML (C#)\nDESCRIPTION: Demonstrates how to apply different themes to tables in ClosedXML using the XLTableTheme enum. It creates three tables with different themes for comparison.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/tables.rst#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing ClosedXML.Excel;\n\nusing var wb = new XLWorkbook();\nvar ws = wb.AddWorksheet();\n\nws.Cell(\"A1\").SetValue(\"First\");\nws.Cell(\"A2\").InsertData(Enumerable.Range(1, 5));\nws.Cell(\"B1\").SetValue(\"Second\");\nws.Cell(\"B2\").InsertData(Enumerable.Range(1, 5));\n\nvar table = ws.Range(\"A1:B6\").CreateTable();\ntable.Theme = XLTableTheme.TableStyleLight16;\n\ntable = table.CopyTo(ws.Cell(\"D1\")).CreateTable();\ntable.Theme = XLTableTheme.TableStyleDark2;\n\ntable = table.CopyTo(ws.Cell(\"G1\")).CreateTable();\ntable.Theme = XLTableTheme.TableStyleMedium15;\n\nwb.SaveAs(\"tables-themes.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Protecting Workbook Structure in C# using ClosedXML\nDESCRIPTION: Demonstrates how to create a workbook with protected structure using ClosedXML. The code sets a password, specifies the protection algorithm, and allows only window manipulation.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/protect.rst#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar wb = new XLWorkbook();\nvar ws = wb.AddWorksheet();\nwb.Protect(\"Pa55w0rD\", XLProtectionAlgorithm.Algorithm.SHA512, allowedElements: XLWorkbookProtectionElements.Windows);\n\nAssert.IsTrue(wb.IsProtected);\nAssert.IsTrue(wb.IsPasswordProtected);\nwb.SaveAs(\"protect-workbook.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Clearing Array Formulas in ClosedXML\nDESCRIPTION: This example shows how to clear an array formula by setting the entire range covered by the formula to Blank.Value. The code first creates an array formula and then clears it using the FormulaReference property to identify the range.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/formulas.rst#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing var wb = new XLWorkbook();\nvar ws = wb.AddWorksheet();\nws.Range(\"A1:C2\").FormulaArrayA1 = \"SIN(PI()/2)\";\n\n// This will clear the formula.\nws.Range(ws.Cell(\"A1\").FormulaReference).Value = Blank.Value;\n\nwb.SaveAs(\"array-formula-clear.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Creating Pivot Table with Only Row Labels in C#\nDESCRIPTION: Demonstrates creating a pivot table with fields only on row axis and multiple value fields. Shows how to structure a pivot table without column labels while summarizing multiple value fields.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/pivot-tables.rst#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing var wb = new XLWorkbook();   \nvar ws = wb.AddWorksheet();\nvar range = ws.FirstCell().InsertData(new object[]\n{\n    (\"Event\", \"Pastry\", \"Sold\", \"Cost\"),\n    (\"Charity\", \"Pie\", 14, 60),\n    (\"Sampling\", \"Cake\", 8, 80),\n    (\"Charity\", \"Cake\", 7, 75),\n    (\"Charity\", \"Pie\", 8, 38),\n});\n\nvar pivotTable = ws.PivotTables.Add(\"pvt\", ws.Cell(7, 1), range);\npivotTable.RowLabels.Add(\"Event\");\npivotTable.RowLabels.Add(\"Pastry\");\npivotTable.Values.Add(\"Sold\").SetSummaryFormula(XLPivotSummary.Sum);\npivotTable.Values.Add(\"Cost\").SetSummaryFormula(XLPivotSummary.Sum);\npivotTable.SetShowGrandTotalsColumns(false);\n\nwb.SaveAs(\"pastry.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Setting Font Properties in ClosedXML\nDESCRIPTION: Example of setting font properties such as size and name using the fluent API in ClosedXML.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/cell-format.rst#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nws.Cell(\"A1\").Style\n    .Font.SetFontSize(20)\n    .Font.SetFontName(\"Arial\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Compare Filter in C#\nDESCRIPTION: Demonstrates implementation of custom comparison filters in AutoFilter. The example shows filtering numbers less than or equal to 5.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/autofilter.rst#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing var wb = new XLWorkbook();\nvar ws = wb.Worksheets.Add(\"AutoFilter\");\nvar range = ws.Cell(\"A1\").InsertData(new object[] {\n    \"Number\",\n    2,\n    14,\n    4,\n    5,\n    8,\n    -5,\n});\n\nvar autoFilter = range.SetAutoFilter();\nautoFilter.Column(1).EqualOrLessThan(5);\n\nwb.SaveAs(\"autofilter-filter-custom-compare-example.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Inserting Data from Nested IEnumerables in ClosedXML C#\nDESCRIPTION: Demonstrates insertion of data from a List of arrays, where each array represents a row of data. This approach is useful when dealing with dynamically generated collections of data where each inner collection represents a row.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/bulk-insert-data.rst#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar data = new List<object[]>\n{\n    new object[] { \"Cheesecake\", 14 },\n    new object[] { \"Medovik\", 6 },\n    new object[] { \"Muffin\", 10 }\n};\n\nusing var wb = new XLWorkbook();\nvar ws = wb.AddWorksheet();\nws.Cell(\"B3\").InsertData(data);\nwb.SaveAs(\"Demo-Bulk-Insert-Data-Enumerable.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Using Table Names in Formulas with ClosedXML (C#)\nDESCRIPTION: Demonstrates how to use table names in formulas through structured references in ClosedXML. It creates a table and uses its name in a SUM formula.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/tables.rst#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing ClosedXML.Excel;\n\nusing var wb = new XLWorkbook();\nvar ws = wb.AddWorksheet();\nws.FirstCell().InsertTable(new[]\n{\n    new Pastry(\"Pie\", 10),\n    new Pastry(\"Cake\", 7),\n    new Pastry(\"Waffles\", 17)\n}, \"PastrySales\", true);\n\nws.Cell(\"D2\").Value = \"Total pastry sales:\";\nws.Cell(\"D3\").FormulaA1 = \"SUM(PastrySales[Sales])\";\n\nwb.SaveAs(\"tables-formula-reference.xlsx\");\n\nrecord Pastry(string Name, int Sales);\n```\n\n----------------------------------------\n\nTITLE: Creating Tables in ClosedXML (C#)\nDESCRIPTION: Demonstrates how to create tables in ClosedXML, both during data insertion and from existing data. It shows the use of InsertTable and CreateTable methods.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/tables.rst#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing ClosedXML.Excel;\n\nusing var wb = new XLWorkbook();\nvar ws = wb.AddWorksheet();\nws.ColumnWidth = 12;\nws.FirstCell().InsertTable(new[]\n{\n    new Pastry(\"Pie\", 10),\n    new Pastry(\"Cake\", 7),\n    new Pastry(\"Waffles\", 17)\n}, \"PastrySales\", true);\n\nws.Range(\"D2:D5\").CreateTable(\"Table\");\n\nwb.SaveAs(\"tables-create.xlsx\");\n\nrecord Pastry(string Name, int Sales);\n```\n\n----------------------------------------\n\nTITLE: Inserting Data from Untyped ArrayList in ClosedXML C#\nDESCRIPTION: Shows how to insert data from an ArrayList containing mixed types (arrays and custom objects). ClosedXML handles different item types appropriately, providing flexibility when working with heterogeneous collections.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/bulk-insert-data.rst#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic record Dessert(\n    [property: XLColumn(Ignore = true)] int SellerId,\n    [property: XLColumn(Order = 1)] string Name,\n    [property: XLColumn(Order = 2)] int Sales);\n\nvar data = new ArrayList\n{\n    new object[] { \"Cheesecake\", 14 },\n    new Dessert(1, \"Medovik\", 6),\n    new object[] { \"Muffin\", 10 },\n};\n\nusing var wb = new XLWorkbook();\nvar ws = wb.AddWorksheet();\nws.Cell(\"B3\").InsertData(data);\nwb.SaveAs(\"Demo-Bulk-Insert-Data-UntypedEnumerable.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Creating Array Formulas in ClosedXML\nDESCRIPTION: This example demonstrates how to create an array formula that calculates compound interest over 2 years for different principal amounts. The formula is applied to a range of cells (B2:D3) and uses the POWER function to perform the calculation.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/formulas.rst#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing var wb = new XLWorkbook();\nvar ws = wb.AddWorksheet();\nws.Cell(\"A1\").Value = \"Interest: 2yrs\";\nws.Cell(\"B1\").Value = 1000;\nws.Cell(\"C1\").Value = 2000;\nws.Cell(\"D1\").Value = 3000;\nws.Cell(\"A2\").SetValue(0.02)\n    .Style.NumberFormat.SetNumberFormatId((int)XLPredefinedFormat.Number.PercentInteger);\nws.Cell(\"A3\").SetValue(0.05)\n    .Style.NumberFormat.SetNumberFormatId((int)XLPredefinedFormat.Number.PercentInteger);\n\nws.Range(\"B2:D3\").FormulaArrayA1 = \"B1:D1*POWER(1+A2:A3, 2)\";\n\nwb.SaveAs(\"array-formula-create.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Removing Worksheets in ClosedXML (C#)\nDESCRIPTION: Shows how to remove worksheets from a workbook using either the worksheet name or position.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/worksheets.rst#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nwb.Worksheets.Delete('Export');\n\nwb.Worksheets.Delete(2);\n```\n\n----------------------------------------\n\nTITLE: Sorting Rows with ClosedXML in C#\nDESCRIPTION: Demonstrates how to sort rows in a worksheet range based on multiple columns with different sort orders. The example creates a dataset of pastry sales data and sorts it by margin and sales volume in descending order.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/sort.rst#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing var wb = new XLWorkbook();\nvar ws = wb.AddWorksheet();\nws.Column(\"D\").Style.NumberFormat.SetNumberFormatId((int)XLPredefinedFormat.Number.PercentInteger);\nvar range = ws.Cell(\"B3\").InsertData(new[]\n{\n    new object[]{ \"Pastry\",    \"Sold\", \"Margin\" },\n    new object[]{ \"Cake\",      14,     0.25 },\n    new object[]{ \"Croissant\", 15,     0.60 },\n    new object[]{ \"Fig Roll\",  56,     0.50 },\n    new object[]{ \"Waffle\",    74,     0.60 },\n});\nrange.CopyTo(ws.Cell(\"F3\"));\nvar dataRangeOfCopy = ws.Range(\"F4:H7\");\n\ndataRangeOfCopy.Sort(\"3 DESC, 2 DESC\");\nwb.SaveAs(\"sort-rows-example.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Adding Phonetic Hints (Furigana) to Text in ClosedXML\nDESCRIPTION: Shows how to add phonetic information (furigana) to East Asian text, specifically for Japanese. The example adds phonetic hints above specific characters and enables their display by setting the ShowPhonetic property.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/cell-format.rst#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing var wb = new XLWorkbook();\nvar ws = wb.AddWorksheet();\nvar cell = ws.Cell(1, 1);\n\n// First we add the text. It is alwayes displayed\ncell.GetRichText().AddText(\"みんなさんはお元気ですか。\").SetFontSize(16);\n\n// And then we add the phonetics\ncell.GetRichText().Phonetics.SetFontSize(8);\ncell.GetRichText().Phonetics.Add(\"げん\", 7, 8);\ncell.GetRichText().Phonetics.Add(\"き\", 8, 9);\n\n// Must set flag to actually display furigana\ncell.ShowPhonetic = true;\n\nwb.SaveAs(\"cell-format-phonetics.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Protecting Worksheet Content in C# using ClosedXML\nDESCRIPTION: Shows how to protect a worksheet, allowing only specific operations. The code sets a password, specifies allowed elements, and demonstrates how to modify protection settings after initial setup.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/protect.rst#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar wb = new XLWorkbook();\nvar ws = wb.AddWorksheet();\nws.Cell(\"A1\").Value = \"Test\";\nws.Protect(\"Pa55w0rD\", XLProtectionAlgorithm.Algorithm.SHA512,\n\t\t   allowedElements: XLSheetProtectionElements.DeleteRows | XLSheetProtectionElements.SelectEverything | XLSheetProtectionElements.FormatCells);\n// Allowed elements can also be removed from protection\nws.Protection.DisallowElement(XLSheetProtectionElements.DeleteRows);\n\nAssert.IsTrue(ws.IsProtected);\nAssert.IsTrue(ws.IsPasswordProtected);\nAssert.AreEqual(XLProtectionAlgorithm.Algorithm.SHA512, ws.Protection.Algorithm);\nAssert.IsFalse(ws.Protection.AllowedElements.HasFlag(XLSheetProtectionElements.DeleteRows));\nAssert.IsTrue(ws.Protection.AllowedElements.HasFlag(XLSheetProtectionElements.SelectLockedCells));\nAssert.IsTrue(ws.Protection.AllowedElements.HasFlag(XLSheetProtectionElements.FormatCells));\nwb.SaveAs(\"protect-worksheet.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Setting Font Schemes in ClosedXML\nDESCRIPTION: Demonstrates how to use font schemes with rich text in ClosedXML. The example creates text with major scheme, minor scheme, and no scheme sections, showing how font schemes allow text to dynamically update when a theme changes.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/cell-format.rst#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nusing var wb = new XLWorkbook();\nvar ws = wb.AddWorksheet();\nvar cell = ws.Cell(1, 1);\ncell.Style.Font.FontSize = 25;\n\ncell.GetRichText()\n    .AddText(\"Major scheme\")\n        .SetFontScheme(XLFontScheme.Major)\n    .AddText(\" \")\n    .AddText(\"Minor scheme\")\n        .SetFontScheme(XLFontScheme.Minor)\n    .AddText(\" \")\n    .AddText(\"No scheme\")\n        .SetFontName(\"Century\")\n        .SetFontScheme(XLFontScheme.None);\n\nwb.SaveAs(\"cell-format-font-scheme.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Modifying Table Style Options in ClosedXML (C#)\nDESCRIPTION: Shows how to modify various style options of a table in ClosedXML, such as showing/hiding header rows, row stripes, column stripes, auto filter, and totals row. It also demonstrates setting totals row functions.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/tables.rst#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing ClosedXML.Excel;\n\nusing var wb = new XLWorkbook();\nvar ws = wb.AddWorksheet();\n\nws.Cell(\"A1\").SetValue(\"First\");\nws.Cell(\"A2\").InsertData(Enumerable.Range(1, 5));\nws.Cell(\"B1\").SetValue(\"Second\");\nws.Cell(\"B2\").InsertData(Enumerable.Range(1, 5));\n\nvar table = ws.Range(\"A1:B6\").CreateTable();\ntable.CopyTo(ws.Cell(\"D1\")).CreateTable();\n\ntable\n    .SetShowHeaderRow(false)\n    .SetShowRowStripes(false)\n    .SetShowColumnStripes(true)\n    .SetShowAutoFilter(true)\n    .SetShowTotalsRow(true);\n\n// Totals can be set only if the totals row is displayed\ntable.Field(\"First\").TotalsRowFunction = XLTotalsRowFunction.Sum;\ntable.Field(\"Second\").TotalsRowFunction = XLTotalsRowFunction.Average;\n\nwb.SaveAs(\"tables-structure.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Workbook with Theme Color in C#\nDESCRIPTION: Demonstrates how to create a workbook and apply a theme color to a cell's background. Uses the Accent2 theme color to fill a cell background.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/themes.rst#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing var wb = new XLWorkbook();\nvar ws = wb.AddWorksheet();\nvar accent2ThemeColor = XLColor.FromTheme(XLThemeColor.Accent2);\nws.Cell(\"A1\").Style.Fill.BackgroundColor = accent2ThemeColor;\nwb.SaveAs(\"theme-color-picker-font-color.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Inserting Data from Objects with XLColumn Attributes in ClosedXML C#\nDESCRIPTION: Shows how to insert data from an IEnumerable of custom objects with XLColumn attributes to control which properties are used and their order in the output. The SellerId is ignored while Name and Sales are included with a specific order.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/bulk-insert-data.rst#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic record Dessert(\n    [property:XLColumn(Ignore = true)] int SellerId,\n    [property:XLColumn(Order = 1)] string Name,\n    [property:XLColumn(Order = 2)] int Sales);\n\nvar data = new[] {\n    new Dessert(1, \"Cheesecake\", 14),\n    new Dessert(2, \"Medovik\", 6),\n    new Dessert(2, \"Muffin\", 10),\n};\n\nusing var wb = new XLWorkbook();\nvar ws = wb.AddWorksheet();\nws.Cell(\"B3\").InsertData(data);\nwb.SaveAs(\"Demo-Bulk-Insert-Data-Objects.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Setting ItemsToRetainPerField Option in ClosedXML Pivot Tables\nDESCRIPTION: This code snippet demonstrates how to set the ItemsToRetainPerField option for a pivot cache in ClosedXML. The option determines whether field values should be retained in pivot table filters after they are removed from the source data and the cache is refreshed.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/pivot-tables.rst#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nIXLPivotCache.ItemsToRetainPerField = XLItemsToRetain.None;\n```\n\n----------------------------------------\n\nTITLE: Setting Cell Styles using Properties vs Fluent API in ClosedXML\nDESCRIPTION: Demonstrates two equivalent ways to set cell styles in ClosedXML: through direct properties or using the fluent API. Both approaches produce the same result by setting font size and name.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/cell-format.rst#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Set style through property\nws.Cell(\"A1\").Style.Font.FontSize = 20;\nws.Cell(\"A1\").Style.Font.FontName = \"Arial\";\n\n// Set style using fluent API\nws.Cell(\"A1\").Style\n    .Font.SetFontSize(20)\n    .Font.SetFontName(\"Arial\");\n```\n\n----------------------------------------\n\nTITLE: Applying Top/Bottom Percentage Filters in ClosedXML\nDESCRIPTION: This example shows how to use Top10 filters to display only the top percentage of values in a dataset. The code creates a worksheet with numeric values and filters to show only the top 25% of those values. The filter uses a cutoff value and includes all matching values, even if duplicates exceed the exact percentage.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/autofilter.rst#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nusing var wb = new XLWorkbook();\nvar ws = wb.Worksheets.Add(\"AutoFilter\");\nvar gradesRange = ws.Cell(\"A1\").InsertData(new object[] {\n    \"Top 25%\",\n    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\n});\n\ngradesRange.SetAutoFilter().Column(1).Top(25, XLTopBottomType.Percent);\n\nwb.SaveAs(\"autofilter-filter-top10-example.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic AutoFilter Sorting in C#\nDESCRIPTION: Demonstrates how to create a worksheet, insert data, and apply descending sort on the margin column using AutoFilter. The example shows basic setup and sorting functionality.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/autofilter.rst#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing var wb = new XLWorkbook();\nvar ws = wb.AddWorksheet();\nvar range = ws.Cell(\"B3\").InsertData(new[]\n{\n    new object[]{ \"Pastry\",    \"Sold\", \"Margin\" },\n    new object[]{ \"Cake\",      14,     0.25 },\n    new object[]{ \"Croissant\", 15,     0.60 },\n    new object[]{ \"Fig Roll\",  56,     0.50 },\n    new object[]{ \"Waffle\",    74,     0.60 },\n});\n\n// Sort by margin\nrange.SetAutoFilter().Sort(3, XLSortOrder.Descending);\nwb.SaveAs(@\"c:\\temp\\issues\\autofilter-sort-example.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Accessing Cell Values in ClosedXML\nDESCRIPTION: Different ways to access cell values from IXLCell, including Value (which triggers recalculation of dirty formulas) and CachedValue (which returns the stored value even if stale).\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/concepts/formula-calculation.rst#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nIXLCell.Value             // Will recalculate if formula is dirty\nIXLCell.CachedValue      // Returns current value without recalculation\n```\n\n----------------------------------------\n\nTITLE: Adding Totals Row to Tables in ClosedXML (C#)\nDESCRIPTION: Demonstrates how to add and configure a totals row for a table in ClosedXML. It shows setting totals row visibility, labels, and functions for different fields.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/tables.rst#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing ClosedXML.Excel;\n\nusing var wb = new XLWorkbook();\nvar ws = wb.AddWorksheet();\n\nvar table = ws.Cell(\"A1\").InsertTable(new[]\n{\n    new Pastry(\"Cake\", 39, 3),\n    new Pastry(\"Waffles\", 15, 12),\n    new Pastry(\"Pie\", 19, 27)\n});\n\ntable.ShowTotalsRow = true;\ntable.Field(nameof(Pastry.Name)).TotalsRowLabel = \"Avg.\";\ntable.Field(nameof(Pastry.UnitPrice)).TotalsRowFunction = XLTotalsRowFunction.Average;\ntable.Field(nameof(Pastry.Sold)).TotalsRowFunction = XLTotalsRowFunction.Average;\n\nwb.SaveAs(\"tables-totals.xlsx\");\n\nrecord Pastry(string Name, double UnitPrice, int Sold);\n```\n\n----------------------------------------\n\nTITLE: Copying Cell Values with Conditional Formatting in C#\nDESCRIPTION: This code demonstrates how to copy a cell's value along with its conditional formatting using the new CopyFrom method in ClosedXML 0.100, replacing the previous method of using the Value setter.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/migrations/migrate-to-0.100.rst#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar sourceCell = ws.Cell(1, 1);\nvar targetCell = ws.Cell(2, 1);\ntargetCell.CopyFrom(sourceCell.AsRange());\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Number Format in ClosedXML\nDESCRIPTION: Shows how to apply custom number formatting to cells. The example formats positive and negative numbers differently, with positive numbers showing one decimal place and negative numbers showing three decimal places in parentheses.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/cell-format.rst#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing var wb = new XLWorkbook();\nvar ws = wb.AddWorksheet();\nvar format = \"#,##0.0; (#,##0.000)\";\n\nws.Cell(\"A1\").Value = 10;\nws.Cell(\"A1\").Style.NumberFormat.Format = format;\n\nws.Cell(\"A2\").Value = -10;\nws.Cell(\"A2\").Style.NumberFormat.Format = format;\nwb.SaveAs(\"cell-format-custom-format.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Handling CalcEngine Errors in C#\nDESCRIPTION: This snippet illustrates how CalcEngine errors are now handled as valid return values instead of throwing exceptions. It shows an example of evaluating a division by zero formula.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/migrations/migrate-to-0.100.rst#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Errors are now valid return value. CalcEngine no longer throws exceptions\nAssert.AreEqual(XLError.DivisionByZero, XLWorkbook.EvaluateExpr(\"1/0\"));\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Connector Filters with ClosedXML in C#\nDESCRIPTION: This code shows how to create autofilters with custom connectors (AND/OR logic) on a range. The example demonstrates filtering for grades greater than 'C' AND not equal to 'N/A', then sorting the filtered list in ascending order.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/autofilter.rst#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// Add filters for failing grade. Skip immedate reapply for the first filter.\ngradesRange.SetAutoFilter().Column(1).GreaterThan(\"C\", false).And.NotEqualTo(\"N/A\");\n\n// Sort the filtered list\nws.AutoFilter.Sort(1, XLSortOrder.Ascending);\n\nwb.SaveAs(\"autofilter-filter-custom-connector-example.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Handling Unimplemented Functions in C#\nDESCRIPTION: This code shows how ClosedXML 0.100 handles unimplemented functions by returning an XLError.NameNotRecognized error instead of throwing a NameNotRecognizedException.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/migrations/migrate-to-0.100.rst#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar wb = new XLWorkbook();\nvar ws = wb.AddWorksheet();\nvar cell = ws.Cell(1,1);\ncell.FormulaA1 = \"RTD(\\\"stockprice.rtd\\\", \\\"NASD\\\", \\\"MSFT\\\")\";\nvar value = cell.Value; // Used to throw NameNotRecognizedException\nAssert.AreEqual(XLError.NameNotRecognized, value.GetError());\n```\n\n----------------------------------------\n\nTITLE: Applying Auto Filter to Tables in ClosedXML (C#)\nDESCRIPTION: Shows how to apply and configure auto filter for tables in ClosedXML. It demonstrates enabling the filter, sorting, and applying a filter condition.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/tables.rst#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nusing ClosedXML.Excel;\n\nusing var wb = new XLWorkbook();\nvar ws = wb.AddWorksheet();\n\nvar table = ws.Cell(\"B3\").InsertTable(new[]\n{\n    new Pastry(\"Cake\", 39, 3),\n    new Pastry(\"Waffles\", 15, 12),\n    new Pastry(\"Pie\", 19, 27)\n});\n\ntable.ShowAutoFilter = true;\n\n// Must enable the filter\ntable.AutoFilter.IsEnabled = true;\n\n// Sort by first column, desc\ntable.AutoFilter.Sort(1, XLSortOrder.Descending);\n\n// Only pastries that sold more than 10 pieces (through column number in the table)\ntable.AutoFilter.Column(3).GreaterThan(10);\n\nwb.SaveAs(\"tables-autofilter.xlsx\");\n\nrecord Pastry(string Name, double UnitPrice, int Sold);\n```\n\n----------------------------------------\n\nTITLE: Adding Worksheets with DataTables in ClosedXML 0.102\nDESCRIPTION: Illustrates the change in table naming when adding worksheets from DataTables. In version 0.102, table names are now auto-generated instead of matching the sheet name.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/migrations/migrate-to-0.102.rst#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar dt = new DataTable(\"Patients table\");\ndt.Columns.Add(\"Patient\", typeof(string));\ndt.Rows.Add(\"David\");\n\nusing var wb = new XLWorkbook();\nvar ws1 = wb.AddWorksheet(dt);\nConsole.WriteLine($\"{ws1.Name} {ws1.Tables.Single().Name}\");\nvar ws2 = wb.AddWorksheet(dt, \"Sheet name\");\nConsole.WriteLine($\"{ws2.Name} {ws2.Tables.Single().Name}\");\n\n// Output: 0.101\n// Patients table Patients table\n// Sheet name Sheet name\n\n// Output: 0.102\n// Patients table Table1\n// Sheet name Table2\n```\n\n----------------------------------------\n\nTITLE: Setting Cell Borders in ClosedXML\nDESCRIPTION: Demonstrates how to set borders for a cell in ClosedXML, specifying the border style for each side (top, right, bottom, left) with a default black color.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/cell-format.rst#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// Default color is black\nws.Cell(\"B2\").Style\n    .Border.SetTopBorder(XLBorderStyleValues.Medium)\n    .Border.SetRightBorder(XLBorderStyleValues.Medium)\n    .Border.SetBottomBorder(XLBorderStyleValues.Medium)\n    .Border.SetLeftBorder(XLBorderStyleValues.Medium);\n```\n\n----------------------------------------\n\nTITLE: Using Table as Source for Pivot Table in ClosedXML\nDESCRIPTION: Demonstrates how ClosedXML PivotTables.Add method prioritizes tables over ranges when creating pivot tables. When a range is passed that overlaps with an existing table, the table will be used as the source for the pivot cache instead of the range.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/migrations/migrate-to-0.104.rst#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// The workbook already contains a table A1:B3\nvar range = ws.Range(\"A1:A3\");\n// Although we passed a range and there isn't any pivot cache, the added\n// pivot cache uses the table as source, not the range.\nvar pivot = ws.PivotTables.Add(\"pivot table\", ws.Cell(\"A1\"), range);\n```\n\n----------------------------------------\n\nTITLE: Sorting Columns with ClosedXML in C#\nDESCRIPTION: Shows how to sort columns left-to-right in a worksheet range. The example creates a transposed dataset of pastry sales data and sorts it using row-based criteria in descending order.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/sort.rst#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing var wb = new XLWorkbook();\nvar ws = wb.AddWorksheet();\nws.Row(5).Style.NumberFormat.SetNumberFormatId((int)XLPredefinedFormat.Number.PercentInteger);\nvar range = ws.Cell(\"B3\").InsertData(new[]\n{\n    new object[]{ \"Pastry\", \"Waffle\", \"Fig Roll\", \"Cake\", \"Croissant\", },\n    new object[]{ \"Sold\",         74,         56,     14,          15, },\n    new object[]{ \"Margin\",     0.60,       0.50,   0.25,        0.60, },\n});\nrange.CopyTo(ws.Cell(\"H3\"));\nvar dataRangeOfCopy = ws.Range(\"I3:L5\");\n\ndataRangeOfCopy.SortRows.Add(3, XLSortOrder.Descending);\ndataRangeOfCopy.SortRows.Add(2, XLSortOrder.Descending);\ndataRangeOfCopy.SortLeftToRight();\nwb.SaveAs(\"sort-cols-example.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Formula Input Processing Changes\nDESCRIPTION: Formula setters now automatically trim whitespace and remove the leading equals sign from formulas. Additionally, they add required prefixes for future functions like CONCAT.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/migrations/migrate-to-0.105.rst#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Before (0.104) - formula is used as-is\ncell.FormulaA1 = \" = A1+B4 \";\n\n// After (0.105) - formula is trimmed and equals sign removed\ncell.FormulaA1 = \" = A1+B4 \"; // Internally becomes \"A1+B4\"\n\n// Before (0.104) - future functions required manual prefixing\ncell.FormulaA1 = \"_xlfn.CONCAT(A1:A5)\";\n\n// After (0.105) - future functions are automatically prefixed\ncell.FormulaA1 = \"CONCAT(A1:A5)\"; // Internally becomes \"_xlfn.CONCAT(A1:A5)\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Average Filters in ClosedXML\nDESCRIPTION: This code demonstrates how to use dynamic filters, specifically the above average filter. The example creates a worksheet with numeric values and filters to show only values above the average (1.75). Dynamic filters automatically adjust based on the actual data in the column.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/autofilter.rst#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing var wb = new XLWorkbook();\nvar ws = wb.Worksheets.Add(\"AutoFilter\");\nvar gradesRange = ws.Cell(\"A1\").InsertData(new object[] {\n    \"Value\",\n    1,\n    1,\n    1.7,\n    1.75,\n    1.8,\n    2,\n    3\n});\n\n// Average is 1.75 and it is not included.\ngradesRange.SetAutoFilter().Column(1).AboveAverage();\n\nwb.SaveAs(\"autofilter-filter-dynamic-average-example.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Using Bundled Carlito Font as Default in ClosedXML\nDESCRIPTION: This code demonstrates how to use a bundled Carlito font (which is metric-compatible with Calibri) as the default font for text measurement. The font is loaded from an embedded resource in the assembly.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/tips/missing-font.rst#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var fallbackFontStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(\"Carlito.ttf\"))\n{\n    // Carlito font will be used for everything, since it is the fallback font and no other font was loaded\n    LoadOptions.DefaultGraphicEngine = DefaultGraphicEngine.CreateOnlyWithFonts(fallbackFontStream);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Background Color in ClosedXML\nDESCRIPTION: Shows how to set the background color of a cell using the fluent API in ClosedXML.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/cell-format.rst#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nws.Cell(\"A1\").Style\n\t.Fill.SetBackgroundColor(XLColor.Red);\n```\n\n----------------------------------------\n\nTITLE: Bundling Custom Fonts with ClosedXML Application (v0.100+)\nDESCRIPTION: This code shows how to bundle a custom font with your application and create a DefaultGraphicEngine that uses both the bundled font and system fonts. This approach is available in ClosedXML version 0.100 and later.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/tips/missing-font.rst#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing (var fallbackFontStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(\"Namespace.SomeFont.ttf\"))\n{\n    LoadOptions.DefaultGraphicEngine = DefaultGraphicEngine.CreateWithFontsAndSystemFonts(fallbackFontStream);\n}\n```\n\n----------------------------------------\n\nTITLE: Resizing Tables in ClosedXML (C#)\nDESCRIPTION: Shows how to resize an existing table in ClosedXML. It demonstrates that empty header cells in the new range will be auto-filled with generated column names.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/tables.rst#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing ClosedXML.Excel;\n\nusing var wb = new XLWorkbook();\nvar ws = wb.AddWorksheet();\n\nws.Cell(1, 1).Value = \"Foo\";\nws.Cell(1, 2).Value = \"Bar\";\nws.Range(\"A2:B5\").Value = 10;\nvar table = ws.Range(\"A1:B5\").CreateTable();\n\ntable.Resize(\"B1\", \"D3\");\n\nwb.SaveAs(\"tables-resize.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Creating Graphic Engine with Multiple Embedded Fonts in ClosedXML\nDESCRIPTION: Shows how to create a graphic engine with multiple embedded fonts for environments without system font access. This approach loads a fallback font and additional fonts from streams.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/graphic-engine.rst#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing Stream fallbackFontStream = Assembly.GetManifestResourceStream(\"SomeEmbeddedFont.ttf\");\nusing Stream calibriFont = /* a way to get stream for a font */;\nusing Stream arialFont = /* a way to get stream for a font */;\nLoadOptions.DefaultGraphicEngine = DefaultGraphicEngine.CreateOnlyWithFonts(fallbackFontStream, calibriFont, arialFont);\n```\n\n----------------------------------------\n\nTITLE: Setting Default Graphic Engine Globally in ClosedXML\nDESCRIPTION: Sets a custom graphic engine with the Carlito font as the global default for all workbooks created afterward. This approach affects all workbooks created in the application.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/graphic-engine.rst#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nLoadOptions.DefaultGraphicEngine = new DefaultGraphicEngine(\"Carlito\");\n\n// All workbooks created after setting of the engine will use the specified engine.\nusing var workbook = new XLWorkbook();\n```\n\n----------------------------------------\n\nTITLE: Initializing Grade Filter Example in C#\nDESCRIPTION: Partial example showing the initialization of a grade filtering system using AutoFilter. The code demonstrates basic data setup for grade filtering.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/autofilter.rst#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing var wb = new XLWorkbook();\nvar ws = wb.Worksheets.Add(\"AutoFilter\");\nvar gradesRange = ws.Cell(\"A1\").InsertData(new[] {\n    \"Grade\",\n    \"F\",\n    \"C\",\n    \"C\",\n    \"N/A\",\n    \"A\",\n```\n\n----------------------------------------\n\nTITLE: Setting Text Orientation in ClosedXML\nDESCRIPTION: Demonstrates how to set text rotation in cells, including vertical text and various rotation angles from -90 to 90 degrees in 30-degree increments.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/cell-format.rst#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing ClosedXML.Excel;\n\nusing var wb = new XLWorkbook();\nvar ws = wb.AddWorksheet();\nws.ColumnWidth = 10;\nws.Cell(1, 1)\n    .SetValue(\"Vertical\")\n    .Style.Alignment.SetTextRotation(255);\n\nfor (var angle = -90; angle <= 90; angle += 30)\n{\n    var column = angle / 30 + 5;\n    ws.Cell(1, column)\n        .SetValue($\"Rotation: {angle}\")\n        .Style.Alignment.SetTextRotation(angle);\n}\n\nwb.SaveAs(\"cell-format-alignment-orientation.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Generating Doxygen Documentation for IXLWorksheet Interface in RST\nDESCRIPTION: Sphinx directive to generate documentation for the IXLWorksheet interface from the ClosedXML Excel library, including all its members.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/api/worksheet.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. doxygeninterface:: ClosedXML::Excel::IXLWorksheet\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Using Pattern Filters with Wildcards in ClosedXML\nDESCRIPTION: This example demonstrates how to use pattern filters in ClosedXML. The code creates a worksheet with country codes and applies a filter to show only items that begin with 'CZ'. The example illustrates the pattern matching capabilities of ClosedXML's filtering system.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/autofilter.rst#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing var wb = new XLWorkbook();\nvar ws = wb.Worksheets.Add(\"AutoFilter\");\nvar gradesRange = ws.Cell(\"A1\").InsertData(new[] {\n    \"Code\",\n    \"CZ-144\",\n    \"US-44\",\n    \"FR-94\",\n    \"CZ-84\",\n    \"FR-98\",\n    \"IN-94\",\n});\n\ngradesRange.SetAutoFilter().Column(1).BeginsWith(\"CZ\");\n\nwb.SaveAs(\"autofilter-filter-custom-pattern-example.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Updating SixLabors.Fonts Dependency in C#\nDESCRIPTION: The SixLabors.Fonts library has been updated from version 1.0.0-beta18 to 1.0.0-beta19 to fix bugs related to font measurement.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/migrations/migrate-to-0.101.rst#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// Update your project's dependency to:\n// SixLabors.Fonts version 1.0.0-beta19\n```\n\n----------------------------------------\n\nTITLE: Modifying Workbook Theme Colors in C#\nDESCRIPTION: Shows how to modify the theme color of a workbook by changing the Text2 color property to red. Creates a new workbook, adds a worksheet, and saves the modified theme.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/themes.rst#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing var wb = new XLWorkbook();\nvar ws = wb.AddWorksheet();\nvar red = XLColor.FromHtml(\"FF0000\");\nwb.Theme.Text2 = red;\nwb.SaveAs(\"theme-modified.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Runtime Details for Performance Benchmarks\nDESCRIPTION: Technical details about the runtime environment used for benchmarking ClosedXML performance, including OS version, CPU specifications, and .NET SDK information.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nBenchmarkDotNet v0.13.8, Windows 11 (10.0.22621.2283/22H2/2022Update/SunValley2)\nAMD Ryzen 5 5500U with Radeon Graphics, 1 CPU, 12 logical and 6 physical cores\n.NET SDK 8.0.100-rc.1.23463.5\n  [Host] : .NET 7.0.11 (7.0.1123.42427), X64 RyuJIT AVX2\n```\n\n----------------------------------------\n\nTITLE: Applying Font Schemes in a Workbook with C#\nDESCRIPTION: Shows how to set font schemes (Major and Minor) for cells in a workbook. Creates cells with different font schemes and demonstrates how they update when the theme changes.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/themes.rst#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing var wb = new XLWorkbook();\nvar ws = wb.AddWorksheet();\n\nws.Cell(\"A1\")\n    .SetValue(\"Major\")\n    .Style.Font.SetFontScheme(XLFontScheme.Major);\nws.Cell(\"A1\")\n    .SetValue(\"Minor\")\n    .Style.Font.SetFontScheme(XLFontScheme.Minor);\nwb.SaveAs(\"theme-font-scheme.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Defining Python Documentation Dependencies\nDESCRIPTION: Lists required Python packages and their specific versions for documentation generation. The dependencies include Breathe for Doxygen integration, Sphinx for building documentation, the Read the Docs theme for Sphinx, and LinuxDoc utilities.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nbreathe==4.34.0\nsphinx==5.3.0\nsphinx-rtd-theme==1.1.0\nlinuxdoc==20221127\n```\n\n----------------------------------------\n\nTITLE: Working with Table Headers and Fields in ClosedXML (C#)\nDESCRIPTION: Shows how to work with table headers and fields in ClosedXML. It demonstrates that field names are independent of header row visibility and can be referenced even when the header is hidden.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/tables.rst#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing ClosedXML.Excel;\n\nusing var wb = new XLWorkbook();\nvar ws = wb.AddWorksheet();\n\nws.Cell(\"A1\").SetValue(\"Original Name\");\nws.Cell(\"A2\").InsertData(Enumerable.Range(1, 5));\n\nvar table = ws.Range(\"A1:A6\").CreateTable(\"Table\");\ntable.ShowHeaderRow = false;\nws.Cell(\"A1\").Value = \"Changed Name\";\n\n// Reference original name of the field, although the actual value\n// in the cell where header used to be is changed.\nws.Cell(\"D2\").FormulaA1 = \"SUM(Table[Original Name])\";\n\nwb.SaveAs(\"tables-header.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Creating Graphic Engine with Embedded Font for Blazor in ClosedXML\nDESCRIPTION: Demonstrates how to create a graphic engine with an embedded font for Blazor applications where file system access is unavailable. The embedded font is loaded from an assembly resource stream.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/graphic-engine.rst#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing Stream fallbackFontStream = Assembly.GetManifestResourceStream(\"SomeEmbeddedFont.ttf\");\nLoadOptions.DefaultGraphicEngine = DefaultGraphicEngine.CreateOnlyWithFonts(fallbackFontStream);\n```\n\n----------------------------------------\n\nTITLE: Repositioning Worksheets in ClosedXML (C#)\nDESCRIPTION: Demonstrates how to change the position of worksheets within a workbook, including the effect on other worksheet positions.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/worksheets.rst#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nwb.AddWorksheet(\"Sheet1\");\nwb.AddWorksheet(\"Sheet2\");\nwb.AddWorksheet(\"Sheet3\");\nwb.AddWorksheet(\"Sheet4\");\n\n// The end result will be Sheet2, Sheet3, Sheet1, Sheet4\nwb.Worksheet(\"Sheet1\").Position = 3;\n```\n\n----------------------------------------\n\nTITLE: Setting Graphic Engine for Specific Workbook in ClosedXML\nDESCRIPTION: Configures a custom graphic engine for a single workbook instance using LoadOptions. This approach allows different graphic engines to be used for different workbooks in the same application.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/graphic-engine.rst#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Only workbooks created with the options will use the engine\nvar loadOptions = new LoadOptions\n{\n    GraphicEngine = new DefaultGraphicEngine(\"Carlito\")\n};\nusing var workbook = new XLWorkbook(loadOptions);\n```\n\n----------------------------------------\n\nTITLE: Implementing Regular AutoFilter in C#\nDESCRIPTION: Shows how to implement a regular filter with both text and date group filtering. The example demonstrates adding multiple filter conditions to a column.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/autofilter.rst#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing var wb = new XLWorkbook();\nvar ws = wb.AddWorksheet();\nws.Column(\"B\").Width = 12;\nvar range = ws.Cell(\"B3\").InsertData(new object[]\n{\n    \"Header\",\n    \"Text\",\n    7,\n    new DateTime(2020, 1, 5),\n    new DateTime(2020, 1, 14),\n    \"7\",\n    new DateTime(2020, 2, 5)\n});\n\nrange.SetAutoFilter().Column(1)\n    .AddFilter(\"7\", false)\n    .AddDateGroupFilter(new DateTime(2020, 1, 1), XLDateTimeGrouping.Month);\n\nwb.SaveAs(\"autofilter-filter-regular-example.xlsx\");\n```\n\n----------------------------------------\n\nTITLE: Working with Formula Cells in ClosedXML\nDESCRIPTION: Best practices for working with formulas in ClosedXML, including methods for inserting data, setting values, and triggering formula recalculation.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/concepts/formula-calculation.rst#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nIXLCell.InsertData                              // Insert data, marks dependent formulas as dirty\nIXLCell.Value = newValue                         // Set a single cell value\nIXLCell.CachedValue                              // Retrieve value without recalculation\nSaveOptions.EvaluateFormulasBeforeSaving         // Recalculate before saving\nIXLWorkbook.RecalculateAllFormulas()             // Recalculate all formulas in workbook\nIXLWorksheet.RecalculateAllFormulas()            // Recalculate all formulas in worksheet\nIXLCell.NeedsRecalculation                       // Check if formula is dirty\nIXLCell.InvalidateFormula()                      // Mark formula as dirty\n```\n\n----------------------------------------\n\nTITLE: Setting Formula with Future Function (v0.105+)\nDESCRIPTION: Demonstrates automatic translation of future function names in formulas to their correct prefixed names in ClosedXML version 0.105 and newer.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/functions.rst#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nws.Cell(1,1).FormulaA1 = \"CONCAT(A1:A2)\";\nAssert.AreEqual(\"_xlfn.CONCAT(A1:A2)\", ws.Cell(1,1).FormulaA1);\n```\n\n----------------------------------------\n\nTITLE: Setting Formula with Future Function (pre-v0.105)\nDESCRIPTION: Shows how to manually set future function names with required prefix in ClosedXML versions before 0.105.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/features/functions.rst#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nws.Cell(1,1).FormulaA1 = \"_xlfn.CONCAT(A1:A2)\";\n```\n\n----------------------------------------\n\nTITLE: Installing ClosedXML via .NET CLI\nDESCRIPTION: Command to install the ClosedXML package using the .NET CLI. This adds the ClosedXML package to your .NET project.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nC:\\source> dotnet add package ClosedXML\n```\n\n----------------------------------------\n\nTITLE: Installing ClosedXML using .NET CLI\nDESCRIPTION: This command demonstrates how to install ClosedXML package using the .NET CLI. It's the simplest way to add ClosedXML to a project.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/installation.rst#2025-04-23_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nC:\\source> dotnet add package ClosedXML\n```\n\n----------------------------------------\n\nTITLE: Installing ClosedXML with SixLabors.Fonts using Package Manager Console\nDESCRIPTION: This command shows how to install ClosedXML package along with its beta dependency SixLabors.Fonts using the Package Manager Console. The -IncludePrerelease switch is necessary to include the beta package.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/installation.rst#2025-04-23_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\nPM> Install-Package ClosedXML -Version 0.97.0 -Verbose -IncludePrerelease\n```\n\n----------------------------------------\n\nTITLE: Listing Available Fonts with SixLabors.Fonts in ClosedXML\nDESCRIPTION: This code snippet demonstrates how to get a list of all font families available in the current environment using the SixLabors.Fonts library that ClosedXML uses for text measurement.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/tips/missing-font.rst#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nforeach (var fontFamily in SixLabors.Fonts.SystemFonts.Collection.Families)\n   Console.WriteLine(fontFamily.Name);\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Fallback Font in ClosedXML\nDESCRIPTION: This code shows how to set a custom fallback font for the DefaultGraphicEngine in ClosedXML. The fallback font should be a font name (not a file path) that is already installed on the system.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/tips/missing-font.rst#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// \"Fallback font name\" will likely be something like \"DejaVu Sans\" or \"Tahoma\"\n// It is not a path to font file, but a font name.\nLoadOptions.DefaultGraphicEngine = new DefaultGraphicEngine(\"Fallback font name\");\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Rich Text Manipulation in C#\nDESCRIPTION: This snippet shows how to manipulate rich text in a cell and how changes to the rich text affect the cell's value. It highlights the new connection between rich text and cell value in ClosedXML 0.100.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/migrations/migrate-to-0.100.rst#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar cell = ws.Cell(1,1);\nvar richText = cell.GetRichText();\n\nrichText.AddText(\"Hello\").SetFontSize(15);\nAssert.AreEqual(\"Hello\", cell.Value);\n\nrichText.AddText(\"World\").SetFontSize(20);\nAssert.AreEqual(\"HelloWorld\", cell.Value);\n```\n\n----------------------------------------\n\nTITLE: Changing Enum Underlying Type in C#\nDESCRIPTION: The underlying type for enums XLAlignmentReadingOrderValues, XLAlignmentHorizontalValues, and XLAlignmentVerticalValues has been changed from int to byte to save memory due to alignment.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/migrations/migrate-to-0.101.rst#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic enum XLAlignmentReadingOrderValues : byte { /* ... */ }\npublic enum XLAlignmentHorizontalValues : byte { /* ... */ }\npublic enum XLAlignmentVerticalValues : byte { /* ... */ }\n```\n\n----------------------------------------\n\nTITLE: Adding GetGlyphBox Method to IXLGraphicEngine Interface in C#\nDESCRIPTION: A new method GetGlyphBox has been added to the IXLGraphicEngine interface. Refer to the XML documentation for more details on its usage and parameters.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/migrations/migrate-to-0.101.rst#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic interface IXLGraphicEngine\n{\n    // Existing methods\n    \n    // New method\n    GlyphBox GetGlyphBox(/* parameters */); // See XML doc for details\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Cell References in C# with ClosedXML 0.102\nDESCRIPTION: Demonstrates the change in cell reference comparison due to the new sparse array storage implementation. The '==' operator no longer works for comparing cells, and the Equals method should be used instead.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/migrations/migrate-to-0.102.rst#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar first = ws.Cell(\"A1\");\nvar second = ws.Cell(\"A1\");\nif (first == second) {\n  // no longer works\n}\n\nif (first.Equals(second))\n{\n  // works\n}\n```\n\n----------------------------------------\n\nTITLE: Using IXLPhonetics Collection Methods in ClosedXML 0.103\nDESCRIPTION: The code demonstrates how to use the IXLPhonetics collection methods to manipulate phonetic hints after the removal of property setters in IXLPhonetic. Instead of setting properties directly, use ClearText() to remove existing phonetics and Add() to create new ones.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/migrations/migrate-to-0.103.rst#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nIXLPhonetics.ClearText()\n```\n\nLANGUAGE: csharp\nCODE:\n```\nIXLPhonetics.Add(String text, Int32 start, Int32 end)\n```\n\n----------------------------------------\n\nTITLE: Accessing Hyperlinks Property Migration\nDESCRIPTION: The Hyperlinks property has been moved from IXLRangeBase to IXLWorksheet. Code that previously accessed hyperlinks through a range must now access them through the worksheet.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/migrations/migrate-to-0.105.rst#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Before (0.104)\nvar hyperlinks = range.Hyperlinks;\n\n// After (0.105)\nvar hyperlinks = worksheet.Hyperlinks;\n```\n\n----------------------------------------\n\nTITLE: IXLHyperlinks.Delete Return Type Change\nDESCRIPTION: The Delete method on IXLHyperlinks now returns a boolean value indicating whether a hyperlink was present and successfully removed, rather than returning void.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/migrations/migrate-to-0.105.rst#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Before (0.104)\nworksheet.Hyperlinks.Delete(cell.Address);\n\n// After (0.105)\nbool wasRemoved = worksheet.Hyperlinks.Delete(cell.Address);\n```\n\n----------------------------------------\n\nTITLE: Accessing Show Phonetic Property in ClosedXML\nDESCRIPTION: Demonstrates how to toggle the display of phonetic information (furigana for Japanese) for cells using the IXLCell.ShowPhonetic property.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/migrations/release-notes-0.101.rst#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nIXLCell.ShowPhonetic\n```\n\n----------------------------------------\n\nTITLE: Accessing Text Rotation Property in ClosedXML\nDESCRIPTION: Shows how to set text rotation for a cell. The rotation is limited to -90 to 90 degrees, or 255 for vertical layout. This property is accessed through the IXLAlignment interface.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/migrations/release-notes-0.101.rst#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nIXLAlignment.TextRotation\n```\n\n----------------------------------------\n\nTITLE: Configuring Doxygen Interface Documentation for IXLAutoFilter in RST\nDESCRIPTION: RST directive to generate documentation for the IXLAutoFilter interface in ClosedXML using Doxygen. The directive instructs Doxygen to document all members of the IXLAutoFilter interface from the ClosedXML.Excel namespace.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/api/autofilter.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. doxygeninterface:: ClosedXML::Excel::IXLAutoFilter\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Doxygen to Document ClosedXML Excel Namespace in RST\nDESCRIPTION: This RST (reStructuredText) directive instructs Doxygen to generate documentation for all members of the ClosedXML::Excel namespace. The :members: flag ensures that all members of the namespace are included in the documentation output.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/api/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. doxygennamespace:: ClosedXML::Excel\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Generating Doxygen Documentation for IXLWorkbook Interface in ClosedXML\nDESCRIPTION: This reStructuredText directive instructs Doxygen to generate documentation for the IXLWorkbook interface in the ClosedXML.Excel namespace. It includes all members of the interface in the generated documentation.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/docs/api/workbook.rst#2025-04-23_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. doxygeninterface:: ClosedXML::Excel::IXLWorkbook\n   :members:\n```\n\n----------------------------------------\n\nTITLE: XML Path Expression for Excel Table Column Totals Row Label\nDESCRIPTION: XML path expression that specifies the location of totals row label attribute in Excel table structure. This attribute value must match the actual cell content in the worksheet to prevent Excel from marking the workbook as corrupt.\nSOURCE: https://github.com/closedxml/closedxml/blob/develop/ClosedXML/Excel/Tables/README.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\ntable/tableColumns/tableColumn[@totalsRowLabel]\n```"
  }
]