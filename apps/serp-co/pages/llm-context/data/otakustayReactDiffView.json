[
  {
    "owner": "otakustay",
    "repo": "react-diff-view",
    "content": "TITLE: Rendering Diff Hunks with Diff and Hunk Components (TSX)\nDESCRIPTION: A basic usage example demonstrating how to render a diff using the `Diff` and `Hunk` components.  It parses the diff text, maps over the files and hunks, and renders each hunk within the `Diff` component.  The `viewType` prop sets the view to 'split'.\nSOURCE: https://github.com/otakustay/react-diff-view/blob/master/README.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseDiff, Diff, Hunk} from 'react-diff-view';\n\nfunction renderFile({oldRevision, newRevision, type, hunks}) {\n    return (\n        <Diff key={oldRevision + '-' + newRevision} viewType=\"split\" diffType={type} hunks={hunks}>\n            {hunks => hunks.map(hunk => <Hunk key={hunk.content} hunk={hunk} />)}\n        </Diff>\n    );\n}\n\nfunction App({diffText}) {\n    const files = parseDiff(diffText);\n\n    return (\n        <div>\n            {files.map(renderFile)}\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Diff Text with parseDiff\nDESCRIPTION: This example demonstrates how to use the `parseDiff` function to parse a diff text into a structured array of file objects. The `nearbySequences` option is used to zip nearby deletion and addition sequences for better readability.\nSOURCE: https://github.com/otakustay/react-diff-view/blob/master/README.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n-    // if someone has already defined a value bail and don't track value\n-    // will cause over reporting of changes, but it's better then a hard failure\n-    // (needed for certain tests that spyOn input values)\n-    if (node.hasOwnProperty(valueField)) {\n+    // if someone has already defined a value or Safari, then bail\n+    // and don't track value will cause over reporting of changes,\n+    // but it's better then a hard failure\n+    // (needed for certain tests that spyOn input values and Safari)\n```\n\nLANGUAGE: diff\nCODE:\n```\n-    // if someone has already defined a value bail and don't track value\n+    // if someone has already defined a value or Safari, then bail\n-    // will cause over reporting of changes, but it's better then a hard failure\n+    // and don't track value will cause over reporting of changes,\n-    // (needed for certain tests that spyOn input values)\n+    // but it's better then a hard failure\n-    if (node.hasOwnProperty(valueField)) {\n+    // (needed for certain tests that spyOn input values and Safari)\n```\n\n----------------------------------------\n\nTITLE: Add Widgets to React Diff View (JavaScript)\nDESCRIPTION: This code demonstrates how to add widgets to the react-diff-view component. It defines a `getWidgets` function that identifies long lines in the diff and returns an object mapping change keys to React elements.  The `App` component then renders the `Diff` component with the `widgets` prop set to the result of `getWidgets`, displaying a warning message below long lines.\nSOURCE: https://github.com/otakustay/react-diff-view/blob/master/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {parseDiff, getChangeKey, Diff} from 'react-diff-view';\n\nconst getWidgets = hunks => {\n    const changes = hunks.reduce((result, {changes}) => [...result, ...changes], []);\n    const longLines = changes.filter(({content}) => content.length > 120);\n    return longLines.reduce(\n        (widgets, change) => {\n            const changeKey = getChangeKey(change);\n\n            return {\n                ...widgets,\n                [changeKey]: <span className=\"error\">Line too long</span>,\n            };\n        },\n        {}\n    );\n};\n\nconst App = ({diffText}) => {\n    const files = parseDiff(diffText);\n\n    return (\n        <div>\n            {files.map(({hunks}, i) => <Diff key={i} hunks={hunks} widgets={getWidgets(hunks)} viewType=\"split\" />)}\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Tokenizing Diffs in a Web Worker with withTokenizeWorker\nDESCRIPTION: This section describes how to use the `withTokenizeWorker` HOC to perform diff tokenization in a web worker. This helps avoid blocking the main thread when processing large diffs. The worker must adhere to a specific message protocol for communication. This example shows a worker implementation that uses `react-diff-view/tokenize` and `refractor` to tokenize the diff.\nSOURCE: https://github.com/otakustay/react-diff-view/blob/master/docs/hoc.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"tokenize\",\n    \"id\": 112,\n    \"payload\": {\n        \"language\": \"jsx\",\n        \"oldSource\": \"console.log(123)\",\n        \"hunks\": [...]\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 112,\n    \"payload\": {\n        \"success\": true,\n        \"tokens\": [...]\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 112,\n    \"payload\": {\n        \"success\": false,\n        \"reason\": \"Any reason\"\n    }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {tokenize, markEdits, markWord} from 'react-diff-view/tokenize';\nimport {compact} from 'lodash';\nimport refractor from 'refractor';\n\nself.addEventListener(\n    'message',\n    ({data: {id, payload}}) => {\n        const {hunks, oldSource, language} = payload;\n\n        const options = {\n            highlight: language !== 'text',\n            refractor: refractor,\n            language: language,\n            oldSource: oldSource,\n            enhancers: [\n                markWord('\\r', 'carriage-return', '␍'),\n                markWord('\\t', 'tab', '→'),\n                markEdits(hunks, {type: 'block'})\n            ]\n        };\n\n        try {\n            const tokens = tokenize(hunks, options);\n            const data = {\n                id: id,\n                payload: {\n                    success: true,\n                    tokens: tokens\n                }\n            };\n            self.postMessage(data);\n        }\n        catch (ex) {\n            const data = {\n                id: id,\n                payload: {\n                    success: false,\n                    reason: ex.message\n                }\n            };\n            self.postMessage(data);\n        }\n    }\n);\n\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport {withTokenizeWorker, Diff, Hunk} from 'react-diff-view';\nimport TokenizeWorker from './tokenize.worker.js'; // See above example\n\nconst worker = new TokenizeWorker();\n\nconst EnhancedDiff = withTokenizeWorker(worker)(Diff);\n\n// Able to provide oldSource prop\n// Require language prop\n<EnhancedDiff language=\"jsx\" ... />\n```\n\n----------------------------------------\n\nTITLE: CSS Variables for React Diff View Styling (CSS)\nDESCRIPTION: This CSS code defines a set of CSS variables that can be used to customize the appearance of the react-diff-view component. These variables control colors, fonts, and backgrounds for various parts of the diff view, such as gutters, code sections, and selected lines.  By overriding these variables, users can easily change the overall look and feel of the component.\nSOURCE: https://github.com/otakustay/react-diff-view/blob/master/README.md#_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n:root {\n    --diff-background-color: initial;\n    --diff-text-color: initial;\n    --diff-font-family: Consolas, Courier, monospace;\n    --diff-selection-background-color: #b3d7ff;\n    --diff-selection-text-color: var(--diff-text-color);;\n    --diff-gutter-insert-background-color: #d6fedb;\n    --diff-gutter-insert-text-color: var(--diff-text-color);\n    --diff-gutter-delete-background-color: #fadde0;\n    --diff-gutter-delete-text-color: var(--diff-text-color);\n    --diff-gutter-selected-background-color: #fffce0;\n    --diff-gutter-selected-text-color: var(--diff-text-color);\n    --diff-code-insert-background-color: #eaffee;\n    --diff-code-insert-text-color: var(--diff-text-color);\n    --diff-code-delete-background-color: #fdeff0;\n    --diff-code-delete-text-color: var(--diff-text-color);\n    --diff-code-insert-edit-background-color: #c0dc91;\n    --diff-code-insert-edit-text-color: var(--diff-text-color);\n    --diff-code-delete-edit-background-color: #f39ea2;\n    --diff-code-delete-edit-text-color: var(--diff-text-color);\n    --diff-code-selected-background-color: #fffce0;\n    --diff-code-selected-text-color: var(--diff-text-color);\n    --diff-omit-gutter-line-color: #cb2a1d;\n}\n```\n\n----------------------------------------\n\nTITLE: Tokenizing diffs with Enhancers in React-Diff-View\nDESCRIPTION: Example of using the `tokenize` function with enhancers to enable inline diff edits and highlight special characters like tabs and carriage returns. It requires the `refractor` library for code highlighting and specifies the language as 'jsx'.\nSOURCE: https://github.com/otakustay/react-diff-view/blob/master/README.md#_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport refractor from 'refractor';\n\nconst options = {\n    highlight: true,\n    refractor: refractor,\n    oldSource: oldSource,\n    language: 'jsx',\n    enhancers: [\n        markWord('\\r', 'carriage-return'),\n        markWord('\\t', 'tab'),\n        markEdits(hunks),\n    ],\n};\n\nconst tokens = tokenize(hunks, options);\n```\n\n----------------------------------------\n\nTITLE: Customize Events with React Diff View (JSX)\nDESCRIPTION: This JSX code snippet shows how to customize events in react-diff-view to add code selection functionality. It uses the `useState`, `useCallback`, and `useMemo` hooks to manage the selected changes and create event handlers for the gutter and code elements. Clicking on the gutter or code toggles the selection of the corresponding change.\nSOURCE: https://github.com/otakustay/react-diff-view/blob/master/README.md#_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport {useState, useCallback, useMemo} from 'react';\n\nfunction File({hunks, diffType}) {\n    const [selectedChanges, setSelectedChanges] = useState([]);\n    const selectChange = useCallback(\n        ({change}) => {\n            const toggle = selectedChanges => {\n                const index = selectedChanges.indexOf(change);\n                if (index >= 0) {\n                    return [\n                        ...selectedChanges.slice(0, index),\n                        ...selectedChanges.slice(index + 1),\n                    ];\n                }\n                return [...selectedChanges, change];\n            };\n            setSelectedChanges(toggle);\n        },\n        []\n    );\n    const diffProps = useMemo(\n        () => {\n            return {\n                gutterEvents: {onClick: selectChange},\n                codeEvents: {onClick: selectChange},\n            };\n        },\n        [selectChange]\n    );\n\n    return (\n        <Diff viewType=\"split\" diffType={diffType} hunks={hunks} {...diffProps}>\n            {hunks => hunks.map(hunk => <Hunk key={hunk.content} hunk={hunk} />)}\n        </Diff>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Gutter with renderGutter in React-Diff-View\nDESCRIPTION: Shows how to customize the gutter of the `Diff` component using the `renderGutter` prop. The function receives properties like the current change, side, default render function, a function to wrap the content in an anchor, and whether the change is hovered. This example adds a unit test coverage bar and a comment button to the gutter.\nSOURCE: https://github.com/otakustay/react-diff-view/blob/master/README.md#_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nconst renderGutter = ({change, side, renderDefault, wrapInAnchor, inHoverState}) => {\n    if (inHoverState) {\n        return (\n            <>\n                {side === 'new' && <UnitTestCoverageBar change={change} />}\n                <CommentButton change={change} />\n            </>\n        );\n    }\n\n    return (\n        <>\n            <UnitTestCoverageBar change={change} />\n            {wrapInAnchor(renderDefault())}\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Line ClassName with generateLineClassName in React-Diff-View\nDESCRIPTION: Illustrates how to use the `generateLineClassName` prop to customize the class name of lines in the `Diff` component. The function receives an array of changes for the current line and a default render function. This example applies different class names based on the `viewType` and the changes present.\nSOURCE: https://github.com/otakustay/react-diff-view/blob/master/README.md#_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nconst generateLineClassName = ({changes, defaultGenerate}) => {\n    if (viewType === 'inline') {\n        const [change] = changes;\n        return defaultGenerate();\n    }\n    const [oldChange, newChange] = changes;\n    return 'rebase-line-change';\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Change Selections with withChangeSelect in React\nDESCRIPTION: This code demonstrates how to use the `withChangeSelect` HOC from `react-diff-view` to manage the selection of changes in a diff view. It provides the ability to toggle the selection of individual changes and allows for single or multiple selections. The `onClick` event on the code area triggers the `onToggleChangeSelection` callback.\nSOURCE: https://github.com/otakustay/react-diff-view/blob/master/docs/hoc.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Diff, Hunk, withChangeSelect} from 'react-diff-view';\n\nconst DiffView = ({hunks, selectedChanges, onToggleChangeSelection}) => {\n    const codeEvents = {\n        onClick: onToggleChangeSelection\n    };\n    const renderHunk = hunk => (\n        <Hunk\n            key={hunk.content}\n            hunk={hunk}\n            codeEvents={codeEvents}\n        />\n    );\n\n    return (\n        <Diff hunks={hunks} selectedChanges={selectedChanges}>\n            {hunks => hunks.map(renderHunk)}\n        </Diff>\n    );\n};\n\nexport default withChangeSelect({multiple: true})(DiffView);\n\n<DiffView ... />\n```\n\n----------------------------------------\n\nTITLE: Expanding Collapsed Blocks Interactively with withSourceExpansion in React\nDESCRIPTION: This example demonstrates using the `withSourceExpansion` HOC to allow users to expand collapsed blocks in a diff view by clicking on a custom decoration. The `onExpandRange` callback is used to expand the specified range of lines. Requires the `oldSource` property to provide the original source of the diff.\nSOURCE: https://github.com/otakustay/react-diff-view/blob/master/docs/hoc.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Diff, Decoration, Hunk, withSourceExpansion} from 'react-diff-view';\n\nconst UnfoldCollapsed = ({previousHunk, currentHunk, onClick}) => {\n    const start = previousHunk ? previousHunk.oldStart + previousHunk.oldLines : 1;\n    const end = currentHunk.oldStart - 1;\n\n    return (\n        <div onClick={() => onClick(start, end)}>\n            Click to expand\n        </div>\n    );\n};\n\nconst DiffView = ({hunks, onExpandRange}) => {\n    const renderHunk = (children, hunk) => {\n        const previousElement = children[children.length - 1];\n        const decorationElement = (\n            <UnfoldCollapsed\n                key={'decoration-' + hunk.content}\n                previousHunk={previousElement && previousElement.props.hunk}\n                currentHunk={hunk}\n                onClick={onExpandRange}\n            />\n        );\n        children.push(decorationElement);\n\n        const hunkElement = (\n            <Hunk\n                key={'hunk-' + hunk.content}\n                hunk={hunk}\n            />\n        );\n        children.push(hunkElement);\n\n        return children;\n    };\n\n    return (\n        <Diff hunks={hunks} diffType=\"modify\" viewType=\"split\">\n            {hunks => hunks.reduce(renderHunk, [])}\n        </Diff>\n    );\n};\n\nexport default withSourceExpansion()(DiffView);\n\n<DiffView ... /> // Remember to provide oldSource prop\n```\n\n----------------------------------------\n\nTITLE: Expanding Collapsed Blocks with minCollapsedLines in React\nDESCRIPTION: This snippet demonstrates how to use the `minCollapsedLines` HOC to automatically expand collapsed blocks in a diff view if they contain fewer lines than a specified threshold. The `oldSource` prop is required to provide the original source code for accurate expansion. This enhances usability by revealing small, collapsed changes by default.\nSOURCE: https://github.com/otakustay/react-diff-view/blob/master/docs/hoc.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {Diff, minCollapsedLines} from 'react-diff-view';\n\nconst EnhancedDiff = minCollapsedLines(10)(Diff);\n\n<EnhancedDiff ... /> // Remember to provide oldSource prop\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple Elements in Decoration (JSX)\nDESCRIPTION: This example shows how to render two elements within a `Decoration` component, allowing for custom content in both the gutter and code positions around a hunk. A `SmileFace` component is rendered in the gutter, and the hunk content is rendered in the code position.\nSOURCE: https://github.com/otakustay/react-diff-view/blob/master/README.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst renderHunk = hunk => [\n    <Decoration key={'decoration-' + hunk.content}>\n        <SmileFace />,\n        <span>{hunk.content}</span>\n    </Decoration>,\n    <Hunk key={'hunk-' + hunk.content}> hunk={hunk} />\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Decorations Around Hunks (JSX)\nDESCRIPTION: This example demonstrates how to add custom decorations around `Hunk` components using the `Decoration` component. The `renderHunk` function returns an array containing the `Decoration` component and the `Hunk` component, rendered side by side.\nSOURCE: https://github.com/otakustay/react-diff-view/blob/master/README.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport {flatMap} from 'lodash';\nimport {Diff, Hunk, Decoration} from 'react-diff-view';\n\nconst renderHunk = hunk => [\n    <Decoration key={'decoration-' + hunk.content}>\n        {hunk.content}\n    </Decoration>,\n    <Hunk key={'hunk-' + hunk.content}> hunk={hunk} />\n];\n\nconst DiffFile = ({diffType, hunks}) => (\n    <Diff viewType=\"split\" diffType={diffType}>\n        {flatMap(hunks, renderHunk)}\n    </Diff>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Token with React-Diff-View\nDESCRIPTION: Demonstrates how to use the `renderToken` prop of the `Diff` component to customize the rendering of tokens based on their type. It shows how to conditionally render tokens of a specific type ('searchResult') with a custom span and recursively render children tokens.\nSOURCE: https://github.com/otakustay/react-diff-view/blob/master/README.md#_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n// Suppose we pick ranges of type `searchResult`\nconst renderToken = (token, defaultRender, i) => {\n    if (token.type === 'searchResult') {\n        return (\n            <span key={i} className=\"search-result\">\n                {token.children && token.children.map((token, i) => renderToken(token, defaultRender, i))}\n            </span>\n        );\n    }\n\n    // For other types, use the default render function\n    return defaultRender(token, i);\n};\n```\n\n----------------------------------------\n\nTITLE: Less Selector for Hover Styling (Less)\nDESCRIPTION: This Less code snippet demonstrates how to style the gutter element on hover in react-diff-view's split view. It uses Less selectors to target the gutter elements when a change is hovered, adding a FontAwesome icon before the gutter content. The selector is specific to split view and falls back to a general hover selector for unified view.\nSOURCE: https://github.com/otakustay/react-diff-view/blob/master/README.md#_snippet_9\n\nLANGUAGE: less\nCODE:\n```\n// Less selector to disable the line number and add an icon in the gutter element when a change is hovered\n.diff-line-hover-old.diff-gutter,\n.diff-line-hover-new.diff-gutter,\n.diff-unified .diff-line:hover .diff-gutter {\n    &::before {\n        font-family: \"FontAwesome\";\n        content: \"\\f4b2\"; // comment-plus\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Normal Changes with a HOC (JSX)\nDESCRIPTION: This example demonstrates how to use a higher-order component (HOC) to filter out normal changes from the hunks before rendering them. It creates a `removeNormalChanges` HOC that filters the changes within each hunk, demonstrating how to modify the `hunks` prop passed to the `children` function of the `Diff` component.\nSOURCE: https://github.com/otakustay/react-diff-view/blob/master/README.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst filterOutNormalChanges = hunk => {\n    return {\n        ...hunk,\n        changes: hunk.changes.filter(change => !change.isNormal);\n    };\n};\n\nconst removeNormalChanges = ComponentIn => {\n    const ComponentOut = ({hunks, ...props}) => {\n        const purgedHunks = hunks.map(filterOutNormalChanges);\n\n        return <ComponentIn {...props} hunks={hunks} />;\n    };\n\n    ComponentOut.displayName = `removeNormalChanges(${ComponentIn.displayName})`;\n\n    return ComponentOut;\n};\n\nconst MyDiff = removeNormalChanges(Diff);\n```\n\n----------------------------------------\n\nTITLE: Computing Change Key (JavaScript)\nDESCRIPTION: This JavaScript code shows how the key of a change is computed based on its type and line number, used for props like `selectedChanges` and `widgets` within the `Diff` component. Insertions start with 'I', deletions with 'D', and normal changes with 'N'.\nSOURCE: https://github.com/otakustay/react-diff-view/blob/master/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nif (change.type === 'insert') {\n    return 'I' + change.lineNumber;\n}\nelse if (change.type === 'delete') {\n    return 'D' + change.lineNumber;\n}\nelse {\n    return 'N' + change.oldLineNumber;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing react-diff-view using npm\nDESCRIPTION: Install the react-diff-view package using npm to include it in your React project. This command adds the package as a project dependency.\nSOURCE: https://github.com/otakustay/react-diff-view/blob/master/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save react-diff-view\n```"
  }
]