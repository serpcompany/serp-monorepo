[
  {
    "owner": "golang-migrate",
    "repo": "migrate",
    "content": "TITLE: Running Migrations in Go Application\nDESCRIPTION: Go code example showing how to run migrations programmatically within a Go application using golang-migrate.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/database/postgres/TUTORIAL.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"log\"\n\n\t\"github.com/golang-migrate/migrate/v4\"\n\t_ \"github.com/golang-migrate/migrate/v4/database/postgres\"\n\t_ \"github.com/golang-migrate/migrate/v4/source/file\"\n)\n\nfunc main() {\n\tm, err := migrate.New(\n\t\t\"file://db/migrations\",\n\t\t\"postgres://postgres:postgres@localhost:5432/example?sslmode=disable\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif err := m.Up(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Migration Files with Migrate CLI\nDESCRIPTION: This command creates sequential SQL migration files in the specified directory. It generates two files with the provided name - one for up migration and one for down migration.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/GETTING_STARTED.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmigrate create -ext sql -dir db/migrations -seq create_users_table\n```\n\n----------------------------------------\n\nTITLE: Basic Migration Command Examples\nDESCRIPTION: Examples showing how to run migrations using the CLI with local files and GitHub-hosted migrations.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/cmd/migrate/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ migrate -source file://path/to/migrations -database postgres://localhost:5432/database up 2\n\n$ migrate -source github://mattes:personal-access-token@mattes/migrate_test \\\n    -database postgres://localhost:5432/database down 2\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations with Migrate CLI\nDESCRIPTION: This command runs all pending migrations on the specified database. It requires the database connection URL and the path to the migration files directory.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/GETTING_STARTED.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmigrate -database YOUR_DATABASE_URL -path PATH_TO_YOUR_MIGRATIONS up\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Connection URL in golang-migrate\nDESCRIPTION: This snippet shows the format for a PostgreSQL connection URL used in golang-migrate. It includes user authentication, host, port, and database name parameters.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/database/postgres/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`postgres://user:password@host:port/dbname?query` (`postgresql://` works, too)\n```\n\n----------------------------------------\n\nTITLE: Embedding and Running Migrations with pkger in Go\nDESCRIPTION: This code demonstrates how to embed migration files using pkger and run them with golang-migrate. It imports required packages, includes the migration directory, creates a new migration instance pointing to the embedded files and a PostgreSQL database, and executes the migrations with proper error handling.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/source/pkger/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"errors\"\n\t\"log\"\n\n\t\"github.com/golang-migrate/migrate/v4\"\n\t\"github.com/markbates/pkger\"\n\n\t_ \"github.com/golang-migrate/migrate/v4/database/postgres\"\n\t_ \"github.com/golang-migrate/migrate/v4/source/pkger\"\n\t_ \"github.com/lib/pq\"\n)\n\nfunc main() {\n\tpkger.Include(\"/module/path/to/migrations\")\n\tm, err := migrate.New(\"pkger:///module/path/to/migrations\", \"postgres://postgres@localhost/postgres?sslmode=disable\")\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\tif err := m.Up(); errors.Is(err, migrate.ErrNoChange) {\n\t\tlog.Println(err)\n\t} else if err != nil {\n\t\tlog.Fatalln(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables with Migrate CLI\nDESCRIPTION: Demonstrates how to use environment variables to provide database configuration to the migrate CLI.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/cmd/migrate/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ migrate -database \"$MY_MIGRATE_DATABASE\"\n```\n\n----------------------------------------\n\nTITLE: Illustrating Migration File Naming Convention in Go migrate Package\nDESCRIPTION: This snippet demonstrates the naming convention for migration files, showing the relationship between 'next' and 'previous' migrations as well as 'up' and 'down' migrations.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/FAQ.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n1_first_migration.up.extension           next ->  2_second_migration.up.extension      ...\n1_first_migration.down.extension  <- previous     2_second_migration.down.extension    ...\n```\n\n----------------------------------------\n\nTITLE: Creating Users Table Migration (Up)\nDESCRIPTION: SQL migration to create a users table with basic user information columns and constraints.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/database/postgres/TUTORIAL.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS users(\n   user_id serial PRIMARY KEY,\n   username VARCHAR (50) UNIQUE NOT NULL,\n   password VARCHAR (50) NOT NULL,\n   email VARCHAR (300) UNIQUE NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Migrate CLI with Go\nDESCRIPTION: Installs the latest version of the migrate CLI from source using Go toolchain with PostgreSQL support.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/cmd/migrate/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ # Go 1.15 and below\n$ go get -tags 'postgres' -u github.com/golang-migrate/migrate/cmd/migrate\n$ # Go 1.16+\n$ go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest\n```\n\n----------------------------------------\n\nTITLE: Using httpfs.New() with http.Dir for Migration in Go\nDESCRIPTION: This example shows how to use httpfs.New() with http.Dir to read migrations from a 'sql' directory. It demonstrates creating a source driver, initializing a migrate instance, and running migrations.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/source/httpfs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nsrc, err := httpfs.New(http.Dir(\"sql\"))\nif err != nil {\n\t// do something\n}\nm, err := migrate.NewWithSourceInstance(\"httpfs\", src, \"database://url\")\nif err != nil {\n\t// do something\n}\nerr = m.Up()\n...\n```\n\n----------------------------------------\n\nTITLE: Using MySQL Driver with Existing Database Client in Go\nDESCRIPTION: Demonstrates how to use the MySQL driver with an existing database client in golang-migrate/migrate. The example shows proper configuration with multiStatements=true parameter and creating a migration instance.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/database/mysql/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"database/sql\"\n    \n    _ \"github.com/go-sql-driver/mysql\"\n    \"github.com/golang-migrate/migrate/v4\"\n    \"github.com/golang-migrate/migrate/v4/database/mysql\"\n    _ \"github.com/golang-migrate/migrate/v4/source/file\"\n)\n\nfunc main() {\n    db, _ := sql.Open(\"mysql\", \"user:password@tcp(host:port)/dbname?multiStatements=true\")\n    driver, _ := mysql.WithInstance(db, &mysql.Config{})\n    m, _ := migrate.NewWithDatabaseInstance(\n        \"file:///migrations\",\n        \"mysql\", \n        driver,\n    )\n    \n    m.Steps(2)\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Migrations in Transactions\nDESCRIPTION: This snippet demonstrates how to wrap existing migrations in transactions using BEGIN and COMMIT statements. This is recommended when upgrading from v1 and using multiple statements within one migration.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/database/pgx/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nBEGIN\n-- Your migration statements here\nCOMMIT\n```\n\n----------------------------------------\n\nTITLE: Forcing Database Version with Migrate CLI\nDESCRIPTION: This command forces the database to a specific version, used to fix a 'dirty' database state after a migration error. It manually sets the version tracker without running migrations.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/GETTING_STARTED.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmigrate -path PATH_TO_YOUR_MIGRATIONS -database YOUR_DATABASE_URL force VERSION\n```\n\n----------------------------------------\n\nTITLE: Specifying Absolute File Path for Migration Source in Go\nDESCRIPTION: This snippet shows how to specify an absolute file path for a migration source using the 'file' scheme. It uses the file:/// prefix followed by the absolute path to the migration files.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/source/file/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfile:///absolute/path\n```\n\n----------------------------------------\n\nTITLE: Installing Migrate CLI on MacOS using Homebrew\nDESCRIPTION: Installs the migrate CLI tool using the Homebrew package manager on MacOS.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/cmd/migrate/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ brew install golang-migrate\n```\n\n----------------------------------------\n\nTITLE: Generating bindata for migrations using go-bindata in Go\nDESCRIPTION: This snippet shows how to install go-bindata and generate bindata from migration files. It installs the go-bindata tool and generates bindata from the migrations directory.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/source/go_bindata/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/jteeuwen/go-bindata/...\ncd examples/migrations && go-bindata -pkg migrations .\n```\n\n----------------------------------------\n\nTITLE: Specifying Relative File Path for Migration Source in Go\nDESCRIPTION: This snippet demonstrates how to specify a relative file path for a migration source using the 'file' scheme. It uses the file:// prefix followed by the relative path to the migration files.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/source/file/README.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nfile://relative/path\n```\n\n----------------------------------------\n\nTITLE: Installing Versioned Migrate CLI with Go\nDESCRIPTION: Builds and installs a specific version of the migrate CLI from source using Go toolchain with PostgreSQL support.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/cmd/migrate/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ go get -u -d github.com/golang-migrate/migrate/cmd/migrate\n$ cd $GOPATH/src/github.com/golang-migrate/migrate/cmd/migrate\n$ git checkout $TAG  # e.g. v4.1.0\n$ # Go 1.15 and below\n$ go build -tags 'postgres' -ldflags=\"-X main.Version=$(git describe --tags)\" -o $GOPATH/bin/migrate $GOPATH/src/github.com/golang-migrate/migrate/cmd/migrate\n$ # Go 1.16+\n$ go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@$TAG\n```\n\n----------------------------------------\n\nTITLE: Setting PostgreSQL Connection URL\nDESCRIPTION: Exports the PostgreSQL connection URL as an environment variable for use with migrate CLI.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/database/postgres/TUTORIAL.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport POSTGRESQL_URL='postgres://postgres:password@localhost:5432/example?sslmode=disable'\n```\n\n----------------------------------------\n\nTITLE: Importing Google Cloud Storage Driver for golang-migrate\nDESCRIPTION: Imports the Google Cloud Storage driver as an anonymous import to register the driver with the golang-migrate/migrate library. This enables the use of GCS buckets as migration sources.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/source/google_cloud_storage/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  _ \"github.com/golang-migrate/migrate/v4/source/google_cloud_storage\"\n )\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft SQL Server Connection Strings for Golang Migrate\nDESCRIPTION: These code snippets demonstrate the format for Microsoft SQL Server connection strings used with golang-migrate. They show how to include username, password, host, instance, port, and additional parameters.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/database/sqlserver/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsqlserver://username:password@host/instance?param1=value&param2=value\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nsqlserver://username:password@host:port?param1=value&param2=value\n```\n\n----------------------------------------\n\nTITLE: Connecting to SQLite Database in golang-migrate\nDESCRIPTION: Demonstrates the connection string format for SQLite databases in golang-migrate. The driver automatically wraps each migration in an implicit transaction by default.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/database/sqlite/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`sqlite://path/to/database?query`\n```\n\n----------------------------------------\n\nTITLE: Using JSON Configuration with Migrate CLI\nDESCRIPTION: Shows how to extract database configuration from a JSON file using jq.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/cmd/migrate/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ migrate -database \"$(cat config.json | jq -r '.database')\"\n```\n\n----------------------------------------\n\nTITLE: Installing Migrate CLI on Linux via APT\nDESCRIPTION: Installs the migrate CLI tool on Linux using the APT package manager with the official package repository.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/cmd/migrate/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -L https://packagecloud.io/golang-migrate/migrate/gpgkey | apt-key add -\n$ echo \"deb https://packagecloud.io/golang-migrate/migrate/ubuntu/ $(lsb_release -sc) main\" > /etc/apt/sources.list.d/migrate.list\n$ apt-get update\n$ apt-get install -y migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Connection String with pgx\nDESCRIPTION: This snippet shows the basic structure of a PostgreSQL connection string using the pgx driver. It includes placeholders for user credentials, host, port, and database name.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/database/pgx/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npgx://user:password@host:port/dbname?query\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab Repository URL Format for golang-migrate\nDESCRIPTION: The URL format used to configure GitLab as a source for migrations. It requires user credentials, server URL, project ID, and the path to migration files within the repository. Optionally, a specific ref (SHA, branch, or tag) can be specified.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/source/gitlab/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ngitlab://user:personal-access-token@gitlab_url/project_id/path#ref\n```\n\n----------------------------------------\n\nTITLE: Executing BEGIN/COMMIT Transactions in PostgreSQL Migrations\nDESCRIPTION: This code snippet demonstrates how to wrap existing migrations in transactions using BEGIN and COMMIT statements. This is part of the upgrade process from v1 of golang-migrate.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/database/postgres/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[BEGIN/COMMIT](https://www.postgresql.org/docs/current/static/transaction-iso.html)\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Database\nDESCRIPTION: Creates a new PostgreSQL database named 'example' using psql command line tool.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/database/postgres/TUTORIAL.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npsql -h localhost -U postgres -w -c \"create database example;\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Migration Source Driver in Go\nDESCRIPTION: This snippet demonstrates how to create a custom migration source driver by embedding the httpfs.PartialDriver struct and implementing the Open() method. It shows the structure of the driver and how to initialize it with a filesystem and path.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/source/httpfs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nstruct mydriver {\n        httpfs.PartialDriver\n}\n\nfunc (d *mydriver) Open(url string) (source.Driver, error) {\n\tvar fs http.FileSystem\n\tvar path string\n\tvar ds mydriver\n\n\t// acquire fs and path from url\n\t// set-up ds if necessary\n\n\tif err := ds.Init(fs, path); err != nil {\n\t\treturn nil, err\n\t}\n\treturn &ds, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Mood Column Migration (Up)\nDESCRIPTION: Transactional SQL migration to add an enum type and mood column to users table.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/database/postgres/TUTORIAL.md#2025-04-22_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nBEGIN;\n\nCREATE TYPE enum_mood AS ENUM (\n\t'happy',\n\t'sad',\n\t'neutral'\n);\nALTER TABLE users ADD COLUMN mood enum_mood;\n\nCOMMIT;\n```\n\n----------------------------------------\n\nTITLE: Creating Users Table Migration (Down)\nDESCRIPTION: SQL migration to drop the users table if it exists.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/database/postgres/TUTORIAL.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nDROP TABLE IF EXISTS users;\n```\n\n----------------------------------------\n\nTITLE: Forcing Current Migration Version in golang-migrate\nDESCRIPTION: This command shows how to force the current migration version using the migrate CLI tool. It's used as part of the upgrade process from v1 of golang-migrate.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/database/postgres/README.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`migrate force <current_version>`\n```\n\n----------------------------------------\n\nTITLE: Creating Concurrent Index in PostgreSQL\nDESCRIPTION: This snippet mentions the CREATE INDEX CONCURRENTLY statement, which needs to be run outside of a transaction in PostgreSQL. It's used as an example of when multi-statement mode might not be desirable.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/database/postgres/README.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n`CREATE INDEX CONCURRENTLY`\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Structure for migrate Package in Go\nDESCRIPTION: This snippet shows the directory structure of the migrate package, highlighting the main components and their purposes.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/FAQ.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/          package migrate (the heart of everything)\n/cli       the CLI wrapper\n/database  database driver and sub directories have the actual driver implementations\n/source    source driver and sub directories have the actual driver implementations\n```\n\n----------------------------------------\n\nTITLE: SQLite3 Connection String Format\nDESCRIPTION: Demonstrates the basic format for SQLite3 connection strings used with golang-migrate. The path specifies the database location and can include optional query parameters.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/database/sqlite3/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsqlite3://path/to/database?query\n```\n\n----------------------------------------\n\nTITLE: Implementing Database Schema Version in Go\nDESCRIPTION: Code example demonstrating how to implement database schema versioning in Go, using a dedicated version table to track applied migrations.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/database/ql/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage postgres\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"log\"\n)\n\nfunc versionTable(db *sql.DB) error {\n\tif _, err := db.Exec(\"create table if not exists schema_migrations (version bigint not null primary key, dirty boolean not null)\"); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc Version(db *sql.DB) (version uint64, dirty bool, err error) {\n\tif err = versionTable(db); err != nil {\n\t\treturn 0, false, err\n\t}\n\n\trow := db.QueryRow(\"select version, dirty from schema_migrations limit 1\")\n\t\n\t// Empty response means version 0\n\terr = row.Scan(&version, &dirty)\n\tif err == sql.ErrNoRows {\n\t\treturn 0, false, nil\n\t}\n\n\treturn version, dirty, err\n}\n\nfunc SetVersion(db *sql.DB, version uint64, dirty bool) error {\n\tif err := versionTable(db); err != nil {\n\t\treturn err\n\t}\n\n\ttx, err := db.Begin()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif _, err := tx.Exec(\"delete from schema_migrations\"); err != nil {\n\t\ttx.Rollback()\n\t\treturn err\n\t}\n\n\tif _, err := tx.Exec(\"insert into schema_migrations (version, dirty) values ($1, $2)\", version, dirty); err != nil {\n\t\ttx.Rollback()\n\t\treturn err\n\t}\n\n\treturn tx.Commit()\n}\n```\n\n----------------------------------------\n\nTITLE: Using migrate CLI Tool for Database Migrations\nDESCRIPTION: Examples of how to call the migrate CLI tool to perform database migrations, including migration creation, execution, and rolling back changes.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/database/ql/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ migrate -source file://path/to/migrations -database postgres://localhost:5432/database up 2\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebird Connection String in Golang\nDESCRIPTION: This snippet demonstrates the format of a Firebird connection string, including user credentials, server details, and optional parameters. It shows how to structure the URL for connecting to a Firebird database in a Golang application.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/database/firebird/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`firebirdsql://user:password@servername[:port_number]/database_name_or_file[?params1=value1[&param2=value2]...]`\n```\n\n----------------------------------------\n\nTITLE: Neo4j Connection String Format\nDESCRIPTION: Standard connection string format for Neo4j bolt driver showing the structure with authentication credentials and server details.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/database/neo4j/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nneo4j://user:password@host:port/\n```\n\n----------------------------------------\n\nTITLE: Connecting to Snowflake Database with migrate\nDESCRIPTION: Connection string format for Snowflake database in the golang-migrate/migrate project. The format includes user credentials, account name, schema, and database name.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/database/snowflake/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsnowflake://user:password@accountname/schema/dbname?query\n```\n\n----------------------------------------\n\nTITLE: Defining Redshift Connection URL Structure in Markdown\nDESCRIPTION: Specifies the URL structure for connecting to a Redshift database, including user credentials, host, port, and database name.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/database/redshift/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`redshift://user:password@host:port/dbname?query`\n```\n\n----------------------------------------\n\nTITLE: Constructing YugabyteDB Connection String\nDESCRIPTION: Demonstrates the format for constructing a connection string to YugabyteDB. It includes user credentials, host, port, and database name. Additional configuration can be specified through query parameters.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/database/yugabytedb/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nyugabytedb://user:password@host:port/dbname?query\n```\n\n----------------------------------------\n\nTITLE: ClickHouse Connection String Format\nDESCRIPTION: Connection string format for ClickHouse database with optional parameters for authentication, database selection, and migration configuration. Includes support for multi-statement execution and custom migration table settings.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/database/clickhouse/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nclickhouse://host:port?username=user&password=password&database=clicks&x-multi-statement=true\n```\n\n----------------------------------------\n\nTITLE: Defining AWS S3 URL Format for Golang Migrate\nDESCRIPTION: This snippet shows the URL format for connecting to an AWS S3 bucket in the golang-migrate project. It specifies the protocol as 's3://' followed by the bucket name and an optional prefix path.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/source/aws_s3/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\ns3://<bucket>/<prefix>\n```\n\n----------------------------------------\n\nTITLE: Configuring Bitbucket URL for golang-migrate\nDESCRIPTION: Demonstrates the URL format for connecting to a Bitbucket repository as a migration source. It includes placeholders for user credentials, repository details, and an optional reference.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/source/bitbucket/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`bitbucket://user:password@owner/repo/path#ref`\n```\n\n----------------------------------------\n\nTITLE: Defining URL Scheme for GitHub Enterprise Edition in golang-migrate\nDESCRIPTION: This code snippet demonstrates the URL scheme used to source migration files from GitHub Enterprise. It includes user authentication, host, repository details, and optional parameters for TLS verification and reference selection.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/source/github_ee/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`github-ee://user:personal-access-token@host/owner/repo/path?verify-tls=true#ref`\n```\n\n----------------------------------------\n\nTITLE: Describing URL Parameters for GitHub Enterprise Edition in golang-migrate\nDESCRIPTION: This markdown table outlines the various URL parameters and their corresponding descriptions for configuring the GitHub Enterprise Edition driver in golang-migrate. It includes both required and optional parameters.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/source/github_ee/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| URL Query  | WithInstance Config | Description |\n|------------|---------------------|-------------|\n| user | | The username of the user connecting |\n| personal-access-token | | Personal access token from your GitHub Enterprise instance |\n| owner | | the repo owner |\n| repo | | the name of the repository |\n| path | | path in repo to migrations |\n| ref | | (optional) can be a SHA, branch, or tag |\n| verify-tls | | (optional) defaults to `true`. This option sets `tls.Config.InsecureSkipVerify` accordingly |\n```\n\n----------------------------------------\n\nTITLE: Installing Migrate CLI on Windows using Scoop\nDESCRIPTION: Installs the migrate CLI tool using the Scoop package manager on Windows.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/cmd/migrate/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ scoop install migrate\n```\n\n----------------------------------------\n\nTITLE: Installing Migrate CLI via Release Download\nDESCRIPTION: Downloads and extracts the pre-built migrate binary for the specified OS and architecture.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/cmd/migrate/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -L https://github.com/golang-migrate/migrate/releases/download/$version/migrate.$os-$arch.tar.gz | tar xvz\n```\n\n----------------------------------------\n\nTITLE: SQLite3 Table Reference\nDESCRIPTION: Configuration parameters supported by the SQLite3 driver including migrations table naming and transaction wrapping behavior.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/database/sqlite3/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| URL Query  | WithInstance Config | Description |\n|------------|---------------------|-------------|\n| `x-migrations-table` | `MigrationsTable` | Name of the migrations table.  Defaults to `schema_migrations`. |\n| `x-no-tx-wrap` | `NoTxWrap` | Disable implicit transactions when `true`.  Migrations may, and should, contain explicit `BEGIN` and `COMMIT` statements. |\n```\n\n----------------------------------------\n\nTITLE: Adding Mood Column Migration (Down)\nDESCRIPTION: Transactional SQL migration to remove the mood column and enum type from users table.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/database/postgres/TUTORIAL.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nBEGIN;\n\nALTER TABLE users DROP COLUMN mood;\nDROP TYPE enum_mood;\n\nCOMMIT;\n```\n\n----------------------------------------\n\nTITLE: Importing go-sqlcipher package for SQLite encryption\nDESCRIPTION: A note explaining that this driver is essentially the same as the sqlite3 driver but uses the go-sqlcipher package for encrypted database support.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/database/sqlcipher/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# sqlcipher\n\nThis is just a copy of the [sqlite3](https://github.com/golang-migrate/migrate/blob/master/database/sqlite3) driver except that it imports `github.com/mutecomm/go-sqlcipher`.\n```\n\n----------------------------------------\n\nTITLE: Integrating go-bindata with golang-migrate in Go\nDESCRIPTION: This code demonstrates how to use go-bindata with golang-migrate. It wraps assets into a Resource, creates a source instance, and initializes a new migrate instance. The code assumes the existence of a 'migrations' package containing the generated bindata.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/source/go_bindata/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"github.com/golang-migrate/migrate/v4\"\n  \"github.com/golang-migrate/migrate/v4/source/go_bindata\"\n  \"github.com/golang-migrate/migrate/v4/source/go_bindata/examples/migrations\"\n)\n\nfunc main() {\n  // wrap assets into Resource\n  s := bindata.Resource(migrations.AssetNames(),\n    func(name string) ([]byte, error) {\n      return migrations.Asset(name)\n    })\n    \n  d, err := bindata.WithInstance(s)\n  m, err := migrate.NewWithSourceInstance(\"go-bindata\", d, \"database://foobar\")\n  m.Up() // run your migrations and handle the errors above of course\n}\n```\n\n----------------------------------------\n\nTITLE: Reading bindata with URL in golang-migrate (TODO)\nDESCRIPTION: This snippet shows a planned feature for reading bindata using a URL. It will restore assets in a temporary directory and proxy to source/file. The go-bindata tool must be in the system PATH for this to work.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/source/go_bindata/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmigrate -source go-bindata://examples/migrations/bindata.go\n```\n\n----------------------------------------\n\nTITLE: Forcing Current Migration Version\nDESCRIPTION: This command shows how to force the current migration version using the migrate CLI tool. It's part of the upgrade process from v1 to ensure the correct version is set after recreating the schema_migrations table.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/database/pgx/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmigrate force <current_version>\n```\n\n----------------------------------------\n\nTITLE: Using YAML Configuration with Migrate CLI\nDESCRIPTION: Examples of extracting database configuration from YAML files using Ruby or Python.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/cmd/migrate/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ migrate -database \"$(cat config/database.yml | ruby -ryaml -e \"print YAML.load(STDIN.read)['database']\")\"\n$ migrate -database \"$(cat config/database.yml | python -c 'import yaml,sys;print yaml.safe_load(sys.stdin)[\"database\"]')\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Supported Versions in Markdown Table\nDESCRIPTION: This snippet shows a markdown table that lists the supported versions of the golang-migrate/migrate project. It uses emoji to indicate support status.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/SECURITY.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version | Supported          |\n| ------- | ------------------ |\n| master  | :white_check_mark: |\n| 4.x     | :white_check_mark: |\n| 3.x     | :x:                |\n| < 3.0   | :x:                |\n```\n\n----------------------------------------\n\nTITLE: Deprecation Notice for Migrate Package in Markdown\nDESCRIPTION: A simple markdown file indicating that the current package is deprecated and providing a reference to the new location of the migrate command.\nSOURCE: https://github.com/golang-migrate/migrate/blob/master/cli/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Deprecated\n\nUse [cmd/migrate](../cmd/migrate) instead\n```"
  }
]