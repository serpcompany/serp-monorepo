[
  {
    "owner": "gijs-epping",
    "repo": "plasmic-docs",
    "content": "TITLE: Auto Loading All Plasmic Pages in Next.js (App Dir)\nDESCRIPTION: This code creates a Next.js catch-all page to automatically render all Plasmic-defined pages at their specified routes. It fetches the page data using `PLASMIC.fetchPages()` and uses `getStaticProps` to pre-fetch the data for each page.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/nextjs-quickstart/.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport\\*asReactfrom&#x27;react&#x27;;\nimport{\nPlasmicComponent,\nComponentRenderData,\nPlasmicRootProvider,\nextractPlasmicQueryData\n}from&#x27;@plasmicapp/loader-nextjs&#x27;;\nimport{GetStaticPaths,GetStaticProps}from&#x27;next&#x27;;\nimportErrorfrom&#x27;next/error&#x27;;\nimport{useRouter}from&#x27;next/router&#x27;;\nimport{PLASMIC}from&#x27;../plasmic-init&#x27;;\n/\\*\\*\n\\* Use fetchPages() to fetch list of pages that have been created in Plasmic\n\\*/\nexportconstgetStaticPaths:GetStaticPaths=async()=&gt;{\nconstpages=awaitPLASMIC.fetchPages();\nreturn{\npaths:pages.map((page)=&gt;({\nparams:{catchall:page.path.substring(1).split(&#x27;/&#x27;)}\n})),\nfallback:&#x27;blocking&#x27;\n};\n};\n/\\*\\*\n\\* For each page, pre-fetch the data we need to render it\n\\*/\nexportconstgetStaticProps:GetStaticProps=async(context)=&gt;{\nconst{catchall}=context.params??{};\n// Convert the catchall param into a path string\nconstplasmicPath=\ntypeofcatchall===&#x27;string&#x27;?catchall:Array.isArray(catchall)?`/${catchall.join(&#x27;/&#x27;)}`:&#x27;/&#x27;;\nconstplasmicData=awaitPLASMIC.maybeFetchComponentData(plasmicPath);\nif(!plasmicData){\n// This is some non-Plasmic catch-all page\nreturn{\nprops:{}\n};\n}\n// This is a path that Plasmic knows about.\nconstpageMeta=plasmicData.entryCompMetas[0];\n// Cache the necessary data fetched for the page.\nconstqueryCache=awaitextractPlasmicQueryData(\n&lt;PlasmicRootProvider\nloader={PLASMIC}\nprefetchedData={plasmicData}\npageRoute={pageMeta.path}\npageParams={pageMeta.params}\n&gt;\n&lt;PlasmicComponentcomponent={pageMeta.displayName}/&gt;\n&lt;/PlasmicRootProvider&gt;\n);\n// Pass the data in as props.\nreturn{\nprops:{plasmicData,queryCache},\n// Using incremental static regeneration, will invalidate this page\n// after 300s (no deploy webhooks needed)\nrevalidate:300\n};\n};\n/\\*\\*\n\\* Actually render the page!\n\\*/\nexportdefaultfunctionCatchallPage(props:{plasmicData?:ComponentRenderData;queryCache?:Record&lt;string,any&gt;}){\nconst{plasmicData,queryCache}=props;\nconstrouter=useRouter();\nif(!plasmicData||plasmicData.entryCompMetas.length===0){\nreturn&lt;ErrorstatusCode={404}/&gt;;\n}\nconstpageMeta=plasmicData.entryCompMetas[0];\nreturn(\n// Pass in the data fetched in getStaticProps as prefetchedData\n&lt;PlasmicRootProvider\nloader={PLASMIC}\nprefetchedData={plasmicData}\nprefetchedQueryData={queryCache}\npageRoute={pageMeta.path}\npageParams={pageMeta.params}\npageQuery={router.query}\n&gt;\n{\n// pageMeta.displayName contains the name of the component you fetched.\n}\n&lt;PlasmicComponentcomponent={pageMeta.displayName}/&gt;\n&lt;/PlasmicRootProvider&gt;\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Catch-All Route for Plasmic Pages (React Router v6)\nDESCRIPTION: Creates a catch-all route using React Router v6 to automatically render Plasmic-defined pages at the routes specified in Plasmic. It fetches component data based on the current route and renders the corresponding Plasmic component.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/react-quickstart/.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport{\ninitPlasmicLoader,\nPlasmicRootProvider,\nPageParamsProvider,\nPlasmicComponent,\nComponentRenderData\n}from&#x27;@plasmicapp/loader-react&#x27;;\nimport{BrowserRouterasRouter,Routes,Route,Link,useLocation,useSearchParams}from&#x27;react-router-dom&#x27;;\nimport{useEffect,useState}from&#x27;react&#x27;;\nimport{PLASMIC}from&#x27;./plasmic-init&#x27;;\nfunctionAppRoot(){\nreturn(\n&lt;PlasmicRootProviderloader={PLASMIC}&gt;\n&lt;Router&gt;\n&lt;Routes&gt;\n&lt;Routepath=&quot;/&quot;element={CatchAllPage()}/&gt;\n&lt;/Routes&gt;\n&lt;/Router&gt;\n&lt;/PlasmicRootProvider&gt;\n);\n}\n// We try loading the Plasmic page for the current route.\n// If it doesn&#x27;t exist, then return &quot;Not found.&quot;\nexportfunctionCatchAllPage(){\nconst[loading,setLoading]=useState(true);\nconst[pageData,setPageData]=useState&lt;ComponentRenderData|null&gt;(null);\nconstlocation=useLocation();\nconstsearchParams=useSearchParams();\nuseEffect(()=&gt;{\nasyncfunctionload(){\nconstpageData=awaitPLASMIC.maybeFetchComponentData(location.pathname);\nsetPageData(pageData);\nsetLoading(false);\n}\nload();\n},[]);\nif(loading){\nreturn&lt;div&gt;Loading...&lt;/div&gt;;\n}\nif(!pageData){\nreturn&lt;div&gt;Not found&lt;/div&gt;;\n}\n// The page will already be cached from the `load` call above.\nreturn(\n&lt;PageParamsProviderroute={location.pathname}query={Object.fromEntries(searchParams)}&gt;\n&lt;PlasmicComponentcomponent={location.pathname}/&gt;\n&lt;/PageParamsProvider&gt;\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Writable Component State to Plasmic\nDESCRIPTION: This snippet demonstrates how to expose a writable component state (`value`) to Plasmic.  The `states` configuration defines the `value` state, indicating its `type` as `writable`, its `variableType` as `text`, and mapping the state to the `value` prop for control and the `onChange` prop for change events. This allows Plasmic to read and update the component's internal state.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/code-components-ref/.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunctionTextInput({value,onChange,className}){\nreturn(\n&lt;divclassName={className}&gt;\n&lt;inputvalue={value}onChange={(e)=&gt;onChange(e.target.value)}/&gt;\n&lt;/div&gt;\n);\n}\nregisterComponent(TextInput,{\nname:&#x27;TextInput&#x27;,\nprops:{\nvalue:&#x27;string&#x27;,\nonChange:{\ntype:&#x27;eventHandler&#x27;,\nargTypes:[{name:&#x27;value&#x27;,type:&#x27;string&#x27;}]\n}\n},\nstates:{\nvalue:{\n// The state value is owned by the parent -- parent cancontrol\n// the value of this state\ntype:&#x27;writable&#x27;,\n// The type of state value\nvariableType:&#x27;text&#x27;,\n// The prop name that controls this state\nvalueProp:&#x27;value&#x27;,\n// The prop name for the event handler that is called whenever\n// this state changes\nonChangeProp:&#x27;onChange&#x27;\n// The initial value of a writable state is sepecified as the\n// `defaultValue` for your valueProp\n}\n}\n});\n```\n\n----------------------------------------\n\nTITLE: Server-Side Data Fetching with Plasmic REST API (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates server-side data fetching using the Plasmic REST API by adding the `prepass` parameter. It includes `hydrate`, `embedHydrate`, `prepass`, and `maxAge` parameters in the API request to prefetch content and specify cache duration. Requires `PROJECTID` and `APITOKEN`.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/rest-quickstart/.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconstresponse=awaitfetch(\n  'https://codegen.plasmic.app/api/v1/loader/html/preview/PROJECTID/COMPONENTNAME?hydrate=1&amp;embedHydrate=1&amp;prepass=1&amp;maxAge=600',\n  {\n    headers:{\n      // Your project ID and public API token\n      'x-plasmic-api-project-tokens':'PROJECTID:APITOKEN'\n      // You can find your PROJECT token by visiting\n      // https://studio.plasmic.app/projects/[PROJECTID]/docs/loader#showToken=true\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Behavior Component in Plasmic (TypeScript/JSX)\nDESCRIPTION: This snippet demonstrates how to register a custom behavior component, `OnClickAlert`, in Plasmic using `PLASMIC.registerComponent`. It highlights the requirement for a `children` slot prop and shows how to filter props and clone the child element to inject the desired behavior (in this case, an alert on click). `isAttachment: true` is crucial for custom behavior registration.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/custom-behaviors/.md#_snippet_1\n\nLANGUAGE: TypeScript/JSX\nCODE:\n```\nfunctionOnClickAlert({children,msg,...props}:{children?:ReactNode;msg?:string}){\nconstfilteredProps=Object.fromEntries(\nObject.entries(props).filter(([key])=&gt;!key.startsWith(&#x27;data-plasmic&#x27;)&amp;&amp;key!==&#x27;className&#x27;)\n);\nreturnReact.Children.map(children,(child)=&gt;\ncloneElement(childasReactElement,{\n...filteredProps,// forward extra props for composability\nonClick:()=&gt;alert(msg)\n})\n);\n}\nPLASMIC.registerComponent(OnClickAlert,{\nname:&#x27;OnClickAlert&#x27;,\nisAttachment:true,\nstyleSections:false,// This component does not accept className\nprops:{\nchildren:&#x27;slot&#x27;,\nmsg:&#x27;string&#x27;\n}\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Single Plasmic Page or Component in Next.js (App Dir)\nDESCRIPTION: This code demonstrates how to render a specific Plasmic page or component by fetching its data using `PLASMIC.fetchComponentData()` within `getStaticProps()`. It then passes the fetched data to the `PlasmicComponent` for rendering within the `PlasmicRootProvider`.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/nextjs-quickstart/.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// This page will show up at the route /mypage\nimport{\nPlasmicRootProvider,\nPlasmicComponent,\nComponentRenderData,\nextractPlasmicQueryData\n}from&#x27;@plasmicapp/loader-nextjs&#x27;;\nimport{useRouter}from&#x27;next/router&#x27;;\nimport{PLASMIC}from&#x27;../plasmic-init&#x27;;\n// Statically fetch the data needed to render Plasmic pages or components.\nexportconstgetStaticProps=async()=&gt;{\n// You can pass in multiple page paths or component names.\nconstplasmicData=awaitPLASMIC.fetchComponentData(&#x27;&#x27;COMPONENT\\_OR\\_PAGEROUTE&#x27;&#x27;);\nif(!plasmicData){\nthrownewError(&#x27;No Plasmic design found&#x27;);\n}\nconstcompMeta=plasmicData.entryCompMetas[0];\n// Cache the necessary data fetched for the page\nconstqueryCache=awaitextractPlasmicQueryData(\n&lt;PlasmicRootProvider\nloader={PLASMIC}\nprefetchedData={plasmicData}\npageRoute={compMeta.path}\npageParams={compMeta.params}\n&gt;\n&lt;PlasmicComponentcomponent={compMeta.displayName}/&gt;\n&lt;/PlasmicRootProvider&gt;\n);\nreturn{\nprops:{\nplasmicData,\nqueryCache\n// ...\n},\n// Using incremental static regeneration, will invalidate this page\n// after 300s (no deploy webhooks needed)\nrevalidate:300\n};\n};\n// Render the page or component from Plasmic.\nexportdefaultfunctionMyPage(props:{plasmicData:ComponentRenderData;queryCache?:Record&lt;string,any&gt;}){\nconstrouter=useRouter();\nconstcompMeta=props.plasmicData.entryCompMetas[0];\nreturn(\n&lt;PlasmicRootProvider\nloader={PLASMIC}\nprefetchedData={props.plasmicData}\nprefetchedQueryData={props.queryCache}\npageRoute={compMeta.path}\npageParams={compMeta.params}\npageQuery={router.query}\n&gt;\n&lt;PlasmicComponentcomponent={compMeta.displayName}/&gt;\n&lt;/PlasmicRootProvider&gt;\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Plasmic Component with Vanilla JavaScript\nDESCRIPTION: This snippet fetches and renders a Plasmic component or page as HTML using the REST API. It includes optional JavaScript hydration for interactivity. Replace `PROJECTID` and `APITOKEN` with your actual project credentials, and `COMPONENTNAME` with the name of the component you want to render.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/js-quickstart/.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconstresponse=awaitfetch(\n  'https://codegen.plasmic.app/api/v1/loader/html/preview/PROJECTID/COMPONENTNAME?hydrate=1&amp;embedHydrate=1',\n  {\n    headers:{\n      // Your project ID and public API token\n      'x-plasmic-api-project-tokens':'PROJECTID:APITOKEN'\n      // You can find your PROJECT token by visiting\n      // https://studio.plasmic.app/projects/[PROJECTID]/docs/loader#showToken=true\n    }\n  }\n);\nconstresult=awaitresponse.json();\ndocument.body.innerHTML=result.html;\n// If you want hydration to happen, load and call the hydrater\nif(window.__plasmicHydrater){\n  window.__plasmicHydrater.hydrateAll();\n}else{\n  varscript=document.createElement('script');\n  script.src='https://codegen.plasmic.app/static/js/loader-hydrate.js';\n  document.body.appendChild(script);\n}\n```\n\n----------------------------------------\n\nTITLE: TweetsProvider Component with Data Fetching and Rendering\nDESCRIPTION: This code defines a `TweetsProvider` component that fetches data from an external API using `usePlasmicQueryData` from `@plasmicapp/loader-nextjs`.  It conditionally renders the children within a `DataProvider` if data is successfully fetched, making the data accessible under the name \"tweets\".  If no data is available, it returns null.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/data-code-components/.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport{usePlasmicQueryData}from&#x27;@plasmicapp/loader-nextjs&#x27;;\nexportfunctionTweetsProvider(props:{children:React.ReactNode}){\nconst{children}=props;\nconst{data}=usePlasmicQueryData(&quot;/tweets&quot;,async()=&gt;{\nconstresp=awaitfetch(&quot;https://studio.plasmic.app/api/v1/demodata/tweets&quot;);\nreturnawaitresp.json();\n});\nif(!data){\nreturnnull;\n}\nreturn(\n&lt;DataProvidername=&quot;tweets&quot;data={data}&gt;\n{children}\n&lt;/DataProvider&gt;\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Auto-loading All Plasmic Pages in Nuxt (Vue)\nDESCRIPTION: This code snippet demonstrates how to automatically render all Plasmic-defined pages at the routes specified in Plasmic. It uses a Nuxt catch-all route to fetch and render all pages at build time. It requires the `@plasmicapp/loader-vue` library and the previously initialized `PLASMIC` object.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/nuxt-quickstart/.md#_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n&lt;template&gt;\n&lt;PlasmicRootProvider:loader=&quot;PLASMIC&quot;:prefetchedData=&quot;plasmicData&quot;&gt;\n&lt;PlasmicComponent:component=&quot;$route.fullPath&quot;/&gt;\n&lt;/PlasmicRootProvider&gt;\n&lt;/template&gt;\n&lt;script setup lang=&quot;ts&quot;&gt;\nimport{PlasmicRootProvider,PlasmicComponent}from&quot;@plasmicapp/loader-vue&quot;;\nimport{PLASMIC}from&quot;../plasmic-init&quot;;\nconstroute=useRoute();\nconstplasmicData=awaitPLASMIC.fetchComponentData(route.fullPath);\n&lt;/script&gt;\n```\n\n----------------------------------------\n\nTITLE: Overriding Global Context Props in Plasmic\nDESCRIPTION: This snippet demonstrates how to override global context properties in Plasmic to manage different data source connections across environments. It uses the PlasmicRootProvider component to pass environment-specific credentials to data source components like Strapi. The host and API token are read from environment variables, allowing different environments to connect to different Strapi instances.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/multiple-environments/.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<PlasmicRootProvider\nglobalContextProps={{\n// Read the right host/token to use from the\n// deployment environment\nstrapiCredentialsProviderProps:{\nhost:process.env.STRAPI_HOST,\napiToken:process.env.STRAPI_TOKEN\n}\n}}\n>\n<PlasmicComponentcomponent=\"/\"/>\n</PlasmicRootProvider>\n```\n\n----------------------------------------\n\nTITLE: Registering Code Component with Editor Actions in Plasmic\nDESCRIPTION: This code snippet demonstrates how to register a code component with editor actions in Plasmic. It includes a button action to append a new image element to the `children` slot and a custom action that adds a new tab with a user-defined key. This example relies on the `PLASMIC` global object which is part of the Plasmic SDK.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/editor-actions/.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPLASMIC.registerComponent(CodeComponent,{\nname:'CodeComponent',\nprops:{\nchildren:'slot'\n},\nactions:[\n{\n// Creates a button that, on click, will append a new\n// image element to the `children` slot of this\n// component instance.\ntype:'button-action',\nlabel:'Append new element',\nonClick:({studioOps})=>{\nstudioOps.appendToSlot(\n{\ntype:'img',\nsrc:'',\nstyles:{\nmaxWidth:'100%'\n}\n},\n'children'\n);\n}\n},\n{\ntype:'custom-action',\ncontrol:({studioOps})=>( \n// A form that adds a new tab with the given key\nconst[value,setValue]=React.useState();\nreturn(\n<div>\n<input\ntype=\"text\"\nvalue={value}\nonChange={e=>setValue(e.target.value)}\nplaceholder=\"Tab Key\"\n/>\n<button onClick={()=>{ \nstudioOps.appendToSlot(\n{\ntype:\"component\",\nname:\"TabPanel\",\nprops:{\ntabKey:value\n}\n},\n\"children\"\n);\n}}>Create new tab</button>\n</div>\n)\n)\n}\n]\n});\n```\n\n----------------------------------------\n\nTITLE: Auto-loading All Plasmic Pages\nDESCRIPTION: Shows how to create a catch-all route to automatically render any Plasmic page within a Shopify Hydrogen application. It fetches data based on the URL handle and renders the appropriate Plasmic component.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/hydrogen-quickstart/.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport{HydrogenRouteProps}from&#x27;@shopify/hydrogen&#x27;;\nimport{usePlasmicData}from&#x27;../../lib/plasmic&#x27;;\nimport{PlasmicClientComponent,PlasmicClientRootProvider}from&#x27;../../lib/plasmic-helpers.client&#x27;;\nexportdefaultfunctionPlasmicLoaderPage({params}:HydrogenRouteProps){\nconst{handle}=params;\n// If the url is /pages/hello, then `handle` will be &quot;hello&quot;. We convert this into the page path\n// that we used in Plasmic for the corresponding page.\nconstdata=usePlasmicData([`/${handle}`]);\nif(!data){\nreturnyour404Page();\n}\nconst{plasmicData,queryData}=data;\nreturn(\n&lt;PlasmicClientRootProviderprefetchedData={plasmicData}prefetchedQueryData={queryData}&gt;\n&lt;PlasmicClientComponentcomponent={plasmicData.entryCompMetas[0].name}/&gt;\n&lt;/PlasmicClientRootProvider&gt;\n);\n}\n```\n\n----------------------------------------\n\nTITLE: getStaticProps with PlasmicRootProvider and Draft Mode Support\nDESCRIPTION: This code snippet demonstrates the use of `getStaticProps` in a Next.js page to fetch Plasmic data and configure draft mode. It fetches component data, extracts query data using `extractPlasmicQueryData`, and passes the necessary props to the `PlasmicRootProvider` and `PlasmicComponent`. The `globalContextsProps` are conditionally set based on the `draftMode` context.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/plasmic-cms-api-reference/.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexportconstgetStaticProps:GetStaticProps=async(context)=&gt;{\nconst{catchall}=context.params??{};\nconstplasmicPath=typeofcatchall==='string'?catchall:Array.isArray(catchall)?`/${catchall.join('/')}`:'/';\nconstplasmicData=awaitPLASMIC.maybeFetchComponentData(plasmicPath);\nif(!plasmicData){\n// non-Plasmic catch-all\nreturn{props:{}};\n}\nconstpageMeta=plasmicData.entryCompMetas[0];\n// Cache the necessary data fetched for the page\nconstqueryCache=awaitextractPlasmicQueryData(\n<PlasmicRootProvider\nloader={PLASMIC}\nprefetchedData={plasmicData}\npageRoute={pageMeta.path}\npageParams={pageMeta.params}\nglobalContextsProps={getGlobalContextProps(context.draftMode)}\n>\n<PlasmicComponentcomponent={pageMeta.displayName}/>\n</PlasmicRootProvider>\n);\n// Use revalidate if you want incremental static regeneration\nreturn{props:{plasmicData,queryCache,draftMode:context.draftMode??null},revalidate:60};\n}\n```\n\n----------------------------------------\n\nTITLE: Override root element props directly - React\nDESCRIPTION: This shows a simplified way to override the root element's properties by directly passing them into 'componentProps'. This is a shorthand for setting the 'root' prop.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/react-api/.md#_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n&lt;PlasmicComponent\ncomponent=&quot;Button&quot;\n// This is interpreted as a prop override for the `root` element\ncomponentProps={{onClick:()=&gt;alert(&#x27;I got clicked!&#x27;)}}\n/&gt;\n```\n\n----------------------------------------\n\nTITLE: Registering Component with providesData - Javascript\nDESCRIPTION: This code snippet shows how to register the `ProductBox` component with Plasmic Studio using the `registerComponent` function.  The crucial part is setting the `providesData` option to `true`.  This setting informs Plasmic that this component makes data available through `<DataProvider>`, allowing the Plasmic Studio data picker to expose the provided data.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/data-provider/.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nregisterComponent(ProductBox,{\nname:\"Product Box\",\nprovidesData:true,\n...\n})\n```\n\n----------------------------------------\n\nTITLE: Configure PlasmicRootProvider in _app.js (Next.js)\nDESCRIPTION: This code snippet demonstrates how to configure PlasmicRootProvider within the _app.js file of a Next.js application. It imports necessary modules from @plasmicapp/loader-nextjs and plasmic-init, then renders the PlasmicRootProvider component, passing prefetched Plasmic data from each page's getStaticProps. It also includes a PlasmicComponent for the NavHeader shared layout.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/nextjs-quickstart/.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport{PlasmicRootProvider}from&#x27;@plasmicapp/loader-nextjs&#x27;;\nimport{PLASMIC}from&#x27;../plasmic-init&#x27;;\nexportdefaultfunctionCustomApp({Component,pageProps}){\nreturn(\n// The data from each page&#x27;s `getStaticProps` are in `pageProps`.\n&lt;PlasmicRootProviderloader={PLASMIC}prefetchedData={pageProps.plasmicData}&gt;\n&lt;PlasmicComponentcomponent=&quot;NavHeader&quot;/&gt;\n&lt;Component{...pageProps}/&gt;\n&lt;/PlasmicRootProvider&gt;\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Override root element with onClick handler - React\nDESCRIPTION: This code snippet demonstrates how to override the 'root' element of a Plasmic 'Button' component and attach an onClick event handler using the 'componentProps' prop.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/react-api/.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n&lt;PlasmicComponent\ncomponent=&quot;Button&quot;\ncomponentProps={{\nroot:{\nprops:{\nonClick:()=&gt;alert(&#x27;I got clicked!&#x27;)\n}\n}\n}}\n/&gt;\n```\n\n----------------------------------------\n\nTITLE: Server-Side Data Fetching with Plasmic REST API\nDESCRIPTION: This snippet demonstrates how to prefetch data on the server-side for components that rely on external data sources, ensuring that the initial HTML response includes the fetched content. The `prepass=1` query parameter enables this behavior. Caching is enabled by default, and can be configured with the `maxAge` parameter.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/js-quickstart/.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconstresponse=awaitfetch(\n  'https://codegen.plasmic.app/api/v1/loader/html/preview/PROJECTID/COMPONENTNAME?hydrate=1&amp;embedHydrate=1&amp;prepass=1&amp;maxAge=600',\n  {\n    headers:{\n      // Your project ID and public API token\n      'x-plasmic-api-project-tokens':'PROJECTID:APITOKEN'\n      //You can find your PROJECT token by visiting\n      // https://studio.plasmic.app/projects/[PROJECTID]/docs/loader#showToken=true\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Register Component with Object Prop in Plasmic\nDESCRIPTION: This code snippet demonstrates registering a component named 'FAQ' with Plasmic, defining a prop called 'content' of type 'object'. The 'content' object has a schema with fields 'question' (string), 'answer' (richText), and 'color' (color), enabling a structured data input within the Plasmic Studio.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/code-components-ref/.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nregisterComponent(FAQ,{\nname:'FAQ',\nprops:{\ncontent:{\ntype:'object',\nfields:{\nquestion:{\ntype:'string',\ndisplayName:\"What's your question?\"\n},\nanswer:{\ntype:'richText'\n},\ncolor:{\ntype:'color'\n}\n}\n}\n}\n});\n```\n\n----------------------------------------\n\nTITLE: Using ensurePlasmicAppUser for auth callback\nDESCRIPTION: This snippet shows how to use the `ensurePlasmicAppUser` function from the `@plasmicapp/auth-api` package within an authentication callback handler. It creates or retrieves a Plasmic user associated with the application user and returns a user token.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/auth-integration/.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport{ensurePlasmicAppUser}from'@plasmicapp/auth-api';\nasyncfunctionauthCallback(){\n// Logic to handle the callback\n// After callback handling\n// ...\nconstresult=awaitensurePlasmicAppUser({\nemail:'USER_EMAIL',\nappSecret:'YOUR_APP_SECRET'\n});\n// The function won't throw an error, but will return an error message instead\nif(result.error){\n// Error handling\nconsole.error(result.error);\n}\nconst{user:plasmicUser,token:plasmicUserToken}=result;\n// Store the token in a cookie or session\n// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Fetch Plasmic data in getStaticProps (Next.js)\nDESCRIPTION: This code snippet shows how to fetch Plasmic data, including data for the NavHeader component, within the getStaticProps function of a Next.js page. It utilizes the PLASMIC.fetchComponentData method to retrieve the necessary data for both the specific page ('SomePage') and the shared layout component ('NavHeader'). This data is then passed as props to the page.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/nextjs-quickstart/.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport{useRouter}from&#x27;next/router&#x27;;\nimport{PageParamsProvider}from&#x27;@plasmicapp/loader-nextjs&#x27;;\nimport{PLASMIC}from&#x27;../plasmic-init&#x27;;\nexportfunctiongetStaticProps(){\n// Be sure to also fetch data for `NavHeader`\nconstplasmicData=awaitPLASMIC.fetchComponentData(&#x27;SomePage&#x27;,&#x27;NavHeader&#x27;);\nreturn{\nprops:{\nplasmicData\n}\n};\n}\nexportdefaultfunctionSomePage(){\nconstrouter=useRouter();\n// no need for &lt;PlasmicRootProvider /&gt;\nreturn(\n&lt;PageParamsProviderroute={router.pathname}params={router.query}query={router.query}&gt;\n&lt;PlasmicComponentcomponent=&quot;SomePage&quot;/&gt;\n&lt;/PageParamsProvider&gt;\n);\n}\n```\n\n----------------------------------------\n\nTITLE: PlasmicLoaderPage Component with Draft Mode Support\nDESCRIPTION: This React component, `PlasmicLoaderPage`, renders a Plasmic component within a `PlasmicRootProvider`. It handles the fetching and rendering of Plasmic data, using the provided `plasmicData` and `queryCache`.  `globalContextsProps` are dynamically generated based on `draftMode` to fetch either draft or live data. If no data is available a 404 error is returned.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/plasmic-cms-api-reference/.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexportdefaultfunctionPlasmicLoaderPage(props:{\nplasmicData?:ComponentRenderData;\nqueryCache?:Record&lt;string,any&gt;;\ndraftMode?:boolean;\n}){\nconst{plasmicData,queryCache,draftMode}=props;\nconstrouter=useRouter();\nif(!plasmicData||plasmicData.entryCompMetas.length===0){\nreturn&lt;ErrorstatusCode={404}/&gt;;\n}\nconstpageMeta=plasmicData.entryCompMetas[0];\nreturn(\n<PlasmicRootProvider\nloader={PLASMIC}\nprefetchedData={plasmicData}\nprefetchedQueryData={queryCache}\npageRoute={pageMeta.path}\npageParams={pageMeta.params}\npageQuery={router.query}\nglobalContextsProps={getGlobalContextProps(draftMode)}\n>\n<PlasmicComponentcomponent={pageMeta.displayName}/>\n</PlasmicRootProvider>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Create Plasmic CMS Items JavaScript\nDESCRIPTION: This snippet demonstrates how to create new items in a Plasmic CMS table using the API. It requires the CMS ID, secret token, and model ID. The code constructs JSON objects representing the items to be created and sends a POST request to the Plasmic API endpoint.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/plasmic-cms-api-reference/.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// You can find your CMS ID and Secret Token from the settings page of your CMS.\nconstCMS_ID='';\n// WARNING: Anyone with your secret token can edit the content in your CMS.\n// Only use your secret token in secure server environments, not in public websites.\nconstCMS_SECRET_TOKEN='';\n// Find your model's unique identifier from its model schema page.\nconstmodelId='blogPosts';\n// Construct the json for the itens you want to create\nconstfirstItem={\nidentifier:'First item',\ndata:{\nauthor:'First User',\n// message is localized, the empty string is the default locale\nmessage:{\n'':'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',\n'ar-JO':'Nam viverra dignissim arcu, eget ultrices elit aliquet.'\n},\nimageUrl:'https://picsum.photos/200/200?image=1'\n}\n};\nconstsecondItem={\ndata:{\n// Not including a field or a locale will use the default values on that table\nmessage:{\n'':'Phasellus a massa fermentum, consequat orci at.'\n},\n// Setting imageUrl to null, it will remove the default\nimageUrl:null\n}\n};\n// Create entries, you can add `?publish=1` to the URL to automatically publish the created rows\nconstresponse=awaitfetch(`https://data.plasmic.app/api/v1/cms/databases/${CMS_ID}/tables/${modelId}/rows`,{\nmethod:'POST',\nheaders:{\n// Your CMS ID and CMS Secret API token\n'x-plasmic-api-cms-tokens':`${CMS_ID}:${CMS_SECRET_TOKEN}`,\n'content-type':'application/json'\n},\nbody:JSON.stringify({rows:[firstItem,secondItem]})\n});\n```\n\n----------------------------------------\n\nTITLE: Component State Initialization with initFunc\nDESCRIPTION: This example showcases how to initialize a component's state using `initFunc`. The initial value of the `count` state in the `Counter` component is derived dynamically from the component's props, specifically `initCount`. This allows the initial state to be determined based on the component's configuration.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/code-components-ref/.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nPLASMIC.registerComponent(Counter,{\nname:&quot;Counter&quot;,\nprop:{\ninitCount:&quot;number&quot;,\nonCountChange:...\n},\nstates:{\ncount:{\ntype:&quot;readonly&quot;,\nonChangeProp:&quot;onCountChange&quot;,\nvariableType:&quot;number&quot;,\n// Counter starts with $props.initCount\ninitFunc:$props=&gt;$props.initCount\n}\n}\n});\n```\n\n----------------------------------------\n\nTITLE: Context Provider for Querying APIs - React/JSX\nDESCRIPTION: This snippet demonstrates how to provide a query function via React context for isomorphic data fetching. In `getStaticProps`, it uses a provider to supply a direct database query function.  In a normal render, it uses a provider to supply a function that fetches data via an API endpoint.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/data-code-components/.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n&lt;QueryContext.Providervalue={{query:()=&gt;pg.query()}}&gt;\n```\n\n----------------------------------------\n\nTITLE: Conditional Prop Visibility with Prop Control Function (React)\nDESCRIPTION: This snippet demonstrates using a prop control function to dynamically control the visibility of a prop in Plasmic's Studio.  The `hidden` property is assigned a function that takes component props as input and returns a boolean, determining whether the `end` prop should be hidden based on the `hasEnd` prop value. This allows for dynamic UI configurations within Plasmic.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/code-components-ref/.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionSlider({\nstart,end,hasEnd,\n}:{\nhasEnd?:boolean\nstart?:number,\nend?:number,\n}){\nreturn&lt;div&gt;...&lt;/div&gt;;\n}\nregisterComponent(ProductCard,{\nname:&#x27;Slider&#x27;,\nprops:{\nhasEnd:&#x27;boolean&#x27;\nstart:&#x27;number&#x27;,\nend:{\ntype:&#x27;number&#x27;,\n// `hidden` takes a prop control function\nhidden:props=&gt;!props.hasEnd,\n},\n}\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Plasmic Loader\nDESCRIPTION: Initializes the Plasmic loader with the project ID and API token. This step connects the React application to the specified Plasmic project, allowing it to fetch and render components from Plasmic.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/react-quickstart/.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport{initPlasmicLoader}from&quot;@plasmicapp/loader-react&quot;;\nexportconstPLASMIC=initPlasmicLoader({\nprojects:[\n{\nid:&quot;PROJECTID&quot;,// ID of a project you are using\ntoken:&quot;APITOKEN&quot;// API token for that project\n}\n],\n// Fetches the latest revisions, whether or not they were unpublished!\n// Disable for production to ensure you render only published changes.\npreview:true,\n})\n```\n\n----------------------------------------\n\nTITLE: Install Plasmic CLI with npm\nDESCRIPTION: This command installs the Plasmic command-line interface (CLI) globally using npm. It is a prerequisite for exporting code from Plasmic projects.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/codegen-guide/.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpminstall-g @plasmicapp/cli\n```\n\n----------------------------------------\n\nTITLE: Loading a Specific Item with Plasmic CMS API in JavaScript\nDESCRIPTION: This snippet shows how to load a single item from a Plasmic CMS model using the API's GET /query endpoint, filtering by the item's `slug`. It demonstrates the construction of the API URL with a URLSearchParams object to encode the query parameters, including the `where` clause to filter by slug, and sets the limit to 1 to retrieve only one item. The CMS ID, Public Token, and model ID are required.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/plasmic-cms-api-reference/.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Find your CMS ID and Public Token from the settings page.\nconstCMS_ID='';\nconstCMS_PUBLIC_TOKEN='';\n// Find your model's unique identifier from its model schema page.\nconstmodelId='blogPosts';\n// Construct the API Url\nconstapiUrl=newUrl(`https://data.plasmic.app/api/v1/cms/databases/${CMS_ID}/tables/${modelId}/query`);\n// Set a filter to load entries with \"slug\" field value = \"my-first-blog-post\".\napiUrl.search=newURLSearchParams({\nq:JSON.stringify({\nwhere:{\nslug:'my-first-blog-post'\n// Or to query by the system ID:\n// _id: ''gN6Dw9h3FM5VRXJDcHsJz4''\n// This only queries by system ID if there is no user-defined \"\"_id\"\" field.\n},\n// Load one item only\nlimit:1,\n// Skip this many rows first\noffset:0\n})\n}).toString();\n// Load filtered entries\nconstresponse=awaitfetch(apiUrl.toString(),{\nheaders:{\n// Your CMS ID and CMS Public API token\n'x-plasmic-api-cms-tokens':`${CMS_ID}:${CMS_PUBLIC_TOKEN}`\n}\n});\nconstparsedResponse=awaitresponse.json();\nconstblogPost=parsedResponse.rows[0];\nconsole.log(blogPost);\n```\n\n----------------------------------------\n\nTITLE: Fetching HTML with JavaScript using Plasmic REST API\nDESCRIPTION: This JavaScript snippet demonstrates how to fetch HTML from the Plasmic REST API, including hydrating JavaScript for interactivity. It requires a PROJECTID and APITOKEN. The code constructs a fetch request to the Plasmic API, retrieves the HTML content, and injects it into the document body. It also handles the loading and execution of the hydration script.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/rest-quickstart/.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconstresponse=awaitfetch(\n  'https://codegen.plasmic.app/api/v1/loader/html/preview/PROJECTID/COMPONENTNAME?hydrate=1&amp;embedHydrate=1',\n  {\n    headers:{\n      // Your project ID and public API token\n      'x-plasmic-api-project-tokens':'PROJECTID:APITOKEN'\n      // You can find your PROJECT token by visiting\n      // https://studio.plasmic.app/projects/[PROJECTID]/docs/loader#showToken=true\n    }\n  }\n);\nconstresult=awaitresponse.json();\ndocument.body.innerHTML=result.html;\n// If you want hydration to happen, load and call the hydrater\nif(window.__plasmicHydrater){\n  window.__plasmicHydrater.hydrateAll();\n}else{\n  varscript=document.createElement('script');\n  script.src='https://codegen.plasmic.app/static/js/loader-hydrate.js';\n  document.body.appendChild(script);\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming onChange Args to State Value\nDESCRIPTION: This example shows how to transform the arguments passed to an `onChange` handler into the desired state value using the `onChangeArgsToValue` function. This is particularly useful when the `onChange` handler provides an event object instead of the direct state value, allowing for extraction and transformation of the relevant data from the event (e.g., extracting the input value from an event).\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/code-components-ref/.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nPLASMIC.registerComponent(TextInput,{\nname:&#x27;TextInput&#x27;,\nprops:{\nvalue:&#x27;string&#x27;,\nonChange:{\ntype:&#x27;eventHandler&#x27;,\nargTypes:[{name:&#x27;event&#x27;,type:&#x27;object&#x27;}]\n}\n},\nstates:{\nvalue:{\ntype:&#x27;writable&#x27;,\nvalueProp:&#x27;value&#x27;,\nvariableType:&#x27;text&#x27;,\nonChangeProp:&#x27;onChange&#x27;,\n// Transform the argument to `onChange` to the state value\nonChangeArgsToValue:(event)=&gt;event.target.value\n}\n}\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Plasmic Loader in Next.js (App Dir)\nDESCRIPTION: This code initializes the Plasmic loader with the project ID and API token. It's defined in a separate module (`plasmic-init.ts`) for global availability. The `preview` flag enables fetching the latest revisions, even if unpublished.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/nextjs-quickstart/.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport{initPlasmicLoader}from&quot;@plasmicapp/loader-nextjs&quot;;\nexportconstPLASMIC=initPlasmicLoader({\nprojects:[\n{\nid:&quot;PROJECTID&quot;,// ID of a project you are using\ntoken:&quot;APITOKEN&quot;// API token for that project\n}\n],\n// Fetches the latest revisions, whether or not they were unpublished!\n// Disable for production to ensure you render only published changes.\npreview:true,\n})\n```\n\n----------------------------------------\n\nTITLE: Product Collection and Box Components - React/JSX\nDESCRIPTION: This code defines a `ProductCollection` component that fetches a collection of product data and repeats its children for each product. It also includes a `ProductBox` component for displaying a single product, a `ProductTitle` component to display the product title, and a placeholder `ProductImage` component. It uses `DataProvider` to make the data available to child components.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/data-code-components/.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport{repeatedElement}from&#x27;@plasmicapp/react-web/lib/host&#x27;;\nconstProductCollection=({\ncollectionSlug,\nchildren,\nclassName\n}:{children?:ReactNode;className?:string;collectionSlug?:string;})=&gt;{\nconstdata=useFetchProductCollection(collectionSlug);\nreturn(\n&lt;divclassName={className}&gt;\n{data?.productList.map((productData,i)=&gt;(\n&lt;DataProvidername=&quot;product&quot;data={productData}key={productData.id}&gt;\n{repeatedElement(i,children)}\n&lt;/DataProvider&gt;\n))}\n&lt;/div&gt;\n);\n};\n/\\** Or to display a single product \\*/\nconstProductBox=({productSlug,children,className}:{children?:ReactNode;className?:string;productSlug?:string;})=&gt;{\nconstdata=useFetchProduct(productSlug);\nreturn(\n&lt;divclassName={className}&gt;\n&lt;DataProvidername=&quot;product&quot;data={data?.productData}&gt;\n{children}\n&lt;/DataProvider&gt;\n&lt;/div&gt;\n);\n};\nconstProductTitle=({className}:{className?:string})=&gt;{\nconstproductData=useSelector(&#x27;product&#x27;);\nreturn(\n&lt;divclassName={className}&gt;{productData?.title??&#x27;This must be inside a ProductCollection or ProductBox&#x27;}&lt;/div&gt;\n);\n};\nconstProductImage=({className}:{className?:string})=&gt;{\n// ...\n};\n```\n\n----------------------------------------\n\nTITLE: Render Plasmic Component in Next.js\nDESCRIPTION: This code shows how to render a Plasmic component within a Next.js page. It imports necessary modules from `@plasmicapp/loader-nextjs` and `../plasmic-init`, then uses `<PlasmicRootProvider>` and `<PlasmicComponent>` to dynamically fetch and display the specified Plasmic component (`Summer22LandingPage`).\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/content-management/.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// pages/index.tsx\nimport{PlasmicRootProvider,PlasmicComponent}from&#x27;@plasmicapp/loader-nextjs&#x27;;\nimport{PLASMIC}from&#x27;../plasmic-init&#x27;;\n// Here we fetch dynamically on the client, to keep the example compact, but you\n// can also fetch and render components server-side in SSG/SSR frameworks, such\n// as via getStaticProps in Next.js.\nexportdefaultfunctionIndexPage(){\nreturn(\n&lt;PlasmicRootProviderplasmic={PLASMIC}&gt;\n&lt;PlasmicComponentcomponent=&quot;Summer22LandingPage&quot;/&gt;\n&lt;/PlasmicRootProvider&gt;\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Plasmic Host Page in Next.js (App Dir)\nDESCRIPTION: This code creates a dedicated page (`/plasmic-host`) that hosts the Plasmic Canvas, allowing users to interact with and design components within their Next.js application. The `PlasmicCanvasHost` component is responsible for rendering the visual design interface.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/nextjs-quickstart/.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport\\*asReactfrom&#x27;react&#x27;;\nimport{PlasmicCanvasHost}from&#x27;@plasmicapp/loader-nextjs&#x27;;\nimport{PLASMIC}from&#x27;../plasmic-init&#x27;;\nexportdefaultfunctionPlasmicHost(){\nreturnPLASMIC&amp;&amp;&lt;PlasmicCanvasHost/&gt;;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Object Data Type\nDESCRIPTION: Shows an example of how to define an object data type as a state variable, demonstrating the key-value pair structure.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/interactions-reference/.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n`{ &quot;Name&quot;: &quot;Alex&quot;, &quot;Age&quot;: 18 }`\n```\n\n----------------------------------------\n\nTITLE: Using getPlasmicAppUserFromToken in Next.js page\nDESCRIPTION: This snippet demonstrates how to use the `getPlasmicAppUserFromToken` function in a Next.js page with server-side rendering.  It retrieves a Plasmic user from a user token to provide authentication information to Plasmic components.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/auth-integration/.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport{getPlasmicAppUserFromToken}from'@plasmicapp/auth-api';\nimport{PlasmicRootProvider,PlasmicComponent,ComponentRenderData}from'@plasmicapp/loader-nextjs';\nimport{GetServerSideProps}from'next';\nimport{PLASMIC}from'../plasmic-init';\n// SSR fetch the data needed to render Plasmic pages or components and the plasmic user\nexportconstgetServerSideProps:GetServerSideProps=async(ctx)=>{\nconstplasmicData=awaitPLASMIC.fetchComponentData('Dashboard');\nif(!plasmicData){\nthrownewError('No Plasmic design found');\n}\n// Retrieve user token from the cookie or session and call `getPlasmicAppUserFromToken`\n// `retrievePlasmicUserToken` should be implemented in your application to connect between your auth provider and Plasmic\n// see the example below for more details\nconstplasmicUserToken=retrievePlasmicUserToken(ctx);\nconst{user:plasmicUser}=getPlasmicUserFromToken({\ntoken:plasmicUserToken\n});\nreturn{\nprops:{\nplasmicData,\nplasmicUser,\nplasmicUserToken\n}\n};\n};\n// Render the page or component from Plasmic.\nexportdefaultfunctionDashboard(props:{\nplasmicData:ComponentRenderData;\nplasmicUser?:any;\nplasmicUserToken?:string;\n}){\nconstcompMeta=props.plasmicData.entryCompMetas[0];\nreturn(\n<PlasmicRootProvider\nloader={PLASMIC}\nprefetchedData={props.plasmicData}\n// Pass in the plasmic user and user token\nuser={props.plasmicUser}\nuserAuthToken={props.plasmicUserToken}\n>\n<PlasmicComponent component={compMeta.displayName}/>\n</PlasmicRootProvider>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Render Plasmic Component in Remix Route\nDESCRIPTION: This snippet demonstrates how to fetch data for a Plasmic component or page within a Remix route's `loader()` function and then render it using `PlasmicRootProvider` and `PlasmicComponent`.  It uses `useLoaderData` hook to get data and `json` function to pass data to the component.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/remix-quickstart/.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// This page will show up at the route /mypage\nimport{json}from'@remix-run/node';\nimport{useLoaderData}from'@remix-run/react';\nimport{ComponentRenderData,PlasmicRootProvider,PlasmicComponent}from'@plasmicapp/loader-react';\nimport{PLASMIC}from'../plasmic-init';\n// Fetch the data needed to render Plasmic pages or components, server-side.\nexportasyncfunctionloader(){\n// You can pass in multiple page paths or component names.\nconstplasmicData=awaitPLASMIC.fetchComponentData('COMPONENT_OR_PAGEROUTE');\nreturnjson(plasmicData);\n}\n// Render the page or component from Plasmic.\nexportdefaultfunctionMyPage(){\nconstplasmicData=useLoaderData()asComponentRenderData;\nreturn(\n<PlasmicRootProviderloader={PLASMIC}prefetchedData={plasmicData}>\n<PlasmicComponentcomponent=\"COMPONENT_OR_PAGEROUTE\"/>\n</PlasmicRootProvider>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Catch-All Route in Angular\nDESCRIPTION: This TypeScript snippet demonstrates how to create a catch-all route in your Angular application to automatically render all Plasmic-defined pages. It imports necessary modules from Angular and `@plasmicapp/loader-angular`, and defines a route that catches all unmatched paths.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/angular-quickstart/.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport{NgModule}from&#x27;@angular/core&#x27;;\nimport{BrowserModule}from&#x27;@angular/platform-browser&#x27;;\nimport{RouterModule,Routes}from&#x27;@angular/router&#x27;;\nimport{PlasmicModule}from&#x27;@plasmicapp/loader-angular&#x27;;\nimport{AppComponent}from&#x27;./app.component&#x27;;\nimport{CatchAllComponent}from&#x27;./catch-all.component&#x27;;\nconstroutes:Routes=[\n/* ... Your other routes here ... */\n// Add this route to catch all pages\n{\npath:&#x27;&#x27;**&#x27;&#x27;,\ncomponent:CatchAllComponent\n}\n];\n@NgModule({\n// Include the CatchAllComponent in your declarations\ndeclarations:[AppComponent,CatchAllComponent],\nimports:[BrowserModule,PlasmicModule,RouterModule.forRoot(routes)],\nbootstrap:[AppComponent]\n})\nexportclassAppModule{}\n```\n\n----------------------------------------\n\nTITLE: Creating Plasmic Client Components\nDESCRIPTION: Creates client components for Plasmic using `@plasmicapp/loader-react`. These components are re-exported to be used in Hydrogen server components. Due to Hydrogen's limitations, the `PLASMIC` loader is passed directly within the client component instead of as a prop.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/hydrogen-quickstart/.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport{PlasmicCanvasHost,PlasmicComponent,PlasmicRootProvider}from&#x27;@plasmicapp/loader-react&#x27;;\nimport{PLASMIC}from&#x27;../plasmic-init&#x27;;\nexportconstPlasmicClientCanvasHost=PlasmicCanvasHost;\nexportconstPlasmicClientComponent=PlasmicComponent;\n// Hydrogen doesn&#x27;t allow passing PLASMIC from a server to client component, so we omit\n// that prop from `PlasmicClientRootProviderProps` and instead pass it in from here.\nexportfunctionPlasmicClientRootProvider(props:Omit&lt;React.ComponentProps&lt;typeofPlasmicRootProvider&gt;,&#x27;loader&#x27;&gt;){\nreturn&lt;PlasmicRootProviderloader={PLASMIC}{...props}/&gt;;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Plasmic Page or Component\nDESCRIPTION: Demonstrates how to render a specific Plasmic page or component within a Shopify Hydrogen route. It utilizes the `usePlasmicData` hook to fetch the necessary data and renders the `PlasmicClientComponent` wrapped in `PlasmicClientRootProvider`.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/hydrogen-quickstart/.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// This page will show up at the route /mypage\nimport{usePlasmicData}from&#x27;../lib/plasmic&#x27;;\nimport{PlasmicClientComponent,PlasmicClientRootProvider}from&#x27;../components/plasmic-helpers.client&#x27;;\n// Render the page or component from Plasmic.\nexportdefaultfunctionMyPage(){\nconst{plasmicData,queryData}=usePlasmicData([&#x27;&#x27;COMPONENT_OR_PAGEROUTE&#x27;&#x27;]);\nreturn(\n&lt;PlasmicClientRootProviderprefetchedData={plasmicData}prefetchedQueryData={queryData}&gt;\n&lt;PlasmicClientComponentcomponent=&quot;COMPONENT_OR_PAGEROUTE&quot;/&gt;\n&lt;/PlasmicClientRootProvider&gt;\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a code component with a custom prop control in Plasmic\nDESCRIPTION: This snippet demonstrates how to register a code component in Plasmic with a custom prop control. It defines both the code component to be rendered and the custom control component used to modify the prop.  The custom control receives a `value` prop and an `updateValue` function to manage changes.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/custom-controls/.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// A code component that just renders the prop\nconstCodeComponent=({customProp,className})=>&lt;divclassName={className}&gt;{`${customProp}`}&lt;/div&gt;;\n// A prop control with the value and a button to update it\nconstCustomProp=({updateValue,value})=&gt;(\n&lt;div\nstyle={{\nwidth:'100%',\ndisplay:'flex',\njustifyContent:'space-between',\npadding:'0px 10px 0px 10px'\n}}\n&gt;\n&lt;span&gt;Value:{`${value}`}.&lt;/span&gt;\n&lt;buttononClick={()=&gt;updateValue(!value)}style={{background:'lightgray',padding:'0px 5px 0px 5px'}}&gt;\nChange\n&lt;/button&gt;\n&lt;/div&gt;\n);\n// Registration\nPLASMIC.registerComponent(CodeComponent,{\nname:'CodeComponent',\nprops:{\ncustomProp:{\ntype:'custom',\ncontrol:CustomProp\n}\n}\n});\n```\n\n----------------------------------------\n\nTITLE: Using the Query Context - React/JSX\nDESCRIPTION: This code snippet shows how to consume the query function provided by the `QueryContext` using `useContext`.  It then calls the query function using `usePlasmicQueryData` to fetch the data.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/data-code-components/.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst{query}=useContext(QueryContext);\nconstdata=usePlasmicQueryData(&#x27;myquery&#x27;,query);\n```\n\n----------------------------------------\n\nTITLE: Next.js getStaticProps with extractPlasmicQueryData\nDESCRIPTION: This code snippet shows how to pre-fetch data in a Next.js `getStaticProps` function using `extractPlasmicQueryData` and `PLASMIC.fetchComponentData`. It fetches data for the 'Home' component, extracts query data, and passes both to the `HomePage` component as props. The `HomePage` component then renders the content using `PlasmicRootProvider` and `PlasmicComponent`.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/data-code-components/.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport{PLASMIC}from&quot;../plasmic-init&quot;;\nimport{extractPlasmicQueryData,PlasmicRootProvider,PlasmicComponent}from&quot;@plasmicapp/loader-nextjs&quot;;\n// Pre-fetching\nexportfunctiongetStaticProps({params}){\nconstplasmicData=awaitPLASMIC.fetchComponentData(&quot;Home&quot;);\nconstqueryCache=awaitextractPlasmicQueryData(\n&lt;PlasmicRootProvider\nloader={PLASMIC}\nprefetchedData={plasmicData}\npageParams={params}\n&gt;\n&lt;PlasmicComponentcomponent=&quot;Home&quot;componentProps={{...}}/&gt;\n&lt;/PlasmicRootProvider&gt;\n);\nreturn{\nprops:{plasmicData,queryCache}\n};\n}\n// Rendering page\nexportfunctionHomePage({plasmicData,queryCache}){\nconstpageMeta=plasmicData.entryCompMetas[0];\nconstrouter=useRouter();\nreturn(\n&lt;PlasmicRootProvider\nprefetchedData={plasmicData}\nprefetchedQueryData={queryCache}\npageParams={router.params}\n&gt;\n&lt;PlasmicComponentcomponent=&quot;Home&quot;componentProps={{...}}/&gt;\n&lt;/PlasmicRootProvider&gt;\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Props in Plasmic Component\nDESCRIPTION: This code snippet demonstrates updating non-slot props of a component in Plasmic Studio using `studioOps.updateProps()`. The new prop values are provided as a JSON object.  This allows editor actions to directly modify the component's configuration. It makes use of the `studioOps` object provided to editor actions.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/editor-actions/.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nupdateProps(newValues:any);\n```\n\n----------------------------------------\n\nTITLE: Overriding element props in Plasmic Component (React)\nDESCRIPTION: This code snippet shows how to override arbitrary props of an element inside a Plasmic component. It shows how to override the `title` property based on user data and how to set up an `onClick` handler. This requires Plasmic and React.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/overrides/.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\nprops:{\ntitle:user.name,\nonClick:()=>...,\n// etc.\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Override root element to render as a link - React\nDESCRIPTION: This code shows how to change the 'root' element of a Plasmic 'Button' component to render as an HTML anchor tag ('a') with a specified 'href' attribute.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/react-api/.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n&lt;PlasmicComponent\ncomponent=&quot;Button&quot;\ncomponentProps={{\nroot:{\nas:&#x27;a&#x27;,\nprops:{\nhref:&#x27;https://plasmic.app&#x27;\n}\n}\n}}\n/&gt;\n```\n\n----------------------------------------\n\nTITLE: Data Provider Component with usePlasmicQueryData (TweetsProvider)\nDESCRIPTION: This code defines a React component, `TweetsProvider`, that uses the `usePlasmicQueryData` hook to fetch tweet data from an API endpoint. It then uses the `DataProvider` component to make the fetched data available to its children in Plasmic Studio under the name \"tweets\". This allows dynamic value expressions and other code components to access the data.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/data-code-components/.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexportfunctionTweetsProvider({children}:{children:React.ReactNode}){\nconst{data}=usePlasmicQueryData(&#x27;/tweets&#x27;,async()=&gt;{\nconstresp=awaitfetch(&#x27;https://studio.plasmic.app/api/v1/demodata/tweets&#x27;);\nreturnawaitresp.json();\n});\nreturn(\n&lt;&gt;\n{data&amp;&amp;(\n&lt;DataProvidername=&quot;tweets&quot;data={data}&gt;\n{children}\n&lt;/DataProvider&gt;\n)}\n&lt;/&gt;\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Catch-All Route for Plasmic Pages (Vue 3)\nDESCRIPTION: This JavaScript/JSX snippet demonstrates how to create a catch-all route in Vue Router to automatically render Plasmic-defined pages at the routes specified in Plasmic.  The `CatchAllPage` component dynamically fetches component data based on the current route path and renders it using the `PlasmicComponent`. It uses `vue-router` v4.x.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/vue-quickstart/.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport{createRouter,createWebHistory}from&quot;vue-router&quot;;// vue-router 4.x\nimport{PlasmicComponent}from&quot;@plasmicapp/loader-vue&quot;;\nimport{PLASMIC}from&quot;../plasmic-init&quot;;\n// Create a catch-all route for your specific routing framework\nconstCatchAllPage={\ndata(){\nreturn{\nloading:true,\npageData:null,\n};\n},\ncreated(){\nthis.fetchData();\n},\nrender(){\nif(this.loading){\nreturn&lt;div&gt;Loading...&lt;/div&gt;;\n}\nif(!this.pageData){\nreturn&lt;div&gt;Not found&lt;/div&gt;;\n}\nreturn&lt;PlasmicComponentcomponent={location.pathname}/&gt;;\n},\nmethods:{\nasyncfetchData(){\nconstpageData=awaitPLASMIC.maybeFetchComponentData(location.pathname);\nthis.pageData=pageData;\nthis.loading=false;\n},\n},\n};\nconstroutes=[\n/* ... Your other routes here ... */\n// Add this route to catch all pages\n{\npath:&quot;&quot;/:pathMatch(.*)*&quot;&quot;,\ncomponent:CatchAllPage,\n},\n];\nconstrouter=createRouter({\nhistory:createWebHistory(),\nroutes,\n})\nexportdefaultrouter;\n```\n\n----------------------------------------\n\nTITLE: Update Plasmic CMS Item JavaScript\nDESCRIPTION: This snippet demonstrates how to update an existing item in Plasmic CMS using the API. It requires the CMS ID, secret token, and the row ID of the item to update. The code constructs a JSON object representing the updates to be applied and sends a PUT request to the Plasmic API endpoint.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/plasmic-cms-api-reference/.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Find your CMS ID and Secret Token from the settings page.\nconstCMS_ID='';\n// WARNING: Anyone with your secret token can edit the content in your CMS.\n// Only use your secret token in secure server environments, not in public websites.\nconstCMS_SECRET_TOKEN='';\nconstrowId='';\n// Construct the json for item to update\nconstupdateItem={\nidentifier:'Second item',\ndata:{\n// Undefined fields won't be changed, null fields will be cleared\nmessage:{\n'ar-JO':null\n},\nimageUrl:'https://picsum.photos/200/200?image=2'\n}\n};\n// Update entry, you can add `?publish=1` to the URL to automatically publish the updated row\nconstresponse=awaitfetch(`https://data.plasmic.app/api/v1/cms/rows/${rowId}`,{\nmethod:'PUT',\nheaders:{\n// Your CMS ID and CMS Secret API token\n'x-plasmic-api-cms-tokens':`${CMS_ID}:${CMS_SECRET_TOKEN}`,\n'content-type':'application/json'\n},\nbody:JSON.stringify(updateItem)\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Plasmic Loader with Project Version\nDESCRIPTION: Initializes the Plasmic loader with a specific project ID, token, and version. This configuration fetches a specific published version of the Plasmic project, ensuring consistency across environments.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/angular-api.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const PLASMIC = initPlasmicLoader({\n  projects: [\n    {\n      id: '...',\n      token: '...',\n      version: '2.1.3'\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Exposing Read-only Component State to Plasmic\nDESCRIPTION: This snippet demonstrates how to expose a read-only component state (`selectedRow`) to Plasmic.  The `states` configuration defines the `selectedRow` state, specifying its `type` as `readonly`, its `variableType` as `object`, and associating it with the `onSelectedRowChange` prop for change events. This allows Plasmic to read the component's internal state changes but not control it directly.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/code-components-ref/.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunctionDataTable({data,onSelectedRowChange}){\n...\n}\nregisterComponent(DataTable,{\nname:&quot;DataTable&quot;,\nprops:{\ndata:{\ntype:&quot;object&quot;\n},\nonSelectedRowChange:{\ntype:&quot;eventHandler&quot;,\nargTypes:[{name:&quot;row&quot;,type:&quot;object&quot;}]\n}\n},\nstates:{\nselectedRow:{\n// This state cannot be controlled by the parent -- so can only be read\ntype:&quot;readonly&quot;,\nvariableType:&quot;object&quot;,\n// Only need to specify an onChangeProp, not a valueProp\nonChangeProp:&quot;onSelectedRowChange&quot;\n}\n}\n})\n```\n\n----------------------------------------\n\nTITLE: Sync and watch Plasmic project for changes\nDESCRIPTION: This command starts a watcher that automatically syncs changes from Plasmic Studio to the local git repository whenever the project is edited. It's designed to work with hot-reloading development servers, providing a seamless development experience.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/codegen-guide/.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Syncs and watches for changes; as designs get updated, they are automatically\n# synced to your local git repo:\nplasmicwatch\n```\n\n----------------------------------------\n\nTITLE: Configuring PlasmicLoader with Versioned Project\nDESCRIPTION: This code snippet shows how to configure PlasmicLoader to use a specific version range for a Plasmic project. The 'version' field specifies the semantic version range to retrieve, ensuring compatibility with the current codebase.  It's part of the PlasmicLoader configuration within a project's settings.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/versioned-sync/.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n...\n  \"projects\":[\n    {\n      \"id\":\"9pr9hBu15oVRTwBRL9Gnwi\",\n      \"token\":\"\"PRORJECT_TOKEN\"\",\n      \"version\":\"\\u003e=0.0.0\"\n      ...\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running the local development server\nDESCRIPTION: This command starts the local development server for your Plasmic project. This allows you to preview and iterate on your changes locally. It supports different package managers.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/quickstart-cli.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpmrun dev\n# or\nyarndev\n```\n\n----------------------------------------\n\nTITLE: Configuring PlasmicRootProvider for Draft CMS Data Fetching\nDESCRIPTION: This snippet demonstrates how to configure the `PlasmicRootProvider` to fetch draft data from a CMS. It utilizes `globalContextsProps` to override the default CMS fetcher with a custom configuration that includes the database token and specifies which CMS models to use draft data from. The database token should be treated as a secret and accessed from an environment variable.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/plasmic-cms-api-reference/.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n<PlasmicRootProvider\nloader={PLASMIC}\nglobalContextsProps={{\ncmsCredentialsProviderProps:{\ndatabaseToken:process.env.PLASMIC_CMS_DRAFT_TOKEN,\nuseDraft:[\"blogPost\"]\n}\n}}\n>\n```\n\n----------------------------------------\n\nTITLE: Wrapping element in a context provider in Plasmic Component (React)\nDESCRIPTION: This example shows how to wrap a Plasmic element within a React context provider using the `wrap` property in the override object. It wraps the rendered node with the `Context.Provider` component. This requires Plasmic and React.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/overrides/.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\nwrap:node=>&lt;Context.Providervalue={…}&gt;{node}&lt;/Context.Provider&gt;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Custom Behaviors in JSX\nDESCRIPTION: This JSX snippet demonstrates how custom behaviors like `OnClickAnalyticsTracker`, `ParallaxScroll`, and `DataProvider` can be used to add functionality to existing components without directly modifying them.  It shows applying an `onClick` handler, interactive scrolling effects, and providing data to child components.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/custom-behaviors/.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n// Example: Add an onClick behavior to an arbitrary element or component.\n&lt;OnClickAnalyticsTracker&gt;\n&lt;ahref=&#x27;...&#x27;/&gt;\n&lt;/OnClickAnalyticsTracker&gt;\n// Add some interactive effects by monitoring the element with IntersectionObserver.\n&lt;ParallaxScroll&gt;\n&lt;HeroSection/&gt;\n&lt;/ParallaxScroll&gt;\n// Provide some data to its element.\n&lt;DataProvider&gt;\n&lt;Chart/&gt;\n&lt;/DataProvider&gt;\n```\n\n----------------------------------------\n\nTITLE: Creating a usePlasmicData React Hook\nDESCRIPTION: Creates a reusable React hook `usePlasmicData` that fetches Plasmic data using Shopify Hydrogen's `useQuery` hook. It extracts Plasmic query data and handles potential errors during the data fetching process. The hook takes an array of component names as input.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/hydrogen-quickstart/.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport{extractPlasmicQueryData,PlasmicComponent,PlasmicRootProvider}from&#x27;@plasmicapp/loader-react&#x27;;\nimport{useQuery}from&#x27;@shopify/hydrogen&#x27;;\nimport{PLASMIC}from&#x27;../plasmic-init&#x27;;\nexportfunctionusePlasmicData(components:string[]){\nconst{data,error}=useQuery([`plasmic`,...components],async()=&gt;{\nconstplasmicData=awaitPLASMIC.maybeFetchComponentData(...components);\nif(!plasmicData){\nreturnnull;\n}\nconstqueryData=awaitextractPlasmicQueryData(\n&lt;PlasmicRootProviderloader={PLASMIC}prefetchedData={plasmicData}&gt;\n&lt;PlasmicComponentcomponent={plasmicData.entryCompMetas[0].name}/&gt;\n&lt;/PlasmicRootProvider&gt;\n);\nreturn{plasmicData,queryData};\n});\nif(error){\nthrowerror;\n}\nreturndata;\n}\n```\n\n----------------------------------------\n\nTITLE: ProductBox Component with DataProvider - Typescript/JSX\nDESCRIPTION: This code defines a React component `ProductBox` that fetches product data based on a `productSlug` prop using a custom `useFetchProduct` hook. It then utilizes the `<DataProvider>` component to make the fetched product data available to its children under the name \"product\". This allows child components or Plasmic Studio to access the data for rendering dynamic content.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/data-provider/.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport{DataProvider}from\"@plasmicapp/host\";\nfunctionProductBox(props:{children?:ReactNode;className?:string;productSlug?:string}){\nconst{children,className,productSlug}=props;\nconstresponse=useFetchProduct(productSlug);\nreturn(\n&lt;divclassName={className}&gt;\n{\n}\n&lt;DataProvidername=\"product\"data={response.data}&gt;\n{children}\n&lt;/DataProvider&gt;\n&lt;/div&gt;\n);\n```\n\n----------------------------------------\n\nTITLE: Prop Control with Context Data in Plasmic (React)\nDESCRIPTION: This snippet illustrates how to pass context data from a React component to a prop control function in Plasmic. The component uses `setControlContextData` (injected by Plasmic) to provide data (in this case, `allProductSlugs`) to the prop control function used by the `options` property of the `productId` prop.  This enables dynamic options for choice-type props based on runtime data.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/code-components-ref/.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionProductCard({\nproductId,\nsetControlContextData\n}:{\nproductId?:string;\n// When rendered in Studio artboard, a `setControlContextData` function will\n// be injected as a prop. This function can relay any data you want, so you\n// define whatever type it accepts.\nsetControlContextData?:(ctxData:{allProductSlugs:string[]})=&gt;void;\n}){\nconst{allProductSlugs}=React.useContext(StoreInfo);\n// Tell the prop control about what products are available\n// to choose from. We are just calling this for the side effect.\nsetControlContextData?.({\nallProductSlugs\n});\nreturn&lt;div&gt;...&lt;/div&gt;;\n}\nregisterComponent(ProductCard,{\nname:&#x27;ProductCard&#x27;,\nprops:{\nproductId:{\ntype:&#x27;choice&#x27;,\noptions:(props,ctx)=&gt;{\n// Use the product slugs given to us from setControlContextData()\nreturnctx.allProductSlugs;\n}\n}\n}\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Plasmic Host Route (React Router v6)\nDESCRIPTION: Creates a route for the Plasmic canvas host using React Router v6. This route serves as a bridge between Plasmic Studio and the React application, allowing Plasmic to load and interact with the registered custom components.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/react-quickstart/.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport\\*asReactfrom&#x27;react&#x27;;\nimport{PlasmicCanvasHost}from&#x27;@plasmicapp/loader-react&#x27;;\nimport{BrowserRouter,Route,Routes}from&#x27;react-router-dom&#x27;;\nimport{PLASMIC}from&#x27;./plasmic-init&#x27;;\nexportdefaultfunctionAppRoot(){\nreturn(\n&lt;BrowserRouter&gt;\n&lt;Routes&gt;\n{/\\* Your other routes... \\*/}\n&lt;Routepath=&quot;/plasmic-host&quot;element={&lt;PlasmicCanvasHost/&gt;}/&gt;\n&lt;/Routes&gt;\n&lt;/BrowserRouter&gt;\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Swap element with different content - React\nDESCRIPTION: This shows how to use the 'render' function to completely replace an element in a Plasmic component with a different React component ('TotallyDifferentComponent').\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/react-api/.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n{\nrender:(props,Component)=&gt;&lt;TotallyDifferentComponent/&gt;;\n}\n```\n\n----------------------------------------\n\nTITLE: Register Component with Shorthand Prop Metadata\nDESCRIPTION: Registers a React component with simplified prop metadata. This example demonstrates using string values to define the prop types directly, omitting other metadata. This is a shorthand for defining simple props like 'slot' or 'string'.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/code-components-ref/.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nregisterComponent(MyComponent,{\nname:&#x27;MyComponent&#x27;,\nprops:{\nchildren:&#x27;slot&#x27;,\ncolor:&#x27;string&#x27;\n}\n});\n```\n\n----------------------------------------\n\nTITLE: Data Provider Component with Optional Layout\nDESCRIPTION: This code defines a `ProductBox` component that fetches product data and renders its children within a `DataProvider`.  It provides an option to either wrap the content with a `div` element for layout purposes or render the `DataProvider` directly without the wrapping `div` based on the `noLayout` prop.  The `className` prop is applied to the wrapping `div` when it's rendered.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/data-code-components/.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunctionProductBox(props){\nconst{children,productSlug,noLayout,className}=props;\nconstresponse=useFetchProduct(productSlug);\nletcontent=(\n&lt;DataProvidername=&quot;product&quot;data={response.data}&gt;\n{children}\n&lt;/DataProvider&gt;\n);\nif(props.noLayout){\nreturncontent;\n}else{\nreturn&lt;divclassName={className}&gt;{content}&lt;/div&gt;;\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Repeating Collection Items with DataProvider - React/JSX\nDESCRIPTION: This function `ProductCollection` fetches a collection of product items using `useFetchProductCollection` and automatically repeats the `children` prop for each item using the `repeatedElement` function. The `DataProvider` component makes each product available under the name `currentProduct`.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/data-code-components/.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunctionProductCollection(props:{collectionSlug:string;children?:React.ReactNode}){\nconst{collectionSlug,children}=props;\nconstdata=useFetchProductCollection(collectionSlug);\nreturn(\n&lt;&gt;\n{data?.productList.map((product,i)=&gt;(\n&lt;DataProvidername=&quot;currentProduct&quot;data={product}key={i}&gt;\n{repeatedElement(i,children)}\n&lt;/DataProvider&gt;\n))}\n&lt;/&gt;\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Project Version in initPlasmicLoader (Vue)\nDESCRIPTION: This code snippet demonstrates how to specify a specific published version of a Plasmic project when initializing the Plasmic loader. This ensures that your application uses a consistent and optimized version of your Plasmic designs. Requires `initPlasmicLoader` from the Plasmic Vue API.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/vue-api/.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexportconstPLASMIC=initPlasmicLoader({\nprojects:[\n{\nid:'...', \ntoken:'...', \nversion:'2.1.3'\n}\n]\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Plasmic Loader with tag version\nDESCRIPTION: This code snippet initializes the Plasmic loader, specifying a project ID and token, and sets the `version` to `'staging'`. This tells the loader to always use the latest published version tagged with \"staging\".\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/multiple-environments/.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexportconstPLASMIC=initPlasmicLoader({\nprojects:[\n{\nid:'XYZ',\ntoken:'123',\n// use the latest published version tagged with &quot;staging&quot;\nversion:'staging'\n}\n]\n});\n```\n\n----------------------------------------\n\nTITLE: Catch-All Component Implementation\nDESCRIPTION: This TypeScript snippet creates the catch-all component that loads and renders Plasmic pages based on the current route. It uses the `PLASMIC` loader to fetch component data and the `<plasmic-component>` directive to render the Plasmic content.  It also handles loading and error states.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/angular-quickstart/.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport{Component}from&#x27;@angular/core&#x27;;\nimport{ComponentRenderData}from&#x27;@plasmicapp/loader-angular&#x27;;\nimport{PLASMIC}from&#x27;./plasmic-init&#x27;;\n@Component({\nselector:&#x27;catch-all&#x27;,\ntemplate:`\n&lt;&lt;plasmic-root-provider *ngIf=&quot;&quot;!loading &amp;&amp;&amp;&amp; prefetchedData&quot;&quot; [loader]=&quot;&quot;loader&quot;&quot; [prefetchedData]=&quot;&quot;prefetchedData&quot;&quot;&gt;&gt;\n&lt;plasmic-component [component]=&quot;path&quot;&gt;&lt;/plasmic-component&gt;\n&lt;/plasmic-root-provider&gt;\n&lt;&lt;div *ngIf=&quot;&quot;loading&quot;&quot;&gt;&gt;Loading...&lt;&lt;/div&gt;&gt;\n&lt;&lt;div *ngIf=&quot;&quot;!loading &amp;&amp;&amp;&amp; !prefetchedData&quot;&quot;&gt;&gt;Error...&lt;&lt;/div&gt;&gt;\n`\n})\nexportclassCatchAllComponent{\nloader=PLASMIC;\npath:string=&#x27;&#x27;;\nloading:boolean=true;\nprefetchedData:ComponentRenderData|null=null;\nconstructor(){}\nngOnInit(){\n(async()=&gt;{\nthis.path=window.location.pathname;\nthis.prefetchedData=awaitPLASMIC.maybeFetchComponentData(this.path);\nthis.loading=false;\n})();\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Showing a Modal in Plasmic Studio\nDESCRIPTION: This code snippet demonstrates how to show a fullscreen modal within the Plasmic studio using the `studioOps.showModal()` function. The modal displays a simple text message and includes an `onClose` callback that triggers an alert when the modal is closed. It uses the `studioOps` object, provided to editor actions.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/editor-actions/.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nshowModal({\nchildren:<div>This is my modal!</div>,\nonClose:()=>alert('Thank you for using this modal.')\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Plasmic Loader with environment-specific tag\nDESCRIPTION: This code snippet initializes the Plasmic loader and dynamically sets the `version` based on the `NODE_ENV` environment variable. It uses `'prod'` for production, `'staging'` for staging, and the latest published version (regardless of tags) for other environments. This allows for automatic environment-specific design updates.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/multiple-environments/.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexportconstPLASMIC=initPlasmicLoader({\nprojects:[\n{\nid:'XYZ',\ntoken:'123',\nversion:\nprocess.env.NODE_ENV==='production'\n?'prod'\n:process.env.NODE_ENV==='staging'\n?'staging'\n:// If not production or staging, then just use the latest\n// published version, regardless of tags\nundefined\n}\n]\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Component with Render Props in Plasmic (React)\nDESCRIPTION: This snippet registers a React component (`MyComponent`) with Plasmic, configuring a slot (`children`) to accept render props. The `renderPropParams` array specifies the names of the arguments to be passed to the render prop function, allowing dynamic data to be injected into the slot's content.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/code-components-ref/.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconstanimals=[\n{\n&quot;name&quot;:&quot;Elephant&quot;,\n&quot;habitat&quot;:&quot;Savannah&quot;\n},\n{\n&quot;name&quot;:&quot;Penguin&quot;,\n&quot;habitat&quot;:&quot;Antarctica&quot;\n},\n{\n&quot;name&quot;:&quot;Kangaroo&quot;,\n&quot;habitat&quot;:&quot;Australian Outback&quot;\n}\n];\nfunctionMyComponent(props){\nreturn(\n&lt;div&gt;\n{animals.map(item=&gt;(\n&lt;pkey={item.name}&gt;{props.children(item)}&lt;/p&gt;\n))}\n&lt;/div&gt;\n)\n}\nPLASMIC.registerComponent(MyComponent,{\nname:&#x27;MyComponent&#x27;,\nprops:{\nchildren:{\ntype:&#x27;slot&#x27;,\nrenderPropParams:[&quot;animal&quot;],\n}\n}\n});\n```\n\n----------------------------------------\n\nTITLE: Render a Single Plasmic Component\nDESCRIPTION: This TypeScript and HTML snippet shows how to render a single Plasmic page or component within an Angular application. It imports the `PLASMIC` loader, and uses the `<plasmic-root-provider>` and `<plasmic-component>` directives in the template to display the Plasmic content.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/angular-quickstart/.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport{PLASMIC}from&#x27;./plasmic-init&#x27;;\n@Component({\nselector:&#x27;app-root&#x27;,\ntemplate:`\n&lt;plasmic-root-provider [loader]=&quot;loader&quot;&gt;\n&lt;&lt;plasmic-component component=&quot;&quot;COMPONENT\\_OR\\_PAGEROUTE&quot;&quot;&gt;&gt;&lt;&lt;/plasmic-component&gt;&gt;\n&lt;/plasmic-root-provider&gt;\n`\n})\nexportclassAppComponent{\n...\nloader=PLASMIC;\n}\n```\n\n----------------------------------------\n\nTITLE: Register Component for Plasmic Editor\nDESCRIPTION: This code snippet demonstrates how to register a component from your application's codebase with the Plasmic visual editor, making it available for drag-and-drop usage by content creators. It also exposes the `children` prop as a slot for content insertion.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/content-management/.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Take any component from your app or design system...\nexportdefaultfunctionHeroSection({children}){\nreturn&lt;divclassName=&quot;hero-section&quot;&gt;{children}&lt;/div&gt;;\n}\n// ...and make it available for drag-and-drop, along with any props you want to\n// expose.\nPLASMIC.registerComponent(HeroSection,{\nprops:{\nchildren:&#x27;slot&#x27;\n}\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Component Helper Functions in JavaScript\nDESCRIPTION: This code snippet demonstrates how to define component helper functions for working with component states in Plasmic. It exports an object `TextInputHelpers` containing functions like `initFunc` for initializing state and `onChangeArgsToValue` for transforming event arguments to a value. The helper functions are designed to work with component states.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/code-components-ref/.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport const TextInputHelpers = {\n  states: {\n    count: {\n      initFunc: ($props) => $props.initValue,\n      onChangeArgsToValue: (event) => event.target.value\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Plasmic Auth Usage with PlasmicRootProvider in Next.js\nDESCRIPTION: This snippet demonstrates how to use Plasmic Auth by passing the `authRedirectUri` prop to `PlasmicRootProvider` in a Next.js application. The `REDIRECT_URI` field must match one of the \"Redirect URIs\" configured in the Plasmic Studio.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/auth-integration/.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport*asReactfrom'react';\nimport{PlasmicComponent,PlasmicRootProvider}from'@plasmicapp/loader-nextjs';\nimport{PLASMIC}from'../plasmic-init';\nimport{usePlasmicAuth}from'@plasmicapp/auth-react';\nexportdefaultfunctionPlasmicLoaderPage(){\nreturn(\n<PlasmicRootProvider\nloader={PLASMIC}\nprefetchedData={plasmicData}\nprefetchedQueryData={queryCache}\npageParams={pageMeta.params}\nauthRedirectUri={'YOUR_REDIRECT_URI'}\n>\n<PlasmicComponentcomponent={pageMeta.displayName}/>\n</PlasmicRootProvider>\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Component State with plasmicUpdateVariant\nDESCRIPTION: This code illustrates how to use `plasmicUpdateVariant` to update the component's state and trigger variant changes in Plasmic. It defines both `hovered` and `loading` variants and utilizes the `isLoading` state to control the visibility of the `loading` variant. The `plasmicUpdateVariant` function is called within a `useEffect` hook to update the variant based on the `isLoading` state.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/registered-variants/.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimportReactfrom&#x27;react&#x27;;\nexportconstVARIANTS={\nhovered:{\ncssSelector:&#x27;:hover&#x27;,\ndisplayName:&#x27;Hovered&#x27;\n},\nloading:{\ncssSelector:&#x27;[data-loading=true]&#x27;,\ndisplayName:&#x27;Loading&#x27;\n}\n};\ntypeVariantType=keyoftypeofVARIANTS;\ninterfaceLoadingButtonPropsextendsReact.PropsWithChildren{\nclassName:string;\nplasmicUpdateVariant?:(changes:Partial&lt;Record&lt;VariantType,boolean&gt;&gt;)=&gt;void;\n}\nexportfunctionLoadingButton(props:LoadingButtonProps){\nconst{children,className,plasmicUpdateVariant}=props;\nconst[isLoading,setIsLoading]=React.useState(false);\nReact.useEffect(()=&gt;{\nplasmicUpdateVariant?.({loading:isLoading});\n},[isLoading]);\nreturn(\n&lt;buttonclassName={className}data-loading={isLoading}onClick={()=&gt;setIsLoading(true)}&gt;\n{children}\n&lt;/button&gt;\n);\n}\nPLASMIC.registerComponent(LoadingButton,{\nname:&#x27;LoadingButton&#x27;,\nvariants:VARIANTS,\nprops:{\nchildren:&#x27;slot&#x27;\n}\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Variants for a Loading Button component in Plasmic\nDESCRIPTION: This code snippet demonstrates how to register variants for a `LoadingButton` component in Plasmic. It defines a `hovered` variant using a CSS selector and registers the component with Plasmic, specifying its name, variants, and props. The `className` prop is crucial for the registered variants to function correctly.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/registered-variants/.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimportReactfrom&#x27;react&#x27;;\ninterfaceLoadingButtonPropsextendsReact.PropsWithChildren{\nclassName:string;\n}\nexportfunctionLoadingButton(props:LoadingButtonProps){\nconst{children,className}=props;\nreturn(\n// Registered variants rely on className passed to the code component.\n&lt;buttonclassName={className}&gt;{children}&lt;/button&gt;\n);\n}\nPLASMIC.registerComponent(LoadingButton,{\nname:&#x27;LoadingButton&#x27;,\nvariants:{\n// Registered variants\nhovered:{\ncssSelector:&#x27;:hover&#x27;,\ndisplayName:&#x27;Hovered&#x27;\n}\n},\nprops:{\nchildren:&#x27;slot&#x27;\n}\n});\n```\n\n----------------------------------------\n\nTITLE: Install @plasmicapp/auth-api package\nDESCRIPTION: This snippet shows the command to install the `@plasmicapp/auth-api` package using npm or yarn. This package provides the API for server to communicate with Plasmic about the user authentication status.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/auth-integration/.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnpminstall@plasmicapp/auth-api\n# or yarn add @plasmicapp/auth-api\n```\n\n----------------------------------------\n\nTITLE: Feed Component with Data\nDESCRIPTION: This code modifies the `Feed` component to take an array of `PostEntry` objects as props and render them in the `postList` slot of the `PlasmicFeed` component, utilizing the `Post` component for each entry and formatting the timestamp using `moment`.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/minitwitter-tutorial/.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport\\*asReactfrom'react';\nimport{PlasmicFeed,DefaultFeedProps}from'./plasmic/minitwitter/PlasmicFeed';\nimport{PostEntry}from'../model';\nimportPostfrom'./Post';\nimportmomentfrom'moment';\ninterfaceFeedPropsextendsDefaultFeedProps{\nchildren?:never;\nentries:PostEntry[];\n}\nfunctionFeed({entries,...rest}:FeedProps){\nreturn(\n<PlasmicFeed\n{...rest}\npostList={{\nchildren:entries.map((entry)=><Posttimestamp={moment(entry.createdAt).fromNow()}>{entry.content}</Post>)\n}}\n/>\n);\n}\nexportdefaultFeed;\n```\n\n----------------------------------------\n\nTITLE: Next.js API Endpoint for Draft Mode\nDESCRIPTION: This code snippet implements a Next.js API endpoint (`/api/draft`) to enable draft mode. It verifies a secret token, checks for a valid relative path to prevent open redirect vulnerabilities, sets a draft mode cookie, and redirects the user to the specified path. This endpoint allows users to view preview content.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/plasmic-cms-api-reference/.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport{NextApiRequest,NextApiResponse}from\"next\"\nexportdefaultasyncfunctionhandler(req:NextApiRequest,res:NextApiResponse){\nif(req.query.secret!==''MY_SECRET_TOKEN''){\nreturnres.status(401).json({message:'Invalid token'})\n}\n// Check that path is specified, and is a relative not absolute path, to\n// avoid open redirect vulnerability\nif(typeofreq.query.path!==\"string\"||!req.query.path.startsWith(\"/\")){\nreturnres.status(401).json({message:'Invalid path'})\n}\n// Enable Draft Mode by setting the cookie\nres.setDraftMode({enable:true})\n// Redirect to the path\nres.redirect(req.query.path)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Plasmic Loader React\nDESCRIPTION: Installs the `@plasmicapp/loader-react` package using npm or yarn. This package provides the necessary functions and components to integrate Plasmic designs into a React application.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/react-quickstart/.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpminstall@plasmicapp/loader-react\n# or yarn add @plasmicapp/loader-react\n```\n\n----------------------------------------\n\nTITLE: Initializing Plasmic Loader with Project Version - JavaScript\nDESCRIPTION: This code snippet shows how to initialize the Plasmic loader with a specific project version. It configures the Plasmic loader with the project ID, token, and version to fetch a particular published version of the Plasmic project. The `initPlasmicLoader` function is used to create the loader instance.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/vue-api.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const PLASMIC = initPlasmicLoader({\n  projects: [\n    {\n      id: '...',\n      token: '...',\n      version: '2.1.3'\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: useSafeParams Hook with useSelector\nDESCRIPTION: This code defines a custom hook `useSafeParams` that attempts to retrieve router parameters. It first tries to get parameters from the `useRouter` hook. If that fails (e.g., during pre-rendering), it falls back to using `useSelector` to access parameters stored in the data context under the key 'params'. This allows components to access parameters even when the router is not fully initialized.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/data-code-components/.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport{useSelector}from&#x27;@plasmicapp/loader-nextjs&#x27;;\nexportfunctionuseSafeParams(){\nconstdataCtxParams=useSelector(&#x27;params&#x27;);\ntry{\nreturnuseRouter().params;\n}catch{\nreturndataCtxParams;\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Modal Component with Theme Reset Class Prop in React\nDESCRIPTION: This React code defines a `Modal` component that uses a `themeResetClass` prop to apply default styles configured in the Plasmic project. This is useful for content rendered outside the normal DOM tree via React portals. The `registerComponent` function registers the component with Plasmic, specifying the `themeResetClass` prop.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/code-components-ref/.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Modal({ themeResetClass, className, modalContent }) {\nconst [show, setShow] = React.useState(false);\nreturn (\n<>\n<button className={className} onClick={() => setShow(true)}>\nShow\n</button>\n{ReactDOM.createPortal(<div className={`modal ${themeResetClass}`}>{modalContent}</div>, document.body)}\n</>\n);\n}\nregisterComponent(Modal, {\nname: 'Modal',\nprops: {\nmodalContent: 'slot',\nthemeResetClass: {\ntype: 'themeResetClass'\n}\n}\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding element rendering using 'as' property in Plasmic\nDESCRIPTION: This code demonstrates how to use the `as` property within the override object to change the type of element rendered in a Plasmic component. It's used to render an element with a different HTML tag or a React Component. This requires Plasmic and React.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/overrides/.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\nas:\"a\",\nprops:{\nhref:...\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Components with Props and Variants (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to customize component props and global variants when fetching HTML from the Plasmic REST API.  It constructs a URL with `componentProps` and `globalVariants` parameters, which are serialized as JSON strings. Requires `PROJECTID` and `APITOKEN`.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/rest-quickstart/.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconstquery=newURLSearchParams([\n  ['hydrate','1'],\n  ['embedHydrate','1'],\n  [\n    'componentProps',\n    JSON.stringify({\n      // Your component props\n    })\n  ],\n  [\n    'globalVariants',\n    JSON.stringify([\n      // Your global variants\n      {\n        name:'Theme',\n        value:'Dark'\n      }\n    ])\n  ]\n]);\nconstresponse=awaitfetch(\n  `https://codegen.plasmic.app/api/v1/loader/html/preview/PROJECTID/COMPONENTNAME?${query}`,\n  {\n    headers:{\n      // Your project ID and public API token\n      'x-plasmic-api-project-tokens':'PROJECTID:APITOKEN'\n      // You can find your PROJECT token by visiting\n      // https://studio.plasmic.app/projects/[PROJECTID]/docs/loader#showToken=true\n    }\n  }\n);\nconstresult=awaitresponse.json();\ndocument.body.innerHTML=result.html;\n// If you want hydration to happen, load and call the hydrater\nif(window.__plasmicHydrater){\n  window.__plasmicHydrater.hydrateAll();\n}else{\n  varscript=document.createElement('script');\n  script.src='https://codegen.plasmic.app/static/js/loader-hydrate.js';\n  document.body.appendChild(script);\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Validator Example\nDESCRIPTION: This JavaScript code snippet demonstrates how to create a custom validator for a Plasmic form field. It checks if the input value starts with a dollar symbol ('$'). The validator should read the input value from the form state and return a boolean indicating whether the validation passed or failed. The `formName` and `inputName` variables should be replaced with actual values.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/forms/.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n`$state.formName.value.inputName.startsWith(&#x27;$&#x27;)`\n```\n\n----------------------------------------\n\nTITLE: Create Plasmic Host Page in Next.js\nDESCRIPTION: This TypeScript code snippet creates a Plasmic host page in a Next.js application using `@plasmicapp/loader-nextjs`. It imports necessary modules from React and `@plasmicapp/loader-nextjs`, renders the `<PlasmicCanvasHost/>` component within a functional component, and conditionally renders it based on the `PLASMIC` object.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/app-hosting/.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport*asReactfrom'react';\nimport{PlasmicCanvasHost}from'@plasmicapp/loader-nextjs';\nimport{PLASMIC}from'../plasmic-init';\nexportdefaultfunctionPlasmicHost(){\nreturnPLASMIC&&<PlasmicCanvasHost/>;\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional rendering using render override in Plasmic (React)\nDESCRIPTION: This snippet demonstrates how to prevent an element from rendering within a Plasmic component by using the `render` function to return null. This effectively hides or removes the element from the component's output. This requires Plasmic and React.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/overrides/.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\nrender:(props,Component)=>&gt;null;\n}\n```\n\n----------------------------------------\n\nTITLE: Repeating Collection Items with Optional Auto-Repeat - React/JSX\nDESCRIPTION: This function `ProductCollection` fetches a collection of product items using `useFetchProductCollection` and offers an option `noAutoRepeat` to control whether the `children` prop is automatically repeated for each item. If `noAutoRepeat` is false or undefined, it repeats as before.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/data-code-components/.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunctionProductCollection(props:{collectionSlug:string;children?:React.ReactNode;noAutoRepeat?:boolean}){\nconst{collectionSlug,children,noAutoRepeat}=props;\nconstdata=useFetchProductCollection(collectionSlug);\nreturn(\n&lt;DataProvidername=&quot;collection&quot;data={data}&gt;\n{noAutoRepeat\n?children\n:data?.productList.map((product,i)=&gt;(\n&lt;DataProvidername=&quot;currentProduct&quot;data={product}key={i}&gt;\n{repeatedElement(i,children)}\n&lt;/DataProvider&gt;\n))}\n&lt;/DataProvider&gt;\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding root element onClick prop in Plasmic Component (React)\nDESCRIPTION: This code snippet demonstrates how to override the `onClick` prop of the root element in a Plasmic component. It uses the `componentProps` prop to specify the component name and then sets the `onClick` handler for the `root` element to display an alert message when clicked. This requires Plasmic and React.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/overrides/.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<PlasmicComponent\ncomponent={'Button'}\ncomponentProps={{\nroot:{\nprops:{\nonClick:()=>alert('I got clicked!')\n}\n}\n}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Fetching Component Data with PlasmicComponentLoader\nDESCRIPTION: Fetches data for specified components using the `fetchComponentData` method. This method takes component names or page paths as arguments and returns data required to render those components and their dependencies.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/angular-api.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await PLASMIC.fetchComponentData('/', 'LoginForm');\n```\n\n----------------------------------------\n\nTITLE: Example of fetchComponentData return object\nDESCRIPTION: Shows the structure of the object returned by `fetchComponentData`. Includes entry component metadata, remote font URLs, and project bundle information.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/angular-api.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  entryCompMetas: [\n    // There's one object here for each entrypoint you\n    // specified in your call to fetchComponentData()\n    {\n      id: \"...\", // unique identifier\n      name: \"ComponentName\", // normalized name of component\n      displayName: \"Component Name\", // display name of component\n      isPage: true, // true if it corresponds to a page\n      pageMetadata: {\n        // This object exists if isPage is true\n        path: \"/page\", // path for this page\n        // The page metadata below can be used to embed into your\n        // <head/> tag\n        title: \"My Page\", // title of the page if set\n        description: \"This is me!\", // description of the page if set\n        openGraphImageUrl: \"...\", // url of open graph image\n      },\n      // Studio users can attach arbitrary key-value metadata to any page/component.\n      metadata: {\n        isStagingOnly: \"true\",\n        keywords: \"seo, search, engine, optimization, rank, pagerank\",\n        customTargeting: \"audience=women, repeatbuyer=true\",\n        // ...\n      }\n    }\n  ],\n  remoteFontUrls: [\n    // Remote URLS that can be used to load fonts that you need\n    // in your projects. By default, `PlasmicComponent` will\n    // already include the fonts you need, but you can use this\n    // information to try to pre-load them in your site if\n    // you'd like.\n    \"https://fonts.google.com/...\"\n  ],\n  bundle: {\n    // There is one entry here per project, including projects that are imported dependencies.\n    projects: [\n      {\n        id: \"Q62yQ3x2m25QvuUT8iBcZm\",\n        // true if this was a dependency, false if it was an explicitly requested project\n        indirect: false,\n        name: \"My Project\",\n        teamId: \"yQ3x2m25QvuUT8iBcZmQ62\",\n        // Maybe a specific version number, or `latest` if in preview mode\n        version: \"latest\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Form State Example JSON\nDESCRIPTION: This JSON object represents the state of a Plasmic form with two fields: 'givenName' and 'familyName'. The values associated with these fields are 'Alex' and 'Smith' respectively.  This structure is often used when submitting form data to an integration or database, where field names should match database column names. Requires form with 'givenName' and 'familyName' input fields.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/forms/.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  &quot;givenName&quot;: &quot;Alex&quot;,\n  &quot;familyName&quot;: &quot;Smith&quot;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Button as a link in Plasmic Component (React)\nDESCRIPTION: This code snippet demonstrates how to render a 'Button' component as a link (`<a>` tag) using override props in Plasmic. It sets the `as` property to 'a' and defines the `href` attribute within the `props` object for the root element. This is useful for creating buttons that navigate to different URLs. This requires Plasmic and React.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/overrides/.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<PlasmicComponent\ncomponent={'Button'}\ncomponentProps={{\nroot:{\nas:'a',\nprops:{\nhref:'https://plasmic.app'\n}\n}\n}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Fetching Component Data - JavaScript\nDESCRIPTION: This code snippet illustrates how to fetch data needed to render specified components using `PlasmicComponentLoader.fetchComponentData()`. It fetches data for the root page ('/') and the 'LoginForm' component. The fetched data is used to render the components within the Vue application.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/vue-api.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await PLASMIC.fetchComponentData('/', 'LoginForm');\n```\n\n----------------------------------------\n\nTITLE: Extending Button Component with onClick Handler\nDESCRIPTION: This code extends the `Button` component by adding an `onClick` handler.  It imports the `PlasmicButton` and forwards the `onClick` prop directly to it. This allows the Plasmic component to handle click events, making it interactive.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/minitwitter-tutorial/.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport {\nPlasmicButton,\nDefaultButtonProps\n} from './plasmic/minitwitter/PlasmicButton';\n\ninterface ButtonProps extends DefaultButtonProps {\nchildren?: never;\nonClick?: () => void;\n}\n\nfunction Button(props: ButtonProps) {\nreturn <PlasmicButton {...props} />;\n}\n\nexport default Button;\n```\n\n----------------------------------------\n\nTITLE: Appending to a Slot in Plasmic Component\nDESCRIPTION: This code snippet demonstrates how to append a new element to a specific slot of a component in Plasmic Studio using the `studioOps.appendToSlot()` method. The element is specified in Plasmic element type JSON format, and the target slot is identified by its name. It depends on `studioOps` object provided to editor actions.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/editor-actions/.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nappendToSlot(element:PlasmicElement,slotName:string);\n```\n\n----------------------------------------\n\nTITLE: Fetching HTML with Hydration using Plasmic Render API in Javascript\nDESCRIPTION: This Javascript code snippet demonstrates how to fetch generated HTML from the Plasmic Render API for a specific component, including hydration. It sets the `x-plasmic-api-project-tokens` header for authentication and appends the fetched HTML to the document body. It also handles loading and calling the hydrater script if hydration is needed.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/render-api.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconstresponse=awaitfetch(\n  'https://codegen.plasmic.app/api/v1/loader/html/preview/PROJECTID/COMPONENTNAME?hydrate=1&amp;embedHydrate=1',\n  {\n    headers:{\n      // Your project ID and public API token\n      'x-plasmic-api-project-tokens':'PROJECTID:APITOKEN'\n      // You can find your PROJECT token by visiting\n      // https://studio.plasmic.app/projects/[PROJECTID]/docs/loader#showToken=true\n    }\n  }\n);\nconstresult=awaitresponse.json();\ndocument.body.innerHTML=result.html;\n// If you want hydration to happen, load and call the hydrater\nif(window.__plasmicHydrater){\n  window.__plasmicHydrater.hydrateAll();\n}else{\n  varscript=document.createElement('script');\n  script.src='https://codegen.plasmic.app/static/js/loader-hydrate.js';\n  document.body.appendChild(script);\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Action Trigger Configuration\nDESCRIPTION: This configuration snippet shows how a GitHub Action is set up to listen for `repository_dispatch` events of type `plasmic`. This allows Plasmic to trigger the workflow via webhook for custom build and deployment processes.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/github-action/.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\non:\n repository_dispatch:\n  types:[plasmic]\n```\n\n----------------------------------------\n\nTITLE: Wrapping components with context providers\nDESCRIPTION: This snippet illustrates how to wrap code components in context providers to ensure they have access to the necessary context, such as styling, when running within the Plasmic Studio UI, which operates in a different document/iframe than the application.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/custom-controls/.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunctionStandardContexts({children}){\nreturn(\n&lt;ThemeProvider&gt;\n&lt;SomeOtherProvider&gt;{children}&lt;/SomeOtherProvider&gt;\n&lt;/ThemeProvider&gt;\n);\n}\nfunctionCustomProp1(props){\nreturn&lt;StandardContexts&gt;...&lt;/StandardContexts&gt;;\n}\nfunctionCustomProp2(props){\nreturn&lt;StandardContexts&gt;...&lt;/StandardContexts&gt;;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Single Plasmic Component\nDESCRIPTION: Demonstrates how to render a single Plasmic component in a React application. It uses the `<PlasmicRootProvider>` to initialize the Plasmic loader and the `<PlasmicComponent>` to render the specified component.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/react-quickstart/.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport{PlasmicRootProvider,PlasmicComponent}from&#x27;@plasmicapp/loader-react&#x27;;\nimport{PLASMIC}from&#x27;../plasmic-init&#x27;;\nexportfunctionMyComponent(){\nreturn(\n&lt;PlasmicRootProviderloader={PLASMIC}&gt;\n&lt;PlasmicComponentcomponent=&quot;COMPONENTNAME&quot;/&gt;\n&lt;/PlasmicRootProvider&gt;\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Global Context Props for Draft Mode in getStaticProps\nDESCRIPTION: This snippet shows how to conditionally set `globalContextsProps` based on the `draftMode` flag in `getStaticProps`. If draft mode is enabled, it provides the CMS draft token and specifies the models to use draft data from. Otherwise, it returns `undefined`, effectively disabling draft mode. This function is used by both `getStaticProps` and the `PlasmicLoaderPage` component.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/plasmic-cms-api-reference/.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* Used by both getStaticProps() and PlasmicLoaderPage component to turn on\n* draft mode for Plasmic CMS\n*/\nfunctiongetGlobalContextProps(draftMode:boolean|undefined|null){\nif(draftMode){\nconsole.log(\"UsING DRAFT TOKEN\",process.env.PLASMIC_CMS_DRAFT_TOKEN)\nreturn{\ncmsCredentialsProviderProps:{\ndatabaseToken:process.env.PLASMIC_CMS_DRAFT_TOKEN,\nuseDraft:[\"blogPost\"]\n}\n};\n}else{\nreturnundefined;\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Removing from a Slot in Plasmic Component\nDESCRIPTION: This code snippet demonstrates how to remove an element from a specific position in a component's slot within Plasmic Studio using `studioOps.removeFromSlotAt()`. The target position is specified by its index, and the slot is identified by its name. It relies on `studioOps` object available to editor actions.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/editor-actions/.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nremoveFromSlotAt(pos:number,slotName:string);\n```\n\n----------------------------------------\n\nTITLE: Install Plasmic Loader Next.js\nDESCRIPTION: This command installs the Plasmic loader for Next.js, which is required to integrate Plasmic content into a Next.js application. It adds the `@plasmicapp/loader-nextjs` package as a dependency to your project.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/content-management/.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @plasmicapp/loader-nextjs\n```\n\n----------------------------------------\n\nTITLE: Authenticate with Plasmic CLI\nDESCRIPTION: This command authenticates the Plasmic CLI with your Plasmic account. This is a necessary step before syncing projects, as it verifies the user's identity and grants access to their Plasmic projects.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/codegen-guide/.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nplasmic auth\n```\n\n----------------------------------------\n\nTITLE: Initializing Plasmic Loader in TypeScript\nDESCRIPTION: Initializes the Plasmic loader with the project ID and API token. This code defines a module that can be imported and used globally within the application. It sets up the Plasmic environment for fetching content and rendering components.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/hydrogen-quickstart/.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport{initPlasmicLoader}from&quot;@plasmicapp/loader-react&quot;;\nexportconstPLASMIC=initPlasmicLoader({\nprojects:[\n{\nid:&quot;PROJECTID&quot;,// ID of a project you are using\ntoken:&quot;APITOKEN&quot;// API token for that project\n}\n],\n// Fetches the latest revisions, whether or not they were unpublished!\n// Disable for production to ensure you render only published changes.\npreview:true,\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Plasmic Loader\nDESCRIPTION: This TypeScript snippet initializes the Plasmic loader with your project ID and API token. It configures the loader with project-specific credentials and sets the `preview` flag, which enables fetching the latest revisions of your Plasmic content. The `initPlasmicLoader` function from `@plasmicapp/loader-vue` is used to create the loader instance.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/vue-quickstart/.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport{initPlasmicLoader}from&quot;@plasmicapp/loader-vue&quot;;\nexportconstPLASMIC=initPlasmicLoader({\nprojects:[\n{\nid:&quot;PROJECTID&quot;,// ID of a project you are using\ntoken:&quot;APITOKEN&quot;// API token for that project\n}\n],\n// Fetches the latest revisions, whether or not they were unpublished!\n// Disable for production to ensure you render only published changes.\npreview:true,\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Component with Default Slot Value in JavaScript\nDESCRIPTION: This code snippet demonstrates how to register a component with a default slot value in Plasmic. The `defaultValue` property of the `children` prop is set to an array containing a text element with the value 'Click me!'. This allows you to pass an element tree as the default value of a slot.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/code-components-ref/.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nregisterComponent({\n  name: 'Button',\n  props: {\n    children: {\n      type: 'slot',\n      defaultValue: [\n        {\n          type: 'text',\n          value: 'Click me!'\n        }\n      ]\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Example of Plasmic Component Data - JSON\nDESCRIPTION: This is an example of the JSON structure returned by `PlasmicComponentLoader.fetchComponentData()`. It includes metadata about the entry components, remote font URLs, and project bundles. The structure provides information about the component's ID, name, display name, page metadata, and project details.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/vue-api.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  entryCompMetas: [\n    // There's one object here for each entrypoint you\n    // specified in your call to fetchComponentData()\n    {\n      id: \"...\", // unique identifier\n      name: \"ComponentName\", // normalized name of component\n      displayName: \"Component Name\", // display name of component\n      isPage: true, // true if it corresponds to a page\n      pageMetadata: {\n        // This object exists if isPage is true\n        path: \"/page\", // path for this page\n        // The page metadata below can be used to embed into your\n        // <head/> tag\n        title: \"My Page\", // title of the page if set\n        description: \"This is me!\", // description of the page if set\n        openGraphImageUrl: \"...\" // url of open graph image\n      },\n      // Studio users can attach arbitrary key-value metadata to any page/component.\n      metadata: {\n        isStagingOnly: \"true\",\n        keywords: \"seo, search, engine, optimization, rank, pagerank\",\n        customTargeting: \"audience=women, repeatbuyer=true\",\n        // ...\n      }\n    }\n  ],\n  remoteFontUrls: [\n    // Remote URLS that can be used to load fonts that you need\n    // in your projects. By default, `PlasmicComponent` will\n    // already include the fonts you need, but you can use this\n    // information to try to pre-load them in your site if\n    // you'd like.\n    \"https://fonts.google.com/...\"\n  ],\n  bundle: {\n    // There is one entry here per project, including projects that are imported dependencies.\n    projects: [\n      {\n        id: \"Q62yQ3x2m25QvuUT8iBcZm\",\n        // true if this was a dependency, false if it was an explicitly requested project\n        indirect: false,\n        name: \"My Project\",\n        teamId: \"yQ3x2m25QvuUT8iBcZmQ62\",\n        // Maybe a specific version number, or `latest` if in preview mode\n        version: \"latest\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Code Components from Content Creators in Plasmic\nDESCRIPTION: This snippet describes how to hide code components from content creators within Plasmic.  It involves setting the `hideFromContentCreators` flag during the `registerComponent` call. This is a boolean flag that, when set to true, prevents the component from appearing in the content creator's component list.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/content-creator-mode/.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nregisterComponent`hideFromContentCreators`\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Plasmic CLI\nDESCRIPTION: This code snippet shows the command to authenticate with the Plasmic CLI using `npx`. This command is the recommended way to authenticate your system with Plasmic, enabling seamless interaction with Plasmic projects.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/development-troubleshooting/.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nnpx -p @plasmicapp/cli plasmic auth\n```\n\n----------------------------------------\n\nTITLE: Shorthand registration of code component with custom prop control\nDESCRIPTION: This snippet provides a shorthand way to register a code component with a custom prop in Plasmic when no other metadata needs to be specified beyond the control component itself. It directly assigns the custom control component to the `customProp` property in the `props` object.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/custom-controls/.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nPLASMIC.registerComponent(CodeComponent,{\nname:'CodeComponent',\nprops:{\ncustomProp:CustomProp\n}\n});\n```\n\n----------------------------------------\n\nTITLE: Swapping content in Plasmic using render override (React)\nDESCRIPTION: This code snippet illustrates how to completely replace the content of an element within a Plasmic component by using the `render` function to return a completely different component, such as `TotallyDifferentComponent`. This requires Plasmic and React.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/overrides/.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\nrender:(props,Component)=>&lt;TotallyDifferentComponent/&gt;;\n}\n```\n\n----------------------------------------\n\nTITLE: Install Plasmic Loader React\nDESCRIPTION: Installs the `@plasmicapp/loader-react` package, which is necessary for integrating Plasmic with a React-based application like Remix. This package provides the tools for fetching and rendering Plasmic designs.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/remix-quickstart/.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpminstall@plasmicapp/loader-react\n# or yarn add @plasmicapp/loader-react\n```\n\n----------------------------------------\n\nTITLE: Initializing Plasmic Loader for Preview Mode\nDESCRIPTION: Initializes the Plasmic loader with a project ID and token, enabling preview mode. This configuration fetches the latest unpublished changes from the Plasmic project, useful for development but should not be used in production.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/angular-api.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const PLASMIC = initPlasmicLoader({\n  projects: [\n    {\n      id: '...',\n      token: '...'\n    }\n  ],\n  preview: true\n});\n```\n\n----------------------------------------\n\nTITLE: Wrapping Router View with PlasmicRootProvider\nDESCRIPTION: This Vue component snippet shows how to wrap your `router-view` with the `PlasmicRootProvider` component. The `PlasmicRootProvider` component ensures that Plasmic is properly initialized and provides the necessary context for rendering Plasmic components. The `loader` prop is bound to the initialized Plasmic loader instance.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/vue-quickstart/.md#_snippet_3\n\nLANGUAGE: Vue\nCODE:\n```\n&lt;template&gt;\n&lt;PlasmicRootProvider:loader=&quot;this.loader&quot;&gt;\n&lt;!--Router renders everything here,including Plasmic pages.--&gt;\n&lt;router-view/&gt;\n&lt;/PlasmicRootProvider&gt;\n&lt;/template&gt;\n&lt;script&gt;\nimport{PlasmicRootProvider}from&#x27;@plasmicapp/loader-vue&#x27;;\nimport{PLASMIC}from&#x27;./plasmic-init&#x27;;\nexportdefault{\nname:&#x27;App&#x27;,\ncomponents:{\nPlasmicRootProvider\n},\ncomputed:{\nloader(){\nreturnPLASMIC;\n}\n}\n};\n&lt;/script&gt;\n```\n\n----------------------------------------\n\nTITLE: Data Provider Component without Wrapping div\nDESCRIPTION: This code snippet shows a `ProductBox` component that fetches product data using `useFetchProduct` and renders its children within a `DataProvider`. It doesn't render a wrapping `div`, allowing the parent element to handle layout.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/data-code-components/.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunctionProductBox(props){\nconst{children,productSlug}=props;\nconstresponse=useFetchProduct(productSlug);\n// Render &lt;DataProvider /&gt; without wrapping div\nreturn(\n&lt;DataProvidername=&quot;product&quot;data={response.data}&gt;\n{children}\n&lt;/DataProvider&gt;\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Showing a modal in a custom prop control\nDESCRIPTION: This snippet demonstrates how to display a modal within a custom prop control in Plasmic, utilizing the `FullscreenModal` component. The modal is toggled by a button and includes an `onClose` callback that is fired when the user clicks outside the modal.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/custom-controls/.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconstCustomControl=({FullscreenModal})=&gt;{\nconst[open,setOpen]=useState(false);\nreturn(\n&lt;div\nstyle={{\nwidth:'100%',\ndisplay:'flex',\njustifyContent:'space-between',\npadding:'0px 10px 0px 10px'\n}}\n&gt;\n&lt;buttononClick={()=&gt;setOpen(true)}style={{background:'lightgray',padding:'0px 5px 0px 5px'}}&gt;\nEdit\n&lt;/button&gt;\n&lt;FullscreenModalshow={open}onClose={()=&gt;setOpen(false)}&gt;\n&lt;div&gt;More UI here!&lt;/div&gt;\n&lt;buttononClick={()=&gt;setOpen(false)}&gt;Close&lt;/button&gt;\n&lt;/FullscreenModal&gt;\n&lt;/div&gt;\n);\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Plasmic Components with Props and Variants\nDESCRIPTION: This snippet shows how to customize Plasmic components by passing component props and global variants through the REST API. It constructs a URL with query parameters to specify the `componentProps` and `globalVariants`. The `componentProps` field expects a JSON object, and the `globalVariants` field expects an array of objects with `name` and `value` properties.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/js-quickstart/.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconstquery=newURLSearchParams([\n  ['hydrate','1'],\n  ['embedHydrate','1'],\n  [\n    'componentProps',\n    JSON.stringify({\n      // Your component props\n    })\n  ],\n  [\n    'globalVariants',\n    JSON.stringify([\n      // Your global variants\n      {\n        name:'Theme',\n        value:'Dark'\n      }\n    ])\n  ]\n]);\nconstresponse=awaitfetch(\n  `https://codegen.plasmic.app/api/v1/loader/html/preview/PROJECTID/COMPONENTNAME?${query}`,\n  {\n    headers:{\n      // Your project ID and public API token\n      'x-plasmic-api-project-tokens':'PROJECTID:APITOKEN'\n      // You can find your PROJECT token by visiting\n      // https://studio.plasmic.app/projects/[PROJECTID]/docs/loader#showToken=true\n    }\n  }\n);\nconstresult=awaitresponse.json();\ndocument.body.innerHTML=result.html;\n// If you want hydration to happen, load and call the hydrater\nif(window.__plasmicHydrater){\n  window.__plasmicHydrater.hydrateAll();\n}else{\n  varscript=document.createElement('script');\n  script.src='https://codegen.plasmic.app/static/js/loader-hydrate.js';\n  document.body.appendChild(script);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Plasmic Loader for Previewing Changes - JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize the Plasmic loader to preview the latest unpublished changes during development. By setting the `preview` flag to `true`, the loader fetches the latest unpublished changes from the Plasmic project. This is useful for seeing real-time updates in the development environment.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/vue-api.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const PLASMIC = initPlasmicLoader({\n  projects: [\n    {\n      id: '...',\n      token: '...'\n    }\n  ],\n  preview: true\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Component in Plasmic Init\nDESCRIPTION: This code registers the `HelloWorld` component with the Plasmic loader, making it available for use within the Plasmic Studio. The registration specifies the component's name and the types of its props, allowing Plasmic to understand and visually manipulate these props.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/nextjs-quickstart/.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport{HelloWorld}from&#x27;./components/HelloWorld&#x27;;\n// ...\nPLASMIC.registerComponent(HelloWorld,{\nname:&#x27;HelloWorld&#x27;,\nprops:{\nverbose:&#x27;boolean&#x27;,\nchildren:&#x27;slot&#x27;\n}\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Component with Plasmic\nDESCRIPTION: Registers the `HelloWorld` component with the Plasmic loader, making it available for use within Plasmic Studio. The registration includes the component name and the types of props it accepts.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/react-quickstart/.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport{HelloWorld}from&#x27;./components/HelloWorld&#x27;;\n// ...\nexportconstPLASMIC=initPlasmicLoader(/\\* ... \\*/);\nPLASMIC.registerComponent(HelloWorld,{\nname:&#x27;HelloWorld&#x27;,\nprops:{\nverbose:&#x27;boolean&#x27;,\nchildren:&#x27;slot&#x27;\n}\n});\n```\n\n----------------------------------------\n\nTITLE: Override element props - React\nDESCRIPTION: This snippet demonstrates how to override the properties of an element within a Plasmic component.  It uses a generic 'user' object with a 'name' property and demonstrates setting an 'onClick' handler.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/react-api/.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n{\nprops:{\ntitle:user.name,\nonClick:()=&gt;...,\n// etc.\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Items with Plasmic CMS API in JavaScript\nDESCRIPTION: This snippet shows how to count all items of a specific model using the API's GET /count endpoint. It constructs the API URL, sets the necessary headers with the CMS ID and Public Token for authentication, and processes the JSON response to extract the count. This method is useful when you only need the number of records and not the actual data.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/plasmic-cms-api-reference/.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Find your CMS ID and Public Token from the settings page.\nconstCMS_ID='';\nconstCMS_PUBLIC_TOKEN='';\n// Find your model's unique identifier from its model schema page.\nconstmodelId='testimonials';\n// Load all model entries\nconstresponse=awaitfetch(`https://data.plasmic.app/api/v1/cms/databases/${CMS_ID}/tables/${modelId}/count`,{\nheaders:{\n// Your CMS ID and CMS Public API token\n'x-plasmic-api-cms-tokens':`${CMS_ID}:${CMS_PUBLIC_TOKEN}`\n}\n});\nconstparsedResponse=awaitresponse.json();\nconsole.log(parsedResponse);\nconsttestimonials=parsedResponse.rows;\n// ...\n```\n\n----------------------------------------\n\nTITLE: Angular App Component\nDESCRIPTION: This TypeScript snippet defines the root component of the Angular application, which includes a `router-outlet` to display the content of the current route. The template uses the `<router-outlet>` directive to render the component associated with the active route.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/angular-quickstart/.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport{Component}from&#x27;@angular/core&#x27;;\n@Component({\nselector:&#x27;app-root&#x27;,\n// Use the routing inside the app-root\ntemplate:`&lt;router-outlet&gt; &lt;/router-outlet&gt;`\n})\nexportclassAppComponent{}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Component Instance in JavaScript\nDESCRIPTION: This code snippet shows how to define a default component instance in Plasmic using the `default-component` type.  It specifies the `kind` as 'button' and provides the `href` prop with the value '#'. This allows you to include built-in Plasmic components like Buttons and Selects in your slot default values.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/code-components-ref/.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  type:\"default-component\",\n  kind:\"button\",\n  props:{href:\"#\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: This command starts the local development server for the Plasmic project. The specific command depends on the project type (Next.js, Gatsby, or React with Vite). The server usually runs on port 3000.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/quickstart-cli/.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpmrun dev\n# or\nyarndev\n```\n\n----------------------------------------\n\nTITLE: Install Plasmic Angular Loader\nDESCRIPTION: This command installs the `@plasmicapp/loader-angular` package, which is necessary to integrate Plasmic into your Angular project. It provides the necessary functions and components to load and render Plasmic designs.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/angular-quickstart/.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpminstall@plasmicapp/loader-angular\n# or yarn add @plasmicapp/loader-angular\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple React Component\nDESCRIPTION: Defines a simple React component called `HelloWorld` with properties for customizing its output, including a boolean `verbose` property and a `children` slot. This component serves as an example for registering custom code components within Plasmic.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/hydrogen-quickstart/.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport\\*asReactfrom&#x27;react&#x27;;\nexportinterfaceHelloWorldProps{\nchildren?:React.ReactNode;\nclassName?:string;\nverbose?:boolean;\n}\nexportfunctionHelloWorld({children,className,verbose}:HelloWorldProps){\nreturn(\n&lt;divclassName={className}style={{padding:&#x27;20px&#x27;}}&gt;\n&lt;p&gt;Hello there!{verbose&amp;&amp;&#x27;Really nice to meet you!&#x27;}&lt;/p&gt;\n&lt;div&gt;{children}&lt;/div&gt;\n&lt;/div&gt;\n);\n}\n```\n\n----------------------------------------\n\nTITLE: PlasmicRootProvider skipFonts Prop\nDESCRIPTION: This React code snippet demonstrates how to disable Plasmic's default font loading using the `skipFonts` prop on the `PlasmicRootProvider` component.  This is used when integrating custom font loading.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/page-performance/.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n&lt;PlasmicRootProviderskipFonts&gt;{/\\* ... \\*/}&lt;/PlasmicRootProvider&gt;\n```\n\n----------------------------------------\n\nTITLE: Fetching Component Data (Vue)\nDESCRIPTION: This code demonstrates how to fetch component data using `PlasmicComponentLoader.fetchComponentData()`. It fetches data needed to render the specified components. Requires an instance of `PlasmicComponentLoader` named `PLASMIC` and the names (or paths) of the components to fetch.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/vue-api/.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconstdata=awaitPLASMIC.fetchComponentData('/', 'LoginForm');\n```\n\n----------------------------------------\n\nTITLE: Filter Query Combining $and and $or Operators\nDESCRIPTION: This JSON snippet demonstrates a filter query that combines both `$and` and `$or` operators for complex filtering. It filters for items where the category is either 'news' or 'blog' AND the views are greater than 1000.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/plasmic-cms-api-reference/.md#_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n\"where\": {\n\"$and\": [\n{\n\"$or\": [\n{ \"category\": \"news\" },\n{ \"category\": \"blog\" }\n]\n},\n{ \"views\": { \"$gt\": 1000 } }\n]\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom React Component\nDESCRIPTION: Defines a simple React component named `HelloWorld` with props for children, className, and verbose. This component will be registered with Plasmic to be used within the Plasmic Studio.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/react-quickstart/.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport\\*asReactfrom&#x27;react&#x27;;\nexportinterfaceHelloWorldProps{\nchildren?:React.ReactNode;\nclassName?:string;\nverbose?:boolean;\n}\nexportfunctionHelloWorld({children,className,verbose}:HelloWorldProps){\nreturn(\n&lt;divclassName={className}style={{padding:&#x27;20px&#x27;}}&gt;\n&lt;p&gt;Hello there!{verbose&amp;&amp;&#x27;Really nice to meet you!&#x27;}&lt;/p&gt;\n&lt;div&gt;{children}&lt;/div&gt;\n&lt;/div&gt;\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding root element onClick prop directly in Plasmic Component (React)\nDESCRIPTION: This code snippet shows how to directly set an override for the root element of a Plasmic component by passing additional props to the `componentProps` object. In this case, it overrides the `onClick` event handler. This requires Plasmic and React.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/overrides/.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n<PlasmicComponent\ncomponent={'Button'}\ncomponentProps={{\n// This is interpreted as a prop override for the root element\nonClick:()=>alert('I got clicked!')\n}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Plasmic Component with Headless API in JSX\nDESCRIPTION: This code snippet demonstrates how to render a Plasmic component named 'LandingPagePromotion' within a React application using the Headless API. The `PlasmicComponent` component is used to fetch and display the Plasmic design. This assumes that `PlasmicComponent` is already imported and configured to connect to your Plasmic project.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/loader-vs-codegen.md#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<PlasmicComponentcomponent=\"LandingPagePromotion\"/>\n```\n\n----------------------------------------\n\nTITLE: Install Plasmic CLI\nDESCRIPTION: This command installs the Plasmic CLI globally, allowing you to sync Plasmic components into your codebase. This step is essential for integrating Plasmic designs into the React application.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/minitwitter-tutorial/.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarnglobaladd@plasmicapp/cli\n# or: npm install -g @plasmicapp/cli\n```\n\n----------------------------------------\n\nTITLE: Counter Component with CSS Class Props in React\nDESCRIPTION: This React code defines a `Counter` component that uses CSS class name props to allow users to style the component's parts. The `registerComponent` function registers the component with Plasmic, specifying `buttonClassName` and `countClassName` props with selectors and style sections to control which styles can be applied in Plasmic Studio.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/code-components-ref/.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunctionCounter({className,countClassName,buttonClassName}){\nconst[count,setCount]=React.useState(0);\nreturn(\n<divclassName={className}data-used={count>0}>\n<divclassName={countClassName}>{count}</div>\n<buttonclassName={buttonClassName}onClick={()=>setCount((c)=>c+1)}>\nIncrement\n</button>\n</div>\n);\n}\nregisterComponent(Counter,{\nname:'Counter',\nprops:{\nbuttonClassName:{\ntype:'class',\nselectors:[\n// Plasmic Studio user can also in addition style the button's\n// hovered and pressed state\n{\nselector:':hover',\nlabel:'Hovered'\n},\n{\nselector:':active',\nlabel:'Pressed'\n}\n]\n},\ncountClassName:{\ntype:'class',\nselectors:[\n// You can also use a selector that uses the non-standard\n// :component and :self selectors, to refer to the component root\n// and the element receiving the class. Here, we are targeting\n// when the component root has data-used=true applied.\n{\nselector:`:component[data-used=\\\"true\\\"] :self`,\nlabel:'When used'\n}\n],\n// We can limit what kind of styles can be applied to this element\nstyleSections:['typography']\n}\n}\n});\n```\n\n----------------------------------------\n\nTITLE: Component State Initialization with initVal\nDESCRIPTION: This example defines the initial value of a read-only state `count` within a `Counter` component. It utilizes the `initVal` property to set the initial value to 0, ensuring that the parent component receives the correct state value from the start, even before any user interactions.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/code-components-ref/.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nregisterComponent(Counter,{\nname:&#x27;Counter&#x27;,\nprop:{\nonCountChange:{\ntype:&#x27;eventHandler&#x27;,\nargTypes:[{name:&#x27;count&#x27;,type:&#x27;number&#x27;}]\n}\n},\nstates:{\ncount:{\ntype:&#x27;readonly&#x27;,\nonChangeProp:&#x27;onCountChange&#x27;,\nvariableType:&#x27;number&#x27;,\ninitVal:0\n}\n}\n});\n```\n\n----------------------------------------\n\nTITLE: Filter Query using $lt Operator\nDESCRIPTION: This JSON snippet shows an example filter query using the `$lt` (less than) conditional operator. This example includes only stock less than 10.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/plasmic-cms-api-reference/.md#_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n\"where\":{\n\"stock\":{\"$lt\":10}\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom React Component for Plasmic\nDESCRIPTION: This code defines a simple React component, `HelloWorld`, which can be registered with Plasmic to allow users to drag and drop it into their Plasmic designs. It includes properties like `children`, `className`, and `verbose` that can be visually manipulated in the Plasmic Studio.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/nextjs-quickstart/.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport\\*asReactfrom&#x27;react&#x27;;\nexportinterfaceHelloWorldProps{\nchildren?:React.ReactNode;\nclassName?:string;\nverbose?:boolean;\n}\nexportfunctionHelloWorld({children,className,verbose}:HelloWorldProps){\nreturn(\n&lt;divclassName={className}style={{padding:&#x27;20px&#x27;}}&gt;\n&lt;p&gt;Hello there!{verbose&amp;&amp;&#x27;Really nice to meet you!&#x27;}&lt;/p&gt;\n&lt;div&gt;{children}&lt;/div&gt;\n&lt;/div&gt;\n);\n}\n```\n\n----------------------------------------\n\nTITLE: App Component with Dummy Data\nDESCRIPTION: This code creates dummy post entries in the top-level `App` component using the `createPost` function and passes them to the `Feed` component as props, showcasing how real data can be used to populate the feed.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/minitwitter-tutorial/.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimportReact,{useState}from'react';\nimportFeedfrom'./components/Feed';\nimport{createPost}from'./model';\nfunctionApp(){\nconst[entries,setEntries]=useState([\ncreatePost({content:'Hello world',createdAt:newDate()}),\ncreatePost({content:'Another post',createdAt:newDate()})\n]);\nreturn<Feedentries={entries}/>;\n}\nexportdefaultApp;\n```\n\n----------------------------------------\n\nTITLE: Filter Query using $gt Operator\nDESCRIPTION: This JSON snippet shows an example filter query using the `$gt` (greater than) conditional operator. This example includes only views greater than 1000.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/plasmic-cms-api-reference/.md#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n\"where\":{\n\"views\":{\"$gt\":1000}\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Plasmic Build Step Commands\nDESCRIPTION: This set of commands is used in the build script to upgrade Plasmic dependencies, sync Plasmic designs, and then build the site. The `npm update` command ensures the CLI is up to date. The `plasmic sync` command fetches the latest designs and the `npm run build` command triggers the build process for the site.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/build-time-codegen/.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpmupdate @plasmicapp/cli @plasmicapp/react-web\nnpmrun plasmicsync--yes --force\nnpmrun build\n```\n\n----------------------------------------\n\nTITLE: Linking to Specific Element\nDESCRIPTION: Demonstrates how to link to a specific element within a page using its assigned ID. The destination URL includes the page path followed by a hash (#) and the element's ID.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/pages/.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/my-page#name-of-section\n```\n\nLANGUAGE: text\nCODE:\n```\n#name-of-section\n```\n\n----------------------------------------\n\nTITLE: Loading All Items with Plasmic CMS API in JavaScript\nDESCRIPTION: This snippet demonstrates how to load all items of a specific model from Plasmic CMS using the API's GET /query endpoint. It constructs the API URL, sets the necessary headers with the CMS ID and Public Token for authentication, and processes the JSON response to extract the data rows. The CMS ID, Public Token, and model ID are required as input.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/plasmic-cms-api-reference/.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Find your CMS ID and Public Token from the settings page.\nconstCMS_ID='';\nconstCMS_PUBLIC_TOKEN='';\n// Find your model's unique identifier from its model schema page.\nconstmodelId='testimonials';\n// Load all model entries\nconstresponse=awaitfetch(`https://data.plasmic.app/api/v1/cms/databases/${CMS_ID}/tables/${modelId}/query`,{\nheaders:{\n// Your CMS ID and CMS Public API token\n'x-plasmic-api-cms-tokens':`${CMS_ID}:${CMS_PUBLIC_TOKEN}`\n}\n});\nconstparsedResponse=awaitresponse.json();\nconsole.log(parsedResponse);\nconsttestimonials=parsedResponse.rows;\n// ...\n```\n\n----------------------------------------\n\nTITLE: Insert a visually hidden checkbox - React\nDESCRIPTION: This snippet illustrates how to use 'wrapChildren' to insert a visually hidden checkbox input element before the children of a Plasmic component.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/react-api/.md#_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n{\n// insert a visually hidden checkbox input as the first child\nwrapChildren:(children)=&gt;(\n&lt;&gt;\n&lt;inputclassName=&quot;visually-hidden&quot;type=&quot;checkbox&quot;/&gt;\n{children}\n&lt;/&gt;\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Plasmic Loader with Project ID and API Token (TypeScript)\nDESCRIPTION: This code snippet initializes the Plasmic loader with the project ID and API token. This step is crucial for connecting the Nuxt application to the Plasmic project. The `preview: true` option enables fetching the latest revisions, including unpublished ones, which should be disabled in production environments.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/nuxt-quickstart/.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport{initPlasmicLoader}from&quot;@plasmicapp/loader-vue&quot;;\nexportconstPLASMIC=initPlasmicLoader({\nprojects:[\n{\nid:&quot;PROJECTID&quot;,// ID of a project you are using\ntoken:&quot;APITOKEN&quot;// API token for that project\n}\n],\n// Fetches the latest revisions, whether or not they were unpublished!\n// Disable for production to ensure you render only published changes.\npreview:true,\n})\n```\n\n----------------------------------------\n\nTITLE: Adjust rendering with wrapper - React\nDESCRIPTION: This example demonstrates how to use the 'render' function to wrap a Plasmic component in another component ('Wrapper').  It passes className, value, and onChange properties.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/react-api/.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n{\nrender:(props,Component)=&gt;(\n&lt;Wrapper&gt;\n&lt;ComponentclassName={props.className}value={value}onChange={handleChange}/&gt;\n&lt;/Wrapper&gt;\n);\n}\n```\n\n----------------------------------------\n\nTITLE: useSafeRouter Hook\nDESCRIPTION: This code defines a custom hook, `useSafeRouter`, that attempts to use the Next.js `useRouter` hook. If an error occurs (e.g., the router is not mounted during pre-rendering), it returns `undefined`. This allows components to gracefully handle cases where the router is not available.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/data-code-components/.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexportfunctionuseSafeRouter(){\ntry{\nreturnuseRouter();\n}catch{\nreturnundefined;\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering GitHub Action with repository_dispatch\nDESCRIPTION: This curl command is used to manually trigger a GitHub Action using the `repository_dispatch` event. It sends a POST request to the GitHub API, specifying the repository owner, repository name, and a payload containing the event type (`plasmic`) and client payload data.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/github-action/.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl\\\n-i -uUSER:TOKEN\\\n-X POST\\\n-H\"Accept: application/vnd.github.v3+json\"\\\nhttps://api.github.com/repos/OWNER/REPO/dispatches\\\n-d''{\\\"event_type\\\":\\\"plasmic\\\",\\\"client_payload\\\":{\\\"unit\\\":false,\\\"integration\\\":true}}''\n```\n\n----------------------------------------\n\nTITLE: Registering JavaScript Functions with Plasmic\nDESCRIPTION: This snippet demonstrates how to register JavaScript functions with Plasmic using the `PLASMIC.registerFunction` API. It showcases basic usage, registering functions with parameter and return value documentation, and adding custom TypeScript declarations for complex types. It requires the `PLASMIC` object to be available in the scope. It also requires that the files referenced in the imports exist.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/registering-custom-functions/.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport{parseData}from&#x27;../data-utils&#x27;;\n// Basic usage\nPLASMIC.registerFunction(parseData,{\nname:&#x27;parseData&#x27;\n});\nimport{isEven}from&#x27;some-utility-package&#x27;;\n// Register with param and return value documentation (types, description)\nPLASMIC.registerFunction(isEven,{\nname:&#x27;isEven&#x27;,\nparams:[\n{\nname:&#x27;x&#x27;,\ntype:&#x27;number&#x27;,\ndescription:&#x27;The value to test its evenness&#x27;\n}\n],\nreturnValue:{\ntype:&#x27;boolean&#x27;,\ndescription:&#x27;Whether `x` is an even number&#x27;\n}\n});\nimport{filterData}from&#x27;../data-utils&#x27;;\n// Add custom typescript declaration for complex types\nPLASMIC.registerFunction(filterData,{\nname:&#x27;filterData&#x27;,\ndescription:`Filters the data.\n@param data The data to filter\n@param opts The options for filtering`,\ntypescriptDeclaration:`&lt;T&gt;(\ndata: T[],\nopts?: {\n/\\*\\* Maximum number of elements to return \\*/\nlimit?: number;\n/\\** Options for sorting the data \\*/\nsort?: {\nfield: string;\norder: &quot;asc&quot; | &quot;desc&quot;;\n}\n}\n): T[]`\n});\n```\n\n----------------------------------------\n\nTITLE: ProductTitle Component using useSelector - Typescript/JSX\nDESCRIPTION: This code defines a `ProductTitle` component that uses the `useSelector` hook to retrieve the \"product\" data provided by a parent `<DataProvider>` component. It then renders the product's title. If the product data is not available, it renders a fallback title \"Product Title\".\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/data-provider/.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport{useSelector}from\"@plasmicapp/host\";\nfunctionProductTitle(props:{className?:string}){\nconst{className}=props;\nconstproduct=useSelector(\"product\");\nreturn&lt;divclassName={className}&gt;{product?.title??\"Product Title\"}&lt;/div&gt;;\n```\n\n----------------------------------------\n\nTITLE: Syncing Plasmic Projects with CLI\nDESCRIPTION: This code snippet demonstrates using the `plasmic sync` command to synchronize a Plasmic project and its dependencies.  The output shows the syncing process, including the versions of the components being synced. The command pulls down any imported projects to the working directory.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/versioned-sync/.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ plasmicsync--projects 9pr9hBu15oVRTwBRL9Gnwi\n'Login Page'uses'Design System',whichhas never been synced before. We will alsosync'Design System'@5.0.0.\n'Login Page has never been synced before. Syncing...'\nSyncing component: Button@5.0.0['Design System'e3Q1tGtm8oRtjs3qPa4xvQ/1gHPDFIEcK\\u003e=0.0.0]\nSyncing component: LoginPage@latest['Login Page'9pr9hBu15oVRTwBRL9Gnwi/mUenpOOz61 latest]\nSyncing icon: TwittersvgIcon@latest['Login Page'9pr9hBu15oVRTwBRL9Gnwi/GbOtzqdgr latest]\nSyncing icon: PlusIcon@latest['Login Page'9pr9hBu15oVRTwBRL9Gnwi/qKb6SKUWQu latest]\nFixingimportstatements...\n```\n\n----------------------------------------\n\nTITLE: Previewing Latest Changes During Development (Vue)\nDESCRIPTION: This code snippet shows how to configure the Plasmic loader to preview the latest unpublished changes during development.  This allows developers to see their design changes in Plasmic Studio reflected in their development environment without publishing. Requires `initPlasmicLoader` from the Plasmic Vue API. Note: `preview: true` should only be used for development as it serves less optimized code.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/vue-api/.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexportconstPLASMIC=initPlasmicLoader({\nprojects:[\n{\nid:'...', \ntoken:'...'\n}\n],\npreview:true\n});\n```\n\n----------------------------------------\n\nTITLE: No-op render function override in Plasmic Component (React)\nDESCRIPTION: This example showcases a 'no-op' render function override in Plasmic, where the render function simply returns the component with its original props, resulting in no visible change. It takes in the props and the component type, and returns the component with the props. This requires Plasmic and React.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/overrides/.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\nrender:(props,Component)=>&lt;Component{...props}/&gt;;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Local Development Server\nDESCRIPTION: This snippet demonstrates how to start a local development server using npm or yarn. It's crucial to first navigate into the project directory using `cd` before running these commands. This allows for tight iteration loops during development.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/quickstart-gui/.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpmrun dev\n# or\nyarndev\n```\n\n----------------------------------------\n\nTITLE: Filter Query using $in Operator\nDESCRIPTION: This JSON snippet shows an example filter query using the `$in` conditional operator to check if a field's value is in a specified array. This example includes only categories that are 'news' or 'updates'.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/plasmic-cms-api-reference/.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n\"where\":{\n\"category\":{\"$in\":[\"news\",\"updates\"]}\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Component with Helper Functions in JavaScript\nDESCRIPTION: This code snippet shows how to register a component in Plasmic with component helper functions. It imports the `TextInputHelpers` object and passes it to the `registerComponent` function. The `componentHelpers` property specifies the imported instance, import path, and import name of the helper functions, enabling Plasmic Studio and generated code to find and use the helper functions.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/code-components-ref/.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TextInputHelpers } from \"~/components/text-input\";\nregisterComponent(TextInput, {\n  ...\n  componentHelpers: {\n    // imported instance, containing the helper functions\n    helpers: TextInputHelpers,\n    // import path\n    importPath: \"~/components/text-input\",\n    importName: \"TextInputHelpers\"\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering a Single Plasmic Component\nDESCRIPTION: This Vue component snippet demonstrates how to render a specific Plasmic component within your Vue application.  It uses the `PlasmicComponent` to render the component specified by the `component` prop.  It also utilizes `PlasmicRootProvider` to initialize the Plasmic context.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/vue-quickstart/.md#_snippet_4\n\nLANGUAGE: Vue\nCODE:\n```\n&lt;template&gt;\n&lt;div id=&quot;app&quot;&gt;\n&lt;PlasmicRootProvider:loader=&quot;this.loader&quot;&gt;\n&lt;PlasmicComponent component=&quot;COMPONENTNAME&quot;/&gt;\n&lt;/PlasmicRootProvider&gt;\n&lt;/div&gt;\n&lt;/template&gt;\n&lt;script&gt;\nimport{PlasmicRootProvider,PlasmicComponent}from&#x27;@plasmicapp/loader-vue&#x27;;\nimport{PLASMIC}from&#x27;./plasmic-init&#x27;;\nexportdefault{\nname:&#x27;MyComponent&#x27;,\ncomponents:{\nPlasmicRootProvider,\nPlasmicComponent\n},\ncomputed:{\nloader(){\nreturnPLASMIC;\n}\n}\n};\n&lt;/script&gt;\n```\n\n----------------------------------------\n\nTITLE: State Variable Usage in Code Editor\nDESCRIPTION: Demonstrates how to reference a state variable within a component and when inserting the component into another page, showing how to access the variable using $state and element names.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/interactions-reference/.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/*\nSuppose you have component named “My Component” with a state variable named “My Variable”.\nWithin “My Component”, the state variable is`$state.myVariable`.\nWhen you insert an instance of “My Component” in another component or page, the element name defaults to the component name, so by default, the state variable is`$state.myComponent.myVariable`.\nIf you rename the “My Component” element to “my element”, the state variable is`$state.myElement.myVariable`.\n*/\n```\n\n----------------------------------------\n\nTITLE: Filter Query with Logical and Conditional Operators\nDESCRIPTION: This JSON snippet shows a more complex filter query using both logical and conditional operators. This provides an example for how to filter results based on conditions applied to fields in the data.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/plasmic-cms-api-reference/.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\nwhere: {\n&lt;&lt;logical_operator&gt;&gt;: {\n&lt;field&gt;: {\n&lt;&lt;conditional_operator&gt;&gt;: &lt;&lt;value&gt;&gt;\n}\n}\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Return null to not render an element - React\nDESCRIPTION: This code shows how to prevent an element from rendering in a Plasmic component by returning 'null' from the 'render' function.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/react-api/.md#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n{\nrender:(props,Component)=&gt;null;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding plasmic.json to Git\nDESCRIPTION: This command adds the `plasmic.json` file to the Git repository, specifying which Plasmic projects to sync and their API tokens. This step is crucial for the CI/CD pipeline to access and sync the Plasmic designs. It's important to avoid adding other Plasmic-related files like `plasmic.lock` or generated source files.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/build-time-codegen/.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngitaddplasmic.json\n```\n\n----------------------------------------\n\nTITLE: Plasmic Project Component Data Structure\nDESCRIPTION: This JSON snippet illustrates the structure of component data available via the `projectData` object in Plasmic Studio. It provides the component's name. This information can be used by editor actions to access project-level component metadata.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/editor-actions/.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n\"name\":\"string\",\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Vite for SSR\nDESCRIPTION: This configuration is necessary when using Remix with Vite to ensure Plasmic modules function correctly during server-side rendering (SSR). It prevents specified Plasmic modules from being externalized during the build process.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/remix-quickstart/.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport{defineConfig}from'vite';\nexportdefaultdefineConfig({\nplugins:[\n// ...\n],\nssr:{\nnoExternal:[\n'@plasmicapp/data-sources-context',\n'@plasmicapp/loader-core',\n'@plasmicapp/loader-fetcher',\n'@plasmicapp/loader-react',\n'@plasmicapp/loader-splits',\n'@plasmicapp/prepass',\n'@plasmicapp/query'\n]\n}\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Routing with React Router\nDESCRIPTION: This code demonstrates how to integrate routing into a React application using `react-router-dom`. It defines routes for the main feed and a new post creation page. The `NewPost` component's `onAdd` function updates the entries state and persists the data to localStorage.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/minitwitter-tutorial/.md#_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, {useState} from 'react';\nimport Feed from './components/Feed';\nimport {createPost} from './model';\nimport {Route, Switch} from 'react-router';\nimport {BrowserRouter} from 'react-router-dom';\nimport NewPost from './components/NewPost';\n\nfunction App() {\nconst [entries, setEntries] = useState([\ncreatePost({content: 'Hello world', createdAt: new Date()}),\ncreatePost({content: 'Another post', createdAt: new Date()})\n]);\n\nreturn (\n<BrowserRouter>\n<Switch>\n<Route path={'/post'}>\n<NewPost onAdd={(entry) => setEntries([entry, ...entries])} />\n</Route>\n<Route path={'/'}>\n<Feed entries={entries} />\n</Route>\n</Switch>\n</BrowserRouter>\n);\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Loading Localized Items with Plasmic CMS API in JavaScript\nDESCRIPTION: This code snippet illustrates how to load a localized version of an item from Plasmic CMS, using the `locale` parameter in the API request. It builds upon the previous example of loading a specific item by slug, adding the `locale` parameter to specify the desired language (e.g., Arabic). The CMS ID, Public Token, model ID, and locale tag are necessary for the request.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/plasmic-cms-api-reference/.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// ...\napiUrl.search=newURLSearchParams({\nq:JSON.stringify({where:{slug:'my-first-blog-post'},limit:1}),\n// Load the `Arabic (Jordan)` localized version of the blog post\nlocale:'ar-JO'\n}).toString();\n// ...\n```\n\n----------------------------------------\n\nTITLE: Rendering a Single Plasmic Page or Component (Vue)\nDESCRIPTION: This code snippet shows how to render a single Plasmic page or component within a Nuxt application. It uses Nuxt's `asyncData()` to fetch the design statically or server-side.  `COMPONENTNAME` refers to the name of the page or component to render, like `Winter22LandingPage` or a route like `/landing`.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/nuxt-quickstart/.md#_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n&lt;template&gt;\n&lt;PlasmicRootProvider:loader=&quot;this.loader&quot;:prefetchedData=&quot;this.plasmicData&quot;&gt;\n&lt;PlasmicComponent component=&quot;COMPONENTNAME&quot;/&gt;\n&lt;/PlasmicRootProvider&gt;\n&lt;/template&gt;\n&lt;script lang=&quot;ts&quot;&gt;\nimportVuefrom&#x27;vue&#x27;\nimport{PlasmicRootProvider,PlasmicComponent}from&#x27;@plasmicapp/loader-vue&#x27;\nimport{PLASMIC}from&#x27;../plasmic-init&#x27;\nexportdefault{\ncomponents:{\nPlasmicRootProvider,\nPlasmicComponent,\n},\ncomputed:{\nloader(){\nreturnPLASMIC\n},\n},\nasyncasyncData(){\nconstplasmicData=awaitPLASMIC.fetchComponentData(`COMPONENTNAME`)\nreturn{\nplasmicData,\n}\n},\n}\n&lt;/script&gt;\n```\n\n----------------------------------------\n\nTITLE: Registering a Component with Plasmic\nDESCRIPTION: Registers the `HelloWorld` component with Plasmic, making it available for use within the Plasmic Studio. The code defines the component's name and its available props.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/hydrogen-quickstart/.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport{HelloWorld}from&#x27;./components/HelloWorld&#x27;;\n// ...\nexportconstPLASMIC=initPlasmicLoader(/\\* ... \\*/);\nPLASMIC.registerComponent(HelloWorld,{\nname:&#x27;HelloWorld&#x27;,\nprops:{\nverbose:&#x27;boolean&#x27;,\nchildren:&#x27;slot&#x27;\n}\n});\n```\n\n----------------------------------------\n\nTITLE: No-op render override - React\nDESCRIPTION: This is a passthrough 'render' function override which returns the component with the original properties. It effectively does nothing.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/react-api/.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n{\nrender:(props,Component)=&gt;&lt;Component{...props}/&gt;;\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting element rendering with a wrapper in Plasmic Component (React)\nDESCRIPTION: This snippet shows how to use the `render` function to wrap a Plasmic component within a custom wrapper component. It adjusts the rendering by modifying the component's className, value and onChange handler within the wrapper. This requires Plasmic and React.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/overrides/.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\nrender:(props,Component)=&gt;(\n&lt;Wrapper&gt;\n&lt;ComponentclassName={props.className}value={value}onChange={handleChange}/&gt;\n&lt;/Wrapper&gt;\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Linking to Top of Page\nDESCRIPTION: Illustrates how to create a link that directs users to the top of the current page. The destination URL is simply a hash (#).\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/pages/.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n#\n```\n\n----------------------------------------\n\nTITLE: Customizing Components with Props and Variants (cURL)\nDESCRIPTION: This cURL command demonstrates how to customize component props and global variants when fetching HTML from the Plasmic REST API. It includes `hydrate`, `embedHydrate`, `componentProps`, and `globalVariants` as URL parameters. The `componentProps` and `globalVariants` are JSON strings. Requires `PROJECTID` and `APITOKEN`.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/rest-quickstart/.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n--header ''x-plasmic-api-project-tokens: PROJECTID:TOKEN'' \\\n'https://codegen.plasmic.app/api/v1/loader/html/preview/PROJECTID/Box' -G -d 'hydrate=1&amp;embedHydrate=1&amp;componentProps={\"PROP\":\"VALUE\"}&amp;globalVariants=[{\"name\": \"NAME\", \"value\": \"VALUE\"}]' &gt; out.json\njq .html -r &lt; out.json &gt; out.html\n```\n\n----------------------------------------\n\nTITLE: Rendering a Plasmic Component with PHP\nDESCRIPTION: This snippet renders a Plasmic page or component using PHP's curl library. It sends a request to the Plasmic API, providing the project ID, API token, and component name. The response, which contains the HTML, is then decoded and echoed to output the rendered component.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/php-quickstart/.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n&lt;?php\n$curl=curl_init();\ncurl_setopt($curl,CURLOPT_URL,\"https://codegen.plasmic.app/api/v1/loader/html/preview/PROJECTID/COMPONENTNAME?hydrate=1&amp;embedHydrate=1\");\n// Provide the project ID and public API token.\ncurl_setopt($curl,CURLOPT_HTTPHEADER,array(\n\"x-plasmic-api-project-tokens: PROJECTID:APITOKEN\"\n));\ncurl_setopt($curl,CURLOPT_RETURNTRANSFER,1);\n$response=curl_exec($curl);\ncurl_close($curl);\n$result=json_decode($response);\necho$result-&gt;html;\n?&gt;\n```\n\n----------------------------------------\n\nTITLE: Linking to External Website\nDESCRIPTION: Shows how to link to an external website by providing the full URL, including the protocol (https://).\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/pages/.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nhttps://www.google.com\n```\n\n----------------------------------------\n\nTITLE: Fetch Data via API Endpoint - React/JSX\nDESCRIPTION: This snippet provides the alternative query function to the context.  It defines the function to execute the data retrieval via the API endpoint.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/data-code-components/.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n&lt;QueryContext.Providervalue={{query:()=&gt;fetch(&#x27;/api/query&#x27;,{...opts})}}&gt;\n```\n\n----------------------------------------\n\nTITLE: Filter Query with Primitive Value\nDESCRIPTION: This JSON snippet shows an example filter query, filtering category to only include 'articles'.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/plasmic-cms-api-reference/.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n\"where\":{\n\"category\":\"articles\"\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Import PlasmicModule into AppModule\nDESCRIPTION: This Typescript snippet shows how to import the `PlasmicModule` into your Angular AppModule.  This is a prerequisite for rendering Plasmic components.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/angular-quickstart/.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport{PlasmicModule}from&#x27;@plasmicapp/loader-angular&#x27;;\n@NgModule({\ndeclarations:[...],\nimports:[PlasmicModule,...],\n...\n})\nexportclassAppModule{};\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies\nDESCRIPTION: This command installs the necessary dependencies for the application, including uuid, moment, react-router-dom, and their corresponding type definitions.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/minitwitter-tutorial/.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarnadduuid moment react-router-dom\nyarnadd-D @types/uuid @types/react-router-dom @types/react-router\n```\n\n----------------------------------------\n\nTITLE: Filter Query with Multiple Levels of Nested Conditions\nDESCRIPTION: This JSON snippet presents a complex filter query with multiple levels of nested conditions using `$and`, `$or`, and `$not` operators. It fetches records where the category is either 'news' or 'blog', and the views are greater than 1000 or the rating is higher than 4, but excludes records where the author is 'John' or the stock is below 5.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/plasmic-cms-api-reference/.md#_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n\"where\": {\n\"$and\": [\n{\n\"$or\": [\n{ \"category\": \"news\" },\n{ \"category\": \"blog\" }\n]\n},\n{\n\"$or\": [\n{ \"views\": { \"$gt\": 1000 } },\n{ \"rating\": { \"$gt\": 4 } }\n]\n},\n{\n\"$not\": {\n\"$or\": [\n{ \"author\": \"John\" },\n{ \"stock\": { \"$lt\": 5 } }\n]\n}\n}\n]\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Plasmic Auth File Manually\nDESCRIPTION: This code snippet provides the structure for the `~/.plasmic.auth` file, which is used for authenticating with Plasmic. It includes fields for the Plasmic Studio host, user email, and access token. This is a fallback method for authentication when the CLI command fails.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/development-troubleshooting/.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n&quot;host&quot;:&quot;https://studio.plasmic.app&quot;,\n&quot;user&quot;:&quot;&quot;EMAIL_HERE&quot;&quot;,\n&quot;token&quot;:&quot;&quot;TOKEN_HERE&quot;&quot;\n}\n```\n\n----------------------------------------\n\nTITLE: Using React Router Link in Plasmic Component\nDESCRIPTION: This code demonstrates how to replace a standard HTML `<a>` tag with a React Router `<Link>` component within a Plasmic component. It uses the `root` render function to override the default element and configures the `Link` with the appropriate `to` prop for routing.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/minitwitter-tutorial/.md#_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport {PlasmicFab, DefaultFabProps} from './plasmic/minitwitter/PlasmicFab';\nimport {Link} from 'react-router-dom';\n\ninterface FabProps extends DefaultFabProps {\nchildren?: never;\n}\n\nfunction Fab(props: FabProps) {\nreturn (\n<PlasmicFab\n{...props}\nroot={{\nas: Link,\nprops: {\nto: '/post'\n}\n}}\n/>\n);\n}\n\nexport default Fab;\n```\n\n----------------------------------------\n\nTITLE: Filter Query using $and Operator\nDESCRIPTION: This JSON snippet shows an example filter query using the `$and` logical operator, ensuring that both conditions are true. This example filters for items with a category of 'news' and views greater than 1000.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/plasmic-cms-api-reference/.md#_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n\"where\":{\n\"$and\":[\n{\"category\":\"news\"},\n{\"views\":{\"$gt\":1000}}\n]\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Plasmic Loader\nDESCRIPTION: This TypeScript snippet initializes the Plasmic loader with the project ID and API token. It creates a global Plasmic instance that can be used to fetch and render Plasmic components. The `preview: true` setting enables fetching the latest revisions.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/angular-quickstart/.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport{initPlasmicLoader}from&quot;@plasmicapp/loader-angular&quot;;\nexportconstPLASMIC=initPlasmicLoader({\nprojects:[\n{\nid:&quot;PROJECTID&quot;,// ID of a project you are using\ntoken:&quot;APITOKEN&quot;// API token for that project\n}\n],\n// Fetches the latest revisions, whether or not they were unpublished!\n// Disable for production to ensure you render only published changes.\npreview:true,\n})\n```\n\n----------------------------------------\n\nTITLE: Example Array Data Type\nDESCRIPTION: Illustrates the syntax for defining array data types as state variables, providing examples of numeric and string arrays.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/interactions-reference/.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n`[1, 2, 3]`\n`[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]`\n```\n\n----------------------------------------\n\nTITLE: Prepending an accessible checkbox using wrapChildren in Plasmic (React)\nDESCRIPTION: This snippet illustrates how to use the `wrapChildren` function to prepend a visually hidden input element (e.g., for accessibility purposes) as the first child of a Plasmic element. This example creates a checkbox. This requires Plasmic and React.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/overrides/.md#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n{\n// insert a visually hidden checkbox input as the first child\nwrapChildren:(children)=&gt;(\n&lt;&gt;\n&lt;inputclassName=&quot;visually-hidden&quot;type=&quot;checkbox&quot;/&gt;\n{children}\n&lt;/&gt;\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching HTML with Component Props and Global Variants using Plasmic Render API in Javascript\nDESCRIPTION: This Javascript code snippet shows how to fetch generated HTML from the Plasmic Render API, customizing the component with props and global variants.  It constructs a query string with `hydrate`, `embedHydrate`, `componentProps`, and `globalVariants`.  It sets the `x-plasmic-api-project-tokens` header and appends the fetched HTML to the document body, handling hydration as well.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/render-api.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconstquery=newURLSearchParams([\n  ['hydrate','1'],\n  ['embedHydrate','1'],\n  [\n    'componentProps',\n    JSON.stringify({\n      // Your component props\n    })\n  ],\n  [\n    'globalVariants',\n    JSON.stringify([\n      // Your global variants\n      {\n        name:'Theme',\n        value:'Dark'\n      }\n    ])\n  ]\n]);\nconstresponse=awaitfetch(\n  `https://codegen.plasmic.app/api/v1/loader/html/preview/PROJECTID/COMPONENTNAME?${query}`,\n  {\n    headers:{\n      // Your project ID and public API token\n      'x-plasmic-api-project-tokens':'PROJECTID:APITOKEN'\n      // You can find your PROJECT token by visiting\n      // https://studio.plasmic.app/projects/[PROJECTID]/docs/loader#showToken=true\n    }\n  }\n);\nconstresult=awaitresponse.json();\ndocument.body.innerHTML=result.html;\n// If you want hydration to happen, load and call the hydrater\nif(window.__plasmicHydrater){\n  window.__plasmicHydrater.hydrateAll();\n}else{\n  varscript=document.createElement('script');\n  script.src='https://codegen.plasmic.app/static/js/loader-hydrate.js';\n  document.body.appendChild(script);\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning GitHub Repository\nDESCRIPTION: This snippet shows how to clone a GitHub repository, navigate into the cloned directory, and install the necessary dependencies using npm or yarn. The user needs to replace &lt;github-username&gt; and &lt;repo-name&gt; with their actual GitHub username and repository name.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/quickstart-gui/.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngitclone git@github.com:&lt;github-username&gt;/&lt;repo-name&gt;.git\ncd&lt;repo-name&gt;\npminstall\n# or\nyarn\n```\n\n----------------------------------------\n\nTITLE: Sync Plasmic project\nDESCRIPTION: This command syncs a Plasmic project to the local repository as React components. It uses the project ID to identify the project and generates the corresponding code.  The PROJECT_ID should be replaced with the actual ID of the plasmic project.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/codegen-guide/.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nplasmicsync-p PROJECT\\_ID\n```\n\n----------------------------------------\n\nTITLE: Filter Query using $or Operator\nDESCRIPTION: This JSON snippet shows an example filter query using the `$or` logical operator, specifying that at least one of the conditions must be true. This example filters for items with a category of either 'news' or 'updates'.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/plasmic-cms-api-reference/.md#_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n\"where\":{\n\"$or\":[\n{\"category\":\"news\"},\n{\"category\":\"updates\"}\n]\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Feed Component Skeleton\nDESCRIPTION: This code represents the initial structure of the `Feed` component generated by Plasmic. It imports the necessary modules from Plasmic and React, and renders the `PlasmicFeed` component.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/minitwitter-tutorial/.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// This is a skeleton starter React component generated by Plasmic.\n// This file is owned by you, feel free to edit as you see fit.\nimport\\*asReactfrom'react';\nimport{PlasmicFeed,DefaultFeedProps}from'./plasmic/minitwitter/PlasmicFeed';\n// Your component props start with props for variants and slots you defined\n// in Plasmic, but you can add more here, like event handlers that you can\n// attach to named nodes in your component.\n//\n// If you don't want to expose certain variants or slots as a prop, you can use\n// Omit to hide them:\n//\n// interface FeedProps extends Omit<DefaultFeedProps, \"hideProps1\"|\"hideProp2\"> {\n// // etc.\n// }\n//\n// You can also stop extending from DefaultFeedProps altogether and have\n// total control over the props for your component.\ninterfaceFeedPropsextendsDefaultFeedProps{\nchildren?:never;\n}\nfunctionFeed(props:FeedProps){\n// Use PlasmicFeed to render this component as it was\n// designed in Plasmic, by activating the appropriate variants,\n// attaching the appropriate event handlers, etc. You\n// can also install whatever React hooks you need here to manage state or\n// fetch data.\n//\n// Props you can pass into PlasmicFeed are:\n// 1. Variants you want to activate,\n// 2. Contents for slots you want to fill,\n// 3. Overrides for any named node in the component to attach behavior and data,\n// 4. Props to set on the root node.\n//\n// By default, we are just piping all FeedProps here, but feel free\n// to do whatever works for you.\nreturn<PlasmicFeed{...props}/>;\n}\nexportdefaultFeed;\n```\n\n----------------------------------------\n\nTITLE: Creating a Plasmic App with create-plasmic-app\nDESCRIPTION: This command uses the create-plasmic-app CLI tool to scaffold a new Plasmic project.  It installs the necessary dependencies and sets up the project structure. The user is then instructed to navigate to the newly created directory.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/quickstart-cli/.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-plasmic-app@latest\n# or\nyarncreate plasmic-app\ncd&lt;your-new-app-name&gt;\n```\n\n----------------------------------------\n\nTITLE: Filter Query using $not Operator\nDESCRIPTION: This JSON snippet shows an example filter query using the `$not` logical operator, negating the condition. This example excludes items with a category of 'news'.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/plasmic-cms-api-reference/.md#_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n\"where\":{\n\"$not\":{\"category\":\"news\"}\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Plasmic Lock File Structure\nDESCRIPTION: This code snippet presents the structure of a `plasmic.lock` file, which stores the versions of projects and their dependencies that are currently on disk. It demonstrates how Plasmic tracks project versions and their dependencies to ensure consistency across sync operations. Editing this file manually is discouraged.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/versioned-sync/.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"projects\":[\n    {\n      \"projectId\":\"e3Q1tGtm8oRtjs3qPa4xvQ\",\n      \"version\":\"5.0.0\",\n      \"dependencies\":{}\n    },\n    {\n      \"projectId\":\"9pr9hBu15oVRTwBRL9Gnwi\",\n      \"version\":\"latest\",\n      \"dependencies\":{\n        \"e3Q1tGtm8oRtjs3qPa4xvQ\":\"5.0.0\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Plasmic Loader\nDESCRIPTION: Initializes the Plasmic loader with the project ID and API token, which are essential for connecting the Remix application to the Plasmic project.  It configures the loader to fetch the latest revisions of the design.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/remix-quickstart/.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport{initPlasmicLoader}from&quot;@plasmicapp/loader-react&quot;;\nexportconstPLASMIC=initPlasmicLoader({\nprojects:[\n{\nid:&quot;PROJECTID&quot;,// ID of a project you are using\ntoken:&quot;APITOKEN&quot;// API token for that project\n}\n],\n// Fetches the latest revisions, whether or not they were unpublished!\n// Disable for production to ensure you render only published changes.\npreview:true,\n})\n```\n\n----------------------------------------\n\nTITLE: Delete Plasmic CMS Item JavaScript\nDESCRIPTION: This snippet demonstrates how to delete an existing item in Plasmic CMS using the API. It requires the CMS ID, secret token, and the row ID of the item to delete. A DELETE request is sent to the specific Plasmic API endpoint for the row.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/plasmic-cms-api-reference/.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Find your CMS ID and Secret Token from the settings page.\nconstCMS_ID='';\n// WARNING: Anyone with your secret token can edit the content in your CMS.\n// Only use your secret token in secure server environments, not in public websites.\nconstCMS_SECRET_TOKEN='';\nconstrowId='';\n// Delete entry\nconstresponse=awaitfetch(`https://data.plasmic.app/api/v1/cms/rows/${rowId}`,{\nmethod:'DELETE',\nheaders:{\n// Your CMS ID and CMS Secret API token\n'x-plasmic-api-cms-tokens':`${CMS_ID}:${CMS_SECRET_TOKEN}`\n}\n});\n```\n\n----------------------------------------\n\nTITLE: Plasmic Fresh Fetch Logs\nDESCRIPTION: This snippet showcases the informational logs that are displayed during each fresh fetch from Plasmic. These logs provide information about the fetching process and the designs being fetched.  These can be suppressed with the env variable `PLASMIC_QUIET=1`.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/vue-api.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nPlasmic: doing a fresh fetch...\nPlasmic: fetched designs for ...\nPlasmic: doing a fresh fetch...\nPlasmic: fetched designs for ...\n```\n\n----------------------------------------\n\nTITLE: Installing Plasmic Loader React package\nDESCRIPTION: Installs the `@plasmicapp/loader-react` package using npm or yarn. This package is essential for fetching and rendering Plasmic content within a React application.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/hydrogen-quickstart/.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpminstall@plasmicapp/loader-react\n# or yarn add @plasmicapp/loader-react\n```\n\n----------------------------------------\n\nTITLE: Loading Draft Items with Plasmic CMS API in JavaScript\nDESCRIPTION: This snippet explains how to load draft versions of items from Plasmic CMS using the `draft` parameter in the API request.  It extends the previous example by incorporating the `draft` parameter to retrieve the unpublished or draft version of an item, converting the boolean value to a number (1 for true). The CMS ID, Public Token, model ID and the secret token are needed to make the request.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/plasmic-cms-api-reference/.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// ...\nconstuseDraftVersion=true;\napiUrl.search=newURLSearchParams({\nq:JSON.stringify({where:{slug:'my-first-blog-post'},limit:1}),\n// Load the Draft version of the blog post\ndraft:Number(useDraftVersion)// ?draft=1\n}).toString();\n// ...\n```\n\n----------------------------------------\n\nTITLE: Plasmic Project Page Data Structure\nDESCRIPTION: This JSON snippet shows the structure of page data available via the `projectData` object in Plasmic Studio. It includes the page's name and path. Editor actions can use this data to access project-level page metadata.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/editor-actions/.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n\"name\":\"string\",\n\"pageMeta\":{\n\"path\":\"string\",\n},\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Query Data in Plasmic Studio\nDESCRIPTION: This code snippet shows how to refresh data fetched using `@plasmicapp/query` within the Plasmic Studio editor.  Calling `refreshQueryData()` updates the data for all artboards in the editor, reflecting changes made by editor actions. It utilizes the `studioOps` object, provided to editor actions.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/editor-actions/.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nrefreshQueryData();\n```\n\n----------------------------------------\n\nTITLE: Suppressing Informational Logs (Vue)\nDESCRIPTION: This describes setting the environment variable PLASMIC_QUIET=1 to suppress informational logs from Plasmic during fresh fetches. This helps to reduce console clutter during development.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/vue-api/.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nPLASMIC\\_QUIET=1\n```\n\n----------------------------------------\n\nTITLE: Installing Plasmic Loader for Next.js\nDESCRIPTION: This command installs the `@plasmicapp/loader-nextjs` package, which is required to integrate Plasmic with a Next.js project. This package handles data fetching and rendering of Plasmic designs within the Next.js application.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/nextjs-quickstart/.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpminstall@plasmicapp/loader-nextjs\n# or yarn add @plasmicapp/loader-nextjs\n```\n\n----------------------------------------\n\nTITLE: Filter Query using $le Operator\nDESCRIPTION: This JSON snippet shows an example filter query using the `$le` (less than or equal to) conditional operator. This example includes only ratings less than or equal to 4.5.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/plasmic-cms-api-reference/.md#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n\"where\":{\n\"rating\":{\"$le\":4.5}\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Publish Plasmic CMS Item JavaScript\nDESCRIPTION: This snippet demonstrates how to publish an existing item in Plasmic CMS using the API. It requires the CMS ID, secret token, and the row ID of the item to publish. A POST request is sent to the specific Plasmic API endpoint for publishing a row.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/plasmic-cms-api-reference/.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Find your CMS ID and Secret Token from the settings page.\nconstCMS_ID='';\n// WARNING: Anyone with your secret token can edit the content in your CMS.\n// Only use your secret token in secure server environments, not in public websites.\nconstCMS_SECRET_TOKEN='';\nconstrowId='';\n// Publish entry\nconstresponse=awaitfetch(`https://data.plasmic.app/api/v1/cms/rows/${rowId}/publish`,{\nmethod:'POST',\nheaders:{\n// Your CMS ID and CMS Secret API token\n'x-plasmic-api-cms-tokens':`${CMS_ID}:${CMS_SECRET_TOKEN}`\n}\n});\n```\n\n----------------------------------------\n\nTITLE: Example Response from fetchComponentData (Vue)\nDESCRIPTION: This code shows the structure of the object returned by `PlasmicComponentLoader.fetchComponentData()`. It contains metadata about the entrypoint components, remote font URLs, and project bundles.  Understanding the structure helps in processing and using the fetched data for rendering Plasmic components.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/vue-api/.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\nentryCompMetas:[\n// There's one object here for each entrypoint you\n// specified in your call to fetchComponentData()\n{\nid:\"...\",// unique identifier\nname:\"ComponentName\",// normalized name of component\ndisplayName:\"Component Name\",// display name of component\nisPage:true,// true if it corresponds to a page\npageMetadata:{\n// This object exists if isPage is true\npath:\"/page\",// path for this page\n// The page metadata below can be used to embed into your\n// <head/> tag\ntitle:\"My Page\",// title of the page if set\ndescription:\"This is me!\",// description of the page if set\nopenGraphImageUrl:\"...\",// url of open graph image\n},\n// Studio users can attach arbitrary key-value metadata to any page/component.\nmetadata:{\nisStagingOnly:\"true\",\nkeywords:\"seo, search, engine, optimization, rank, pagerank\",\ncustomTargeting:\"audience=women, repeatbuyer=true\",\n// ...\n}\n}\n],\nremoteFontUrls:[\n// Remote URLS that can be used to load fonts that you need\n// in your projects. By default, `PlasmicComponent` will\n// already include the fonts you need, but you can use this\n// information to try to pre-load them in your site if\n// you'd like.\n\"https://fonts.google.com/...\"\n],\nbundle:{\n// There is one entry here per project, including projects that are imported dependencies.\nprojects:[\n{\nid:\"Q62yQ3x2m25QvuUT8iBcZm\",\n// true if this was a dependency, false if it was an explicitly requested project\nindirect:false,\nname:\"My Project\",\nteamId:\"yQ3x2m25QvuUT8iBcZmQ62\",\n// Maybe a specific version number, or `latest` if in preview mode\nversion:\"latest\"\n}\n]\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Font Optimization\nDESCRIPTION: This code snippet shows how to use Next.js's font optimization with Google Fonts.  It imports the Inter font from @next/font/google and applies it to the main component.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/page-performance/.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport{Inter}from&#x27;@next/font/google&#x27;;\n// If loading a variable font, you don&#x27;t need to specify the font weight\nconstinter=Inter({subsets:[&#x27;latin&#x27;]});\nexportdefaultfunctionMyApp({Component,pageProps}){\nreturn(\n&lt;mainclassName={inter.className}&gt;\n&lt;Component{...pageProps}/&gt;\n&lt;/main&gt;\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Linking to Email Address\nDESCRIPTION: Demonstrates how to create a link that opens the user's default email client and starts drafting an email to a specified address. The destination URL uses the `mailto:` scheme.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/pages/.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nmailto:name@domain.com\n```\n\nLANGUAGE: text\nCODE:\n```\nmailto:yang@plasmic.app\n```\n\n----------------------------------------\n\nTITLE: Filter Query using $ge Operator\nDESCRIPTION: This JSON snippet shows an example filter query using the `$ge` (greater than or equal to) conditional operator. This example includes only prices greater than or equal to 20.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/plasmic-cms-api-reference/.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n\"where\":{\n\"price\":{\"$ge\":20}\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LocalStorage for Persistent Data Storage\nDESCRIPTION: This code implements localStorage to persist post data across page reloads. It includes functions to serialize (`dumpPosts`) and deserialize (`loadPosts`) the post entries. The `App` component initializes the state from localStorage and updates it whenever a new post is added.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/minitwitter-tutorial/.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, {useState} from 'react';\nimport Feed from './components/Feed';\nimport {createPost, PostEntry} from './model';\nimport {Route, Switch} from 'react-router';\nimport {BrowserRouter} from 'react-router-dom';\nimport NewPost from './components/NewPost';\n\nexport function dumpPosts(entries: PostEntry[]) {\nreturn JSON.stringify(entries);\n}\n\nexport function loadPosts(json: string): PostEntry[] {\nconst parsed: any[] = JSON.parse(json);\nfor (const item of parsed) {\nitem.createdAt = new Date(item.createdAt);\n}\nreturn parsed;\n}\n\nfunction App() {\nconst [entries, setEntries] = useState(() => {\nlet loaded = localStorage['entries'];\nif (loaded) {\nreturn loadPosts(loaded);\n}\nreturn [\ncreatePost({content: 'Hello world', createdAt: new Date()}),\ncreatePost({content: 'Another post', createdAt: new Date()})\n];\n});\n\nreturn (\n<BrowserRouter>\n<Switch>\n<Route path={'/post'}>\n<NewPost\nonAdd={(entry) => {\nsetEntries([entry, ...entries]);\nlocalStorage['entries'] = dumpPosts([entry, ...entries]);\n}}\n/>\n</Route>\n<Route path={'/'}>\n<Feed entries={entries} />\n</Route>\n</Switch>\n</BrowserRouter>\n);\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating a Plasmic Host Page\nDESCRIPTION: Creates a route at `/plasmic-host` that renders the `PlasmicClientCanvasHost` component. This route is used by Plasmic Studio to communicate with the application and enable visual editing of custom components.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/hydrogen-quickstart/.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport{PlasmicClientCanvasHost}from&#x27;../lib/plasmic-helpers.client&#x27;;\nimport{PLASMIC}from&#x27;../plasmic-init&#x27;;\nexportdefaultfunctionPlasmicHost(){\nreturnPLASMIC&amp;&amp;&lt;PlasmicClientCanvasHost/&gt;;\n}\n```\n\n----------------------------------------\n\nTITLE: Override element type - React\nDESCRIPTION: This code shows how to override the React element type of a Plasmic component using the 'as' property. It renders the component as an anchor tag.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/react-api/.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n{\nas:&quot;a&quot;,\nprops:{\nhref:...\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Wrap element with context provider - React\nDESCRIPTION: This shows how to use the 'wrap' function to wrap a Plasmic component element with a React Context Provider.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/react-api/.md#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n{\nwrap:node=&gt;&lt;Context.Providervalue={…}&gt;{node}&lt;/Context.Provider&gt;\n}\n```\n\n----------------------------------------\n\nTITLE: Data Model Definition\nDESCRIPTION: This code defines the data model for a post entry, including its ID, creation date, and content. It also includes a function to create a new post entry with a unique ID using the uuid library.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/minitwitter-tutorial/.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport{v4}from'uuid';\nexportinterfacePostEntry{\nid:string;\ncreatedAt:Date;\ncontent:string;\n}\nexportfunctioncreatePost(props:Omit<PostEntry,'id'>):PostEntry{\nreturn{\nid:v4(),\n...props\n};\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Filter Query Syntax\nDESCRIPTION: This JSON snippet shows the basic syntax for a filter query used to filter results based on specific conditions.  The `where` property is used to define filtering rules.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/plasmic-cms-api-reference/.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\nwhere: {\n&lt;field&gt;: &lt;value&gt;\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching HTML with cURL using Plasmic REST API\nDESCRIPTION: This cURL command fetches HTML from the Plasmic REST API. It requires the `PROJECTID` and `APITOKEN`.  It pipes the output to `out.json`, and extracts the raw HTML using `jq` and saves it to `out.html`. Assumes `jq` is installed.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/rest-quickstart/.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl\\\n--header'x-plasmic-api-project-tokens: PROJECTID:APITOKEN'\\\n'https://codegen.plasmic.app/api/v1/loader/html/preview/PROJECTID/COMPONENTNAME?hydrate=1&amp;embedHydrate=1'&gt;out.json\n# If you have `jq` installed, extract the raw HTML:\njq .html -r&lt;out.json&gt;out.html\n```\n\n----------------------------------------\n\nTITLE: Sync Plasmic project one-time\nDESCRIPTION: This command syncs the generated code from Plasmic to the local git repository in a one-time operation. It does not watch for further changes; it only syncs the current state.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/codegen-guide/.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Or, to syncs generated code to your local git repo, one-time:\nplasmicsync\n```\n\n----------------------------------------\n\nTITLE: Installing Plasmic Vue Loader\nDESCRIPTION: This command installs the `@plasmicapp/loader-vue` package, which is required to integrate Plasmic with your Vue project. This package provides the necessary functions and components for loading and rendering Plasmic content in your Vue application. The command can be run using either npm or yarn.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/vue-quickstart/.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpminstall@plasmicapp/loader-vue\n# or yarn add @plasmicapp/loader-vue\n```\n\n----------------------------------------\n\nTITLE: Adding New Posts Component in React\nDESCRIPTION: This code defines a React component `NewPost` that allows users to create and add new posts. It utilizes `PlasmicNewPost` for the UI, manages post content with `useState`, and uses `useHistory` for navigation after posting. The `onAdd` prop handles the creation and addition of new posts.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/minitwitter-tutorial/.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as React from 'react';\nimport {\nPlasmicNewPost,\nDefaultNewPostProps\n} from './plasmic/minitwitter/PlasmicNewPost';\nimport {createPost, PostEntry} from '../model';\nimport {useState} from 'react';\nimport {useHistory} from 'react-router';\n\ninterface NewPostProps extends DefaultNewPostProps {\nchildren?: never;\nonAdd: (entry: PostEntry) => void;\n}\n\nfunction NewPost({onAdd, ...rest}: NewPostProps) {\nconst [content, setContent] = useState('');\nconst history = useHistory();\n\nreturn (\n<PlasmicNewPost\n{...rest}\npostContent={{\nautoFocus: true,\nvalue: content,\nonChange: (e) => {\nsetContent(e.target.value);\n}\n}}\npostButton={{\nonClick: () => {\nonAdd(\ncreatePost({\ncontent,\ncreatedAt: new Date()\n})\n);\nhistory.push('/');\n}\n}}\n/>\n);\n}\n\nexport default NewPost;\n```\n\n----------------------------------------\n\nTITLE: Filter Query using $regex Operator\nDESCRIPTION: This JSON snippet shows an example filter query using the `$regex` operator. This example includes titles that match the regular expression pattern \".*breaking.*\".\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/plasmic-cms-api-reference/.md#_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n\"where\":{\n\"title\":{\"$regex\":\"\".*breaking.*\"\"}\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Install Plasmic CLI with Yarn\nDESCRIPTION: This command installs the Plasmic command-line interface (CLI) globally using Yarn. It is an alternative to using npm for installing the CLI, and serves the same purpose: allowing users to export code from Plasmic projects.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/codegen-guide/.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# or: yarn global add @plasmicapp/cli\n```\n\n----------------------------------------\n\nTITLE: Linking to Phone Number\nDESCRIPTION: Shows how to create a link that initiates a phone call. The destination URL uses the `tel:` scheme and should include the plus character (+) and country code, with all non-digit characters omitted.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/pages/.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\ntel:+11234567890\n```\n\n----------------------------------------\n\nTITLE: Querying DOM for Nested HTML Elements\nDESCRIPTION: This code snippet demonstrates how to use `document.querySelector` in JavaScript to find specific nested HTML elements within a webpage. It provides examples for detecting common illegal nestings like links within links and divs within paragraphs, aiding in the diagnosis of hydration errors.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/development-troubleshooting/.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ndocument.querySelector(&#x27;a a&#x27;);\ndocument.querySelector(&#x27;p div&#x27;);\n```\n\n----------------------------------------\n\nTITLE: Create React App with Typescript\nDESCRIPTION: This command creates a new React application using create-react-app with TypeScript. It sets up the basic project structure and installs necessary dependencies.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/minitwitter-tutorial/.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-react-app minitwitter --typescript\ncdminitwitter/\nyarnstart\n```\n\n----------------------------------------\n\nTITLE: Creating a new Plasmic App\nDESCRIPTION: This command initializes a new Plasmic project using the create-plasmic-app CLI tool. It supports Next.js, Gatsby, and plain React (with Vite). Replace &lt;your-new-app-name&gt; with your desired project name.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/quickstart-cli.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-plasmic-app@latest\n# or\nyarncreate plasmic-app\ncd&lt;your-new-app-name&gt;\n```\n\n----------------------------------------\n\nTITLE: Sync Plasmic Components\nDESCRIPTION: This command syncs the Plasmic components from the Plasmic project into your codebase. The `PROJECT_ID` needs to be replaced with the actual project ID from the Plasmic Studio URL.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/minitwitter-tutorial/.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nplasmicsync-p PROJECT\\_ID\n```\n\n----------------------------------------\n\nTITLE: Plasmic JSON Font Options\nDESCRIPTION: This JSON snippet shows how to configure font options in the `plasmic.json` file to prevent default font loading.  Setting `scheme` to `none` disables Plasmic's built-in font loading mechanism.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/page-performance/.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n&quot;fontOpts&quot;:{\n&quot;scheme&quot;:&quot;none&quot;\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Canonical URL Example\nDESCRIPTION: Illustrates the correct format for a canonical URL, which should be an absolute URL, including the protocol (https) and domain.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/pages/.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://www.plasmic.app/pricing\n```\n\n----------------------------------------\n\nTITLE: Render Feed Component\nDESCRIPTION: This code snippet imports the `Feed` component and renders it within the `App` component. This displays the static design of the feed page in the React application.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/minitwitter-tutorial/.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimportReactfrom'react';\nimportFeedfrom'./components/Feed';\nfunctionApp(){\nreturn<Feed/>;\n}\nexportdefaultApp;\n```\n\n----------------------------------------\n\nTITLE: Next.js Large Page Data Warning\nDESCRIPTION: This code snippet shows the warning message related to large page data in Next.js. The warning appears when the size of data passed as page props returned from getStaticProps exceeds the threshold.  This warning is informational and can be configured.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/page-performance/.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nOne of your pages includes a large amount of page data(&gt;=128kB).\n```\n\n----------------------------------------\n\nTITLE: Simplified Feed Component\nDESCRIPTION: This is a simplified version of the Feed component, with the comments removed.  It imports the necessary React and Plasmic components and extends DefaultFeedProps.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/minitwitter-tutorial/.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport\\*asReactfrom'react';\nimport{PlasmicFeed,DefaultFeedProps}from'./plasmic/minitwitter/PlasmicFeed';\ninterfaceFeedPropsextendsDefaultFeedProps{\nchildren?:never;\n}\nfunctionFeed(props:FeedProps){\nreturn<PlasmicFeed{...props}/>;\n}\nexportdefaultFeed;\n```\n\n----------------------------------------\n\nTITLE: CSS Font Face Declaration\nDESCRIPTION: This CSS snippet demonstrates a font-face declaration, defining the font family, style, weight, and source URL. It also specifies the unicode-range.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/page-performance/.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/\\* cyrillic-ext \\*/\n@font-face{\nfont-family:&#x27;Roboto&#x27;;\nfont-style:normal;\nfont-weight:400;\nfont-display:swap;\nsrc:url(https://fonts.gstatic.com/s/roboto/v30/KFOmCnqEu92Fr1Mu72xKKTU1Kvnz.woff2)format(&#x27;woff2&#x27;);\nunicode-range:U+0460-052F,U+1C80-1C88,U+20B4,U+2DE0-2DFF,U+A640-A69F,U+FE2E-FE2F;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Plasmic Loader for Vue\nDESCRIPTION: This command installs the Plasmic loader library for Vue using either npm or yarn. This library is essential for integrating Plasmic content into a Vue.js application.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/nuxt-quickstart/.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpminstall@plasmicapp/loader-vue\n# or yarn add @plasmicapp/loader-vue\n```\n\n----------------------------------------\n\nTITLE: Register Component with Metadata\nDESCRIPTION: Registers a React component with Plasmic, providing metadata for Studio integration. The `component` parameter is the React component, and `meta` is an object containing metadata like name, props, and actions. The function returns void.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/code-components-ref/.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPLASMIC.registerComponent(\ncomponent:React.ComponentType&lt;any&gt;,\nmeta:ComponentMeta,\n):void\n```\n\n----------------------------------------\n\nTITLE: Clear Gatsby Cache\nDESCRIPTION: This command clears the Gatsby cache. This is commonly needed when designs are not updating in the application codebase when using PlasmicLoader with Gatsby. Clearing the cache forces Gatsby to refetch data, including Plasmic content.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/faq/.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngatsby clean\n```\n\n----------------------------------------\n\nTITLE: Google Fonts CSS Example\nDESCRIPTION: This CSS snippet shows how Google Fonts are loaded, potentially causing a waterfall of fetches. It includes preconnect links and font-face declarations.\nSOURCE: https://github.com/gijs-epping/plasmic-docs/blob/main/learn/page-performance/.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n&lt;linkrel=&quot;preconnect&quot;href=&quot;https://fonts.googleapis.com&quot;/&gt;\n&lt;linkrel=&quot;preconnect&quot;href=&quot;https://fonts.gstatic.com&quot;crossorigin/&gt;\n&lt;linkrel=&quot;preconnect&quot;href=&quot;https://fonts.googleapis.com&quot;/&gt;&lt;link\nrel=&quot;preconnect&quot;\nhref=&quot;https://fonts.gstatic.com&quot;\ncrossorigin\n/&gt;&lt;linkhref=&quot;https://fonts.googleapis.com/css2?family=Roboto&amp;display=swap&quot;rel=&quot;stylesheet&quot;/&gt;\n```"
  }
]