[
  {
    "owner": "graphprotocol",
    "repo": "graph-tooling",
    "content": "TITLE: Installing Graph CLI with Package Managers\nDESCRIPTION: Commands for installing the Graph CLI tool using different Node.js package managers (npm, yarn, pnpm). This is the recommended approach for local subgraph development.\nSOURCE: https://github.com/graphprotocol/graph-tooling/blob/main/packages/cli/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# NPM\nnpm install @graphprotocol/graph-cli\n\n# Yarn\nyarn add @graphprotocol/graph-cli\n\n# pnpm\npnpm install @graphprotocol/graph-cli\n```\n\n----------------------------------------\n\nTITLE: Installing and Building The Graph Tooling\nDESCRIPTION: Steps to set up the local development environment for The Graph Tooling. This includes cloning the repository, ensuring the right Node.js version, installing pnpm, and running common development commands.\nSOURCE: https://github.com/graphprotocol/graph-tooling/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n1. Clone the repository\n2. Make sure you have [Node.js](https://nodejs.org/en) `>=20.x` installed\n3. Make sure you have [`pnpm` installed](https://pnpm.io/installation)\n4. Run `pnpm install` to install dependencies\n5. Run `pnpm build` to build the packages\n6. Run `pnpm test` to run the tests\n```\n\n----------------------------------------\n\nTITLE: Graph Mapping Example in TypeScript\nDESCRIPTION: Example of a subgraph mapping that handles a NameRegistered event, demonstrates usage of crypto functions, entity creation, and store API interactions.\nSOURCE: https://github.com/graphprotocol/graph-tooling/blob/main/packages/ts/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { crypto, store } from '@graphprotocol/graph-ts'\n// This is just an example event type generated by `graph-cli`\n// from an Ethereum smart contract ABI\nimport { NameRegistered } from './types/abis/SomeContract'\n// This is an example of an entity type generated from a\n// subgraph's GraphQL schema\nimport { Domain } from './types/schema'\n\nfunction handleNameRegistered(event: NameRegistered) {\n  // Example use of a crypto function\n  let id = crypto.keccak256(name).toHexString()\n\n  // Example use of the generated `Entry` class\n  let domain = new Domain()\n  domain.name = name\n  domain.owner = event.params.owner\n  domain.timeRegistered = event.block.timestamp\n\n  // Example use of the store API\n  store.set('Name', id, entity)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Graph CLI Binary Globally\nDESCRIPTION: Command to install the Graph CLI globally using a binary installation script. This method doesn't require Node.js or other external dependencies.\nSOURCE: https://github.com/graphprotocol/graph-tooling/blob/main/packages/cli/README.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl -LS https://cli.thegraph.com/install.sh | sudo sh\n```\n\n----------------------------------------\n\nTITLE: Installing and Deploying the Substreams-powered Subgraph\nDESCRIPTION: A series of commands to install dependencies, prepare the Substreams module, build the subgraph, and deploy it. This covers the complete workflow from setup to deployment.\nSOURCE: https://github.com/graphprotocol/graph-tooling/blob/main/examples/substreams-powered-subgraph/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install # install graph-cli\nyarn substreams:prepare # build and package the substreams module\nyarn subgraph:build # build the subgraph\nyarn deploy # deploy the subgraph\n```\n\n----------------------------------------\n\nTITLE: Installing graph-ts Dependencies\nDESCRIPTION: Commands for installing the graph-ts library using NPM or Yarn package managers as a development dependency.\nSOURCE: https://github.com/graphprotocol/graph-tooling/blob/main/packages/ts/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --dev @graphprotocol/graph-ts # NPM\nyarn add --dev @graphprotocol/graph-ts    # Yarn\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Graph Test Command Usage in Markdown\nDESCRIPTION: Shows the usage of the new 'graph test' command introduced in version 0.18.0, including available options and their descriptions.\nSOURCE: https://github.com/graphprotocol/graph-tooling/blob/main/NEWS.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\ngraph test [options] <test-command>\n\nOptions:\n\n  -h, --help                    Show usage information\n      --compose-file <file>     Custom Docker Compose file for additional services (optional)\n      --node-image <image>      Custom Graph Node image to test against (default: graphprotocol/graph-node:latest)\n      --standalone-node <cmd>   Use a standalone Graph Node outside Docker Compose (optional)\n      --standalone-node-args    Custom arguments to be passed to the standalone Graph Node (optional)\n      --skip-wait-for-ipfs      Don't wait for IPFS to be up at localhost:5001 (optional)\n      --skip-wait-for-ethereum  Don't wait for Ethereum to be up at localhost:8545 (optional)\n      --skip-wait-for-postgres  Don't wait for Postgres to be up at localhost:5432 (optional)\n      --node-logs               Print the Graph Node logs (optional)\n```\n```\n\n----------------------------------------\n\nTITLE: Release Process for The Graph Tooling\nDESCRIPTION: Steps for handling releases using changesets. Includes the workflow for creating changeset files in PRs, how the version bump works through Github Actions, and the final publishing process.\nSOURCE: https://github.com/graphprotocol/graph-tooling/blob/main/README.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. Author creates the PR with changes and runs `pnpm changeset` to create a changeset file to\n   summarize the changes.\n2. When the PR is merged to `main`, a Github Action will run and create a PR with the version bump\n   and changelog.\n3. We will merge the bot generated PR to `main`.\n4. A Github Action will run and publish the new version to npm.\n```\n\n----------------------------------------\n\nTITLE: Running Graph Publish Command\nDESCRIPTION: Command example showing how to use the new 'graph publish' command to build a subgraph and publish it to the Graph Network.\nSOURCE: https://github.com/graphprotocol/graph-tooling/blob/main/packages/cli/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngraph publish\n```\n\n----------------------------------------\n\nTITLE: Running Graph Autocomplete Configuration Command\nDESCRIPTION: Command to configure autocomplete functionality for Graph CLI. This needs to be run to enable command autocomplete features that were added in version 0.57.0.\nSOURCE: https://github.com/graphprotocol/graph-tooling/blob/main/packages/cli/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngraph autocomplete\n```\n\n----------------------------------------\n\nTITLE: Querying Token Swaps by Account Address in GraphQL\nDESCRIPTION: A GraphQL query that retrieves all token swaps made by a specific sender address. The query returns the input and output token details including amount and denomination for each swap.\nSOURCE: https://github.com/graphprotocol/graph-tooling/blob/main/examples/cosmos-osmosis-token-swaps/README.md#2025-04-18_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery SwapsForAccount($senderAddress: String!) {\n  tokenSwaps(where: {sender: $senderAddress}) {\n    tokenIn {\n      amount\n      denom\n    },\n    tokenOut {\n      amount\n      denom\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Subgraph with Specific IPFS Hash\nDESCRIPTION: Command example showing how to publish a subgraph to the Graph Network using a specific IPFS hash instead of building it first.\nSOURCE: https://github.com/graphprotocol/graph-tooling/blob/main/packages/cli/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngraph publish --ipfs <ipfs-hash>\n```\n\n----------------------------------------\n\nTITLE: Querying Validator Delegations with GraphQL\nDESCRIPTION: GraphQL query to retrieve all delegations made to a specific validator, identified by their validator address. The query returns the validator address, delegator address, and delegation amount details.\nSOURCE: https://github.com/graphprotocol/graph-tooling/blob/main/examples/cosmos-validator-delegations/README.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery ValidatorDelegations($validatorAddress: String!) {\n  delegations(where: {validatorAddress: $validatorAddress}) {\n    validatorAddress,\n    delegatorAddress,\n    amount {\n      amount,\n      denom\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Arweave Blocks Between Two Dates\nDESCRIPTION: GraphQL query to retrieve Arweave blocks created between specified timestamps. The query takes two BigInt parameters for start and end timestamps and returns block IDs, timestamps, and heights.\nSOURCE: https://github.com/graphprotocol/graph-tooling/blob/main/examples/arweave-blocks-transactions/README.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery BlocksBetweenDates($timestamp_start: BigInt!, $timestamp_end: BigInt!) {\n  blocks(where: { timestamp_gt: $timestamp_start, timestamp_lt: $timestamp_end }) {\n    id\n    timestamp\n    height\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Validator Rewards - GraphQL Query\nDESCRIPTION: GraphQL query to retrieve rewards received by a specific validator. Takes a validator address as a parameter and returns the validator address and reward amounts.\nSOURCE: https://github.com/graphprotocol/graph-tooling/blob/main/examples/cosmos-validator-rewards/README.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery ValidatorRewards($validatorAddress: String!) {\n  rewards(where: {validator: $validatorAddress}) {\n    validator,\n    amount\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"validatorAddress\": \"cosmosvaloper1hjct6q7npsspsg3dgvzk3sdf89spmlpfdn6m9d\"\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Subgraph with Custom Webapp URL\nDESCRIPTION: Command example showing how to publish a subgraph using a custom webapp URL for deployment.\nSOURCE: https://github.com/graphprotocol/graph-tooling/blob/main/packages/cli/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngraph publish --webapp-url <webapp-url>\n```\n\n----------------------------------------\n\nTITLE: Preparing Network-Specific Manifest for Cosmos Hub\nDESCRIPTION: Command to generate a network-specific manifest file for the Cosmos Hub network. This preparation step is required before building the subgraph.\nSOURCE: https://github.com/graphprotocol/graph-tooling/blob/main/examples/cosmos-validator-delegations/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ yarn prepare:cosmoshub\n```\n\n----------------------------------------\n\nTITLE: Generating Network-Specific Manifest - Shell Command\nDESCRIPTION: Command to generate the subgraph manifest file specifically for the Cosmos Hub network. The manifest is required before building the subgraph.\nSOURCE: https://github.com/graphprotocol/graph-tooling/blob/main/examples/cosmos-validator-rewards/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ yarn prepare:cosmoshub\n```\n\n----------------------------------------\n\nTITLE: Updating Graph CLI for Arweave Subgraph Development\nDESCRIPTION: Command to update the Graph CLI to version 0.30.2 or above, which is required for building Arweave subgraphs. This ensures compatibility with Arweave-specific features.\nSOURCE: https://github.com/graphprotocol/graph-tooling/blob/main/examples/arweave-blocks-transactions/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm-update -g i @graphprotocol/graph-cli\n```\n\n----------------------------------------\n\nTITLE: Graph-ts Changelog Entry - Version 0.38.0\nDESCRIPTION: Changelog entry documenting the addition of YAML parsing support to mappings.\nSOURCE: https://github.com/graphprotocol/graph-tooling/blob/main/packages/ts/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Minor Changes\n\n- [#1935](https://github.com/graphprotocol/graph-tooling/pull/1935) [`0c36a02`](https://github.com/graphprotocol/graph-tooling/commit/0c36a024e0516bbf883ae62b8312dba3d9945f04) Thanks [@isum](https://github.com/isum)! - feat: add yaml parsing support to mappings\n```\n\n----------------------------------------\n\nTITLE: Adding startblock auto fetch for 'add' command in JavaScript\nDESCRIPTION: This change adds automatic fetching of the start block for the 'add' command. It's part of a minor change in version 0.41.2.\nSOURCE: https://github.com/graphprotocol/graph-tooling/blob/main/packages/cli/CHANGELOG.md#2025-04-18_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n- [#1068](https://github.com/graphprotocol/graph-tooling/pull/1068)\n  [`1e3195d`](https://github.com/graphprotocol/graph-tooling/commit/1e3195d365bd445f8bd6ba3f1c3b66be20510b94)\n  Thanks [@incrypto32](https://github.com/incrypto32)! - Add startblock auto fetch for `add` command\n```\n\n----------------------------------------\n\nTITLE: Query Variables for Token Swap GraphQL Query\nDESCRIPTION: JSON object containing the input variables for the SwapsForAccount GraphQL query, specifying an example Osmosis address to filter token swaps.\nSOURCE: https://github.com/graphprotocol/graph-tooling/blob/main/examples/cosmos-osmosis-token-swaps/README.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"senderAddress\": \"osmo1wd3j7cvcnr3pfey4fx2mz9xml9euu68z6zg0xp\"\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Variables for Validator Delegations\nDESCRIPTION: JSON object containing query variables for the ValidatorDelegations GraphQL query. This example targets the Figment validator by providing its validator address.\nSOURCE: https://github.com/graphprotocol/graph-tooling/blob/main/examples/cosmos-validator-delegations/README.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"validatorAddress\": \"cosmosvaloper1hjct6q7npsspsg3dgvzk3sdf89spmlpfdn6m9d\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding 'mainnet' as network for substreams in JavaScript\nDESCRIPTION: This change adds 'mainnet' as a network option for substreams. It's part of a minor change in version 0.41.2.\nSOURCE: https://github.com/graphprotocol/graph-tooling/blob/main/packages/cli/CHANGELOG.md#2025-04-18_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n- [#1126](https://github.com/graphprotocol/graph-tooling/pull/1126)\n  [`6d20494`](https://github.com/graphprotocol/graph-tooling/commit/6d204944e41079dd2ddd228a3b4f0e1a07124913)\n  Thanks [@azf20](https://github.com/azf20)! - Add `mainnet` as network for substreams\n```\n\n----------------------------------------\n\nTITLE: Updating Optimism networks in JavaScript\nDESCRIPTION: This change removes the optimism-kovan network and adds the optimism-goerli network. It's part of a minor change in version 0.41.2.\nSOURCE: https://github.com/graphprotocol/graph-tooling/blob/main/packages/cli/CHANGELOG.md#2025-04-18_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n- [#1079](https://github.com/graphprotocol/graph-tooling/pull/1079)\n  [`570eb22`](https://github.com/graphprotocol/graph-tooling/commit/570eb225fad705998cca3998879a6a1140a73143)\n  Thanks [@incrypto32](https://github.com/incrypto32)! - Remove optimism-kovan, Add optimism-goerli\n```\n\n----------------------------------------\n\nTITLE: Adding base scan URL in JavaScript\nDESCRIPTION: This change adds a base scan URL to the project. It's part of a minor change in version 0.41.2.\nSOURCE: https://github.com/graphprotocol/graph-tooling/blob/main/packages/cli/CHANGELOG.md#2025-04-18_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- [#1128](https://github.com/graphprotocol/graph-tooling/pull/1128)\n  [`2ebd032`](https://github.com/graphprotocol/graph-tooling/commit/2ebd0326cab00efc9abad7ad4287cee20a8cfea2)\n  Thanks [@incrypto32](https://github.com/incrypto32)! - Add base scan URL\n```\n\n----------------------------------------\n\nTITLE: Prioritizing node flag in JavaScript\nDESCRIPTION: This patch change prioritizes the node flag. If provided, there's no need to look up which product to deploy to. It's part of version 0.41.2.\nSOURCE: https://github.com/graphprotocol/graph-tooling/blob/main/packages/cli/CHANGELOG.md#2025-04-18_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n- [#1127](https://github.com/graphprotocol/graph-tooling/pull/1127)\n  [`b8d2297`](https://github.com/graphprotocol/graph-tooling/commit/b8d2297bea994b852d5a61b557e4eccda283ec75)\n  Thanks [@saihaj](https://github.com/saihaj)! - Prioirtize node flag. If provided we do not need to\n  go lookup what product to deploy to\n```\n\n----------------------------------------\n\nTITLE: Installing and Using Open Package in Graph Tooling\nDESCRIPTION: Added 'open' package as a dependency for the project, likely used to open URLs in the browser for the new publish command functionality.\nSOURCE: https://github.com/graphprotocol/graph-tooling/blob/main/packages/cli/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Added dependency [`open@8.4.2` ↗︎](https://www.npmjs.com/package/open/v/8.4.2) (to `dependencies`)\n```\n\n----------------------------------------\n\nTITLE: Graph-ts Changelog Entry - Version 0.37.0\nDESCRIPTION: Changelog entry noting the update of all dependencies in the package.\nSOURCE: https://github.com/graphprotocol/graph-tooling/blob/main/packages/ts/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Minor Changes\n\n- [#1843](https://github.com/graphprotocol/graph-tooling/pull/1843) [`c09b56b`](https://github.com/graphprotocol/graph-tooling/commit/c09b56b093f23c80aa5d217b2fd56fccac061145) Thanks [@YaroShkvorets](https://github.com/YaroShkvorets)! - Update all dependencies\n```\n\n----------------------------------------\n\nTITLE: Verifying Aggregation Results with Shell Script\nDESCRIPTION: A shell script named 'check-data.sh' is provided to validate the correctness of the aggregations performed by the subgraph.\nSOURCE: https://github.com/graphprotocol/graph-tooling/blob/main/examples/aggregations/README.md#2025-04-18_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n./check-data.sh\n```\n\n----------------------------------------\n\nTITLE: Query Variables for Block Timestamp Range\nDESCRIPTION: JSON object containing the timestamp range variables to be used with the BlocksBetweenDates query. These Unix timestamps define the start and end of the time period for which blocks should be returned.\nSOURCE: https://github.com/graphprotocol/graph-tooling/blob/main/examples/cosmos-block-filtering/README.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"timestamp_start\": 1613653200,\n  \"timestamp_end\": 1613656800\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Blocks Between Timestamps in GraphQL\nDESCRIPTION: GraphQL query that retrieves all blocks appended between two specified timestamps. The query returns the block ID, number, and timestamp for each matching block.\nSOURCE: https://github.com/graphprotocol/graph-tooling/blob/main/examples/cosmos-block-filtering/README.md#2025-04-18_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery BlocksBetweenDates($timestamp_start: BigInt!, $timestamp_end: BigInt!) {\n  blocks(where: {timestamp_gt: $timestamp_start, timestamp_lt: $timestamp_end}) {\n    id,\n    number,\n    timestamp\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing Network-Specific Manifest for Cosmos Hub\nDESCRIPTION: Command to generate a manifest file specifically for the Cosmos Hub network. The subgraph supports multiple Cosmos networks, with the specific network selection made during preparation.\nSOURCE: https://github.com/graphprotocol/graph-tooling/blob/main/examples/cosmos-block-filtering/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ yarn prepare:cosmoshub\n```"
  }
]