[
  {
    "owner": "dbfixtures",
    "repo": "pytest-postgresql",
    "content": "TITLE: Basic PostgreSQL Test Example\nDESCRIPTION: Sample test function demonstrating basic PostgreSQL operations using the fixture.\nSOURCE: https://github.com/dbfixtures/pytest-postgresql/blob/main/README.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef test_example_postgres(postgresql):\n    \"\"\"Check main postgresql fixture.\"\"\"\n    cur = postgresql.cursor()\n    cur.execute(\"CREATE TABLE test (id serial PRIMARY KEY, num integer, data varchar);\")\n    postgresql.commit()\n    cur.close()\n```\n\n----------------------------------------\n\nTITLE: Database Janitor Implementation\nDESCRIPTION: Shows how to use DatabaseJanitor to manage database state in pytest fixtures, including initialization and cleanup.\nSOURCE: https://github.com/dbfixtures/pytest-postgresql/blob/main/README.rst#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom pytest_postgresql.janitor import DatabaseJanitor\n\n@pytest.fixture\ndef database(postgresql_proc):\n    # variable definition\n\n    janitor = DatabaseJanitor(\n        user=postgresql_proc.user,\n        host=postgresql_proc.host,\n        proc=postgresql_proc.port,\n        testdb=\"my_test_database\",\n        version=postgresql_proc.version,\n        password=\"secret_password\",\n    )\n    janitor.init()\n    yield psycopg2.connect(\n        dbname=\"my_test_database\",\n        user=postgresql_proc.user,\n        password=\"secret_password\",\n        host=postgresql_proc.host,\n        port=postgresql_proc.port,\n    )\n    janitor.drop()\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy Session Fixture Example\nDESCRIPTION: Comprehensive example showing how to create a database session fixture using SQLAlchemy with the PostgreSQL fixture.\nSOURCE: https://github.com/dbfixtures/pytest-postgresql/blob/main/README.rst#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import scoped_session, sessionmaker\nfrom sqlalchemy.pool import NullPool\nfrom zope.sqlalchemy import register\n\n\n@pytest.fixture\ndef db_session(postgresql):\n    \"\"\"Session for SQLAlchemy.\"\"\"\n    from pyramid_fullauth.models import Base\n\n    connection = f'postgresql+psycopg2://{postgresql.info.user}:@{postgresql.info.host}:{postgresql.info.port}/{postgresql.info.dbname}'\n\n    engine = create_engine(connection, echo=False, poolclass=NullPool)\n    pyramid_basemodel.Session = scoped_session(sessionmaker(extension=ZopeTransactionExtension()))\n    pyramid_basemodel.bind_engine(\n        engine, pyramid_basemodel.Session, should_create=True, should_drop=True)\n\n    yield pyramid_basemodel.Session\n\n    transaction.commit()\n    Base.metadata.drop_all(engine)\n\n\n@pytest.fixture\ndef user(db_session):\n    \"\"\"Test user fixture.\"\"\"\n    from pyramid_fullauth.models import User\n```\n\n----------------------------------------\n\nTITLE: Database State Initialization\nDESCRIPTION: Example of defining and loading initial database state for all tests using custom postgresql process fixture.\nSOURCE: https://github.com/dbfixtures/pytest-postgresql/blob/main/README.rst#2025-04-20_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport pytest_postgresql.factories\ndef load_database(**kwargs):\n    db_connection: connection = psycopg2.connect(**kwargs)\n    with db_connection.cursor() as cur:\n        cur.execute(\"CREATE TABLE stories (id serial PRIMARY KEY, name varchar);\")\n        cur.execute(\n            \"INSERT INTO stories (name) VALUES\"\n            \"('Silmarillion'), ('Star Wars'), ('The Expanse'), ('Battlestar Galactica')\"\n        )\n        db_connection.commit()\n\npostgresql_proc = factories.postgresql_proc(\n    load=[load_database],\n)\n\npostgresql = factories.postgresql(\n    \"postgresql_proc\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom PostgreSQL Fixtures\nDESCRIPTION: Example of creating additional postgresql client and process fixtures with custom configuration.\nSOURCE: https://github.com/dbfixtures/pytest-postgresql/blob/main/README.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pytest_postgresql import factories\n\npostgresql_my_proc = factories.postgresql_proc(\n    port=None, unixsocketdir='/var/run')\npostgresql_my = factories.postgresql('postgresql_my_proc')\n```\n\n----------------------------------------\n\nTITLE: Database Janitor Context Manager\nDESCRIPTION: Alternative implementation using DatabaseJanitor as a context manager for database state management.\nSOURCE: https://github.com/dbfixtures/pytest-postgresql/blob/main/README.rst#2025-04-20_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom pytest_postgresql.janitor import DatabaseJanitor\n\n@pytest.fixture\ndef database(postgresql_proc):\n    # variable definition\n\n    with DatabaseJanitor(\n        user=postgresql_proc.user,\n        host=postgresql_proc.host,\n        port=postgresql_proc.port,\n        dbname=\"my_test_database\",\n        version=postgresql_proc.version,\n        password=\"secret_password\",\n    ):\n        yield psycopg2.connect(\n            dbname=\"my_test_database\",\n            user=postgresql_proc.user,\n            password=\"secret_password\",\n            host=postgresql_proc.host,\n            port=postgresql_proc.port,\n        )\n```\n\n----------------------------------------\n\nTITLE: SQLAlchemy Database Initialization\nDESCRIPTION: Implementation of database initialization using SQLAlchemy with session management and connection setup.\nSOURCE: https://github.com/dbfixtures/pytest-postgresql/blob/main/README.rst#2025-04-20_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef load_database(**kwargs):\n    connection = f\"postgresql+psycopg2://{kwargs['user']}:@{kwargs['host']}:{kwargs['port']}/{kwargs['dbname']}\"\n    engine = create_engine(connection)\n    Base.metadata.create_all(engine)\n    session = scoped_session(sessionmaker(bind=engine))\n    # add things to session\n    session.commit()\n\npostgresql_proc = factories.postgresql_proc(load=[load_database])\n\npostgresql = factories.postgresql('postgresql_proc') # still need to check if this is actually needed or not\n\n@pytest.fixture\ndef dbsession(postgresql):\n    connection = f'postgresql+psycopg2://{postgresql.info.user}:@{postgresql.info.host}:{postgresql.info.port}/{postgresql.info.dbname}'\n    engine = create_engine(connection)\n\n    session = scoped_session(sessionmaker(bind=engine))\n\n    yield session\n    # 'Base.metadata.drop_all(engine)' here specifically does not work. It is also not needed. If you leave out the session.close()\n    # all the tests still run, but you get a warning/error at the end of the tests.\n    session.close()\n```\n\n----------------------------------------\n\nTITLE: Pre-populating PostgreSQL Database\nDESCRIPTION: Example of configuring process fixtures with data loading options for database pre-population.\nSOURCE: https://github.com/dbfixtures/pytest-postgresql/blob/main/README.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\npostgresql_my_proc = factories.postgresql_proc(\n    load=[Path(\"schemafile.sql\"), Path(\"otherschema.sql\"), \"import.path.to.function\", \"import.path.to:otherfunction\", load_this]\n)\n```\n\n----------------------------------------\n\nTITLE: External PostgreSQL Connection Setup\nDESCRIPTION: Code example for connecting to an existing PostgreSQL instance.\nSOURCE: https://github.com/dbfixtures/pytest-postgresql/blob/main/README.rst#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npostgresql_external = factories.postgresql('postgresql_noproc')\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Docker Test Configuration\nDESCRIPTION: Configuration for connecting tests to PostgreSQL running in Docker using noproc fixtures.\nSOURCE: https://github.com/dbfixtures/pytest-postgresql/blob/main/README.rst#2025-04-20_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom pytest_postgresql import factories\n\n\npostgresql_in_docker = factories.postgresql_noproc()\npostgresql = factories.postgresql(\"postgresql_in_docker\", dbname=\"test\")\n\n\ndef test_postgres_docker(postgresql):\n    \"\"\"Run test.\"\"\"\n    cur = postgresql.cursor()\n    cur.execute(\"CREATE TABLE test (id serial PRIMARY KEY, num integer, data varchar);\")\n    postgresql.commit()\n    cur.close()\n```\n\n----------------------------------------\n\nTITLE: User Creation with SQLAlchemy Transaction\nDESCRIPTION: Creates a new user instance from default user data and commits it to the database using SQLAlchemy session management.\nSOURCE: https://github.com/dbfixtures/pytest-postgresql/blob/main/README.rst#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom tests.tools import DEFAULT_USER\n\nnew_user = User(**DEFAULT_USER)\ndb_session.add(new_user)\ntransaction.commit()\nreturn new_user\n```\n\n----------------------------------------\n\nTITLE: Creating a PostgreSQL superuser for testing\nDESCRIPTION: This command creates a default superuser named 'postgres' for use in testing pytest-postgresql. It's a prerequisite for running the test suite.\nSOURCE: https://github.com/dbfixtures/pytest-postgresql/blob/main/CONTRIBUTING.rst#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncreateuser --superuser postgres\n```\n\n----------------------------------------\n\nTITLE: Database Pre-population Command Line\nDESCRIPTION: Command line example for defining database pre-population functions and SQL files.\nSOURCE: https://github.com/dbfixtures/pytest-postgresql/blob/main/README.rst#2025-04-20_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npytest --postgresql-populate-template=path.to.loading_function --postgresql-populate-template=path.to.other:loading_function --postgresql-populate-template=path/to/file.sql\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Configuration in pytest.ini\nDESCRIPTION: Example of specifying PostgreSQL port configuration in pytest.ini file.\nSOURCE: https://github.com/dbfixtures/pytest-postgresql/blob/main/README.rst#2025-04-20_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\npostgresql_port = 8888\n```\n\n----------------------------------------\n\nTITLE: Docker PostgreSQL Setup\nDESCRIPTION: Command to start PostgreSQL in a Docker container for testing.\nSOURCE: https://github.com/dbfixtures/pytest-postgresql/blob/main/README.rst#2025-04-20_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -d postgres\n```\n\n----------------------------------------\n\nTITLE: Running tests for pytest-postgresql\nDESCRIPTION: This command runs the test suite for pytest-postgresql using pytest within the pipenv environment. It requires a PostgreSQL server to be running and the POSTGRES environment variable to be set.\nSOURCE: https://github.com/dbfixtures/pytest-postgresql/blob/main/CONTRIBUTING.rst#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npipenv run pytest\n```\n\n----------------------------------------\n\nTITLE: Setting up development environment for pytest-postgresql\nDESCRIPTION: This command initializes the development environment using pipenv, installing all necessary dependencies for contributing to pytest-postgresql.\nSOURCE: https://github.com/dbfixtures/pytest-postgresql/blob/main/CONTRIBUTING.rst#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npipenv install --dev\n```\n\n----------------------------------------\n\nTITLE: Installing Pytest-PostgreSQL Package\nDESCRIPTION: Command to install the pytest-postgresql package using pip package manager.\nSOURCE: https://github.com/dbfixtures/pytest-postgresql/blob/main/README.rst#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install pytest-postgresql\n```\n\n----------------------------------------\n\nTITLE: Release Process Command\nDESCRIPTION: Command for releasing a new version using pipenv and tbump.\nSOURCE: https://github.com/dbfixtures/pytest-postgresql/blob/main/README.rst#2025-04-20_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\npipenv run tbump [NEW_VERSION]\n```"
  }
]