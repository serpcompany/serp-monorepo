[
  {
    "owner": "oslo-project",
    "repo": "cbor",
    "content": "TITLE: Decoding CBOR to Native JavaScript Values with TypeScript\nDESCRIPTION: This example demonstrates how to decode a CBOR-encoded byte array into a native JavaScript object using the @oslojs/cbor library. It specifies a maximum nesting depth of 10 and expects a specific Result interface shape with a message property.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/index.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { decodeCBORToNativeValueNoLeftoverBytes } from \"@oslojs/cbor\";\n\nconst MAX_DEPTH = 10;\nconst encoded = new Uint8Array([\n\t0xa1, 0x67, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x65, 0x68, 0x65, 0x6c, 0x6c, 0x6f\n]);\nconst result = decodeCBORToNativeValueNoLeftoverBytes(encoded, MAX_DEPTH) as Result;\nconst message: string = result.message;\n\ninterface Result {\n\tmessage: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CBORValue Union Type in TypeScript\nDESCRIPTION: A TypeScript type definition that represents all possible CBOR values as a union type. It references various CBOR data types including integers, strings, arrays, maps, floating-point numbers, tagged values, simple values, and break values.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/CBORValue.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//$ CBORPositiveInteger=/reference/main/CBORPositiveInteger\n//$ CBORNegativeInteger=/reference/main/CBORNegativeInteger\n//$ CBORByteString=/reference/main/CBORByteString\n//$ CBORTextString=/reference/main/CBORTextString\n//$ CBORArray=/reference/main/CBORArray\n//$ CBORMap=/reference/main/CBORMap\n//$ CBORFloat16=/reference/main/CBORFloat16\n//$ CBORFloat32=/reference/main/CBORFloat32\n//$ CBORFloat64=/reference/main/CBORFloat64\n//$ CBORTagged=/reference/main/CBORTagged\n//$ CBORSimple=/reference/main/CBORSimple\n//$ CBORBreak=/reference/main/CBORBreak\ntype CBORValue =\n\t| $$CBORPositiveInteger\n\t| $$CBORNegativeInteger\n\t| $$CBORByteString\n\t| $$CBORTextString\n\t| $$CBORArray\n\t| $$CBORMap\n\t| $$CBORFloat16\n\t| $$CBORFloat32\n\t| $$CBORFloat64\n\t| $$CBORTagged\n\t| $$CBORSimple\n\t| $$CBORBreak;\n```\n\n----------------------------------------\n\nTITLE: Transforming CBOR Values to Native JavaScript Types\nDESCRIPTION: Function signature for transforming CBOR values into native JavaScript types. Takes a CBOR value as input and returns an unknown type. The function validates the data and throws CBORInvalidError for invalid inputs. Handles various CBOR types including integers, strings, arrays, maps, floats, and tagged values.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/transformCBORValueToNative.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction transformCBORValueToNative(cbor: $$CBORValue): unknown;\n```\n\n----------------------------------------\n\nTITLE: Defining decodeCBORNoLeftoverBytes Function in TypeScript\nDESCRIPTION: Function signature for decodeCBORNoLeftoverBytes which takes a Uint8Array of CBOR data and a maximum depth parameter, returning a tuple containing the decoded JavaScript value and the number of bytes consumed during decoding.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/decodeCBORToNativeValue.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction decodeCBORNoLeftoverBytes(\n\tdata: Uint8Array,\n\tmaxDepth: number\n): [data: unknown, size: number];\n```\n\n----------------------------------------\n\nTITLE: Declaring decodeCBOR Function for CBOR Decoding in TypeScript\nDESCRIPTION: Function signature for decodeCBOR() which takes a Uint8Array of CBOR-encoded data and a maximum nesting depth, returning a tuple with the decoded CBORValue and the number of bytes consumed. The function has specific error handling for malformed CBOR data.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/decodeCBOR.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//$ CBORValue=/reference/main/CBORValue\nfunction decodeCBOR(data: Uint8Array, maxDepth: number): [data: $$CBORValue, size: number];\n```\n\n----------------------------------------\n\nTITLE: Decoding CBOR Data with No Leftover Bytes in TypeScript\nDESCRIPTION: Function that decodes CBOR-encoded data into CBORValue type while ensuring all bytes are consumed. Takes a Uint8Array input and maxDepth parameter to control nesting depth. Throws CBORLeftoverBytesError if any bytes remain after decoding.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/decodeCBORNoLeftoverBytes.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction decodeCBORNoLeftoverBytes(data: Uint8Array, maxDepth: number): CBORValue;\n```\n\n----------------------------------------\n\nTITLE: Defining a CBOR Decoder Function in TypeScript\nDESCRIPTION: Defines a function that decodes CBOR-encoded data into native JavaScript values, throwing an error if there are any leftover bytes. The function takes a Uint8Array of CBOR data and a maximum nesting depth parameter.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/decodeCBORToNativeValueNoLeftoverBytes.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction decodeCBORToNativeValueNoLeftoverBytes(data: Uint8Array, maxDepth: number): unknown;\n```\n\n----------------------------------------\n\nTITLE: CBORMap Constructor Definition in TypeScript\nDESCRIPTION: Defines the constructor for the CBORMap class which takes an array of key-value pairs as input, where both keys and values are CBORValue types.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/CBORMap/index.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//$ CBORValue=/reference/main/CBORValue\nfunction constructor(entries: [$$CBORValue, $$CBORValue][]): this;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Values from CBORMap in TypeScript\nDESCRIPTION: Method definition for getAll() that takes a CBORValue key parameter and returns an array of CBORValue objects. This method allows retrieving all values associated with a specific key in a CBOR map.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/CBORMap/getAll.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//$ CBORValue=/reference/main/CBORValue\nfunction getAll(key: $$CBORValue): $$CBORValue[];\n```\n\n----------------------------------------\n\nTITLE: Retrieving Values from CBORMap Using TypeScript\nDESCRIPTION: This code snippet defines the get() method for the CBORMap class. It accepts a CBORValue parameter as a key and returns either a CBORValue or null if the key doesn't exist in the map.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/CBORMap/get.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//$ CBORValue=/reference/main/CBORValue\nfunction get(key: $$CBORValue): $$CBORValue | null;\n```\n\n----------------------------------------\n\nTITLE: Checking CBOR Map Key Existence in TypeScript\nDESCRIPTION: A method definition that checks whether a given key exists in a CBOR map. Takes a CBORValue parameter and returns a boolean indicating presence of the key.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/CBORMap/has.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction has(key: $$CBORValue): boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining CBORMap.hasDuplicateKeys() Method in TypeScript\nDESCRIPTION: This snippet defines the hasDuplicateKeys() method for the CBORMap class. The method returns a boolean indicating whether the map contains duplicate keys.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/CBORMap/hasDuplicateKeys.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hasDuplicateKeys(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining the CBORArray Constructor in TypeScript\nDESCRIPTION: Constructor function for creating a CBORArray instance. Takes an array of CBORValue elements as input parameter.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/CBORArray.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//$ CBORValue=/reference/main/CBORValue\nfunction constructor(elements: $$CBORValue[]): this;\n```\n\n----------------------------------------\n\nTITLE: Constructor Definition for CBORTextString in TypeScript\nDESCRIPTION: The constructor for CBORTextString which takes a UTF-8 encoded string as input parameter and initializes the instance.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/CBORTextString/index.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction constructor(value: Uint8Array): this;\n```\n\n----------------------------------------\n\nTITLE: Defining CBORTextString.decodeText TypeScript Method\nDESCRIPTION: TypeScript function signature for decoding CBOR text strings to UTF-8. The method throws CBORInvalidError if it encounters invalid UTF-8 encoding in the input.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/CBORTextString/decodeText.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction decodeText(): string;\n```\n\n----------------------------------------\n\nTITLE: Defining CBORByteString Constructor in TypeScript\nDESCRIPTION: Constructor definition for the CBORByteString class that takes a Uint8Array value parameter and returns an instance of the class.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/CBORByteString.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction constructor(value: Uint8Array): this;\n```\n\n----------------------------------------\n\nTITLE: Defining CBORPositiveInteger Constructor in TypeScript\nDESCRIPTION: Constructor function for creating a CBORPositiveInteger instance. It accepts a positive bigint value (including 0) as a parameter.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/CBORPositiveInteger/index.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction constructor(value: bigint): value;\n```\n\n----------------------------------------\n\nTITLE: Initializing CBORNegativeInteger Constructor in TypeScript\nDESCRIPTION: Constructor for the CBORNegativeInteger class that takes a negative bigint value (excluding 0) as input and initializes the instance.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/CBORNegativeInteger/index.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction constructor(value: bigint): value;\n```\n\n----------------------------------------\n\nTITLE: Initializing CBORFloat64 Class in TypeScript\nDESCRIPTION: Constructor for the CBORFloat64 class. It takes a Uint8Array value representing exactly 8 bytes in big-endian format.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/CBORFloat64/index.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction constructor(value: Uint8Array): this;\n```\n\n----------------------------------------\n\nTITLE: Constructing CBORFloat32 in TypeScript\nDESCRIPTION: Constructor for the CBORFloat32 class. It takes a Uint8Array parameter representing the float32 value as exactly 4 bytes in big-endian format.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/CBORFloat32/index.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction constructor(value: Uint8Array): this;\n```\n\n----------------------------------------\n\nTITLE: Initializing CBORFloat16 Constructor in TypeScript\nDESCRIPTION: Constructor for the CBORFloat16 class that takes a Uint8Array representing the float16 value as exactly 2 bytes in big-endian format.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/CBORFloat16/index.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction constructor(value: Uint8Array): this;\n```\n\n----------------------------------------\n\nTITLE: Defining CBORTaggedValue Constructor in TypeScript\nDESCRIPTION: Constructor for the CBORTaggedValue class that takes a tag number as a bigint and a CBORValue as parameters. This creates a tagged CBOR value as defined in the CBOR specification.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/CBORTagged.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//$ CBORValue=/reference/main/CBORValue\nfunction constructor(tagNumber: bigint, value: $$CBORValue): this;\n```\n\n----------------------------------------\n\nTITLE: Defining CBORSimple Constructor in TypeScript\nDESCRIPTION: Constructor signature for the CBORSimple class that creates a CBOR simple value. It accepts a numeric value parameter and returns an instance of the class.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/CBORSimple.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction constructor(value: number): this;\n```\n\n----------------------------------------\n\nTITLE: CBORMap Properties Interface Definition in TypeScript\nDESCRIPTION: Defines the properties interface for CBORMap, which includes an entries property containing an array of key-value pairs where both keys and values are CBORValue types.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/CBORMap/index.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n//$ CBORValue=/reference/main/CBORValue\ninterface Properties {\n\tentries: [$$CBORValue, $$CBORValue][];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the CBORArray Properties Interface in TypeScript\nDESCRIPTION: Interface defining the properties of a CBORArray object, which contains a value property that is an array of CBORValue elements.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/CBORArray.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n//$ CBORValue=/reference/main/CBORValue\ninterface Properties {\n\tvalue: $$CBORValue[];\n}\n```\n\n----------------------------------------\n\nTITLE: Properties Interface for CBORTextString in TypeScript\nDESCRIPTION: Interface defining the properties of CBORTextString, including the 'value' property which stores the UTF-8 encoded string.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/CBORTextString/index.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Properties {\n\tvalue: Uint8Array;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CBORByteString Properties Interface in TypeScript\nDESCRIPTION: TypeScript interface defining the properties of the CBORByteString class, with a single 'value' property of type Uint8Array.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/CBORByteString.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Properties {\n\tvalue: Uint8Array;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CBORPositiveInteger Properties Interface in TypeScript\nDESCRIPTION: Interface defining the properties of a CBORPositiveInteger object. It contains a single property 'value' of type bigint which holds the positive integer value.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/CBORPositiveInteger/index.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Properties {\n\tvalue: bigint;\n}\n```\n\n----------------------------------------\n\nTITLE: CBORNegativeInteger Properties Interface in TypeScript\nDESCRIPTION: Interface defining the properties of the CBORNegativeInteger class, consisting of a value property of type bigint that stores the negative integer value.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/CBORNegativeInteger/index.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Properties {\n\tvalue: bigint;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CBORFloat64 Properties Interface in TypeScript\nDESCRIPTION: Interface defining the properties of the CBORFloat64 class. It includes a 'value' property of type Uint8Array.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/CBORFloat64/index.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Properties {\n\tvalue: Uint8Array;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CBORFloat32 Properties Interface in TypeScript\nDESCRIPTION: Interface defining the properties of the CBORFloat32 class. It includes a single property 'value' of type Uint8Array.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/CBORFloat32/index.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Properties {\n\tvalue: Uint8Array;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CBORFloat16 Properties Interface in TypeScript\nDESCRIPTION: Interface defining the properties of the CBORFloat16 class, which includes a value property of type Uint8Array that stores the binary representation of the float16 value.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/CBORFloat16/index.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Properties {\n\tvalue: Uint8Array;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CBORTaggedValue Properties Interface in TypeScript\nDESCRIPTION: Interface defining the properties of a CBORTaggedValue, which includes the tag number as a number and the associated value as a CBORValue. These properties are essential for the tagged value representation.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/CBORTagged.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n//$ CBORValue=/reference/main/CBORValue\ninterface Properties {\n\ttagNumber: number;\n\tvalue: $$CBORValue;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CBORSimple Properties Interface in TypeScript\nDESCRIPTION: Interface defining the properties of a CBORSimple object. It consists of a single numeric value property.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/CBORSimple.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Properties {\n\tvalue: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining isNumber() Method for CBORPositiveInteger in TypeScript\nDESCRIPTION: This snippet defines the isNumber() method for the CBORPositiveInteger class. The method returns a boolean indicating whether the CBOR positive integer value can be safely represented as a JavaScript Number without losing accuracy.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/CBORPositiveInteger/isNumber.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isNumber(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining isNumber Method for CBORNegativeInteger in TypeScript\nDESCRIPTION: This snippet defines the isNumber() method for the CBORNegativeInteger class. The method returns a boolean indicating whether the CBOR negative integer value can be safely represented as a JavaScript Number without losing accuracy.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/CBORNegativeInteger/isNumber.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isNumber(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Converting CBORFloat64 to JavaScript Number Type Definition\nDESCRIPTION: TypeScript type definition for the toNumber() method that converts a CBORFloat64 value to a native JavaScript number (float64).\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/CBORFloat64/toNumber.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toNumber(): number;\n```\n\n----------------------------------------\n\nTITLE: Converting CBOR Float32 to JavaScript Number\nDESCRIPTION: Function signature for converting a CBOR float32 value to a native JavaScript Number (float64). The method may lose some accuracy when converting subnormal values.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/CBORFloat32/toNumber.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toNumber(): number;\n```\n\n----------------------------------------\n\nTITLE: Converting CBORFloat16 to JavaScript Number in TypeScript\nDESCRIPTION: This method converts a CBORFloat16 value to a native JavaScript Number (float64). It's important to note that if the value is subnormal, some accuracy may be lost during the conversion process.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/CBORFloat16/toNumber.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction toNumber(): number;\n```\n\n----------------------------------------\n\nTITLE: Defining CBORLeftoverBytesError Class in JavaScript\nDESCRIPTION: This code snippet defines the CBORLeftoverBytesError class, which extends the built-in Error class. It is used to create custom error objects when there are leftover bytes during CBOR decoding.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/CBORLeftoverBytesError.md#2025-04-12_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass CBORLeftoverBytesError extends Error {\n  // Class implementation not provided in the given content\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CBORTooDeepError Class for CBOR Nesting Limits\nDESCRIPTION: A custom error class that extends the built-in Error class to handle cases where CBOR data structures are nested beyond the allowed depth limit. This helps prevent stack overflow issues and maintain data structure integrity.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/reference/main/CBORTooDeepError.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CBORTooDeepError extends Error {\n  // Error thrown when CBOR data exceeds nesting depth limit\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @oslojs/cbor with NPM\nDESCRIPTION: Simple npm installation command for adding the @oslojs/cbor package to your project.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/docs/pages/index.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @oslojs/cbor\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM for Oslo Project\nDESCRIPTION: This command installs the necessary dependencies for the Oslo project using PNPM package manager.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/CONTRIBUTING.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Building the Oslo Project Package\nDESCRIPTION: This command builds the Oslo project package, which is a necessary step before testing or further development.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/CONTRIBUTING.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Creating Changesets for Minor Features in Oslo Project\nDESCRIPTION: This command creates a changeset for a minor feature addition in the Oslo project using the Auri tool.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/CONTRIBUTING.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm auri add minor\n```\n\n----------------------------------------\n\nTITLE: Creating Changesets for Patch Fixes in Oslo Project\nDESCRIPTION: This command creates a changeset for a patch or bug fix in the Oslo project using the Auri tool.\nSOURCE: https://github.com/oslo-project/cbor/blob/main/CONTRIBUTING.md#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm auri add patch\n```"
  }
]