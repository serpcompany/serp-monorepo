[
  {
    "owner": "golang",
    "repo": "go",
    "content": "TITLE: Formatting Go Code with gofmt\nDESCRIPTION: This snippet demonstrates the effect of gofmt on a simple Go code structure. It shows how gofmt adjusts indentation and spacing to improve code readability and consistency.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/code5.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nL1\nL2\nL3\nL4\nL5\n- L6 {\n\tL7\n}\nL8\n```\n\nLANGUAGE: Go\nCODE:\n```\nL1\nL2\nL3\nL4\nL5\n  - L6 {\n    L7\n    }\n\nL8\n```\n\n----------------------------------------\n\nTITLE: Concatenating Slices Generically - slices.Concat - Go\nDESCRIPTION: Adds a generic Concat function to the slices package, supporting any type fulfilling ~[]$1 and element $1. Accepts multiple slices as variadics and returns a single concatenated slice. Used for efficient, type-safe slice merging.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_26\n\nLANGUAGE: Go\nCODE:\n```\nfunc Concat[$0 interface{ ~[]$1 }, $1 interface{}](...$0) $0\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Slice Functions in slices Package\nDESCRIPTION: This snippet introduces a wide range of generic functions for slice operations in the slices package. It includes functions for searching, cloning, comparing, sorting, and manipulating slices with type parameters.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.21.txt#2025-04-22_snippet_12\n\nLANGUAGE: Go\nCODE:\n```\nfunc BinarySearch[$0 interface{ ~[]$1 }, $1 cmp.Ordered]($0, $1) (int, bool)\nfunc Clone[$0 interface{ ~[]$1 }, $1 interface{}]($0) $0\nfunc Contains[$0 interface{ ~[]$1 }, $1 comparable]($0, $1) bool\nfunc Sort[$0 interface{ ~[]$1 }, $1 cmp.Ordered]($0)\nfunc Reverse[$0 interface{ ~[]$1 }, $1 interface{}]($0)\n```\n\n----------------------------------------\n\nTITLE: Running Go Test in Dry Run Mode\nDESCRIPTION: Shell command demonstrating how to execute go test with the -n flag for a dry run on a specific test file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_minus_n.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo test -n x_test.go\n```\n\n----------------------------------------\n\nTITLE: Declaring Go Module and Dependencies - Go - plaintext\nDESCRIPTION: Specifies the module path and the required dependency in the Go module system. Requires no external dependencies except Go itself. The 'module' directive defines the module's import path, while 'require' lists dependencies and their versions; here, it requires 'rsc.io/quote' version v1.5.2. This file is central to versioned module dependency management in Go projects and should be placed in the project root.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_downgrade_v2_v2.0.1.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule example.com/downgrade/v2\n\nrequire rsc.io/quote v1.5.2\n```\n\n----------------------------------------\n\nTITLE: Specifying Retracted Module Versions in go.mod - Go\nDESCRIPTION: This go.mod file configures a Go module named \"example.com/retract\", sets the Go toolchain version to 1.15, and uses the \"retract\" directive to mark two specific versions (v1.0.0-bad and v1.0.0-unused) as retracted. This tells Go tooling to avoid these versions during module resolution. The comments (// bad) provide context for why each version is retracted. No external dependencies are defined. Users must have Go 1.15+ installed to interpret the directives properly. No code execution occurs in this file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_v1.1.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/retract\\n\\ngo 1.15\\n\\nretract v1.0.0-bad // bad\\nretract v1.0.0-unused // bad\\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Module in go.mod File\nDESCRIPTION: Standard Go module declaration file that defines the module path as example.com/nest/sub. This is the official way to declare a module in Go.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_nest_sub_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/nest/sub\n```\n\n----------------------------------------\n\nTITLE: Printing Environment Variables in Go\nDESCRIPTION: This Go program prints all environment variables. It uses the os.Environ() function to retrieve the environment variables and fmt.Println() to output them.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/generate_env.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc main() {\n\tfor _, v := range os.Environ() {\n\t\tfmt.Println(v)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Runtime Lock Contention Stacks using runtimecontentionstacks GODEBUG Setting (Go 1.22)\nDESCRIPTION: Introduced in Go 1.22, this setting enables the collection of complete stack traces for contention on runtime-internal locks reported in the mutex profile (at runtime._LostContendedRuntimeLock). These stacks have non-standard semantics as described in the runtime package documentation. Set via GODEBUG environment variable (e.g., GODEBUG=runtimecontentionstacks=1).\nSOURCE: https://github.com/golang/go/blob/master/doc/godebug.md#2025-04-22_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nruntimecontentionstacks\n```\n\n----------------------------------------\n\nTITLE: Go Module JSON with Deprecation Field\nDESCRIPTION: Shows the JSON representation of a module file with a deprecation notice. The deprecation message appears as a field in the Module object.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit.txt#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"Module\": {\n\t\t\"Path\": \"m\",\n\t\t\"Deprecated\": \"and the new one is not ready yet\"\n\t},\n\t\"Require\": null,\n\t\"Exclude\": null,\n\t\"Replace\": null,\n\t\"Retract\": null,\n\t\"Tool\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Go Module with Module Path - Go\nDESCRIPTION: Specifies the module path 'example.com/nest' using the standard Go module declaration. This file is essential for initializing a Go module. It is typically named 'go.mod' and enables dependency management for the package. The main parameter is the module path, which should be globally unique; no imports or additional settings are required here, and the module path directly affects the import paths used within the project.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_nest_v1.1.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/nest\n```\n\n----------------------------------------\n\nTITLE: Simple Go Main Package\nDESCRIPTION: This snippet shows a simple Go main package that prints \"Hello, World\" to the console.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\npackage main\nimport \"fmt\"\nfunc main() {\n\tfmt.Println(\"Hello, World\")\n}\n```\n\n----------------------------------------\n\nTITLE: Filesystem Methods Available on os.Root Type\nDESCRIPTION: Comprehensive list of filesystem manipulation methods available on the os.Root type. These methods allow for file permission changes, ownership modifications, timestamp updates, symbolic/hard link operations, and file renaming.\nSOURCE: https://github.com/golang/go/blob/master/doc/next/6-stdlib/99-minor/os/67002.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nos.Root.Chmod\nos.Root.Chown\nos.Root.Chtimes\nos.Root.Lchown\nos.Root.Link\nos.Root.Readlink\nos.Root.Rename\nos.Root.Symlink\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Edit Operations\nDESCRIPTION: Demonstrates various 'go mod edit' operations including adding/dropping requirements, exclusions, replacements, and retractions. The test verifies that each operation produces the expected changes to the go.mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# go mod edits\ngo mod edit -droprequire=x.1 -require=x.1@v1.0.0 -require=x.2@v1.1.0 -droprequire=x.2 -exclude='x.1 @ v1.2.0' -exclude=x.1@v1.2.1 -exclude=x.1@v2.0.0+incompatible -replace=x.1@v1.3.0=y.1@v1.4.0 -replace='x.1@v1.4.0 = ../z' -retract=v1.6.0 -retract=[v1.1.0,v1.2.0] -retract=[v1.3.0,v1.4.0] -retract=v1.0.0\ncmpenv go.mod $WORK/go.mod.edit1\ngo mod edit -droprequire=x.1 -dropexclude=x.1@v1.2.1 -dropexclude=x.1@v2.0.0+incompatible -dropreplace=x.1@v1.3.0 -require=x.3@v1.99.0 -dropretract=v1.0.0 -dropretract=[v1.1.0,v1.2.0]\ncmpenv go.mod $WORK/go.mod.edit2\n```\n\n----------------------------------------\n\nTITLE: Runtime Cleanup and Weak Pointer Management - runtime/weak Go\nDESCRIPTION: This set introduces runtime cleanup and weak pointer abstractions, improving resource lifecycle management in Go. AddCleanup registers a handler for cleaning up a resource upon function exit, Cleanup.Stop halts further cleanup, weak.Make constructs type-safe weak pointers, and Pointer.Value dereferences them. Dependencies involve Go generics (Go 1.18+), and these utilities help manage memory, resource leaks, and callback lifetimes.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_21\n\nLANGUAGE: Go\nCODE:\n```\npkg runtime, func AddCleanup[$0 interface{}, $1 interface{}](*$0, func($1), $1) Cleanup #67535\npkg runtime, func GOROOT //deprecated #51473\npkg runtime, method (Cleanup) Stop() #67535\npkg runtime, type Cleanup struct #67535\npkg weak, func Make[$0 interface{}](*$0) Pointer[$0] #67552\npkg weak, method (Pointer[$0]) Value() *$0 #67552\npkg weak, type Pointer[$0 interface{}] struct #67552\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Map Functions in maps Package\nDESCRIPTION: This snippet introduces generic functions for map operations in the maps package. It includes functions for cloning, copying, deleting, and comparing maps with type parameters.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.21.txt#2025-04-22_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\nfunc Clone[$0 interface{ ~map[$1]$2 }, $1 comparable, $2 interface{}]($0) $0\n\nfunc Copy[$0 interface{ ~map[$2]$3 }, $1 interface{ ~map[$2]$3 }, $2 comparable, $3 interface{}]($0, $1)\n\nfunc DeleteFunc[$0 interface{ ~map[$1]$2 }, $1 comparable, $2 interface{}]($0, func($1, $2) bool)\n\nfunc Equal[$0 interface{ ~map[$2]$3 }, $1 interface{ ~map[$2]$3 }, $2 comparable, $3 comparable]($0, $1) bool\n\nfunc EqualFunc[$0 interface{ ~map[$2]$3 }, $1 interface{ ~map[$2]$4 }, $2 comparable, $3 interface{}, $4 interface{}]($0, $1, func($3, $4) bool) bool\n```\n\n----------------------------------------\n\nTITLE: Go Module Configuration\nDESCRIPTION: Specifies the module name and its dependencies using Go modules syntax\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_newcycle_b_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/newcycle/b\n\nrequire example.com/newcycle/a v1.0.1\n```\n\n----------------------------------------\n\nTITLE: Adding Cut function to bytes package\nDESCRIPTION: This snippet adds a new Cut function to the bytes package. It takes two byte slices as input and returns three values: two byte slices and a boolean.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.18.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npkg bytes, func Cut([]uint8, []uint8) ([]uint8, []uint8, bool)\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module and Dependencies in go.mod - Go\nDESCRIPTION: Declares a Go module named 'example' using go version 1.21 and requires an external package 'rsc.io/quote' at version v1.5.1. No parameters are needed; editing this file controls dependency versions for 'go mod' commands and builds. Only usable in the root of a Go module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_m.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule example\n\ngo 1.21\n\nrequire rsc.io/quote v1.5.1\n```\n\n----------------------------------------\n\nTITLE: Example Package with Embed Directive\nDESCRIPTION: Demonstrates usage of go:embed directive to embed the source file content into a string variable.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_export_embed.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage example\n\nimport _ \"embed\"\n\n//go:embed example.go\nvar src string\n```\n\n----------------------------------------\n\nTITLE: Replacing Go Module Dependencies\nDESCRIPTION: A go.mod file that demonstrates dependency replacement for Go modules, useful for local module testing. The file specifies the dependency and its replacement path, crucial for development scenarios.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badmod.txt#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n-- go.mod.usesub --\nmodule m\nrequire rsc.io/badmod v1.0.0\nreplace rsc.io/badmod v1.0.0 => ./sub\n```\n\n----------------------------------------\n\nTITLE: Defining Retracted Versions in go.mod (Go Module File)\nDESCRIPTION: This 'go.mod' file defines the module path 'example.com/retract/self/pseudo' and specifies Go version 1.15. It uses the 'retract' directive to mark versions 'v1.0.0-bad' and 'v1.9.0' (the module's own latest tagged version) as retracted, preventing their default selection by Go tools. Comments provide context for the retractions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_pseudo_v1.9.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: gomod\nCODE:\n```\n-- .mod --\nmodule example.com/retract/self/pseudo\n\ngo 1.15\n\nretract v1.0.0-bad // bad\nretract v1.9.0 // self\n\n```\n\n----------------------------------------\n\nTITLE: Adding LoadLocationFromTZData function to time package\nDESCRIPTION: Implements a function to load time zone location data directly from timezone data bytes. This allows creating Location objects without relying on the system's timezone database.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.10.txt#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\npkg time, func LoadLocationFromTZData(string, []uint8) (*Location, error)\n```\n\n----------------------------------------\n\nTITLE: Configuring Anonymous VMA Naming in Go\nDESCRIPTION: This snippet demonstrates how to disable the new feature of annotating anonymous memory mappings on Linux systems using the GODEBUG setting. This feature provides context about the purpose of memory allocations.\nSOURCE: https://github.com/golang/go/blob/master/doc/next/4-runtime.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ndecoratemappings=0\n```\n\n----------------------------------------\n\nTITLE: Random Number Generation Suite - math/rand/v2 - Go\nDESCRIPTION: math/rand/v2 introduces a broad set of random number generation utilities with new functions, methods, and structures to support various distributions, types, and deterministic sources. This includes functions for creating random sources (ChaCha8, PCG, Zipf), generic randoms, and buffer-based APIs. The additions expand flexibility and type safety for random data generation. Dependencies vary, including definitions for Source, Rand, Zipf, etc. Most functions mimic their v1 analogs but with improved APIs and generics.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_20\n\nLANGUAGE: Go\nCODE:\n```\nfunc ExpFloat64() float64\nfunc Float32() float32\nfunc Float64() float64\nfunc Int() int\nfunc Int32() int32\nfunc Int32N(int32) int32\nfunc Int64() int64\nfunc Int64N(int64) int64\nfunc IntN(int) int\nfunc N[$0 intType]($0) $0\nfunc New(Source) *Rand\nfunc NewChaCha8([32]uint8) *ChaCha8\nfunc NewPCG(uint64, uint64) *PCG\nfunc NewZipf(*Rand, float64, float64, uint64) *Zipf\nfunc NormFloat64() float64\nfunc Perm(int) []int\nfunc Shuffle(int, func(int, int))\nfunc Uint32() uint32\nfunc Uint32N(uint32) uint32\nfunc Uint64() uint64\nfunc Uint64N(uint64) uint64\nfunc UintN(uint) uint\nfunc (c *ChaCha8) MarshalBinary() ([]uint8, error)\nfunc (c *ChaCha8) Seed([32]uint8)\nfunc (c *ChaCha8) Uint64() uint64\nfunc (c *ChaCha8) UnmarshalBinary([]uint8) error\nfunc (p *PCG) MarshalBinary() ([]uint8, error)\nfunc (p *PCG) Seed(uint64, uint64)\nfunc (p *PCG) Uint64() uint64\nfunc (p *PCG) UnmarshalBinary([]uint8) error\nfunc (r *Rand) ExpFloat64() float64\nfunc (r *Rand) Float32() float32\nfunc (r *Rand) Float64() float64\nfunc (r *Rand) Int() int\nfunc (r *Rand) Int32() int32\nfunc (r *Rand) Int32N(int32) int32\nfunc (r *Rand) Int64() int64\nfunc (r *Rand) Int64N(int64) int64\nfunc (r *Rand) IntN(int) int\nfunc (r *Rand) NormFloat64() float64\nfunc (r *Rand) Perm(int) []int\nfunc (r *Rand) Shuffle(int, func(int, int))\nfunc (r *Rand) Uint32() uint32\nfunc (r *Rand) Uint32N(uint32) uint32\nfunc (r *Rand) Uint64() uint64\nfunc (r *Rand) Uint64N(uint64) uint64\nfunc (r *Rand) UintN(uint) uint\nfunc (z *Zipf) Uint64() uint64\ntype ChaCha8 struct\ntype PCG struct\ntype Rand struct\ntype Zipf struct\ntype Source interface { Uint64 }\nfunc (Source) Uint64() uint64\n```\n\n----------------------------------------\n\nTITLE: Implementing Hello World in Go\nDESCRIPTION: A simple Go program that prints 'hello, world' to standard output using the built-in println function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_hello_pkg.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {\n\tprintln(\"hello, world\")\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository and Adding Go Module\nDESCRIPTION: Creates a new Git repository, adds a go.mod file, commits it, renames the default branch to master, and tags it with v2.0.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/empty-v2-without-v1.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit init\n\nat 2019-10-07T14:15:32-04:00\ngit add go.mod\ngit commit -m 'add go.mod file without go source files'\ngit branch -m master\ngit tag v2.0.0\n```\n\n----------------------------------------\n\nTITLE: Controlling Automatic Seeding of math/rand using randautoseed GODEBUG Setting (Go 1.20)\nDESCRIPTION: Introduced in Go 1.20, this setting controls whether the global random number generator in math/rand is automatically seeded upon first use. The default is randautoseed=1 (enabled). Setting it to 0 disables automatic seeding, requiring manual seeding via rand.Seed for non-deterministic behavior. Set via GODEBUG environment variable (e.g., GODEBUG=randautoseed=0).\nSOURCE: https://github.com/golang/go/blob/master/doc/godebug.md#2025-04-22_snippet_21\n\nLANGUAGE: plaintext\nCODE:\n```\nrandautoseed\n```\n\n----------------------------------------\n\nTITLE: Type Comparability Detection - reflect Package - Go\nDESCRIPTION: Introduces the Comparable() bool method to the reflect.Type interface, which determines if a type can be compared for equality using ==. This expands runtime type introspection, helping programs to check at runtime if values can be compared for equality without causing a runtime panic.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_21\n\nLANGUAGE: Go\nCODE:\n```\ntype Type interface {\n    Comparable() bool\n    // ... other methods\n}\n```\n\n----------------------------------------\n\nTITLE: Module Management Commands\nDESCRIPTION: Shell commands demonstrating module dependency management including adding dependencies, updating versions, and cleaning up go.sum entries\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_sum.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n\n# go.sum should list directly used modules and dependencies\ngo get rsc.io/quote@v1.5.2\ngo mod tidy\ngrep rsc.io/sampler go.sum\n\n# go.sum should not normally lose old entries\ngo get rsc.io/quote@v1.0.0\ngrep 'rsc.io/quote v1.0.0' go.sum\ngrep 'rsc.io/quote v1.5.2' go.sum\ngrep rsc.io/sampler go.sum\n\n# go mod tidy should clear dead entries from go.sum\ngo mod tidy\ngrep 'rsc.io/quote v1.0.0' go.sum\n! grep 'rsc.io/quote v1.5.2' go.sum\n! grep rsc.io/sampler go.sum\n\n# go.sum with no entries is OK to keep\n# (better for version control not to delete and recreate.)\ncp x.go.noimports x.go\ngo mod tidy\nexists go.sum\n! grep . go.sum\n```\n\n----------------------------------------\n\nTITLE: Logging Configuration and Utilities in Go\nDESCRIPTION: Includes comprehensive logging facility using constants and methods within the log/slog package. Various levels such as LevelDebug, LevelError are defined alongside functions like Debug, Info, Error for structured logging. Handlers like JSONHandler, and types such as Attr and Value are included for detailed log management.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.21.txt#2025-04-22_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, const KindAny = 0 #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, const KindAny Kind #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, const KindBool = 1 #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, const KindBool Kind #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, const KindDuration = 2 #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, const KindDuration Kind #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, const KindFloat64 = 3 #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, const KindFloat64 Kind #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, const KindGroup = 8 #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, const KindGroup Kind #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, const KindInt64 = 4 #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, const KindInt64 Kind #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, const KindLogValuer = 9 #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, const KindLogValuer Kind #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, const KindString = 5 #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, const KindString Kind #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, const KindTime = 6 #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, const KindTime Kind #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, const KindUint64 = 7 #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, const KindUint64 Kind #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, const LevelDebug = -4 #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, const LevelDebug Level #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, const LevelError = 8 #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, const LevelError Level #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, const LevelInfo = 0 #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, const LevelInfo Level #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, const LevelKey ideal-string #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, const LevelKey = \"level\" #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, const LevelWarn = 4 #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, const LevelWarn Level #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, const MessageKey ideal-string #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, const MessageKey = \"msg\" #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, const SourceKey ideal-string #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, const SourceKey = \"source\" #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, const TimeKey ideal-string #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, const TimeKey = \"time\" #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, func Any(string, interface{}) Attr #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, func AnyValue(interface{}) Value #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, func Bool(string, bool) Attr #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, func BoolValue(bool) Value #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, func DebugContext(context.Context, string, ...interface{}) #61200\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, func Debug(string, ...interface{}) #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, func Default() *Logger #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, func Duration(string, time.Duration) Attr #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, func DurationValue(time.Duration) Value #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, func ErrorContext(context.Context, string, ...interface{}) #61200\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, func Error(string, ...interface{}) #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, func Float64(string, float64) Attr #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, func Float64Value(float64) Value #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, func Group(string, ...interface{}) Attr #59204\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, func GroupValue(...Attr) Value #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, func InfoContext(context.Context, string, ...interface{}) #61200\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, func Info(string, ...interface{}) #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, func Int64(string, int64) Attr #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, func Int64Value(int64) Value #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, func Int(string, int) Attr #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, func IntValue(int) Value #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, func LogAttrs(context.Context, Level, string, ...Attr) #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, func Log(context.Context, Level, string, ...interface{}) #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, func New(Handler) *Logger #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, func NewJSONHandler(io.Writer, *HandlerOptions) *JSONHandler #59339\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, func NewLogLogger(Handler, Level) *log.Logger #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, func NewRecord(time.Time, Level, string, uintptr) Record #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, func NewTextHandler(io.Writer, *HandlerOptions) *TextHandler #59339\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, func SetDefault(*Logger) #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, func String(string, string) Attr #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, func StringValue(string) Value #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, func Time(string, time.Time) Attr #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, func TimeValue(time.Time) Value #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, func Uint64(string, uint64) Attr #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, func Uint64Value(uint64) Value #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, func WarnContext(context.Context, string, ...interface{}) #61200\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, func Warn(string, ...interface{}) #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, func With(...interface{}) *Logger #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (Attr) Equal(Attr) bool #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (Attr) String() string #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (*JSONHandler) Enabled(context.Context, Level) bool #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (*JSONHandler) Handle(context.Context, Record) error #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (*JSONHandler) WithAttrs([]Attr) Handler #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (*JSONHandler) WithGroup(string) Handler #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (Kind) String() string #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (Level) Level() Level #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (Level) MarshalJSON() ([]uint8, error) #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (Level) MarshalText() ([]uint8, error) #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (Level) String() string #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (*Level) UnmarshalJSON([]uint8) error #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (*Level) UnmarshalText([]uint8) error #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (*LevelVar) Level() Level #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (*LevelVar) MarshalText() ([]uint8, error) #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (*LevelVar) Set(Level) #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (*LevelVar) String() string #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (*LevelVar) UnmarshalText([]uint8) error #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (*Logger) DebugContext(context.Context, string, ...interface{}) #61200\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (*Logger) Debug(string, ...interface{}) #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (*Logger) Enabled(context.Context, Level) bool #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (*Logger) ErrorContext(context.Context, string, ...interface{}) #61200\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (*Logger) Error(string, ...interface{}) #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (*Logger) Handler() Handler #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (*Logger) InfoContext(context.Context, string, ...interface{}) #61200\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (*Logger) Info(string, ...interface{}) #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (*Logger) LogAttrs(context.Context, Level, string, ...Attr) #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (*Logger) Log(context.Context, Level, string, ...interface{}) #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (*Logger) WarnContext(context.Context, string, ...interface{}) #61200\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (*Logger) Warn(string, ...interface{}) #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (*Logger) WithGroup(string) *Logger #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (*Logger) With(...interface{}) *Logger #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (*Record) AddAttrs(...Attr) #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (*Record) Add(...interface{}) #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (Record) Attrs(func(Attr) bool) #59060\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (Record) Clone() Record #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (Record) NumAttrs() int #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (*TextHandler) Enabled(context.Context, Level) bool #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (*TextHandler) Handle(context.Context, Record) error #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (*TextHandler) WithAttrs([]Attr) Handler #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (*TextHandler) WithGroup(string) Handler #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (Value) Any() interface{} #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (Value) Bool() bool #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (Value) Duration() time.Duration #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (Value) Equal(Value) bool #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (Value) Float64() float64 #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (Value) Group() []Attr #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (Value) Int64() int64 #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (Value) Kind() Kind #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (Value) LogValuer() LogValuer #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (Value) Resolve() Value #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (Value) String() string #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (Value) Time() time.Time #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, method (Value) Uint64() uint64 #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, type Attr struct #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, type Attr struct, Key string #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, type Attr struct, Value Value #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, type Handler interface, Enabled(context.Context, Level) bool #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, type Handler interface { Enabled, Handle, WithAttrs, WithGroup } #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, type Handler interface, Handle(context.Context, Record) error #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, type Handler interface, WithAttrs([]Attr) Handler #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, type Handler interface, WithGroup(string) Handler #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, type HandlerOptions struct #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, type HandlerOptions struct, AddSource bool #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, type HandlerOptions struct, Level Leveler #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, type HandlerOptions struct, ReplaceAttr func([]string, Attr) Attr #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, type JSONHandler struct #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, type Kind int #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, type Leveler interface { Level } #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, type Leveler interface, Level() Level #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, type Level int #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, type LevelVar struct #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, type Logger struct #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, type LogValuer interface { LogValue } #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, type LogValuer interface, LogValue() Value #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, type Record struct #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, type Record struct, Level Level #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, type Record struct, Message string #56345\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg log/slog, type Record struct, PC uintptr #56345\n```\n\n----------------------------------------\n\nTITLE: Writing Connection/File Data to Writer - net and os - Go\nDESCRIPTION: Adds WriteTo(io.Writer) (int64, error) method to *TCPConn in net and *File in os, allowing direct copying of content to an io.Writer. Accepts the destination writer, returns the number of bytes written and any error.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_21\n\nLANGUAGE: Go\nCODE:\n```\nfunc (c *TCPConn) WriteTo(w io.Writer) (int64, error)\nfunc (f *File) WriteTo(w io.Writer) (int64, error)\n```\n\n----------------------------------------\n\nTITLE: Nullable Value Handling in SQL - Package database/sql - Go\nDESCRIPTION: Adds a generic Null type supporting any interface type, with V $0 and Valid bool fields, and Value/Scan methods for the database/sql package. Enables nullability semantics for arbitrary data types in SQL operations. Value() returns driver.Value and error, Scan accepts any interface and returns error.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\ntype Null[$0 interface{}] struct {\n    V $0\n    Valid bool\n}\n\nfunc (n *Null[$0]) Scan(interface{}) error\nfunc (n Null[$0]) Value() (driver.Value, error)\n```\n\n----------------------------------------\n\nTITLE: Importing C in Go Module with Cgo\nDESCRIPTION: A simple Go package that imports C using cgo directives. The code demonstrates the basic syntax for including C code in a Go file using the special import \"C\" statement preceded by a C code comment.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_depends_on_syscall.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage foo\n\n// #include <stdio.h>\nimport \"C\"\n\n```\n\n----------------------------------------\n\nTITLE: Signal handling with NotifyContext in os/signal package\nDESCRIPTION: Creates a new context that gets canceled when an OS signal is received. It takes a parent context and a list of OS signals to watch for, returning a new context and a cancel function.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc NotifyContext(context.Context, ...os.Signal) (context.Context, context.CancelFunc)\n```\n\n----------------------------------------\n\nTITLE: Go Module JSON Structure\nDESCRIPTION: Shows the JSON representation of a module file as produced by 'go mod edit -json'. It contains the module path, Go version, requirements, exclusions, replacements and retractions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit.txt#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"Module\": {\n\t\t\"Path\": \"x.x/y/z\"\n\t},\n\t\"Go\": \"$goversion\",\n\t\"Require\": [\n\t\t{\n\t\t\t\"Path\": \"x.3\",\n\t\t\t\"Version\": \"v1.99.0\"\n\t\t}\n\t],\n\t\"Exclude\": [\n\t\t{\n\t\t\t\"Path\": \"x.1\",\n\t\t\t\"Version\": \"v1.2.0\"\n\t\t}\n\t],\n\t\"Replace\": [\n\t\t{\n\t\t\t\"Old\": {\n\t\t\t\t\"Path\": \"x.1\",\n\t\t\t\t\"Version\": \"v1.4.0\"\n\t\t\t},\n\t\t\t\"New\": {\n\t\t\t\t\"Path\": \"../z\"\n\t\t\t}\n\t\t}\n\t],\n\t\"Retract\": [\n\t\t{\n\t\t\t\"Low\": \"v1.6.0\",\n\t\t\t\"High\": \"v1.6.0\"\n\t\t},\n\t\t{\n\t\t\t\"Low\": \"v1.3.0\",\n\t\t\t\"High\": \"v1.4.0\"\n\t\t}\n\t],\n\t\"Tool\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling EDNS0 Usage in DNS Requests using netedns0 GODEBUG Setting (Go 1.19+)\nDESCRIPTION: Introduced effectively in Go 1.19 but setting added later (Go 1.21.12, 1.22.5, 1.23+), this controls whether EDNS0 extension mechanisms are used in DNS requests sent by the net package resolver. Go 1.19 started sending EDNS0 headers by default. Setting netedns0=0 disables EDNS0, which might be necessary for compatibility with older or broken DNS servers. Set via GODEBUG environment variable (e.g., GODEBUG=netedns0=0).\nSOURCE: https://github.com/golang/go/blob/master/doc/godebug.md#2025-04-22_snippet_25\n\nLANGUAGE: plaintext\nCODE:\n```\nnetedns0\n```\n\n----------------------------------------\n\nTITLE: Adding File System Support to Tar Writer - Go Standard Library - Go\nDESCRIPTION: Introduces a method AddFS(fs.FS) error on the *Writer type in the archive/tar package, allowing recursive addition of an entire file system tree to a tar archive. The dependency is the io/fs.FS interface, and it expects an fs.FS representing the source tree. Input is a file system, output is error (if any). Designed to make archiving directory contents more convenient.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc (w *Writer) AddFS(fs.FS) error\n```\n\n----------------------------------------\n\nTITLE: Defining Race Condition Test in Go\nDESCRIPTION: This snippet defines a test function TestRace that creates a race condition. It spawns a goroutine that modifies a shared variable, demonstrating a typical race condition scenario.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_race.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc TestRace(t *testing.T) {\n\tfor i := 0; i < 10; i++ {\n\t\tc := make(chan int)\n\t\tx := 1\n\t\tgo func() {\n\t\t\tx = 2\n\t\t\tc <- 1\n\t\t}()\n\t\tx = 3\n\t\t<-c\n\t\t_ = x\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Requirements in go.mod\nDESCRIPTION: Defines the module name and its dependency requirements. This Go module is named 'rsc.io/quote' and depends on 'rsc.io/sampler' version 1.3.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.5.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule \"rsc.io/quote\"\n\nrequire \"rsc.io/sampler\" v1.3.0\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Go Workspace with go.work - Go\nDESCRIPTION: This go.work file defines a Go workspace for version 1.24, specifying multiple module directories to compose a multi-module development environment. The 'use' block includes both the root and another module, facilitating local development and integration across modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_tool.txt#2025-04-22_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\ngo 1.24\\n\\nuse (\\n    ../\\n    ../other\\n)\\n\n```\n\n----------------------------------------\n\nTITLE: Golang Module and Package File for Version x.1\nDESCRIPTION: The `go.mod` and the Go source for the package `x` under version `x.1` define a basic Go module with version 1.17, serving as a foundational component for more complex module management.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_consistency.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule example.com/x\n\ngo 1.17\n```\n\nLANGUAGE: go\nCODE:\n```\npackage x\n```\n\n----------------------------------------\n\nTITLE: Embedding Files in Go Using `embed` Package\nDESCRIPTION: The Go file leverages the `embed` package to embed files matching the pattern `x*t*t` into the `X` variable, of type `embed.FS`. This embedded filesystem can be used to read file content during runtime. The pattern captures all files starting with 'x' and ending with 't'. Required dependency is the `embed` package which is built-in from Go 1.16 onward.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/embed.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage p\n\nimport \"embed\"\n\n//go:embed x*t*t\nvar X embed.FS\n```\n\n----------------------------------------\n\nTITLE: Controlling panic(nil) Behavior using panicnil GODEBUG Setting (Go 1.21)\nDESCRIPTION: Introduced in Go 1.21, this setting controls whether calling panic with a nil interface value triggers a run-time error. The default behavior in Go 1.21+ makes this an error. Setting panicnil=0 reverts to the older behavior where panic(nil) behaves like panic(runtime.PanicNilError{}). Set via GODEBUG environment variable (e.g., GODEBUG=panicnil=0).\nSOURCE: https://github.com/golang/go/blob/master/doc/godebug.md#2025-04-22_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\npanicnil\n```\n\n----------------------------------------\n\nTITLE: HTTP Path Value Manipulation - net/http - Go\nDESCRIPTION: The *Request type gains PathValue and SetPathValue methods to get or set arbitrary key-value pairs tied to the request path. Useful for embedding application-specific values in the request context during HTTP handling.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_23\n\nLANGUAGE: Go\nCODE:\n```\nfunc (r *Request) PathValue(string) string\nfunc (r *Request) SetPathValue(key string, value string)\n```\n\n----------------------------------------\n\nTITLE: Running Go Module Tidy and Dependency Checks\nDESCRIPTION: This snippet runs 'go mod tidy' and checks the output for specific module behaviors, including removal of unused dependencies and preservation of used ones.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n\n# tidy removes unused y, but everything else is used\ngo mod tidy -v\nstderr '^unused y.1'\n! stderr '^unused [^y]'\n\ngrep 'go 1.10' go.mod\n\ngo list -m all\n! stdout '^y'\nstdout '^w.1 v1.2.0'\nstdout '^z.1 v1.2.0'\n\n# empty tidy should not crash\ncd triv\n! grep 'go ' go.mod\ngo mod tidy\n\n# tidy should add missing go line\ngrep 'go ' go.mod\n```\n\n----------------------------------------\n\nTITLE: Implementing Fuzz Test for Byte Slice Crash in Go\nDESCRIPTION: This function implements a fuzz test that panics when the input byte slice is not 'aa'. It demonstrates basic fuzzing functionality and crash detection.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_crash.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc FuzzWithBug(f *testing.F) {\n\tf.Add([]byte(\"aa\"))\n\tf.Fuzz(func(t *testing.T, b []byte) {\n\t\tif string(b) != \"aa\" {\n\t\t\tpanic(\"this input caused a crash!\")\n\t\t}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module File with Replace Directive\nDESCRIPTION: A Go module file for module 'example.com/a' with a replace directive pointing to a local path for module 'b'. This is the starting configuration for the test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_main_module_replaced.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule example.com/a\n\ngo 1.21\n\nrequire example.com/b v0.0.0\n\nreplace example.com/b => ../b\n```\n\n----------------------------------------\n\nTITLE: Initializing a Go Module with go mod init (Bash)\nDESCRIPTION: Initializes a new Go module within the current directory. The command `go mod init` creates a `go.mod` file, essential for managing dependencies in Go projects (version 1.11+). The module path is specified as `golang.org/issue/33855`, likely related to a specific issue or test case.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_mod_empty.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo mod init golang.org/issue/33855\n```\n\n----------------------------------------\n\nTITLE: Adding Multipath TCP Support in net Package\nDESCRIPTION: This snippet adds Multipath TCP support to the net package. It introduces methods for Dialer, ListenConfig, and TCPConn to enable and check Multipath TCP functionality.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.21.txt#2025-04-22_snippet_11\n\nLANGUAGE: Go\nCODE:\n```\nfunc (*Dialer) MultipathTCP() bool\nfunc (*Dialer) SetMultipathTCP(bool)\nfunc (*ListenConfig) MultipathTCP() bool\nfunc (*ListenConfig) SetMultipathTCP(bool)\nfunc (*TCPConn) MultipathTCP() (bool, error)\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Version and Path - Go\nDESCRIPTION: This snippet defines a Go module by specifying its path (example.net/pkgadded) and the required Go version (1.16). Required as a manifest to initialize the module and enable dependency management, it should be included as the root go.mod file of a Go project. The module directive sets the import path, while the go directive specifies the Go toolchain version required.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_pkgadded_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n-- .mod --\nmodule example.net/pkgadded\n\ngo 1.16\n```\n\nLANGUAGE: go\nCODE:\n```\n-- go.mod --\nmodule example.net/pkgadded\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Defining a Go Module with `go.mod` (Go Modules)\nDESCRIPTION: This snippet defines a Go module named `example.com/retract/self/pseudo` using a `go.mod` file. It specifies the Go version `1.15` required to build or use this module. This file is the foundation of Go's module system for this project.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_pseudo_v1.0.0-bad.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go Modules\nCODE:\n```\nmodule example.com/retract/self/pseudo\n\ngo 1.15\n```\n\n----------------------------------------\n\nTITLE: Setting GO111MODULE Environment Variable in Shell\nDESCRIPTION: Sets the GO111MODULE environment variable to 'on' to enable Go modules for the subsequent commands.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_build.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n```\n\n----------------------------------------\n\nTITLE: Go Module with Retractions and Rationales\nDESCRIPTION: Shows a go.mod file with retraction directives that include rationales as comments, which explain why specific versions were retracted.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit.txt#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nmodule x.x/y/z\n\ngo 1.15\n\n// a\nretract v1.0.0\n\n// b\nretract (\n  v1.0.1\n  v1.0.2 // c\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Go Module\nDESCRIPTION: This snippet shows a basic go.mod file for the 'example.net/pkgremoved' module without any dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patchmod.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/pkgremoved\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition with Dependencies\nDESCRIPTION: Main go.mod file defining module 'm' with dependencies on rsc.io/quote and example.com/r\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_old.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.15\n\nrequire (\n\trsc.io/quote v1.5.2\n\texample.com/r v0.0.0\n)\n\nreplace example.com/r => ./r\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Workspace\nDESCRIPTION: This snippet shows the process of initializing a Go workspace, including error handling for non-existent directories and successful initialization.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n! go work init doesnotexist\nstderr 'go: directory doesnotexist does not exist'\ngo env GOWORK\n! stdout .\n\ngo work init ./a ./b\ncmpenv go.work go.work.want\ngo env GOWORK\nstdout '^'$WORK'(\\\\|/)gopath(\\\\|/)src(\\\\|/)go.work$'\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Metadata - Go\nDESCRIPTION: This snippet shows the definition of a Go module in a go.mod file. It specifies the module path (example.com/retract/missingmod) and the Go version required (1.14). Prerequisite: Go toolchain. This sets up the module namespace and Go version compatibility but does not include dependencies or package implementations. Inputs are static; output is configuration for use by go commands. Limitations: minimal configuration, serves solely as module declaration.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_missingmod_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/retract/missingmod\\n\\ngo 1.14\n```\n\n----------------------------------------\n\nTITLE: Running Go Commands Across Modules\nDESCRIPTION: This snippet demonstrates running Go commands across multiple modules in a workspace, including error handling for missing dependencies and successful execution after adding required packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n! go run  example.com/b\nstderr 'a(\\\\|/)a.go:4:8: no required module provides package rsc.io/quote; to add it:\\n\\tcd '$WORK(\\\\|/)gopath(\\\\|/)src(\\\\|/)a'\\n\\tgo get rsc.io/quote'\ncd a\ngo get rsc.io/quote\ncat go.mod\ngo env GOMOD # go env GOMOD reports the module in a single module context\nstdout $GOPATH(\\\\|/)src(\\\\|/)a(\\\\|/)go.mod\ncd ..\ngo run example.com/b\nstdout 'Hello, world.'\n\n# And try from a different directory\ncd c\ngo run  example.com/b\nstdout 'Hello, world.'\ncd $GOPATH/src\n```\n\n----------------------------------------\n\nTITLE: Declaring a Go Module and Requiring a Dependency - go.mod - Go\nDESCRIPTION: This go.mod snippet declares a Go module named 'x' and specifies a dependency on rsc.io/quote v1.2.0. It is used by Go tools for dependency resolution and version management. The module name sets the import path prefix for local packages, and the require statement pins an external package version. Proper formatting and versioning are crucial for correct go tool behavior. No additional parameters are required, but subsequent go mod tidy or go build commands will populate go.sum with checksums.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_upgrade.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule x\nrequire rsc.io/quote v1.2.0\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module in go.mod\nDESCRIPTION: Specifies the module name for the Go project.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badfile1_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule rsc.io/badfile1\n```\n\n----------------------------------------\n\nTITLE: Parsing Basic Auth from HTTP Requests - net/http Package - Go\nDESCRIPTION: Introduces BasicAuth() method on http.Request, enabling extraction of HTTP Basic Authentication credentials as username and password. Returns (username string, password string, ok bool), where ok signifies if Basic Auth headers were present and parseable. Used in HTTP servers and middleware needing authentication checks.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_17\n\nLANGUAGE: Go\nCODE:\n```\nmethod (*Request) BasicAuth() (string, string, bool)\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Module with go.mod - Go\nDESCRIPTION: Defines the module path as 'example.com/retract/rationale' and specifies the Go language version (1.14) used in this module. The go.mod file is essential for Go modules, describing the module's canonical import path and declaring the minimum Go toolchain version for consumers. It enables dependency management and ensures compatibility with specified versions. No external dependencies are directly listed in this snippet.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rationale_v1.0.0-blockwithcomment.txt#2025-04-22_snippet_0\n\nLANGUAGE: go.mod\nCODE:\n```\nmodule example.com/retract/rationale\\n\\ngo 1.14\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Dependencies and Replacements\nDESCRIPTION: This go.mod file defines a module 'm' with its dependencies and replacement directives. It specifies the Go version and includes various module requirements and replacements.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.10\n\nrequire (\n\tx.1 v1.0.0\n\ty.1 v1.0.0\n\tw.1 v1.2.0\n)\n\nreplace x.1 v1.0.0 => ./x\nreplace y.1 v1.0.0 => ./y\nreplace z.1 v1.1.0 => ./z\nreplace z.1 v1.2.0 => ./z\nreplace w.1 => ./w\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Dependencies with go.mod - Go\nDESCRIPTION: This go.mod snippet specifies the name of the Go module as example.com/retract/ambiguous/other, indicates that it should use Go version 1.16, and declares a dependency on another module example.com/retract/ambiguous at version v1.0.0. The go.mod file is fundamental for managing module dependencies and ensuring consistent builds. It is required for any project using Go modules, and must reside in the module root directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_ambiguous_other_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/retract/ambiguous/other\n\ngo 1.16\n\nrequire example.com/retract/ambiguous v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Providing Module Version Information in JSON\nDESCRIPTION: This JSON snippet provides version and metadata about the Go module, including its version, name, a shortened commit hash, and the commit time. It does not require dependencies, but is typically generated or consumed by Go tooling. No parameters or inputs/outputs are defined by this metadata; it serves for tracking and module management.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_pseudoupgrade_v0.1.1-0.20190429073117-b5426c86b553.txt#2025-04-22_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\\\"Version\\\":\\\"v0.1.1-0.20190429073117-b5426c86b553\\\",\\\"Name\\\":\\\"v0.1.1-0.20190429073117-b5426c86b553\\\",\\\"Short\\\":\\\"b5426c86b553\\\",\\\"Time\\\":\\\"2019-04-29T07:31:00Z\\\"}\n```\n\n----------------------------------------\n\nTITLE: Listing Module Metadata in JSON Format with go list - Shell\nDESCRIPTION: This command lists all modules used in the current Go project in JSON format by executing 'go list -m -json all'. It requires a valid go.mod file in the working directory. Outputs structured information about each dependency, suitable for programmatic parsing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_m.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo list -m -json all\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Dependencies\nDESCRIPTION: This snippet defines the module and its dependencies in the go.mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.2.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule \"rsc.io/sampler\"\n\nrequire \"golang.org/x/text\" v0.0.0-20170915032832-14c0d48ead0c\n```\n\n----------------------------------------\n\nTITLE: Controlling Insecure Path Rejection in Tar Archives using tarinsecurepath GODEBUG Setting (Go 1.20)\nDESCRIPTION: Introduced in Go 1.20, this setting controls whether the archive/tar reader rejects insecure path elements (like '..'). The default is tarinsecurepath=1, preserving the behavior of earlier Go versions (allowing insecure paths). Setting it to 0 enables the rejection. A future Go version may change the default to 0. Set via GODEBUG environment variable (e.g., GODEBUG=tarinsecurepath=0).\nSOURCE: https://github.com/golang/go/blob/master/doc/godebug.md#2025-04-22_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\ntarinsecurepath\n```\n\n----------------------------------------\n\nTITLE: Sync Map Implementation\nDESCRIPTION: Thread-safe map implementation providing atomic operations for concurrent access.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.9.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype Map struct {}\n\nfunc (m *Map) Delete(key interface{})\nfunc (m *Map) Load(key interface{}) (value interface{}, ok bool)\nfunc (m *Map) Store(key, value interface{})\nfunc (m *Map) LoadOrStore(key, value interface{}) (actual interface{}, loaded bool)\nfunc (m *Map) Range(f func(key, value interface{}) bool)\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Replace Directives\nDESCRIPTION: Tests the replace directive functionality in go.mod files, including adding, updating and removing replace directives, as well as validation of replacement paths.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# go mod edit -replace\ngo mod edit -replace=x.1@v1.3.0=y.1/v2@v2.3.5 -replace=x.1@v1.4.0=y.1/v2@v2.3.5\ncmpenv go.mod $WORK/go.mod.edit3\ngo mod edit -replace=x.1=y.1/v2@v2.3.6\ncmpenv go.mod $WORK/go.mod.edit4\ngo mod edit -dropreplace=x.1\ncmpenv go.mod $WORK/go.mod.edit5\ngo mod edit -replace=x.1=../y.1/@v2\ncmpenv go.mod $WORK/go.mod.edit6\n! go mod edit -replace=x.1=y.1/@v2\nstderr '^go: -replace=x.1=y.1/@v2: invalid new path: malformed import path \"y.1/\": trailing slash$'\n```\n\n----------------------------------------\n\nTITLE: Retracting Module Versions with Comments in Go\nDESCRIPTION: This snippet shows different ways to retract module versions using the 'retract' directive in Go. It includes examples of single version retractions, version ranges, and various styles of comments for providing rationales.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rationale_v1.9.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/retract/rationale\n\ngo 1.14\n\nretract (\n\tv1.0.0-empty\n\n\t// short description\n\t// more\n\t//\n\t// detail\n\tv1.0.0-multiline1 // suffix\n\t// after not included\n)\n\n// short description\n// more\n//\n// detail\nretract v1.0.0-multiline2 // suffix\n\n// loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong\nretract v1.0.0-long\n\n// Ends with a BEL character. Beep!\nretract v1.0.0-unprintable\n\n// block comment\nretract (\n\tv1.0.0-block\n\n\t// inner comment\n\tv1.0.0-blockwithcomment\n)\n\nretract (\n\t[v1.0.0-order, v1.0.0-order] // degenerate range\n\tv1.0.0-order // single version\n\n\tv1.0.1-order // single version\n\t[v1.0.1-order, v1.0.1-order] // degenerate range\n)\n```\n\n----------------------------------------\n\nTITLE: Golang Module File for Dependency Management in needx2\nDESCRIPTION: The `go.mod` for the `needx2.1` module declares its requirement for version `v0.2.0` of `example.net/x`, ensuring that the correct module version is used for successful application execution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_consistency.txt#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule example.com/x\n\ngo 1.17\n\nrequire example.net/x v0.2.0\n```\n\n----------------------------------------\n\nTITLE: Full Package Embedding with `embed` Package in Go\nDESCRIPTION: In this scenario, the pattern `all:t` attempts to include all files in the directory tree, which may include exclusion of certain directories based on Go's embedding rules. Using `embed` package, it demonstrates embedding entire directories where applicable.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/embed.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\npackage p\n\nimport \"embed\"\n\n//go:embed all:t\nvar X embed.FS\n```\n\n----------------------------------------\n\nTITLE: Multiple Module Paths Usage\nDESCRIPTION: Package demonstrating usage of the same module under different import paths.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_replace.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage quoter\n\nimport (\n\t_ \"not-rsc.io/quote/v3\"\n\t_ \"rsc.io/quote/v3\"\n)\n```\n\n----------------------------------------\n\nTITLE: Testing 'go mod download' Command Outside Module\nDESCRIPTION: Demonstrates the behavior of 'go mod download' when run outside a module, including downloading specific versions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_outside.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n! go mod download\nstderr 'no modules specified'\n\nrm -r $GOPATH/pkg/mod/cache/download/example.com\ngo mod download example.com/printversion@v1.0.0\nexists $GOPATH/pkg/mod/cache/download/example.com/printversion/@v/v1.0.0.zip\n! exists $GOPATH/pkg/mod/cache/download/example.com/version/@v/v1.0.0.zip\n\n! go mod download all\nstderr 'go: cannot match \"all\": go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Basic Go module definition specifying the module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_issue_59905.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule test/main\n\ngo 1.20\n```\n\n----------------------------------------\n\nTITLE: Defining a Go Module - Go\nDESCRIPTION: This code defines the module root using a go.mod file for the Go toolchain, specifying the module name ('m') and the minimum Go version required (1.16). The go.mod is required for Go modules and allows dependency management and proper compilation of the packages in the project.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_statements.txt#2025-04-22_snippet_1\n\nLANGUAGE: go.mod\nCODE:\n```\nmodule m\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Go Workspace Configuration File\nDESCRIPTION: This snippet shows the content of a Go workspace configuration file (go.work) with module dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ngo $goversion\n\nuse (\n\t./a\n\t./b\n)\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition File\nDESCRIPTION: Go module file that specifies the module name and version requirements for dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule quoter\n\nrequire rsc.io/quote/v3 v3.0.0\n```\n\n----------------------------------------\n\nTITLE: Declaring a Go Module Using go.mod - Go\nDESCRIPTION: This snippet defines a Go module by specifying the module path (example.com/fuzzfail) and the Go language version (1.18) required. The go.mod file is essential for dependency management, module resolution, and ensuring reproducible builds in Go projects. No external dependencies are listed beyond the Go version itself; this file must be present in the root of the module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_fuzzfail_v0.1.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/fuzzfail\\n\\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Extending CertPool with AddCertWithConstraint - crypto/x509 - Go\nDESCRIPTION: The CertPool type now includes AddCertWithConstraint, a method that allows adding certificates with constraints, where the constraint is defined by a function taking a slice of *Certificate and returning an error. Facilitates custom validation during certificate chain additions.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nfunc (cp *CertPool) AddCertWithConstraint(cert *Certificate, constraint func([]*Certificate) error)\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Replace Directives in go.mod - Go\nDESCRIPTION: This go.mod snippet sets the module to 'golang.org/issue/root', specifies Go version 1.12, and introduces replace directives mapping external module versions to local directories. It demonstrates how to force certain dependencies to be resolved against local copies, useful for testing edge cases or dependency cycles. Dependencies must exist in the specified folders, and this setup influences the module resolution in downstream Go commands.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_main.txt#2025-04-22_snippet_1\n\nLANGUAGE: go.mod\nCODE:\n```\nmodule golang.org/issue/root\n\ngo 1.12\n\nreplace (\n\tgolang.org/issue/mirror v0.1.0 => ./mirror-v0.1.0\n\tgolang.org/issue/pkg v0.1.0 => ./pkg-v0.1.0\n\tgolang.org/issue/root v0.1.0 => ./root-v0.1.0\n)\n\nrequire golang.org/issue/mirror v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Using Go 1.17 Feature: Slice to Array Pointer Conversion\nDESCRIPTION: This Go file demonstrates the use of a Go 1.17 feature: converting a slice to an array pointer.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_goversion.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage need117\n\nfunc init() {\n\t\t s := make([]byte, 4)\n\t\t _ = (*[4]byte)(s)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding new functionality to Go's encoding/binary package\nDESCRIPTION: Introduces new functions for appending variable-length integers and a new interface for byte order operations in the encoding/binary package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.19.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nfunc AppendUvarint([]uint8, uint64) []uint8\nfunc AppendVarint([]uint8, int64) []uint8\n\ntype AppendByteOrder interface {\n    AppendUint16([]uint8, uint16) []uint8\n    AppendUint32([]uint8, uint32) []uint8\n    AppendUint64([]uint8, uint64) []uint8\n    String() string\n}\n```\n\n----------------------------------------\n\nTITLE: Fuzz Seed Corpus File (Passing Case)\nDESCRIPTION: A test data file that defines a passing test case for the FuzzFoo function. It contains the string 'passes' which will not trigger any errors.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_run.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ngo test fuzz v1\nstring(\"passes\")\n```\n\n----------------------------------------\n\nTITLE: Dependency Module Configuration\nDESCRIPTION: Module configuration file for example.com/dep using Go 1.24\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_pattern_work.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/dep\n\ngo 1.24\n```\n\n----------------------------------------\n\nTITLE: Directory traversal with WalkDir in path/filepath package\nDESCRIPTION: Recursively walks a directory tree, calling the provided WalkDirFunc for each file or directory encountered. Returns an error if the initial call to the directory fails or if the function returns an error.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc WalkDir(string, fs.WalkDirFunc) error\n```\n\n----------------------------------------\n\nTITLE: Declaring a Go Module with go.mod - Go\nDESCRIPTION: This snippet declares a new Go module named 'example.com/noroot' using the go.mod file. There are no additional dependencies listed. The module file is essential for module-aware Go projects, allowing them to be versioned and managed by Go tooling. The snippet is minimal and primarily serves as a module declaration without specifying versions for dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_noroot_v1.0.1.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/noroot\n```\n\n----------------------------------------\n\nTITLE: Main Go Application with Quote Import\nDESCRIPTION: Simple Go program that imports and uses the rsc.io/quote package to print a hello message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_diff.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"rsc.io/quote\"\n\nfunc main() {\n\tprintln(quote.Hello())\n}\n```\n\n----------------------------------------\n\nTITLE: Executing go list Command with Import and Dependency Analysis - Shell Script\nDESCRIPTION: The shell scripts execute the go list command to analyze import paths and dependencies of Go packages within a module. The commands include parameters for JSON output and test flag, aiming to capture any import cycles or issues that arise. If there are errors, they are compared against expected outputs in wanterr.txt. Dependencies include setting up the Go environment and having Go installed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_test_cycle.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n! go list -json=ImportPath -test ./p\ncmp stderr wanterr.txt\n```\n\nLANGUAGE: shell\nCODE:\n```\n! go list -json=ImportPath,Deps -test ./p\ncmp stderr wanterr.txt\n```\n\nLANGUAGE: shell\nCODE:\n```\n! go list -json=ImportPath,Deps -deps -test ./p\ncmp stderr wanterr.txt\n```\n\nLANGUAGE: shell\nCODE:\n```\n! go list -json=ImportPath -deps -test ./p\ncmp stderr wanterr.txt\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Go Package Function\nDESCRIPTION: This Go code defines a simple package 'p' with a function 'F' that returns an integer value of 1.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_relative_import.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage p\n\nfunc F() int { return 1 }\n```\n\n----------------------------------------\n\nTITLE: Main Package Test Implementation\nDESCRIPTION: Test file for the main package that imports example.com/t module, which creates a test-only dependency path.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_all.txt#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\npackage main_test\n\nimport _ \"example.com/t\"\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Configuration (gomod)\nDESCRIPTION: This `go.mod` file declares a Go module named `m` and specifies that it requires Go version 1.23 or later. It establishes the root of the module hierarchy for the test project.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_pgo_issue66218.txt#2025-04-22_snippet_2\n\nLANGUAGE: gomod\nCODE:\n```\nmodule m\n\ngo 1.23\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Dependencies and Replacements in Go\nDESCRIPTION: This go.mod file defines the module, its Go version, dependencies, and replacement directives for different versions of example.net/a, example.net/b, and example.net/c.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_boost.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nmodule example\n\ngo 1.17\n\nrequire (\n\texample.net/a v0.1.0\n\texample.net/b v0.1.0\n\texample.net/c v0.1.0\n)\n\nreplace (\n\texample.net/a v0.1.0 => ./a1\n\texample.net/a v0.2.0-pre => ./a2p\n\texample.net/b v0.1.0 => ./b\n\texample.net/b v0.2.0 => ./b\n\texample.net/c v0.1.0 => ./c1\n\texample.net/c v0.2.0 => ./c2\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring a Minimal Go Module with go.mod - Go\nDESCRIPTION: This go.mod file defines a new Go module named 'm'. It is necessary for go list operations to work in module-aware mode, and establishes the context for all testing. The go.mod file must be present at the module root and is required for using features like test packages in module mode. The input is the module path; the output is a recognized Go module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_test.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Showing Retracted Versions using Go List with Versions\nDESCRIPTION: Ensures that 'go list -m -retracted -versions' correctly displays all versions, including those retracted, for a module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_retract.txt#2025-04-22_snippet_12\n\nLANGUAGE: Go\nCODE:\n```\n# 'go list -m -retracted -versions' shows retracted versions.\\ngo list -m -retracted -versions example.com/retract\\nstdout '^example.com/retract v1.0.0-bad v1.0.0-good v1.0.0-unused v1.1.0$'\n```\n\n----------------------------------------\n\nTITLE: Lazy Module with Version Exclusion Configuration\nDESCRIPTION: A module go.mod file for the 'lazy' module that demonstrates how Go 1.17's lazy loading prunes transitive dependencies. It explicitly excludes an incompatible version while requiring a direct dependency that would bring in that excluded version transitively.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_graph_version.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Module lazy requires example.com/retract/incompatible v1.0.0.\n//\n// When viewed from the outside it also has a transitive dependency\n// on v2.0.0+incompatible, but in lazy mode that transitive dependency\n// is pruned out.\nmodule example.net/lazy\n\ngo 1.17\n\nexclude example.com/retract/incompatible v2.0.0+incompatible\n\nrequire (\n\texample.com/retract/incompatible v1.0.0\n\texample.net/requireincompatible v0.1.0\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Go Version for Dependency Module\nDESCRIPTION: Sets the Go version for the dependency module m1.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goline_order.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\ngo 1.21.2\n```\n\n----------------------------------------\n\nTITLE: Testing Package Join into Parent Module\nDESCRIPTION: Tests package resolution when a package is moved into a parent module in a newer version. Verifies backwards compatibility and proper upgrade behavior including wildcard pattern matching.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_moved.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrm go.mod\ngo mod init example.com/foo\ngo get example.com/join/subpkg@v1.0.0\ngo list -m all\nstdout 'example.com/join/subpkg v1.0.0'\n\ngo get example.com/join/subpkg/...@v1.1.0\n\nrm go.mod\ngo mod init example.com/foo\ngo get example.com/join/subpkg@v1.1.0\ngo list -m all\nstdout 'example.com/join v1.1.0'\n```\n\n----------------------------------------\n\nTITLE: Declaring Go Toolchain Module Name - Plaintext\nDESCRIPTION: Specifies the Go toolchain module name 'golang.org/toolchain' as a plain text declaration. This snippet is used to identify the Go toolchain package and may appear in project or module metadata files for dependency tracking or documentation. Requires no external dependencies. Input and output are straightforward; the main limitation is that it is informational only.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.22.5.linux-amd64.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ngolang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Tidying Go Module Dependencies with go mod tidy - Shell\nDESCRIPTION: Runs the 'go mod tidy' command to remove unused dependencies from go.mod and go.sum and add any missing ones required by the current project's source code. No input parameters are required. The working directory should contain a valid go.mod file. Outputs updates directly to go.mod and go.sum; does not print detailed results unless errors are encountered.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_m.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo mod tidy\n```\n\n----------------------------------------\n\nTITLE: Defining a Go Module\nDESCRIPTION: This snippet defines a Go module using the 'go.mod' file format, setting the module path to 'example.com/split-incompatible/subpkg' and specifying the Go version as 1.16. This is essential for module versioning and dependency management in Go projects. It depends on the Go toolchain to interpret the module file and manage dependencies accordingly.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_split-incompatible_subpkg_v0.1.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\nmodule example.com/split-incompatible/subpkg\\n\\n\\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Dependencies\nDESCRIPTION: This snippet shows the contents of a go.mod file for a module named 'example.net/m'. It specifies Go 1.16 as the version and includes a dependency on 'example.net/x' with a local replacement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_gomod.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/m\n\ngo 1.16\n\nrequire example.net/x v0.1.0\n\nreplace example.net/x v0.1.0 => ./x\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module for Test-only Package\nDESCRIPTION: This snippet shows a go.mod file for a test-only package module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pkgtags.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/testonly\n\ngo 1.15\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Requirements in go.mod File\nDESCRIPTION: Standard go.mod file specifying the module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo122_v0.0.1.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule rsc.io/needgo122\ngo 1.22\n```\n\n----------------------------------------\n\nTITLE: TLS Dial Hook for HTTP Transport - net/http Package - Go\nDESCRIPTION: Adds the DialTLS field (function) to the http.Transport struct, allowing custom TLS dialing during HTTPS connections. Accepts network address arguments, returns (net.Conn, error). Key for advanced users needing to intercept, wrap, or monitor transport security in HTTP clients; requires net package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_18\n\nLANGUAGE: Go\nCODE:\n```\ntype Transport struct {\n    DialTLS func(string, string) (net.Conn, error)\n    // ... other fields\n}\n```\n\n----------------------------------------\n\nTITLE: Adding NetConn method to Conn in crypto/tls package\nDESCRIPTION: This snippet introduces a new NetConn method for the Conn type in the crypto/tls package. It returns a net.Conn.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.18.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npkg crypto/tls, method (*Conn) NetConn() net.Conn\n```\n\n----------------------------------------\n\nTITLE: Download and Validate V2 Module With go.mod\nDESCRIPTION: This snippet tests a Go module with version 2 which includes an explicit go.mod entry. The test involves copying a go.mod file and verifying the module setup using \"go list -deps\".\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_multirepo.txt#2025-04-22_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ncp tmp/use_v2.mod go.mod\ngo list -deps -f {{.Dir}}\nstdout 'pkg[\\/]mod[\\/]rsc.io[\\/]quote[\\/]v2@v2.0.1$'\n```\n\n----------------------------------------\n\nTITLE: Go Test Coverage Implementation\nDESCRIPTION: Test file implementing coverage measurement verification using testing.Coverage(). Tests that coverage values are non-zero and increase as more code is executed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/testing_coverage.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage hello\n\nimport \"testing\"\n\nfunc TestTestCoverage(t *testing.T) {\n\tHello()\n\tC1 := testing.Coverage()\n\tfoo(29)\n\tC2 := testing.Coverage()\n\tif C1 == 0.0 || C2 == 0.0 {\n\t\tt.Errorf(\"unexpected zero values C1=%f C2=%f\", C1, C2)\n\t}\n\tif C1 >= C2 {\n\t\tt.Errorf(\"testing.Coverage() not monotonically increasing C1=%f C2=%f\", C1, C2)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Go Environment Variable Operations\nDESCRIPTION: This snippet tests various invalid operations with 'go env -w', including setting a variable twice, missing values, and invalid values for specific variables like GO111MODULE, GOPATH, and GOTMPDIR.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_write.txt#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# go env -w rejects double-set variables\n! go env -w GOOS=$GOOS GOOS=$GOOS\nstderr 'multiple values for key: GOOS'\n\n# go env -w rejects missing variables\n! go env -w GOOS\nstderr 'arguments must be KEY=VALUE: invalid argument: GOOS'\n\n# go env -w rejects invalid GO111MODULE values, as otherwise cmd/go would break\n! go env -w GO111MODULE=badvalue\nstderr 'invalid GO111MODULE value \"badvalue\"'\n\n# go env -w rejects invalid GOPATH values\n! go env -w GOPATH=~/go\nstderr 'GOPATH entry cannot start with shell metacharacter'\n\n! go env -w GOPATH=./go\nstderr 'GOPATH entry is relative; must be absolute path'\n\n# go env -w rejects invalid GOTMPDIR values\n! go env -w GOTMPDIR=x\nstderr 'go: GOTMPDIR must be an absolute path'\n```\n\n----------------------------------------\n\nTITLE: Executing Go Module Dependency Resolution Test Script (Shell)\nDESCRIPTION: This shell script executes a series of commands to test Go module dependency resolution. It first establishes a baseline with Go 1.14 (eager loading), verifies the initial tidy state, lists modules, modifies the main Go file to add a new import, runs `go mod tidy`, and verifies the updated module list. It then repeats a similar process using Go 1.17 (lazy loading), demonstrating how lazy loading initially prunes transitive dependencies (`c`) and how adding the direct import promotes the intermediate module (`b`) and pulls in its dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_import_allmod.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Control case: in Go 1.14, the original go.mod is tidy,\n# and the dependency on c is eagerly loaded.\n\ncp go.mod go.mod.orig\ngo mod tidy\ncmp go.mod.orig go.mod\n\ngo list -m all\nstdout '^a v0.1.0 '\nstdout '^b v0.1.0 '\nstdout '^c v0.1.0 '\n\n# After adding a new import of b/y,\n# the import of c from b/y should resolve to the version required by b.\n\ncp m.go m.go.orig\ncp m.go.new m.go\ngo mod tidy\ncmp go.mod.new go.mod\n\ngo list -m all\nstdout '^a v0.1.0 '\nstdout '^b v0.1.0 '\nstdout '^c v0.1.0 '\n\n# With lazy loading, the go.mod requirements are the same,\n# but the dependency on c is initially pruned out.\n\ncp m.go.orig m.go\ncp go.mod.orig go.mod\ngo mod edit -go=1.17\ngo mod edit -go=1.17 go.mod.new\n\ncp go.mod go.mod.orig\ngo mod tidy\ncmp go.mod.orig go.mod\n\ngo list -m all\nstdout '^a v0.1.0 '\nstdout '^b v0.1.0 '\n! stdout '^c '\n\n# After adding a new direct import of b/y,\n# the existing version of b should be promoted to a root,\n# bringing the version of c required by b into the build list.\n\ncp m.go.new m.go\ngo mod tidy\ncmp go.mod.lazy go.mod\n\ngo list -m all\nstdout '^a v0.1.0 '\nstdout '^b v0.1.0 '\nstdout '^c v0.1.0 '\n```\n\n----------------------------------------\n\nTITLE: Defining and Retracting a Go Module Version in go.mod\nDESCRIPTION: This `go.mod` file defines the module `example.com/retract/noupgrade`, requires Go 1.19, and explicitly retracts version `v1.0.0` using the `retract` directive. This prevents new projects from selecting this version while allowing existing dependencies to resolve.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_noupgrade_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: gomod\nCODE:\n```\nmodule example.com/retract/noupgrade\n\ngo 1.19\n\nretract v1.0.0 // bad\n```\n\n----------------------------------------\n\nTITLE: Downloading Go Modules and Verifying Integrity\nDESCRIPTION: This snippet demonstrates downloading Go modules, populating go.sum, and verifying module integrity. It also shows how module verification fails when a critical file is deleted.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_partial.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Download modules and populate go.sum.\ngo get -modcacherw\nexists $GOPATH/pkg/mod/rsc.io/quote@v1.5.2/go.mod\n\n# 'go mod verify' should fail if we delete a file.\ngo mod verify\nrm $GOPATH/pkg/mod/rsc.io/quote@v1.5.2/go.mod\n! go mod verify\n```\n\n----------------------------------------\n\nTITLE: Downloading Go Modules Directly from GitHub\nDESCRIPTION: This snippet sets up the environment to download Go modules directly from GitHub. It sets GOSUMDB to 'sum.golang.org' and GOPROXY to 'direct', then uses 'go get' to download a specific version of a module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_golang.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nenv GOSUMDB=sum.golang.org\nenv GOPROXY=direct\n\ngo get rsc.io/quote@v1.5.2\ncp go.sum saved.sum\n```\n\n----------------------------------------\n\nTITLE: New Buffer Methods in bytes Package\nDESCRIPTION: New methods added to the bytes.Buffer type for managing buffer capacity and available space. Includes AvailableBuffer() returning unused buffer space and Available() returning available buffer capacity as an integer.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.21.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc (*Buffer) AvailableBuffer() []uint8\nfunc (*Buffer) Available() int\n```\n\n----------------------------------------\n\nTITLE: Implementing Fuzzing Test in Go\nDESCRIPTION: This Go code implements a basic fuzzing test. It defines a FuzzTarget function that adds an initial seed value and sets up the fuzzing function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_dup_cache.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage fuzz\n\nimport \"testing\"\n\nfunc FuzzTarget(f *testing.F) {\n    f.Add(int(0))\n    f.Fuzz(func(t *testing.T, _ int) {})\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Go Module Mode via Environment Variable (Shell)\nDESCRIPTION: Sets the `GO111MODULE` environment variable to `on` for the execution of the subsequent command. This forces the Go toolchain to operate in module-aware mode.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_install_versioned.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n```\n\n----------------------------------------\n\nTITLE: Generator Program in Go\nDESCRIPTION: A Go program that generates a text file with 'Hello World!' content when run through go:generate. Takes output filename as a command line argument and writes the content with 0644 permissions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/generate_workspace.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n//go:generate go run gen.go got.txt\n\npackage main\n\nimport \"os\"\n\nfunc main() {\n    outfile := os.Args[1]\n    os.WriteFile(outfile, []byte(\"Hello World!\\n\"), 0644)\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Go Hello World Program\nDESCRIPTION: A minimal Go program that prints 'Hello, world' to standard output. This program is used to test different Go build and linking configurations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_static.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(\"Hello, world\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Modules with Replacement\nDESCRIPTION: This Go module definition replaces the module 'rsc.io/quote' version 1.5.2 with version 1.5.1. Key dependencies are declared in the go.mod file, and a replacement directive ensures the desired version is used.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_replace_dir.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n-- go.mod --\nmodule example.com/quoter\n\nrequire rsc.io/quote v1.5.2\n\nreplace rsc.io/quote => rsc.io/quote v1.5.1\n```\n\n----------------------------------------\n\nTITLE: Implementing Quote Collection Package in Go\nDESCRIPTION: Defines a Go package that provides various quotes and sayings through exported functions. It imports the sampler package and implements four functions: Hello, Glass, Go, and Opt, each returning different quotes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.5.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n// Copyright 2018 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// Package quote collects pithy sayings.\npackage quote // import \"rsc.io/quote\"\n\nimport \"rsc.io/sampler\"\n\n// Hello returns a greeting.\nfunc Hello() string {\n\treturn sampler.Hello()\n}\n\n// Glass returns a useful phrase for world travelers.\nfunc Glass() string {\n\t// See http://www.oocities.org/nodotus/hbglass.html.\n\treturn \"I can eat glass and it doesn't hurt me.\"\n}\n\n// Go returns a Go proverb.\nfunc Go() string {\n\treturn \"Don't communicate by sharing memory, share memory by communicating.\"\n}\n\n// Opt returns an optimization truth.\nfunc Opt() string {\n\t// Wisdom from ken.\n\treturn \"If a program is too slow, it must have a loop.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Workspace with Multiple Modules\nDESCRIPTION: This snippet shows the contents of a go.work file that configures a workspace with multiple modules. It specifies which modules are part of the workspace.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace_conflict.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nuse m\nuse n\n```\n\n----------------------------------------\n\nTITLE: Go Module with Godebug Directive\nDESCRIPTION: Shows a go.mod file with a godebug directive, which is used to set runtime debugging variables that affect the Go toolchain's behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit.txt#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nmodule g\n\ngo 1.10\n\ngodebug key=value\n```\n\n----------------------------------------\n\nTITLE: Declaring Go Module Name - go.mod/Text\nDESCRIPTION: This snippet declares the module path for the Go toolchain using the standard module declaration line in a go.mod or related metadata file. The line 'golang.org/toolchain' is the canonical import path used to uniquely identify this module in Go projects and dependency management systems. This line has no side effects or parameters; it serves as a pointer for Go's tooling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.23.9.linux-amd64.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ngolang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Specifying Module Version Metadata (JSON)\nDESCRIPTION: This JSON snippet represents the content of a `.info` file for a Go module version. It specifies the exact version string (`v1.0.0`) for the `example.com/retract/incompatible` module. This file is used by the Go tooling and proxy ecosystem.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_incompatible_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.0.0\"}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Basic Go module definition file declaring module 'x'\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_proxy_list.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule x\n```\n\n----------------------------------------\n\nTITLE: Defining a Go Module in go.mod\nDESCRIPTION: This snippet shows the content of a `go.mod` file, which declares the module path `example.com/version`. This is the standard way to define a module in Go.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_version_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/version\n```\n\n----------------------------------------\n\nTITLE: Updating and Listing Go Module Dependencies\nDESCRIPTION: This snippet demonstrates updating module dependencies and listing all modules and their dependencies using 'go list all' and 'go list -m all'. It shows how adding a new import should reflect in the 'go.mod' without causing unnecessary updates. The key functionality is ensuring dependency records are up-to-date and matching specified versions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_new_import.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\ncp lazy.go.new lazy.go\ngo list all\ngo list -m all\nstdout '^example.com/c v0.1.0'\ncmp go.mod go.mod.old\n```\n\n----------------------------------------\n\nTITLE: Setting MIME Header Limit using multipartmaxheaders GODEBUG Setting (Go 1.21)\nDESCRIPTION: Introduced in Go 1.21, this setting controls the maximum number of MIME headers allowed when parsing multipart messages via mime/multipart. This limit helps prevent denial of service attacks. This behavior was backported to Go 1.19.8+ and Go 1.20.3+. Set via GODEBUG environment variable (e.g., GODEBUG=multipartmaxheaders=N).\nSOURCE: https://github.com/golang/go/blob/master/doc/godebug.md#2025-04-22_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\nmultipartmaxheaders\n```\n\n----------------------------------------\n\nTITLE: Main Package with Embedded Files\nDESCRIPTION: Main package implementation using embedded files from an imported package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_embed.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"example.com/a\"\n)\n\nfunc main() {\n    fmt.Println(a.Str())\n}\n```\n\n----------------------------------------\n\nTITLE: Go File Package Declaration - Go\nDESCRIPTION: This Go file starts with a package declaration, indicating that it is part of the 'p' package. Package declarations are mandatory in Go and indicate which package the file belongs to.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_overlay.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage p\n```\n\n----------------------------------------\n\nTITLE: Defining Single Version Module Replacement in go.mod - Go\nDESCRIPTION: This go.mod file specifies a replacement for a single version of a module: example.com/deprecated/a v1.0.0 is replaced with example.com/deprecated/b v1.0.0. The module is named m and uses Go 1.17. This configuration is designed to test how deprecation is handled when only one version is replaced.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_deprecated_replace.txt#2025-04-22_snippet_2\n\nLANGUAGE: go.mod\nCODE:\n```\nmodule m\n\ngo 1.17\n\nrequire example.com/deprecated/a v1.0.0\n\nreplace example.com/deprecated/a v1.0.0 => example.com/deprecated/b v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Managing GOPATH and Installing Go Packages - Shell Script\nDESCRIPTION: This shell script sets up the GOPATH environment and demonstrates installing Go packages from multiple directories. It uses `mkdir`, `cp`, and `go install` commands to prepare the environment and manage package installations. The script reflects scenarios where GOPATH order affects import resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_gopath_order.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=off\nenv GOPATH=$WORK/p1${:}$WORK/p2\nmkdir $WORK/p1/src/foo $WORK/p2/src/baz\nmkdir $WORK/p2/pkg/${GOOS}_${GOARCH} $WORK/p1/src/bar\ncp foo.go $WORK/p1/src/foo/foo.go\ncp baz.go $WORK/p2/src/baz/baz.go\ncp foo.a $WORK/p2/pkg/${GOOS}_${GOARCH}/foo.a\ncp bar.go $WORK/p1/src/bar/bar.go\n\ngo install -x bar\n\n# add in baz.a to the mix\nmkdir $WORK/p1/pkg/${GOOS}_${GOARCH}\ncp baz.a $WORK/p1/pkg/${GOOS}_${GOARCH}/baz.a\nenv GOPATH=$WORK/p1${:}$WORK/p2\ngo install -x bar\nenv GOPATH=$WORK/p2${:}$WORK/p1\ngo install -x bar\n```\n\n----------------------------------------\n\nTITLE: BuildInfo and Module types for Go module information\nDESCRIPTION: Types and functions in runtime/debug for retrieving Go module information, including version, dependencies, and build details.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.12.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc ReadBuildInfo() (*BuildInfo, bool)\ntype BuildInfo struct\ntype BuildInfo struct, Deps []*Module\ntype BuildInfo struct, Main Module\ntype BuildInfo struct, Path string\ntype Module struct\ntype Module struct, Path string\ntype Module struct, Replace *Module\ntype Module struct, Sum string\ntype Module struct, Version string\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Nil Pointer Check in Go 1.25\nDESCRIPTION: This code snippet illustrates a program that will now panic in Go 1.25 due to a nil pointer exception, where it previously executed successfully in Go 1.21-1.24 due to a compiler bug. It demonstrates the importance of checking errors before using results from functions like os.Open.\nSOURCE: https://github.com/golang/go/blob/master/doc/next/5-toolchain.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"os\"\n\nfunc main() {\n\tf, err := os.Open(\"nonExistentFile\")\n\tname := f.Name()\n\tif err != nil {\n\t\treturn\n\t}\n\tprintln(name)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Go Module and Importing Internal Package in Go\nDESCRIPTION: This snippet defines a module in Go using 'module golang.org/notx/useinternal'. It imports a Go internal package subtly indicating indirect usage or concealment of functionality. Dependencies include having the Go environment configured and access to the respective internal package via the specified path. The snippet highlights the use of internal packages, which may be discouraged or require specific project structure to work correctly.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_notx_useinternal_v0.1.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage useinternal\n\nimport _ \"golang.org/x/internal/subtle\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Go Module Path in go.mod - Plaintext - Go\nDESCRIPTION: This snippet is the standard declaration for the module path at the head of a go.mod file. It allows the Go tooling to associate the source directory with the golang.org/toolchain module. It does not include additional dependencies or requirements; other declarations would typically follow in a complete go.mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.22.7.linux-amd64.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ngolang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Declaring Go Module Path - Plaintext - Go\nDESCRIPTION: This plaintext snippet declares the Go module path for golang.org/toolchain. It is intended for use in Go module proxy repositories or metadata files. No dependencies are required. The module path identifies the module and is critical for Go's dependency resolution process. There are no inputs, outputs, or variable parameters; it must match the module path used in related module files.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.22.7.linux-amd64.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ngolang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Resolving Conflicting Module Replacements in Go Workspace\nDESCRIPTION: This snippet demonstrates the process of resolving conflicting module replacements in a Go workspace. It shows the error message when conflicting replacements are detected and the command to resolve the conflict using 'go work edit'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace_conflict.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n! go list -m example.com/dep\ngo work edit -replace example.com/dep@v1.0.0=./dep1\ngo list -m example.com/dep\n```\n\n----------------------------------------\n\nTITLE: Importing External Package in Go\nDESCRIPTION: This snippet demonstrates a Go file that imports an external package 'example.net/x' using a blank identifier, which is commonly used to include a package for its side effects.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_gomod.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage m\n\nimport _ \"example.net/x\"\n```\n\n----------------------------------------\n\nTITLE: Defining Interfaces and Functions in Go\nDESCRIPTION: This snippet defines an `Int` interface using generics with a type set constraint of integer types. It also includes a simple function `Bar` that acts as a placeholder for potential generic operations. The `package generics` line specifies the package name, facilitating generic type operations under this module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_generics_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage generics\\n\\ntype Int interface {\\n    \\~int\\n}\\n\\nfunc Bar() {}\n```\n\n----------------------------------------\n\nTITLE: Testing 'go mod download -json' with GOTOOLCHAIN=auto outside a module\nDESCRIPTION: Tests that 'go mod download -json' with GOTOOLCHAIN=auto correctly formats JSON output, emits each module exactly once, and sends non-JSON messages to stderr.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_exec_toolchain.txt#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nenv GOTOOLCHAIN=auto\ngo mod download -json rsc.io/needgo121@latest rsc.io/needgo122@latest rsc.io/needgo123@latest rsc.io/needall@latest\nstderr '^go: rsc.io/needall@v0.0.1 requires go >= 1.23; switching to go1.23.9$'\n! stderr '\\(running'\nstdout -count=1 '\"Path\": \"rsc.io/needgo121\",'\nstdout -count=1 '\"Path\": \"rsc.io/needgo122\",'\nstdout -count=1 '\"Path\": \"rsc.io/needgo123\",'\nstdout -count=1 '\"Path\": \"rsc.io/needall\",'\n```\n\n----------------------------------------\n\nTITLE: Local Quote Module Definition\nDESCRIPTION: Go module file for the local implementation of rsc.io/quote/v3 which specifies its module name and dependency on rsc.io/sampler.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nmodule rsc.io/quote/v3\n\nrequire rsc.io/sampler v1.3.0\n```\n\n----------------------------------------\n\nTITLE: Adding File Symbol Access API - debug/elf Package - Go\nDESCRIPTION: Introduces methods and errors for accessing symbol and dynamic symbol tables in ELF files via the debug/elf package. These changes provide new methods for extracting symbol lists from ELF files as well as error reporting when no symbols are present. Intended for advanced binary analysis tools and debuggers; returns slices of Symbol or corresponding errors, requires the elf.File structure.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\nmethod (*File) DynamicSymbols() ([]Symbol, error)\nvar ErrNoSymbols error\n```\n\n----------------------------------------\n\nTITLE: Go Module Tidy with Diff Option\nDESCRIPTION: Tests the -diff option of 'go mod tidy' and verifies the results.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n[exec:patch] mv go.mod go.mod.tidyResult\n[exec:patch] mv go.sum go.sum.tidyResult\n[exec:patch] cp go.mod.orig go.mod\n[exec:patch] ! go mod tidy -diff\n[exec:patch] cp stdout diff.patch\n[exec:patch] exec patch -p1 -i diff.patch\n[exec:patch] go mod tidy -diff\n[exec:patch] cmp go.mod go.mod.tidyResult\n[exec:patch] cmp go.sum go.sum.tidyResult\n```\n\n----------------------------------------\n\nTITLE: Disabling Transparent Huge Pages Interaction using disablethp GODEBUG Setting (Go 1.22)\nDESCRIPTION: Introduced in Go 1.22 (and backported to 1.21.6+), this setting controls how the Go runtime interacts with transparent huge pages (THP) on Linux. Setting disablethp=1 prevents the runtime from advising the kernel about memory usage relevant to THP, potentially avoiding memory overhead issues on systems with specific kernel configurations. Set via GODEBUG environment variable (e.g., GODEBUG=disablethp=1). This setting may be removed in the future.\nSOURCE: https://github.com/golang/go/blob/master/doc/godebug.md#2025-04-22_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\ndisablethp\n```\n\n----------------------------------------\n\nTITLE: Basic Go Fuzz Test Implementation\nDESCRIPTION: Implements a minimal fuzz test function in Go. The test accepts byte array input and implements the basic fuzzing interface requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_match.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage standalone_fuzz\n\nimport \"testing\"\n\nfunc Fuzz(f *testing.F) {\n\tf.Fuzz(func (*testing.T, []byte) {})\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Unknown Godebug Error in go.work File\nDESCRIPTION: Copies a go.work file with an unknown godebug flag and verifies the error message format when running 'go list'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_errors_pos.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp go.work.badgodebug.txt go.work\n! go list\nstderr '^go.work:3: unknown godebug \"foo\"$'\n```\n\n----------------------------------------\n\nTITLE: Original go.mod File with Module and Replacement Definitions\nDESCRIPTION: The original go.mod file that defines the main module with a dependency on module 'a' and multiple replacements for modules a, b, i, and two versions of x. This setup is used to test Go's module resolution behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_tidy.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule main\n\ngo 1.13\n\nrequire a v0.0.0\n\nreplace (\n\ta v0.0.0 => ./a\n\tb v0.0.0 => ./b\n\ti v0.0.0 => ./i\n\tx v0.1.0 => ./x1\n\tx v0.2.0 => ./x2\n)\n```\n\n----------------------------------------\n\nTITLE: Representing Go Module Version Metadata - JSON\nDESCRIPTION: This snippet provides a JSON structure used to represent metadata for a specific version of a Go module. The \\\"Version\\\" field identifies the version tag (e.g., v1.9.0) and is essential for module resolution and caching by Go tools. No external dependencies are required to consume this metadata, but it is typically used in conjunction with Go's module management commands. The input is a JSON object specifying the module version; the expected output is structured metadata that Go tooling can parse. There are limitations if additional fields are required for other module data.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_missingmod_v1.9.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\\"Version\\\":\\\"v1.9.0\\\"}\n```\n\n----------------------------------------\n\nTITLE: Main Program Importing Build Info Library and Dependency in Go\nDESCRIPTION: This Go program serves as the main entry point for the 'x' binary. It imports the local `x/lib` package (causing its `init` function to run and print build info) and the external `rsc.io/quote` package. The `main` function simply calls `quote.Hello()` and prints its return value, demonstrating the use of a dependency alongside the build info retrieval mechanism.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_modinfo.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n-- x/main.go --\npackage main\n\nimport (\n\t\"rsc.io/quote\"\n\t_ \"x/lib\"\n)\n\nfunc main() {\n\tprintln(quote.Hello())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Another Go Module in a Sibling Directory (Shell)\nDESCRIPTION: Changes the current directory from 'x' to its sibling directory 'y' using a relative path ('../y'). It then initializes a Go module within the 'y' directory with the module path 'm'. This also requires the Go toolchain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_init_path.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd ../y\ngo mod init m\n```\n\n----------------------------------------\n\nTITLE: Declaring a Go Module with Go Modules - Go\nDESCRIPTION: Declares the Go module path as 'example.com/retract/self/prev' with Go version 1.15 in a go.mod file. This snippet is fundamental for managing dependencies and specifying the Go toolchain version. No external dependencies or parameters are referenced, and it relies on Go's modules system for usage through the go command.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_prev_v1.0.0-bad.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/retract/self/prev\n\ngo 1.15\n```\n\n----------------------------------------\n\nTITLE: Basic Go Test Function Calling Main\nDESCRIPTION: A Go test file (`main_test.go`) for package `main`. It defines a `TestMain` function that takes `*testing.M` as an argument (though it's unused). This `TestMain` function directly calls the package's `main` function, allowing the `go test` command to execute the primary program logic and check its output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cwd_newline.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n-- $WORK/main_test.go --\npackage main\n\nimport \"testing\"\n\nfunc TestMain(*testing.M) {\n\tmain()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Main Module with Dependencies\nDESCRIPTION: The go.mod file for the main module 'example.com/lazy' which requires example.com/a and example.com/b, with replacements for all dependencies to use local directories.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_downgrade.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/lazy\n\ngo 1.15\n\nrequire (\n\texample.com/a v0.1.0\n\texample.com/b v0.3.0 // indirect\n)\n\nreplace (\n\texample.com/a v0.1.0 => ./a\n\texample.com/b v0.1.0 => ./b1\n\texample.com/b v0.2.0 => ./b2\n\texample.com/b v0.3.0 => ./b3\n\texample.com/c v0.1.0 => ./c\n\texample.com/c v0.2.0 => ./c\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up Fuzzing Test Environment in Go\nDESCRIPTION: This snippet sets up the environment variables and directory structure for a fuzzing test. It creates a custom GOCACHE directory and runs a Go program to populate the fuzz corpus.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_dup_cache.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GOCACHE=$WORK/cache\nenv GODEBUG=fuzzdebug=1\n\nmkdir -p $GOCACHE/fuzz/fuzztest/FuzzTarget\ngo run ./populate $GOCACHE/fuzz/fuzztest/FuzzTarget\n\ngo test -fuzz=FuzzTarget -fuzztime=10x .\nstdout 'entries: 5'\n```\n\n----------------------------------------\n\nTITLE: Text Localization Implementation in Go\nDESCRIPTION: Core implementation of the text localization system. Includes methods for handling language preferences and text lookup based on language tags.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.3.1.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype text struct {\n\tbyTag   map[string]string\n\tmatcher language.Matcher\n}\n\nfunc newText(s string) *text {\n\tt := &text{\n\t\tbyTag: make(map[string]string),\n\t}\n\tvar tags []language.Tag\n\tfor _, line := range strings.Split(s, \"\\n\") {\n\t\tline = strings.TrimSpace(line)\n\t\tif line == \"\" {\n\t\t\tcontinue\n\t\t}\n\t\tf := strings.Split(line, \": \")\n\t\tif len(f) != 3 {\n\t\t\tcontinue\n\t\t}\n\t\ttag := language.Make(f[1])\n\t\ttags = append(tags, tag)\n\t\tt.byTag[tag.String()] = f[2]\n\t}\n\tt.matcher = language.NewMatcher(tags)\n\treturn t\n}\n```\n\n----------------------------------------\n\nTITLE: Module C v0.2.0 Configuration\nDESCRIPTION: The go.mod file for module 'c' v0.2.0, requiring 'b' v0.2.0. This creates a cycle in the dependency graph, which is the key aspect being tested.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_cycle.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nmodule c\n\ngo 1.13\n\nrequire b v0.2.0\n```\n\n----------------------------------------\n\nTITLE: Test package that imports unicode\nDESCRIPTION: A Go package that imports the standard library 'unicode' package, used to test standard library imports with the list command.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_patterns.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage useunicode\nimport _ \"unicode\"\n```\n\n----------------------------------------\n\nTITLE: Populating go.sum and Checking Go Module Upgrades - Go CLI - Bash\nDESCRIPTION: This set of Bash commands is used to manage Go module dependencies. It starts by enabling Go modules via the GO111MODULE=on environment variable, then runs go list -m -mod=mod all to resolve and add dependencies to go.sum. The sequence includes go list -m -u all to check for updates to current dependencies, and asserts that version output for rsc.io/quote contains both installed and latest versions. These commands require Go to be installed and should be run in a directory containing a go.mod file. Outputs are shown on stdout, and successful execution ensures module consistency and highlights upgrade paths.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_upgrade.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=on\n\n# Populate go.sum\ngo list -m -mod=mod all\n\n# Check for upgrades.\ngo list -m -u all\nstdout 'rsc.io/quote v1.2.0 \\[v1\\.5\\.2\\]'\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines a Go module with replace directives and requirements.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_added.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/m\n\ngo 1.17\n\nreplace (\n\texample.net/added v0.1.0 => ./a1\n\texample.net/added v0.2.0 => ./a2\n\texample.net/added v0.3.0 => ./a1\n\texample.net/lazy v0.1.0 => ./lazy\n\texample.net/pruned v0.1.0 => ./pruned\n)\n\nrequire (\n\texample.net/added v0.1.0\n\texample.net/lazy v0.1.0\n)\n```\n\n----------------------------------------\n\nTITLE: Executing Go Module Commands\nDESCRIPTION: This snippet shows various Go commands for managing and running modules, including downloading specific versions, installing, and executing a module named 'printversion'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_replace.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo mod download example.com/printversion@v0.1.0 example.com/printversion@v1.0.0\ngo get example.com/printversion@v0.1.0\ngo install example.com/printversion\n\ngo run example.com/printversion\ncmp stdout out.txt\n\ngo version -m $GOPATH/bin/printversion$GOEXE\nstdout '^.*[/\\\\]bin[/\\\\]printversion'$GOEXE': .*$'\nstdout '^\\tpath\\texample.com/printversion$'\nstdout '^\\tmod\\texample.com/printversion\\tv0.1.0$'\nstdout '^\\t=>\\texample.com/printversion\\tv1.0.0\\th1:.*$'\nstdout '^\\tdep\\texample.com/version\\tv1.0.0$'\nstdout '^\\t=>\\texample.com/version\\tv1.0.1\\th1:.*$'\n```\n\n----------------------------------------\n\nTITLE: Basic Go Module File\nDESCRIPTION: Defines a simple Go module named 'x'\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_sum.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule x\n```\n\n----------------------------------------\n\nTITLE: Go File with Printf Formatting Error\nDESCRIPTION: This Go file contains a function with a Printf formatting error, which is used to demonstrate vet's ability to catch such issues in non-test files.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_vet.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nimport \"fmt\"\n\nfunc F() {\n\tfmt.Printf(\"%d\") // oops\n}\n```\n\n----------------------------------------\n\nTITLE: Nextafter32 Floating-Point Function - math Package - Go\nDESCRIPTION: Implements Nextafter32, a floating-point function in the math package that returns the next representable float32 value after the first argument towards the second. It mimics the C99 function of the same name, requiring two input float32 numbers. Useful for numerical methods, strictly monotonic direction changes, and low-level math manipulation.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_15\n\nLANGUAGE: Go\nCODE:\n```\nfunc Nextafter32(float32, float32) float32\n```\n\n----------------------------------------\n\nTITLE: Managing Go Toolchain Versions with go get\nDESCRIPTION: This snippet demonstrates adding, removing, and switching between different Go toolchain versions using the 'go get' command. It also shows how to verify the changes in the go.mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_toolchain.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo get toolchain@go1.22.1\ngo get toolchain@none\ngo get toolchain@go1.22.1\n```\n\n----------------------------------------\n\nTITLE: Recording Semantic Version for Commit in go.mod\nDESCRIPTION: Tests that getting a package by commit hash correctly records the semantic version in the go.mod file when available.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_commit.txt#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngo get rsc.io/quote@23179ee8\ngrep 'rsc.io/quote v1.5.1' go.mod\n```\n\n----------------------------------------\n\nTITLE: Implementing Quote Functions in Go\nDESCRIPTION: A Go package that provides functions for returning different quotes and sayings. The package exports three functions: Hello returns a greeting, Glass returns a phrase about eating glass, and Go returns a Go programming proverb.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180214005133-e7a685a342c0.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// Copyright 2018 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// Package quote collects pithy sayings.\npackage quote // import \"rsc.io/quote\"\n\n// Hello returns a greeting.\nfunc Hello() string {\n\treturn \"Hello, world.\"\n}\n\n// Glass returns a useful phrase for world travelers.\nfunc Glass() string {\n\t// See http://www.oocities.org/nodotus/hbglass.html.\n\treturn \"I can eat glass and it doesn't hurt me.\"\n}\n\n// Go returns a Go proverb.\nfunc Go() string {\n\treturn \"Don't communicate by sharing memory, share memory by communicating.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Test Command Output Directory Functionality for Multiple Packages\nDESCRIPTION: Shell commands to verify that 'go test -c' can output multiple executables to a directory and test error cases for various command combinations. This script serves as a regression test for issue #62221 which had ETXTBSY errors on Unix platforms.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_compile_multi_pkg.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n[short] skip 'links test binaries'\n\n# Verify test -c can output multiple executables to a directory.\n\n# This test also serves as a regression test for https://go.dev/issue/62221:\n# prior to the fix for that issue, it occasionally failed with ETXTBSY when\n# run on Unix platforms.\n\ngo test -c -o $WORK/some/nonexisting/directory/ ./pkg/...\nexists -exec $WORK/some/nonexisting/directory/pkg1.test$GOEXE\nexists -exec $WORK/some/nonexisting/directory/pkg2.test$GOEXE\n\ngo test -c ./pkg/...\nexists -exec pkg1.test$GOEXE\nexists -exec pkg2.test$GOEXE\n\n! go test -c -o $WORK/bin/test/bin.test.exe ./pkg/...\nstderr '^with multiple packages, -o must refer to a directory or '$devnull\n\n! go test -c ./...\nstderr '^cannot write test binary pkg1.test for multiple packages:\\nexample/anotherpkg/pkg1\\nexample/pkg/pkg1'\n\n! go test -c -o $WORK/bin/test/ ./...\nstderr '^cannot write test binary pkg1.test for multiple packages:\\nexample/anotherpkg/pkg1\\nexample/pkg/pkg1'\n\n! go test -o $WORK/bin/filename.exe ./pkg/...\nstderr '^with multiple packages, -o must refer to a directory or '$devnull\n\n! go test -o $WORK/bin/ ./...\nstderr '^cannot write test binary pkg1.test for multiple packages:\\nexample/anotherpkg/pkg1\\nexample/pkg/pkg1'\n\ngo test -c -o $devnull ./...\n\nrm pkg1.test$GOEXE\nrm pkg2.test$GOEXE\ngo test -o . ./pkg/...\nexists -exec pkg1.test$GOEXE\nexists -exec pkg2.test$GOEXE\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Go Package Function\nDESCRIPTION: A minimal Go package containing a single function that returns a pointer to an integer.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_output.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage p\nfunc f(x *int) *int { return x }\n```\n\n----------------------------------------\n\nTITLE: Providing go.sum Entry for Replacement Module - Go\nDESCRIPTION: This go.sum file specifies the checksum for example.com/deprecated/b v1.0.0/go.mod, required for module verification during replacement. The hash guarantees module integrity and is necessary for successful dependency resolution by the Go toolchain. No additional dependencies are required.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_deprecated_replace.txt#2025-04-22_snippet_5\n\nLANGUAGE: go.sum\nCODE:\n```\nexample.com/deprecated/b v1.0.0/go.mod h1:b19J9ywRGviY7Nq4aJ1WBJ+A7qUlEY9ihp22yI4/F6M=\n```\n\n----------------------------------------\n\nTITLE: Testing GOAUTH with Valid Netrc Credentials in Go\nDESCRIPTION: This snippet tests GOAUTH behavior with valid credentials provided in a netrc file. It attempts to download a module requiring HTTPS basic auth, expecting success.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goauth_netrc.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n# With credentials from a netrc file, it should succeed.\nenv NETRC=$WORK/netrc\ngo get vcs-test.golang.org/auth/or401\n```\n\n----------------------------------------\n\nTITLE: Implementing File Path Printing in Package\nDESCRIPTION: Implements a function to print the file path of the current file using runtime.Caller.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_trimpath.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage pkg\n\nimport \"runtime\"\n\nfunc PrintFile() {\n\t_, file, _, _ := runtime.Caller(0)\n\tprintln(file)\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Go Module for a Dependency - Go\nDESCRIPTION: Defines the module for the dependency 'sub' with a Go version of 1.14, allowing it to take advantage of language features introduced in newer Go releases. This go.mod file enables the main module to reference the dependency and ensures the build system recognizes the dependency as a separate module with its own language version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version_mixed.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n-- sub/go.mod --\nmodule m\ngo 1.14\n```\n\n----------------------------------------\n\nTITLE: Testing Module Dependency Pruning in Go\nDESCRIPTION: This snippet demonstrates the test procedure for verifying correct dependency pruning. It upgrades module 'a' to v0.3.0 and checks that module 'c' remains at v0.1.0, confirming that indirect dependencies through unselectable versions are properly pruned.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue56494.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ngo get a@v0.3.0\n\ngo list -m c\nstdout '^c v0.1.0 '\n```\n\n----------------------------------------\n\nTITLE: Go Module Declaration in go.mod\nDESCRIPTION: Standard go.mod file declaring module name and Go version requirement\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_dotname_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/dotname\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Defining Compression Mode Constants - Go\nDESCRIPTION: These constants define the HuffmanOnly compression option for the gzip and zlib packages. HuffmanOnly signals to use Huffman coding only without LZ77 match searching, trading compression ratio for speed. Intended for use with compress/gzip.Writer and compress/zlib.Writer; the ideal-int variant is an implementation detail.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.8.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nconst HuffmanOnly = -2\n```\n\nLANGUAGE: Go\nCODE:\n```\nconst HuffmanOnly ideal-int\n```\n\n----------------------------------------\n\nTITLE: Go Workspace Configuration\nDESCRIPTION: The go.work file that defines the workspace settings, specifying Go version 1.21 and including the current directory in the workspace.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_modules_txt_conditional.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ngo 1.21\n\nuse .\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Function in Go Package p1\nDESCRIPTION: This Go snippet defines a package (p1) within the coverdep2 module and provides a simple function F that returns the integer 1. This function is used by other packages to test cross-package function calls. No external dependencies are required beyond Go itself.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_dep_loop.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage p1\n\nfunc F() int { return 1 }\n```\n\n----------------------------------------\n\nTITLE: Generating Test Repository for Go Module Version Testing\nDESCRIPTION: Shell script to create a Git repository with a specific structure of branches and tags to test Go's module version resolution. It initializes a repository, creates branches, adds commits, sets tags, and finally creates a zip archive for upload to a test server.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo_other_branch.txt#2025-04-22_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n#!/bin/bash\n\n# This is not part of the test.\n# Run this to generate and update the repository on vcs-test.golang.org.\n\nset -euo pipefail\ncd \"$(dirname \"$0\")\"\nrm -rf tagtests\nmkdir tagtests\ncd tagtests\n\ngit init\necho module vcs-test.golang.org/git/tagtests.git >go.mod\necho package tagtests >tagtests.go\ngit add go.mod tagtests.go\ngit commit -m 'create module tagtests'\n\ngit branch b\n\necho v0.2.1 >v0.2.1\ngit add v0.2.1\ngit commit -m v0.2.1\ngit tag v0.2.1\n\ngit checkout b\necho v0.2.2 >v0.2.2\ngit add v0.2.2\ngit commit -m v0.2.2\ngit tag v0.2.2\n\ngit checkout master\ngit merge b -m merge\n\nzip -r ../tagtests.zip .\ngsutil cp ../tagtests.zip gs://vcs-test/git/tagtests.zip\n```\n\n----------------------------------------\n\nTITLE: Upgrading Go Version and Removing Toolchain\nDESCRIPTION: This snippet shows how to upgrade the Go version and remove a specific toolchain version in a single command. It also demonstrates how to verify the changes in the go.mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_toolchain.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ngo get go@1.22.3 toolchain@1.22.3\n```\n\n----------------------------------------\n\nTITLE: Listing Go Modules in Workspace\nDESCRIPTION: This snippet shows how to list all modules in a Go workspace and demonstrates the behavior of the -mod flag in workspace mode.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo list all # all includes both modules\nstdout 'example.com/a'\nstdout 'example.com/b'\n\n# -mod can only be set to readonly in workspace mode\ngo list -mod=readonly all\n! go list -mod=mod all\nstderr '^go: -mod may only be set to readonly or vendor when in workspace mode'\nenv GOWORK=off\ngo list -mod=mod all\nenv GOWORK=\n```\n\n----------------------------------------\n\nTITLE: Selective File Embedding with Path in Go\nDESCRIPTION: Specifying a relative file path `symdir/x.txt`, this Go file demonstrates precise file inclusion into the `Z` string variable. It showcases the ability to embed specific files with direct paths using the `embed` package, appropriate for single file inclusion use cases.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/embed.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\npackage p\n\nimport \"embed\"\n\n//go:embed symdir/x.txt\nvar Z string\n```\n\n----------------------------------------\n\nTITLE: Resolving Ambiguous Module Path with go get\nDESCRIPTION: Demonstrates how 'go get' resolves an ambiguous module path by choosing the module with the longest matching prefix.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_ambiguous_pkg.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo get example.net/ambiguous/nested/pkg@v0.1.0\ngo list -m all\nstdout '^example.net/ambiguous/nested v0.1.0$'\n! stdout '^example.net/ambiguous '\n```\n\n----------------------------------------\n\nTITLE: Executing Go Get Command for Specific Module Version\nDESCRIPTION: This command attempts to get a specific version (v0.2.0) of the 'example.net/a/p' package. It tests the behavior of 'go get' when resolving module versions under specific conditions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue37438.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo get example.net/a/p@v0.2.0\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: A simple Go module definition file that sets up the module name as 'pkgs' with Go 1.16 as the required version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_patterns_outside_gopath.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule pkgs\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Representing Memory Dependencies in Go SSA\nDESCRIPTION: Demonstrates how memory dependencies are maintained in Go SSA. The example shows two consecutive Store operations where the second depends on the memory state of the first.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/internal/ssa/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n// *a = 3\n// *b = *a\nv10 = Store <mem> {int} v6 v8 v1\nv14 = Store <mem> {int} v7 v8 v10\n```\n\n----------------------------------------\n\nTITLE: Resolving Dependency with Go Get\nDESCRIPTION: This snippet shows how to use 'go get' to resolve the dependency and how it's marked as indirect in go.mod.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_lazy_indirect.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngo get rsc.io/quote\ngrep 'rsc.io/quote v\\d+\\.\\d+\\.\\d+ // indirect$' go.mod\n! grep 'rsc.io/quote v\\d+\\.\\d+\\.\\d+$' go.mod\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Module with Replace Directives\nDESCRIPTION: This snippet shows a go.mod file configuration with multiple replace directives. It defines module replacements for different versions of 'example.net/pkgremoved' and 'example.net/other'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patchmod.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule example\n\ngo 1.16\n\nreplace (\n\texample.net/other v0.1.0 => ./other\n\n\texample.net/pkgremoved v0.1.0 => ./prpkg\n\texample.net/pkgremoved v0.1.1 => ./prpkg\n\n\texample.net/pkgremoved v0.2.0 => ./prmod\n\texample.net/pkgremoved v0.2.1 => ./prmod\n\n\texample.net/pkgremoved v0.3.0 => ./prpkg\n\texample.net/pkgremoved v0.3.1 => ./prmod\n\n\texample.net/pkgremoved v0.4.0 => ./prmod\n\texample.net/pkgremoved v0.4.1 => ./prpkg\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Module Version Metadata - JSON\nDESCRIPTION: This snippet details the module version's metadata, using the Version key to indicate this is version 'v2.0.0+incompatible'. The file is typically machine-generated by Go tooling to record available versions for a module proxy. It requires no dependencies and is used by Go's module system to determine correct versioning during package resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_split-incompatible_v2.0.0+incompatible.txt#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\\\"Version\\\": \\\"v2.0.0+incompatible\\\"}\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests with Skip Flag\nDESCRIPTION: These commands demonstrate different ways to use the -skip flag with go test. They show how to skip all tests, specific tests, or examples based on different patterns.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_skip.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo test -v -run Test -skip T skip_test.go\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngo test -v -skip T skip_test.go\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngo test -v -skip 1 skip_test.go\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngo test -v -skip 2/3 skip_test.go\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngo test -v -skip 2/4 skip_test.go\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngo test -v -skip Example skip_test.go\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module declaration file specifying the module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module declaration file specifying the module name and Go version requirement\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_parse_err.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.13\n```\n\n----------------------------------------\n\nTITLE: Handling Module Dependencies with Go Commands\nDESCRIPTION: This shell script sequence utilizes the `go list` and `go mod tidy` commands to check for inconsistent module requirements and resolve them. It ensures that the correct module versions are used and updates the go.mod file as necessary.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_consistency.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# If the root requirements in a lazy module are inconsistent\n# (for example, due to a bad hand-edit or git merge),\n# they can go unnoticed as long as the module with the violated\n# requirement is not used.\n# When we load a package from that module, we should spot-check its\n# requirements and either emit an error or update the go.mod file.\n\ncp go.mod go.mod.orig\n\n\n# If we load package x from x.1, we only check the requirements of x,\n# which are fine: loading succeeds.\n\ngo list -deps ./usex\nstdout '^example.net/x$'\ncmp go.mod go.mod.orig\n\n\n# However, if we load needx2, we should load the requirements of needx2.\n# Those requirements indicate x.2, not x.1, so the module graph is\n# inconsistent and needs to be fixed.\n\n! go list -deps ./useneedx2\nstderr '^go: updates to go.mod needed; to update it:\\n\\tgo mod tidy$'\n\n! go list -deps example.net/needx2\nstderr '^go: updates to go.mod needed; to update it:\\n\\tgo mod tidy$'\n\n\n# The command printed in the error message should fix the problem.\n\ngo mod tidy\ngo list -deps ./useneedx2\nstdout '^example.net/m/useneedx2$'\nstdout '^example.net/needx2$'\nstdout '^example.net/x$'\n\ngo list -m all\nstdout '^example.net/needx2 v0\\.1\\.0 '\nstdout '^example.net/x v0\\.2\\.0 '\n```\n\n----------------------------------------\n\nTITLE: Testing go mod vendor behavior across Go versions\nDESCRIPTION: Demonstrates how 'go mod vendor' writes different vendor/modules.txt content for Go 1.13 and 1.14, and how it affects subsequent commands.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_auto.txt#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngo mod vendor\ncmp $WORK/modules-1.13.txt vendor/modules.txt\n\ngo list -mod=vendor -f {{.Dir}} -tags tools -e all\nstdout '^'$WORK'[/\\\\]auto$'\nstdout '^'$WORK'[/\\\\]auto[/\\\\]vendor[/\\\\]example.com[/\\\\]printversion$'\nstdout '^'$WORK'[/\\\\]auto[/\\\\]vendor[/\\\\]example.com[/\\\\]version$'\n\ngo mod edit -go=1.14\ngo mod vendor\ncmp $WORK/modules-1.14.txt vendor/modules.txt\n\ngo list -f {{.Dir}} -tags tools -e all\nstdout '^'$WORK'[/\\\\]auto$'\nstdout '^'$WORK'[/\\\\]auto[/\\\\]vendor[/\\\\]example.com[/\\\\]printversion$'\nstdout '^'$WORK'[/\\\\]auto[/\\\\]vendor[/\\\\]example.com[/\\\\]version$'\n```\n\n----------------------------------------\n\nTITLE: Building a Go Package and Verifying Compiler Execution\nDESCRIPTION: This snippet uses the 'go build' command to compile the 'lib.go' package.  The first command checks if the compiler runs the first time. The second checks if the compiler is skipped due to caching. The third forces a recompile with the -a flag. It uses stderr output to confirm the (non-)execution of the compiler.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_compile.txt#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n# Building trivial non-main package should run compiler the first time.\ngo build -x lib.go\nstderr '(compile|gccgo)( |\\.exe).*lib\\.go'\n\n# ... but not again ...\ngo build -x lib.go\n! stderr '(compile|gccgo)( |\\.exe).*lib\\.go'\n\n# ... unless we use -a.\ngo build -a -x lib.go\nstderr '(compile|gccgo)( |\\.exe)'\n```\n\n----------------------------------------\n\nTITLE: Package Using Indirect Dependency\nDESCRIPTION: Go source file demonstrating usage of an indirect package dependency\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_promote_implicit.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage use\n\nimport _ \"indirect-with-pkg\"\n```\n\n----------------------------------------\n\nTITLE: Test Command with Skip Conditions\nDESCRIPTION: Build command with conditional skips based on network connectivity to GitHub and git availability.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_git_export_subst.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# Testing that git export-subst is disabled\n[!net:github.com] skip\n[!git] skip\ngo build\n```\n\n----------------------------------------\n\nTITLE: Implementing Localized Text Handling in Go\nDESCRIPTION: This snippet defines a 'text' struct and associated methods for handling localized text. It includes functionality to create new localized texts from a string input and find the appropriate text based on language preferences.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.3.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype text struct {\n\tbyTag   map[string]string\n\tmatcher language.Matcher\n}\n\nfunc newText(s string) *text {\n\tt := &text{\n\t\tbyTag: make(map[string]string),\n\t}\n\tvar tags []language.Tag\n\tfor _, line := range strings.Split(s, \"\\n\") {\n\t\tline = strings.TrimSpace(line)\n\t\tif line == \"\" {\n\t\t\tcontinue\n\t\t}\n\t\tf := strings.Split(line, \": \")\n\t\tif len(f) != 3 {\n\t\t\tcontinue\n\t\t}\n\t\ttag := language.Make(f[1])\n\t\ttags = append(tags, tag)\n\t\tt.byTag[tag.String()] = f[2]\n\t}\n\tt.matcher = language.NewMatcher(tags)\n\treturn t\n}\n\nfunc (t *text) find(prefs []language.Tag) string {\n\ttag, _, _ := t.matcher.Match(prefs...)\n\ts := t.byTag[tag.String()]\n\tif strings.HasPrefix(s, \"RTL \") {\n\t\ts = \"\\u200F\" + strings.TrimPrefix(s, \"RTL \") + \"\\u200E\"\n\t}\n\treturn s\n}\n```\n\n----------------------------------------\n\nTITLE: Module C Base Configuration\nDESCRIPTION: Basic Go module configuration for example.com/c with no dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_why_download_graph.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\n\nmodule example.com/c\n```\n\n----------------------------------------\n\nTITLE: Initial Go Module File\nDESCRIPTION: Defines the initial content of the go.mod file with module name and Go version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit_toolchain.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nmodule m\ngo 1.8\n```\n\n----------------------------------------\n\nTITLE: Verifying Fuzz Test Artifacts in Go\nDESCRIPTION: This script checks if new fuzz test artifacts are correctly stored in the testdata directory. It verifies the presence of new mutations and the correctness of file naming based on content hashing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_crash.txt#2025-04-22_snippet_17\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"bytes\"\n\t\"crypto/sha256\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"path/filepath\"\n)\n\nfunc main() {\n\ttarget := os.Args[1]\n\tdir := filepath.Join(\"testdata/fuzz\", target)\n\n\tfiles, err := ioutil.ReadDir(dir)\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n\n\tif len(files) == 0 {\n\t\tfmt.Fprintf(os.Stderr, \"expect at least one new mutation to be written to testdata\\n\")\n\t\tos.Exit(1)\n\t}\n\n\tfname := files[0].Name()\n\tcontents, err := ioutil.ReadFile(filepath.Join(dir, fname))\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n\tif bytes.Equal(contents, []byte(\"aa\")) {\n\t\tfmt.Fprintf(os.Stderr, \"newly written testdata entry was not mutated\\n\")\n\t\tos.Exit(1)\n\t}\n\t// The hash of the bytes in the file should match the filename.\n\th := []byte(fmt.Sprintf(\"%x\", sha256.Sum256(contents)))\n\tif !bytes.HasPrefix(h, []byte(fname)) {\n\t\tfmt.Fprintf(os.Stderr, \"hash of bytes %q does not match filename %q\\n\", h, fname)\n\t\tos.Exit(1)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SVN SSH for Go Module Downloads\nDESCRIPTION: Sets the SVN_SSH environment variable to a non-existent program to avoid SSH prompts during module downloads. Also configures Go module settings for direct downloads without checksum database.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_svn.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv SVN_SSH=\"svn_do_not_use_ssh\"\n\nenv GO111MODULE=on\nenv GOPROXY=direct\nenv GOSUMDB=off\n```\n\n----------------------------------------\n\nTITLE: Testing 'go list -m' Command with Versions\nDESCRIPTION: Checks the behavior of 'go list -m' with explicit versions and the -versions flag.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_outside.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo list -m example.com/version@latest\nstdout 'example.com/version v1.1.0'\n\ngo list -m -versions example.com/version\nstdout 'v1.0.0\\s+v1.0.1\\s+v1.1.0'\n\n! go list -m all\nstderr 'go: cannot match \"all\": go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n\n! go list -m example.com/printversion@v1.0.0 all\nstderr 'go: cannot match \"all\": go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n! stdout 'example.com/version'\n\n! go list -m example.com/printversion\nstderr 'go: cannot match \"example.com/printversion\" without -versions or an explicit version: go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n! stdout 'example.com/version'\n\n! go list -m ...\nstderr 'go: cannot match \"...\": go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n! go list -m rsc.io/quote/...\nstderr 'go: cannot match \"rsc.io/quote/...\": go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n```\n\n----------------------------------------\n\nTITLE: Running Successful Fuzz Tests in Go\nDESCRIPTION: This snippet shows a successful fuzz test. It demonstrates how to log information during the test and how to define a fuzz target function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_chatty.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\npackage chatty_fuzz\n\nimport \"testing\"\n\nfunc Fuzz(f *testing.F) {\n    f.Log(\"all good here\")\n    f.Fuzz(func(*testing.T, []byte) {})\n}\n```\n\n----------------------------------------\n\nTITLE: Package dir Implementation in Overlay\nDESCRIPTION: Implementation of the dir package in the overlay that provides a PrintMessage function which outputs \"hello\". This is the final package in the import chain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_overlay.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage dir\n\nimport \"fmt\"\n\nfunc PrintMessage() {\n\tfmt.Println(\"hello\")\n}\n```\n\n----------------------------------------\n\nTITLE: Go Workspace Multiple Module Configuration\nDESCRIPTION: Extended go.work configuration including additional 'other' module alongside existing modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\n\nuse (\n\t./foo\n\t./foo/bar/baz\n\t./other\n)\n```\n\n----------------------------------------\n\nTITLE: Sample Go Module File with Proper Formatting\nDESCRIPTION: A properly formatted go.mod file used as the reference for tidy operations in the tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retention.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.14\n\nrequire (\n\trsc.io/quote v1.5.2\n\trsc.io/testonly v1.0.0 // indirect\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Go Module Environment Variables\nDESCRIPTION: Sets environment variables for Go modules including enabling modules, configuring the proxy server and disabling checksum database verification.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_fallback.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=on\n\n[!net:golang.org] skip\n[!net:proxy.golang.org] skip\n\nenv GOPROXY=https://proxy.golang.org,direct\nenv GOSUMDB=off\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module definition file specifying the module name and its dependency on rsc.io/sampler package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.4.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule \"rsc.io/quote\"\n\nrequire \"rsc.io/sampler\" v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Testing Offline Module Fetching\nDESCRIPTION: Tests the behavior of 'go get' when the module cache is incomplete and offline mode is enabled.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_update_unrelated_sum.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nrm $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.2.zip\nenv GOPROXY=off\n! go get example.com/upgrade@v0.0.2\nstderr '^go: upgraded rsc.io/quote v1.0.0 => v1.5.2: error finding sum for rsc.io/quote@v1.5.2: module lookup disabled by GOPROXY=off$'\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Retraction Directive (.mod file)\nDESCRIPTION: This Go module file declares the module path as `example.com/retract/newname`, requires Go 1.16, and uses the `retract` directive to mark version `v1.0.0-bad` as problematic or unusable. This `.mod` file format, distinct from the standard `go.mod`, might be used in specific Go tooling contexts or internal testing setups.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rename_v1.9.0-new.txt#2025-04-22_snippet_1\n\nLANGUAGE: gomod\nCODE:\n```\nmodule example.com/retract/newname\n\ngo 1.16\n\n// bad\nretract v1.0.0-bad\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Behavior for Issue #31248\nDESCRIPTION: A shell script that tests Go module behavior to ensure loading the build list doesn't add explicit entries for indirect dependencies already implied by older-than-selected versions in the build list. It runs 'go mod tidy' and 'go list -m all' commands and verifies they don't modify the go.mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_tidy.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=on\n\n# golang.org/issue/31248: loading the build list must not add explicit entries\n# for indirect dependencies already implied by older-than-selected versions\n# already in the build list.\n\ncp go.mod.orig go.mod\ngo mod tidy\ncmp go.mod go.mod.orig\n\ncp go.mod.orig go.mod\ngo list -m all\ncmp go.mod go.mod.orig\n```\n\n----------------------------------------\n\nTITLE: Environment Setup for Go Module Testing\nDESCRIPTION: Sets up Go environment variables for module testing with direct proxy and disabled sum database\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/reuse_git.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\nenv GOPROXY=direct\nenv GOSUMDB=off\n```\n\n----------------------------------------\n\nTITLE: Providing Module Version Information (JSON)\nDESCRIPTION: This JSON object contains metadata for the 'example.com/notags' module, specifically its pseudo-version derived from a commit ('v0.0.0-20190507143103-cc8cbe209b64') and the timestamp of that commit. This format is used by Go tools to represent versions when no explicit tag is available.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_notags_v0.0.0-20190507143103-cc8cbe209b64.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n-- .info --\n{\"Version\":\"v0.0.0-20190507143103-cc8cbe209b64\",\"Time\":\"2019-05-07T07:31:03-07:00\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Testing GOPATH Package Shadowing - Shell Script\nDESCRIPTION: This shell script sets Go environment variables, creates overlapping GOPATH roots, and runs several Go CLI commands (go list, go install) to test how duplicate packages in different roots are resolved. It also verifies outputs and error messages using regular expressions. Required dependencies include the Go toolchain and a Unix-like shell environment. Inputs include source package directories, and outputs are captured or asserted from tool command output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_shadow.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=off\nenv GOPATH=$WORK/gopath/src/shadow/root1${:}$WORK/gopath/src/shadow/root2\n\n# The math in root1 is not \"math\" because the standard math is.\ngo list -f '({{.ImportPath}}) ({{.ConflictDir}})' ./shadow/root1/src/math\nstdout '^\\(.*(\\\\|/)src(\\\\|/)shadow(\\\\|/)root1(\\\\|/)src(\\\\|/)math\\) \\('$GOROOT'(\\\\|/)?src(\\\\|/)math\\)$'\n\n# The foo in root1 is \"foo\".\ngo list -f '({{.ImportPath}}) ({{.ConflictDir}})' ./shadow/root1/src/foo\nstdout '^\\(foo\\) \\(\\)$'\n\n# The foo in root2 is not \"foo\" because the foo in root1 got there first.\ngo list -f '({{.ImportPath}}) ({{.ConflictDir}})' ./shadow/root2/src/foo\nstdout '^\\(.*gopath(\\\\|/)src(\\\\|/)shadow(\\\\|/)root2(\\\\|/)src(\\\\|/)foo\\) \\('$WORK'(\\\\|/)?gopath(\\\\|/)src(\\\\|/)shadow(\\\\|/)root1(\\\\|/)src(\\\\|/)foo\\)$'\n\n# The error for go install should mention the conflicting directory.\n! go install -n ./shadow/root2/src/foo\nstderr 'go: no install location for '$WORK'(\\\\|/)?gopath(\\\\|/)src(\\\\|/)shadow(\\\\|/)root2(\\\\|/)src(\\\\|/)foo: hidden by '$WORK'(\\\\|/)?gopath(\\\\|/)src(\\\\|/)shadow(\\\\|/)root1(\\\\|/)src(\\\\|/)foo'\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Module with Replacement (go.mod)\nDESCRIPTION: Defines a Go module named 'm'. It requires version 1.5.2 of 'rsc.io/quote' and specifies a replacement directive, mapping 'rsc.io/quote v1.5.2' to 'example.com/quote v1.5.2'. This configuration sets up the scenario for testing the error handling when the module at 'example.com/quote' declares an inconsistent module path in its own `go.mod`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_replace_mismatch.txt#2025-04-22_snippet_1\n\nLANGUAGE: mod\nCODE:\n```\n-- go.mod --\nmodule m\n\nrequire rsc.io/quote v1.5.2\n\nreplace rsc.io/quote v1.5.2 => example.com/quote v1.5.2\n\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Dependencies and Replacements\nDESCRIPTION: This go.mod file defines a module 'example.net/m' with Go version 1.16. It includes replacements for various modules and requires 'example.net/a v0.1.0'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue48511.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/m\n\ngo 1.16\n\nreplace (\n\texample.net/a v0.1.0 => ./a\n\texample.net/b v0.1.0 => ./b\n\texample.net/b v0.1.1 => ./b\n\texample.net/m v0.1.0 => ./m1\n)\n\nrequire example.net/a v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Listing and Comparing Go Module Dependencies\nDESCRIPTION: Lists all module dependencies and compares the output with a reference file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo list -m all\ncmp stdout m_all.txt\n```\n\n----------------------------------------\n\nTITLE: Incomplete Module Configuration\nDESCRIPTION: Module configuration for incomplete package with missing dependency specification\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_indirect.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/incomplete\n\ngo 1.16\n\n// This module omits a needed requirement on example.net/indirect.\n```\n\n----------------------------------------\n\nTITLE: Printing File Modification Time as JSON in Go\nDESCRIPTION: This Go program (`mtime`) takes a file path as a command-line argument (os.Args[1]), retrieves the file's modification time using `os.Stat()`, and encodes it as a JSON string to standard output. It exits with an error code 1 if file stats retrieval or JSON encoding fails. This utility helps the main test script verify file timestamps.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_issue6480.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n-- mtime/mtime.go --\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc main() {\n\tinfo, err := os.Stat(os.Args[1])\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n\tif err := json.NewEncoder(os.Stdout).Encode(info.ModTime()); err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module Declaration with Version 1.21\nDESCRIPTION: A go.mod file declaring a module named 'example.com/retract/newergoversion' that requires Go version 1.21.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_newergoversion_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/retract/newergoversion\n\ngo 1.21\n```\n\n----------------------------------------\n\nTITLE: UTF-16 Rune Length Calculator in Go\nDESCRIPTION: Function to calculate the UTF-16 encoded length of a given rune value.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.23.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc RuneLen(int32) int\n```\n\n----------------------------------------\n\nTITLE: Importing and Using a Replaced Module in Go\nDESCRIPTION: This snippet demonstrates how to import and use a module that has been replaced in the go.mod file. It shows a simple function that calls a function from the replaced module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace_conflict.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage m\n\nimport \"example.com/dep\"\n\nfunc F() {\n\tdep.G()\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Go Test Coverage Commands\nDESCRIPTION: These commands illustrate the use of 'go test' to check code coverage in Go projects. It includes various scenarios such as specifying packages, handling nonexistent packages, and testing coverage for packages not directly tested. The focus is on understanding coverage outputs and error handling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_test_pkgselect.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Baseline run.\ngo test -cover example/foo\nstdout 'coverage: 50.0% of statements$'\n\n# Coverage percentage output should mention -coverpkg selection.\ngo test -coverpkg=example/foo example/foo\nstdout 'coverage: 50.0% of statements in example/foo'\n\n# Try to ask for coverage of a package that doesn't exist.\ngo test -coverpkg nonexistent example/bar\nstderr 'no packages being tested depend on matches for pattern nonexistent'\nstdout 'coverage: \\[no statements\\]'\n\n# Ask for foo coverage, but test bar.\ngo test -coverpkg=example/foo example/bar\nstdout 'coverage: 50.0% of statements in example/foo'\n\n```\n\n----------------------------------------\n\nTITLE: Package B Module Definition\nDESCRIPTION: Module definition and implementation for example.net/b package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patch.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/b\n\ngo 1.16\n```\n\nLANGUAGE: go\nCODE:\n```\npackage b\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines the module name and Go version for the project.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_outside_module.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/my-module\n\ngo 1.20\n```\n\n----------------------------------------\n\nTITLE: Certificate Policies Field and OID Type - crypto/x509 - Go\nDESCRIPTION: The Certificate struct in crypto/x509 is updated to hold a Policies field of []OID, leveraging the new OID type struct. These allow manipulation and inspection of policy object identifiers in X509 certificates. The OID type encapsulates the identifier structure.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\ntype Certificate struct {\n    Policies []OID\n}\n```\n\nLANGUAGE: Go\nCODE:\n```\ntype OID struct\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Dependencies with go get and go list\nDESCRIPTION: This snippet demonstrates how 'go get' fetches transitive dependencies and how 'go list' behaves with tag-guarded files and missing dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pkgtags.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngo mod edit -require example.net/tools@v0.1.0\n! go list -deps example.net/cmd/tool\nstderr '^module example\\.net/cmd provides package example\\.net/cmd/tool and is replaced but not required; to add it:\\n\\tgo get example\\.net/cmd@v0\\.1\\.0$'\ngo mod edit -droprequire example.net/tools\n\ngo get example.net/tools@v0.1.0\n! stderr 'no Go source files'\n\n! go list example.net/tools\nstderr '^package example.net/tools: build constraints exclude all Go files in .*[/\\\\]tools$'\n\ngo list -tags=tools -e -deps example.net/tools\nstdout '^example.net/cmd/tool$'\nstdout '^example.net/missing$'\n\ngo list -deps example.net/cmd/tool\n\n! go list example.net/missing\nstderr '^no required module provides package example.net/missing; to add it:\\n\\tgo get example.net/missing$'\n```\n\n----------------------------------------\n\nTITLE: Adding test coverage functionality to Go testing package\nDESCRIPTION: Implements a Coverage function in the testing package that returns the code coverage percentage as a float64. This allows programmatic access to coverage information during test execution.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_30\n\nLANGUAGE: go\nCODE:\n```\nfunc Coverage() float64\n```\n\n----------------------------------------\n\nTITLE: Declaring Go Module with Dependencies - Go\nDESCRIPTION: Defines a Go module named 'example.com/newcycle/a' and specifies a dependency on 'example.com/newcycle/b' version v1.0.0 using the standard go.mod format. This is essential for managing Go project dependencies and ensuring reproducible builds. No external code dependencies are needed beyond Go modules, inputs are module paths and versions, and output is the go.mod declaration. Cyclic dependencies as illustrated require careful version management.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_newcycle_a_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/newcycle/a\n\nrequire example.com/newcycle/b v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Testing Complex Regex Patterns with Grouping in Go\nDESCRIPTION: Test cases for more complex regular expressions that combine grouping with word boundaries and other assertions. These patterns test how different regex components interact with each other.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n\"^(?:^\\\\b(fo|foo)\\\\b)$\"\n```\n\n----------------------------------------\n\nTITLE: Building CGO Dependencies in Shell\nDESCRIPTION: This snippet ensures that the runtime/cgo package is present in the cache before building the main application. It highlights dependency management in Go applications using shell commands. Key operations include checking for dependencies and executing build commands, assuming the presence of the Go toolchain in the environment.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_dash_x.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir $WORK/tmp/cache\nenv GOCACHE=$WORK/tmp/cache\n\ngo build runtime/cgo\n\n\n```\n\n----------------------------------------\n\nTITLE: Main Module Go.mod Configuration\nDESCRIPTION: The go.mod file for the main module, specifying version requirements and replacement directives for all example modules. This file initially uses Go 1.15 but includes redundant roots that follow Go 1.17 lazy loading invariants.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_all.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/main\n\n// Note: this go.mod file initially specifies go 1.15,\n// but includes some redundant roots so that it\n// also already obeys the 1.17 lazy loading invariants.\ngo 1.15\n\nrequire (\n\texample.com/a v0.1.0\n\texample.com/b v0.1.0 // indirect\n\texample.com/q v0.1.0\n\texample.com/r v0.1.0 // indirect\n\texample.com/t v0.1.0\n\texample.com/u v0.1.0 // indirect\n)\n\nreplace (\n\texample.com/a v0.1.0 => ./a\n\texample.com/b v0.1.0 => ./b\n\texample.com/c v0.1.0 => ./c\n\texample.com/d v0.1.0 => ./d\n\texample.com/q v0.1.0 => ./q\n\texample.com/r v0.1.0 => ./r\n\texample.com/s v0.1.0 => ./s\n\texample.com/t v0.1.0 => ./t\n\texample.com/u v0.1.0 => ./u\n\texample.com/w v0.1.0 => ./w\n\texample.com/x v0.1.0 => ./x\n)\n```\n\n----------------------------------------\n\nTITLE: Strings package functions in Go\nDESCRIPTION: Functions for string manipulation in the strings package, including ReplaceAll for replacing all occurrences of a substring and Builder.Cap method.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.12.txt#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nfunc ReplaceAll(string, string, string) string\nmethod (*Builder) Cap() int\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Replacements\nDESCRIPTION: This snippet shows the content of the go.mod file, which defines the module and includes several replace directives for different versions of modules 'm' and 'm/p'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_ambiguous_arg.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com\n\ngo 1.16\n\nreplace (\n\tm v0.1.0 => ./m01\n\tm v0.2.0 => ./m02\n\tm v0.3.0 => ./m03\n\tm/p v0.1.0 => ./mp01\n\tm/p v0.2.0 => ./mp02\n\tm/p v0.3.0 => ./mp03\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Golang Module in go.mod File\nDESCRIPTION: This snippet defines the module name and Go version requirement in the standard go.mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo123_v0.0.1.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule rsc.io/needgo123\ngo 1.23\n```\n\n----------------------------------------\n\nTITLE: Version String Utilities - go/version - Go\nDESCRIPTION: Adds version-related utilities Compare (returns int), IsValid (returns bool), and Lang (returns string) for working with Go language and semantic versions. Used to compare, validate, or extract language identifier from version strings. Each function accepts or returns string arguments.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_15\n\nLANGUAGE: Go\nCODE:\n```\nfunc Compare(string, string) int\nfunc IsValid(string) bool\nfunc Lang(string) string\n```\n\n----------------------------------------\n\nTITLE: Defining a Minimal Go Module\nDESCRIPTION: Creates a go.mod file that defines a module named 'example.com' with Go 1.13 as the minimum required version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_init_empty.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com\n\ngo 1.13\n```\n\n----------------------------------------\n\nTITLE: Quote Package with External Dependencies\nDESCRIPTION: Quote package implementation with dependencies on rsc.io/sampler and golang.org/x/text/language packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_replace.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage quote\n\nimport (\n\t_ \"rsc.io/sampler\"\n\t_ \"golang.org/x/text/language\"\n)\n```\n\n----------------------------------------\n\nTITLE: Module Definition with Dependencies\nDESCRIPTION: Main module declaration with go version 1.17 and required dependencies including replacements for local modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_implicit.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/m\n\ngo 1.17\n\nreplace (\n\texample.net/lazy v0.1.0 => ./lazy\n\texample.net/requireincompatible v0.1.0 => ./requireincompatible\n)\n\nrequire example.net/lazy v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Functionality and Exported Function - Go\nDESCRIPTION: This Go file defines a simple main package with a main function printing a message and an exported function 'Mainer' returning an integer. The key purpose is to provide code under test coverage measurement. No external dependencies are required, and 'Mainer' is a trivial implementation for demonstration.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_main_import_path.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {\n\tprintln(\"hi mom\")\n}\n\nfunc Mainer() int {\n\treturn 42\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Fallback Root Usage in Certificate Verification using x509usefallbackroots GODEBUG Setting (Go 1.20)\nDESCRIPTION: Introduced in Go 1.20, this setting controls the use of embedded fallback certificate roots during crypto/x509 certificate verification when system roots are unavailable or explicitly bypassed. The default behavior depends on the system and configuration. This setting allows explicit control over enabling or disabling the fallback mechanism. Set via GODEBUG environment variable (e.g., GODEBUG=x509usefallbackroots=0).\nSOURCE: https://github.com/golang/go/blob/master/doc/godebug.md#2025-04-22_snippet_22\n\nLANGUAGE: plaintext\nCODE:\n```\nx509usefallbackroots\n```\n\n----------------------------------------\n\nTITLE: Fetching a Go Package with go get (Shell)\nDESCRIPTION: Downloads and installs the `rsc.io/fortune` package and its dependencies using the `go get` command. Assumes `GO111MODULE=on` is set or inferred.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_install_versioned.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo get rsc.io/fortune\n```\n\n----------------------------------------\n\nTITLE: Adding NewGCMWithTagSize function to crypto/cipher package in Go\nDESCRIPTION: Introduces a new function NewGCMWithTagSize in the crypto/cipher package. It takes a Block and an integer as parameters and returns an AEAD and an error.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.11.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc NewGCMWithTagSize(Block, int) (AEAD, error)\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Vendoring with Replacement\nDESCRIPTION: Tests the behavior of 'go mod vendor' command when a replacement is specified inside the vendor directory. It expects an error message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_replace.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n! go mod vendor\nstderr 'replacement path ./vendor/not-rsc.io/quote/v3 inside vendor directory'\n```\n\n----------------------------------------\n\nTITLE: Configurable PNG Compression Levels - image/png Package - Go\nDESCRIPTION: Adds constants, types, and fields for configuring PNG encoding compression. New compression level constants, a CompressionLevel int type, and the CompressionLevel field within Encoder struct facilitate custom compression selection. The Encode method on Encoder allows encoding an image to a writer with the given compression setting. Prerequisites: importing image/png, understanding io.Writer, and image.Image interfaces.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_14\n\nLANGUAGE: Go\nCODE:\n```\nconst BestCompression = -3\nconst BestCompression CompressionLevel\nconst BestSpeed = -2\nconst BestSpeed CompressionLevel\nconst DefaultCompression = 0\nconst DefaultCompression CompressionLevel\nconst NoCompression = -1\nconst NoCompression CompressionLevel\ntype CompressionLevel int\ntype Encoder struct {\n    CompressionLevel CompressionLevel\n    // ... other fields\n}\nmethod (*Encoder) Encode(io.Writer, image.Image) error\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Management in 'testdata' Directory\nDESCRIPTION: A bash script testing Go module management in a 'testdata' directory. It sets up a module, gets dependencies, verifies they're preserved after 'go mod tidy', and checks that vendoring works properly.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_in_testdata_dir.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=on\n\n# A module should be allowed in a directory named testdata.\ncd $WORK/testdata\ngo mod init testdata.tld/foo\n\n# Getting a package within that module should resolve its dependencies.\ngo get\ngrep 'rsc.io/quote' go.mod\n\n# Tidying the module should preserve those dependencies.\ngo mod tidy\ngrep 'rsc.io/quote' go.mod\n\n[short] stop\n\n# Vendoring the module's dependencies should work too.\ngo mod vendor\nexists vendor/rsc.io/quote\n\n# The same should work in directories with names starting with underscores.\ncd $WORK/_ignored\ngo mod init testdata.tld/foo\n\ngo get\ngrep 'rsc.io/quote' go.mod\n\ngo mod tidy\ngrep 'rsc.io/quote' go.mod\n\ngo mod vendor\nexists vendor/rsc.io/quote\n```\n\n----------------------------------------\n\nTITLE: Implementing Parallel Tests with Panic Handling in Go\nDESCRIPTION: Demonstrates a test setup with parallel sub-tests where one test deliberately panics while another continues execution. Includes setup and teardown functions managed through TestMain for test initialization and cleanup.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_main_panic.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage testmain_parallel_sub_panic_test\n\nimport \"testing\"\n\nfunc setup()    { println(\"setup()\") }\nfunc teardown() { println(\"teardown()\") }\nfunc TestA(t *testing.T) {\n\tt.Run(\"1\", func(t *testing.T) {\n\t\tt.Run(\"1\", func(t *testing.T) {\n\t\t\tt.Parallel()\n\t\t\tpanic(\"A/1/1 panics\")\n\t\t})\n\t\tt.Run(\"2\", func(t *testing.T) {\n\t\t\tt.Parallel()\n\t\t\tprintln(\"A/1/2 is ok\")\n\t\t})\n\t})\n}\n\nfunc TestMain(m *testing.M) {\n\tsetup()\n\tdefer teardown()\n\tm.Run()\n}\n```\n\n----------------------------------------\n\nTITLE: Testing GOCACHE Priority in Go Build System\nDESCRIPTION: This test script verifies that Go correctly prioritizes environment variables when determining the cache directory location. It tests the precedence order (GOCACHE > XDG_CACHE_HOME > HOME/.cache) and the fallback to 'off' when no location can be determined.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cache_unix.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=off\n\n# Integration test for cache directory calculation (cmd/go/internal/cache).\n\n[GOOS:windows] skip 'windows does not use XDG_CACHE_HOME'\n[GOOS:darwin]  skip 'darwin does not use XDG_CACHE_HOME'\n[GOOS:ios]     skip 'ios does not use XDG_CACHE_HOME'\n[GOOS:plan9]   skip 'plan9 does not use XDG_CACHE_HOME'\n\nmkdir $WORK/gocache\nmkdir $WORK/xdg\nmkdir $WORK/home\n\n# Set GOCACHE, XDG_CACHE_HOME, and HOME.\nenv GOCACHE=$WORK/gocache\nenv XDG_CACHE_HOME=$WORK/xdg\nenv HOME=$WORK/home\n\n# With all three set, we should prefer GOCACHE.\ngo env GOCACHE\nstdout $WORK'/gocache$'\n\n# Without GOCACHE, we should prefer XDG_CACHE_HOME over HOME.\nenv GOCACHE=\ngo env GOCACHE\nstdout $WORK'/xdg/go-build$$'\n\n# With only HOME set, we should use $HOME/.cache.\nenv XDG_CACHE_HOME=\ngo env GOCACHE\nstdout $WORK'/home/.cache/go-build$'\n\n# With no guidance from the environment, we must disable the cache, but that\n# should not cause commands that do not write to the cache to fail.\nenv HOME=\ngo env GOCACHE\nstdout 'off'\n```\n\n----------------------------------------\n\nTITLE: Clearing Bad Sumdb Data in Go Module Cache\nDESCRIPTION: This snippet shows how to clear bad sumdb data by removing the cached wrong tree head and cached tiles, allowing successful module fetching afterwards.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb.txt#2025-04-22_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nrm $GOPATH/pkg/sumdb/$dbname/latest\ngo clean -modcache\ngo get rsc.io/fortune\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of fmt.Println with Format Directive in Go\nDESCRIPTION: This snippet demonstrates a common mistake where fmt.Println is used with a string containing a formatting directive (%s). The go vet tool will flag this as an error because fmt.Println doesn't interpret format directives, unlike fmt.Printf.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vet.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\nimport \"fmt\"\n\nfunc A() {\n    fmt.Println(\"%s\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Workspace\nDESCRIPTION: Workspace configuration file specifying Go version and included modules\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\n\nuse (\n\t./a\n\t./b\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Go Module Environment and Testing Package Resolution\nDESCRIPTION: This snippet sets the GO111MODULE environment variable and tests package resolution in the presence of a 'go.mod' directory. It verifies that the package is correctly identified as 'x/sub' both before and after creating the 'go.mod' directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dir.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GO111MODULE=on\n\ncd $WORK/sub\n\ngo list .\nstdout 'x/sub'\n\nmkdir go.mod\nexists go.mod\n\ngo list .\nstdout 'x/sub'\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Metadata with .mod File - Go\nDESCRIPTION: Specifies the module path for a Go module and sets the Go version compatibility using the '.mod' format. This file is used by the Go tooling system to identify and manage module dependencies. The key parameter is the module name ('example.com/ambiguous/a/b') and the Go language version required ('go 1.16').\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_ambiguous_a_b_v0.0.0-empty.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/ambiguous/a/b\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Inspecting Package Target and Asserting Binary Name (v2) (Shell)\nDESCRIPTION: Uses `go list` with `{{.Target}}` to get the target binary name for the `rsc.io/fortune/v2` package. The `! stdout` and `stdout` assertions check that the output does *not* match `v2(\\.exe)?$` but *does* match `fortune(\\.exe)?$`, indicating the binary name remains `fortune` even for the v2 module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_install_versioned.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo list -f '{{.Target}}' rsc.io/fortune/v2\n! stdout 'v2(\\.exe)?$'\nstdout 'fortune(\\.exe)?$'\n```\n\n----------------------------------------\n\nTITLE: Setting Go Module Environment Variable (Shell)\nDESCRIPTION: This command sets the `GO111MODULE` environment variable to `on`, ensuring that the subsequent Go commands operate in module-aware mode.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badzip.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n```\n\n----------------------------------------\n\nTITLE: Testing Go Build and Vendoring\nDESCRIPTION: This snippet tests Go build commands with and without vendoring, and checks the behavior of 'go list' command with different module configurations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n\n# Without vendoring, a build should succeed unless -mod=vendor is set.\n[!short] go build\n[!short] ! go build -mod=vendor\n\n# Without vendoring, 'go list' should report the replacement directory for\n# a package in a replaced module.\ngo list -f {{.Dir}} x\nstdout 'src[\\/]x'\n\n# 'go mod vendor' should copy all replaced modules to the vendor directory.\ngo mod vendor -v\nstderr '^# x v1.0.0 => ./x'\nstderr '^x'\nstderr '^# y v1.0.0 => ./y'\nstderr '^y'\nstderr '^# z v1.0.0 => ./z'\nstderr '^z'\n! stderr '^w'\ngrep 'a/foo/bar/b\\na/foo/bar/c' vendor/modules.txt # must be sorted\n```\n\n----------------------------------------\n\nTITLE: Testing Unset GO111MODULE Environment Variable in Go\nDESCRIPTION: Tests the behavior when GO111MODULE is unset, which should be equivalent to GO111MODULE=on. This verifies that module resolution works correctly in different directory structures when the environment variable is not explicitly set.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_enabled.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=\n\ncd $GOPATH/src/x/y/z\ngo env GOMOD\nstdout $GOPATH[/\\\\]src[/\\\\]x[/\\\\]y[/\\\\]z[/\\\\]go.mod\n\ncd $GOPATH/src/x/y\ngo env GOMOD\nstdout 'NUL|/dev/null'\n```\n\n----------------------------------------\n\nTITLE: Defining Package 'a' with Cgo and LDFLAGS (Go)\nDESCRIPTION: This Go package `a` uses Cgo to interact with C code. The `#cgo LDFLAGS: -L. -lb` directive tells the C linker to look for a library named `libb.a` (or `libb.so`) in the current directory (`.`) when linking package `a`. It imports the C namespace and defines a Go function `GoFn` that wraps a call to the external C function `CFn`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_undef.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n-- a/a.go --\npackage a\n\n// #cgo LDFLAGS: -L. -lb\n// extern int CFn(int);\nimport \"C\"\n\nfunc GoFn(v int) int { return int(C.CFn(C.int(v))) }\n```\n\n----------------------------------------\n\nTITLE: HTTP Client Tracing Structure Definition in Go\nDESCRIPTION: Defines ClientTrace struct in net/http/httptrace package for tracing HTTP client requests. Contains callback functions for various stages of HTTP connection lifecycle including DNS lookup, connection establishment, and request/response handling.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.7.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype ClientTrace struct {\n    GetConn func(string)\n    GotConn func(GotConnInfo)\n    PutIdleConn func(error)\n    GotFirstResponseByte func()\n    Got100Continue func()\n    DNSStart func(DNSStartInfo)\n    DNSDone func(DNSDoneInfo)\n    ConnectStart func(string, string)\n    ConnectDone func(string, string, error)\n    WroteHeaders func()\n    WroteRequest func(WroteRequestInfo)\n    Wait100Continue func()\n}\n```\n\n----------------------------------------\n\nTITLE: Attempting to Download Invalid Go Modules\nDESCRIPTION: Executes a go get command to download multiple modules with known issues. The command is expected to fail, and the subsequent lines check for specific error messages in the stderr output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_bad_filenames.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n! go get rsc.io/badfile1 rsc.io/badfile2 rsc.io/badfile3 rsc.io/badfile4 rsc.io/badfile5\n! stderr 'unzip.*badfile1'\nstderr 'unzip.*badfile2[\\/]@v[\\/]v1.0.0.zip:.*malformed file path \"☺.go\": invalid char ''☺'''\nstderr 'unzip.*badfile3[\\/]@v[\\/]v1.0.0.zip: rsc.io[\\/]badfile3@v1.0.0[\\/]x\\?y.go: malformed file path \"x\\?y.go\": invalid char ''\\?'''\nstderr 'unzip.*badfile4[\\/]@v[\\/]v1.0.0.zip: rsc.io[\\/]badfile4@v1.0.0[\\/]x[\\/]y.go: case-insensitive file name collision: \"x/Y.go\" and \"x/y.go\"'\nstderr 'unzip.*badfile5[\\/]@v[\\/]v1.0.0.zip: rsc.io[\\/]badfile5@v1.0.0[\\/]x[\\/]Y[\\/]zz[\\/]ww.go: case-insensitive file name collision: \"x/y\" and \"x/Y\"'\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Retraction Directive (go.mod file)\nDESCRIPTION: This standard `go.mod` file declares the module path as `example.com/retract/newname`, specifies Go version compatibility (1.16), and includes a `retract` directive. This directive signals to the Go tooling and other developers that version `v1.0.0-bad` of this module should not be used due to issues (indicated by the comment '// bad').\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rename_v1.9.0-new.txt#2025-04-22_snippet_2\n\nLANGUAGE: gomod\nCODE:\n```\nmodule example.com/retract/newname\n\ngo 1.16\n\n// bad\nretract v1.0.0-bad\n```\n\n----------------------------------------\n\nTITLE: Implementing Module 'm' Functionality\nDESCRIPTION: This Go file implements the functionality for module 'm'. It imports and uses the 'example.com/dep' package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace_conflict_override.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage m\n\nimport \"example.com/dep\"\n\nfunc F() {\n\tdep.G()\n}\n```\n\n----------------------------------------\n\nTITLE: Module B Configuration and Implementation\nDESCRIPTION: This snippet shows the go.mod file for module 'example.com/b', its main Go file, and a test file. It requires 'example.com/q' v1.1.0 and provides a function B().\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_prune.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/b\n\ngo 1.18\n\nrequire example.com/q v1.1.0\n\nreplace example.com/q v1.0.0 => ../q1_0_0\nreplace example.com/q v1.1.0 => ../q1_1_0\n```\n\nLANGUAGE: Go\nCODE:\n```\npackage b\n\nfunc B() {\n}\n```\n\nLANGUAGE: Go\nCODE:\n```\npackage b\n\nimport \"example.com/q\"\n\nfunc TestB() {\n\tq.PrintVersion()\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Version Request with go@1.22rc1\nDESCRIPTION: Tests how 'go get go@1.22rc1' uses the exact version 1.22rc1 and switches toolchains when GOTOOLCHAIN=auto is set.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_exec_toolchain.txt#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# go get go@1.22rc1 should use 1.22rc1 exactly, not a later release.\nenv GOTOOLCHAIN=local\ncp go.mod.new go.mod\n! go get go@1.22rc1\nstderr '^go: updating go.mod requires go >= 1.22rc1 \\(running go 1.21; GOTOOLCHAIN=local\\)'\n\nenv GOTOOLCHAIN=auto\ncp go.mod.new go.mod\ngo get go@1.22rc1\nstderr '^go: updating go.mod requires go >= 1.22rc1; switching to go1.22.9$'\nstderr '^go: upgraded go 1.1 => 1.22rc1$'\n! stderr '^go: added toolchain$'\n```\n\n----------------------------------------\n\nTITLE: Go Module Command Execution\nDESCRIPTION: Executes go mod tidy command and validates expected warning messages about go.mod in GOPATH\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_issue46807.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n! go mod tidy\nstderr '^go: warning: ignoring go.mod in \\$GOPATH'\nstderr '^go: go.mod file not found in current directory or any parent directory; see \\'go help modules\\''\n```\n\n----------------------------------------\n\nTITLE: Add Module Dependency\nDESCRIPTION: Command to add rsc.io/quote module as a dependency with specific version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_disabled.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo mod edit -require rsc.io/quote@v1.5.2\n```\n\n----------------------------------------\n\nTITLE: Configuring and Running Go Tests with Relative Imports\nDESCRIPTION: This snippet sets up the environment and runs Go tests using relative imports. It disables module mode, sets a custom GOPATH, and executes the test command.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_relative_import.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GO111MODULE=off # relative import not supported in module mode\n\n# Run tests outside GOPATH.\nenv GOPATH=$WORK/tmp\n\ngo test ./testimport\nstdout '^ok'\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition for Toolchain Test\nDESCRIPTION: Standard go.mod file defining the module for the test toolchain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-amd64.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: A go.mod file that defines a module named 'example' with Go 1.18 as the required version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fail_newline.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example\n\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Declaring Module Dependency with Prerelease Version - Go Module - go.mod\nDESCRIPTION: Declares a Go module named 'example.com/usemissingpre' and specifies a dependency on 'example.com/missingpkg' at version 'v1.0.1-beta', which is a prerelease newer than the current latest version. This file is intended to be placed as 'go.mod' at the root of the module, and is required for Go module-aware builds. Key parameters include module path and required dependencies with their versions. It must follow the standard Go module file format.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_usemissingpre_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go.mod\nCODE:\n```\nmodule example.com/usemissingpre\n\nrequire example.com/missingpkg v1.0.1-beta\n```\n\n----------------------------------------\n\nTITLE: Main package implementation\nDESCRIPTION: A simple main package that imports a dependency package but doesn't do anything.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage main\nimport _ \"test/dep\"\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Defining Module Dependencies for x1\nDESCRIPTION: This go.mod file for the x1 module defines its dependencies on specific versions of modules z and w.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_convergence_loop.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/x\n\ngo 1.16\n\nrequire (\n\texample.net/z v0.2.0-pre\n\texample.net/w v0.2.0-pre\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Configuration Files\nDESCRIPTION: These files define the Go module structure used in the tests. They include the main go.mod file, the final expected go.mod after tidy, and a local module replacement. These configurations help test how Go module commands handle missing dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_e.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n-- go.mod --\nmodule example.com/untidy\ngo 1.16\nreplace example.net/m v0.1.0 => ./m\n-- go.mod.final --\nmodule example.com/untidy\n\ngo 1.16\n\nreplace example.net/m v0.1.0 => ./m\n\nrequire example.net/m v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Creating a Main Package Entry Point - Go\nDESCRIPTION: This Go program specifies a main package with a minimal main function, establishing an executable program. No functionality is present; it acts as a skeletal entry point, often required for tools or command-line applications in Go projects.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_tool.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\\n\\nfunc main(){}\\n\n```\n\n----------------------------------------\n\nTITLE: Testing 'go list' Command Outside Module\nDESCRIPTION: Demonstrates that 'go list' fails when run in a directory without a module, but succeeds for standard library packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_outside.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n! go list\nstderr '^go: go.mod file not found in current directory or any parent directory; see ''go help modules''$'\ngo list -m\nstdout '^command-line-arguments$'\n! go list ./needmod\nstderr '^go: go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n\ngo list all\n! stdout .\nstderr 'warning: \"all\" matched no packages'\n\ngo list -deps cmd\nstdout '^fmt$'\nstdout '^cmd/go$'\n\ngo list $GOROOT/src/fmt\nstdout '^fmt$'\n\ngo list ./needmod/needmod.go\nstdout 'command-line-arguments'\n\n! go list example.com/printversion\nstderr '^no required module provides package example.com/printversion: go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n```\n\n----------------------------------------\n\nTITLE: Main Package Example Implementation\nDESCRIPTION: Minimal Go program implementation with empty main function\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_buildvcs_auto.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Defining Module Path in Go Module - Plaintext\nDESCRIPTION: This snippet defines the module path for a Go project using the 'module' directive in a .mod file. No dependencies are directly specified; the 'module' line establishes the base import path for packages in this module. The input file is expected to be named 'go.mod' or similar and is typically required for Go modules management with 'go mod' commands.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_join_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-- .mod --\\nmodule example.com/join\n```\n\n----------------------------------------\n\nTITLE: Testing Go Build Cache Behavior via Shell Commands - Shell\nDESCRIPTION: This shell snippet orchestrates cache initialization, running builds to populate the Go build cache, and a series of assertions to verify cache state and command-line error handling. It uses environment variables to control GOCACHE, shell commands to run go build and go clean, and checks file system state with exists and expected error output through stderr assertions. Machine-specific caveats such as requiring GOCACHE to be an absolute path are tested. Prerequisites include a working Go installation and shell environment with required utilities (exists, go, etc.). Inputs and outputs are managed through file system side-effects and error messages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/clean_cache_n.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# We're testing cache behavior, so start with a clean GOCACHE.\nenv GOCACHE=$WORK/cache\n\n# Build something so that the cache gets populates\ngo build main.go\n\n# Check that cache contains directories before running\nexists $GOCACHE/00\n\n# Run go clean -cache -n and ensure that directories weren't deleted\ngo clean -cache -n\nexists $GOCACHE/00\n\n# Re-run go clean cache without the -n flag go ensure that directories were properly removed\ngo clean -cache\n! exists $GOCACHE/00\n\n! go clean -cache .\nstderr 'go: clean -cache cannot be used with package arguments'\n\n# GOCACHE must be an absolute path.\nenv GOCACHE=.\n! go clean -cache\nstderr 'go: GOCACHE is not an absolute path'\n\n```\n\n----------------------------------------\n\nTITLE: Package A Test File with External Dependency\nDESCRIPTION: A test file for package 'a' that imports 'rsc.io/quote' as a test dependency. This is used to test how 'go get' handles test dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_test.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage a_test\n\nimport _ \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Go Module with Module Directive - Go\nDESCRIPTION: This snippet uses a 'module' directive to specify the module path 'example.com/nest' in a Go module file. It marks the root of a Go module for dependency management. No additional dependencies are included, and the file serves as a starting point for managing source and dependency information in the Go ecosystem. It is required in every root module directory. No explicit relationships are specified with submodules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_nest_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/nest\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module for Fuzzing Test\nDESCRIPTION: This snippet defines the Go module for the fuzzing test project, specifying the module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_dup_cache.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule fuzztest\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Initialization Behavior Shell Script\nDESCRIPTION: A shell script that tests Go's behavior for suggesting module initialization when no go.mod file exists. It verifies that Go suggests initialization when finding a .git/config file in a regular project, but not in $GOROOT directories.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_convert_git.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n\n# We should not create a go.mod file unless the user ran 'go mod init' explicitly.\n# However, we should suggest 'go mod init' if we can find an alternate config file.\ncd $WORK/test/x\n! go list .\nstderr 'found .git/config in .*[/\\\\]test'\nstderr '\\s*cd \\.\\.\\. && go mod init'\n\n# The command we suggested should succeed.\ncd ..\ngo mod init\ngo list -m all\nstdout '^m$'\n\n# We should not suggest creating a go.mod file in $GOROOT, even though there may be a .git/config there.\ncd $GOROOT\n! go list .\n! stderr 'go mod init'\n\n# We should also not suggest creating a go.mod file in $GOROOT if its own\n# .git/config has been stripped away and we find one in a parent directory.\n# (https://golang.org/issue/34191)\nenv GOROOT=$WORK/parent/goroot\ncd $GOROOT\n! go list .\n! stderr 'go mod init'\n\ncd $GOROOT/doc\n! go list .\n! stderr 'go mod init'\n```\n\n----------------------------------------\n\nTITLE: Cgo Implementation File (Go/C)\nDESCRIPTION: A Go file with Cgo code that imports and calls a C function. It includes a simple conditional branch to test coverage reporting on Go code that interfaces with C.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_cgo_extra_file.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\n/*\nvoid\nf(void)\n{\n}\n*/\nimport \"C\"\n\nvar b bool\n\nfunc F() {\n\tif b {\n\t\tfor {\n\t\t}\n\t}\n\tC.f()\n}\n```\n\n----------------------------------------\n\nTITLE: Module A Implementation\nDESCRIPTION: Implementation of module 'a' that imports and uses package 'p'\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_relevant_dependency.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\nimport (\n\t\"example.com/p\"\n)\n\nfunc Foo() {\n\tp.P()\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Git Environment Variables and Repository Initialization\nDESCRIPTION: Configures Git author and committer information for the repository and initializes a new Git repository. Sets up environment variables for consistent authorship.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/querytest.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GIT_AUTHOR_NAME='Russ Cox'\nenv GIT_AUTHOR_EMAIL='rsc@golang.org'\nenv GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME\nenv GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL\n\ngit init\n```\n\n----------------------------------------\n\nTITLE: Configuring Netrc File for Authentication\nDESCRIPTION: Sets up a netrc file with credentials for authenticating with the vcs-test.golang.org server.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_auth.txt#2025-04-22_snippet_4\n\nLANGUAGE: Plain Text\nCODE:\n```\n-- $WORK/netrc --\nmachine vcs-test.golang.org\n\tlogin aladdin\n\tpassword opensesame\n```\n\n----------------------------------------\n\nTITLE: Automatic Version Correction in go.mod\nDESCRIPTION: Tests that other Go commands automatically correct commit hashes to proper versions in the go.mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_commit.txt#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngo list -m -mod=mod all\ngrep 'rsc.io/quote v1.5.1' go.mod\n```\n\n----------------------------------------\n\nTITLE: Configuring go.mod with Tools and Replace Directive - Go\nDESCRIPTION: This snippet shows a go.mod file that defines a module, Go version, external tool dependencies, a replace directive redirecting a dependency to a local path, and required module versions. It serves to configure module identity, tool plugins, and local dependency overrides in a Go project. The key parameters are 'module', 'go', 'tool', 'replace', and 'require', which must be set to establish correct build and tooling resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_tool.txt#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nmodule example.com/foo\\n\\ngo 1.24\\n\\ntool example.com/foo/cmd/eg\\ntool example.com/dependency/cmd/bar\\n\\nreplace example.com/dependency => ./dependency\\n\\nrequire example.com/dependency v1.0.0\\n\n```\n\n----------------------------------------\n\nTITLE: Testing 'go mod tidy' Command Output in Go\nDESCRIPTION: This script tests the 'go mod tidy' command with and without the '-x' flag. It verifies that the command doesn't print executed commands without '-x', but does print them when '-x' is used. The test removes the download cache for 'rsc.io/quote' before each run to ensure consistent behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_support_buildx.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nrm $GOPATH/pkg/mod/cache/download/rsc.io/quote\ngo mod tidy\n! stderr 'get '$GOPROXY\n\nrm $GOPATH/pkg/mod/cache/download/rsc.io/quote\ngo mod tidy -x\nstderr 'get '$GOPROXY\n```\n\n----------------------------------------\n\nTITLE: Setting and Testing Go Module Environment - Shell\nDESCRIPTION: This shell snippet demonstrates configuring the Go module environment using environment variables and commands to ensure required and indirect dependencies are handled by Go's module system. It uses GO111MODULE=on to enable module mode, GOFLAGS=-mod=readonly to prevent implicit changes, and issues go mod graph, go list -m all, and go list all to validate module graph, build list, and package resolution. Expected outputs (stdout) are checked to verify proper dependency resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n\nenv GOFLAGS=-mod=readonly\n\ngo mod graph\nstdout i@v0.1.0\n\ngo list -m all\nstdout '^i v0.1.0'\n\ngo list all\nstdout '^i$'\n```\n\n----------------------------------------\n\nTITLE: Testing Go Version Request with go@1.22\nDESCRIPTION: Tests how 'go get go@1.22' resolves to the latest 1.22 version and switches toolchains when GOTOOLCHAIN=auto is set.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_exec_toolchain.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# go get go@1.22 should resolve to the latest 1.22\nenv GOTOOLCHAIN=local\ncp go.mod.new go.mod\n! go get go@1.22\nstderr '^go: updating go.mod requires go >= 1.22.9 \\(running go 1.21; GOTOOLCHAIN=local\\)'\n\nenv GOTOOLCHAIN=auto\ncp go.mod.new go.mod\ngo get go@1.22\nstderr '^go: updating go.mod requires go >= 1.22.9; switching to go1.22.9$'\n```\n\n----------------------------------------\n\nTITLE: Toolow Package Import\nDESCRIPTION: Package file importing an older package version\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_indirect.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage toolow\n\nimport _ \"example.net/indirect/oldpkg\"\n```\n\n----------------------------------------\n\nTITLE: Running Go List with Module Replacement\nDESCRIPTION: This snippet tests the 'go list' command by ensuring a desired version of a module is listed from the module cache. Dependencies are first downloaded using 'go get'. The snippet checks the behavior of 'go list' with replaced module versions in golang.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_replace_dir.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Populate go.sum and download dependencies.\ngo get\n\n# Ensure v1.5.2 is also in the cache so we can list it.\ngo mod download rsc.io/quote@v1.5.2\n\n! go list $GOPATH/pkg/mod/rsc.io/quote@v1.5.2\nstderr '^directory ..[/\\\\]pkg[/\\\\]mod[/\\\\]rsc.io[/\\\\]quote@v1.5.2 outside main module or its selected dependencies$'\n\ngo list $GOPATH/pkg/mod/rsc.io/quote@v1.5.1\nstdout 'rsc.io/quote'\n```\n\n----------------------------------------\n\nTITLE: Testing Go Mod Vendor with Alternative Directory\nDESCRIPTION: This snippet tests the 'go mod vendor' command with an alternative vendor directory specified using the -o flag.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# 'go mod vendor' should work with an alternative vendor directory if the -o flag is provided.\ngo mod vendor -v -o alternative-vendor-dir\nexists alternative-vendor-dir/modules.txt\nexists alternative-vendor-dir/a/foo/LICENSE\n\n# 'go mod vendor' should interpret paths relative to the current working directory when the -o flag is provided.\nmkdir dir1\nmkdir dir2\n\ncd dir1\ngo mod vendor -v -o relative-vendor-dir\n\ngo mod vendor -v -o ../dir2/relative-vendor-dir\n\ncd ..\nexists dir1/relative-vendor-dir/modules.txt\nexists dir1/relative-vendor-dir/a/foo/LICENSE\nexists dir2/relative-vendor-dir/modules.txt\nexists dir2/relative-vendor-dir/a/foo/LICENSE\n```\n\n----------------------------------------\n\nTITLE: Executing Go Module Version Resolution Test\nDESCRIPTION: Runs a Go test to verify that the correct pseudo-version is resolved based on the semantically-latest tag in the commit history. It uses the 'go get' command to fetch a specific repository and 'go list' to check the resolved version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo_other_branch.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngo get vcs-test.golang.org/git/tagtests.git@master\ngo list -m all\nstdout '^vcs-test.golang.org/git/tagtests.git v0.2.3-0\\.'\n```\n\n----------------------------------------\n\nTITLE: Building Go Module with Untagged Version via Proxy\nDESCRIPTION: This script initializes a new Go module, fetches an untagged version of a package, and verifies the correct version is retrieved. It uses environment variables and Go commands to test module behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_latest_pseudo.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n\ngo mod init m\ngo get example.com/notags\ngo list -m all\nstdout '^example.com/notags v0.0.0-20190507143103-cc8cbe209b64$'\n```\n\n----------------------------------------\n\nTITLE: Implementing Dependency Package 'p1' (Go)\nDESCRIPTION: This Go file defines the 'p1' package within the 'coverdep' module. It imports the standard 'errors' package using the blank identifier (_). This forces the initialization of the 'errors' package without directly using any of its functions, which might be relevant for testing dependency tracking or initialization side effects in the context of code coverage.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_dash_c.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n-- p1/p1.go --\npackage p1\n\nimport _ \"errors\"\n```\n\n----------------------------------------\n\nTITLE: Combining Comparable Values with Or Function - Package cmp - Go\nDESCRIPTION: This function, introduced in package cmp, allows combining multiple values of any comparable type using a variadic function with type parameter $0. It returns a value of type $0 based on the semantics (e.g., logical or, max, etc.) implemented by the function body. Type parameter $0 must be comparable.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nfunc Or[$0 comparable](...$0) $0\n```\n\n----------------------------------------\n\nTITLE: Replacing Module Version and Updating Dependencies in Go\nDESCRIPTION: This snippet shows how to replace a module version using 'go mod edit', update dependencies with 'go mod tidy', and verify the changes in go.sum.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_replaced.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngo mod edit -replace rsc.io/quote@v1.5.0=rsc.io/quote@v1.5.1\ngo mod tidy\ngrep 'rsc.io/quote v1.5.1' go.sum\ncp go.sum go.sum.tidy\n```\n\n----------------------------------------\n\nTITLE: Testing Go Build Language Version Flag\nDESCRIPTION: A shell command to build a Go file with the -n flag to show the commands without executing them. The stderr assertion checks that the -lang flag with Go version is present in the output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_vers.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo build -n x.go\nstderr '-lang=go1\\.[0-9]+'\n```\n\n----------------------------------------\n\nTITLE: Regressing Test for Non-Existent Package Import Using Go Command\nDESCRIPTION: This shell script snippet verifies that attempting to list a non-existent package using the Go command in module mode outputs a clear error message. The test specifically checks the stderr output for the expected message format. It requires Go to be installed and configured properly, with module mode enabled.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cmd_import_error.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n! go list cmd/unknown\nstderr '^package cmd/unknown is not in std \\('$GOROOT'[/\\\\]src[/\\\\]cmd[/\\\\]unknown\\)$'\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo list -f '{{range .DepsErrors}}{{.Err}}{{end}}' x.go\nstdout '^package cmd/unknown is not in std \\('$GOROOT'[/\\\\]src[/\\\\]cmd[/\\\\]unknown\\)$'\n```\n\n----------------------------------------\n\nTITLE: Accessing Verbose Help in Go CLI\nDESCRIPTION: This command demonstrates how to access verbose help information using square brackets. The [verbose] option likely provides more detailed explanations of commands and features.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/script_help.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelp [verbose]\n```\n\n----------------------------------------\n\nTITLE: Testing Quote Package Functions in Go\nDESCRIPTION: This snippet contains unit tests for the quote package functions. It sets the LC_ALL environment variable to 'en' and tests the Hello, Glass, Go, and Opt functions for expected outputs.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709162918-a91498bed0a7.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage quote\n\nimport (\n\t\"os\"\n\t\"testing\"\n)\n\nfunc init() {\n\tos.Setenv(\"LC_ALL\", \"en\")\n}\n\nfunc TestHello(t *testing.T) {\n\thello := \"Hello, world.\"\n\tif out := Hello(); out != hello {\n\t\tt.Errorf(\"Hello() = %q, want %q\", out, hello)\n\t}\n}\n\nfunc TestGlass(t *testing.T) {\n\tglass := \"I can eat glass and it doesn't hurt me.\"\n\tif out := Glass(); out != glass {\n\t\tt.Errorf(\"Glass() = %q, want %q\", out, glass)\n\t}\n}\n\nfunc TestGo(t *testing.T) {\n\tgo1 := \"Don't communicate by sharing memory, share memory by communicating.\"\n\tif out := Go(); out != go1 {\n\t\tt.Errorf(\"Go() = %q, want %q\", out, go1)\n\t}\n}\n\nfunc TestOpt(t *testing.T) {\n\topt := \"If a program is too slow, it must have a loop.\"\n\tif out := Opt(); out != opt {\n\t\tt.Errorf(\"Opt() = %q, want %q\", out, opt)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Download with JSON Output\nDESCRIPTION: Executes a Go module download command with JSON output for a specific version of 'rsc.io/quote'. The command is expected to fail due to sum database verification issues, and the output is checked for an error message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_json.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n! go mod download -json 'rsc.io/quote@<=v1.5.0'\nstdout '\"Error\": \".*verifying (module|go.mod)'\n```\n\n----------------------------------------\n\nTITLE: Go Module Version Info\nDESCRIPTION: This JSON snippet provides metadata for a Go module version, particularly version v1.9.0. This metadata is crucial for version management and compatibility checks during module use and development. The JSON structure includes key-value pairs representing version information. It has no specific inputs and outputs other than metadata visibility.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_prerelease_v1.9.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\"Version\":\"v1.9.0\"}\n```\n\n----------------------------------------\n\nTITLE: Minimal Go Program for Module 'x' (Go)\nDESCRIPTION: Defines a basic Go program located in 'x/main.go'. It contains the main package declaration and an empty main function, serving as the entry point for an executable. This file is part of the 'example.com/x' module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_init_path.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n-- x/main.go --\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Defining a Go Main Executable Entry Point - Go\nDESCRIPTION: This Go snippet provides a simple main package with a single entry point, printing 'hello!' to standard output. It is used as the executable code for building and testing Go build scenarios demonstrated in the shell script. Dependencies: Uses the Go standard library only (fmt). Key input is the implicit execution of the main program. Output: Prints to standard output. There are no parameters, limitations, or configuration requirements beyond Go 1.12 compatibility as specified by go.mod.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/clean_binary.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(\"hello!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Quote Functions in Go\nDESCRIPTION: Defines four functions (Hello, Glass, Go, Opt) that return different quotes. The Hello function uses an external sampler package while others return hardcoded strings.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180214005840-23179ee8a569.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage quote\n\nimport \"rsc.io/sampler\"\n\nfunc Hello() string {\n\treturn sampler.Hello()\n}\n\nfunc Glass() string {\n\treturn \"I can eat glass and it doesn't hurt me.\"\n}\n\nfunc Go() string {\n\treturn \"Don't communicate by sharing memory, share memory by communicating.\"\n}\n\nfunc Opt() string {\n\treturn \"If a program is too slow, it must have a loop.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module Declaration\nDESCRIPTION: Go module definition for the inlines test package. Specifies the module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_shorten_pkg.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule inlines\n\ngo 1.21\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Environment for Go Issue #64589\nDESCRIPTION: This snippet sets up the test environment by locating the real clang compiler, creating a fake clang binary, and configuring the PATH to use the fake clang.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cc_cache_issue64589.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo run ./which clang\ncp stdout $WORK/.realclang\n\nmkdir $WORK/bin\ngo build -o $WORK/bin/clang$GOEXE ./fakeclang\n[!GOOS:plan9] env PATH=$WORK${/}bin\n[GOOS:plan9] env path=$WORK${/}bin\n\nenv CGO_ENABLED=1\n\nenv GOCACHE=$WORK${/}.cache\nmkdir $GOCACHE\n```\n\n----------------------------------------\n\nTITLE: Specifying Module Version in .info File (JSON)\nDESCRIPTION: This JSON snippet represents the content of a .info file for a Go module. It specifies the module's version as 'v1.0.0'. This file is typically part of the Go module cache or proxy system.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_incompatiblewithsub_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.0.0\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Module Cache Write Permissions Test Script\nDESCRIPTION: This shell script tests the behavior of the -modcacherw flag for Go modules which makes directories in the module cache writable while keeping files read-only. It verifies proper permissions across different operations like go get, go mod download, and go tool commands.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_cache_rw.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Regression test for golang.org/issue/31481.\n\nenv GO111MODULE=on\n\n# golang.org/issue/31481: an explicit flag should make directories in the module\n# cache writable in order to work around the historical inability of 'rm -rf' to\n# forcibly remove files in unwritable directories.\ngo get -modcacherw rsc.io/quote@v1.5.2\ncp $WORK/extraneous.txt $GOPATH/pkg/mod/rsc.io/quote@v1.5.2/extraneous_file.go\n\n# After adding an extraneous file, 'go mod verify' should fail.\n! go mod verify\n\n# However, files within those directories should still be read-only to avoid\n# accidental mutations.\n[!root] ! cp $WORK/extraneous.txt $GOPATH/pkg/mod/rsc.io/quote@v1.5.2/go.mod\n\n# If all 'go' commands ran with the flag, the system's 'rm' binary\n# should be able to remove the module cache if the '-rf' flags are set.\n[!GOOS:windows] [exec:rm] exec rm -rf $GOPATH/pkg/mod\n[!GOOS:windows] [!exec:rm] go clean -modcache\n[GOOS:windows] [exec:cmd.exe] exec cmd.exe /c rmdir /s /q $GOPATH\\pkg\\mod\n[GOOS:windows] [!exec:cmd.exe] go clean -modcache\n! exists $GOPATH/pkg/mod\n\n# The directories in the module cache should by default be unwritable,\n# so that tests and tools will not accidentally add extraneous files to them.\n# Windows does not respect FILE_ATTRIBUTE_READONLY on directories, according\n# to MSDN, so there we disable testing whether the directory itself is\n# unwritable.\ngo get rsc.io/quote@latest\n[!root] ! cp $WORK/extraneous.txt $GOPATH/pkg/mod/rsc.io/quote@v1.5.2/go.mod\n[!GOOS:windows] [!root] ! cp $WORK/extraneous.txt $GOPATH/pkg/mod/rsc.io/quote@v1.5.2/extraneous_file.go\n! exists $GOPATH/pkg/mod/rsc.io/quote@v1.5.2/extraneous_file.go\n\n\n# Repeat part of the test with 'go mod download' instead of 'go get' to verify\n# -modcacherw is supported on 'go mod' subcommands.\ngo clean -modcache\ngo mod download -modcacherw rsc.io/quote\ncp $WORK/extraneous.txt $GOPATH/pkg/mod/rsc.io/quote@v1.5.2/extraneous_file.go\n! go mod verify\n[!root] ! cp $WORK/extraneous.txt $GOPATH/pkg/mod/rsc.io/quote@v1.5.2/go.mod\n\n# Repeat part of the test with 'go tool'\ngo mod edit -tool example.com/tools/cmd/hello -require example.com/tools@v1.0.0\ngo mod download -modcacherw example.com/tools\ngo clean -modcache\ngo tool -modcacherw hello\ncp $WORK/extraneous.txt $GOPATH/pkg/mod/example.com/tools@v1.0.0/extraneous_file.go\n! go mod verify\n[!root] ! cp $WORK/extraneous.txt $GOPATH/pkg/mod/example.com/tools@v1.0.0/cmd/hello/hello.go\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Dependency\nDESCRIPTION: This Go module definition shows how to specify a module path and declare a dependency on another Go package. The 'require' directive specifies a dependency on the 'rsc.io/quote' package with version 'v1.3.0'. This setup is crucial for module resolution and dependency management in Go.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_latemigrate_v2_v2.0.1.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n-- .mod --\nmodule example.com/latemigrate/v2\n\nrequire rsc.io/quote v1.3.0\n```\n\nLANGUAGE: Go\nCODE:\n```\n-- go.mod --\nmodule example.com/latemigrate/v2\n\nrequire rsc.io/quote v1.3.0\n```\n\n----------------------------------------\n\nTITLE: Verifying Go Build Flag Order with -gcflags in Shell\nDESCRIPTION: This shell script snippet navigates into the 'm' directory, executes a dry run (`-n`) of the Go build command specifying the '-lang=go1.17' garbage collector flag, and then checks the standard error output (`stderr`) to ensure that the user-provided flag appears after the Go version flag derived from the go.mod file (expected: '-lang=go1.16.* -lang=go1.17'). This specifically tests the fix for Go issue 47682.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_gcflags_order.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd m\ngo build -n -gcflags=-lang=go1.17\nstderr ' -lang=go1.16.* -lang=go1.17'\n```\n\n----------------------------------------\n\nTITLE: Defining the Go Module Index Format (v2)\nDESCRIPTION: Describes the binary layout for a version 2 Go index file, representing a full module. It starts with a magic string 'go index v2\\n', followed by the offset to the string table, the number of packages, package directory/offset pairs, detailed information for each package (including errors, source files, imports, embeds, directives, constraints), and finally the string table marked by 0xFF. Uses little-endian uint32 and uvarint-prefixed strings.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/internal/modindex/index_format.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n“go index v2\\n”\nstr uint32 - offset of string table\nn uint32 - number of packages\nfor each rawPackage:\n\tdirname - string offset\n\tpackage - offset where package begins\nfor each rawPackage:\n\terror uint32 - string offset // error is produced by fsys.ReadDir or fmt.Errorf\n\tdir uint32 - string offset (directory path relative to module root)\n\tlen(sourceFiles) uint32\n\tsourceFiles [n]uint32 - offset to source file (relative to start of index file)\n\tfor each sourceFile:\n\t\terror - string offset // error is either produced by fmt.Errorf,errors.New or is io.EOF\n\t\tparseError - string offset // if non-empty, a json-encoded parseError struct (see below). Is either produced by io.ReadAll,os.ReadFile,errors.New or is scanner.Error,scanner.ErrorList\n\t\tsynopsis - string offset\n\t\tname - string offset\n\t\tpkgName - string offset\n\t\tignoreFile - int32 bool // report the file in Ignored(Go|Other)Files because there was an error reading it or parsing its build constraints.\n\t\tbinaryOnly uint32 bool\n\t\tcgoDirectives string offset // the #cgo directive lines in the comment on import \"C\"\n\t\tgoBuildConstraint  - string offset\n\t\tlen(plusBuildConstraints) - uint32\n\t\tplusBuildConstraints - [n]uint32 (string offsets)\n\t\tlen(imports) uint32\n\t\tfor each rawImport:\n\t\t\tpath - string offset\n\t\t\tposition - file, offset, line, column - uint32\n\t\tlen(embeds) uint32\n\t\tfor each embed:\n\t\t\tpattern - string offset\n\t\t\tposition - file, offset, line, column - uint32\n\t\tlen(directives) uint32\n\t\tfor each directive:\n\t\t\ttext - string offset\n\t\t\tposition - file, offset, line, column - uint32\n[string table]\n0xFF (marker)\n```\n\n----------------------------------------\n\nTITLE: Testing Error-Tolerant Mode for Go Module Commands\nDESCRIPTION: This script tests the error-tolerant '-e' flag for 'go mod tidy' and 'go mod vendor' commands. It demonstrates that with this flag, the commands will log errors but still succeed, updating go.mod or creating the vendor directory as appropriate even when dependencies are missing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_e.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# 'go mod tidy' still logs the errors, but succeeds and updates go.mod.\n\ngo mod tidy -e\nstderr -count=4 'cannot find module providing package'\ncmp go.mod.final go.mod\n\n\n# 'go mod vendor -e' still logs the errors, but creates a vendor directory\n# and exits with status 0.\n# 'go mod vendor -e' does not update go.mod and will not vendor packages that\n# would require changing go.mod, for example, by adding a requirement.\ncp go.mod.orig go.mod\ngo mod vendor -e\nstderr -count=2 'no required module provides package'\nstderr '^go: example.com/untidy imports\\n\\texample.net/m: module example.net/m provides package example.net/m and is replaced but not required; to add it:\\n\\tgo get example.net/m@v0.1.0$'\nexists vendor/modules.txt\n! exists vendor/example.net\n\ngo mod edit -require example.net/m@v0.1.0\ngo mod vendor -e\nstderr -count=3 'no required module provides package'\nexists vendor/modules.txt\nexists vendor/example.net/m/m.go\n```\n\n----------------------------------------\n\nTITLE: Test code with go:debug directive for panicnil control\nDESCRIPTION: A test file that demonstrates the use of //go:debug directive to set panicnil=1, allowing panic(nil) to actually trigger a panic that can be caught and handled.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_buildinfo_godebug_issue68053.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n//go:debug panicnil=1\npackage main_test\n\nimport (\n\t\"runtime/debug\"\n\t\"testing\"\n)\n\nfunc TestFoo(t *testing.T) {\n\tdefer func() {\n\t\tt.Fatal(recover())\n\t}()\n\n\tt.Log(debug.ReadBuildInfo())\n\tpanic(nil)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Chatty Benchmark in Go\nDESCRIPTION: This Go code defines a benchmark function that generates chatty output and errors. It creates three sub-benchmarks, each logging messages and an error.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_benchmark_chatty_fail.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage chatty_bench\n\nimport (\n\t\"testing\"\n\t\"fmt\"\n)\n\nfunc BenchmarkChatty(b *testing.B) {\n    for i := 0; i < 3; i++ {\n        b.Run(fmt.Sprintf(\"sub-%d\", i), func(b *testing.B) {\n            for j := 0; j < 2; j++ {\n                b.Logf(\"this is sub-%d\", i)\n            }\n            b.Errorf(\"error from sub-%d\", i)\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Lazy Module\nDESCRIPTION: Defines a 'lazy' module with its own dependency on a specific version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// Module lazy requires example.com/version v1.0.1.\n//\n// However, since this module is lazy, its dependents\n// should not need checksums for that version of the module\n// unless they actually import packages from it.\nmodule example.net/lazy\n\ngo 1.17\n\nrequire example.com/version v1.0.1\n```\n\n----------------------------------------\n\nTITLE: Testing 'go build' with Null Output (Shell)\nDESCRIPTION: This script segment tests the behavior of `go build -o $devnull`. It changes back to the parent directory, runs `go build` on the `y` package, directing the output executable to the null device (`$devnull`), and then compares the null device with an empty file to ensure it remained unchanged. This addresses issue #12407. It depends on the `cmp` command and shell variables `$devnull` and `$WORK`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/devnull.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Issue 12407: go build -o /dev/null should succeed.\ncd ..\ngo build -o $devnull y\ncmp $devnull $WORK/empty.txt\n```\n\n----------------------------------------\n\nTITLE: Enabling Go Modules via Environment Variable (Shell)\nDESCRIPTION: Sets the GO111MODULE environment variable to 'on'. This explicitly enables Go module support, ensuring that the subsequent Go commands operate in module-aware mode, regardless of the project's location relative to GOPATH.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GO111MODULE=on\n```\n\n----------------------------------------\n\nTITLE: Testing Go 1.14 behavior with vendor consistency checks\nDESCRIPTION: Demonstrates that Go 1.14 enables -mod=vendor by default and performs stricter consistency checks between go.mod and vendor/modules.txt.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_auto.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo mod edit -go=1.14\n\n! go list -f {{.Dir}} -tags tools all\nstderr '^go: inconsistent vendoring in '$WORK[/\\\\]auto':$'\nstderr '^\\texample.com/printversion@v1.0.0: is explicitly required in go.mod, but not marked as explicit in vendor/modules.txt'\nstderr '^\\texample.com/unused: is replaced in go.mod, but not marked as replaced in vendor/modules.txt'\nstderr '^\\texample.com/version@v1.2.0: is replaced in go.mod, but not marked as replaced in vendor/modules.txt'\nstderr '^\\tTo ignore the vendor directory, use -mod=readonly or -mod=mod.\\n\\tTo sync the vendor directory, run:\\n\\t\\tgo mod vendor$'\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Go Main Package\nDESCRIPTION: This snippet shows a minimal Go main package with an empty main function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pkgtags.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module and Dependencies (gomod)\nDESCRIPTION: This `go.mod` file defines a Go module named `m`. It declares a single dependency on the module `v.com` at version `v1.0.0`. This file is essential for managing dependencies in Go modules mode.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_trimpath_macro.txt#2025-04-22_snippet_1\n\nLANGUAGE: gomod\nCODE:\n```\nmodule m\n\nrequire v.com v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Querying Latest Module Version Without Retraction using Go List\nDESCRIPTION: Tests the selection of a previously released version for a module when querying the latest version without considering self-retractions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_retract.txt#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\n# 'go list -m mod@latest' selects a previous release version, not self-retracted latest.\\ngo list -m -f '{{.Version}}{{with .Retracted}} retracted{{end}}' example.com/retract/self/prev@latest\\nstdout '^v1.1.0$'\n```\n\n----------------------------------------\n\nTITLE: Testing go work use recursive command\nDESCRIPTION: Shell commands that run 'go work use -r .' and compare the resulting go.work file with an expected outcome (go.work.want).\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_issue50958.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo work use -r .\ncmp go.work go.work.want\n```\n\n----------------------------------------\n\nTITLE: Efficient Buffer Encoding/Decoding with Append Methods - encoding/base32, encoding/base64, encoding/hex - Go\nDESCRIPTION: New AppendEncode and AppendDecode methods are provided for *Encoding types in encoding/base32 and encoding/base64, and standalone functions in encoding/hex, supporting encoding/decoding directly into provided buffers. Inputs and outputs are byte slices ([]uint8), and error is returned only for decode methods. These APIs reduce allocations and enable in-place processing.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\nfunc (enc *Encoding) AppendDecode(dst []uint8, src []uint8) ([]uint8, error)\nfunc (enc *Encoding) AppendEncode(dst []uint8, src []uint8) []uint8\n```\n\nLANGUAGE: Go\nCODE:\n```\nfunc AppendDecode(dst []uint8, src []uint8) ([]uint8, error)\nfunc AppendEncode(dst []uint8, src []uint8) []uint8\n```\n\n----------------------------------------\n\nTITLE: Testing version resolution with explicit +incompatible tag\nDESCRIPTION: Fetches v2.0.0+incompatible explicitly and verifies the version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo get ...test@v2.0.0+incompatible\ngo list -m all\nstdout '^github.com/rsc/legacytest v2\\.0\\.0\\+incompatible$'\n```\n\n----------------------------------------\n\nTITLE: Printing Version Information in Go\nDESCRIPTION: This code snippet serves as the main entry point for a Go application, printing the version of the module to the console. It requires importing the \"fmt\" package to handle output operations. The purpose is to demonstrate module version management and output in a terminal.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_undeprecated_v1.0.1.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() { fmt.Println(\"a@v1.0.1\") }\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module in go.mod\nDESCRIPTION: Specifies the module name for the Go project.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_indirect_v1.0.1.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule patch.example.com/indirect\n```\n\n----------------------------------------\n\nTITLE: Testing go list with --versions flag and latest version query\nDESCRIPTION: Executes 'go list -m' command with the --versions flag and @latest version query for an unknown module, verifying error output format consistency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_versions.txt#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngo list -m -e -f $FMT --versions example.com/retract/self/pseudo@latest\nstdout '^example.com/retract/self/pseudo: \"module example.com/retract/self/pseudo: no matching versions for query \\\\\"latest\\\\\"\" \"latest\"$'\n```\n\n----------------------------------------\n\nTITLE: Setting Go Module Mode in Go\nDESCRIPTION: This command sets the GO111MODULE environment variable to 'on', enabling module-aware mode for Go commands.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_upgrade_pseudo.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GO111MODULE=on\n```\n\n----------------------------------------\n\nTITLE: Go Workspace Configuration\nDESCRIPTION: The go.work file defining the workspace with two modules 'a' and 'b'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_modules_txt_consistent.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ngo 1.21\n\nuse (\n    ./a\n    ./b\n)\n```\n\n----------------------------------------\n\nTITLE: Root Package Main\nDESCRIPTION: The main package for the root module that imports package 'a'. This establishes the start of the dependency chain for the test case.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_cycle.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport _ \"a\"\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Database SQL Context Methods and Types\nDESCRIPTION: Defines methods and types for database/sql package that support context-aware operations. Includes query methods, transaction operations, and type definitions for database operations with context cancellation support.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.8.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// database/sql methods supporting context operations\nfunc (*Stmt) QueryContext(context.Context, ...interface{}) (*Rows, error)\nfunc (*Stmt) QueryRowContext(context.Context, ...interface{}) *Row\nfunc (*Tx) ExecContext(context.Context, string, ...interface{}) (Result, error)\nfunc (*Tx) PrepareContext(context.Context, string) (*Stmt, error)\nfunc (*Tx) QueryContext(context.Context, string, ...interface{}) (*Rows, error)\nfunc (*Tx) QueryRowContext(context.Context, string, ...interface{}) *Row\nfunc (*Tx) StmtContext(context.Context, *Stmt) *Stmt\n\n// database/sql types\ntype ColumnType struct\ntype IsolationLevel int\ntype NamedArg struct {\n    Name string\n    Value interface{}\n}\ntype TxOptions struct {\n    Isolation IsolationLevel\n    ReadOnly bool\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Relative Paths in CC and CXX Variables\nDESCRIPTION: This snippet tests the behavior of 'go env -w' when setting CC and CXX variables with relative paths. It demonstrates that absolute paths are required for these variables.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_write.txt#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# go env -w rejects relative CC values\n[!GOOS:windows] go env -w CC=/usr/bin/clang\ngo env -w CC=clang\n[!GOOS:windows] ! go env -w CC=./clang\n[!GOOS:windows] ! go env -w CC=bin/clang\n[!GOOS:windows] stderr 'go: CC entry is relative; must be absolute path'\n\n[GOOS:windows] go env -w CC=$WORK\\bin\\clang\n[GOOS:windows] ! go env -w CC=.\\clang\n[GOOS:windows] ! go env -w CC=bin\\clang\n[GOOS:windows] stderr 'go: CC entry is relative; must be absolute path'\n\n# go env -w rejects relative CXX values\n[!GOOS:windows] go env -w CC=/usr/bin/cpp\ngo env -w CXX=cpp\n[!GOOS:windows] ! go env -w CXX=./cpp\n[!GOOS:windows] ! go env -w CXX=bin/cpp\n[!GOOS:windows] stderr 'go: CXX entry is relative; must be absolute path'\n\n[GOOS:windows] go env -w CXX=$WORK\\bin\\cpp\n[GOOS:windows] ! go env -w CXX=.\\cpp\n[GOOS:windows] ! go env -w CXX=bin\\cpp\n[GOOS:windows] stderr 'go: CXX entry is relative; must be absolute path'\n```\n\n----------------------------------------\n\nTITLE: Go Module Using Non-Existing Module\nDESCRIPTION: Go file that imports a non-existing module 'not-rsc.io/quote/v3' which will be replaced through the go.mod file's replace directive.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"not-rsc.io/quote/v3\"\n)\n\nfunc main() {\n\tfmt.Println(quote.GoV3())\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Go Test Coverage Profile using go test (Shell)\nDESCRIPTION: This shell command executes Go tests defined in `prog_test.go` for the code in `prog.go`. It uses the `-coverprofile` flag to generate a coverage profile and save it to the file `blah.prof`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_test_localpkg_filepath.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# collect coverage profile in text format\ngo test -coverprofile=blah.prof prog.go prog_test.go\n```\n\n----------------------------------------\n\nTITLE: Module Version Commands\nDESCRIPTION: Shell commands demonstrating Go module version querying and resolution behavior\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n\ngo list -m -versions rsc.io/quote\ngo list -m rsc.io/quote@latest\ngo list -m rsc.io/quote@v1\ngo list -m rsc.io/quote@v1.5\ngo list -m rsc.io/quote@>v1.5.2\ngo list -m rsc.io/quote@<v1.5.4\ngo list -m rsc.io/quote@>v1.5.3\ngo list -m -e -f '{{.Error.Err}}' rsc.io/quote@>v1.5.3\n```\n\n----------------------------------------\n\nTITLE: Empty Package for Indirect Dependency\nDESCRIPTION: Empty Go package used to trigger the indirect dependency in the test. This file is imported by the main package to ensure the indirect dependency is included in the build.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_downgrade_ambiguous.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage empty\n```\n\n----------------------------------------\n\nTITLE: Defining Constants and Types for crypto/tls and crypto/x509 Packages in Go\nDESCRIPTION: This snippet defines constants and types related to TLS and X509 cryptography, including signature schemes, certificate validation reasons, and public key algorithms.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.10.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nconst ECDSAWithSHA1 = 515\nconst ECDSAWithSHA1 SignatureScheme\n\nconst CANotAuthorizedForExtKeyUsage = 9\nconst CANotAuthorizedForExtKeyUsage InvalidReason\n\ntype PublicKeyAlgorithm struct{}\nfunc (PublicKeyAlgorithm) String() string\n\ntype Certificate struct {\n    ExcludedEmailAddresses []string\n    ExcludedIPRanges []*net.IPNet\n    ExcludedURIDomains []string\n    PermittedEmailAddresses []string\n    PermittedIPRanges []*net.IPNet\n    PermittedURIDomains []string\n    URIs []*url.URL\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module declaration for the test project specifying Go 1.16 as the version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/link_syso_issue33139.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Embedding Test Files in Go Using `embed` Package\nDESCRIPTION: This Go test file uses the `embed` package to embed files matching the pattern `y*t*t` into the `Y` variable, of type `string`. This allows test files starting with 'y' and ending with 't' to be embedded and tested against. The embedded content can be accessed as a string. Dependency is the `embed` package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/embed.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage p\n\nimport \"embed\"\n\n//go:embed y*t*t\nvar Y string\n```\n\n----------------------------------------\n\nTITLE: Main Package with Quote Import\nDESCRIPTION: Main package demonstrating usage of rsc.io/quote/v3 package for printing a quote.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_replace.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"rsc.io/quote/v3\"\n)\n\nfunc main() {\n\tfmt.Println(quote.GoV3())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Switching Branches for Version Management\nDESCRIPTION: Creates version branches v1.0.0 and v2.0.0, then checks out v1.0.0 branch. Copies a file from v1/pkg/ directory and commits changes to develop toward v1.0.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/semver-branch.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit branch 'v1.0.0'\ngit branch 'v2.0.0'\ngit checkout 'v1.0.0'\ncp v1/pkg/pkg.go pkg/pkg.go\ngit commit -a -m 'pkg: start developing toward v1.0.0'\n```\n\n----------------------------------------\n\nTITLE: Updating Dependency Version in Go\nDESCRIPTION: Updates the 'rsc.io/sampler' dependency to version v1.3.1 using 'go get' command.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_build.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo get rsc.io/sampler@v1.3.1\n```\n\n----------------------------------------\n\nTITLE: Original Go Module Checksum\nDESCRIPTION: Initial go.sum file containing the checksum for the rsc.io/quote dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_diff.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nrsc.io/quote v1.5.2 h1:3fEykkD9k7lYzXqCYrwGAf7iNhbk4yCjHmKBN9td4L0=\n```\n\n----------------------------------------\n\nTITLE: Checking Selected Module Version 'c' in Go 1.15\nDESCRIPTION: These shell commands first list the selected version of module 'c' and then run tests for package 'x' using Go 1.15 behavior. The output demonstrates that the version required by the test dependency 'b' (`c v0.2.0`) is selected, even though it's not directly relevant to building or testing 'x' itself.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_horizon.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo list -m c\nstdout '^c v0.2.0 '\n```\n\nLANGUAGE: shell\nCODE:\n```\n[!short] go test -v x\n[!short] stdout ' c v0.2.0$'\n```\n\n----------------------------------------\n\nTITLE: Alternative Quote Module Definition\nDESCRIPTION: Go module file for the local implementation of not-rsc.io/quote/v3 which specifies its module name.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nmodule not-rsc.io/quote/v3\n```\n\n----------------------------------------\n\nTITLE: Creating Module Definition in .mod File\nDESCRIPTION: Declares the module name for the Go toolchain in the .mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-riscv64.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Clone Function in Go\nDESCRIPTION: Defines a generic Clone function that works with slice types. The function takes a slice of any type and returns a new slice of the same type. There's also a deprecated version of the Clone function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/api/testdata/src/pkg/p4/golden.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc Clone[$0 interface{ ~[]$1 }, $1 interface{}]($0) $0\n```\n\nLANGUAGE: Go\nCODE:\n```\nfunc Clone //deprecated\n```\n\n----------------------------------------\n\nTITLE: Fetching Package with Go Get\nDESCRIPTION: This snippet uses the 'go get' command to retrieve the specified version of the golang.org/x/text package. The example includes expected standard error outputs to verify correct URL logging behavior, which was part of fixing a previously existing bug.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_getx.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n# 'go get -x' should log URLs with an HTTP or HTTPS scheme.\n# A bug had caused us to log schemeless URLs instead.\ngo get -x golang.org/x/text@v0.1.0\nstderr '^# get https://golang.org/x/text\\?go-get=1$'\nstderr '^# get https://golang.org/x/text\\?go-get=1: 200 OK \\([0-9.]+s\\)$'\n! stderr '^# get //.*'\n```\n\n----------------------------------------\n\nTITLE: Go package y test with external import\nDESCRIPTION: A test file for package 'y' that imports an external package 'rsc.io/quote', creating a test-only dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_why.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage y\nimport _ \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: Testing Go Fuzzing Cache Management Script\nDESCRIPTION: A shell script that tests Go's fuzzing cache behavior, including creation, persistence across commands, and cleaning operations. It verifies that fuzzing writes values to cache, 'go clean -cache' preserves the fuzz cache, and 'go clean -fuzzcache' removes only the fuzz cache.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_cache.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n[!fuzz-instrumented] skip\n\n[short] skip\nenv GOCACHE=$WORK/cache\n\n# Fuzz cache should not exist after a regular test run.\ngo test .\nexists $GOCACHE\n! exists $GOCACHE/fuzz\n\n# Fuzzing should write interesting values to the cache.\ngo test -fuzz=FuzzY -fuzztime=100x .\ngo run ./contains_files $GOCACHE/fuzz/example.com/y/FuzzY\n\n# 'go clean -cache' should not delete the fuzz cache.\ngo clean -cache\nexists $GOCACHE/fuzz\n\n# 'go clean -fuzzcache' should delete the fuzz cache but not the build cache.\ngo build -x ./empty\nstderr '(compile|gccgo)( |\\.\\.exe).*empty.go'\ngo clean -fuzzcache\n! exists $GOCACHE/fuzz\ngo build -x ./empty\n! stderr '(compile|gccgo)( |\\.\\.exe).*empty.go'\n\n# Fuzzing indicates that one new interesting value was found with an empty\n# corpus, and the total size of the cache is now 1.\ngo clean -fuzzcache\ngo test -fuzz=FuzzEmpty -fuzztime=10000x .\nstdout 'new interesting: 1'\nstdout 'total: 1'\n\n# Fuzzing again with a small fuzztime does not find any other interesting\n# values but still indicates that the cache size is 1.\ngo test -fuzz=FuzzEmpty -fuzztime=2x .\nstdout 'new interesting: 0'\nstdout 'total: 1'\n\n! go clean -fuzzcache example.com/y\nstderr 'go: clean -fuzzcache cannot be used with package arguments'\n```\n\n----------------------------------------\n\nTITLE: Implementing Functions in Package 'foo'\nDESCRIPTION: This snippet defines two functions, FooFunc and FooFunc2, which return a constant integer value. It's part of the 'foo' package, providing basic operations that can be imported and utilized by other packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_test_pkgselect.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n-- foo/foo.go --\npackage foo\n\nfunc FooFunc() int {\n\treturn 42\n}\nfunc FooFunc2() int {\n\treturn 42\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Go Environment Variables for Module Testing\nDESCRIPTION: Sets environment variables for Go module testing, including enabling modules, using direct proxy, and disabling sum database.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_major.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GO111MODULE=on\nenv GOPROXY=direct\nenv GOSUMDB=off\n```\n\n----------------------------------------\n\nTITLE: DWARF debug info listing utility\nDESCRIPTION: A Go program that extracts and lists all source file paths from the DWARF debug information in a binary. This is used to verify whether source paths appear in the compiled binary.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_trimpath_cgo.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"debug/dwarf\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"os\"\n\t\"sort\"\n)\n\nfunc main() {\n\tfiles, err := run(os.Args[1])\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfor _, file := range files {\n\t\tfmt.Println(file)\n\t}\n}\n\nfunc run(exePath string) ([]string, error) {\n\tdwarfData, err := readDWARF(exePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tdwarfReader := dwarfData.Reader()\n\tfiles := make(map[string]bool)\n\tfor {\n\t\te, err := dwarfReader.Next()\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif e == nil {\n\t\t\tbreak\n\t\t}\n\t\tlr, err := dwarfData.LineReader(e)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif lr == nil {\n\t\t\tcontinue\n\t\t}\n\n\t\tvar le dwarf.LineEntry\n\t\tfor {\n\t\t\tif err := lr.Next(&le); err != nil {\n\t\t\t\tif err == io.EOF {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tif le.EndSequence {\n\t\t\t    continue\n\t\t\t}\n\t\t\tfiles[le.File.Name] = true\n\t\t}\n\t}\n\n\tsortedFiles := make([]string, 0, len(files))\n\tfor file := range files {\n\t\tsortedFiles = append(sortedFiles, file)\n\t}\n\tsort.Strings(sortedFiles)\n\treturn sortedFiles, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Workspace with Module Replacements\nDESCRIPTION: This go.work file defines the workspace configuration, specifying module replacements. It demonstrates how to replace modules with local directory paths, which is useful for development and testing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nuse m\n\nreplace example.com/dep => ./dep\nreplace example.com/other => ./other2\n```\n\n----------------------------------------\n\nTITLE: Context Validation in Go Fuzzing Tests\nDESCRIPTION: Go test file that verifies correct context behavior in fuzzing. It checks that contexts are properly created, not initially canceled, and correctly canceled after test completion using cleanup functions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_context.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage context_fuzz\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"testing\"\n)\n\nfunc Fuzz(f *testing.F) {\n\tctx := f.Context()\n\tif err := ctx.Err(); err != nil {\n\t\tf.Fatalf(\"expected non-canceled context, got %v\", err)\n\t}\n\n\tf.Fuzz(func(t *testing.T, data []byte) {\n\t\tinnerCtx := t.Context()\n\t\tif err := innerCtx.Err(); err != nil {\n\t\t\tt.Fatalf(\"expected inner test to not inherit canceled context, got %v\", err)\n\t\t}\n\n\t\tt.Cleanup(func() {\n\t\t\tif !errors.Is(innerCtx.Err(), context.Canceled) {\n\t\t\t\tt.Fatal(\"expected context of inner test to be canceled after its fuzz function finished\")\n\t\t\t}\n\t\t})\n\t})\n\n\tf.Cleanup(func() {\n\t\tif !errors.Is(ctx.Err(), context.Canceled) {\n\t\t\tf.Fatal(\"expected context canceled before cleanup\")\n\t\t}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Path Changes\nDESCRIPTION: Tests changing a module's path using 'go mod edit -module', which updates the module directive in the go.mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit.txt#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# go mod edit -module\ncd $WORK/m\ngo mod init a.a/b/c\ngo mod edit -module x.x/y/z\ncmpenv go.mod go.mod.edit\n```\n\n----------------------------------------\n\nTITLE: Module Version Restrictions Test\nDESCRIPTION: Tests that verify version control restrictions on the main module and its packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_main.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n! go get rsc.io@v0.1.0\nstderr '^go: can\\'t request version \"v0.1.0\" of the main module \\(rsc.io\\)$'\n! go get rsc.io/x@v0.1.0\nstderr '^go: package rsc.io/x is in the main module, so can\\'t request version v0.1.0$'\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Module\nDESCRIPTION: This snippet shows the content of the go.mod file, which initializes a new Go module named 'm'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_golang.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Quote Package Import\nDESCRIPTION: Go package that imports the rsc.io/quote package as a blank import.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_local.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage usequote\nimport _ \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: Expected Output for go list Command (Text)\nDESCRIPTION: This block defines the expected standard output (`stdout`) for the preceding `go list` command. It serves as the 'want' data for comparison (e.g., using `cmp stdout want`). It specifies the expected `ImportPath`, `Imports`, and `ImportMap` values for packages `m/a` and `m/b`, reflecting the modifications PGO makes to the `Imports` list for package `m/a` (adding `[m/a]` suffix).\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_pgo_issue66218.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nImportPath: \"m/a\", Imports: \"[m/b [m/a]]\", ImportMap: \"map[m/b:m/b [m/a]]\"\nImportPath: \"m/b\", Imports: \"[m/c]\", ImportMap: \"map[]\"\n```\n\n----------------------------------------\n\nTITLE: Go Module Configuration\nDESCRIPTION: This snippet shows the go.mod file configuration for the project, including module requirements and replacements.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.13\n\nrequire (\n\ta v1.0.0\n\tdiamondroot v0.0.0\n\tmysite/myname/mypkg v1.0.0\n\tw v1.0.0 // indirect\n\tx v1.0.0\n\ty v1.0.0\n\tz v1.0.0\n)\n\nreplace (\n\ta v1.0.0 => ./a\n\tdiamondleft => ./diamondleft\n\tdiamondpoint => ./diamondpoint\n\tdiamondright => ./diamondright\n\tdiamondroot => ./diamondroot\n\tmysite/myname/mypkg v1.0.0 => ./mypkg\n\tw v1.0.0 => ./w\n\tx v1.0.0 => ./x\n\ty v1.0.0 => ./y\n\tz v1.0.0 => ./z\n)\n```\n\n----------------------------------------\n\nTITLE: Testing os.Exit() in Go Fuzz Tests\nDESCRIPTION: This fuzz test function demonstrates how Go's fuzzing handles a call to os.Exit(). It exits the process with status 1 when the input is not 'aa'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_crash.txt#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\nfunc FuzzWithBadExit(f *testing.F) {\n\tf.Add([]byte(\"aa\"))\n\tf.Fuzz(func(t *testing.T, b []byte) {\n\t\tif string(b) != \"aa\" {\n\t\t\tos.Exit(1)\n\t\t}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Go Module in a Subdirectory (Shell)\nDESCRIPTION: Changes the current directory to 'x' and then successfully initializes a Go module within that directory. The module path is specified as 'example.com/x'. This requires the Go toolchain to be installed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_init_path.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd x\ngo mod init example.com/x\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies in Module C v0.2.0 in Go\nDESCRIPTION: This Go file for module C v0.2.0 imports example.net/c as a blank import, which seems to be a circular import.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_boost.txt#2025-04-22_snippet_13\n\nLANGUAGE: Go\nCODE:\n```\npackage c\n\nimport _ \"example.net/c\"\n```\n\n----------------------------------------\n\nTITLE: Defining Module Dependencies for z1\nDESCRIPTION: This go.mod file for the z1 module defines its dependencies on specific versions of modules x and y.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_convergence_loop.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/z\n\ngo 1.16\n\nrequire (\n\texample.net/x v0.2.0-pre\n\texample.net/y v0.2.0-pre\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Function in pkg3 - Go\nDESCRIPTION: This code defines package 'pkg3' with a single function F that prints 'pkg3' to the standard output. It exemplifies a minimal Go package meant to be fully covered by its test code for test runner verification.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_statements.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage pkg3\n\nimport \"fmt\"\n\nfunc F() {\n\tfmt.Println(\"pkg3\")\n}\n```\n\n----------------------------------------\n\nTITLE: Package Y v0.1.0 Implementation\nDESCRIPTION: First version of package y with basic implementation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_convergence.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/y\n\ngo 1.16\n```\n\nLANGUAGE: go\nCODE:\n```\npackage y\n```\n\n----------------------------------------\n\nTITLE: Simple Go Program\nDESCRIPTION: A minimal Go program with an empty main function, used for testing the build process.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cacheprog_issue70848.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Go 1.16 Module File for Testing\nDESCRIPTION: A Go module file specifically for testing compatibility with Go 1.16, which includes replacements to local directories for simulating dependency behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_deleted.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule outside\n\ngo 1.16\n\nreplace (\n\texample.com/m => ../\n\texample.net/deleted v0.1.0 => ../d1\n\texample.net/deleted v0.2.0 => ../d2\n\texample.net/lazy v0.1.0 => ../lazy\n\texample.net/pruned v0.1.0 => ../pruned\n)\n\nrequire example.com/m v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Declaring Go Module for Testing Coverage Arguments – Go\nDESCRIPTION: This Go module definition file (go.mod) declares 'module m' and sets Go version 1.20. It enables the following Go code to be built as part of a simple module structure, primarily for testing coverage-related build arguments. There are no dependencies besides the standard Go modules system. Input and output are implicit in the usage by the surrounding test harness. The main constraint is compatibility with Go 1.20+ tooling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_list.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n-- go.mod --\\nmodule m\\n\\ngo 1.20\\n\n```\n\n----------------------------------------\n\nTITLE: Go Test with Panic and Cleanup Function\nDESCRIPTION: A Go test file that registers a cleanup function that calls FailNow() and then contains a test that panics. This tests how the Go testing package handles panics when there's a cleanup function registered.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_cleanup_failnow.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage panic_withcleanup_test\nimport \"testing\"\nfunc TestCleanupWithFailNow(t *testing.T) {\n\tt.Cleanup(func() {\n\t\tt.FailNow()\n\t})\n\tt.Run(\"x\", func(t *testing.T) {\n\t\tt.Run(\"y\", func(t *testing.T) {\n\t\t\tpanic(\"die\")\n\t\t})\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Calling SWIG-Wrapped C Functions from Go (Go)\nDESCRIPTION: This Go program (`main.go`) serves as the main application logic. It imports the standard `fmt` package and calls the C `gcd` function and interacts with the C global variable `Foo` using the Go wrapper functions generated by SWIG (e.g., `Gcd`, `GetFoo`, `SetFoo`). It demonstrates calling the C function, retrieving the global variable's value, modifying it, and verifying the change.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_swig.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n-- main.go --\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\t// Call our gcd() function\n\tx := 42\n\ty := 105\n\tg := Gcd(x, y)\n\tfmt.Println(\"The gcd of\", x, \"and\", y, \"is\", g)\n\n\t// Manipulate the Foo global variable\n\n\t// Output its current value\n\tfmt.Println(\"Foo =\", GetFoo())\n\n\t// Change its value\n\tSetFoo(3.1415926)\n\n\t// See if the change took effect\n\tfmt.Println(\"Foo =\", GetFoo())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Module Path and Go Version in `go.mod`\nDESCRIPTION: This `go.mod` file defines a Go module with the path `example.com/retract/rationale`. It also specifies that the module requires Go version 1.14 or later. This file is essential for Go module management.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rationale_v1.0.0-order.txt#2025-04-22_snippet_0\n\nLANGUAGE: gomod\nCODE:\n```\n-- .mod --\nmodule example.com/retract/rationale\n\ngo 1.14\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository\nDESCRIPTION: Creates a new Git repository in the current directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/v2sub.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit init\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Go Module\nDESCRIPTION: This snippet shows a simple go.mod file for a command module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pkgtags.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/cmd\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Path Checking Go Application\nDESCRIPTION: A Go program that checks whether binary files contain specific directory paths like GOPATH, GOROOT or module root. It reads the binary file provided as an argument and searches for path strings within it.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_trimpath.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\t\"strings\"\n)\n\nfunc main() {\n\texe := os.Args[1]\n\tdata, err := ioutil.ReadFile(exe)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tif os.Getenv(\"GO111MODULE\") == \"on\" {\n\t\tout, err := exec.Command(\"go\", \"env\", \"GOMOD\").Output()\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tmodRoot := filepath.Dir(strings.TrimSpace(string(out)))\n\t\tcheck(data, \"module root\", modRoot)\n\t} else {\n\t\tcheck(data, \"GOPATH\", os.Getenv(\"GOPATH\"))\n\t}\n\tcheck(data, \"GOROOT\", os.Getenv(\"GOROOT\"))\n}\n\nfunc check(data []byte, desc, dir string) {\n\tif dir == \"\" {\n\t\tfmt.Printf(\"binary contains an empty %s\\n\", desc)\n\t\treturn\n\t}\n\tcontainsDir := bytes.Contains(data, []byte(dir))\n\tcontainsSlashDir := bytes.Contains(data, []byte(filepath.ToSlash(dir)))\n\tfmt.Printf(\"binary contains %s: %v\\n\", desc, containsDir || containsSlashDir)\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Get with GOINSECURE Setting\nDESCRIPTION: Retries the download with GOINSECURE and GONOSUMDB set, which should succeed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/get_insecure.txt#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nenv GOINSECURE=insecure.go-get-issue-15410.appspot.com\nenv GONOSUMDB=insecure.go-get-issue-15410.appspot.com\ngo get -d insecure.go-get-issue-15410.appspot.com/pkg/p\n```\n\n----------------------------------------\n\nTITLE: Controlling DNS Resolver Implementation using netdns GODEBUG Setting (Go 1.5)\nDESCRIPTION: Introduced in Go 1.5, this setting controls which DNS resolver implementation the net package uses. It allows switching between the pure Go resolver and the cgo-based resolver (which uses system libraries like libc). Common values are 'go' or 'cgo'. The default depends on the build environment. Set via GODEBUG environment variable (e.g., GODEBUG=netdns=go or GODEBUG=netdns=cgo).\nSOURCE: https://github.com/golang/go/blob/master/doc/godebug.md#2025-04-22_snippet_33\n\nLANGUAGE: plaintext\nCODE:\n```\nnetdns\n```\n\n----------------------------------------\n\nTITLE: Go Module Version Test Commands\nDESCRIPTION: A sequence of shell commands testing Go module version management, particularly focusing on type alias compatibility between Go 1.8 and 1.9.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit_go.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n! go build\nstderr ' type alias requires'\ngo mod edit -go=1.9\ngrep 'go 1.9' go.mod\ngo build\n\ngo mod edit -go=1.8\n! go build\nstderr 'type alias requires'\n\ngo mod edit -go=none\n! grep go go.mod\n```\n\n----------------------------------------\n\nTITLE: Testing CGO LDFLAGS behavior (Shell)\nDESCRIPTION: This shell script tests various scenarios of building Go packages with different CGO LDFLAGS configurations. It includes attempts to build packages with flags in #cgo directives and environment variables, and verifies linker output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/ldflag.txt#2025-04-22_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n# Issue #42565\n\n[!cgo] skip\n\n# We can't build package bad, which uses #cgo LDFLAGS.\ncd bad\n! go build\nstderr no-such-warning\n\n# We can build package ok with the same flags in CGO_LDFLAGS.\nenv CGO_LDFLAGS=-Wno-such-warning -Wno-unknown-warning-option\ncd ../ok\ngo build\n\n# Build a main program that actually uses LDFLAGS.\ncd ..\ngo build -ldflags=-v\n\n# Because we passed -v the Go linker should print the external linker\n# command which should include the flag we passed in CGO_LDFLAGS.\nstderr no-such-warning\n```\n\n----------------------------------------\n\nTITLE: Vendoring Dependencies in Go\nDESCRIPTION: This snippet demonstrates vendoring dependencies using 'go mod vendor' and verifying that the go.sum file remains unchanged.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_replaced.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngo mod vendor\ngrep 'rsc.io/quote v1.5.1' go.sum\ncmp go.sum go.sum.tidy\n```\n\n----------------------------------------\n\nTITLE: Defining a Go Package in Golang Module\nDESCRIPTION: This Go code snippet defines a basic package within a Go module, demonstrating how packages are structured inside modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_path.txt#2025-04-22_snippet_4\n\nLANGUAGE: Golang\nCODE:\n```\n-- mod/foo.go --\npackage foo\n```\n\n----------------------------------------\n\nTITLE: Embedding Files in Go\nDESCRIPTION: This snippet illustrates the embedding of external text files within a Go application using the 'embed' package. It requires Go version 1.16 or above as a prerequisite. The 'go:embed' directive allows for seamless inclusion of files in the binary.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/embed_brackets.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n-- [pkg]/x.go --\\npackage p\\n\\nimport _ \\\"embed\\\"\\n\\n//go:embed t.txt\\nvar S string\n```\n\n----------------------------------------\n\nTITLE: Vendoring Dependencies in Go Project\nDESCRIPTION: Uses 'go mod vendor' to create a 'vendor' directory containing copies of all dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_build.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo mod vendor\n```\n\n----------------------------------------\n\nTITLE: Go Workspace File with Relative Path\nDESCRIPTION: Go workspace file that specifies Go 1.18 as the required version and includes a reference to the './bar/baz' module directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_dot.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\n\nuse ./bar/baz\n```\n\n----------------------------------------\n\nTITLE: bar/go.mod file content\nDESCRIPTION: The go.mod file for the 'bar' module, defining the module name.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_only_dirs.txt#_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\n-- bar/go.mod --\nmodule bar\n```\n\n----------------------------------------\n\nTITLE: Testing GOPROXY URL Formatting in Go Module System\nDESCRIPTION: A bash script testing how Go handles different GOPROXY URL formats. It verifies that file paths must have an explicit 'file://' prefix, while HTTPS URLs can omit the 'https://' prefix. The script also includes a simple go.mod file and a placeholder proxy directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_proxy_https.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=on\n\n# GOPROXY file paths must provide the \"file://\" prefix explicitly.\nenv GOPROXY=$WORK/proxydir\n! go list -versions -m golang.org/x/text\nstderr 'invalid proxy URL.*proxydir'\n\n[!net:proxy.golang.org] stop\n\n# GOPROXY HTTPS paths may elide the \"https://\" prefix.\n# (See golang.org/issue/32191.)\nenv GOPROXY=proxy.golang.org\nenv GOSUMDB=\ngo list -versions -m golang.org/x/text\n```\n\nLANGUAGE: go\nCODE:\n```\n-- go.mod --\nmodule example.com\ngo 1.13\n-- $WORK/proxydir/README.md --\nThis proxy contains no data.\n```\n\n----------------------------------------\n\nTITLE: Implementing HKDF Functions with Generic Types in Go\nDESCRIPTION: New functions in the crypto/hkdf package using generic types for hash functions.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nfunc Expand[$0 hash.Hash](func() $0, []uint8, string, int) ([]uint8, error)\nfunc Extract[$0 hash.Hash](func() $0, []uint8, []uint8) ([]uint8, error)\nfunc Key[$0 hash.Hash](func() $0, []uint8, []uint8, string, int) ([]uint8, error)\n```\n\n----------------------------------------\n\nTITLE: Module A v0.1.0 Definition\nDESCRIPTION: Definition for example.net/a module version 0.1.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patchcycle.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/a\n\ngo 1.16\n```\n\nLANGUAGE: go\nCODE:\n```\npackage a\n```\n\n----------------------------------------\n\nTITLE: Handling Partial Module Downloads in Go\nDESCRIPTION: This snippet shows how Go handles partial module downloads by creating a .partial file. It demonstrates that 'go mod verify' doesn't fail for incomplete downloads, and 'go list' behaves as if the module isn't active.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_partial.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Create a .partial file to simulate an failure extracting the zip file.\ncp empty $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.2.partial\n\n# 'go mod verify' should not fail, since the module hasn't been completely\n# ingested into the cache.\ngo mod verify\n\n# 'go list' should not load packages from the directory.\n# NOTE: the message \"directory $dir outside main module or its selected dependencies\"\n# is reported for directories not in the main module, active modules in the\n# module cache, or local replacements. In this case, the directory is in the\n# right place, but it's incomplete, so 'go list' acts as if it's not an\n# active module.\n! go list $GOPATH/pkg/mod/rsc.io/quote@v1.5.2\nstderr 'outside main module or its selected dependencies'\n\n# 'go list -m' should not print the directory.\ngo list -m -f '{{.Dir}}' rsc.io/quote\n! stdout .\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration for Go Module Tests\nDESCRIPTION: Initial environment setup defining core Go module configuration variables including GO111MODULE, GOSUMDB, and GOPROXY.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_proxy.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\nenv sumdb=$GOSUMDB\nenv proxy=$GOPROXY\nenv GOPROXY GONOPROXY GOSUMDB GONOSUMDB\n```\n\n----------------------------------------\n\nTITLE: Expected Go Sum File After Upgrades\nDESCRIPTION: Defines the expected state of go.sum after all upgrades and tests are performed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_update_unrelated_sum.txt#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\ngolang.org/x/text v0.0.0-20170915032832-14c0d48ead0c/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\nrsc.io/quote v1.0.0 h1:kQ3IZQzPTiDJxSZI98YaWgxFEhlNdYASHvh+MplbViw=\nrsc.io/quote v1.0.0/go.mod h1:v83Ri/njykPcgJltBc/gEkJTmjTsNgtO1Y7vyIK1CQA=\nrsc.io/quote v1.5.2 h1:3fEykkD9k7lYzXqCYrwGAf7iNhbk4yCjHmKBN9td4L0=\nrsc.io/quote v1.5.2/go.mod h1:LzX7hefJvL54yjefDEDHNONDjII0t9xZLPXsUe+TKr0=\nrsc.io/sampler v1.3.0/go.mod h1:T1hPZKmBbMNahiBKFy5HrXp6adAjACjK9JXDnKaTXpA=\n```\n\n----------------------------------------\n\nTITLE: Handling Package Not in Standard Library\nDESCRIPTION: Demonstrates a scenario where an attempt is made to import a package 'p' which is not found in the standard library. This provides insights into error messages associated with missing packages. The expected input is a program that uses a non-existing module, showcasing how such errors manifest during the build process.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_issue35270.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nmodule test\n```\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n    \"p\"\n)\n\nfunc main() {\n    println(p.Add(1,1))\n}\n```\n\n----------------------------------------\n\nTITLE: Module C Configuration\nDESCRIPTION: Go module configuration for example.com/c with dependency on module B\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_regression_hang.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/c\n\ngo 1.18\n\nrequire example.com/b v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Defining Go Test Function (Go)\nDESCRIPTION: This file (`test_test.go`) defines a simple test function `TestSimple` within the `testlist` package. It uses the `testing` and `fmt` packages and adheres to the `TestXxx(*testing.T)` signature required for test functions recognizable by `go test`. This specific test function calls `fmt.Sprint` but does not perform any assertions using the `*testing.T` parameter.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_test_simple.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n-- test_test.go --\npackage testlist\n\nimport (\n\t\"fmt\"\n\t\"testing\"\n)\n\nfunc TestSimple(t *testing.T) {\n\t_ = fmt.Sprint(\"Test simple\")\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module Configuration\nDESCRIPTION: Module definition files specifying the module name and dependencies. Requires rsc.io/quote v1.5.2 as a dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_!q!u!o!t!e_v1.5.3-!p!r!e.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule rsc.io/QUOTE\n\nrequire rsc.io/quote v1.5.2\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Module Replacements in go.mod - Go\nDESCRIPTION: This go.mod variant sets up two replacement rules for module m: all example.com/deprecated/a dependencies are redirected to example.com/deprecated/b v1.0.0; additionally, example.com/deprecated/b v1.9.0 is replaced with a local './b' directory. Designed to test if latest-version content is inferred from the replacement. Assumes Go 1.17 and relevant local and remote modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_deprecated_replace.txt#2025-04-22_snippet_4\n\nLANGUAGE: go.mod\nCODE:\n```\nmodule m\n\ngo 1.17\n\nrequire example.com/deprecated/a v1.0.0\n\nreplace (\n\texample.com/deprecated/a => example.com/deprecated/b v1.0.0\n\texample.com/deprecated/b v1.9.0 => ./b\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Quote Functions in Go\nDESCRIPTION: This snippet defines four functions that return different quotes: HelloV2, GlassV2, GoV2, and OptV2. Each function returns a specific quote or saying, with some having additional context provided in comments.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709153244-fd906ed3b100.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Copyright 2018 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// Package quote collects pithy sayings.\npackage quote // import \"rsc.io/quote\"\n\nimport \"rsc.io/sampler\"\n\n// Hello returns a greeting.\nfunc HelloV2() string {\n\treturn sampler.Hello()\n}\n\n// Glass returns a useful phrase for world travelers.\nfunc GlassV2() string {\n\t// See http://www.oocities.org/nodotus/hbglass.html.\n\treturn \"I can eat glass and it doesn't hurt me.\"\n}\n\n// Go returns a Go proverb.\nfunc GoV2() string {\n\treturn \"Don't communicate by sharing memory, share memory by communicating.\"\n}\n\n// Opt returns an optimization truth.\nfunc OptV2() string {\n\t// Wisdom from ken.\n\treturn \"If a program is too slow, it must have a loop.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Aligning Go 1.16 and 1.17 Module Versions\nDESCRIPTION: Shows the process of aligning module versions between Go 1.16 and 1.17 using the suggested 'go mod tidy' commands.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_incompatible.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncp go.mod.orig go.mod\n\ngo mod tidy -go=1.16\ngo list -f $MODFMT -deps ./...\nstdout '^example.com/retract/incompatible v2\\.0\\.0\\+incompatible$'\n! stdout 'v1\\.0\\.0'\n\ngo mod tidy -go=1.17\ngo list -f $MODFMT -deps ./...\nstdout '^example.com/retract/incompatible v2\\.0\\.0\\+incompatible$'\n! stdout 'v1\\.0\\.0'\n\ngo mod edit -go=1.16\ngo list -f $MODFMT -deps ./...\nstdout '^example.com/retract/incompatible v2\\.0\\.0\\+incompatible$'\n! stdout 'v1\\.0\\.0'\n```\n\n----------------------------------------\n\nTITLE: Initializing a Git Repository\nDESCRIPTION: Initializes a new Git repository in the current directory using the git init command.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/mainonly.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit init\n```\n\n----------------------------------------\n\nTITLE: Go Module Q v1.0.0 Implementation\nDESCRIPTION: Module Q version 1.0.0 implementation with PrintVersion function that outputs version 1.0.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune_all.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/q\n\ngo 1.18\n```\n\nLANGUAGE: go\nCODE:\n```\npackage q\n\nimport \"fmt\"\n\nfunc PrintVersion() {\n\tfmt.Println(\"version 1.0.0\")\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module Test Environment Setup\nDESCRIPTION: Shell script that tests module behavior with GO111MODULE both on and off. Verifies test output patterns using stdout checks.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_go111module_cache.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\ngo mod init foo\ngo test\nstdout ^ok\\s+foo\nenv GO111MODULE=off\ngo test\nstdout ^ok\\s+\n! stdout ^ok\\s+(cache)$\n```\n\n----------------------------------------\n\nTITLE: Type Checking Methods and Functions\nDESCRIPTION: Core type checking functionality including interface checks, method lookups, and type comparisons. These are essential for static type analysis of Go code.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.5.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc IsInterface(Type) bool\nfunc LookupFieldOrMethod(Type, bool, *Package, string) (Object, []int, bool)\nfunc MissingMethod(Type, *Interface, bool) (*Func, bool)\n```\n\n----------------------------------------\n\nTITLE: Importing External Package in Go\nDESCRIPTION: This Go file imports an external package from golang.org/x/text/language. It demonstrates how external dependencies are used in the project.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_concurrent.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage x\n\nimport _ \"golang.org/x/text/language\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Go Module with go.mod - Go\nDESCRIPTION: Defines a minimal go.mod file declaring 'sandbox/bar' as the module path. This is a prerequisite for Go module-aware tooling and builds, ensuring the 'go list' commands operate in module mode. No dependencies are listed, but the module file forms the context for the Go source code being tested.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_compiled_concurrent.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n-- go.mod --\nmodule sandbox/bar\n```\n\n----------------------------------------\n\nTITLE: Go Main Package Implementation\nDESCRIPTION: Main package implementation containing a Hello() function for output and a foo() function with nested loops for coverage testing purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/testing_coverage.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage hello\n\nfunc Hello() {\n\tprintln(\"hello\")\n}\n\n// contents not especially interesting, just need some code\nfunc foo(n int) int {\n\tt := 0\n\tfor i := 0; i < n; i++ {\n\t\tfor j := 0; j < i; j++ {\n\t\t\tt += i ^ j\n\t\t\tif t == 1010101 {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\treturn t\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Package with Major Version Suffix in Go\nDESCRIPTION: Demonstrates importing a package with a major version suffix to test module resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_direct.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport _ \"vcs-test.golang.org/git/v3pkg.git/v3\"\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Declaring the Go Module Path\nDESCRIPTION: Defines the Go module path as `golang.org/toolchain` using the `module` directive. This declaration is typically found in a `go.mod` file (represented here also by `.mod`) and establishes the module's identity.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.js-wasm.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Asserting Expected Output for 'latest' Version (Timestamp Preference)\nDESCRIPTION: Specifies the expected standard output for the preceding 'go list' command querying 'modtest3'. The regular expression asserts that the resolved 'latest' version is the pseudo-version with the most recent timestamp ('v0.0.0-20181023043359-a85b471d5412', dated 2018-10-22), not necessarily the highest semantic version, confirming timestamp-based preference among pseudo-versions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_pseudo.txt#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nstdout '^dmitri.shuralyov.com/test/modtest3 v0.0.0-20181023043359-a85b471d5412 2018-10-22$'\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Go Modules and Workspace Configuration\nDESCRIPTION: Sets up multiple Go modules with different version requirements (1.22.0, 1.22.1, 1.24rc0) and initializes a workspace. Tests workspace synchronization behavior with version constraints and toolchain settings.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_toolchain.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Create basic modules and work space.\nenv TESTGO_VERSION=go1.50\nmkdir m1_22_0\ngo mod init -C m1_22_0\ngo mod edit -C m1_22_0 -go=1.22.0 -toolchain=go1.99.0\nmkdir m1_22_1\ngo mod init -C m1_22_1\ngo mod edit -C m1_22_1 -go=1.22.1 -toolchain=go1.99.1\nmkdir m1_24_rc0\ngo mod init -C m1_24_rc0\ngo mod edit -C m1_24_rc0 -go=1.24rc0 -toolchain=go1.99.2\n\ngo work init ./m1_22_0 ./m1_22_1\ngrep '^go 1.50$' go.work\n! grep toolchain go.work\n```\n\n----------------------------------------\n\nTITLE: Downloading Go Modules with Specific Versions\nDESCRIPTION: This snippet shows how to download specific versions of Go modules using the 'go mod download' command. It demonstrates downloading modules from example.com with different versions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_newcycle.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n\n# Download modules to avoid stderr chatter\ngo mod download example.com@v1.0.0\ngo mod download example.com/newcycle/a@v1.0.0\ngo mod download example.com/newcycle/a@v1.0.1\ngo mod download example.com/newcycle/b@v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests with Coverage and Race Detection (Shell)\nDESCRIPTION: Executes tests for the Go package 'x' using 'go test'. It includes the '-coverpkg=all' flag for comprehensive coverage analysis and the '-race' flag to enable the Go race detector during the test run. The surrounding script context indicates this command should be skipped if race detection is explicitly disabled (`[!race]`) and expects 'ok' and coverage information in standard output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_pkgall_runtime.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo test -coverpkg=all -race x\n```\n\n----------------------------------------\n\nTITLE: Checking Indirect Dependency Update in Go Modules\nDESCRIPTION: This snippet verifies if 'go get -u' updates indirect dependencies (golang.org/x/text) to a version later than required by the direct dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_indirect.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngo list -m -f '{{.Path}} {{.Version}}{{if .Indirect}} // indirect{{end}}' all\nstdout '^golang.org/x/text [v0-9a-f\\.-]+ // indirect'\ngrep 'golang.org/x/text [v0-9a-f\\.-]+ // indirect' go.mod\n```\n\n----------------------------------------\n\nTITLE: Updating Unicode version constant in unicode package\nDESCRIPTION: Sets the Unicode version supported by the unicode package to 10.0.0. This constant indicates which Unicode standard version is implemented by the package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.10.txt#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\npkg unicode, const Version = \"10.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module definition file specifying the deprecated module name and Go version requirement\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_deprecated_b_v1.9.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Deprecated: in example.com/deprecated/b@v1.9.0\nmodule example.com/deprecated/b\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: Filesystem testing utilities in testing/fstest package\nDESCRIPTION: Provides utilities for testing implementations of the fs.FS interface. Includes TestFS for checking filesystem compliance and MapFS for creating in-memory filesystems for testing purposes.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nfunc TestFS(fs.FS, ...string) error\nmethod (MapFS) Glob(string) ([]string, error)\nmethod (MapFS) Open(string) (fs.File, error)\nmethod (MapFS) ReadDir(string) ([]fs.DirEntry, error)\nmethod (MapFS) ReadFile(string) ([]uint8, error)\nmethod (MapFS) Stat(string) (fs.FileInfo, error)\nmethod (MapFS) Sub(string) (fs.FS, error)\ntype MapFS map[string]*MapFile\ntype MapFile struct\ntype MapFile struct, Data []uint8\ntype MapFile struct, ModTime time.Time\ntype MapFile struct, Mode fs.FileMode\ntype MapFile struct, Sys interface{}\n```\n\n----------------------------------------\n\nTITLE: Fetching Latest Module Version in Go\nDESCRIPTION: This command fetches the latest version of the 'example.com/pseudoupgrade' module, which should be the tagged v0.1.0 version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_upgrade_pseudo.txt#2025-04-22_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ngo get example.com/pseudoupgrade@latest\n```\n\n----------------------------------------\n\nTITLE: Executing Go Get Command for Dependency Upgrade in Go\nDESCRIPTION: This command runs 'go get' with the -v (verbose) and -u (upgrade) flags to update dependencies for the current module and example.net/b to v0.1.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_boost.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo get -v -u . example.net/b@v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Importing Package in Go Source File\nDESCRIPTION: Imports the 'rsc.io/quote' package in a Go source file named 'x.go'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_build.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage x\nimport _ \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Localized 'Glass' Phrase in Go\nDESCRIPTION: This snippet defines the 'Glass' function, which returns a localized version of the 'I can eat glass' phrase based on the provided language preferences. If no preferences are given, it uses the default user preferences.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.3.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc Glass(prefs ...language.Tag) string {\n\tif len(prefs) == 0 {\n\t\tprefs = DefaultUserPrefs()\n\t}\n\treturn glass.find(prefs)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Localized Greetings in Go\nDESCRIPTION: This snippet defines the 'Hello' function, which returns a localized greeting based on the provided language preferences. If no preferences are given, it uses the default user preferences.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.3.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc Hello(prefs ...language.Tag) string {\n\tif len(prefs) == 0 {\n\t\tprefs = DefaultUserPrefs()\n\t}\n\treturn hello.find(prefs)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Localized Text Structure in Go\nDESCRIPTION: This code defines a 'text' struct and associated methods for handling localized text and finding the appropriate translation based on language preferences.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.2.0.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype text struct {\n\tbyTag   map[string]string\n\tmatcher language.Matcher\n}\n\nfunc newText(s string) *text {\n\t// Implementation details omitted for brevity\n}\n\nfunc (t *text) find(prefs []language.Tag) string {\n\t// Implementation details omitted for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Running Specific Go Subtests with Pattern Matching\nDESCRIPTION: Shell command demonstrating how to run only subtests that match a specific pattern using go test -run. Includes assertions about expected stdout and stderr output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_only_subtests.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo test -run Test/Sub standalone_sub_test.go\n! stdout '^ok.*\\[no tests to run\\]'\n! stderr '^ok.*\\[no tests to run\\]'\nstdout '^ok'\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Requirements\nDESCRIPTION: Basic go.mod file defining module m with Go 1.15 and requiring rsc.io/quote v1.5.2 as a dependency\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_readonly.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.15\n\nrequire rsc.io/quote v1.5.2\n```\n\n----------------------------------------\n\nTITLE: Go Module Requirements Configuration\nDESCRIPTION: Defines a Go module named example.com/downgrade with a dependency on rsc.io/quote version 1.5.2.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_downgrade_v2.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/downgrade\n\nrequire rsc.io/quote v1.5.2\n```\n\n----------------------------------------\n\nTITLE: Populating Local Cache with Specific Module Versions\nDESCRIPTION: Downloads specific tagged and pseudo-versions of the 'github.com/dmitshur-test/modtest5' module into the local module cache ($GOPATH/pkg/mod/cache/download). This pre-populates the cache which will subsequently be used as a file-based module proxy for testing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_pseudo.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo mod download github.com/dmitshur-test/modtest5@v0.0.0-20190619020302-197a620e0c9a\ngo mod download github.com/dmitshur-test/modtest5@v0.5.0-alpha\ngo mod download github.com/dmitshur-test/modtest5@v0.5.0-alpha.0.20190619023908-3da23a9deb9e\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests with Coverage (Bash)\nDESCRIPTION: This code demonstrates the use of the 'go test' command with different coverage and race detector flags in a Bash environment. It shows how to disable module-aware mode, skip tests based on build tags, and check the standard output for test pass and coverage results. These commands do not require any dependencies other than Go, and are executed on the command line as part of a test workflow.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_atomic_pkgall.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=off\n\ngo test -coverpkg=all -covermode=atomic x\nstdout ok[\\s\\S]+?coverage\n\ngo test -coverpkg=all -race x\nstdout ok[\\s\\S]+?coverage\n\n```\n\n----------------------------------------\n\nTITLE: Module Definition for Special Character Test\nDESCRIPTION: Go module definition for testing directories with '@' in their path as part of the package path.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_fs_patterns.txt#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nmodule badat\n\ngo 1.14\n```\n\n----------------------------------------\n\nTITLE: Defining Module A\nDESCRIPTION: Specifies the module configuration for the 'example.com/a' module used in the tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_ambiguous_import.txt#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/a\ngo 1.14\n```\n\n----------------------------------------\n\nTITLE: Go Workspace Configuration\nDESCRIPTION: Workspace configuration file (go.work) specifying usage of ./y module directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_issue55952.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nuse ./y\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies in Main Go File\nDESCRIPTION: This main Go file for module 'm' imports packages from modules 'a', 'b', and 'c'. It's used to establish the initial dependency relationships for the test scenario.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue56494.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage m\n\nimport (\n\t_ \"a\"\n\t_ \"b\"\n\t_ \"c\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Module 'b' Version 3 in Go\nDESCRIPTION: This go.mod file defines module 'b' version 3 and its dependency on module 'd'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_pseudo_artifact.txt#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/b\n\ngo 1.16\n\nrequire example.net/d v0.2.0\n```\n\n----------------------------------------\n\nTITLE: Go Package with Direct Missing Import (Go)\nDESCRIPTION: This Go source file defines a package named 'direct'. Its primary purpose in the test is to directly import a non-existent package ('example.com/notfound') using a blank identifier import, triggering a dependency error during 'go list' operations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_bad_import.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n-- example.com/direct/direct.go --\npackage direct\nimport _ \"example.com/notfound\"\n```\n\n----------------------------------------\n\nTITLE: Defining Expected Go Work File\nDESCRIPTION: This snippet shows the expected content of the go.work file after running the go work commands. It includes the Go version and use directives for multiple directories.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_init_path.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\ngo $goversion\n\nuse (\n\t.\n\t..\n\t./foo/bar\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Quote Package with V3 Dependency Wrapper\nDESCRIPTION: Main implementation of the quote package that wraps functions from rsc.io/quote/v3. It provides four functions: Hello, Glass, Go, and Opt, each returning a different quote.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180710144737-5d9f230bcfba.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Copyright 2018 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// Package quote collects pithy sayings.\npackage quote // import \"rsc.io/quote\"\n\nimport \"rsc.io/quote/v3\"\n\n// Hello returns a greeting.\nfunc Hello() string {\n\treturn quote.HelloV3()\n}\n\n// Glass returns a useful phrase for world travelers.\nfunc Glass() string {\n\t// See http://www.oocities.org/nodotus/hbglass.html.\n\treturn quote.GlassV3()\n}\n\n// Go returns a Go proverb.\nfunc Go() string {\n\treturn quote.GoV3()\n}\n\n// Opt returns an optimization truth.\nfunc Opt() string {\n\t// Wisdom from ken.\n\treturn quote.OptV3()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module in go.mod File\nDESCRIPTION: Standard go.mod file specifying the module name as 'golang.org/x/useinternal'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_x_useinternal_v0.1.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule golang.org/x/useinternal\n```\n\n----------------------------------------\n\nTITLE: Declaring Go Module Name in .mod File (Go Module)\nDESCRIPTION: This snippet shows the content of a go.mod file. It declares the module path as 'example.com/incompatiblewithsub'. This is the root file defining a Go module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_incompatiblewithsub_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: gomod\nCODE:\n```\nmodule example.com/incompatiblewithsub\n```\n\n----------------------------------------\n\nTITLE: Simple Go Generate Test\nDESCRIPTION: Basic test file demonstrating go generate functionality with a simple echo command. Includes a build tag that should be ignored by go generate.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/generate.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Copyright 2014 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// Simple test for go generate.\n\n// We include a build tag that go generate should ignore.\n\n// +build ignore\n\n//go:generate echo Success\n\npackage p\n```\n\n----------------------------------------\n\nTITLE: Implementing Quote Functions in Go\nDESCRIPTION: Defines four functions (HelloV2, GlassV2, GoV2, and OptV2) that return different quotes or sayings. It imports and uses the 'rsc.io/sampler' package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v2.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n// Package quote collects pithy sayings.\npackage quote // import \"rsc.io/quote\"\n\nimport \"rsc.io/sampler\"\n\n// Hello returns a greeting.\nfunc HelloV2() string {\n\treturn sampler.Hello()\n}\n\n// Glass returns a useful phrase for world travelers.\nfunc GlassV2() string {\n\t// See http://www.oocities.org/nodotus/hbglass.html.\n\treturn \"I can eat glass and it doesn't hurt me.\"\n}\n\n// Go returns a Go proverb.\nfunc GoV2() string {\n\treturn \"Don't communicate by sharing memory, share memory by communicating.\"\n}\n\n// Opt returns an optimization truth.\nfunc OptV2() string {\n\t// Wisdom from ken.\n\treturn \"If a program is too slow, it must have a loop.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module 'b' and Dependency 'c' (Go Module)\nDESCRIPTION: This `go.mod` file declares the module path as `example.com/badchain/b` and specifies that it requires version `v1.0.0` of the module `example.com/badchain/c`. This is fundamental for Go's module system to manage dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_badchain_b_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: gomod\nCODE:\n```\nmodule example.com/badchain/b\n\nrequire example.com/badchain/c v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Fetching Metadata of a Nested Module - Successfully\nDESCRIPTION: This snippet shows how to fetch metadata for a nested Go module at a specific tag. It demonstrates retrieval of VCS-specific metadata such as 'Origin', 'VCS', 'Subdir', 'TagPrefix', and 'Hash', then stores the output in a JSON file. It requires the 'go' tool and the ability to access the specified repository.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_issue61415.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo list -json -m --versions -e vcs-test.golang.org/git/issue61415.git/nested@has-nested\ncp stdout has-nested.json\n```\n\n----------------------------------------\n\nTITLE: Go Version Management Test Script\nDESCRIPTION: Comprehensive test script for validating Go version management behaviors. Tests version upgrades, downgrades, toolchain specifications, and error handling across different Go versions including release candidates.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_toolchain.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# setup\nenv TESTGO_VERSION=go1.99rc1\nenv TESTGO_VERSION_SWITCH=switch\n\n# go get go should use the latest Go 1.23\ncp go.mod.orig go.mod\ngo get go\nstderr '^go: upgraded go 1.21 => 1.23.9$'\ngrep 'go 1.23.9' go.mod\n! grep toolchain go.mod\n\n# go get go@1.23 should use the latest Go 1.23\ncp go.mod.orig go.mod\ngo get go@1.23\nstderr '^go: upgraded go 1.21 => 1.23.9$'\ngrep 'go 1.23.9' go.mod\n! grep toolchain go.mod\n\n# Additional test cases follow...\n```\n\n----------------------------------------\n\nTITLE: Controlling HTTP/2 Client Support using http2client GODEBUG Setting (Go 1.6)\nDESCRIPTION: Introduced in Go 1.6, this setting controls the transparent enablement of HTTP/2 support in the net/http client. The default behavior enables HTTP/2. Setting http2client=0 disables automatic HTTP/2 negotiation by the client. Set via GODEBUG environment variable (e.g., GODEBUG=http2client=0).\nSOURCE: https://github.com/golang/go/blob/master/doc/godebug.md#2025-04-22_snippet_30\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp2client\n```\n\n----------------------------------------\n\nTITLE: HTTP Related Constants and Types - Go\nDESCRIPTION: HTTP-related constants and types including SameSite cookie modes, status codes, and transport configuration options. These are used for HTTP server and client implementations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.11.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nconst (\n    SameSiteDefaultMode SameSite = 1\n    SameSiteLaxMode SameSite = 2\n    SameSiteStrictMode SameSite = 3\n    StatusMisdirectedRequest = 421\n)\n\ntype SameSite int\n\ntype Cookie struct {\n    SameSite SameSite\n}\n```\n\n----------------------------------------\n\nTITLE: Improved Testing and Benchmarking Utilities - testing Go\nDESCRIPTION: The snippets add Chdir and Context methods to testing types, and extend TB interface for future compatibility. Methods enable setting working directories during tests and provide a context.Context for cancellation or deadlines. Their main parameters are test state receivers and (optionally) filesystem paths. These changes facilitate robust, isolated, and concurrent Go testing, especially when working with dynamic test scaffolding or timeouts.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_22\n\nLANGUAGE: Go\nCODE:\n```\npkg testing, method (*B) Chdir(string) #62516\npkg testing, method (*B) Context() context.Context #36532\npkg testing, method (*B) Loop() bool #61515\npkg testing, method (*F) Chdir(string) #62516\npkg testing, method (*F) Context() context.Context #36532\npkg testing, method (*T) Chdir(string) #62516\npkg testing, method (*T) Context() context.Context #36532\npkg testing, type TB interface, Chdir(string) #62516\npkg testing, type TB interface, Context() context.Context #36532\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment and Running Go List - Shell\nDESCRIPTION: This shell snippet clears the HOME and GOPATH environment variables using the 'env' command, then runs 'go list -deps main.go' to ensure dependencies are listed correctly despite the absence of these variables. It expects a standard output containing only 'io'. Required dependencies are the system Go installation and a shell environment. Inputs are commands for environment manipulation, and output is evaluated by matching stdout. Limitations include OS-dependent behavior and presumption of Go toolchain presence.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_no_gopath.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv HOME=''\nenv home=''\nenv GOPATH=''\n\ngo list -deps main.go\nstdout '^io$'\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests with Race Detector and Coverage (Shell)\nDESCRIPTION: Executes Go tests similar to the previous test run, but includes the `-race` flag to enable the race detector. It tests the `encoding/binary` and `errors` packages with coverage analysis enabled (`-cover`), writing the profile to `$WORK/cover.out`. This tests the coverage behavior when the race detector is active.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_modes.txt#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngo test -short -race -cover encoding/binary errors -coverprofile=$WORK/cover.out\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Dependencies\nDESCRIPTION: This go.mod file defines the module and its dependencies for the project. It specifies required external packages and their versions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_concurrent.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule golang.org/issue/26794\n\nrequire (\n\tgolang.org/x/text v0.3.0\n\trsc.io/sampler v1.0.0\n)\n```\n\n----------------------------------------\n\nTITLE: Testing go mod vendor command for repairing vendor/modules.txt\nDESCRIPTION: Shows how 'go mod vendor' can repair vendor/modules.txt to make -mod=vendor work again in Go 1.14.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_auto.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nenv GOFLAGS=\n\ngo mod edit -go=1.14\ngo mod vendor\n\ngo list -f {{.Dir}} -tags tools -e all\nstdout '^'$WORK'[/\\\\]auto$'\nstdout '^'$WORK'[/\\\\]auto[/\\\\]vendor[/\\\\]example.com[/\\\\]printversion$'\nstdout '^'$WORK'[/\\\\]auto[/\\\\]vendor[/\\\\]example.com[/\\\\]version$'\n\n! go list -m all\nstderr 'go: can''t compute ''all'' using the vendor directory\\n\\t(Use -mod=mod or -mod=readonly to bypass.)'\n\n! go list -m -f '{{.Dir}}' all\nstderr 'go: can''t compute ''all'' using the vendor directory\\n\\t(Use -mod=mod or -mod=readonly to bypass.)'\n```\n\n----------------------------------------\n\nTITLE: Main Module Configuration (go.mod)\nDESCRIPTION: Primary module configuration file defining dependencies on modules b and d with version 0.1.0 and including replace directives for local module references.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_newroot.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/a\n\ngo 1.16\n\nrequire (\n\texample.net/b v0.1.0\n\texample.net/d v0.1.0\n)\n\nreplace (\n\texample.net/b v0.1.0 => ./b\n\texample.net/c v0.1.0 => ./c\n\texample.net/c v0.2.0 => ./c\n\texample.net/d v0.1.0 => ./d\n)\n```\n\n----------------------------------------\n\nTITLE: Source Code for Package 'b/y' (Go)\nDESCRIPTION: The source code for package `y` within module `b`. This package imports module `c` and provides a function `CVersion` that uses it. It is the package newly imported by `m.go.new`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_import_allmod.txt#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n-- b1/y/y.go --\npackage y\n\nimport \"c\"\n\nfunc CVersion() string {\n\treturn c.Version\n}\n```\n\n----------------------------------------\n\nTITLE: Main Module Definition\nDESCRIPTION: Defines the main module with a local replacement for badimport dependency\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_errors.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/m\n\ngo 1.16\n\nreplace example.com/badimport v0.1.0 => ./badimport\n```\n\n----------------------------------------\n\nTITLE: Testing -mod=vendor behavior with Go 1.13\nDESCRIPTION: Shows that -mod=vendor applies limited consistency checks even for Go 1.13, allowing incomplete vendor/modules.txt but catching version mismatches.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_auto.txt#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngo mod edit -go=1.13\ngo list -mod=vendor -f {{.Dir}} -tags tools -e all\nstdout '^'$WORK'[/\\\\]auto$'\nstdout '^'$WORK'[/\\\\]auto[/\\\\]vendor[/\\\\]example.com[/\\\\]printversion$'\nstdout '^'$WORK'[/\\\\]auto[/\\\\]vendor[/\\\\]example.com[/\\\\]version$'\n\ncp $WORK/modules-bad-1.13.txt vendor/modules.txt\n! go list -mod=vendor -f {{.Dir}} -tags tools all\nstderr '^go: inconsistent vendoring in '$WORK[/\\\\]auto':$'\nstderr '^\\texample.com/printversion@v1.0.0: is explicitly required in go.mod, but vendor/modules.txt indicates example.com/printversion@v1.1.0$'\nstderr '^\\tTo ignore the vendor directory, use -mod=readonly or -mod=mod.\\n\\tTo sync the vendor directory, run:\\n\\t\\tgo mod vendor$'\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Printing Build Info in Go Package Init\nDESCRIPTION: This Go package `lib` utilizes an `init` function, which runs before the `main` package's initialization. Inside `init`, it calls `runtime/debug.ReadBuildInfo()` to retrieve build-time module information. If successful, it prints the main module's path and version, followed by the path, version, sum, and any replacement details for each dependency. It depends on the `runtime/debug` standard library package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_modinfo.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n-- x/lib/lib.go --\n// Package lib accesses runtime/debug.modinfo before package main's init\n// functions have run.\npackage lib\n\nimport \"runtime/debug\"\n\nfunc init() {\n\tm, ok := debug.ReadBuildInfo()\n\tif !ok {\n\t\tpanic(\"failed debug.ReadBuildInfo\")\n\t}\n\tprintln(\"mod\", m.Main.Path, m.Main.Version)\n\tfor _, d := range m.Deps {\n\t\tprintln(\"dep\", d.Path, d.Version, d.Sum)\n\t\tif r := d.Replace; r != nil {\n\t\t\tprintln(\"=>\", r.Path, r.Version, r.Sum)\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Go Module Cache\nDESCRIPTION: Uses 'go clean -modcache' to remove the entire module cache, forcing subsequent commands to re-download modules if needed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_build.txt#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngo clean -modcache\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Configuration\nDESCRIPTION: This snippet defines the module configuration for a Go project. It specifies the module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_ignore_leading_bom.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule m\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Go Workspace Configuration File\nDESCRIPTION: Workspace configuration file specifying Go version 1.18 and including module 'a'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_gowork.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\n\nuse ./a\n```\n\n----------------------------------------\n\nTITLE: Editing Go Version in go.mod\nDESCRIPTION: Changes the Go version in go.mod to 1.16 and checks module compatibility.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo mod edit -go=1.16\ngo list -m all\ncmp stdout m_all.txt\n```\n\n----------------------------------------\n\nTITLE: Go Module Version Management\nDESCRIPTION: Creates and manages multiple versions of Go modules with appropriate version tags and branch structures.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/hg/vgotest1.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir pkg\necho 'package p // pkg/p.go'\ncp stdout pkg/p.go\ngit add pkg/p.go\ngit commit -m 'add pkg/p.go'\ngit tag v0.0.0\ngit tag v1.0.0\ngit tag v2.0.0\ngit tag mytag\n\ngit branch v1\ngit branch v2\ngit checkout v2\n```\n\n----------------------------------------\n\nTITLE: Re-enabling CGO by Setting CC in Go\nDESCRIPTION: This snippet demonstrates re-enabling cgo by setting the CC environment variable to 'cc'. It then verifies that CGO_ENABLED is set to 1.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/autocgo.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nenv CC=cc\ngo env CGO_ENABLED\nstdout 1\n```\n\n----------------------------------------\n\nTITLE: Declaring Module Requirement with go.mod in Go\nDESCRIPTION: This snippet defines the module path as 'example.com/split' and adds a requirement for the subpackage 'example.com/split/subpkg' at version v1.1.0. It is typically placed in the root of a Go module and is necessary for dependency tracking and management using Go modules. The 'require' directive instructs the Go toolchain to fetch and use the specified version of the dependency when building or testing code. No additional parameters are required beyond those shown, and the snippet must be saved in a file named 'go.mod'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_split_v1.1.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go.mod\nCODE:\n```\nmodule example.com/split\n\nrequire example.com/split/subpkg v1.1.0\n```\n\n----------------------------------------\n\nTITLE: Main Package Implementation\nDESCRIPTION: Simple Go program that imports and uses the quote package to print a hello message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sum.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"rsc.io/quote\"\n)\n\nfunc main() {\n\tfmt.Println(quote.Hello())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Invoking Generics in Go Main\nDESCRIPTION: The `main.go` file imports the generics package and invokes its `Bar` function within the `main` function. The code assumes that the `Bar` function is implemented in the imported package. Designed for command line execution, it illustrates a basic entry point using the generics library developed in Go.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_depends_on_generics_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport \"example.com/generics\"\n\nfunc main() {generics.Bar()}\n```\n\n----------------------------------------\n\nTITLE: Module A Configuration and Main Function\nDESCRIPTION: This snippet shows the go.mod file for module 'example.com/a' and its main Go file. It requires and imports 'example.com/b' module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_prune.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/a\n\ngo 1.18\n\nrequire example.com/b v1.0.0\n\nreplace example.com/b v1.0.0 => ../b\n```\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport \"example.com/b\"\n\nfunc main() {\n\tb.B()\n}\n```\n\n----------------------------------------\n\nTITLE: Command Package B Implementation\nDESCRIPTION: Minimal main package implementation for command b.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_cmd_v1.0.0-newerself.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Version Retractions using go.mod\nDESCRIPTION: This `go.mod` file defines the module `example.com/retract/self/prev` compatible with Go 1.15. It utilizes the `retract` directive to mark versions `v1.0.0-bad` and `v1.9.0` as retracted, making them unavailable for dependency resolution while allowing older versions like v1.1.0 (mentioned in context) to remain usable.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_prev_v1.9.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/retract/self/prev\n\ngo 1.15\n\nretract v1.0.0-bad // bad\nretract v1.9.0 // self\n```\n\n----------------------------------------\n\nTITLE: Fuzzing Test with Execution Counter\nDESCRIPTION: Implements a fuzzing test that creates a unique file for each execution to track the number of times the fuzzer runs. Uses process ID and counter for unique filenames.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_fuzztime.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc FuzzTestCount(f *testing.F) {\n\tpid := os.Getpid()\n\tn := 0\n\tf.Fuzz(func(t *testing.T, _ []byte) {\n\t\tname := fmt.Sprintf(\"count/%v.%d\", pid, n)\n\t\tif err := os.WriteFile(name, nil, 0666); err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\t\tn++\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Regular Function in a With-Test Package - Go\nDESCRIPTION: Defines package 'withtest' and exports a simple Bar function as a minimal non-test code. Serves as the source for the related test file and allows verifying coverage for more traditional package structures. There are no inputs or outputs; Bar is only meant to be exercised by test code for coverage.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_pkgall_imports.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage withtest\n\nfunc Bar() {}\n```\n\n----------------------------------------\n\nTITLE: Go Work File Definition\nDESCRIPTION: A minimal go.work file that specifies Go 1.21 as the language version. This file creates a workspace but intentionally doesn't include any modules for testing purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_empty.txt#2025-04-22_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\ngo 1.21\n```\n\n----------------------------------------\n\nTITLE: Setting up Go Vendored Project Structure and Running `go list` (Shell)\nDESCRIPTION: This shell script configures a Go workspace (`GOPATH`) with a project `x/y`. It utilizes a `_vendor` directory and symbolic links to manage dependencies (`x/y/z` used by `x/y/w`). After setting up the structure and `GOPATH`, it executes `go list ./...` from the source directory to list all discoverable packages, demonstrating how Go handles vendoring and complex path setups. `GO111MODULE=off` ensures GOPATH mode is used.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_symlink_vendor_issue15201.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n[!symlink] skip\nenv GO111MODULE=off\n\nmkdir $WORK/tmp/gopath/src/x/y/_vendor/src/x\nsymlink $WORK/tmp/gopath/src/x/y/_vendor/src/x/y -> ../../..\nmkdir $WORK/tmp/gopath/src/x/y/_vendor/src/x/y/w\ncp w.go $WORK/tmp/gopath/src/x/y/w/w.go\nsymlink $WORK/tmp/gopath/src/x/y/w/vendor -> ../_vendor/src\nmkdir $WORK/tmp/gopath/src/x/y/_vendor/src/x/y/z\ncp z.go $WORK/tmp/gopath/src/x/y/z/z.go\n\nenv GOPATH=$WORK/tmp/gopath/src/x/y/_vendor${:}$WORK/tmp/gopath\ncd $WORK/tmp/gopath/src\ngo list ./...\n```\n\n----------------------------------------\n\nTITLE: Setting GO111MODULE Environment Variable\nDESCRIPTION: Sets the GO111MODULE environment variable to 'on' to enable module mode for Go commands.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_clean_cache.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=on\n```\n\n----------------------------------------\n\nTITLE: I/O testing utilities in testing/iotest package\nDESCRIPTION: Provides utilities for testing I/O implementations. Includes ErrReader for creating a reader that returns a specific error and TestReader for verifying reader implementations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nfunc ErrReader(error) io.Reader\nfunc TestReader(io.Reader, []uint8) error\n```\n\n----------------------------------------\n\nTITLE: Build Testing Bash Script\nDESCRIPTION: A comprehensive bash script that tests the behavior of the -trimpath flag in Go builds across different environments including module mode, GOPATH mode, with overlays, and with gccgo. It verifies that paths are properly included or excluded from binaries according to the build flags.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_trimpath.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# If GOROOT is set, 'go build -trimpath' bakes that into the resulting\n# binary. Explicitly unset it here.\nenv GOROOT=\n\n# Set up two identical directories that can be used as GOPATH.\nenv GO111MODULE=on\nmkdir $WORK/a/src/paths $WORK/b/src/paths\ncp paths.go $WORK/a/src/paths\ncp paths.go $WORK/b/src/paths\ncp overlay.json $WORK/a/src/paths\ncp overlay.json $WORK/b/src/paths\ncp go.mod $WORK/a/src/paths/\ncp go.mod $WORK/b/src/paths/\n\n\n# A binary built without -trimpath should contain the module root dir\n# and GOROOT for debugging and stack traces.\ncd $WORK/a/src/paths\ngo build -o $WORK/paths-dbg.exe .\nexec $WORK/paths-dbg.exe $WORK/paths-dbg.exe\nstdout 'binary contains module root: true'\nstdout 'binary contains an empty GOROOT'\n\n# A binary built with -trimpath should not contain the current workspace.\ngo build -trimpath -o $WORK/paths-a.exe .\nexec $WORK/paths-a.exe $WORK/paths-a.exe\nstdout 'binary contains module root: false'\nstdout 'binary contains an empty GOROOT'\n\n# A binary from an external module built with -trimpath should not contain\n# the current workspace or GOROOT.\ngo get rsc.io/fortune\ngo install -trimpath rsc.io/fortune\nexec $WORK/paths-a.exe $GOPATH/bin/fortune$GOEXE\nstdout 'binary contains module root: false'\nstdout 'binary contains an empty GOROOT'\ngo mod edit -droprequire rsc.io/fortune\n\n# Two binaries built from identical packages in different directories\n# should be identical.\ncd $WORK/b/src/paths\ngo build -trimpath -o $WORK/paths-b.exe\ncmp -q $WORK/paths-a.exe $WORK/paths-b.exe\n\n\n# Same sequence of tests but with overlays.\n# A binary built without -trimpath should contain the module root dir\n# and GOROOT for debugging and stack traces.\ncd $WORK/a/src/paths\ngo build -overlay overlay.json -o $WORK/paths-dbg.exe ./overlaydir\nexec $WORK/paths-dbg.exe $WORK/paths-dbg.exe\nstdout 'binary contains module root: true'\nstdout 'binary contains an empty GOROOT'\n\n# A binary built with -trimpath should not contain the current workspace.\ngo build -overlay overlay.json -trimpath -o $WORK/paths-a.exe ./overlaydir\nexec $WORK/paths-a.exe $WORK/paths-a.exe\nstdout 'binary contains module root: false'\nstdout 'binary contains an empty GOROOT'\n\n# Two binaries built from identical packages in different directories\n# should be identical.\ncd $WORK/b/src/paths\ngo build -overlay overlay.json -trimpath -o $WORK/paths-b.exe ./overlaydir\ncmp -q $WORK/paths-a.exe $WORK/paths-b.exe\n\n\n# Same sequence of tests but in GOPATH mode.\n# A binary built without -trimpath should contain GOPATH and GOROOT.\nenv GO111MODULE=off\ncd $WORK\nenv GOPATH=$WORK/a\ngo build -o paths-dbg.exe paths\nexec ./paths-dbg.exe paths-dbg.exe\nstdout 'binary contains GOPATH: true'\nstdout 'binary contains an empty GOROOT'\n\n# A binary built with -trimpath should not contain GOPATH.\ngo build -trimpath -o paths-a.exe paths\nexec ./paths-a.exe paths-a.exe\nstdout 'binary contains GOPATH: false'\nstdout 'binary contains an empty GOROOT'\n\n# Two binaries built from identical packages in different GOPATH roots\n# should be identical.\nenv GOPATH=$WORK/b\ngo build -trimpath -o paths-b.exe paths\ncmp -q paths-a.exe paths-b.exe\n\n\n# Same sequence of tests but with gccgo.\n# gccgo does not support builds in module mode.\n[!exec:gccgo] stop\n[cross] stop  # gccgo can't necessarily cross-compile\nenv GOPATH=$WORK/a\n\n# A binary built with gccgo without -trimpath should contain the current\n# GOPATH and GOROOT.\ngo build -compiler=gccgo -o paths-dbg.exe paths\nexec ./paths-dbg.exe paths-dbg.exe\nstdout 'binary contains GOPATH: true'\nstdout 'binary contains an empty GOROOT'\n\n# gccgo doesn't load std from GOROOT.\n# A binary built with gccgo with -trimpath should not contain GOPATH or GOROOT.\ngo build -compiler=gccgo -trimpath -o paths-a.exe paths\nexec ./paths-a.exe paths-a.exe\nstdout 'binary contains GOPATH: false'\nstdout 'binary contains an empty GOROOT'\n\n# Two binaries built from identical packages in different directories\n# should be identical.\nenv GOPATH=$WORK/b\ngo build -compiler=gccgo -trimpath -o paths-b.exe paths\ncmp -q paths-a.exe paths-b.exe\n```\n\n----------------------------------------\n\nTITLE: Hello World Implementation in Go\nDESCRIPTION: Basic Go program that prints 'hello world' to standard output using println function\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_hello.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\nfunc main() { println(\"hello world\") }\n```\n\n----------------------------------------\n\nTITLE: Setting format template for go list command output\nDESCRIPTION: Defines an environment variable FMT containing a template for formatting the output of 'go list' commands, showing path, error, version, and versions data.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_versions.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv FMT='{{.Path}}{{with .Error}}: {{printf \"%q\" .Err}}{{end}} {{printf \"%q\" .Version}}{{with .Versions}} {{.}}{{end}}'\n```\n\n----------------------------------------\n\nTITLE: Setting up environment variables for Go module testing\nDESCRIPTION: Sets up an environment variable MODFMT that will be used to format module information in a specific way for testing purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_deleted.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv MODFMT='{{with .Module}}{{.Path}} {{.Version}}{{end}}'\n```\n\n----------------------------------------\n\nTITLE: Replace Error Message Template\nDESCRIPTION: Error message template for replace directive violations in go.mod files.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_run_pkg_version.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ngo: example.com/cmd/a@v1.0.0-replace (in example.com/cmd@v1.0.0-replace):\n\tThe go.mod file for the module providing named packages contains one or\n\tmore replace directives. It must not contain directives that would cause\n\tit to be interpreted differently than if it were the main module.\n```\n\n----------------------------------------\n\nTITLE: Testing TestMain with Zero Exit Status\nDESCRIPTION: A Go test with TestMain that skips all tests by calling os.Exit(0). This is a valid pattern for conditionally skipping an entire test package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_exit.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage zero\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"testing\"\n)\n\nfunc TestMain(m *testing.M) {\n\tfmt.Println(\"skipping all tests\")\n\tos.Exit(0)\n}\n\nfunc TestNotListed(t *testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition File\nDESCRIPTION: Module definition file specifying dependencies and Go version requirement\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_retractions_issue66403.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/m\n\ngo 1.22\n\nrequire example.com/retract/newergoversion v1.0.0\n```\n\n----------------------------------------\n\nTITLE: CGO Integration with Quoted Header\nDESCRIPTION: Alternative CGO implementation that includes a header using quotes. Tests that overlays work with different header inclusion styles.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_overlay.txt#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\n// #include \"cgo_header.h\"\nimport \"C\"\n\nfunc main() {\n\tC.say_hello()\n}\n```\n\n----------------------------------------\n\nTITLE: Modified Cache Test for Overlay\nDESCRIPTION: Modified version of the cache test file that prints \"different\" instead of \"something\". Used to test that changes to overlaid files properly invalidate the build cache.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_overlay.txt#2025-04-22_snippet_19\n\nLANGUAGE: go\nCODE:\n```\npackage foo\n\nimport \"fmt\"\n\nfunc bar() {\n\tfmt.Println(\"different\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Test Dependency for Package 'a' in Go\nDESCRIPTION: This Go test file belongs to package 'a_test'. It imports package 'b', creating a dependency that is only relevant when running tests for package 'a' (or modules that depend on 'a'). This specific import introduces the path `a_test -> b`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_horizon.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n-- a1/a_test.go --\npackage a_test\n\nimport _ \"b\"\n```\n\n----------------------------------------\n\nTITLE: Defining golang.org/x/text Module in Go\nDESCRIPTION: This snippet defines the module name for golang.org/x/text. It's a crucial part of Go's module system, specifying the import path for this package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_x_text_v0.0.0-20170915032832-14c0d48ead0c.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule golang.org/x/text\n```\n\n----------------------------------------\n\nTITLE: Version Information for Go Module\nDESCRIPTION: This JSON snippet declares the version of the Go module, which is specified as v1.5.2. This version information is crucial for dependency management and module updates.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_quote_v1.5.2.txt#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\"Version\":\"v1.5.2\"}\n```\n\n----------------------------------------\n\nTITLE: Fuzz Test Cases Implementation\nDESCRIPTION: Collection of fuzz test functions demonstrating different failure scenarios including return, skip, fail, panic, nil panic, runtime.Goexit, and os.Exit\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_fail.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc FuzzReturn(f *testing.F) {\n\tif isWorker() {\n\t\treturn\n\t}\n\tf.Fuzz(func(*testing.T, []byte) {})\n}\n\nfunc FuzzSkip(f *testing.F) {\n\tif isWorker() {\n\t\tf.Skip()\n\t}\n\tf.Fuzz(func(*testing.T, []byte) {})\n}\n\nfunc FuzzFail(f *testing.F) {\n\tif isWorker() {\n\t\tf.Fail()\n\t}\n\tf.Fuzz(func(*testing.T, []byte) {})\n}\n\nfunc FuzzPanic(f *testing.F) {\n\tif isWorker() {\n\t\tpanic(\"nope\")\n\t}\n\tf.Fuzz(func(*testing.T, []byte) {})\n}\n\nfunc FuzzNilPanic(f *testing.F) {\n\tif isWorker() {\n\t\tpanic(nil)\n\t}\n\tf.Fuzz(func(*testing.T, []byte) {})\n}\n\nfunc FuzzGoexit(f *testing.F) {\n\tif isWorker() {\n\t\truntime.Goexit()\n\t}\n\tf.Fuzz(func(*testing.T, []byte) {})\n}\n\nfunc FuzzExit(f *testing.F) {\n\tif isWorker() {\n\t\tos.Exit(99)\n\t}\n\tf.Fuzz(func(*testing.T, []byte) {})\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing External Module Import of golang.org/x/internal\nDESCRIPTION: Attempts to get the `./baddep` package (which tries to import `golang.org/notx/useinternal`, which depends on `golang.org/x/internal` via `golang.org/x/useinternal`) and then build it. The build (`! go build`) is expected to fail with an error indicating that the use of the internal package `golang.org/x/internal` is not allowed from outside the `golang.org/x` module tree.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# ...but that should not leak into other modules.\ngo get ./baddep\n! go build ./baddep\nstderr golang.org[/\\\\]notx[/\\\\]useinternal\nstderr 'use of internal package golang.org/x/.* not allowed'\n```\n\n----------------------------------------\n\nTITLE: Main Package Execution in Go\nDESCRIPTION: This Go code defines the `main` package which imports \"my.pkg\" and prints the value of `pkg.Text`. It requires \"pkg.Text\" to be set through a build process or default to \"unset\".\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_link_x_import_path_escape.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n-- main/main.go --\npackage main\n\nimport \"my.pkg\"\n\nfunc main() {\n\tprintln(pkg.Text)\n}\n```\n\n----------------------------------------\n\nTITLE: Recording Pseudo-Version in go.mod\nDESCRIPTION: Tests that getting a package with a pseudo-version correctly records that version in the go.mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_commit.txt#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngo get rsc.io/quote@v0.0.0-20180214005840-23179ee8a569\ngrep 'rsc.io/quote v0.0.0-20180214005840-23179ee8a569' go.mod\n```\n\n----------------------------------------\n\nTITLE: Testing Deadlock Detection in Go Fuzz Tests\nDESCRIPTION: This function tests how Go's fuzzing handles a deadlock situation. It enters an infinite select{} when the input is not 0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_crash.txt#2025-04-22_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\nfunc FuzzDeadlock(f *testing.F) {\n\tf.Add(int(0))\n\tf.Fuzz(func(t *testing.T, n int) {\n\t\tif n != 0 {\n\t\t\tselect {}\n\t\t}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module Test Commands for Issue #47738\nDESCRIPTION: Shell commands that test Go's module dependency management behavior. The commands verify that when imports are rewritten to use a newer version (v3) while the go.mod still requires an older version (v1.5.2), the 'go mod tidy' command correctly handles the dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_downgrade_ambiguous.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo list -m -f '{{.Path}}@{{.Version}}{{if .Indirect}} indirect{{end}}' all\nstdout '^rsc.io/quote@v1.5.2$'\n! stdout 'rsc.io/quote/v3'\ngo list -e all\n! stdout '^rsc.io/quote$'\n\n# 'go mod tidy' should preserve the requirement on rsc.io/quote but mark it\n# indirect. This prevents a downgrade to v1.5.1, which could introduce\n# an ambiguity.\ngo mod tidy\ngo list -m -f '{{.Path}}@{{.Version}}{{if .Indirect}} indirect{{end}}' all\nstdout '^rsc.io/quote@v1.5.2 indirect$'\nstdout '^rsc.io/quote/v3@v3.0.0$'\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Go Module Testing\nDESCRIPTION: Sets up environment variables for Go module testing, including disabling the module proxy and version control system.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_auth.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GO111MODULE=on\nenv GOPROXY=direct\nenv GOSUMDB=off\nenv GOVCS='*:off'\n```\n\n----------------------------------------\n\nTITLE: Download and Validate V2 Module Without go.mod\nDESCRIPTION: This snippet demonstrates downloading a v2 Go module without an explicit go.mod entry by copying a temporary file, running \"go get .\", and validating via 'go list -deps' that the module directory is as expected.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_multirepo.txt#2025-04-22_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ncp tmp/use_v2.go x.go\ngo get .\ngo list -deps -f {{.Dir}}\nstdout 'pkg[\\/]mod[\\/]rsc.io[\\/]quote[\\/]v2@v2.0.1$'\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests with Output Ordering\nDESCRIPTION: This command runs Go tests for all packages and checks the stdout for correct ordering of pkg1 and pkg2 output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_print.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo test ./...\nstdout 'pkg1(.|\n)*pkg2'\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Security with GOINSECURE Environment Variable\nDESCRIPTION: This script tests how 'go mod download' handles insecure HTTP redirects, verifying that downloads fail without proper GOINSECURE settings and succeed when the host is properly included in GOINSECURE. It tests exact host matching, glob patterns, and multiple host specifications.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_insecure_redirect.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=on\nenv GOPROXY=direct\nenv GOSUMDB=off\n\n! go mod download vcs-test.golang.org/insecure/go/insecure@latest\nstderr 'redirected .* to insecure URL'\n\n# insecure host\nenv GOINSECURE=vcs-test.golang.org\ngo clean -modcache\ngo mod download vcs-test.golang.org/insecure/go/insecure@latest\n\n# insecure glob host\nenv GOINSECURE=*.golang.org\ngo clean -modcache\ngo mod download vcs-test.golang.org/insecure/go/insecure@latest\n\n# insecure multiple host\nenv GOINSECURE=somewhere-else.com,*.golang.org\ngo clean -modcache\ngo mod download vcs-test.golang.org/insecure/go/insecure@latest\n\n# different insecure host does not fetch\nenv GOINSECURE=somewhere-else.com\ngo clean -modcache\n! go mod download vcs-test.golang.org/insecure/go/insecure@latest\nstderr 'redirected .* to insecure URL'\n```\n\n----------------------------------------\n\nTITLE: Testing Deadline Within a Minute in Go\nDESCRIPTION: This function tests that t.Deadline() returns a non-zero deadline within one minute of the test start time when a deadline is set. It verifies that the deadline is after the current time but not more than a minute in the future.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_deadline.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc TestDeadlineWithinMinute(t *testing.T) {\n\tnow := time.Now()\n\td, ok := t.Deadline()\n\tif !ok || d.IsZero() {\n\t\tt.Fatalf(\"t.Deadline() = %v, %v; want nonzero deadline\", d, ok)\n\t}\n\tif !d.After(now) {\n\t\tt.Fatalf(\"t.Deadline() = %v; want after start of test (%v)\", d, now)\n\t}\n\tif d.Sub(now) > time.Minute {\n\t\tt.Fatalf(\"t.Deadline() = %v; want within one minute of start of test (%v)\", d, now)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Main Go Module Configuration\nDESCRIPTION: Primary go.mod file defining module dependencies and replacements for example.net/a and example.net/b versions\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_wild.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example\n\ngo 1.16\n\nrequire example.net/a v0.1.0\n\nreplace (\n\texample.net/a v0.1.0 => ./a10\n\texample.net/a v0.1.1 => ./a11\n\texample.net/a v0.2.0 => ./a20\n\texample.net/a v0.2.1 => ./a20\n\texample.net/b v0.1.0 => ./b1\n\texample.net/b v0.1.1 => ./b1\n\texample.net/b v0.2.0 => ./b2\n)\n```\n\n----------------------------------------\n\nTITLE: Go Module Configuration for Replacing gopkg.in v4 with GitHub v0\nDESCRIPTION: This go.mod file configures the replacement of a gopkg.in v4 module with a GitHub v0 module, showing backwards compatibility support.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_gopkgin.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nmodule golang.org/issue/34254\n\ngo 1.13\n\nrequire gopkg.in/src-d/go-git.v4 v4.13.1\n\nreplace gopkg.in/src-d/go-git.v4 v4.13.1 => github.com/src-d/go-git v0.0.0-20190801152248-0d1a009cbb60\n```\n\n----------------------------------------\n\nTITLE: Building and Versioning a Simple Go Program\nDESCRIPTION: Builds a simple Go program and checks its version information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version.txt#2025-04-22_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ngo build empty.go\ngo version empty$GOEXE\n[cgo] go build -ldflags=-linkmode=external empty.go\n[cgo] go version empty$GOEXE\n```\n\n----------------------------------------\n\nTITLE: Main Package with CGO Integration\nDESCRIPTION: This Go file defines the main package and imports the 'C' package for CGO usage. It declares a variable of type C.int to demonstrate CGO integration.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_n_cgo.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport \"C\"\n\nvar _ C.int\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Generics\nDESCRIPTION: The `go.mod` file sets up the Go module path and specifies required version of generics as a dependency. Executing this will establish the necessary environment for compiling the Go application using specified version constraints.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_depends_on_generics_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/depends/on/generics\n\ngo 1.18\n\nrequire example.com/generics v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Testing Go Run Flag Parsing\nDESCRIPTION: Shell command testing the go run command's flag parsing behavior, specifically verifying that flags after the package name are not incorrectly interpreted as cmd/go flags. Tests fix for issue #64738.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_run_flags_issue64738.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo run -n example.com/printversion@v0.1.0 -p ignored\n```\n\n----------------------------------------\n\nTITLE: Reusing go list Output with the -reuse Flag - Shell\nDESCRIPTION: This snippet demonstrates the use of the '-reuse' flag to instruct 'go list' to reuse cached metadata from a previously written JSON file. It ensures that when the same query is made with the -reuse option, the expected version and all origin data fields remain intact, with an explicit 'Reuse' indicator in the output. This checks tooling optimization for repeated queries. Dependencies include a valid JSON cache file and the Go toolchain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_issue61423.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo list -reuse=git-latest.json -m -json vcs-test.golang.org/git/issue61415.git@latest\nstdout '\"Version\": \"v0.0.0-20231114180001-f213069baa68\"'\nstdout '\"Origin\":'\nstdout '\"VCS\": \"git\"'\nstdout '\"Hash\": \"f213069baa68ec26412fb373c7cf6669db1f8e69\"'\nstdout '\"Ref\": \"HEAD\"'\nstdout '\"TagSum\": \"t1:47DEQpj8HBSa\\+/TImW\\+5JCeuQeRkm5NMpJWZG3hSuFU=\"'\nstdout '\"Reuse\": true'\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Go Module - go.mod File\nDESCRIPTION: This go.mod file defines the root of a Go module named m, targeting Go version 1.13. It is a required dependency for module-based builds in Go 1.11 and later, allowing use of go list and go command features shown in the test script. Inputs: none. Outputs: module metadata used for builds. Limitations: Only declares module name and go version; no dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_constraints.txt#2025-04-22_snippet_1\n\nLANGUAGE: go.mod\nCODE:\n```\nmodule m\n\ngo 1.13\n\n```\n\n----------------------------------------\n\nTITLE: Module B Checksum File\nDESCRIPTION: Checksum entries for Module B dependencies in go.sum format\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_sum.txt#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nrsc.io/quote v1.0.0 h1:kQ3IZQzPTiDJxSZI98YaWgxFEhlNdYASHvh+MplbViw=\nrsc.io/quote v1.0.0/go.mod h1:v83Ri/njykPcgJltBc/gEkJTmjTsNgtO1Y7vyIK1CQA=\n```\n\n----------------------------------------\n\nTITLE: Standard Go Module Definition (go.mod)\nDESCRIPTION: This standard `go.mod` file defines the module path 'example.com/deprecated/b' and sets the minimum required Go version to '1.17'. This is the canonical file recognized by the Go toolchain for managing module dependencies and versions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_deprecated_b_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/deprecated/b\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition File\nDESCRIPTION: Basic go.mod file defining a module named example.com/m\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit_no_modcache.txt#2025-04-22_snippet_1\n\nLANGUAGE: gomod\nCODE:\n```\nmodule example.com/m\n```\n\n----------------------------------------\n\nTITLE: Go Get with Multi-line Rationale (Block)\nDESCRIPTION: This snippet tests 'go get' behavior when retraction appears in a block. It asserts only the first line of the reason is shown.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_rationale.txt#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ngo get example.com/retract/rationale@v1.0.0-multiline2\nstderr '^go: warning: example.com/retract/rationale@v1.0.0-multiline2: retracted by module author: short description$'\n! stderr 'detail'\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Environment for Module Mode\nDESCRIPTION: Sets the GO111MODULE environment variable to 'on' to enable module mode for Go commands.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_flags.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n```\n\n----------------------------------------\n\nTITLE: Validate V2 Module in a Subdirectory\nDESCRIPTION: This snippet validates a v2 module located in a subdirectory by creating the directory, copying the necessary files, and using \"go list -deps\" to check that the module path is correctly included.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_multirepo.txt#2025-04-22_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nmkdir v2\ncp x.go v2/x.go\ncp tmp/v2.mod v2/go.mod\ngo list -deps -f {{.Dir}}\nstdout 'pkg[\\/]mod[\\/]rsc.io[\\/]quote[\\/]v2@v2.0.1$'\n```\n\n----------------------------------------\n\nTITLE: Selecting Self-Retracted Latest Version using Go List\nDESCRIPTION: Checks that 'go list -m -retracted mod@latest' correctly provides the self-retracted latest version of a module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_retract.txt#2025-04-22_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\n# 'go list -m -retracted mod@latest' selects the self-retracted latest version.\\ngo list -m -retracted -f '{{.Version}}{{with .Retracted}} retracted{{end}}' example.com/retract/self/prev@latest\\nstdout '^v1.9.0 retracted$'\n```\n\n----------------------------------------\n\nTITLE: Defining Module in .mod File for Go\nDESCRIPTION: Specifies the module path for the 'depofdirectpatch' package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_depofdirectpatch_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule patch.example.com/depofdirectpatch\n```\n\n----------------------------------------\n\nTITLE: Listing Dependencies with go list -deps -test\nDESCRIPTION: Uses 'go list -deps -test' to list transitive imports of tests and non-tests in the main module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_all.txt#2025-04-22_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ngo list -f $PKGFMT -deps -test ./...\n```\n\n----------------------------------------\n\nTITLE: Listing Vendored Modules in Go\nDESCRIPTION: This snippet demonstrates how to list vendored modules and their details using the 'go list' command with the -mod=vendor flag.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_getmode_vendor.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo list -mod=vendor\ngo list -mod=vendor -f '{{with .Module}}{{.Path}} {{.Version}}{{end}} {{.Dir}}' all\nstdout '^rsc.io/quote v1.5.1 .*vendor[\\/]rsc.io[\\/]quote$'\nstdout '^golang.org/x/text v0.0.0.* .*vendor[\\/]golang.org[\\/]x[\\/]text[\\/]language$'\n```\n\n----------------------------------------\n\nTITLE: Testing go list commands with -pgo=auto flag\nDESCRIPTION: Tests that go list commands succeed as expected when using the -pgo=auto flag in various scenarios.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo list -pgo=auto ./a/a1\n\ngo list -test -pgo=auto ./a/a1\n\ngo list -deps -pgo=auto ./a/a1\n```\n\n----------------------------------------\n\nTITLE: Testing Normal Behavior in Go Test\nDESCRIPTION: A simple Go test function that completes successfully without explicitly calling os.Exit().\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_exit.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage normal\n\nimport \"testing\"\n\nfunc TestExitZero(t *testing.T) {\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Setup and Go Module Test\nDESCRIPTION: Sets Go version environment variables and tests GOMOD path resolution without triggering toolchain download\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_gomod_issue61455.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv TESTGO_VERSION=go1.500\nenv TESTGO_VERSION_SWITCH=mismatch\n\n# go env GOMOD should not trigger a toolchain download\ncd $GOPATH/mod\ngo env GOMOD\nstdout mod[/\\\\]go.mod\n! stderr 'go: toolchain go1.500 invoked to provide go1.700'\n```\n\n----------------------------------------\n\nTITLE: Package Declarations for Dependent Modules\nDESCRIPTION: These Go files contain package declarations for the dependent modules 'w', 'x', and 'sub' (within 'z'). The 'x' package also imports 'w.1'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage w\n```\n\nLANGUAGE: go\nCODE:\n```\npackage x\nimport _ \"w.1\"\n```\n\nLANGUAGE: go\nCODE:\n```\npackage sub\n```\n\n----------------------------------------\n\nTITLE: Minimal Go Program\nDESCRIPTION: Simple Go program with empty main function for testing build configurations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_compiler_output.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Testing Module with go 1.22.3 Requirement\nDESCRIPTION: Tests how 'go get needgo1223' (which requires Go 1.22.3) uses exactly Go 1.22.3 when GOTOOLCHAIN=auto is set.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_exec_toolchain.txt#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n# go get needgo1223 (says 'go 1.22.3') should use go 1.22.3\nenv GOTOOLCHAIN=local\ncp go.mod.new go.mod\n! go get rsc.io/needgo1223\nstderr '^go: rsc.io/needgo1223@v0.0.1 requires go >= 1.22.3 \\(running go 1.21; GOTOOLCHAIN=local\\)'\n\nenv GOTOOLCHAIN=auto\ncp go.mod.new go.mod\ngo get rsc.io/needgo1223\nstderr '^go: upgraded go 1.1 => 1.22.3$'\nstderr '^go: rsc.io/needgo1223@v0.0.1 requires go >= 1.22.3; switching to go1.22.9$'\n! stderr '^go: added toolchain$'\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Tool Directives\nDESCRIPTION: Tests adding and removing tool directives with 'go mod edit -tool' and '-droptool', which declare development tool dependencies in the go.mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit.txt#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n# go mod edit -tool\ncd $WORK/h\ncp go.mod.start go.mod\ngo mod edit -tool example.com/tool\ncmpenv go.mod go.mod.edit\ngo mod edit -droptool example.com/tool2\ncmpenv go.mod go.mod.edit\ngo mod edit -droptool example.com/tool\ncmpenv go.mod go.mod.start\n```\n\n----------------------------------------\n\nTITLE: Deprecating and Adding Cryptographic Functions in Go\nDESCRIPTION: Deprecation of certain cryptographic functions and addition of new ones in the crypto/cipher package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc NewCFBDecrypter //deprecated\nfunc NewCFBEncrypter //deprecated\nfunc NewGCMWithRandomNonce(Block) (AEAD, error)\nfunc NewOFB //deprecated\n```\n\n----------------------------------------\n\nTITLE: Cross-Package Fail Fast Test Cases in Go\nDESCRIPTION: This snippet shows the implementation of failing tests in separate packages (a, b, and c) to test the cross-package fail-fast functionality.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fail_fast.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage a\n\nimport \"testing\"\n\nfunc TestFailingPkgA(t *testing.T) {\n\tt.Errorf(\"FAIL - %s\", t.Name())\n}\n```\n\nLANGUAGE: Go\nCODE:\n```\npackage b\n\nimport \"testing\"\n\nfunc TestFailingPkgB(t *testing.T) {\n\tt.Errorf(\"FAIL - %s\", t.Name())\n}\n```\n\nLANGUAGE: Go\nCODE:\n```\npackage c\n\nimport \"testing\"\n\nfunc TestFailingPkgC(t *testing.T) {\n\tt.Errorf(\"FAIL - %s\", t.Name())\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Version and Package Installation Tests\nDESCRIPTION: Verifies behavior with custom version strings and package installation scenarios\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_local.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nenv TESTGO_VERSION=go1.500-bigcorp\ngo mod edit -go=1.499 -toolchain=none\ngo version\nstdout go1.500-bigcorp\n```\n\n----------------------------------------\n\nTITLE: Main Go Module Definition\nDESCRIPTION: Defines the main module with its dependencies including deprecated and undeprecated modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_deprecated.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.17\n\nrequire (\n\texample.com/deprecated/a v1.0.0\n\texample.com/undeprecated v1.0.0\n\tlocal v0.0.0\n)\n\nreplace local v0.0.0 => ./local\n```\n\n----------------------------------------\n\nTITLE: Running Go Program with Module Mode Off\nDESCRIPTION: Shell commands to run a Go program with module mode disabled, demonstrating vendoring behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_vendor.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GO111MODULE=off\ncd vend/hello\ngo run hello.go\nstdout 'hello, world'\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Replacement\nDESCRIPTION: This go.mod file defines the module 'example.com/mainmodb' and includes a replacement directive for 'example.com/mainmoda'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace_main_module.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/mainmodb\ngo 1.18\nreplace example.com/mainmoda => ../mainmodareplacement\n```\n\n----------------------------------------\n\nTITLE: Simple Helper Package Implementation\nDESCRIPTION: A simple Go package that provides a Hello function which prints a message to stdout. This package is imported by other test files.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_local.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage easysub\n\nimport \"fmt\"\n\nfunc Hello() {\n\tfmt.Println(\"easysub.Hello\")\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Module Mode and Absence of go.mod\nDESCRIPTION: Checks if the environment is in module mode and confirms the absence of a go.mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_outside.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo env GOMOD\nstdout 'NUL|/dev/null'\n```\n\n----------------------------------------\n\nTITLE: Package with Embedded File Declarations\nDESCRIPTION: Package implementing embedded file handling with go:embed directives for various file locations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_embed.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\nimport _ \"embed\"\n\n//go:embed samedir_embed.txt\nvar sameDir string\n\n//go:embed subdir/embed.txt\nvar subDir string\n\nfunc Str() string {\n\treturn sameDir + subDir\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Import Meta Tag for Git Subdirectory\nDESCRIPTION: HTML meta tag configuration that specifies the import path and VCS details for a Go package located in a git repository subdirectory. Sets up the import path 'vcs-test.golang.org/go/gitreposubdir' to point to a specific subdirectory in a git repository.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/go/gitreposubdir.txt#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<meta name=\"go-import\" content=\"vcs-test.golang.org/go/gitreposubdir git https://vcs-test.golang.org/git/gitreposubdir foo/subdir\">\n```\n\n----------------------------------------\n\nTITLE: Expected Go Workspace File\nDESCRIPTION: The expected go.work file after running 'go work use'. It should contain an absolute path to the module rather than a relative path that could be problematic with symlinks.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_symlink_issue68383.txt#2025-04-22_snippet_3\n\nLANGUAGE: gomod\nCODE:\n```\ngo 1.24\n\nuse $WORK${/}gopath${/}src${/}x${/}y\n```\n\n----------------------------------------\n\nTITLE: Tidied Module Configuration\nDESCRIPTION: The expected state of go.mod after running 'go mod tidy', showing the pruned dependencies and retained indirect dependency on module c.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_newroot.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/a\n\ngo 1.16\n\nrequire (\n\texample.net/c v0.2.0 // indirect\n\texample.net/d v0.1.0\n)\n\nreplace (\n\texample.net/b v0.1.0 => ./b\n\texample.net/c v0.1.0 => ./c\n\texample.net/c v0.2.0 => ./c\n\texample.net/d v0.1.0 => ./d\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Toolchain Version Information - JSON - Go\nDESCRIPTION: This JSON snippet encodes the version metadata for the golang.org/toolchain module. It is typically used by Go module tooling and server APIs to identify version releases. The single key, \\\"Version\\\", marks the version string, ensuring consumers can parse and utilize this information programmatically.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.22.7.linux-amd64.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\\"Version\\\":\\\"v0.0.1-go1.22.7.linux-amd64\\\"}\n```\n\n----------------------------------------\n\nTITLE: Printing Build and Dependency Information Using debug.ReadBuildInfo - Go\nDESCRIPTION: This Go program prints the path and version details of the main module and its dependencies using debug.ReadBuildInfo. It outputs replacement information when modules are overridden using the replace directive in go.mod. Dependencies include the standard library, as well as any modules listed in go.mod. Inputs and outputs are managed via standard output. The output provides insights into the full dependency tree and module replacement resolution at build time.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_printversion_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"runtime/debug\"\n\n\t_ \"example.com/version\"\n)\n\nfunc main() {\n\tinfo, _ := debug.ReadBuildInfo()\n\tfmt.Fprintf(os.Stdout, \"path is %s\\n\", info.Path)\n\tfmt.Fprintf(os.Stdout, \"main is %s %s\\n\", info.Main.Path, info.Main.Version)\n\tif r := info.Main.Replace; r != nil {\n\t\tfmt.Fprintf(os.Stdout, \"\\t(replaced by %s %s)\\n\", r.Path, r.Version)\n\t}\n\tfor _, m := range info.Deps {\n\t\tfmt.Fprintf(os.Stdout, \"using %s %s\\n\", m.Path, m.Version)\n\t\tif r := m.Replace; r != nil {\n\t\t\tfmt.Fprintf(os.Stdout, \"\\t(replaced by %s %s)\\n\", r.Path, r.Version)\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Untidy Go Module Definition\nDESCRIPTION: Shows an untidy go.mod file with an explicit go version and an indirect requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version_missing.txt#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/m\n\ngo $goversion\n\nrequire example.com/dep v0.1.0\n\nrequire example.com/testdep v0.1.0 // indirect\n\nreplace (\n\texample.com/dep v0.1.0 => ./dep\n\texample.com/testdep v0.1.0 => ./testdep\n)\n```\n\n----------------------------------------\n\nTITLE: Executing go install Command in Go Bash Script\nDESCRIPTION: This snippet demonstrates the use of the 'go install' command in various environments, highlighting how the presence of a go.mod file, module proxy behaviors, and module state (on/off) affects installation. It also covers error scenarios including missing dependencies and invalid paths.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_install_pkg_version.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 'go install pkg@version' works outside a module.\nenv GO111MODULE=auto\ngo install example.com/cmd/a@v1.0.0\nexists $GOPATH/bin/a$GOEXE\nrm $GOPATH/bin\n\n# 'go install pkg@version' reports an error if modules are disabled.\nenv GO111MODULE=off\n! go install example.com/cmd/a@v1.0.0\nstderr '^go: modules disabled by GO111MODULE=off; see ''go help modules''$'\nenv GO111MODULE=auto\n\n# 'go install pkg@version' ignores go.mod in current directory.\ncd m\ncp go.mod go.mod.orig\n! go list -m all\nstderr '^go: example.com/cmd@v1.1.0-doesnotexist: reading http.*/mod/example.com/cmd/@v/v1.1.0-doesnotexist.info: 404 Not Found\\n\\tserver response: 404 page not found$'\nstderr '^go: example.com/cmd@v1.1.0-doesnotexist: missing go.sum entry for go.mod file; to add it:\\n\\tgo mod download example.com/cmd$'\ngo install example.com/cmd/a@latest\ncmp go.mod go.mod.orig\nexists $GOPATH/bin/a$GOEXE\ngo version -m $GOPATH/bin/a$GOEXE\nstdout '^\\tmod\\texample.com/cmd\\tv1.0.0\\t' # \"latest\", not from go.mod\nrm $GOPATH/bin/a\ncd ..\n\n# 'go install -modfile=x.mod pkg@version' reports an error, but only if\n# -modfile is specified explicitly on the command line.\ncd m\nenv GOFLAGS=-modfile=go.mod\ngo install example.com/cmd/a@latest  # same as above\nenv GOFLAGS=\n! go install -modfile=go.mod example.com/cmd/a@latest\nstderr '^go: -modfile cannot be used with commands that ignore the current module$'\ncd ..\n\n# Every test case requires linking, so we only cover the most important cases\n# when -short is set.\n[short] stop\n\n# 'go install pkg@version' works on a module that doesn't have a go.mod file\n# and with a module whose go.mod file has missing requirements.\n# With a proxy, the two cases are indistinguishable.\ngo install rsc.io/fortune@v1.0.0\nstderr '^go: found rsc.io/quote in rsc.io/quote v1.5.2$'\nexists $GOPATH/bin/fortune$GOEXE\n! exists $GOPATH/pkg/mod/rsc.io/fortune@v1.0.0/go.mod # no go.mod file\ngo version -m $GOPATH/bin/fortune$GOEXE\nstdout '^\\tdep\\trsc.io/quote\\tv1.5.2\\t' # latest version of fortune's dependency\nrm $GOPATH/bin\n\n# 'go install dir@version' works like a normal 'go install' command if\n# dir is a relative or absolute path.\nenv GO111MODULE=on\ngo mod download rsc.io/fortune@v1.0.0\n! go install $GOPATH/pkg/mod/rsc.io/fortune@v1.0.0\nstderr '^go: go\\.mod file not found in current directory or any parent directory; see ''go help modules''$'\n! go install ../pkg/mod/rsc.io/fortune@v1.0.0\nstderr '^go: go\\.mod file not found in current directory or any parent directory; see ''go help modules''$'\nmkdir tmp\ncd tmp\ngo mod init tmp\ngo mod edit -require=rsc.io/fortune@v1.0.0\n! go install -mod=readonly $GOPATH/pkg/mod/rsc.io/fortune@v1.0.0\nstderr '^missing go\\.sum entry for module providing package rsc\\.io/fortune; to add:\\n\\tgo mod download rsc\\.io/fortune$'\n! go install -mod=readonly ../../pkg/mod/rsc.io/fortune@v1.0.0\nstderr '^missing go\\.sum entry for module providing package rsc\\.io/fortune; to add:\\n\\tgo mod download rsc\\.io/fortune$'\ngo get rsc.io/fortune@v1.0.0\ngo install -mod=readonly $GOPATH/pkg/mod/rsc.io/fortune@v1.0.0\nexists $GOPATH/bin/fortune$GOEXE\ncd ..\nrm tmp\nrm $GOPATH/bin\nenv GO111MODULE=auto\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module\nDESCRIPTION: This snippet specifies the Go module path for the project 'example.com/latemigrate', defining it at the root of the module system.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_latemigrate_v2_v2.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: Configuration\nCODE:\n```\nmodule example.com/latemigrate\n```\n\n----------------------------------------\n\nTITLE: Fetching a Go Module Dependency (Shell)\nDESCRIPTION: Uses 'go get' to download and add the module 'rsc.io/QUOTE' as a dependency to the current module ('m'). This command updates the 'go.mod' file and is expected to update the 'go.sum' file with checksums for the fetched module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_sum_noroot.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo get rsc.io/QUOTE\n```\n\n----------------------------------------\n\nTITLE: Adding Version with Metadata and Final Commit\nDESCRIPTION: Switches back to master branch and creates commits for v1.9.10-pre2+metadata version with a final commit after that tag. This demonstrates the use of build metadata in semantic versions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/querytest.txt#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout master\n\nat 2019-05-13T16:11:25-04:00\necho 'before v1.9.10-pre2+metadata'\ncp stdout status\ngit commit -a -m 'before v1.9.10-pre2+metadata'\n\nat 2019-05-13T16:11:26-04:00\necho 'at v1.9.10-pre2+metadata'\ncp stdout status\ngit commit -a -m 'at v1.9.10-pre2+metadata'\ngit tag 'v1.9.10-pre2+metadata'\n\nat 2019-12-20T08:46:14-05:00\necho 'after v1.9.10-pre2+metadata'\ncp stdout status\ngit commit -a -m 'after v1.9.10-pre2+metadata'\n```\n\n----------------------------------------\n\nTITLE: Replacing gopkg.in Module with Incompatible Version in Go\nDESCRIPTION: This snippet shows replacing a gopkg.in module with an incompatible version, which is still allowed in certain cases.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_gopkgin.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ncd ../4-to-incompatible\ngo list -m gopkg.in/src-d/go-git.v4\n```\n\n----------------------------------------\n\nTITLE: Calling C Function from Main Go Module (Go)\nDESCRIPTION: This Go program, located in the main module (`main`), uses Cgo to call a C function. It includes Cgo directives (`#cgo CFLAGS`) to specify the include path (`../c`) relative to the source file. The `main` function calls the C function `printfile` and flushes standard output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_trimpath_macro.txt#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\n// #cgo CFLAGS: -I../c\n// #include \"stdio.h\"\n// void printfile();\nimport \"C\"\n\nfunc main() {\n    C.printfile()\n    C.fflush(C.stdout)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Constant in Go Package p\nDESCRIPTION: This Go code defines a package named `p`. Within this package, it declares an integer constant named `v` and initializes it with the value `2`. This is a simple source file potentially part of the `modtest5` module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/github.com_dmitshur-test_modtest5_v0.5.0-alpha.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nconst v = 2\n```\n\n----------------------------------------\n\nTITLE: Re-testing Previously Listed Retracted Version\nDESCRIPTION: Verifies that the warning persists when requesting a previously listed +incompatible version that was retracted.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_incompatible.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo get example.com/retract/incompatible@v2.0.0+incompatible\nstderr '^go: warning: example.com/retract/incompatible@v2.0.0\\+incompatible: retracted by module author$'\n```\n\n----------------------------------------\n\nTITLE: Testing Internal Import within golang.org/x\nDESCRIPTION: Sets the current module path to `golang.org/x/anything` using `go mod edit` and then runs `go get .` to resolve dependencies. This tests the scenario where a module within the `golang.org/x` hierarchy imports `golang.org/x/internal`, which should be allowed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# golang.org/x/internal should be importable from other golang.org/x modules.\ngo mod edit -module=golang.org/x/anything\ngo get .\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines the Go module with its import path and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/semver-branch.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nmodule vcs-test.golang.org/git/semver-branch.git\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Listing Module Dependencies in Go\nDESCRIPTION: This command lists all module dependencies, including available updates, focusing on the 'example.com/pseudoupgrade' module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_upgrade_pseudo.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngo list -m -u all\nstdout '^example.com/pseudoupgrade v0.1.1-0.20190429073117-b5426c86b553$'\n```\n\n----------------------------------------\n\nTITLE: Incomplete Package Import\nDESCRIPTION: Package file with import that requires resolution through module tidying\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_indirect.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage incomplete\n\nimport _ \"example.net/indirect/newpkg\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Default User Language Preferences in Go\nDESCRIPTION: This function returns the default user language preferences by checking environment variables LC_ALL, LC_MESSAGES, and LANG.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.2.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc DefaultUserPrefs() []language.Tag {\n\tvar prefs []language.Tag\n\tfor _, k := range []string{\"LC_ALL\", \"LC_MESSAGES\", \"LANG\"} {\n\t\tif env := os.Getenv(k); env != \"\" {\n\t\t\tprefs = append(prefs, language.Make(env))\n\t\t}\n\t}\n\treturn prefs\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Go Module Using go.mod - Go\nDESCRIPTION: Defines a Go module with the module path 'example.com/join/subpkg' using the go.mod format. This file is required at the root of every Go module. The 'module' directive specifies the import path for the root of the module's packages. There are no other dependencies or requirements declared in this snippet.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_join_subpkg_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/join/subpkg\n```\n\n----------------------------------------\n\nTITLE: Go Module Version Information\nDESCRIPTION: This JSON snippet provides version information for a Go module. It includes the `Version` key to specify the semantic version of the project, useful for package management and version control.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rationale_v1.0.1-order.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\\"Version\\\":\\\"v1.0.1-order\\\"}\n```\n\n----------------------------------------\n\nTITLE: Disabling Go Modules via Environment Variable (Shell)\nDESCRIPTION: Sets the `GO111MODULE` environment variable to `off` using the `env` command. This forces the subsequent Go commands to operate in the traditional GOPATH mode, disabling the Go module system for the scope of this command execution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/devnull.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=off\n```\n\n----------------------------------------\n\nTITLE: Main Go Application Code\nDESCRIPTION: Simple Go application with an empty main function for testing version stamping.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_version_stamping_git.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling ExportKeyingMaterial Availability using tlsunsafeekm GODEBUG Setting (Go 1.22)\nDESCRIPTION: Introduced in Go 1.22, this setting controls the availability of crypto/tls.ConnectionState.ExportKeyingMaterial. Go 1.22 disabled this function for connections that support neither TLS 1.3 nor Extended Master Secret. Setting tlsunsafeekm=1 re-enables it for such connections. Set via GODEBUG environment variable (e.g., GODEBUG=tlsunsafeekm=1).\nSOURCE: https://github.com/golang/go/blob/master/doc/godebug.md#2025-04-22_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\ntlsunsafeekm\n```\n\n----------------------------------------\n\nTITLE: Testing Module-aware File System Pattern Searches with GO111MODULE=on\nDESCRIPTION: A series of bash commands testing how Go commands handle file system pattern searches with modules enabled. It verifies that sub-modules and nested vendor directories are properly excluded from package listing patterns.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_fs_patterns.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=on\n\n# File system pattern searches should skip sub-modules and vendor directories.\ncd x\n\n# all packages\ngo list all\nstdout ^m$\nstdout ^m/vendor$\n! stdout vendor/\nstdout ^m/y$\n! stdout ^m/y/z\n\n# path pattern\ngo list m/...\nstdout ^m$\nstdout ^m/vendor$\n! stdout vendor/\nstdout ^m/y$\n! stdout ^m/y/z\n\n# directory pattern\ngo list ./...\nstdout ^m$\nstdout ^m/vendor$\n! stdout vendor/\nstdout ^m/y$\n! stdout ^m/y/z\n\n# non-existent directory should not prompt lookups\n! go build -mod=readonly example.com/nonexist\nstderr 'import lookup disabled'\n\n! go build -mod=readonly ./nonexist\n! stderr 'import lookup disabled'\nstderr '^stat '$GOPATH'[/\\\\]src[/\\\\]x[/\\\\]nonexist: directory not found'\n\n! go build -mod=readonly ./go.mod\n! stderr 'import lookup disabled'\nstderr 'main module \\(m\\) does not contain package m/go.mod'\n```\n\n----------------------------------------\n\nTITLE: Base Go Module Definition\nDESCRIPTION: Basic module definition file with Go 1.16 specification.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_readonly.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Go Main Package Implementation\nDESCRIPTION: This snippet demonstrates the implementation of a Go main package that imports and uses a function from another module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"example.com/a\"\n\nfunc main() {\n\ta.HelloFromA()\n}\n```\n\n----------------------------------------\n\nTITLE: Main Package Test Implementation\nDESCRIPTION: Test function that verifies no VCS settings are present in the build info. Uses the debug.ReadBuildInfo() to check build settings and fails if any VCS-related settings are found.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_buildvcs.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"runtime/debug\"\n\t\"strings\"\n\t\"testing\"\n)\n\nfunc TestDetail(t *testing.T) {\n\tbi, ok := debug.ReadBuildInfo()\n\tif !ok {\n\t\tt.Fatal(\"BuildInfo not present\")\n\t}\n\tfor _, s := range bi.Settings {\n\t\tif strings.HasPrefix(s.Key, \"vcs.\") {\n\t\t\tt.Fatalf(\"unexpected VCS setting: %s=%s\", s.Key, s.Value)\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Incompatible Version\nDESCRIPTION: Demonstrates how to explicitly exclude a version that is implicitly pruned out in Go 1.17 to align behavior with Go 1.16.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_incompatible.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo mod edit -exclude=example.com/retract/incompatible@v2.0.0+incompatible\ngo list -f $MODFMT -deps ./...\nstdout '^example.com/retract/incompatible v1\\.0\\.0$'\n! stdout 'v2\\.0\\.0'\n```\n\n----------------------------------------\n\nTITLE: Upgraded Dependencies Go Module\nDESCRIPTION: go.mod file after upgrading dependencies, including rsc.io/quote v1.5.2 and rsc.io/sampler v1.3.0\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_changes.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.16\n\nrequire (\n\trsc.io/quote v1.5.2 // indirect\n\trsc.io/sampler v1.3.0\n)\n```\n\n----------------------------------------\n\nTITLE: Expected vendor/modules.txt Content for Go 1.14\nDESCRIPTION: The expected content of the vendor/modules.txt file for Go 1.14. This file is used for comparison in the test to verify that the correct output is generated when running 'go mod vendor'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_unused_only.txt#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n# example.com v1.0.0\n## explicit\n\n```\n\n----------------------------------------\n\nTITLE: Other Main Package\nDESCRIPTION: Additional Go main package with empty main function for testing multiple package builds.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_git.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Package A Implementation with Loop Variable Capture\nDESCRIPTION: Implementation of package 'a' that contains functions with loop variable captures. Includes a direct capture in F() and an indirect capture through package 'b' in Fb().\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_shorten_pkg.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Copyright 2023 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\npackage a\n\nimport \"inlines/b\"\n\nfunc F() []*int {\n\tvar s []*int\n\tfor i := 0; i < 10; i++ {\n\t\ts = append(s, &i)\n\t}\n\treturn s\n}\n\nfunc Fb() []*int {\n\tbf, _ := b.F()\n\treturn bf\n}\n```\n\n----------------------------------------\n\nTITLE: Testing various go mod commands with alternate file\nDESCRIPTION: Executes several go mod commands (download, graph, tidy, verify, why) to ensure they work correctly with the alternate file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/modfile_flag.txt#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngo mod download rsc.io/quote\ngo mod graph\nstdout rsc.io/quote\ngo mod tidy\ngrep rsc.io/quote go.alt.sum\ngo mod verify\ngo mod why rsc.io/quote\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Basic go.mod file defining module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_compiler_output.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/foo\n\ngo 1.20\n```\n\n----------------------------------------\n\nTITLE: Main Package with Imports\nDESCRIPTION: This Go file defines the main package 'm' and imports two modules: 'x.1' and 'z.1/sub'. The underscore indicates that these imports are for side effects only.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage m\n\nimport _ \"x.1\"\nimport _ \"z.1/sub\"\n```\n\n----------------------------------------\n\nTITLE: Subdirectory Go Module with Relative Path Toolchain\nDESCRIPTION: This go.mod file in the subdirectory also defines an 'exploit' module, but uses a relative path to reference the potentially malicious script as a toolchain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_toolchain_slash.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nmodule exploit\n\ngo 1.21\ntoolchain go1.999999-/../../run.sh\n```\n\n----------------------------------------\n\nTITLE: Implementing Quote Functions in Go\nDESCRIPTION: Core implementation of the quote package providing four functions: Hello(), Glass(), Go(), and Opt(). Each function returns a specific quote or saying. The package depends on rsc.io/sampler for the Hello functionality.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.4.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage quote\n\nimport \"rsc.io/sampler\"\n\n// Hello returns a greeting.\nfunc Hello() string {\n\treturn sampler.Hello()\n}\n\n// Glass returns a useful phrase for world travelers.\nfunc Glass() string {\n\t// See http://www.oocities.org/nodotus/hbglass.html.\n\treturn \"I can eat glass and it doesn't hurt me.\"\n}\n\n// Go returns a Go proverb.\nfunc Go() string {\n\treturn \"Don't communicate by sharing memory, share memory by communicating.\"\n}\n\n// Opt returns an optimization truth.\nfunc Opt() string {\n\t// Wisdom from ken.\n\treturn \"If a program is too slow, it must have a loop.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Module Dependencies and Replacements in go.mod\nDESCRIPTION: This go.mod file for the main module 'example.com/m' specifies its dependencies and includes a module replacement. It shows how to require specific versions of dependencies and replace them locally.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/m\n\nrequire example.com/dep v1.0.0\nrequire example.com/other v1.0.0\n\nreplace example.com/other v1.0.0 => ./other\n```\n\n----------------------------------------\n\nTITLE: Verifying Module Version in Go Workspace\nDESCRIPTION: This snippet uses the 'go list' command to verify that the correct version of the 'example.com/q' module is selected in the workspace. It checks that version v1.1.0 is chosen, which is the highest version selected by Minimal Version Selection (MVS).\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_prune.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo list -m -f '{{.Version}}' example.com/q\nstdout '^v1.1.0$'\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Major Version Suffixes for Standard Modules in Go\nDESCRIPTION: This snippet tests various invalid major version suffix formats for standard modules, showing that version suffixes must follow the /vN format and are only allowed for v2 or later. Each command is expected to fail with an error message suggesting the correct format.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_init_invalid_major.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\nenv GOFLAGS=-mod=mod\n\n! go mod init example.com/user/repo/v0\nstderr '(?s)^go: invalid module path \"example.com/user/repo/v0\": major version suffixes must be in the form of /vN and are only allowed for v2 or later(.*)go mod init example.com/user/repo/v2$'\n\n! go mod init example.com/user/repo/v02\nstderr '(?s)^go: invalid module path \"example.com/user/repo/v02\": major version suffixes must be in the form of /vN and are only allowed for v2 or later(.*)go mod init example.com/user/repo/v2$'\n\n! go mod init example.com/user/repo/v023\nstderr '(?s)^go: invalid module path \"example.com/user/repo/v023\": major version suffixes must be in the form of /vN and are only allowed for v2 or later(.*)go mod init example.com/user/repo/v23$'\n\n! go mod init example.com/user/repo/v1\nstderr '(?s)^go: invalid module path \"example.com/user/repo/v1\": major version suffixes must be in the form of /vN and are only allowed for v2 or later(.*)go mod init example.com/user/repo/v2$'\n\n! go mod init example.com/user/repo/v2.0\nstderr '(?s)^go: invalid module path \"example.com/user/repo/v2.0\": major version suffixes must be in the form of /vN and are only allowed for v2 or later(.*)go mod init example.com/user/repo/v2$'\n\n! go mod init example.com/user/repo/v2.1.4\nstderr '(?s)^go: invalid module path \"example.com/user/repo/v2.1.4\": major version suffixes must be in the form of /vN and are only allowed for v2 or later(.*)go mod init example.com/user/repo/v2$'\n\n! go mod init example.com/user/repo/v3.5\nstderr '(?s)^go: invalid module path \"example.com/user/repo/v3.5\": major version suffixes must be in the form of /vN and are only allowed for v2 or later(.*)go mod init example.com/user/repo/v3$'\n\n! go mod init example.com/user/repo/v4.1.4\nstderr '(?s)^go: invalid module path \"example.com/user/repo/v4.1.4\": major version suffixes must be in the form of /vN and are only allowed for v2 or later(.*)go mod init example.com/user/repo/v4$'\n\n! go mod init example.com/user/repo/v.2.3\nstderr '(?s)^go: invalid module path \"example.com/user/repo/v.2.3\": major version suffixes must be in the form of /vN and are only allowed for v2 or later(.*)go mod init example.com/user/repo/v2$'\n\n! go mod init example.com/user/repo/v.5.3\nstderr '(?s)^go: invalid module path \"example.com/user/repo/v.5.3\": major version suffixes must be in the form of /vN and are only allowed for v2 or later(.*)go mod init example.com/user/repo/v5$'\n```\n\n----------------------------------------\n\nTITLE: Go File with External Dependency\nDESCRIPTION: A Go program that imports both the standard fmt package and an external package rsc.io/quote. It prints a greeting using the quote.Hello() function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_outside_module.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"rsc.io/quote\"\n)\n\nfunc main() {\n\tfmt.Println(quote.Hello())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Max RSA Key Size using tlsmaxrsasize GODEBUG Setting (Go 1.22)\nDESCRIPTION: Introduced in Go 1.22, this setting controls the maximum acceptable RSA key size (in bits) used in TLS handshakes. The default value is 8192. This setting was backported to Go 1.19.13, Go 1.20.8, and Go 1.21.1 to mitigate potential denial of service attacks. Set via GODEBUG environment variable (e.g., GODEBUG=tlsmaxrsasize=8192).\nSOURCE: https://github.com/golang/go/blob/master/doc/godebug.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\ntlsmaxrsasize\n```\n\n----------------------------------------\n\nTITLE: Defining Package 'c' Version 'v0.1.0' in Go\nDESCRIPTION: This Go source file defines package 'c' with a constant `Version` set to \"v0.1.0\". This represents the implementation corresponding to module 'c' version 1, required directly by module 'x'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_horizon.txt#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n-- c1/c.go --\npackage c\n\nconst Version = \"v0.1.0\"\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Godebug Directives\nDESCRIPTION: Tests adding and removing godebug directives with 'go mod edit -godebug' and '-dropgodebug', which allow setting runtime debugging variables in the go.mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit.txt#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n# go mod edit -godebug\ncd $WORK/g\ncp go.mod.start go.mod\ngo mod edit -godebug key=value\ncmpenv go.mod go.mod.edit\ngo mod edit -dropgodebug key2\ncmpenv go.mod go.mod.edit\ngo mod edit -dropgodebug key\ncmpenv go.mod go.mod.start\n```\n\n----------------------------------------\n\nTITLE: Formatting Go Code with gofmt\nDESCRIPTION: This snippet shows the input code and its formatted version using gofmt. It demonstrates how gofmt handles indentation for code blocks in Go.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/text9.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nHello, world\n Code block here.\n```\n\nLANGUAGE: go\nCODE:\n```\nHello, world\n\n\tCode block here.\n```\n\n----------------------------------------\n\nTITLE: Setting up Git configuration for Go tests\nDESCRIPTION: This snippet sets up a custom Git configuration for the test environment, including setting the user name and email.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_private_vcs.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GIT_CONFIG_GLOBAL=$WORK${/}home${/}gopher${/}.gitconfig\nenv HOME=$WORK${/}home${/}gopher\nexec git config --global --show-origin user.name\nstdout 'Go Gopher'\n```\n\nLANGUAGE: gitconfig\nCODE:\n```\n[user]\n\tname = Go Gopher\n\temail = gopher@golang.org\n```\n\n----------------------------------------\n\nTITLE: Main Program with Invalid Subdirectory Imports\nDESCRIPTION: Example Go program showing incorrect usage of module imports with subdirectory specifications. This code demonstrates what not to do when importing modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_subdir.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"vcs-test.golang.org/go/gitreposubdir/foo/subdir\"\n    \"vcs-test.golang.org/go/gitreposubdirv2/v2/foo/subdir\"\n)\n\nfunc main() {\n    fmt.Println(greeter.Hello())\n    fmt.Println(greeterv2.Hello())\n}\n```\n\n----------------------------------------\n\nTITLE: Version Information JSON\nDESCRIPTION: This JSON snippet provides version information for the Go module, indicating the specific version being utilized. This is useful for version tracking and management.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_badchain_a_v1.1.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\"Version\":\"v1.1.0\"}\n```\n\n----------------------------------------\n\nTITLE: Go Package Import Example\nDESCRIPTION: Simple Go package that imports rsc.io/quote package as a blank import\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_upgrade.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage use\n\nimport _ \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Quote Functions in Go\nDESCRIPTION: Defines four functions (Hello, Glass, Go, Opt) that return different quotes or sayings. It imports and uses the 'rsc.io/sampler' package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.5.2.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Package quote collects pithy sayings.\npackage quote // import \"rsc.io/quote\"\n\nimport \"rsc.io/sampler\"\n\n// Hello returns a greeting.\nfunc Hello() string {\n\treturn sampler.Hello()\n}\n\n// Glass returns a useful phrase for world travelers.\nfunc Glass() string {\n\t// See http://www.oocities.org/nodotus/hbglass.html.\n\treturn \"I can eat glass and it doesn't hurt me.\"\n}\n\n// Go returns a Go proverb.\nfunc Go() string {\n\treturn \"Don't communicate by sharing memory, share memory by communicating.\"\n}\n\n// Opt returns an optimization truth.\nfunc Opt() string {\n\t// Wisdom from ken.\n\treturn \"If a program is too slow, it must have a loop.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Testing go build -pgo=auto flag with wildcards\nDESCRIPTION: Tests the behavior of go build with -pgo=auto flag when using wildcards (./a/...) to specify the build targets. It verifies that PGO is applied correctly.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo build -n -pgo=auto ./a/...\nstderr 'compile.*-pgoprofile=.*a1.go'\n\n# check that pgo appears in build info\nstderr 'build\\\\t-pgo=.*default\\.pgo'\n```\n\n----------------------------------------\n\nTITLE: Testing Subtest Deadline Within a Minute in Go\nDESCRIPTION: This function tests that t.Deadline() behaves correctly in a subtest context, ensuring that the subtest inherits the deadline from its parent test. It verifies that the deadline is non-zero, after the current time, and within one minute of the subtest start.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_deadline.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nfunc TestSubtestDeadlineWithinMinute(t *testing.T) {\n\tt.Run(\"sub\", func(t *testing.T) {\n\t\tnow := time.Now()\n\t\td, ok := t.Deadline()\n\t\tif !ok || d.IsZero() {\n\t\t\tt.Fatalf(\"t.Deadline() = %v, %v; want nonzero deadline\", d, ok)\n\t\t}\n\t\tif !d.After(now) {\n\t\t\tt.Fatalf(\"t.Deadline() = %v; want after start of test (%v)\", d, now)\n\t\t}\n\t\tif d.Sub(now) > time.Minute {\n\t\t\tt.Fatalf(\"t.Deadline() = %v; want within one minute of start of test (%v)\", d, now)\n\t\t}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module in go.mod\nDESCRIPTION: Creates a minimal go.mod file that defines the module name as 'm'. This file is necessary for Go module operations in the project.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_json.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Defining Original go.mod File in Go\nDESCRIPTION: This snippet defines the original go.mod file used in the tests. It specifies the module name and Go version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_version.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com\n\ngo 1.13\n```\n\n----------------------------------------\n\nTITLE: Math Package Extensions for Big Numbers and Random Generation\nDESCRIPTION: Functions and methods for math/big and math/rand packages that support big number arithmetic, scanning, and random number generation with 64-bit support.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.8.txt#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n// math/big methods\nfunc (*Float) Scan(fmt.ScanState, int32) error\nfunc (*Int) Sqrt(*Int) *Int\n\n// math/rand functions and methods\nfunc Uint64() uint64\nfunc (*Rand) Uint64() uint64\n\ntype Source64 interface {\n    Int63() int64\n    Seed(int64)\n    Uint64() uint64\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Retracted Versions in Go List with Versions\nDESCRIPTION: Confirms the behavior of 'go list -m -versions' in hiding retracted versions and displays only non-retracted ones.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_retract.txt#2025-04-22_snippet_11\n\nLANGUAGE: Go\nCODE:\n```\n# 'go list -m -versions' hides retracted versions.\\ngo list -m -versions example.com/retract\\nstdout '^example.com/retract v1.0.0-good v1.1.0$'\n```\n\n----------------------------------------\n\nTITLE: Testing Coverage for Go Packages\nDESCRIPTION: The snippet runs Go tests with coverage for specific packages using the Go toolchain. It verifies that the coverage for each package is non-zero and has a detectable percentage. Dependencies include Go installed and available on the PATH. Parameters include package names such as strings and regexp. The expected outputs are coverage percentages for each package, which should be greater than zero.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_runs.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo test -short -coverpkg=strings strings regexp\n! stdout '[^0-9]0\\.0%'\nstdout  'strings.*coverage:.*[1-9][0-9.]+%'\nstdout  'regexp.*coverage:.*[1-9][0-9.]+%'\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo test -short -cover strings math regexp\n! stdout '[^0-9]0\\.0%'\nstdout  'strings.*coverage:.*[1-9][0-9.]+%'\nstdout  'math.*coverage:.*[1-9][0-9.]+%'\nstdout  'regexp.*coverage:.*[1-9][0-9.]+%'\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Function in pkg1 - Go\nDESCRIPTION: This code snippet defines a simple Go package named 'pkg1' containing a function F that prints 'pkg1' to the standard output. It requires the 'fmt' package and demonstrates basic package and function structure; this function serves as the target for coverage testing. It takes no parameters and returns no values.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_statements.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage pkg1\n\nimport \"fmt\"\n\nfunc F() {\n\tfmt.Println(\"pkg1\")\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module declaration for the test package\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_issue59571.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.20\n```\n\n----------------------------------------\n\nTITLE: Defining test file with imports\nDESCRIPTION: Defines a test file that imports net/http, used to test how Go handles test imports.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_std_vendor.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage x\nimport \"testing\"\nimport _ \"net/http\"\nfunc Test(t *testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Replace Directives for Overlay Testing\nDESCRIPTION: The go.mod file defines a module 'm' and specifies Go 1.16 as the minimum supported version. It includes a TODO comment about how overlays work with go.mod, especially in readonly mode.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_overlay.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// TODO(matloob): how do overlays work with go.mod (especially if mod=readonly)\nmodule m\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Original Go Module File\nDESCRIPTION: Defines the initial state of the go.mod file with module dependencies and replacements.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_update_unrelated_sum.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.16\n\nrequire (\n\texample.com/upgrade v0.0.1\n\trsc.io/quote v1.0.0\n)\n\nreplace (\n\texample.com/upgrade v0.0.1 => ./upgrade1\n\texample.com/upgrade v0.0.2 => ./upgrade2\n)\n```\n\n----------------------------------------\n\nTITLE: Go Module File with Requirements, Exclusions, Replacements and Retractions\nDESCRIPTION: Shows a more complex go.mod file with requirements, exclusions, replacements, and retraction directives. This demonstrates the structure after multiple edit operations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit.txt#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nmodule x.x/y/z\n\ngo $goversion\n\nrequire x.1 v1.0.0\n\nexclude (\n\tx.1 v1.2.0\n\tx.1 v1.2.1\n\tx.1 v2.0.0+incompatible\n)\n\nreplace (\n\tx.1 v1.3.0 => y.1 v1.4.0\n\tx.1 v1.4.0 => ../z\n)\n\nretract (\n\tv1.6.0\n\t[v1.3.0, v1.4.0]\n\t[v1.1.0, v1.2.0]\n\tv1.0.0\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module and Version\nDESCRIPTION: This snippet shows the contents of a go.mod file, defining the module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_getmode_vendor.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule x\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Go Test File for Vendored Package\nDESCRIPTION: A test file that checks the content of the Msg variable from the vendored 'strings' package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_vendor.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"strings\" // really ../vendor/strings\n\t\"testing\"\n)\n\nfunc TestMsgInternal(t *testing.T) {\n\tif strings.Msg != \"hello, world\" {\n\t\tt.Fatalf(\"unexpected msg: %v\", strings.Msg)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Main Package Implementation\nDESCRIPTION: Main entry point that imports nested packages and prints a hello world message using constants from imported packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_complex.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t_ \"complex/nest/sub/test12\"\n\t_ \"complex/nest/sub/test23\"\n\t\"complex/w\"\n\t\"v\"\n)\n\nfunc main() {\n\tprintln(v.Hello + \" \" + w.World)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Unresolved Dependency with Go List\nDESCRIPTION: This snippet demonstrates how 'go list' reports an unresolved dependency and suggests using 'go get' to resolve it.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_lazy_indirect.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n! go list -deps .\nstderr '^m.go:3:8: no required module provides package rsc\\.io/quote; to add it:\\n\\tgo get rsc.io/quote$'\n```\n\n----------------------------------------\n\nTITLE: Invalid Pkg-Config Flags in Go\nDESCRIPTION: This snippet shows rejection messages from the Go compiler when invalid 'pkg-config' options '@foo' and '-foo' are included, affirming the necessity for valid package naming.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_bad_directives.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage x\n// #cgo pkg-config: -foo\nimport \"C\"\n```\n\nLANGUAGE: Go\nCODE:\n```\npackage x\n// #cgo pkg-config: @foo\nimport \"C\"\n```\n\n----------------------------------------\n\nTITLE: Executing 'go get' Command for Dependency Resolution in Go\nDESCRIPTION: This snippet shows the execution of 'go get' command to fetch a specific version of a module. It's used to test if the command can handle cycles in the pruned module graph without causing an infinite loop.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue60490.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo get example.net/c@v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Module Info Configuration\nDESCRIPTION: JSON configuration file specifying the module version information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_cmd_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.0.0\"}\n```\n\n----------------------------------------\n\nTITLE: Main Package with Imports\nDESCRIPTION: The main package file that imports packages needed for testing, specifically including 'example.net/deleted' which will have version compatibility issues.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_deleted.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage m\n\nimport (\n\t_ \"example.net/deleted\"\n\t_ \"example.net/lazy\"\n)\n```\n\n----------------------------------------\n\nTITLE: Downloading Go module with specific commit hash\nDESCRIPTION: This command downloads a Go module (rsc.io/quote) using a specific Git commit hash and verifies the presence of downloaded files in the module cache.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_hash.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo mod download rsc.io/quote@a91498bed0a73d4bb9c1fb2597925f7883bc40a7\nexists $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.3-0.20180709162918-a91498bed0a7.info\nexists $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.3-0.20180709162918-a91498bed0a7.mod\nexists $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.3-0.20180709162918-a91498bed0a7.zip\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Formatting\nDESCRIPTION: Tests the formatting functionality of 'go mod edit -fmt', which standardizes the formatting of go.mod files. It verifies that -print flag shows changes without writing the file, and that without -print the file is updated.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# go mod edit -fmt\ncp $WORK/go.mod.badfmt go.mod\ngo mod edit -fmt -print # -print should avoid writing file\ncmpenv stdout $WORK/go.mod.goodfmt\ncmp go.mod $WORK/go.mod.badfmt\ngo mod edit -fmt # without -print, should write file (and nothing to stdout)\n! stdout .\ncmpenv go.mod $WORK/go.mod.goodfmt\n```\n\n----------------------------------------\n\nTITLE: Module A Configuration\nDESCRIPTION: Module A's go.mod file specifying its dependencies\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patchbound.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/a\n\ngo 1.16\n\nrequire example.net/b v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Testing Module Download with Tag Tests\nDESCRIPTION: Tests module download functionality using tagged versions and verifies metadata in the response.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/reuse_git.txt#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngo mod download -reuse=tagtests.json -x -json vcs-test.golang.org/git/tagtests.git@latest\n```\n\n----------------------------------------\n\nTITLE: Defining vendor package 'x'\nDESCRIPTION: Defines an empty package 'x' in the vendor directory, which is not expected to be found during the build process due to the specific GOPATH setup in this test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_issue12156.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage x\n```\n\n----------------------------------------\n\nTITLE: Chiral Package Definition Files\nDESCRIPTION: Package files with build tag conditionals to import either left or right package based on the mirror build tag.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tagged_import_cycle.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Package chiral imports packages in an order that depends on build tags.\npackage chiral\n```\n\nLANGUAGE: go\nCODE:\n```\n// +build !mirror\n\npackage chiral\n\nimport _ \"example.com/left\"\n```\n\nLANGUAGE: go\nCODE:\n```\n// +build mirror\n\npackage chiral\n\nimport _ \"example.com/right\"\n```\n\n----------------------------------------\n\nTITLE: Replacing gopkg.in v4 Module with v0 Pseudo-version in Go\nDESCRIPTION: This snippet shows the special case of replacing a gopkg.in v4 module with a v0 pseudo-version, which is still accepted for backwards compatibility.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_gopkgin.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncd ../4-to-0\ngo list -m gopkg.in/src-d/go-git.v4\n```\n\n----------------------------------------\n\nTITLE: Golang Module Definition and Replacement in go.mod\nDESCRIPTION: This go.mod file describes the module for `example.net/m` and specifies its dependencies and replacements. It declares the required module versions and provides paths to replacement modules for local development.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_consistency.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule example.net/m\n\ngo 1.17\n\nrequire (\n\texample.net/needx2 v0.1.0\n\texample.net/x v0.1.0\n)\n\nreplace (\n\texample.net/needx2 v0.1.0 => ./needx2.1\n\texample.net/x v0.1.0 => ./x.1\n\texample.net/x v0.2.0 => ./x.2\n)\n```\n\n----------------------------------------\n\nTITLE: Building Go Programs and Setting Environment Variable\nDESCRIPTION: This snippet builds the cache program and sets the GOCACHEPROG environment variable. It then attempts to build a simple Go program to test for deadlocks.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cacheprog_issue70848.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo build -o cacheprog$GOEXE cacheprog.go\nenv GOCACHEPROG=$GOPATH/src/cacheprog$GOEXE\n\n# This should not deadlock\ngo build simple.go\n! stderr 'cacheprog closed'\n```\n\n----------------------------------------\n\nTITLE: Testing Unset GOAUTH Behavior in Go\nDESCRIPTION: This snippet tests the behavior when GOAUTH is unset, which should default to using netrc. It includes tests for both missing credentials and valid netrc file scenarios.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goauth_netrc.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\n# An unset GOAUTH should default to netrc.\nenv GOAUTH=\n# Without credentials, downloading a module from a path that requires HTTPS\n# basic auth should fail.\nenv NETRC=$WORK/empty\n! go get vcs-test.golang.org/auth/or401\nstderr '^\\tserver response: ACCESS DENIED, buddy$'\n\n# With credentials from a netrc file, it should succeed.\nenv NETRC=$WORK/netrc\ngo get vcs-test.golang.org/auth/or401\n\n# A missing file should be fail as well.\nenv NETRC=$WORK/missing\n! go get vcs-test.golang.org/auth/or401\nstderr '^\\tserver response: ACCESS DENIED, buddy$'\n```\n\n----------------------------------------\n\nTITLE: Importing a Domain Root Package\nDESCRIPTION: A Go source file that imports a package from a domain root path (example.com). This tests that Go's module system can correctly resolve imports that are domain roots without subpaths.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_domain_root.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage x\nimport _ \"example.com\"\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module and Workspace Version Handling\nDESCRIPTION: Shell script that tests Go workspace initialization behavior with different Go versions and toolchain settings. Tests include module creation, workspace initialization, and version compatibility checks.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_init_toolchain.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Create basic modules and work space.\n# Note that toolchain lines in modules should be completely ignored.\nenv TESTGO_VERSION=go1.50\nmkdir m1_22_0\ngo mod init -C m1_22_0\ngo mod edit -C m1_22_0 -go=1.22.0 -toolchain=go1.99.0\n\n# work init writes the current Go version to the go line\ngo work init\ngrep '^go 1.50$' go.work\n! grep toolchain go.work\n\n# work init with older modules should leave go 1.50 in the go.work.\nrm go.work\ngo work init ./m1_22_0\ngrep '^go 1.50$' go.work\n! grep toolchain go.work\n\n# work init with newer modules should bump go,\n# including updating to a newer toolchain as needed.\n# Because work init writes the current toolchain as the go version,\n# it writes the bumped go version, not the max of the used modules.\nenv TESTGO_VERSION=go1.21\nenv TESTGO_VERSION_SWITCH=switch\nrm go.work\nenv GOTOOLCHAIN=local\n! go work init ./m1_22_0\nstderr '^go: m1_22_0'${/}'go.mod requires go >= 1.22.0 (running go 1.21; GOTOOLCHAIN=local)$'\nenv GOTOOLCHAIN=auto\ngo work init ./m1_22_0\nstderr '^go: m1_22_0'${/}'go.mod requires go >= 1.22.0; switching to go1.22.9$'\ncat go.work\ngrep '^go 1.22.9$' go.work\n! grep toolchain go.work\n```\n\n----------------------------------------\n\nTITLE: Testing Path Separator and $PWD Matching in Go Project\nDESCRIPTION: Shell script to test if matching against $PWD works correctly after a cd command, focusing on Windows compatibility. It changes directory to a specific path and uses 'go list' to verify the correct path is returned.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_script_cmdcd.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncd $WORK/a/b/c/pkg\n\ngo list -find -f {{.Root}}\nstdout $PWD\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module and Main Function\nDESCRIPTION: This snippet shows the basic structure of a Go module definition and a minimal main function. It sets up a module named 'example.com/m' and defines an empty main function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_build_settings.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n-- go.mod --\nmodule example.com/m\n\ngo 1.18\n-- m.go --\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Main Program Demonstrating Loop Variable Capture Issue\nDESCRIPTION: Main package that demonstrates the loop variable capture issue by calling functions from packages 'a' and 'b', then summing the values. Shows the practical impact of the loopvar experiment.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_shorten_pkg.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"inlines/a\"\n\t\"inlines/b\"\n)\n\nfunc sum(s []*int) int {\n\tsum := 0\n\tfor _, pi := range s {\n\t\tsum += *pi\n\t}\n\treturn sum\n}\n\nfunc main() {\n\taf := a.F()\n\tbf, _ := b.F()\n\tabf := a.Fb()\n\n\tsaf, sbf, sabf := sum(af), sum(bf), sum(abf)\n\n\tfmt.Printf(\"af, bf, abf sums = %d, %d, %d\\n\", saf, sbf, sabf)\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Vendoring Behavior\nDESCRIPTION: This snippet demonstrates the steps to test the vendoring behavior of Go modules. It changes to a subdirectory, runs 'go mod vendor', and checks for the existence of specific files in the vendor directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_issue46867.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd subdir\ngo mod vendor\n! exists vendor/example.net/NOTICE\nexists vendor/example.net/m/NOTICE\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module in Root Directory\nDESCRIPTION: This snippet shows the contents of the go.mod file in the root directory, which defines the module name as 'x'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dir.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule x\n```\n\n----------------------------------------\n\nTITLE: Local Package with Deprecated Import - use.go\nDESCRIPTION: Defines a local package that imports a deprecated module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_deprecated.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage use\n\nimport _ \"example.com/deprecated/b\"\n```\n\n----------------------------------------\n\nTITLE: External Test Package for B\nDESCRIPTION: A test file using the external test package pattern (b_test) with a simple test function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage b_test\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition File\nDESCRIPTION: A simple go.mod file that defines a module named 'm' with Go 1.14 as the required Go version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_trimpath.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.14\n```\n\n----------------------------------------\n\nTITLE: Setting GODEBUG Environment Variable for HTTP/2 Disabling in Go\nDESCRIPTION: Sets the GODEBUG environment variable to disable HTTP/2 for both client and server in a Go program. This demonstrates how to use multiple GODEBUG settings in a single environment variable.\nSOURCE: https://github.com/golang/go/blob/master/doc/godebug.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGODEBUG=http2client=0,http2server=0\n```\n\n----------------------------------------\n\nTITLE: Darwin Architecture Test Script\nDESCRIPTION: Shell script that tests compiler flag passing for both amd64 and arm64 architectures. Sets up environment variables and verifies that correct -arch flags are passed to clang.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_darwin_cc_arch.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n[!GOOS:darwin] skip\n[!cgo] skip\n\n# clear CC, in case user sets it\nenv CC=\n\nenv CGO_ENABLED=1\n\nenv GOARCH=amd64\ngo build -n -x c.go\nstderr 'clang.*-arch x86_64'\n\nenv GOARCH=arm64\ngo build -n -x c.go\nstderr 'clang.*-arch arm64'\n```\n\n----------------------------------------\n\nTITLE: Error Handling Utilities in errors Package\nDESCRIPTION: Error handling utilities for comparing, unwrapping, and inspecting errors. Includes functions for checking if one error is another, unwrapping errors, and checking if an error matches a specific type.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nfunc As(error, interface{}) bool\nfunc Is(error, error) bool\nfunc Unwrap(error) error\n```\n\n----------------------------------------\n\nTITLE: Implementing File Path Printing in Package Test\nDESCRIPTION: Implements a function to print the file path of the current test file using runtime.Caller.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_trimpath.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage pkg\n\nimport \"runtime\"\n\nfunc PrintFileForTest() {\n\t_, file, _, _ := runtime.Caller(0)\n\tprintln(file)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Module with Validation\nDESCRIPTION: Tests the 'go mod init' command, verifying it fails without a module path and succeeds with a valid path. It also checks that re-initialization is rejected when a go.mod file already exists.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# go mod init\n! go mod init\nstderr 'cannot determine module path'\n! exists go.mod\n\ngo mod init x.x/y/z\nstderr 'creating new go.mod: module x.x/y/z'\ncmpenv go.mod $WORK/go.mod.init\n\n! go mod init\ncmpenv go.mod $WORK/go.mod.init\n```\n\n----------------------------------------\n\nTITLE: Defining Replaced Go Module (Go Module)\nDESCRIPTION: This `go.mod` file defines the module `example.net/cmd`. It specifies Go version 1.16. This module is intended to be used locally via the `replace` directive in the main `go.mod` file (`go.mod.orig`).\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_path_plus.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n-- cmd/go.mod --\nmodule example.net/cmd\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Testing no caching for command-line file tests\nDESCRIPTION: Executes Go tests on a specific file to verify that command-line file tests are never cached.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test_cached.txt#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngo test -run=WriteTmp ./foo_test.go\n! stdout '(cached)'\ngo test -run=WriteTmp ./foo_test.go\n! stdout '(cached)'\n```\n\n----------------------------------------\n\nTITLE: Defining the Go module `golang.org/toolchain` (go.mod)\nDESCRIPTION: This snippet, located in the standard `go.mod` file, formally declares the Go module's path as `golang.org/toolchain`. This is the primary file used by the Go toolchain to identify the module and manage its dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.illumos-amd64.txt#2025-04-22_snippet_2\n\nLANGUAGE: gomod\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Go Module File with Dependency\nDESCRIPTION: Defines a Go module named 'x' with a dependency on 'rsc.io/quote' version 1.1.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_verify.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule x\nrequire rsc.io/quote v1.1.0\n```\n\n----------------------------------------\n\nTITLE: Testing t.Errorf() in Go Fuzz Tests\nDESCRIPTION: This fuzz test function demonstrates how Go's fuzzing handles a call to t.Errorf(). It reports an error when the input is not 'aa'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_crash.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nfunc FuzzWithErrorf(f *testing.F) {\n\tf.Add([]byte(\"aa\"))\n\tf.Fuzz(func(t *testing.T, b []byte) {\n\t\tif string(b) != \"aa\" {\n\t\t\tt.Errorf(\"errorf was called here\")\n\t\t}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module Declaration with v2 Path\nDESCRIPTION: Go module declaration with a v2 version path, used to specify compatibility with Go modules version 2.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_22\n\nLANGUAGE: go\nCODE:\n```\nmodule \"github.com/rsc/vgotest1/v2\" // root go.mod\n```\n\n----------------------------------------\n\nTITLE: Setting up Go Modules Environment\nDESCRIPTION: Environment configuration that enables Go modules mode explicitly using GO111MODULE=on and executes 'go get' to resolve dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_domain_root.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=on\ngo get\n```\n\n----------------------------------------\n\nTITLE: Go Generate Variable Substitution Test\nDESCRIPTION: Test file demonstrating variable substitution in go generate commands using built-in variables like $GOARCH, $GOFILE, $GOLINE, and $GOPACKAGE.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/generate.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Copyright 2014 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// Test go generate variable substitution.\n\n//go:generate echo $GOARCH $GOFILE:$GOLINE ${GOPACKAGE}abc xyz$GOPACKAGE/$GOFILE/123\n\npackage p\n```\n\n----------------------------------------\n\nTITLE: Setting and Clearing GOTMPDIR\nDESCRIPTION: This snippet demonstrates how to set and clear the GOTMPDIR environment variable using 'go env -w' and 'go env -u'. It also shows that the directory is not created automatically.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_write.txt#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# go env -w should accept absolute GOTMPDIR value\n# and should not create it\n[GOOS:windows] go env -w GOTMPDIR=$WORK\\x\\y\\z\n[!GOOS:windows] go env -w GOTMPDIR=$WORK/x/y/z\n! exists $WORK/x/y/z\n# we should be able to clear an env\ngo env -u GOTMPDIR\ngo env GOTMPDIR\nstdout ^$\n\n[GOOS:windows] go env -w GOTMPDIR=$WORK\\x\\y\\z\n[!GOOS:windows] go env -w GOTMPDIR=$WORK/x/y/z\ngo env -w GOTMPDIR=\ngo env GOTMPDIR\nstdout ^$\n```\n\n----------------------------------------\n\nTITLE: Testing go build -pgo=auto flag with default.pgo file\nDESCRIPTION: Tests the behavior of go build with -pgo=auto flag when a default.pgo file exists. It verifies that the profile is used during compilation and appears in build info.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo build -n -pgo=auto -o a1.exe ./a/a1\nstderr 'preprofile.*-i.*default\\.pgo'\nstderr 'compile.*-pgoprofile=.*a1.go'\n\n# check that pgo applied to dependencies\nstderr 'compile.*-p test/dep.*-pgoprofile=.*'\n\n# check that pgo appears in build info\n# N.B. we can't start the stdout check with -pgo because the script assumes that\n# if the first arg starts with - it is a grep flag.\nstderr 'build\\\\t-pgo=.*default\\.pgo'\n\n# check also that -pgo appears with the other flags, before non-flag settings\n! stderr 'build\\\\t[A-Za-z].*build\\\\t-pgo'\n```\n\n----------------------------------------\n\nTITLE: Defining Module Dependencies for B in Go\nDESCRIPTION: This go.mod file for example.net/b module specifies its Go version without additional dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_boost.txt#2025-04-22_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/b\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: Go Module Declaration\nDESCRIPTION: This snippet declares a Go module named 'coverdep', specifying the Go version required for the module. This file should be placed at the root of the module. Dependencies: Go compiler using a version that supports modules. Includes a required Go version declaration.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_sync_atomic_import.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule coverdep\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition File\nDESCRIPTION: Go module definition file specifying the module name and Go version requirement. This file defines that the code is a module named vcs-test.golang.org/auth/or404 and requires Go 1.13 or later.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/auth/or404.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule vcs-test.golang.org/auth/or404\n\ngo 1.13\n```\n\n----------------------------------------\n\nTITLE: Setting Up Go Workspace with Vendor and Symlinks - Shell\nDESCRIPTION: This shell script initializes a Go project structure with a vendor directory, populates it with necessary Go source files, creates symbolic links to simulate alternative directory views, and sets up appropriate Go environment variables. It then verifies GOPATH configuration via 'go list', and starts concurrent 'go run', 'go build', and 'go install' commands, making sure vendoring and symlink logic does not cause failures. Requires: a Unix-like shell, Go installed, read/write permissions, and adequate environment variables.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_symlink_vendor_issue14054.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=off\n\nmkdir $WORK/tmp/gopath/src/dir1/vendor/v\ncp p.go $WORK/tmp/gopath/src/dir1/p.go\ncp v.go $WORK/tmp/gopath/src/dir1/vendor/v/v.go\nsymlink $WORK/tmp/symdir1 -> $WORK/tmp/gopath/src/dir1\nenv GOPATH=$WORK/tmp/gopath\ncd $WORK/tmp/symdir1\n\ngo list -f '{{.Root}}' .\nstdout '^'$WORK/tmp/gopath'$'\n\n# All of these should succeed, not die in vendor-handling code.\ngo run p.go &\ngo build &\ngo install &\n\nwait\n```\n\n----------------------------------------\n\nTITLE: Go Generate Command Alias Test\nDESCRIPTION: Test file demonstrating how go generate handles command aliases using the -command flag to create a custom 'run' command.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/generate.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Copyright 2014 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// Test that go generate handles command aliases.\n\n//go:generate -command run echo Now is the time\n//go:generate run for all good men\n\npackage p\n```\n\n----------------------------------------\n\nTITLE: Re-downloading and Verifying Go Modules\nDESCRIPTION: This snippet demonstrates re-downloading a Go module using 'go mod download', which removes the .partial file and extracts the module properly. It then shows successful 'go list' operations and module verification.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_partial.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# 'go mod download' should re-extract the module and remove the .partial file.\ngo mod download -modcacherw rsc.io/quote\n! exists $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.2.partial\nexists $GOPATH/pkg/mod/rsc.io/quote@v1.5.2/go.mod\n\n# 'go list' should succeed.\ngo list $GOPATH/pkg/mod/rsc.io/quote@v1.5.2\nstdout '^rsc.io/quote$'\n\n# 'go list -m' should print the directory.\ngo list -m -f '{{.Dir}}' rsc.io/quote\nstdout 'pkg[/\\\\]mod[/\\\\]rsc.io[/\\\\]quote@v1.5.2'\n\n# go mod verify should fail if we delete a file.\ngo mod verify\nrm $GOPATH/pkg/mod/rsc.io/quote@v1.5.2/go.mod\n! go mod verify\n```\n\n----------------------------------------\n\nTITLE: Building Go File with External Dependency\nDESCRIPTION: Shows building a Go file (baz_with_outside_dep.go) that has a non-standard library dependency (rsc.io/quote). This build succeeds only with -mod=mod and fails with -mod=readonly and -mod=vendor due to missing package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_outside_module.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngo build -x -mod=mod my-module/vendor/example.com/another-module/foo/bar/baz_with_outside_dep.go\n! go build -x -mod=readonly my-module/vendor/example.com/another-module/foo/bar/baz_with_outside_dep.go\nstderr 'no required module provides package rsc.io/quote'\n! go build -x -mod=vendor my-module/vendor/example.com/another-module/foo/bar/baz_with_outside_dep.go\nstderr 'no required module provides package rsc.io/quote'\n```\n\n----------------------------------------\n\nTITLE: Implementing SHA-3 and SHAKE Functions in Go\nDESCRIPTION: New functions and types for SHA-3 and SHAKE in the crypto/sha3 package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\nfunc New224() *SHA3\nfunc New256() *SHA3\nfunc New384() *SHA3\nfunc New512() *SHA3\nfunc NewCSHAKE128([]uint8, []uint8) *SHAKE\nfunc NewCSHAKE256([]uint8, []uint8) *SHAKE\nfunc NewSHAKE128() *SHAKE\nfunc NewSHAKE256() *SHAKE\nfunc Sum224([]uint8) [28]uint8\nfunc Sum256([]uint8) [32]uint8\nfunc Sum384([]uint8) [48]uint8\nfunc Sum512([]uint8) [64]uint8\nfunc SumSHAKE128([]uint8, int) []uint8\nfunc SumSHAKE256([]uint8, int) []uint8\n\ntype SHA3 struct\ntype SHAKE struct\n```\n\n----------------------------------------\n\nTITLE: Running Go Program Without Trimpath\nDESCRIPTION: This snippet runs a Go program without the -trimpath flag, expecting the output to include the vendor directory in the file path.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_trimpath.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo run main.go\nstdout vendor\n```\n\n----------------------------------------\n\nTITLE: Go Module P Implementation\nDESCRIPTION: Module P that imports and uses Q's PrintVersion function. Includes go.mod file with local replacements for module Q versions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune_all.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/p\n\ngo 1.18\n\nrequire example.com/q v1.0.0\n\nreplace example.com/q v1.0.0 => ../q1_0_0\nreplace example.com/q v1.1.0 => ../q1_1_0\n```\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"example.com/q\"\n\nfunc main() {\n\tq.PrintVersion()\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Toolchain Module Path (go.mod)\nDESCRIPTION: Specifies the module path `golang.org/toolchain` within a `go.mod` file. This line typically indicates the Go toolchain directive, instructing the Go tooling which toolchain version's constraints to apply during the build process.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.22.1.linux-amd64.txt#2025-04-22_snippet_3\n\nLANGUAGE: gomod\nCODE:\n```\ngolang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: JSON overlay configuration for path mapping\nDESCRIPTION: A JSON configuration file that maps files in the overlay directory structure. It's used with the -overlay flag to test path handling in the cgo build process.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_trimpath_cgo.txt#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"Replace\": {\n\t\t\"hello_overlay/hello.go\": \"../../overlay/hello.go\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Writing External Test for Package Function\nDESCRIPTION: Implements a test function TestF in a separate test package to verify the behavior of the F() function from the main package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_xtestonly_works.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage xtestonly_test\n\nimport (\n\t\"testing\"\n\t\"xtestonly\"\n)\n\nfunc TestF(t *testing.T) {\n\tif x := xtestonly.F(); x != 42 {\n\t\tt.Errorf(\"f.F() = %d, want 42\", x)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Module B v1.2 Configuration\nDESCRIPTION: Module B version 1.2's go.mod file requiring the latest dependency version\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patchbound.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/b\n\ngo 1.16\n\nrequire example.net/a v0.3.0\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module configuration file defining the module name and its dependency requirements.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_badchain_b_v1.1.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/badchain/b\n\nrequire example.com/badchain/c v1.1.0\n```\n\n----------------------------------------\n\nTITLE: Providing Module Version Metadata in .info File - JSON\nDESCRIPTION: This .info file supplies metadata for the Go module by specifying its version as v1.1.0. Tools like 'go mod download' and related proxy servers use such files to associate content hashes and timestamps with published module versions. The file is in standard JSON format, with a single 'Version' key. It does not require any external dependencies and serves purely as metadata; there are no parameters or dynamic content.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_v1.1.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\\\"Version\\\":\\\"v1.1.0\\\"}\n```\n\n----------------------------------------\n\nTITLE: Importing Packages in Go Module\nDESCRIPTION: This snippet shows the main package of the module, importing four packages from different modules. These imports set up the dependency structure for the test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_convergence_loop.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage m\n\nimport (\n\t_ \"example.net/w\"\n\t_ \"example.net/x\"\n\t_ \"example.net/y\"\n\t_ \"example.net/z\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Tests for Package 'main' in Go\nDESCRIPTION: Contains the test suite for the `main` package, located in `main/main_test.go`. The `TestMain` function uses the standard `testing` package to define test cases. It calls `MFunc` and `M2Func` and uses `t.Fatalf` to fail the test if the returned values are not as expected. These tests drive the execution of the code in `main.go` during coverage analysis.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_single_vs_multiple.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n-- main/main_test.go --\npackage main\n\nimport \"testing\"\n\nfunc TestMain(t *testing.T) {\n\tif MFunc() != \"42\" {\n\t\tt.Fatalf(\"bad!\")\n\t}\n\tif M2Func() != 42 {\n\t\tt.Fatalf(\"also bad!\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Running Go Test with Example Line Endings\nDESCRIPTION: Shell command to run the Go test file that verifies CRLF handling in example outputs (issue #51269).\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_crlf_example.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo test x_test.go\n```\n\n----------------------------------------\n\nTITLE: Building CGO Test Executable with Verbose Output in Go\nDESCRIPTION: Builds the CGO test project into an executable named 'exe2' using the 'go build' command with verbose output (-x flag).\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cgo_consistent_results.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngo build -x -o $WORK/exe2$GOEXE cgotest\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Go Fuzz Test in One Package\nDESCRIPTION: A Go implementation of a fuzz test in the 'one' package. This defines a single fuzz target named FuzzOne that takes a testing.F parameter and provides a fuzz function that processes byte slices.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_multiple.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage one\n\nimport \"testing\"\n\nfunc FuzzOne(f *testing.F) {\n  f.Fuzz(func(*testing.T, []byte) {})\n}\n```\n\n----------------------------------------\n\nTITLE: Bad Import Comment File\nDESCRIPTION: Go file with a malformed import comment syntax\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_import_comment.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage bad // import\n```\n\n----------------------------------------\n\nTITLE: Adding Text Generation Function to crypto/rand Package in Go\nDESCRIPTION: New function to generate random text in the crypto/rand package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nfunc Text() string\n```\n\n----------------------------------------\n\nTITLE: Fetching and Listing v3 Module\nDESCRIPTION: Fetches a v3 module using go get and lists its version using go list. This tests the resolution of a module path ending with a v3 suffix.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_major.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngo get vcs-test.golang.org/git/v3pkg.git/v3@v3.0.0\n\ngo list -m vcs-test.golang.org/git/v3pkg.git/v3\nstdout '^vcs-test.golang.org/git/v3pkg.git/v3 v3.0.0$'\n```\n\n----------------------------------------\n\nTITLE: Simulating Concurrent Module Cache Access in Go\nDESCRIPTION: A Go program that tests module extraction robustness by downloading modules while simultaneously reading from the module cache. It creates temporary GOPATH directories and runs multiple download iterations to ensure the extraction process works correctly even with file system access contention.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_concurrent_read.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n)\n\nfunc main() {\n\tif err := run(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n\n// run repeatedly downloads a module while opening files in the module cache\n// in a background goroutine.\n//\n// run uses a different temporary module cache in each iteration so that we\n// don't need to clean the cache or synchronize closing files after each\n// iteration.\nfunc run() (err error) {\n\ttmpDir, err := os.MkdirTemp(\"\", \"\")\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer func() {\n\t\tif rmErr := os.RemoveAll(tmpDir); err == nil && rmErr != nil {\n\t\t\terr = rmErr\n\t\t}\n\t}()\n\tfor i := 0; i < 10; i++ {\n    gopath := filepath.Join(tmpDir, fmt.Sprintf(\"gopath%d\", i))\n\t\tvar err error\n\t\tdone := make(chan struct{})\n\t\tgo func() {\n\t\t\terr = download(gopath)\n\t\t\tclose(done)\n\t\t}()\n\t\treadCache(gopath, done)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}\n\n// download downloads a module into the given cache using 'go mod download'.\nfunc download(gopath string) error {\n\tcmd := exec.Command(\"go\", \"mod\", \"download\", \"-modcacherw\", \"rsc.io/quote@v1.5.2\")\n\tcmd.Stderr = os.Stderr\n\tcmd.Env = append(os.Environ(), \"GOPATH=\"+gopath)\n\treturn cmd.Run()\n}\n\n// readCache repeatedly globs for go.mod files in the given cache, then opens\n// those files for reading. When the done chan is closed, readCache closes\n// files and returns.\nfunc readCache(gopath string, done <-chan struct{}) {\n\tfiles := make(map[string]*os.File)\n\tdefer func() {\n\t\tfor _, f := range files {\n\t\t\tf.Close()\n\t\t}\n\t}()\n\n\tpattern := filepath.Join(gopath, \"pkg/mod/rsc.io/quote@v1.5.2*/go.mod\")\n\tfor {\n\t\tselect {\n\t\tcase <-done:\n\t\t\treturn\n\t\tdefault:\n\t\t}\n\n\t\tnames, _ := filepath.Glob(pattern)\n\t\tfor _, name := range names {\n\t\t\tif files[name] != nil {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tf, _ := os.Open(name)\n\t\t\tif f != nil {\n\t\t\t\tfiles[name] = f\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Go Workspace Definition\nDESCRIPTION: Defines a Go workspace with version 1.700 requirement\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_gomod_issue61455.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com\n\ngo 1.700\n```\n\n----------------------------------------\n\nTITLE: Go Program to Print Stack File Information\nDESCRIPTION: A Go program that imports the 'example.com/stack' module and prints the file path from stack.TopFile(). Used to verify module version caching.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_trimpath.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// +build ignore\n\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"example.com/stack\"\n)\n\nfunc main() {\n\tfmt.Println(stack.TopFile())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Environment and Testing Module Download - bash\nDESCRIPTION: This bash snippet sets required Go module environment variables, then attempts to download a module known to be missing to provoke a controlled error, followed by downloading a module that exists. It depends on a Go installation (with access to `go` commands) and certain test modules on vcs-test.golang.org. Parameters like GO111MODULE enable modules, GOPROXY disables proxy use, and GOSUMDB disables sum database verification. Expected outputs are proper handling of a missing module (with an error check on stderr) and a successful fetch for an existing module, serving as regression protection for module handling bugs.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_missing_repo.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Regression test for golang.org/issue/34094: modules hosted within gitlab.com\n# subgroups could not be fetched because the server returned bogus go-import\n# tags for prefixes of the module path.\n\n[short] skip\n[!git] skip\n\nenv GO111MODULE=on\nenv GOPROXY=direct\nenv GOSUMDB=off\n\n! go mod download vcs-test.golang.org/go/missingrepo/missingrepo-git@latest\nstderr 'vcs-test.golang.org/go/missingrepo/missingrepo-git: git ls-remote .*: exit status .*'\n\ngo mod download vcs-test.golang.org/go/missingrepo/missingrepo-git/notmissing@latest\n```\n\n----------------------------------------\n\nTITLE: Comparing Go Module Graphs Between Go 1.17 and 1.16\nDESCRIPTION: A series of shell commands that test how Go 1.17 and 1.16 handle module dependencies differently, particularly focusing on pruning of retracted versions. The script creates and compares module graphs, validates specific dependency patterns, and verifies that version flags work correctly.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_graph_version.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp go.mod go.mod.orig\n\ngo mod graph\ncp stdout graph-1.17.txt\nstdout '^example\\.com/m example\\.com/retract/incompatible@v1\\.0\\.0$'\nstdout '^example\\.net/lazy@v0\\.1\\.0 example\\.com/retract/incompatible@v1\\.0\\.0$'\n! stdout 'example\\.com/retract/incompatible@v2\\.0\\.0\\+incompatible'\n\ngo mod graph -go=1.17\ncmp stdout graph-1.17.txt\n\ncmp go.mod go.mod.orig\n\n\n# Setting -go=1.16 should report the graph as viewed by Go 1.16,\n# but should not edit the go.mod file.\n\ngo mod graph -go=1.16\ncp stdout graph-1.16.txt\nstdout '^example\\.com/m example\\.com/retract/incompatible@v1\\.0\\.0$'\nstdout '^example\\.net/lazy@v0\\.1\\.0 example.com/retract/incompatible@v1\\.0\\.0$'\nstdout '^example.net/requireincompatible@v0.1.0 example.com/retract/incompatible@v2\\.0\\.0\\+incompatible$'\n\ncmp go.mod go.mod.orig\n\n\n# If we actually update the go.mod file to the requested go version,\n# we should get the same selected versions, but the roots of the graph\n# may be updated.\n#\n# TODO(#45551): The roots should not be updated.\n\ngo mod edit -go=1.16\ngo mod graph\n! stdout '^example\\.com/m example\\.com/retract/incompatible@v1\\.0\\.0$'\nstdout '^example\\.net/lazy@v0.1.0 example.com/retract/incompatible@v1\\.0\\.0$'\nstdout '^example.net/requireincompatible@v0.1.0 example.com/retract/incompatible@v2\\.0\\.0\\+incompatible$'\n\t# TODO(#45551): cmp stdout graph-1.16.txt\n\n\n# Unsupported go versions should be rejected, since we don't know\n# what versions they would report.\n! go mod graph -go=1.99999999999\nstderr '^invalid value \"1\\.99999999999\" for flag -go: maximum supported Go version is '$goversion'\\nusage: go mod graph \\[-go=version\\] \\[-x\\]\\nRun ''go help mod graph'' for details.$'\n```\n\n----------------------------------------\n\nTITLE: Testing GOTOOLCHAIN=min+auto Behavior\nDESCRIPTION: Tests how GOTOOLCHAIN=go1.21+auto switches to a newer toolchain when dependencies require it.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_exec_toolchain.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# GOTOOLCHAIN=min+auto should run the newer toolchain\nenv GOTOOLCHAIN=go1.21+auto\ncp go.mod.new go.mod\ngo get rsc.io/needgo121 rsc.io/needgo122 rsc.io/needgo123 rsc.io/needall\nstderr '^go: rsc.io/needall@v0.0.1 requires go >= 1.23; switching to go1.23.9$'\n! stderr '\\(running'\nstderr '^go: added rsc.io/needall v0.0.1'\ngrep 'go 1.23' go.mod\n! grep toolchain go.mod\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Dependency Replacement\nDESCRIPTION: This snippet shows the go.mod file for a module that requires and replaces a dependency. It demonstrates how to specify a local replacement for a module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace_conflict.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/m\n\nrequire example.com/dep v1.0.0\nreplace example.com/dep v1.0.0 => ../dep1\n```\n\n----------------------------------------\n\nTITLE: Simple Go Module Definition\nDESCRIPTION: A basic Go module definition file that establishes the module name as 'example.prog'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_build_cmdline_pkgs.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.prog\n```\n\n----------------------------------------\n\nTITLE: Module B Implementation with Import\nDESCRIPTION: The package implementation for 'm/b' that imports 'm/a', completing the circular dependency chain and creating an import cycle between the packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_cycle.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage b\nimport _ \"m/a\"\n```\n\n----------------------------------------\n\nTITLE: Incorrect TestMain Function Signature in Go\nDESCRIPTION: This snippet shows an incorrect implementation of the TestMain function with a wrong signature. It uses *testing.Main instead of the correct *testing.M parameter.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_main.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage standalone_main_wrong_test\n\nimport \"testing\"\n\nfunc TestMain(m *testing.Main) {\n}\n```\n\n----------------------------------------\n\nTITLE: Module B Implementation\nDESCRIPTION: Implementation of module 'b' using dependencies p and q\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage b\n\nimport (\n\t\"example.com/p\"\n\t\"example.com/q\"\n)\n\nfunc Foo() {\n\tp.P()\n\tq.Q()\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module File (go.mod)\nDESCRIPTION: Main go.mod file defining module path and dependencies\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_ambiguous_a_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/ambiguous/a\n\ngo 1.16\n\nrequire example.com/ambiguous/a/b v0.0.0-empty\n```\n\n----------------------------------------\n\nTITLE: Installing Go Binary With GOBIN Set\nDESCRIPTION: Test case to ensure that with GOBIN set, binaries are installed to the specified GOBIN directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_install.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nenv GOBIN=$WORK/bin1\nmkdir -p $GOBIN\ngo install go-cmd-test\nexists $GOBIN/go-cmd-test$GOEXE\n```\n\n----------------------------------------\n\nTITLE: Module A Go Module Definition\nDESCRIPTION: Go module configuration for module a requiring rsc.io/quote v1.5.2\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sum_mismatch.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\n\nmodule example.com/hi\n\nrequire \"rsc.io/quote\" v1.5.2\n```\n\n----------------------------------------\n\nTITLE: Fetching and Vendoring Dependencies in Go\nDESCRIPTION: This snippet shows how to fetch a specific version of a dependency and vendor it. It also sets up environment variables for testing purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_getmode_vendor.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n\ngo get rsc.io/quote@v1.5.1\ngo mod vendor\nenv GOPATH=$WORK/empty\nenv GOPROXY=file:///nonexist\n```\n\n----------------------------------------\n\nTITLE: Defining Go Example Functions (Go)\nDESCRIPTION: This file (`example_test.go`) defines example functions within the `testlist` package using the `fmt` package. `Example_simple` prints output and includes a corresponding `// Output:` comment, making it runnable and verifiable by `go test`. `Example_withEmptyOutput` demonstrates an example with empty output. `Example_noOutput` performs an action but lacks the `// Output:` comment, so it serves primarily as documentation and might not be listed by `go test -list=Example` depending on the Go version and exact interpretation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_test_simple.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n-- example_test.go --\npackage testlist\n\nimport (\n\t\"fmt\"\n)\n\nfunc Example_simple() {\n\tfmt.Println(\"Test with Output.\")\n\n\t// Output: Test with Output.\n}\n\nfunc Example_withEmptyOutput() {\n\tfmt.Println(\"\")\n\n\t// Output:\n}\n\nfunc Example_noOutput() {\n\t_ = fmt.Sprint(\"Test with no output\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Target Go Module x/z for Replacement (Go Mod)\nDESCRIPTION: This `go.mod` file defines the module `x/z`. It serves as the local replacement target specified in the `x/y` module's `go.mod` file. It doesn't declare any dependencies or replacements itself.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_local_replace.txt#2025-04-22_snippet_3\n\nLANGUAGE: gomod\nCODE:\n```\n-- x/z/go.mod --\nmodule x/z\n```\n\n----------------------------------------\n\nTITLE: Testing go mod init with subdirectory\nDESCRIPTION: Tests that 'go mod init' recommends running 'go mod tidy' when the directory has a subdirectory, regardless of whether the subdirectory contains .go files.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_init_tidy.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd subdir\ngo mod init m\nstderr '^go: to add module requirements and sums:\\n\\tgo mod tidy$'\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Testing Deprecated Insecure Flag in Module Mode\nDESCRIPTION: Sets GO111MODULE to on for module mode and attempts to use the deprecated -insecure flag with go get, which should produce an error message recommending GOINSECURE instead.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/get_insecure_no_longer_supported.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=on\n\n# Modules: Fetch with insecure, should error\n! go get -insecure test\nstderr 'go: -insecure flag is no longer supported; use GOINSECURE instead'\n```\n\n----------------------------------------\n\nTITLE: Trivial Module Definition\nDESCRIPTION: This go.mod file defines a trivial module named 'triv' without any dependencies or version specifications.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule triv\n```\n\n----------------------------------------\n\nTITLE: Formatted Go 1.21 Module with Exclude Block\nDESCRIPTION: Properly formatted go.mod file for Go 1.21 showing semantic version sorting in exclude block.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_exclude_go121.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule x.x/y/z\n\ngo 1.21\n\nexclude (\n\tx.1 v1.9.0\n\tx.1 v1.10.0\n\tx.1 v1.11.0\n)\n```\n\n----------------------------------------\n\nTITLE: Checking Go Package Dependency Resolution with go list and go mod (Shell Script)\nDESCRIPTION: This shell script validates that the Go toolchain correctly identifies dependency paths for the 'net' standard package both outside and within the GOROOT. It tests that 'go list -deps net' prefers vendored dependencies by matching output to 'vendor/golang.org/x/net' and rejecting unvendored paths. The script further verifies that 'go mod why -m' shows module-based dependencies, ensuring tools like 'go get' do not use vendored copies. This snippet depends on an environment with Go installed, set GOROOT, and relevant source/context; it reads and writes temporary files and expects specific environment variables (e.g., $WORK).\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_std_vendor.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# https://golang.org/issue/44725: packages in std should have the same\ndependencies regardless of whether they are listed from within or outside\nGOROOT/src.\n\n# Control case: net, viewed from outside the 'std' module,\n# should depend on vendor/golang.org/… instead of golang.org/….\n\ngo list -deps net\nstdout '^vendor/golang.org/x/net'\n! stdout '^golang.org/x/net'\ncp stdout $WORK/net-deps.txt\n\n\n# It should still report the same package dependencies when viewed from\n# within GOROOT/src.\n\ncd $GOROOT/src\n\ngo list -deps net\nstdout '^vendor/golang.org/x/net'\n! stdout '^golang.org/x/net'\ncmp stdout $WORK/net-deps.txt\n\n\n# However, 'go mod' and 'go get' subcommands should report the original module\n# dependencies, not the vendored packages.\n\n[!net:golang.org] stop\n\nenv GOPROXY=\nenv GOWORK=off\ngo mod why -m golang.org/x/net\nstdout '^# golang.org/x/net\\nnet\\ngolang.org/x/net'\n\n```\n\n----------------------------------------\n\nTITLE: Testing t.Fatalf() in Go Fuzz Tests\nDESCRIPTION: This function tests how Go's fuzzing handles a call to t.Fatalf(). It reports a fatal error and stops the test when the input is not 'aa'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_crash.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nfunc FuzzWithFatalf(f *testing.F) {\n\tf.Add([]byte(\"aa\"))\n\tf.Fuzz(func(t *testing.T, b []byte) {\n\t\tif string(b) != \"aa\" {\n\t\t\tt.Fatalf(\"fatalf was called here\")\n\t\t}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Toolchain Version Test Script\nDESCRIPTION: Shell script containing test cases for Go toolchain version management, including checks for version upgrades based on go.mod settings and GOTOOLCHAIN environment variable configurations\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_godebug_trace.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nenv GODEBUG=toolchaintrace=1\nenv TESTGO_VERSION=go1.21.0\nenv TESTGO_VERSION_SWITCH=switch\nenv GOTOOLCHAIN=auto\n\ngo mod init m\ngo mod edit -go=1.21.1\ngo version\nstderr -count=1 'go: upgrading toolchain to go1.21.1 \\(required by go line in go.mod; upgrade allowed by GOTOOLCHAIN=auto\\)'\nstderr -count=1 'go: using go1.21.1 toolchain from cache located at .*'\nstdout 'go version go1.21.1'\nrm go.mod\n```\n\n----------------------------------------\n\nTITLE: Testing t.Fail() in Go Fuzz Tests\nDESCRIPTION: This fuzz test function demonstrates how Go's fuzzing handles a call to t.Fail(). It fails the test when the input is not 'aa'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_crash.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nfunc FuzzWithFail(f *testing.F) {\n\tf.Add([]byte(\"aa\"))\n\tf.Fuzz(func(t *testing.T, b []byte) {\n\t\tif string(b) != \"aa\" {\n\t\t\tt.Fail()\n\t\t}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Module\nDESCRIPTION: Demonstrates how to set up a Go module with vendoring enabled. It includes the main module file (go.mod) specifying the module path, a vendor/modules.txt for tracking vendored dependencies, and individual go.mod files for vendored modules. This setup ensures dependencies are managed within the project's vendor directory, and the Go List command is used to explore modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_patterns_vendor.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n-- go.mod --\nmodule example.com/m\n```\n\nLANGUAGE: Go\nCODE:\n```\n-- vendor/modules.txt --\n# example.com/x v0.0.0\nexample.com/x\n# example.com/x/y v0.1.0\nexample.com/x/y\n```\n\nLANGUAGE: Go\nCODE:\n```\n-- vendor/example.com/x/go.mod --\nmodule example.com/x\n```\n\nLANGUAGE: Go\nCODE:\n```\n-- vendor/example.com/x/y/go.mod --\nmodule example.com/x/y\n```\n\nLANGUAGE: Go\nCODE:\n```\n-- vendor/example.com/x/x.go --\npackage x\n```\n\nLANGUAGE: Go\nCODE:\n```\n-- vendor/example.com/x/y/y.go --\npackage y\n```\n\nLANGUAGE: Go\nCODE:\n```\n-- vendor/example.com/x/vendor/z/z.go --\npackage z\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Package with Embedded File in Go\nDESCRIPTION: This Go code defines the main package, imports the embed package and a local package, and uses the go:embed directive to embed a file into a string variable.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_ignore_leading_bom.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n﻿package main\n\nimport (\n\t_ \"embed\"\n\n\t\"m/hello\"\n)\n\n//go:embed file\nvar s string\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module configuration file specifying the module name 'rsc.io/needgo1183' and Go version requirement of 1.18.3\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo1183_v0.0.1.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule rsc.io/needgo1183\ngo 1.18.3\n```\n\n----------------------------------------\n\nTITLE: Alternative Quote Module Implementation\nDESCRIPTION: Local implementation of a module with a different path (not-rsc.io/quote/v3) that provides an alternative GoV3() function with a different quote.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage quote\n\nfunc GoV3() string {\n\treturn \"Clear is better than clever.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Go Test with Vet Options\nDESCRIPTION: This snippet demonstrates running go test with different vet options on test and non-test files. It shows how to disable vet, use specific analyzers, and handle various error cases.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_vet.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Test file\n! go test p1_test.go\nstderr 'Logf format %d'\ngo test -vet=off\nstdout '^ok'\n\n# Non-test file\n! go test p1.go\nstderr 'Printf format %d'\ngo test -x -vet=shift p1.go\nstderr '[\\\\\\\\]vet.*-shift'\nstdout '\\\\[no test files\\\\]'\ngo test -vet=off p1.go\n! stderr '[\\\\\\\\]vet.*-shift'\nstdout '\\\\[no test files\\\\]'\n\n# ensure all runs non-default vet\n! go test -vet=all ./vetall/...\nstderr 'using resp before checking for errors'\n\n# Test issue #47309\n! go test -vet=bools,xyz ./vetall/...\nstderr '-vet argument must be a supported analyzer'\n\n# Test with a single analyzer\n! go test -vet=httpresponse ./vetall/...\nstderr 'using resp before checking for errors'\n\n# Test with a list of analyzers\ngo test -vet=atomic,bools,nilfunc ./vetall/...\nstdout 'm/vetall.*\\\\[no tests to run\\\\]'\n\n# Test issue #22890\ngo test m/vetcycle\nstdout 'm/vetcycle.*\\\\[no test files\\\\]'\n\n# Test with ...\n! go test ./vetfail/...\nstderr 'Printf format %d'\nstdout 'ok\\\\s+m/vetfail/p2'\n\n# Check there's no diagnosis of a bad build constraint in vetxonly mode.\n# Use -a so that we need to recompute the vet-specific export data for\n# vetfail/p1.\ngo test -a m/vetfail/p2\n! stderr 'invalid.*constraint'\n```\n\n----------------------------------------\n\nTITLE: Go Module Declaration in .mod\nDESCRIPTION: Module declaration file specifying the module name and Go version requirement\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_dotname_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/dotname\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module\nDESCRIPTION: Specifies the Go module configuration with Go version 1.17.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_all_gobuild.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\ngo 1.17\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Building Go Plugin with Consistent Output Test\nDESCRIPTION: Shell commands to build the same Go file twice as plugins and compare the outputs to verify consistency. Uses trimpath and disables VCS info to ensure reproducible builds.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_plugin_reproducible.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo build -trimpath -buildvcs=false -buildmode=plugin -o a.so main.go\ngo build -trimpath -buildvcs=false -buildmode=plugin -o b.so main.go\ncmp -q a.so b.so\n```\n\n----------------------------------------\n\nTITLE: Defining Types and Functions for database/sql Package in Go\nDESCRIPTION: This snippet defines types and functions related to database drivers and connections in the database/sql package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.10.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nfunc OpenDB(driver.Connector) *DB\n\ntype Connector interface {\n    Connect(context.Context) (Conn, error)\n    Driver() Driver\n}\n\ntype DriverContext interface {\n    OpenConnector(string) (Connector, error)\n}\n\ntype SessionResetter interface {\n    ResetSession(context.Context) error\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module Files for v1 and v2\nDESCRIPTION: Module definition files for the main package and its v2 major version. The v2 file includes the required /v2 suffix in the module path following Go modules conventions for major version upgrades.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/querytest.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n-- go.mod --\nmodule vcs-test.golang.org/git/querytest.git\n-- v2/go.mod --\nmodule vcs-test.golang.org/git/querytest.git/v2\n```\n\n----------------------------------------\n\nTITLE: Go Package with CGO Import\nDESCRIPTION: Go source file demonstrating basic CGO import along with unicode package import. This file is part of package x and shows minimal import usage.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_compiled_imports.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage x\nimport \"C\"\nimport \"unicode\" // does not use unsafe, syscall, runtime/cgo, unicode/utf16\n```\n\n----------------------------------------\n\nTITLE: Creating an Invalid Go Package - Go\nDESCRIPTION: This snippet shows an invalid Go package declaration with 'pkg badpkg' instead of the correct syntax. It is deliberately malformed to trigger errors during Go tool processing as part of the wildcard skipping test. Expect Go tools to report errors due to the invalid package declaration. Requires the Go toolchain; no parameters or outputs except parse errors.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_wildcard_skip_nonmatching.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n-- badpkg/x.go --\\npkg badpkg\\n\n```\n\n----------------------------------------\n\nTITLE: Adding Read and ReadFile functions to debug/buildinfo package\nDESCRIPTION: This snippet adds Read and ReadFile functions to the debug/buildinfo package. These functions return a *debug.BuildInfo and an error.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.18.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npkg debug/buildinfo, func Read(io.ReaderAt) (*debug.BuildInfo, error)\npkg debug/buildinfo, func ReadFile(string) (*debug.BuildInfo, error)\n```\n\n----------------------------------------\n\nTITLE: Implementing Package with Multiple Module Dependencies\nDESCRIPTION: Package file that demonstrates importing from multiple modules and versions. This shows how packages can depend on different modules including legacy paths.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/modlegacy1-new.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage p1\n\nimport _ \"vcs-test.golang.org/git/modlegacy1-old.git/p2\"\nimport _ \"vcs-test.golang.org/git/modlegacy1-new.git\"\nimport _ \"vcs-test.golang.org/git/modlegacy1-new.git/p2\"\n```\n\n----------------------------------------\n\nTITLE: Go Module Configuration for 'm' Directory\nDESCRIPTION: Module configuration file for example.com/m with dependency on example.com/dep and Go 1.24\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_pattern_work.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/m\n\ngo 1.24\n\nrequire example.com/dep v1.0.0\nreplace example.com/dep v1.0.0 => ../dep\n```\n\n----------------------------------------\n\nTITLE: Go Test Helper Functions Implementation\nDESCRIPTION: Implementation of test helper functions using three different calling patterns: direct *testing.T calls, testing.TB interface calls, and custom TestingT interface calls. Includes a custom interface definition and a test case demonstrating all three approaches.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_race_issue26995.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage testing_test\n\nimport \"testing\"\n\ntype TestingT interface {\n\tHelper()\n\tLog(args ...interface{})\n}\n\nfunc directCall(t *testing.T) {\n\tt.Helper()\n\tt.Log(\"directCall\")\n}\n\nfunc interfaceTBCall(t testing.TB) {\n\tt.Helper()\n\tt.Log(\"interfaceTBCall\")\n}\n\nfunc interfaceCall(t TestingT) {\n\tt.Helper()\n\tt.Log(\"interfaceCall\")\n}\n\nfunc TestTesting(t *testing.T) {\n\tdirectCall(t)\n\tinterfaceTBCall(t)\n\tinterfaceCall(t)\n}\n```\n\n----------------------------------------\n\nTITLE: Testing go mod vendor with alternate file\nDESCRIPTION: Checks that go mod vendor works with the alternate file and that vendoring is affected by edits to the alternate file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/modfile_flag.txt#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngo mod vendor\nexists vendor\ngo mod edit -require rsc.io/quote@v1.5.1\n! go list .\ngo list -mod=mod\nrm vendor\n```\n\n----------------------------------------\n\nTITLE: Main Go Module Definition\nDESCRIPTION: Go module definition file for example.net/m with replacement directive for unresolved package\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_symlink_issue35941.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/m\n\ngo 1.16\n\nreplace example.net/unresolved v0.1.0 => ../unresolved\n```\n\n----------------------------------------\n\nTITLE: Defining Package 'b' in Go\nDESCRIPTION: This Go source file defines a minimal package 'b'. It contains no exported identifiers and serves primarily as a node in the dependency graph.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_horizon.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n-- b1/b.go --\npackage b\n```\n\n----------------------------------------\n\nTITLE: Specifying Go Toolchain Version in JSON (.info)\nDESCRIPTION: This JSON snippet, typically found within a `.info` file as part of the Go module proxy protocol or toolchain distribution, specifies the exact version identifier for the Go toolchain. The 'Version' field holds the string value 'v0.0.1-go1.22rc1.linux-amd64', allowing Go tools to identify and potentially download the correct toolchain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.22rc1.linux-amd64.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.22rc1.linux-amd64\"}\n```\n\n----------------------------------------\n\nTITLE: Version Control Operations Test\nDESCRIPTION: Tests for package version control operations including @patch and @latest directives within the main module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_main.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo get rsc.io/x\ngrep 'rsc.io/quote v1.5.2' go.mod\ngo get rsc.io/x@upgrade\ngrep 'rsc.io/quote v1.5.2' go.mod\ncp go.mod.orig go.mod\ngo get rsc.io/x@patch\ngrep 'rsc.io/quote v1.5.2' go.mod\ncp go.mod.orig go.mod\n```\n\n----------------------------------------\n\nTITLE: Go Type Alias Definition\nDESCRIPTION: Simple Go code demonstrating type alias syntax which requires Go 1.9 or later.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit_go.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage alias\ntype T = int\n```\n\n----------------------------------------\n\nTITLE: Module A Configuration\nDESCRIPTION: Module definition for example.com/a that requires and replaces module example.com/p.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_modules_txt_consistent.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/a\n\ngo 1.21\n\nrequire example.com/p v1.0.0\n\nreplace example.com/p v1.0.0 => ../p\n```\n\n----------------------------------------\n\nTITLE: Building Go Modules Without Vendor Directory\nDESCRIPTION: This snippet demonstrates building Go modules without a vendor directory, showing that modules requiring Go 1.17 can build while those with version conflicts fail.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_goversion.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo build example.net/need117\n! go build example.net/bad114\nstderr '^bad114[/\\\\]bad114.go:15:2: duplicate method .?Y.?( .*)?$'\n```\n\n----------------------------------------\n\nTITLE: Module Replacement Commands\nDESCRIPTION: Shell commands demonstrating module replacement operations and version management using go mod edit and go get.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_replaced.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncp go.mod go.mod.orig\n\nenv oldGOPROXY=$GOPROXY\n\ngo mod edit -replace=example.com/x=./x\ngo get example.com/x\n\ngo list -m example.com/x\ngo mod edit -replace=example.com/x@v0.1.0=./x\ngo mod edit -replace=example.com/x@v0.2.0=./x\n\ngo get example.com/x\ngo list -m example.com/x\n\ngo get example.com/x@<v0.2.0\ngo list -m example.com/x\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic External Test Package in Go - Go\nDESCRIPTION: This Go file defines a test function 'Test' in the external test package 'x_test', which imports 'testing'. This setup is used to ensure Go's test discovery properly handles external test packages distinct from the main source package. Requires the Go testing package, a valid Go module, and is invoked during 'go test' flows. No parameters; output is test execution or package recognition in meta tools.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_test.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage x_test\nimport \"testing\"\nfunc Test(t *testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Go Module with Dependency - Go\nDESCRIPTION: Declares a Go module named example.com/badchain/a and specifies its dependency on example.com/badchain/b v1.0.0. This snippet demonstrates standard Go module file syntax. Required to manage dependencies via Go tooling. There are no parameters; file expects to be at the project root.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_badchain_a_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/badchain/a\n\nrequire example.com/badchain/b v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Testing Go Work File Version Compatibility\nDESCRIPTION: This snippet tests the scenario where the go.work file itself requires a newer Go version. It expects the build to fail with an error message indicating that go.work requires a newer Go version than the one running.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline_too_new.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncp go.work.new go.work\ncp go.mod.old go.mod\n! go build .\nstderr '^go: go.work requires go >= 1.99999 \\(running go 1\\..+\\)$'\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module `example.net/pkgadded` v1.1.0 (Test Context .mod)\nDESCRIPTION: This snippet represents the content of a `.mod` file used within a test context. It defines the Go module `example.net/pkgadded` and specifies Go version 1.16, corresponding to the module's state at version v1.1.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_pkgadded_v1.1.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: gomod\nCODE:\n```\nmodule example.net/pkgadded\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines module dependencies including rsc.io/quote and its indirect dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_skip_write.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.18\n\nrequire rsc.io/quote v1.5.2\n\nrequire (\n\tgolang.org/x/text v0.0.0-20170915032832-14c0d48ead0c // indirect\n\trsc.io/sampler v1.3.0 // indirect\n\trsc.io/testonly v1.0.0 // indirect\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Go Command PATH Resolution in Go Test\nDESCRIPTION: Go test file that verifies the 'go' command found in PATH is the one from GOROOT/bin. It uses exec.LookPath to find the 'go' executable and compares it with the expected path in GOROOT/bin.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_goroot_PATH.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage example\n\nimport (\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\t\"testing\"\n)\n\nfunc TestGoCommandExists(t *testing.T) {\n\tgot, err := exec.LookPath(\"go\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\twant := filepath.Join(os.Getenv(\"GOROOT\"), \"bin\", \"go\" + os.Getenv(\"GOEXE\"))\n\tif got != want {\n\t\tt.Fatalf(`exec.LookPath(\"go\") = %q; want %q`, got, want)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring go.mod for Auxiliary Module with Tool Dependency - Go\nDESCRIPTION: This snippet features a go.mod file for a secondary module that specifies its own module path, Go version, a required tool (dependency/cmd/baz), a local dependency replacement path, and standard require entries. This enables the module to directly invoke external tools and override dependencies locally.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_tool.txt#2025-04-22_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nmodule example.com/other\\n\\ngo 1.24\\n\\ntool example.com/dependency/cmd/baz\\n\\nreplace example.com/dependency => ../dependency\\n\\nrequire example.com/dependency v1.0.0\\n\n```\n\n----------------------------------------\n\nTITLE: Module Declaration for sub/inner\nDESCRIPTION: Declares a Go module named 'new/sub/inner'\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_legacy_mod.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule new/sub/inner\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: A go.mod file that defines the module name and Go version requirement for the fuzzing test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_run.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/x\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines a Go module 'm' requiring version 1.0.0 of example.com/ambiguous/a package\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_ambiguous.txt#2025-04-22_snippet_0\n\nLANGUAGE: gomod\nCODE:\n```\nmodule m\n\ngo 1.15\n\nrequire example.com/ambiguous/a v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Defining Package z in Target Module x/z (Go)\nDESCRIPTION: This Go source file defines the empty package `z` within the `x/z` module. It provides the necessary Go package structure for the local module `x/z` that acts as the replacement target for the `zz` dependency in the `x/y` module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_local_replace.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n-- x/z/z.go --\npackage z\n```\n\n----------------------------------------\n\nTITLE: Module B v1 Package\nDESCRIPTION: Version 1 of module b that imports module c v0.2.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_indirect.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage b\n\nimport _ \"example.com/c\"\n```\n\n----------------------------------------\n\nTITLE: Comparing Cached Module Version List with Expected List\nDESCRIPTION: Compares the content of the automatically generated version list file within the local module cache (acting as a proxy) for 'modtest5' with a predefined expected list located at '$WORK/modtest5.list'. This command serves as an assertion to verify that the cache was populated correctly by the preceding 'go mod download' commands.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_pseudo.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncmp $GOPATH/pkg/mod/cache/download/github.com/dmitshur-test/modtest5/@v/list $WORK/modtest5.list\n```\n\n----------------------------------------\n\nTITLE: Checking Missing Module Retraction with Go List\nDESCRIPTION: Tests handling of module retractions when the retraction details are not retrievable due to a missing module or version, ensuring no errors are thrown.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_retract.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\n# 'go list -m -retracted mod@version' does not show an error if the module\\n# that would contain the retraction is unavailable. See #45305.\\ngo list -m -retracted -f '{{.Path}} {{.Version}} {{.Error}}' example.com/retract/missingmod@v1.0.0\\nstdout '^example.com/retract/missingmod v1.0.0 \\u003cnil\\u003e$'\\nexists $GOPATH/pkg/mod/cache/download/example.com/retract/missingmod/@v/v1.9.0.info\\n! exists $GOPATH/pkg/mod/cache/download/example.com/retract/missingmod/@v/v1.9.0.mod\n```\n\n----------------------------------------\n\nTITLE: Minimal Go Main Package\nDESCRIPTION: Contains a minimal Go application with an empty main function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/insecurerepo.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Defining Root Go Module with Tool Dependency\nDESCRIPTION: Go module file that defines the root module 'example.com/foo' with a tool dependency on 'example.com/dep/tooldep' and a regular dependency on 'example.com/dep' with a local replacement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_perpkgflag.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/foo\n\ngo 1.24\n\ntool example.com/dep/tooldep\n\nrequire example.com/dep v1.0.0\n\nreplace example.com/dep => ./dep\n```\n\n----------------------------------------\n\nTITLE: Tidied Go Module File\nDESCRIPTION: A Go module file after running 'go mod tidy', showing the expected state with redundant requirements removed but maintaining dependencies needed for backward compatibility.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_deleted.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/m\n\ngo 1.17\n\nreplace (\n\texample.net/deleted v0.1.0 => ./d1\n\texample.net/deleted v0.2.0 => ./d2\n\texample.net/lazy v0.1.0 => ./lazy\n\texample.net/pruned v0.1.0 => ./pruned\n)\n\nrequire (\n\texample.net/deleted v0.1.0\n\texample.net/lazy v0.1.0\n)\n```\n\n----------------------------------------\n\nTITLE: Conflicting Import Comments\nDESCRIPTION: Two files in the same package with conflicting import path comments\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_import_comment.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage conflict // import \"a\"\n```\n\nLANGUAGE: go\nCODE:\n```\npackage conflict /* import \"b\" */\n```\n\n----------------------------------------\n\nTITLE: Empty Go Package for Test Dependency\nDESCRIPTION: An empty Go package file used in the test script to verify build cache behavior when cleaning.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_cache.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage empty\n```\n\n----------------------------------------\n\nTITLE: Upgrade Module Version 2\nDESCRIPTION: Defines the go.mod and upgrade.go files for the second version of the example.com/upgrade module, which includes a new dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_update_unrelated_sum.txt#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/upgrade\n\ngo 1.16\n\nrequire rsc.io/quote v1.5.2 // indirect\n```\n\nLANGUAGE: go\nCODE:\n```\npackage upgrade\n```\n\n----------------------------------------\n\nTITLE: Defining Toolchain Version Metadata with JSON - JSON\nDESCRIPTION: This snippet provides the toolchain version information in JSON format. The Version field specifies the toolchain version, operating system, and architecture. It is used for dependency management and toolchain identification. Input is a static JSON object, and output is typically consumed by Go's tooling for version verification.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.22.3.linux-amd64.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\\\"Version\\\":\\\"v0.0.1-go1.22.3.linux-amd64\\\"}\n```\n\n----------------------------------------\n\nTITLE: JSON Overlay Configuration\nDESCRIPTION: JSON configuration file defining the overlay replacement for go.work file\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_overlay.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"Replace\": {\"go.work\": \"overlaywork\"}}\n```\n\n----------------------------------------\n\nTITLE: Defining Module Dependency for b - mod\nDESCRIPTION: The go.mod file for the b module specifies its module identity and a dependency on x v0.2.0. It is structured similarly to the a module but requests a different version of x. This setup exercises multi-version dependency resolution in the test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect.txt#2025-04-22_snippet_5\n\nLANGUAGE: mod\nCODE:\n```\nmodule b\ngo 1.13\nrequire x v0.2.0\n```\n\n----------------------------------------\n\nTITLE: Main Go Package Importing CGO Dependency (Go)\nDESCRIPTION: This Go file defines the main package 'm'. It imports the package 'm/p' using a blank identifier (`_`). This import triggers the compilation of package 'p', which is necessary because package 'p' contains CGO directives that require a C compiler.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_path.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n-- m.go --\npackage m\n\nimport _ \"m/p\"\n```\n\n----------------------------------------\n\nTITLE: Testing go list Command with JSON Output - Shell\nDESCRIPTION: This series of shell commands verifies the functionality of the 'go list' command using the '-json' flag to produce JSON output. It checks how the command handles specific field requests, tests full JSON output, and verifies behavior when fields are unavailable or files are missing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_json_fields.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Test -json produces \"full\" output by looking for multiple fields present.\ngo list -json .\nstdout '\"Name\": \"a\"'\nstdout '\"Stale\": true'\n# Same thing for -json=true\ngo list -json=true .\nstdout '\"Name\": \"a\"'\nstdout '\"Stale\": true'\n\n# Test -json=false produces non-json output.\ngo list -json=false\ncmp stdout want-non-json.txt\n\n# Test -json=<field> keeps only that field.\ngo list -json=Name\ncmp stdout want-json-name.txt\n\n# Test -json=<field> with multiple fields.\ngo list -json=ImportPath,Name,GoFiles,Imports\ncmp stdout want-json-multiple.txt\n\n# Test -json=<field> with Deps outputs the Deps field.\ngo list -json=Deps\nstdout '\"Deps\": \\['\nstdout '\"errors\",'\n\n# Test -json=<field> with *EmbedPatterns outputs embed patterns.\ncd embed\ngo list -json=EmbedPatterns,TestEmbedPatterns,XTestEmbedPatterns\nstdout '\"EmbedPatterns\": \\['\nstdout '\"TestEmbedPatterns\": \\['\nstdout '\"XTestEmbedPatterns\": \\['\n# Test -json=<field> with *EmbedFiles fails due to broken file reference.\n! go list -json=EmbedFiles\nstderr 'no matching files found'\n! go list -json=TestEmbedFiles\nstderr 'no matching files found'\n! go list -json=XTestEmbedFiles\nstderr 'no matching files found'\ncd ..\n\n[!git] skip\n\n# Test -json=<field> without Stale skips computing buildinfo\ncd repo\nexec git init\n# Control case: with -json=Stale cmd/go executes git status to compute buildinfo\ngo list -json=Stale -x\nstderr 'git status'\n# Test case: without -json=Stale cmd/go skips git status\ngo list -json=Name -x\n! stderr 'git status'\n```\n\n----------------------------------------\n\nTITLE: Root Module Configuration\nDESCRIPTION: Main go.mod file defining module replacements and initial requirements for the project.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue65363.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example\n\nreplace (\n\texample.net/a v0.1.0 => ./a\n\texample.net/b v0.1.0 => ./b1\n\texample.net/b v0.2.0 => ./b2\n\texample.net/c v0.1.0 => ./c1\n\texample.net/c v0.2.0 => ./c2\n\texample.net/d v0.1.0 => ./d\n)\n\nrequire (\n\texample.net/b v0.1.0\n)\n```\n\n----------------------------------------\n\nTITLE: Main Go file with external dependency\nDESCRIPTION: A Go file containing the main function that references a constant defined in another file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_dirs.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\nfunc main() { println(msg) }\n```\n\n----------------------------------------\n\nTITLE: Controlling Insecure Path Rejection in Zip Archives using zipinsecurepath GODEBUG Setting (Go 1.20)\nDESCRIPTION: Introduced in Go 1.20, this setting controls whether the archive/zip reader rejects insecure path elements (like '..'). The default is zipinsecurepath=1, preserving the behavior of earlier Go versions (allowing insecure paths). Setting it to 0 enables the rejection. A future Go version may change the default to 0. Set via GODEBUG environment variable (e.g., GODEBUG=zipinsecurepath=0).\nSOURCE: https://github.com/golang/go/blob/master/doc/godebug.md#2025-04-22_snippet_20\n\nLANGUAGE: plaintext\nCODE:\n```\nzipinsecurepath\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module\nDESCRIPTION: Specifies the module name for the Go package. This is typically used to manage dependencies and package versioning.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_issue45477.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/pkg_test\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Echo Command in Go\nDESCRIPTION: A Go program that implements a simple echo command, which prints its command-line arguments joined by spaces. This is used as a substitute for the echo command on Windows.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/generate_invalid.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tfmt.Println(strings.Join(os.Args[1:], \" \"))\n\tfmt.Println()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dependent Go Module\nDESCRIPTION: This snippet shows the go.mod file for the 'example.net/x' module, which is a dependency of the main module. It specifies Go 1.16 as the version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_gomod.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/x\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Testing GOTOOLCHAIN=go1.21 Behavior\nDESCRIPTION: Tests how GOTOOLCHAIN=go1.21 enforces using the specified toolchain without switching, causing errors when dependencies require newer versions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_exec_toolchain.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# GOTOOLCHAIN=go1.21 should NOT run the newer toolchain\nenv GOTOOLCHAIN=go1.21\ncp go.mod.new go.mod\n! go get rsc.io/needgo121 rsc.io/needgo122 rsc.io/needgo123 rsc.io/needall\n! stderr switching\nstderr 'rsc.io/needgo122@v0.0.1 requires go >= 1.22'\nstderr 'rsc.io/needgo123@v0.0.1 requires go >= 1.23'\nstderr 'rsc.io/needall@v0.0.1 requires go >= 1.23'\nstderr 'requires go >= 1.23'\n! stderr 'requires go >= 1.21' # that's us!\ncmp go.mod go.mod.new\n```\n\n----------------------------------------\n\nTITLE: Setting and Verifying GOMODCACHE in Go\nDESCRIPTION: This snippet demonstrates how to explicitly set GOMODCACHE, verify its value using go env, and test module downloading behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gomodcache.txt#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nenv GOMODCACHE=$WORK/modcache\ngo env GOMODCACHE\nstdout $WORK[/\\\\]modcache\ngo get rsc.io/quote@v1.0.0\nexists $WORK/modcache/cache/download/rsc.io/quote/@v/v1.0.0.info\ngrep '{\"Version\":\"v1.0.0\",\"Time\":\"2018-02-14T00:45:20Z\"}' $WORK/modcache/cache/download/rsc.io/quote/@v/v1.0.0.info\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Build Cache Hashing using gocachehash GODEBUG Setting (Go 1.10)\nDESCRIPTION: Introduced in Go 1.10 alongside build caching improvements. This setting allows debugging the inputs to the build cache hash calculation. It is primarily for debugging cache invalidation issues. Set via GODEBUG environment variable.\nSOURCE: https://github.com/golang/go/blob/master/doc/godebug.md#2025-04-22_snippet_28\n\nLANGUAGE: plaintext\nCODE:\n```\ngocachehash\n```\n\n----------------------------------------\n\nTITLE: Setting up Go module conflict test environment\nDESCRIPTION: Shell script that sets up the environment and runs a test to verify that 'go run' correctly handles a module path conflict. It sets GO111MODULE=on and executes a minimal Go program within a path that would conflict with module expectations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_run_path.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=on\n\ncd $GOPATH/src/example.com/hello\ngo run main.go\n```\n\n----------------------------------------\n\nTITLE: Defining Module Path in Go - Go\nDESCRIPTION: Defines the Go module path using the go.mod format. It establishes the root package name (example.com/missingpkg) for use with Go tools. Required for all Go modules; there are no further dependencies or constraints in the single-module declaration.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_missingpkg_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go.mod\nCODE:\n```\nmodule example.com/missingpkg\n```\n\n----------------------------------------\n\nTITLE: Testing version resolution with v2 tag without +incompatible\nDESCRIPTION: Fetches v2.0.0 without +incompatible and checks if it's resolved correctly.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngo get ...test@v2.0.0\ngo list -m all\nstdout '^github.com/rsc/legacytest v2\\.0\\.0\\+incompatible$'\n```\n\n----------------------------------------\n\nTITLE: Testing other Go commands with -pgo=auto flag\nDESCRIPTION: Tests the behavior of other Go commands (install, run, test) with the -pgo=auto flag. It verifies that PGO is applied correctly in these contexts.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo install -a -n -pgo=auto ./a/a1\nstderr 'compile.*-pgoprofile=.*a1.go'\n\ngo run -a -n -pgo=auto ./a/a1\nstderr 'compile.*-pgoprofile=.*a1.go'\n\ngo test -a -n -pgo=auto ./a/a1\nstderr 'compile.*-pgoprofile=.*a1.go.*a1_test.go'\nstderr 'compile.*-pgoprofile=.*external_test.go'\n```\n\n----------------------------------------\n\nTITLE: Empty Go Package Example\nDESCRIPTION: A minimal Go source file defining an empty package named 'example'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_negative_p.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage example\n```\n\n----------------------------------------\n\nTITLE: Adding AvailableBuffer method to Writer and ReadWriter in bufio package\nDESCRIPTION: This snippet introduces new methods AvailableBuffer() for Writer and ReadWriter types in the bufio package. These methods return a byte slice.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.18.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npkg bufio, method (*Writer) AvailableBuffer() []uint8\npkg bufio, method (ReadWriter) AvailableBuffer() []uint8\n```\n\n----------------------------------------\n\nTITLE: Defining Module Path in go.mod (Go)\nDESCRIPTION: Specifies the module path `example.com/split-incompatible` in a `go.mod` file. This file defines the root of the Go module being tested.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_split-incompatible_v2.1.0-pre+incompatible.txt#2025-04-22_snippet_0\n\nLANGUAGE: go.mod\nCODE:\n```\n-- .mod --\nmodule example.com/split-incompatible\n```\n\n----------------------------------------\n\nTITLE: Formatted Go 1.20 Module with Exclude Block\nDESCRIPTION: Properly formatted go.mod file for Go 1.20 showing standard version sorting in exclude block.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_exclude_go121.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule x.x/y/z\n\ngo 1.20\n\nexclude (\n\tx.1 v1.10.0\n\tx.1 v1.11.0\n\tx.1 v1.9.0\n)\n```\n\n----------------------------------------\n\nTITLE: Assembly Implementation for Go Compiler in Overlay\nDESCRIPTION: Assembly file specifically for the Go compiler (gc) that implements the foo function called from Go. Has a build tag to ensure it's only used with the gc compiler.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_overlay.txt#2025-04-22_snippet_9\n\nLANGUAGE: assembly\nCODE:\n```\n// +build gc\n\nTEXT ·foo(SB),0,$0\n\tRET\n```\n\n----------------------------------------\n\nTITLE: Shell Script for Testing Cache Behavior with Files and Environment\nDESCRIPTION: A shell script that tests Go's test caching behavior when various external factors change, such as file content, environment variables, command-line arguments, and file timestamps. The script verifies when the cache is used correctly or invalidated.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_cache_inputs.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=off\n\n# Test that cached test results are invalidated in response to\n# changes to the external inputs to the test.\n\n[short] skip\n[GODEBUG:gocacheverify=1] skip\n\n# We're testing cache behavior, so start with a clean GOCACHE.\nenv GOCACHE=$WORK/cache\n\n# Build a helper binary to invoke os.Chtimes.\ngo build -o mkold$GOEXE mkold.go\n\n# Make test input files appear to be a minute old.\nexec ./mkold$GOEXE 1m testcache/file.txt\nexec ./mkold$GOEXE 1m testcache/script.sh\n\n# If the test reads an environment variable, changes to that variable\n# should invalidate cached test results.\nenv TESTKEY=x\ngo test testcache -run=TestLookupEnv\ngo test testcache -run=TestLookupEnv\nstdout '\\(cached\\)'\n\n# GODEBUG is always read\nenv GODEBUG=asdf=1\ngo test testcache -run=TestLookupEnv\n! stdout '\\(cached\\)'\ngo test testcache -run=TestLookupEnv\nstdout '\\(cached\\)'\nenv GODEBUG=\n\nenv TESTKEY=y\ngo test testcache -run=TestLookupEnv\n! stdout '\\(cached\\)'\ngo test testcache -run=TestLookupEnv\nstdout '\\(cached\\)'\n\n# Changes in arguments forwarded to the test should invalidate cached test\n# results.\ngo test testcache -run=TestOSArgs -v hello\n! stdout '\\(cached\\)'\nstdout 'hello'\ngo test testcache -run=TestOSArgs -v goodbye\n! stdout '\\(cached\\)'\nstdout 'goodbye'\n\n# golang.org/issue/36134: that includes the `-timeout` argument.\ngo test testcache -run=TestOSArgs -timeout=20m -v\n! stdout '\\(cached\\)'\nstdout '-test\\.timeout[= ]20m'\ngo test testcache -run=TestOSArgs -timeout=5s -v\n! stdout '\\(cached\\)'\nstdout '-test\\.timeout[= ]5s'\n\n# If the test stats a file, changes to the file should invalidate the cache.\ngo test testcache -run=FileSize\ngo test testcache -run=FileSize\nstdout '\\(cached\\)'\n\ncp 4x.txt testcache/file.txt\ngo test testcache -run=FileSize\n! stdout '\\(cached\\)'\ngo test testcache -run=FileSize\nstdout '\\(cached\\)'\n\n# Files should be tracked even if the test changes its working directory.\ngo test testcache -run=Chdir\ngo test testcache -run=Chdir\nstdout '\\(cached\\)'\ncp 6x.txt testcache/file.txt\ngo test testcache -run=Chdir\n! stdout '\\(cached\\)'\ngo test testcache -run=Chdir\nstdout '\\(cached\\)'\n\n# The content of files should affect caching, provided that the mtime also changes.\nexec ./mkold$GOEXE 1m testcache/file.txt\ngo test testcache -run=FileContent\ngo test testcache -run=FileContent\nstdout '\\(cached\\)'\ncp 2y.txt testcache/file.txt\nexec ./mkold$GOEXE 50s testcache/file.txt\ngo test testcache -run=FileContent\n! stdout '\\(cached\\)'\ngo test testcache -run=FileContent\nstdout '\\(cached\\)'\n\n# Directory contents read via os.ReadDirNames should affect caching.\ngo test testcache -run=DirList\ngo test testcache -run=DirList\nstdout '\\(cached\\)'\nrm testcache/file.txt\ngo test testcache -run=DirList\n! stdout '\\(cached\\)'\ngo test testcache -run=DirList\nstdout '\\(cached\\)'\n\n# Files outside GOROOT and GOPATH should not affect caching.\nenv TEST_EXTERNAL_FILE=$WORK/external.txt\ngo test testcache -run=ExternalFile\ngo test testcache -run=ExternalFile\nstdout '\\(cached\\)'\n\nrm $WORK/external.txt\ngo test testcache -run=ExternalFile\nstdout '\\(cached\\)'\n\n# The -benchtime flag without -bench should not affect caching.\ngo test testcache -run=Benchtime -benchtime=1x\ngo test testcache -run=Benchtime -benchtime=1x\nstdout '\\(cached\\)'\n\ngo test testcache -run=Benchtime -bench=Benchtime -benchtime=1x\ngo test testcache -run=Benchtime -bench=Benchtime -benchtime=1x\n! stdout '\\(cached\\)'\n\n# golang.org/issue/47355: that includes the `-failfast` argument.\ngo test testcache -run=TestOSArgs -failfast\n! stdout '\\(cached\\)'\ngo test testcache -run=TestOSArgs -failfast\nstdout '\\(cached\\)'\n\n# golang.org/issue/64638: that includes the `-fullpath` argument.\ngo test testcache -run=TestOSArgs -fullpath\n! stdout '\\(cached\\)'\ngo test testcache -run=TestOSArgs -fullpath\nstdout '\\(cached\\)'\n\n# golang.org/issue/70692: that includes the `-skip` flag\ngo test testcache -run=TestOdd -skip=TestOddFile\n! stdout '\\(cached\\)'\ngo test testcache -run=TestOdd -skip=TestOddFile\nstdout '\\(cached\\)'\n\n# Ensure that coverage profiles are being cached.\ngo test testcache -run=TestCoverageCache -coverprofile=coverage.out\ngo test testcache -run=TestCoverageCache -coverprofile=coverage.out\nstdout '\\(cached\\)'\nexists coverage.out\ngrep -q 'mode: set' coverage.out\ngrep -q 'testcache/hello.go:' coverage.out\n\n# A new -coverprofile file should use the cached coverage profile contents.\ngo test testcache -run=TestCoverageCache -coverprofile=coverage2.out\nstdout '\\(cached\\)'\ncmp coverage.out coverage2.out\n\n# Explicitly setting the default covermode should still use cache.\ngo test testcache -run=TestCoverageCache -coverprofile=coverage_set.out -covermode=set\nstdout '\\(cached\\)'\ncmp coverage.out coverage_set.out\n\n# A new -covermode should not use the cached coverage profile.\ngo test testcache -run=TestCoverageCache -coverprofile=coverage_atomic.out -covermode=atomic\n! stdout '\\(cached\\)'\n! cmp coverage.out coverage_atomic.out\ngrep -q 'mode: atomic' coverage_atomic.out\ngrep -q 'testcache/hello.go:' coverage_atomic.out\n\n# A new -coverpkg should not use the cached coverage profile.\ngo test testcache -run=TestCoverageCache -coverprofile=coverage_pkg.out -coverpkg=all\n! stdout '\\(cached\\)'\n! cmp coverage.out coverage_pkg.out\n\n# Test that -v doesn't prevent caching.\ngo test testcache -v -run=TestCoverageCache -coverprofile=coverage_v.out\ngo test testcache -v -run=TestCoverageCache -coverprofile=coverage_v2.out\nstdout '\\(cached\\)'\ncmp coverage_v.out coverage_v2.out\n\n# Test that -count affects caching.\ngo test testcache -run=TestCoverageCache -coverprofile=coverage_count.out -count=2\n! stdout '\\(cached\\)'\n\n# Executables within GOROOT and GOPATH should affect caching,\n# even if the test does not stat them explicitly.\n\n[!exec:/bin/sh] skip\nchmod 0755 ./testcache/script.sh\n\nexec ./mkold$GOEXEC 1m testcache/script.sh\ngo test testcache -run=Exec\ngo test testcache -run=Exec\nstdout '\\(cached\\)'\n\nexec ./mkold$GOEXE 50s testcache/script.sh\ngo test testcache -run=Exec\n! stdout '\\(cached\\)'\ngo test testcache -run=Exec\nstdout '\\(cached\\)'\n```\n\n----------------------------------------\n\nTITLE: Module Definition with Dependencies\nDESCRIPTION: Go module configuration file specifying module name and required dependencies including indirect and direct patch dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_direct_v1.0.1.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule patch.example.com/direct\n\nrequire (\n\tpatch.example.com/indirect v1.0.0\n\tpatch.example.com/depofdirectpatch v1.0.0\n)\n```\n\n----------------------------------------\n\nTITLE: Testing FindOnly Mode in Package Import\nDESCRIPTION: A main function that tests go/build's Import function with FindOnly flag, which should locate packages even when they contain build errors. It prints the directory and any errors encountered.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gobuild_import.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"go/build\"\n\t\"os\"\n)\n\nfunc main() {\n\tp, err := build.Import(os.Args[1], os.Args[2], build.FindOnly)\n\tfmt.Printf(\"dir=%s err=%v\\n\", p.Dir, err)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Module Association for Local File with Go List (Shell)\nDESCRIPTION: This shell snippet uses `go list` within the 'a' directory to check the module associated with a local Go file (`a.go`). It asserts that the output matches the pattern '^<nil>$', confirming that even for a source file within a module directory, providing it directly as a command-line argument results in it being treated as part of the `command-line-arguments` pseudo-package with no module association.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_command_line_arguments.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# ... even if the arguments are sources from that module\ngo list -f '{{.Module}}' a.go\nstdout '^<nil>$'\n```\n\n----------------------------------------\n\nTITLE: Defining Tagged Go File with Buggy Code\nDESCRIPTION: Creates a Go file with a build tag 'buggy' that contains a formatting error to be detected by go vet.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_flags.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// +build buggy\n\npackage x\n\nimport \"fmt\"\n\nfunc init() {\n\tfmt.Sprint(\"%s\") // oops!\n}\n```\n\n----------------------------------------\n\nTITLE: Shell Commands for Go Module Version Testing\nDESCRIPTION: Series of shell commands to test Go module behavior with incompatible versions and verify that lower compatible versions are not considered when upgrading.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_prefer_incompatible.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncp go.mod go.mod.orig\ngo mod tidy\ncmp go.mod.orig go.mod\ngrep '^example.com/incompatiblewithsub v2\\.0\\.0\\+incompatible' go.sum\n! grep '^example.com/incompatiblewithsub v1.0.0' go.sum\n\ngo get example.com/incompatiblewithsub/sub\ncmp go.mod.orig go.mod\n! grep '^example.com/incompatiblewithsub v1.0.0' go.sum\n```\n\n----------------------------------------\n\nTITLE: Minimal Go Module Configuration\nDESCRIPTION: A minimal go.mod file for the test case that defines the module name and Go version requirement. This provides the basic module context for the test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_direct.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com\n\ngo 1.14\n```\n\n----------------------------------------\n\nTITLE: Running Go Vendor Command with Expected Error\nDESCRIPTION: Executes 'go mod vendor' command which attempts to copy dependencies to a vendor directory, but produces an expected error since there are no dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_nodeps.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo mod vendor\nstderr '^go: no dependencies to vendor'\n```\n\n----------------------------------------\n\nTITLE: Configuring Module 'a' Version 0.2.0 with Dependency in Go\nDESCRIPTION: This go.mod file defines module 'example.net/a' version 0.2.0 with a dependency on 'example.net/b' version 0.2.0, creating a potential cyclic dependency for testing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue60490.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/a\n\ngo 1.19\n\nrequire example.net/b v0.2.0\n```\n\n----------------------------------------\n\nTITLE: Module Checksum Configurations\nDESCRIPTION: Various go.sum configurations for testing different scenarios with module checksums and hashes\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_readonly.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ngolang.org/x/text v0.0.0-20170915032832-14c0d48ead0c/go.mod h2:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\nrsc.io/quote v1.5.2/go.mod h2:LzX7hefJvL54yjefDEDHNONDjII0t9xZLPXsUe+TKr0=\nrsc.io/sampler v1.3.0/go.mod h2:T1hPZKmBbMNahiBKFy5HrXp6adAjACjK9JXDnKaTXpA=\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module JSON Export\nDESCRIPTION: Tests the 'go mod edit -json' functionality, which outputs the module file information in a structured JSON format. It validates JSON output in various scenarios including with retractions that have rationales, with deprecation notices, and with empty module files.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# go mod edit -json\ngo mod edit -json\ncmpenv stdout $WORK/go.mod.json\n\n# go mod edit -json (retractions with rationales)\ngo mod edit -json $WORK/go.mod.retractrationale\ncmp stdout $WORK/go.mod.retractrationale.json\n\n# go mod edit -json (deprecation)\ngo mod edit -json $WORK/go.mod.deprecation\ncmp stdout $WORK/go.mod.deprecation.json\n\n# go mod edit -json (empty mod file)\ngo mod edit -json $WORK/go.mod.empty\ncmp stdout $WORK/go.mod.empty.json\n```\n\n----------------------------------------\n\nTITLE: Initializing Localized Greetings in Go\nDESCRIPTION: This code initializes a variable 'hello' with localized greetings in English, French, and Spanish using a custom text structure.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.2.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar hello = newText(`\n\nEnglish: en: Hello, world.\nFrench: fr: Bonjour le monde.\nSpanish: es: Hola Mundo.\n\n`)\n```\n\n----------------------------------------\n\nTITLE: Checking Git Log Output\nDESCRIPTION: Command to view Git commit history with decorations and compare output to expected log file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/hello.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit log --oneline --decorate=short\ncmp stdout .git-log\n```\n\n----------------------------------------\n\nTITLE: Creating go.mod with v2 Module Path\nDESCRIPTION: Creates a go.mod file with a v2 module path and tags it as v2.0.1. This establishes a version 2 of the module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nat 2018-02-19T18:14:23-05:00\nmkdir v2\necho 'module \"github.com/rsc/vgotest1/v2\" // root go.mod'\ncp stdout go.mod\ngit add go.mod\ngit commit -m 'go.mod v2'\ngit tag v2.0.1\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Basic Go module configuration defining the module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/testing_coverage.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule hello\n\ngo 1.20\n```\n\n----------------------------------------\n\nTITLE: Simple Go Hello World Program\nDESCRIPTION: A minimal Go program that prints \"Hello, 世界\" to standard output. Used to test successful compilation and execution with PIE buildmode and race detection enabled.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pie_race.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(\"Hello, 世界\")\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Version Command with Module-Built Binary\nDESCRIPTION: Builds a binary in module mode and checks its version and module information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version.txt#2025-04-22_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ngo get rsc.io/fortune\ngo build -o fortune.exe rsc.io/fortune\ngo version fortune.exe\nstdout '^fortune.exe: .+'\ngo version -m fortune.exe\nstdout -buildmode=exe\nstdout '^\\tpath\\trsc.io/fortune'\nstdout '^\\tmod\\trsc.io/fortune\\tv1.0.0'\n```\n\n----------------------------------------\n\nTITLE: Runtime metrics constants in runtime/metrics package\nDESCRIPTION: Constants defining different types of metrics values that can be collected through the runtime/metrics API. Includes KindBad (invalid value), KindUint64, KindFloat64, and KindFloat64Histogram.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nconst KindBad = 0\nconst KindBad ValueKind\nconst KindFloat64 = 2\nconst KindFloat64 ValueKind\nconst KindFloat64Histogram = 3\nconst KindFloat64Histogram ValueKind\nconst KindUint64 = 1\nconst KindUint64 ValueKind\n```\n\n----------------------------------------\n\nTITLE: Implementation of Package F without Tests\nDESCRIPTION: Package 'f' containing a Go implementation but no tests. It has a global variable F and a function Id() that performs operations on F and returns a constant value.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverpkg_partial.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage f\n\nvar F int\n\nfunc Id() int {\n\tF += 9\n\tF *= 2\n\treturn 42\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module JSON with Retraction Rationales\nDESCRIPTION: Shows the JSON representation of a module file with retraction directives that include rationales. The rationales appear as fields in the JSON structure.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit.txt#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"Module\": {\n\t\t\"Path\": \"x.x/y/z\"\n\t},\n\t\"Go\": \"1.15\",\n\t\"Require\": null,\n\t\"Exclude\": null,\n\t\"Replace\": null,\n\t\"Retract\": [\n\t\t{\n\t\t\t\"Low\": \"v1.0.0\",\n\t\t\t\"High\": \"v1.0.0\",\n\t\t\t\"Rationale\": \"a\"\n\t\t},\n\t\t{\n\t\t\t\"Low\": \"v1.0.1\",\n\t\t\t\"High\": \"v1.0.1\",\n\t\t\t\"Rationale\": \"b\"\n\t\t},\n\t\t{\n\t\t\t\"Low\": \"v1.0.2\",\n\t\t\t\"High\": \"v1.0.2\",\n\t\t\t\"Rationale\": \"c\"\n\t\t}\n\t],\n\t\"Tool\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Standard and Custom Flags in Go Test Commands\nDESCRIPTION: Shell commands demonstrating how to use the go test command with various flag combinations, showing both valid usage patterns and error cases when combining -c with custom flags.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_flag.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo test flag_test.go -v -args -v=7 # Two distinct -v flags\ngo test -v flag_test.go -args -v=7 # Two distinct -v flags\n\n# Using a custom flag mixed with regular 'go test' flags should be OK.\ngo test -count=1 -custom -args -v=7\n\n# However, it should be an error to use custom flags when -c is used,\n# since we know for sure that no test binary will run at all.\n! go test -c -custom\nstderr '^go: unknown flag -custom cannot be used with -c$'\n\n# The same should apply even if -c comes after a custom flag.\n! go test -custom -c\nstderr '^go: unknown flag -custom cannot be used with -c$'\n```\n\n----------------------------------------\n\nTITLE: Test Source Code for Package 'a' (Go)\nDESCRIPTION: The test file (`a_test.go`) for package `a`. It imports package `b/x` for side effects, establishing the initial test-only dependency path from `m` to `b` via `a`'s tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_import_allmod.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n-- a1/a_test.go --\npackage a_test\n\nimport _ \"b/x\"\n```\n\n----------------------------------------\n\nTITLE: Testing Go Test Behavior with Vet Flags\nDESCRIPTION: Demonstrates the behavior of 'go test' with various vet configurations for both user and standard packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_flags.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo test -n -run=none .\nstderr '[/\\\\]vet'$GOEXE'[\"]? .* -errorsas .* [\"]?\\$WORK[/\\\\][^ ]*/[/\\\\]vet\\.cfg'\n\ngo test -n -vet= -run=none .\nstderr '[/\\\\]vet'$GOEXE'[\"]? .* -errorsas .* [\"]?\\$WORK[/\\\\][^ ]*/[/\\\\]vet\\.cfg'\n\ngo test -n -run=none encoding/binary\nstderr '[/\\\\]vet'$GOEXE'[\"]? -unsafeptr=false -unreachable=false [\"]?\\$WORK[/\\\\][^ ]*/[/\\\\]vet\\.cfg'\n\ngo test -n -vet= -run=none encoding/binary\nstderr '[/\\\\]vet'$GOEXE'[\"]? -unsafeptr=false -unreachable=false [\"]?\\$WORK[/\\\\][^ ]*/[/\\\\]vet\\.cfg'\n\ngo test -n -vet=unreachable -run=none .\nstderr '[/\\\\]vet'$GOEXE'[\"]? -unreachable [\"]?\\$WORK[/\\\\][^ ]*/[/\\\\]vet\\.cfg'\ngo test -n -vet=unreachable -run=none encoding/binary\nstderr '[/\\\\]vet'$GOEXE'[\"]? -unreachable [\"]?\\$WORK[/\\\\][^ ]*/[/\\\\]vet\\.cfg'\n```\n\n----------------------------------------\n\nTITLE: Testing Runtime.Goexit Behavior\nDESCRIPTION: Test file containing two example tests - one that passes normally and another that calls runtime.Goexit() to demonstrate panic behavior. Used to verify issue golang.org/issue/41084.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_example_goexit.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"runtime\"\n)\n\nfunc Example_pass() {\n\tfmt.Println(\"pass\")\n\t// Output:\n\t// pass\n}\n\nfunc Example_goexit() {\n\truntime.Goexit()\n\t// Output:\n}\n```\n\n----------------------------------------\n\nTITLE: Runtime Trace API Implementation in Go\nDESCRIPTION: New tracing APIs in the runtime/trace package for task and region management including context-aware tracing functions.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.11.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc NewTask(context.Context, string) (context.Context, *Task)\nfunc StartRegion(context.Context, string) *Region\nfunc WithRegion(context.Context, string, func())\nmethod (*Region) End()\nmethod (*Task) End()\ntype Region struct\ntype Task struct\n```\n\n----------------------------------------\n\nTITLE: Testing git-to-module converter with @master branch\nDESCRIPTION: Fetches the master branch of github.com/rsc/legacytest and verifies the version format.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/rsc/legacytest@master\ngo list -m all\nstdout '^github.com/rsc/legacytest v2\\.0\\.1-0\\.\\d{14}-7303f7796364\\+incompatible$'\n```\n\n----------------------------------------\n\nTITLE: Testing Crash Handling During Fuzzing Minimization in Go\nDESCRIPTION: Shell script that tests how the fuzzing engine handles crashes during minimization. It verifies that when a crash occurs during minimization, the process still produces minimal test cases and properly reports the error.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_minimize_interesting.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n! exec ./fuzz.test$GOEXE -test.fuzzcachedir=$GOCACHE/fuzz -test.fuzz=FuzzMinimizerCrashInMinimization -test.run=^$ -test.fuzztime=10000x -test.parallel=1\n! stdout '^ok'\nstdout -count=1 'got the minimum size!'\nstdout -count=1 'bad input'\nstdout FAIL\n# Check that the input written to testdata will reproduce the error, and is the\n# smallest possible.\ngo run check_testdata/check_testdata.go FuzzMinimizerCrashInMinimization 1\n```\n\n----------------------------------------\n\nTITLE: Other Module Definition\nDESCRIPTION: Submodule definition file for the 'other' package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_error.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule issue27063/other\n```\n\n----------------------------------------\n\nTITLE: Module B v1 Configuration (b1/go.mod)\nDESCRIPTION: Configuration file for version 1 of module b, requiring module c.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downadd_indirect.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/b\n\ngo 1.15\n\nrequire example.com/c v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Testing Full Coverage of Function F in pkg3 - Go\nDESCRIPTION: This test file for package 'pkg3' imports 'testing' and defines a single test function TestF which calls the package's exported function F. It ensures full statement coverage for F and is written to trigger 100% coverage reporting.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_statements.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage pkg3\n\nimport \"testing\"\n\nfunc TestF(t *testing.T) {\n\tF()\n}\n```\n\n----------------------------------------\n\nTITLE: Test Script for Go Module Management\nDESCRIPTION: Shell script that tests go mod tidy behavior by comparing module references before and after tidying, specifically checking for duplicate entries of rsc.io/quote\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_quote.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n\ngo mod tidy\ngrep -count=1 rsc.io/quote go.mod\n\ncp go.mod2 go.mod\ngo mod tidy\ngrep -count=1 rsc.io/quote go.mod\n```\n\n----------------------------------------\n\nTITLE: Executing Go Tests with CPU Profiling\nDESCRIPTION: Demonstrates how to execute Go tests while generating a CPU profile output to a specific file. The command 'go test' is used with the '-cpuprofile' option to generate the profile. It is essential to ensure that the directory specified in the output path exists, and it's writable by the process.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cpu_profile_twice.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo test -o=$WORK/x.test -cpuprofile=$WORK/cpu_profile_twice.out x\nrm $WORK/cpu_profile_twice.out\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo test -o=$WORK/x.test -cpuprofile=$WORK/cpu_profile_twice.out x\nexists $WORK/cpu_profile_twice.out\n```\n\n----------------------------------------\n\nTITLE: Listing Dependencies with go list -deps\nDESCRIPTION: Uses 'go list -deps' to list packages and tests in the main module along with their transitive dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_all.txt#2025-04-22_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ngo list -f $PKGFMT -deps ./...\n```\n\n----------------------------------------\n\nTITLE: Windows-specific DWARF reader implementation\nDESCRIPTION: Platform-specific implementation for reading DWARF debug information from PE (Portable Executable) binaries on Windows systems. Used by the list-dwarf utility.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_trimpath_cgo.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"debug/dwarf\"\n\t\"debug/pe\"\n)\n\nfunc readDWARF(exePath string) (*dwarf.Data, error) {\n\tpeFile, err := pe.Open(exePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer peFile.Close()\n\treturn peFile.DWARF()\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Echo Command for Windows Environment\nDESCRIPTION: Sets up a temporary GOBIN directory, installs an echo command, and adds it to the PATH. This is necessary because Windows doesn't have a built-in echo command.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/generate_invalid.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GOBIN=$WORK/tmp/bin\ngo install echo.go\nenv PATH=$GOBIN${:}$PATH\n```\n\n----------------------------------------\n\nTITLE: Test Script for Cgo Coverage\nDESCRIPTION: A test script that verifies cgo coverage works with an external test. It skips certain conditions and ensures that the coverage report shows a non-zero percentage.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_cgo_xtest.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[short] skip\n[!cgo] skip\n[compiler:gccgo] skip # gccgo has no cover tool\n\n# Test cgo coverage with an external test.\n\ngo test -short -cover cgocover2\nstdout  'coverage:.*[1-9][0-9.]+%'\n! stderr '[^0-9]0\\.0%'\n```\n\n----------------------------------------\n\nTITLE: Go Main Package with External Library\nDESCRIPTION: This snippet demonstrates a Go main package that imports and uses a function from an external library package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"example.com/b/lib\"\n\nfunc main() {\n\tlib.Hello()\n}\n```\n\n----------------------------------------\n\nTITLE: Package with Nested Relative Import\nDESCRIPTION: A Go package that demonstrates relative imports within a package. It imports a subpackage using a relative path and calls functions from both the current package and the imported subpackage.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_local.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage sub\n\nimport (\n\t\"fmt\"\n\n\tsubsub \"./sub\"\n)\n\nfunc Hello() {\n\tfmt.Println(\"sub.Hello\")\n\tsubsub.Hello()\n}\n```\n\n----------------------------------------\n\nTITLE: LazyUpgrade v0.1.0 Implementation\nDESCRIPTION: Go file implementing lazyupgrade module version 0.1.0\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_lazy_upgrade_lazy.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage lazyupgrade\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Dependency Management in Go\nDESCRIPTION: This snippet shows the test steps for verifying the correct behavior of Go module dependency management. It compares the original and modified go.mod files after running 'go mod tidy' and 'go get -u=patch ./...'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue48511.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncp go.mod go.mod.orig\ngo mod tidy\ncmp go.mod go.mod.orig\n\ngo get -u=patch ./...\ncmp go.mod go.mod.want\n```\n\n----------------------------------------\n\nTITLE: Verify Module Dependencies\nDESCRIPTION: Command to verify the checksums of module dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_disabled.txt#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngo mod verify\n```\n\n----------------------------------------\n\nTITLE: Bypassing Sumdb with GONOSUMDB in Go Module Fetching\nDESCRIPTION: Demonstrates how to use GONOSUMDB to bypass sumdb checks for specific packages. Also shows the use of GOPRIVATE and GONOPROXY in conjunction with go get command.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gonoproxy.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nenv GONOSUMDB='*/quote,*/*mple*,golang.org/x'\ngo get rsc.io/quote\nrm go.sum\nenv GOPRIVATE='*/quote,*/*mple*,golang.org/x'\nenv GONOPROXY=none # that is, proxy all despite GOPRIVATE\ngo get rsc.io/quote\n```\n\n----------------------------------------\n\nTITLE: Declaring Go Module and Go Version - Go\nDESCRIPTION: Declares the 'example.com/retract/rationale' Go module and specifies Go 1.14 as the minimum supported version. This is necessary for dependency management, go command support, and version tracking. No parameters are required; the module name and version are hardcoded. The file is commonly used as the entry point for any Go module-based project.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rationale_v1.0.0-long.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/retract/rationale\\n\\ngo 1.14\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module\nDESCRIPTION: This snippet shows the contents of a go.mod file defining a module named 'example' with Go version 1.18.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_nowork.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Module Environment for Redirect Testing\nDESCRIPTION: Sets up environment variables for Go module management, including enabling modules, configuring proxy settings with redirects, and disabling the checksum database.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_too_many_redirects.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GO111MODULE=on\nenv GOPROXYBASE=$GOPROXY\nenv GOPROXY=$GOPROXYBASE/redirect/11\nenv GOSUMDB=off\n```\n\n----------------------------------------\n\nTITLE: Test File for Package nopgo - nopgo/nopgo_test.go\nDESCRIPTION: Defines a test for package 'nopgo' without importing any test-only dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto_multi.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage main\nimport \"testing\"\nfunc TestNopgo(*testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Go File with HTTP Response Error\nDESCRIPTION: This Go file contains a function with an error in handling an HTTP response, used to test the httpresponse vet analyzer.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_vet.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nimport \"net/http\"\n\nfunc F() {\n\tresp, err := http.Head(\"example.com\")\n\tdefer resp.Body.Close()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// (defer statement belongs here)\n}\n```\n\n----------------------------------------\n\nTITLE: Module Definition in go.mod File for Go\nDESCRIPTION: Declares the module path for the 'depofdirectpatch' package in the go.mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_depofdirectpatch_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nmodule patch.example.com/depofdirectpatch\n```\n\n----------------------------------------\n\nTITLE: Signing and Cipher Suite Constants and Struct Fields in crypto/tls - Go\nDESCRIPTION: These constants identify ECDSA, PKCS1, PSS signature schemes and TLS cipher suites, enabling configuration of TLS connections for supported algorithms and key exchange. SignatureScheme denotes algorithm identifier for certificate and handshake use; CurveID (such as X25519) identifies elliptic curves. Struct fields and methods in Config, CertificateRequestInfo, ClientHelloInfo, and Conn provide customization points for certificate selection, protocol versioning, key logging, and connection management. Used in conjunction with crypto/tls APIs and dependent on compatible cryptographic primitives.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.8.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nconst ECDSAWithP256AndSHA256 = 1027\nconst ECDSAWithP384AndSHA384 = 1283\nconst ECDSAWithP521AndSHA512 = 1539\nconst PKCS1WithSHA1 = 513\nconst PKCS1WithSHA256 = 1025\nconst PKCS1WithSHA384 = 1281\nconst PKCS1WithSHA512 = 1537\nconst PSSWithSHA256 = 2052\nconst PSSWithSHA384 = 2053\nconst PSSWithSHA512 = 2054\nconst TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 = 49187\nconst TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305 = 52393\nconst TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 = 49191\nconst TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305 = 52392\nconst TLS_RSA_WITH_AES_128_CBC_SHA256 = 60\nconst X25519 = 29\n```\n\nLANGUAGE: Go\nCODE:\n```\nconst ECDSAWithP256AndSHA256 SignatureScheme\nconst ECDSAWithP384AndSHA384 SignatureScheme\nconst ECDSAWithP521AndSHA512 SignatureScheme\nconst PKCS1WithSHA1 SignatureScheme\nconst PKCS1WithSHA256 SignatureScheme\nconst PKCS1WithSHA384 SignatureScheme\nconst PKCS1WithSHA512 SignatureScheme\nconst PSSWithSHA256 SignatureScheme\nconst PSSWithSHA384 SignatureScheme\nconst PSSWithSHA512 SignatureScheme\n```\n\nLANGUAGE: Go\nCODE:\n```\nconst TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 uint16\nconst TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305 uint16\nconst TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 uint16\nconst TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305 uint16\nconst TLS_RSA_WITH_AES_128_CBC_SHA256 uint16\nconst X25519 CurveID\n```\n\nLANGUAGE: Go\nCODE:\n```\nmethod (*Config) Clone() *Config\nmethod (*Conn) CloseWrite() error\n```\n\nLANGUAGE: Go\nCODE:\n```\ntype CertificateRequestInfo struct\nCertificateRequestInfo.AcceptableCAs [][]uint8\nCertificateRequestInfo.SignatureSchemes []SignatureScheme\n```\n\nLANGUAGE: Go\nCODE:\n```\ntype ClientHelloInfo struct\nClientHelloInfo.Conn net.Conn\nClientHelloInfo.SignatureSchemes []SignatureScheme\nClientHelloInfo.SupportedProtos []string\nClientHelloInfo.SupportedVersions []uint16\n```\n\nLANGUAGE: Go\nCODE:\n```\ntype Config struct\nConfig.GetClientCertificate func(*CertificateRequestInfo) (*Certificate, error)\nConfig.GetConfigForClient func(*ClientHelloInfo) (*Config, error)\nConfig.KeyLogWriter io.Writer\nConfig.VerifyPeerCertificate func([][]uint8, [][]*x509.Certificate) error\n```\n\nLANGUAGE: Go\nCODE:\n```\ntype SignatureScheme uint16\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Pattern Matching\nDESCRIPTION: Series of tests verifying how Go handles module pattern matching with wildcards (...) and partial matches. Tests package resolution within modules and module upgrade behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patterns.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=on\n[short] skip\n\ncp go.mod.orig go.mod\ngo get rsc.io/quote/...\ngrep 'require rsc.io/quote' go.mod\n\ncp go.mod.orig go.mod\n! go get rsc.io/quote/x...\nstderr 'go: module rsc.io/quote@upgrade found \\(v1.5.2\\), but does not contain packages matching rsc.io/quote/x...'\n! grep 'require rsc.io/quote' go.mod\n\n! go get rsc.io/quote/x/...\nstderr 'go: module rsc.io/quote@upgrade found \\(v1.5.2\\), but does not contain packages matching rsc.io/quote/x/...'\n! grep 'require rsc.io/quote' go.mod\n\ncp go.mod.orig go.mod\ngo mod edit -require example.com/nest@v1.0.0\ngo get example.com/nest/sub/y...\ngrep 'example.com/nest/sub v1.0.0' go.mod\ngrep 'example.com/nest v1.0.0' go.mod\n\ngo get example.com/n...t\ngrep 'example.com/nest v1.1.0' go.mod\ngrep 'example.com/nest/sub v1.0.0' go.mod\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines a module 'm' that requires Go version 1.21.2.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_goline_order.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule m\ngo 1.21.2\n```\n\n----------------------------------------\n\nTITLE: Running Go Test Coverage on a Single Package\nDESCRIPTION: Executes `go test -count=1 -cover` only on the `main` package. Asserts via `stdout` check that the output line for the `main` package shows 'coverage: 75.0% of statements'. This verifies that the coverage result for `main` is consistent, even when tested alone, compared to testing it with other packages (addressing issue 65570).\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_single_vs_multiple.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo test -count=1 -cover ./main\nstdout '^ok\\s+M/main\\s+\\S+\\s+coverage: 75.0% of statements'\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Go Package Function (Go)\nDESCRIPTION: Defines a minimal Go package named 'x'. It imports the 'runtime' package for its potential side effects (like ensuring runtime linkage) and declares an empty public function 'F'. This code serves as the subject for the test commands.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_pkgall_runtime.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage x\nimport _ \"runtime\"\nfunc F() {}\n```\n\n----------------------------------------\n\nTITLE: Deprecations in go packages\nDESCRIPTION: Lists deprecated constants, struct fields, functions, and methods in various go packages.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_23\n\nLANGUAGE: Go\nCODE:\n```\npkg go/build, const AllowBinary //deprecated\npkg go/doc, type Package struct, Bugs //deprecated\npkg go/importer, func For //deprecated\npkg go/importer, func ForCompiler //deprecated\npkg go/types, func NewInterface //deprecated\npkg go/types, method (*Interface) Embedded //deprecated\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests with Coverage\nDESCRIPTION: This snippet shows how to run Go tests with coverage options in atomic mode using the 'go test' command. It demonstrates testing on specific sub-packages and with race condition checks. The command uses options to specify test coverage mode and target specific tests. Dependencies: Go toolchain. Prerequisites: Import paths for testing functions must be correct. Outputs coverage data and test results.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_sync_atomic_import.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test -short -cover -covermode=atomic -coverpkg=coverdep/p1 coverdep\n```\n\nLANGUAGE: bash\nCODE:\n```\ngo test -short -covermode=atomic -run=TestStoreInt64 sync/atomic\n```\n\nLANGUAGE: bash\nCODE:\n```\ngo test -short -covermode=atomic -run=TestAnd8 internal/runtime/atomic\n```\n\nLANGUAGE: bash\nCODE:\n```\ngo test -short -cover -race -run=TestStoreInt64 sync/atomic\n```\n\nLANGUAGE: bash\nCODE:\n```\ngo test -short -cover -race -run=TestAnd8 internal/runtime/atomic\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module in .mod File\nDESCRIPTION: Specifies the module name and required Go version for rsc.io/needgo1223.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo1223_v0.0.1.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule rsc.io/needgo1223\ngo 1.22.3\n```\n\n----------------------------------------\n\nTITLE: Test Script for Go Experiment Flags\nDESCRIPTION: Shell script that tests whether the fieldtrack experiment flag appears in the go version output. Sets GOEXPERIMENT environment variable and verifies the flag appears in both direct version check and program output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_goexperiment.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GOEXPERIMENT=fieldtrack\ngo build -o main$GOEXE version.go\ngo version main$GOEXE\nstdout 'X:fieldtrack$'\nexec ./main$GOEXE\nstderr 'X:fieldtrack$'\n```\n\n----------------------------------------\n\nTITLE: Require Incompatible Module Definition\nDESCRIPTION: Module declaration for requireincompatible package with a dependency on an incompatible version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_implicit.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/requireincompatible\n\ngo 1.15\n\nrequire example.com/retract/incompatible v2.0.0+incompatible\n```\n\n----------------------------------------\n\nTITLE: Testing Multiple Packages and Fuzz Targets with Go Test\nDESCRIPTION: A test script that demonstrates the limitations of Go's fuzzing feature when dealing with multiple packages or multiple fuzz targets. The script shows that fuzzing cannot be used with multiple packages, and within a single package, the fuzzing pattern must match exactly one fuzz target.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_multiple.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# With fuzzing disabled, multiple targets can be tested.\ngo test ./...\n\n# With fuzzing enabled, at most one package may be tested,\n# even if only one package contains fuzz targets.\n! go test -fuzz=. ./...\nstderr '^cannot use -fuzz flag with multiple packages$'\n! go test -fuzz=. ./zero ./one\nstderr '^cannot use -fuzz flag with multiple packages$'\ngo test -fuzz=. -fuzztime=1x ./one\n\n# With fuzzing enabled, at most one target in the same package may match.\n! go test -fuzz=. ./two\nstdout '^testing: will not fuzz, -fuzz matches more than one fuzz test: \\[FuzzOne FuzzTwo\\]$'\ngo test -fuzz=FuzzTwo -fuzztime=1x ./two\n```\n\n----------------------------------------\n\nTITLE: Building Go Module with ldflags\nDESCRIPTION: This snippet demonstrates how to use the `go build` command with `-ldflags` to set the \"Text\" variable in the \"pkg\" package at compile time. It builds the \"linkx\" executable and executes it to verify output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_link_x_import_path_escape.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo build -o linkx$GOEXE -ldflags -X=my.pkg.Text=linkXworked my.pkg/main\nexec ./linkx$GOEXE\nstderr '^linkXworked$'\n```\n\n----------------------------------------\n\nTITLE: Setting up Go environment and running build test\nDESCRIPTION: Sets environment variables, changes directory, and attempts to build a Go file that should fail due to a missing package import. Verifies that the build fails without panicking and produces the expected error message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_issue12156.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GO111MODULE=off\nenv GOPATH=$WORK/gopath/src/testvendor2 # vendor/x is directly in $GOPATH, not in $GOPATH/src\ncd $WORK/gopath/src/testvendor2/src/p\n\n! go build p.go\n! stderr panic # Make sure it doesn't panic\nstderr 'cannot find package \"x\"'\n```\n\n----------------------------------------\n\nTITLE: Automating Go Executable and Test Build/Clean Scenarios - Shell\nDESCRIPTION: This shell script automates multiple test cases for building, testing, and cleaning Go executables, switching between module-aware and legacy GOPATH modes using GO111MODULE, and validating file presence post-operations. It leverages environment variables, the go build/test/clean commands, and file existence checks to test various executable and test binary naming conventions (file-named, module-named, and directory-named). Dependencies include a shell environment with access to Go SDK, and the script assumes the presence of source files and a defined module. Parameters such as GO111MODULE affect how Go resolves dependencies and output file locations, and test cases require accompanying Go source and test files. Expected outputs are the creation and deletion (by go clean) of appropriately named executables. Limitations: Script assumes Unix shell semantics and presence of corresponding Go files where necessary.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/clean_binary.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# Build something to create the executable, including several cases\n[short] skip\n\n# --------------------- clean executables -------------------------\n\n# case1: test file-named executable 'main'\nenv GO111MODULE=on\n\n! exists main$GOEXE\ngo build main.go\nexists -exec main$GOEXE\ngo clean\n! exists main$GOEXE\n\n# case2: test module-named executable 'a.b.c'\n! exists a.b.c$GOEXE\ngo build\nexists -exec a.b.c$GOEXE\ngo clean\n! exists a.b.c$GOEXE\n\n# case3: directory-named executable 'src'\nenv GO111MODULE=off\n\n! exists src$GOEXE\ngo build\nexists -exec src$GOEXE\ngo clean\n! exists src$GOEXE\n\n# --------------------- clean test files -------------------------\n\n# case1: test file-named test file\nenv GO111MODULE=on\n\n! exists main.test$GOEXE\ngo test -c main_test.go\nexists -exec main.test$GOEXE\ngo clean\n! exists main.test$GOEXE\n\n# case2: test module-named test file\n! exists a.b.c.test$GOEXE\ngo test -c\nexists -exec a.b.c.test$GOEXE\ngo clean\n! exists a.b.c.test$GOEXE\n\n# case3: test directory-based test file\nenv GO111MODULE=off\n\n! exists src.test$GOEXE\ngo test -c\nexists -exec src.test$GOEXE\ngo clean\n! exists src.test$GOEXE\n```\n\n----------------------------------------\n\nTITLE: Module B Configurations\nDESCRIPTION: Go module configurations for different versions of example.com/b with varying Go version requirements\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/b\ngo 1.22\n```\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/b\ngo 1.23rc1\n```\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/b\ngo 1.27\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition with Go 1.20\nDESCRIPTION: Defines a Go module named 'test' using Go 1.20.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto_multi.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule test\ngo 1.20\n```\n\n----------------------------------------\n\nTITLE: Creating a Minimal Go Package (`p.go`) (Go)\nDESCRIPTION: This snippet shows a minimal Go source file defining an empty package named `p`. This file serves as the placeholder source code for the `example.com/retract/self/pseudo` module, establishing the basic package structure.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_pseudo_v1.0.0-bad.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage p\n```\n\n----------------------------------------\n\nTITLE: Go 1.20 Module Definition File\nDESCRIPTION: A Go 1.20 module definition that declares module m, requires q v1.0.0 with a local replacement, and depends on rsc.io/panicnil v1.0.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/godebug_default.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ngo 1.20\nmodule m\nrequire q v1.0.0\nreplace q => ./q\nrequire rsc.io/panicnil v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Replacement Go Module Definition for internal\nDESCRIPTION: Defines a `go.mod` file for the replacement version of `golang.org/x/internal`, located within the `replace` directory structure. It declares the module path as `golang.org/x/internal`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_18\n\nLANGUAGE: go\nCODE:\n```\n-- replace/golang.org/notx/internal/go.mod --\nmodule golang.org/x/internal\n```\n\n----------------------------------------\n\nTITLE: Typechecking Expression Method Signature in Go\nDESCRIPTION: This snippet shows the typical signature for a method that typechecks a particular expression in the Go typechecker. It takes an operand, an expression, and potentially additional arguments, updating the operand with the result of typechecking.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/internal/types2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc (check *Checker) f(x *operand, e syntax.Expr, /* addition arguments, if any */)\n```\n\n----------------------------------------\n\nTITLE: Dependency package implementation\nDESCRIPTION: A simple dependency package that is imported by the main package to test PGO application to dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto.txt#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\npackage dep\n```\n\n----------------------------------------\n\nTITLE: Creating Version Sequence from v0.0.0-pre1 to v1.9.10-pre1\nDESCRIPTION: Creates a sequence of commits and tags representing progressive version development from pre-release v0.0.0-pre1 through v1.9.10-pre1. Each version has a commit before and at the version point with appropriate tags.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/querytest.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nat 2018-07-03T22:33:47-04:00\necho 'before v0.0.0-pre1'\ncp stdout status\ngit add status\ngit commit -a -m 'before v0.0.0-pre1'\n\necho 'at v0.0.0-pre1'\ncp stdout status\ngit commit -a -m 'at v0.0.0-pre1'\ngit tag 'v0.0.0-pre1'\n\necho 'before v0.0.0'\ncp stdout status\ngit commit -a -m 'before v0.0.0'\n\necho 'at v0.0.0'\ncp stdout status\ngit commit -a -m 'at v0.0.0'\ngit tag 'v0.0.0'\n\necho 'before v0.0.1'\ncp stdout status\ngit commit -a -m 'before v0.0.1'\n\necho 'at v0.0.1'\ncp stdout status\ngit commit -a -m 'at v0.0.1'\ngit tag 'v0.0.1'\n\necho 'before v0.0.2'\ncp stdout status\ngit commit -a -m 'before v0.0.2'\n\necho 'at v0.0.2'\ncp stdout status\ngit commit -a -m 'at v0.0.2'\ngit tag 'v0.0.2'\n\necho 'before v0.0.3'\ncp stdout status\ngit commit -a -m 'before v0.0.3'\n\necho 'at v0.0.3'\ncp stdout status\ngit commit -a -m 'at v0.0.3'\ngit tag 'v0.0.3'\ngit tag favorite\n\necho 'before v0.1.0'\ncp stdout status\ngit commit -a -m 'before v0.1.0'\n\necho 'at v0.1.0'\ncp stdout status\ngit commit -a -m 'at v0.1.0'\ngit tag v0.1.0\n\necho 'before v0.1.1'\ncp stdout status\ngit commit -a -m 'before v0.1.1'\n\necho 'at v0.1.1'\ncp stdout status\ngit commit -a -m 'at v0.1.1'\ngit tag 'v0.1.1'\n\necho 'before v0.1.2'\ncp stdout status\ngit commit -a -m 'before v0.1.2'\n\necho 'at v0.1.2'\ncp stdout status\ngit commit -a -m 'at v0.1.2'\ngit tag 'v0.1.2'\n\necho 'before v0.3.0'\ncp stdout status\ngit commit -a -m 'before v0.3.0'\n\necho 'at v0.3.0'\ncp stdout status\ngit commit -a -m 'at v0.3.0'\ngit tag 'v0.3.0'\n\necho 'before v1.0.0'\ncp stdout status\ngit commit -a -m 'before v1.0.0'\n\necho 'at v1.0.0'\ncp stdout status\ngit commit -a -m 'at v1.0.0'\ngit tag 'v1.0.0'\n\necho 'before v1.1.0'\ncp stdout status\ngit commit -a -m 'before v1.1.0'\n\necho 'at v1.1.0'\ncp stdout status\ngit commit -a -m 'at v1.1.0'\ngit tag 'v1.1.0'\n\necho 'before v1.9.0'\ncp stdout status\ngit commit -a -m 'before v1.9.0'\n\necho 'at v1.9.0'\ncp stdout status\ngit commit -a -m 'at v1.9.0'\ngit tag 'v1.9.0'\n\necho 'before v1.9.9'\ncp stdout status\ngit commit -a -m 'before v1.9.9'\n\necho 'at v1.9.9'\ncp stdout status\ngit commit -a -m 'at v1.9.9'\ngit tag 'v1.9.9'\n\nat 2018-07-03T22:45:01-04:00\necho 'before v1.9.10-pre1'\ncp stdout status\ngit commit -a -m 'before v1.9.10-pre1'\n\necho 'at v1.9.10-pre1'\ncp stdout status\ngit commit -a -m 'at v1.9.10-pre1'\ngit tag 'v1.9.10-pre1'\n```\n\n----------------------------------------\n\nTITLE: Initializing a Filesystem-Based Module Proxy Containing an Older Commit - Shell\nDESCRIPTION: Here, the snippet resets the module cache and downloads a specific earlier commit of the target Go module, using 'go mod download' with the -json flag for structured output. Assertions verify the expected version, origin, VCS type, and commit hash. This sets up a scenario where the module proxy contains only older metadata, providing a contrast to direct VCS access. Required dependencies are a functional Go toolchain and access to the targeted module repository.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_issue61423.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Now we construct a filesystem-based module proxy that\n# contains only an older commit.\n\ngo clean -modcache\n\ngo mod download -json vcs-test.golang.org/git/issue61415.git@08a4fa6bb9c04ffba03b26ae427b0d6335d90a2a\nstdout '\"Version\": \"v0.0.0-20231114180000-08a4fa6bb9c0\"'\nstdout '\"Origin\":'\nstdout '\"VCS\": \"git\"'\nstdout '\"Hash\": \"08a4fa6bb9c04ffba03b26ae427b0d6335d90a2a\"'\n\n```\n\n----------------------------------------\n\nTITLE: Testing Go Version with Different GOTOOLCHAIN Settings\nDESCRIPTION: This series of shell commands tests the behavior of 'go version' under various GOTOOLCHAIN settings and go.mod configurations. It verifies the correct toolchain selection based on environment variables and module settings.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_path.txt#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngo version\nstdout go1.21pre3\n\n# GOTOOLCHAIN=go1.50.0\nenv GOTOOLCHAIN=go1.50.0\n! go version\nstderr 'running go1.50.0 from PATH'\n\n# GOTOOLCHAIN=path with toolchain line\nenv GOTOOLCHAIN=local\ngo mod init m\ngo mod edit -toolchain=go1.50.0\ngrep go1.50.0 go.mod\nenv GOTOOLCHAIN=path\n! go version\nstderr 'running go1.50.0 from PATH'\n\n# GOTOOLCHAIN=path with go line\nenv GOTOOLCHAIN=local\ngo mod edit -toolchain=none -go=1.50.0\ngrep 'go 1.50.0' go.mod\n! grep toolchain go.mod\nenv GOTOOLCHAIN=path\n! go version\nstderr 'running go1.50.0 from PATH'\n\n# GOTOOLCHAIN=auto with toolchain line\nenv GOTOOLCHAIN=local\ngo mod edit -toolchain=go1.50.0 -go=1.21\ngrep 'go 1.21$' go.mod\ngrep 'toolchain go1.50.0' go.mod\nenv GOTOOLCHAIN=auto\n! go version\nstderr 'running go1.50.0 from PATH'\n\n# GOTOOLCHAIN=auto with go line\nenv GOTOOLCHAIN=local\ngo mod edit -toolchain=none -go=1.50.0\ngrep 'go 1.50.0$' go.mod\n! grep toolchain go.mod\nenv GOTOOLCHAIN=auto\n! go version\nstderr 'running go1.50.0 from PATH'\n\n# NewerToolchain should find Go 1.50.0.\nenv GOTOOLCHAIN=local\ngo mod edit -toolchain=none -go=1.21\ngrep 'go 1.21$' go.mod\n! grep toolchain go.mod\nenv GOTOOLCHAIN=path\n! go run rsc.io/fortune@v0.0.1\nstderr 'running go1.50.0 from PATH'\n```\n\n----------------------------------------\n\nTITLE: Updating X.509 Certificate Handling in Go\nDESCRIPTION: New fields and types for handling X.509 certificates in the crypto/x509 package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\nconst NoValidChains = 10\nconst NoValidChains InvalidReason\n\ntype Certificate struct {\n    InhibitAnyPolicy int\n    InhibitAnyPolicyZero bool\n    InhibitPolicyMapping int\n    InhibitPolicyMappingZero bool\n    PolicyMappings []PolicyMapping\n    RequireExplicitPolicy int\n    RequireExplicitPolicyZero bool\n}\n\ntype PolicyMapping struct {\n    IssuerDomainPolicy OID\n    SubjectDomainPolicy OID\n}\n\ntype VerifyOptions struct {\n    CertificatePolicies []OID\n}\n```\n\n----------------------------------------\n\nTITLE: Package 'a' Importing Dependency 'b' in Go\nDESCRIPTION: This Go file defines package 'a' and imports 'example.net/b', demonstrating the dependency chain being tested.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue48511.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\npackage a\n\nimport \"example.net/b\"\n```\n\n----------------------------------------\n\nTITLE: Defining Full Module Replacement in go.mod - Go\nDESCRIPTION: This go.mod file defines a Go module (m) that requires example.com/deprecated/a v1.0.0, and replaces all versions of this dependency with example.com/deprecated/b v1.0.0. It requires Go 1.17 and expects the corresponding version of the replacement to be present. This setup is used to test how module replacement affects deprecation messaging in the Go toolchain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_deprecated_replace.txt#2025-04-22_snippet_1\n\nLANGUAGE: go.mod\nCODE:\n```\nmodule m\n\ngo 1.17\n\nrequire example.com/deprecated/a v1.0.0\n\nreplace example.com/deprecated/a => example.com/deprecated/b v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Testing Fallback to Direct Downloads in Go\nDESCRIPTION: This snippet tests the fallback behavior when the proxy returns a 404 error. It sets an environment variable to simulate 404 errors from the proxy and then attempts to download modules, expecting a fallback to direct downloads.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_golang.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nenv TESTGOPROXY404=1\ngo clean -modcache\nrm go.sum\n\ngo list -mod=mod -x -m all  # Download go.mod files\ngo list -mod=mod -x rsc.io/quote  # Download module source.\n\ncmp go.sum saved.sum\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module\nDESCRIPTION: This snippet defines the Go module file (go.mod) for the test project. It specifies the module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_info_err.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nmodule m\n\ngo 1.13\n```\n\n----------------------------------------\n\nTITLE: Go Module File Template\nDESCRIPTION: Base go.mod file used as template for testing version management scenarios. Specifies a module 'm' with Go 1.21 requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_toolchain.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.21\n\n```\n\n----------------------------------------\n\nTITLE: Setting up Go environment for module testing\nDESCRIPTION: Sets up the Go environment for module testing by enabling modules, disabling the proxy, and turning off the checksum database.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\nenv GOPROXY=direct\nenv GOSUMDB=off\n```\n\n----------------------------------------\n\nTITLE: Setting up Go Build Environment\nDESCRIPTION: Sets the PATH environment variable and builds an SSH stub program.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/get_insecure.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv PATH=$WORK/tmp/bin${:}$PATH\ngo build -o $WORK/tmp/bin/ssh ssh.go\n```\n\n----------------------------------------\n\nTITLE: Importing the Required Module (Go)\nDESCRIPTION: A minimal Go source file ('use.go') belonging to the 'use' package. It imports the 'rsc.io/quote' module using a blank identifier (`_`). This ensures that the module is considered part of the project's dependencies when `go mod download` is executed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_replace_mismatch.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n-- use.go --\npackage use\n\nimport _ \"rsc.io/quote\"\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Quote Package Functions in Go\nDESCRIPTION: Implementation of the quote package which provides two functions: Hello returns a standard greeting, and Glass returns a phrase about eating glass without harm. These functions are simple string returners with descriptive documentation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.1.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Copyright 2018 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// Package quote collects pithy sayings.\npackage quote // import \"rsc.io/quote\"\n\n// Hello returns a greeting.\nfunc Hello() string {\n\treturn \"Hello, world.\"\n}\n\n// Glass returns a useful phrase for world travelers.\nfunc Glass() string {\n\t// See http://www.oocities.org/nodotus/hbglass.html.\n\treturn \"I can eat glass and it doesn't hurt me.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fuzz Test Functions in Go\nDESCRIPTION: This snippet defines several fuzz test functions in Go, each testing different aspects of the fuzzing functionality. It includes tests for failures in f.Add, testdata, and cache handling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_seed_corpus.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage x\n\nimport \"testing\"\n\nfunc FuzzWithAdd(f *testing.F) {\n    f.Add(10)\n    f.Fuzz(func(t *testing.T, i int) {\n        if i == 10 {\n            t.Error(\"bad thing here\")\n        }\n    })\n}\n\nfunc FuzzWithGoodAdd(f *testing.F) {\n    f.Add(10)\n    f.Fuzz(func(t *testing.T, i int) {\n        if i != 10 {\n            t.Error(\"bad thing here\")\n        }\n    })\n}\n\nfunc FuzzWithTestdata(f *testing.F) {\n    f.Fuzz(func(t *testing.T, i int) {\n        if i == 10 {\n            t.Error(\"bad thing here\")\n        }\n    })\n}\n\nfunc FuzzWithNoCache(f *testing.F) {\n    f.Fuzz(func(t *testing.T, i int) {\n        t.Error(\"bad thing here\")\n    })\n}\n\nfunc FuzzWithCache(f *testing.F) {\n    f.Fuzz(func(t *testing.T, i int) {\n        if i == 10 {\n            t.Error(\"bad thing here\")\n        }\n    })\n}\n\nfunc FuzzWithMinimizableCache(f *testing.F) {\n    f.Fuzz(func(t *testing.T, b []byte) {\n\t\tif len(b) < 10 {\n\t\t\treturn\n\t\t}\n\t\tfor _, n := range b {\n\t\t\tif n != 0 {\n\t\t\t\tif len(b) == 10 {\n\t\t\t\t\tt.Log(\"got the minimum size!\")\n\t\t\t\t}\n\t\t\t\tt.Fatalf(\"contains a non-zero byte of length %d\", len(b))\n\t\t\t}\n\t\t}\n    })\n}\n\nfunc FuzzRunNoneWithCache(f *testing.F) {\n    f.Fuzz(func(t *testing.T, i int) {\n        if i == 10 {\n            t.Error(\"bad thing here\")\n        }\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module Download Environment Setup\nDESCRIPTION: Sets up the environment for Go module testing by enabling Go modules\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=on\n```\n\n----------------------------------------\n\nTITLE: Go Workspace Overlay Definition\nDESCRIPTION: Go workspace configuration file defining module usage in overlay context\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_overlay.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nuse (\n    ./a\n    ./b\n)\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module declaration file (go.mod) specifying the module name and the required dependency on export-subst package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_git_export_subst.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule x\n\nrequire github.com/jasonkeene/export-subst v0.0.0-20180927204031-5845945ec626\n```\n\n----------------------------------------\n\nTITLE: Testing GOVCS Configuration Module Definition\nDESCRIPTION: Basic Go module definition file declaring module 'm'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/govcs.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Handling Go Module Download Errors\nDESCRIPTION: This snippet illustrates how Go handles errors during module downloads. It shows that 'go mod download' doesn't leave behind a directory or a .partial file if there's an error extracting the zip file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_partial.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# 'go mod download' should not leave behind a directory or a .partial file\n# if there is an error extracting the zip file.\nrm $GOPATH/pkg/mod/rsc.io/quote@v1.5.2\ncp empty $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.2.zip\n! go mod download\nstderr 'not a valid zip file'\n! exists $GOPATH/pkg/mod/rsc.io/quote@v1.5.2\n! exists $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.2.partial\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Module with Replacements\nDESCRIPTION: Defines a go.mod file with multiple module replacements, including version-specific replacements and incompatible version handling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_import.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/m\n\nreplace (\n\texample.com/a => ./a\n\texample.com/a/b => ./b\n)\n\nreplace (\n\texample.com/x => ./x\n\texample.com/x/v3 => ./v3\n)\n\nreplace (\n\texample.com/y/z/w => ./w\n\texample.com/y => ./y\n)\n\nreplace (\n\texample.com/v v1.11.0 => ./v11\n\texample.com/v v1.12.0 => ./v12\n\texample.com/v => ./v\n)\n\nreplace (\n\texample.com/i v2.0.0+incompatible => ./i2\n)\n```\n\n----------------------------------------\n\nTITLE: Excluded Go File with Build Tags\nDESCRIPTION: A Go file with build tags for Windows and MIPS architectures. It imports a version package that will be included in dependencies despite the build tags.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_tags.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n// +build windows,mips\n\npackage m\n\nimport _ \"example.com/version\"\n```\n\n----------------------------------------\n\nTITLE: Alternate GOROOT Module Definition\nDESCRIPTION: Defines a Go module named 'std' for testing alternate GOROOT behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dot.txt#2025-04-22_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nmodule std\ngo 1.13\n```\n\n----------------------------------------\n\nTITLE: Testing Go Workspace Vendoring\nDESCRIPTION: Shell commands that test Go workspace vendoring functionality by comparing vendored modules with expected output, checking version resolution, and verifying module directory structures.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune_all.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo work vendor\ncmp vendor/modules.txt modules.txt.want\ngo list -f '{{with .Module}}{{.Path}}@{{.Version}}{{end}}' all\ncmp stdout want_versions\n\ngo list -f '{{.Dir}}' example.com/q\nstdout $GOPATH[\\/]src[\\/]vendor[\\/]example.com[\\/]q\ngo list -f '{{.Dir}}' example.com/b\nstdout $GOPATH[\\/]src[\\/]vendor[\\/]example.com[\\/]b\ngo list -f '{{.Dir}}' example.com/w\nstdout $GOPATH[\\/]src[\\/]vendor[\\/]example.com[\\/]w\ngo list -f '{{.Dir}}' example.com/z\nstdout $GOPATH[\\/]src[\\/]vendor[\\/]example.com[\\/]z\n\ncmp $GOPATH/src/vendor/example.com/q/q.go q1_1_0/q.go\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition with Dependencies\nDESCRIPTION: Defines a Go module with dependencies on various test modules and replaces to point to local directories.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_deprecate_message.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule use\n\ngo 1.16\n\nrequire (\n\tshort v0.0.0\n\tmultiline v0.0.0\n\tlong v0.0.0\n\tunprintable v0.0.0\n)\n\nreplace (\n\tshort v0.0.0 => ./short\n\tmultiline v0.0.0 => ./multiline\n\tlong v0.0.0 => ./long\n\tunprintable v0.0.0 => ./unprintable\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Module 'm' with Dependencies and Replacements\nDESCRIPTION: This go.mod file defines the main module 'm'. It sets the initial Go version to 1.15, declares requirements for modules 'a' and 'x' at version v0.1.0, and uses `replace` directives to point these dependencies (and others needed transitively or for different versions) to local directories for the test setup.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_horizon.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n-- go.mod --\nmodule m\n\ngo 1.15\n\nrequire (\n\ta v0.1.0\n\tx v0.1.0\n)\n\nreplace (\n\ta v0.1.0 => ./a1\n\tb v0.1.0 => ./b1\n\tc v0.1.0 => ./c1\n\tc v0.2.0 => ./c2\n\tx v0.1.0 => ./x1\n)\n```\n\n----------------------------------------\n\nTITLE: Go Submodule Declaration\nDESCRIPTION: Module declaration for the baz submodule within foo/bar/baz directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule baz\n```\n\n----------------------------------------\n\nTITLE: Expected Module Configuration After Upgrade (Go)\nDESCRIPTION: Defines the expected state of go.mod after running the upgrade commands, with updated versions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue47979.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nmodule golang.org/issue47979\n\ngo 1.17\n\nreplace (\n\texample.net/a v0.1.0 => ./a1\n\texample.net/a v0.2.0 => ./a2\n\texample.net/indirect v0.1.0 => ./indirect1\n\texample.net/indirect v0.2.0 => ./indirect2\n\texample.net/other v0.1.0 => ./other\n\texample.net/other v0.2.0 => ./other\n)\n\nrequire (\n\texample.net/a v0.2.0\n\texample.net/other v0.2.0\n)\n\nrequire example.net/indirect v0.2.0 // indirect\n```\n\n----------------------------------------\n\nTITLE: Verifying Go Mod Tidy Fixes Whitespace\nDESCRIPTION: Tests that 'go mod tidy' fixes whitespace issues even when there are no other changes to the file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retention.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo mod tidy\ncmp go.mod go.mod.tidy\n```\n\n----------------------------------------\n\nTITLE: Main Module Definition (go.mod)\nDESCRIPTION: The main go.mod file for the test project that defines module requirements. It requires rsc.io/quote v1.5.2 directly and includes a local replacement for the old-indirect module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_downgrade_ambiguous.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule use\n\ngo 1.16\n\nrequire (\n\told-indirect v0.0.0\n\trsc.io/quote v1.5.2\n)\n\nreplace old-indirect v0.0.0 => ./old-indirect\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines a Go module with name example.com/retract/rationale using Go version 1.14\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rationale_v1.0.0-multiline1.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/retract/rationale\n\ngo 1.14\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition for v2 Package\nDESCRIPTION: Module definition for the v2 submodule, specifying the module path with explicit v2 suffix and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/v2sub.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nmodule vcs-test.golang.org/git/v2sub.git/v2\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Module B v2 Configuration (b2/go.mod)\nDESCRIPTION: Configuration file for version 2 of module b, requiring module d.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downadd_indirect.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/b\n\ngo 1.15\n\nrequire example.com/d v0.2.0\n```\n\n----------------------------------------\n\nTITLE: Upgrading Go Version with Module Addition\nDESCRIPTION: This snippet shows how adding a new module can trigger a Go version upgrade. It demonstrates the automatic version adjustment based on module requirements.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_toolchain.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ngo get go@1.22.1\ngo get m2@v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Module Definition with Quote Exclusion\nDESCRIPTION: Module definition excluding and requiring specific version of rsc.io/quote.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_require_exclude.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule x\n\ngo 1.13\n\nexclude rsc.io/quote v1.5.1\nrequire rsc.io/quote v1.5.1\n```\n\n----------------------------------------\n\nTITLE: Profile Generation Utility in Go\nDESCRIPTION: A Go program that creates a CPU profile by spinning for a short duration. Used to overwrite the profile file to test rebuild triggering when profile content changes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"os\"\n\t\"runtime/pprof\"\n\t\"time\"\n)\n\nfunc main() {\n\tf, err := os.Create(\"prof\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\terr = pprof.StartCPUProfile(f)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// Spin to ensure we get some samples. If we get no samples, the result\n\t// is equivalent to an empty profile.\n\tstart := time.Now()\n\tfor time.Since(start) < 100*time.Millisecond {}\n\tpprof.StopCPUProfile()\n\tf.Close()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Dependencies\nDESCRIPTION: This Go module file defines the module 'x' and its dependency on 'rsc.io/quote' version 1.5.1.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_file_proxy.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nmodule x\ngo 1.13\nrequire rsc.io/quote v1.5.1\n```\n\n----------------------------------------\n\nTITLE: Define Go Module for rsc.io/quote\nDESCRIPTION: Defines the Go module 'rsc.io/quote' in a go.mod file, which is required for Go's module system.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: Tag-based GOFLAGS Testing\nDESCRIPTION: Tests the usage of build tags in GOFLAGS across different Go commands.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goflags.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nenv GOFLAGS='-tags=magic'\nenv GOFLAGS='\"-tags=magic wizardry\"'\n```\n\n----------------------------------------\n\nTITLE: Defining Go Modules and Packages - Go\nDESCRIPTION: These snippets define the module structure and basic scaffolding for a Go project. The go.mod file sets the module path and Go version, while the minimal Go source files declare new packages. No external dependencies are listed, and the files are intended as placeholders for testing module/package enumeration and symlink handling. Inputs are static files; outputs are derived by tooling based on these definitions. Changes to package naming or dependencies would affect module resolution and discoverability.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_symlink_dotdotdot.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n-- tree/go.mod --\nmodule example.com/tree\n\ngo 1.20\n```\n\nLANGUAGE: go\nCODE:\n```\n-- tree/tree.go --\npackage tree\n```\n\nLANGUAGE: go\nCODE:\n```\n-- tree/branch/branch.go --\npackage branch\n```\n\nLANGUAGE: go\nCODE:\n```\n-- dir2/squirrel.go --\npackage squirrel\n```\n\n----------------------------------------\n\nTITLE: Testing Unknown Flag with Tags\nDESCRIPTION: Verifies error handling when multiple invalid flags are provided during package installation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_modcacherw_issue64282.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n! go install -unknownflag -tags -modcacherw example.com/printversion@v0.1.0\nstderr '^flag provided but not defined: -unknownflag$'\ncp $WORK/extraneous.txt $GOPATH/pkg/mod/example.com/printversion@v0.1.0/extraneous_file.go\ngo clean -modcache\n```\n\n----------------------------------------\n\nTITLE: Importing External Module in Go\nDESCRIPTION: This Go file imports the 'example.com/pseudoupgrade' module as a side effect, typically used for its initialization functions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_upgrade_pseudo.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\npackage x\n\nimport _ \"example.com/pseudoupgrade\"\n```\n\n----------------------------------------\n\nTITLE: Module B Definition v0.2.0\nDESCRIPTION: Module b v0.2.0 configuration and implementation with additional dependencies on modules c, d, and e.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_artifact.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/b\n\ngo 1.16\n\nrequire (\n\texample.com/c v0.2.0\n\texample.com/d v0.2.0\n\texample.com/e v0.1.0\n)\n```\n\nLANGUAGE: go\nCODE:\n```\npackage b\n\nimport (\n\t\"example.com/c\"\n\t\"example.com/d\"\n\t\"example.com/e\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Main Package with Imports - Go\nDESCRIPTION: This Go source file initializes the main package for the test. It imports packages a, b, and c as side effects (blank imports) to ensure their dependencies are included in the module graph and build list. The main function is empty, as the purpose is to verify import resolution and module handling rather than execute logic. There are no parameters or outputs aside from dependency side-effects.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t_ \"a\"\n\t_ \"b\"\n\t_ \"c\"\n)\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Version Constant Declaration\nDESCRIPTION: Go source file defining a version constant for the module\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_invalidpath_v1_v1.0.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage version\n\nconst V = \"v1.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Calling C Function from Vendored Go Module (Go)\nDESCRIPTION: This Go program, located within a vendored module (`v.com/main`), uses Cgo to interface with C code. It includes Cgo directives (`#cgo CFLAGS`) to specify the include path for the C compiler. The `main` function calls a C function `printfile` (defined in `../c/bar.h`) and flushes the standard output buffer.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_trimpath_macro.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\n// #cgo CFLAGS: -I../c\n// #include \"stdio.h\"\n// void printfile();\nimport \"C\"\n\nfunc main() {\n    C.printfile()\n    C.fflush(C.stdout)\n}\n```\n\n----------------------------------------\n\nTITLE: Example Package Import\nDESCRIPTION: Main package importing example.net/a module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patchcycle.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage example\n\nimport _ \"example.net/a\"\n```\n\n----------------------------------------\n\nTITLE: Basic Go Command with Main Function\nDESCRIPTION: A minimal Go executable source file with an empty main function. Used to test staleness detection for executable programs.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_rebuild_removed.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Building Go Binary with -trimpath in Module Mode\nDESCRIPTION: Builds a Go binary using the 'go build' command with -trimpath, checking for specific compiler flags in the output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_trimpath_issue48557.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd $WORK/tmp/foo\ngo build -x -o a.exe main.go\nstderr ${/}compile$GOEXE.*' -nolocalimports'\n! stderr ${/}compile$GOEXE.*' -D[ =]'\n```\n\n----------------------------------------\n\nTITLE: Declaring Go Package 'p' (Go)\nDESCRIPTION: This Go code snippet declares a package named `p`. It's a basic Go source file structure, indicating the start of code belonging to the `p` package. This file would typically contain functions, types, or variables related to the package's purpose.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_prev_v1.1.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n-- p.go --\npackage p\n```\n\n----------------------------------------\n\nTITLE: Initial Go Module Definition for 'm' (Go 1.14)\nDESCRIPTION: The initial `go.mod` file for the main module `m`, targeting Go 1.14 (eager loading). It requires module `a` and uses replace directives for local development/testing of dependencies `a`, `b`, and `c`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_import_allmod.txt#2025-04-22_snippet_3\n\nLANGUAGE: gomod\nCODE:\n```\n-- go.mod --\nmodule m\n\ngo 1.14\n\nrequire a v0.1.0\n\nreplace (\n\ta v0.1.0 => ./a1\n\tb v0.1.0 => ./b1\n\tc v0.1.0 => ./c1\n\tc v0.2.0 => ./c2\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Expected Error Output for Listing Test Package with Missing Requirement (Text)\nDESCRIPTION: Specifies the expected standard error output (`stderr`) when `go list -test m/testuse` fails. The output shows the tool finding the module for the test dependency `example.com/badchain/c` and then failing due to the path mismatch when parsing its `go.mod`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badchain.txt#2025-04-22_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n-- list-missing-test-expected --\ngo: finding module for package example.com/badchain/c\ngo: found example.com/badchain/c in example.com/badchain/c v1.1.0\ngo: m/testuse tested by\n\tm/testuse.test imports\n\texample.com/badchain/c: example.com/badchain/c@v1.1.0: parsing go.mod:\n\tmodule declares its path as: badchain.example.com/c\n\t        but was required as: example.com/badchain/c\n```\n\n----------------------------------------\n\nTITLE: Function Implementation for Package 'a' in Go\nDESCRIPTION: Defines a simple package 'a' with an init function that prints a message and a function AFunc that returns 42.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_multipkg.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\nfunc init() {\n\tprintln(\"package 'a' init: launch the missiles!\")\n}\n\nfunc AFunc() int {\n\treturn 42\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go PGO Auto Flag with Multiple Main Packages\nDESCRIPTION: This script tests how the `-pgo=auto` flag works when building multiple main packages with different PGO profiles. It verifies that packages with PGO profiles are properly preprocessed and compiled with those profiles, while packages without profiles are built without PGO.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto_multi.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Test go build -pgo=auto flag with multiple main packages.\n\ngo install -a -n -pgo=auto ./a ./b ./nopgo\n\n# a/default.pgo and b/default.pgo are both preprocessed\nstderr 'preprofile.*-i.*a(/|\\\\)default\\.pgo'\nstderr 'preprofile.*-i.*b(/|\\\\)default\\.pgo'\n\n# a and b built once each with PGO.\n# Ideally we would check that the passed profile is the expected profile (here\n# and for dependencies). Unfortunately there is no nice way to map the expected\n# paths after preprocessing.\nstderr -count=1 'compile.*-pgoprofile=.*a(/|\\\\)a\\.go'\nstderr -count=1 'compile.*-pgoprofile=.*b(/|\\\\)b\\.go'\n\n# nopgo should be built without PGO.\n! stderr 'compile.*-pgoprofile=.*nopgo(/|\\\\)nopgo\\.go'\n\n# Dependencies should also be built with and without PGO.\n# Here we want to match a compile action without -pgoprofile,\n# by matching 3 occurrences of \"compile dep.go\", among which\n# 2 of them have -pgoprofile (therefore one without).\nstderr -count=3 'compile.*dep(/|\\\\)dep.go'\nstderr -count=2 'compile.*-pgoprofile=.*dep(/|\\\\)dep\\.go'\n\nstderr -count=3 'compile.*dep2(/|\\\\)dep2.go'\nstderr -count=2 'compile.*-pgoprofile=.*dep2(/|\\\\)dep2\\.go'\n\nstderr -count=3 'compile.*dep3(/|\\\\)dep3.go'\nstderr -count=2 'compile.*-pgoprofile=.*dep3(/|\\\\)dep3\\.go'\n\n# check that pgo appears or not in build info as expected\nstderr 'path\\\\ttest/a\\\\n.*build\\\\t-pgo=.*a(/|\\\\)default\\.pgo'\nstderr 'path\\\\ttest/b\\\\n.*build\\\\t-pgo=.*b(/|\\\\)default\\.pgo'\n! stderr 'path\\\\ttest/nopgo\\\\n.*build\\\\t-pgo='\n\n# go test works the same way\ngo test -a -n -pgo=auto ./a ./b ./nopgo\nstderr -count=1 'compile.*-pgoprofile=.*a(/|\\\\)a_test\\.go'\nstderr -count=1 'compile.*-pgoprofile=.*b(/|\\\\)b_test\\.go'\nstderr -count=2 'compile.*-pgoprofile=.*dep(/|\\\\)dep\\.go'\n! stderr 'compile.*-pgoprofile=.*nopgo(/|\\\\)nopgo_test\\.go'\n\n# test-only dependencies also have profiles attached\nstderr -count=2 'compile.*-pgoprofile=.*testdep(/|\\\\)testdep\\.go'\nstderr -count=2 'compile.*-pgoprofile=.*testdep2(/|\\\\)testdep2\\.go'\n\n# go list -deps prints packages built multiple times.\ngo list -pgo=auto -deps ./a ./b ./nopgo\nstdout 'test/dep \\[test/a\\]'\nstdout 'test/dep \\[test/b\\]'\nstdout 'test/dep$'\n```\n\n----------------------------------------\n\nTITLE: Specifying Go Module Version Info (JSON)\nDESCRIPTION: This JSON snippet, typically found in a `.info` file within the Go module cache, provides metadata about the module version. It explicitly states the version string associated with this specific instance of the toolchain module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.android-amd64.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.999testmod.android-amd64\"}\n```\n\n----------------------------------------\n\nTITLE: Skipped Fuzz Test Implementation in Go\nDESCRIPTION: Shows how to implement a fuzz test that is skipped using f.Skip().\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage skipped_fuzz\n\nimport \"testing\"\n\nfunc Fuzz(f *testing.F) {\n    f.Skip()\n}\n```\n\n----------------------------------------\n\nTITLE: Go Test Package for Testing Cache Behaviors\nDESCRIPTION: A comprehensive test package that includes various test functions to verify Go's test caching behavior. It includes tests that check file content, size, environment variables, directory listing, executable files, and coverage.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_cache_inputs.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Copyright 2017 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\npackage testcache\n\nimport (\n\t\"io\"\n\t\"os\"\n\t\"testing\"\n)\n\nfunc TestChdir(t *testing.T) {\n\tos.Chdir(\"..\")\n\tdefer os.Chdir(\"testcache\")\n\tinfo, err := os.Stat(\"testcache/file.txt\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tif info.Size()%2 != 1 {\n\t\tt.Fatal(\"even file\")\n\t}\n}\n\nfunc TestOddFileContent(t *testing.T) {\n\tf, err := os.Open(\"file.txt\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tdata, err := io.ReadAll(f)\n\tf.Close()\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tif len(data)%2 != 1 {\n\t\tt.Fatal(\"even file\")\n\t}\n}\n\nfunc TestOddFileSize(t *testing.T) {\n\tinfo, err := os.Stat(\"file.txt\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tif info.Size()%2 != 1 {\n\t\tt.Fatal(\"even file\")\n\t}\n}\n\nfunc TestOddGetenv(t *testing.T) {\n\tval := os.Getenv(\"TESTKEY\")\n\tif len(val)%2 != 1 {\n\t\tt.Fatal(\"even env value\")\n\t}\n}\n\nfunc TestLookupEnv(t *testing.T) {\n\t_, ok := os.LookupEnv(\"TESTKEY\")\n\tif !ok {\n\t\tt.Fatal(\"env missing\")\n\t}\n}\n\nfunc TestDirList(t *testing.T) {\n\tf, err := os.Open(\".\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tf.Readdirnames(-1)\n\tf.Close()\n}\n\nfunc TestExec(t *testing.T) {\n\t// Note: not using os/exec to make sure there is no unexpected stat.\n\tp, err := os.StartProcess(\"./script.sh\", []string{\"script\"}, new(os.ProcAttr))\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tps, err := p.Wait()\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tif !ps.Success() {\n\t\tt.Fatalf(\"script failed: %v\", err)\n\t}\n}\n\nfunc TestExternalFile(t *testing.T) {\n\tos.Open(os.Getenv(\"TEST_EXTERNAL_FILE\"))\n\t_, err := os.Stat(os.Getenv(\"TEST_EXTERNAL_FILE\"))\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n}\n\nfunc TestOSArgs(t *testing.T) {\n\tt.Log(os.Args)\n}\n\nfunc TestBenchtime(t *testing.T) {\n}\n\nfunc TestCoverageCache(t *testing.T) {\n    result := HelloWorld(\"\")\n    if result != \"Hello, World!\" {\n        t.Errorf(\"Expected 'Hello, World!', got '%s'\", result)\n    }\n\n    result = HelloWorld(\"Go\")\n    if result != \"Hello, Go!\" {\n        t.Errorf(\"Expected 'Hello, Go!', got '%s'\", result)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Package A Implementation with Init Function\nDESCRIPTION: Main package 'a' containing an init function and AFunc that depends on package f\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverpkg_with_init.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\nimport \"M/f\"\n\nfunc init() {\n\tprintln(\"package 'a' init: launch the missiles!\")\n}\n\nfunc AFunc() int {\n\treturn f.Id()\n}\n```\n\n----------------------------------------\n\nTITLE: Main Go Program\nDESCRIPTION: This snippet shows the main.go file content, which imports and uses a function from the 'stack' package to print a file name.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_trimpath.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"fmt\"\n\n  \"example.com/stack\"\n)\n\nfunc main() {\n  fmt.Println(stack.TopFile())\n}\n```\n\n----------------------------------------\n\nTITLE: Defining main module with redundant requirements\nDESCRIPTION: Specifies the main module's go.mod file with Go version and redundant requirements for example.com/m, along with a replace directive.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_redundant_requirement.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule m\n\ngo 1.17\n\nrequire example.com/m v0.0.0\nrequire example.com/m v0.0.0\n\nreplace example.com/m v0.0.0 => ./m\n```\n\n----------------------------------------\n\nTITLE: Listing Vendored Modules (text)\nDESCRIPTION: This `vendor/modules.txt` file lists the modules that have been copied into the `vendor` directory. It indicates that `v.com` version `v1.0.0` is vendored and specifies the package `v.com/main` within it. This file is used by the Go toolchain when the `-mod=vendor` flag is active.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_trimpath_macro.txt#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n# v.com v1.0.0\n## explicit; go 1.20\nv.com/main\n```\n\n----------------------------------------\n\nTITLE: Rejecting Invalid CFLAGS in Go\nDESCRIPTION: This collection of snippets illustrate the Go compiler's response to various invalid Cgo CFLAGS options such as '-fplugin=foo.so', '@foo', and '-D' without a required argument, enforcing proper flag usage.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_bad_directives.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage x\n// #cgo CFLAGS: -fplugin=foo.so\nimport \"C\"\n```\n\nLANGUAGE: Go\nCODE:\n```\npackage x\n// #cgo CFLAGS: -Ibar -fplugin=foo.so\nimport \"C\"\n```\n\nLANGUAGE: Go\nCODE:\n```\npackage x\n// #cgo CFLAGS: @foo\nimport \"C\"\n```\n\nLANGUAGE: Go\nCODE:\n```\npackage x\n// #cgo CFLAGS: -D\nimport \"C\"\n```\n\nLANGUAGE: Go\nCODE:\n```\npackage x\n// #cgo CFLAGS: -D @foo\nimport \"C\"\n```\n\nLANGUAGE: Go\nCODE:\n```\npackage x\n// #cgo CFLAGS: -D@foo\nimport \"C\"\n```\n\n----------------------------------------\n\nTITLE: Module Declaration for new/v2\nDESCRIPTION: Declares a Go module named 'new/v2'\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_legacy_mod.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule \"new/v2\"\n```\n\n----------------------------------------\n\nTITLE: Downgrading Go Version without Toolchain\nDESCRIPTION: This snippet demonstrates downgrading the Go version without adding a toolchain. It shows how to verify the changes in the go.mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_toolchain.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ngo get toolchain@1.22.1\n```\n\n----------------------------------------\n\nTITLE: Declaring a Go Package - Go\nDESCRIPTION: Defines the package named 'x' at the beginning of a Go source file, establishing it as part of the 'x' package. This is a minimal placeholder used as a starting point for further Go code in the package. No dependencies, inputs, or outputs are present at this stage, and it serves as the package declaration for any Go code located in the same directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_nest_v1.1.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage x\n```\n\n----------------------------------------\n\nTITLE: Deprecations in image packages\nDESCRIPTION: Lists deprecated variables and types in image packages.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_24\n\nLANGUAGE: Go\nCODE:\n```\npkg image, var ZP //deprecated\npkg image, var ZR //deprecated\npkg image/jpeg, type Reader //deprecated\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Testing Go Module Build Info Retrieval via Shell\nDESCRIPTION: This shell script configures the Go module environment (`GO111MODULE=on`), navigates directories, modifies `go.mod` for the 'x' module to add a requirement (`rsc.io/quote@v1.5.2`) and a replacement (`rsc.io/quote@v1.5.2=rsc.io/quote@v1.0.0`), tidies dependencies, builds the `x` binary, executes it, and verifies that the standard error output contains the expected module, dependency, and replacement information. It depends on the Go toolchain being available.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_modinfo.txt#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Test to ensure runtime/debug.ReadBuildInfo parses\n# the modinfo embedded in a binary by the go tool\n# when module is enabled.\nenv GO111MODULE=on\n\ncd x\ngo mod edit -require=rsc.io/quote@v1.5.2\ngo mod edit -replace=rsc.io/quote@v1.5.2=rsc.io/quote@v1.0.0\ngo mod tidy # populate go.sum\n\n# Build a binary and ensure that it can output its own debug info.\n# The debug info should be accessible before main starts (golang.org/issue/29628).\ngo build\nexec ./x$GOEXE\nstderr 'mod\\s+x\\s+\\(devel\\)'\nstderr 'dep\\s+rsc.io/quote\\s+v1.5.2\\s+'\nstderr '=>\\s+rsc.io/quote\\s+v1.0.0\\s+h1:'\nstderr 'Hello, world.'\n```\n\n----------------------------------------\n\nTITLE: Go Work Configuration\nDESCRIPTION: Work configuration file specifying Go version 1.18 and module usage with replacement directives\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_sum.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngo 1.18\nuse (\n    ./a\n    ./b\n)\nreplace example.com/c => ./c\n```\n\n----------------------------------------\n\nTITLE: Verifying Redundant -reuse Flag with Proxy Origin Data - Shell\nDESCRIPTION: This snippet checks that supplying the '-reuse' flag to 'go list' in conjunction with a proxy result for a specific version yields the origin data from the cache, but (correctly) omits the 'Reuse' field. It further asserts that fields not supported by the proxy's limited data are not shown. This ensures that metadata economy from the proxy works as designed and avoids unnecessary reuse indicators. Only a valid proxy cache is required.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_issue61423.txt#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n# The -reuse flag has no effect with a proxy, since the proxy can serve\n# metadata about a given module version cheaply anyway.\n\ngo list -reuse=proxy-version.json -m -json vcs-test.golang.org/git/issue61415.git@v0.0.0-20231114180000-08a4fa6bb9c0\nstdout '\"Version\": \"v0.0.0-20231114180000-08a4fa6bb9c0\"'\nstdout '\"Origin\":'\nstdout '\"VCS\": \"git\"'\nstdout '\"Hash\": \"08a4fa6bb9c04ffba03b26ae427b0d6335d90a2a\"'\n! stdout '\"Ref\":'\n! stdout '\"TagSum\":'\n! stdout '\"Reuse\":'\n\n```\n\n----------------------------------------\n\nTITLE: Package B Implementation File with Internal Dependency\nDESCRIPTION: An implementation file for package 'b' that imports package 'a'. Used to test dependency propagation between packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_test.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage b\n\nimport _ \"m/a\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Go Package with Import of Non-Existent Package\nDESCRIPTION: This Go snippet defines a package that attempts to import a non-existent package. It is used to generate dependency errors for testing purposes. This snippet requires a Go development environment and access to the `x.go` file for execution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cmd_import_error.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n-- x.go --\npackage x\n\nimport _ \"cmd/unknown\"\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module and Replacements - mod\nDESCRIPTION: This go.mod snippet defines the main module, required dependencies (a, b, c), and applies multiple replace directives. The replace directives map module versions and local paths to ensure the test is self-contained. Replacements are used for direct and transitive dependencies, including versioned modules and local modules. This setup enables precise control over dependency versions and sources during testing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect.txt#2025-04-22_snippet_1\n\nLANGUAGE: mod\nCODE:\n```\nmodule main\n\ngo 1.13\n\nrequire (\n\ta v0.0.0\n\tb v0.0.0\n\tc v0.0.0\n)\n\n// Apply replacements so that the test can be self-contained.\n// (It's easier to see all of the modules here than to go\n// rooting around in testdata/mod.)\nreplace (\n\ta => ./a\n\tb => ./b\n\tc => ./c\n\tx v0.1.0 => ./x1\n\tx v0.2.0 => ./x2\n\ti => ./i\n)\n```\n\n----------------------------------------\n\nTITLE: Main Package Import\nDESCRIPTION: A Go source file that imports a package from the replaced module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_replace_absolute_windows.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\nimport _ \"b.com/b\"\n```\n\n----------------------------------------\n\nTITLE: Go Test with Panic Without Cleanup\nDESCRIPTION: A simple Go test file that contains a test function which panics without any cleanup function. This tests how the Go testing package handles a simple panic scenario.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_cleanup_failnow.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage panic_nocleanup_test\nimport \"testing\"\nfunc TestX(t *testing.T) {\n\tt.Run(\"x\", func(t *testing.T) {\n\t\tpanic(\"die\")\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Hello World Go program\nDESCRIPTION: A basic Go program that writes \"Hello, world!\" to standard output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/issue47650.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"os\"\n\nfunc main() {\n\tos.Stdout.WriteString(\"Hello, world!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Go File Importing rsc.io/quote\nDESCRIPTION: This Go file imports the rsc.io/quote package as a blank import, used to test dependency upgrade and module tidying.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_indirect.txt#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\npackage x\nimport _ \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Path (.mod)\nDESCRIPTION: This snippet, from a `.mod` file, declares the module path for the Go toolchain module. This file format is often found within the Go module cache.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.android-amd64.txt#2025-04-22_snippet_0\n\nLANGUAGE: gomod\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Specifying Toolchain Version in .info (JSON)\nDESCRIPTION: This JSON snippet, extracted from a conceptual `.info` file, explicitly defines the specific version string (`v0.0.1-go1.22.9.linux-amd64`) of the Go toolchain. This file helps Go tools identify the exact toolchain distribution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.22.9.linux-amd64.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.22.9.linux-amd64\"}\n```\n\n----------------------------------------\n\nTITLE: Go Module with Deprecation Notice\nDESCRIPTION: Shows a go.mod file with a deprecation notice in the form of a comment before the module directive. This indicates that the module is deprecated and provides additional information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit.txt#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n// Deprecated: and the new one is not ready yet\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Setting GOEXPERIMENT=fieldtrack via Environment Command Syntax\nDESCRIPTION: This snippet shows how to set the GOEXPERIMENT environment variable to 'fieldtrack' using the specific testing syntax. This configuration enables the 'fieldtrack' experimental feature (chosen arbitrarily per the comment) for the 'env' execution context, primarily for testing the acceptance of this flag.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/check_goexperiment.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n[GOEXPERIMENT:fieldtrack] env\n```\n\n----------------------------------------\n\nTITLE: Verifying Panicking Test Output in Go\nDESCRIPTION: This snippet defines a test that panics. It's used to verify how 'go test -json' reports tests that panic during execution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_panic_exit.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage panic_test\n\nimport \"testing\"\n\nfunc TestPanic(t *testing.T) {\n\tpanic(\"oh no\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fuzzing Tests with Cleanup in Go\nDESCRIPTION: Defines several fuzzing test functions that demonstrate cleanup behavior in different scenarios, including skips, fatal errors, panics, and unexpected exits. Each function sets up a cleanup action and then triggers a specific condition.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_cleanup.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage cleanup\n\nimport (\n\t\"runtime\"\n\t\"testing\"\n)\n\nfunc FuzzTargetSkip(f *testing.F) {\n\tf.Cleanup(func() { f.Log(\"cleanup\") })\n\tf.Skip()\n}\n\nfunc FuzzTargetFatal(f *testing.F) {\n\tf.Cleanup(func() { f.Log(\"cleanup\") })\n\tf.Fatal()\n}\n\nfunc FuzzTargetGoexit(f *testing.F) {\n\tf.Cleanup(func() { f.Log(\"cleanup\") })\n\truntime.Goexit()\n}\n\nfunc FuzzTargetPanic(f *testing.F) {\n\tf.Cleanup(func() { f.Log(\"cleanup\") })\n\tpanic(\"oh no\")\n}\n\nfunc FuzzFunction(f *testing.F) {\n\tf.Add([]byte{0})\n\tf.Cleanup(func() { f.Log(\"outer\") })\n\tf.Fuzz(func(t *testing.T, b []byte) {\n\t\tt.Cleanup(func() { t.Logf(\"inner\") })\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Import Path with GO111MODULE Off\nDESCRIPTION: This snippet tests the Go compiler's behavior when attempting to build a package with an invalid import path while GO111MODULE is set to off. It expects the build to fail with a specific error message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_import_wrong.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GO111MODULE=off\n! go build vend/x/invalid\nstderr 'must be imported as foo'\n```\n\n----------------------------------------\n\nTITLE: Module B Implementation\nDESCRIPTION: Main implementation file for module b that imports and uses package q\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_irrelevant_dependency.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage b\n\nimport (\n\t\"example.com/q\"\n)\n\nfunc Foo() {\n\tq.Q()\n}\n```\n\n----------------------------------------\n\nTITLE: Main Module Definition with Self-Reference\nDESCRIPTION: Defines the main module with a self-reference to an older version and replacement directives for dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_lazy_self.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule golang.org/issue/46078\n\ngo 1.17\n\nreplace (\n\texample.net/x v0.1.0 => ./x\n\texample.net/x v0.2.0 => ./x\n\tgolang.org/issue/46078 v0.1.0 => ./old\n)\n\nrequire golang.org/issue/46078 v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Case Sensitivity with Environment Setup and Module Commands\nDESCRIPTION: A test script that sets up the Go environment with modules enabled and runs various commands to test how Go handles case sensitivity in import paths. It verifies that 'rsc.io/QUOTE' is treated as equivalent to 'rsc.io/quote' but maintains case in paths.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_case.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n\ngo get\ngo list -m all\nstdout '^rsc.io/quote v1.5.2'\nstdout '^rsc.io/QUOTE v1.5.2'\n\ngo list -f 'DIR {{.Dir}} DEPS {{.Deps}}' rsc.io/QUOTE/QUOTE\nstdout 'DEPS.*rsc.io/quote'\nstdout 'DIR.*!q!u!o!t!e'\n\ngo get rsc.io/QUOTE@v1.5.3-PRE\ngo list -m all\nstdout '^rsc.io/QUOTE v1.5.3-PRE'\n\ngo list -f '{{.Dir}}' rsc.io/QUOTE/QUOTE\nstdout '!q!u!o!t!e@v1.5.3-!p!r!e'\n```\n\n----------------------------------------\n\nTITLE: Original Go Sum File\nDESCRIPTION: Contains the initial checksums for the module dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_update_unrelated_sum.txt#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nrsc.io/quote v1.0.0 h1:kQ3IZQzPTiDJxSZI98YaWgxFEhlNdYASHvh+MplbViw=\nrsc.io/quote v1.0.0/go.mod h1:v83Ri/njykPcgJltBc/gEkJTmjTsNgtO1Y7vyIK1CQA=\n```\n\n----------------------------------------\n\nTITLE: Declaring a Module Path and Version - go.mod - Go\nDESCRIPTION: This go.mod file redundantly declares the module path and version, identical to the previous example. It is likely provided for clarity or as a duplicate from different folder references. All comments and functional concerns remain the same: it defines 'example.com/retract/rename' and sets Go 1.16 as the minimum version. No dependencies or replace directives are present. Expected input and output are the same as traditional go.mod files, providing foundational module identity.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rename_v1.0.0-bad.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/retract/rename\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Testing 'go test -c' with Null Output (Shell)\nDESCRIPTION: This script segment tests the behavior of `go test -c -o $devnull`. It changes into the `x` directory, compares the null device (`$devnull`) with an empty file to ensure its initial state, runs `go test -c` to compile the test but directs the output binary to the null device, verifies that the test executable (`x.test$GOEXE`) is *not* created, and finally re-compares the null device to ensure it wasn't modified. This addresses issues #28035 and #28549. It depends on the `cmp` command and shell variables `$devnull`, `$WORK`, and `$GOEXE`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/devnull.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Issue 28035: go test -c -o NUL should work.\n# Issue 28549: go test -c -o /dev/null should not overwrite /dev/null when run as root.\ncd x\ncmp $devnull $WORK/empty.txt\ngo test -o=$devnull -c\n! exists x.test$GOEXE\ncmp $devnull $WORK/empty.txt\n```\n\n----------------------------------------\n\nTITLE: Socket Type and Option Constants for Darwin ARM64\nDESCRIPTION: Defines constants for socket types, maximums, and socket-level options in Darwin. These include socket address length limits, socket types, and various socket option flags that control socket behavior.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_183\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (darwin-arm64-cgo), const SOCK_MAXADDRLEN = 255\npkg syscall (darwin-arm64-cgo), const SOCK_MAXADDRLEN ideal-int\npkg syscall (darwin-arm64-cgo), const SOCK_RDM = 4\npkg syscall (darwin-arm64-cgo), const SOCK_RDM ideal-int\npkg syscall (darwin-arm64-cgo), const SOL_SOCKET = 65535\npkg syscall (darwin-arm64-cgo), const SOMAXCONN = 128\npkg syscall (darwin-arm64-cgo), const SO_ACCEPTCONN = 2\npkg syscall (darwin-arm64-cgo), const SO_ACCEPTCONN ideal-int\npkg syscall (darwin-arm64-cgo), const SO_BROADCAST = 32\npkg syscall (darwin-arm64-cgo), const SO_DEBUG = 1\npkg syscall (darwin-arm64-cgo), const SO_DEBUG ideal-int\npkg syscall (darwin-arm64-cgo), const SO_DONTROUTE = 16\npkg syscall (darwin-arm64-cgo), const SO_DONTTRUNC = 8192\npkg syscall (darwin-arm64-cgo), const SO_DONTTRUNC ideal-int\npkg syscall (darwin-arm64-cgo), const SO_ERROR = 4103\npkg syscall (darwin-arm64-cgo), const SO_ERROR ideal-int\npkg syscall (darwin-arm64-cgo), const SO_KEEPALIVE = 8\npkg syscall (darwin-arm64-cgo), const SO_LABEL = 4112\npkg syscall (darwin-arm64-cgo), const SO_LABEL ideal-int\npkg syscall (darwin-arm64-cgo), const SO_LINGER = 128\npkg syscall (darwin-arm64-cgo), const SO_LINGER_SEC = 4224\npkg syscall (darwin-arm64-cgo), const SO_LINGER_SEC ideal-int\npkg syscall (darwin-arm64-cgo), const SO_NKE = 4129\npkg syscall (darwin-arm64-cgo), const SO_NKE ideal-int\npkg syscall (darwin-arm64-cgo), const SO_NOADDRERR = 4131\npkg syscall (darwin-arm64-cgo), const SO_NOADDRERR ideal-int\npkg syscall (darwin-arm64-cgo), const SO_NOSIGPIPE = 4130\npkg syscall (darwin-arm64-cgo), const SO_NOSIGPIPE ideal-int\npkg syscall (darwin-arm64-cgo), const SO_NOTIFYCONFLICT = 4134\npkg syscall (darwin-arm64-cgo), const SO_NOTIFYCONFLICT ideal-int\npkg syscall (darwin-arm64-cgo), const SO_NP_EXTENSIONS = 4227\npkg syscall (darwin-arm64-cgo), const SO_NP_EXTENSIONS ideal-int\npkg syscall (darwin-arm64-cgo), const SO_NREAD = 4128\npkg syscall (darwin-arm64-cgo), const SO_NREAD ideal-int\npkg syscall (darwin-arm64-cgo), const SO_NUMRCVPKT = 4370\npkg syscall (darwin-arm64-cgo), const SO_NUMRCVPKT ideal-int\npkg syscall (darwin-arm64-cgo), const SO_NWRITE = 4132\npkg syscall (darwin-arm64-cgo), const SO_NWRITE ideal-int\npkg syscall (darwin-arm64-cgo), const SO_OOBINLINE = 256\npkg syscall (darwin-arm64-cgo), const SO_OOBINLINE ideal-int\npkg syscall (darwin-arm64-cgo), const SO_PEERLABEL = 4113\npkg syscall (darwin-arm64-cgo), const SO_PEERLABEL ideal-int\npkg syscall (darwin-arm64-cgo), const SO_RANDOMPORT = 4226\npkg syscall (darwin-arm64-cgo), const SO_RANDOMPORT ideal-int\npkg syscall (darwin-arm64-cgo), const SO_RCVBUF = 4098\npkg syscall (darwin-arm64-cgo), const SO_RCVLOWAT = 4100\npkg syscall (darwin-arm64-cgo), const SO_RCVLOWAT ideal-int\npkg syscall (darwin-arm64-cgo), const SO_RCVTIMEO = 4102\npkg syscall (darwin-arm64-cgo), const SO_RCVTIMEO ideal-int\npkg syscall (darwin-arm64-cgo), const SO_REUSEADDR = 4\npkg syscall (darwin-arm64-cgo), const SO_REUSEPORT = 512\npkg syscall (darwin-arm64-cgo), const SO_REUSEPORT ideal-int\npkg syscall (darwin-arm64-cgo), const SO_REUSESHAREUID = 4133\npkg syscall (darwin-arm64-cgo), const SO_REUSESHAREUID ideal-int\npkg syscall (darwin-arm64-cgo), const SO_SNDBUF = 4097\npkg syscall (darwin-arm64-cgo), const SO_SNDLOWAT = 4099\npkg syscall (darwin-arm64-cgo), const SO_SNDLOWAT ideal-int\npkg syscall (darwin-arm64-cgo), const SO_SNDTIMEO = 4101\npkg syscall (darwin-arm64-cgo), const SO_SNDTIMEO ideal-int\npkg syscall (darwin-arm64-cgo), const SO_TIMESTAMP = 1024\npkg syscall (darwin-arm64-cgo), const SO_TIMESTAMP ideal-int\npkg syscall (darwin-arm64-cgo), const SO_TIMESTAMP_MONOTONIC = 2048\npkg syscall (darwin-arm64-cgo), const SO_TIMESTAMP_MONOTONIC ideal-int\npkg syscall (darwin-arm64-cgo), const SO_TYPE = 4104\npkg syscall (darwin-arm64-cgo), const SO_TYPE ideal-int\npkg syscall (darwin-arm64-cgo), const SO_UPCALLCLOSEWAIT = 4135\npkg syscall (darwin-arm64-cgo), const SO_UPCALLCLOSEWAIT ideal-int\npkg syscall (darwin-arm64-cgo), const SO_USELOOPBACK = 64\npkg syscall (darwin-arm64-cgo), const SO_USELOOPBACK ideal-int\npkg syscall (darwin-arm64-cgo), const SO_WANTMORE = 16384\npkg syscall (darwin-arm64-cgo), const SO_WANTMORE ideal-int\npkg syscall (darwin-arm64-cgo), const SO_WANTOOBFLAG = 32768\npkg syscall (darwin-arm64-cgo), const SO_WANTOOBFLAG ideal-int\n```\n\n----------------------------------------\n\nTITLE: Importing Future Package in Go Code\nDESCRIPTION: This Go code snippet demonstrates an attempt to import a package from the 'rsc.io/future' module, which is expected to fail due to version constraints.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_future.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage p\n\nimport \"rsc.io/future/foo\"\n```\n\n----------------------------------------\n\nTITLE: Adding new types and methods to go/types package\nDESCRIPTION: This snippet introduces several new types and methods to the go/types package, including TypeParam, Union, and Instance types, along with their associated methods.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.18.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\npkg go/types, type TypeParam struct\npkg go/types, type Union struct\npkg go/types, type Instance struct\npkg go/types, type Instance struct, Type Type\npkg go/types, type Instance struct, TypeArgs *TypeList\npkg go/types, method (*TypeParam) Constraint() Type\npkg go/types, method (*TypeParam) Index() int\npkg go/types, method (*TypeParam) Obj() *TypeName\npkg go/types, method (*TypeParam) SetConstraint(Type)\npkg go/types, method (*TypeParam) String() string\npkg go/types, method (*TypeParam) Underlying() Type\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Downloads and Caching\nDESCRIPTION: This snippet sets up the environment and tests Go module downloads in readonly mode. It also checks the module cache for specific versions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_file_proxy.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GO111MODULE=on\nenv GOPATH=$WORK/gopath1\ncd $WORK/x\ngo mod edit -fmt\ngo list -mod=readonly\nenv GOPROXY=file:///nonexist\ngo list\ngrep v1.5.1 $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/list\n```\n\n----------------------------------------\n\nTITLE: Testing Go Environment Cache Settings\nDESCRIPTION: Shell commands to examine Go environment configuration and verify that compiler results are properly cached. Tests the output of go env commands and checks for specific output patterns.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_cache.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo env\ngo env -x\n! stdout '\\|\\| true'\n```\n\n----------------------------------------\n\nTITLE: Testing Module Compatibility with Go 1.16\nDESCRIPTION: Sets the Go version to 1.16 in go.mod and attempts to list dependencies, expecting a checksum error.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_incompatible.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo mod edit -go=1.16\n! go list -f $MODFMT -deps ./...\nstderr -count=1 '^go: example\\.net/lazy@v0\\.1\\.0 requires\\n\\texample\\.net/requireincompatible@v0\\.1\\.0 requires\\n\\texample\\.com/retract/incompatible@v2\\.0\\.0\\+incompatible: missing go.sum entry for go.mod file; to add it:\\n\\tgo mod download example.com/retract/incompatible$'\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Version Requirement\nDESCRIPTION: This snippet shows the content of a go.mod file defining a module 'm' with Go version 1.16.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nmodule m\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Internal Package Access\nDESCRIPTION: Verifies that importing net/http/internal package is not allowed\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_internal.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nimport _ \"net/http/internal\"\n```\n\n----------------------------------------\n\nTITLE: Benchmark Comparison Commands\nDESCRIPTION: Commands for running and comparing compiler benchmarks\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ go test -bench=SomeBenchmarks -count=20 > new.txt\n$ toolstash restore\n$ go test -bench=SomeBenchmarks -count=20 > old.txt\n$ benchstat old.txt new.txt\n```\n\n----------------------------------------\n\nTITLE: Go Module with Quote Import\nDESCRIPTION: Main Go file that imports the rsc.io/quote/v3 module and calls its GoV3() function to print a quote.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"rsc.io/quote/v3\"\n)\n\nfunc main() {\n\tfmt.Println(quote.GoV3())\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Flag Initialization in Go\nDESCRIPTION: Holds test functions for verifying the presence of the 'foo' and 'bar' flags using the 'testing' package. The tests check if the flag variables are correctly initialized, failing the test if any flag is nil.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_var_init_order.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\\\"testing\\\"\n)\n\nfunc TestFoo(t *testing.T) {\n\tif foo == nil {\n\t\tt.Fatal()\n\t}\n}\n\nfunc TestBar(t *testing.T) {\n\tif bar == nil {\n\t\tt.Fatal()\n\t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Temporary Directory Environment Variables\nDESCRIPTION: Sets the TMP and TEMP environment variables to point to the newly created guest directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_acl_windows.txt#2025-04-22_snippet_1\n\nLANGUAGE: Batch\nCODE:\n```\nenv TMP=$WORK\\guest\nenv TEMP=$WORK\\guest\n```\n\n----------------------------------------\n\nTITLE: Main Module Definition\nDESCRIPTION: Go module definition file for the main module specifying dependencies and their versions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_goproxy_off.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule example\n\ngo 1.19\n\nrequire rsc.io/sampler v1.3.0\n\nrequire (\n\tgolang.org/x/text v0.0.0-20170915032832-14c0d48ead0c // indirect\n\trsc.io/testonly v1.0.0 // indirect\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Go Functions for Testing (Go)\nDESCRIPTION: This Go source file defines a `main` package containing two simple integer functions, `Mumble` and `Grumble`, intended to be tested. `Mumble` returns 42 for non-negative input and the absolute value for negative input. `Grumble` returns the negation of its input. An empty `main` function is included to make the package runnable, though it's primarily used for testing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_test_localpkg_filepath.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n-- prog.go --\npackage main\n\nfunc Mumble(x int) int {\n\tif x < 0 {\n\t\treturn -x\n\t}\n\treturn 42\n}\n\nfunc Grumble(y int) int {\n\treturn -y\n}\n\nfunc main() {\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listing All Packages with go list all\nDESCRIPTION: Uses 'go list all' to list the fixpoint of iterating 'go list -deps -test' starting with packages in the main module, then reducing to only non-test variants.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_all.txt#2025-04-22_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\ngo list -f $PKGFMT all\n```\n\n----------------------------------------\n\nTITLE: Storing Values in Memory using Go SSA\nDESCRIPTION: Illustrates how memory operations are represented in Go SSA. The example shows a Store operation that writes an integer value to memory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/internal/ssa/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nv17 (361) = Store <mem> {int} v16 v14 v8\n```\n\n----------------------------------------\n\nTITLE: Adding and Committing Go Module File\nDESCRIPTION: Adds go.mod file to Git and creates the initial commit with a timestamp, then renames the default branch to master.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/insecurerepo.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nat 2019-04-03T13:30:35-04:00\ngit add go.mod\ngit commit -m 'all: initialize module'\ngit branch -m master\n```\n\n----------------------------------------\n\nTITLE: Go.mod Before Tidy with Go 1.17\nDESCRIPTION: The go.mod file for the main module before running 'go mod tidy', updated to use Go 1.17 but otherwise identical to the original configuration.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_all.txt#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/main\n\n// Note: this go.mod file initially specifies go 1.15,\n// but includes some redundant roots so that it\n// also already obeys the 1.17 lazy loading invariants.\ngo 1.17\n\nrequire (\n\texample.com/a v0.1.0\n\texample.com/b v0.1.0 // indirect\n\texample.com/q v0.1.0\n\texample.com/r v0.1.0 // indirect\n\texample.com/t v0.1.0\n\texample.com/u v0.1.0 // indirect\n)\n\nreplace (\n\texample.com/a v0.1.0 => ./a\n\texample.com/b v0.1.0 => ./b\n\texample.com/c v0.1.0 => ./c\n\texample.com/d v0.1.0 => ./d\n\texample.com/q v0.1.0 => ./q\n\texample.com/r v0.1.0 => ./r\n\texample.com/s v0.1.0 => ./s\n\texample.com/t v0.1.0 => ./t\n\texample.com/u v0.1.0 => ./u\n\texample.com/w v0.1.0 => ./w\n\texample.com/x v0.1.0 => ./x\n)\n```\n\n----------------------------------------\n\nTITLE: Shell Script for Testing Go Fuzzing Behavior\nDESCRIPTION: A shell script that tests different scenarios of running the fuzz test, including with and without the -run flag, in verbose and non-verbose modes, with different matching patterns.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_run.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n[!fuzz] skip\n[short] skip\nenv GOCACHE=$WORK/cache\n\n# Tests which verify the behavior and command line output when\n# running a fuzz target as a unit test.\n\n# Tests without -run.\n\n! go test\nstdout FAIL\nstdout 'error here'\n\n! go test -v\nstdout FAIL\nstdout 'error here'\nstdout '=== RUN   FuzzFoo/thisfails'\nstdout '--- FAIL: FuzzFoo/thisfails'\nstdout '=== RUN   FuzzFoo/thispasses'\nstdout '--- PASS: FuzzFoo/thispasses'\n\n# Tests where -run matches all seed corpora.\n\n! go test -run FuzzFoo/this\nstdout FAIL\nstdout 'error here'\n! stdout 'no tests to run'\n\n! go test -run /this\nstdout FAIL\nstdout 'error here'\n! stdout 'no tests to run'\n\n! go test -v -run FuzzFoo/this\nstdout FAIL\nstdout 'error here'\nstdout '=== RUN   FuzzFoo/thisfails'\nstdout '--- FAIL: FuzzFoo/thisfails'\nstdout '=== RUN   FuzzFoo/thispasses'\nstdout '--- PASS: FuzzFoo/thispasses'\n! stdout 'no tests to run'\n\n! go test -v -run /this\nstdout FAIL\nstdout 'error here'\nstdout '=== RUN   FuzzFoo/thisfails'\nstdout '--- FAIL: FuzzFoo/thisfails'\nstdout '=== RUN   FuzzFoo/thispasses'\nstdout '--- PASS: FuzzFoo/thispasses'\n! stdout 'no tests to run'\n\n# Tests where -run only matches one seed corpus which passes.\n\ngo test -run FuzzFoo/thispasses\nstdout ok\n! stdout 'no tests to run'\n\ngo test -run /thispasses\nstdout ok\n! stdout 'no tests to run'\n\n# Same tests in verbose mode\ngo test -v -run FuzzFoo/thispasses\nstdout '=== RUN   FuzzFoo/thispasses'\nstdout '--- PASS: FuzzFoo/thispasses'\n! stdout '=== RUN   FuzzFoo/thisfails'\n! stdout 'no tests to run'\n\ngo test -v -run /thispasses\nstdout '=== RUN   FuzzFoo/thispasses'\nstdout '--- PASS: FuzzFoo/thispasses'\n! stdout '=== RUN   FuzzFoo/thisfails'\n! stdout 'no tests to run'\n\n# Tests where -run only matches one seed corpus which fails.\n\n! go test -run FuzzFoo/thisfails\nstdout FAIL\nstdout 'error here'\n! stdout 'no tests to run'\n\n! go test -run /thisfails\nstdout FAIL\nstdout 'error here'\n! stdout 'no tests to run'\n\n! go test -v -run FuzzFoo/thisfails\nstdout 'error here'\nstdout '=== RUN   FuzzFoo/thisfails'\nstdout '--- FAIL: FuzzFoo/thisfails'\n! stdout '=== RUN   FuzzFoo/thispasses'\n! stdout 'no tests to run'\n\n! go test -v -run /thisfails\nstdout 'error here'\nstdout '=== RUN   FuzzFoo/thisfails'\nstdout '--- FAIL: FuzzFoo/thisfails'\n! stdout '=== RUN   FuzzFoo/thispasses'\n! stdout 'no tests to run'\n\n# Tests where -run doesn't match any seed corpora.\n\ngo test -run FuzzFoo/nomatch\nstdout ok\n\ngo test -run /nomatch\nstdout ok\n\ngo test -v -run FuzzFoo/nomatch\nstdout '=== RUN   FuzzFoo'\nstdout '--- PASS: FuzzFoo'\nstdout ok\n! stdout 'no tests to run'\n\ngo test -v -run /nomatch\nstdout '=== RUN   FuzzFoo'\nstdout '--- PASS: FuzzFoo'\nstdout ok\n! stdout 'no tests to run'\n```\n\n----------------------------------------\n\nTITLE: Defining Go module dependencies\nDESCRIPTION: go.mod file specifying the module name, Go version, and required dependencies for the test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_fileproxy_vcs_missing_issue51589.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/mod\n\ngo 1.17\n\nrequire rsc.io/quote v1.5.2\n\nrequire (\n\tgolang.org/x/text v0.0.0-20170915032832-14c0d48ead0c // indirect\n\trsc.io/sampler v1.3.0 // indirect\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Go Package Commands with Modules Disabled\nDESCRIPTION: A shell script that tests various Go commands with module mode disabled to verify package handling behavior related to issue #18778. The script runs 'go build', 'go test', and 'go list' commands and verifies their outputs.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_patterns_outside_gopath.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd pkgs\n\nenv GO111MODULE=off\ngo build ./...\n! stdout .\ngo test ./...\nstdout '^ok'\ngo list ./...\nstdout 'pkgs$'\nstdout 'pkgs/a'\n```\n\n----------------------------------------\n\nTITLE: Testing Module Cache Cleaning Without Downloads\nDESCRIPTION: Tests that 'go clean -modcache' doesn't try to download modules before cleaning them, even when the go.mod file contains invalid module versions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_clean_cache.txt#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngo mod edit -require rsc.io/quote@v1.99999999.0-not-a-real-version\ngo clean -modcache\n! stderr 'finding rsc.io'\ngo mod edit -droprequire rsc.io/quote\n```\n\n----------------------------------------\n\nTITLE: Listing Test Packages with go list -test all\nDESCRIPTION: Demonstrates that 'go list -test all' is equivalent to 'go list -test $(go list all)' and includes tests for every package in 'all'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_all.txt#2025-04-22_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\ngo list -test -f $PKGFMT example.com/a example.com/b example.com/c example.com/d example.com/main example.com/main/testonly example.com/q example.com/r example.com/s example.com/t example.com/u example.com/w example.com/x\ncp stdout list-test-explicit.txt\n\ngo list -test -f $PKGFMT all\ncmp stdout list-test-explicit.txt\n```\n\n----------------------------------------\n\nTITLE: Preventing Direct Import of Dependency's Internal Package\nDESCRIPTION: After setting the module to `golang.org/notx`, this attempts to `go get .` (which includes `useinternal.go` trying to import `golang.org/x/internal`) and then build the current module. The build (`! go build`) is expected to fail because `golang.org/notx` is not allowed to directly import `golang.org/x/internal`, even though it has a transitive dependency on it.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# ... but other modules should not, even if they have transitive dependencies.\ngo get .\n! go build .\nstderr 'use of internal package golang.org/x/.* not allowed'\n```\n\n----------------------------------------\n\nTITLE: Testing Version Listing with Legacy Modules\nDESCRIPTION: Tests that +incompatible versions are still listed when the latest compatible version does not have a go.mod file, as they might reflect the author's intent.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_prefer_compatible.txt#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngo list -versions -m github.com/rsc/legacytest\nstdout '^github.com/rsc/legacytest v1\\.0\\.0 v1\\.1\\.0-pre v1\\.2\\.0 v2\\.0\\.0\\+incompatible'\n```\n\n----------------------------------------\n\nTITLE: Package Implementation with Panic in Init\nDESCRIPTION: Implementation file containing an init() function that panics to verify that Go test command doesn't execute code when no test files are present.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_no_tests.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nfunc init() {\n\tpanic(\"go test must not link and run test binaries without tests\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Directory Replacement in go.mod - Go\nDESCRIPTION: This go.mod file configures the module m to replace example.com/deprecated/a with a local directory './a'. It is intended to check if the Go toolchain omits deprecation lookups for direct filesystem replacements. Requires Go 1.17 and the local ./a directory to exist as a valid Go module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_deprecated_replace.txt#2025-04-22_snippet_3\n\nLANGUAGE: go.mod\nCODE:\n```\nmodule m\n\ngo 1.17\n\nrequire example.com/deprecated/a v1.0.0\n\nreplace example.com/deprecated/a => ./a\n```\n\n----------------------------------------\n\nTITLE: Declaring Go Module Metadata for Builds - Go\nDESCRIPTION: This go.mod file declares the Go module path as example.com/a.b.c/v2 and sets the minimum required Go version to 1.12. It provides the module-level dependency metadata for all go build and go test operations and is necessary to enable module-aware builds in the test scenarios. Dependencies: None other than a Go installation compatible with go.mod and modules. Inputs include the module path and Go version, outputs are module resolution for build/test commands. There are no required parameters and no explicit constraints besides Go's module system requirements.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/clean_binary.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/a.b.c/v2\n\ngo 1.12\n```\n\n----------------------------------------\n\nTITLE: Testing Go Checksum Database Usage\nDESCRIPTION: This snippet tests the use of the Go checksum database. It removes the existing go.sum file and then uses 'go list' commands to regenerate it, verifying that the checksum database is used for validation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_golang.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nrm go.sum\n\ngo list -mod=mod -x -m all  # Add checksums for go.mod files.\ngo list -mod=mod -x rsc.io/quote  # Add checksums for module source.\n\ncmp go.sum saved.sum\n```\n\n----------------------------------------\n\nTITLE: Main Module Definition (m1/go.mod)\nDESCRIPTION: Defines the primary module 'example.com/m1' with Go 1.21 requirement and local replacement for m2 module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_issue56222.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/m1\n\ngo 1.21\n\nrequire example.com/m2 v1.0.0\nreplace example.com/m2 => ../m2\n```\n\n----------------------------------------\n\nTITLE: Testing CPU Profiling in Go with Default Output\nDESCRIPTION: Runs a Go test with CPU profiling enabled on the errors package. It then checks if the default test executable 'errors.test' was created.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_profile.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo test -cpuprofile errors.prof errors\nexists -exec errors.test$GOEXE\n```\n\n----------------------------------------\n\nTITLE: Go Test File with Subtest Implementation\nDESCRIPTION: Implementation of a Go test file containing a main test function with a single subtest named 'Sub'. Demonstrates basic subtest structure using t.Run().\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_no_subtests.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage standalone_sub_test\\n\\nimport \"testing\"\\n\\nfunc Test(t *testing.T) {\\n\\tt.Run(\"Sub\", func(t *testing.T) {})\\n}\n```\n\n----------------------------------------\n\nTITLE: Module C Configuration (c/go.mod)\nDESCRIPTION: Configuration file for module c.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downadd_indirect.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/c\n\ngo 1.15\n```\n\n----------------------------------------\n\nTITLE: Main Package Import\nDESCRIPTION: Go source file importing example.com/r package\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_old.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage use\n\nimport _ \"example.com/r\"\n```\n\n----------------------------------------\n\nTITLE: Primary Module Definition for Test Scenario\nDESCRIPTION: Go module definition file for the main test module 'm'. Creates the module context for testing package traversal and resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_fs_patterns.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Testing pre-release pseudo-version resolution\nDESCRIPTION: Fetches a pre-release commit and verifies the pseudo-version format.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo.txt#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngo get ...test@fb3c628\ngo list -m all\nstdout '^github.com/rsc/legacytest v1\\.1\\.0-pre\\.0\\.\\d{14}-fb3c628075e3$'\n```\n\n----------------------------------------\n\nTITLE: Bad Import Module Definition\nDESCRIPTION: Module definition for the badimport package\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_errors.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/badimport\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Executing Go Module Commands in Shell\nDESCRIPTION: This snippet demonstrates the use of `go list` and `go clean` commands to manage Go modules and dependencies. It requires Go to be installed. The commands show how to list module paths, versions, directories, and how to clean the module cache. Key parameters include `-mod=mod` for module mode and `-f` for formatting the output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n[short] skip\n\n# list {{.Dir}} shows main module and go.mod but not not-yet-downloaded dependency dir.\ngo list -mod=mod -m -f '{{.Path}} {{.Main}} {{.GoMod}} {{.Dir}}' all\nstdout '^x true .*[\\\\/]src[\\\\/]go.mod .*[\\\\/]src$'\nstdout '^rsc.io/quote false .*[\\\\/]v1.5.2.mod $'\n\n# list {{.Dir}} shows dependency after download (and go list without -m downloads it)\ngo list -mod=mod -f '{{.Dir}}' rsc.io/quote\nstdout '.*mod[\\\\/]rsc.io[\\\\/]quote@v1.5.2$'\n\n# downloaded dependencies are read-only\nexists -readonly $GOPATH/pkg/mod/rsc.io/quote@v1.5.2\nexists -readonly $GOPATH/pkg/mod/rsc.io/quote@v1.5.2/buggy\n\n# go clean -modcache can delete read-only dependencies\ngo clean -modcache\n! exists $GOPATH/pkg/mod/rsc.io/quote@v1.5.2\n\n# list {{.Dir}} shows replaced directories\ncp go.mod2 go.mod\ngo list -mod=mod -f {{.Dir}} rsc.io/quote\ngo list -m -f '{{.Path}} {{.Version}} {{.Dir}}{{with .Replace}} {{.GoMod}} => {{.Version}} {{.Dir}} {{.GoMod}}{{end}}' all\nstdout 'mod[\\\\/]rsc.io[\\\\/]quote@v1.5.1'\nstdout 'v1.3.0.*mod[\\\\/]rsc.io[\\\\/]sampler@v1.3.1 .*[\\\\/]v1.3.1.mod => v1.3.1.*sampler@v1.3.1 .*[\\\\/]v1.3.1.mod'\n\n# list std should work\ngo list std\nstdout ^math/big\n\n# rsc.io/quote/buggy should be listable as a package,\n# even though it is only a test.\ngo list -mod=mod rsc.io/quote/buggy\n\n# rsc.io/quote/buggy should not be listable as a module\ngo list -m -e -f '{{.Error.Err}}' nonexist rsc.io/quote/buggy\nstdout '^module nonexist: not a known dependency$'\nstdout '^module rsc.io/quote/buggy: not a known dependency$'\n\n! go list -m nonexist rsc.io/quote/buggy\nstderr '^go: module nonexist: not a known dependency'\nstderr '^go: module rsc.io/quote/buggy: not a known dependency'\n\n# Module loader does not interfere with list -e (golang.org/issue/24149).\ngo list -e -f '{{.Error.Err}}' database\nstdout 'package database is not in std'\n! go list database\nstderr 'package database is not in std'\n\n-- go.mod --\nmodule x\nrequire rsc.io/quote v1.5.2\n\n-- go.mod2 --\nmodule x\nrequire rsc.io/quote v1.5.1\nreplace rsc.io/sampler v1.3.0 => rsc.io/sampler v1.3.1\n\n-- x.go --\npackage x\nimport _ \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Go Environment Variable Modifications\nDESCRIPTION: This snippet tests the behavior of 'go env -w' when attempting to set invalid or restricted variables. It demonstrates error handling for unknown variables, read-only variables, and variables that can only be set via OS environment.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_write.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# go env -w rejects unknown or bad variables\n! go env -w GOGC=off\nstderr 'unknown go command variable GOGC'\n! go env -w GOEXE=.bat\nstderr 'GOEXE cannot be modified'\n! go env -w GOVERSION=customversion\nstderr 'GOVERSION cannot be modified'\n! go env -w GOENV=/env\nstderr 'GOENV can only be set using the OS environment'\n! go env -w GODEBUG=gctrace=1\nstderr 'GODEBUG can only be set using the OS environment'\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Module Tests\nDESCRIPTION: Sets environment variables and runs Go tests for specific packages to verify module behavior and import resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_test_issue11864.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GO111MODULE=off\n\n# test should work too\ngo test github.com/rsc/go-get-issue-11864\ngo test github.com/rsc/go-get-issue-11864/t\n\n# external tests should observe internal test exports (golang.org/issue/11977)\ngo test github.com/rsc/go-get-issue-11864/vendor/vendor.org/tx2\n```\n\n----------------------------------------\n\nTITLE: Testing pseudo-version resolution for v1.0.1-0\nDESCRIPTION: Fetches a commit and verifies the pseudo-version format for v1.0.1-0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo.txt#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ngo get ...test@fa4f5d6\ngo list -m all\nstdout '^github.com/rsc/legacytest v1\\.0\\.1-0\\.\\d{14}-fa4f5d6a71c6$'\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Proxy Invalid Response Handling\nDESCRIPTION: Test script that sets up an invalid GOPROXY environment and verifies proper error handling when attempting to fetch modules through it. Tests both latest version query and specific version query scenarios.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_proxy_invalid.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=on\nenv GOPROXY=$GOPROXY/invalid\n\n! go list -m rsc.io/quote@latest\nstderr '^go: module rsc.io/quote: invalid response from proxy \"'$GOPROXY'\": invalid character ''i'' looking for beginning of value$'\n\n! go list -m rsc.io/quote@1.5.2\nstderr '^go: rsc.io/quote@1.5.2: invalid version: invalid response from proxy \"'$GOPROXY'\": invalid character ''i'' looking for beginning of value$'\n```\n\n----------------------------------------\n\nTITLE: Checking Environment Variable in Go Subprocess\nDESCRIPTION: This Go script checks if the TERM environment variable is set. It exits with status 1 if TERM is not empty, demonstrating that 'go run' should not pass this variable to the subprocess.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_issue11709.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport \"os\"\n\nfunc main() {\n\tif os.Getenv(\"TERM\") != \"\" {\n\t\tos.Exit(1)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Cgo Function (Go)\nDESCRIPTION: A test file that imports the package and tests the F() function which contains Cgo code. This is used to generate coverage reports for the Cgo implementation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_cgo_extra_file.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage p_test\n\nimport (\n\t. \"cgocover4\"\n\t\"testing\"\n)\n\nfunc TestF(t *testing.T) {\n\tF()\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Module Dependencies with go list Command\nDESCRIPTION: A shell command that lists all modules in the dependency graph. The command uses a custom format and validates the output with expected module paths, checking which modules should appear in the dependency tree based on lazy loading rules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_all.txt#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngo list -m -f $MODFMT all\nstdout -count=10 '^.'\nstdout '^example.com/a$'\nstdout '^example.com/b$'\nstdout '^example.com/c$'\n! stdout '^example.com/d$'\nstdout '^example.com/main$'\nstdout '^example.com/q$'\nstdout '^example.com/r$'\nstdout '^example.com/s$'\nstdout '^example.com/t$'\nstdout '^example.com/u$'\nstdout '^example.com/w$'\n! stdout '^example.com/x$'\n```\n\n----------------------------------------\n\nTITLE: Testing Module with go 1.22 Requirement\nDESCRIPTION: Tests how 'go get needgo122' (which requires Go 1.22) uses the earliest 1.22 release when GOTOOLCHAIN=auto is set.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_exec_toolchain.txt#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n# go get needgo122 (says 'go 1.22') should use 1.22.0, the earliest release we have available\n# (ignoring prereleases).\nenv GOTOOLCHAIN=local\ncp go.mod.new go.mod\n! go get rsc.io/needgo122\nstderr '^go: rsc.io/needgo122@v0.0.1 requires go >= 1.22 \\(running go 1.21; GOTOOLCHAIN=local\\)'\n\nenv GOTOOLCHAIN=auto\ncp go.mod.new go.mod\ngo get rsc.io/needgo122\nstderr '^go: upgraded go 1.1 => 1.22$'\nstderr '^go: rsc.io/needgo122@v0.0.1 requires go >= 1.22; switching to go1.22.9$'\n! stderr '^go: added toolchain$'\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module\nDESCRIPTION: This snippet shows the contents of the go.mod file, defining the module and Go version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_lazy_indirect.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/m\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: Executing Go List Command for Custom GOROOT\nDESCRIPTION: This shell command runs 'go list' to display the import paths and directories of dependencies for the ./bytes package. It demonstrates how the 'std' module is treated in a custom GOROOT setup.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_alt_goroot.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n\ngo list -e -deps -f '{{.ImportPath}} {{.Dir}}' ./bytes\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Proxy Fallback Behavior\nDESCRIPTION: Series of test commands that verify Go module proxy fallback behavior with different HTTP status codes (404, 410, 403, 500) and proxy list separators (',' and '|'). Tests include verification of error handling and proxy fallback logic when fetching module versions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_proxy_list.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\nenv proxy=$GOPROXY\n\n# Proxy that can't serve should fail.\nenv GOPROXY=$proxy/404\n! go get rsc.io/quote@v1.0.0\nstderr '404 Not Found'\n\n# get should walk down the proxy list past 404 and 410 responses.\nenv GOPROXY=$proxy/404,$proxy/410,$proxy\ngo get rsc.io/quote@v1.1.0\n\n# get should not walk past other 4xx errors if proxies are separated with ','.\nenv GOPROXY=$proxy/403,$proxy\n! go get rsc.io/quote@v1.2.0\nstderr 'reading.*/403/rsc.io/.*: 403 Forbidden'\n\n# get should not walk past non-4xx errors if proxies are separated with ','.\nenv GOPROXY=$proxy/500,$proxy\n! go get rsc.io/quote@v1.3.0\nstderr 'reading.*/500/rsc.io/.*: 500 Internal Server Error'\n\n# get should walk past other 4xx errors if proxies are separated with '|'.\nenv GOPROXY=$proxy/403|https://0.0.0.0|$proxy\ngo get rsc.io/quote@v1.2.0\n\n# get should walk past non-4xx errors if proxies are separated with '|'.\nenv GOPROXY=$proxy/500|https://0.0.0.0|$proxy\ngo get rsc.io/quote@v1.3.0\n\n# get should return the final error if that's all we have.\nenv GOPROXY=$proxy/404,$proxy/410\n! go get rsc.io/quote@v1.4.0\nstderr 'reading.*/410/rsc.io/.*: 410 Gone'\n```\n\n----------------------------------------\n\nTITLE: Testing Go Build Cache Requirements and Error Handling\nDESCRIPTION: A test script that verifies Go's build cache behavior under various scenarios including undefined cache location, non-absolute path, explicit disabling, and unwritable directory. The script checks that appropriate error messages are displayed in each case.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_nocache.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=off\n\n# As of Go 1.12, the module cache is required.\n\n# If none of the variables we use to locate GOCACHE are set, the cache is off\n# and we cannot build.\nenv GOCACHE=\nenv XDG_CACHE_HOME=\nenv HOME=\n[GOOS:plan9] env home=\n[GOOS:windows] env LocalAppData=\n! go build -o triv triv.go\nstderr 'build cache is required, but could not be located: GOCACHE is not defined and .*'\n\n# If GOCACHE is set but is not an absolute path, and we cannot build.\nenv GOCACHE=test\n! go build -o triv triv.go\nstderr 'build cache is required, but could not be located: GOCACHE is not an absolute path'\n\n# An explicit GOCACHE=off also disables builds.\nenv GOCACHE=off\n! go build -o triv triv.go\nstderr 'build cache is disabled by GOCACHE=off'\n\n# If GOCACHE is set to an unwritable directory, we should diagnose it as such.\n[GOOS:windows] stop # Does not support unwritable directories.\n[root] skip # Can write to unwritable directories.\n\nmkdir $WORK/unwritable/home\nchmod 0555 $WORK/unwritable/home\n[!GOOS:plan9] env HOME=$WORK/unwritable/home\n[GOOS:plan9] env home=$WORK/unwritable/home\n\nenv GOCACHE=$WORK/unwritable/home\n! go build -o triv triv.go\nstderr 'failed to initialize build cache.* permission denied'\n```\n\n----------------------------------------\n\nTITLE: Testing vendor consistency checks with Go 1.14\nDESCRIPTION: Demonstrates that adding dependency information to a Go 1.14 go.mod file triggers errors if vendor/modules.txt is missing or incomplete.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_auto.txt#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncp go.mod.orig go.mod\ngo mod edit -go=1.14\n! go list -f {{.Dir}} -tags tools -e all\nstderr '^go: inconsistent vendoring in '$WORK[/\\\\]auto':$'\nstderr '^\\texample.com/printversion@v1.0.0: is explicitly required in go.mod, but not marked as explicit in vendor/modules.txt'\nstderr '^\\texample.com/unused: is replaced in go.mod, but not marked as replaced in vendor/modules.txt'\nstderr '^\\texample.com/version@v1.2.0: is replaced in go.mod, but not marked as replaced in vendor/modules.txt'\nstderr '^\\tTo ignore the vendor directory, use -mod=readonly or -mod=mod.\\n\\tTo sync the vendor directory, run:\\n\\t\\tgo mod vendor$'\n```\n\n----------------------------------------\n\nTITLE: Defining an Auxiliary Go Library Package - Go\nDESCRIPTION: This package statement for 'other' creates a minimal library placeholder within the auxiliary module. It forms the foundation for any subsequent library logic pertinent to example.com/other without additional code.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_tool.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage other\\n\n```\n\n----------------------------------------\n\nTITLE: Go Package Using External Module\nDESCRIPTION: This snippet demonstrates a Go package that imports an external module (rsc.io/quote) for side effects only.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_partial.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage use\n\nimport _ \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: Testing go mod init with alternate file\nDESCRIPTION: Initializes a new module using go mod init and verifies that the alternate file is created and contains the correct module name.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/modfile_flag.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo mod init example.com/m\ngrep example.com/m go.alt.mod\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Basic go.mod file definition specifying module name and Go version requirement\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_issue46807.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule bug\n\ngo 1.21\n```\n\n----------------------------------------\n\nTITLE: Checking Module Resolution against Golang Directories in Shell\nDESCRIPTION: Using 'go list' to confirm that 'golang.org' directories map to correct vendor locations within module paths, aiding in verifying accurate module resolution for external dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_std.txt#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngo list -f '{{.Dir}}' golang.org/x/net/http2/hpack\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Management with gopkg.in Unstable Versions\nDESCRIPTION: A sequence of shell commands that test Go's module management with gopkg.in unstable versions. It sets up a minimal environment, attempts to get packages, and verifies module resolution behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gopkg_unstable.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=on\n\ncp go.mod.empty go.mod\ngo get gopkg.in/dummy.v2-unstable\n\ncp x.go.txt x.go\ncp go.mod.empty go.mod\ngo list\n\n[!net:gopkg.in] skip\n[!git] skip\n\nskip  # TODO(#54503): redirect gopkg.in requests to a local server and re-enable.\n\nenv GOPROXY=direct\nenv GOSUMDB=off\ngo get gopkg.in/macaroon-bakery.v2-unstable/bakery\ngo list -m all\nstdout 'gopkg.in/macaroon-bakery.v2-unstable v2.0.0-[0-9]+-[0-9a-f]+$'\n```\n\n----------------------------------------\n\nTITLE: Expected Output File: go mod graph Module Relationship Dump - Text\nDESCRIPTION: This text file records the directed edges of the module graph as output from 'go mod graph', useful for visualizing the relationship between the project's modules, their versions, and cycles. It acts as an authoritative reference for validating dependency graph traversal by Go tooling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_main.txt#2025-04-22_snippet_10\n\nLANGUAGE: text\nCODE:\n```\ngolang.org/issue/root go@1.12\ngolang.org/issue/root golang.org/issue/mirror@v0.1.0\ngolang.org/issue/mirror@v0.1.0 golang.org/issue/root@v0.1.0\ngolang.org/issue/root@v0.1.0 golang.org/issue/pkg@v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Package A Implementation\nDESCRIPTION: The implementation of package 'a' that imports package 'c', creating a dependency link in the test case's graph.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_cycle.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\nimport _ \"c\"\n```\n\n----------------------------------------\n\nTITLE: Testing go mod tidy with -compat Flag\nDESCRIPTION: Executes 'go mod tidy' with the -compat=1.17 flag to ignore differences and checks for expected behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_incompatible.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo mod tidy -compat=1.17\n! stderr .\ncmp go.mod go.mod.orig\n```\n\n----------------------------------------\n\nTITLE: Defining Root Module without go.mod using Go Modules - Go\nDESCRIPTION: This snippet specifies the root module path for a Go project that does not provide a go.mod file at the root, commonly occurring with +incompatible versions. It sets up the module name 'example.com/split-incompatible' to simulate projects before full Go module support. No dependencies are declared; the file simply provides the module path for testing module resolution logic.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_split-incompatible_v2.0.0+incompatible.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/split-incompatible\n```\n\n----------------------------------------\n\nTITLE: Expected Output on Windows\nDESCRIPTION: Shows the expected output of the 'go env' command on Windows, demonstrating the different escaping mechanism compared to Unix systems.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_sanitize.txt#2025-04-22_snippet_4\n\nLANGUAGE: batch\nCODE:\n```\n[GOOS:windows] stdout 'set GOFLAGS=\\$\\(echo ''cc\"''; echo ''OOPS=\"oops''\\)'\n```\n\n----------------------------------------\n\nTITLE: Sub-module Definition\nDESCRIPTION: Go module definition file for the sub-module with its own set of dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_goproxy_off.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule example/sub\n\ngo 1.19\n\nrequire rsc.io/quote v1.5.1\n\nrequire (\n\tgolang.org/x/text v0.0.0-20170915032832-14c0d48ead0c // indirect\n\trsc.io/sampler v1.3.1 // indirect\n)\n```\n\n----------------------------------------\n\nTITLE: Go Module File Configuration\nDESCRIPTION: Basic Go module configuration file specifying the module name\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module declaration file that defines the module name for the test package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gccgo_link_ldflags.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Shell Test Script for Cgo Fuzzing\nDESCRIPTION: Shell script setting up environment variables and running a Go test with fuzzing enabled to verify cgo compatibility. The script expects successful test completion.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_cgo.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n[!fuzz] skip\n[!cgo] skip\n[short] skip\nenv GOCACHE=$WORK/cache\n\n# Test that fuzzing works with cgo (issue 65169)\n\ngo test -fuzz=. -fuzztime=1x\nstdout ok\n! stdout FAIL\n```\n\n----------------------------------------\n\nTITLE: Implementing Package with Constant\nDESCRIPTION: Defines the 'p' package with a constant 'X' set to 42. This is the package that will be documented by the 'go doc' command.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_doc_path.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\npackage p\n\nconst X = 42\n```\n\n----------------------------------------\n\nTITLE: Simple Go Program Utilizing a Dependency\nDESCRIPTION: This is a basic Go program within the `main` package. It imports the standard `fmt` package and the external `rsc.io/quote` package (defined as a dependency in `go.mod`). The `main` function calls `quote.Hello()` and prints the returned string to standard output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/malformed_gosum_issue62345.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n-- main.go --\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"rsc.io/quote\"\n)\n\nfunc main() {\n\tfmt.Println(quote.Hello())\n}\n```\n\n----------------------------------------\n\nTITLE: Non-Main Package Definition\nDESCRIPTION: Defines a simple non-main package with a single empty function F(). Used to test build command rejection of non-main packages with -buildmode=exe.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_exe.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage not_main\n\nfunc F() {}\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests with Coverage for All Packages (Shell)\nDESCRIPTION: Executes tests for the Go package 'x' using the 'go test' command. The '-coverpkg=all' flag instructs the tool to calculate test coverage for all packages depended upon, not just the package 'x' being tested. The surrounding script context expects 'ok' and coverage information in standard output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_pkgall_runtime.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo test -coverpkg=all x\n```\n\n----------------------------------------\n\nTITLE: Running Module Listing, Graph, and Output Comparison with Go CLI - Shell\nDESCRIPTION: These shell snippets execute a sequence of Go CLI commands ('go list', 'go list -m', and 'go mod graph') to list dependencies and modules in the project, and then validate their outputs against expected results using 'cmp'. These scripts require the Go toolchain available on the environment, with the working directory properly set up and GO111MODULE set to 'on'. Inputs are the presence of module directories and pre-filled go.mod files; outputs are compared directly to baseline text files to check correctness.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_main.txt#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nenv GO111MODULE=on\n```\n\nLANGUAGE: sh\nCODE:\n```\ngo list -f '{{with .Module}}{{.Path}}{{with .Version}} {{.}}{{end}}{{end}}' all\ncmp stdout pkgmods.txt\n```\n\nLANGUAGE: sh\nCODE:\n```\ngo list -m all\ncmp stdout mods.txt\n```\n\nLANGUAGE: sh\nCODE:\n```\ngo mod graph\ncmp stdout graph.txt\n```\n\n----------------------------------------\n\nTITLE: Testing 'go work use' command with relative and absolute paths\nDESCRIPTION: Shell script that tests the behavior of 'go work use' command with relative and absolute paths in a Go workspace. It verifies how the command handles adding and removing directories, replacing paths, and preventing duplicate modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_dot.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp go.work go.work.orig\n\n# If the current directory contains a go.mod file,\n# 'go work use .' should add an entry for it.\ncd bar/baz\ngo work use .\ncmp ../../go.work ../../go.work.rel\n\n# If the current directory lacks a go.mod file, 'go work use .'\n# should remove its entry.\nmv go.mod go.mod.bak\ngo work use .\ncmp ../../go.work ../../go.work.orig\n\n# If the path is absolute, it should remain absolute.\nmv go.mod.bak go.mod\ngo work use $PWD\ngrep -count=1 '^use ' ../../go.work\ngrep '^use [\"\\\\]?'$PWD'[\"\\\\]?$' ../../go.work\n\n# An absolute path should replace an entry for the corresponding relative path\n# and vice-versa.\ngo work use .\ncmp ../../go.work ../../go.work.rel\ngo work use $PWD\ngrep -count=1 '^use ' ../../go.work\ngrep '^use [\"\\\\]?'$PWD'[\"\\\\]?$' ../../go.work\n\n# If both the absolute and relative paths are named, 'go work use' should error\n# out: we don't know which one to use, and shouldn't add both because the\n# resulting workspace would contain a duplicate module.\ncp ../../go.work.orig ../../go.work\n! go work use $PWD .\nstderr '^go: already added \"\\.\\/bar\\/baz\" as \"'$PWD'\"$'\ncmp ../../go.work ../../go.work.orig\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Dependency Resolution with go run Commands\nDESCRIPTION: A script that tests the behavior of 'go run' and 'go run -mod=mod' commands with a missing dependency. It verifies that go run fails without -mod=mod, and that with -mod=mod it correctly updates go.mod and go.sum files.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_run_issue52331.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n! go run main.go\n# stderr '^main\\.go:6:2: no required module provides package example\\.com/version; to add it:\\n\\tgo get example\\.com/version\\n\\z'\n\ngo run -mod=mod main.go\ncmp go.mod go.mod.want\ngrep -count=1 '^example\\.com/version v1.1.0 h1:' go.sum\ngrep -count=1 '^example\\.com/version v1.1.0/go.mod h1:' go.sum\n```\n\n----------------------------------------\n\nTITLE: Testing Go Workspace Vendor Mode Behavior\nDESCRIPTION: A test script that verifies vendor mode behavior in Go across different configurations. It tests combinations of workspace/module vendor directories with workspace mode enabled/disabled to ensure proper module resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_modules_txt_conditional.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# This test checks to see if we only start in workspace vendor\n# mode if the modules.txt specifies ## workspace (and only in\n# standard vendor if it doesn't).\n\n# vendor directory produced for workspace, workspace mode\n# runs in mod=vendor\ngo work vendor\ncmp vendor/modules.txt want_workspace_modules_txt\ngo list -f {{.Dir}} example.com/b\nstdout $GOPATH[\\/]src[\\/]vendor[\\/]example.com[\\/]b\n\n# vendor directory produced for workspace, module mode\n# runs in mod=readonly\nenv GOWORK=off\ngo list -f {{.Dir}} example.com/b\nstdout $GOPATH[\\/]src[\\/]b\n\n# vendor directory produced for module, module mode\n# runs in mod=vendor\ngo mod vendor\ncmp vendor/modules.txt want_module_modules_txt\ngo list -f {{.Dir}} example.com/b\nstdout $GOPATH[\\/]src[\\/]vendor[\\/]example.com[\\/]b\n\n# vendor directory produced for module, workspace mode\n# runs in mod=readonly\nenv GOWORK=\ngo list -f {{.Dir}} example.com/b\nstdout $GOPATH[\\/]src[\\/]b\n```\n\n----------------------------------------\n\nTITLE: Go Workspace Definition File\nDESCRIPTION: Empty go.work file that specifies Go 1.18 as the required version without any module references.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_dot.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Fortune Main Program Implementation\nDESCRIPTION: Main Go program that imports rsc.io/quote package and prints a hello message\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_fortune_v1.0.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"rsc.io/quote\"\n\nfunc main() {\n\tprintln(quote.Hello())\n}\n```\n\n----------------------------------------\n\nTITLE: Building and verifying test binary debug directives\nDESCRIPTION: Creates a standalone test binary with go test -c and verifies the DefaultGODEBUG setting with go version -m command.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_buildinfo_godebug_issue68053.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo test -c\ngo version -m ./foo.test$GOEXE\nstdout 'build\\tDefaultGODEBUG=.*panicnil=1.*'\n```\n\n----------------------------------------\n\nTITLE: Package with Indirect Deprecated Import - b.go\nDESCRIPTION: Defines a package that indirectly imports a deprecated module through a local package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_deprecated.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage b\n\nimport _ \"local/use\"\n```\n\n----------------------------------------\n\nTITLE: Testing Go Mod Help Commands\nDESCRIPTION: Validates help documentation for mod commands including tidy subcommand and --help flag behavior\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/help.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo help mod\nstdout 'go mod <command>'\nstdout tidy\n\ngo help mod tidy\nstdout 'usage: go mod tidy'\n\ngo mod help tidy\nstdout 'usage: go mod tidy'\n\n! go mod --help\nstderr 'Run \\'go help mod\\' for usage.'\n```\n\n----------------------------------------\n\nTITLE: Creating Non-Runnable Example in Go Test File\nDESCRIPTION: Defines an init function that writes to stdout and a non-runnable example function. The init function will be executed when the package is imported, while the example function won't be run as a test due to the missing 'Output:' comment.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_no_run_example.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage pkg_test\n\nimport \"os\"\n\nfunc init() {\n\tos.Stdout.Write([]byte(\"File with non-runnable example was built.\\n\"))\n}\n\nfunc Example_test() {\n\t// This test will not be run, it has no \"Output:\" comment.\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Go Module - Go - none\nDESCRIPTION: This code snippet declares the Go module path for the toolchain in a .mod file. It serves as a module pointer to establish a unique path for the toolchain package. There are no dependencies or parameters. This is standard for Go modules, and no input or output is expected other than serving as meta-information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.freebsd-riscv64.txt#2025-04-22_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Implementation of a Go Benchmark Function that Calls Fatal\nDESCRIPTION: A test file containing a benchmark function that deliberately calls b.Fatal() to trigger a test failure. This is used to verify that benchmarks properly report failures when Fatal is called.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_benchmark_fatal.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage benchfatal\n\nimport \"testing\"\n\nfunc BenchmarkThatCallsFatal(b *testing.B) {\n\tb.Fatal(\"called by benchmark\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Dependencies and Replacements\nDESCRIPTION: This go.mod file defines a module 'm' with Go version 1.15, specifies dependencies, and includes replace directives for different versions of example.com/a and example.com/b.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline_old.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule m\ngo 1.15\n\nrequire (\n\texample.com/a v1.0.0\n\texample.com/b v1.0.0\n)\n\nreplace example.com/a v1.0.0 => ./a100\nreplace example.com/a v1.0.1 => ./a101\nreplace example.com/b v1.0.1 => ./b101\nreplace example.com/b v1.0.0 => ./b100\nreplace example.com/b v0.9.0 => ./b100\n```\n\n----------------------------------------\n\nTITLE: Function Implementation for Internal Package 'i' in Go\nDESCRIPTION: Internal package 'i' with a function I that returns 32.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_multipkg.txt#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\npackage i\n\nfunc I() int { return 32 }\n```\n\n----------------------------------------\n\nTITLE: Package Q Test File (m2/q/q_test.go)\nDESCRIPTION: Test file for package q that imports the generics package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_issue56222.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage q\n\nimport _ \"example.com/generics\"\n```\n\n----------------------------------------\n\nTITLE: Dependency Test File\nDESCRIPTION: Minimal Go test file that imports the testing package to verify dependency rebuilding behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_rebuildall.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage deps\n\nimport _ \"testing\"\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Path in go.mod\nDESCRIPTION: This snippet from a `.mod` file declares the module path for the Go project. The `module` directive specifies the canonical import path for the module, which is 'github.com/dmitshur-test/modtest5' in this case.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/github.com_dmitshur-test_modtest5_v0.0.0-20190619020302-197a620e0c9a.txt#2025-04-22_snippet_0\n\nLANGUAGE: go.mod\nCODE:\n```\n-- .mod --\nmodule github.com/dmitshur-test/modtest5\n```\n\n----------------------------------------\n\nTITLE: Testing Specific Version Upgrade with 'go get' (Shell)\nDESCRIPTION: Upgrades a specific package version and verifies that all necessary dependencies are updated accordingly.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue47979.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncp go.mod.orig go.mod\ngo get example.net/a@v0.2.0\ncmp go.mod go.mod.want\n```\n\n----------------------------------------\n\nTITLE: Testing Go Version Command with GOFLAGS\nDESCRIPTION: Ensures that 'go version' works correctly with GOFLAGS environment variable set.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version.txt#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nenv GOFLAGS='-m -v'\ngo version\nstdout '^go version'\nenv GOFLAGS=\n```\n\n----------------------------------------\n\nTITLE: Generating Go Package Documentation Structure\nDESCRIPTION: This template outlines the structure for generating Go package documentation. It includes placeholders for various package elements such as import path, imports, constants, variables, functions, and types. The template uses Go's text/template syntax to populate the documentation with actual package data.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/testdata/template.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n{{synopsis .Doc}}\nPACKAGE {{.Name}}\n\nIMPORTPATH\n\t{{.ImportPath}}\n\n{{with .Imports}}IMPORTS\n{{range .}}\t{{.}}\n{{end}}\n{{end}}{{/*\n\n*/}}FILENAMES\n{{range .Filenames}}\t{{.}}\n{{end}}{{/*\n\n*/}}{{with .Consts}}\nCONSTANTS\n{{range .}}\t{{synopsis .Doc}}\n\t{{node .Decl $.FSet}}\n\n{{end}}{{end}}{{/*\n\n*/}}{{with .Vars}}\nVARIABLES\n{{range .}}\t{{synopsis .Doc}}\n\t{{node .Decl $.FSet}}\n\n{{end}}{{end}}{{/*\n\n*/}}{{with .Funcs}}\nFUNCTIONS\n{{range .}}\t{{synopsis .Doc}}\n\t{{node .Decl $.FSet}}\n\n{{end}}{{end}}{{/*\n\n*/}}{{with .Types}}\nTYPES\n{{range .}}\t{{synopsis .Doc}}\n\t{{node .Decl $.FSet}}\n\n{{range .Consts}}\t{{synopsis .Doc}}\n\t{{node .Decl $.FSet}}\n\n{{end}}{{/*\n\n*/}}{{range .Vars}}\t{{synopsis .Doc}}\n\t{{node .Decl $.FSet}}\n\n{{end}}{{/*\n\n*/}}{{range .Funcs}}\t{{synopsis .Doc}}\n\t{{node .Decl $.FSet}}\n\n{{end}}{{/*\n\n*/}}{{range .Methods}}\t{{synopsis .Doc}}\n\t{{node .Decl $.FSet}}\n\n{{end}}{{end}}{{end}}{{/*\n\n*/}}{{with .Bugs}}\nBUGS .Bugs is now deprecated, please use .Notes instead\n{{range .}}{{indent \"\\t\" .}}\n{{end}}{{end}}{{with .Notes}}{{range $marker, $content := .}}\n{{$marker}}S\n{{range $content}}{{$marker}}({{.UID}}){{indent \"\\t\" .Body}}\n{{end}}{{end}}{{end}}\n```\n\n----------------------------------------\n\nTITLE: Updating Go Modules for Lazy Loading\nDESCRIPTION: Updates all modules to Go 1.17 to enable lazy loading, then runs 'go mod tidy'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_all.txt#2025-04-22_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\ngo mod edit -go=1.17 a/go.mod\ngo mod edit -go=1.17 b/go.mod\ngo mod edit -go=1.17 c/go.mod\ngo mod edit -go=1.17 d/go.mod\ngo mod edit -go=1.17 q/go.mod\ngo mod edit -go=1.17 r/go.mod\ngo mod edit -go=1.17 s/go.mod\ngo mod edit -go=1.17 t/go.mod\ngo mod edit -go=1.17 u/go.mod\ngo mod edit -go=1.17 w/go.mod\ngo mod edit -go=1.17 x/go.mod\ngo mod edit -go=1.17\ncmp go.mod go.mod.beforetidy\ngo mod tidy\ncmp go.mod go.mod.aftertidy\n```\n\n----------------------------------------\n\nTITLE: Go Module with Tool Directive\nDESCRIPTION: Shows a go.mod file with a tool directive, which declares a development tool dependency that isn't directly imported by the module's packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit.txt#2025-04-22_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nmodule g\n\ngo 1.24\n\ntool example.com/tool\n\n```\n\n----------------------------------------\n\nTITLE: Go Module Configuration for Replacing gopkg.in v4 with GitHub v1\nDESCRIPTION: This go.mod file sets up the replacement of a gopkg.in v4 module with a GitHub v1 module, demonstrating version compatibility.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_gopkgin.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nmodule golang.org/issue/34254\n\ngo 1.13\n\nrequire gopkg.in/src-d/go-git.v4 v4.13.1\n\nreplace gopkg.in/src-d/go-git.v4 v4.13.1 => github.com/src-d/go-git v1.0.1-0.20190801152248-0d1a009cbb60\n```\n\n----------------------------------------\n\nTITLE: Validating go list Origin Output for Specific, Stable Proxy Version - Shell\nDESCRIPTION: This snippet uses 'go list' to fetch a specific pseudo-version known to exist in the proxy. It then confirms that the proxy’s available VCS origin data is output, but fields such as 'Ref' and 'TagSum' are omitted if unavailable. This verifies that only origin data connected to that precise commit is shown, and that partial details are not fabricated. Requires local proxy with the relevant version present.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_issue61423.txt#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# However, if we list a specific, stable version, we should get\n# whatever origin metadata the proxy has for the version.\n\ngo list -m -json vcs-test.golang.org/git/issue61415.git@v0.0.0-20231114180000-08a4fa6bb9c0\ncp stdout proxy-version.json\nstdout '\"Version\": \"v0.0.0-20231114180000-08a4fa6bb9c0\"'\nstdout '\"Origin\":'\nstdout '\"VCS\": \"git\"'\nstdout '\"Hash\": \"08a4fa6bb9c04ffba03b26ae427b0d6335d90a2a\"'\n! stdout '\"Ref\":'\n! stdout '\"TagSum\":'\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Fuzz Test for Coverage Minimization in Go\nDESCRIPTION: Defines a fuzz test that checks specific byte patterns. The test accepts input of two bytes and returns when it finds the pattern 'ab'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_minimize_dirty_cov.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc FuzzCovMin(f *testing.F) {\n\tf.Add([]byte(\"aa\"))\n\tf.Fuzz(func(t *testing.T, data []byte) {\n\t\tif len(data) == 2 && data[0] == 'a' && data[1] == 'b' {\n\t\t\treturn\n\t\t}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Empty Package File\nDESCRIPTION: Empty package declaration file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_shuffle.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage foo\n```\n\n----------------------------------------\n\nTITLE: Declaring Module Version Metadata with info File - JSON\nDESCRIPTION: Provides metadata about the Go module, including the version identifier (v1.0.0-blockwithcomment). This info JSON is typically used by Go toolchains and proxy servers to track the published version of a module. The key 'Version' holds the semantic version and any associated identifiers. There are no required parameters beyond 'Version', and the file is expected to comply with JSON encoding standards.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rationale_v1.0.0-blockwithcomment.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\\"Version\\\":\\\"v1.0.0-blockwithcomment\\\"}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Function in Go\nDESCRIPTION: Tests the Go function by comparing its output to the expected Go proverb about memory sharing. Fails the test if the output doesn't match the expected string.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709160352-0d003b9c4bfa.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc TestGo(t *testing.T) {\n\tgo1 := \"Don't communicate by sharing memory, share memory by communicating.\"\n\tif out := Go(); out != go1 {\n\t\tt.Errorf(\"Go() = %q, want %q\", out, go1)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition with Indirect Dependency\nDESCRIPTION: A minimal go.mod file defining a module with Go 1.14 compatibility and a single indirect dependency. This is part of the test setup to verify vendor/modules.txt generation behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_unused_only.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/m\ngo 1.14\n\nrequire example.com v1.0.0 // indirect\n```\n\n----------------------------------------\n\nTITLE: Testing cgo with Go Assembly Compatibility Script\nDESCRIPTION: A shell test script that verifies a cgo package containing a Go assembly file fails to build with the correct error message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_asm_error.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n[!cgo] skip\n\n# Test that cgo package can't contain a go assembly file.\n\n# Ensure the build fails and reports that the package has a Go assembly file.\n! go build cgoasm\nstderr 'package using cgo has Go assembly file'\n```\n\n----------------------------------------\n\nTITLE: Setting up a Go Module with Subpackages\nDESCRIPTION: Defines a `go.mod` file and simple Go source files structured in a way to create a module with subpackages, illustrating Go's module and package structuring.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_path.txt#2025-04-22_snippet_7\n\nLANGUAGE: Golang\nCODE:\n```\n-- dotname/go.mod --\nmodule example.com/dotname\n\ngo 1.16\n-- dotname/.dot/dot.go --\npackage dot\n-- dotname/use/use.go --\npackage use\n\nimport _ \"example.com/dotname/.dot\"\n```\n\n----------------------------------------\n\nTITLE: Test File with Sleep for First Package\nDESCRIPTION: A simple Go test file for the first sleepy package that imports testing and time packages. It contains a single test function that sleeps for 200 milliseconds.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_pattern.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nimport (\n\t\"testing\"\n\t\"time\"\n)\n\nfunc Test1(t *testing.T) {\n\ttime.Sleep(200 * time.Millisecond)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Go Package (`go`)\nDESCRIPTION: This Go code snippet defines a simple package named `pseudoupgrade`. It declares a single exported constant `X` with an integer value of 1. This serves as the basic implementation for the `example.com/pseudoupgrade` module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_pseudoupgrade_v0.0.0-20190430073000-30950c05d534.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage pseudoupgrade\n\nconst X = 1\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Patch Updates\nDESCRIPTION: A comprehensive test script for Go module patch version updates. Tests various scenarios including upgrading direct and indirect dependencies with @patch version query and -u=patch flag.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_upgrade_patch.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n[short] skip\n\n# Initially, we are at v1.0.0 for all dependencies.\ngo get\ncp go.mod go.mod.orig\ngo list -m all\nstdout '^patch.example.com/direct v1.0.0'\nstdout '^patch.example.com/indirect v1.0.0'\n! stdout '^patch.example.com/depofdirectpatch'\n\n# @patch should be rejected for modules not already in the build list.\n! go get patch.example.com/depofdirectpatch@patch\nstderr '^go: can\\'t query version \"patch\" of module patch.example.com/depofdirectpatch: no existing version is required$'\ncmp go.mod.orig go.mod\n\n# get -u=patch, with no arguments, should patch-update all dependencies\n# of the package in the current directory, pulling in transitive dependencies\n# and also patching those.\ncp go.mod.orig go.mod\ngo get -u=patch\ngo list -m all\nstdout '^patch.example.com/direct v1.0.1'\nstdout '^patch.example.com/indirect v1.0.1'\nstdout '^patch.example.com/depofdirectpatch v1.0.0'\n\n# 'get all@patch' should patch the modules that provide packages in 'all'.\ncp go.mod.orig go.mod\ngo get all@patch\ngo list -m all\nstdout '^patch.example.com/direct v1.0.1'\nstdout '^patch.example.com/indirect v1.0.1'\nstdout '^patch.example.com/depofdirectpatch v1.0.0'\n\n# ...but 'all@patch' should fail if any of the affected modules do not already\n# have a selected version.\ncp go.mod.orig go.mod\ngo mod edit -droprequire=patch.example.com/direct\ncp go.mod go.mod.dropped\n! go get all@patch\nstderr '^go: all@patch: can\\'t query version \"patch\" of module patch.example.com/direct: no existing version is required$'\ncmp go.mod.dropped go.mod\n\n# Requesting the direct dependency with -u=patch but without an explicit version\n# should patch-update it and its dependencies.\ncp go.mod.orig go.mod\ngo get -u=patch patch.example.com/direct\ngo list -m all\nstdout '^patch.example.com/direct v1.0.1'\nstdout '^patch.example.com/indirect v1.0.1'\nstdout '^patch.example.com/depofdirectpatch v1.0.0'\n\n# Requesting only the indirect dependency should not update the direct one.\ncp go.mod.orig go.mod\ngo get -u=patch patch.example.com/indirect\ngo list -m all\nstdout '^patch.example.com/direct v1.0.0'\nstdout '^patch.example.com/indirect v1.0.1'\n! stdout '^patch.example.com/depofdirectpatch'\n\n# @patch should apply only to the specific module,\n# but the result must reflect its upgraded requirements.\ncp go.mod.orig go.mod\ngo get patch.example.com/direct@patch\ngo list -m all\nstdout '^patch.example.com/direct v1.0.1'\nstdout '^patch.example.com/indirect v1.0.0'\nstdout '^patch.example.com/depofdirectpatch v1.0.0'\n\n# An explicit @patch should override a general -u.\ncp go.mod.orig go.mod\ngo get -u patch.example.com/direct@patch\ngo list -m all\nstdout '^patch.example.com/direct v1.0.1'\nstdout '^patch.example.com/indirect v1.1.0'\nstdout '^patch.example.com/depofdirectpatch v1.0.0'\n\n# An explicit @latest should override a general -u=patch.\ncp go.mod.orig go.mod\ngo get -u=patch patch.example.com/direct@latest\ngo list -m all\nstdout '^patch.example.com/direct v1.1.0'\nstdout '^patch.example.com/indirect v1.0.1'\n! stdout '^patch.example.com/depofdirectpatch'\n\n# Standard library packages cannot be upgraded explicitly.\ncp go.mod.orig go.mod\n! go get cmd/vet@patch\nstderr 'go: can\\'t request explicit version \"patch\" of standard library package cmd/vet$'\n\n# However, standard-library packages without explicit versions are fine.\ngo get -u=patch cmd/go\n\n# We can upgrade to a new version of a module with no root package.\ngo get example.com/noroot@v1.0.0\ngo list -m all\nstdout '^example.com/noroot v1.0.0$'\ngo get example.com/noroot@patch\ngo list -m all\nstdout '^example.com/noroot v1.0.1$'\n```\n\n----------------------------------------\n\nTITLE: Verifying Absence of Pseudo-Import Path in Go Coverage Profile (Shell)\nDESCRIPTION: This shell command uses `grep` with negation (`!`) to assert that the string \"command-line-arguments\" is *not* present in the coverage profile `blah.prof`. This verifies that the profile uses proper file paths instead of the default pseudo-import path sometimes assigned by the Go toolchain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_test_localpkg_filepath.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n! grep command-line-arguments blah.prof\n```\n\n----------------------------------------\n\nTITLE: Go Module Test Environment Setup\nDESCRIPTION: Shell commands to set up test environment with multiple GOPATH entries and test package installation behavior\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_shadow_gopath.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=off\nenv GOPATH=$WORK/gopath1${:}$WORK/gopath2\n\nmkdir $WORK/gopath1/src/test\nmkdir $WORK/gopath2/src/test\ncp main.go $WORK/gopath2/src/test/main.go\ncd $WORK/gopath2/src/test\n\n! go install\nstderr 'no install location for.*gopath2.src.test: hidden by .*gopath1.src.test'\n```\n\n----------------------------------------\n\nTITLE: Unprintable Character Deprecated Module Definition\nDESCRIPTION: Defines an 'unprintable' Go module with a deprecation message containing non-printable characters.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_deprecate_message.txt#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n// Deprecated: message contains ASCII BEL\nmodule unprintable\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Go Workspace Configuration\nDESCRIPTION: Defines a Go workspace using go.work file that includes multiple module paths.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_issue51204.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\n\nuse (\n\t./test2\n\t./test2/sub\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Resolution with Empty Cache and Direct Proxy\nDESCRIPTION: This test case verifies that the Go module system correctly resolves module versions when using GOPROXY=direct with an empty module cache. It specifically tests that the pseudo-version resolution for golang.org/x/tools works properly when getting golang.org/x/tools/gopls@master.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_direct.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n[!net:cloud.google.com] skip\n[!git] skip\n\nenv GO111MODULE=on\nenv GOPROXY=direct\nenv GOSUMDB=off\n\ngo list -m cloud.google.com/go@main\n! stdout 'v0.0.0-'\n```\n\n----------------------------------------\n\nTITLE: Testing Transitive Upgrades with 'go get -u' (Shell)\nDESCRIPTION: Executes 'go get -u' to upgrade all dependencies and compares the result with the expected state.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue47979.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncp go.mod.orig go.mod\ngo get -u .\ncmp go.mod go.mod.want\n```\n\n----------------------------------------\n\nTITLE: Listing Packages within GOROOT Source in Shell\nDESCRIPTION: The 'go list' command is used to list packages inside GOROOT/src, respecting the module boundaries and excluding vendored packages, which helps maintain a clean separation of modules and dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_std.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo list $GOROOT/src/...\n```\n\n----------------------------------------\n\nTITLE: Go Module X Implementation\nDESCRIPTION: Module X with test file that imports module Y. Provides a simple package for testing module dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune_all.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/x\n\ngo 1.18\n```\n\nLANGUAGE: go\nCODE:\n```\npackage x\n```\n\nLANGUAGE: go\nCODE:\n```\npackage x\nimport _ \"example.com/y\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Go Module Name in go.mod File - Plaintext\nDESCRIPTION: Defines the module name in the standard go.mod file for the Go toolchain package. The snippet sets 'golang.org/toolchain' as the module's canonical name, which is required for Go module-aware builds. Dependencies are handled via Go tooling. The module path must be correctly formed to ensure proper dependency resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.22.5.linux-amd64.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ngolang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Configuration\nDESCRIPTION: Basic go.mod file configuration for a module named 'm' using Go version 1.18. This sets up the minimal requirements for a Go module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_fallback.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Test Script for Import and FindOnly Functionality\nDESCRIPTION: A bash script that tests go/build's Import functionality across different module modes (off, auto, on) and directory contexts (inside/outside GOPATH/src).\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gobuild_import.txt#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# go/build's Import should find modules by invoking the go command\n\ngo build -o $WORK ./testimport ./testfindonly\n\n# GO111MODULE=off\nenv GO111MODULE=off\n! exec $WORK/testimport$GOEXE gobuild.example.com/x/y/z/w .\n\n# GO111MODULE=auto in GOPATH/src\nenv GO111MODULE=auto\nexec $WORK/testimport$GOEXE gobuild.example.com/x/y/z/w .\n\n# GO111MODULE=auto outside GOPATH/src\ncd $GOPATH/other\nenv GO111MODULE=auto\nexec $WORK/testimport$GOEXE other/x/y/z/w .\nstdout w2.go\n\n! exec $WORK/testimport$GOEXE gobuild.example.com/x/y/z/w .\nstderr 'no required module provides package gobuild.example.com/x/y/z/w; to add it:\\n\\tgo get gobuild.example.com/x/y/z/w'\n\ncd z\nexec $WORK/testimport$GOEXE other/x/y/z/w .\nstdout w2.go\n\n# GO111MODULE=on outside GOPATH/src\nenv GO111MODULE=\nexec $WORK/testimport$GOEXE other/x/y/z/w .\nstdout w2.go\nenv GO111MODULE=on\nexec $WORK/testimport$GOEXE other/x/y/z/w .\nstdout w2.go\n\n# GO111MODULE=on in GOPATH/src\ncd $GOPATH/src\nenv GO111MODULE=\nexec $WORK/testimport$GOEXE gobuild.example.com/x/y/z/w .\nstdout w1.go\nenv GO111MODULE=on\nexec $WORK/testimport$GOEXE gobuild.example.com/x/y/z/w .\nstdout w1.go\ncd w\nexec $WORK/testimport$GOEXE gobuild.example.com/x/y/z/w ..\nstdout w1.go\n\n# go/build's Import in FindOnly mode should find directories by invoking the go command\n#\n# Calling build.Import in build.FindOnly mode on an import path of a Go package\n# that produces errors when loading (e.g., due to build constraints not matching\n# the current build context) should return the package directory and nil error.\n\n# Issue 31603: Import with non-empty srcDir should work.\nenv GO111MODULE=on\nexec $WORK/testfindonly$GOEXE gobuild.example.com/x/y/z/i $WORK\n! stdout 'build constraints'\nstdout '^dir='$WORK'.+i err=<nil>$'\n\n# Issue 37153: Import with empty srcDir should work.\nenv GO111MODULE=on\nexec $WORK/testfindonly$GOEXE gobuild.example.com/x/y/z/i ''\n! stdout 'build constraints'\nstdout '^dir='$WORK'.+i err=<nil>$'\n```\n\n----------------------------------------\n\nTITLE: Primality Test Iterations\nDESCRIPTION: Series of primality test iterations showing intermediate values for W (test number) and B (base), with results indicating either 'PossiblyPrime' or 'Composite'. Each iteration follows the pattern b^m = w-1 or b^m = 1.\nSOURCE: https://github.com/golang/go/blob/master/src/crypto/internal/fips140/rsa/testdata/miller_rabin_tests.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n# b^m = w-1\nResult = PossiblyPrime\nW = 550fda19f97cdfbd13930911ef6e9e1cb2b7b5215a35c215d51ebffeb435642174cbe998f4451bde2d4bd2ce92ab5b9493b657f1d77d9ad4d348550247b903906109c608ecba7f88c239c76f0afc231e7f1ac1cee87b4c34448a16f7979ff4c18e65e05d5a86909615fe56587576962a2cb3ba467d9806445a0f039907601af77ba7d07578eff612364fbcac11d35e243734aa6d9a6cdcf912a2dd0a12ba7e87\nB = 36e6aa9acb399a50f52be0324dcef05f3cff3117f94538f6d0952b7d7be88ba4dc75d843ff7ff775e11f55c86ba6b2a6ddebd8850c33424b4d35c66321af426662e7074f0a2409a9ccf1c66ef7d823efc8240b8f3c7e9e8dd65a64e8a3ca5b26695ef17171ffe136c0593b179414c5b5ad0d66f2a25146c38b2f97e60b0472ed72de34bff1b6ac186f23645a1bbe909cdfc2b2d861eb44931568f1bb117d8a0c\n```\n\n----------------------------------------\n\nTITLE: Testing Reuse of Proxy-latest.json with Direct Go Proxy and Revalidation of Origin - Shell\nDESCRIPTION: After resetting 'GOPROXY' to 'direct', this snippet asks 'go list' to reuse data from proxy-latest.json even though the proxy's origin metadata is incomplete. It confirms that 'go list' still returns the correct full origin details fetched directly from the VCS, not just those present in the proxy cache, and that no 'Reuse' key appears. This safeguards against incomplete reuse from proxies and ensures accurate VCS polling. Requires previous proxy-latest.json and a direct VCS-accessible environment.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_issue61423.txt#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n# With GOPROXY=direct, the -reuse flag has an effect, but\n# the Origin data from the proxy should not be sufficient\n# for the proxy response to be reused.\n\nenv GOPROXY=direct\n\ngo list -reuse=proxy-latest.json -m -json vcs-test.golang.org/git/issue61415.git@latest\nstdout '\"Version\": \"v0.0.0-20231114180001-f213069baa68\"'\nstdout '\"Origin\":'\nstdout '\"VCS\": \"git\"'\nstdout '\"Hash\": \"f213069baa68ec26412fb373c7cf6669db1f8e69\"'\nstdout '\"Ref\": \"HEAD\"'\nstdout '\"TagSum\": \"t1:47DEQpj8HBSa\\+/TImW\\+5JCeuQeRkm5NMpJWZG3hSuFU=\"'\n! stdout '\"Reuse\":'\n\n```\n\n----------------------------------------\n\nTITLE: Checking Go Command Dependencies on macOS\nDESCRIPTION: This shell command checks if cgo is used as a dependency in the cmd/go standard library package on macOS. It utilizes the `go list -deps` command to list all dependencies of the Go command and ensures the output does not include the `runtime/cgo`. This helps maintain predictable builds by avoiding dynamic linking issues on macOS.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/darwin_no_cgo.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo list -deps cmd/go\n! stdout runtime/cgo\n```\n\n----------------------------------------\n\nTITLE: Defining quote.go Package with Sayings Collection in Go\nDESCRIPTION: The main package file that defines four functions for returning different quotes: Hello returns a greeting, Glass returns a phrase about eating glass, Go returns a Go programming proverb, and Opt returns a statement about optimization.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.5.3-pre1.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Copyright 2018 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// Package quote collects pithy sayings.\npackage quote // import \"rsc.io/quote\"\n\nimport \"rsc.io/sampler\"\n\n// A CHANGE!\n\n// Hello returns a greeting.\nfunc Hello() string {\n\treturn sampler.Hello()\n}\n\n// Glass returns a useful phrase for world travelers.\nfunc Glass() string {\n\t// See http://www.oocities.org/nodotus/hbglass.html.\n\treturn \"I can eat glass and it doesn't hurt me.\"\n}\n\n// Go returns a Go proverb.\nfunc Go() string {\n\treturn \"Don't communicate by sharing memory, share memory by communicating.\"\n}\n\n// Opt returns an optimization truth.\nfunc Opt() string {\n\t// Wisdom from ken.\n\treturn \"If a program is too slow, it must have a loop.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Package Definition with '@' in Path\nDESCRIPTION: Go file within a directory containing '@' in its name, used to test package resolution with special characters in the path.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_fs_patterns.txt#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\npackage bad\n```\n\n----------------------------------------\n\nTITLE: Testing Module Download with Invalid Pseudo-Version\nDESCRIPTION: Verifies behavior when attempting to download a module using an invalid pseudo-version string.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/reuse_git.txt#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n! go mod download -reuse=hellononpseudo.json -x -json vcs-test.golang.org/git/hello.git@v0.0.0-20220101120101-123456789abc\n```\n\n----------------------------------------\n\nTITLE: Go File Importing golang.org/x/text\nDESCRIPTION: This Go file imports the golang.org/x/text package as a blank import, used to test indirect dependency behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_indirect.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\npackage x\nimport _ \"golang.org/x/text\"\n```\n\n----------------------------------------\n\nTITLE: Empty module definition\nDESCRIPTION: Module definition for 'example.com/empty', which contains no packages and is used to test the behavior of 'go list' with an empty module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_patterns.txt#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/empty\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module File for Testing\nDESCRIPTION: Creates a minimal go.mod file for the test module, specifying the module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo_other_branch.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nmodule x\n\ngo 1.12\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition with Fixed Version\nDESCRIPTION: Go module definition requiring a specific version (v1.5.1) of rsc.io/quote package\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_upgrade.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule x\nrequire rsc.io/quote v1.5.1\n```\n\n----------------------------------------\n\nTITLE: Setting up environment and copying original files\nDESCRIPTION: Sets the GOFLAGS environment variable to use an alternate mod file and creates copies of the original go.mod and go.sum files.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/modfile_flag.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GOFLAGS=-modfile=go.alt.mod\ncp go.mod go.mod.orig\ncp go.sum go.sum.orig\n```\n\n----------------------------------------\n\nTITLE: Validating Fuzzing Logs in Go\nDESCRIPTION: A script to check the logs produced by the fuzzing tests. It verifies that the coordinator only tests seed values and the worker tests mutated values on the fuzz target.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutator.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// +build ignore\n\npackage main\n\nimport (\n\t\"bufio\"\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tcoordPath, workerPath := os.Args[1], os.Args[2]\n\n\tcoordLog, err := os.Open(coordPath)\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n\tdefer coordLog.Close()\n\tif err := checkCoordLog(coordLog); err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n\n\tworkerLog, err := os.Open(workerPath)\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n\tdefer workerLog.Close()\n\tif err := checkWorkerLog(workerLog); err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n}\n\nfunc checkCoordLog(r io.Reader) error {\n\tb, err := io.ReadAll(r)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif string(bytes.TrimSpace(b)) != `FuzzB \"seed\"` {\n\t\treturn fmt.Errorf(\"coordinator: did not test FuzzB seed\")\n\t}\n\treturn nil\n}\n\nfunc checkWorkerLog(r io.Reader) error {\n\tscan := bufio.NewScanner(r)\n\tvar sawAMutant bool\n\tfor scan.Scan() {\n\t\tline := scan.Text()\n\t\tif !strings.HasPrefix(line, \"FuzzA \") {\n\t\t\treturn fmt.Errorf(\"worker: tested something other than target: %s\", line)\n\t\t}\n\t\tif strings.TrimPrefix(line, \"FuzzA \") != `\"seed\"` {\n\t\t\tsawAMutant = true\n\t\t}\n\t}\n\tif err := scan.Err(); err != nil && err != bufio.ErrTooLong {\n\t\treturn err\n\t}\n\tif !sawAMutant {\n\t\treturn fmt.Errorf(\"worker: did not test any mutants\")\n\t}\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Package A v0.1.0 Definition\nDESCRIPTION: Module definition and implementation for example.net/a v0.1.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patch.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/a\n\ngo 1.16\n\nrequire example.net/b v0.1.0\n```\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\nimport _ \"example.net/b\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Go Module File (Go Mod)\nDESCRIPTION: This snippet shows the content of a minimal `go.mod` file. It defines a module named `m`. This file is used as the basis for the module operations in the preceding shell commands.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badzip.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n-- go.mod --\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Testing Go Fuzzing Minimization for Recoverable Errors\nDESCRIPTION: Tests that validate the minimization process for recoverable errors, ensuring that the fuzzer correctly reduces test cases to the minimum size that still triggers the error. It verifies both the process and the resulting test data.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_minimize.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Test that minimization is working for recoverable errors.\n! go test -fuzz=FuzzMinimizerRecoverable -run=FuzzMinimizerRecoverable -fuzztime=10000x .\n! stdout '^ok'\nstdout 'got the minimum size!'\n# The error message that was printed should be for the one written to testdata.\nstdout 'contains a non-zero byte of length 50'\nstdout FAIL\n\n# Check that the bytes written to testdata are of length 50 (the minimum size)\ngo run ./check_testdata FuzzMinimizerRecoverable 50\n\n# Test that re-running the minimized value causes a crash.\n! go test -run=FuzzMinimizerRecoverable .\nrm testdata\n\n# Test that minimization is working for recoverable errors. Run it with -v this\n# time to ensure the command line output still looks right.\n! go test -v -fuzz=FuzzMinimizerRecoverable -run=FuzzMinimizerRecoverable -fuzztime=10000x .\n! stdout '^ok'\nstdout 'got the minimum size!'\n# The error message that was printed should be for the one written to testdata.\nstdout 'contains a non-zero byte of length 50'\nstdout FAIL\n\n# Check that the bytes written to testdata are of length 50 (the minimum size)\ngo run ./check_testdata FuzzMinimizerRecoverable 50\n\n# Test that re-running the minimized value causes a crash.\n! go test -run=FuzzMinimizerRecoverable .\nrm testdata\n```\n\n----------------------------------------\n\nTITLE: Shell Test Script for Go Mod Tidy\nDESCRIPTION: Test script that verifies error handling of go mod tidy command when executed in directories without go.mod file. Sets up test environment and validates error messages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_temp.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nenv GOROOT=$TESTGO_GOROOT\nenv TMP=$WORK\nenv TMPDIR=$WORK\nmkdir $WORK/child\n\n! go mod tidy\n! stdout .\nstderr 'go: go.mod file not found in current directory or any parent directory'\n\ncd $WORK/child\n! go mod tidy\n! stdout .\nstderr 'go: go.mod file not found in current directory or any parent directory'\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Missing Dependency\nDESCRIPTION: This go.mod file for example.net/a module demonstrates a scenario where a dependency (example.net/b) is imported in the code but not declared in the go.mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_extra.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/a\n\ngo 1.15\n\n// example.net/a needs a dependency on example.net/b, but lacks a requirement\n// on it (perhaps due to a missed file in a VCS commit).\n```\n\n----------------------------------------\n\nTITLE: Testing Recursive Module Cleaning with Bug Documentation\nDESCRIPTION: Tests the 'go clean -r -modcache' command which should clean only dependencies within the main module. Documents a known bug (issue #28680) where it cleans across module boundaries.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_clean_cache.txt#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd r\nexists ./test.out\nexists ../replaced/test.out\ngo clean -r -modcache\n! exists ./test.out\n! exists ../replaced/test.out  # BUG: should still exist\n```\n\n----------------------------------------\n\nTITLE: Creating Main Package Executables for Dependency Tools - Go\nDESCRIPTION: These Go main package files define minimal main functions for dependency tools (bar and baz subcommands) in the example.com/dependency module. Each file allows its respective package to be built as a tool or binary, suitable for plugin or CLI usage within the workspace.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_tool.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\\n\\nfunc main(){}\\n\n```\n\nLANGUAGE: go\nCODE:\n```\npackage main\\n\\nfunc main() {}\\n\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition with Replacements\nDESCRIPTION: Defines a Go module with version-specific replacements for split and nested packages. Sets up test environment with local module replacements.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_split.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.16\n\nrequire example.net/split v0.2.0\n\nreplace (\n\texample.net/split v0.1.0 => ./split.1\n\texample.net/split v0.2.0 => ./split.2\n\texample.net/split v0.2.1 => ./split.2\n\texample.net/split v0.3.0 => ./split.3\n\texample.net/split/nested v0.0.0 => ./nested.0\n\texample.net/split/nested v0.1.0 => ./nested.1\n\texample.net/split/nested v0.2.0 => ./nested.2\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with External Dependency - Go Module\nDESCRIPTION: Specifies a Go module named mod.example targeting Go version 1.20 and requiring the external module rsc.io/quote/v3 version 3.0.0. This configuration enables other Go source files in the project to use the defined module and import the dependency. Prerequisites include Go 1.20+ installed, no function parameters or output, and the file must be named go.mod and reside in the project root.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_build_pkg_select.txt#2025-04-22_snippet_1\n\nLANGUAGE: mod\nCODE:\n```\nmodule mod.example\n\ngo 1.20\n\nrequire rsc.io/quote/v3 v3.0.0\n```\n\n----------------------------------------\n\nTITLE: Testing Reserved Package Paths in Go\nDESCRIPTION: Shell script that verifies 'example' and 'test' package paths are reserved and unavailable in Go standard library. Uses 'go list' command to check path availability and validates error messages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_reserved.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo list example/... test/...\nstderr 'go: warning: \"example/...\" matched no packages$'\nstderr 'go: warning: \"test/...\" matched no packages$'\n! stdout .\n```\n\n----------------------------------------\n\nTITLE: Testing Non-Go-Gettable Module Paths\nDESCRIPTION: Tests support for modules that cannot be fetched via go get (issue #30513), verifying that local-only module paths are allowed and work with requirements and replacements pointing to local directories.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit.txt#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n# golang.org/issue/30513: don't require go-gettable module paths.\ncd $WORK/local\ngo mod init foo\ngo mod edit -module local-only -require=other-local@v1.0.0 -replace other-local@v1.0.0=./other\ncmpenv go.mod go.mod.edit\n```\n\n----------------------------------------\n\nTITLE: Main Module Configuration\nDESCRIPTION: Main go.mod file defining module dependencies and replacements for the example project.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_issue60313.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example\n\ngo 1.21\n\nrequire (\n\texample.net/a v0.1.0\n\texample.net/b v0.1.0\n)\n\nrequire example.net/outer/inner v0.1.0 // indirect\n\nreplace (\n\texample.net/a v0.1.0 => ./a\n\texample.net/b v0.1.0 => ./b\n\texample.net/outer v0.1.0 => ./outer\n\texample.net/outer/inner v0.1.0 => ./inner\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Go 1.13 behavior with modules\nDESCRIPTION: Verifies that Go 1.13 defaults to -mod=mod when no explicit flag is set.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_auto.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nenv GOFLAGS=\ngo mod edit -go=1.13\n\ngo list -f {{.Dir}} -tags tools -e all\nstdout '^'$WORK'[/\\\\]auto$'\nstdout '^'$GOPATH'[/\\\\]pkg[/\\\\]mod[/\\\\]example.com[/\\\\]printversion@v1.0.0$'\nstdout '^'$WORK'[/\\\\]auto[/\\\\]replacement-version$'\n\ngo list -m -f '{{.Dir}}' all\nstdout '^'$WORK'[/\\\\]auto$'\nstdout '^'$GOPATH'[/\\\\]pkg[/\\\\]mod[/\\\\]example.com[/\\\\]printversion@v1.0.0$'\nstdout '^'$WORK'[/\\\\]auto[/\\\\]replacement-version$'\n```\n\n----------------------------------------\n\nTITLE: Go file with Printf error in vetpkg\nDESCRIPTION: This snippet contains a Go file with a Printf statement that has an incorrect number of arguments, which should trigger a vet error.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet.txt#2025-04-22_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\npackage p\n\nimport \"fmt\"\n\nfunc f() {\n\tfmt.Printf(\"%d\")\n}\n```\n\n----------------------------------------\n\nTITLE: Main Package Declaration with Export\nDESCRIPTION: Basic main package declaration with an exported variable X and empty main function\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/import_main.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nvar X int\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Basic Go module definition requiring rsc.io/quote v1.0.0\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule x\nrequire rsc.io/quote v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Accessing Outermost Boundaries in SectionReader - io - Go\nDESCRIPTION: The Outer() method on *SectionReader returns the underlying io.ReaderAt plus starting and ending offsets (int64). Useful for locating the absolute boundaries of the section within the parent data.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_17\n\nLANGUAGE: Go\nCODE:\n```\nfunc (r *SectionReader) Outer() (ReaderAt, int64, int64)\n```\n\n----------------------------------------\n\nTITLE: Test23 Package Implementation\nDESCRIPTION: Package demonstrating vendor directory resolution with v2 and v3 imports, showing preference for sub/vendor over root vendor.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_complex.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage test23\n\n// Check that vendor/v3 is used but vendor/v2 is NOT used (sub/vendor/v2 wins).\n\nimport (\n\t\"v2\"\n\t\"v3\"\n)\n\nconst x = v3.ComplexNestVendorV3\nconst y = v2.ComplexNestSubVendorV2\n```\n\n----------------------------------------\n\nTITLE: Go Module with Standard Library Dependencies Only\nDESCRIPTION: A Go program that only uses standard library packages to print build information. This demonstrates a simple Go application without any external dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_outside.txt#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"runtime/debug\"\n)\n\nfunc main() {\n\tinfo, ok := debug.ReadBuildInfo()\n\tif !ok {\n\t\tpanic(\"missing build info\")\n\t}\n\tfmt.Fprintf(os.Stdout, \"path is %s\\n\", info.Path)\n\tfmt.Fprintf(os.Stdout, \"main is %s %s\\n\", info.Main.Path, info.Main.Version)\n\tfor _, m := range info.Deps {\n\t\tfmt.Fprintf(os.Stdout, \"using %s %s\\n\", m.Path, m.Version)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Module Version Metadata (JSON)\nDESCRIPTION: Defines the version metadata for the module as `v2.1.0-pre+incompatible` in JSON format, typically stored in a `.info` file used by Go tooling. The `+incompatible` suffix signifies that this version predates Go modules or lacks a `go.mod` file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_split-incompatible_v2.1.0-pre+incompatible.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n-- .info --\n{\"Version\": \"v2.1.0-pre+incompatible\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module for Custom 'std' Package\nDESCRIPTION: This go.mod file defines a module named 'std' with Go version 1.12. It's used to simulate a custom standard library environment for testing purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_alt_goroot.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule std\n\ngo 1.12\n```\n\n----------------------------------------\n\nTITLE: Module B Configuration (v0.2.0)\nDESCRIPTION: Configuration for module B version 0.2.0 requiring module C version 0.2.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue65363.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/b\n\ngo 1.16\n\nrequire example.net/c v0.2.0\n```\n\nLANGUAGE: go\nCODE:\n```\npackage b\n```\n\nLANGUAGE: go\nCODE:\n```\npackage b_test\n\nimport _ \"example.net/c\"\n```\n\n----------------------------------------\n\nTITLE: Load Import Error Test\nDESCRIPTION: Test file that imports a package with loading errors to verify error propagation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_json.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage loadimporterror\n\nimport _ \"m/loaderror\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Fail Fast Test Cases in Go\nDESCRIPTION: This snippet contains the implementation of various test cases to verify the fail-fast functionality in Go's testing framework. It includes parallel and non-parallel tests, subtests, and fatal tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fail_fast.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage failfast\n\nimport \"testing\"\n\nfunc TestA(t *testing.T) {\n\t// Edge-case testing, mixing unparallel tests too\n\tt.Logf(\"LOG: %s\", t.Name())\n}\n\nfunc TestFailingA(t *testing.T) {\n\tt.Errorf(\"FAIL - %s\", t.Name())\n}\n\nfunc TestB(t *testing.T) {\n\t// Edge-case testing, mixing unparallel tests too\n\tt.Logf(\"LOG: %s\", t.Name())\n}\n\nfunc TestParallelFailingA(t *testing.T) {\n\tt.Parallel()\n\tt.Errorf(\"FAIL - %s\", t.Name())\n}\n\nfunc TestParallelFailingB(t *testing.T) {\n\tt.Parallel()\n\tt.Errorf(\"FAIL - %s\", t.Name())\n}\n\nfunc TestParallelFailingSubtestsA(t *testing.T) {\n\tt.Parallel()\n\tt.Run(\"TestFailingSubtestsA1\", func(t *testing.T) {\n\t\tt.Errorf(\"FAIL - %s\", t.Name())\n\t})\n\tt.Run(\"TestFailingSubtestsA2\", func(t *testing.T) {\n\t\tt.Errorf(\"FAIL - %s\", t.Name())\n\t})\n}\n\nfunc TestFailingSubtestsA(t *testing.T) {\n\tt.Run(\"TestFailingSubtestsA1\", func(t *testing.T) {\n\t\tt.Errorf(\"FAIL - %s\", t.Name())\n\t})\n\tt.Run(\"TestFailingSubtestsA2\", func(t *testing.T) {\n\t\tt.Errorf(\"FAIL - %s\", t.Name())\n\t})\n}\n\nfunc TestFailingB(t *testing.T) {\n\tt.Errorf(\"FAIL - %s\", t.Name())\n}\n\nfunc TestFatalC(t *testing.T) {\n\tt.Fatalf(\"FAIL - %s\", t.Name())\n}\n\nfunc TestFatalD(t *testing.T) {\n\tt.Fatalf(\"FAIL - %s\", t.Name())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Commit with Tag\nDESCRIPTION: Adds go.mod and main.go files, creates an initial commit, renames the branch to master, and tags it as v1.0.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/commit-after-tag.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nat 2019-07-15T17:16:47-04:00\ngit add go.mod main.go\ngit commit -m 'all: add go.mod and main.go'\ngit branch -m master\ngit tag v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Parallel Execution Parameters in Go Test Command\nDESCRIPTION: These shell commands test that the 'go test' command rejects invalid -parallel flag values (-1 and 0). It verifies that appropriate error messages are displayed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_parallel_number.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n! go test -parallel -1 standalone_parallel_sub_test.go\nstdout '-parallel can only be given'\n\n! go test -parallel 0 standalone_parallel_sub_test.go\nstdout '-parallel can only be given'\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Dependencies\nDESCRIPTION: This snippet shows the content of a go.mod file defining a module with its dependencies and replacements.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pkgtags.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/m\n\ngo 1.15\n\nreplace (\n\texample.net/tools v0.1.0 => ./tools\n\texample.net/cmd v0.1.0 => ./cmd\n\texample.net/testonly v0.1.0 => ./testonly\n\texample.net/missing v0.1.0 => ./missing\n)\n```\n\n----------------------------------------\n\nTITLE: Simple Go Program with Relative Import\nDESCRIPTION: A basic Go program that demonstrates importing a package from a relative path. The program imports the 'easysub' package from a subdirectory and calls its Hello function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_local.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"./easysub\"\n\nfunc main() {\n\teasysub.Hello()\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Retraction Behavior\nDESCRIPTION: This snippet contains a series of shell commands and Go module operations to test various scenarios involving retracted module versions. It includes tests for upgrading, downgrading, and specific version requests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_retract.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# 'go get pkg' should not upgrade to a retracted version.\ncp go.mod.orig go.mod\ngo mod edit -require example.com/retract/self/prev@v1.1.0\ngo get example.com/retract/self/prev\ngo list -m example.com/retract/self/prev\nstdout '^example.com/retract/self/prev v1.1.0$'\n\n# 'go get pkg' should not downgrade from a retracted version when no higher\n# version is available.\ncp go.mod.orig go.mod\ngo mod edit -require example.com/retract/self/prev@v1.9.0\ngo get example.com/retract/self/prev\nstderr '^go: warning: example.com/retract/self/prev@v1.9.0: retracted by module author: self$'\nstderr '^go: to switch to the latest unretracted version, run:\\n\\tgo get example.com/retract/self/prev@latest\\n$'\ngo list -m example.com/retract/self/prev\nstdout '^example.com/retract/self/prev v1.9.0$'\n\n# 'go get pkg@latest' should downgrade from a retracted version.\ncp go.mod.orig go.mod\ngo mod edit -require example.com/retract/self/prev@v1.9.0\ngo get example.com/retract/self/prev@latest\ngo list -m example.com/retract/self/prev\nstdout '^example.com/retract/self/prev v1.1.0$'\n\n# 'go get pkg@version' should update to a specific version, even if that\n# version is retracted.\ncp go.mod.orig go.mod\ngo get example.com/retract@v1.0.0-bad\nstderr '^go: warning: example.com/retract@v1.0.0-bad: retracted by module author: bad$'\ngo list -m example.com/retract\nstdout '^example.com/retract v1.0.0-bad$'\n\n# 'go get -u' should not downgrade from a retracted version when no higher\n# version is available.\ncp go.mod.orig go.mod\ngo mod edit -require example.com/retract/self/prev@v1.9.0\ngo get -u ./use\nstderr '^go: warning: example.com/retract/self/prev@v1.9.0: retracted by module author: self$'\ngo list -m example.com/retract/self/prev\nstdout '^example.com/retract/self/prev v1.9.0$'\n\n# 'go get' should warn if a module needed to build named packages is retracted.\n# 'go get' should not warn about unrelated modules.\ngo get ./empty\n! stderr retracted\ngo get ./use\nstderr '^go: warning: example.com/retract/self/prev@v1.9.0: retracted by module author: self$'\n```\n\n----------------------------------------\n\nTITLE: Testing GOTOOLCHAIN=local Behavior\nDESCRIPTION: Tests how GOTOOLCHAIN=local enforces using only the local toolchain without switching, causing errors when dependencies require newer versions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_exec_toolchain.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# GOTOOLCHAIN=local should NOT run the newer toolchain\nenv GOTOOLCHAIN=local\ncp go.mod.new go.mod\n! go get rsc.io/needgo121 rsc.io/needgo122 rsc.io/needgo123 rsc.io/needall\n! stderr switching\nstderr 'rsc.io/needgo122@v0.0.1 requires go >= 1.22'\nstderr 'rsc.io/needgo123@v0.0.1 requires go >= 1.23'\nstderr 'rsc.io/needall@v0.0.1 requires go >= 1.23'\nstderr 'requires go >= 1.23'\n! stderr 'requires go >= 1.21' # that's us!\ncmp go.mod go.mod.new\n```\n\n----------------------------------------\n\nTITLE: Initial Go Module File\nDESCRIPTION: The initial go.mod file for the test, which defines a module named 'example' with Go version 1.17. It doesn't yet contain the required dependency that will be added by 'go run -mod=mod'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_run_issue52331.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: Defining Main Package Go Module\nDESCRIPTION: This snippet shows the contents of a go.mod file for a main package module named 'm'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vcs_missing.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Testing .netrc and _netrc Support on Windows in Go\nDESCRIPTION: A test script that verifies both .netrc and _netrc file formats work for authentication on Windows. It tests access to private repositories with and without credentials to confirm proper authentication behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/netrc_issue66832.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# This test ensures .netrc and _netrc are both supported on windows.\n# See golang.org/issue/66832\n\n[!GOOS:windows] skip\n[short] skip\n\nenv GOPROXY=direct\nenv GOSUMDB=off\nmkdir $WORK\\home\nenv USERPROFILE=$WORK\\home\n\n# Make sure _netrc works.\ncp netrc_file $WORK\\home\\_netrc\ncp go.mod.orig go.mod\ngo mod tidy\ngo list all\nstdout vcs-test.golang.org/auth/or401\nstdout vcs-test.golang.org/auth/or404\nrm $WORK\\home\\_netrc\n\n# Without credentials, downloading a module from a path that requires HTTPS\n# basic auth should fail.\ncp go.mod.orig go.mod\n! go mod tidy\nstderr '^\\tserver response: ACCESS DENIED, buddy$'\nstderr '^\\tserver response: File\\? What file\\?$'\n\n# Make sure .netrc works as a fallback.\ncp netrc_file $WORK\\home\\.netrc\ncp go.mod.orig go.mod\ngo mod tidy\ngo list all\nstdout vcs-test.golang.org/auth/or401\nstdout vcs-test.golang.org/auth/or404\n```\n\n----------------------------------------\n\nTITLE: Testing Vendor Package Import\nDESCRIPTION: Tests that importing a vendor package incorrectly results in an error on the importing package. Verifies that 'vendor/p' must be imported as 'p'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_import_err.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage importvendor\nimport \"vendor/p\"\n```\n\n----------------------------------------\n\nTITLE: Testing Fuzzing Input Minimization in Go\nDESCRIPTION: Shell script that tests the fuzzing engine's minimization capabilities. It builds a test binary, runs fuzzing tests, and verifies that discovered inputs are properly minimized before being stored in the cache.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_minimize_interesting.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo test -c -fuzz=.  # Build using shared build cache for speed.\nenv GOCACHE=$WORK/gocache\nexec ./fuzz.test$GOEXE -test.fuzzcachedir=$GOCACHE/fuzz -test.fuzz=FuzzMinCache -test.fuzztime=1000x\ngo run check_cache/check_cache.go $GOCACHE/fuzz/FuzzMinCache\n```\n\n----------------------------------------\n\nTITLE: Testing Go PIE buildmode with race detector compatibility\nDESCRIPTION: Shell script that tests the Go compiler's ability to build code with both PIE (position-independent executable) mode and race detection enabled. The script checks platform compatibility and verifies execution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pie_race.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# go build -buildmode=pie -race main.go on Darwin should work without errors\n\n[!race] skip 'test requires race detector support'\n\n[!GOOS:darwin] ! go build -buildmode=pie -race\n[!GOOS:darwin] stderr '^-buildmode=pie not supported when -race is enabled on '$GOOS'/'$GOARCH'$'\n[!GOOS:darwin] stop 'not testing -buildmode=pie -race on platform that does not support it'\n\ngo build -buildmode=pie -race bytes\n! stderr .\n\n[short] stop 'not linking a binary in -short mode'\n\ngo build -buildmode=pie -race main.go\n! stderr .\nexec ./main\nstdout 'Hello, 世界'\n```\n\n----------------------------------------\n\nTITLE: Go Package Importing Another Package That Uses Internal\nDESCRIPTION: Defines a Go package `throughdep` that imports `golang.org/x/useinternal`. This package acts as an intermediary to test transitive dependency scenarios involving internal packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n-- throughdep/useinternal.go --\npackage throughdep\nimport _ \"golang.org/x/useinternal\"\n```\n\n----------------------------------------\n\nTITLE: Testing Actual Module Cache Cleaning\nDESCRIPTION: Tests the 'go clean -modcache' command which should actually delete all files in the module cache. Verifies that files no longer exist after cleaning.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_clean_cache.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngo clean -modcache\n! exists $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.0.info\n! exists $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.0.mod\n! exists $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.0.zip\n```\n\n----------------------------------------\n\nTITLE: Function Declarations in Go\nDESCRIPTION: Function declarations with various parameter types and return values, including error handling and callback functions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/api/testdata/src/pkg/p1/golden.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc Bar(int8, int16, int64)\nfunc Bar1(int8, int16, int64) uint64\nfunc Bar2(int8, int16, int64) (uint8, uint64)\nfunc BarE() Error\nfunc Now() Time\nfunc PlainFunc(int, int, string) (*B, error)\nfunc TakesFunc(func(int) int)\n```\n\n----------------------------------------\n\nTITLE: Downgrading Conflicting Module\nDESCRIPTION: Demonstrates how to resolve a conflict by downgrading the conflicting module to @none.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_ambiguous_pkg.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncp go.mod.orig go.mod\ngo mod edit -require=example.net/ambiguous@v0.1.0\n\ngo get example.net/ambiguous@none example.net/ambiguous/nested/pkg@v0.1.0\ngo list -m all\nstdout '^example.net/ambiguous/nested v0.1.0$'\n! stdout '^example.net/ambiguous '\n```\n\n----------------------------------------\n\nTITLE: Testing Module Download with Invalid Hash\nDESCRIPTION: Tests reuse functionality when downloading a module with an invalid commit hash to verify error handling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/reuse_git.txt#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n! go mod download -reuse=hellononhash.json -x -json vcs-test.golang.org/git/hello.git@1234567890123456789012345678901234567890\n```\n\n----------------------------------------\n\nTITLE: Verifying Coverage Output Consistency Using go test and go build -cover - Shell\nDESCRIPTION: This shell script sequence builds a Go project with coverage enabled, runs the executable to collect a coverage profile, and restores the coverage environment directory. It then analyzes coverage data and validates expected output patterns to ensure consistency. This script expects a Go project structure, access to the go toolchain, and sets specific environment variables for coverage output. Expected outputs are parsed using regex checks on the standard output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_main_import_path.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Build this program with -cover and run to collect a profile.\ngo build -cover -o $WORK/prog.exe .\n\n# Save off old GOCOVERDIR setting\nenv SAVEGOCOVERDIR=$GOCOVERDIR\n\nmkdir $WORK/covdata\nenv GOCOVERDIR=$WORK/covdata\nexec $WORK/prog.exe\n\n# Restore previous GOCOVERDIR setting\nenv GOCOVERDIR=$SAVEGOCOVERDIR\n\n# Report percent lines covered.\ngo tool covdata percent -i=$WORK/covdata\nstdout '\\s*mainwithtest\\s+coverage:'\n! stdout 'main\\s+coverage:'\n\n# Go test -cover should behave the same way.\ngo test -cover .\nstdout 'ok\\s+mainwithtest\\s+\\S+\\s+coverage:'\n! stdout 'ok\\s+main\\s+.*'\n\n```\n\n----------------------------------------\n\nTITLE: cgo Build Tag and cgotag Import - Go\nDESCRIPTION: This Go file has a '+build cgo' build tag so it is only included in cgo-enabled builds. It defines package p and performs a side-effect import of cgotag. Key parameter: CGO_ENABLED. Limitation: ignored if cgo is disabled.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_constraints.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// +build cgo\n\npackage p\n\nimport _ \"cgotag\"\n\n```\n\n----------------------------------------\n\nTITLE: Testing CGO_CFLAGS Environment Variable\nDESCRIPTION: Shell script that tests the go env command with CGO_CFLAGS to verify it does not create NUL files. This addresses golang.org/issue/36000.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/issue36000.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Tests golang.org/issue/36000\n\n[!cgo] skip\n\n# go env with CGO flags should not make NUL file\ngo env CGO_CFLAGS\n```\n\n----------------------------------------\n\nTITLE: Local Quote Module Implementation\nDESCRIPTION: Local implementation of the rsc.io/quote/v3 module that provides quote functions including a replaced version of GoV3() that returns a different quote.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Copyright 2018 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// Package quote collects pithy sayings.\npackage quote\n\nimport \"rsc.io/sampler\"\n\n// Hello returns a greeting.\nfunc HelloV3() string {\n\treturn sampler.Hello()\n}\n\n// Glass returns a useful phrase for world travelers.\nfunc GlassV3() string {\n\t// See http://www.oocities.org/nodotus/hbglass.html.\n\treturn \"I can eat glass and it doesn't hurt me.\"\n}\n\n// Go returns a REPLACED Go proverb.\nfunc GoV3() string {\n\treturn \"Concurrency is not parallelism.\"\n}\n\n// Opt returns a optimization truth.\nfunc OptV3() string {\n\t// Wisdom from ken.\n\treturn \"If a program is too slow, it must have a loop.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Missing Module v1.9.0 Definition with Retraction\nDESCRIPTION: Module definition for v1.9.0 of the missing module test package, including a retraction directive for v1.0.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_replace.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/retract/missingmod\n\ngo 1.14\n\n// bad version\nretract v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Testing go work use with Symlinks\nDESCRIPTION: A bash script that tests how 'go work use' behaves when the current working directory has a parent that is a symlink. It verifies that the command correctly handles paths that cross symlink boundaries.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_symlink_issue68383.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsymlink sym -> a/b\ncd sym/c/d\n\ngo work use $WORK/gopath/src/x/y    # \"crosses\" the symlink at $WORK/sym\ncmpenv go.work go.work.want  # Check that the relative path is not used\n```\n\n----------------------------------------\n\nTITLE: Long Deprecated Module Definition\nDESCRIPTION: Defines a 'long' Go module with a very long deprecation message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_deprecate_message.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// Deprecated: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nmodule long\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Dependencies\nDESCRIPTION: Specifies the module name and its dependency on 'rsc.io/sampler' version 1.3.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v2.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule \"rsc.io/quote\"\n\nrequire \"rsc.io/sampler\" v1.3.0\n```\n\n----------------------------------------\n\nTITLE: Installing Go Program Outside GOPATH Without GOBIN\nDESCRIPTION: Test case to ensure that installing a program outside GOPATH without GOBIN set fails.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_install.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nenv GOPATH= # reset to default ($HOME/go, which does not exist)\nenv GOBIN=\n! go install go-cmd-test/helloworld.go\nstderr '^go: no install location for \\.go files listed on command line \\(GOBIN not set\\)$'\n```\n\n----------------------------------------\n\nTITLE: Testing Valid GOEXPERIMENT Values\nDESCRIPTION: Validates that valid experiment combinations (fieldtrack and staticlockranking) are accepted and properly displayed in environment\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_exp.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nenv GOEXPERIMENT=fieldtrack,staticlockranking\ngo env GOEXPERIMENT\nstdout '.*fieldtrack.*staticlockranking.*'\ngo env\nstdout 'GOEXPERIMENT=.*fieldtrack.*staticlockranking.*'\n```\n\n----------------------------------------\n\nTITLE: Go Hello World Function with Personalization\nDESCRIPTION: A simple Go function that returns a Hello World message, with optional personalization when a name is provided. This code is used to test the coverage cache functionality.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_cache_inputs.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage testcache\n\nimport \"fmt\"\n\nfunc HelloWorld(name string) string {\n    if name == \"\" {\n        return \"Hello, World!\"\n    }\n    return fmt.Sprintf(\"Hello, %s!\", name)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating v2 Package and Updating README\nDESCRIPTION: Adds a detailed README.md explaining the repository structure and a new Go package in the v2 directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout --detach HEAD\nat 2018-02-19T17:51:24-05:00\n\t# README.md at this commit lacked a trailing newline, so 'git apply' can't\n\t# seem to apply it correctly as a patch. Instead, we use 'echo -e' to write\n\t# the exact contents.\nunquote 'This is a test repo for versioned go.\\nThere''s nothing useful here.\\n\\n\\tv0.0.0 - has pkg/p.go\\n\\tv0.0.1 - has go.mod\\n\\t\\n\\tv1.0.0 - has pkg/p.go\\n\\tv1.0.1 - has go.mod\\n\\tv1.0.2 - has submod/pkg/p.go\\n\\tv1.0.3 - has submod/go.mod\\n\\tsubmod/v1.0.4 - same\\n\\tsubmod/v1.0.5 - add requirement on v1.1.0\\n\\tv1.1.0 - add requirement on submod/v1.0.5\\n\\t\\n\\tv2.0.0 - has pkg/p.go\\n\\tv2.0.1 - has go.mod with v2 module path\\n\\tv2.0.2 - has go.mod with v1 (no version) module path\\n\\tv2.0.3 - has v2/go.mod with v2 module path\\n\\tv2.0.5 - has go.mod AND v2/go.mod with v2 module path\\n\\t'\ncp stdout README.md\nmkdir v2/pkg\necho 'package q'\ncp stdout v2/pkg/q.go\ngit add README.md v2/pkg/q.go\ngit commit -m 'add q'\ngit tag v2.0.6\n```\n\n----------------------------------------\n\nTITLE: Multiple Package Imports in Go\nDESCRIPTION: A Go file importing multiple packages from the same module. This demonstrates how to import different packages within the same module hierarchy.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vendormod.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage m\n\nimport _ \"a/foo/bar/b\"\nimport _ \"a/foo/bar/c\"\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module\nDESCRIPTION: Defines the main module 'example.com/m' with its dependencies and Go version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// Module m happens to have the exact same build list as what would be\n// selected under Go 1.16, but computes that build list without looking at\n// as many go.mod files.\nmodule example.com/m\n\ngo 1.17\n\nreplace example.net/lazy v0.1.0 => ./lazy\n\nrequire (\n\texample.com/version v1.1.0\n\texample.net/lazy v0.1.0\n)\n```\n\n----------------------------------------\n\nTITLE: Testing go tool and tool management with alternate file\nDESCRIPTION: Verifies that go tool and tool management commands work correctly with the alternate file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/modfile_flag.txt#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngo get -tool example.com/tools/cmd/hello@v1.0.0\ngrep cmd/hello go.alt.mod\ngo tool hello\n```\n\n----------------------------------------\n\nTITLE: Implementing TestMain support in Go testing package\nDESCRIPTION: Adds TestMain functionality to the testing package, allowing for custom setup and teardown in tests. Includes a new M type and MainStart function for controlling test execution.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_31\n\nLANGUAGE: go\nCODE:\n```\nfunc MainStart(func(string, string) (bool, error), []InternalTest, []InternalBenchmark, []InternalExample) *M\nmethod (*M) Run() int\ntype M struct\n```\n\n----------------------------------------\n\nTITLE: Module Configuration for Error Testing\nDESCRIPTION: Defines a go.mod file with replacements for testing error scenarios, including a non-existent replacement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_import.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nmodule localhost.fail\n\nreplace w => ../w\n\nreplace nonexist v0.1.0 => ../nonexist\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Package for Dependency Testing\nDESCRIPTION: An empty package file that serves as a dependency for other packages. Used to test the import system and module resolution in Go.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/modlegacy1-new.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage p2\n```\n\n----------------------------------------\n\nTITLE: Testing SWIG Functionality in Go (Go)\nDESCRIPTION: This Go test file (`main_test.go`) contains a single test function `TestSwigFuncs` within the 'main' package. It uses the standard `testing` package. The test simply calls the `main()` function (defined in `main.go`) to exercise the code paths that involve calling the SWIG-wrapped C functions. This is the primary Go file intended to be measured by the `go test -cover` command in this test case.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_swig.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n-- main_test.go --\npackage main\n\nimport \"testing\"\n\nfunc TestSwigFuncs(t *testing.T) {\n\tmain()\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Module Paths in Go\nDESCRIPTION: Demonstrates a Go program that imports and uses a module with multiple paths, which is expected to cause an error during vendoring.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_replace.txt#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\npackage main\nimport (\n\t\"fmt\"\n\t\"rsc.io/quote/v3\"\n)\nfunc main() {\n\tfmt.Println(quote.GoV3())\n}\n```\n\n----------------------------------------\n\nTITLE: Module Replacement Test Script\nDESCRIPTION: Bash script that tests various Go module replacement scenarios, including replacing with local packages, different module paths, and error handling for conflicting replacements.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace.txt#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=on\n[short] skip\n\ncp go.mod go.mod.orig\n\n# Make sure the test builds without replacement.\ngo build -mod=mod -o a1.exe .\nexec ./a1.exe\nstdout 'Don''t communicate by sharing memory'\n\n# Modules can be replaced by local packages.\ncp go.mod.orig go.mod\ngo mod edit -replace=rsc.io/quote/v3=./local/rsc.io/quote/v3\ngo build -o a2.exe .\nexec ./a2.exe\nstdout 'Concurrency is not parallelism.'\n\n# The module path of the replacement doesn't need to match.\n# (For example, it could be a long-running fork with its own import path.)\ncp go.mod.orig go.mod\ngo mod edit -replace=rsc.io/quote/v3=./local/not-rsc.io/quote/v3\ngo build -o a3.exe .\nexec ./a3.exe\nstdout 'Clear is better than clever.'\n\n# However, the same module can't be used as two different paths.\ncp go.mod.orig go.mod\ngo mod edit -replace=not-rsc.io/quote/v3@v3.0.0=rsc.io/quote/v3@v3.0.0 -require=not-rsc.io/quote/v3@v3.0.0\n! go build -o a4.exe .\nstderr 'rsc.io/quote/v3@v3.0.0 used for two different module paths \\(not-rsc.io/quote/v3 and rsc.io/quote/v3\\)'\n\n# Modules that do not (yet) exist upstream can be replaced too.\ncp go.mod.orig go.mod\ngo mod edit -replace=not-rsc.io/quote/v3@v3.1.0=./local/rsc.io/quote/v3\ngo build -mod=mod -o a5.exe ./usenewmodule\n! stderr 'finding not-rsc.io/quote/v3'\ngrep 'not-rsc.io/quote/v3 v3.1.0' go.mod\nexec ./a5.exe\nstdout 'Concurrency is not parallelism.'\n\n# Error messages for modules not found in replacements should\n# indicate the replacement module.\ncp go.mod.orig go.mod\ngo mod edit -replace=rsc.io/quote/v3=./local/rsc.io/quote/v3\n! go get rsc.io/quote/v3/missing-package\nstderr 'module rsc.io/quote/v3@upgrade found \\(v3.0.0, replaced by ./local/rsc.io/quote/v3\\), but does not contain package'\n\n# The reported Dir and GoMod for a replaced module should be accurate.\ncp go.mod.orig go.mod\ngo mod edit -replace=rsc.io/quote/v3=not-rsc.io/quote@v0.1.0-nomod\ngo mod download rsc.io/quote/v3\ngo list -m -f '{{.Path}} {{.Version}} {{.Dir}} {{.GoMod}}{{with .Replace}} => {{.Path}} {{.Version}} {{.Dir}} {{.GoMod}}{{end}}' rsc.io/quote/v3\nstdout '^rsc.io/quote/v3 v3.0.0 '$GOPATH'[/\\\\]pkg[/\\\\]mod[/\\\\]not-rsc.io[/\\\\]quote@v0.1.0-nomod '$GOPATH'[/\\\\]pkg[/\\\\]mod[/\\\\]cache[/\\\\]download[/\\\\]not-rsc.io[/\\\\]quote[/\\\\]@v[/\\\\]v0.1.0-nomod.mod => not-rsc.io/quote v0.1.0-nomod '$GOPATH'[/\\\\]pkg[/\\\\]mod[/\\\\]not-rsc.io[/\\\\]quote@v0.1.0-nomod '$GOPATH'[/\\\\]pkg[/\\\\]mod[/\\\\]cache[/\\\\]download[/\\\\]not-rsc.io[/\\\\]quote[/\\\\]@v[/\\\\]v0.1.0-nomod.mod$'\n```\n\n----------------------------------------\n\nTITLE: Network Interface Type Constants in Go Syscall Package for darwin-arm64\nDESCRIPTION: Constants that define different network interface types in the syscall package for darwin-arm64. These constants are used to identify the type of network interfaces in the system.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_65\n\nLANGUAGE: Go\nCODE:\n```\nconst IFT_OTHER ideal-int\nconst IFT_P10 = 12\nconst IFT_P10 ideal-int\nconst IFT_P80 = 13\nconst IFT_P80 ideal-int\nconst IFT_PARA = 34\nconst IFT_PARA ideal-int\nconst IFT_PDP = 255\nconst IFT_PDP ideal-int\nconst IFT_PFLOG = 245\nconst IFT_PFLOG ideal-int\nconst IFT_PFSYNC = 246\nconst IFT_PFSYNC ideal-int\nconst IFT_PPP = 23\nconst IFT_PPP ideal-int\nconst IFT_PROPMUX = 54\nconst IFT_PROPMUX ideal-int\nconst IFT_PROPVIRTUAL = 53\nconst IFT_PROPVIRTUAL ideal-int\nconst IFT_PTPSERIAL = 22\nconst IFT_PTPSERIAL ideal-int\nconst IFT_RS232 = 33\nconst IFT_RS232 ideal-int\nconst IFT_SDLC = 17\nconst IFT_SDLC ideal-int\nconst IFT_SIP = 31\nconst IFT_SIP ideal-int\nconst IFT_SLIP = 28\nconst IFT_SLIP ideal-int\nconst IFT_SMDSDXI = 43\nconst IFT_SMDSDXI ideal-int\nconst IFT_SMDSICIP = 52\nconst IFT_SMDSICIP ideal-int\nconst IFT_SONET = 39\nconst IFT_SONET ideal-int\nconst IFT_SONETPATH = 50\nconst IFT_SONETPATH ideal-int\nconst IFT_SONETVT = 51\nconst IFT_SONETVT ideal-int\nconst IFT_STARLAN = 11\nconst IFT_STARLAN ideal-int\nconst IFT_STF = 57\nconst IFT_STF ideal-int\nconst IFT_T1 = 18\nconst IFT_T1 ideal-int\nconst IFT_ULTRA = 29\nconst IFT_ULTRA ideal-int\nconst IFT_V35 = 45\nconst IFT_V35 ideal-int\nconst IFT_X25 = 5\nconst IFT_X25 ideal-int\nconst IFT_X25DDN = 4\nconst IFT_X25DDN ideal-int\nconst IFT_X25PLE = 40\nconst IFT_X25PLE ideal-int\nconst IFT_XETHER = 26\nconst IFT_XETHER ideal-int\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: A Go module file defining the module name as 'example' and setting the Go version to 1.18, which is the minimum version required for fuzzing support.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_profile_flags.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example\n\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Command-line Argument Parsing Authenticator in Go\nDESCRIPTION: A Go program that demonstrates how an authenticator can parse command-line arguments, including those with spaces. It validates that the arguments are correctly passed and then provides authentication credentials for vcs-test.golang.org.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goauth_userauth.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport(\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n)\n\nfunc main() {\n\targ1 := flag.String(\"arg1\", \"\", \"\")\n\tflag.Parse()\n\tif *arg1 != \"value with spaces\" {\n\t\tlog.Fatal(\"argument with spaces does not work\")\n\t}\n\tfmt.Printf(\"https://vcs-test.golang.org\\n\\nAuthorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l\\n\\n\")\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Module Information in JSON Format\nDESCRIPTION: JSON file providing version information for the toolchain module, specifying the version as v0.0.1-go1.999testmod.linux-ppc64le.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-ppc64le.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.999testmod.linux-ppc64le\"}\n```\n\n----------------------------------------\n\nTITLE: Adding First Go Package and Creating Version Tags\nDESCRIPTION: Adds a simple Go package file and creates version tags v0.0.0, v1.0.0, and a custom tag 'mytag'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nat 2018-02-19T18:10:06-05:00\nmkdir pkg\necho 'package p // pkg/p.go'\ncp stdout pkg/p.go\ngit add pkg/p.go\ngit commit -m 'add pkg/p.go'\ngit tag v0.0.0\ngit tag v1.0.0\ngit tag mytag\n```\n\n----------------------------------------\n\nTITLE: Module A Main Package\nDESCRIPTION: Main package file for module a that imports modules b and c.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_indirect.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\nimport (\n\t_ \"example.com/b\"\n\t_ \"example.com/c\"\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Go Build Flag (-gcflags) Handling in Shell\nDESCRIPTION: This shell script attempts to execute the Go build command with an invalid garbage collector flag ('-c 0'). The initial '!' signifies that the command is expected to fail, and the subsequent 'stderr' line verifies that the compiler correctly reports an error message indicating that the '-c' flag must be at least 1.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_gcflags_order.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n! go build -gcflags='-c 0'\nstderr 'compile: -c must be at least 1, got 0'\n```\n\n----------------------------------------\n\nTITLE: Go Work Usage with Error Handling\nDESCRIPTION: This snippet demonstrates the usage of the 'go work use' command with error handling for invalid directory paths. It checks for cases where the specified directory does not exist or is not a valid directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_only_dirs.txt#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n! go work use foo bar baz\nstderr '^go: foo is not a directory'\nstderr '^go: directory baz does not exist'\ncmp go.work go.work_want\n```\n\n----------------------------------------\n\nTITLE: Testing Vendor Directory Version Compatibility\nDESCRIPTION: This snippet tests the scenario where a vendored dependency requires a newer Go version. It expects the build to fail with an error message indicating that a vendored package requires a newer Go version than the one running.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline_too_new.txt#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nrm go.work\nmv notvendor vendor\n! go build -mod=vendor .\nstderr '^go: golang.org/x/text in vendor'${/}'modules.txt requires go >= 1.99999 \\(running go 1\\..+\\)$'\n```\n\n----------------------------------------\n\nTITLE: Go File with Missing Embedded Resource\nDESCRIPTION: This Go file demonstrates the use of the embed directive to include a non-existent file. It's used to test how different Go tools handle missing embedded resources.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/embed_fmt.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage p\n\nimport \"embed\"\n\n//go:embed missing.txt\nvar X  embed.FS\n```\n\n----------------------------------------\n\nTITLE: Listing and Validating Go Test-Only Packages with go list - Shell\nDESCRIPTION: This shell script configures Go module support, invokes 'go list' with flags to collect information about compiled and test packages, and asserts expected output for regression and module-field behaviors. The script is intended to validate that 'go list' correctly handles test and test-only packages, echoing lines to stdout and checking against issue-specific output expectations. Dependencies: the Go toolchain, a valid Go module, and access to the specified source files. Inputs are minimal Go module files; outputs are stdout lines, validated using regex patterns.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_test.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n\n# go list -compiled -test must handle test-only packages\n# golang.org/issue/27097.\ngo list -compiled -test\nstdout -count=4 '^.' # 4 lines\nstdout '^m$'\nstdout '^m\\\\.test$'\nstdout '^m [m\\\\.test]$'\nstdout '^m_test [m\\\\.test]$'\n\n# https://golang.org/issue/39974: test packages should have the Module field populated.\ngo list -test -f '{{.ImportPath}}{{with .Module}}: {{.Path}}{{end}}'\nstdout -count=4 '^.' # 4 lines\nstdout '^m: m$'\nstdout '^m\\\\.test: m$'\nstdout '^m [m\\\\.test]: m$'\nstdout '^m_test [m\\\\.test]: m$'\n```\n\n----------------------------------------\n\nTITLE: Testing Go list TestImports field\nDESCRIPTION: Verifies that 'go list' correctly reports imports from _test.go files in the TestImports field.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_std_vendor.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo list -f '{{.TestImports}}'\nstdout net/http # from .TestImports\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository\nDESCRIPTION: Initializes a new Git repository in the current directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/semver-branch.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit init\n```\n\n----------------------------------------\n\nTITLE: Storing Module Version Information - JSON\nDESCRIPTION: This snippet provides metadata about the Go module in JSON format, indicating the current version (v1.0.0). Such files are commonly used by package management tools to track and communicate module version information. No dependencies are required, and the expected input is simply the version string; output is JSON-encoded for machine processing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_pkgadded_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n-- .info --\n{\"Version\":\"v1.0.0\"}\n```\n\n----------------------------------------\n\nTITLE: Testing Unprintable Character Handling in Deprecation Messages\nDESCRIPTION: Tests how 'go get' handles a deprecation message containing unprintable characters, ensuring it displays a placeholder instead of the actual message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_deprecate_message.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo get unprintable\nstderr '^go: module unprintable is deprecated: \\(message omitted: contains non-printable characters\\)$'\ngo list -m -u -f '{{.Deprecated}}' unprintable\nstdout '^message contains ASCII BEL\\x07$'\n```\n\n----------------------------------------\n\nTITLE: Main Module Definition\nDESCRIPTION: Root go.mod file defining the chiral module and its dependencies on left and right modules with local replacements.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tagged_import_cycle.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/chiral\n\ngo 1.14\n\nrequire (\n\texample.com/left v0.1.0\n\texample.com/right v0.1.0\n)\n\nreplace (\n\texample.com/left => ./left\n\texample.com/right => ./right\n)\n```\n\n----------------------------------------\n\nTITLE: Q Package Implementation\nDESCRIPTION: A minimal Go implementation of q package with an empty main function, used as a test dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/godebug_default.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage main\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Defining Test Package with Ambiguous Import\nDESCRIPTION: Creates a test package that imports an ambiguous package, used to test import resolution errors.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_ambiguous_import.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\npackage importx\nimport _ \"example.com/a/x\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Parallel Tests for the Filter Package in Go\nDESCRIPTION: This Go test file defines multiple test functions (`Test1` to `Test4`) for the 'filter' package within the 'filter_test' package. Each test function calls `filter.New()` and uses `t.Parallel()` to indicate that it can be run in parallel with other parallel tests. The tests primarily exercise the creation of the filter function returned by `New`, potentially to check for race conditions when run concurrently.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_test_race_issue56370.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n-- filter/filter_test.go --\n\npackage filter_test\n\nimport (\n\t\"testing\"\n\n\t\"issue.56370/filter\"\n)\n\nfunc Test1(t *testing.T) {\n\tt.Parallel()\n\n\t_ = filter.New()\n}\n\nfunc Test2(t *testing.T) {\n\tt.Parallel()\n\n\t_ = filter.New()\n}\n\nfunc Test3(t *testing.T) {\n\tt.Parallel()\n\n\t_ = filter.New()\n}\n\nfunc Test4(t *testing.T) {\n\tt.Parallel()\n\n\t_ = filter.New()\n}\n```\n\n----------------------------------------\n\nTITLE: Go.mod After Tidy with Go 1.17\nDESCRIPTION: The go.mod file for the main module after running 'go mod tidy' with Go 1.17, showing how direct and indirect dependencies are reorganized according to lazy loading rules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_all.txt#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/main\n\n// Note: this go.mod file initially specifies go 1.15,\n// but includes some redundant roots so that it\n// also already obeys the 1.17 lazy loading invariants.\ngo 1.17\n\nrequire (\n\texample.com/a v0.1.0\n\texample.com/q v0.1.0\n\texample.com/t v0.1.0\n)\n\nrequire (\n\texample.com/b v0.1.0 // indirect\n\texample.com/r v0.1.0 // indirect\n\texample.com/u v0.1.0 // indirect\n)\n\nreplace (\n\texample.com/a v0.1.0 => ./a\n\texample.com/b v0.1.0 => ./b\n\texample.com/c v0.1.0 => ./c\n\texample.com/d v0.1.0 => ./d\n\texample.com/q v0.1.0 => ./q\n\texample.com/r v0.1.0 => ./r\n\texample.com/s v0.1.0 => ./s\n\texample.com/t v0.1.0 => ./t\n\texample.com/u v0.1.0 => ./u\n\texample.com/w v0.1.0 => ./w\n\texample.com/x v0.1.0 => ./x\n)\n```\n\n----------------------------------------\n\nTITLE: Defining IPv4 Constants for Darwin ARM64 in Go\nDESCRIPTION: This snippet defines various IPv4-related constants for the Darwin ARM64 platform. These constants are used for configuring IPv4 sockets, setting multicast options, and defining protocol-specific values.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_71\n\nLANGUAGE: Go\nCODE:\n```\nconst IP_ADD_MEMBERSHIP = 12\nconst IP_ADD_SOURCE_MEMBERSHIP = 70\nconst IP_BLOCK_SOURCE = 72\nconst IP_BOUND_IF = 25\nconst IP_DEFAULT_MULTICAST_LOOP = 1\nconst IP_DEFAULT_MULTICAST_TTL = 1\nconst IP_DF = 16384\nconst IP_DROP_MEMBERSHIP = 13\nconst IP_DROP_SOURCE_MEMBERSHIP = 71\nconst IP_HDRINCL = 2\nconst IP_IPSEC_POLICY = 21\nconst IP_MAXPACKET = 65535\nconst IP_MAX_GROUP_SRC_FILTER = 512\nconst IP_MAX_MEMBERSHIPS = 4095\nconst IP_MAX_SOCK_MUTE_FILTER = 128\nconst IP_MAX_SOCK_SRC_FILTER = 128\nconst IP_MF = 8192\nconst IP_MIN_MEMBERSHIPS = 31\nconst IP_MSFILTER = 74\nconst IP_MSS = 576\nconst IP_MULTICAST_IF = 9\nconst IP_MULTICAST_IFINDEX = 66\nconst IP_MULTICAST_LOOP = 11\nconst IP_MULTICAST_TTL = 10\nconst IP_MULTICAST_VIF = 14\nconst IP_OFFMASK = 8191\nconst IP_OPTIONS = 1\nconst IP_PKTINFO = 26\nconst IP_PORTRANGE = 19\nconst IP_PORTRANGE_DEFAULT = 0\nconst IP_PORTRANGE_HIGH = 1\nconst IP_PORTRANGE_LOW = 2\nconst IP_RECVDSTADDR = 7\nconst IP_RECVIF = 20\nconst IP_RECVOPTS = 5\nconst IP_RECVPKTINFO = 26\nconst IP_RECVRETOPTS = 6\nconst IP_RECVTTL = 24\nconst IP_RETOPTS = 8\nconst IP_RF = 32768\nconst IP_TOS = 3\nconst IP_TTL = 4\nconst IP_UNBLOCK_SOURCE = 73\n```\n\n----------------------------------------\n\nTITLE: Basic Go Package with Quote Import\nDESCRIPTION: Simple Go package that imports rsc.io/quote package for testing module exclusion scenarios.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_require_exclude.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage x\nimport _ \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: Module B Configuration\nDESCRIPTION: Module definition for example.com/b that requires and replaces module example.com/q.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_modules_txt_consistent.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/b\n\ngo 1.21\n\nrequire example.com/q v1.0.0\n\nreplace example.com/q v1.0.0 => ../q\n```\n\n----------------------------------------\n\nTITLE: Validating go mod init Behavior with GO111MODULE Off - Shell\nDESCRIPTION: This shell script tests 'go mod init' when the GO111MODULE environment variable is set to 'off', confirming that Go disables module support and emits the correct error message. No external dependencies beyond the Go toolchain and the shell environment are required. The script expects no module to be initialized and verifies the error output matches the intended failure when modules are disabled.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_off_init.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# 'go mod init' should refuse to initialize a module if it will be\n# ignored anyway due to GO111MODULE=off.\nenv GO111MODULE=off\n! go mod init\nstderr 'go: modules disabled by GO111MODULE=off; see ''go help modules'''\n```\n\n----------------------------------------\n\nTITLE: Defining Modified Go Module File (Go)\nDESCRIPTION: Defines the content of a modified `go.mod` file, named `go.mod.withc` within the test script context. This version is expected after running `go get -u ./...`. It adds a requirement for `example.com/badchain/c v1.0.0` alongside the original requirement for `example.com/badchain/a v1.0.0`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badchain.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n-- go.mod.withc --\nmodule m\n\ngo 1.13\n\nrequire (\n\texample.com/badchain/a v1.0.0\n\texample.com/badchain/c v1.0.0\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Custom Toolchain Path\nDESCRIPTION: This go.mod file defines a module named 'exploit' and specifies a custom toolchain path pointing to a potentially malicious script.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_toolchain_slash.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nmodule exploit\n\ngo 1.21\ntoolchain go1.999999-/run.sh\n```\n\n----------------------------------------\n\nTITLE: Package B1 Test with Import\nDESCRIPTION: Test file for package b which imports example.com/c, completing the dependency chain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_downgrade.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage b_test\nimport _ \"example.com/c\"\n```\n\n----------------------------------------\n\nTITLE: Compiler Debug and Help Flags\nDESCRIPTION: Commands to view available compiler flags and their descriptions\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ go tool compile -h\n$ go tool compile -d help\n$ go tool compile -d ssa/help\n```\n\n----------------------------------------\n\nTITLE: Running Go Parallel Tests with Verbose Output\nDESCRIPTION: Shell command to run parallel chatty tests with verbose output and validate that test names are properly displayed between outputs.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_chatty_parallel_success.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo test -parallel 3 chatty_parallel_test.go -v\nstdout -count=2 '^=== (CONT|NAME)  TestChattyParallel/sub-0\\n    chatty_parallel_test.go:32: this is sub-0$'\nstdout -count=2 '^=== (CONT|NAME)  TestChattyParallel/sub-1\\n    chatty_parallel_test.go:32: this is sub-1$'\nstdout -count=2 '^=== (CONT|NAME)  TestChattyParallel/sub-2\\n    chatty_parallel_test.go:32: this is sub-2$'\n```\n\n----------------------------------------\n\nTITLE: Overlay JSON Configuration for Go Build\nDESCRIPTION: JSON configuration file that maps replacement paths for various Go source files, assembly files, C files, and header files. This defines which files should be used from the overlay when building.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_overlay.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"Replace\": {\n\t\t\"f.go\": \"overlay/f.go\",\n\t\t\"dir/g.go\": \"overlay/dir_g.go\",\n\t\t\"dir2/i.go\": \"overlay/dir2_i.go\",\n\t\t\"printpath/main.go\": \"overlay/printpath.go\",\n\t\t\"printpath/other.go\": \"overlay2/printpath2.go\",\n\t\t\"call_asm/asm_gc.s\": \"overlay/asm_gc.s\",\n\t\t\"call_asm/asm_gccgo.s\": \"overlay/asm_gccgo.s\",\n\t\t\"test_cache/main.go\": \"overlay/test_cache.go\",\n\t\t\"cgo_hello_replace/cgo_header.h\": \"overlay/cgo_head.h\",\n\t\t\"cgo_hello_replace/hello.c\": \"overlay/hello.c\",\n\t\t\"cgo_hello_quote/cgo_hello.go\": \"overlay/cgo_hello_quote.go\",\n\t\t\"cgo_hello_quote/cgo_header.h\": \"overlay/cgo_head.h\",\n\t\t\"cgo_hello_angle/cgo_hello.go\": \"overlay/cgo_hello_angle.go\",\n\t\t\"cgo_hello_angle/cgo_header.h\": \"overlay/cgo_head.h\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Module Download Command\nDESCRIPTION: Downloads a specific version of rsc.io/quote module to the module cache and verifies that the expected cache files exist.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_clean_cache.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo mod download rsc.io/quote@v1.5.0\nexists $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.0.info\nexists $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.0.mod\nexists $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.0.zip\n```\n\n----------------------------------------\n\nTITLE: Tracking GC Pause End-Times - runtime and runtime/debug Packages - Go\nDESCRIPTION: Adds PauseEnd arrays to the MemStats struct in runtime and GCStats struct in runtime/debug to track garbage collection pause end times. MemStats.PauseEnd is a fixed array [256]uint64; GCStats.PauseEnd is a slice of time.Time values. These fields assist in performance monitoring and diagnostics of the Go runtime's garbage collector.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_22\n\nLANGUAGE: Go\nCODE:\n```\ntype MemStats struct {\n    PauseEnd [256]uint64\n    // ... other fields\n}\n// runtime/debug package\ntype GCStats struct {\n    PauseEnd []time.Time\n    // ... other fields\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing CGO_ENABLED On in Go\nDESCRIPTION: This snippet shows how to force CGO_ENABLED to 1 by explicitly setting the environment variable, regardless of the CC setting. It clears CC and sets CGO_ENABLED to 1, then verifies the result.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/autocgo.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nenv CC=\nenv CGO_ENABLED=1\ngo env CGO_ENABLED\nstdout 1\n```\n\n----------------------------------------\n\nTITLE: Importing Undeclared Dependency in Go\nDESCRIPTION: This Go file imports example.net/b package, which is not declared in the corresponding go.mod file, simulating a scenario of a missed dependency declaration.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_extra.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\npackage a\nimport _ \"example.net/b\"\n```\n\n----------------------------------------\n\nTITLE: Running Go List Command to Test Absolute Path Import Error\nDESCRIPTION: This command runs 'go list .' to verify that the tool properly handles the absolute path import without getting stuck in an infinite loop. It checks the stdout for the expected output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_issue42891.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo list .\nstdout '^m$'\n```\n\n----------------------------------------\n\nTITLE: Testing Line Ending Preservation in Go Module Files\nDESCRIPTION: Verifies that the go command doesn't overwrite a go.mod file if the only difference is line endings (CRLF vs LF).\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retention.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp go.mod.crlf go.mod\ngo list all\ncmp go.mod go.mod.crlf\n```\n\n----------------------------------------\n\nTITLE: Go 1.21 Workspace Configuration File\nDESCRIPTION: A Go 1.21 workspace configuration file that specifies the workspace version and includes the current directory and q subdirectory in the workspace.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/godebug_default.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngo 1.21\nuse .\nuse ./q\n```\n\n----------------------------------------\n\nTITLE: Implementing Parallel Subtests in Go\nDESCRIPTION: This Go code demonstrates the implementation of parallel subtests. It creates a main test function that runs a parallel subtest, which in turn runs a nested subtest. The code uses channels to control the execution flow and ensure proper test completion.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_parallel_number.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage standalone_parallel_sub_test\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\tch := make(chan bool, 1)\n\tt.Run(\"Sub\", func(t *testing.T) {\n\t\tt.Parallel()\n\t\t<-ch\n\t\tt.Run(\"Nested\", func(t *testing.T) {})\n\t})\n\t// Ensures that Sub will finish after its t.Run call already returned.\n\tch <- true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Original Go Module File\nDESCRIPTION: This snippet defines the original go.mod file content for the test setup. It specifies the module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_retract.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/use\n\ngo 1.15\n```\n\n----------------------------------------\n\nTITLE: Testing Go Fuzzing with Race Detection\nDESCRIPTION: A shell script that tests various combinations of race detection and coverage instrumentation to verify they work correctly together without false positives.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_test_race.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Test with coverage instrumentation enabled (-fuzz) and race instrumentation\n# but without actually fuzzing the target (by using a non-matching pattern)\ngo test -fuzz=xxx -race -v\n! stderr 'race detected during execution of test'\n\n# Test with just race instrumentation enabled\ngo test -race -v\n! stderr 'race detected during execution of test'\n\n# Test with coverage and race instrumentation enabled, and a matching fuzz\n# pattern\ngo test -fuzz=FuzzRace -race -v -fuzztime=200x\n! stderr 'race detected during execution of test'\n```\n\n----------------------------------------\n\nTITLE: Replacement C Implementation in Overlay\nDESCRIPTION: Replacement C implementation from the overlay that provides the say_hello function which prints \"hello cgo\". This matches what's expected by the Go code.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_overlay.txt#2025-04-22_snippet_15\n\nLANGUAGE: c\nCODE:\n```\n#include <stdio.h>\n\nvoid say_hello() { puts(\"hello cgo\\n\"); fflush(stdout); }\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Go Module\nDESCRIPTION: A minimal Go module definition using go.mod. This module is named 'x' and doesn't specify any dependencies or requirements.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_case_cgo.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule x\n```\n\n----------------------------------------\n\nTITLE: Listing All Modules with go list -m all\nDESCRIPTION: Uses 'go list -m all' to show that it covers the packages in 'go list -test -deps all'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_all.txt#2025-04-22_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\ngo list -m -f $MODFMT all\n```\n\n----------------------------------------\n\nTITLE: Testing pkg@version Syntax Rejection with 'go build' in Module-Aware Mode\nDESCRIPTION: This test script verifies that the pkg@version syntax is properly rejected when using 'go build' command in module-aware mode (GO111MODULE=on), as this syntax is only allowed with 'go get' and 'go install' commands.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_versions.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\ncd x\n! go build rsc.io/quote@v1.5.1\nstderr '^package rsc.io/quote@v1.5.1: can only use path@version syntax with ''go get'' and ''go install'' in module-aware mode$'\n```\n\n----------------------------------------\n\nTITLE: Negative Build Constraint in Go\nDESCRIPTION: A Go file with a negative build constraint '!abc' that imports module 'z'. This file will be included in the build only when the 'abc' build tag is NOT specified.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vendormod.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n// +build !abc\n\npackage m\n\nimport _ \"z\"\n```\n\n----------------------------------------\n\nTITLE: Go Module A Implementation\nDESCRIPTION: Main module that imports and uses module B. Includes go.mod file with dependencies on modules B and Z v1.0.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune_all.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/a\n\ngo 1.18\n\nrequire example.com/b v1.0.0\nrequire example.com/z v1.0.0\n```\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"example.com/b\"\n\nfunc main() {\n\tb.B()\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Go Environment Variables for Module and Sumdb Testing\nDESCRIPTION: This snippet sets up environment variables for Go module and sumdb testing, including GO111MODULE, GOSUMDB, GOPROXY, and other related variables.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GO111MODULE=on\nenv sumdb=$GOSUMDB\nenv proxy=$GOPROXY\nenv GOPROXY GONOPROXY GOSUMDB GONOSUMDB\nenv dbname=localhost.localdev/sumdb\n```\n\n----------------------------------------\n\nTITLE: Testing GOPROXY=off Behavior in Go Module Fetching\nDESCRIPTION: Demonstrates that fetching modules not matched by GONOPROXY fails when GOPROXY is set to 'off'. Attempts to get golang.org/x/text package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gonoproxy.txt#2025-04-22_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nenv GONOPROXY=*/fortune\nenv GOPROXY=off\n! go get golang.org/x/text\nstderr '^go: golang.org/x/text: module lookup disabled by GOPROXY=off$'\n```\n\n----------------------------------------\n\nTITLE: Go Module File for Version 1.23\nDESCRIPTION: Defines a Go module file for version 1.23, specifying the module and its dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_vendor.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/x\ngo 1.23\n\nrequire \"foo.com/internal/bar\" v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Testing Fuzzing Mutator Effectiveness in Go\nDESCRIPTION: A test function to verify that the fuzzing mutator can generate a sufficient number of unique mutations. It tracks unique crashes and panics when a threshold is reached.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutator.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage fuzz_test\n\nimport (\n\t\"testing\"\n)\n\n// TODO(katiehockman): re-work this test once we have a better fuzzing engine\n// (ie. more mutations, and compiler instrumentation)\nfunc FuzzMutator(f *testing.F) {\n\t// TODO(katiehockman): simplify this once we can dedupe crashes (e.g.\n\t// replace map with calls to panic, and simply count the number of crashes\n\t// that were added to testdata)\n\tcrashes := make(map[string]bool)\n\t// No seed corpus initiated\n\tf.Fuzz(func(t *testing.T, b []byte) {\n\t\tcrashes[string(b)] = true\n\t\tif len(crashes) >= 10 {\n\t\t\tpanic(\"mutator found enough unique mutations\")\n\t\t}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Module in go.mod for rsc.io/badsum (Go)\nDESCRIPTION: This snippet defines the module name in the go.mod file. It specifies the import path for the module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badsum_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule \"rsc.io/badsum\"\n```\n\n----------------------------------------\n\nTITLE: Go Module File\nDESCRIPTION: A simple Go module declaration file that defines the module name as 'paths' and specifies Go 1.14 as the required version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_trimpath.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule paths\n\ngo 1.14\n```\n\n----------------------------------------\n\nTITLE: Module Definition\nDESCRIPTION: Go module definition specifying the module path and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_deprecated_a_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/deprecated/a\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: Downgraded Dependencies Go Module\nDESCRIPTION: go.mod file after downgrading dependencies, showing indirect dependencies on golang.org/x/text and rsc.io/quote\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_changes.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.16\n\nrequire (\n\tgolang.org/x/text v0.0.0-20170915032832-14c0d48ead0c // indirect\n\trsc.io/quote v1.3.0 // indirect\n)\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Basic go.mod file declaring the module name as example.com\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_v1suffix.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com\n```\n\n----------------------------------------\n\nTITLE: Basic Go Module Definition\nDESCRIPTION: A minimal go.mod file that defines a module named 'm.test' using Go version 1.16. This file serves as the module definition for a Go project, specifying the module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/import_ignore.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule m.test\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines a Go module named 'm' with Go version 1.16.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/generate_invalid.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nmodule m\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Module B Implementation\nDESCRIPTION: The main Go file for dependency module 'example.com/b' containing a simple package declaration.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_modules_txt_conditional.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage b\n```\n\n----------------------------------------\n\nTITLE: Testing pseudo-version resolution for v1\nDESCRIPTION: Fetches a commit and verifies the pseudo-version format for v1.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo.txt#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngo get ...test@d2d4c3e\ngo list -m all\nstdout '^github.com/rsc/legacytest v1\\.2\\.1-0\\.\\d{14}-d2d4c3ea6623$'\n```\n\n----------------------------------------\n\nTITLE: Testing 'go list .' in GOROOT/src (GOPATH Mode) (Shell)\nDESCRIPTION: While in $GOROOT/src and with Go module mode disabled (GOPATH mode), this runs `go list .`. It checks that the command successfully outputs the synthesized GOPATH-style import path for the current directory (`$WORK/goroot/src` or `goroot/src` on Windows), confirming the expected legacy behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_gofile_in_goroot.txt#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ngo list .\n[!GOOS:windows] stdout ^_$WORK/goroot/src$\n[GOOS:windows] stdout goroot/src$\n```\n\n----------------------------------------\n\nTITLE: Module B2 Definition\nDESCRIPTION: Module definition for example.com/b v0.2.0 which requires example.com/c v0.1.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_downgrade.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/b\n\ngo 1.17\n\nrequire example.com/c v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Defining a Struct Without Statements in pkg4 - Go\nDESCRIPTION: This file creates package 'pkg4' and defines a struct type T with a single boolean field X. There are no executable statements, which is used to test tool handling of packages with no coverage points. No dependencies are required.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_statements.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage pkg4\n\ntype T struct {\n\tX bool\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go File with Build Constraints\nDESCRIPTION: Go source file with conflicting build constraints that can never be satisfied.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/fmt_load_errors.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// +build linux,!linux\n\npackage x\n```\n\n----------------------------------------\n\nTITLE: Testing GOFLAGS Environment Variable\nDESCRIPTION: Verifies flag behavior when -modcacherw is set via GOFLAGS environment variable instead of command line.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_modcacherw_issue64282.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nenv GOFLAGS=-modcacherw\n! go install -cake=delicious example.com/printversion@v0.1.0\nstderr '^flag provided but not defined: -cake$'\ncp $WORK/extraneous.txt $GOPATH/pkg/mod/example.com/printversion@v0.1.0/extraneous_file.go\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Minimal Go module definition file specifying the module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_cgo.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/p\n\ngo 1.20\n```\n\n----------------------------------------\n\nTITLE: Golang Package Import for Versioned Dependency\nDESCRIPTION: The Go source file within the `useneedx2` package imports the `example.net/needx2` module to demonstrate the usage of updated module versions in the application.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_consistency.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage useneedx2\n\nimport _ \"example.net/needx2\"\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module in go.mod File\nDESCRIPTION: Official Go module declaration in the go.mod file, identifying the module path as 'rsc.io/badfile3'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badfile3_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule rsc.io/badfile3\n```\n\n----------------------------------------\n\nTITLE: Expected Module List for Vendoring Test\nDESCRIPTION: Expected output file for modules.txt with information about vendored modules including paths, versions, and explicit flags. Used to verify correct vendoring behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune_all.txt#2025-04-22_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\n## workspace\n# example.com/b v1.0.0 => ./b\n## explicit; go 1.18\nexample.com/b\n# example.com/q v1.0.0 => ./q1_0_0\n## explicit; go 1.18\n# example.com/q v1.1.0 => ./q1_1_0\n## go 1.18\nexample.com/q\n# example.com/w v1.0.0 => ./w\n## go 1.18\nexample.com/w\n# example.com/z v1.0.0 => ./z1_0_0\n## explicit; go 1.18\n# example.com/z v1.1.0 => ./z1_1_0\n## go 1.18\nexample.com/z\n# example.com/q v1.0.5 => ./q1_0_5\n# example.com/r v1.0.0 => ./r\n# example.com/x v1.0.0 => ./x\n# example.com/y v1.0.0 => ./y\n```\n\n----------------------------------------\n\nTITLE: Verifying Concurrent Compilation Settings in Go Build Command\nDESCRIPTION: Test script that checks if cmd/go enables concurrent compilation by default. It first resets all GOEXPERIMENT settings to ensure no interference, sets GOMAXPROCS to 4, and verifies the build command includes the concurrent compilation flag.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_concurrent_backend.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Tests golang.org/issue/48490\n# cmd/go should enable concurrent compilation by default\n\n# Reset all experiments, since one of them can disable\n# concurrent compilation, e.g: fieldtrack.\nenv GOEXPERIMENT=none\n\nenv GOMAXPROCS=4\ngo build -n -x -a fmt\nstderr ' -c=4 '\n```\n\n----------------------------------------\n\nTITLE: Go Module Basic Structure\nDESCRIPTION: Basic Go module configuration files defining the main module and its dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_replaced.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition with Misleading Directory Name\nDESCRIPTION: A Go module definition for a package in a directory with a 'test' suffix but with a regular module name.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n// Package d is an ordinary package in a deceptively-named directory.\nmodule example.com/d\n```\n\n----------------------------------------\n\nTITLE: Adding Sequence Functions to bytes Package in Go\nDESCRIPTION: New functions in the bytes package that return iterator sequences for various string operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc FieldsFuncSeq([]uint8, func(int32) bool) iter.Seq[[]uint8]\nfunc FieldsSeq([]uint8) iter.Seq[[]uint8]\nfunc Lines([]uint8) iter.Seq[[]uint8]\nfunc SplitAfterSeq([]uint8, []uint8) iter.Seq[[]uint8]\nfunc SplitSeq([]uint8, []uint8) iter.Seq[[]uint8]\n```\n\n----------------------------------------\n\nTITLE: Defining a Constant in Go\nDESCRIPTION: This Go code snippet declares a package named pseudoupgrade and defines a constant X with a value of 1. This basic setup is part of a module configuration process for a Go project.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_pseudoupgrade_v0.1.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage pseudoupgrade\n\nconst X = 1\n\n```\n\n----------------------------------------\n\nTITLE: Verifying GOWORK Environment Variable Outside Project Directory\nDESCRIPTION: This snippet changes to the parent directory and verifies that the GOWORK environment variable is not set.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_env.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd ..\ngo env GOWORK\n! stdout .\ngo env\nstdout 'GOWORK=(\"\")?'\n```\n\n----------------------------------------\n\nTITLE: Listing Resolved Go Module Dependencies and Verifying Version (Shell)\nDESCRIPTION: Runs `go list -m all` to display the list of modules used in the build, including the main module and all its dependencies with their selected versions. The accompanying `stdout` line specifies the expected output, asserting that the resolved version for `rsc.io/quote` is specifically `v1.5.2`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngo list -m all\nstdout 'rsc.io/quote v1.5.2'\n```\n\n----------------------------------------\n\nTITLE: Executing Go List Command for Module Verification\nDESCRIPTION: This snippet runs the 'go list -m all' command and checks the output for specific module versions. It ensures that the correct versions are selected based on the module graph.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_prune_all.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo list -m all\nstdout 'example.com/w v1.0.0'\nstdout 'example.com/q v1.1.0'\nstdout 'example.com/z v1.1.0'\nstdout 'example.com/x v1.0.0'\n! stdout 'example.com/r'\n! stdout 'example.com/y'\n```\n\n----------------------------------------\n\nTITLE: Printing Version Information in Go\nDESCRIPTION: The Go program reads the build information of a Go project using the `debug.ReadBuildInfo()` function. It prints the module's path, version, and any dependencies it uses, including any replacements. This snippet requires the \"os\" and \"fmt\" packages for output. Inputs include the build information structure, while outputs are printed to standard output. It relies on correctly configured Go modules and a build context that includes version information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_printversion_v0.1.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"runtime/debug\"\n\n\t_ \"example.com/version\"\n)\n\nfunc main() {\n\tinfo, _ := debug.ReadBuildInfo()\n\tfmt.Fprintf(os.Stdout, \"path is %s\\n\", info.Path)\n\tfmt.Fprintf(os.Stdout, \"main is %s %s\\n\", info.Main.Path, info.Main.Version)\n\tif r := info.Main.Replace; r != nil {\n\t\tfmt.Fprintf(os.Stdout, \"\\t(replaced by %s %s)\\n\", r.Path, r.Version)\n\t}\n\tfor _, m := range info.Deps {\n\t\tfmt.Fprintf(os.Stdout, \"using %s %s\\n\", m.Path, m.Version)\n\t\tif r := m.Replace; r != nil {\n\t\t\tfmt.Fprintf(os.Stdout, \"\\t(replaced by %s %s)\\n\", r.Path, r.Version)\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Module and Displaying Retraction using Go List\nDESCRIPTION: Tests 'go list -m -retracted' to verify that retraction details are properly displayed when available for a module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_retract.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\n# 'go list -m -retracted' shows retraction.\\ngo list -m -retracted -f '{{with .Retracted}}retracted{{end}}' example.com/retract\n```\n\n----------------------------------------\n\nTITLE: Printing Hello World in Go\nDESCRIPTION: This snippet initializes a basic Go application to print 'hello' to the console using the fmt package. It includes a main function, which is the entry point of the Go program. The fmt package is required to use the Println function to output text to the console. The program does not take any inputs and outputs the string 'hello' followed by a newline.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_tools_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(\"hello\")\n}\n```\n\n----------------------------------------\n\nTITLE: Go Package Import\nDESCRIPTION: Go source code file demonstrating blank import of a dependent package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_badchain_b_v1.1.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage b\n\nimport _ \"example.com/badchain/c\"\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition with Replace Directive\nDESCRIPTION: Defines a Go module with a replace directive that points an alpha version to an older release, and requires a package that depends on a beta version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_replace_old.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule golang.org/issue46659\n\ngo 1.17\n\nreplace example.com/missingpkg v1.0.1-alpha => example.com/missingpkg v1.0.0\n\nrequire example.com/usemissingpre v1.0.0\n\nrequire example.com/missingpkg v1.0.1-beta // indirect\n```\n\n----------------------------------------\n\nTITLE: Testing Go Toolchain Switching with Shell Commands\nDESCRIPTION: A series of shell commands that test Go's ability to switch toolchains when dependencies require newer Go versions. It tests 'go mod tidy' and 'go get' with different GOTOOLCHAIN settings.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_toolchain.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv TESTGO_VERSION=go1.21.0\nenv TESTGO_VERSION_SWITCH=switch\n\ncp go.mod go.mod.orig\n\n# tidy reports needing 1.22.0 for b1\nenv GOTOOLCHAIN=local\n! go mod tidy\nstderr '^go: example imports\\n\\texample.net/b: module ./b1 requires go >= 1.22.0 \\(running go 1.21.0; GOTOOLCHAIN=local\\)$'\nenv GOTOOLCHAIN=auto\ngo mod tidy\n\ncmp stderr tidy-stderr.want\ncmp go.mod go.mod.tidy\n\ncp go.mod.orig go.mod\nenv GOTOOLCHAIN=local\n! go get -v .\nstderr '^go: example.net/b@v0.1.0: module ./b1 requires go >= 1.22.0 \\(running go 1.21.0; GOTOOLCHAIN=local\\)$'\nenv GOTOOLCHAIN=auto\ngo get -v .\ncmp stderr get-v-stderr.want\ncmp go.mod go.mod.tidy\n\ncp go.mod.orig go.mod\nenv GOTOOLCHAIN=local\n! go get -u -v .\nstderr '^go: example.net/a@v0.2.0: module ./a2 requires go >= 1.22.0 \\(running go 1.21.0; GOTOOLCHAIN=local\\)$'\nenv GOTOOLCHAIN=auto\ngo get -u -v .\ncmp stderr get-u-v-stderr.want\ncmp go.mod go.mod.upgraded\n```\n\n----------------------------------------\n\nTITLE: Error Package with Compilation Error\nDESCRIPTION: Package demonstrating an intentional compilation error with undefined reference.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_cmd_v1.9.0.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage err\n\nvar X = DoesNotCompile\n```\n\n----------------------------------------\n\nTITLE: Adding At Methods for Pixel Formats - image Package - Go\nDESCRIPTION: Introduces AlphaAt, Alpha16At, GrayAt, Gray16At, NRGBAAt, NRGBA64At, RGBAAt, RGBA64At, and YCbCrAt methods to various image types, returning the color value at specified coordinates. These methods expand the color model accessor API, supporting direct pixel-level color retrieval in the image package. Each method returns the corresponding color struct for the format and expects integer (x, y) coordinates as inputs.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_13\n\nLANGUAGE: Go\nCODE:\n```\nmethod (*Alpha) AlphaAt(int, int) color.Alpha\nmethod (*Alpha16) Alpha16At(int, int) color.Alpha16\nmethod (*Gray) GrayAt(int, int) color.Gray\nmethod (*Gray16) Gray16At(int, int) color.Gray16\nmethod (*NRGBA) NRGBAAt(int, int) color.NRGBA\nmethod (*NRGBA64) NRGBA64At(int, int) color.NRGBA64\nmethod (*RGBA) RGBAAt(int, int) color.RGBA\nmethod (*RGBA64) RGBA64At(int, int) color.RGBA64\nmethod (*YCbCr) YCbCrAt(int, int) color.YCbCr\n```\n\n----------------------------------------\n\nTITLE: Toolstash Usage Commands\nDESCRIPTION: Commands for using toolstash in compiler development workflow\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ toolstash restore && go install cmd/compile\n$ go build -toolexec \"toolstash -cmp\" -a -v std\n```\n\n----------------------------------------\n\nTITLE: Simple Hello World Go Program\nDESCRIPTION: A minimal Go program that prints 'hello' to the console. This is used to test build functionality.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_trimpath.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\nfunc main() { println(\"hello\") }\n```\n\n----------------------------------------\n\nTITLE: Importing Text Package in Go\nDESCRIPTION: This Go file imports the 'golang.org/x/text/language' package. It's used to test module resolution and package importing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_symlink.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage issue\n\nimport _ \"golang.org/x/text/language\"\n```\n\n----------------------------------------\n\nTITLE: Module Definition in go.mod File\nDESCRIPTION: Defines the module name in the go.mod file for the Go toolchain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.netbsd-arm64.txt#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Go Module File with Missing Indirect Annotations\nDESCRIPTION: A go.mod file that doesn't properly mark indirect dependencies, used to test indirect comment addition.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retention.txt#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.14\n\nrequire (\n\trsc.io/quote v1.5.2\n\trsc.io/testonly v1.0.0\n)\n```\n\n----------------------------------------\n\nTITLE: Module A Configuration\nDESCRIPTION: Go module configuration for example.com/a with dependencies and replacements\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_regression_hang.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/a\n\ngo 1.18\n\nrequire example.com/b v1.0.0\n\nreplace example.com/b v1.0.0 => ../b\nreplace example.com/c v1.0.0 => ../c\n```\n\n----------------------------------------\n\nTITLE: Package C Implementation\nDESCRIPTION: Simple implementation of package c.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_downgrade.txt#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\npackage c\n```\n\n----------------------------------------\n\nTITLE: Importing dependency in main module\nDESCRIPTION: Demonstrates usage of the example.com/m dependency in the main module through a blank import.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_redundant_requirement.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\npackage use\n\nimport _ \"example.com/m\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Go Test File\nDESCRIPTION: A Go test file containing a simple test function that prints 'TEST'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_output.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage p\nimport \"testing\"\nfunc Test(t *testing.T) {println(\"TEST\")}\n```\n\n----------------------------------------\n\nTITLE: Testing Quote Package Functions in Go\nDESCRIPTION: Test suite for the quote package that verifies the correct output of the Hello and Glass functions. Each test function compares the function's return value against the expected string output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.1.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Copyright 2018 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\npackage quote\n\nimport \"testing\"\n\nfunc TestHello(t *testing.T) {\n\thello := \"Hello, world.\"\n\tif out := Hello(); out != hello {\n\t\tt.Errorf(\"Hello() = %q, want %q\", out, hello)\n\t}\n}\n\nfunc TestGlass(t *testing.T) {\n\tglass := \"I can eat glass and it doesn't hurt me.\"\n\tif out := Glass(); out != glass {\n\t\tt.Errorf(\"Glass() = %q, want %q\", out, glass)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module\nDESCRIPTION: Defines a Go module named 'example.com/x' in the go.mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_flags.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/x\n```\n\n----------------------------------------\n\nTITLE: Defining Network Interface Types for Darwin ARM64 in Go\nDESCRIPTION: This snippet defines constants representing various network interface types for the Darwin ARM64 architecture. These constants are used to identify different types of network interfaces in system calls.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_64\n\nLANGUAGE: Go\nCODE:\n```\nconst IFT_1822 = 2\nconst IFT_AAL5 = 49\nconst IFT_ARCNET = 35\nconst IFT_ARCNETPLUS = 36\nconst IFT_ATM = 37\nconst IFT_BRIDGE = 209\nconst IFT_CARP = 248\nconst IFT_CELLULAR = 255\nconst IFT_CEPT = 19\nconst IFT_DS3 = 30\nconst IFT_ENC = 244\nconst IFT_EON = 25\nconst IFT_ETHER = 6\nconst IFT_FAITH = 56\nconst IFT_FDDI = 15\nconst IFT_FRELAY = 32\nconst IFT_FRELAYDCE = 44\nconst IFT_GIF = 55\nconst IFT_HDH1822 = 3\nconst IFT_HIPPI = 47\nconst IFT_HSSI = 46\nconst IFT_HY = 14\nconst IFT_IEEE1394 = 144\nconst IFT_IEEE8023ADLAG = 136\nconst IFT_ISDNBASIC = 20\nconst IFT_ISDNPRIMARY = 21\nconst IFT_ISO88022LLC = 41\nconst IFT_ISO88023 = 7\nconst IFT_ISO88024 = 8\nconst IFT_ISO88025 = 9\nconst IFT_ISO88026 = 10\nconst IFT_L2VLAN = 135\nconst IFT_LAPB = 16\nconst IFT_LOCALTALK = 42\nconst IFT_LOOP = 24\nconst IFT_MIOX25 = 38\nconst IFT_MODEM = 48\nconst IFT_NSIP = 27\nconst IFT_OTHER = 1\n```\n\n----------------------------------------\n\nTITLE: Testing CGO Dependencies with Missing C Compiler\nDESCRIPTION: Script that tests Go's behavior when trying to build CGO-dependent packages without a C compiler available. It first rebuilds runtime/cgo to ensure it's cached, then attempts to build with empty CC and PATH variables to simulate a missing compiler environment.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_stale_precompiled.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[!cgo] skip\n\n# This test may start with the runtime/cgo package already stale.\n# Explicitly rebuild it to ensure that it is cached.\n# (See https://go.dev/issue/50892.)\n#\n# If running in non-short mode, explicitly vary CGO_CFLAGS\n# as a control case (to ensure that our regexps do catch rebuilds).\n\n[!short] env GOCACHE=$WORK/cache\n[!short] env CGO_CFLAGS=-DTestScript_cgo_stale_precompiled=true\ngo build -x runtime/cgo\n[!short] stderr '[/\\\\]cgo'$GOEXE'[\"]? .* -importpath runtime/cgo'\n\n# https://go.dev/issue/47215: a missing $(go env CC) caused the precompiled net\n# to be stale. But as of https://go.dev/cl/452457 the precompiled libraries are\n# no longer installed anyway! Since we're requiring a C compiler in order to\n# build and use cgo libraries in the standard library, we should make sure it\n# matches what's in the cache.\n\n[abscc] stop\n\nenv CGO_ENABLED=1\nenv CC=''\n[!GOOS:plan9] env PATH=''  # Guaranteed not to include $(go env CC)!\n[GOOS:plan9] env path=''\n! go build -x runtime/cgo\nstderr 'C compiler .* not found'\n```\n\n----------------------------------------\n\nTITLE: Testing Go Workspace Version Compatibility\nDESCRIPTION: Tests Go workspace behavior with different module versions and toolchain settings, including version checks and automatic toolchain switching.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_toolchain.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo work init\ngrep '^go 1.50$' go.work\n! grep toolchain go.work\n\ngo work use ./m1_22_0\ngrep '^go 1.50$' go.work\n! grep toolchain go.work\n\nenv TESTGO_VERSION=go1.21\nenv TESTGO_VERSION_SWITCH=switch\nrm go.work\ngo work init\nenv GOTOOLCHAIN=local\n! go work use ./m1_22_0\nstderr '^go: m1_22_0'${/}'go.mod requires go >= 1.22.0 (running go 1.21; GOTOOLCHAIN=local)$'\nenv GOTOOLCHAIN=auto\ngo work use ./m1_22_0\nstderr '^go: m1_22_0'${/}'go.mod requires go >= 1.22.0; switching to go1.22.9$'\ngrep '^go 1.22.0$' go.work\n! grep toolchain go.work\n\ngo work use ./m1_22_1\nstderr '^go: m1_22_1'${/}'go.mod requires go >= 1.22.1; switching to go1.22.9$'\ngrep '^go 1.22.1$' go.work\n! grep toolchain go.work\n\nenv GOTOOLCHAIN=go1.22.9\n! go work use ./m1_24_rc0\nstderr '^go: m1_24_rc0'${/}'go.mod requires go >= 1.24rc0 (running go 1.22.9; GOTOOLCHAIN=go1.22.9)$'\nenv GOTOOLCHAIN=auto\ngo work use ./m1_24_rc0\nstderr '^go: m1_24_rc0'${/}'go.mod requires go >= 1.24rc0; switching to go1.24rc1$'\ngrep '^go 1.24rc0$' go.work\n! grep 'toolchain' go.work\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Configuration\nDESCRIPTION: This snippet presents the content of a go.mod file, defining a module named 'foo' and specifying Go version 1.21 as a requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_implicit_go_requirement.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nmodule foo\n\ngo 1.21\n```\n\n----------------------------------------\n\nTITLE: Testing go mod why commands for dependency analysis in Go\nDESCRIPTION: This bash script tests the 'go mod why' command with various arguments to analyze module dependencies. It covers scenarios like checking individual packages, entire modules, test dependencies, and vendored dependencies. The expected outputs are compared with predefined text files.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_why.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=on\n[short] skip\n\n# Populate go.sum.\ngo mod tidy\ncp go.mod go.mod.orig\n\ngo list -test all\nstdout rsc.io/quote\nstdout golang.org/x/text/language\n\n# why a package?\ngo mod why golang.org/x/text/language\ncmp stdout why-language.txt\n\n# why a module?\ngo mod why -m golang.org/x/text...\ncmp stdout why-text-module.txt\n\n# why a package used only in tests?\ngo mod why rsc.io/testonly\ncmp stdout why-testonly.txt\n\n# why a module used only in a test of a dependency?\ngo mod why -m rsc.io/testonly\ncmp stdout why-testonly.txt\n\n# test package not needed\ngo mod why golang.org/x/text/unused\ncmp stdout why-unused.txt\n\n# vendor doesn't use packages used only in tests.\ngo mod why -vendor rsc.io/testonly\ncmp stdout why-vendor.txt\n\n# vendor doesn't use modules used only in tests.\ngo mod why -vendor -m rsc.io/testonly\ncmp stdout why-vendor-module.txt\n\n# test multiple packages\ngo mod why golang.org/x/text/language golang.org/x/text/unused\ncmp stdout why-both.txt\n\n# test multiple modules\ngo mod why -m rsc.io/quote rsc.io/sampler\ncmp stdout why-both-module.txt\n\n# package in a module that isn't even in the module graph\n# (https://golang.org/issue/26977)\ngo mod why rsc.io/fortune\ncmp stdout why-missing.txt\n\n# None of these command should have changed the go.mod file.\ncmp go.mod go.mod.orig\n```\n\n----------------------------------------\n\nTITLE: Testing quote.go Functions in Go\nDESCRIPTION: Test file for the quote package that verifies each function returns the expected string. It includes tests for Hello(), Glass(), Go(), and Opt() functions, with an initialization function that sets the locale to English.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.5.3-pre1.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Copyright 2018 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\npackage quote\n\nimport (\n\t\"os\"\n\t\"testing\"\n)\n\nfunc init() {\n\tos.Setenv(\"LC_ALL\", \"en\")\n}\n\nfunc TestHello(t *testing.T) {\n\thello := \"Hello, world.\"\n\tif out := Hello(); out != hello {\n\t\tt.Errorf(\"Hello() = %q, want %q\", out, hello)\n\t}\n}\n\nfunc TestGlass(t *testing.T) {\n\tglass := \"I can eat glass and it doesn't hurt me.\"\n\tif out := Glass(); out != glass {\n\t\tt.Errorf(\"Glass() = %q, want %q\", out, glass)\n\t}\n}\n\nfunc TestGo(t *testing.T) {\n\tgo1 := \"Don't communicate by sharing memory, share memory by communicating.\"\n\tif out := Go(); out != go1 {\n\t\tt.Errorf(\"Go() = %q, want %q\", out, go1)\n\t}\n}\n\nfunc TestOpt(t *testing.T) {\n\topt := \"If a program is too slow, it must have a loop.\"\n\tif out := Opt(); out != opt {\n\t\tt.Errorf(\"Opt() = %q, want %q\", out, opt)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Package P Implementation\nDESCRIPTION: Simple package p implementation providing function P()\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_irrelevant_dependency.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nfunc P() {}\n```\n\n----------------------------------------\n\nTITLE: Expected Output for 'go mod tidy' Command\nDESCRIPTION: Expected output for the 'go mod tidy' command showing the toolchain switch process from Go 1.21.0 to Go 1.22.9 due to module requirements.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_toolchain.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ngo: found example.net/b in example.net/b v0.1.0\ngo: module ./b1 requires go >= 1.22.0; switching to go1.22.9\ngo: found example.net/b in example.net/b v0.1.0\ngo: found example.net/c in example.net/c v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Testing 'go fmt' and 'go generate' Commands Outside Module\nDESCRIPTION: Demonstrates that 'go fmt' and 'go generate' can work with file arguments outside of a module context.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_outside.txt#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ngo fmt needmod/needmod.go\n\n[exec:touch] go generate ./needmod/needmod.go\n[exec:touch] exists ./needmod/gen.txt\n```\n\n----------------------------------------\n\nTITLE: Removing a module and running go mod tidy with error handling\nDESCRIPTION: Removes a specific module from the cache and runs 'go mod tidy -e', checking for expected error output and absence of segmentation fault.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_fileproxy_vcs_missing_issue51589.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nrm $WORK/gopath/pkg/mod/cache/download/golang.org/x/text/\ngo mod tidy -e\nstderr '^go: rsc.io/sampler@v1.3.0 requires\\n\\tgolang.org/x/text@.*: reading file://.*/pkg/mod/cache/download/golang.org/x/text/.*'\n! stderr 'signal SIGSEGV: segmentation violation'\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Information in .mod File\nDESCRIPTION: A module declaration in .mod format specifying the module name as rsc.io/badfile4.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badfile4_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule rsc.io/badfile4\n```\n\n----------------------------------------\n\nTITLE: Setting Go Module Format Environment Variable\nDESCRIPTION: Sets the MODFMT environment variable to format module information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv MODFMT='{{with .Module}}{{.Path}} {{.Version}}{{end}}'\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Environment for Go Module Version Requirements\nDESCRIPTION: Initial setup for testing Go's behavior with version requirements, setting environment variables and testing commands that should fail due to version constraints.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\nenv TESTGO_VERSION=go1.21\n\n! go list\nstderr -count=1 '^go: sub@v1.0.0: module ./sub requires go >= 1.999 \\(running go 1.21\\)$'\n! go build sub\nstderr -count=1 '^go: sub@v1.0.0: module ./sub requires go >= 1.999 \\(running go 1.21\\)$'\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Tidy Consistency with Cycles\nDESCRIPTION: Shell commands to test that 'go mod tidy' and 'go mod graph' produce consistent results when handling cyclic dependencies. The test compares the go.mod file before and after running the commands to ensure they don't modify a tidy file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_cycle.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n\ncp go.mod go.mod.orig\ngo mod tidy\ncmp go.mod go.mod.orig\n\n# If the go.mod file is already tidy, 'go mod graph' should not modify it.\ngo mod graph\ncmp go.mod go.mod.orig\n```\n\n----------------------------------------\n\nTITLE: Declaring a Module Path and Version - go.mod - Go\nDESCRIPTION: This go.mod snippet declares the module path ('example.com/retract/rename') and its Go language compatibility (Go 1.16). It is essential for Go module-aware builds, providing the primary module identifier and specifying minimum tooling requirements. Requires Go 1.16+ for full compatibility. No parameters are accepted, and the file is essential input for module initialization and dependency tracking. Limitations: no replace, require, or exclude directives appear in this basic definition.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rename_v1.0.0-bad.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/retract/rename\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module definition file specifying module name, Go version requirement, and dependency on an incompatible version of example.com/incompatiblewithsub.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_prefer_incompatible.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.15\n\nrequire example.com/incompatiblewithsub v2.0.0+incompatible\n```\n\n----------------------------------------\n\nTITLE: Providing Go Module Version Metadata - JSON\nDESCRIPTION: Specifies module version information in a JSON format, typically used in Go module proxies or the module cache. This snippet contains the 'Version' key identifying the semantic version of the module. No dependencies or parameters are permitted; it serves as inline module metadata for Go tooling and consumers.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_incompatible_v2.0.0+incompatible.txt#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\\\"Version\\\":\\\"v2.0.0+incompatible\\\"}\n```\n\n----------------------------------------\n\nTITLE: Embedding Files with Modified Pattern in Go\nDESCRIPTION: This snippet demonstrates changing the embedding pattern to `*t`, which will include any file ending with 't' into the `X` embedded filesystem. It highlights the file filtering capability when embedding resources using Go's `embed` package. It's compatible with Go 1.16 and above.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/embed.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage p\n\nimport \"embed\"\n\n//go:embed *t\nvar X embed.FS\n```\n\n----------------------------------------\n\nTITLE: Testing Vendoring Behavior\nDESCRIPTION: Demonstrates that -mod=vendor is not automatically applied without an explicit 'go' directive in go.mod, and shows the error message when vendoring is inconsistent.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version_missing.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n! go list -mod=vendor all\n! stderr '^go: inconsistent vendoring'\nstderr 'cannot find module providing package example.com/badedit: import lookup disabled by -mod=vendor'\n```\n\n----------------------------------------\n\nTITLE: Testing Go Get with Insecure Redirects\nDESCRIPTION: This script tests the behavior of 'go get' when encountering insecure redirects. It sets environment variables, attempts to get a package from an insecure URL, and verifies the error message. It then sets GOINSECURE to allow the insecure fetch.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_insecure_redirect.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GOPRIVATE=vcs-test.golang.org\n\n! go get -d vcs-test.golang.org/insecure/go/insecure\nstderr 'redirected .* to insecure URL'\n\n[short] stop 'builds a git repo'\n\nenv GOINSECURE=vcs-test.golang.org/insecure/go/insecure\ngo get -d vcs-test.golang.org/insecure/go/insecure\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Subpackage Functionality - Go\nDESCRIPTION: Defines a subpackage in the module mod.example with a single exported function F that returns 42. This function is designed to be called by the main package as part of the coverage example. Dependencies are none, input is none, output always the integer 42, and there are no configuration constraints.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_build_pkg_select.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage sub\n\nfunc F() int {\n\treturn 42\n}\n\n```\n\n----------------------------------------\n\nTITLE: Main Function Importing CGO Package in Go\nDESCRIPTION: The main package imports the cgo package (pkg) to trigger the init function execution. It is essentially a stub main function that does not perform any additional operations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_syso_issue29253.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport _ \"pkg\"\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Build and Version Commands with Various Flags\nDESCRIPTION: This snippet demonstrates a series of Go build and version commands with different flags and environment settings. It tests the output of these commands to ensure proper inclusion of compiler information, build flags, and CGO settings.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_build_settings.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Compiler name is always added.\ngo build\ngo version -m m$GOEXE\nstdout '^\tbuild\t-compiler=gc$'\nstdout '^\tbuild\tGOOS='\nstdout '^\tbuild\tGOARCH='\n[GOARCH:amd64] stdout '^\tbuild\tGOAMD64='\n! stdout asmflags|gcflags|ldflags|gccgoflags\n\n# Toolchain flags are added if present.\n# The raw flags are included, with package patterns if specified.\ngo build -asmflags=example.com/m=-D=FOO=bar\ngo version -m m$GOEXE\nstdout '^\tbuild\t-asmflags=example\\.com/m=-D=FOO=bar$'\n\ngo build -gcflags=example.com/m=-N\ngo version -m m$GOEXE\nstdout '^\tbuild\t-gcflags=example\\.com/m=-N$'\n\ngo build -ldflags=example.com/m=-w\ngo version -m m$GOEXE\nstdout '^\tbuild\t-ldflags=example\\.com/m=-w$'\n\ngo build -trimpath\ngo version -m m$GOEXE\nstdout '\\tbuild\\t-trimpath=true$'\n\n# gccgoflags are not added when gc is used, and vice versa.\n# TODO: test gccgo.\ngo build -gccgoflags=all=UNUSED\ngo version -m m$GOEXE\n! stdout gccgoflags\n\n# Build and tool tags are added but not release tags.\n# \"race\" is included with build tags but not \"cgo\".\ngo build -tags=a,b\ngo version -m m$GOEXE\nstdout '^\tbuild\t-tags=a,b$'\n[race] go build -race\n[race] go version -m m$GOEXE\n[race] ! stdout '^\tbuild\t-tags='\n[race] stdout '^\tbuild\t-race=true$'\n\n# CGO flags are separate settings.\n# CGO_ENABLED is always present.\n# Other flags are added if CGO_ENABLED is true.\nenv CGO_ENABLED=0\ngo build\ngo version -m m$GOEXE\nstdout '^\tbuild\tCGO_ENABLED=0$'\n! stdout CGO_CPPFLAGS|CGO_CFLAGS|CGO_CXXFLAGS|CGO_LDFLAGS\n\n[cgo] env CGO_ENABLED=1\n[cgo] env CGO_CPPFLAGS=-DFROM_CPPFLAGS=1\n[cgo] env CGO_CFLAGS=-DFROM_CFLAGS=1\n[cgo] env CGO_CXXFLAGS=-DFROM_CXXFLAGS=1\n[cgo] env CGO_LDFLAGS=-L/extra/dir/does/not/exist\n[cgo] go build '-ldflags=all=-linkmode=external -extldflags=-L/bonus/dir/does/not/exist'\n[cgo] go version -m m$GOEXE\n[cgo] stdout '^\tbuild\t-ldflags=\"all=-linkmode=external -extldflags=-L/bonus/dir/does/not/exist\"$'\n[cgo] stdout '^\tbuild\tCGO_ENABLED=1$'\n[cgo] stdout '^\tbuild\tCGO_CPPFLAGS=-DFROM_CPPFLAGS=1$'\n[cgo] stdout '^\tbuild\tCGO_CFLAGS=-DFROM_CFLAGS=1$'\n[cgo] stdout '^\tbuild\tCGO_CXXFLAGS=-DFROM_CXXFLAGS=1$'\n[cgo] stdout '^\tbuild\tCGO_LDFLAGS=-L/extra/dir/does/not/exist$'\n\n# https://go.dev/issue/52372: a cgo-enabled binary should not be stamped with\n# CGO_ flags that contain paths.\n[cgo] env CGO_ENABLED=1\n[cgo] env CGO_CPPFLAGS=-DFROM_CPPFLAGS=1\n[cgo] env CGO_CFLAGS=-DFROM_CFLAGS=1\n[cgo] env CGO_CXXFLAGS=-DFROM_CXXFLAGS=1\n[cgo] env CGO_LDFLAGS=-L/extra/dir/does/not/exist\n[cgo] go build -trimpath '-ldflags=all=-linkmode=external -extldflags=-L/bonus/dir/does/not/exist'\n[cgo] go version -m m$GOEXE\n[cgo] ! stdout '/extra/dir/does/not/exist'\n[cgo] ! stdout '/bonus/dir/does/not/exist'\n[cgo] stdout '^\tbuild\tCGO_ENABLED=1$'\n```\n\n----------------------------------------\n\nTITLE: Testing Go Test Command Profile and Trace Output\nDESCRIPTION: This snippet tests the 'go test' command's behavior with profile and trace flags. It verifies that these flags force output to the current working directory or -outputdir, not the directory containing the test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_flags.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo test -memprofile=mem.out ./x\nexists ./mem.out\nrm ./mem.out\n\ngo test -trace=trace.out ./x\nexists ./trace.out\nrm ./trace.out\n\nmkdir profiles\ngo test -memprofile=mem.out -outputdir=./profiles ./x\nexists ./profiles/mem.out\nrm profiles\n```\n\n----------------------------------------\n\nTITLE: Importing Package from Module Dependency - Go Source File\nDESCRIPTION: Defines a Go package 'use' and imports the 'example.com/missingpkg' dependency with a blank identifier, indicating that the package's initialization side effects are desired without directly using its exported identifiers. This source file depends on the modules declared in 'go.mod', and should be located in the module's hierarchy. It requires Go tooling to resolve the referenced package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_usemissingpre_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage use\n\nimport _ \\\"example.com/missingpkg\\\"\n```\n\n----------------------------------------\n\nTITLE: Executing Go Test with Coverage for SWIG Project (Shell)\nDESCRIPTION: This shell command executes the Go tests for the current package using `go test`. The `-v` flag enables verbose output, `-count=1` disables test caching, and `-coverprofile=foo.p` enables coverage analysis, writing the profile to `foo.p`. The test setup expects the standard output to confirm 100% statement coverage, indicating that only the `main_test.go` file is being measured for coverage, not the SWIG-generated wrappers. Prerequisites include having SWIG and a C compiler installed if cgo is enabled.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_swig.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n[!exec:swig] skip\n[!cgo] skip\n\ngo test -v -count=1 -coverprofile=foo.p\nstdout 'coverage: 100.0% of statements'\n```\n\n----------------------------------------\n\nTITLE: External Test Package with Embedded Files\nDESCRIPTION: External test package (_test) demonstrating embedded file usage.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_embed.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage a_test\n\nimport _ \"embed\"\n\n//go:embed subdir/test/xtest/embed.txt\nvar subdirXtest string\n```\n\n----------------------------------------\n\nTITLE: Test-Only Package Definition\nDESCRIPTION: A Go test file that defines a package named 'testonly' which contains only test files and no implementation files, used to demonstrate build behavior with test-only packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_test_only.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage testonly\n```\n\n----------------------------------------\n\nTITLE: Dependency Module v0.2.0\nDESCRIPTION: A Go module file for the second version of the 'deleted' dependency, where the package has been removed but the module still exists.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_deleted.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/deleted\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: Defining Local Replacement Module in Go\nDESCRIPTION: Defines a local replacement module for not-rsc.io/quote/v3.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_replace.txt#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nmodule not-rsc.io/quote/v3\n```\n\n----------------------------------------\n\nTITLE: Importing Replaced Module zz in x/y (Go)\nDESCRIPTION: This Go source file is part of the `x/y` package. It contains a blank import (`import _ \"zz\"`) for the `zz` package. This import ensures that the Go tool recognizes `zz` as a dependency of the `x/y` module during commands like `go list`, triggering the resolution via the `replace` directive in `x/y/go.mod`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_local_replace.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n-- x/y/y.go --\npackage y\nimport _ \"zz\"\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Requiring Go 1.17\nDESCRIPTION: This Go module definition for need117 specifies a requirement for Go 1.17 or higher.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_goversion.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// Module need117 requires Go 1.17 or higher.\nmodule example.net/need117\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: Listing All Modules in Go\nDESCRIPTION: This command lists all modules and checks for the presence of specific modules in the output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_of_test_dep.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo list -m all\nstdout '^example.com/b v0.1.0 '\nstdout '^example.com/c v0.1.0 '\ncmp go.mod go.mod.old\n```\n\n----------------------------------------\n\nTITLE: Testing Preservation of Unsorted Requirements\nDESCRIPTION: Verifies that the go command doesn't automatically sort requirements when running regular commands like 'go list'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retention.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp go.mod.unsorted go.mod\ngo list all\ncmp go.mod go.mod.unsorted\n```\n\n----------------------------------------\n\nTITLE: Defining Main Package in Go\nDESCRIPTION: A simple Go file defining the main package. This file is used as part of the test cases for the 'go list' command.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_ambiguous_path.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n```\n\n----------------------------------------\n\nTITLE: Fuzzing Test Implementation\nDESCRIPTION: Implementation of a fuzzing test function that processes byte array inputs and handles duplicate seed values. The test tracks iterations and produces different outputs based on the occurrence of the seed value.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_limit_dup_entry.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage fuzz_test\n\nimport (\n\t\"fmt\"\n\t\"testing\"\n)\n\nfunc FuzzA(f *testing.F) {\n\tf.Add([]byte(\"seed\"))\n\ti := 0\n\tf.Fuzz(func(t *testing.T, b []byte) {\n\t\ti++\n\t\tif string(b) == \"seed\" {\n\t\t\tif i == 0 {\n\t\t\t\tfmt.Println(\"a\")\n\t\t\t} else if i > 1 {\n\t\t\t\tfmt.Println(\"b\")\n\t\t\t}\n\t\t}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Secondary File Path Printer in Overlay\nDESCRIPTION: Second file for the printpath package that prints its own file path in an init function. Used to test multiple files in a package with overlays.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_overlay.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"path/filepath\"\n\t\"runtime\"\n)\n\nfunc init() {\n\t_, file, _, _ := runtime.Caller(0)\n\tfmt.Println(filepath.FromSlash(file))\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Module with go list\nDESCRIPTION: The snippets showcase the use of 'go list' with various flags to inspect module information and handle deprecation warnings in Go. The commands make use of flag combinations like '-m', '-u', and '-f' to demonstrate different outputs and how they correlate with module deprecation status.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_deprecated.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 'go list pkg' does not show deprecation.\ngo list example.com/deprecated/a\nstdout '^example.com/deprecated/a$'\n\n# 'go list -m' does not show deprecation.\ngo list -m example.com/deprecated/a\nstdout '^example.com/deprecated/a v1.9.0$'\n\n# 'go list -m -versions' does not show deprecation.\ngo list -m -versions example.com/deprecated/a\nstdout '^example.com/deprecated/a v1.0.0 v1.9.0$'\n\n# 'go list -m -u' shows deprecation.\ngo list -m -u example.com/deprecated/a\nstdout '^example.com/deprecated/a v1.9.0 \\(deprecated\\)$'\n\n# 'go list -m -u -f' exposes the deprecation message.\ngo list -m -u -f {{.Deprecated}} example.com/deprecated/a\nstdout '^in example.com/deprecated/a@v1.9.0$'\n\n# This works even if we use an old version that does not have the deprecation\n# message in its go.mod file.\ngo get example.com/deprecated/a@v1.0.0\n! grep Deprecated: $WORK/gopath/pkg/mod/cache/download/example.com/deprecated/a/@v/v1.0.0.mod\ngo list -m -u -f {{.Deprecated}} example.com/deprecated/a\nstdout '^in example.com/deprecated/a@v1.9.0$'\n\n# 'go list -m -u' does not show deprecation for the main module.\ngo list -m -u\n! stdout deprecated\ngo list -m -u -f '{{if not .Deprecated}}ok{{end}}'\nstdout ok\n\n# 'go list -m -u' does not show a deprecation message for a module that is not\n# deprecated at the latest version, even if it is deprecated at the current\n# version.\ngo list -m -u example.com/undeprecated\nstdout '^example.com/undeprecated v1.0.0 \\[v1.0.1\\]$'\n```\n\n----------------------------------------\n\nTITLE: Comparing Timestamps from Files in Go\nDESCRIPTION: This Go program (`before`) takes two file paths as command-line arguments (os.Args[1], os.Args[2]). It reads JSON-encoded timestamps from each file, unmarshals them into `time.Time` objects, truncates the first time based on the precision of the second using the `truncateLike` helper function, and checks if the (truncated) first timestamp is strictly before the second. It exits with an error code 1 if file reading, JSON unmarshalling, or the time comparison fails. This utility is used in the main test script to assert timestamp order.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_issue6480.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n-- before/before.go --\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n\t\"time\"\n)\n\nfunc truncateLike(t, p time.Time) time.Time {\n\tnano := p.UnixNano()\n\td := 1 * time.Nanosecond\n\tfor nano%int64(d) == 0 && d < 1*time.Second {\n\t\td *= 10\n\t}\n\tfor nano%int64(d) == 0 && d < 2*time.Second {\n\t\td *= 2\n\t}\n\treturn t.Truncate(d)\n}\n\nfunc main() {\n\tvar t1 time.Time\n\tb1, err := os.ReadFile(os.Args[1])\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n\tif err := json.Unmarshal(b1, &t1); err != nil  {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n\n\tvar t2 time.Time\n\tb2, err := os.ReadFile(os.Args[2])\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n\tif err := json.Unmarshal(b2, &t2); err != nil  {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n\n\tt1 = truncateLike(t1, t2)\n\tif !t1.Before(t2) {\n\t\tfmt.Fprintf(os.Stderr, \"time in %v (%v) is not before time in %v (%v)\", os.Args[1], t1, os.Args[2], t2)\n\t\tos.Exit(1)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Module with Dependencies\nDESCRIPTION: This go.mod file defines the module 'example.com/x' and specifies a dependency on 'foo.com/internal/bar' version 1.0.0. It also sets the Go version to 1.19.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_internal.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/x\ngo 1.19\n\nrequire \"foo.com/internal/bar\" v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Verifying Module Content Checksum in 'go.sum' (Shell)\nDESCRIPTION: Uses 'grep' to search the 'go.sum' file for a line matching the checksum entry for the content (zip archive) of the specific version (v1.5.2) of the 'rsc.io/QUOTE' module. This verifies that 'go get' added the required checksum for the module's source code.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_sum_noroot.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngrep '^rsc.io/QUOTE v1.5.2 ' go.sum\n```\n\n----------------------------------------\n\nTITLE: Initial Go Module Definition\nDESCRIPTION: Basic go.mod file defining a module 'm' with Go 1.16 and a dependency on rsc.io/sampler v1.0.0\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_changes.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.16\n\nrequire rsc.io/sampler v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Custom Git Configuration with GitHub SSH Setup\nDESCRIPTION: A Git configuration file defining user information and URL rewriting to use SSH for GitHub repositories instead of HTTPS.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_issue51114.txt#2025-04-22_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[user]\n\tname = Go Gopher\n\temail = gopher@golang.org\n[url \"git@github.com:\"]\n\tinsteadOf = https://github.com/\n```\n\n----------------------------------------\n\nTITLE: Defining root module\nDESCRIPTION: Defines the main module for testing import behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_std_vendor.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Go Module Download with Specific Version\nDESCRIPTION: Downloads a specific version of the golang.org/x/text module using 'go mod download'. The -json flag outputs the result in JSON format, and the expected version is verified using 'stdout'. This test ensures that the specified pseudo-version can be downloaded and is correctly identified.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_pseudo_cache.txt#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ngo mod download -json golang.org/x/text@v0.0.0-20171215141712-a1b916ed6726\nstdout '\"Version\": \"v0.0.0-20171215141712-a1b916ed6726\",'\n```\n\n----------------------------------------\n\nTITLE: Expected Empty Module State\nDESCRIPTION: Expected go.mod state after tidying the module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_tool.txt#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule example.com/foo\n\ngo 1.24\n```\n\n----------------------------------------\n\nTITLE: Version Info Configuration\nDESCRIPTION: JSON configuration file specifying the module version information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_cmd_v1.9.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.9.0\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Another Go Module with Different Dependency Replacement\nDESCRIPTION: This snippet shows another go.mod file that requires the same dependency but replaces it with a different local path. This creates the conflicting replacements scenario.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace_conflict.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/n\n\nrequire example.com/dep v1.0.0\nreplace example.com/dep v1.0.0 => ../dep2\n```\n\n----------------------------------------\n\nTITLE: Running Benchmark Tests with Validation Script in Shell\nDESCRIPTION: Shell script that runs a Go benchmark test and verifies the output contains expected log messages but doesn't contain CONT lines from benchmarks.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_benchmark_chatty_success.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Run chatty tests. Assert on CONT lines.\ngo test chatty_test.go -v -bench . chatty_bench\n\n# Sanity check that output happens. We don't provide -count because the amount\n# of output is variable.\nstdout 'this is sub-0'\nstdout 'this is sub-1'\nstdout 'this is sub-2'\n\n# Benchmarks should not print CONT.\n! stdout CONT\n```\n\n----------------------------------------\n\nTITLE: Initializing Go module\nDESCRIPTION: This snippet shows the contents of the go.mod file, which initializes a new Go module named 'm'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_hash.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Go Benchmark Test with Logging in Subtests\nDESCRIPTION: A Go test file that defines a benchmark with multiple subtests, each logging messages. Used to test if the logging output appears correctly without generating CONT lines.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_benchmark_chatty_success.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage chatty_bench\n\nimport (\n\t\"testing\"\n\t\"fmt\"\n)\n\nfunc BenchmarkChatty(b *testing.B) {\n    for i := 0; i < 3; i++ {\n        b.Run(fmt.Sprintf(\"sub-%d\", i), func(b *testing.B) {\n            for j := 0; j < 2; j++ {\n                b.Logf(\"this is sub-%d\", i)\n            }\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Workspace Configuration\nDESCRIPTION: This snippet shows the contents of a go.work file, specifying the Go version and the module to use.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_env.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\n\nuse a\n```\n\n----------------------------------------\n\nTITLE: Defining go.mod file content\nDESCRIPTION: Contains a placeholder content for the go.mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/modfile_flag.txt#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nʕ◔ϖ◔ʔ\n```\n\n----------------------------------------\n\nTITLE: Testing 'go mod download' with dependency requiring newer Go version\nDESCRIPTION: Tests that 'go mod download' without arguments updates the 'go' and 'toolchain' lines to be consistent with existing requirements in the module graph when a dependency requires a newer Go version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_exec_toolchain.txt#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngo mod edit -require=rsc.io/needall@v0.0.1\ncp go.mod go.mod.121\n\n# If an upgrade is needed, GOTOOLCHAIN=go1.21 should cause\n# the command to fail without changing go.mod.\n\nenv GOTOOLCHAIN=go1.21\n! go mod download\nstderr 'rsc.io/needall@v0.0.1 requires go >= 1.23'\n! stderr switching\ncmp go.mod go.mod.121\n\n# If an upgrade is needed, GOTOOLCHAIN=auto should perform\n# the upgrade and record the resulting toolchain version.\n\nenv GOTOOLCHAIN=auto\ngo mod download\nstderr '^go: module rsc.io/needall@v0.0.1 requires go >= 1.23; switching to go1.23.9$'\ncmp go.mod go.mod.final\n```\n\n----------------------------------------\n\nTITLE: Go Package a Declaration and Import\nDESCRIPTION: Defines a Go package 'a' that imports package 'b'. This package is part of a test to demonstrate import path listing. It has no public members or functions, focusing solely on establishing an import relationship.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_test_imports.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage a; import _ \"b\"\n```\n\n----------------------------------------\n\nTITLE: Simple Go Main Package\nDESCRIPTION: Minimal Go program with empty main function used as test code across different repository configurations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_nested.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition for Test\nDESCRIPTION: A simple Go module definition used as part of the testing environment for the symlink test case.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_symlink_issue68383.txt#2025-04-22_snippet_1\n\nLANGUAGE: gomod\nCODE:\n```\nmodule example.com/y\n\ngo 1.24\n```\n\n----------------------------------------\n\nTITLE: Go Main Package\nDESCRIPTION: Defines a basic Go main package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_hg.txt#_snippet_11\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Go Binary\nDESCRIPTION: Shell script implementing a test 'go' command that outputs a version identifier when executed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.ios-arm64.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition File\nDESCRIPTION: Module definition file specifying the module name, Go version requirement, and a dependency on example.net/pkgadded at version 1.2.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downgrade_missing.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/m\n\ngo 1.16\n\nrequire example.net/pkgadded v1.2.0\n```\n\n----------------------------------------\n\nTITLE: Defining go.sum file content\nDESCRIPTION: Contains a placeholder content for the go.sum file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/modfile_flag.txt#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nʕ◔ϖ◔ʔ\n```\n\n----------------------------------------\n\nTITLE: Building and Testing a Go File with cgo\nDESCRIPTION: This Go snippet demonstrates how to build a Go program that uses cgo to interact with C libraries, specifically accessing the INT_MAX constant from limits.h. The go build command checks if there is any stat operation related to an archive file, which should not happen as part of the test verification. There are no external dependencies apart from the Go toolchain itself.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_dash_n_cgo.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n# Tests golang.org/issue/14944\n\n[!cgo] skip\n\ngo build -n foo.go\n! stderr 'os.Stat .* no such file or directory' # there shouldn\\'t be a stat of the archive file\n\n-- foo.go --\npackage main\n\n/*\n#include <limits.h>\n*/\nimport \"C\"\n\nfunc main() {\n        println(C.INT_MAX)\n}\n```\n\n----------------------------------------\n\nTITLE: Downgrading Go Version and Adding Toolchain\nDESCRIPTION: This snippet demonstrates downgrading the Go version while adding a specific toolchain version. It shows how to verify the changes in the go.mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_toolchain.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngo get go@1.22.1 toolchain@go1.22.3\n```\n\n----------------------------------------\n\nTITLE: Running Go Test with Coverage for Pseudo-Packages in Shell\nDESCRIPTION: This command executes a Go test with specific flags to check coverage handling for pseudo-packages. It targets the 'internal/coverage/decodecounter' package and includes 'sync' and 'unsafe' in the coverage analysis.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_n_cover_std.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncd $GOROOT/src\ngo test -vet=off -p=1 -n -coverpkg=internal/coverage/decodecounter internal/coverage/decodecounter sync unsafe\n```\n\n----------------------------------------\n\nTITLE: Basic Golang Package Example for Dependency Import\nDESCRIPTION: This Go source file within the `usex` package imports the `example.net/x` module, serving as a basic example of dependency management in Go.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_consistency.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage usex\n\nimport _ \"example.net/x\"\n```\n\n----------------------------------------\n\nTITLE: Defining Empty Package B in Go\nDESCRIPTION: This Go file defines an empty package b for example.net/b.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_boost.txt#2025-04-22_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\npackage b\n```\n\n----------------------------------------\n\nTITLE: Direct Dependency Module Definition\nDESCRIPTION: go.mod file for the direct dependency module\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_lazy_upgrade_lazy.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule direct\n\ngo 1.17\n\nrequire example.com/lazyupgrade v0.1.0\n```\n\n----------------------------------------\n\nTITLE: CGO Integration with C Header Replace\nDESCRIPTION: Go file that uses CGO to call a C function defined in an external header and implemented in a C file. Tests that header files can be replaced in overlays.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_overlay.txt#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\n// #include \"cgo_header.h\"\nimport \"C\"\n\nfunc main() {\n\tC.say_hello()\n}\n```\n\n----------------------------------------\n\nTITLE: Z1 Test Implementation\nDESCRIPTION: Test file for package z1 with a basic test function and z3 package import.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gcflags_patterns.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage z1_test\nimport \"testing\"\nimport _ \"z3\"\nfunc Test(t *testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Go Version and Managing Toolchain\nDESCRIPTION: This snippet shows how to upgrade the Go version, add a specific toolchain version, and then remove it. It demonstrates the interaction between Go version and toolchain version management.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_toolchain.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngo get go@1.22.3\ngo get toolchain@go1.100.0\ngo get go@1.22.3 toolchain@1.22.3\n```\n\n----------------------------------------\n\nTITLE: Checking Version Metadata with Edited File\nDESCRIPTION: This snippet simulates an edited file and installs the Go binary. It verifies that the version metadata includes the 'modified=true' flag. It also checks the module path to verify the `+dirty` suffix is added. Finally the edited file is reverted.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_hg.txt#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ncp ../../outside/empty.txt ../README\ngo install\ngo version -m $GOBIN/a$GOEXE\nstdout '^\\tbuild\\tvcs.modified=true$'\nstdout '\\s+mod\\s+example.com/a\\s+v1.2.3\\+dirty\\s+'\nexec hg revert ../README\nrm $GOBIN/a$GOEXE\n```\n\n----------------------------------------\n\nTITLE: Initializing Fossil Repository for Go Build Test\nDESCRIPTION: Sets up the environment and initializes a Fossil repository for testing Go's VCS integration. It creates necessary directories and files for the test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_fossil.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GOBIN=$WORK/gopath/bin\nenv oldpath=$PATH\nenv HOME=$WORK\nenv USER=gopher\n[!GOOS:windows] env fslckout=.fslckout\n[GOOS:windows] env fslckout=_FOSSIL_\nexec pwd\nexec fossil init repo.fossil\ncd repo/a\n```\n\n----------------------------------------\n\nTITLE: Module Definition in go.mod File\nDESCRIPTION: Standard go.mod file declaring the module name for the Go toolchain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-loong64.txt#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Go Module Configuration\nDESCRIPTION: Module definition file specifying the module name, Go version requirement, and external dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_missing_ziphash.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule use\n\ngo 1.16\n\nrequire rsc.io/quote v1.5.2\n```\n\n----------------------------------------\n\nTITLE: Testing Module Dependencies in Go\nDESCRIPTION: This snippet tests the dependencies of a specific module and checks the output for expected modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_of_test_dep.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo list -test -deps example.com/a\nstdout example.com/b\n! stdout example.com/c\n\n[!short] go test -c -o $devnull example.com/a\n[!short] cmp go.mod go.mod.old\n```\n\n----------------------------------------\n\nTITLE: Secondary Package Import\nDESCRIPTION: Go package demonstrating import of a module with self-retraction handling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage use_self_prev\n\nimport _ \"example.com/retract/self/prev\"\n```\n\n----------------------------------------\n\nTITLE: Error-generating Fuzz Test in Go\nDESCRIPTION: Shows how to implement a fuzz test that generates an error using f.Error().\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage error_fuzz\n\nimport \"testing\"\n\nfunc Fuzz(f *testing.F) {\n    f.Error(\"error in target\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Dependencies\nDESCRIPTION: This snippet defines a Go module with its dependencies and replace directives in the go.mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_of_test_dep.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/lazy\n\ngo 1.15\n\nrequire example.com/a v0.1.0\n\nreplace (\n\texample.com/a v0.1.0 => ./a\n\texample.com/b v0.1.0 => ./b1\n\texample.com/b v0.2.0 => ./b2\n\texample.com/c v0.1.0 => ./c1\n\texample.com/c v0.2.0 => ./c2\n)\n```\n\n----------------------------------------\n\nTITLE: Overlay Directory Function\nDESCRIPTION: Go file containing function g definition in package m.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_overlay.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage m\n\nfunc g() {\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Unsetting API - os and syscall Packages - Go\nDESCRIPTION: Adds Unsetenv(string) error functions to os and syscall, removing an environment variable from the process environment. Accepts the name of the variable as input; errors are returned on failure. Commonly needed for testing, shell wrappers, and modified execution environments.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_20\n\nLANGUAGE: Go\nCODE:\n```\nfunc Unsetenv(string) error // in os\nfunc Unsetenv(string) error // in syscall\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Go module declaration for fuzz_parallel package using Go 1.17.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_parallel.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule fuzz_parallel\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: Embedding External Test Files in Go Using `embed` Package\nDESCRIPTION: External Go tests use the `embed` package to embed files matching the pattern `z*t*t` into the `Z` variable as a string. This facility allows for easy inclusion of test resources directly in the test binary. It requires the `embed` package from Go 1.16 onwards.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/embed.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage p_test\n\nimport \"embed\"\n\n//go:embed z*t*t\nvar Z string\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Commands for Error Handling in Shell\nDESCRIPTION: This shell script tests the behavior of Go module commands. It first attempts `go mod download`, expecting it to fail with a specific stderr message indicating a malformed `go.sum` file. Subsequently, it runs `go mod tidy` to correct the `go.sum` file and then compares the modified `go.sum` with an expected correct version (`go.sum.after-tidy`) using `cmp`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/malformed_gosum_issue62345.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n! go mod download\nstderr '^malformed go.sum:\\n.*go.sum:3: wrong number of fields 5\\n$'\n\ngo mod tidy\ncmp go.sum go.sum.after-tidy\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Go Module\nDESCRIPTION: These go.mod and Go files define simple modules that are used as dependencies in the main module. They demonstrate the basic structure of a Go module with a single function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/dep\n```\n\nLANGUAGE: Go\nCODE:\n```\npackage dep\n\nfunc G() {\n}\n```\n\n----------------------------------------\n\nTITLE: Module Declaration in go.mod\nDESCRIPTION: Standard go.mod file declaring the Golang toolchain module name.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.windows-386.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Main Package Import\nDESCRIPTION: Main package file importing the indirect dependency\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_ambiguous.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage m\n\nimport _ \"example.net/indirect\"\n```\n\n----------------------------------------\n\nTITLE: Go Test File for Package with Imported Vet Error\nDESCRIPTION: This Go test file tests a function in a package that imports another package with a vet error, used to verify vet's behavior in such scenarios.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_vet.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage p2\n\nimport \"testing\"\n\nfunc TestF(t *testing.T) {\n\tF()\n}\n```\n\n----------------------------------------\n\nTITLE: Go 1.20 Workspace Configuration File\nDESCRIPTION: A Go 1.20 workspace configuration file that specifies the workspace version and includes the current directory and q subdirectory in the workspace.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/godebug_default.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngo 1.20\nuse .\nuse ./q\n```\n\n----------------------------------------\n\nTITLE: Basic Go Module Definition\nDESCRIPTION: Defines a simple Go module named 'example' using Go 1.18\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_buildvcs_auto.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example\n\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module definition file specifying the module path and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/auth/or401.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule vcs-test.golang.org/auth/or401\n\ngo 1.13\n```\n\n----------------------------------------\n\nTITLE: Extra Replacement Error Test\nDESCRIPTION: Sample modules.txt with a module marked as replaced but not replaced in the workspace, along with the expected error message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_modules_txt_consistent.txt#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n## workspace\n# example.com/p v1.0.0 => ./p\n## explicit; go 1.21\n# example.com/q v1.0.0 => ./q\n## explicit; go 1.21\n# example.com/r v1.0.0 => ./r\nexample.com/r\n## go 1.21\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ngo: inconsistent vendoring in $GOPATH${/}src:\n\texample.com/r@v1.0.0: is marked as replaced in vendor/modules.txt, but not replaced in the workspace\n\n\tTo ignore the vendor directory, use -mod=readonly or -mod=mod.\n\tTo sync the vendor directory, run:\n\t\tgo work vendor\n```\n\n----------------------------------------\n\nTITLE: Fetching and Listing Go Module Versions\nDESCRIPTION: The code snippets show how to use the 'go get' command to fetch specific versions of a module, including pseudo-versions. Then, 'go list -m -u all' is used to list available upgrades. This setup is used to test the upgrade behavior of Go modules with specific versions. Dependencies include an internet connection for fetching the module and access to the Go toolchain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_upgrade_pseudo.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get example.com/pseudoupgrade@b5426c8\ngo list -m -u all\nstdout '^example.com/pseudoupgrade v0.1.1-0.20190429073117-b5426c86b553$'\n\ngo get example.com/pseudoupgrade@v0.0.0-20190430073000-30950c05d534\ngo list -m -u all\nstdout '^example.com/pseudoupgrade v0.0.0-20190430073000-30950c05d534$'\n```\n\n----------------------------------------\n\nTITLE: Main Package Implementation\nDESCRIPTION: Simple Go implementation file defining a package main with exported function F and main entry point.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_main_archive.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc F()    {}\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Testing Production Toolchain Download\nDESCRIPTION: Tests downloading and verification of an actual Go toolchain version from official servers with specific OS and architecture constraints.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_net.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nenv GOPROXY=\n[go-builder] env GOSUMDB=\n[!go-builder] env GOSUMDB=sum.golang.org\nenv GOTOOLCHAIN=go1.20.1\nenv PATH=\nenv path=\ngo version\nstderr '^go: downloading go1.20.1 '\nstdout go1.20.1\n```\n\n----------------------------------------\n\nTITLE: Go file in pkginroot directory\nDESCRIPTION: A simple Go file that creates a package in the root directory, which should trigger the 'go mod tidy' recommendation when running 'go mod init'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_init_tidy.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage vendorimport\n```\n\n----------------------------------------\n\nTITLE: Go Generate Run Flag Test\nDESCRIPTION: Test file for verifying the -run flag functionality in go generate, containing multiple generate directives that can be selectively executed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/generate.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Copyright 2015 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// Test -run flag\n\n//go:generate echo oh yes my man\n//go:generate echo no, no, a thousand times no\n\npackage p\n```\n\n----------------------------------------\n\nTITLE: Adding FullPath function to Windows syscall package\nDESCRIPTION: Implements the FullPath function for the syscall package on Windows for both 386 and amd64 architectures. This function converts a relative or incomplete path to a full absolute path.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_29\n\nLANGUAGE: go\nCODE:\n```\nfunc FullPath(string) (string, error)\n```\n\n----------------------------------------\n\nTITLE: Defining Go Workspace Configuration\nDESCRIPTION: This snippet shows the contents of the go.work file, which defines the workspace configuration. It specifies which modules to use and provides a replace directive that overrides conflicting replaces in individual modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace_conflict_override.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nuse m\nuse n\nreplace example.com/dep => ./dep3\n```\n\n----------------------------------------\n\nTITLE: cgo Usage and cgoimport Import - Go\nDESCRIPTION: This file uses the cgo pseudo-package import (import \"C\") which marks it as a cgo file, included only when cgo is enabled. It also imports cgoimport for side effects. Key prerequisite: CGO_ENABLED=1 and a cgo toolchain. Input: n/a. Output: cgo package inclusion. Limitation: ignored unless cgo is enabled and a cgo toolchain is available.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_constraints.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nimport \"C\"\n\nimport _ \"cgoimport\"\n\n```\n\n----------------------------------------\n\nTITLE: Controlling HTTP/2 Server Support using http2server GODEBUG Setting (Go 1.6)\nDESCRIPTION: Introduced in Go 1.6, this setting controls the transparent enablement of HTTP/2 support in the net/http server. The default behavior enables HTTP/2. Setting http2server=0 disables HTTP/2 negotiation by the server. Set via GODEBUG environment variable (e.g., GODEBUG=http2server=0).\nSOURCE: https://github.com/golang/go/blob/master/doc/godebug.md#2025-04-22_snippet_31\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp2server\n```\n\n----------------------------------------\n\nTITLE: Modifying and Verifying Go Module Files\nDESCRIPTION: This shell script segment modifies and verifies Go module files by updating the module path and ensuring the permissions are correctly set and maintained. It involves changing file permissions, updating the module, and running the script to verify the changes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_permissions.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n\nchmod 0640 go.mod\nchmod 0604 go.sum\ngo mod edit -module=golang.org/issue/34634\n\ngo get\ncmp go.mod go.mod.want\ncmp go.sum go.sum.want\n\ngo run .\nstdout 'go.mod: 0640'\nstdout 'go.sum: 0604'\n\n```\n\n----------------------------------------\n\nTITLE: Testing Opt Function in Go\nDESCRIPTION: Tests the Opt function by comparing its output to the expected optimization truth. Fails the test if the output doesn't match the expected string.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709160352-0d003b9c4bfa.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc TestOpt(t *testing.T) {\n\topt := \"If a program is too slow, it must have a loop.\"\n\tif out := Opt(); out != opt {\n\t\tt.Errorf(\"Opt() = %q, want %q\", out, opt)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Importing a Dependency in a Go Package (Go)\nDESCRIPTION: This Go source file defines a simple package `x`. It imports the `rsc.io/quote` package using a blank identifier (`_`). This import ensures that the `rsc.io/quote` module is registered as a dependency in the `go.mod` file when `go get` or other build commands are run, even though no functions from the package are directly called.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n-- x.go --\npackage x\nimport _ \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: Testing GOARM Impact on Build ID (Shell)\nDESCRIPTION: This shell script sets up the environment and runs commands to test if changing the GOARM value affects the build ID. It sets GOOS to linux, GOARCH to arm, and tests with GOARM values of 5 and 7.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_arch_mode.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# Issue 9737: verify that GOARM affects the computed build ID\n\n[short] skip\n\n# arm\nenv GOOS=linux\nenv GOARCH=arm\nenv GOARM=5\ngo install mycmd\nenv GOARM=7\nstale mycmd\n```\n\n----------------------------------------\n\nTITLE: Implementing TestMain for I/O Stream Handling in Go\nDESCRIPTION: Defines TestMain function to handle test setup and execution. It includes logic to simulate a hanging process when a specific environment variable is set.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_timeout_stdin.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc TestMain(m *testing.M) {\n\tif os.Getenv(\"TEST_TIMEOUT_HANG\") == \"1\" {\n\t\tio.Copy(io.Discard, os.Stdin)\n\t\tif _, err := os.Stderr.WriteString(\"stdin closed\\n\"); err != nil {\n\t\t\tos.Exit(1)\n\t\t}\n\n\t\tticker := time.NewTicker(100 * time.Millisecond)\n\t\tfor t := range ticker.C {\n\t\t\t_, err := fmt.Fprintf(os.Stderr, \"still alive at %v\\n\", t)\n\t\t\tif err != nil {\n\t\t\t\tos.Exit(1)\n\t\t\t}\n\t\t}\n\t}\n\n\tm.Run()\n}\n```\n\n----------------------------------------\n\nTITLE: Fuzzing Cache Validator for Minimization Tests\nDESCRIPTION: Utility program that checks fuzzing cache files to verify input minimization. It confirms that at least one cached input has been properly minimized to a length of 1 or less, validating the minimizer's functionality.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_minimize_interesting.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n//go:build ignore\n// +build ignore\n\n// check_cache.go checks that each file in the cached corpus has a []byte\n// of length at most 1. This verifies that at least one cached input is minimized.\npackage main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"regexp\"\n\t\"strconv\"\n)\n\nfunc main() {\n\tdir := os.Args[1]\n\tents, err := os.ReadDir(dir)\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n\tfor _, ent := range ents {\n\t\tname := filepath.Join(dir, ent.Name())\n\t\tif good, err := checkCacheFile(name); err != nil {\n\t\t\tfmt.Fprintln(os.Stderr, err)\n\t\t\tos.Exit(1)\n\t\t} else if good {\n\t\t\tos.Exit(0)\n\t\t}\n\t}\n\tfmt.Fprintln(os.Stderr, \"no cached inputs were minimized\")\n\tos.Exit(1)\n}\n\nfunc checkCacheFile(name string) (good bool, err error) {\n\tdata, err := os.ReadFile(name)\n\tif err != nil {\n\t\treturn false, err\n\t}\n\tfor _, line := range bytes.Split(data, []byte(\"\\n\")) {\n\t\tm := valRe.FindSubmatch(line)\n\t\tif m == nil {\n\t\t\tcontinue\n\t\t}\n\t\tif s, err := strconv.Unquote(string(m[1])); err != nil {\n\t\t\treturn false, err\n\t\t} else if len(s) <= 1 {\n\t\t\treturn true, nil\n\t\t}\n\t}\n\treturn false, nil\n}\n\nvar valRe = regexp.MustCompile(`^\\[\\]byte\\(([^)]+)\\)$`)\n```\n\n----------------------------------------\n\nTITLE: Package D with Dependent Import\nDESCRIPTION: Go package 'd' importing package 'b' which has the non-canonical import\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/noncanonical_import.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage d\\n\\nimport _ \"canonical/b\"\n```\n\n----------------------------------------\n\nTITLE: Root Module Definition with Dependencies\nDESCRIPTION: A go.mod file for the root module 'm' that requires and replaces two local modules 'm/a' and 'm/b', setting up the dependencies needed to demonstrate an import cycle.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_cycle.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\nrequire (\n\tm/a v0.0.0\n\tm/b v0.0.0\n)\n\nreplace (\n\tm/a => ./a\n\tm/b => ./b\n)\n```\n\n----------------------------------------\n\nTITLE: Deprecations in syscall package for darwin-amd64-cgo\nDESCRIPTION: Lists deprecated functions and types in the syscall package for darwin-amd64-cgo architecture.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_31\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (darwin-amd64-cgo), func BpfBuflen //deprecated\npkg syscall (darwin-amd64-cgo), func BpfDatalink //deprecated\npkg syscall (darwin-amd64-cgo), func BpfHeadercmpl //deprecated\npkg syscall (darwin-amd64-cgo), func BpfInterface //deprecated\npkg syscall (darwin-amd64-cgo), func BpfJump //deprecated\npkg syscall (darwin-amd64-cgo), func BpfStats //deprecated\npkg syscall (darwin-amd64-cgo), func BpfStmt //deprecated\npkg syscall (darwin-amd64-cgo), func BpfTimeout //deprecated\npkg syscall (darwin-amd64-cgo), func CheckBpfVersion //deprecated\npkg syscall (darwin-amd64-cgo), func FlushBpf //deprecated\npkg syscall (darwin-amd64-cgo), func ParseRoutingMessage //deprecated\npkg syscall (darwin-amd64-cgo), func ParseRoutingSockaddr //deprecated\npkg syscall (darwin-amd64-cgo), func RouteRIB //deprecated\npkg syscall (darwin-amd64-cgo), func SetBpf //deprecated\npkg syscall (darwin-amd64-cgo), func SetBpfBuflen //deprecated\npkg syscall (darwin-amd64-cgo), func SetBpfDatalink //deprecated\npkg syscall (darwin-amd64-cgo), func SetBpfHeadercmpl //deprecated\npkg syscall (darwin-amd64-cgo), func SetBpfImmediate //deprecated\npkg syscall (darwin-amd64-cgo), func SetBpfInterface //deprecated\npkg syscall (darwin-amd64-cgo), func SetBpfPromisc //deprecated\npkg syscall (darwin-amd64-cgo), func SetBpfTimeout //deprecated\npkg syscall (darwin-amd64-cgo), func StringSlicePtr //deprecated\npkg syscall (darwin-amd64-cgo), type InterfaceAddrMessage //deprecated\npkg syscall (darwin-amd64-cgo), type InterfaceMessage //deprecated\npkg syscall (darwin-amd64-cgo), type InterfaceMulticastAddrMessage //deprecated\npkg syscall (darwin-amd64-cgo), type RouteMessage //deprecated\npkg syscall (darwin-amd64-cgo), type RoutingMessage //deprecated\n```\n\n----------------------------------------\n\nTITLE: Go Module Main Configuration\nDESCRIPTION: Basic Go module configuration file defining module 'x' without any dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_incompatible.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule x\n```\n\n----------------------------------------\n\nTITLE: Dependency Package Definition\nDESCRIPTION: Empty package definition for the dependent module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_nospace.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage x\n```\n\n----------------------------------------\n\nTITLE: Direct Dependency Implementation\nDESCRIPTION: Go file implementing the direct dependency module\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_lazy_upgrade_lazy.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage direct\n\nimport _ \"example.com/lazyupgrade\"\n```\n\n----------------------------------------\n\nTITLE: Miller-Rabin Test Data Format\nDESCRIPTION: Test vectors specify whether base B is a Miller-Rabin composite witness for candidate W. Each test case includes the expected Result (PossiblyPrime or Composite), the candidate W, and the base B to test.\nSOURCE: https://github.com/golang/go/blob/master/src/crypto/internal/fips140/rsa/testdata/miller_rabin_tests.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nResult = PossiblyPrime\nW = d6b4ffc7cf70b2a2fc5d6023015875504d40e3dcce7c2e6b762c3de7bb806a5074144e7054198dabf53d23108679ccc541d5a99efeb1d1abaf89e0dbcead2a8b\nB = fabbafdbec6494ddb5ea4bf458536e87082369b0e53a200ed413f3e64b2fddc7c57c565710fbe73fae5b188fce97d8dcca74c2b5d90906c96d3c2c358a735cd\n```\n\n----------------------------------------\n\nTITLE: Empty Go Package File\nDESCRIPTION: An empty Go source file that only contains a package declaration.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badmod_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage x\n```\n\n----------------------------------------\n\nTITLE: Updating Git Author and Creating Pre-release v2.6.0\nDESCRIPTION: Changes the Git author information to Bryan C. Mills, checks out v2.5.5 tag, and creates commits and tag for v2.6.0-pre1. This simulates development by a different contributor.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/querytest.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nenv GIT_AUTHOR_NAME='Bryan C. Mills'\nenv GIT_AUTHOR_EMAIL=bcmills@google.com\nenv GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME\nenv GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL\n\ngit checkout v2.5.5\n\nat 2019-05-13T17:13:56-04:00\necho 'before v2.6.0-pre1'\ncp stdout status\ngit commit -a -m 'before v2.6.0-pre1'\n\nat 2019-05-13T17:13:56-04:00\necho 'at v2.6.0-pre1'\ncp stdout status\ngit commit -a -m 'at v2.6.0-pre1'\ngit tag 'v2.6.0-pre1'\n```\n\n----------------------------------------\n\nTITLE: Verifying `go get` Accepts Package Paths with '+' (Shell)\nDESCRIPTION: This shell snippet tests if the `go get` command can fetch packages whose paths contain the '+' character. It restores the main `go.mod` file, uses `go get` to fetch `example.net/cmd/x++`, and then uses `go list -m` to verify that the parent module (`example.net/cmd`) was correctly resolved and added, indicated by the replacement directive mapping.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_path_plus.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# 'go get' accepts package paths with pluses.\ncp go.mod.orig go.mod\ngo get example.net/cmd/x++\ngo list -m example.net/cmd\nstdout '^example.net/cmd v0.0.0-00010101000000-000000000000 => ./cmd$'\n```\n\n----------------------------------------\n\nTITLE: Enabling Go Modules via Environment Variable (Shell)\nDESCRIPTION: Sets the GO111MODULE environment variable to 'on'. This command ensures that subsequent Go commands operate in module-aware mode. This is a prerequisite for using 'go mod' commands.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_init_path.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n```\n\n----------------------------------------\n\nTITLE: Go Module Test Configuration\nDESCRIPTION: Go module configuration file defining the module name and Go version requirement\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_temp.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule issue51992\n\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Testing Go Mod Tidy and Vendor Commands\nDESCRIPTION: This snippet tests the 'go mod tidy' and 'go mod vendor' commands and verifies that they ignore appengine imports.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_bad_domain.txt#2025-04-22_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nrm usenonexistent/x.go\ngo mod tidy\ngo mod vendor\n```\n\n----------------------------------------\n\nTITLE: Empty Go Module Definition File\nDESCRIPTION: A minimal go.mod file that defines an empty module named 'm'. This file is used as a starting point for the tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gopkg_unstable.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests with Output Assertions in Bash\nDESCRIPTION: A bash script that runs a Go test file with verbose output and checks for expected log messages. The script verifies that specific log messages appear the correct number of times and that 'CONT' lines (which indicate parallel test execution) do not appear.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_chatty_fail.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Run chatty tests. Assert on CONT lines.\n! go test chatty_test.go -v\n\n# Sanity check that output occurs.\nstdout -count=2 'this is sub-0'\nstdout -count=2 'this is sub-1'\nstdout -count=2 'this is sub-2'\nstdout -count=1 'error from sub-0'\nstdout -count=1 'error from sub-1'\nstdout -count=1 'error from sub-2'\n\n# Non-parallel tests should not print CONT.\n! stdout CONT\n```\n\n----------------------------------------\n\nTITLE: Defining NetBSD ARM64 Signal Constants in Go Syscall Package\nDESCRIPTION: Signal constants for NetBSD. These define the various signal types that can be sent to processes, including child status change, terminal I/O, user-defined signals, process resource limit signals, and system signals.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_57\n\nLANGUAGE: Go\nCODE:\n```\nconst SIGBUS = 10\nconst SIGCHLD = 20\nconst SIGCHLD Signal\nconst SIGCONT = 19\nconst SIGCONT Signal\nconst SIGEMT = 7\nconst SIGEMT Signal\nconst SIGINFO = 29\nconst SIGINFO Signal\nconst SIGIO = 23\nconst SIGIO Signal\nconst SIGIOT = 6\nconst SIGIOT Signal\nconst SIGPROF = 27\nconst SIGPROF Signal\nconst SIGPWR = 32\nconst SIGPWR Signal\nconst SIGSTOP = 17\nconst SIGSTOP Signal\nconst SIGSYS = 12\nconst SIGSYS Signal\nconst SIGTSTP = 18\nconst SIGTSTP Signal\nconst SIGTTIN = 21\nconst SIGTTIN Signal\nconst SIGTTOU = 22\nconst SIGTTOU Signal\nconst SIGURG = 16\nconst SIGURG Signal\nconst SIGUSR1 = 30\nconst SIGUSR1 Signal\nconst SIGUSR2 = 31\nconst SIGUSR2 Signal\nconst SIGVTALRM = 26\nconst SIGVTALRM Signal\nconst SIGWINCH = 28\nconst SIGWINCH Signal\nconst SIGXCPU = 24\nconst SIGXCPU Signal\nconst SIGXFSZ = 25\nconst SIGXFSZ Signal\n```\n\n----------------------------------------\n\nTITLE: Main Module Go Files\nDESCRIPTION: Defines a minimal go.mod file and an empty m.go file for the main module 'm'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_clean_cache.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n-- go.mod --\nmodule m\n-- m.go --\npackage m\n```\n\n----------------------------------------\n\nTITLE: Running Skipped Fuzz Tests in Go\nDESCRIPTION: This snippet illustrates a skipped fuzz test. It shows how to use the Skip() function to bypass a fuzz test and how it's reported in the test output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_chatty.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage chatty_skipped_fuzz\n\nimport \"testing\"\n\nfunc Fuzz(f *testing.F) {\n    f.Skip()\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Verification with Incorrect Sumdb\nDESCRIPTION: This snippet demonstrates how disagreeing with the sumdb produces security errors. It sets up an incorrect sumdb URL and attempts to fetch modules, which results in checksum mismatch errors.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncp go.mod.orig go.mod\nenv GOSUMDB=$sumdb' '$proxy/sumdb-wrong\n! go get rsc.io/quote\nstderr 'go: rsc.io/quote@v1.5.2: verifying module: checksum mismatch'\nstderr 'downloaded: h1:3fEy'\nstderr 'localhost.localdev/sumdb: h1:wrong'\nstderr 'SECURITY ERROR\\nThis download does NOT match the one reported by the checksum server.'\n! go get rsc.io/sampler\n! go get golang.org/x/text\n```\n\n----------------------------------------\n\nTITLE: Syslog Priority Constants and Writer Implementation\nDESCRIPTION: Syslog facility and priority constants with associated Writer type for logging to syslog on NetBSD (arm64). Provides methods for different log levels and integration with the Go logging system.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nconst LOG_ALERT = 1\nconst LOG_AUTH = 32\nconst LOG_AUTHPRIV = 80\nconst LOG_CRIT = 2\nconst LOG_CRON = 72\nconst LOG_DAEMON = 24\nconst LOG_DEBUG = 7\nconst LOG_EMERG = 0\nconst LOG_ERR = 3\nconst LOG_FTP = 88\nconst LOG_INFO = 6\nconst LOG_KERN = 0\nconst LOG_LOCAL0 = 128\nconst LOG_LOCAL1 = 136\nconst LOG_LOCAL2 = 144\nconst LOG_LOCAL3 = 152\nconst LOG_LOCAL4 = 160\nconst LOG_LOCAL5 = 168\nconst LOG_LOCAL6 = 176\nconst LOG_LOCAL7 = 184\nconst LOG_LPR = 48\nconst LOG_MAIL = 16\nconst LOG_NEWS = 56\nconst LOG_NOTICE = 5\nconst LOG_SYSLOG = 40\nconst LOG_USER = 8\nconst LOG_UUCP = 64\nconst LOG_WARNING = 4\nfunc Dial(string, string, Priority, string) (*Writer, error)\nfunc NewLogger(Priority, int) (*log.Logger, error)\nfunc New(Priority, string) (*Writer, error)\nmethod (*Writer) Alert(string) error\nmethod (*Writer) Close() error\nmethod (*Writer) Crit(string) error\nmethod (*Writer) Debug(string) error\nmethod (*Writer) Emerg(string) error\nmethod (*Writer) Err(string) error\nmethod (*Writer) Info(string) error\nmethod (*Writer) Notice(string) error\nmethod (*Writer) Warning(string) error\nmethod (*Writer) Write([]uint8) (int, error)\ntype Priority int\ntype Writer struct\n```\n\n----------------------------------------\n\nTITLE: Expected Output for 'go get -u -v' Command\nDESCRIPTION: Expected output for the 'go get -u -v' command showing the complex process of updating to the latest versions and switching toolchains multiple times based on dependency requirements.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_toolchain.txt#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ngo: trying upgrade to example.net/a@v0.2.0\ngo: trying upgrade to example.net/b@v0.1.0\ngo: module ./a2 requires go >= 1.22.0; switching to go1.22.9\ngo: trying upgrade to example.net/a@v0.2.0\ngo: trying upgrade to example.net/b@v0.1.0\ngo: accepting indirect upgrade from go@1.20 to 1.22.0\ngo: trying upgrade to example.net/c@v0.1.0\ngo: trying upgrade to example.net/d@v0.2.0\ngo: module ./d2 requires go >= 1.23.0; switching to go1.23.9\ngo: trying upgrade to example.net/a@v0.2.0\ngo: trying upgrade to example.net/b@v0.1.0\ngo: accepting indirect upgrade from go@1.20 to 1.22.0\ngo: trying upgrade to example.net/c@v0.1.0\ngo: trying upgrade to example.net/d@v0.2.0\ngo: accepting indirect upgrade from go@1.22.0 to 1.23.0\ngo: upgraded go 1.20 => 1.23.0\ngo: upgraded example.net/a v0.1.0 => v0.2.0\ngo: added example.net/b v0.1.0\ngo: added example.net/c v0.1.0\ngo: added example.net/d v0.2.0\n```\n\n----------------------------------------\n\nTITLE: Build Commands with Gcflags Analysis\nDESCRIPTION: Shell commands to build Go package with compiler flags for analyzing inlining and package staleness.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_compiler_output.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo install -gcflags=-m .\nstderr 'can inline main'\ngo list -gcflags=-m -f '{{.Stale}}' .\nstdout 'false'\n! stderr 'can inline main'\n```\n\n----------------------------------------\n\nTITLE: Controlling Template Actions in JS Literals using jstmpllitinterp GODEBUG Setting (Go 1.21)\nDESCRIPTION: Introduced in Go 1.21, this setting controls whether html/template actions appearing inside ECMAScript 6 template literals are treated as an error. The default behavior in Go 1.21+ makes this an error for security reasons. This was backported to Go 1.19.8+ and Go 1.20.3+. Setting jstmpllitinterp=0 reverts to the older, potentially unsafe behavior. Set via GODEBUG environment variable (e.g., GODEBUG=jstmpllitinterp=0).\nSOURCE: https://github.com/golang/go/blob/master/doc/godebug.md#2025-04-22_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\njstmpllitinterp\n```\n\n----------------------------------------\n\nTITLE: Main Go File with Multiple Imports\nDESCRIPTION: Defines a main package that imports multiple modules to test the module resolution and replacement rules defined in go.mod.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_import.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\npackage main\nimport (\n\t_ \"example.com/a/b\"\n\t_ \"example.com/x/v3\"\n\t_ \"example.com/y/z/w\"\n\t_ \"example.com/v\"\n\t_ \"example.com/i\"\n)\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Environment Setup for Go Module Testing\nDESCRIPTION: Initial environment configuration for Go module tests, setting up module mode, GOSUMDB, and GOPATH variables\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_file_path.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=on\nenv GOSUMDB=\nenv GOSUMDB=sum.golang.org\nenv GOPATH=$WORK/gopath1\n```\n\n----------------------------------------\n\nTITLE: Certificate Error and Signature Algorithm Constants in crypto/x509 - Go\nDESCRIPTION: These constants and struct fields support error handling and the specification of signature algorithms in X.509 certificate validation and generation. NameMismatch is used as an InvalidReason when subject/common name mismatches occur; SHA256WithRSAPSS, SHA384WithRSAPSS, and SHA512WithRSAPSS define signature algorithms for certificates. The UnknownAuthorityError struct provides access to the problematic Certificate. Used by validation routines and user code handling certificate chains.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.8.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nconst NameMismatch = 5\nconst SHA256WithRSAPSS = 13\nconst SHA384WithRSAPSS = 14\nconst SHA512WithRSAPSS = 15\n```\n\nLANGUAGE: Go\nCODE:\n```\nconst NameMismatch InvalidReason\nconst SHA256WithRSAPSS SignatureAlgorithm\nconst SHA384WithRSAPSS SignatureAlgorithm\nconst SHA512WithRSAPSS SignatureAlgorithm\n```\n\nLANGUAGE: Go\nCODE:\n```\ntype UnknownAuthorityError struct\nUnknownAuthorityError.Cert *Certificate\n```\n\n----------------------------------------\n\nTITLE: Testing Boolean Fuzzing in Go\nDESCRIPTION: This function tests Go's fuzzing capabilities with boolean inputs. It panics when the input is true.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_crash.txt#2025-04-22_snippet_12\n\nLANGUAGE: Go\nCODE:\n```\nfunc FuzzBool(f *testing.F) {\n\tf.Add(false)\n\tf.Fuzz(func(t *testing.T, a bool) {\n\t\tif a {\n\t\t\tpanic(\"this input caused a crash!\")\n\t\t}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Module Association for External File with Go List (Shell)\nDESCRIPTION: This shell snippet changes the current directory to 'a' and then uses `go list` to check the module associated with a Go file (`../b/b.go`) located outside the current directory but within the project structure. It asserts that the output matches the pattern '^<nil>$', indicating that Go correctly identifies the file specified by path as not belonging to a module in this context.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_command_line_arguments.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# The command-line-arguments package does not belong to a module...\ncd a\ngo list -f '{{.Module}}' ../b/b.go\nstdout '^<nil>$'\n```\n\n----------------------------------------\n\nTITLE: Testing Go Build Failure with Bad Zip Dependency (Shell)\nDESCRIPTION: This command attempts to build the `rsc.io/badzip` module, forcing the use of the `go.mod` file (`-mod=mod`). The `!` prefix indicates the command is expected to fail. The `stderr` directive verifies that the build process fails with the same error message about the unexpected file in the zip archive, even though the dependency was manually added to `go.mod`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badzip.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n! go build -mod=mod rsc.io/badzip\nstderr 'zip for rsc.io/badzip@v1.0.0 has unexpected file rsc.io/badzip@v1.0.0.txt'\n```\n\n----------------------------------------\n\nTITLE: Vendor modules information\nDESCRIPTION: Specifies vendored modules information, including the explicit requirement and Go version for example.com/m.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_redundant_requirement.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\n# example.com/m v0.0.0 => ./m\n## explicit; go 1.17\nexample.com/m\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Go Module\nDESCRIPTION: This snippet defines a basic go.mod file for a module named 'm', requiring a specific version of a dependency. Essential for setting up Go module dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badmod.txt#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n-- go.mod --\nmodule m\nrequire rsc.io/badmod v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Dependencies\nDESCRIPTION: This snippet shows the go.mod file content, which defines the module name, Go version, and required dependencies for the project.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_work_versioned.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example\n\ngo 1.18\n\nrequire example.com/printversion v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Upgrading Module and Verifying Checksum\nDESCRIPTION: Upgrades a module and checks if the checksum for the new version is added to go.sum.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_update_unrelated_sum.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo get example.com/upgrade@v0.0.2\ngrep '^rsc.io/quote v1.5.2 ' go.sum\n```\n\n----------------------------------------\n\nTITLE: Testing Retracted Incompatible Version\nDESCRIPTION: Attempts to get a +incompatible version that was retracted in v1.0.0. Verifies that proper warning is shown for retracted versions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_incompatible.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo get example.com/retract/incompatible@v2.0.0+incompatible\nstderr '^go: warning: example.com/retract/incompatible@v2.0.0\\+incompatible: retracted by module author$'\n```\n\n----------------------------------------\n\nTITLE: Generic Handle Type and Operations in Go\nDESCRIPTION: Definition of a generic Handle type with Make function for creation and Value method for retrieval, using comparable constraint.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.23.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype Handle[$0 comparable] struct\nfunc Make[$0 comparable]($0) Handle[$0]\nfunc (Handle[$0]) Value() $0\n```\n\n----------------------------------------\n\nTITLE: Testing Automatic Toolchain Downloads\nDESCRIPTION: Tests automatic toolchain download behavior with various Go versions, including specific version number handling and download formatting.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_issue66175.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nenv GOTOOLCHAIN=auto\nrm go.mod\ngo mod init m\ngo mod edit -go=1.300 -toolchain=none\n! go version\nstderr 'go: downloading go1.300.0 '\n```\n\n----------------------------------------\n\nTITLE: Copying Go Module File\nDESCRIPTION: Creates a backup of the go.mod file for comparison in later tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version_missing.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncp go.mod go.mod.orig\n```\n\n----------------------------------------\n\nTITLE: Creating First Version Tag\nDESCRIPTION: Adds and commits v0.2.1 file and creates corresponding Git tag.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/tagtests.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit add v0.2.1\ngit commit -m 'v0.2.1'\ngit tag 'v0.2.1'\n```\n\n----------------------------------------\n\nTITLE: Describing Module Evolution in Plaintext - Plaintext\nDESCRIPTION: This snippet serves as a README to document versioned package additions within the module example.net/pkgadded. It outlines that the root package is added in v1.1.0 and a subpackage in v1.2.0, clarifying the intended use and timeline of these components for users and contributors. No specific dependencies are required, and it is meant to be read by humans rather than processed by tools.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_pkgadded_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n-- README.txt --\nWe will add the package example.net/pkgadded in v1.1.0,\nand example.net/pkgadded/subpkg in v1.2.0.\n```\n\n----------------------------------------\n\nTITLE: Testing Bulk Module Downloads\nDESCRIPTION: Tests multiple module downloads in bulk using cached results.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/reuse_git.txt#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n! go mod download -reuse=all.json -json vcs-test.golang.org/git/hello.git@latest vcs-test.golang.org/git/hello.git/v9@latest vcs-test.golang.org/git/hello.git/sub/v9@latest vcs-test.golang.org/git/tagtests.git@latest vcs-test.golang.org/git/tagtests.git@v0.2.2 vcs-test.golang.org/git/tagtests.git@master\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Function with Panic\nDESCRIPTION: This Go code implements a test function that panics, used to test the behavior of panics in regular test functions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_exit.txt#2025-04-22_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\npackage testpanic_test\n\nimport \"testing\"\n\nfunc TestPanic(*testing.T) {\n\tpanic(\"haha no\")\n}\n```\n\n----------------------------------------\n\nTITLE: Go module definition with external dependency\nDESCRIPTION: A basic go.mod file defining a module named 'mymodule' with a dependency on rsc.io/quote v1.5.2.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_why.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule mymodule\nrequire rsc.io/quote v1.5.2\n```\n\n----------------------------------------\n\nTITLE: Defining the 'x' Go Module\nDESCRIPTION: This `go.mod` file defines a Go module named 'x'. It serves as the base module definition for the first test case. The shell script modifies this file to add specific dependencies and replacements before building the binary.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_modinfo.txt#2025-04-22_snippet_2\n\nLANGUAGE: gomod\nCODE:\n```\n-- x/go.mod --\nmodule x\n```\n\n----------------------------------------\n\nTITLE: Go Module Configuration\nDESCRIPTION: This snippet shows the go.mod file configuration for the example project. It defines the module, Go version requirement, and includes replace directives for managing local development versions of dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_ambiguous_import.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/importer\n\ngo 1.16\n\nrequire (\n\texample.net/m v0.1.0\n)\n\nreplace (\n\texample.net/m v0.1.0 => ./m1\n\texample.net/m v0.2.0 => ./m2\n\texample.net/m/p v1.0.0 => ./p0\n)\n```\n\n----------------------------------------\n\nTITLE: Checking Go Code Coverage with go tool cover (Bash)\nDESCRIPTION: Runs the `go tool cover` command with the `-func` flag on a coverage profile file (`cover.out`). It then checks the standard output (`stdout`) to ensure it matches the pattern indicating 0.0% total statement coverage. This command sequence is typically used in automated tests or scripts to verify code coverage reports.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_mod_empty.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo tool cover -func=cover.out\nstdout total.*statements.*0.0%\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Module\nDESCRIPTION: This snippet defines a minimal Go module configuration. It specifies the module name as 'empty' and sets the Go version to 1.16.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_race_install.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule empty\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Go Module without Go Version\nDESCRIPTION: Module definition without go version directive but with dependencies\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_readonly.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\nrequire (\n\trsc.io/quote v1.5.2\n\trsc.io/testonly v1.0.0 // indirect\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Main Go Package with Import (Go)\nDESCRIPTION: This Go source file defines the `main` package located in the `a` directory (`m/a`). It imports package `m/b` using the blank identifier (`_`), meaning it imports `m/b` only for its initialization side effects. This is the entry point package likely targeted by PGO.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_pgo_issue66218.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport _ \"m/b\"\n```\n\n----------------------------------------\n\nTITLE: Invalid Assembly File\nDESCRIPTION: Assembly file with unparsable comment to test build system behavior\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_issue_56509.txt#2025-04-22_snippet_1\n\nLANGUAGE: assembly\nCODE:\n```\n;/\n```\n\n----------------------------------------\n\nTITLE: Querying Go Module Information with go list\nDESCRIPTION: This snippet demonstrates how to use the \"go list\" command to query information about Go modules using JSON format. It is specifically checking for errors related to missing Go files in the module directory. Prerequisite: Go CLI installed and properly configured. Input: a directory path; Output: JSON structure with the error if no Go files are found.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_json_issue64946.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd mod\ngo list -e -json=ImportPath,Error ./foo\nstdout '\\\"Err\\\": \\\"no Go files in .*(/|\\\\\\\\)src(/|\\\\\\\\)mod(/|\\\\\\\\)foo\\\"'\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Version Specification\nDESCRIPTION: This snippet defines a Go module file (go.mod) that specifies the module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_future.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule m\ngo 1.21\n```\n\n----------------------------------------\n\nTITLE: Inspecting Package Target and Asserting Binary Name (v1) (Shell)\nDESCRIPTION: Uses `go list` with a format string `{{.Target}}` to retrieve the potential build target (binary name) for the `rsc.io/fortune` package. The subsequent `! stdout` and `stdout` lines are test assertions, likely from a script runner like `txtar`, verifying that the output does not match `fortune@v1` but does match the regular expression `fortune(\\.exe)?$`, allowing for an optional `.exe` suffix.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_install_versioned.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo list -f '{{.Target}}' rsc.io/fortune\n! stdout fortune@v1\nstdout 'fortune(\\.exe)?$'\n```\n\n----------------------------------------\n\nTITLE: Basic Go Package Declaration\nDESCRIPTION: This snippet defines a basic Go package named 'quote'. No functionality is implemented, serving mainly as a placeholder for module checks.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_multirepo.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\npackage quote\n```\n\n----------------------------------------\n\nTITLE: Testing Go Mod Tidy Removes Redundant Requirements\nDESCRIPTION: Verifies that 'go mod tidy' removes redundant requirements from the go.mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retention.txt#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngo mod tidy\ncmp go.mod go.mod.tidy\n```\n\n----------------------------------------\n\nTITLE: Module 'x1' Definition with Dependencies\nDESCRIPTION: The go.mod file for x v0.1.0 (located in directory x1) that requires modules 'b' and 'i'. This creates a circular dependency with module 'b'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_tidy.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nmodule x\ngo 1.13\nrequire (\n\tb v0.0.0\n\ti v0.0.0\n)\n```\n\n----------------------------------------\n\nTITLE: Go Module Configuration for Replacing gopkg.in v4 with Incompatible Version\nDESCRIPTION: This go.mod file sets up the replacement of a gopkg.in v4 module with an incompatible version from GitHub.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_gopkgin.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nmodule golang.org/issue/34254\n\ngo 1.13\n\nrequire gopkg.in/src-d/go-git.v4 v4.13.1\n\nreplace gopkg.in/src-d/go-git.v4 v4.13.1 => github.com/src-d/go-git v4.6.0+incompatible\n```\n\n----------------------------------------\n\nTITLE: Module Version Info JSON\nDESCRIPTION: JSON metadata file containing version information for the module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_newergoversion_v1.2.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.2.0\"}\n```\n\n----------------------------------------\n\nTITLE: Module D Configuration\nDESCRIPTION: Basic module configuration for example.com/d with Go 1.21.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_issue54372.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/d\n\ngo 1.21\n```\n\n----------------------------------------\n\nTITLE: Defining C Function in Vendored Header (C)\nDESCRIPTION: This C header file (`bar.h`), located in the vendored module's `c` directory, defines the `printfile` function. The function uses `printf` to print the value of the `__FILE__` preprocessor macro, which evaluates to the current filename. This is used to test how `-trimpath` affects the reported path.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_trimpath_macro.txt#2025-04-22_snippet_6\n\nLANGUAGE: C\nCODE:\n```\n#include \"stdio.h\"\n\nvoid printfile() {\n    printf(\"%s\\n\", __FILE__);\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Godebug Configuration in go.mod\nDESCRIPTION: A go.mod file configuration demonstrating an invalid godebug directive that should trigger an error message. The test ensures the error is formatted with file:line prefix for tool parsing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_errors_pos.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/bar\n\ngodebug foo=1\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Module with Dependencies\nDESCRIPTION: This Go module file configures a Go project to run with version 1.14 and imports deprecated packages from external sources. It illustrates the setup of a basic Go module file where the core Go version is specified, and dependencies are managed using import statements. This setup requires Go 1.14 or higher to work properly.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_missingpkg_prerelease.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule m\n\ngo 1.14\n```\n\n----------------------------------------\n\nTITLE: Package with Import Comment\nDESCRIPTION: Go source file demonstrating package declaration with an import comment\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_find.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage x // import \"x\"\n```\n\n----------------------------------------\n\nTITLE: Fuzzing Test Implementation with Cache Management\nDESCRIPTION: Implements a fuzzing test that combines cache directory monitoring with pattern matching. Uses a goroutine to clean up fuzz cache files and tests for a specific byte pattern 'hello :)'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_err_deadlock.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage dead\n\nimport (\n\t\"os\"\n\t\"path/filepath\"\n\t\"testing\"\n\t\"time\"\n)\n\nfunc FuzzDead(f *testing.F) {\n\tgo func() {\n\t\tc := filepath.Join(os.Getenv(\"GOCACHE\"), \"fuzz\", \"test\", \"FuzzDead\")\n\t\tt := time.NewTicker(time.Second)\n\t\tfor range t.C {\n\t\t\tfiles, _ := os.ReadDir(c)\n\t\t\tif len(files) > 0 {\n\t\t\t\tos.RemoveAll(c)\n\t\t\t}\n\t\t}\n\t}()\n\n\tf.Fuzz(func(t *testing.T, b []byte) {\n\t\tif len(b) == 8 &&\n\t\t\tb[0] == 'h' &&\n\t\t\tb[1] == 'e' &&\n\t\t\tb[2] == 'l' &&\n\t\t\tb[3] == 'l' &&\n\t\t\tb[4] == 'o' &&\n\t\t\tb[5] == ' ' &&\n\t\t\tb[6] == ':' &&\n\t\t\tb[7] == ')' {\n\t\t\treturn\n\t\t}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Expected stderr Output for Dependency Conflict\nDESCRIPTION: This snippet shows the expected stderr output when there's a conflict between the requested version of a module and the version required by an indirect dependency. It demonstrates Go's behavior in resolving such conflicts.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_newcycle.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n-- stderr-expected --\ngo: example.com/newcycle/a@v1.0.0 indirectly requires example.com/newcycle/a@v1.0.1, not example.com/newcycle/a@v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Controlling SHA1 Support in X.509 Certificates using x509sha1 GODEBUG Setting (Go 1.18, Removed Go 1.24)\nDESCRIPTION: Introduced in Go 1.18, this setting controlled the acceptance of X.509 certificates using the SHA-1 hashing algorithm, which is considered insecure. Go 1.18 removed support by default. Setting x509sha1=1 re-enabled support for SHA-1 signatures in certificates. This setting was removed entirely in Go 1.24. Set via GODEBUG environment variable (e.g., GODEBUG=x509sha1=1 in Go 1.18-1.23).\nSOURCE: https://github.com/golang/go/blob/master/doc/godebug.md#2025-04-22_snippet_26\n\nLANGUAGE: plaintext\nCODE:\n```\nx509sha1\n```\n\n----------------------------------------\n\nTITLE: Module A Main Program\nDESCRIPTION: Main program for module A that imports and uses rsc.io/quote package to print a hello message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_why_download_graph.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"rsc.io/quote\"\n)\n\nfunc main() {\n\tfmt.Println(quote.Hello())\n}\n```\n\n----------------------------------------\n\nTITLE: Vendored Package Test with Direct Import\nDESCRIPTION: Test file for tx3 package demonstrating direct import of test package and exported variable usage.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_list_issue11977.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage tx3_test\n\nimport \"vendor.org/tx3\"\nimport \"testing\"\n\nvar Found = tx3.Exported\n\nfunc TestNop(t *testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module and Package for Documentation\nDESCRIPTION: This Go code defines a module named 'p/v2' with a package that contains a struct and a method. It sets up the necessary structure for testing 'go doc' commands against both the package and its components.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/doc.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n-- go.mod --\nmodule p/v2\n\ngo 1.13\n```\n\nLANGUAGE: go\nCODE:\n```\n-- p.go --\npackage p\n\ntype Symbol struct{}\n\nfunc (Symbol) Method() error {\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Go Module and Test Commands\nDESCRIPTION: This snippet shows the commands to tidy the Go module dependencies and run a test compilation with race detection enabled. It also includes a check to ensure no package-finding errors occur.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_race_tag.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo mod tidy\ngo test -c -o=$devnull -race .\n\n! stderr 'cannot find package'\n```\n\n----------------------------------------\n\nTITLE: Reflect package Map iteration methods in Go\nDESCRIPTION: Methods and types for iterating over maps using reflection in the reflect package, including the MapIter struct and MapRange method.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.12.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nmethod (*MapIter) Key() Value\nmethod (*MapIter) Next() bool\nmethod (*MapIter) Value() Value\nmethod (Value) MapRange() *MapIter\ntype MapIter struct\n```\n\n----------------------------------------\n\nTITLE: Testing go build -pgo=auto flag when default.pgo is absent\nDESCRIPTION: Tests the behavior of go build with -pgo=auto flag when the default.pgo file is absent. It verifies that the build succeeds without applying PGO and that PGO is not mentioned in build info.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo build -n -pgo=auto -o nopgo.exe ./nopgo\nstderr 'compile.*nopgo.go'\n! stderr 'compile.*-pgoprofile'\n\n# check that pgo doesn't appear in build info\n! stderr 'build\\\\t-pgo='\n```\n\n----------------------------------------\n\nTITLE: Workspace Configuration with go.work\nDESCRIPTION: Defines a Go workspace configuration that includes two modules 'a' and 'b'\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_relevant_dependency.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\n\nuse (\n\t./a\n\t./b\n)\n```\n\n----------------------------------------\n\nTITLE: Test File for Package a - a/a_test.go\nDESCRIPTION: Defines a test for package 'a' that imports a test-only dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto_multi.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\nimport \"testing\"\nimport _ \"test/testdep\"\nfunc TestA(*testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Go Test File with Intentional Timeout\nDESCRIPTION: This Go test file contains a single test function that sleeps for 1 hour. It's designed to fail when run with a short timeout.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_timeout.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage p\n\nimport (\n\t\"testing\"\n\t\"time\"\n)\n\nfunc Test(t *testing.T) {\n\ttime.Sleep(1*time.Hour)\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Go Module Commands\nDESCRIPTION: This snippet shows attempts to download and list modules in the current workspace. Both commands result in an error indicating no modules were found.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_no_mod_root_issue54419.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncd m\n! go mod download\nstderr 'no modules were found in the current workspace'\n\n! go list -m all\nstderr 'no modules were found in the current workspace'\n```\n\n----------------------------------------\n\nTITLE: Defining Module 'c' Version 2 in Go\nDESCRIPTION: This go.mod file defines module 'c' version 2 and its dependency on module 'd'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_pseudo_artifact.txt#2025-04-22_snippet_11\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/c\n\ngo 1.16\n\nrequire example.net/d v0.2.0\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Configuration\nDESCRIPTION: Specifies the module configuration, including dependencies and replacements for the test environment.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_ambiguous_import.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/m\ngo 1.13\nrequire (\n\texample.com/a v0.1.0\n\texample.com/a/x v0.1.0\n)\nreplace (\n\texample.com/a v0.1.0 => ./a\n\texample.com/a/x v0.1.0 => ./ax\n)\n```\n\n----------------------------------------\n\nTITLE: Confirming GOWORK Environment Variable in Source Directory\nDESCRIPTION: This snippet changes to the src directory and confirms that the GOWORK environment variable is set to 'go.work'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_env.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd src\ngo env GOWORK\nstdout 'go.work'\n```\n\n----------------------------------------\n\nTITLE: Package P Implementation\nDESCRIPTION: Simple package 'p' implementation with a single exported function\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_relevant_dependency.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nfunc P() {}\n```\n\n----------------------------------------\n\nTITLE: Importing Vendored Package in Go Main Program - Go\nDESCRIPTION: This Go program demonstrates importing a vendored package 'v' using an import with the blank identifier, solely for side effects. The main function is empty, highlighting the minimal use case for package import. The code is intended to test vendoring and build mechanics rather than application logic. Requires the vendored 'v' package to exist at build time, no external dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_symlink_vendor_issue14054.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport _ `v`\n\nfunc main () {}\n```\n\n----------------------------------------\n\nTITLE: Setting Toolchain to go1.9\nDESCRIPTION: Uses 'go mod edit' to set the toolchain to go1.9 and verifies the change.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit_toolchain.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngo mod edit -toolchain=go1.9\ngrep 'toolchain go1.9' go.mod\n```\n\n----------------------------------------\n\nTITLE: Building and Validating Cgo Flags with Shell Commands\nDESCRIPTION: This snippet sets the GOCACHE environment variable, runs the Go build with verbose debug flags for a cgo-enabled source file, and uses regex searches on the standard error output to assert that cgo compile (-I) and link (-L) flags appear as expected. It also checks that each quoted flag occurs only once per line to guarantee proper build configuration. Dependencies include the Go toolchain and relevant shell utilities (e.g., grep, regex support). Input is the main.go source; outputs are build logs and assertion checks.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_flag_contains_space.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GOCACHE=$WORK/gocache  # Looking for compile flags, so need a clean cache.\ngo build -x -n main.go\nstderr '\\\"-I[^\\\"]+c flags\\\"' # find quoted c flags\n! stderr '\\\"-I[^\\\"]+c flags\\\".*\\\"-I[^\\\"]+c flags\\\"' # don't find too many quoted c flags per line\nstderr '\\\"-L[^\\\"]+ld flags\\\"' # find quoted ld flags\n! stderr '\\\"-L[^\\\"]+c flags\\\".*\\\"-L[^\\\"]+c flags\\\"' # don't find too many quoted ld flags per line\n```\n\n----------------------------------------\n\nTITLE: Basic Test Function in Go\nDESCRIPTION: This test file shows a simple test function using the 'testing' package in Go. It tests the function F from package 'p'. The test does not conduct much logic except calling the function to ensure it builds and runs. Dependencies: Go's testing framework. Limitations: Function F has no logic to test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_sync_atomic_import.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\tF()\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Go Module Definition\nDESCRIPTION: Basic go.mod file that defines a module 'x' with a direct dependency on patch.example.com/direct v1.0.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_upgrade_patch.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule x\n\nrequire patch.example.com/direct v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Testing Go test caching for repeated runs\nDESCRIPTION: Executes Go tests twice to verify that the second run is cached.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test_cached.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngo test -run=WriteTmp .\n! stdout '(cached)'\ngo test -run=WriteTmp .\nstdout '(cached)'\n```\n\n----------------------------------------\n\nTITLE: Testing Long CGO LDFLAGS with Go Generate\nDESCRIPTION: A Go script that generates a file with excessively long CGO LDFLAGS (10,000 rpath entries) to test the build system's handling of long command lines. This addresses issue #66456 where \"argument list too long\" errors would occur.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_long_cmd.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n//go:build ignore\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"bytes\"\n)\n\nfunc main() {\n\tvar buf bytes.Buffer\n\tbuf.WriteString(\"package p\\n\")\n\tbuf.WriteString(\"// #cgo LDFLAGS:\")\n\tfor i := range 10000 {\n\t\tfmt.Fprintf(&buf, \" -Wl,-rpath,/nonexistentpath/%d\", i)\n\t}\n\tbuf.WriteString(\"\\n\")\n\tbuf.WriteString(`import \"C\"`+\"\\n\")\n\tif err := os.WriteFile(\"generated.go\", buf.Bytes(), 0o644); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Running Go Mod Tidy with Error\nDESCRIPTION: Executes 'go mod tidy' command and expects an error related to a missing package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_added.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n! go mod tidy\n\nstderr '^go: example\\.com/m imports\\n\\texample\\.net/added: module example\\.net/added@latest found \\(v0\\.3\\.0, replaced by \\.\\./a1\\), but does not contain package example\\.net/added$'\n```\n\n----------------------------------------\n\nTITLE: Configuring and Testing CGO Package Import with Go Modules\nDESCRIPTION: This script tests the import and build functionality of the rsc.io/CGO package with Go modules enabled. It uses test directives to skip tests when CGO is not available and stops on short tests. The script configures the GO111MODULE environment variable and attempts to retrieve and build the CGO package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_case_cgo.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n[!cgo] skip\n\nenv GO111MODULE=on\n\ngo get rsc.io/CGO\n[short] stop\n\ngo build rsc.io/CGO\n```\n\n----------------------------------------\n\nTITLE: Testing Go Workspace Commands Without go.work File\nDESCRIPTION: This snippet demonstrates the error messages returned when attempting to use Go workspace commands without a go.work file present. It covers the 'use', 'edit', and 'sync' subcommands.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_nowork.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n! go work use\nstderr '^go: no go\\.work file found\\n\\t\\(run ''go work init'' first or specify path using GOWORK environment variable\\)$'\n\n! go work use .\nstderr '^go: no go\\.work file found\\n\\t\\(run ''go work init'' first or specify path using GOWORK environment variable\\)$'\n\n! go work edit\nstderr '^go: no go\\.work file found\\n\\t\\(run ''go work init'' first or specify path using GOWORK environment variable\\)$'\n\n! go work edit -go=1.18\nstderr '^go: no go\\.work file found\\n\\t\\(run ''go work init'' first or specify path using GOWORK environment variable\\)$'\n\n! go work sync\nstderr '^go: no go\\.work file found\\n\\t\\(run ''go work init'' first or specify path using GOWORK environment variable\\)$'\n```\n\n----------------------------------------\n\nTITLE: Testing CPU Profiling in Go with Custom Output Name\nDESCRIPTION: Executes a Go test with CPU profiling and a custom output name for the test executable. It then verifies the existence of the custom-named executable.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_profile.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngo test -cpuprofile errors.prof -o myerrors.test$GOEXE errors\nexists -exec myerrors.test$GOEXE\n```\n\n----------------------------------------\n\nTITLE: Go Module Q v1.1.0 Implementation\nDESCRIPTION: Module Q version 1.1.0 implementation that imports modules W and Z. Includes updated PrintVersion function that outputs version 1.1.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune_all.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/q\n\nrequire example.com/w v1.0.0\nrequire example.com/z v1.1.0\n\ngo 1.18\n```\n\nLANGUAGE: go\nCODE:\n```\npackage q\n\nimport _ \"example.com/w\"\nimport _ \"example.com/z\"\n\nimport \"fmt\"\n\nfunc PrintVersion() {\n\tfmt.Println(\"version 1.1.0\")\n}\n```\n\n----------------------------------------\n\nTITLE: Test File for CGO Integration\nDESCRIPTION: A Go test file that tests the F() function which contains CGO code. This is used to verify that code coverage works correctly with CGO functions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_cgo.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nimport \"testing\"\n\nfunc TestF(t *testing.T) {\n\tF()\n}\n```\n\n----------------------------------------\n\nTITLE: Testing the Hello Function in Go Quote Package\nDESCRIPTION: Provides a unit test for the Hello() function to ensure it returns the expected greeting string.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Copyright 2018 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\npackage quote\n\nimport \"testing\"\n\nfunc TestHello(t *testing.T) {\n\thello := \"Hello, world.\"\n\tif out := Hello(); out != hello {\n\t\tt.Errorf(\"Hello() = %q, want %q\", out, hello)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Go Function Signatures for FreeBSD Syscalls - Go\nDESCRIPTION: Declares Go function signatures for select FreeBSD syscalls, including Accept4 (accepting sockets with flags), FcntlFlock (file locking using fcntl), Fchflags (set file flags by descriptor), and SendmsgN (send messages on socket with ancillary data). Dependencies: Native Go types, appropriate struct and constant definitions as per FreeBSD syscall expectations. When implemented, these enable direct syscall or cgo-based system calls in Go code with full OS compatibility.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_14\n\nLANGUAGE: Go\nCODE:\n```\nfunc Accept4(int, int) (int, Sockaddr, error)\nfunc FcntlFlock(uintptr, int, *Flock_t) error\nfunc Fchflags(int, int) error\nfunc SendmsgN(int, []uint8, []uint8, Sockaddr, int) (int, error)\n\n```\n\n----------------------------------------\n\nTITLE: Go Module Checksum File\nDESCRIPTION: Contains cryptographic checksums for each required module version to ensure integrity of dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_skip_write.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngolang.org/x/text v0.0.0-20170915032832-14c0d48ead0c h1:pvCbr/wm8HzDD3fVywevekufpn6tCGPY3spdHeZJEsw=\ngolang.org/x/text v0.0.0-20170915032832-14c0d48ead0c/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\nrsc.io/quote v1.5.2 h1:3fEykkD9k7lYzXqCYrwGAf7iNhbk4yCjHmKBN9td4L0=\nrsc.io/quote v1.5.2/go.mod h1:LzX7hefJvL54yjefDEDHNONDjII0t9xZLPXsUe+TKr0=\nrsc.io/sampler v1.2.0/go.mod h1:T1hPZKmBbMNahiBKFy5HrXp6adAjACjK9JXDnKaTXpA=\nrsc.io/sampler v1.3.0 h1:HLGR/BgEtI3r0uymSP/nl2uPLsUnNJX8toRyhfpBTII=\nrsc.io/sampler v1.3.0/go.mod h1:T1hPZKmBbMNahiBKFy5HrXp6adAjACjK9JXDnKaTXpA=\nrsc.io/testonly v1.0.0 h1:K/VWHdO+Jv7woUXG0GzVNx1czBXUt3Ib1deaMn+xk64=\nrsc.io/testonly v1.0.0/go.mod h1:OqmGbIFOcF+XrFReLOGZ6BhMM7uMBiQwZsyNmh74SzY=\n```\n\n----------------------------------------\n\nTITLE: BPF Functions for Darwin ARM64 in Go\nDESCRIPTION: Berkeley Packet Filter (BPF) related function declarations in the syscall package for Darwin ARM64. These functions (most marked as deprecated) provide interfaces for packet capture and network monitoring operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_118\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (darwin-arm64), func BpfBuflen //deprecated\npkg syscall (darwin-arm64), func BpfBuflen(int) (int, error)\npkg syscall (darwin-arm64), func BpfDatalink //deprecated\npkg syscall (darwin-arm64), func BpfDatalink(int) (int, error)\npkg syscall (darwin-arm64), func BpfHeadercmpl //deprecated\npkg syscall (darwin-arm64), func BpfHeadercmpl(int) (int, error)\npkg syscall (darwin-arm64), func BpfInterface //deprecated\npkg syscall (darwin-arm64), func BpfInterface(int, string) (string, error)\npkg syscall (darwin-arm64), func BpfJump //deprecated\npkg syscall (darwin-arm64), func BpfJump(int, int, int, int) *BpfInsn\npkg syscall (darwin-arm64), func BpfStats //deprecated\npkg syscall (darwin-arm64), func BpfStats(int) (*BpfStat, error)\npkg syscall (darwin-arm64), func BpfStmt //deprecated\npkg syscall (darwin-arm64), func BpfStmt(int, int) *BpfInsn\npkg syscall (darwin-arm64), func BpfTimeout //deprecated\npkg syscall (darwin-arm64), func BpfTimeout(int) (*Timeval, error)\npkg syscall (darwin-arm64), func CheckBpfVersion //deprecated\npkg syscall (darwin-arm64), func CheckBpfVersion(int) error\n```\n\n----------------------------------------\n\nTITLE: Berkeley Packet Filter I/O Control Constants in Go for NetBSD-arm64\nDESCRIPTION: Constants for Berkeley Packet Filter (BPF) I/O control commands on NetBSD ARM64. These BIOC* constants are used for controlling packet capture behavior through ioctl calls within the syscall package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_116\n\nLANGUAGE: Go\nCODE:\n```\nconst BIOCFEEDBACK = 2147762813\nconst BIOCFLUSH = 536887912\nconst BIOCGBLEN = 1074020966\nconst BIOCGDLT = 1074020970\nconst BIOCGDLTLIST = 3222291063\nconst BIOCGETIF = 1083196011\nconst BIOCGFEEDBACK = 1074020988\nconst BIOCGHDRCMPLT = 1074020980\nconst BIOCGRTIMEOUT = 1074807419\nconst BIOCGSEESENT = 1074020984\nconst BIOCGSTATS = 1082147439\nconst BIOCGSTATSOLD = 1074283119\nconst BIOCIMMEDIATE = 2147762800\nconst BIOCPROMISC = 536887913\nconst BIOCSBLEN = 3221504614\nconst BIOCSDLT = 2147762806\nconst BIOCSETF = 2148549223\nconst BIOCSETIF = 2156937836\nconst BIOCSFEEDBACK = 2147762813\nconst BIOCSHDRCMPLT = 2147762805\nconst BIOCSRTIMEOUT = 2148549242\nconst BIOCSSEESENT = 2147762809\nconst BIOCSTCPF = 2148549234\nconst BIOCSUDPF = 2148549235\nconst BIOCVERSION = 1074020977\n```\n\n----------------------------------------\n\nTITLE: Declaring Syscall Functions for Darwin ARM64 CGO in Go\nDESCRIPTION: This snippet declares various syscall functions for the Darwin ARM64 CGO platform. These functions cover a wide range of system operations including file handling, socket operations, process management, and memory management.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_198\n\nLANGUAGE: Go\nCODE:\n```\nfunc Accept(int) (int, Sockaddr, error)\nfunc Access(string, uint32) error\nfunc Adjtime(*Timeval, *Timeval) error\nfunc Bind(int, Sockaddr) error\nfunc Chflags(string, int) error\nfunc Chroot(string) error\nfunc Close(int) error\nfunc CloseOnExec(int)\nfunc CmsgLen(int) int\nfunc CmsgSpace(int) int\nfunc Connect(int, Sockaddr) error\nfunc Dup(int) (int, error)\nfunc Dup2(int, int) error\nfunc Exchangedata(string, string, int) error\nfunc Fchdir(int) error\nfunc Fchflags(int, int) error\nfunc Fchmod(int, uint32) error\nfunc Fchown(int, int, int) error\nfunc FcntlFlock(uintptr, int, *Flock_t) error\nfunc Flock(int, int) error\nfunc ForkExec(string, []string, *ProcAttr) (int, error)\nfunc Fpathconf(int, int) (int, error)\nfunc Fstat(int, *Stat_t) error\nfunc Fstatfs(int, *Statfs_t) error\nfunc Fsync(int) error\nfunc Ftruncate(int, int64) error\nfunc Futimes(int, []Timeval) error\n// ... (more function declarations)\n```\n\n----------------------------------------\n\nTITLE: Go Module Declaration\nDESCRIPTION: Module declaration file (go.mod) defining the module name as example.com/mod.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/generate_workspace.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/mod\n```\n\n----------------------------------------\n\nTITLE: Main Package Importing Dependency in Go\nDESCRIPTION: This Go file defines the main package 'm' and imports 'example.net/a', demonstrating the dependency relationship being tested.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue48511.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage m\n\nimport \"example.net/a\"\n```\n\n----------------------------------------\n\nTITLE: Parallel Fuzzing Test Implementation\nDESCRIPTION: Implementation of two fuzzing test functions: FuzzSeed for testing parallel execution of seed inputs with mutex-protected state, and FuzzMutate for testing parallel execution behavior during mutation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_parallel.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage fuzz_parallel\n\nimport (\n\t\"sort\"\n\t\"sync\"\n\t\"testing\"\n)\n\nfunc FuzzSeed(f *testing.F) {\n\tfor _, v := range [][]byte{{'a'}, {'b'}, {'c'}} {\n\t\tf.Add(v)\n\t}\n\n\tvar mu sync.Mutex\n\tvar before, after []byte\n\tf.Cleanup(func() {\n\t\tsort.Slice(after, func(i, j int) bool { return after[i] < after[j] })\n\t\tgot := string(before) + string(after)\n\t\twant := \"abcabc\"\n\t\tif got != want {\n\t\t\tf.Fatalf(\"got %q; want %q\", got, want)\n\t\t}\n\t})\n\n\tf.Fuzz(func(t *testing.T, b []byte) {\n\t\tbefore = append(before, b...)\n\t\tt.Parallel()\n\t\tmu.Lock()\n\t\tafter = append(after, b...)\n\t\tmu.Unlock()\n\t})\n}\n\nfunc FuzzMutate(f *testing.F) {\n\tf.Fuzz(func(t *testing.T, _ []byte) {\n\t\tt.Parallel()\n\t\tt.Error(\"after T.Parallel\")\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Go module\nDESCRIPTION: Creates a go.mod file to define the module and Go version for the test environment.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_empty_err.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/m\n\ngo 1.14\n```\n\n----------------------------------------\n\nTITLE: Defining Local Dependency Package 'dep' (Go)\nDESCRIPTION: This snippet defines the content of the `a/dep/dep.go` file. It declares a package named `dep` which contains a simple exported function `D`. This package serves as a local dependency within module 'a' for the main program `a.go`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_command_line_arguments.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n-- a/dep/dep.go --\npackage dep\n\nfunc D() {}\n```\n\n----------------------------------------\n\nTITLE: Module Version Information\nDESCRIPTION: JSON metadata containing the module version information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_noroot_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.0.0\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment and Executing 'go get' Command in Go\nDESCRIPTION: This snippet sets up the Go environment with specific variables and executes a 'go get' command to test meta tag parsing in HTTPS 404 pages. It disables module sum verification for certain domains, enables module mode, sets the proxy to direct, and attempts to get a specific package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/get_404_meta.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nenv GONOSUMDB=bazil.org,github.com,golang.org\nenv GO111MODULE=on\nenv GOPROXY=direct\ngo get bazil.org/fuse/fs/fstestutil\n```\n\n----------------------------------------\n\nTITLE: Defining Module Dependency for a - mod\nDESCRIPTION: The go.mod file in the a module declares its identity and specifies a dependency on x v0.1.0. This establishes a direct dependency from module a to module x version 0.1.0, which is resolved via the replacement in the main go.mod. No other dependencies or replace directives are included.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect.txt#2025-04-22_snippet_3\n\nLANGUAGE: mod\nCODE:\n```\nmodule a\ngo 1.13\nrequire x v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Root-Relative File and Filesystem Operations - os Go\nDESCRIPTION: These code snippets add the Root type and root-scoped file operation methods to the os package, enabling secure and controlled filesystem access under a specific root directory. Dependencies are fs.FS, fs.FileInfo, and correct fs.FileMode usage. Methods include opening, creating, removing, and stat-ing files with all paths made relative to the given root, while OpenInRoot, OpenRoot, Root.FS, and Root.Close manage root context and cleanup. This design helps sandbox file operations and reduce risks from path traversal.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_19\n\nLANGUAGE: Go\nCODE:\n```\npkg os, func OpenInRoot(string, string) (*File, error) #67002\npkg os, func OpenRoot(string) (*Root, error) #67002\npkg os, method (*Root) Close() error #67002\npkg os, method (*Root) Create(string) (*File, error) #67002\npkg os, method (*Root) FS() fs.FS #67002\npkg os, method (*Root) Lstat(string) (fs.FileInfo, error) #67002\npkg os, method (*Root) Mkdir(string, fs.FileMode) error #67002\npkg os, method (*Root) Name() string #67002\npkg os, method (*Root) Open(string) (*File, error) #67002\npkg os, method (*Root) OpenFile(string, int, fs.FileMode) (*File, error) #67002\npkg os, method (*Root) OpenRoot(string) (*Root, error) #67002\npkg os, method (*Root) Remove(string) error #67002\npkg os, method (*Root) Stat(string) (fs.FileInfo, error) #67002\npkg os, type Root struct #67002\n```\n\n----------------------------------------\n\nTITLE: Defining Test for Package 'x' Using Module 'c'\nDESCRIPTION: This Go test file belongs to package 'x_test'. It imports package 'c' and includes a test function `TestCVersion` that logs the `Version` constant from package 'c'. This test demonstrates which version of 'c' is selected when testing package 'x'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_horizon.txt#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\n-- x1/x_test.go --\npackage x_test\n\nimport (\n\t\"c\"\n\t\"testing\"\n)\n\nfunc TestCVersion(t *testing.T) {\n\tt.Log(\"c\", c.Version)\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Quote Package Functions in Go\nDESCRIPTION: Unit tests for the rsc.io/quote package that verify the expected outputs from the Hello(), Glass(), and Go() functions. Each test function compares the function's output against the expected string value.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.2.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Copyright 2018 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\npackage quote\n\nimport \"testing\"\n\nfunc TestHello(t *testing.T) {\n\thello := \"Hello, world.\"\n\tif out := Hello(); out != hello {\n\t\tt.Errorf(\"Hello() = %q, want %q\", out, hello)\n\t}\n}\n\nfunc TestGlass(t *testing.T) {\n\tglass := \"I can eat glass and it doesn't hurt me.\"\n\tif out := Glass(); out != glass {\n\t\tt.Errorf(\"Glass() = %q, want %q\", out, glass)\n\t}\n}\n\n// Go returns a Go proverb.\nfunc TestGo(t *testing.T) {\n\tgo1 := \"Don't communicate by sharing memory. Share memory by communicating.\"\n\tif out := Go(); out != go1 {\n\t\tt.Errorf(\"Go() = %q, want %q\", out, go1)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Linux-Specific File with Side-Effect Import - Go\nDESCRIPTION: This file, suffix_linux.go, defines package p and only builds on Linux platforms, as it lacks an explicit build tag but follows Go's filename convention for OS targeting. It imports suffix for side effects. No dependencies other than 'suffix'. Input: GOOS. Output: included only for linux builds. Limitation: ignored on non-linux targets.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_constraints.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nimport _ \"suffix\"\n\n```\n\n----------------------------------------\n\nTITLE: Defining Module for Local Replacement\nDESCRIPTION: Specifies the module definition for the 'p' package, which is used as a local replacement in the main module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_doc_path.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/p\n\ngo 1.19\n```\n\n----------------------------------------\n\nTITLE: Testing Go List Command Execution in Root and Subdirectory\nDESCRIPTION: This snippet runs 'go list all' command in the root directory and a subdirectory, checking if the output contains 'RAN SCRIPT'. It's testing if the malicious scripts are executed when running Go commands.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_toolchain_slash.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n! go list all\n! stdout 'RAN SCRIPT'\n\ncd subdir\n! go list all\n! stdout 'RAN SCRIPT'\n```\n\n----------------------------------------\n\nTITLE: Low-level System Call Functions in syscall Package for NetBSD ARM64\nDESCRIPTION: These functions provide the raw system call interface for direct kernel calls. They are the foundation for higher-level functions but require careful handling of arguments and return values.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_81\n\nLANGUAGE: Go\nCODE:\n```\nfunc Syscall(uintptr, uintptr, uintptr, uintptr) (uintptr, uintptr, Errno)\nfunc Syscall6(uintptr, uintptr, uintptr, uintptr, uintptr, uintptr, uintptr) (uintptr, uintptr, Errno)\nfunc Syscall9(uintptr, uintptr, uintptr, uintptr, uintptr, uintptr, uintptr, uintptr, uintptr, uintptr) (uintptr, uintptr, Errno)\nfunc RawSyscall(uintptr, uintptr, uintptr, uintptr) (uintptr, uintptr, Errno)\nfunc RawSyscall6(uintptr, uintptr, uintptr, uintptr, uintptr, uintptr, uintptr) (uintptr, uintptr, Errno)\n```\n\n----------------------------------------\n\nTITLE: LazyUpgrade v0.1.1 Implementation\nDESCRIPTION: Go file implementing lazyupgrade module version 0.1.1\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_lazy_upgrade_lazy.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage lazyupgrade\n```\n\n----------------------------------------\n\nTITLE: Listing Standard Packages with FIPS 140 in Go\nDESCRIPTION: Checks that the standard package list includes the FIPS snapshot package and excludes regular FIPS packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/fipssnap.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo list std\nstdout crypto/internal/fips140/$snap/sha256\n! stdout crypto/internal/fips140/sha256\n! stdout crypto/internal/fips140/check\n```\n\n----------------------------------------\n\nTITLE: Example Go Package With Future Dependency\nDESCRIPTION: A minimal Go package that imports a dependency requiring a future Go version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_modcmds.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage example\n\nimport _ \"rsc.io/future\"\n```\n\n----------------------------------------\n\nTITLE: Running a Go Test Command\nDESCRIPTION: Shell command to run a Go test on a specific test file. This executes the test to verify that the generated _testmain.go file contains the required code generation comment.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_generated_main.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test x_test.go\n```\n\n----------------------------------------\n\nTITLE: Deprecations in syscall package for freebsd-386\nDESCRIPTION: Lists deprecated functions and types in the syscall package for freebsd-386 architecture.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_32\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-386), func BpfBuflen //deprecated\npkg syscall (freebsd-386), func BpfDatalink //deprecated\npkg syscall (freebsd-386), func BpfHeadercmpl //deprecated\npkg syscall (freebsd-386), func BpfInterface //deprecated\npkg syscall (freebsd-386), func BpfJump //deprecated\npkg syscall (freebsd-386), func BpfStats //deprecated\npkg syscall (freebsd-386), func BpfStmt //deprecated\npkg syscall (freebsd-386), func BpfTimeout //deprecated\npkg syscall (freebsd-386), func CheckBpfVersion //deprecated\npkg syscall (freebsd-386), func FlushBpf //deprecated\npkg syscall (freebsd-386), func ParseRoutingMessage //deprecated\npkg syscall (freebsd-386), func ParseRoutingSockaddr //deprecated\npkg syscall (freebsd-386), func RouteRIB //deprecated\npkg syscall (freebsd-386), func SetBpf //deprecated\npkg syscall (freebsd-386), func SetBpfBuflen //deprecated\npkg syscall (freebsd-386), func SetBpfDatalink //deprecated\npkg syscall (freebsd-386), func SetBpfHeadercmpl //deprecated\npkg syscall (freebsd-386), func SetBpfImmediate //deprecated\npkg syscall (freebsd-386), func SetBpfInterface //deprecated\npkg syscall (freebsd-386), func SetBpfPromisc //deprecated\npkg syscall (freebsd-386), func SetBpfTimeout //deprecated\npkg syscall (freebsd-386), func StringSlicePtr //deprecated\npkg syscall (freebsd-386), type InterfaceAddrMessage //deprecated\npkg syscall (freebsd-386), type InterfaceAnnounceMessage //deprecated\npkg syscall (freebsd-386), type InterfaceMessage //deprecated\npkg syscall (freebsd-386), type InterfaceMulticastAddrMessage //deprecated\npkg syscall (freebsd-386), type RouteMessage //deprecated\npkg syscall (freebsd-386), type RoutingMessage //deprecated\n```\n\n----------------------------------------\n\nTITLE: Validating Go Module Version Validation\nDESCRIPTION: Tests the validation logic for module version specifications in exclusions and retractions. It verifies that invalid versions, mismatched major versions, and improperly formatted versions are rejected with appropriate error messages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# -exclude and -retract reject invalid versions.\n! go mod edit -exclude=example.com/m@bad\nstderr '^go: -exclude=example.com/m@bad: version \"bad\" invalid: must be of the form v1.2.3$'\n! go mod edit -retract=bad\nstderr '^go: -retract=bad: version \"bad\" invalid: must be of the form v1.2.3$'\n\n! go mod edit -exclude=example.com/m@v2.0.0\nstderr '^go: -exclude=example.com/m@v2\\.0\\.0: version \"v2\\.0\\.0\" invalid: should be v2\\.0\\.0\\+incompatible \\(or module example\\.com/m/v2\\)$'\n\n! go mod edit -exclude=example.com/m/v2@v1.0.0\nstderr '^go: -exclude=example.com/m/v2@v1\\.0\\.0: version \"v1\\.0\\.0\" invalid: should be v2, not v1$'\n\n! go mod edit -exclude=gopkg.in/example.v1@v2.0.0\nstderr '^go: -exclude=gopkg\\.in/example\\.v1@v2\\.0\\.0: version \"v2\\.0\\.0\" invalid: should be v1, not v2$'\n\ncmpenv go.mod $WORK/go.mod.edit2\n```\n\n----------------------------------------\n\nTITLE: Testing Go Get Command with Non-existent Nested Module\nDESCRIPTION: This snippet tests the 'go get' command with a pattern that could match a nested module but doesn't exist. It verifies that the command reports a module resolution error with a 404 Not Found message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_nopkgs.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngo get example.net/emptysubdir/... # control case\n\n! go get example.net/emptysubdir/subdir/...\n! stderr 'matched no packages'\nstderr '^go: example\\.net/emptysubdir/subdir/\\.\\.\\.: module example\\.net/emptysubdir/subdir: reading http://.*: 404 Not Found\\n\\tserver response: 404 page not found\\n\\z'\n```\n\n----------------------------------------\n\nTITLE: Implementing Go Main Package for Coverage Example - Go\nDESCRIPTION: Implements the main entry point for the mod.example module, importing both a subpackage and an external dependency, and printing their outputs. The program prints the result of quote.Go() and sub.F() to standard output. Dependencies are mod.example/sub and rsc.io/quote; expected output is the concatenated outputs of these functions, with input being the program invocation and no parameters.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_build_pkg_select.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"mod.example/sub\"\n\n\t\"rsc.io/quote\"\n)\n\nfunc main() {\n\tfmt.Println(quote.Go(), sub.F())\n}\n```\n\n----------------------------------------\n\nTITLE: Printing a Greeting Message - Go\nDESCRIPTION: This Go snippet is a minimal main program that prints 'hello!' to standard output. It is used as the build target for the cache population test in the corresponding shell script, and has no external dependencies outside of Go's standard library. It takes no input parameters, produces a standard console line of output, and serves purely as a simple artifact to validate build and cache operations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/clean_cache_n.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(\"hello!\")\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing Go Binary in Current Directory\nDESCRIPTION: Test case to verify that installing to the current directory creates an executable (Issue 11065).\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_install.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd go-cmd-test\nenv GOBIN=$PWD\ngo install\nexists ./go-cmd-test$GOEXE\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Setting up Go Work Environment\nDESCRIPTION: This snippet sets up the test environment by changing directory and initializing go.work files. It then compares the generated files to ensure they match the expected output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_init_path.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncd dir\n\ngo work init . .. foo/bar\nmv go.work go.work.init\n\ngo work init\ngo work use -r ..\ncmp go.work go.work.init\n\ncmpenv go.work $WORK/go.work.want\n```\n\n----------------------------------------\n\nTITLE: Testing Go Workspace Sync with Version Constraints\nDESCRIPTION: Tests workspace synchronization behavior with older and newer module versions, verifying proper version updates and toolchain settings in the workspace file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_toolchain.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# work sync with older modules should leave go 1.50 in the go.work.\ngo work sync\ncat go.work\ngrep '^go 1.50$' go.work\n! grep toolchain go.work\n\n# work sync with newer modules should update go 1.21 -> 1.22.1 and toolchain -> go1.22.9 in go.work\nenv TESTGO_VERSION=go1.21\nenv TESTGO_VERSION_SWITCH=switch\ngo work edit -go=1.21\ngrep '^go 1.21$' go.work\n! grep toolchain go.work\nenv GOTOOLCHAIN=local\n! go work sync\nenv GOTOOLCHAIN=auto\ngo work sync\ngrep '^go 1.22.1$' go.work\n! grep toolchain go.work\n```\n\n----------------------------------------\n\nTITLE: Setting GO111MODULE Environment Variable in Go\nDESCRIPTION: Sets the GO111MODULE environment variable to 'on' to enable module mode for Go.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_replace.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n```\n\n----------------------------------------\n\nTITLE: Defining a Package in a Subdirectory (Go)\nDESCRIPTION: This Go code snippet defines a package named 'sub'. It resides in a subdirectory named 'sub' within the 'example.com/incompatiblewithsub' module. This illustrates how packages can be organized within subdirectories of a Go module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_incompatiblewithsub_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage sub\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Environment and Testing User Settings\nDESCRIPTION: Sets up Git environment variables to use a test-specific .gitconfig file and verifies the user name configuration with the git config command.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_issue51114.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GIT_CONFIG_GLOBAL=$WORK${/}home${/}gopher${/}.gitconfig\nenv HOME=$WORK${/}home${/}gopher\nexec git config --global --show-origin user.name\nstdout 'Go Gopher'\n\nenv GOPROXY=direct\n\n! go mod download\nstderr '^go: github\\.com/golang/notexist/subdir@v0\\.1\\.0: reading github\\.com/golang/notexist/subdir/go\\.mod at revision subdir/v0\\.1\\.0: '\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Go Module\nDESCRIPTION: This snippet shows the implementation of a simple Go module that is used as a dependency in the workspace. It defines a module and a function that is called by other modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace_conflict.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/dep\n```\n\nLANGUAGE: Go\nCODE:\n```\npackage dep\n\nfunc G() {\n}\n```\n\n----------------------------------------\n\nTITLE: Corrected Go Module Checksums File (go.sum.after-tidy)\nDESCRIPTION: This file represents the expected state of the `go.sum` file after executing `go mod tidy`. It contains the valid cryptographic checksums (h1 hashes) for all direct and indirect dependencies specified in `go.mod` and used by the project, including the corrected entry for `rsc.io/quote v1.5.2`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/malformed_gosum_issue62345.txt#2025-04-22_snippet_4\n\nLANGUAGE: gosum\nCODE:\n```\n-- go.sum.after-tidy --\ngolang.org/x/text v0.0.0-20170915032832-14c0d48ead0c h1:pvCbr/wm8HzDD3fVywevekufpn6tCGPY3spdHeZJEsw=\ngolang.org/x/text v0.0.0-20170915032832-14c0d48ead0c/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\nrsc.io/quote v1.5.2 h1:3fEykkD9k7lYzXqCYrwGAf7iNhbk4yCjHmKBN9td4L0=\nrsc.io/quote v1.5.2/go.mod h1:LzX7hefJvL54yjefDEDHNONDjII0t9xZLPXsUe+TKr0=\nrsc.io/sampler v1.3.0 h1:HLGR/BgEtI3r0uymSP/nl2uPLsUnNJX8toRyhfpBTII=\nrsc.io/sampler v1.3.0/go.mod h1:T1hPZKmBbMNahiBKFy5HrXp6adAjACjK9JXDnKaTXpA=\nrsc.io/testonly v1.0.0 h1:K/VWHdO+Jv7woUXG0GzVNx1czBXUt3Ib1deaMn+xk64=\nrsc.io/testonly v1.0.0/go.mod h1:OqmGbIFOcF+XrFReLOGZ6BhMM7uMBiQwZsyNmh74SzY=\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module x/y with Local Replacement for zz (Go Mod)\nDESCRIPTION: This `go.mod` file defines the module `x/y`. It declares a dependency on module `zz` version `v1.0.0` and uses a `replace` directive to map this dependency to the local relative path `../z`, overriding the default dependency resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_local_replace.txt#2025-04-22_snippet_1\n\nLANGUAGE: gomod\nCODE:\n```\n-- x/y/go.mod --\nmodule x/y\nrequire zz v1.0.0\nreplace zz v1.0.0 => ../z\n```\n\n----------------------------------------\n\nTITLE: Setting GO111MODULE On and Running TestReadResponseErrors\nDESCRIPTION: This snippet sets GO111MODULE to on and runs the TestReadResponseErrors test. It expects the test to pass without the httplaxcontentlength=1 setting.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_default_godebug_issue69203.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nenv GO111MODULE=on\ngo test net/http -run=^TestReadResponseErrors$\n```\n\n----------------------------------------\n\nTITLE: Go Module Test Configuration\nDESCRIPTION: Basic go.mod file configuration for testing module behavior\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_deprecate_install.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: Detecting Sumdb Timeline Inconsistency in Go\nDESCRIPTION: This snippet demonstrates how switching to a truthful sumdb detects timeline inconsistency, resulting in a security error indicating sumdb server misbehavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb.txt#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncp go.mod.orig go.mod\nenv GOSUMDB=$sumdb\n! go get rsc.io/fortune\nstderr 'SECURITY ERROR\\ngo.sum database server misbehavior detected!'\nstderr 'proof of misbehavior:'\n```\n\n----------------------------------------\n\nTITLE: Running Coverage Test for Cgo Code (Bash)\nDESCRIPTION: A bash script for testing code coverage on a Go package that uses Cgo. It skips certain tests and verifies that the coverage report shows a non-zero coverage percentage.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_cgo_extra_file.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[short] skip\n[!cgo] skip\n[compiler:gccgo] skip # gccgo has no cover tool\n\n# Test coverage on cgo code. This test case includes an\n# extra empty non-cgo file in the package being checked.\n\ngo test -short -cover cgocover4\nstdout  'coverage:.*[1-9][0-9.]+%'\n! stderr '[^0-9]0\\.0%'\n```\n\n----------------------------------------\n\nTITLE: Testing Go module download for nonexistent master branch\nDESCRIPTION: This snippet tests the behavior of 'go mod download' when attempting to download the master branch of a nonexistent repository. It checks for specific error messages and ensures 'unknown revision' is not in the output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_private_vcs.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n! go mod download github.com/golang/nonexist@master\nstderr '^Confirm the import path was entered correctly.$'\nstderr '^If this is a private repository, see https://golang.org/doc/faq#git_https for additional information.$'\n! stderr 'unknown revision'\n! stdout .\n```\n\n----------------------------------------\n\nTITLE: Running Benchmark Test Outside GOPATH in Go\nDESCRIPTION: This script copies a benchmark test file outside the GOPATH and runs the benchmark using the go test command. It checks for specific output patterns to ensure the test runs correctly.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_benchmark_labels.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncp $GOPATH/src/standalone_benchmark_test.go $WORK/tmp/standalone_benchmark_test.go\ngo test -run '^$' -bench . $WORK/tmp/standalone_benchmark_test.go\nstdout '^goos: '$GOOS\nstdout '^goarch: '$GOARCH\n! stdout '^pkg:'\n! stderr '^pkg:'\n```\n\n----------------------------------------\n\nTITLE: Implementing Synchronized Parallel Go Tests\nDESCRIPTION: Go test implementation that demonstrates a parallel test with synchronized subtests. It uses channels to coordinate execution and ensure round-robin output from parallel subtests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_chatty_parallel_success.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage chatty_parallel_test\n\nimport (\n\t\"testing\"\n\t\"fmt\"\n\t\"flag\"\n)\n\n// This test ensures the order of CONT lines in parallel chatty tests.\nfunc TestChattyParallel(t *testing.T) {\n\tt.Parallel()\n\n\t// The number of concurrent tests running. This is closely tied to the\n\t// -parallel test flag, so we grab it from the flag rather than setting it\n\t// to some constant.\n\tparallel := flag.Lookup(\"test.parallel\").Value.(flag.Getter).Get().(int)\n\n\t// ready is a synchronization mechanism that causes subtests to execute\n\t// round robin.\n\tready := make([]chan bool, parallel)\n\tfor i := range ready {\n\t\tready[i] = make(chan bool, 1)\n\t}\n\tready[0] <- true\n\n\tfor i := range ready {\n\t\ti := i\n\t\tt.Run(fmt.Sprintf(\"sub-%d\", i), func(t *testing.T) {\n\t\t\tt.Parallel()\n\t\t\tfor j := 0; j < 2; j++ {\n\t\t\t\t<-ready[i]\n\t\t\t\tt.Logf(\"this is sub-%d\", i)\n\t\t\t\tready[(i+1)%len(ready)] <- true\n\t\t\t}\n\t\t})\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Specific Dependency Version\nDESCRIPTION: This snippet demonstrates updating a specific dependency (example.com/a) to version v1.0.1. It shows that this update does not change the module's Go version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline_old.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo get example.com/a@v1.0.1\ngo list -f '{{.Module.GoVersion}}'\n```\n\n----------------------------------------\n\nTITLE: Main program using LDFLAGS (Go)\nDESCRIPTION: This snippet defines the main package that imports the 'ok' package. It's used to test the building process with LDFLAGS and verify the external linker command output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/ldflag.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport _ \"ldflag/ok\"\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Main Package with PGO Profile - b/b.go\nDESCRIPTION: Defines a simple main package that imports two dependencies. This package has an associated default.pgo file for Profile-Guided Optimization.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto_multi.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\nimport _ \"test/dep\"\nimport _ \"test/dep2\"\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Go Source File with Import\nDESCRIPTION: Go source file that imports the rsc.io/quote package\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_sum.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage x\nimport _ \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: Handling Empty GOMODCACHE with Path Separator in GOPATH in Go\nDESCRIPTION: This snippet tests the behavior when GOMODCACHE isn't set and GOPATH starts with a path list separator, expecting GOMODCACHE to be empty and commands to error out.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gomodcache.txt#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nenv GOMODCACHE=\nenv GOPATH=${:}$WORK/this/is/ignored\n\ngo env GOMODCACHE\nstdout '^$'\n! stdout .\n! stderr .\n\n! go mod download rsc.io/quote@v1.0.0\nstderr '^go: module cache not found: neither GOMODCACHE nor GOPATH is set$'\n```\n\n----------------------------------------\n\nTITLE: Importing External Package in Go\nDESCRIPTION: This snippet demonstrates a Go file that imports an external package (rsc.io/quote) as a blank import, typically used for side effects.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_getmode_vendor.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage x\nimport _ \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module for Path Separator Test\nDESCRIPTION: Go module definition file (go.mod) for the test package. It simply declares the module name as 'pkg'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_script_cmdcd.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule pkg\n```\n\n----------------------------------------\n\nTITLE: Testing Pseudo-Version Generation for Specific Commits\nDESCRIPTION: Verifies that pseudo-versions are generated correctly for commits after a retracted version, and for the commit of the retracted version itself.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_pseudo_base.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngo list -m vcs-test.golang.org/git/retract-pseudo.git@713affd19d7b\nstdout '^vcs-test.golang.org/git/retract-pseudo.git v0.0.0-20201009173747-713affd19d7b$'\n\ngo list -m vcs-test.golang.org/git/retract-pseudo.git@64c061ed4371\nstdout '^vcs-test.golang.org/git/retract-pseudo.git v0.0.0-20201009173747-64c061ed4371'\n```\n\n----------------------------------------\n\nTITLE: Defining a Go Module\nDESCRIPTION: Creates a minimal go.mod file that declares the module name as 'x'. This establishes the module identity for the package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_domain_root.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule x\n```\n\n----------------------------------------\n\nTITLE: Path Resolution Test Program in Go\nDESCRIPTION: Program that checks if exec.LookPath(\"go\") returns the expected path from GOROOT/bin. Verifies proper PATH environment variable behavior for Go runtime execution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_goroot_PATH.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n)\n\nfunc main() {\n\tgot, err := exec.LookPath(\"go\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(1)\n\t}\n\n\twant := filepath.Join(os.Getenv(\"GOROOT\"), \"bin\", \"go\" + os.Getenv(\"GOEXE\"))\n\tif got != want {\n\t\tfmt.Printf(`exec.LookPath(\"go\") = %q; want %q\\n`, got, want)\n\t\tos.Exit(1)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Dependency P Implementation\nDESCRIPTION: Implementation of shared dependency module 'p'\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nfunc P() {}\n```\n\n----------------------------------------\n\nTITLE: Workspace Module Definition\nDESCRIPTION: Go module definition file specifying module path and dependency requirements.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_disablevendor.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/mod\n\ngo 1.20\n\nrequire example.com/dep v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Testing GODEBUG Fallback (Go)\nDESCRIPTION: This snippet tests the GODEBUG fallback mechanism. It sets GODEBUG=gotestjsonbuildtext=1 and verifies the output format changes accordingly.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_build.txt#2025-04-22_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nenv GODEBUG=gotestjsonbuildtext=1\n! go test -json -o=$devnull ./builderror\nstderr '# m/builderror \\[m/builderror.test\\]\\n'\nstderr 'builderror'${/}'main_test.go:3:11: undefined: y\\n'\nstdout '\"Action\":\"start\",\"Package\":\"m/builderror\"'\nstdout '\"Action\":\"output\",\"Package\":\"m/builderror\",\"Output\":\"FAIL\\\\tm/builderror \\[build failed\\]\\\\n\"'\nstdout '\"Action\":\"fail\",\"Package\":\"m/builderror\",\"Elapsed\":[0-9.]+\\}'\n! stdout '\"FailedBuild\"'\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Dependencies\nDESCRIPTION: Specifies the module name and its dependency on rsc.io/sampler v1.3.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.5.2.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule \"rsc.io/quote\"\n\nrequire \"rsc.io/sampler\" v1.3.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Module Import Path with HTML Meta Tag\nDESCRIPTION: This HTML snippet defines a go-import meta tag that tells the Go toolchain how to find a v2 module. It specifies the import path 'vcs-test.golang.org/go/v2module/v2', the version control system 'git', and the repository URL 'https://vcs-test.golang.org/git/v2repo'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/go/v2module.txt#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<meta name=\"go-import\" content=\"vcs-test.golang.org/go/v2module/v2 git https://vcs-test.golang.org/git/v2repo\">\n```\n\n----------------------------------------\n\nTITLE: Testing Go module download for nonexistent repository\nDESCRIPTION: This snippet tests the behavior of 'go mod download' when attempting to download a nonexistent GitHub repository. It checks for specific error messages in the output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_private_vcs.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n! go mod download github.com/golang/nonexist@latest\nstderr 'Confirm the import path was entered correctly.'\nstderr 'If this is a private repository, see https://golang.org/doc/faq#git_https for additional information.'\n! stdout .\n```\n\n----------------------------------------\n\nTITLE: Specifying Go Toolchain Version Metadata - Plaintext\nDESCRIPTION: Declares the version of the Go toolchain used in the project in plaintext format, which is useful for custom scripts or tooling that need to reference or enforce a specific Go toolchain version. No external dependencies are required. The input is the toolchain string and the output is simple text, intended to be read by tools and maintainers. No strict format is imposed, but must match the project\\'s actual toolchain version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.22.0.linux-amd64.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngolang.org/toolchain v0.0.1-go1.22.0.linux-amd64\n```\n\n----------------------------------------\n\nTITLE: Defining Module 'b' Version 0.1.0 in Go\nDESCRIPTION: This go.mod file defines the module 'example.net/b' version 0.1.0 without any dependencies. It's part of the test setup for dependency resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue60490.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/b\n\ngo 1.19\n```\n\n----------------------------------------\n\nTITLE: Main module definition with dependencies\nDESCRIPTION: Go module definition for the main test module 'example.com/m' that includes dependencies on other modules used in the test. It includes replace directives to point to local module directories.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_patterns.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/m\n\nrequire example.com/unused v0.0.0 // indirect\nreplace example.com/unused => ../unused\n\nrequire example.com/m/nested v0.0.0 // indirect\nreplace example.com/m/nested => ../nested\n```\n\n----------------------------------------\n\nTITLE: Listing and Verifying All Tags and References\nDESCRIPTION: Lists all tags and references in the repository and compares them to expected values to verify correct setup.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout master\n\ngit show-ref --tags --heads\ncmp stdout .git-refs\n```\n\n----------------------------------------\n\nTITLE: Testing Android AMD64 Build Requirements\nDESCRIPTION: Verifies build failures and error messages when attempting to build Go programs for Android/amd64 with CGO disabled.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_android_issue62123.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GOOS=android GOARCH=amd64 CGO_ENABLED=0\n\n! go build -o $devnull cmd/buildid\nstderr 'android/amd64 requires external \\(cgo\\) linking, but cgo is not enabled'\n! stderr 'cannot find runtime/cgo'\n\n! go test -c -o $devnull os\nstderr '# os\\nandroid/amd64 requires external \\(cgo\\) linking, but cgo is not enabled'\n! stderr 'cannot find runtime/cgo'\n```\n\n----------------------------------------\n\nTITLE: Adding Annotated Tag to Master Branch in Git\nDESCRIPTION: Returns to the master branch and adds an annotated tag v1.2.4-annotated with a message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/hg/hgrepo1.txt#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nat 2018-04-17T22:23:00-04:00\ngit checkout master\ngit tag -a v1.2.4-annotated -m 'v1.2.4-annotated'\n```\n\n----------------------------------------\n\nTITLE: Testing 'go install' Command Outside Module\nDESCRIPTION: Checks the behavior of 'go install' when run outside a module, including success with explicit versions and failure for unresolved packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_outside.txt#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nrm $GOPATH/bin\ngo install example.com/printversion@v0.1.0\nexists $GOPATH/bin/printversion$GOEXE\n\n! go install example.com/printversion\nstderr '^go: ''go install'' requires a version when current directory is not in a module\\n\\tTry ''go install example.com/printversion@latest'' to install the latest version$'\n\n! go install ./needmod/needmod.go\nstderr 'needmod[/\\\\]needmod.go:10:2: no required module provides package example.com/version: go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n```\n\n----------------------------------------\n\nTITLE: Running Compiler Tests\nDESCRIPTION: Commands for running specific compiler tests and test suites\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ go test cmd/internal/testdir\n$ go test cmd/internal/testdir -run='Test/escape.*.go'\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition File\nDESCRIPTION: Basic go.mod file that defines a module named 'example' with Go 1.18 as the required version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_dot.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Checking File Permissions in Go\nDESCRIPTION: This Go script checks and prints the Unix-style permissions of the go.mod and go.sum files. It uses the os package to retrieve file information and formats the output to display permissions in octal notation, handling errors by printing them to stderr.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_permissions.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t_ \"rsc.io/sampler\"\n)\n\nfunc main() {\n\tfor _, name := range []string{\"go.mod\", \"go.sum\"} {\n\t\tfi, err := os.Stat(name)\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"%s: %v\\n\", err)\n\t\t\tcontinue\n\t\t}\n\t\tfmt.Printf(\"%s: 0%o\\n\", name, fi.Mode().Perm())\n\t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Go Module Dependencies (Shell)\nDESCRIPTION: Executes the `go get` command within the project directory. This command analyzes the `go.mod` file, resolves dependencies according to semantic versioning rules (preferring stable releases over pre-releases by default), downloads them, and updates the `go.mod` and `go.sum` files if necessary.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n# latest rsc.io/quote should be v1.5.2 not v1.5.3-pre1\ngo get\n```\n\n----------------------------------------\n\nTITLE: Empty Package Z2 Implementation\nDESCRIPTION: Minimal package z2 definition with no functionality.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gcflags_patterns.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage z2\n```\n\n----------------------------------------\n\nTITLE: Module D Configuration (d/go.mod)\nDESCRIPTION: Configuration file for module d.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downadd_indirect.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/d\n\ngo 1.15\n```\n\n----------------------------------------\n\nTITLE: Testing Quote Functions in Go\nDESCRIPTION: Contains unit tests for the Hello, Glass, Go, and Opt functions. It sets the LC_ALL environment variable to 'en' in the init function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.5.2.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage quote\n\nimport (\n\t\"os\"\n\t\"testing\"\n)\n\nfunc init() {\n\tos.Setenv(\"LC_ALL\", \"en\")\n}\n\nfunc TestHello(t *testing.T) {\n\thello := \"Hello, world.\"\n\tif out := Hello(); out != hello {\n\t\tt.Errorf(\"Hello() = %q, want %q\", out, hello)\n\t}\n}\n\nfunc TestGlass(t *testing.T) {\n\tglass := \"I can eat glass and it doesn't hurt me.\"\n\tif out := Glass(); out != glass {\n\t\tt.Errorf(\"Glass() = %q, want %q\", out, glass)\n\t}\n}\n\nfunc TestGo(t *testing.T) {\n\tgo1 := \"Don't communicate by sharing memory, share memory by communicating.\"\n\tif out := Go(); out != go1 {\n\t\tt.Errorf(\"Go() = %q, want %q\", out, go1)\n\t}\n}\n\nfunc TestOpt(t *testing.T) {\n\topt := \"If a program is too slow, it must have a loop.\"\n\tif out := Opt(); out != opt {\n\t\tt.Errorf(\"Opt() = %q, want %q\", out, opt)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: System Call Numbers for OpenBSD in Go\nDESCRIPTION: Defines system call numbers for various operations on OpenBSD. These constants are used with the syscall package to invoke specific system functions.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_55\n\nLANGUAGE: Go\nCODE:\n```\nconst SYS_CLOCK_GETRES = 89\nconst SYS_CLOCK_GETTIME = 87\nconst SYS_CLOCK_SETTIME = 88\nconst SYS_FHSTATFS = 65\nconst SYS_FSTAT = 53\nconst SYS_FSTATAT = 42\nconst SYS_FSTATFS = 64\nconst SYS_FUTIMENS = 85\nconst SYS_FUTIMES = 77\nconst SYS_GETDENTS = 99\nconst SYS_GETFSSTAT = 62\nconst SYS_GETITIMER = 70\nconst SYS_GETRUSAGE = 19\nconst SYS_GETTIMEOFDAY = 67\nconst SYS_KEVENT = 72\nconst SYS_LSTAT = 40\nconst SYS_NANOSLEEP = 91\nconst SYS_PPOLL = 109\nconst SYS_PSELECT = 110\nconst SYS_SELECT = 71\nconst SYS_SETITIMER = 69\nconst SYS_SETTIMEOFDAY = 68\nconst SYS_STAT = 38\nconst SYS_STATFS = 63\nconst SYS_UTIMENSAT = 84\nconst SYS_UTIMES = 76\nconst SYS_UTRACE = 209\nconst SYS_WAIT4 = 11\nconst SYS___THRSLEEP = 94\n```\n\n----------------------------------------\n\nTITLE: Testing go work sync without go.mod\nDESCRIPTION: Tests go work sync functionality after removing go.mod file to ensure command works in absence of module definition file\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_missing_module.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nrm go.mod\ngo work sync\n```\n\n----------------------------------------\n\nTITLE: Declaring a Minimal Go Package - Go\nDESCRIPTION: This Go source file declares a package named 'retract'. It contains no functions, types, or other code elements, serving primarily as a placeholder or minimal package declaration for the module. There are no dependencies, parameters, or executable code. The file is necessary for the Go module system to recognize and build the module, but provides no exported functionality.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_v1.1.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage retract\n```\n\n----------------------------------------\n\nTITLE: Providing Module Version Information Metadata - JSON\nDESCRIPTION: This .info file contains metadata about the module, specifying its version as v1.0.0. It is used by Go tooling to identify the module version during builds or when fetching module information. The file provides a mapping between the module and its semantic version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_printversion_v1.0.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\\\"Version\\\":\\\"v1.0.0\\\"}\n```\n\n----------------------------------------\n\nTITLE: Empty Package Definition - nothing.go\nDESCRIPTION: Defines an empty package used for testing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_deprecated.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage nothing\n```\n\n----------------------------------------\n\nTITLE: Testing Go Bug Report URL Generation in Shell\nDESCRIPTION: This shell script tests the 'go bug' command by setting up a custom environment, running the command, and checking the output for specific content.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/bug.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo install\ngo build -o $TMPDIR/go ./go\nenv BROWSER=$GOPATH/bin/browser PATH=$TMPDIR:$PATH\ngo bug\nexists $TMPDIR/browser\ngrep '^go version' $TMPDIR/browser\ngrep '^GOROOT/bin/go version: go version' $TMPDIR/browser\ngrep '^GOROOT/bin/go tool compile -V: compile version' $TMPDIR/browser\ngrep '^uname -sr: Linux' $TMPDIR/browser\n```\n\n----------------------------------------\n\nTITLE: Go Workspace Module Configuration\nDESCRIPTION: Defines the Go workspace configuration specifying Go version 1.18 and including modules 'a' and 'p'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\n\nuse (\n\t./a\n\t./p\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Synchronized Parallel Tests in Go\nDESCRIPTION: Go implementation of a test file that creates parallel subtests with controlled, round-robin output. The test uses channels to synchronize the subtests so they run in a predictable order for verification.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_chatty_parallel_fail.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage chatty_parallel_test\n\nimport (\n\t\"testing\"\n\t\"fmt\"\n\t\"flag\"\n)\n\n// This test ensures the order of CONT lines in parallel chatty tests.\nfunc TestChattyParallel(t *testing.T) {\n\tt.Parallel()\n\n\t// The number of concurrent tests running. This is closely tied to the\n\t// -parallel test flag, so we grab it from the flag rather than setting it\n\t// to some constant.\n\tparallel := flag.Lookup(\"test.parallel\").Value.(flag.Getter).Get().(int)\n\n\t// ready is a synchronization mechanism that causes subtests to execute\n\t// round robin.\n\tready := make([]chan bool, parallel)\n\tfor i := range ready {\n\t\tready[i] = make(chan bool, 1)\n\t}\n\tready[0] <- true\n\n\tfor i := range ready {\n\t\ti := i\n\t\tt.Run(fmt.Sprintf(\"sub-%d\", i), func(t *testing.T) {\n\t\t\tt.Parallel()\n\n\t\t\t// Some basic log output to precede the failures.\n\t\t\t<-ready[i]\n\t\t\tt.Logf(\"this is sub-%d\", i)\n\t\t\tready[(i+1)%len(ready)] <- true\n\n\t\t\t// The actual failure messages we care about.\n\t\t\t<-ready[i]\n\t\t\tt.Errorf(\"error from sub-%d\", i)\n\t\t\tready[(i+1)%len(ready)] <- true\n\t\t})\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Test Command Error Handling and Help Output\nDESCRIPTION: This snippet tests the 'go test' command's behavior with invalid flags and the -help flag. It verifies that invalid flags are reported once and that -help shows flag help.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_flags.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n! go test -covermode=walrus ./x\nstderr -count=1 'invalid value \"walrus\" for flag -covermode: valid modes are .*$'\nstderr '^usage: go test .*$'\nstderr '^Run ''go help test'' and ''go help testflag'' for details.$'\n\ngo test ./x -args -help\nstdout 'usage_message'\n```\n\n----------------------------------------\n\nTITLE: Library Package\nDESCRIPTION: Empty Go library package used for testing module dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_git.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage library\n```\n\n----------------------------------------\n\nTITLE: Defining Main Module Dependencies in Go\nDESCRIPTION: This go.mod file for the main module 'm' defines its dependencies and sets up local replacements for different versions of modules 'a', 'b', and 'c'. It's used to create a controlled environment for testing dependency resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue56494.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule m\n\ngo 1.19\n\nrequire (\n\ta v0.1.0\n\tb v0.1.0\n\tc v0.1.0\n)\n\nreplace (\n\ta v0.1.0 => ./a1\n\ta v0.2.0 => ./a2\n\ta v0.3.0 => ./a3\n\tb v0.1.0 => ./b1\n\tb v0.2.0 => ./b2\n\tc v0.1.0 => ./c1\n\tc v0.2.0 => ./c2\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Buggy Package Example\nDESCRIPTION: A test file from the 'buggy' subpackage that deliberately fails its test. This is likely used to test module behavior with failing tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180710144737-5d9f230bcfba.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Copyright 2018 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\npackage buggy\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\tt.Fatal(\"buggy!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module in go.mod File\nDESCRIPTION: Defines a Go module named 'm' with Go version 1.12 in the go.mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_build.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nmodule m\ngo 1.12\n```\n\n----------------------------------------\n\nTITLE: Implementing Go 1.13+ Features in a Dependency Package - Go\nDESCRIPTION: Contains the Go source code for the dependency package 'sub', showcasing the use of features added in Go 1.13 (signed shift counts) and 1.14 (overlapping interfaces and type aliases for interfaces). Defines a function 'F' leveraging signed shift counts and creates complex interface types 'Alias' and 'Defined'. Depends on Go 1.14 language features; the parent module can invoke these types and functions, even if it is on an earlier Go version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version_mixed.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\n-- sub/sub.go --\npackage sub\n\n// signed shift counts added in Go 1.13\nfunc F(l, r int) int { return l << r }\n\ntype m1 interface { M() }\ntype m2 interface { M() }\n\n// overlapping interfaces added in Go 1.14\ntype Alias = interface { m1; m2; M() }\ntype Defined interface { m1; m2; M() }\n```\n\n----------------------------------------\n\nTITLE: Writing a Basic Go Unit Test (Go)\nDESCRIPTION: This Go test file defines a unit test `TestMumble` for the `Mumble` function in the `main` package. It uses the standard `testing` package, calls `Mumble` with an input of 10, and uses `t.Errorf` to report an error if the returned value is not the expected 42.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_test_localpkg_filepath.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n-- prog_test.go --\npackage main\n\nimport (\n\t\"testing\"\n)\n\nfunc TestMumble(t *testing.T) {\n\tif x := Mumble(10); x != 42 {\n\t\tt.Errorf(\"Mumble(%d): got %d want %d\", 10, x, 42)\n\t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Testing Double \\B Assertions in Go Regexps\nDESCRIPTION: Tests consecutive \\B assertions without intervening patterns. These tests verify the behavior of multiple adjacent non-word boundary assertions.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_9\n\nLANGUAGE: regexp\nCODE:\n```\n\\B\\B\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:\\B\\B)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:\\B\\B)\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:\\B\\B)$\n```\n\n----------------------------------------\n\nTITLE: Environment Setup and Build Test Commands\nDESCRIPTION: Shell commands to test Go's handling of import cycles by attempting to build a self-importing package and checking list command behavior\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/import_cycle.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=off\n\n! go build selfimport\nstderr -count=1 'import cycle not allowed'\n\n# 'go list' shouldn't hang forever.\ngo list -e -json selfimport\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module\nDESCRIPTION: Specifies the Go version and module name for the project.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/godebug_decoratemappings_comment.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ngo 1.25\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Setting GO111MODULE and Skipping Short Tests\nDESCRIPTION: Sets the GO111MODULE environment variable to 'on' and skips short tests. This ensures that Go modules are enabled for the subsequent commands.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_commit.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n[short] skip\n```\n\n----------------------------------------\n\nTITLE: Setting up environment and running go mod tidy\nDESCRIPTION: Sets up the Go environment, changes directory, and runs 'go mod tidy' to download modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_fileproxy_vcs_missing_issue51589.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GO111MODULE=on\nenv GOPATH=$WORK/gopath\ncd $WORK/x\ngo mod tidy\n```\n\n----------------------------------------\n\nTITLE: Testing Vendor Mode with go list\nDESCRIPTION: Demonstrates how 'go mod vendor' affects the output of 'go list' commands when using '-mod=vendor'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_all.txt#2025-04-22_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\ngo mod vendor\n\ngo list -f $PKGFMT -mod=vendor all\n\ngo list -test -f $PKGFMT -mod=vendor all\n\nrm vendor\n```\n\n----------------------------------------\n\nTITLE: Initializing Flags in Go\nDESCRIPTION: Initializes command-line flags 'foo' and 'bar' with string values. Includes a function 'notOK' to append to the 'bar' flag description dynamically. Uses 'flag' package for creating and looking up flags, with potential error handling for missing flags.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_var_init_order.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\\\"flag\\\"\n)\n\nvar (\n\tfooFlag = flag.String(\\\"foo\\\", \\\"\\\", \\\"this should be ok\\\")\n\tfoo     = flag.Lookup(\\\"foo\\\")\n\n\tbarFlag = flag.String(\\\"bar\\\", \\\"\\\", \\\"this should be also ok, but is \\\"+notOK()+\\\".\\\")\n\tbar     = flag.Lookup(\\\"bar\\\")\n)\n\nfunc notOK() string {\n\treturn \\\"not OK\\\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Module Definition for Main Package\nDESCRIPTION: Go module configuration file for 'example.com/foo' package that defines module dependencies and replacement directives. It requires the internal package and specifies a local replacement path.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test_files.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/foo\ngo 1.12\nrequire example.com/internal v0.0.0\nreplace example.com/internal => ../internal\n```\n\n----------------------------------------\n\nTITLE: Testing Go Compiler Output Reproducibility with Different GOMAXPROCS\nDESCRIPTION: This shell script builds the net/http package with different GOMAXPROCS values and compares the resulting object files to ensure consistent compiler output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/repro_build.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Check that goroutine scheduling does not affect compiler output.\n# If it does, reproducible builds will not work very well.\n[short] skip\n[GOOS:aix] env CGO_ENABLED=0  # go.dev/issue/56896\nenv GOMAXPROCS=16\ngo build -a -o http16.o net/http\nenv GOMAXPROCS=17\ngo build -a -o http17.o net/http\ncmp -q http16.o http17.o\nenv GOMAXPROCS=18\ngo build -a -o http18.o net/http\ncmp -q http16.o http18.o\n```\n\n----------------------------------------\n\nTITLE: Testing GOPRIVATE Behavior in Go Module Fetching\nDESCRIPTION: Tests the behavior of GOPRIVATE when fetching golang.org/x/text. Verifies that the version from the proxy is not used when the module is marked as private.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gonoproxy.txt#2025-04-22_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n[!net:golang.org] skip\nenv GOSUMDB=\nenv GONOPROXY=\nenv GOPRIVATE='*/x'\ngo get golang.org/x/text\ngo list -m all\n! stdout 'text.*v0.0.0-2017' # should not have the version from the proxy\n```\n\n----------------------------------------\n\nTITLE: Defining Replacement Go Module\nDESCRIPTION: This go.mod file defines the replacement module for 'example.com/mainmoda', which is used in the replacement directive of other modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace_main_module.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/mainmoda\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Go Workspace Base Configuration\nDESCRIPTION: Initial go.work file configuration specifying Go version 1.18 and including foo module and a non-existent foo/bar module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\n\nuse (\n\tfoo\n\tfoo/bar // doesn't exist\n)\n```\n\n----------------------------------------\n\nTITLE: Go Fuzzing Test Implementation\nDESCRIPTION: A Go test file implementing a fuzz test that intentionally crashes after 100 iterations. It writes the crashing input to a file before terminating and includes verification logic to check if the recovered input matches the expected one.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutator_repeat.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage fuzz\n\nimport (\n\t\"bytes\"\n\t\"flag\"\n\t\"os\"\n\t\"testing\"\n)\n\nvar wantFlag = flag.String(\"want\", \"\", \"file containing previous crashing input\")\n\nfunc FuzzRepeat(f *testing.F) {\n\ti := 0\n\tf.Fuzz(func(t *testing.T, b []byte) {\n\t\ti++\n\t\tif i == 100 {\n\t\t\tf, err := os.OpenFile(\"want\", os.O_WRONLY|os.O_CREATE|os.O_EXCL, 0666)\n\t\t\tif err != nil {\n\t\t\t\t// Couldn't create the file. Return without crashing, and try\n\t\t\t\t// again.\n\t\t\t\ti--\n\t\t\t\tt.Skip(err)\n\t\t\t}\n\t\t\tif _, err := f.Write(b); err != nil {\n\t\t\t\t// We already created the file, so if we failed to write it\n\t\t\t\t// there's not much we can do. The test will fail anyway, but\n\t\t\t\t// at least make sure the error is logged to stdout.\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\t\t\tif err := f.Close(); err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\t\t\tos.Exit(1) // crash without communicating\n\t\t}\n\n\t\tif *wantFlag != \"\" {\n\t\t\twant, err := os.ReadFile(*wantFlag)\n\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\t\t\tif !bytes.Equal(want, b) {\n\t\t\t\tt.Fatalf(\"inputs are not equal!\\n got: %q\\nwant:%q\", b, want)\n\t\t\t}\n\t\t}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Test2 Sub-module Configuration\nDESCRIPTION: Sub-module within test2 that also depends on the main test module, with its own module replacement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_issue51204.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/test2/sub\n\ngo 1.18\n\nreplace example.com/test => ../../test\n\nrequire example.com/test v0.0.0\n```\n\nLANGUAGE: go\nCODE:\n```\npackage test2\n\nimport (\n\t\"example.com/test\"\n)\n\nfunc DoSomething() {\n\ttest.DoSomething()\n}\n```\n\n----------------------------------------\n\nTITLE: Go File Importing Package with Vet Error\nDESCRIPTION: This Go file imports a package that contains a vet error, used to test how vet handles errors in imported packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_vet.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage p2\n\nimport _ \"m/vetfail/p1\"\n\nfunc F() {\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting and Storing Build ID and Version Information\nDESCRIPTION: Extracts the build ID and version information of the compiled binary and stores them in separate files.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_trimpath_issue48557.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngo tool buildid a.exe\ncp stdout ../foo-buildid.txt\ngo version a.exe\ncp stdout ../foo-version.txt\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Declaring a Minimal Go Package - Go\nDESCRIPTION: Defines a minimal Go package called 'x' with no functions, types, or variables. This establishes the initial package structure within the module, allowing further implementation or testing. There are no external dependencies or parameters; input and output are not applicable at this stage.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage x\n```\n\n----------------------------------------\n\nTITLE: Main Module Configuration\nDESCRIPTION: Root go.mod file defining module replacements for different versions of the badgo module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/badgo.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\nreplace (\n\texample.net/badgo v1.0.0 => ./v1.0.0\n\texample.net/badgo v1.1.0 => ./v1.1.0\n\texample.net/badgo v1.2.0 => ./v1.2.0\n\texample.net/badgo v1.3.0 => ./v1.3.0\n\texample.net/badgo v1.4.0 => ./v1.4.0\n\texample.net/badgo v1.5.0 => ./v1.5.0\n\texample.net/badgo v1.6.0 => ./v1.6.0\n)\n```\n\n----------------------------------------\n\nTITLE: Running go vet with build tags\nDESCRIPTION: This snippet demonstrates running go vet with a specific build tag. It expects an error message containing 'c.go.*Printf'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n! go vet -tags tagtest m/vetpkg\nstderr 'c\\.go.*Printf'\n```\n\n----------------------------------------\n\nTITLE: Executing Go List Test for Local Module Replacement (Shell)\nDESCRIPTION: This shell script snippet enables Go modules (`GO111MODULE=on`), changes the working directory to `x/y`, and executes `go list -f '{{.Dir}}' zz` to find the directory of the module `zz`. It then uses `stdout` to assert that the output path correctly points to the replaced local directory `x/z`, confirming the `replace` directive works as expected for issue golang.org/issue/24100.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_local_replace.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Test that local replacements work even with dummy module names.\n# golang.org/issue/24100.\n\nenv GO111MODULE=on\n\ncd x/y\ngo list -f '{{.Dir}}' zz\nstdout x[/\\\\]z$\n```\n\n----------------------------------------\n\nTITLE: Basic Go Test Implementation\nDESCRIPTION: Implements a basic test function TestFoo in the foo package\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_overlay.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage foo\n\nimport \"testing\"\n\nfunc TestFoo(t *testing.T) { }\n```\n\n----------------------------------------\n\nTITLE: Updating Go Version in Module\nDESCRIPTION: Shows how using -mod=mod updates the go version in go.mod, converting requirements from eager to lazy, and making requirements untidy.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version_missing.txt#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngo list -mod=mod all\n! stdout '^example.com/testdep$'\ncmp stdout list-1.txt\ncmpenv go.mod go.mod.untidy\n\ngo mod tidy\ncmpenv go.mod go.mod.tidy\n```\n\n----------------------------------------\n\nTITLE: Module D2 Source File\nDESCRIPTION: Source file for the second replacement of module 'd' that defines package 'd'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_unused.txt#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\npackage d\n```\n\n----------------------------------------\n\nTITLE: Setting Basic GOFLAGS Configuration\nDESCRIPTION: Demonstrates setting initial GOFLAGS with multiple options including error handling (-e), custom formatting (-f), and benchmark settings.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goflags.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GOFLAGS='-e -f={{.Dir}} --test.benchtime=1s -count=10'\n```\n\n----------------------------------------\n\nTITLE: Hello World in Go\nDESCRIPTION: A simple Go program that prints 'hello, world' to the console, which is added to the SVN repository.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/hello.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {\n\tprintln(\"hello, world\")\n}\n```\n\n----------------------------------------\n\nTITLE: Test File with Import\nDESCRIPTION: Test file importing package p2 as a dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_import_error_stack.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage p1\n\nimport _ \"testdep/p2\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Minimal Go Test Function (Go)\nDESCRIPTION: This Go source file defines a minimal test suite for package `x`. It imports the standard `testing` package and includes a single, empty test function `TestNUL`. This file (`x/x_test.go`) exists to provide a valid target for the `go test -c` command used in the test script.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/devnull.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage x_test\nimport (\n    \"testing\"\n)\nfunc TestNUL(t *testing.T) {\n}\n```\n\n----------------------------------------\n\nTITLE: Simple CGO Program\nDESCRIPTION: Minimal Go program using CGO to test compiler flag passing. Contains only the necessary imports and an empty main function to trigger CGO compilation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_darwin_cc_arch.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"C\"\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Go Test File with Intentional Syntax Error\nDESCRIPTION: This snippet contains a Go test file with an intentional syntax error. The function 'f' has an invalid return signature, which will cause a compilation error when running tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_syntax_error_says_fail.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\npackage p\n\nfunc f() (x.y, z int) {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Package 'c' with Cgo and Importing 'a' (Go)\nDESCRIPTION: This Go package `c` uses Cgo to define a simple static C function `D`. Crucially, it imports package `a`, which itself has Cgo dependencies and specific LDFLAGS. This setup creates a transitive Cgo dependency scenario, testing how the Go build tool handles linking when `a` requires `libb.a` and `c` also uses Cgo.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_undef.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n-- c/c.go --\npackage c\n\n// static int D(int i) { return i; }\nimport \"C\"\n\nimport \"m/a\"\n\nfunc Fn(i int) (int, int) {\n     return a.GoFn(i), int(C.D(C.int(i)))\n}\n```\n\n----------------------------------------\n\nTITLE: Adding new Machine constants to debug/elf package in Go\nDESCRIPTION: Introduces a large number of new Machine constants in the debug/elf package, representing various processor architectures and embedded systems.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.11.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nconst EM_56800EX = 200\nconst EM_56800EX Machine\nconst EM_68HC05 = 72\nconst EM_68HC05 Machine\n// ... (many more constants)\n```\n\n----------------------------------------\n\nTITLE: Baud Rate Constants in NetBSD ARM64 Syscall Package\nDESCRIPTION: Baud rate constants used for serial communication in NetBSD ARM64. These constants define standard baud rates like 600, 7200, 9600, etc. used in terminal and serial port configurations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\nconst B57600 ideal-int\nconst B600 = 600\nconst B600 ideal-int\nconst B7200 = 7200\nconst B7200 ideal-int\nconst B75 = 75\nconst B75 ideal-int\nconst B76800 = 76800\nconst B76800 ideal-int\nconst B921600 = 921600\nconst B921600 ideal-int\nconst B9600 = 9600\nconst B9600 ideal-int\n```\n\n----------------------------------------\n\nTITLE: Defining x1 as a Module with Direct Dependency on i - mod\nDESCRIPTION: The x1 go.mod file defines x as a module at this directory and specifies a direct dependency on i v0.1.0. This supports scenarios where a submodule has both a name and required dependencies, contributing to the overall test of resolving multiple versions and dependency chains.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect.txt#2025-04-22_snippet_9\n\nLANGUAGE: mod\nCODE:\n```\nmodule x\ngo1.13\nrequire i v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Operating System and Plugin Support\nDESCRIPTION: Functions and types for os and plugin packages. Provides executable path discovery and plugin loading support for dynamically extending Go applications at runtime.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.8.txt#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n// os functions and variables\nfunc Executable() (string, error)\nvar ErrClosed error\n\n// plugin functions and types\nfunc Open(string) (*Plugin, error)\nfunc (*Plugin) Lookup(string) (Symbol, error)\ntype Plugin struct\ntype Symbol interface {}\n```\n\n----------------------------------------\n\nTITLE: Creating excluded Go file\nDESCRIPTION: Defines a Go file with a build constraint to exclude it from compilation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_empty_err.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// +build exclude\n\npackage exclude\n```\n\n----------------------------------------\n\nTITLE: Main Module Definition\nDESCRIPTION: Defines the main module configuration with version 1.17 and required dependencies including local replacements for lazy and requireincompatible modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_irrelevant.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/m\n\ngo 1.17\n\nreplace (\n\texample.net/lazy v0.1.0 => ./lazy\n\texample.net/requireincompatible v0.1.0 => ./requireincompatible\n)\n\nrequire example.net/lazy v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Testing Cross-Platform Build Environment Setup\nDESCRIPTION: Shell script that unsets build variables and tests compilation across different platforms using GOENV\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_cross_build.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GOOS=\nenv GOARCH=\nenv GOEXPERIMENT=\n\nenv GOENV=windows-amd64\ngo build internal/abi\n\nenv GOENV=ios-arm64\ngo build internal/abi\n\nenv GOENV=linux-mips\ngo build internal/abi\n```\n\n----------------------------------------\n\nTITLE: Expected Output for No Matching Tests\nDESCRIPTION: This line specifies the expected stdout output when no tests are run. It uses a regular expression to match the output format.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_no_tests.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nstdout '^ok.*\\[no tests to run\\]'\n```\n\n----------------------------------------\n\nTITLE: go.work File with Bad Godebug Flag\nDESCRIPTION: Contents of go.work.badgodebug.txt file, showing an unknown godebug flag 'foo'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_errors_pos.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n\n\ngodebug foo=1\n```\n\n----------------------------------------\n\nTITLE: Initialize Go Module\nDESCRIPTION: Command to initialize a new Go module named 'm'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_disabled.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo mod init m\n```\n\n----------------------------------------\n\nTITLE: Tools Go File with Build Tag\nDESCRIPTION: A Go file with a 'tools' build tag. It imports the 'quote' package, demonstrating how tool dependencies are managed in Go modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_tags.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n// +build tools\n\npackage tools\n\nimport _ \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: Querying Module Version and Capturing Origin Metadata with go list - Shell\nDESCRIPTION: This snippet queries the latest version of a Go module from a Git repository, saving the JSON response for reuse. It then asserts the presence and content of specific fields (Version, Origin, VCS, Hash, Ref, TagSum) in the output. This validates that proper origin metadata is attached when resolving directly from a VCS source. External dependencies include the Go toolchain and a valid Git-accessible module source.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_issue61423.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# If we query a module version from a git repo, we expect its\n# Origin data to be reusable.\n\ngo list -m -json vcs-test.golang.org/git/issue61415.git@latest\ncp stdout git-latest.json\nstdout '\"Version\": \"v0.0.0-20231114180001-f213069baa68\"'\nstdout '\"Origin\":'\nstdout '\"VCS\": \"git\"'\nstdout '\"Hash\": \"f213069baa68ec26412fb373c7cf6669db1f8e69\"'\nstdout '\"Ref\": \"HEAD\"'\nstdout '\"TagSum\": \"t1:47DEQpj8HBSa\\+/TImW\\+5JCeuQeRkm5NMpJWZG3hSuFU=\"'\n\n```\n\n----------------------------------------\n\nTITLE: Asserting Expected Output for 'latest' Version (Tagged Preference)\nDESCRIPTION: Specifies the expected standard output (stdout) for the preceding 'go list' command. The regular expression asserts that the resolved 'latest' version is the tagged version 'v0.5.0-alpha' (dated 2019-06-18), confirming that tagged versions are preferred over pseudo-versions when resolving '@latest'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_pseudo.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nstdout '^github.com/dmitshur-test/modtest5 v0.5.0-alpha 2019-06-18$'\n```\n\n----------------------------------------\n\nTITLE: Checking Go Environment Variables with Directory Context in Shell\nDESCRIPTION: Employs `go env` with `-C` to retrieve environment variables with a specified working directory, showcasing usage with existent and non-existent directories. Prerequisites include a valid Go environment and custom modules set up.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/chdir.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo env -C $OLD/custom GOMOD\nstdout 'custom[\\/]go.mod'\n! go env -C ../nonexist\nstderr '^go: chdir ../nonexist: '\n```\n\n----------------------------------------\n\nTITLE: Implementing Go Fuzzing Tests with Environment Variable Handling\nDESCRIPTION: This Go test file demonstrates fuzzing tests that manipulate environment variables using f.Setenv(). It contains two test functions: FuzzA verifies environment variable setting, and FuzzB verifies they're properly cleared between tests. A helper function 'isWorker()' determines if the test is running in a fuzzing worker.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_setenv.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage fuzz\n\nimport (\n  \"flag\"\n  \"os\"\n  \"testing\"\n)\n\nfunc FuzzA(f *testing.F) {\n  if s := os.Getenv(\"TEST_FUZZ_SETENV_A\"); isWorker() && s == \"\" {\n    f.Fatal(\"environment variable not set\")\n  } else if !isWorker() && s != \"\" {\n    f.Fatal(\"environment variable already set\")\n  }\n  f.Setenv(\"TEST_FUZZ_SETENV_A\", \"A\")\n  if os.Getenv(\"TEST_FUZZ_SETENV_A\") == \"\" {\n    f.Fatal(\"Setenv did not set environment variable\")\n  }\n  f.Fuzz(func(*testing.T, []byte) {})\n}\n\nfunc FuzzB(f *testing.F) {\n  if os.Getenv(\"TEST_FUZZ_SETENV_A\") != \"\" {\n    f.Fatal(\"environment variable not cleared after FuzzA\")\n  }\n  f.Skip()\n}\n\nfunc isWorker() bool {\n\tf := flag.Lookup(\"test.fuzzworker\")\n\tif f == nil {\n\t\treturn false\n\t}\n\tget, ok := f.Value.(flag.Getter)\n\tif !ok {\n\t\treturn false\n\t}\n\treturn get.Get() == interface{}(true)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Submodule in v1 Branch\nDESCRIPTION: Creates a submodule package in the v1 branch and tags it as v1.0.2, demonstrating submodule organization.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nat 2018-02-19T18:11:28-05:00\nmkdir submod/pkg\necho 'package pkg // submod/pkg/p.go'\ncp stdout submod/pkg/p.go\ngit add submod\ngit commit -m 'submod/pkg/p.go'\ngit tag v1.0.2\n```\n\n----------------------------------------\n\nTITLE: Go Test File with Subtest Implementation\nDESCRIPTION: Implementation of a Go test file containing a test with a subtest named 'Sub'. Demonstrates the basic structure for creating subtests using t.Run().\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_only_subtests.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage standalone_sub_test\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\tt.Run(\"Sub\", func(t *testing.T) {})\n}\n```\n\n----------------------------------------\n\nTITLE: Windows DLL Handle Utility Function\nDESCRIPTION: Utility function that checks for the presence of ws2_32.dll using Windows API calls through syscall package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/ws2_32.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"syscall\"\n\t\"unsafe\"\n)\n\nfunc hasModuleHandle() {\n\tconst ws2_32 = \"ws2_32.dll\"\n\tgetModuleHandle := syscall.MustLoadDLL(\"kernel32.dll\").MustFindProc(\"GetModuleHandleW\")\n\tmod, _, _ := getModuleHandle.Call(uintptr(unsafe.Pointer(syscall.StringToUTF16Ptr(ws2_32))))\n\tif mod != 0 {\n\t\tfmt.Println(ws2_32+\":\", \"found\")\n\t} else {\n\t\tfmt.Println(ws2_32+\":\", \"not found\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Ethernet Type Constants in Go for NetBSD ARM64 CGO\nDESCRIPTION: This code snippet defines numerous constants for Ethernet types used in network programming. Each constant is defined twice: once with a specific value and once as an ideal-int type. The constants cover a wide range of protocols and vendor-specific Ethernet types.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_22\n\nLANGUAGE: Go\nCODE:\n```\nconst ETHERTYPE_NCD ideal-int\nconst ETHERTYPE_NESTAR = 32774\nconst ETHERTYPE_NESTAR ideal-int\nconst ETHERTYPE_NETBEUI = 33169\nconst ETHERTYPE_NETBEUI ideal-int\nconst ETHERTYPE_NOVELL = 33080\nconst ETHERTYPE_NOVELL ideal-int\nconst ETHERTYPE_NS = 1536\nconst ETHERTYPE_NSAT = 1537\nconst ETHERTYPE_NSAT ideal-int\nconst ETHERTYPE_NSCOMPAT = 2055\nconst ETHERTYPE_NSCOMPAT ideal-int\nconst ETHERTYPE_NS ideal-int\nconst ETHERTYPE_NTRAILER = 16\nconst ETHERTYPE_NTRAILER ideal-int\n// ... (additional constants omitted for brevity)\nconst ETHERTYPE_XTP = 33149\nconst ETHERTYPE_XTP ideal-int\nconst ETHER_VLAN_ENCAP_LEN = 4\n```\n\n----------------------------------------\n\nTITLE: Retracting Module Versions in Go Mod File\nDESCRIPTION: This Go mod file snippet demonstrates how to retract specific module versions using the 'retract' directive. The file indicates retraction of versions v1.0.0 and v1.9.0 due to issues or self-retraction. Go version 1.15 is specified as a prerequisite. The use of 'retract' provides control over module versions that should no longer be available as @latest. Inputs are specific module versions, and outputs control their availability. Limitations include needing Go toolchain support for module retraction, introduced in Go 1.15.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_prerelease_v1.9.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/retract/self/prerelease\n\ngo 1.15\n\nretract v1.0.0 // bad\nretract v1.9.0 // self\n```\n\n----------------------------------------\n\nTITLE: Testing Goroutine Leaks in Parallel Subtests in Go\nDESCRIPTION: This test function checks that goroutines for completed parallel subtests exit immediately rather than blocking until earlier subtests finish. It creates a slow test that depends on faster tests completing, while monitoring goroutine behavior during panic conditions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_finished_subtest_goroutines.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc TestTestingGoroutineLeak(t *testing.T) {\n\tdebug.SetTraceback(\"all\")\n\n\tvar wg sync.WaitGroup\n\tconst nFast = 10\n\n\tt.Run(\"slow\", func(t *testing.T) {\n\t\tt.Parallel()\n\t\twg.Wait()\n\t\tfor i := 0; i < nFast; i++ {\n\t\t\t// If the subtest goroutines are going to park on the channel\n\t\t\t// send, allow them to park now. If they're not going to park,\n\t\t\t// make sure they have had a chance to run to completion so\n\t\t\t// that they aren't spuriously parked when we panic.\n\t\t\truntime.Gosched()\n\t\t}\n\t\tpanic(\"slow failure\")\n\t})\n\n\twg.Add(nFast)\n\tfor i := 0; i < nFast; i++ {\n\t\tt.Run(fmt.Sprintf(\"leaky%d\", i), func(t *testing.T) {\n\t\t\tt.Parallel()\n\t\t\twg.Done()\n\t\t})\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Structure Size Constants in Go for NetBSD ARM64\nDESCRIPTION: Constants defining the sizes of various system structures used in syscalls. These include network-related structures like socket addresses, message headers, and Berkeley Packet Filter (BPF) structures.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_61\n\nLANGUAGE: Go\nCODE:\n```\nconst SizeofBpfHdr = 32\nconst SizeofBpfInsn = 8\nconst SizeofBpfProgram = 16\nconst SizeofBpfStat = 128\nconst SizeofBpfVersion = 4\nconst SizeofCmsghdr = 12\nconst SizeofICMPv6Filter = 32\nconst SizeofIfaMsghdr = 24\nconst SizeofIfAnnounceMsghdr = 24\nconst SizeofIfData = 136\nconst SizeofIfMsghdr = 152\nconst SizeofInet6Pktinfo = 20\nconst SizeofIPMreq = 8\nconst SizeofIPv6Mreq = 20\nconst SizeofIPv6MTUInfo = 32\nconst SizeofLinger = 8\nconst SizeofMsghdr = 48\nconst SizeofRtMetrics = 80\nconst SizeofRtMsghdr = 120\nconst SizeofSockaddrAny = 108\nconst SizeofSockaddrDatalink = 20\nconst SizeofSockaddrInet4 = 16\nconst SizeofSockaddrInet6 = 28\nconst SizeofSockaddrUnix = 106\n```\n\n----------------------------------------\n\nTITLE: Setting GOEXPERIMENT=nofieldtrack via Environment Command Syntax\nDESCRIPTION: This snippet demonstrates setting the GOEXPERIMENT environment variable to 'nofieldtrack' using a specific testing or configuration syntax. This configuration likely disables the 'fieldtrack' experimental feature in the Go compiler or runtime for the execution context defined by 'env'. It tests the acceptance of the 'nofieldtrack' flag.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/check_goexperiment.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n[GOEXPERIMENT:nofieldtrack] env\n```\n\n----------------------------------------\n\nTITLE: Comparing OIDs and ASN1 Object Identifiers - crypto/x509 - Go\nDESCRIPTION: The OID type gains Equal and EqualASN1OID methods for comparing OID instances or with asn1.ObjectIdentifier types. Both return bool indicating equality. Enables direct comparison for cryptographic and certificate purposes.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nfunc (o OID) Equal(other OID) bool\n```\n\nLANGUAGE: Go\nCODE:\n```\nfunc (o OID) EqualASN1OID(oid asn1.ObjectIdentifier) bool\n```\n\n----------------------------------------\n\nTITLE: Windows AMD64 Platform Configuration\nDESCRIPTION: Configuration settings for Windows AMD64 build environment\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_cross_build.txt#2025-04-22_snippet_1\n\nLANGUAGE: conf\nCODE:\n```\nGOOS=windows\nGOARCH=amd64\n```\n\n----------------------------------------\n\nTITLE: Installing Go Packages with Race Detection\nDESCRIPTION: This shell command creates a temporary package directory and installs Go standard library packages with race detection enabled. It uses a custom package directory specified by $WORKDIR.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_race_install.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmkdir $WORKDIR/tmp/pkg\ngo install -race -pkgdir=$WORKDIR/tmp/pkg std\n```\n\n----------------------------------------\n\nTITLE: Conditional Go Source File with Build Constraint\nDESCRIPTION: A Go source file with a build constraint that uses a non-existent tag. This file won't be included in normal builds, which is used to test that removing it doesn't cause staleness.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_rebuild_removed.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// +build missingtag\n\npackage mypkg\n```\n\n----------------------------------------\n\nTITLE: Testing Go Build with Untracked and Modified Files\nDESCRIPTION: Verifies that Go build correctly identifies and reports modified status when there are untracked or modified files in the Fossil repository, even if they're not part of the build.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_fossil.txt#2025-04-22_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ncp ../../outside/empty.txt .\ngo install\ngo version -m $GOBIN/a$GOEXE\nstdout '^\\tbuild\\tvcs=fossil\\n'\nstdout '^\\tbuild\\tvcs.modified=true$'\nrm empty.txt\nrm $GOBIN/a$GOEXE\n\ncp ../../outside/empty.txt ../README\ngo install\ngo version -m $GOBIN/a$GOEXE\nstdout '^\\tbuild\\tvcs=fossil\\n'\nstdout '^\\tbuild\\tvcs.modified=true$'\nexec fossil revert ../README\nrm $GOBIN/a$GOEXE\n```\n\n----------------------------------------\n\nTITLE: Resolving Vendored Dependencies in the Standard Module with Shell\nDESCRIPTION: Employing 'go list', this command details packages within the 'std' module, ensuring vendored dependencies appear with correct paths, compliant with normal module handling rules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_std.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo list std\n```\n\n----------------------------------------\n\nTITLE: Running Go Tool Chain Tests with Bash\nDESCRIPTION: Commands to run the Go tool chain and runtime tests. The first command runs all tests in the testdir, while the second allows running tests from specific files.\nSOURCE: https://github.com/golang/go/blob/master/test/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n../bin/go test cmd/internal/testdir\n```\n\nLANGUAGE: bash\nCODE:\n```\n../bin/go test cmd/internal/testdir -run='Test/(file1.go|file2.go|...)'\n```\n\n----------------------------------------\n\nTITLE: Define Go Module rsc.io/quote\nDESCRIPTION: This snippet defines a basic Go module named rsc.io/quote using a minimal go.mod file. This forms the basis for subsequent operations in the file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_multirepo.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nmodule rsc.io/quote\n```\n\n----------------------------------------\n\nTITLE: Package A with Import\nDESCRIPTION: Go source file for package 'a' that imports the 'example.com/dep' package as a blank import, establishing a dependency relationship for testing the flag patterns.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_perpkgflag.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\nimport _ \"example.com/dep\"\n```\n\n----------------------------------------\n\nTITLE: Error Handling When Repo Cannot Be Used\nDESCRIPTION: This snippet simulates a scenario where a Mercurial repository exists but cannot be accessed due to a fake hg executable. It asserts that an error is produced suggesting the use of -buildvcs=false. It then cleans up the environment.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_hg.txt#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd ..\nmkdir .hg\nenv PATH=$WORK${/}fakebin${:}$oldpath\nchmod 0755 $WORK/fakebin/hg\n! exec hg help\ncd a\n! go install\nstderr '^error obtaining VCS status: exit status 1\\n\\tUse -buildvcs=false to disable VCS stamping.$'\nrm $GOBIN/a$GOEXE\ncd ..\nenv PATH=$oldpath\nrm .hg\n```\n\n----------------------------------------\n\nTITLE: Defining a Minimal Package Module with go.mod - Go\nDESCRIPTION: This minimal go.mod file marks the root of the 'golang.org/issue/pkg' module with no explicit dependencies, serving as a stub for modular testing. It is necessary for 'go mod' commands to recognize the package as a module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_main.txt#2025-04-22_snippet_5\n\nLANGUAGE: go.mod\nCODE:\n```\nmodule golang.org/issue/pkg\n```\n\n----------------------------------------\n\nTITLE: Defining Package 'c' Version 'v0.2.0' in Go\nDESCRIPTION: This Go source file defines package 'c' with a constant `Version` set to \"v0.2.0\". This represents the implementation corresponding to module 'c' version 2, required by module 'b'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_horizon.txt#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n-- c2/c.go --\npackage c\n\nconst Version = \"v0.2.0\"\n```\n\n----------------------------------------\n\nTITLE: CGO LDFLAGS Quoting Test Implementation\nDESCRIPTION: A minimal Go program that tests CGO LDFLAGS quoting behavior. The program includes a CGO directive with LDFLAGS containing a space in the library path and a linker option that should be treated as part of the path string.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gccgo_link_ldflags.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n// #cgo LDFLAGS: -L \"./ -Wl,--nosuchoption\"\nimport \"C\"\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Creating Go Modules with Different Versions\nDESCRIPTION: Creates multiple Go modules with different Go versions and toolchain specifications, testing version requirements and compatibility.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_toolchain.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv TESTGO_VERSION=go1.50\nmkdir m1_22_0\ngo mod init -C m1_22_0\ngo mod edit -C m1_22_0 -go=1.22.0 -toolchain=go1.99.0\nmkdir m1_22_1\ngo mod init -C m1_22_1\ngo mod edit -C m1_22_1 -go=1.22.1 -toolchain=go1.99.1\nmkdir m1_24_rc0\ngo mod init -C m1_24_rc0\ngo mod edit -C m1_24_rc0 -go=1.24rc0 -toolchain=go1.99.2\n```\n\n----------------------------------------\n\nTITLE: Testing Go Build and Test with Vendored Packages\nDESCRIPTION: This snippet tests 'go build' and 'go test' commands using vendored packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor.txt#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n# 'go build' and 'go test' using vendored packages should succeed.\ngo build -mod=mod\ngo build -mod=vendor\ngo test -mod=vendor . ./subdir\ngo test -mod=vendor ./...\ngo fmt -mod=vendor ./...\n```\n\n----------------------------------------\n\nTITLE: Setting up Git configuration for Go testing\nDESCRIPTION: This snippet sets environment variables to configure Git for testing purposes, including a custom .gitconfig location and HOME directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_git_decorate_full.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=on\n\n[short] skip\n[!git] skip\n\n# Redirect git to a test-specific .gitconfig.\n# GIT_CONFIG_GLOBAL suffices for git 2.32.0 and newer.\n# For older git versions we also set $HOME.\nenv GIT_CONFIG_GLOBAL=$WORK${/}home${/}gopher${/}.gitconfig\nenv HOME=$WORK${/}home${/}gopher\nexec git config --global --show-origin user.name\nstdout 'Go Gopher'\n\nenv GOPROXY=direct\n\nexec git config --get log.decorate\nstdout 'full'\n```\n\n----------------------------------------\n\nTITLE: Compiling C code and Creating Static Library (Shell)\nDESCRIPTION: These shell commands compile C source files into object files and create a static library. `b/b.c` is compiled into `a/b.syso`, which will be automatically picked up by the Go linker when building package `a`. `b/lib.c` is compiled into `b/lib.o` and then archived into `a/libb.a`. Package `a` explicitly links against `libb.a` using `#cgo LDFLAGS`. This setup ensures that the `.syso` file depends on the `.a` file within the same package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_undef.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncc -c -o a/b.syso b/b.c\ncc -c -o b/lib.o b/lib.c\nexec ar rc a/libb.a b/lib.o\n```\n\n----------------------------------------\n\nTITLE: Go Module Configuration for Replacing gopkg.in v4 with GitHub v4\nDESCRIPTION: This go.mod file configures the replacement of a gopkg.in v4 module with a corresponding GitHub v4 module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_gopkgin.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule golang.org/issue/34254\n\ngo 1.13\n\nrequire gopkg.in/src-d/go-git.v4 v4.13.1\n\nreplace gopkg.in/src-d/go-git.v4 v4.13.1 => github.com/src-d/go-git/v4 v4.13.1\n```\n\n----------------------------------------\n\nTITLE: Testing Successful Installation with modcacherw\nDESCRIPTION: Tests successful package installation with -modcacherw flag, skipped in short mode due to binary linking overhead.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_modcacherw_issue64282.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n[!short] go install -modcacherw example.com/printversion@v0.1.0\n[!short] cp $WORK/extraneous.txt $GOPATH/pkg/mod/example.com/printversion@v0.1.0/extraneous_file.go\n[!short] go clean -modcache\n```\n\n----------------------------------------\n\nTITLE: Main Package with PGO Profile - a/a.go\nDESCRIPTION: Defines a simple main package that imports two dependencies. This package has an associated default.pgo file for Profile-Guided Optimization.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto_multi.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\nimport _ \"test/dep\"\nimport _ \"test/dep2\"\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Minimal Main Package Importing IO - Go\nDESCRIPTION: This Go code snippet defines a minimal 'main' package that imports the standard library 'io' package solely for dependency analysis purposes. There are no functions or logic beyond the import. The file is required to provide a concrete example for the Go tooling commands executed in the associated test script.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_no_gopath.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport _ \"io\"\n```\n\n----------------------------------------\n\nTITLE: Removing Parentheses in AST Expressions - go/ast - Go\nDESCRIPTION: Unparen(Expr) Expr is a utility to strip enclosing parentheses from an AST expression. Used during analysis to obtain the raw inner node. Takes an Expr, returns an Expr.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_12\n\nLANGUAGE: Go\nCODE:\n```\nfunc Unparen(Expr) Expr\n```\n\n----------------------------------------\n\nTITLE: Testing 'go list' Directly on a Missing Dependency (Shell)\nDESCRIPTION: Tests the behavior of 'go list' when attempting to list the non-existent package ('example.com/notfound') directly. It verifies that the command fails without the '-e' flag and checks the specific error message on stderr. It also confirms that using the '-e' flag allows the command to succeed while still reporting an error and incompleteness in the formatted output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_bad_import.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Listing the missing dependency directly should fail outright...\n! go list -f '{{if .Error}}error{{end}} {{if .Incomplete}}incomplete{{end}}' example.com/notfound\nstderr 'no required module provides package example.com/notfound; to add it:\\n\\tgo get example.com/notfound'\n! stdout error\n! stdout incomplete\n\n# ...but listing with -e should succeed.\ngo list -e -f '{{if .Error}}error{{end}} {{if .Incomplete}}incomplete{{end}}' example.com/notfound\nstdout error\nstdout incomplete\n```\n\n----------------------------------------\n\nTITLE: Root Module Configuration with Replacements\nDESCRIPTION: The go.mod file for the root module defines replacement directives for multiple versions of dependent modules, pointing to local directories. It explicitly requires 'a v0.1.0' and indirectly requires 'b v0.2.0'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_cycle.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule root\n\ngo 1.13\n\nreplace (\n\ta v0.1.0 => ./a1\n\tb v0.1.0 => ./b1\n\tb v0.2.0 => ./b2\n\tc v0.1.0 => ./c1\n\tc v0.2.0 => ./c2\n)\n\nrequire (\n\ta v0.1.0\n\tb v0.2.0 // indirect\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies in Go\nDESCRIPTION: This Go file imports example.net/a, example.net/b, and example.net/c as blank imports, which are typically used for side effects.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_boost.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage example\n\nimport (\n\t_ \"example.net/a\"\n\t_ \"example.net/b\"\n\t_ \"example.net/c\"\n)\n```\n\n----------------------------------------\n\nTITLE: Invalid Flag Testing\nDESCRIPTION: Series of tests for invalid flag configurations including typos and malformed flags.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goflags.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nenv GOFLAGS=-typoflag\nenv GOFLAGS=-\nenv GOFLAGS=--\nenv GOFLAGS=---oops\nenv GOFLAGS=-=noname\n```\n\n----------------------------------------\n\nTITLE: Go Module Configuration\nDESCRIPTION: A Go module file (go.mod) that defines the module name as 'example', specifies Go version 1.22, and requires the external dependency 'rsc.io/sampler' at version 1.3.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gomodcache_vendor.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example\ngo 1.22\nrequire rsc.io/sampler v1.3.0\n```\n\n----------------------------------------\n\nTITLE: Testing No Deadline in Go\nDESCRIPTION: This function tests that t.Deadline() returns the expected values when no deadline is set. It checks that the returned deadline is zero and the boolean flag is false.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_deadline.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc TestNoDeadline(t *testing.T) {\n\td, ok := t.Deadline()\n\tif ok || !d.IsZero() {\n\t\tt.Fatalf(\"t.Deadline() = %v, %v; want 0, false\", d, ok)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Go module file defining the module path and Go version requirement for a v2 module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/v2repo.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule vcs-test.golang.org/go/v2module/v2\n\ngo 1.12\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Tidy Command\nDESCRIPTION: This snippet checks the behavior of 'go mod tidy' command, verifying if it correctly adds indirect tags and removes unnecessary dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_indirect.txt#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncp $WORK/tmp/usequote.go x.go\ngo mod tidy\ngrep 'rsc.io/quote v1.5.2$' go.mod\ngrep 'golang.org/x/text [v0-9a-f\\.-]+ // indirect' go.mod\n```\n\n----------------------------------------\n\nTITLE: Internal Package Test\nDESCRIPTION: Test file in the same package testing the vendored strings.Msg value.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_vendor.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"strings\" // really ../vendor/strings\n\t\"testing\"\n)\n\nfunc TestMsgInternal(t *testing.T) {\n\tif strings.Msg != \"hello, world\" {\n\t\tt.Fatalf(\"unexpected msg: %v\", strings.Msg)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Main Package Implementation B\nDESCRIPTION: Minimal main package implementation with empty main function in package b.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_cmd_v1.0.0-exclude.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Installing Go Binary Without GOBIN Set\nDESCRIPTION: Test case to verify that without GOBIN set, binaries are installed into the GOPATH bin directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_install.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GOBIN=\nrm $GOPATH/bin/go-cmd-test$GOEXE\ngo install go-cmd-test\nexists $GOPATH/bin/go-cmd-test$GOEXE\n```\n\n----------------------------------------\n\nTITLE: Verifying Import Path with Leading Dot\nDESCRIPTION: This sequence of commands validates that an import path with a leading dot is handled correctly in the module system, checking that certain commands work and some produce appropriate errors.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_path.txt#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncd $WORK/gopath/src/dotname\ngo list ./.dot\nstdout '^example.com/dotname/.dot$'\ngo list ./use\nstdout '^example.com/dotname/use$'\n! go list -m example.com/dotname/.dot@latest\nstderr '^go: example.com/dotname/.dot@latest: malformed module path \"example.com/dotname/.dot\": leading dot in path element$'\ngo get example.com/dotname/.dot\ngo get example.com/dotname/use\ngo mod tidy\n```\n\n----------------------------------------\n\nTITLE: Updating Dependency and Go Version Simultaneously\nDESCRIPTION: This snippet shows how to update both a dependency version and the Go version in a single command. It updates example.com/a to v1.0.1 and the Go version to 1.16.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline_old.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo get example.com/a@v1.0.1 go@1.16\ngo list -f '{{.Module.GoVersion}}'\n```\n\n----------------------------------------\n\nTITLE: Test implementations for main package\nDESCRIPTION: Internal test for the main package that includes a simple test function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage main\nimport \"testing\"\nfunc TestA(*testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Go List with Empty Rationale\nDESCRIPTION: This snippet tests the behavior of 'go list' when a module version is retracted without a rationale. It checks if the output matches the expected hard-coded retraction message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_rationale.txt#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngo list -m -retracted -f '{{.Retracted}}' example.com/retract/rationale\nstdout '^\\[retracted by module author\\]$'\n```\n\n----------------------------------------\n\nTITLE: Test Script for Fuzzing Coverage Instrumentation in Go\nDESCRIPTION: A test script that verifies the coverage instrumentation is working by running a fuzzer that should discover a specific pattern. It skips on short tests and when fuzzing instrumentation isn't available, and sets up a temporary GOCACHE directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_cov.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[short] skip\n[!fuzz-instrumented] skip\nenv GOCACHE=$WORK/cache\n\n# TODO(#51484): enabled debugging info to help diagnose a deadlock in the fuzzer\nenv GODEBUG=fuzzdebug=1\n! go test -fuzz=FuzzCov -v\n! stderr 'cov instrumentation working'\n```\n\n----------------------------------------\n\nTITLE: Testing Path Separators in Go Executables\nDESCRIPTION: This snippet builds a Go executable and verifies that it doesn't contain Windows-style backslashes in paths. It checks for GOROOT, runtime, and drive letter references.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/slashpath.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo build -o hello.exe hello.go\n! grep 'GOROOT\\\\' hello.exe\n! grep '\\\\runtime' hello.exe\n! grep 'runtime\\\\' hello.exe\n! grep 'gofile..[A-Za-z]:\\\\' hello.exe\n```\n\n----------------------------------------\n\nTITLE: Testing Function BarFunc in Package 'bar_test'\nDESCRIPTION: Contains a test case for the BarFunc function in the 'bar_test' package. It checks that BarFunc correctly returns a value, leveraging cross-package function calling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_test_pkgselect.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n-- bar/bar_test.go --\npackage bar_test\n\nimport (\n\t\"example/bar\"\n\t\"testing\"\n)\n\nfunc TestBar(t *testing.T) {\n\tif bar.BarFunc() != 42 {\n\t\tt.Fatalf(\"bad\")\n\t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Checking External Linking Permissions for Sanitation and Debug Mapping Flags\nDESCRIPTION: This code tests if certain CGO_CFLAGS required for internal linking, like debug and file prefix mapping flags, pass without triggering external linking. Flags such as '-fsanitize-undefined-strip-path-components' and '-fdebug-prefix-map' are used.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_suspect_flag_force_external.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nenv CGO_CFLAGS=-fsanitize-undefined-strip-path-components=-1\ngo build -x -n -o dummy.exe ./usesInternalCgo\n! stderr preferlinkext\n\n```\n\n----------------------------------------\n\nTITLE: Defining Minimal Go Module Configuration\nDESCRIPTION: This `go.mod` file defines a simple Go module named 'x'. It serves as the necessary module configuration file when `GO111MODULE=on` is active for the `go fmt` test case.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gofmt_invalid.txt#2025-04-22_snippet_1\n\nLANGUAGE: gomod\nCODE:\n```\nmodule x\n```\n\n----------------------------------------\n\nTITLE: Go Module Declaration for Test Project\nDESCRIPTION: Defines the Go module for the test project named 'example'. This is the minimal module declaration needed for the test structure.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_compile_multi_pkg.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example\n```\n\n----------------------------------------\n\nTITLE: Testing GO111MODULE=auto Module Resolution in Go\nDESCRIPTION: Tests how GO111MODULE=auto detects go.mod files in parent directories. This section verifies that the auto setting correctly finds modules and reports their paths when navigating through nested directories.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_enabled.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=auto\n\ncd $GOPATH/src/x/y/z\ngo env GOMOD\nstdout $GOPATH[/\\\\]src[/\\\\]x[/\\\\]y[/\\\\]z[/\\\\]go.mod\ngo list -m -f {{.GoMod}}\nstdout $GOPATH[/\\\\]src[/\\\\]x[/\\\\]y[/\\\\]z[/\\\\]go.mod\n\ncd $GOPATH/src/x/y/z/w\ngo env GOMOD\nstdout $GOPATH[/\\\\]src[/\\\\]x[/\\\\]y[/\\\\]z[/\\\\]go.mod\n\ncd $GOPATH/src/x/y\ngo env GOMOD\n! stdout .\n\ncd $GOPATH/foo\ngo env GOMOD\nstdout foo[/\\\\]go.mod\ngo list -m -f {{.GoMod}}\nstdout foo[/\\\\]go.mod\n\ncd $GOPATH/foo/bar/baz\ngo env GOMOD\nstdout foo[/\\\\]go.mod\n```\n\n----------------------------------------\n\nTITLE: Race Condition Testing Configuration\nDESCRIPTION: Sets up environment for testing race detector compatibility across different architectures.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goflags.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nenv GOFLAGS=-race OLDGOARCH=$GOARCH OLDGOOS=$GOOS GOARCH=386 GOOS=linux\n```\n\n----------------------------------------\n\nTITLE: Testing go list Behavior with Module Configuration\nDESCRIPTION: A series of shell commands to test 'go list' behavior with the given module configuration, including checking for unintended modifications to go.mod and verifying correct module resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_import.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n# 'go list' should not add requirements even if they can be resolved locally.\ncp go.mod go.mod.orig\n! go list all\ncmp go.mod go.mod.orig\n\n# 'go list' should resolve imports using replacements.\ngo get\ngo list all\nstdout 'example.com/a/b$'\nstdout 'example.com/x/v3$'\nstdout 'example.com/y/z/w$'\nstdout 'example.com/v'\n\n# The selected modules should prefer longer paths,\n# but should try shorter paths if needed.\n# Modules with a major-version suffix should have a corresponding pseudo-version.\n# Replacements that specify a version should use the latest such version.\ngo list -m all\nstdout 'example.com/a/b v0.0.0-00010101000000-000000000000 => ./b'\nstdout 'example.com/y v0.0.0-00010101000000-000000000000 => ./y'\nstdout 'example.com/x/v3 v3.0.0-00010101000000-000000000000 => ./v3'\nstdout 'example.com/v v1.12.0 => ./v12'\n```\n\n----------------------------------------\n\nTITLE: Specifying Go Toolchain Version - Plain Text\nDESCRIPTION: This snippet declares the version and target environment for the Go toolchain using a plain text string, following the convention 'package v<version>-<go version>.<os>-<arch>'. It is typically used by Go tools to determine toolchain compatibility and download sources. The format encodes version, Go release version, operating system, and architecture, and must match the expected pattern for proper toolchain identification.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.18.3.linux-amd64.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngolang.org/toolchain v0.0.1-go1.18.3.linux-amd64\n```\n\n----------------------------------------\n\nTITLE: Providing Mock Module Metadata - Module Info - JSON\nDESCRIPTION: Presents a JSON representation of version metadata for 'example.com/missingpkg', indicating that version 'v1.0.0' exists. This file could be used by Go module proxy servers or tooling for version resolution. The only property is 'Version', and its value records information about available releases, which may affect dependency management behaviors.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_usemissingpre_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\\"Version\\\":\\\"v1.0.0\\\"}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition with Version Exclusion\nDESCRIPTION: Module definition excluding specific version of rsc.io/sampler while requiring the same version, used to test version conflict resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_require_exclude.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule x\n\ngo 1.13\n\nexclude rsc.io/sampler v1.99.99\n\nrequire rsc.io/sampler v1.99.99\n```\n\n----------------------------------------\n\nTITLE: Running Fuzz Tests with Panic in Go\nDESCRIPTION: This snippet demonstrates a fuzz test that causes a panic. It shows how panics are handled and reported in the context of fuzz testing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_chatty.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage chatty_panic_fuzz\n\nimport \"testing\"\n\nfunc Fuzz(f *testing.F) {\n    panic(\"this is bad\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Multiple Paths\nDESCRIPTION: Specifies a Go module that requires the same module under two different paths, which is expected to cause a conflict.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_replace.txt#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nmodule quoter\nrequire (\n\trsc.io/quote/v3 v3.0.0\n\tnot-rsc.io/quote/v3 v3.0.0\n)\nreplace not-rsc.io/quote/v3 => rsc.io/quote/v3 v3.0.0\n```\n\n----------------------------------------\n\nTITLE: Module Definition for Fortune v2\nDESCRIPTION: Defines the Go module name for fortune version 2\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_fortune_v2_v2.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule rsc.io/fortune/v2\n```\n\n----------------------------------------\n\nTITLE: Upgrade Module Version 1\nDESCRIPTION: Defines the go.mod and upgrade.go files for the first version of the example.com/upgrade module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_update_unrelated_sum.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/upgrade\n\ngo 1.16\n```\n\nLANGUAGE: go\nCODE:\n```\npackage upgrade\n```\n\n----------------------------------------\n\nTITLE: Testing go mod graph Command Behavior in Go Modules\nDESCRIPTION: A test script that verifies the go mod graph command correctly displays module dependencies. It confirms direct module dependencies are shown, transitive dependencies are properly listed, and checks the -x flag triggers download operations when the cache is cleared.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_graph.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=on\n\ngo mod graph\nstdout '^m rsc.io/quote@v1.5.2$'\nstdout '^rsc.io/quote@v1.5.2 rsc.io/sampler@v1.3.0$'\n! stdout '^m rsc.io/sampler@v1.3.0$'\n! stderr 'get '$GOPROXY\n\nrm $GOPATH/pkg/mod/cache/download/rsc.io/quote\ngo mod graph -x\nstderr 'get '$GOPROXY\n```\n\n----------------------------------------\n\nTITLE: Local Module Definition\nDESCRIPTION: Defines a local module with a dependency on a deprecated module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_deprecated.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule local\n\ngo 1.17\n\nrequire example.com/deprecated/b v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Testing Case-Insensitive Import Collision in Vendor Management\nDESCRIPTION: A command that attempts to vendor dependencies with case-insensitive import collisions, which should fail with an error message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_collision.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n! go mod vendor\nstderr 'case-insensitive import collision'\n```\n\n----------------------------------------\n\nTITLE: Main Package without PGO Profile - nopgo/nopgo.go\nDESCRIPTION: Defines a simple main package that imports two dependencies but has no associated PGO profile file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto_multi.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\nimport _ \"test/dep\"\nimport _ \"test/dep2\"\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Sample Go code using external package\nDESCRIPTION: A simple Go package that imports and uses the 'rsc.io/quote' package, demonstrating the use of an external dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_fileproxy_vcs_missing_issue51589.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\npackage mod\n\nimport (\n\t\"fmt\"\n\n\t\"rsc.io/quote\"\n)\n\nfunc Echo() {\n\tfmt.Println(quote.Hello())\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Help for Bash Execution in Go CLI\nDESCRIPTION: This command shows how to access help information specifically for Bash execution within the Go project's CLI. It uses the [exec:bash] option to target Bash-related functionality.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/script_help.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelp [exec:bash]\n```\n\n----------------------------------------\n\nTITLE: Go Package Definition for Root Module\nDESCRIPTION: Package declaration for the root module, defining a package named v2sub at the repository root.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/v2sub.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage v2sub\n```\n\n----------------------------------------\n\nTITLE: Simple Hello World Program\nDESCRIPTION: Basic Go program that prints 'hello' to stdout\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_GOTMPDIR.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\nfunc main() { println(\"hello\") }\n```\n\n----------------------------------------\n\nTITLE: Expected Module State After Wildcard Tool Addition\nDESCRIPTION: Expected go.mod state after adding tools using wildcard pattern.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_tool.txt#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule example.com/foo\n\ngo 1.24\n\ntool (\n\texample.com/foo/cmd/a\n\texample.com/foo/cmd/b\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Go Module (go.mod)\nDESCRIPTION: This `go.mod` file defines a Go module with the path `x`. It serves as the root of the module and is used by Go tools to manage dependencies. Initially, it only declares the module path; dependencies will be added by commands like `go get`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import.txt#2025-04-22_snippet_4\n\nLANGUAGE: go.mod\nCODE:\n```\n-- go.mod --\nmodule x\n```\n\n----------------------------------------\n\nTITLE: Version Info JSON Configuration\nDESCRIPTION: JSON configuration file (.info) specifying version information for the module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_v1.0.0-bad.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.0.0-bad\"}\n```\n\n----------------------------------------\n\nTITLE: Reusing Metadata for a Nested Module\nDESCRIPTION: This snippet reuses previously fetched metadata using a JSON file. The Go command leverages the '-reuse' flag to avoid fetching metadata again, reducing unnecessary computation. It assumes the existence of a valid JSON file with metadata information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_issue61415.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo list -reuse=has-nested.json -json -m --versions -e vcs-test.golang.org/git/issue61415.git/nested@has-nested\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Download Without Credentials\nDESCRIPTION: Attempts to run 'go mod tidy' without credentials, expecting it to fail with specific error messages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_auth.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nenv NETRC=$WORK/empty\n! go mod tidy\nstderr '^\\tserver response: ACCESS DENIED, buddy$'\nstderr '^\\tserver response: File\\? What file\\?$'\n```\n\n----------------------------------------\n\nTITLE: Testing Go Telemetry Command Behavior Across Platforms\nDESCRIPTION: This shell script tests the Go telemetry subcommand functionality, including setting telemetry modes, verifying environment variables, and testing platform-specific behavior. It sets up a custom user configuration directory and verifies telemetry data storage behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/telemetry.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Tests for the telemetry subcommand,\n\n# The script test framework sets TEST_TELEMETRY_DIR (overriding the\n# default telemetry dir location) and then checks that at least one\n# counter has been written per script tests.\n# Run go before unsetting TEST_TELEMETRY_DIR to make the tests happy.\n# We want to unset it so the environment we're testing is as close\n# to a user's environment.\ngo help telemetry\nenv TEST_TELEMETRY_DIR=\n\n# Set userconfig dir, which is determined by os.UserConfigDir.\n# The telemetry dir is determined using that.\nmkdir $WORK/userconfig\nenv AppData=$WORK\\userconfig # windows\n[GOOS:windows] env userconfig=$AppData\nenv HOME=$WORK/userconfig # darwin,unix,ios\n[GOOS:darwin] env userconfig=$HOME'/Library/Application Support'\n[GOOS:ios] env userconfig=$HOME'/Library/Application Support'\n[!GOOS:windows] [!GOOS:darwin] [!GOOS:ios] [!GOOS:plan9] env userconfig=$HOME/.config\nenv home=$WORK/userconfig # plan9\n[GOOS:plan9] env userconfig=$home/lib\n\ngo telemetry\nstdout 'local'\n\ngo telemetry off\ngo telemetry\nstdout 'off'\ngo env GOTELEMETRY\nstdout 'off'\n\ngo telemetry local\ngo telemetry\nstdout 'local'\ngo env GOTELEMETRY\nstdout 'local'\n\ngo telemetry on\ngo telemetry\nstdout 'on'\ngo env GOTELEMETRY\nstdout 'on'\n\ngo env\nstdout 'GOTELEMETRY=''?on''?'\nstdout 'GOTELEMETRYDIR=''?'$userconfig'[\\\\/]go[\\\\/]telemetry''?'\n! go env -w GOTELEMETRY=off\nstderr '^go: GOTELEMETRY cannot be modified$'\n! go env -w GOTELEMETRYDIR=foo\nstderr '^go: GOTELEMETRYDIR cannot be modified$'\n\n# Test issue #69269: 'go telemetry off' should not increment counters.\n# Establish that previous commands did write telemetry files.\n# Only check for the existence of telemetry data on supported platforms.\n[!GOOS:openbsd] [!GOOS:solaris] [!GOOS:android] [!GOOS:illumos] [!GOOS:js] [!GOOS:wasip1] [!GOOS:plan9] [!GOARCH:mips] [!GOARCH:mipsle] exists $userconfig/go/telemetry/local\n# Now check for go telemetry off behavior.\nrm $userconfig/go/telemetry/local\ngo telemetry off\n! exists $userconfig/go/telemetry/local\n# Check for the behavior with -C, the only flag 'go telemetry off' can take.\ngo telemetry local\ngo -C $WORK telemetry off\n! exists $userconfig/go/telemetry/local\ngo telemetry local\ngo telemetry -C=$WORK off\n! exists $userconfig/go/telemetry/local\ngo telemetry local\ngo help telemetry\n[!GOOS:openbsd] [!GOOS:solaris] [!GOOS:android] [!GOOS:illumos] [!GOOS:js] [!GOOS:wasip1] [!GOOS:plan9] [!GOARCH:mips] [!GOARCH:mipsle] exists $userconfig/go/telemetry/local\n```\n\n----------------------------------------\n\nTITLE: Explicitly Not Adding Conflicting Module\nDESCRIPTION: Shows how to explicitly avoid adding a conflicting module by using @none.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_ambiguous_pkg.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncp go.mod.orig go.mod\ngo mod edit -require=example.net/ambiguous@v0.1.0\n\ngo get example.net/ambiguous/nested/pkg@v0.1.0 example.net/ambiguous/nested@none\ngo list -m all\n! stdout '^example.net/ambiguous/nested '\nstdout '^example.net/ambiguous v0.1.0$'\n```\n\n----------------------------------------\n\nTITLE: Implementing Coordinated Parallel Tests in Go\nDESCRIPTION: Go test implementation with two parallel tests that coordinate their execution using channels to ensure specific output ordering. The tests demonstrate how CONT lines appear in verbose output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_chatty_parallel_success_run.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage chatty_parallel_test\n\nimport (\n\t\"testing\"\n)\n\nvar (\n\tafterFirstLog = make(chan struct{})\n\tafterSubTest  = make(chan struct{})\n\tafterSecondLog = make(chan struct{})\n)\n\nfunc TestInterruptor(t *testing.T) {\n\tt.Parallel()\n\n\t<-afterFirstLog\n\tt.Run(\"interruption\", func (t *testing.T) {})\n\tclose(afterSubTest)\n\t<-afterSecondLog // Delay the \"PASS: TestInterruptor\" line until after \"CONT  TestLog\".\n}\n\nfunc TestLog(t *testing.T) {\n\tt.Parallel()\n\n\tt.Logf(\"this is the first TestLog log\")\n\tclose(afterFirstLog)\n\t<-afterSubTest\n\tt.Logf(\"this is the second TestLog log\")\n\tclose(afterSecondLog)\n}\n```\n\n----------------------------------------\n\nTITLE: Main Module Definition\nDESCRIPTION: Main module configuration with dependencies and replace directives for test modules a, b, c, d, and e.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_artifact.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/m\n\ngo 1.16\n\nrequire (\n\texample.com/a v0.1.0\n\texample.com/b v0.1.0\n\texample.com/c v0.1.0\n\texample.com/d v0.1.0\n)\n\nreplace (\n\texample.com/a v0.1.0 => ./a1\n\texample.com/b v0.1.0 => ./b1\n\texample.com/b v0.2.0 => ./b2\n\texample.com/c v0.1.0 => ./c\n\texample.com/c v0.2.0 => ./c\n\texample.com/d v0.1.0 => ./d\n\texample.com/d v0.2.0 => ./d\n\texample.com/e v0.1.0 => ./e\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Module Version Conflict Resolution\nDESCRIPTION: Shell commands demonstrating how Go handles version conflicts between explicit version requests and pattern matching. Shows error handling for incompatible version requirements and wildcard pattern resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downgrade_missing.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncp go.mod go.mod.orig\n\n# getting a specific version of a module along with a pattern\n# not yet present in that module should report the version mismatch\n# rather than a \"matched no packages\" warning.\n\n! go get example.net/pkgadded@v1.1.0 example.net/pkgadded/subpkg/...\nstderr '^go: example.net/pkgadded@v1.1.0 conflicts with example.net/pkgadded/subpkg/...@upgrade \\(v1.2.0\\)$'\n! stderr 'matched no packages'\ncmp go.mod.orig go.mod\n\n\n# A wildcard pattern should match the pattern with that path.\n\ngo get example.net/pkgadded/...@v1.0.0\ngo list -m all\nstdout '^example.net/pkgadded v1.0.0'\ncp go.mod.orig go.mod\n\n\n# If we need to resolve a transitive dependency of a package,\n# and another argument constrains away the version that provides that\n# package, then 'go get' should fail with a useful error message.\n\n! go get example.net/pkgadded@v1.0.0 .\nstderr '^go: example.com/m imports\\n\\texample.net/pkgadded/subpkg: cannot find module providing package example.net/pkgadded/subpkg$'\n! stderr 'example.net/pkgadded v1\\.2\\.0'\ncmp go.mod.orig go.mod\n\ngo get example.net/pkgadded@v1.0.0\n! go list -deps -mod=readonly .\nstderr '^m.go:3:8: cannot find module providing package example\\.net/pkgadded/subpkg: '\n```\n\n----------------------------------------\n\nTITLE: Package Import (m1/p/p.go)\nDESCRIPTION: Simple Go package that imports the q package from m2 module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_issue56222.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nimport _ \"example.com/m2/q\"\n```\n\n----------------------------------------\n\nTITLE: Testing Go Environment Variable Unset Operations\nDESCRIPTION: Script that tests the behavior of unsetting Go environment variables (GOENV, GOOS, GOARCH, GOEXPERIMENT) with invalid values. Verifies error messages and successful unset operations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_unset.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GOENV=badenv\nenv GOOS=\nenv GOARCH=\nenv GOEXPERIMENT=\n\n! go env\nstderr '^go(\\.exe)?: unknown GOEXPERIMENT badexp$'\n\ngo env -u GOEXPERIMENT\n\n! go env\nstderr '^go: unsupported GOOS/GOARCH pair bados/badarch$'\n\n! go env -u GOOS\nstderr '^go: unsupported GOOS/GOARCH pair \\w+/badarch$'\n\n! go env -u GOARCH\nstderr '^go: unsupported GOOS/GOARCH pair bados/\\w+$'\n\ngo env -u GOOS GOARCH\n\ngo env\n```\n\n----------------------------------------\n\nTITLE: Disabling CGO by Clearing CC and Modifying PATH in Go\nDESCRIPTION: This snippet attempts to disable cgo by clearing the CC environment variable and removing everything but Go from the PATH. It then checks the CGO_ENABLED status, expecting it to be 0 unless there's an absolute path to a C compiler.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/autocgo.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nenv CC=\nenv PATH=$GOROOT/bin\ngo env CGO_ENABLED\n[!abscc] stdout 0\n[abscc] stdout 1\n```\n\n----------------------------------------\n\nTITLE: Implementing breaker Package with Constant in Go\nDESCRIPTION: This Go code defines a package named 'breaker' and declares a constant 'XX' with a value of 2. It's a simple implementation that can be used as part of a larger project or library.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_breaker_v2.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage breaker\n\nconst XX = 2\n```\n\n----------------------------------------\n\nTITLE: Bad Package with Malformed Import\nDESCRIPTION: This snippet defines the 'bad' package file (bad.go) which contains a malformed import path. It's used to trigger import errors in the tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_info_err.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\npackage bad\n\nimport _ \"🐧.example.com/string\"\n```\n\n----------------------------------------\n\nTITLE: Testing Incompatible Version Request\nDESCRIPTION: This snippet attempts to get incompatible versions of modules 'c' and 'd' simultaneously, expecting an error message explaining the incompatibility.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_indirect_pruned.txt#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n! go get example.com/c@v0.1.0 example.com/d@v0.1.0\nstderr '^go: example\\.com/c@v0\\.1\\.0 requires example\\.com/d@v0\\.2\\.0, not example\\.com/d@v0\\.1\\.0'\n```\n\n----------------------------------------\n\nTITLE: Vendor Package Definition\nDESCRIPTION: Defines a simple vendor package that will be used in import testing. Package is placed in vendor directory to test vendoring import rules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_import_err.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage p\n```\n\n----------------------------------------\n\nTITLE: Go Module File with Added Go Version Directive\nDESCRIPTION: A go.mod file with the go version directive added, used as a reference to verify the addition of the version directive.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retention.txt#2025-04-22_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo $goversion\n\nrequire rsc.io/quote v1.5.2\n\nrequire (\n\tgolang.org/x/text v0.0.0-20170915032832-14c0d48ead0c // indirect\n\trsc.io/sampler v1.3.0 // indirect\n\trsc.io/testonly v1.0.0 // indirect\n)\n```\n\n----------------------------------------\n\nTITLE: Go Package Using CGO (`import \\\"C\\\"`) (Go)\nDESCRIPTION: This Go file defines package 'p'. It uses CGO, indicated by the `import \"C\"` statement and the C preprocessor directive `#define X 1` within the comment block preceding it. This forces the Go build tool to invoke a C compiler during the build process, which is the core action being tested.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_path.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n-- p/p.go --\npackage p\n\n// #define X 1\nimport \"C\"\n```\n\n----------------------------------------\n\nTITLE: Listing Available Versions for a Go Module (Shell)\nDESCRIPTION: Executes `go list -m -versions rsc.io/quote` to query the module proxy or source repository for all known tagged versions of the `rsc.io/quote` module. The `stdout` line provides a regular expression (`^...$`) that matches the expected list of available versions, confirming that the pre-release `v1.5.3-pre1` is known, even if not selected by default.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import.txt#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n# but v1.5.3-pre1 should be a known version\ngo list -m -versions rsc.io/quote\nstdout '^rsc.io/quote v1.0.0 v1.1.0 v1.2.0 v1.2.1 v1.3.0 v1.4.0 v1.5.0 v1.5.1 v1.5.2 v1.5.3-pre1$'\n```\n\n----------------------------------------\n\nTITLE: Testing 'go list ...' in GOROOT/src (Module Mode) (Shell)\nDESCRIPTION: Changes the current directory to the configured $GOROOT/src, enables Go module mode (GO111MODULE=on), and runs `go list ...`. It asserts that standard library packages like `fmt` are listed exactly once, but local files (like `foo.go`) in GOROOT/src are not listed as importable packages, confirming they are ignored in module mode within GOROOT.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_gofile_in_goroot.txt#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# switch to GOROOT/src\ncd $GOROOT/src\n\n# In module mode, 'go list ./...' should not treat .go files in GOROOT/src as an\n# importable package, since that directory has no valid import path.\nenv GO111MODULE=on\ngo list ...\nstdout -count=1 '^.+$'\nstdout '^fmt$'\n! stdout foo\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module with Leading Dot Import Path\nDESCRIPTION: A series of test commands that verify Go's handling of import paths containing elements with a leading dot in another module. Tests include direct package fetching, importing packages with leading dots, and module management operations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_path_dotname.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 'go get' works with no version query.\ncp go.mod.empty go.mod\ngo get example.com/dotname/.dot\ngo list -m example.com/dotname\nstdout '^example.com/dotname v1.0.0$'\n\n# 'go get' works with a version query.\ncp go.mod.empty go.mod\ngo get example.com/dotname/.dot@latest\ngo list -m example.com/dotname\nstdout '^example.com/dotname v1.0.0$'\n\n# 'go get' works on an importing package.\ncp go.mod.empty go.mod\ngo get .\ngo list -m example.com/dotname\nstdout '^example.com/dotname v1.0.0$'\n\n# 'go list' works on the dotted package.\ngo list example.com/dotname/.dot\nstdout '^example.com/dotname/.dot$'\n\n# 'go list' works on an importing package.\ngo list .\nstdout '^m$'\n\n# 'go mod tidy' works.\ncp go.mod.empty go.mod\ngo mod tidy\ngo list -m example.com/dotname\nstdout '^example.com/dotname v1.0.0$'\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Go Package\nDESCRIPTION: This snippet creates an empty Go package named 'p'. It serves as a minimal Go source file to demonstrate package declaration.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/src_file.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage p\n```\n\n----------------------------------------\n\nTITLE: Downloading Go module with 'master' branch\nDESCRIPTION: This command downloads a Go module (rsc.io/quote) using the 'master' branch and verifies the presence of downloaded files in the module cache.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_hash.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo mod download rsc.io/quote@master\nexists $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.3-0.20180709162918-a91498bed0a7.info\nexists $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.3-0.20180709162918-a91498bed0a7.mod\nexists $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.3-0.20180709162918-a91498bed0a7.zip\n```\n\n----------------------------------------\n\nTITLE: FreeBSD file system structure definitions for syscall\nDESCRIPTION: Structure definitions for file system operations in the syscall package specific to FreeBSD, including Dirent, Stat_t, and Statfs_t structures.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.12.txt#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ntype Dirent struct, Fileno uint64\ntype Dirent struct, Namlen uint16\ntype Dirent struct, Off int64\ntype Dirent struct, Pad0 uint8\ntype Dirent struct, Pad1 uint16\ntype Stat_t struct, Atim_ext int32\ntype Stat_t struct, Blksize int32\ntype Stat_t struct, Btim_ext int32\ntype Stat_t struct, Ctim_ext int32\ntype Stat_t struct, Dev uint64\ntype Stat_t struct, Gen uint64\ntype Stat_t struct, Ino uint64\ntype Stat_t struct, Mtim_ext int32\ntype Stat_t struct, Nlink uint64\ntype Stat_t struct, Padding0 int16\ntype Stat_t struct, Padding1 int32\ntype Stat_t struct, Rdev uint64\ntype Stat_t struct, Spare [10]uint64\ntype Statfs_t struct, Mntfromname [1024]int8\ntype Statfs_t struct, Mntonname [1024]int8\n```\n\n----------------------------------------\n\nTITLE: Go Import Test File\nDESCRIPTION: A simple Go package that imports a module from vcs-test.golang.org requiring authentication. This file is used to test whether the authentication mechanism correctly allows importing protected packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goauth_userauth.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage useprivate\n\nimport \"vcs-test.golang.org/auth/or401\"\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module for gccgo Compatibility Test\nDESCRIPTION: This snippet defines a minimal Go module file (go.mod) for the test project.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gccgo_m.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Gofmt Command Script Implementation for Test Module\nDESCRIPTION: A shell script that serves as a placeholder for the 'gofmt' command in a test toolchain. The script outputs a message indicating it's not used.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-ppc64.txt#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: Git References Expected Output File\nDESCRIPTION: Contains the expected output of git show-ref command, listing commit hashes with their corresponding branch and tag references.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/semver-branch.txt#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n33ea7ee36f3e3f44f528664b3712c9fa0cef7502 refs/heads/main\n09c4d8f6938c7b5eeae46858a72712b8700fa46a refs/heads/v1.0.0\n33ea7ee36f3e3f44f528664b3712c9fa0cef7502 refs/heads/v2.0.0\nd59622f6e4d77f008819083582fde71ea1921b0c refs/heads/v3.0.0-devel\n33ea7ee36f3e3f44f528664b3712c9fa0cef7502 refs/tags/v0.1.0\nd59622f6e4d77f008819083582fde71ea1921b0c refs/tags/v4.0.0-beta.1\n```\n\n----------------------------------------\n\nTITLE: Go List with Unprintable Rationale\nDESCRIPTION: This snippet tests 'go list' with a module retracted with a reason including unprintable characters. It asserts that 'go list' shows the full string with the unprintable characters.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_rationale.txt#_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ngo list -m -retracted -f '{{.Retracted}}' example.com/retract/rationale\nstdout '^\\\\[Ends with a BEL character. Beep!\\x07\\\\]$'\n```\n\n----------------------------------------\n\nTITLE: Running Fuzz Tests with Additional Unit Test in Go\nDESCRIPTION: This snippet combines a fuzz test with a regular unit test. It shows how both types of tests can coexist in the same file and how they are executed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_chatty.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\npackage chatty_with_test_fuzz\n\nimport \"testing\"\n\nfunc TestFoo(t *testing.T) {\n    t.Log(\"logged foo\")\n}\n\nfunc Fuzz(f *testing.F) {\n    f.Log(\"all good here\")\n    f.Fuzz(func(*testing.T, []byte) {})\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fake Clang Compiler in Go\nDESCRIPTION: This Go program implements a fake clang compiler that can be configured to break or pass through commands to the real clang. It's used to test Go's handling of compiler version parsing and caching.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cc_cache_issue64589.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"bytes\"\n\t\"log\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\t\"slices\"\n)\n\nfunc main() {\n\tif os.Getenv(\"GO_BREAK_CLANG\") != \"\" {\n\t\tos.Stderr.WriteString(\"GO_BREAK_CLANG is set\\n\")\n\t\tos.Exit(1)\n\t}\n\n\tb, err := os.ReadFile(filepath.Join(os.Getenv(\"WORK\"), \".realclang\"))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif slices.Contains(os.Args, \"-###\") { // We are being run by gccToolID to determine the tool id used in the action id.\n\t\treturn // The important thing is that we don't print the string \"version\"!\n\t}\n\tclang := string(bytes.TrimSpace(b))\n\tcmd := exec.Command(clang, os.Args[1:]...)\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n\tif err := cmd.Run(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Git configuration for testing\nDESCRIPTION: This snippet defines a custom .gitconfig file with user information and Git log decoration settings for testing purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_git_decorate_full.txt#2025-04-22_snippet_2\n\nLANGUAGE: gitconfig\nCODE:\n```\n[user]\n\tname = Go Gopher\n\temail = gopher@golang.org\n[log]\n\tdecorate = full\n```\n\n----------------------------------------\n\nTITLE: Module 'a' Definition with Dependencies\nDESCRIPTION: The go.mod file for module 'a' that requires x v0.2.0 and b v0.0.0. This dependency structure is part of the test case for issue #31248.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_tidy.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule a\ngo 1.13\nrequire (\n\tx v0.2.0\n\tb v0.0.0\n)\n```\n\n----------------------------------------\n\nTITLE: New Unicode Categories in Go\nDESCRIPTION: Two previously omitted Unicode categories have been added: 'Cn' for unassigned codepoints and 'LC' for cased letters. The 'C' category has been updated to include 'Cn', meaning it now encompasses all unassigned code points.\nSOURCE: https://github.com/golang/go/blob/master/doc/next/6-stdlib/99-minor/unicode/70780.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nCn\n```\n\nLANGUAGE: go\nCODE:\n```\nLC\n```\n\nLANGUAGE: go\nCODE:\n```\nC\n```\n\n----------------------------------------\n\nTITLE: Defining Constants for debug/elf Package in Go\nDESCRIPTION: This snippet defines a large number of constants related to ELF file formats for different architectures including 386, AARCH64, and ARM.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.10.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nconst R_386_16 = 20\nconst R_386_16 R_386\nconst R_386_32PLT = 11\nconst R_386_32PLT R_386\n// ... (many more constants)\nconst R_ARM_PLT32_ABS = 94\n```\n\n----------------------------------------\n\nTITLE: Module Version Info (.info file)\nDESCRIPTION: JSON configuration specifying the module version information\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_ambiguous_a_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.0.0\"}\n```\n\n----------------------------------------\n\nTITLE: Running Go Parallel Tests with JSON Output\nDESCRIPTION: Shell command to run parallel chatty tests with JSON output format and verify that test2json properly attributes output to the correct tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_chatty_parallel_success.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo test -json -parallel 3 chatty_parallel_test.go -v\nstdout -count=2 '\"Test\":\"TestChattyParallel/sub-0\",\"Output\":\"    chatty_parallel_test.go:32: this is sub-0\\\\n\"'\nstdout -count=2 '\"Test\":\"TestChattyParallel/sub-1\",\"Output\":\"    chatty_parallel_test.go:32: this is sub-1\\\\n\"'\nstdout -count=2 '\"Test\":\"TestChattyParallel/sub-2\",\"Output\":\"    chatty_parallel_test.go:32: this is sub-2\\\\n\"'\n```\n\n----------------------------------------\n\nTITLE: Defining ReportMetric method for B type in testing package\nDESCRIPTION: Declaration of the ReportMetric method for the B type in the testing package. This method allows reporting custom metrics in benchmarks.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_174\n\nLANGUAGE: go\nCODE:\n```\nfunc (*B) ReportMetric(float64, string)\n```\n\n----------------------------------------\n\nTITLE: Listing and Upgrading Go Modules\nDESCRIPTION: This snippet demonstrates listing all modules, attempting to upgrade a specific package, and then upgrading multiple modules simultaneously to resolve conflicts. It shows how to handle ambiguous imports when upgrading dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_ambiguous_import.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo list -m all\nstdout '^example.net/m v0.1.0 '\n! stdout '^example.net/m/p '\ncp go.mod go.mod.orig\n\n# Upgrading example.net/m/p without also upgrading example.net/m\n# causes the import of package example.net/m/p to be ambiguous.\n#\n# TODO(#27899): Should we automatically upgrade example.net/m to v0.2.0\n# to resolve the conflict?\n! go get example.net/m/p@v1.0.0\nstderr '^go: example.net/m/p: ambiguous import: found package example.net/m/p in multiple modules:\\n\\texample.net/m v0.1.0 (.*)\\n\\texample.net/m/p v1.0.0 (.*)\\n\\z'\ncmp go.mod go.mod.orig\n\n# Upgrading both modules simultaneously resolves the ambiguous upgrade.\n# Note that this command line mixes a module path (example.net/m)\n# and a package path (example.net/m/p) in the same command.\ngo get example.net/m@v0.2.0 example.net/m/p@v1.0.0\n\ngo list -m all\nstdout '^example.net/m v0.2.0 '\nstdout '^example.net/m/p v1.0.0 '\n```\n\n----------------------------------------\n\nTITLE: Importing and Running an Internal Package - Go\nDESCRIPTION: This snippet defines a Go main program that imports an internal package located at 'dir1/internal/v' using a blank import to ensure package initialization without direct reference. The main function is empty, as the test focuses on the import mechanism. There are no parameters and the expected behavior is that compilation and execution will succeed if the internal visibility is correctly handled. The code assumes that the Go module and GOPATH are set up so that 'dir1/internal/v' is an internal package relative to the main code.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_symlink_internal.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport _ `dir1/internal/v`\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Test Command Behavior with Various Flags and Arguments\nDESCRIPTION: This snippet demonstrates several test cases for the 'go test' command, checking its behavior with different combinations of flags and arguments. It covers aspects like flag terminator handling, backward compatibility, and flag priority.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_flags.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo test ./x -- -test.v\nstdout '\\Aok\\s+example.com/x\\s+[0-9.s]+\\n\\z'\n! stderr .\n\n! go test --answer=42 ./x\nstdout '^FAIL\\t. \\[setup failed\\]'\nstderr '^# \\.\\nno Go files in '$PWD'$'\n\ngo test -v -x ./x -timeout 24h -boolflag=true foo -timeout 25h\nstdout 'args: foo -timeout 25h'\nstdout 'timeout: 24h0m0s$'\n\ngo test -v -x ./x -timeout 24h -boolflag foo -timeout 25h\nstdout 'args: foo -test\\.timeout=25h0m0s'\nstdout 'timeout: 24h0m0s$'\n\ngo test -v -x ./x -timeout 24h -stringflag foo -timeout 25h\nstdout 'args: $'\nstdout 'timeout: 25h0m0s$'\n```\n\n----------------------------------------\n\nTITLE: Testing Quote Package Functions\nDESCRIPTION: Test file for the quote package that verifies each function returns the expected string. It sets the LC_ALL environment variable to ensure consistent output across different locales.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180710144737-5d9f230bcfba.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Copyright 2018 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\npackage quote\n\nimport (\n\t\"os\"\n\t\"testing\"\n)\n\nfunc init() {\n\tos.Setenv(\"LC_ALL\", \"en\")\n}\n\nfunc TestHello(t *testing.T) {\n\thello := \"Hello, world.\"\n\tif out := Hello(); out != hello {\n\t\tt.Errorf(\"Hello() = %q, want %q\", out, hello)\n\t}\n}\n\nfunc TestGlass(t *testing.T) {\n\tglass := \"I can eat glass and it doesn't hurt me.\"\n\tif out := Glass(); out != glass {\n\t\tt.Errorf(\"Glass() = %q, want %q\", out, glass)\n\t}\n}\n\nfunc TestGo(t *testing.T) {\n\tgo1 := \"Don't communicate by sharing memory, share memory by communicating.\"\n\tif out := Go(); out != go1 {\n\t\tt.Errorf(\"Go() = %q, want %q\", out, go1)\n\t}\n}\n\nfunc TestOpt(t *testing.T) {\n\topt := \"If a program is too slow, it must have a loop.\"\n\tif out := Opt(); out != opt {\n\t\tt.Errorf(\"Opt() = %q, want %q\", out, opt)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Test consumer module\nDESCRIPTION: The go.mod file for the test consumer module that will import the test repository.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/get_issue53955.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Defining Package 'main' with Dependencies in Go\nDESCRIPTION: Defines the main executable package within module `M`. It imports package `a` (`M/a`), includes functions `MFunc` and `M2Func` (which calls `a.AFunc`), an `init` function that prints a message upon package initialization, and the `main` entry point function which calls `a.AFunc`. Code coverage calculation is performed on this package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_single_vs_multiple.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n-- main/main.go --\npackage main\n\nimport (\n\t\"M/a\"\n)\n\nfunc MFunc() string {\n\treturn \"42\"\n}\n\nfunc M2Func() int {\n\treturn a.AFunc()\n}\n\nfunc init() {\n\tprintln(\"package 'main' init\")\n}\n\nfunc main() {\n\tprintln(a.AFunc())\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Fuzzing Error Handling with Shell Script\nDESCRIPTION: Shell script for testing how the Go fuzzing coordinator handles I/O errors from workers. It verifies the coordinator stops workers and reports errors appropriately without recording crashes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_io_error.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Test that when the coordinator experiences an I/O error communicating\n# with a worker, the coordinator stops the worker and reports the error.\n# The coordinator should not record a crasher.\n#\n# We simulate an I/O error in the test by writing garbage to fuzz_out.\n# This is unlikely, but possible. It's difficult to simulate interruptions\n# due to ^C and EOF errors which are more common. We don't report those.\n[short] skip\n[!fuzz] skip\nenv GOCACHE=$WORK/cache\n\n# If the I/O error occurs before F.Fuzz is called, the coordinator should\n# stop the worker and say that.\n! go test -fuzz=FuzzClosePipeBefore -parallel=1\nstdout '\\s*fuzzing process terminated without fuzzing:'\n! stdout 'communicating with fuzzing process'\n! exists testdata\n\n# If the I/O error occurs after F.Fuzz is called (unlikely), just exit.\n# It's hard to distinguish this case from the worker being interrupted by ^C\n# or exiting with status 0 (which it should do when interrupted by ^C).\n! go test -fuzz=FuzzClosePipeAfter -parallel=1\nstdout '^\\s*communicating with fuzzing process: invalid character ''!'' looking for beginning of value$'\n! exists testdata\n```\n\n----------------------------------------\n\nTITLE: Implementing Function BazFunc in Package 'baz'\nDESCRIPTION: Defines BazFunc in the 'baz' package, which returns a constant negative integer. It serves as a simple function implementation example within the package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_test_pkgselect.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n-- baz/baz.go --\npackage baz\n\nfunc BazFunc() int {\n\treturn -42\n}\n\n```\n\n----------------------------------------\n\nTITLE: Module Definition in go.mod\nDESCRIPTION: Defines the Go module 'example.com' with Go version 1.18 as the dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_single_error.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com\n\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Creating and Testing Nested Go Modules\nDESCRIPTION: Script that initializes nested Go modules, tests package path resolution, and then removes the inner module to verify caching behavior. The test verifies that a package's import path remains stable even after its module definition file is removed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/issue53586.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo mod init example\n\ncd subdir\ngo mod init example/subdir\nsleep 2s  # allow go.mod mtime to be cached\n\ngo list -f '{{.Dir}}: {{.ImportPath}}' ./pkg\nstdout $PWD${/}pkg': example/subdir/pkg$'\n\nrm go.mod  # expose ../go.mod\n\ngo list -f '{{.Dir}}: {{.ImportPath}}' ./pkg\nstdout $PWD${/}pkg': example/subdir/pkg$'\n```\n\n----------------------------------------\n\nTITLE: Non-Net Package Build Version\nDESCRIPTION: Main function implementation for the non-net build tag version that only calls the module handle check without net package import.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/ws2_32.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n//go:build !net\npackage main\n\nfunc main() {\n    hasModuleHandle()\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Submodule go.mod File\nDESCRIPTION: Adds a go.mod file to the submodule with its own module path and creates both regular and submodule-specific tags.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nat 2018-02-19T18:12:07-05:00\necho 'module \"github.com/vgotest1/submod\" // submod/go.mod'\ncp stdout submod/go.mod\ngit add submod/go.mod\ngit commit -m 'submod/go.mod'\ngit tag v1.0.3\ngit tag submod/v1.0.4\n```\n\n----------------------------------------\n\nTITLE: Dependency Q Implementation\nDESCRIPTION: Implementation of shared dependency module 'q'\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage q\n\nfunc Q() {}\n```\n\n----------------------------------------\n\nTITLE: Test Dependency Package with Import - testdep/testdep.go\nDESCRIPTION: Defines a test-only dependency package that imports another test dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto_multi.txt#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\npackage testdep\nimport _ \"test/testdep2\"\n```\n\n----------------------------------------\n\nTITLE: Excluding Module Version in go.exclude.mod\nDESCRIPTION: Specifies the module and excludes a specific version of rsc.io/quote in the go.exclude.mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query_exclude.txt#2025-04-22_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\nmodule x\n\nexclude rsc.io/quote v1.5.0\n```\n\n----------------------------------------\n\nTITLE: Defining Original Go Module File\nDESCRIPTION: Defines the original go.mod file content used in the tests. Contains only the module declaration.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gonoproxy.txt#2025-04-22_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Main Package Implementation with Import Dependencies\nDESCRIPTION: Simple main package implementation that imports packages with assembly and cgo dependencies to test different TOOLEXEC_IMPORTPATH values.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/toolexec.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t_ \"test/main/withasm\"\n\t_ \"test/main/withcgo\"\n)\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Testing GOSUMDB Configuration\nDESCRIPTION: Tests toolchain behavior with various GOSUMDB configurations including bad URLs and disabled checksum verification.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_net.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nenv oldsumdb=$GOSUMDB\nenv GOSUMDB=$oldsumdb' http://badurl'\ngo version\n! stderr downloading\nstdout go1.999testmod\n```\n\n----------------------------------------\n\nTITLE: Module Sum File with Duplicates\nDESCRIPTION: go.sum file containing duplicate hash entries that need to be cleaned up\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_duplicates.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nrsc.io/quote v1.5.2 h1:3fEykkD9k7lYzXqCYrwGAf7iNhbk4yCjHmKBN9td4L0=\nrsc.io/quote v1.5.2 h1:3fEykkD9k7lYzXqCYrwGAf7iNhbk4yCjHmKBN9td4L0=\nrsc.io/quote v1.5.2/go.mod h1:LzX7hefJvL54yjefDEDHNONDjII0t9xZLPXsUe+TKr0=\nrsc.io/quote v1.5.2/go.mod h1:LzX7hefJvL54yjefDEDHNONDjII0t9xZLPXsUe+TKr0=\nrsc.io/sampler v1.3.0 h1:HLGR/BgEtI3r0uymSP/nl2uPLsUnNJX8toRyhfpBTII=\nrsc.io/sampler v1.3.0/go.mod h1:T1hPZKmBbMNahiBKFy5HrXp6adAjACjK9JXDnKaTXpA=\nrsc.io/sampler v1.3.0/go.mod h1:T1hPZKmBbMNahiBKFy5HrXp6adAjACjK9JXDnKaTXpA=\nrsc.io/testonly v1.0.0 h1:K/VWHdO+Jv7woUXG0GzVNx1czBXUt3Ib1deaMn+xk64=\nrsc.io/testonly v1.0.0/go.mod h1:OqmGbIFOcF+XrFReLOGZ6BhMM7uMBiQwZsyNmh74SzY=\n```\n\n----------------------------------------\n\nTITLE: Testing Module Warning for System Temp Directories in Go\nDESCRIPTION: Tests that GO111MODULE=auto properly ignores and warns about go.mod files in system temp directories. This verifies the security feature that prevents potentially malicious module files in temporary directories from being used.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_enabled.txt#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=auto\ncp $GOPATH/src/x/y/z/go.mod $WORK/tmp/go.mod\nmkdir $WORK/tmp/mydir\ncd $WORK/tmp/mydir\ngo env GOMOD\n! stdout .+\nstderr '^go: warning: ignoring go.mod in system temp root '\n```\n\n----------------------------------------\n\nTITLE: Testing vendor/modules.txt Generation with Indirect Dependencies in Go Modules\nDESCRIPTION: This script tests that Go 1.14+ correctly generates a vendor/modules.txt file when running 'go mod vendor', even when the only dependencies in go.mod are marked as indirect. It sets the GO111MODULE environment variable, runs the vendor command, and compares the output to an expected result.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_unused_only.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=on\n\ngo mod vendor\ncmp go1.14-modules.txt vendor/modules.txt\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module (Go Module)\nDESCRIPTION: This go.mod file defines a Go module named 'example.com'. It serves as the root of the module used in the test cases, establishing the module path context for package resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_bad_import.txt#2025-04-22_snippet_4\n\nLANGUAGE: gomod\nCODE:\n```\n-- example.com/go.mod --\nmodule example.com\n```\n\n----------------------------------------\n\nTITLE: Defining Root File System Methods in Go\nDESCRIPTION: Defines a set of methods on the Root type for handling filesystem operations like chmod, chown, timestamps, links and renaming. Each method takes a path string and operation-specific parameters, returning an error if the operation fails.\nSOURCE: https://github.com/golang/go/blob/master/api/next/67002.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc (*Root) Chmod(string, fs.FileMode) error\nfunc (*Root) Chown(string, int, int) error\nfunc (*Root) Chtimes(string, time.Time, time.Time) error\nfunc (*Root) Lchown(string, int, int) error\nfunc (*Root) Link(string, string) error\nfunc (*Root) Readlink(string) (string, error)\nfunc (*Root) Rename(string, string) error\nfunc (*Root) Symlink(string, string) error\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Version\nDESCRIPTION: A simple go.mod file that defines a module named 'example.com' with Go version 1.15.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_symlink_dotgo.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com\ngo 1.15\n```\n\n----------------------------------------\n\nTITLE: Documenting Metadata for Go Toolchain - JSON\nDESCRIPTION: This JSON snippet records version metadata for the Go toolchain module. The object contains a 'Version' field encoding the full version string. This metadata is typically consumed by tools that require structured access to module details, and it must remain in sync with the declared version to ensure compatibility across tools and distribution systems.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.18.3.linux-amd64.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\\"Version\\\":\\\"v0.0.1-go1.18.3.linux-amd64\\\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module\nDESCRIPTION: This snippet defines a Go module named 'm' using Go version 1.21.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_setup_error.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule m\ngo 1.21\n```\n\n----------------------------------------\n\nTITLE: Implementing File Modification Time Checker in Go\nDESCRIPTION: A Go program that reads a filename from a file, retrieves its modification time, and outputs it as JSON. This is used to check the mtime of cgo before and after the test operation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_race_install_cgo.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tb, err := os.ReadFile(os.Args[1])\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n\tfilename := strings.TrimSpace(string(b))\n\tinfo, err := os.Stat(filename)\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n\tif err := json.NewEncoder(os.Stdout).Encode(info.ModTime()); err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Go List Output Formatting\nDESCRIPTION: Sets environment variables PKGFMT and MODFMT to format the output of 'go list' commands for packages and modules respectively.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_all.txt#2025-04-22_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nenv PKGFMT='{{if .Module}}{{.ImportPath}}{{end}}'\nenv MODFMT='{{.Path}}'\n```\n\n----------------------------------------\n\nTITLE: Testing Go List with Different Module Modes\nDESCRIPTION: This snippet tests the 'go list' command with different module modes (mod and vendor) and checks the reported package directories.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# An explicit '-mod=mod' should ignore the vendor directory.\ngo list -mod=mod -f {{.Dir}} x\nstdout 'src[\\/]x'\n\ngo list -mod=mod -f {{.Dir}} -m x\nstdout 'src[\\/]x'\n\n# An explicit '-mod=vendor' should report package directories within\n# the vendor directory.\ngo list -mod=vendor -f {{.Dir}} x\nstdout 'src[\\/]vendor[\\/]x'\n\n# 'go list -mod=vendor -m' should successfully list vendored modules,\n# but should not provide a module directory because no directory contains\n# the complete module.\ngo list -mod=vendor -f '{{.Version}} {{.Dir}}' -m x\nstdout '^v1.0.0 $'\n```\n\n----------------------------------------\n\nTITLE: Basic Go Tool Executable Name Check\nDESCRIPTION: A Go program that prints its own executable name using filepath.Base. Used to verify correct executable naming in the Go build system.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/tool_exename.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"path/filepath\"\n)\n\nfunc main() {\n\tfmt.Println(\"my name is:\", filepath.Base(os.Args[0]))\n}\n```\n\n----------------------------------------\n\nTITLE: Transitioning Between Package and Module Versions in Go\nDESCRIPTION: This snippet demonstrates how to update dependencies between package and module versions using 'go get' and 'go list' commands. It shows the behavior for both package-to-module and module-to-package transitions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patchmod.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngo get example.net/pkgremoved@v0.3.0\ngo list example.net/pkgremoved\nstdout 'example.net/pkgremoved'\n\ngo get example.net/pkgremoved@patch\n! go list example.net/pkgremoved\n\ngo get example.net/pkgremoved@v0.4.0\n! go list example.net/pkgremoved\n\ngo get example.net/pkgremoved@patch\ngo list example.net/pkgremoved\nstdout 'example.net/pkgremoved'\n```\n\n----------------------------------------\n\nTITLE: Main Package Implementation in Overlay\nDESCRIPTION: Main Go file in the overlay that imports the dir2 package and calls its PrintMessage function. This file is used to test the basic functionality of overlays.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_overlay.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"m/dir2\"\n\nfunc main() {\n\tdir2.PrintMessage()\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Get Failure with Bad Zip (Shell)\nDESCRIPTION: This sequence attempts to fetch the `rsc.io/badzip` module using `go get`. The `!` prefix indicates the command is expected to fail. The `stderr` directive checks if the standard error output matches the expected message, confirming rejection due to the unexpected file name in the zip. The `! grep` command verifies that the problematic dependency was not added to the `go.mod` file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badzip.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n! go get rsc.io/badzip\nstderr 'zip for rsc.io/badzip@v1.0.0 has unexpected file rsc.io/badzip@v1.0.0.txt'\n! grep rsc.io/badzip go.mod\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests with Default Coverage Analysis (Shell)\nDESCRIPTION: Executes Go tests for the `encoding/binary` and `errors` packages using the `-short` flag. It enables coverage analysis (`-cover`) and writes the combined coverage profile to the file specified by the `$WORK/cover.out` variable. This test verifies the default behavior without the race detector.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_modes.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo test -short -cover encoding/binary errors -coverprofile=$WORK/cover.out\n```\n\n----------------------------------------\n\nTITLE: Go List with Multi-line Rationale\nDESCRIPTION: This snippet tests 'go list' with a module retracted with a multi-line message. It confirms that 'go list' displays the full multi-line message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_rationale.txt#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ngo list -m -retracted -f '{{.Retracted}}' example.com/retract/rationale\ncmp stdout multiline\n```\n\n----------------------------------------\n\nTITLE: Windows Symlink Implementation\nDESCRIPTION: Implements symbolic link support for Windows including constants for file attributes, reparse points, and functions for creating hard and symbolic links.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_26\n\nLANGUAGE: Go\nCODE:\n```\nconst (\n    ERROR_PRIVILEGE_NOT_HELD = 1314\n    FILE_ATTRIBUTE_REPARSE_POINT = 1024\n    FILE_FLAG_OPEN_REPARSE_POINT = 2097152\n    SYMBOLIC_LINK_FLAG_DIRECTORY = 1\n)\n\nfunc CreateSymbolicLink(*uint16, *uint16, uint32) error\nfunc CreateHardLink(*uint16, *uint16, uintptr) error\nfunc LoadCreateSymbolicLink() error\n```\n\n----------------------------------------\n\nTITLE: Creating Invalid Go Source File (Missing Package Declaration)\nDESCRIPTION: This Go source file (`x.go`) intentionally omits the mandatory package declaration while defining a variable `V`. This invalid structure is used as input for `go fmt` to test its handling of malformed files in module mode, specifically aiming to reproduce the crash reported in issue 26792.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gofmt_invalid.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Missing package declaration.\nvar V int\n```\n\n----------------------------------------\n\nTITLE: Hello World Go Program\nDESCRIPTION: Simple Go program used in the test cases to verify installation behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_install.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {\n\tprintln(\"hello world\")\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching and Verifying Module Dependency in Go\nDESCRIPTION: This snippet demonstrates fetching a specific version of a module using 'go get' and verifying its checksum in go.sum.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_replaced.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo get rsc.io/quote@v1.5.0\ngrep 'rsc.io/quote v1.5.0' go.sum\n```\n\n----------------------------------------\n\nTITLE: Defining Test Dependency for Package 'x/otherroot' (Go)\nDESCRIPTION: Defines a test file for package `x/otherroot` (using the `otherroot_test` naming convention). It imports `x/fromotherroottest` using a blank identifier, establishing a test-only dependency specific to this package. This dependency's inclusion is tested by the `go list -deps -test all x/otherroot` command.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_notall.txt#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n-- x/otherroot/otherroot_test.go --\npackage otherroot_test\n\nimport _ \"x/fromotherroottest\"\n```\n\n----------------------------------------\n\nTITLE: Go Function Implementation For Fuzzing\nDESCRIPTION: A Go implementation file containing the Y function which compares input bytes with 'y' and writes a message to the provided writer if they don't match. This function is the target of fuzzing tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_cache.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage y\n\nimport (\n\t\"bytes\"\n\t\"io\"\n)\n\nfunc Y(w io.Writer, b []byte) {\n\tif !bytes.Equal(b, []byte(\"y\")) {\n\t\tw.Write([]byte(\"not equal\"))\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests with JSON Output\nDESCRIPTION: This command runs Go tests and outputs the results in JSON format. The -json flag enables structured JSON output for better parsing and analysis of test results.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_prints.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo test -json\n```\n\n----------------------------------------\n\nTITLE: Quote Package Main Implementation in Go\nDESCRIPTION: Main implementation of the quote package providing functions to return various quotes. Includes Hello(), Glass(), Go() and Opt() functions that wrap v2 implementations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709162749-b44a0b17b2d1.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage quote\n\nimport \"rsc.io/quote/v2\"\n\nfunc Hello() string {\n\treturn quote.HelloV2()\n}\n\nfunc Glass() string {\n\t// See http://www.oocities.org/nodotus/hbglass.html.\n\treturn quote.GlassV2()\n}\n\nfunc Go() string {\n\treturn quote.GoV2()\n}\n\nfunc Opt() string {\n\t// Wisdom from ken.\n\treturn quote.OptV2()\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Fetch from Cache\nDESCRIPTION: Attempts to fetch a module from cache without consulting the checksum database. Expects the command to succeed even with a failing sumdb proxy.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_cache.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncp go.mod.orig go.mod\nrm go.sum\nenv GOPROXY=$proxy/sumdb-503\ngo get rsc.io/quote\nrm go.sum\n```\n\n----------------------------------------\n\nTITLE: Empty Go Package Definition\nDESCRIPTION: A minimal Go package file located in the subdirectory being tested. This file defines an empty package used to test import path resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/issue53586.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage pkg\n```\n\n----------------------------------------\n\nTITLE: Running Calibration Test for Karatsuba Multiplication in Go\nDESCRIPTION: This command runs the calibration test for Karatsuba multiplication, generating CSV output for further analysis. It uses the Go test framework with specific flags to target the calibration test.\nSOURCE: https://github.com/golang/go/blob/master/src/math/big/calibrate.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo test -run=Calibrate/KaratsubaMul -timeout=1h -calibrate >kmul.csv\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Using Fossil VCS with Go\nDESCRIPTION: This script sets the user environment variable, initializes a Fossil repository, adds a Go file, commits it, and displays the timeline. It demonstrates the basic workflow of Fossil VCS with a Go project.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/fossil/hello.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv USER=rsc\nfossil init --date-override 2017-09-22T01:15:36Z hello.fossil\nfossil open --keep hello.fossil\n\nfossil add hello.go\nfossil commit --no-prompt --nosign --date-override 2017-09-22T01:19:07Z --comment 'hello world'\n\nfossil timeline --oneline\ncmp stdout .fossil-timeline\n```\n\n----------------------------------------\n\nTITLE: Conditionally Excluded Go Command Source File\nDESCRIPTION: A Go source file for the executable with a build constraint using a non-existent tag. This tests that removing files not included in compilation doesn't cause staleness.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_rebuild_removed.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// +build missingtag\n\npackage main\n```\n\n----------------------------------------\n\nTITLE: Testing Error Reporting with Newer Go Version\nDESCRIPTION: Checks error reporting and suggestion for 'go mod tidy' when using a newer Go version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goline_order.txt#2025-04-22_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nenv TESTGO_VERSION=go1.21.2\ncp go.mod.orig go.mod\n! go list -deps -tags usem1\nstderr 'updates to go.mod needed'\nstderr 'go mod tidy'\ngo mod tidy\ngo list -deps -tags usem1\n```\n\n----------------------------------------\n\nTITLE: Module Version Listing Commands\nDESCRIPTION: Shows how to use 'go list -m' command to display module versions and available versions using -versions flag.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query_main.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo list -m rsc.io/quote@5d9f230b\ngo list -m rsc.io/quote@v1.5.2\ngo list -m rsc.io/quote@latest\ngo list -m -versions rsc.io/quote\n```\n\n----------------------------------------\n\nTITLE: Building Go Compiler and Test Executable in Shell\nDESCRIPTION: This snippet builds a fresh copy of the Go compiler and a test executable using the go build command. It creates new directories and sets up the environment for testing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goroot_executable.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmkdir $WORK/new/bin\n\ngo build -o $WORK/new/bin/go$GOEXE cmd/go &\ngo build -trimpath -o $WORK/bin/check$GOEXE check.go &\nwait\n\nenv TESTGOROOT=$GOROOT\nenv GOROOT=\n```\n\n----------------------------------------\n\nTITLE: Testing Go Get with Multiple Module-Only Arguments\nDESCRIPTION: A regression test for golang.org/issue/35317 that demonstrates using 'go get' with multiple module-only arguments at specific versions. The test creates a new module and attempts to fetch several dependencies simultaneously to verify that race conditions have been resolved.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_issue35317.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=on\n[short] skip\n\ngo mod init example.com\ngo get golang.org/x/text@v0.3.0 golang.org/x/internal@v0.1.0 golang.org/x/exp@none\n```\n\n----------------------------------------\n\nTITLE: Standard Library Import Test\nDESCRIPTION: A Go file that imports the standard library package 'encoding/json'. Used to test the behavior when GOROOT is set to an invalid location.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goroot_errors.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage importjson\nimport _ \"encoding/json\"\n```\n\n----------------------------------------\n\nTITLE: Testing Start and End Anchors with \\B in Go Regexps\nDESCRIPTION: Tests patterns with both start (^) and end ($) anchors combined with non-word boundary assertions (\\B). These tests verify empty string matches with non-word boundary constraints.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_15\n\nLANGUAGE: regexp\nCODE:\n```\n^\\B$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:^\\B$)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:^\\B$)\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:^\\B$)$\n```\n\n----------------------------------------\n\nTITLE: Successful Fuzz Test Implementation in Go\nDESCRIPTION: Demonstrates a properly implemented fuzz test that accepts byte slice input.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage success_fuzz\n\nimport \"testing\"\n\nfunc Fuzz(f *testing.F) {\n    f.Fuzz(func (*testing.T, []byte) {})\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Environment and Testing 'go list' with Direct Missing Import (Shell)\nDESCRIPTION: Initializes the test environment by enabling module mode and changing into the example directory. It then tests the 'go list' command on a package ('example.com/direct') that directly imports a non-existent package ('example.com/notfound'). The tests check the output format, incompleteness flag, dependency errors, and overall command success/failure with and without the '-e' and '-deps' flags, verifying specific stdout and stderr content.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_bad_import.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# This test matches list_bad_import, but in module mode.\n# Please keep them in sync.\n\nenv GO111MODULE=on\ncd example.com\n\n# Without -e, listing an otherwise-valid package with an unsatisfied direct import should fail.\n# BUG: Today it succeeds.\ngo list -f '{{if .Error}}error{{end}} {{if .Incomplete}}incomplete{{end}} {{range .DepsErrors}}bad dep: {{.Err}}{{end}}' example.com/direct\n! stdout ^error\nstdout 'incomplete'\nstdout 'bad dep: .*example.com/notfound'\n\n# Listing with -deps should also fail.\n! go list -deps example.com/direct\nstderr example.com/notfound\n\n# But -e -deps should succeed.\ngo list -e -deps example.com/direct\nstdout example.com/notfound\n```\n\n----------------------------------------\n\nTITLE: Module A Implementation\nDESCRIPTION: Main package implementation for module 'a' that imports and uses module 'b'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"example.com/b\"\n\nfunc main() {\n\tb.B()\n}\n```\n\n----------------------------------------\n\nTITLE: Workspace Modules.txt Configuration\nDESCRIPTION: Expected content for the workspace-generated modules.txt file. It includes the '## workspace' marker which signals workspace vendor mode should be used.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_modules_txt_conditional.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n## workspace\n# example.com/b v0.0.0 => ./b\n## explicit; go 1.21\nexample.com/b\n# example.com/b => ./b\n```\n\n----------------------------------------\n\nTITLE: Version Information in .info File\nDESCRIPTION: JSON format version information for the toolchain module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-mipsx.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.999testmod.linux-mipsx\"}\n```\n\n----------------------------------------\n\nTITLE: Testing Exit with Status 0 in TestMain\nDESCRIPTION: This snippet tests a Go package where TestMain exits with status 0. It verifies that the test is marked as passing using both go test -json and go tool test2json commands.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_exit.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngo test -json ./mainexit0\nstdout '\"Action\":\"pass\"'\n! stdout '\"Action\":\"fail\"'\n\ngo tool test2json ./mainexit0.exe\nstdout '\"Action\":\"pass\"'\n! stdout '\"Action\":\"fail\"'\n```\n\n----------------------------------------\n\nTITLE: Testing Cgo with Compiler Defines in Go\nDESCRIPTION: A simple Go program that uses cgo to include a C variable defined by the compiler flags. It prints the value of the C variable 'x' which will be 1 if the wrapper was properly used to compile the code.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_path_space_quote.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\n// int x = WRAPPER_WAS_USED;\nimport \"C\"\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(C.x)\n}\n```\n\n----------------------------------------\n\nTITLE: Querying 'latest' Module Version (Pseudo-versions Only Test)\nDESCRIPTION: Executes 'go list -m' to retrieve metadata for the 'latest' version of the 'dmitri.shuralyov.com/test/modtest3' module using the 'tinyproxy' configured in the previous step. This tests how 'latest' is resolved when the proxy only offers pseudo-versions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_pseudo.txt#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngo list -m -f '{{.Path}} {{.Version}} {{.Time.Format \"2006-01-02\"}}' dmitri.shuralyov.com/test/modtest3@latest\n```\n\n----------------------------------------\n\nTITLE: Retrieving Top Stack Frame File Name - Go\nDESCRIPTION: This Go function 'TopFile' uses 'runtime.Caller' to return the file name of the top stack frame. It depends on the standard 'runtime' package, requires no parameters, and returns a string containing the file path. The output reflects the source file, but may be altered by Go compiler flags such as '-trimpath'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_stack_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage stack\\n\\nimport \\\"runtime\\\"\\n\\nfunc TopFile() string {\\n\\t_, file, _, _ := runtime.Caller(0)\\n\\treturn file\\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Module Versions Without Exclusions\nDESCRIPTION: Demonstrates listing all versions of rsc.io/quote module without showing the excluded version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query_exclude.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngo list -m -versions rsc.io/quote\nstdout '\\bv1.5.0\\b'\ngo list -modfile=go.exclude.mod -m -versions rsc.io/quote\n! stdout '\\bv1.5.0\\b'\n```\n\n----------------------------------------\n\nTITLE: Testing Non-Zero Exit Status in Go Test\nDESCRIPTION: A Go test that explicitly calls os.Exit(1) which will cause 'go test' to fail but without panic, as non-zero exits are considered normal failures.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_exit.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage one\n\nimport (\n\t\"os\"\n\t\"testing\"\n)\n\nfunc TestExitOne(t *testing.T) {\n\tos.Exit(1)\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Main Module Source (Go)\nDESCRIPTION: The initial version of the main program (`m.go`). It imports package `a` only for its side effects (indicated by `_`). The test dependency within `a` (`a_test.go`) imports `b/x`, making `b` initially a test-only dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_import_allmod.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n-- m.go --\npackage main\n\nimport (\n\t\"fmt\"\n\n\t_ \"a\"  // a_test imports b/x.\n)\n\nfunc main() {\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Module Info in JSON Format (.info)\nDESCRIPTION: Contains version information for the toolchain module in JSON format.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-ppc64.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.999testmod.linux-ppc64\"}\n```\n\n----------------------------------------\n\nTITLE: Go Compiler Toolchain Support Functions\nDESCRIPTION: Functions for go/doc and go/types packages that provide compiler toolchain support. Includes type checking, predeclared identifier verification, and defaulting of types.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.8.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n// go/doc functions\nfunc IsPredeclared(string) bool\n\n// go/types functions\nfunc Default(Type) Type\nfunc IdenticalIgnoreTags(Type, Type) bool\n```\n\n----------------------------------------\n\nTITLE: Unimported Package with Dependency\nDESCRIPTION: Unimported package that imports the incompatible module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_irrelevant.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage unimported\n\nimport _ \"example.com/retract/incompatible\"\n```\n\n----------------------------------------\n\nTITLE: Implementing TestMain with Panic\nDESCRIPTION: This Go code implements a TestMain function that panics, used to test the behavior of panics in TestMain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_exit.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\npackage mainpanic_test\n\nimport \"testing\"\n\nfunc TestMain(m *testing.M) {\n\tpanic(\"haha no\")\n}\n```\n\n----------------------------------------\n\nTITLE: Go Work Configuration File\nDESCRIPTION: Defines the Go workspace configuration with Go version 1.21.1 and includes the current directory module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_goline_order.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngo 1.21.1\nuse .\n```\n\n----------------------------------------\n\nTITLE: Defining a Go Module with Dependencies\nDESCRIPTION: This snippet shows a go.mod file for the 'example.net/other' module, which requires a specific version of 'example.net/pkgremoved'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patchmod.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/other\n\ngo 1.16\n\nrequire example.net/pkgremoved v0.2.0\n```\n\n----------------------------------------\n\nTITLE: Testing Go List with Coverage Build Flags – Shell\nDESCRIPTION: This shell test script automates the process of installing and checking the staleness of a Go package (m/example), invoking build and list commands with and without coverage flags, and extracting and comparing build IDs to ensure correctness. It sets up the environment, manages build artifacts, and includes steps to verify that different coverage modes ('atomic', 'count') do not break basic build functionality. External dependencies: a Go toolchain (1.20+), access to the file system, and a Unix-like shell. Input includes Go package sources and test control logic; outputs are temporarily stored files and command exit statuses. Constraints: expects the 'go' binary and related tools to be on the PATH, provides limited error handling, and is designed for short, isolated runs.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_list.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# This test is intended to verify that \\\"go list\\\" accepts coverage related\\n# build arguments (such as -cover, -covermode). See issue #57785.\\n\\n[short] skip\\n\\nenv GOBIN=$WORK/bin\\n\\n# Install a target and then do an ordinary staleness check on it.\\ngo install m/example\\n! stale m/example\\n\\n# Run a second staleness check with \\\"-cover\\\" as a build flag. The\\n# installed target should indeed be stale, since we didn't build it\\n# with -cover.\\nstale -cover m/example\\n\\n# Collect build ID from for m/example built with -cover.\\ngo list -cover -export -f '{{.BuildID}}' m/example\\ncp stdout $WORK/listbuildid.txt\\n\\n# Now build the m/example binary with coverage.\\ngo build -cover -o $WORK/m.exe m/example\\n\\n# Ask for the binary build ID by running \\\"go tool buildid\\\".\\ngo tool buildid $WORK/m.exe\\ncp stdout $WORK/rawtoolbuildid.txt\\n\\n# Make sure that the two build IDs agree with respect to the\\n# m/example package. Build IDs from binaries are of the form X/Y/Z/W\\n# where Y/Z is the package build ID; running the program below will\\n# pick out the parts of the ID that we want.\\nenv GOCOVERDIR=$WORK\\nexec $WORK/m.exe $WORK/rawtoolbuildid.txt\\ncp stdout $WORK/toolbuildid.txt\\n\\n# Build IDs should match here.\\ncmp $WORK/toolbuildid.txt $WORK/listbuildid.txt\\n\\n# Make sure that the build succeeds regardless of covermode.\\ngo list -export -covermode=atomic m/example\\ngo list -export -covermode=count m/example\\n\n```\n\n----------------------------------------\n\nTITLE: Committing to Mercurial and Checking Version Metadata\nDESCRIPTION: This snippet adds files to the Mercurial repository, commits them, and creates a tag. Then, it updates to a previous commit and installs the Go binary. It checks the version metadata to ensure the correct revision, time, and modified status are present.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_hg.txt#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nexec hg add a README go.mod\nexec hg commit -m 'initial commit' --user test-user --date '2024-07-31T01:21:27+00:00'\nexec hg tag a/v1.2.3\n# Switch back to the tagged branch.\n# Tagging a commit causes a new commit to be created. (See https://repo.mercurial-scm.org/hg/help/revsets)\nexec hg update '.~1'\ncd a\ngo install\ngo version -m $GOBIN/a$GOEXE\nstdout '^\\tbuild\\tvcs.revision=eae91df98b5dd3c4451accf64c683ddc3edff6a9$'\nstdout '^\\tbuild\\tvcs.time=2024-07-31T01:21:27Z$'\nstdout '^\\tbuild\\tvcs.modified=false$'\nstdout '\\s+mod\\s+example.com/a\\s+v1.2.3\\s+'\nrm $GOBIN/a$GOEXE\n```\n\n----------------------------------------\n\nTITLE: Package Implementation\nDESCRIPTION: Simple Go package 'p' containing an empty function F()\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo1183_v0.0.1.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nfunc F() {}\n```\n\n----------------------------------------\n\nTITLE: Conditional Import with Build Constraint in Go\nDESCRIPTION: A Go file with a build constraint 'abc' that imports module 'y'. This file will only be included in the build when the 'abc' build tag is specified. Note the non-standard package name 'mMmMmMm'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vendormod.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// +build abc\n\npackage mMmMmMm\n\nimport _ \"y\"\n```\n\n----------------------------------------\n\nTITLE: Defining Experiment Event Types in Go\nDESCRIPTION: Example of defining new experiment event types in Go, starting from ID 127 by convention.\nSOURCE: https://github.com/golang/go/blob/master/src/internal/trace/tracev2/EXPERIMENTS.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nconst (\n    // Existing event types...\n\n    // New experimental event types\n    EventExperimentalType1 EventType = 127\n    EventExperimentalType2 EventType = 128\n    // Add more as needed\n)\n```\n\n----------------------------------------\n\nTITLE: Go Test File Implementation\nDESCRIPTION: This Go test file implements a TestMain function for setup and teardown, and a Test function with subtests. It demonstrates various testing patterns including subtest creation, logging, and custom output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_prints.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage p\n\nimport (\n\t\"os\"\n\t\"testing\"\n)\n\nfunc TestMain(m *testing.M) {\n\tprint(\"M1\")\n\tcode := m.Run()\n\tprint(\"M2\")\n\tos.Exit(code)\n}\n\nfunc Test(t *testing.T) {\n\tprint(\"T1\")\n\tt.Run(\"Sub1\", func(t *testing.T) {\n\t\tprint(\"Sub1\")\n\t\tt.Log(\"SubLog1\")\n\t\tprint(\"Sub2\")\n\t})\n\tt.Run(\"Sub3\", func(t *testing.T) {\n\t\tprint(\"\\x16foo bar\\x16baz\\n\")\n\t})\n\tprint(\"T2\")\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment and Testing 'go list -deps all x/otherroot' (Shell)\nDESCRIPTION: Sets the GOFLAGS environment variable, backs up the main go.mod file, and runs `go list -deps` with the `all` pattern and an additional root pattern `x/otherroot`. It then uses `stdout` and `! stdout` commands to assert which packages should and should not be included in the output, specifically checking that test dependencies of `all` are included but test dependencies solely imported by `x/otherroot` or its dependencies are excluded. Finally, it compares the current go.mod with the backup to ensure no modifications occurred.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_notall.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# This test demonstrates go commands that combine the 'all' pattern\n# with packages outside of 'all'.\n\n# With -deps, 'all' should include test dependencies of packages in the main\n# module, but not should not include test dependencies of packages imported only\n# by other root patterns.\n\nenv GOFLAGS=-mod=mod\ncp go.mod go.mod.orig\n\ngo list -deps all x/otherroot\n\nstdout '^x/inall$'\nstdout '^x/inall/fromtest$'\nstdout '^x/inall/fromtestinall$'\nstdout '^x/otherroot$'\nstdout '^x/otherdep$'\n\n! stdout '^x/fromotherroottest$'\n! stdout '^y/fromotherdeptest$'\n\ncmp go.mod go.mod.orig\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines a minimal Go module named 'm'\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_json_with_f.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Package with PrintFileForTest and TestMain\nDESCRIPTION: Defines a test package with a PrintFileForTest function and a TestMain function that calls both PrintFile and PrintFileForTest.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_trimpath_test_suffix.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage pkg_test_test\n\nimport (\n\t\"runtime\"\n\t\"testing\"\n\n\t\"example.com/pkg_test\"\n)\n\nfunc PrintFileForTest() {\n\t_, file, _, _ := runtime.Caller(0)\n\tprintln(file)\n}\n\nfunc TestMain(m *testing.M) {\n\tpkg_test.PrintFile()\n\tPrintFileForTest()\n}\n```\n\n----------------------------------------\n\nTITLE: Executing `go list` Under Normal Conditions (Shell)\nDESCRIPTION: This snippet executes the `go list ./...` command in a shell environment. It's part of a test setup designed to verify that `go list` functions correctly under standard file and directory permissions. The preceding comment `# go list should work in ordinary conditions.` indicates the intent, and `! stdout _data` suggests the expected standard output should contain references related to the `_data` directory or its contents.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_perm.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# go list should work in ordinary conditions.\ngo list ./...\n! stdout _data\n```\n\n----------------------------------------\n\nTITLE: Referencing Dependency Functions and Types in a Go Package - Go\nDESCRIPTION: Implements a Go source file 'x.go' under package 'x', which imports 'sub.1' and demonstrates usage of a dependency function 'F' (with two arguments) and references types 'Alias' and 'Defined' from the dependency. Requires the 'sub.1' module to be present and properly defined. Demonstrates how dependent modules can utilize newer Go type features, even if the main module is set to an older Go version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version_mixed.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n-- x.go --\npackage x\n\nimport \"sub.1\"\n\nfunc F() { sub.F(0, 0) }\n\nvar A sub.Alias\nvar D sub.Defined\n```\n\n----------------------------------------\n\nTITLE: Testing Quote Functions in Go\nDESCRIPTION: Contains test functions for all the quote package functions. Sets up the environment for testing by setting LC_ALL to 'en', and verifies that each function returns the expected quote string. Includes tests for Hello(), Glass(), Go(), and Opt() functions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180628003336-dd9747d19b04.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage quote\n\nimport (\n\t\"os\"\n\t\"testing\"\n)\n\nfunc init() {\n\tos.Setenv(\"LC_ALL\", \"en\")\n}\n\nfunc TestHello(t *testing.T) {\n\thello := \"Hello, world.\"\n\tif out := Hello(); out != hello {\n\t\tt.Errorf(\"Hello() = %q, want %q\", out, hello)\n\t}\n}\n\nfunc TestGlass(t *testing.T) {\n\tglass := \"I can eat glass and it doesn't hurt me.\"\n\tif out := Glass(); out != glass {\n\t\tt.Errorf(\"Glass() = %q, want %q\", out, glass)\n\t}\n}\n\nfunc TestGo(t *testing.T) {\n\tgo1 := \"Don't communicate by sharing memory, share memory by communicating.\"\n\tif out := Go(); out != go1 {\n\t\tt.Errorf(\"Go() = %q, want %q\", out, go1)\n\t}\n}\n\nfunc TestOpt(t *testing.T) {\n\topt := \"If a program is too slow, it must have a loop.\"\n\tif out := Opt(); out != opt {\n\t\tt.Errorf(\"Opt() = %q, want %q\", out, opt)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Policies Field for Certificate Marshalling using x509usepolicies GODEBUG Setting (Go 1.22)\nDESCRIPTION: Introduced in Go 1.22, this setting controls the marshalling of certificate policy OIDs in crypto/x509. When x509usepolicies=1, the new Certificate.Policies field (which supports OID components > 31 bits) is used for marshalling instead of the older PolicyIdentifiers field. By default (0), the Policies field is populated during parsing but not used for marshalling. Set via GODEBUG environment variable (e.g., GODEBUG=x509usepolicies=1).\nSOURCE: https://github.com/golang/go/blob/master/doc/godebug.md#2025-04-22_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\nx509usepolicies\n```\n\n----------------------------------------\n\nTITLE: Shell Test Configuration Commands\nDESCRIPTION: Shell commands for configuring and running Go fuzzing tests with various timeout and GOMAXPROCS settings. Includes cache warmup and resource management considerations for 32-bit environments.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_deadline.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nenv GOCACHE=$WORK/cache\n\n# Warm up the build cache with GOMAXPROCS unrestricted.\ngo test -c -o $devnull\n\n# For the fuzzing phase, we reduce GOMAXPROCS to avoid consuming too many\n# resources during the test. Ideally this would just free up resources to run\n# other parallel tests more quickly, but unfortunately it is actually necessary\n# in some 32-bit environments to prevent the fuzzing engine from running out of\n# address space (see https://go.dev/issue/65434).\nenv GOMAXPROCS=2\n\n# The fuzz function should be able to detect whether -timeout\n# was set with T.Deadline. Note there is no F.Deadline, and\n# there is no timeout while fuzzing, even if -fuzztime is set.\ngo test -run=FuzzDeadline -wantdeadline=true # -timeout defaults to 10m\ngo test -run=FuzzDeadline -timeout=0 -wantdeadline=false\n! go test -run=FuzzDeadline -timeout=1s -wantdeadline=false\ngo test -run=FuzzDeadline -timeout=1s -wantdeadline=true\ngo test -fuzz=FuzzDeadline -timeout=0 -fuzztime=1s -wantdeadline=false\ngo test -fuzz=FuzzDeadline -timeout=0 -fuzztime=100x -wantdeadline=false\n```\n\n----------------------------------------\n\nTITLE: Building and Comparing Go Runtime Shared Libraries with Different pkgdir Values\nDESCRIPTION: This script builds the Go runtime as a shared library twice with different output directories specified by -pkgdir flag, then compares the resulting .so files to verify they are identical. The test ensures that changing the package directory doesn't affect the generated shared library content.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_shared_reproducible.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[!buildmode:shared] skip\n[short] skip\n[!cgo] skip '-buildmode=shared requires external linking'\n[!GOOS:linux] skip\n\nenv GO111MODULE=off\nenv CGO_ENABLED=1\ngo install -a -trimpath -buildvcs=false -buildmode=shared -pkgdir=pkgdir1 runtime\ngo install -a -trimpath -buildvcs=false -buildmode=shared -pkgdir=pkgdir2 runtime\n[GOOS:linux] cmp -q pkgdir1/libruntime.so pkgdir2/libruntime.so\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Version Retraction with Go Modules - go.mod - Go\nDESCRIPTION: This snippet demonstrates the use of the go.mod file to define a Go module and retract a specified version (v1.9.0) due to it being labeled as 'bad'. No dependencies are required beyond Go itself (minimum version 1.15). Key entries include the module path, Go version, and the 'retract' directive with an inline comment. This configuration prevents consumers from depending on the retracted version, ensuring problematic releases are not used.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_all_v1.9.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/retract/self/all\\n\\ngo 1.15\\n\\nretract v1.9.0 // bad\\n\n```\n\n----------------------------------------\n\nTITLE: Placeholder for SWIG-generated C++ Content - C++ (SWIG input)\nDESCRIPTION: This SWIG input file ('a.swigcxx') is intentionally left empty to serve as a test case for the Go build system, focusing on the presence and reporting of SWIG-generated C++ files in the context of Go module builds. Its existence triggers SWIG generation during the build process, but its contents do not define any wrappers or interfaces. The file must be present to simulate a SWIG/Cgo setup.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_swigcxx.txt#2025-04-22_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Testing Module with go 1.24 Requirement\nDESCRIPTION: Tests how 'go get needgo124' (which requires Go 1.24) uses Go 1.24rc1 when GOTOOLCHAIN=auto is set, as it's the only available version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_exec_toolchain.txt#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n# go get needgo124 (says 'go 1.24') should use go 1.24rc1, the only version available\nenv GOTOOLCHAIN=local\ncp go.mod.new go.mod\n! go get rsc.io/needgo124\nstderr '^go: rsc.io/needgo124@v0.0.1 requires go >= 1.24 \\(running go 1.21; GOTOOLCHAIN=local\\)'\n\nenv GOTOOLCHAIN=auto\ncp go.mod.new go.mod\ngo get rsc.io/needgo124\nstderr '^go: rsc.io/needgo124@v0.0.1 requires go >= 1.24; switching to go1.24rc1$'\nstderr '^go: upgraded go 1.1 => 1.24$'\n! stderr '^go: added toolchain$'\n```\n\n----------------------------------------\n\nTITLE: Setting Git Environment Variables for Go Repository\nDESCRIPTION: Configures Git author and committer environment variables for repository setup.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/emptytest.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GIT_AUTHOR_NAME='Russ Cox'\nenv GIT_AUTHOR_EMAIL='rsc@golang.org'\nenv GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME\nenv GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository\nDESCRIPTION: Creates a new Git repository.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/commit-after-tag.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit init\n```\n\n----------------------------------------\n\nTITLE: Shell Commands for Fuzzing Test Execution\nDESCRIPTION: Shell commands to run various fuzzing tests with different parallel configurations and verify test behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_parallel.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GOCACHE=$WORK/cache\n\ngo test -run=FuzzSeed\n\n! go test -run=FuzzMutate -fuzz=FuzzMutate\nexists testdata/fuzz/FuzzMutate\n\n! go test -run=FuzzMutate -parallel=1\n! go test -run=FuzzMutate -parallel=2\n! go test -run=FuzzMutate -parallel=4\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Module and Testing Dependency Resolution\nDESCRIPTION: This snippet initializes a new Go module and attempts to get a specific version of a package. It's designed to test the behavior of Go's dependency resolution system when there's a conflict between direct and indirect dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_newcycle.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo mod init m\n! go get example.com/newcycle/a@v1.0.0\ncmp stderr stderr-expected\n```\n\n----------------------------------------\n\nTITLE: Resolving Package at Specific Commit\nDESCRIPTION: Tests the resolution of a package (golang.org/x/text/language) at a specific commit without running the compiler. It uses the -x flag for verbose output and checks that no compilation occurs.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_commit.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo get -x golang.org/x/text/language@14c0d48\n! stderr 'compile|cp|gccgo .*language\\.a$'\n```\n\n----------------------------------------\n\nTITLE: Interface and Implementation for Package 'it' in Go\nDESCRIPTION: Package 'it' defines a Ctr interface with a Count method, a concrete Conc struct that implements this interface, and utility functions for working with these types.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_multipkg.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage it\n\ntype Ctr interface {\n\tCount() int\n}\n\ntype Conc struct {\n\tX int\n}\n\nfunc (c *Conc) Count() int {\n\treturn c.X\n}\n\nfunc DoCall(c *Conc) {\n\tc2 := Callee(c)\n\tprintln(c2.Count())\n}\n\nfunc Callee(ii Ctr) Ctr {\n\tq := ii.Count()\n\treturn &Conc{X: q}\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Output Behavior in Go Test Command\nDESCRIPTION: A shell script that tests the behavior of the 'go test' command in different modes, verifying output formatting and exit codes for both failing and passing tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fail_newline.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# In package list mode, output is buffered.\n# Check that a newline is printed after the buffer's contents.\ncd fail\n! go test .\n! stderr .\nstdout '^exitcode=1\\n'\nstdout '^FAIL\\s+example/fail'\n\n# In local directory mode output is streamed, so we don't know\n# whether the test printed anything at all, so we print the exit code\n# (just in case it failed without emitting any output at all),\n# and that happens to add the needed newline as well.\n! go test\n! stderr .\nstdout '^exitcode=1exit status 1\\n'\nstdout '^FAIL\\s+example/fail'\n\n# In package list mode, if the test passes the 'ok' message appears\n# on its own line.\ncd ../skip\ngo test -v .\n! stderr .\nstdout '^skipping\\n'\nstdout '^ok\\s+example/skip'\n\n# If the output is streamed and the test passes, we can't tell whether it ended\n# in a partial line, and don't want to emit any extra output in the\n# overwhelmingly common case that it did not.\n# (In theory we could hook the 'os' package to report whether output\n# was emitted and whether it ended in a newline, but that seems too invasive.)\ngo test\n! stderr .\nstdout '^skippingok\\s+example/skip'\n```\n\n----------------------------------------\n\nTITLE: Controlling Executable Lookup in Current Directory using execerrdot GODEBUG Setting (Go 1.19)\nDESCRIPTION: Introduced in Go 1.19, this setting controls whether os/exec path lookups are allowed to resolve to executables in the current directory when the command name doesn't contain a path separator. The default behavior in Go 1.19+ makes this an error for security reasons. Setting execerrdot=0 reverts to the older, less secure behavior. Set via GODEBUG environment variable (e.g., GODEBUG=execerrdot=0).\nSOURCE: https://github.com/golang/go/blob/master/doc/godebug.md#2025-04-22_snippet_24\n\nLANGUAGE: plaintext\nCODE:\n```\nexecerrdot\n```\n\n----------------------------------------\n\nTITLE: Disabling VCS Stamping with -buildvcs=false\nDESCRIPTION: This snippet installs a Go binary with the -buildvcs=false flag, which should suppress the VCS information in the resulting binary. The test asserts that 'hgrevision' is not present in the output of `go version -m`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_hg.txt#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ngo install -buildvcs=false\ngo version -m $GOBIN/a$GOEXE\n! stdout hgrevision\nstdout '\\s+mod\\s+example.com/a\\s+\\(devel\\)'\nrm $GOBIN/a$GOEXE\n```\n\n----------------------------------------\n\nTITLE: Importing a Dependency in a Basic Go Package - Go\nDESCRIPTION: This minimal Go source file defines the 'example' package and imports the 'rsc.io/quote' package for its side-effects. No functions or executable code are provided; primarily demonstrates how an import can be declared to register behavior or effects during program initialization. Requires the dependency to be present in go.mod and fetched by Go tools.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_m.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage example\n\nimport _ \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: New fmt Package Buffer Manipulation Functions\nDESCRIPTION: New functions added to the fmt package for appending formatted text to byte slices.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.19.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc Append([]uint8, ...interface{}) []uint8\nfunc Appendf([]uint8, string, ...interface{}) []uint8\nfunc Appendln([]uint8, ...interface{}) []uint8\n```\n\n----------------------------------------\n\nTITLE: Specifying Module Version in JSON\nDESCRIPTION: Provides module metadata in JSON format, specifically defining the module's version as `v0.0.1-go1.999testmod.js-wasm`. This `.info` file is often used by Go tooling to retrieve version details.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.js-wasm.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.999testmod.js-wasm\"}\n```\n\n----------------------------------------\n\nTITLE: Bazaar Repository Test Script\nDESCRIPTION: Shell script that tests Bazaar (bzr) version control operations. It sets up environment variables, initializes a repository, creates a branch, adds a Go file, commits it, and verifies the log output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/bzr/hello.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n[!bzr] skip 'requires a working bzr client'\nhandle bzr\n\nenv BZR_EMAIL='Russ Cox <rsc@google.com>'\nenv EMAIL='Russ Cox <rsc@google.com>'\n\nbzr init-repo .\n\nbzr init b\ncd b\ncp ../hello.go .\nbzr add hello.go\nbzr commit --commit-time='2017-09-21 21:20:12 -0400' -m 'hello world'\nbzr push ..\ncd ..\nrm b\n\nbzr log\ncmp stdout .bzr-log\n```\n\n----------------------------------------\n\nTITLE: Old Version Module Definition\nDESCRIPTION: Module definition for the older version of the main module, showing its dependency on example.net/x.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_lazy_self.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule golang.org/issue/46078\n\ngo 1.17\n\nrequire example.net/x v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Reinvocation Authenticator for HTTP Requests in Go\nDESCRIPTION: A Go program that handles reinvocation of authentication requests. It waits for HTTP 401 responses, processes them, and then provides proper authentication credentials for vcs-test.golang.org. This demonstrates how authenticators can handle multiple authentication attempts.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goauth_userauth.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport(\n\t\"bufio\"\n\t\"flag\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tflag.Parse()\n\t// wait for re-invocation\n\tif !strings.HasPrefix(flag.Arg(0), \"https://vcs-test.golang.org\") {\n\t\treturn\n\t}\n\tinput, err := io.ReadAll(os.Stdin)\n\tif err != nil {\n\t\tlog.Fatal(\"unexpected error while reading from stdin\")\n\t}\n\treader := bufio.NewReader(strings.NewReader(string(input)))\n\tresp, err := http.ReadResponse(reader, nil)\n\tif err != nil {\n\t\tlog.Fatal(\"could not parse HTTP response\")\n\t}\n\tif resp.StatusCode != 401 {\n\t\tlog.Fatal(\"expected 401 error code\")\n\t}\n\tfmt.Printf(\"https://vcs-test.golang.org\\n\\nAuthorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l\\n\\n\")\n}\n```\n\n----------------------------------------\n\nTITLE: Internal Test Export for Dot Import\nDESCRIPTION: Defines an internal test file that exports a variable for use in external tests with dot imports.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_test_issue11864.txt#2025-04-22_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\npackage tx2\n\nvar Exported = true\n```\n\n----------------------------------------\n\nTITLE: Checking Module Resolution After Vendoring in Go\nDESCRIPTION: Uses 'go list' command with vendor mode to verify the module version and directory after vendoring.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_replace.txt#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngo list -mod=vendor -f '{{with .Module}}{{.Version}}{{end}} {{.Dir}}' rsc.io/quote/v3\nstdout 'v3.0.0'\nstdout '.*[/\\\\]vendor[/\\\\]rsc.io[/\\\\]quote[/\\\\]v3'\n! stderr 'finding'\n! stderr 'lookup disabled'\n```\n\n----------------------------------------\n\nTITLE: Sub-module Package Declaration\nDESCRIPTION: A minimal Go file for the sub-module that just declares package 'x'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage x\n```\n\n----------------------------------------\n\nTITLE: Terminal Settings Constants for Darwin ARM64 in Go\nDESCRIPTION: Constants for setting terminal attributes and parameters in the syscall package for Darwin ARM64. These constants are used for operations such as setting terminal attributes, window size, and control flags.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_114\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (darwin-arm64), const TIOCSETA = 2152231956\npkg syscall (darwin-arm64), const TIOCSETAF = 2152231958\npkg syscall (darwin-arm64), const TIOCSETAW = 2152231957\npkg syscall (darwin-arm64), const TIOCSETD = 2147775515\npkg syscall (darwin-arm64), const TIOCSIG = 536900703\npkg syscall (darwin-arm64), const TIOCSPGRP = 2147775606\npkg syscall (darwin-arm64), const TIOCSTART = 536900718\npkg syscall (darwin-arm64), const TIOCSTAT = 536900709\npkg syscall (darwin-arm64), const TIOCSTI = 2147578994\npkg syscall (darwin-arm64), const TIOCSTOP = 536900719\npkg syscall (darwin-arm64), const TIOCSWINSZ = 2148037735\npkg syscall (darwin-arm64), const TIOCTIMESTAMP = 1074820185\npkg syscall (darwin-arm64), const TIOCUCNTL = 2147775590\npkg syscall (darwin-arm64), const TOSTOP = 4194304\n```\n\n----------------------------------------\n\nTITLE: Defining IPv6 Constants for Darwin ARM64 in Go\nDESCRIPTION: This snippet defines various IPv6-related constants for the Darwin ARM64 platform. These constants are used for configuring IPv6 sockets, setting multicast options, and defining protocol-specific values.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_70\n\nLANGUAGE: Go\nCODE:\n```\nconst IPV6_MAXPACKET = 65535\nconst IPV6_MAX_GROUP_SRC_FILTER = 512\nconst IPV6_MAX_MEMBERSHIPS = 4095\nconst IPV6_MAX_SOCK_SRC_FILTER = 128\nconst IPV6_MIN_MEMBERSHIPS = 31\nconst IPV6_MMTU = 1280\nconst IPV6_MULTICAST_HOPS = 10\nconst IPV6_MULTICAST_IF = 9\nconst IPV6_MULTICAST_LOOP = 11\nconst IPV6_PORTRANGE = 14\nconst IPV6_PORTRANGE_DEFAULT = 0\nconst IPV6_PORTRANGE_HIGH = 1\nconst IPV6_PORTRANGE_LOW = 2\nconst IPV6_RECVTCLASS = 35\nconst IPV6_RTHDR_LOOSE = 0\nconst IPV6_RTHDR_STRICT = 1\nconst IPV6_RTHDR_TYPE_0 = 0\nconst IPV6_SOCKOPT_RESERVED1 = 3\nconst IPV6_TCLASS = 36\nconst IPV6_UNICAST_HOPS = 4\nconst IPV6_V6ONLY = 27\nconst IPV6_VERSION = 96\nconst IPV6_VERSION_MASK = 240\n```\n\n----------------------------------------\n\nTITLE: Modifying and Unsetting Go Environment Variables\nDESCRIPTION: This snippet demonstrates how to modify Go environment variables using 'go env -w' and unset them using 'go env -u'. It also shows how these commands interact with OS environment variables.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_write.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# go env -w changes default setting\nenv root=\n[GOOS:windows] env root=c:\nenv GOPATH=\ngo env -w GOPATH=$root/non-exist/gopath\n! stderr .+\ngrep GOPATH=$root/non-exist/gopath $WORK/envdir/go/env\ngo env GOPATH\nstdout /non-exist/gopath\n\n# go env -w does not override OS environment, and warns about that\nenv GOPATH=$root/other\ngo env -w GOPATH=$root/non-exist/gopath2\nstderr 'warning: go env -w GOPATH=... does not override conflicting OS environment variable'\ngo env GOPATH\nstdout $root/other\n\n# but go env -w does do the update, and unsetting the env var exposes the change\nenv GOPATH=\ngo env GOPATH\nstdout $root/non-exist/gopath2\n\n# unsetting with go env -u does not warn about OS environment overrides,\n# nor does it warn about variables that haven't been set by go env -w.\nenv GOPATH=$root/other\ngo env -u GOPATH\n! stderr .+\ngo env -u GOPATH\n! stderr .+\n```\n\n----------------------------------------\n\nTITLE: Fetching Next Iteration in Parallel Benchmarks - Go\nDESCRIPTION: Documents the Next method on the testing.PB type in Go's testing package. This method is used inside a parallel benchmark to check whether to execute the next iteration, returning true while there are more iterations to run. A typical pattern involves looping while pb.Next() returns true, which ensures the correct execution count in the parallel operation. Proper use is crucial for accurate and reliable parallel benchmark metrics.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_65\n\nLANGUAGE: Go\nCODE:\n```\npkg testing, method (*PB) Next() bool\n```\n\n----------------------------------------\n\nTITLE: Defining Module Configuration with Replace and Exclude Directives - Go (go.mod)\nDESCRIPTION: This go.mod file sets up a Go module named example.com/printversion, requiring example.com/version at v1.0.0. It includes a replace directive to use a local module ../oops v0.0.0 for example.com/version and excludes v1.0.1 from being selected. This configuration ensures custom dependency resolution during builds and affects the results shown by debug.ReadBuildInfo.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_printversion_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/printversion\n\nrequire example.com/version v1.0.0\nreplace example.com/version v1.0.0 => ../oops v0.0.0\nexclude example.com/version v1.0.1\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Test Function in Go Test File - Go\nDESCRIPTION: This Go file defines a simple test function 'Test' within a package 'x', using the standard 'testing' package. It serves as the main test target for shell-based and module-based test discovery processes. Dependencies include the Go testing package and a valid Go module. No parameters are taken; running 'go test' will invoke this function, and its presence is necessary for validating test-related outputs.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_test.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage x\nimport \"testing\"\nfunc Test(t *testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Git Exit Script (Shell)\nDESCRIPTION: A simple shell script that forces git command to fail with exit code 1. Used for testing error handling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_git.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\nexit 1\n```\n\n----------------------------------------\n\nTITLE: Testing Go Workspace Sync with RC Versions\nDESCRIPTION: Demonstrates workspace synchronization behavior when adding a release candidate version module, showing version updates and toolchain handling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_toolchain.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# work sync with newer modules should update go 1.22.1 -> 1.24rc1 and drop toolchain\ngo work edit -use=./m1_24_rc0\ngo work sync\ncat go.work\ngrep '^go 1.24rc0$' go.work\n! grep toolchain go.work\n```\n\n----------------------------------------\n\nTITLE: Package 'a' with Import\nDESCRIPTION: Defines package 'a' that imports package 'b' from the same module, creating a dependency relationship.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_single_error.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\nimport \"example.com/b\"\n```\n\n----------------------------------------\n\nTITLE: Defining Empty Package in Go\nDESCRIPTION: This snippet defines an empty Go package named 'empty' used for testing purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_retract.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage empty\n```\n\n----------------------------------------\n\nTITLE: Windows-specific I/O Error Simulation Implementation\nDESCRIPTION: Platform-specific code for Windows that sends garbage data to the fuzzing coordinator. It parses handle values from an environment variable and writes invalid data to simulate communication errors.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_io_error.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage io_error\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"testing\"\n)\n\nfunc sendGarbageToCoordinator(tb testing.TB) {\n\tv := os.Getenv(\"GO_TEST_FUZZ_WORKER_HANDLES\")\n\tvar fuzzInFD, fuzzOutFD uintptr\n\tif _, err := fmt.Sscanf(v, \"%x,%x\", &fuzzInFD, &fuzzOutFD); err != nil {\n\t\ttb.Fatalf(\"parsing GO_TEST_FUZZ_WORKER_HANDLES: %v\", err)\n\t}\n\tf := os.NewFile(fuzzOutFD, \"fuzz_out\")\n\tif _, err := f.Write([]byte(\"!!\"))); err != nil {\n\t\ttb.Fatalf(\"writing fuzz_out: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Download Module\nDESCRIPTION: Command to download the rsc.io/quote module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_disabled.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo mod download rsc.io/quote\n```\n\n----------------------------------------\n\nTITLE: Module A Main Package\nDESCRIPTION: Main package implementation for module A importing and using module B\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_regression_hang.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"example.com/b\"\n\nfunc main() {\n\tb.B()\n}\n```\n\n----------------------------------------\n\nTITLE: Module Configuration\nDESCRIPTION: Go module definition file specifying the module name, Go version requirement, and dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_cmd_v1.0.0-newerself.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/cmd\n\ngo 1.16\n\nrequire example.com/cmd v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Expected Go Module File After Dependency Update\nDESCRIPTION: This go.mod.want file shows the expected state of the module file after running 'go get -u=patch ./...'. It includes an additional indirect dependency on 'example.net/b v0.1.1'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue48511.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/m\n\ngo 1.16\n\nreplace (\n\texample.net/a v0.1.0 => ./a\n\texample.net/b v0.1.0 => ./b\n\texample.net/b v0.1.1 => ./b\n\texample.net/m v0.1.0 => ./m1\n)\n\nrequire (\n\texample.net/a v0.1.0\n\texample.net/b v0.1.1 // indirect\n)\n```\n\n----------------------------------------\n\nTITLE: Testing version resolution for v1.2.0\nDESCRIPTION: Fetches v1.2.0 using a commit hash and verifies the version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo.txt#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngo get ...test@9f6f860\ngo list -m all\nstdout '^github.com/rsc/legacytest v1\\.2\\.0$'\n```\n\n----------------------------------------\n\nTITLE: Go Workspace Configuration File\nDESCRIPTION: Defines a Go workspace that includes two modules for testing. The configuration uses Go 1.21 and references modules in two subdirectories.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_verify_work.txt#2025-04-22_snippet_1\n\nLANGUAGE: plain text\nCODE:\n```\ngo 1.21\n\nuse (\n    ./a\n    ./b\n)\n```\n\n----------------------------------------\n\nTITLE: Attempting Method Definitions on C Types via CGo in Go\nDESCRIPTION: This Go code uses CGo to import a C type `T` (defined as `int`). It attempts to define methods `f` and `g` directly on `C.T` and `*C.T`, respectively. These definitions are expected to cause compilation errors as per CGo restrictions (issue #57926). The code also demonstrates a workaround by creating a Go type alias (`Alias = C.T`) and defining methods `h` and `i` on the alias and its pointer, which is permitted.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_badmethod_issue57926.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\n/*\ntypedef int T;\n*/\nimport \"C\"\n\nfunc (C.T) f() {}\nfunc (recv *C.T) g() {}\n\n// The check is more education than enforcement,\n// and is easily defeated using a type alias.\ntype Alias = C.T\nfunc (Alias) h() {}\nfunc (*Alias) i() {}\n```\n\n----------------------------------------\n\nTITLE: Testing Float Fuzzing in Go\nDESCRIPTION: This fuzz test function demonstrates Go's fuzzing capabilities with float inputs. It panics when the input is not 0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_crash.txt#2025-04-22_snippet_13\n\nLANGUAGE: Go\nCODE:\n```\nfunc FuzzFloat(f *testing.F) {\n\tf.Fuzz(func(t *testing.T, a float64) {\n\t\tif a != 0 {\n\t\t\tpanic(\"this input caused a crash!\")\n\t\t}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Mod File Annotations with go list\nDESCRIPTION: This Go command sequence tests the detection of direct vs. indirect module dependencies. It ensures that the `go list` command correctly reads the 'indirect' annotations from go.mod files. This is vital to verify module dependency accuracy.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_direct_work.txt#2025-04-22_snippet_0\n\nLANGUAGE: Golang\nCODE:\n```\ngo list -f '{{.Path}} {{.Indirect}}' -m all\nstdout 'example.com/a false'\nstdout 'example.com/b false'\nstdout 'rsc.io/sampler false'\nstdout 'golang.org/x/text true'\nstdout 'example.com/c true' # Uses the information in go.mod without checking imports.\n\n# Check that 'go list all' correctly populates \"indirect\" module annotation.\ngo list -f '{{.ImportPath}} {{with .Module}}{{.Indirect}}{{end}}' all\nstdout 'example.com/a false'\nstdout 'example.com/b false'\nstdout 'rsc.io/sampler false'\nstdout 'golang.org/x/text/language true'\nstdout 'example.com/c false'\n```\n\n----------------------------------------\n\nTITLE: Checking GOWORK Environment Variable in Go Project Root\nDESCRIPTION: This snippet checks the GOWORK environment variable in the Go project root directory, ensuring it points to the correct go.work file location.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_env.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo env GOWORK\nstdout '^'$GOPATH'[\\/]src[\\/]go.work$'\ngo env\nstdout '^(set )?GOWORK=''?'$GOPATH'[\\/]src[\\/]go.work''?$'\n```\n\n----------------------------------------\n\nTITLE: Testing Go Version Request with go@1.22.1\nDESCRIPTION: Tests how 'go get go@1.22.1' uses the exact version 1.22.1 and switches toolchains when GOTOOLCHAIN=auto is set.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_exec_toolchain.txt#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n# go get go@1.22.1 should use 1.22.1 exactly, not a later release.\nenv GOTOOLCHAIN=local\ncp go.mod.new go.mod\n! go get go@1.22.1\nstderr '^go: updating go.mod requires go >= 1.22.1 \\(running go 1.21; GOTOOLCHAIN=local\\)'\n\nenv GOTOOLCHAIN=auto\ncp go.mod.new go.mod\ngo get go@1.22.1\nstderr '^go: updating go.mod requires go >= 1.22.1; switching to go1.22.9$'\nstderr '^go: upgraded go 1.1 => 1.22.1$'\n! stderr '^go: added toolchain$'\n```\n\n----------------------------------------\n\nTITLE: Importing Text Package in Go Subpackage\nDESCRIPTION: This Go file, located in a subpackage, imports the 'golang.org/x/text/language' package. It's used to test module resolution and package importing in subpackages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_symlink.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage issue\n\nimport _ \"golang.org/x/text/language\"\n```\n\n----------------------------------------\n\nTITLE: Testing Build Info Availability in Go\nDESCRIPTION: This Go test file checks if build information is available for the test binary. It uses the debug.ReadBuildInfo() function to retrieve the build info and logs the main package version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_buildinfo.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage foo_test\n\nimport (\n        \"runtime/debug\"\n        \"testing\"\n)\n\nfunc TestBuildInfo(t *testing.T) {\n        info, ok := debug.ReadBuildInfo()\n        if !ok {\n                t.Fatal(\"no debug info\")\n        }\n        t.Log(info.Main.Version)\n}\n```\n\n----------------------------------------\n\nTITLE: Testing @latest Version Selection Preferring Compatible Versions\nDESCRIPTION: Tests that @latest prefers compatible versions (v1.x) over +incompatible versions (v2.x) when a go.mod file exists in the v1.x version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_prefer_compatible.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo list -m github.com/russross/blackfriday@latest\nstdout '^github.com/russross/blackfriday v1\\.'\n```\n\n----------------------------------------\n\nTITLE: Main Module Definition\nDESCRIPTION: Main go.mod file defining the module structure with dependencies and replace directives\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_lazy_upgrade_lazy.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule use\n\ngo 1.17\n\nrequire (\n\tdirect v0.0.0\n\texample.com/lazyupgrade v0.1.0\n)\n\nreplace (\n\tdirect => ./direct\n\texample.com/lazyupgrade v0.1.0 => ./lazyupgrade@v0.1.0\n\texample.com/lazyupgrade v0.1.1 => ./lazyupgrade@v0.1.1\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Git Environment Variables for Version Control\nDESCRIPTION: Defines Git environment variables to set author and committer information before initializing a repository.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/hello.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GIT_AUTHOR_NAME=bwk\nenv GIT_AUTHOR_EMAIL=bwk\nenv GIT_COMMITTER_NAME='Russ Cox'\nenv GIT_COMMITTER_EMAIL='rsc@golang.org'\n\ngit init\n```\n\n----------------------------------------\n\nTITLE: Go Package Implementation\nDESCRIPTION: Main package file that imports the required quote package\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_duplicates.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage use\n\nimport _ \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: Defining Golang Module in .mod File\nDESCRIPTION: This snippet defines the module name and Go version requirement in a .mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo123_v0.0.1.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule rsc.io/needgo123\ngo 1.23\n```\n\n----------------------------------------\n\nTITLE: Go Main Package with Nil Panic and Debug Directive\nDESCRIPTION: A Go main package that includes a debug directive to set randautoseed=0 and contains a main function that panics with nil, used to test different panic behaviors between Go versions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/godebug_default.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n//go:debug randautoseed=0\n\npackage main\n\nfunc main() {\n\tpanic(nil)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running Go Program\nDESCRIPTION: Shell commands to disable Go modules and run the hello world program\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_hello.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=off\n\n# hello world\ngo run hello.go\nstderr 'hello world'\n```\n\n----------------------------------------\n\nTITLE: Testing go list -m all with alternate file\nDESCRIPTION: Runs 'go list -m all' and checks that sums are added to the alternate go.sum file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/modfile_flag.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngo list -m -mod=mod all\ngrep '^rsc.io/quote v1.5.2/go.mod ' go.alt.sum\n! grep '^rsc.io/quote v1.5.2 ' go.alt.sum\n```\n\n----------------------------------------\n\nTITLE: Improving node handling in text/template/parse package\nDESCRIPTION: Updates to the text/template/parse package to add NodeType to DotNode and NilNode, and adds methods for copying and setting tree references. Also updates html/template.Error to include the parse.Node that caused the error.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_33\n\nLANGUAGE: go\nCODE:\n```\n// text/template/parse package updates\ntype DotNode struct {\n    NodeType // embedded\n    // other fields not shown\n}\n\ntype NilNode struct {\n    NodeType // embedded\n    // other fields not shown\n}\n\nmethod (*BranchNode) Copy() Node\nmethod (*IdentifierNode) SetTree(*Tree) *IdentifierNode\n\n// html/template package updates\ntype Error struct {\n    Node parse.Node\n    // other fields not shown\n}\n```\n\n----------------------------------------\n\nTITLE: Vendored Strings Package\nDESCRIPTION: Simple vendored package that provides a hello world message string.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_gopath_issue11409.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage strings\n\nvar Msg = \"hello, world\"\n```\n\n----------------------------------------\n\nTITLE: Testing Go File Inclusion/Exclusion Using go list - Shell Script\nDESCRIPTION: This bash-like shell script orchestrates a sequence of environment manipulations and go list invocations, asserting that files and imports included in the metadata reflect build constraints like OS targets, cgo enablement, and build tags. It depends on a working Go installation and the go command, and requires the current module defined by go.mod to be present. Key parameters include GOOS, GOARCH, CGO_ENABLED, and go list --tags. Inputs and outputs are the standard streams, and output is checked against regular expressions. Limitations: test relies on go list output formats, and expects a consistent Go command environment.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_constraints.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Check that files and their imports are not included in 'go list' output\n# when they are excluded by build constraints.\n\n# Linux and cgo files should be included when building in that configuration.\nenv GOOS=linux\nenv GOARCH=amd64\nenv CGO_ENABLED=1\ngo list -f '{{range .GoFiles}}{{.}} {{end}}'\nstdout '^cgotag.go empty.go suffix_linux.go tag.go $'\ngo list -f '{{range .CgoFiles}}{{.}} {{end}}'\nstdout '^cgoimport.go $'\ngo list -f '{{range .Imports}}{{.}} {{end}}'\nstdout '^C cgoimport cgotag suffix tag $'\n\n# Disabling cgo should exclude cgo files and their imports.\nenv CGO_ENABLED=0\ngo list -f '{{range .GoFiles}}{{.}} {{end}}'\nstdout 'empty.go suffix_linux.go tag.go'\ngo list -f '{{range .CgoFiles}}{{.}} {{end}}'\n! stdout .\ngo list -f '{{range .Imports}}{{.}} {{end}}'\nstdout '^suffix tag $'\n\n# Changing OS should exclude linux sources.\nenv GOOS=darwin\ngo list -f '{{range .GoFiles}}{{.}} {{end}}'\nstdout '^empty.go $'\ngo list -f '{{range .Imports}}{{.}} {{end}}'\nstdout '^$'\n\n# Enabling a tag should include files that require it.\ngo list -tags=extra -f '{{range .GoFiles}}{{.}} {{end}}'\nstdout '^empty.go extra.go $'\ngo list -tags=extra -f '{{range .Imports}}{{.}} {{end}}'\nstdout '^extra $'\n\n# Packages that require a tag should not be listed unless the tag is on.\n! go list ./tagonly\ngo list -tags=extra ./tagonly\nstdout m/tagonly\n\n```\n\n----------------------------------------\n\nTITLE: Testing Go Test Command with Output Directory and Coverage Flags\nDESCRIPTION: This snippet tests the 'go test' command's behavior with output directory and coverage-related flags. It verifies that the -outputdir flag works correctly and that coverage flags imply the -cover flag.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_flags.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo test -x -coverprofile=cover.out '-outputdir=' ./x\nstderr '-test.outputdir=[^ ]'\nexists ./cover.out\n! exists ./x/cover.out\n\ngo test -covermode=set ./x\nstdout '\\s+coverage:\\s+'\n\ngo test -coverpkg=encoding/binary ./x\nstdout '\\s+coverage:\\s+'\n\ngo test -coverprofile=cover.out ./x\nstdout '\\s+coverage:\\s+'\nexists ./cover.out\nrm ./cover.out\n```\n\n----------------------------------------\n\nTITLE: Timeout Test Implementation\nDESCRIPTION: A test function that implements an infinite loop to trigger a timeout condition while profiling is enabled. The test deliberately runs forever by sleeping in a continuous loop.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_write_profiles_on_timeout.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage timeouttest_test\n\nimport (\n\t\"testing\"\n\t\"time\"\n)\n\nfunc TestSleep(t *testing.T) {\n\tfor {\n\t\ttime.Sleep(1 * time.Second)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting PATH for Go Toolchain Test\nDESCRIPTION: These commands set the PATH environment variable to include the directory containing the fake Go toolchain. It's platform-specific, with a separate command for Plan 9.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_path.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n[!GOOS:plan9] env PATH=$WORK/bin\n[GOOS:plan9] env path=$WORK/bin\n```\n\n----------------------------------------\n\nTITLE: Normal TestMain Function Implementation in Go\nDESCRIPTION: This snippet demonstrates a basic implementation of the TestMain function in Go. It's a minimal example that doesn't include any specific test logic.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_main.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage standalone_main_normal_test\n\nimport \"testing\"\n\nfunc TestMain(t *testing.T) {\n}\n```\n\n----------------------------------------\n\nTITLE: Testing 'go list all' in GOPATH/src (GOPATH Mode) (Shell)\nDESCRIPTION: While in $GOPATH/src and with Go module mode disabled (GOPATH mode), this runs `go list all`. It asserts that the synthesized path for the current directory (`gopath/src`) is *not* listed in the output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_gofile_in_goroot.txt#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ngo list all\n! stdout gopath/src\n```\n\n----------------------------------------\n\nTITLE: Building Vendored Package in Go\nDESCRIPTION: This command builds a vendored package 'foo.com/internal/bar/a' using the go build tool.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_internal.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo build ./vendor/foo.com/internal/bar/a\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies in Module A in Go\nDESCRIPTION: This Go file for module A imports example.net/b as a blank import.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_boost.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\npackage a\n\nimport _ \"example.net/b\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving File Name of Top Stack Frame Using runtime.Caller in Go\nDESCRIPTION: Defines a function TopFile that returns the file name from the top (current) stack frame by calling runtime.Caller(0). This function depends on the Go standard library, specifically the runtime package, and takes no parameters. It outputs the full file path as a string, or an empty string if the information is unavailable. The accuracy and content of the returned file path can vary depending on compiler or build flags like -trimpath.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_stack_v1.0.1.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage stack\n\nimport \"runtime\"\n\nfunc TopFile() string {\n\t_, file, _, _ := runtime.Caller(0)\n\treturn file\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Module Metadata in .info JSON File\nDESCRIPTION: Contains metadata for the module in JSON format, specifying the version information as v1.0.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_nest_sub_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\": \"v1.0.0\"}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module with Missing Dependencies\nDESCRIPTION: A simple Go module that imports rsc.io/quote package to test module cache behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_missing_ziphash.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage use\n\nimport _ \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Interface with Duplicate Method\nDESCRIPTION: This Go file defines interfaces that lead to a duplicate method when embedded, causing a compilation error in Go 1.14+.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_goversion.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage bad114\n\ntype XY interface {\n\tX()\n\tY()\n}\n\ntype YZ interface {\n\tY()\n\tZ()\n}\n\ntype XYZ interface {\n\tXY\n\tYZ\n}\n```\n\n----------------------------------------\n\nTITLE: Testing GONOPROXY Bypass in Go Module Fetching\nDESCRIPTION: Verifies that GONOPROXY bypasses the proxy for specified modules. Attempts to get a non-existent package rsc.io/fortune to trigger a git ls-remote command.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gonoproxy.txt#2025-04-22_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n[!net:rsc.io] skip\n[!git] skip\nenv GOPRIVATE=none\nenv GONOPROXY='*/fortune'\n! go get rsc.io/fortune # does not exist in real world, only on test proxy\nstderr 'git ls-remote'\n```\n\n----------------------------------------\n\nTITLE: Testing Toolchain Switching with -C Flag\nDESCRIPTION: Tests that the -C flag for changing directories is handled correctly during toolchain switching.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_exec_toolchain.txt#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n# The -C flag should not happen more than once due to switching.\nmkdir dir dir/dir\ncp go.mod.new go.mod\ncp go.mod.new dir/go.mod\ncp go.mod.new dir/dir/go.mod\ncp p.go dir/p.go\ncp p.go dir/dir/p.go\ngo get -C dir rsc.io/needgo124\nstderr '^go: rsc.io/needgo124@v0.0.1 requires go >= 1.24; switching to go1.24rc1$'\nstderr '^go: upgraded go 1.1 => 1.24$'\n! stderr '^go: added toolchain1$'\ncmp go.mod.new go.mod\ncmp go.mod.new dir/dir/go.mod\ngrep 'go 1.24$' dir/go.mod\n```\n\n----------------------------------------\n\nTITLE: Defining Go Packages - Go Source Files\nDESCRIPTION: These Go source files define simple packages for `foo`, `baz`, and `bar`. They include package declarations with packages named accordingly and import fake dependencies from `baz` and `foo`. This demonstrates basic package setup for the Go toolchain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_gopath_order.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage foo\n```\n\nLANGUAGE: go\nCODE:\n```\npackage baz\n```\n\nLANGUAGE: go\nCODE:\n```\npackage bar\nimport _ \"baz\"\nimport _ \"foo\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Environment Variables\nDESCRIPTION: This snippet sets environment variables to configure the Go module system, such as enabling module mode, setting the proxy to direct, and turning off the Go checksum database. These settings influence how Go fetches and verifies dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_getx.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GO111MODULE=on\nenv GOPROXY=direct\nenv GOSUMDB=off\n```\n\n----------------------------------------\n\nTITLE: Module B1 Configuration\nDESCRIPTION: Go.mod file for the first replacement of module 'b' (v0.1.0) which requires module 'd' at version v0.1.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_unused.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/b\nrequire example.com/d v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Commit with v2 Module Structure in Git\nDESCRIPTION: Commits the initial Go files to set up a v2 module structure with both package v2sub and v2sub/v2. Tags this commit as v2.0.0 and renames the default branch to main.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/v2sub.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nat 2022-02-22T15:53:33-05:00\ngit add v2sub.go v2\ngit commit -m 'all: add package v2sub and v2sub/v2'\ngit branch -m main\ngit tag v2.0.0\n```\n\n----------------------------------------\n\nTITLE: Command A Implementation\nDESCRIPTION: Main package implementing command 'a' that prints version-specific output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_cmd_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() { fmt.Println(\"a@v1.0.0\") }\n```\n\n----------------------------------------\n\nTITLE: Testing 'go list std' in GOROOT/src (Module Mode) (Shell)\nDESCRIPTION: While in $GOROOT/src and with Go module mode enabled, this executes `go list std`. It checks that standard library packages like `fmt` are correctly listed, confirming the standard library is discoverable.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_gofile_in_goroot.txt#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngo list std\nstdout -count=1 '^.+$'\nstdout '^fmt$'\n```\n\n----------------------------------------\n\nTITLE: Environment Setup and Basic Version Tests\nDESCRIPTION: Sets up test environment variables and verifies basic toolchain version selection with different GOTOOLCHAIN settings (auto, path, explicit versions)\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_local.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv TESTGO_VERSION=go1.500\nenv TESTGO_VERSION_SWITCH=switch\n\nenv GOTOOLCHAIN=auto\ngo version\nstdout go1.500\n```\n\n----------------------------------------\n\nTITLE: Go Workspace Configuration\nDESCRIPTION: Defines a Go workspace configuration file that specifies two module paths to be included in the workspace.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_install_submodule.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\n\nuse (\n    ./m\n    ./m/sub\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Socket Option Constants for NetBSD ARM64\nDESCRIPTION: Defines socket option constants used for socket configuration in the syscall package for NetBSD ARM64 with CGO support. These constants are used when setting or getting socket options with functions like setsockopt() and getsockopt().\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_63\n\nLANGUAGE: Go\nCODE:\n```\nconst SO_DEBUG = 1\nconst SO_DONTROUTE = 16\nconst SO_ERROR = 4103\nconst SO_KEEPALIVE = 8\nconst SO_LINGER = 128\nconst SOL_SOCKET = 65535\nconst SOMAXCONN = 128\nconst SO_NOHEADER = 4106\nconst SO_NOSIGPIPE = 2048\nconst SO_OOBINLINE = 256\nconst SO_OVERFLOWED = 4105\nconst SO_RCVBUF = 4098\nconst SO_RCVLOWAT = 4100\nconst SO_RCVTIMEO = 4108\nconst SO_REUSEADDR = 4\nconst SO_REUSEPORT = 512\nconst SO_SNDBUF = 4097\nconst SO_SNDLOWAT = 4099\nconst SO_SNDTIMEO = 4107\nconst SO_TIMESTAMP = 8192\nconst SO_TYPE = 4104\nconst SO_USELOOPBACK = 64\n```\n\n----------------------------------------\n\nTITLE: Testing Untagged Commit Resolution to +incompatible Pseudo-version\nDESCRIPTION: Tests that requesting an untagged commit still produces an appropriate +incompatible pseudo-version when needed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_prefer_compatible.txt#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngo list -m github.com/rsc/legacytest@7303f7796364\nstdout '^github.com/rsc/legacytest v2\\.0\\.1-0\\.20180717164253-7303f7796364\\+incompatible$'\n```\n\n----------------------------------------\n\nTITLE: Indirect Dependency Module Definition\nDESCRIPTION: The go.mod file for the old-indirect module, which requires an older version (v1.5.1) of rsc.io/quote. This creates the dependency version conflict being tested.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_downgrade_ambiguous.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule old-indirect\n\ngo 1.16\n\nrequire rsc.io/quote v1.5.1\n```\n\n----------------------------------------\n\nTITLE: Module A Definition v0.1.0\nDESCRIPTION: Module a configuration and implementation requiring module b v0.1.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_artifact.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/a\n\ngo 1.16\n\nrequire example.com/b v0.1.0\n```\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\nimport _ \"example.com/b\"\n```\n\n----------------------------------------\n\nTITLE: Testing 'latest' version resolution with +incompatible tags\nDESCRIPTION: Removes the existing requirement and fetches the latest version, expecting v2.0.0+incompatible.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo mod edit -droprequire github.com/rsc/legacytest\ngo get github.com/rsc/legacytest@latest\ngo list\ngo list -m all\nstdout '^github.com/rsc/legacytest v2\\.0\\.0\\+incompatible$'\n```\n\n----------------------------------------\n\nTITLE: Testing Basic Go Module Structure\nDESCRIPTION: Main module file importing package a, demonstrating basic module structure.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_version.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage m\n\nimport _ \"example.net/a\"\n```\n\n----------------------------------------\n\nTITLE: Asserting Expected Error Output from `go list` using Regex\nDESCRIPTION: This line specifies the expected standard output (stdout) from the preceding `go list` command using a regular expression. It asserts that the command should output an error message indicating that package `d` cannot be found, originating from line 2, column 8 of the `d_test.go` file. The `[/\\\\]` part matches either a forward slash or a backslash for path separators.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_test_e.txt#2025-04-22_snippet_1\n\nLANGUAGE: regex\nCODE:\n```\nstdout '^p[/\\\\]d_test.go:2:8: cannot find package \"d\" in any of:'\n```\n\n----------------------------------------\n\nTITLE: Testing GOMODCACHE Impact on Vendored Files in Go\nDESCRIPTION: A bash script that tests whether the GOMODCACHE environment variable affects checksums embedded with vendored files. It builds a program twice - once with the default GOMODCACHE and once with a custom location - and compares the embedded module information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gomodcache_vendor.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# This test verifies that GOMODCACHE does not affect whether checksums are embedded\n# with vendored files.\n# See issue #46400\n[short] skip 'builds and links a binary twice'\ngo mod tidy\ngo mod vendor\n\ngo build -mod=vendor\ngo version -m example$GOEXE\ncp stdout version-m.txt\n\nenv GOMODCACHE=$WORK${/}modcache\ngo build -mod=vendor\ngo version -m example$GOEXE\ncmp stdout version-m.txt\n```\n\n----------------------------------------\n\nTITLE: Testing Loading Error in Test File (Go)\nDESCRIPTION: This snippet tests a loading error in a test file. It checks the JSON output for specific setup failure messages and package information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_build.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n! go test -json -o=$devnull ./loaderror\nstdout '\"ImportPath\":\"x\",\"Action\":\"build-output\",\"Output\":\"# m/loaderror\\\\n\"'\nstdout '\"ImportPath\":\"x\",\"Action\":\"build-output\",\"Output\":\".*package x is not in std.*\"'\nstdout '\"ImportPath\":\"x\",\"Action\":\"build-fail\"'\nstdout '\"Action\":\"start\",\"Package\":\"m/loaderror\"'\nstdout '\"Action\":\"output\",\"Package\":\"m/loaderror\",\"Output\":\"FAIL\\\\tm/loaderror \\[setup failed\\]\\\\n\"'\nstdout '\"Action\":\"fail\",\"Package\":\"m/loaderror\",\"Elapsed\":.*,\"FailedBuild\":\"x\"'\n! stderr '.'\n```\n\n----------------------------------------\n\nTITLE: Setting Test Environment Variables for Go Version Testing\nDESCRIPTION: Sets environment variables to control the Go version used for testing and to enable version switching behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_modcmds.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv TESTGO_VERSION=go1.21.0\nenv TESTGO_VERSION_SWITCH=switch\n```\n\n----------------------------------------\n\nTITLE: Windows Batch Script for Test GCC Compiler\nDESCRIPTION: A Windows batch script that simulates the gcc compiler by writing 'ok' to a log file. This is placed in a directory with spaces to test path handling on Windows.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_path_space.txt#2025-04-22_snippet_4\n\nLANGUAGE: bat\nCODE:\n```\necho ok >%WORK%\\log.txt\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Flag with modcacherw\nDESCRIPTION: Tests error handling when an invalid -cake flag is provided alongside the valid -modcacherw flag during package installation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_modcacherw_issue64282.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n! go install -cake=delicious -modcacherw example.com/printversion@v0.1.0\nstderr '^flag provided but not defined: -cake$'\ncp $WORK/extraneous.txt $GOPATH/pkg/mod/example.com/printversion@v0.1.0/extraneous_file.go\ngo clean -modcache\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module declaration file that defines the module name as rsc.io/quote.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.3.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: Defining C Function for Syso2 Generation\nDESCRIPTION: Defines a C function g() for generating a syso file in the syso2 package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/link_syso_deps.txt#2025-04-22_snippet_5\n\nLANGUAGE: C\nCODE:\n```\n//go:build ignore\n\nvoid g() {}\n```\n\n----------------------------------------\n\nTITLE: Defining Filesystem and Networking Constants in Go for Darwin ARM64\nDESCRIPTION: This snippet defines various constants related to filesystem limits and network routing operations for Darwin ARM64. These are used in system calls and network programming tasks.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_163\n\nLANGUAGE: Go\nCODE:\n```\nconst NAME_MAX = 255\nconst NET_RT_DUMP = 1\nconst NET_RT_DUMP2 = 7\nconst NET_RT_FLAGS = 2\nconst NET_RT_IFLIST = 3\nconst NET_RT_IFLIST2 = 6\nconst NET_RT_MAXID = 10\nconst NET_RT_STAT = 4\nconst NET_RT_TRASH = 5\n```\n\n----------------------------------------\n\nTITLE: go.work File with Repeated Path\nDESCRIPTION: Contents of go.work.repeated.txt file, demonstrating a repeated 'use' directive for the 'foo' module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_errors_pos.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n\n\nuse foo\nuse foo\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition for Benchmark Fatal Test\nDESCRIPTION: A simple Go module definition file that specifies the module name as 'benchfatal' and requires Go 1.16.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_benchmark_fatal.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule benchfatal\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Implementing Quote Functions in Go\nDESCRIPTION: Core implementation of the quote package providing four functions: Hello(), Glass(), Go(), and Opt(). Each function returns a specific quotation. The package depends on rsc.io/sampler for the Hello functionality.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.5.1.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage quote\n\nimport \"rsc.io/sampler\"\n\nfunc Hello() string {\n\treturn sampler.Hello()\n}\n\nfunc Glass() string {\n\treturn \"I can eat glass and it doesn't hurt me.\"\n}\n\nfunc Go() string {\n\treturn \"Don't communicate by sharing memory, share memory by communicating.\"\n}\n\nfunc Opt() string {\n\treturn \"If a program is too slow, it must have a loop.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Module A Source File\nDESCRIPTION: A simple Go source file for module 'a' that imports module 'b'. This establishes the dependency relationship tested in the script.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_main_module_replaced.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\nimport _ \"example.com/b\"\n```\n\n----------------------------------------\n\nTITLE: Testing GOMODCACHE with Multiple GOPATH Elements in Go\nDESCRIPTION: This snippet verifies that when GOMODCACHE isn't set and GOPATH has multiple elements, only the first path is used for GOMODCACHE.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gomodcache.txt#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nenv GOMODCACHE=\nenv GOPATH=$WORK/first/path${:}$WORK/this/is/ignored\ngo env GOMODCACHE\nstdout $WORK[/\\\\]first[/\\\\]path[/\\\\]pkg[/\\\\]mod\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Gofmt Binary Script\nDESCRIPTION: Shell script that simulates the 'gofmt' command for testing purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-ppc64.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: HTML Output with Generated Doc Links\nDESCRIPTION: HTML output showing the converted markdown with proper documentation links to Go package references\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/linklist2.txt#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p>Did you know?\n<ul>\n<li><p><a href=\"https://pkg.go.dev/testing#T\">testing.T</a> is one doc link.\n<li><p>So is <a href=\"https://pkg.go.dev/testing#M\">testing.M</a>.\n<li><p>So is <a href=\"https://pkg.go.dev/testing#B\">testing.B</a>.\nThis is the same list paragraph.\n<p>There is <a href=\"https://pkg.go.dev/testing#PB\">testing.PB</a> in this list item, too!\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Simple module definition for the test package named 'm'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_flag.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n```\n\n----------------------------------------\n\nTITLE: GOROOT Directory Validation Program in Go\nDESCRIPTION: A Go program that validates if the GOROOT environment variable points to the expected directory. It executes the 'go env GOROOT' command and compares the output with an expected path, handling symlink resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goroot_executable_trimpath.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\t\"strings\"\n)\n\nfunc main() {\n\texe := os.Args[1]\n\twant := os.Args[2]\n\tcmd := exec.Command(exe, \"env\", \"GOROOT\")\n\tout, err := cmd.CombinedOutput()\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"%s env GOROOT: %v, %s\\n\", exe, err, out)\n\t\tos.Exit(1)\n\t}\n\tgoroot, err := filepath.EvalSymlinks(strings.TrimSpace(string(out)))\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n\twant, err = filepath.EvalSymlinks(want)\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n\tif !strings.EqualFold(goroot, want) {\n\t\tfmt.Fprintf(os.Stderr, \"go env GOROOT:\\nhave %s\\nwant %s\\n\", goroot, want)\n\t\tos.Exit(1)\n\t}\n\tfmt.Fprintf(os.Stderr, \"go env GOROOT: %s\\n\", goroot)\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Go Module in go.mod\nDESCRIPTION: Defines the module name for the Go project. This is essential for Go's module system to identify and manage dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_indirect_v1.1.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule patch.example.com/indirect\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Go Toolchain Testing\nDESCRIPTION: Sets up environment variables for testing Go toolchain version selection. TESTGO_VERSION specifies the base Go version and TESTGO_VERSION_SWITCH enables toolchain switching functionality.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_exec_toolchain.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv TESTGO_VERSION=go1.21\nenv TESTGO_VERSION_SWITCH=switch\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module and Retracting Incompatible Version (Go Module)\nDESCRIPTION: This `go.mod` file defines the module `example.com/retract/incompatible`, specifies Go version `1.16`, and uses the `retract` directive to withdraw version `v2.0.0+incompatible` from use. This represents the module file content for the `v1.0.0` release.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_incompatible_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: gomod\nCODE:\n```\nmodule example.com/retract/incompatible\n\ngo 1.16\n\nretract v2.0.0+incompatible\n```\n\n----------------------------------------\n\nTITLE: Go Workspace Recursive Configuration\nDESCRIPTION: Recursive go.work configuration showing expanded module paths after using the -r flag with foo module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\n\nuse (\n\t./foo\n\t./foo/bar/baz\n)\n```\n\n----------------------------------------\n\nTITLE: Executing `go list` with Unreadable Directory (Shell)\nDESCRIPTION: This snippet tests the behavior of `go list ./...` when a directory (`_data`) is unreadable. First, it changes the permissions of the `_data` directory to 000 (no read, write, or execute permissions) using `chmod 0 _data`. Then, it runs `go list ./...`. The test is designed to be skipped under certain conditions: when run as root (`[root] skip`), on Windows (`[GOOS:windows] skip`), or on Plan 9 (`[GOOS:plan9] skip`). The comment `# go list should work with unreadable _data directory.` clarifies the purpose, and `! stdout _data` indicates the expected standard output should *not* contain references related to the unreadable `_data` directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_perm.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n# skip in conditions where chmod 0 may not work.\n# plan9 should be fine, but copied from list_perm.txt unchanged.\n[root] skip\n[GOOS:windows] skip\n[GOOS:plan9] skip\n\n# go list should work with unreadable _data directory.\nchmod 0 _data\ngo list ./...\n! stdout _data\n```\n\n----------------------------------------\n\nTITLE: Main Go Program Importing Local Dependency (Go)\nDESCRIPTION: This snippet defines the content of the `a/a.go` file. It contains the `main` package and `main` function, serving as the entry point for the executable built in the test. It imports a package `a/dep` from the same module and calls the function `dep.D()`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_command_line_arguments.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n-- a/a.go --\npackage main\n\nimport \"a/dep\"\n\nfunc main() {\n    dep.D()\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Module Compatibility with '@' Character in Paths\nDESCRIPTION: Tests handling of the '@' character in file system paths and package paths. Verifies that '@' is allowed in directory names when accessed via file system paths but not in package paths.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_fs_patterns.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# File system paths and patterns should allow the '@' character.\ncd ../@at\ngo list $PWD\nstdout '^at$'\ngo list $PWD/...\nstdout '^at$'\n\n# The '@' character is not allowed in directory paths that are part of\n# a package path.\ncd ../badat/bad@\n! go list .\nstderr 'current directory outside main module or its selected dependencies'\n! go list $PWD\nstderr 'current directory outside main module or its selected dependencies'\n! go list $PWD/...\nstderr 'current directory outside main module or its selected dependencies'\n```\n\n----------------------------------------\n\nTITLE: Writing Go Test with Package Import\nDESCRIPTION: This snippet demonstrates writing a Go test file with a package import for testing purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_of_test_dep.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\nimport (\n\t\"testing\"\n\n\t_ \"example.com/b\"\n)\n\nfunc TestUsingB(t *testing.T) {\n\t// …\n}\n```\n\n----------------------------------------\n\nTITLE: Main Package with Import Statements\nDESCRIPTION: The main package file showing the import statements that trigger the tested behavior. It imports rsc.io/quote/v3 instead of the older version specified in go.mod.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_downgrade_ambiguous.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage use\n\nimport (\n\t_ \"old-indirect/empty\"\n\n\t_ \"rsc.io/quote/v3\"\n)\n```\n\n----------------------------------------\n\nTITLE: Minimal GOCACHEPROG Implementation\nDESCRIPTION: This Go program implements a basic GOCACHEPROG that responds to the 'close' command. It encodes known commands to stdout and decodes an empty response from stdin.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cacheprog_issue70848.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n// This is a minimal GOCACHEPROG program that doesn't respond to close.\npackage main\n\nimport (\n    \"encoding/json\"\n    \"os\"\n)\n\nfunc main() {\n    json.NewEncoder(os.Stdout).Encode(map[string][]string{\"KnownCommands\": {\"close\"}})\n    var res struct{}\n    json.NewDecoder(os.Stdin).Decode(&res)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Go Package Source File\nDESCRIPTION: A minimal Go source file defining a package 'mypkg' without any functions or types. Used as part of the staleness detection test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_rebuild_removed.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage mypkg\n```\n\n----------------------------------------\n\nTITLE: Main Module Configuration\nDESCRIPTION: Primary go.mod file defining the main module 'm' with its dependencies and replace directives\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule m\ngo 1.21\n\nrequire (\n\texample.com/a v1.0.0\n\texample.com/b v0.9.0\n)\n\nreplace example.com/a v1.0.0 => ./a100\nreplace example.com/a v1.0.1 => ./a101\nreplace example.com/a v1.0.2 => ./a102\nreplace example.com/b v1.0.1 => ./b101\nreplace example.com/b v1.0.2 => ./b102\nreplace example.com/b v1.0.0 => ./b100\nreplace example.com/b v0.9.0 => ./b100\n```\n\n----------------------------------------\n\nTITLE: Adding Iteration Functions to iter Package\nDESCRIPTION: This snippet adds new functions and types to the iter package for sequence iteration, including Pull, Pull2, Seq, and Seq2.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.23.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nfunc Pull[$0 interface{}](Seq[$0]) (func() ($0, bool), func())\nfunc Pull2[$0 interface{}, $1 interface{}](Seq2[$0, $1]) (func() ($0, $1, bool), func())\ntype Seq[$0 interface{}] func(func($0) bool)\ntype Seq2[$0 interface{}, $1 interface{}] func(func($0, $1) bool)\n```\n\n----------------------------------------\n\nTITLE: Dependency Test File\nDESCRIPTION: A test file for the 'dep' package that imports a test dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version_missing.txt#2025-04-22_snippet_13\n\nLANGUAGE: Go\nCODE:\n```\npackage dep_test\n\nimport _ \"example.com/testdep\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading Main Module and Re-vendoring\nDESCRIPTION: This snippet demonstrates upgrading the main module to Go 1.17, re-vendoring, and how this affects the build process for dependent modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_goversion.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo mod edit -go=1.17\ngo mod vendor\n\ngrep '^## explicit; go 1.17$' vendor/modules.txt\ngo build example.net/need117\n\ngrep '^## explicit; go 1.13$' vendor/modules.txt\n! go build example.net/bad114\nstderr '^vendor[/\\\\]example\\.net[/\\\\]bad114[/\\\\]bad114.go:15:2: duplicate method .?Y.?( .*)?$'\n```\n\n----------------------------------------\n\nTITLE: Defining x2 as a Module Without Dependencies - mod\nDESCRIPTION: This go.mod file establishes x as a module (version v0.2.0, via replacement), but without any required dependencies. This contrasts with x1 and checks Go's behavior when modules of the same name are at different versions and have different dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect.txt#2025-04-22_snippet_10\n\nLANGUAGE: mod\nCODE:\n```\nmodule x\ngo1.13\n```\n\n----------------------------------------\n\nTITLE: Package Function Definition in pkg1\nDESCRIPTION: Defines a simple function 'DoSomething' in package 'pkg1' that returns a boolean value. No external dependencies are required. It serves as a trivial example function for test coverage.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_nocoverpkg.txt#2025-04-22_snippet_3\n\nLANGUAGE: Golang\nCODE:\n```\n-- pkg1/file.go --\npackage pkg1\n\nfunc DoSomething() bool {\n\treturn true\n}\n```\n\n----------------------------------------\n\nTITLE: Runtime metrics types in runtime/metrics package\nDESCRIPTION: Type definitions for working with runtime metrics. Includes Description for metric metadata, Value for storing metric values, Float64Histogram for histogram data, Sample for collecting named metric values, and ValueKind for indicating metric value types.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype Description struct\ntype Description struct, Cumulative bool\ntype Description struct, Description string\ntype Description struct, Kind ValueKind\ntype Description struct, Name string\ntype Float64Histogram struct\ntype Float64Histogram struct, Buckets []float64\ntype Float64Histogram struct, Counts []uint64\ntype Sample struct\ntype Sample struct, Name string\ntype Sample struct, Value Value\ntype Value struct\ntype ValueKind int\n```\n\n----------------------------------------\n\nTITLE: Module A v1.0.1 Configuration\nDESCRIPTION: Go module configuration for example.com/a v1.0.1 with a dependency note\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// this module is technically invalid, since the dep example.com/b has a newer go line than this module,\n// but we should still be able to handle it.\nmodule example.com/a\ngo 1.22\n\nrequire example.com/b v1.0.1\n```\n\n----------------------------------------\n\nTITLE: Implementing Language Preference Detection in Go\nDESCRIPTION: DefaultUserPrefs function that determines user language preferences by checking environment variables LC_ALL, LC_MESSAGES, and LANG in order of priority.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.99.99.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc DefaultUserPrefs() []language.Tag {\n    var prefs []language.Tag\n    for _, k := range []string{\"LC_ALL\", \"LC_MESSAGES\", \"LANG\"} {\n        if env := os.Getenv(k); env != \"\" {\n            prefs = append(prefs, language.Make(env))\n        }\n    }\n    return prefs\n}\n```\n\n----------------------------------------\n\nTITLE: Go Test File with Sample Tests and Example\nDESCRIPTION: This Go file contains sample test functions and an example. It includes two test functions (Test1 and Test2) and an example function (ExampleTest1). Test2 includes a subtest.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_skip.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage skip_test\n\nimport \"testing\"\n\nfunc Test1(t *testing.T) {\n}\n\nfunc Test2(t *testing.T) {\n\tt.Run(\"3\", func(t *testing.T) {})\n}\n\nfunc ExampleTest1() {\n\t// Output:\n}\n```\n\n----------------------------------------\n\nTITLE: Valid Go Package Declaration\nDESCRIPTION: This file contains a valid Go package declaration. It defines a package named 'mypkg' without any additional content.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/pattern_syntax_error.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage mypkg\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum TLS Version using tls10server GODEBUG Setting (Go 1.22)\nDESCRIPTION: Introduced in Go 1.22, this setting controls the default minimum TLS version supported by crypto/tls clients and servers. Go 1.22 changed the default minimum to TLS 1.2. Setting tls10server=1 reverts the default back to TLS 1.0. Set via GODEBUG environment variable (e.g., GODEBUG=tls10server=1).\nSOURCE: https://github.com/golang/go/blob/master/doc/godebug.md#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\ntls10server\n```\n\n----------------------------------------\n\nTITLE: Defining a Go Module (Go)\nDESCRIPTION: This snippet defines a simple Go module named 'm'. It serves as the root module file (`go.mod`) for the project structure used in the `go list` tests. This declaration is necessary for Go tools to recognize the directory as a Go module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_perm.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n-- go.mod --\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Storing Go Module Version Information - JSON\nDESCRIPTION: This snippet provides version metadata for the Go module in JSON format, commonly used by Go tools internally. The object contains a single 'Version' key set to 'v1.0.0', indicating the version associated with the module. This is an auxiliary file to the module definition, not typically written by hand but essential for reproducible builds. It does not interact directly with Go code but is vital for dependency tracking.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_nest_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\\"Version\\\": \\\"v1.0.0\\\"}\n```\n\n----------------------------------------\n\nTITLE: File System-backed HTTP Utilities - net/http - Go\nDESCRIPTION: Functions FileServerFS, NewFileTransportFS, and ServeFileFS in net/http add support for serving and transporting files via abstract file systems (fs.FS). These enable HTTP-based operations directly over fs.FS implementations, for both server (Handler) and client (RoundTripper) cases. Each function accepts an fs.FS and other relevant parameters.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_22\n\nLANGUAGE: Go\nCODE:\n```\nfunc FileServerFS(fs.FS) Handler\nfunc NewFileTransportFS(fs.FS) RoundTripper\nfunc ServeFileFS(ResponseWriter, *Request, fs.FS, string)\n```\n\n----------------------------------------\n\nTITLE: Building Go Test with Coverage to Non-Existent Directory (Shell)\nDESCRIPTION: This shell command compiles the 'coverdep' Go test package into an executable named 'coverdep' within the $WORK directory, enabling code coverage. It attempts to write the coverage profile to a non-existent directory ($WORK/no/such/dir/), specifically to test Go's behavior related to issue 24588. Finally, it executes the compiled test binary using the 'exists -exec' command (presumably part of a test harness).\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_dash_c.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Test for issue 24588\n\ngo test -c -o $WORK/coverdep -coverprofile=$WORK/no/such/dir/cover.out coverdep\nexists -exec $WORK/coverdep\n```\n\n----------------------------------------\n\nTITLE: FreeBSD ARM with CGO Constants and Functions\nDESCRIPTION: System constants and function prototypes for FreeBSD ARM with CGO enabled, including socket address family limits, IO controls, system calls, and capabilities management functions.\nSOURCE: https://github.com/golang/go/blob/master/api/except.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nconst AF_MAX = 38\nconst BIOCGRTIMEOUT = 1074545262\nconst BIOCSRTIMEOUT = 2148287085\nconst ELAST = 94\nconst ImplementsGetwd = false\nconst O_CLOEXEC = 0\nconst SIOCAIFADDR = 2151967019\nconst SIOCGIFSTATUS = 3274991931\nconst SIOCSIFPHYADDR = 2151967046\nconst SYS_CAP_FCNTLS_GET = 537\nconst SYS_CAP_FCNTLS_LIMIT = 536\nconst SYS_CAP_IOCTLS_GET = 535\nconst SYS_CAP_IOCTLS_LIMIT = 534\nconst SYS_CAP_RIGHTS_GET = 515\nconst SYS_CAP_RIGHTS_LIMIT = 533\nconst SizeofBpfHdr = 24\nconst SizeofIfData = 88\nconst SizeofIfMsghdr = 104\nconst SizeofSockaddrDatalink = 56\nconst SizeofSockaddrUnix = 108\nconst TIOCTIMESTAMP = 1074558041\n\nfunc Fchflags(string, int) error\nfunc Mknod(string, uint32, int) error\n```\n\n----------------------------------------\n\nTITLE: Code Generation Test in Go\nDESCRIPTION: This Go file contains a code generation directive. It uses the //go:generate comment to specify that the 'env' command should be run during code generation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/generate_env.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\n//go:generate env\n```\n\n----------------------------------------\n\nTITLE: Implementing a Minimal Go Package\nDESCRIPTION: A simple Go package implementation with an empty exported function F().\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo122_v0.0.1.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nfunc F() {}\n```\n\n----------------------------------------\n\nTITLE: Providing Toolchain Version Information in JSON Format\nDESCRIPTION: The .info file contains JSON metadata about the toolchain version, specifying it as v0.0.1-go1.999testmod.solaris-amd64.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.solaris-amd64.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.999testmod.solaris-amd64\"}\n```\n\n----------------------------------------\n\nTITLE: Defining System Call Numbers for OpenBSD in Go\nDESCRIPTION: System call numbers for OpenBSD platform. These constants define the system call numbers used to invoke various system services through the syscall interface.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_40\n\nLANGUAGE: Go\nCODE:\n```\nconst SYS_CLOCK_GETRES = 89\nconst SYS_CLOCK_GETTIME = 87\nconst SYS_CLOCK_SETTIME = 88\nconst SYS_FHSTATFS = 65\nconst SYS_FSTAT = 53\nconst SYS_FSTATAT = 42\nconst SYS_FSTATFS = 64\nconst SYS_FUTIMENS = 85\nconst SYS_FUTIMES = 77\nconst SYS_GETDENTS = 99\nconst SYS_GETDENTS ideal-int\nconst SYS_GETFSSTAT = 62\nconst SYS_GETITIMER = 70\nconst SYS_GETRUSAGE = 19\nconst SYS_GETTIMEOFDAY = 67\nconst SYS_KEVENT = 72\nconst SYS_LSTAT = 40\nconst SYS_NANOSLEEP = 91\nconst SYS_PPOLL = 109\nconst SYS_PPOLL ideal-int\nconst SYS_PSELECT = 110\nconst SYS_PSELECT ideal-int\nconst SYS_SELECT = 71\nconst SYS_SETITIMER = 69\nconst SYS_SETTIMEOFDAY = 68\nconst SYS_STAT = 38\nconst SYS_STATFS = 63\nconst SYS_UTIMENSAT = 84\nconst SYS_UTIMES = 76\nconst SYS_UTRACE = 209\nconst SYS_UTRACE ideal-int\nconst SYS_WAIT4 = 11\nconst SYS___THRSLEEP = 94\n```\n\n----------------------------------------\n\nTITLE: Initializing a Go Package with Ambiguity Comments - Go\nDESCRIPTION: Defines a Go package named \"pkg\" with a comment highlighting that this package exists in both a parent module and a nested module, both at version v0.1.0. The code is not functionally complete but is intended to document ambiguous provisioning of packages for module resolution tests. The key feature is the ambiguity note, which is crucial for module-related testing and documentation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_ambiguous_nested_v0.1.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n// Package pkg exists in both example.net/ambiguous v0.1.0\\n// and example.net/ambiguous/nested v0.1.0\\npackage pkg\n```\n\n----------------------------------------\n\nTITLE: Testing Go Get Command with Dot-Go Suffix Packages\nDESCRIPTION: This snippet tests the 'go get' command with package names ending in '.go', ensuring it can download and install these packages with or without version specifications.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_trailing_slash.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngo get example.com/dotgo.go\ngo get example.com/dotgo.go/\ngo get example.com/dotgo.go@v1.0.0\ngo get example.com/dotgo.go/@v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Version Information for Toolchain Module\nDESCRIPTION: JSON format version information specifying a test module for NetBSD ARM platform in the .info file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.netbsd-arm.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.999testmod.netbsd-arm\"}\n```\n\n----------------------------------------\n\nTITLE: Test File for Package 'b'\nDESCRIPTION: Empty test file for package 'b' that enables the package to be included in test coverage when running 'go test ./...'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_single_error.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage b\n```\n\n----------------------------------------\n\nTITLE: Network Interface Type Constants Definition in Go for NetBSD ARM64\nDESCRIPTION: This snippet contains constant definitions for network interface types in the syscall package for NetBSD ARM64 with CGO. These constants define standard identifiers for different types of network interfaces such as Ethernet, ATM, FDDI, wireless, etc. Each constant is defined both with its numeric value and as an ideal-int type.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_26\n\nLANGUAGE: Go\nCODE:\n```\nconst IFT_ARCNETPLUS ideal-int\nconst IFT_ASYNC = 84\nconst IFT_ASYNC ideal-int\nconst IFT_ATM = 37\nconst IFT_ATMDXI = 105\nconst IFT_ATMDXI ideal-int\nconst IFT_ATMFUNI = 106\nconst IFT_ATMFUNI ideal-int\nconst IFT_ATM ideal-int\nconst IFT_ATMIMA = 107\nconst IFT_ATMIMA ideal-int\nconst IFT_ATMLOGICAL = 80\nconst IFT_ATMLOGICAL ideal-int\nconst IFT_ATMRADIO = 189\nconst IFT_ATMRADIO ideal-int\nconst IFT_ATMSUBINTERFACE = 134\nconst IFT_ATMSUBINTERFACE ideal-int\nconst IFT_ATMVCIENDPT = 194\nconst IFT_ATMVCIENDPT ideal-int\nconst IFT_ATMVIRTUAL = 149\nconst IFT_ATMVIRTUAL ideal-int\nconst IFT_BGPPOLICYACCOUNTING = 162\nconst IFT_BGPPOLICYACCOUNTING ideal-int\nconst IFT_BRIDGE = 209\nconst IFT_BRIDGE ideal-int\nconst IFT_BSC = 83\nconst IFT_BSC ideal-int\nconst IFT_CARP = 248\nconst IFT_CARP ideal-int\nconst IFT_CCTEMUL = 61\nconst IFT_CCTEMUL ideal-int\nconst IFT_CEPT = 19\nconst IFT_CEPT ideal-int\nconst IFT_CES = 133\nconst IFT_CES ideal-int\nconst IFT_CHANNEL = 70\nconst IFT_CHANNEL ideal-int\nconst IFT_CNR = 85\nconst IFT_CNR ideal-int\nconst IFT_COFFEE = 132\nconst IFT_COFFEE ideal-int\nconst IFT_COMPOSITELINK = 155\nconst IFT_COMPOSITELINK ideal-int\nconst IFT_DCN = 141\nconst IFT_DCN ideal-int\nconst IFT_DIGITALPOWERLINE = 138\nconst IFT_DIGITALPOWERLINE ideal-int\nconst IFT_DIGITALWRAPPEROVERHEADCHANNEL = 186\nconst IFT_DIGITALWRAPPEROVERHEADCHANNEL ideal-int\nconst IFT_DLSW = 74\nconst IFT_DLSW ideal-int\nconst IFT_DOCSCABLEDOWNSTREAM = 128\nconst IFT_DOCSCABLEDOWNSTREAM ideal-int\nconst IFT_DOCSCABLEMACLAYER = 127\nconst IFT_DOCSCABLEMACLAYER ideal-int\nconst IFT_DOCSCABLEUPSTREAM = 129\nconst IFT_DOCSCABLEUPSTREAMCHANNEL = 205\nconst IFT_DOCSCABLEUPSTREAMCHANNEL ideal-int\nconst IFT_DOCSCABLEUPSTREAM ideal-int\nconst IFT_DS0 = 81\nconst IFT_DS0BUNDLE = 82\nconst IFT_DS0BUNDLE ideal-int\nconst IFT_DS0 ideal-int\nconst IFT_DS1FDL = 170\nconst IFT_DS1FDL ideal-int\nconst IFT_DS3 = 30\nconst IFT_DS3 ideal-int\nconst IFT_DTM = 140\nconst IFT_DTM ideal-int\nconst IFT_DVBASILN = 172\nconst IFT_DVBASILN ideal-int\nconst IFT_DVBASIOUT = 173\nconst IFT_DVBASIOUT ideal-int\nconst IFT_DVBRCCDOWNSTREAM = 147\nconst IFT_DVBRCCDOWNSTREAM ideal-int\nconst IFT_DVBRCCMACLAYER = 146\nconst IFT_DVBRCCMACLAYER ideal-int\nconst IFT_DVBRCCUPSTREAM = 148\nconst IFT_DVBRCCUPSTREAM ideal-int\nconst IFT_ECONET = 206\nconst IFT_ECONET ideal-int\nconst IFT_EON = 25\nconst IFT_EON ideal-int\nconst IFT_EPLRS = 87\nconst IFT_EPLRS ideal-int\nconst IFT_ESCON = 73\nconst IFT_ESCON ideal-int\nconst IFT_ETHER = 6\nconst IFT_ETHER ideal-int\nconst IFT_FAITH = 242\nconst IFT_FAITH ideal-int\nconst IFT_FAST = 125\nconst IFT_FASTETHER = 62\nconst IFT_FASTETHERFX = 69\nconst IFT_FASTETHERFX ideal-int\nconst IFT_FASTETHER ideal-int\nconst IFT_FAST ideal-int\nconst IFT_FDDI = 15\nconst IFT_FDDI ideal-int\nconst IFT_FIBRECHANNEL = 56\nconst IFT_FIBRECHANNEL ideal-int\nconst IFT_FRAMERELAYINTERCONNECT = 58\nconst IFT_FRAMERELAYINTERCONNECT ideal-int\nconst IFT_FRAMERELAYMPI = 92\nconst IFT_FRAMERELAYMPI ideal-int\nconst IFT_FRDLCIENDPT = 193\nconst IFT_FRDLCIENDPT ideal-int\nconst IFT_FRELAY = 32\nconst IFT_FRELAYDCE = 44\nconst IFT_FRELAYDCE ideal-int\nconst IFT_FRELAY ideal-int\nconst IFT_FRF16MFRBUNDLE = 163\nconst IFT_FRF16MFRBUNDLE ideal-int\nconst IFT_FRFORWARD = 158\nconst IFT_FRFORWARD ideal-int\nconst IFT_G703AT2MB = 67\nconst IFT_G703AT2MB ideal-int\nconst IFT_G703AT64K = 66\nconst IFT_G703AT64K ideal-int\nconst IFT_GIF = 240\nconst IFT_GIF ideal-int\nconst IFT_GIGABITETHERNET = 117\nconst IFT_GIGABITETHERNET ideal-int\nconst IFT_GR303IDT = 178\nconst IFT_GR303IDT ideal-int\nconst IFT_GR303RDT = 177\nconst IFT_GR303RDT ideal-int\nconst IFT_H323GATEKEEPER = 164\nconst IFT_H323GATEKEEPER ideal-int\nconst IFT_H323PROXY = 165\nconst IFT_H323PROXY ideal-int\nconst IFT_HDH1822 = 3\nconst IFT_HDH1822 ideal-int\nconst IFT_HDLC = 118\nconst IFT_HDLC ideal-int\nconst IFT_HDSL2 = 168\nconst IFT_HDSL2 ideal-int\nconst IFT_HIPERLAN2 = 183\nconst IFT_HIPERLAN2 ideal-int\nconst IFT_HIPPI = 47\nconst IFT_HIPPI ideal-int\nconst IFT_HIPPIINTERFACE = 57\nconst IFT_HIPPIINTERFACE ideal-int\nconst IFT_HOSTPAD = 90\nconst IFT_HOSTPAD ideal-int\nconst IFT_HSSI = 46\nconst IFT_HSSI ideal-int\nconst IFT_HY = 14\nconst IFT_HY ideal-int\nconst IFT_IBM370PARCHAN = 72\nconst IFT_IBM370PARCHAN ideal-int\nconst IFT_IDSL = 154\nconst IFT_IDSL ideal-int\nconst IFT_IEEE1394 = 144\nconst IFT_IEEE1394 ideal-int\nconst IFT_IEEE80211 = 71\nconst IFT_IEEE80211 ideal-int\nconst IFT_IEEE80212 = 55\nconst IFT_IEEE80212 ideal-int\nconst IFT_IEEE8023ADLAG = 161\nconst IFT_IEEE8023ADLAG ideal-int\nconst IFT_IFGSN = 145\nconst IFT_IFGSN ideal-int\nconst IFT_IMT = 190\nconst IFT_IMT ideal-int\nconst IFT_INFINIBAND = 199\nconst IFT_INFINIBAND ideal-int\n```\n\n----------------------------------------\n\nTITLE: Import Syntax Test Package\nDESCRIPTION: Package importing a module with syntax error\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_errors.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage importsyntax\n\nimport _ \"example.com/badimport/syntaxerror\"\n```\n\n----------------------------------------\n\nTITLE: Testing Go List Command with Malformed Module Paths\nDESCRIPTION: This snippet tests the 'go list -m -versions' command with malformed module paths and verifies that appropriate error messages are displayed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_bad_domain.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n! go list -m -versions appengine\nstderr 'malformed module path \"appengine\": missing dot in first path element'\n! go list -m -versions x/y.z\nstderr 'malformed module path \"x/y.z\": missing dot in first path element'\n```\n\n----------------------------------------\n\nTITLE: Adding ExportKeyingMaterial method to ConnectionState in crypto/tls package in Go\nDESCRIPTION: Introduces ExportKeyingMaterial method to ConnectionState type in the crypto/tls package. It takes a string, a byte slice, and an integer as parameters and returns a byte slice and an error.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.11.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nmethod (*ConnectionState) ExportKeyingMaterial(string, []uint8, int) ([]uint8, error)\n```\n\n----------------------------------------\n\nTITLE: Defining Network and Routing Constants for OpenBSD in Go\nDESCRIPTION: Network and routing related constants for OpenBSD platform. These constants define values for socket operations, network interface configuration, and routing table management.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_39\n\nLANGUAGE: Go\nCODE:\n```\nconst RTF_FMASK = 1112072\nconst RTM_VERSION = 5\nconst SIOCBRDGDADDR = 2166909255\nconst SIOCBRDGGPARAM = 3225184600\nconst SIOCBRDGSADDR = 3240651076\nconst SIOCGETVLAN = 3223349648\nconst SIOCGETVLAN ideal-int\nconst SIOCGIFHARDMTU = 3223349669\nconst SIOCGIFHARDMTU ideal-int\nconst SIOCGLIFPHYTTL = 3223349673\nconst SIOCGLIFPHYTTL ideal-int\nconst SIOCGSPPPPARAMS = 3223349652\nconst SIOCGSPPPPARAMS ideal-int\nconst SIOCGVNETID = 3223349671\nconst SIOCGVNETID ideal-int\nconst SIOCSETVLAN = 2149607823\nconst SIOCSETVLAN ideal-int\nconst SIOCSLIFPHYTTL = 2149607848\nconst SIOCSLIFPHYTTL ideal-int\nconst SIOCSSPPPPARAMS = 2149607827\nconst SIOCSSPPPPARAMS ideal-int\nconst SIOCSVNETID = 2149607846\nconst SIOCSVNETID ideal-int\n```\n\n----------------------------------------\n\nTITLE: Creating Constant Values in Go SSA\nDESCRIPTION: Shows how constant values are represented in Go SSA. The example creates a constant 64-bit integer with a value of 1.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/internal/ssa/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nv13 (?) = Const64 <int> [1]\n```\n\n----------------------------------------\n\nTITLE: Gofmt Output Format Example\nDESCRIPTION: Shows how the text appears when processed through gofmt formatting.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/code2.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nText.\n\n\tA tab-indented\n\t(no, not eight-space indented)\n\tcode block and haiku.\n\nMore text.\n```\n\n----------------------------------------\n\nTITLE: Background Process Cleanup and Interruption\nDESCRIPTION: Shows how background processes are handled at test completion, including process interruption and builtin command cancellation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/script_wait.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n[exec:sleep] ? exec sleep 86400 &\n\n# It should also cancel any backgrounded builtins that respond to Context\n# cancellation.\n? sleep 86400s &\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Git Commit and Master Branch\nDESCRIPTION: Creates the initial commit with an empty README file, renames the default branch to master, and tags the commit with version v1.2.3.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/hg/hgrepo1.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nat 2018-04-17T15:43:22-04:00\nunquote ''\ncp stdout README\ngit add README\ngit commit -a -m 'empty README'\ngit branch -m master\ngit tag v1.2.3\n```\n\n----------------------------------------\n\nTITLE: Testing Go Get with Insecure Repository\nDESCRIPTION: Attempts to download a package from an insecure HTTP-only repository, which should fail.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/get_insecure.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n! go get -d insecure.go-get-issue-15410.appspot.com/pkg/p\n```\n\n----------------------------------------\n\nTITLE: Implementing TestMain with Exit Status 0\nDESCRIPTION: This Go code implements a TestMain function that prints a message and exits with status 0, used to test the behavior of clean exits in TestMain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_exit.txt#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\npackage mainexit0_test\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"testing\"\n)\n\nfunc TestMain(m *testing.M) {\n\tfmt.Println(\"nothing to do\")\n\tos.Exit(0)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Test Repository Script\nDESCRIPTION: A Bash script that creates and updates a Git repository with specific commit and tag structure for testing Go module version selection. It also packages and uploads the repository to Google Cloud Storage.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo_prefix.txt#2025-04-22_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n#!/bin/bash\n\n# This is not part of the test.\n# Run this to generate and update the repository on vcs-test.golang.org.\n\nset -euo pipefail\ncd \"$(dirname \"$0\")\"\nrm -rf prefixtagtests\nmkdir prefixtagtests\ncd prefixtagtests\n\ngit init\nmkdir sub\necho module vcs-test.golang.org/git/prefixtagtests.git/sub >sub/go.mod\necho package sub >sub/sub.go\ngit add sub\ngit commit -m 'create module sub'\nfor i in v0.1.0 sub/v0.0.9 sub/v0.0.10 v0.2.0; do\n  echo $i >status\n  git add status\n  git commit -m $i\n  git tag $i\ndone\necho 'after last tag' >status\ngit add status\ngit commit -m 'after last tag'\n\nzip -r ../prefixtagtests.zip .\ngsutil cp ../prefixtagtests.zip gs://vcs-test/git/prefixtagtests.zip\n```\n\n----------------------------------------\n\nTITLE: Defining Synchronization Syscall Constants for Darwin ARM64\nDESCRIPTION: Constant definitions for thread synchronization system calls on Darwin ARM64 architecture. These include operations for pthread synchronization (PSYNCH) like mutexes, condition variables, and read-write locks with their numeric identifiers.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_104\n\nLANGUAGE: Go\nCODE:\n```\nconst SYS_PSYNCH_CVBROAD = 303\nconst SYS_PSYNCH_CVCLRPREPOST = 312\nconst SYS_PSYNCH_CVSIGNAL = 304\nconst SYS_PSYNCH_CVWAIT = 305\nconst SYS_PSYNCH_MUTEXDROP = 302\nconst SYS_PSYNCH_MUTEXWAIT = 301\nconst SYS_PSYNCH_RW_DOWNGRADE = 299\nconst SYS_PSYNCH_RW_LONGRDLOCK = 297\nconst SYS_PSYNCH_RW_RDLOCK = 306\nconst SYS_PSYNCH_RW_UNLOCK = 308\nconst SYS_PSYNCH_RW_UNLOCK2 = 309\nconst SYS_PSYNCH_RW_UPGRADE = 300\nconst SYS_PSYNCH_RW_WRLOCK = 307\nconst SYS_PSYNCH_RW_YIELDWRLOCK = 298\n```\n\n----------------------------------------\n\nTITLE: Module B v2 Implementation (b2/b.go)\nDESCRIPTION: Implementation file for version 2 of module b, importing module d.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downadd_indirect.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage b\n\nimport _ \"example.com/d\"\n```\n\n----------------------------------------\n\nTITLE: Checking Selected Module Version 'c' in Go 1.17 (Lazy Loading)\nDESCRIPTION: These shell commands update the main module to use Go 1.17 (enabling lazy loading), list the selected version of module 'c', and then run tests for package 'x'. The output shows that lazy loading prunes the irrelevant test dependency path (`a_test` -> `b` -> `c v0.2.0`), resulting in the selection of the version directly required by 'x' (`c v0.1.0`).\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_horizon.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo mod edit -go=1.17\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo list -m c\nstdout '^c v0.1.0'\n```\n\nLANGUAGE: shell\nCODE:\n```\n[!short] go test -v x\n[!short] stdout ' c v0.1.0$'\n```\n\n----------------------------------------\n\nTITLE: Comparing Go Module Files\nDESCRIPTION: This snippet copies Go module files and compares the contents before and after using 'go mod tidy', which is necessary for syncing module dependencies. It checks if the 'go.mod' file correctly enumerates modules after changes. Key tools include 'cp', 'go list', and 'cmp'. It highlights the steps to ensure packages are properly imported, reflecting accurate dependency management.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_new_import.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ncp go.mod go.mod.old\ncp lazy.go lazy.go.old\ngo mod tidy\ncmp go.mod go.mod.old\n```\n\n----------------------------------------\n\nTITLE: Extraneous Text File for Testing\nDESCRIPTION: A sample text file containing a fake module definition that is used to test copying extraneous files into the module cache directories.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_cache_rw.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule oops\n```\n\n----------------------------------------\n\nTITLE: Go Module C Definition\nDESCRIPTION: Module definition for example.com/c\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_overlay.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/c\n```\n\n----------------------------------------\n\nTITLE: Testing Package Staleness with go list and go install\nDESCRIPTION: This script sets a custom GOCACHE directory and checks if a package is stale before and after installation. It first verifies that the package is marked as stale, then installs it, and finally confirms that after installation the package is no longer considered stale.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_stale.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GOCACHE=$WORK/cache\ngo list -f '{{.Stale}}' .\nstdout true\ngo install .\ngo list -f '{{.Stale}}' .\nstdout false\n```\n\n----------------------------------------\n\nTITLE: Lowercase Module Implementation\nDESCRIPTION: A simple Go file that defines the lowercase foo package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_collision.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage foo\n\n```\n\n----------------------------------------\n\nTITLE: Expected Go Module File After Dependency Resolution\nDESCRIPTION: The expected go.mod file after running 'go run -mod=mod', which should now include the missing dependency 'example.com/version v1.1.0' marked as indirect.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_run_issue52331.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example\n\ngo 1.17\n\nrequire example.com/version v1.1.0 // indirect\n```\n\n----------------------------------------\n\nTITLE: Module B Implementation\nDESCRIPTION: Package b implementation with exported function B()\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_regression_hang.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage b\n\nfunc B() {\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Test Go File with Import\nDESCRIPTION: Defines a Go file that imports the test module to trigger version resolution during the test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo_other_branch.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage x\n\nimport _ \"vcs-test.golang.org/git/tagtests.git\"\n```\n\n----------------------------------------\n\nTITLE: Expected Module State After Tool Upgrade\nDESCRIPTION: Expected go.mod state after upgrading the tool version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_tool.txt#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule example.com/foo\n\ngo 1.24\n\ntool example.com/tools/cmd/hello\n\nrequire example.com/tools v1.1.0 // indirect\n```\n\n----------------------------------------\n\nTITLE: Nosplit Function Annotation in Go Runtime\nDESCRIPTION: Shows the usage of the //go:nosplit annotation for functions in the Go runtime. This annotation indicates that the function should not include the stack growth prologue.\nSOURCE: https://github.com/golang/go/blob/master/src/runtime/HACKING.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n//go:nosplit\nfunc someFunction() {\n    // Function body\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module with Go 1.14+ Syntax Features\nDESCRIPTION: A Go package that showcases syntax features only available in Go 1.14 or newer, including numeric literal separators and interface embedding for combining standard interfaces.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_outside.txt#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n// Package newgo requires Go 1.14 or newer.\npackage newgo\n\nimport \"io\"\n\nconst C = 299_792_458\n\ntype ReadWriteCloser interface {\n\tio.ReadCloser\n\tio.WriteCloser\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module for rsc.io/breaker\nDESCRIPTION: Specifies the module name for the rsc.io/breaker package. This is typically placed in a go.mod file to define the module and its dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_breaker_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule rsc.io/breaker\n```\n\n----------------------------------------\n\nTITLE: Go Environment Variable Configuration Test\nDESCRIPTION: Test script that sets various Go environment variables and verifies their output using go env -changed command. Tests include basic environment settings, JSON output format, and platform-specific configurations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_changed.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GOROOT=./a\nenv GOTOOLCHAIN=local\nenv GOSUMDB=nodefault\nenv GOPROXY=nodefault\nenv GO111MODULE=auto\nenv CGO_CFLAGS=nodefault\nenv CGO_CPPFLAGS=nodefault\nenv GOFIPS140=latest\n```\n\n----------------------------------------\n\nTITLE: Defining Package 'x' in Go\nDESCRIPTION: This Go source file defines a minimal package 'x'. It contains no exported identifiers but serves as a node in the dependency graph that directly depends on `c v0.1.0`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_horizon.txt#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n-- x1/x.go --\npackage x\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition for Test Environment\nDESCRIPTION: Defines a simple Go module used as the main module for this test script. It specifies the module name as 'example.com/m' and requires Go 1.18 which first introduced fuzzing support.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_modcache.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/m\n\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Implementing a Go Package\nDESCRIPTION: This snippet declares a Go package named 'subpkg'. It’s the foundational code that represents the package structure. The input is plain Go code with the package declaration, and it outputs a compile-able Go package ready for function or type definitions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_split-incompatible_subpkg_v0.1.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage subpkg\n```\n\n----------------------------------------\n\nTITLE: Go Test for Environment Variable Validation\nDESCRIPTION: A Go test file that checks if the TERM environment variable is empty. The test will fail if TERM is set to any non-empty value, verifying that environment variables set in the test script are properly passed to the test process.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_env_term.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\nimport (\"os\"; \"testing\")\nfunc TestEnv(t *testing.T) {\n\tif os.Getenv(\"TERM\") != \"\" {\n\t\tt.Fatal(\"TERM is set\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting GO111MODULE Environment Variable in Bash\nDESCRIPTION: Sets the GO111MODULE environment variable to 'on' to enable Go modules for the subsequent commands.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_verify.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=on\n```\n\n----------------------------------------\n\nTITLE: Providing a Basic Go Test File for go test - Go\nDESCRIPTION: This Go test file defines the main package's test suite with a trivial, empty test function named TestSomething. The file serves as the target for go test -c operations to build test executables as described in the shell script. Dependencies: Uses Go's standard 'testing' package. There are no key parameters or required environmental inputs. The output is an executable test binary suitable for use with go test -c. Limitations: No actual test logic is implemented.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/clean_binary.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport \"testing\"\n\nfunc TestSomething(t *testing.T) {\n}\n```\n\n----------------------------------------\n\nTITLE: Module definition for test repository\nDESCRIPTION: The go.mod file for the test repository, defining module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/get_issue53955.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nmodule github.com/golang/issue53955\n\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Main module definition file specifying the module name, Go version requirement, and dependency replacements.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_error.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule issue27063\n\ngo 1.13\n\nrequire issue27063/other v0.0.0\nreplace issue27063/other => ./other\n```\n\n----------------------------------------\n\nTITLE: Implementing Go test functions\nDESCRIPTION: Defines two test functions: TestWriteTmp for writing temporary files and TestReadTestdata for reading from testdata.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test_cached.txt#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\npackage foo_test\n\nimport (\n\t\"os\"\n\t\"path/filepath\"\n\t\"testing\"\n)\n\nfunc TestWriteTmp(t *testing.T) {\n\tdir, err := os.MkdirTemp(\"\", \"\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer os.RemoveAll(dir)\n\terr = os.WriteFile(filepath.Join(dir, \"x\"), nil, 0666)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n}\n\nfunc TestReadTestdata(t *testing.T) {\n\t_, err := os.ReadFile(\"testdata/foo.txt\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Linking C Function in Go Package\nDESCRIPTION: This Go package uses cgo to import an external C function declared with int return type. It initializes by calling the C function and panics if the return value is not 42, testing the integration with the compiled syso file. There are no specific package-level dependencies aside from cgo.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_syso_issue29253.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage pkg\n\n// extern int f(void);\nimport \"C\"\n\nfunc init() {\n\tif v := C.f(); v != 42 {\n\t\tpanic(v)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Vendor Resolution with Build Command\nDESCRIPTION: A Go test script that verifies import resolution behavior with vendored dependencies. The test builds a package with various import statements and checks that there are no errors in stdout or stderr.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_vendor.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=off\ngo build vend/x\n! stdout .\n! stderr .\n```\n\n----------------------------------------\n\nTITLE: Testing -pgo=off flag to disable PGO\nDESCRIPTION: Tests that the -pgo=off flag correctly disables Profile-Guided Optimization, even when a default.pgo file exists. It verifies that PGO is not applied during compilation and doesn't appear in build info.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto.txt#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngo build -a -n -pgo=off -o a1.exe ./a/a1\nstderr 'compile.*a1.go'\n! stderr 'compile.*-pgoprofile'\n\n# check that pgo doesn't appear in build info\n! stderr 'build\\\\t-pgo='\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Module Commands\nDESCRIPTION: Shell commands to test module-related operations with an invalid path. Uses GO111MODULE=on to enforce module mode and attempts get/install operations that should fail.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_v1suffix.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n\n! go get example.com/invalidpath/v1\n! go install .\n```\n\n----------------------------------------\n\nTITLE: Verifying Go Module Dependency Integrity with Shell Commands\nDESCRIPTION: A shell script that checks if 'go mod tidy' would make any changes to a go.mod file. It creates a backup of the original go.mod file, runs 'go mod tidy' to ensure dependencies are up-to-date, and then compares the two files to detect any differences.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/import_ignore.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp go.mod go.mod.orig\ngo mod tidy\ncmp go.mod go.mod.orig\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Configuration\nDESCRIPTION: Specifies the module name 'foo' and sets the Go version to 1.20.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cgo_error.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule foo\n\ngo 1.20\n```\n\n----------------------------------------\n\nTITLE: Quote Module Definition\nDESCRIPTION: Module definition for the quote package replacement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_readonly.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule rsc.io/quote\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: A simple Go module definition file (go.mod) that specifies the module name and Go version requirement. This defines a module named 'example.com/mod' that uses Go 1.20.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_stale.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/mod\n\ngo 1.20\n```\n\n----------------------------------------\n\nTITLE: Package B Definition with Import\nDESCRIPTION: Package 'b' declaration with blank import of example.com/dep\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_pattern_work.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage b\n\nimport _ \"example.com/dep\"\n```\n\n----------------------------------------\n\nTITLE: Testing Go List Failure for Package with Missing Requirement (Shell)\nDESCRIPTION: Removes the requirement for `example.com/badchain/a` from `go.mod`. Then, it attempts to list the `m/use` package (`go list -mod=mod m/use`), which imports a package from `example.com/badchain/c`. This command is expected to fail (`!`) because `go list` attempts to find the module for the imported package, encounters the path mismatch in `example.com/badchain/c@v1.1.0`, and reports an error. The script compares the standard error output with `list-missing-expected`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badchain.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# Try listing a package that imports a package\n# in a module without a requirement.\ngo mod edit -droprequire example.com/badchain/a\n! go list -mod=mod m/use\ncmp stderr list-missing-expected\n```\n\n----------------------------------------\n\nTITLE: Invalid Cgo Library Reference\nDESCRIPTION: Example Go code that intentionally references a non-existent library using Cgo pkg-config directive to test error handling\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_pkgconfig_error.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage example\n\n// #cgo pkg-config: libnot-a-valid-cgo-library\nimport \"C\"\n\npackage main() {}\n```\n\n----------------------------------------\n\nTITLE: Go Package Declaration\nDESCRIPTION: Simple Go source file that declares the package name as 'or404'. This file establishes the package identity but contains no actual functionality.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/auth/or404.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage or404\n```\n\n----------------------------------------\n\nTITLE: Describing loong64 Stack Frame Layout - Plaintext\nDESCRIPTION: This snippet displays the stack frame layout for the loong64 Go ABI using ASCII-art. It highlights the order of locals, outgoing arguments, and return program counter, as pointed to by R3 (the stack pointer). The arrangement clarifies expectations for frame creation and teardown under both ABIInternal and ABI0 conventions, supporting correct return PC retrieval for function returns.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/abi-internal.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n+------------------------------+\\n| ... locals ...               |\\n| ... outgoing arguments ...   |\\n| return PC                    | \\u2190 R3 points to\\n+------------------------------+ \\u2193 lower addresses\n```\n\n----------------------------------------\n\nTITLE: Module Q v1.1.0 Implementation\nDESCRIPTION: This snippet shows the go.mod file and implementation for 'example.com/q' version 1.1.0. It provides a PrintVersion function that prints \"version 1.1.0\".\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_prune.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/q\n\ngo 1.18\n```\n\nLANGUAGE: Go\nCODE:\n```\npackage q\n\nimport \"fmt\"\n\nfunc PrintVersion() {\n\tfmt.Println(\"version 1.1.0\")\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Import Cycle Detection with Shell Commands\nDESCRIPTION: A series of shell commands that test how the Go toolchain handles import cycles. It first attempts a normal 'go list all' which should fail with a specific error message, then tests 'go list -e' which should continue despite errors and mark packages as incomplete.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_cycle.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n\n# 'go list all' should fail with a reasonable error message\n! go list all\nstderr '^package m\\n\\timports m/a from m.go\\n\\timports m/b from a.go\\n\\timports m/a from b.go: import cycle not allowed'\n\n# 'go list -e' should not print to stderr, but should mark all three\n# packages (m, m/a, and m/b) as Incomplete.\ngo list -e -json all\n! stderr .\nstdout -count=3 '\"Incomplete\": true,'\n```\n\n----------------------------------------\n\nTITLE: Attempting Go Module Download with Excessive Redirects\nDESCRIPTION: Tries to download a specific version of the 'rsc.io/quote' module, expecting it to fail due to too many redirects (11 configured in the proxy).\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_too_many_redirects.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n! go mod download rsc.io/quote@v1.2.0\nstderr 'stopped after 10 redirects'\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Go Fuzz Tests in One Package\nDESCRIPTION: A Go implementation of two fuzz tests in the 'two' package. This defines two fuzz targets named FuzzOne and FuzzTwo, both taking a testing.F parameter and providing fuzz functions that process byte slices.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_multiple.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage two\n\nimport \"testing\"\n\nfunc FuzzOne(f *testing.F) {\n  f.Fuzz(func(*testing.T, []byte) {})\n}\n\nfunc FuzzTwo(f *testing.F) {\n  f.Fuzz(func(*testing.T, []byte) {})\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Go Program Using External Module\nDESCRIPTION: A minimal Go program that imports and uses the 'rsc.io/sampler' package to print a hello message. This serves as a test case for the module vendoring test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gomodcache_vendor.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"rsc.io/sampler\"\n)\n\nfunc main() {\n    fmt.Println(sampler.Hello())\n}\n```\n\n----------------------------------------\n\nTITLE: Running Parallel Tests with Verbose Output\nDESCRIPTION: Shell command to run parallel tests with verbose output, specifying a parallelism level of 3.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_chatty_parallel_success_run.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo test -parallel 3 chatty_parallel -v\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Build Cache Verification using gocacheverify GODEBUG Setting (Go 1.10)\nDESCRIPTION: Introduced in Go 1.10 alongside build caching improvements. This setting controls whether the Go command verifies cache entries by recompiling object files and comparing outputs. It helps ensure cache correctness. Set via GODEBUG environment variable (e.g., GODEBUG=gocacheverify=1).\nSOURCE: https://github.com/golang/go/blob/master/doc/godebug.md#2025-04-22_snippet_27\n\nLANGUAGE: plaintext\nCODE:\n```\ngocacheverify\n```\n\n----------------------------------------\n\nTITLE: Defining Go Packages and Test Files with Syntax and Signature Errors - Go\nDESCRIPTION: This collection of Go source files sets up various packages and test files demonstrating different failure modes. Some files are intentionally incomplete or contain syntax errors (represented by '!!!syntax error'), some import dependencies, and others define test functions with incorrect signatures or use generics incorrectly in test functions. These files serve as a testbed for validating the Go build and test tooling's robustness and error reporting. Inputs are package declarations and optional imports; outputs vary between successful compilation and error states, depending on the intentional faults. The key dependency is the standard Go toolchain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_test_err.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage syntaxerr\n\nimport _ \"pkgdep\"\n```\n\nLANGUAGE: Go\nCODE:\n```\npackage syntaxerr\n\n!!!syntax error\n```\n\nLANGUAGE: Go\nCODE:\n```\npackage syntaxerr_test\n\n!!!syntax error\n```\n\nLANGUAGE: Go\nCODE:\n```\npackage syntaxerr\n\nimport _ \"testdep_a\"\n```\n\nLANGUAGE: Go\nCODE:\n```\npackage syntaxerr\n\nimport _ \"testdep_b\"\n```\n\nLANGUAGE: Go\nCODE:\n```\npackage nameerr\n\nimport _ \"pkgdep\"\n```\n\nLANGUAGE: Go\nCODE:\n```\npackage nameerr\n\nimport (\n  _ \"testdep_a\"\n  \"testing\"\n)\n\nfunc TestBad(t *testing.B) {}\n```\n\nLANGUAGE: Go\nCODE:\n```\npackage nameerr_test\n\nimport (\n  _ \"testdep_b\"\n  \"testing\"\n)\n\nfunc TestBad(t *testing.B) {}\n```\n\nLANGUAGE: Go\nCODE:\n```\npackage genericerr\n```\n\nLANGUAGE: Go\nCODE:\n```\npackage genericerr\n\nimport \"testing\"\n\nfunc TestGeneric[T any](t *testing.T) {}\n```\n\nLANGUAGE: Go\nCODE:\n```\npackage cycleerr\n\nimport (\n  _ \"testdep_a\"\n  _ \"testdep_cycle\"\n)\n```\n\nLANGUAGE: Go\nCODE:\n```\npackage pkgdep\n```\n\nLANGUAGE: Go\nCODE:\n```\npackage testdep_a\n```\n\nLANGUAGE: Go\nCODE:\n```\npackage testdep_b\n```\n\nLANGUAGE: Go\nCODE:\n```\npackage testdep_cycle\n\nimport _ \"cycleerr\"\n```\n\n----------------------------------------\n\nTITLE: Other Module Example Go File\nDESCRIPTION: A simple Go file in the othermodule directory for testing module resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dot.txt#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\npackage othermodule\n```\n\n----------------------------------------\n\nTITLE: Building CGO Test Executable in Go\nDESCRIPTION: Builds the CGO test project into an executable named 'exe1' using the 'go build' command.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cgo_consistent_results.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo build -o $WORK/exe1$GOEXE cgotest\n```\n\n----------------------------------------\n\nTITLE: Importing External Package\nDESCRIPTION: Simple Go source file that imports rsc.io/quote package as a blank import\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_readonly.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage use\n\nimport _ \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Go Package - Go\nDESCRIPTION: This snippet declares an empty Go package named 'missingmod'. It is required as a package entry point and could contain functions or types if implemented further. There are no dependencies, parameters, or outputs, and the file is limited to a package declaration without functionality.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_missingmod_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage missingmod\n```\n\n----------------------------------------\n\nTITLE: Validating GOOS and GOARCH Combinations\nDESCRIPTION: This snippet tests the validation of GOOS and GOARCH combinations when using 'go env -w' and 'go env -u'. It checks for invalid individual values and incompatible combinations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_write.txt#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# go env -w/-u checks validity of GOOS/ARCH combinations\nenv GOOS=\nenv GOARCH=\n# check -w doesn't allow invalid GOOS\n! go env -w GOOS=linuxx\nstderr 'unsupported GOOS/GOARCH pair linuxx'\n# check -w doesn't allow invalid GOARCH\n! go env -w GOARCH=amd644\nstderr 'unsupported GOOS/GOARCH.*/amd644$'\n# check -w doesn't allow invalid GOOS with valid GOARCH\n! go env -w GOOS=linuxx GOARCH=amd64\nstderr 'unsupported GOOS/GOARCH pair linuxx'\n# check a valid GOOS and GOARCH values but an incompatible combinations\n! go env -w GOOS=android GOARCH=s390x\nstderr 'unsupported GOOS/GOARCH pair android/s390x'\n# check that -u considers explicit envs\ngo env -w GOOS=linux GOARCH=mips\nenv GOOS=windows\n! go env -u GOOS\nstderr 'unsupported GOOS/GOARCH.*windows/mips$'\nenv GOOS=\n```\n\n----------------------------------------\n\nTITLE: Deprecated BPF Functions for NetBSD and OpenBSD\nDESCRIPTION: Collection of deprecated Berkeley Packet Filter (BPF) related functions including buffer length management, datalink operations, interface configuration, and filter operations. These functions were part of the syscall package for NetBSD and OpenBSD platforms.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_41\n\nLANGUAGE: go\nCODE:\n```\nfunc BpfBuflen() //deprecated\nfunc BpfDatalink() //deprecated\nfunc BpfHeadercmpl() //deprecated\nfunc BpfInterface() //deprecated\nfunc BpfJump() //deprecated\nfunc BpfStats() //deprecated\nfunc BpfStmt() //deprecated\nfunc BpfTimeout() //deprecated\nfunc CheckBpfVersion() //deprecated\nfunc FlushBpf() //deprecated\n```\n\n----------------------------------------\n\nTITLE: Running Go Fuzz Tests with Various Configurations\nDESCRIPTION: This shell script runs a series of Go fuzz tests with different configurations, including various -fuzz and -run flags, as well as different fuzztime settings. It tests both successful and failing scenarios.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_seed_corpus.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n! go test -fuzz=^FuzzWithAdd$ -run=^FuzzWithAdd$ -fuzztime=1x\n! stdout ^ok\n! stdout 'Failing input written to testdata[/\\\\]fuzz[/\\\\]FuzzWithAdd[/\\\\]'\nstdout FAIL\n\ngo test -fuzz=FuzzWithGoodAdd -run=FuzzWithGoodAdd -fuzztime=1x\nstdout ok\n! stdout FAIL\n\n! go test -fuzz=FuzzWithTestdata -run=FuzzWithTestdata -fuzztime=1x\n! stdout ^ok\n! stdout 'Failing input written to testdata[/\\\\]fuzz[/\\\\]FuzzWithTestdata[/\\\\]'\nstdout 'failure while testing seed corpus entry: FuzzWithTestdata/1'\nstdout FAIL\n\n! go test -fuzz=FuzzWithNoCache -run=FuzzWithNoCache -fuzztime=1x\n! stdout ^ok\nstdout 'Failing input written to testdata[/\\\\]fuzz[/\\\\]FuzzWithNoCache[/\\\\]'\nstdout FAIL\n\n! go test -fuzz=FuzzWithCache -run=FuzzWithCache -fuzztime=1x\n! stdout ^ok\nstdout 'Failing input written to testdata[/\\\\]fuzz[/\\\\]FuzzWithCache[/\\\\]'\nstdout FAIL\n\n! go test -fuzz=FuzzWithMinimizableCache -run=FuzzWithMinimizableCache -fuzztime=10000x\n! stdout ^ok\nstdout 'gathering baseline coverage'\nstdout 'got the minimum size!'\nstdout 'contains a non-zero byte of length 10'\nstdout 'Failing input written to testdata[/\\\\]fuzz[/\\\\]FuzzWithMinimizableCache[/\\\\]'\nstdout FAIL\n! stdout 'execs'\n\ngo clean -fuzzcache\n! exists $GOCACHE/fuzz\n\n! go test -fuzz=^FuzzWithAdd$ -run=None\n! stdout ^ok\n! stdout 'Failing input written to testdata[/\\\\]fuzz[/\\\\]FuzzWithAdd[/\\\\]'\nstdout FAIL\n\ngo test -fuzz=FuzzWithGoodAdd -run=None -fuzztime=1x\nstdout ok\n! stdout FAIL\n\n! go test -fuzz=FuzzWithTestdata -run=None -fuzztime=1x\n! stdout ^ok\n! stdout 'Failing input written to testdata[/\\\\]fuzz[/\\\\]FuzzWithTestdata[/\\\\]'\nstdout FAIL\n\n! go test -fuzz=FuzzRunNoneWithCache -run=None -fuzztime=1x\n! stdout ^ok\nstdout 'Failing input written to testdata[/\\\\]fuzz[/\\\\]FuzzRunNoneWithCache[/\\\\]'\nstdout FAIL\n\ngo clean -fuzzcache\n! exists $GOCACHE/fuzz\n\ngo test -c\n! exec ./x.test$GOEXE -test.fuzz=^FuzzWithAdd$ -test.run=^FuzzWithAdd$ -test.fuzztime=1x -test.fuzzcachedir=$WORK/cache\n! stdout ^ok\n! stdout 'Failing input written to testdata[/\\\\]fuzz[/\\\\]FuzzWithAdd[/\\\\]'\nstdout FAIL\nstderr warning\n\ngo test -c\n! exec ./x.test$GOEXE -test.fuzz=FuzzWithTestdata -test.run=^FuzzWithTestdata$ -test.fuzztime=1x -test.fuzzcachedir=$WORK/cache\n! stdout ^ok\n! stdout 'Failing input written to testdata[/\\\\]fuzz[/\\\\]FuzzWithTestdata[/\\\\]'\nstdout FAIL\nstderr warning\n```\n\n----------------------------------------\n\nTITLE: Testing Vendor Directory Resolution\nDESCRIPTION: Tests how vendor directories are handled under different -mod settings.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dot.txt#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# golang.org/issue/32921: vendor directories should only be accepted as directories\n# if the directory would actually be used to load the package.\n! go list ./vendor/nonexist\nstderr '^no Go files in '$WORK'[/\\\\]gopath[/\\\\]src[/\\\\]dir[/\\\\]vendor[/\\\\]nonexist$'\n\n! go list ./vendor/pkg\nstderr '^without -mod=vendor, directory '$WORK'[/\\\\]gopath[/\\\\]src[/\\\\]dir[/\\\\]vendor[/\\\\]pkg has no package path$'\n\n! go list -mod=vendor ./vendor/nonexist\nstderr '^no Go files in '$WORK'[/\\\\]gopath[/\\\\]src[/\\\\]dir[/\\\\]vendor[/\\\\]nonexist$'\n\n! go list -mod=vendor ./vendor/unlisted\nstderr '^directory '$WORK'[/\\\\]gopath[/\\\\]src[/\\\\]dir[/\\\\]vendor[/\\\\]unlisted is not a package listed in vendor/modules.txt$'\n\ngo list -mod=vendor ./vendor/pkg\nstdout '^pkg$'\n```\n\n----------------------------------------\n\nTITLE: Defining Standard File Descriptor Constants in Go for NetBSD ARM64\nDESCRIPTION: Declaration of standard file descriptor constants (Stdin, Stdout, Stderr) for NetBSD ARM64 with CGO support.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_111\n\nLANGUAGE: Go\nCODE:\n```\nvar Stdin int\nvar Stdout int\nvar Stderr int\n```\n\n----------------------------------------\n\nTITLE: Implementing Mock Gofmt Command\nDESCRIPTION: A shell script placeholder for the gofmt command that simply echoes a message indicating it's unused.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.plan9-arm.txt#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: Go Package Declaration for pkg/p.go\nDESCRIPTION: Simple Go package declaration used in multiple versions of the repository.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_21\n\nLANGUAGE: go\nCODE:\n```\npackage p // pkg/p.go\n```\n\n----------------------------------------\n\nTITLE: Defining Minimal Go Packages for Shadowing Tests - Go\nDESCRIPTION: These Go code snippets declare minimal package stubs for use in package shadowing and conflict tests, as referenced by the shell script above. The packages 'foo' and 'math' are each defined only with a package statement and no implementation. These allow the Go tools to identify and process package directories during import and installation commands. No external dependencies are required beyond standard Go setup, and there are no additional parameters or exported functions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_shadow.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage foo\n```\n\nLANGUAGE: go\nCODE:\n```\npackage math\n```\n\nLANGUAGE: go\nCODE:\n```\npackage foo\n```\n\n----------------------------------------\n\nTITLE: Invalid Main Package Import\nDESCRIPTION: Example of invalid import of package main from another package, which should fail during build\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/import_main.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage p1\n\nimport xmain \"x\"\n\nvar _ = xmain.X\n```\n\n----------------------------------------\n\nTITLE: Go Source File with Import\nDESCRIPTION: Go source file that imports rsc.io/quote package and uses its Hello function\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_quote.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage x\nimport \"rsc.io/quote\"\nfunc main() { _ = quote.Hello }\n```\n\n----------------------------------------\n\nTITLE: Controlling Multipath TCP Usage using multipathtcp GODEBUG Setting (Go 1.21)\nDESCRIPTION: Introduced in Go 1.21, this setting controls whether Multipath TCP (MPTCP) is used by default when available. Go 1.21 adds support for MPTCP, but it is only used if explicitly requested by the application (e.g., via net.Dialer.SetMultipathTCP) or if multipathtcp=1 is set. The default is 0 (opt-in). Set via GODEBUG environment variable (e.g., GODEBUG=multipathtcp=1).\nSOURCE: https://github.com/golang/go/blob/master/doc/godebug.md#2025-04-22_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\nmultipathtcp\n```\n\n----------------------------------------\n\nTITLE: Initializing and Managing Go Modules - Go mod and go list - Shell\nDESCRIPTION: This snippet initializes a new Go module using `go mod init`, edits its dependency using `go mod edit -require`, and then uses various forms of the `go list -m` command with the `-mod=readonly` flag to query for specific module versions as well as available versions. It also verifies correct stdout and stderr output, including triggering and capturing specific error states related to missing or required entries in the `go.sum` file. Dependencies required include Go tools in the shell environment and network access for module fetching. Inputs are Go module paths and versions; outputs are command results and error messages. The test is constrained by current Go tooling behavior, some of which is marked as pending improvements in issue 41297.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_sums.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# https://golang.org/issue/41297: 'go list -m' should not require go.sum with\n# -versions or when all args are version queries.\n\ngo mod init m\ngo mod edit -require=rsc.io/quote@v1.5.1\n\ngo list -m -mod=readonly rsc.io/quote@latest\nstdout '^rsc\\.io/quote v1\\.5\\.2$'\n! stderr .\n\ngo list -m -mod=readonly -versions rsc.io/quote\nstdout 'rsc\\.io/quote v1\\.0\\.0 .* v1\\.5\\.3-pre1$'\n! stderr .\n\n# Incidentally fetching the required version of a module records its checksum,\n# just because it happens to be in the build list, and recording the checksum\n# triggers an error under -mod=readonly.\n#\n# TODO(#41297): This should not be an error.\n! go list -m -mod=readonly rsc.io/quote@<v1.5.2\nstderr '^go: updates to go.sum needed, disabled by -mod=readonly$'\n! stderr 'missing go.sum entry'\n\n# Attempting to list the versions of a module that is not a root dependency\n# causes the build list to be resolved (so that the selected version can *also*\n# be identified, even though it is not relevant to this particular output).\n# That, in turn, causes us to need checksums for the go.sum files for the\n# modules in the module graph.\n#\n# TODO(#41297): This should not be an error either.\n! go list -m -mod=readonly -versions rsc.io/sampler\nstderr '^go: rsc\\.io/quote@v1\\.5\\.1: missing go\\.sum entry for go.mod file; to add it:\\n\\tgo mod download rsc\\.io/quote$'\n\n```\n\n----------------------------------------\n\nTITLE: Defining C Function CFn (C)\nDESCRIPTION: This C source file `b/b.c` defines the function `CFn`. It depends on another external C function `LibFn`. This file is compiled into `a/b.syso`, which is linked into package `a`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_undef.txt#2025-04-22_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n-- b/b.c --\nextern int LibFn(int);\nint CFn(int i) { return LibFn(i); }\n```\n\n----------------------------------------\n\nTITLE: Disabling Go Modules via Environment Variable (Shell)\nDESCRIPTION: Sets the `GO111MODULE` environment variable to `off`. This forces the Go toolchain to operate in the older GOPATH mode, disabling Go modules support for the commands executed in the same environment or sub-process.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_test_non_go_files.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=off\n```\n\n----------------------------------------\n\nTITLE: Implementing Trivial Fuzz Test in Go\nDESCRIPTION: Defines a basic fuzz test function that takes no action. This test is designed to be skipped on certain platform combinations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_unsupported.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage example\n\nimport \"testing\"\n\nfunc FuzzTrivial(f *testing.F) {\n\tf.Fuzz(func(t *testing.T, _ []byte) {})\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal Go Main Package\nDESCRIPTION: Simple Go main package with empty main function used for testing package installation\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_shadow_gopath.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Expected Git Log Output\nDESCRIPTION: Contains the expected output of the git log command showing two commits in the repository.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/insecurerepo.txt#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n6fecd21 (HEAD -> master) main: add Go source file\nd1a15cd all: initialize module\n```\n\n----------------------------------------\n\nTITLE: Parsing Build ID from Command Line File – Go\nDESCRIPTION: This Go program ('example/main.go') reads a file path argument (expected to contain a build ID string), splits the ID on '/', checks its structure, and prints the core package build ID segment. It's designed to process Go build IDs (of form X/Y/Z/W), extracting 'Y/Z' part, aiding in the test's ID comparison logic. It depends only on Go's standard library and expects valid file input; returns exit codes 1 (IO error) or 2 (unexpected format). Input: file path as argument; output: extracted package build ID or a process exit.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_list.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n-- example/main.go --\\npackage main\\n\\nimport (\\n\\t\\\"fmt\\\"\\n\\t\\\"os\\\"\\n\\t\\\"strings\\\"\\n)\\n\\nfunc main() {\\n\\tprintln(os.Args[1])\\n\\tcontent, err := os.ReadFile(os.Args[1])\\n\\tif err != nil {\\n\\t\\tos.Exit(1)\\n\\t}\\n\\tfields := strings.Split(strings.TrimSpace(string(content)), \\\"/\\\")\\n\\tif len(fields) != 4 {\\n\\t\\tos.Exit(2)\\n\\t}\\n\\tfmt.Println(fields[1] + \\\"/\\\" + fields[2])\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Invalid Go Package Declaration\nDESCRIPTION: This file contains an invalid Go package declaration. It uses 'pkg mypackage' instead of the correct 'package mypackage' syntax, which would cause syntax errors during compilation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/pattern_syntax_error.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npkg mypackage\n```\n\n----------------------------------------\n\nTITLE: Storing Module Version Information - JSON\nDESCRIPTION: This snippet provides supplementary version metadata in JSON format, indicating that version 'v1.0.0-block' is relevant for this module. It typically accompanies the module on proxy servers or registries, allowing tools or consumers to query information without processing Go source code. The object is simple, containing just the 'Version' property, with its main constraint being strict adherence to JSON structure.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rationale_v1.0.0-block.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\\"Version\\\":\\\"v1.0.0-block\\\"}\n```\n\n----------------------------------------\n\nTITLE: Testing Incompatible Suffix on Compatible Version in Go\nDESCRIPTION: This snippet tests that a +incompatible suffix is not allowed on a version that is actually compatible. It uses go mod edit to add an invalid requirement and checks for the expected error message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_version.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncp go.mod.orig go.mod\ngo mod edit -require golang.org/x/text@v0.1.1-0.20170915032832-14c0d48ead0c+incompatible\ncd outside\n! go list -m golang.org/x/text\nstderr 'go: example.com@v0.0.0 requires\\n\\tgolang.org/x/text@v0.1.1-0.20170915032832-14c0d48ead0c\\+incompatible: invalid version: \\+incompatible suffix not allowed: major version v0 is compatible'\ncd ..\n! go list -m golang.org/x/text\nstderr 'golang.org/x/text@v0.1.1-0.20170915032832-14c0d48ead0c\\+incompatible: invalid version: \\+incompatible suffix not allowed: major version v0 is compatible'\n```\n\n----------------------------------------\n\nTITLE: Providing Module Metadata Using .info File - JSON\nDESCRIPTION: Specifies module version information in a standard Go module JSON metadata file (.info). The 'Version' key declares the module version (v1.0.0). Tools use this information to resolve and download the correct module versions. No other metadata fields are present.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_join_subpkg_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\\\"Version\\\": \\\"v1.0.0\\\"}\n```\n\n----------------------------------------\n\nTITLE: Testing Quote Functions in Go\nDESCRIPTION: Test suite for the quote package that verifies the output of each quote function. Contains test cases for Hello(), Glass(), Go(), and Opt() functions to ensure they return the expected strings.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.3.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage quote\n\nimport \"testing\"\n\nfunc TestHello(t *testing.T) {\n\thello := \"Hello, world.\"\n\tif out := Hello(); out != hello {\n\t\tt.Errorf(\"Hello() = %q, want %q\", out, hello)\n\t}\n}\n\nfunc TestGlass(t *testing.T) {\n\tglass := \"I can eat glass and it doesn't hurt me.\"\n\tif out := Glass(); out != glass {\n\t\tt.Errorf(\"Glass() = %q, want %q\", out, glass)\n\t}\n}\n\nfunc TestGo(t *testing.T) {\n\tgo1 := \"Don't communicate by sharing memory, share memory by communicating.\"\n\tif out := Go(); out != go1 {\n\t\tt.Errorf(\"Go() = %q, want %q\", out, go1)\n\t}\n}\n\nfunc TestOpt(t *testing.T) {\n\topt := \"If a program is too slow, it must have a loop.\"\n\tif out := Opt(); out != opt {\n\t\tt.Errorf(\"Opt() = %q, want %q\", out, opt)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Package Declaration\nDESCRIPTION: Main package declaration file defining the depofdirectpatch package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_depofdirectpatch_v1.0.1.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage depofdirectpatch\n```\n\n----------------------------------------\n\nTITLE: Input Template Section\nDESCRIPTION: Basic document template section with a Go homepage link reference\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/link3.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nDoc text.\n\n[Go home page]: https://go.dev\n```\n\n----------------------------------------\n\nTITLE: Linux User Namespace Support Structures in Go Syscall\nDESCRIPTION: Defines structures for UID/GID mapping in Linux user namespaces across multiple architectures (386, amd64, arm). Includes SysProcAttr struct with mapping fields and SysProcIDMap struct for ID mapping details.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_24\n\nLANGUAGE: Go\nCODE:\n```\ntype SysProcAttr struct {\n    UidMappings []SysProcIDMap\n    GidMappings []SysProcIDMap\n}\n\ntype SysProcIDMap struct {\n    ContainerID int\n    HostID int\n    Size int\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Resolution and Symlinks\nDESCRIPTION: This bash script tests Go module resolution, package importing, and symlink handling. It verifies that 'go get' resolves modules correctly, creates a symlinked copy of the module, and checks that the copy functions identically to the original.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_symlink.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=on\n[!symlink] skip\n\n# 'go get' should resolve modules of imported packages.\ngo get\ngo list -deps -f '{{.Module}}' .\nstdout golang.org/x/text\n\ngo get ./subpkg\ngo list -deps -f '{{.Module}}' ./subpkg\nstdout golang.org/x/text\n\n# Create a copy of the module using symlinks in src/links.\nmkdir links\nsymlink links/go.mod -> $GOPATH/src/go.mod\nsymlink links/go.sum -> $GOPATH/src/go.sum\nsymlink links/issue.go -> $GOPATH/src/issue.go\nmkdir links/subpkg\nsymlink links/subpkg/issue.go -> $GOPATH/src/subpkg/issue.go\n\n# We should see the copy as a valid module root.\ncd links\ngo env GOMOD\nstdout links[/\\\\]go.mod\ngo list -m\nstdout golang.org/issue/28107\n\n# The symlink-based copy should contain the same packages\n# and have the same dependencies as the original.\ngo list -deps -f '{{.Module}}' .\nstdout golang.org/x/text\ngo list -deps -f '{{.Module}}' ./subpkg\nstdout golang.org/x/text\n```\n\n----------------------------------------\n\nTITLE: Defining Go Toolchain Module Path\nDESCRIPTION: Specifies the full module path for a test Go toolchain package, including version and platform information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.plan9-386.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngolang.org/toolchain@v0.0.1-go1.999testmod.plan9-386\n```\n\n----------------------------------------\n\nTITLE: Non-Windows I/O Error Simulation Implementation\nDESCRIPTION: Platform-specific code for non-Windows systems that sends garbage data to the fuzzing coordinator. It writes invalid data to file descriptor 4 to simulate communication errors.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_io_error.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// +build !windows\n\npackage io_error\n\nimport (\n\t\"os\"\n\t\"testing\"\n)\n\nfunc sendGarbageToCoordinator(tb testing.TB) {\n\tf := os.NewFile(4, \"fuzz_out\")\n\tif _, err := f.Write([]byte(\"!!\"))); err != nil {\n\t\ttb.Fatalf(\"writing fuzz_out: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding custom identifier support to text/scanner package\nDESCRIPTION: Enhances the Scanner struct in the text/scanner package with an IsIdentRune function field, allowing for customization of what characters are considered valid in identifiers during scanning.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_32\n\nLANGUAGE: go\nCODE:\n```\ntype Scanner struct {\n    IsIdentRune func(int32, int) bool\n    // other fields not shown\n}\n```\n\n----------------------------------------\n\nTITLE: File Position Accessors - go/token Package - Go\nDESCRIPTION: Adds PositionFor methods to File and FileSet types in go/token. These accessors map a token position to a Position struct, optionally adjusting based on relativity. Useful for editors, linters, and tooling that require precise source mapping; input is a Pos (token position), and a boolean indicating relativity.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_12\n\nLANGUAGE: Go\nCODE:\n```\nmethod (*File) PositionFor(Pos, bool) Position\nmethod (*FileSet) PositionFor(Pos, bool) Position\n```\n\n----------------------------------------\n\nTITLE: Defining File Open Mode Constants in Go for Darwin ARM64\nDESCRIPTION: This snippet defines constants used for specifying file open modes and flags on Darwin ARM64. These are used with functions like open() to control how files are opened and accessed.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_166\n\nLANGUAGE: Go\nCODE:\n```\nconst O_ACCMODE = 3\nconst O_ALERT = 536870912\nconst O_APPEND = 8\nconst O_ASYNC = 64\nconst O_CLOEXEC = 16777216\nconst O_CREAT = 512\nconst O_DIRECTORY = 1048576\nconst O_DP_GETRAWENCRYPTED = 1\n```\n\n----------------------------------------\n\nTITLE: Testing pseudo-version resolution for v0.0.0\nDESCRIPTION: Fetches an early commit and verifies the pseudo-version format for v0.0.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo.txt#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ngo get ...test@52853eb\ngo list -m all\nstdout '^github.com/rsc/legacytest v0\\.0\\.0-\\d{14}-52853eb7b552$'\n```\n\n----------------------------------------\n\nTITLE: Module Declaration for b.com\nDESCRIPTION: Module declaration file for the replacement module b.com.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_replace_absolute_windows.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule b.com\n```\n\n----------------------------------------\n\nTITLE: Go Toolchain Module Path Definition\nDESCRIPTION: Specifies the fully qualified module path for a test Go toolchain with version and platform information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-386.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngolang.org/toolchain@v0.0.1-go1.999testmod.openbsd-386\n```\n\n----------------------------------------\n\nTITLE: Defining Toolchain Module Path in go.mod (Text)\nDESCRIPTION: This plain text snippet represents the content of a minimal `go.mod` file, declaring the module path (`golang.org/toolchain`). This indicates the module identifier for the Go toolchain package itself.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.22.9.linux-amd64.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ngolang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Building Go Module\nDESCRIPTION: This snippet outlines the process of building a Go module with platform-specific conditions. The dependency on the Go command-line tool is required. It demonstrates the use of conditional directives to skip builds on the Windows operating system.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/embed_brackets.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n# issue 53314\\n[GOOS:windows] skip\\ncd [pkg]\\ngo build\n```\n\nLANGUAGE: Go\nCODE:\n```\n-- [pkg]/go.mod --\\nmodule m\\n\\ngo 1.19\n```\n\n----------------------------------------\n\nTITLE: Testing Restricted Internal Package Import in Go\nDESCRIPTION: A Go file that attempts to import a restricted internal package from another module, which should fail due to Go's access control rules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_internal.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\nimport _ \"m/x/internal\"\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Handling Version Constraints with GOTOOLCHAIN\nDESCRIPTION: This snippet shows how version constraints are enforced when GOTOOLCHAIN is set to 'local'. It demonstrates an attempt to upgrade Go version that fails due to version incompatibility.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_toolchain.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nenv TESTGO_VERSION=go1.22.1\nenv GOTOOLCHAIN=local\n! go get go@1.22.3\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Path - go.mod (Plain Text)\nDESCRIPTION: This snippet contains the module path declaration for the Go toolchain project, essential for setting the module context in Go's dependency management system. By specifying 'golang.org/toolchain' as the module path, it informs the Go tooling where the root of the module is, which is critical for build and dependency resolution. No version is specified in this format; it relies on surrounding files such as go.mod or version tags for version information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.18.3.linux-amd64.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ngolang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Testing Quote Functions in Go\nDESCRIPTION: Contains unit tests for the three functions in the 'quote' package. Each test verifies that the corresponding function returns the expected string value, using Go's testing package to assert the correct output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.2.1.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n// Copyright 2018 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\npackage quote\n\nimport \"testing\"\n\nfunc TestHello(t *testing.T) {\n\thello := \"Hello, world.\"\n\tif out := Hello(); out != hello {\n\t\tt.Errorf(\"Hello() = %q, want %q\", out, hello)\n\t}\n}\n\nfunc TestGlass(t *testing.T) {\n\tglass := \"I can eat glass and it doesn't hurt me.\"\n\tif out := Glass(); out != glass {\n\t\tt.Errorf(\"Glass() = %q, want %q\", out, glass)\n\t}\n}\n\nfunc TestGo(t *testing.T) {\n\tgo1 := \"Don't communicate by sharing memory, share memory by communicating.\"\n\tif out := Go(); out != go1 {\n\t\tt.Errorf(\"Go() = %q, want %q\", out, go1)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Module Info for a Specific Pseudo-Version in Tiny Proxy\nDESCRIPTION: Defines the content of the file '$WORK/tinyproxy/dmitri.shuralyov.com/test/modtest3/@v/v0.0.0-20181023043359-a85b471d5412.info'. This JSON file simulates the metadata (Version and Time) provided by a module proxy for a specific pseudo-version of 'modtest3'. This information is used by the 'go list' command during 'latest' resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_pseudo.txt#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n-- $WORK/tinyproxy/dmitri.shuralyov.com/test/modtest3/@v/v0.0.0-20181023043359-a85b471d5412.info --\n{\n\t\"Version\": \"v0.0.0-20181023043359-a85b471d5412\",\n\t\"Time\": \"2018-10-22T21:33:59-07:00\"\n}\n```\n\n----------------------------------------\n\nTITLE: Import Path Testing Commands\nDESCRIPTION: Shell commands for testing Go package import paths and mappings, including verification of standard packages and vendor directory mappings\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_importmap.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=off\n\n# gccgo does not have standard packages.\n[compiler:gccgo] skip\n\n# fmt should have no rewritten imports.\n# The import from a/b should map c/d to a's vendor directory.\ngo list -f '{{.ImportPath}}: {{.ImportMap}}' fmt a/b\nstdout 'fmt: map[]'\nstdout 'a/b: map[c/d:a/vendor/c/d]'\n\n# flag [fmt.test] should import fmt [fmt.test] as fmt\n# fmt.test should import testing [fmt.test] as testing\n# fmt.test should not import a modified os\ngo list -deps -test -f '{{.ImportPath}} MAP: {{.ImportMap}}{{\"\\n\"}}{{.ImportPath}} IMPORT: {{.Imports}}' fmt\nstdout '^flag \\[fmt\\.test\\] MAP: map\\[fmt:fmt \\[fmt\\.test\\]\\]'\nstdout '^fmt\\.test MAP: map\\[(.* )?testing:testing \\[fmt\\.test\\]'\n! stdout '^fmt\\.test MAP: map\\[(.* )?os:'\nstdout '^fmt\\.test IMPORT: \\[fmt \\[fmt\\.test\\] fmt_test \\[fmt\\.test\\] os reflect testing \\[fmt\\.test\\] testing/internal/testdeps \\[fmt\\.test\\]\\]'\n```\n\n----------------------------------------\n\nTITLE: Controlling Type Alias Representation using gotypesalias GODEBUG Setting (Go 1.22)\nDESCRIPTION: Introduced in Go 1.22, this setting controls whether the go/types package produces the explicit go/types.Alias type for type aliases. The default for Go 1.22 is gotypesalias=0 (disabled). It will default to 1 in Go 1.23 and is planned for removal in Go 1.27 or later. Set via GODEBUG environment variable (e.g., GODEBUG=gotypesalias=1 to enable).\nSOURCE: https://github.com/golang/go/blob/master/doc/godebug.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\ngotypesalias\n```\n\n----------------------------------------\n\nTITLE: Defining Terminal and Network Interface Constants for Darwin ARM64 in Go\nDESCRIPTION: This snippet defines constants related to terminal settings and network interfaces for the Darwin ARM64 architecture. These constants are used in system calls for configuring terminals and network devices.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_63\n\nLANGUAGE: Go\nCODE:\n```\nconst HUPCL = 16384\nconst ICANON = 256\nconst ICMP6_FILTER = 18\nconst ICRNL = 256\nconst IEXTEN = 1024\nconst IFF_ALLMULTI = 512\nconst IFF_ALTPHYS = 16384\nconst IFF_DEBUG = 4\nconst IFF_LINK0 = 4096\nconst IFF_LINK1 = 8192\nconst IFF_LINK2 = 16384\nconst IFF_LOOPBACK = 8\nconst IFF_MULTICAST = 32768\nconst IFF_NOARP = 128\nconst IFF_NOTRAILERS = 32\nconst IFF_OACTIVE = 1024\nconst IFF_POINTOPOINT = 16\nconst IFF_PROMISC = 256\nconst IFF_RUNNING = 64\nconst IFF_SIMPLEX = 2048\nconst IFNAMSIZ = 16\n```\n\n----------------------------------------\n\nTITLE: Configuring Parallelism in Go Benchmarks - Go\nDESCRIPTION: Exposes the SetParallelism method on the testing.B type in Go's standard library. This method sets the number of goroutines used during parallel benchmark execution, allowing control over concurrent work by specifying the desired parallelism as an integer parameter. For correct results, the method should be used before running benchmark logic, and improper use may lead to misleading benchmark numbers.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_64\n\nLANGUAGE: Go\nCODE:\n```\npkg testing, method (*B) SetParallelism(int)\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Basic Go module definition for the noplttest package\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_ppc64le_cgo_inline_plt.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule noplttest\n```\n\n----------------------------------------\n\nTITLE: Providing Module Version Metadata as JSON - JSON\nDESCRIPTION: Encapsulates the module's version metadata using a JSON object, which is typically used by Go tooling for version tracking and module resolution. The 'Version' key specifies the exact module version, critical for dependency management and reproducible builds. The file requires no dependencies, accepts no parameters, and expects to be read by tooling rather than end users.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.darwin-amd64.txt#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\\\"Version\\\":\\\"v0.0.1-go1.999testmod.darwin-amd64\\\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing Package 'p' with Dependency (Go)\nDESCRIPTION: This Go file defines the 'p' package within the 'coverdep' module. It imports the local package 'p1' using the blank identifier (`_`), typically done to execute 'p1's init functions, potentially for registration or setup related to coverage. It also defines an empty function 'F' which is called by the test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_dash_c.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n-- p.go --\npackage p\n\nimport _ \"coverdep/p1\"\n\nfunc F() {\n}\n```\n\n----------------------------------------\n\nTITLE: Module Definition\nDESCRIPTION: Defines a Go module named 'm' with Go version 1.16\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_import_comment.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Testing Go Build Cache with Symlinks\nDESCRIPTION: Shell script that verifies Go's build cache remains valid when accessing the distribution through a symlink. Tests the 'net' package for staleness after creating symlinks and modifying GOROOT environment variable.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_move_not_stale.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo build net\n! stale net\n\nsymlink new -> $GOROOT\nenv OLDGOROOT=$GOROOT\nenv GOROOT=$WORK${/}gopath${/}src${/}new\ngo env GOROOT\nstdout $WORK[\\/]gopath[\\/]src[\\/]new\ncd new\n! stale net\n\nenv GOCACHE=$WORK${/}gopath${/}cache\nstale net\n```\n\n----------------------------------------\n\nTITLE: Testing Multiple Module Paths in Go\nDESCRIPTION: Attempts to vendor a module used with two different paths, expecting an error.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_replace.txt#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncd multiple-paths\n! go mod vendor\nstderr 'rsc.io/quote/v3@v3.0.0 used for two different module paths \\(not-rsc.io/quote/v3 and rsc.io/quote/v3\\)'\n```\n\n----------------------------------------\n\nTITLE: Indirect Package with Dependency Chain\nDESCRIPTION: Go package that imports another package which has a missing dependency, used to test indirect dependency error handling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_bad_import.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage indirect\nimport _ \"example.com/direct\"\n```\n\n----------------------------------------\n\nTITLE: Testing 'go tool dist' Command in Shell Script\nDESCRIPTION: The script sets up an environment where the 'dist' tool is missing, then tests the behavior of the 'go tool dist list' command with various flags to verify its output. The expected output is checked against the created files. It also compares the results with outputs from the actual compiled 'dist' executable. Dependencies include the Go environment properly set up with access to GOOS and GOARCH variables.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/dist_list_missing.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Regression test for #60939: when 'go tool dist' is missing,\n# 'go tool dist list' should inject its output.\n\n\n# Set GOROOT to a directory that definitely does not include\n# a compiled 'dist' tool. 'go tool dist list' should still\n# work, because 'cmd/go' itself can impersonate this command.\n\nmkdir $WORK/goroot/bin\nmkdir $WORK/goroot/pkg/tool/${GOOS}_${GOARCH}\nenv GOROOT=$WORK/goroot\n\n! go tool -n dist\nstderr 'go: no such tool \"dist\"'\n\ngo tool dist list\nstdout linux/amd64\ncp stdout tool.txt\n\ngo tool dist list -v\nstdout linux/amd64\ncp stdout tool-v.txt\n\ngo tool dist list -broken\nstdout $GOOS/$GOARCH\ncp stdout tool-broken.txt\n\ngo tool dist list -json\nstdout '\"GOOS\": \"linux\",\\n\\s*\"GOARCH\": \"amd64\",\\n'\ncp stdout tool-json.txt\n\ngo tool dist list -json -broken\nstdout '\"GOOS\": \"'$GOOS'\",\\n\\s*\"GOARCH\": \"'$GOARCH'\",\\n'\ncp stdout tool-json-broken.txt\n\n[short] stop\n\n\n# Check against the real cmd/dist as the source of truth.\n\nenv GOROOT=$TESTGO_GOROOT\ngo build -o dist.exe cmd/dist\n\nexec ./dist.exe list\ncmp stdout tool.txt\n\nexec ./dist.exe list -v\ncmp stdout tool-v.txt\n\nexec ./dist.exe list -broken\ncmp stdout tool-broken.txt\n\nexec ./dist.exe list -json\ncmp stdout tool-json.txt\n\nexec ./dist.exe list -json -broken\ncmp stdout tool-json-broken.txt\n```\n\n----------------------------------------\n\nTITLE: Enforcing Cgo File Naming Conventions in Go\nDESCRIPTION: This snippet showcases the rejection of Go files with names starting with an underscore when compiling with the Go compiler. The test ensures such files do not bypass naming conventions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_bad_directives.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage x\n\n//go:cgo_ldflag \"-fplugin=foo.so\"\n\nimport \"C\"\n```\n\n----------------------------------------\n\nTITLE: Minimal Go module definition\nDESCRIPTION: A Go module definition file that creates a module named 'bench' with Go 1.16 as the requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_benchmark_labels.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule bench\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Representing an Empty Function in Go SSA\nDESCRIPTION: Illustrates the SSA representation of an empty Go function. The example shows a single block with InitMem and Ret operations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/internal/ssa/README.md#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nfoo func()\n  b1:\n    v1 = InitMem <mem>\n    Ret v1\n```\n\n----------------------------------------\n\nTITLE: Listing Modules in Go\nDESCRIPTION: This shell command lists all modules in a Go project using a specified module definition file. It requires Go to be installed and the current directory to contain a valid go.mod file. Inputs include a go.mod file, and the output lists modules. Not applicable to non-root modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badmod.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo list -m -mod=mod all\n```\n\n----------------------------------------\n\nTITLE: Go Environment File Configuration - Path B\nDESCRIPTION: Environment variable configuration file for path ./b/go.env setting local toolchain\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_changed.txt#2025-04-22_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nGOTOOLCHAIN=local\n```\n\n----------------------------------------\n\nTITLE: Go Module Test Environment Setup\nDESCRIPTION: Sets up the test environment with GO111MODULE=on to enable module mode for all subsequent commands.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goroot_errors.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=on\n```\n\n----------------------------------------\n\nTITLE: Defining a Trivial Go Module\nDESCRIPTION: A go.mod file defining a simple module named \"triv\" using Go 1.16. This provides the module context for the installation test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_relative_gobin_fail.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule triv\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Command B Implementation\nDESCRIPTION: Main package implementing command 'b' that prints version-specific output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_cmd_v1.0.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() { fmt.Println(\"b@v1.0.0\") }\n```\n\n----------------------------------------\n\nTITLE: Unused module definition\nDESCRIPTION: Module definition for 'example.com/unused', which is an indirect dependency of the main module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_patterns.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/unused\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Replacement Deprecation Scenarios - Bash\nDESCRIPTION: These bash command groups simulate different Go module replacement behaviors by preparing the working go.mod, invoking go list with specific templating to output deprecation info, and verifying output lines. The commands depend on a working Go installation and the test framework. Inputs include various go.mod templates and expect certain patterns in stdout. Outputs are verified against regexes ensuring proper treatment of deprecated modules in different replacement situations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_deprecated_replace.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# When all versions are replaced, we should not look up a deprecation message.\n# We will still look up a deprecation message for the replacement.\ncp go.mod.allreplaced go.mod\ngo list -m -u -f '{{.Path}}@{{.Version}} <{{.Deprecated}}>{{with .Replace}} => {{.Path}}@{{.Version}} <{{.Deprecated}}>{{end}}' all\nstdout '^example.com/deprecated/a@v1.0.0 <> => example.com/deprecated/b@v1.0.0 <in example.com/deprecated/b@v1.9.0>$'\n\n# When one version is replaced, we should see a deprecation message.\ncp go.mod.onereplaced go.mod\ngo list -m -u -f '{{.Path}}@{{.Version}} <{{.Deprecated}}>{{with .Replace}} => {{.Path}}@{{.Version}} <{{.Deprecated}}>{{end}}' all\nstdout '^example.com/deprecated/a@v1.0.0 <in example.com/deprecated/a@v1.9.0> => example.com/deprecated/b@v1.0.0 <in example.com/deprecated/b@v1.9.0>$'\n\n# If the replacement is a directory, we won't look that up.\ncp go.mod.dirreplacement go.mod\ngo list -m -u -f '{{.Path}}@{{.Version}} <{{.Deprecated}}>{{with .Replace}} => {{.Path}}@{{.Version}} <{{.Deprecated}}>{{end}}' all\nstdout '^example.com/deprecated/a@v1.0.0 <> => ./a@ <>$'\n\n# If the latest version of the replacement is replaced, we'll use the content\n# from that replacement.\ncp go.mod.latestreplaced go.mod\ngo list -m -u -f '{{.Path}}@{{.Version}} <{{.Deprecated}}>{{with .Replace}} => {{.Path}}@{{.Version}} <{{.Deprecated}}>{{end}}' all\nstdout '^example.com/deprecated/a@v1.0.0 <> => example.com/deprecated/b@v1.0.0 <in ./b>$'\n\n```\n\n----------------------------------------\n\nTITLE: Main Package with Vendor Import\nDESCRIPTION: Main Go file importing vendored strings package to demonstrate package replacement behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_vendor.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\" // really ../vendor/strings\n)\n\nfunc main() {\n\tfmt.Printf(\"%s\\n\", strings.Msg)\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Generate for Various Scenarios\nDESCRIPTION: A series of test commands using 'go generate' to check its behavior in different situations, including directories without Go files, non-existent modules, and files with build constraints.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/generate_invalid.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n! go generate ./nogo\n! stdout 'Fail'\nstderr 'no Go files'\n\n! go generate foo.bar/nothing\nstderr 'no required module provides package foo.bar/nothing'\n\ngo generate -v ./excluded\n! stdout 'Fail'\n! stderr 'go'\n\ngo generate ./nopkg\nstdout 'Success a'\n! stdout 'Fail'\n\ngo generate ./inconsistent\nstdout 'Success a'\nstdout 'Success b'\nstdout -count=2 'Success c'\n! stdout 'Fail'\n\ngo generate ./syntax\nstdout 'Success a'\nstdout 'Success b'\n! stdout 'Fail'\n\ngo generate ./importerr\nstdout 'Success a'\nstdout 'Success b'\nstdout 'Success c'\n```\n\n----------------------------------------\n\nTITLE: Setting Go Module Environment Variable (Shell)\nDESCRIPTION: Sets the GO111MODULE environment variable to 'on', explicitly enabling Go module support for the subsequent commands in the script. This ensures the script operates in module-aware mode.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badchain.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n```\n\n----------------------------------------\n\nTITLE: Testing Go Get Help Output\nDESCRIPTION: Checks the help documentation for the go get command, ensuring it shows usage information and module version details\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/help.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngo help get\nstdout 'usage: go get'\nstdout 'specific module versions'\n```\n\n----------------------------------------\n\nTITLE: Main Package Assembly Implementation\nDESCRIPTION: Assembly code for main package implementing Func1, BigAsm, and Func2 with specific spacing using NOP instructions to test trampoline placement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/trampoline_reuse_test.txt#2025-04-22_snippet_1\n\nLANGUAGE: assembly\nCODE:\n```\nTEXT main·Func1(SB),0,$0-0\n        CALL bar·Bar+0x400(SB)\n        CALL main·BigAsm(SB)\n\n#define NOP64 DWORD $0; DWORD $0; DWORD $0; DWORD $0; DWORD $0; DWORD $0; DWORD $0; DWORD $0;\n#define NOP256 NOP64 NOP64 NOP64 NOP64\n#define NOP2S10 NOP256 NOP256 NOP256 NOP256\n#define NOP2S12 NOP2S10 NOP2S10 NOP2S10 NOP2S10\n#define NOP2S14 NOP2S12 NOP2S12 NOP2S12 NOP2S12\n#define NOP2S16 NOP2S14 NOP2S14 NOP2S14 NOP2S14\n#define NOP2S18 NOP2S16 NOP2S16 NOP2S16 NOP2S16\n#define NOP2S20 NOP2S18 NOP2S18 NOP2S18 NOP2S18\n#define NOP2S22 NOP2S20 NOP2S20 NOP2S20 NOP2S20\n#define NOP2S24 NOP2S22 NOP2S22 NOP2S22 NOP2S22\n#define BIGNOP NOP2S24 NOP2S24\nTEXT main·BigAsm(SB),0,$0-0\n        BIGNOP\n        MOVD $main·Func2(SB), R3\n\nTEXT main·Func2(SB),0,$0-0\n        CALL bar·Bar+0x400(SB)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating nil Panic in Go\nDESCRIPTION: A simple Go program that demonstrates how to trigger a panic with a nil value, which is a specific use case in Go error handling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_panicnil_v1.1.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {\n\tpanic(nil)\n}\n```\n\n----------------------------------------\n\nTITLE: Multiline Module Implementation\nDESCRIPTION: Implements a simple package for the 'multiline' module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_deprecate_message.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage multiline\n```\n\n----------------------------------------\n\nTITLE: Function Implementation for Package 'x' in Go\nDESCRIPTION: Package 'x' with a simple XFunc function that returns the result of 2 * 2.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_multipkg.txt#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\npackage x\n\nfunc XFunc() int {\n\treturn 2 * 2\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Toolchain Metadata - JSON\nDESCRIPTION: This snippet provides a JSON object containing the version specification for the Go toolchain. It's typically used as part of Go module proxy infrastructure or custom Go toolchain management. The 'Version' property denotes the toolchain version string; the structure is intended to be parsed by automated tooling to identify the association with a specific toolchain build.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.18.linux-amd64.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\\"Version\\\":\\\"v0.0.1-go1.18.linux-amd64\\\"}\n```\n\n----------------------------------------\n\nTITLE: Creating empty package file\nDESCRIPTION: Creates an empty Go file to define the package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test_cached.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\npackage foo\n```\n\n----------------------------------------\n\nTITLE: Testing go mod edit with alternate file\nDESCRIPTION: Adds a requirement to the alternate go.mod file using go mod edit and verifies the change.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/modfile_flag.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo mod edit -require rsc.io/quote@v1.5.2\ngrep rsc.io/quote go.alt.mod\n```\n\n----------------------------------------\n\nTITLE: Defining a Valid Go Package - Go\nDESCRIPTION: This snippet creates a valid Go package named 'goodpkg' by declaring its package name at the top of the file. This setup is used by the test to validate proper package wildcard listing. The file does not output anything by itself and expects Go tooling to process it in the context of the project structure. No additional dependencies other than Go are needed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_wildcard_skip_nonmatching.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n-- goodpkg/x.go --\\npackage goodpkg\\n\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition for Fuzzing Tests\nDESCRIPTION: Go module definition file specifying module name and Go version requirements for the fuzzing tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_minimize_interesting.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule fuzz\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: Listing Packages with Vendor Mode in Go\nDESCRIPTION: Uses 'go list -mod=vendor' to list packages using the vendored dependencies instead of the module cache.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_build.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngo list -mod=vendor\n```\n\n----------------------------------------\n\nTITLE: CGO Integration with No-PLT Test\nDESCRIPTION: Main program that tests CGO integration with a C function compiled with -fno-plt. Includes a C function that prints 'helloworld' and a Go main function that calls it.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_ppc64le_cgo_inline_plt.txt#2025-04-22_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#include <stdio.h>\nvoid helloworld(void) {\n   printf(\"helloworld\\n\");\n   fflush(stdout);\n}\n```\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\n/*\n#include <stdio.h>\nvoid helloworld(void) {\n   printf(\"helloworld\\n\");\n   fflush(stdout);\n}\n*/\nimport \"C\"\n\nfunc main() {\n\tC.helloworld()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Main Go Module with Replacement (Go Module)\nDESCRIPTION: This `go.mod` file defines the main module `example.com/m` for the test setup. It specifies Go version 1.16 and includes a `replace` directive to map the module path `example.net/cmd` to a local directory `./cmd`. This is used by the test scripts to resolve the dependency locally.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_path_plus.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n-- go.mod.orig --\nmodule example.com/m\n\ngo 1.16\n\nreplace (\n\texample.net/cmd => ./cmd\n)\n```\n\n----------------------------------------\n\nTITLE: Language Preference Management in Go\nDESCRIPTION: Functions for managing user language preferences, including environment variable-based defaults and text lookup based on preferences.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.3.1.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc DefaultUserPrefs() []language.Tag {\n\tvar prefs []language.Tag\n\tfor _, k := range []string{\"LC_ALL\", \"LC_MESSAGES\", \"LANG\"} {\n\t\tif env := os.Getenv(k); env != \"\" {\n\t\t\tprefs = append(prefs, language.Make(env))\n\t\t}\n\t}\n\treturn prefs\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Event Filter Constants for Darwin ARM64 in Go\nDESCRIPTION: This snippet defines constants for event filter types used in kernel queues (kqueue) on Darwin ARM64. These constants are used to specify the type of events to monitor in system calls.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_59\n\nLANGUAGE: Go\nCODE:\n```\nconst EVFILT_AIO = -3\nconst EVFILT_AIO ideal-int\nconst EVFILT_FS = -9\nconst EVFILT_FS ideal-int\nconst EVFILT_MACHPORT = -8\nconst EVFILT_MACHPORT ideal-int\nconst EVFILT_PROC = -5\nconst EVFILT_PROC ideal-int\n// ... more event filter constants ...\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Debug Settings with Shell Commands\nDESCRIPTION: A comprehensive shell script that tests Go module behavior with different configurations of go.mod files and workspaces, focusing on panicnil and randautoseed debug settings between Go 1.20 and 1.21 versions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/godebug_default.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\nenv GOTRACEBACK=single\n\n# Go 1.21 work module should leave panicnil with an implicit default.\ncp go.mod.21 go.mod\ngo list -f '{{.Module.GoVersion}} {{.DefaultGODEBUG}}'\n! stdout panicnil\nstdout randautoseed=0\n\n# Go 1.21 work module should NOT set panicnil=1 in Go 1.20 dependency.\ncp go.mod.21 go.mod\ngo list -f '{{.Module.GoVersion}} {{.DefaultGODEBUG}}' q\n! stdout panicnil=1\n! stdout randautoseed\n\ngo mod download rsc.io/panicnil # for go.sum\ngo list -f '{{.Module.GoVersion}} {{.DefaultGODEBUG}}' rsc.io/panicnil\n! stdout panicnil=1\n! stdout randautoseed\n\n# Go 1.20 work module should set panicnil=1.\ncp go.mod.20 go.mod\ngo list -f '{{.Module.GoVersion}} {{.DefaultGODEBUG}}'\nstdout panicnil=1\nstdout randautoseed=0\n\n# Go 1.20 work module should set panicnil=1 in Go 1.20 dependency.\ncp go.mod.20 go.mod\ngo list -f '{{.Module.GoVersion}} {{.DefaultGODEBUG}}' q\nstdout panicnil=1\n! stdout randautoseed\n\n# Go 1.21 workspace should leave panicnil with an implicit default.\ncat q/go.mod\ncp go.work.21 go.work\ngo list -f '{{.Module.GoVersion}} {{.DefaultGODEBUG}}'\n! stdout panicnil\nstdout randautoseed=0\nrm go.work\n\n# Go 1.20 workspace with Go 1.21 module cannot happen.\ncp go.work.20 go.work\ncp go.mod.21 go.mod\n! go list -f '{{.Module.GoVersion}} {{.DefaultGODEBUG}}'\nstderr 'go: module . listed in go.work file requires go >= 1.21'\nrm go.work\n\n# Go 1.21 go.mod with godebug default=go1.20\nrm go.work\ncp go.mod.21 go.mod\ngo mod edit -godebug default=go1.20 -godebug asynctimerchan=0\ngo list -f '{{.Module.GoVersion}} {{.DefaultGODEBUG}}'\nstdout panicnil=1\nstdout asynctimerchan=0\n\n# Go 1.21 go.work with godebug default=go1.20\ncp go.work.21 go.work\ngo list -f '{{.Module.GoVersion}} {{.DefaultGODEBUG}}'\n! stdout panicnil # go.work wins\nstdout asynctimerchan=1 # go.work wins\ngo work edit -godebug default=go1.20 -godebug asynctimerchan=0\ngo list -f '{{.Module.GoVersion}} {{.DefaultGODEBUG}}'\nstdout panicnil=1\nstdout asynctimerchan=0\nrm go.work\n\n# Go 1.21 go.mod with //go:debug default=go1.20 in program\ncp go.mod.21 go.mod\ngo list -tags godebug -f '{{.Module.GoVersion}} {{.DefaultGODEBUG}}'\nstdout panicnil=1\nstdout asynctimerchan=0\n\n# Invalid //go:debug line should be diagnosed at build.\n! go build -tags godebugbad\nstderr 'invalid //go:debug: value contains space'\n\n[short] skip\n\n# Programs in Go 1.21 work module should trigger run-time error.\ncp go.mod.21 go.mod\n! go run .\nstderr 'panic: panic called with nil argument'\n\n! go run rsc.io/panicnil\nstderr 'panic: panic called with nil argument'\n\n# Programs in Go 1.20 work module use old panic nil behavior.\ncp go.mod.20 go.mod\n! go run .\nstderr 'panic: nil'\n\n! go run rsc.io/panicnil\nstderr 'panic: nil'\n\n# Programs in no module at all should use their go.mod file.\nrm go.mod\n! go run rsc.io/panicnil@v1.0.0\nstderr 'panic: nil'\n\nrm go.mod\n! go run rsc.io/panicnil@v1.1.0\nstderr 'panic: panic called with nil argument'\n```\n\n----------------------------------------\n\nTITLE: Providing Module Version Metadata - JSON\nDESCRIPTION: This snippet provides metadata about the module version in JSON format. It specifies the module's version as 'v1.0.1'. This is typically generated by Go tooling for module versioning and distribution, and it contains no other metadata or dependency information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_noroot_v1.0.1.txt#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\\\"Version\\\":\\\"v1.0.1\\\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module\nDESCRIPTION: A simple Go module definition file (go.mod) that declares the module name as 'x'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_tags.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule x\n```\n\n----------------------------------------\n\nTITLE: Defining Empty Go Package for Retraction\nDESCRIPTION: An empty Go file that declares the package name as 'retract'. This file serves as the main package file for the module and would typically contain the implementation related to module retraction functionality.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_v1.0.0-unused.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage retract\n```\n\n----------------------------------------\n\nTITLE: Implementing badsum Package with Intentional Hash Break (Go)\nDESCRIPTION: This Go file implements the badsum package. It includes a comment 'break hash' which is intended to alter the module's hash, likely for testing purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badsum_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage badsum\n// break hash\n```\n\n----------------------------------------\n\nTITLE: Testing GO111MODULE=off Module Resolution in Go\nDESCRIPTION: Tests GO111MODULE=off behavior which should disable module mode entirely. This verifies that no go.mod files are detected regardless of their presence in the directory structure.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_enabled.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=off\n\ncd $GOPATH/src/x/y/z\ngo env GOMOD\n! stdout .+\n\ncd $GOPATH/foo\ngo env GOMOD\n! stdout .+\n\ncd $GOPATH/foo/bar/baz\ngo env GOMOD\n! stdout .+\n```\n\n----------------------------------------\n\nTITLE: Defining Package P in Module Version 0.2.0\nDESCRIPTION: This Go file defines package 'p' which only exists in version 0.2.0 of the module. It's used to test the behavior of 'go get' when requesting a package that exists only in a specific version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue37438.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n// Package p exists only at v0.2.0.\npackage p\n```\n\n----------------------------------------\n\nTITLE: Creating initial commit with tagging\nDESCRIPTION: Creates the first commit with cmd directory, renames the default branch to main, and tags the commit as v0.1.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/issue47650.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nat 2021-08-11T13:52:00-04:00\ngit add cmd\ngit commit -m 'add cmd/issue47650'\ngit branch -m main\ngit tag v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Malicious Shell Script for Exploit Test\nDESCRIPTION: This shell script, named 'run.sh', prints 'RAN SCRIPT' and exits with status 1. It's used to verify if the exploit allows arbitrary script execution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_toolchain_slash.txt#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n#!/bin/sh\nprintf 'RAN SCRIPT\\n'\nexit 1\n```\n\n----------------------------------------\n\nTITLE: Git Environment Configuration\nDESCRIPTION: Sets up Git author and committer information using environment variables\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/gitrepo1.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GIT_AUTHOR_NAME='Russ Cox'\nenv GIT_AUTHOR_EMAIL='rsc@golang.org'\nenv GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME\nenv GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL\n```\n\n----------------------------------------\n\nTITLE: Main Package with Import of Module 'a'\nDESCRIPTION: The main Go package that imports module 'a' but doesn't use it directly (blank import). This file is part of the test case to trigger module resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_tidy.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport _ \"a\"\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: TestMain Function with Flag Handling in Go\nDESCRIPTION: This snippet demonstrates a TestMain function that accesses testing flags. It parses flags and checks for the presence of a specific testing flag (test.count) to ensure proper flag registration.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_main.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage standalone_testmain_flag_test\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"os\"\n\t\"testing\"\n)\n\nfunc TestMain(m *testing.M) {\n\t// A TestMain should be able to access testing flags if it calls\n\t// flag.Parse without needing to use testing.Init.\n\tflag.Parse()\n\tfound := false\n\tflag.VisitAll(func(f *flag.Flag) {\n\t\tif f.Name == \"test.count\" {\n\t\t\tfound = true\n\t\t}\n\t})\n\tif !found {\n\t\tfmt.Println(\"testing flags not registered\")\n\t\tos.Exit(1)\n\t}\n\tos.Exit(m.Run())\n}\n```\n\n----------------------------------------\n\nTITLE: Root Module Implementation with Imports\nDESCRIPTION: The main package of module 'm' that imports both 'm/a' and 'm/b' packages, starting the import chain that will eventually form a cycle.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_cycle.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage m\nimport (\n\t_ \"m/a\"\n\t_ \"m/b\"\n)\n```\n\n----------------------------------------\n\nTITLE: Go Test File Structure\nDESCRIPTION: Basic Go test file containing three test functions and three benchmark functions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_shuffle.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage foo\n\nimport \"testing\"\n\nfunc TestOne(t *testing.T)   {}\nfunc TestTwo(t *testing.T)   {}\nfunc TestThree(t *testing.T) {}\n\nfunc BenchmarkOne(b *testing.B)   {}\nfunc BenchmarkTwo(b *testing.B)   {}\nfunc BenchmarkThree(b *testing.B) {}\n```\n\n----------------------------------------\n\nTITLE: Testing CGO_ENABLED with Default Settings in Go\nDESCRIPTION: This snippet checks the default CGO_ENABLED setting on a system that can normally enable cgo. It uses the 'go env' command to verify the value.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/autocgo.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv CGO_ENABLED=\ngo env CGO_ENABLED\nstdout 1\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Dependency Management with Wildcard Pattern\nDESCRIPTION: This snippet tests 'go get -u' behavior with a wildcard pattern. It demonstrates a known issue where a module (example.net/c) is added despite not being explicitly requested.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_extra.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncp go.mod.orig go.mod\n\ngo get -u example.net/a@v0.1.0 example.net/b/...@v0.1.0\ngo list -m all\nstdout '^example.net/a v0.1.0 '\nstdout '^example.net/b v0.1.0 '\nstdout '^example.net/c '  # BUG, but a minor and rare one\n```\n\n----------------------------------------\n\nTITLE: Testing Go Doc Command Examples in Shell\nDESCRIPTION: This collection of shell snippets tests various permutations of the 'go doc' command, examining documentation retrieval for packages, symbols, and methods across a series of valid and invalid cases.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/doc.txt#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# go doc <pkg>\ngo doc p/v2\nstdout .\n```\n\nLANGUAGE: sh\nCODE:\n```\n# go doc <pkg> <sym>\ngo doc p/v2 Symbol\nstdout .\n```\n\nLANGUAGE: sh\nCODE:\n```\n# go doc <pkg> <sym> <method>\n! go doc p/v2 Symbol Method\nstderr .\n```\n\nLANGUAGE: sh\nCODE:\n```\n# go doc <pkg>.<sym>\ngo doc p/v2.Symbol\nstdout .\n```\n\nLANGUAGE: sh\nCODE:\n```\n# go doc <pkg>.<sym>.<method>\ngo doc p/v2.Symbol.Method\nstdout .\n```\n\nLANGUAGE: sh\nCODE:\n```\n# go doc <sym>\ngo doc Symbol\nstdout .\n```\n\nLANGUAGE: sh\nCODE:\n```\n# go doc <sym> <method>\n! go doc Symbol Method\nstderr .\n```\n\nLANGUAGE: sh\nCODE:\n```\n# go doc <sym>.<method>\ngo doc Symbol.Method\nstdout .\n```\n\nLANGUAGE: sh\nCODE:\n```\n# go doc <pkg>.<method>\ngo doc p/v2.Method\nstdout .\n```\n\nLANGUAGE: sh\nCODE:\n```\n# go doc <pkg> <method>\ngo doc p/v2 Method\nstdout .\n```\n\nLANGUAGE: sh\nCODE:\n```\n# go doc <method>\ngo doc Method\nstdout .\n```\n\n----------------------------------------\n\nTITLE: Testing Import of 'all' Meta-Package in Go\nDESCRIPTION: This snippet tests the import of the 'all' meta-package in Go. It expects the command to fail and produce a specific error message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_meta.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n! go list -deps ./importall\n! stderr 'internal error'\nstderr '^importall[/\\\\]x.go:3:8: \"all\" is not an importable package; see ''go help packages''$'\n```\n\n----------------------------------------\n\nTITLE: Testing Multiple Anchors in Go Regexps\nDESCRIPTION: Tests patterns with multiple adjacent anchors without any other elements between them. These tests verify how the regex engine handles consecutive anchors with empty matches.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_22\n\nLANGUAGE: regexp\nCODE:\n```\n^$^$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:^$^$)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:^$^$)\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:^$^$)$\n```\n\n----------------------------------------\n\nTITLE: Dependency Module Definition\nDESCRIPTION: Go module file for the 'example.com/dep' dependency, specifying Go 1.24 as the required version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_perpkgflag.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/dep\n\ngo 1.24\n```\n\n----------------------------------------\n\nTITLE: Testing Concurrent Go Builds and Module Downloads\nDESCRIPTION: This shell script tests concurrent Go builds with module downloads and verifies go.sum updates. It uses environment variables, concurrent build commands, and file comparison.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_concurrent.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GO111MODULE=on\n\n# Concurrent builds should succeed, even if they need to download modules.\ngo get ./x ./y\ngo build ./x &\ngo build ./y\nwait\n\n# Concurrent builds should update go.sum to the union of the hashes for the\n# modules they read.\ncmp go.sum go.sum.want\n```\n\n----------------------------------------\n\nTITLE: Go Debug Test File with Invalid Debug Format\nDESCRIPTION: A Go file with build tag 'godebugbad' that includes an invalid debug directive with a space in the value, used to test error handling for malformed debug directives.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/godebug_default.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n//go:build godebugbad\n//go:debug default=go1.20 asynctimerchan=0\n\npackage main\n```\n\n----------------------------------------\n\nTITLE: Testing GOROOT Package Resolution\nDESCRIPTION: Tests how packages within GOROOT are resolved, with special handling for pseudo-packages like 'builtin'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dot.txt#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Packages within GOROOT should resolve as in any other module,\n# except that -mod=vendor is implied by default.\ncd $GOROOT/src\n! go list .\nstderr '^no Go files in '$GOROOT'[/\\\\]src$'\n\n! go list ./builtin\nstderr '^\"builtin\" is a pseudo-package, not an importable package$'\n\n! go list ./debug\n! stderr 'cannot find module providing package'\nstderr '^no Go files in '$GOROOT'[/\\\\]src[/\\\\]debug$'\n\n! go list ./golang.org/x/tools/cmd/goimports\n! stderr 'cannot find module providing package'\nstderr '^stat '$GOROOT'[/\\\\]src[/\\\\]golang.org[/\\\\]x[/\\\\]tools[/\\\\]cmd[/\\\\]goimports: directory not found'\n\ngo list ./vendor/golang.org/x/net/http2/hpack\nstdout '^golang.org/x/net/http2/hpack$'\n```\n\n----------------------------------------\n\nTITLE: Overriding GOENV and Displaying Environment Variables\nDESCRIPTION: This snippet overrides the GOENV variable and displays all Go environment variables. It also tests error handling for invalid flags and missing arguments.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_write.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Now override it to something writable.\nenv GOENV=$WORK/envdir/go/env\ngo env GOENV\nstdout envdir[\\\\/]go[\\\\/]env\n\n# go env shows all variables\ngo env\nstdout GOARCH=\nstdout GOOS=\nstdout GOROOT=\n\n# go env ignores invalid flag in GOFLAGS environment variable\nenv GOFLAGS='=true'\ngo env\n\n# checking errors\n! go env -w\nstderr 'go: no KEY=VALUE arguments given'\n! go env -u\nstderr 'go: ''go env -u'' requires an argument'\n```\n\n----------------------------------------\n\nTITLE: Main Package with Import\nDESCRIPTION: The main package of example.com/lazy which imports example.com/a, establishing the dependency chain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_downgrade.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage lazy\n\nimport _ \"example.com/a\"\n```\n\n----------------------------------------\n\nTITLE: Shell Commands for Testing Go Timeout Behavior\nDESCRIPTION: Shell commands to demonstrate default and explicit timeout settings in Go tests. Shows how -timeout flag is propagated to test.timeout.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_timeout.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=off\ncd a\n\n# If no timeout is set explicitly, 'go test' should set\n# -test.timeout to its internal deadline.\ngo test -v . --\nstdout '10m0s'\n\n# An explicit -timeout argument should be propagated to -test.timeout.\ngo test -v -timeout 30m . --\nstdout '30m0s'\n```\n\n----------------------------------------\n\nTITLE: Implementing PrintFile Function in Main Package\nDESCRIPTION: Defines a PrintFile function in the pkg_test package that prints the current file path using runtime.Caller().\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_trimpath_test_suffix.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage pkg_test\n\nimport \"runtime\"\n\nfunc PrintFile() {\n\t_, file, _, _ := runtime.Caller(0)\n\tprintln(file)\n}\n```\n\n----------------------------------------\n\nTITLE: Cgo Integration File\nDESCRIPTION: Simple Go file that imports the C package to enable cgo functionality.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_cgo.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nimport \"C\"\n```\n\n----------------------------------------\n\nTITLE: Go Package with UTF16 Import\nDESCRIPTION: Secondary Go source file in package x that imports unicode/utf16 package. Demonstrates import of standard library package without additional CGO dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_compiled_imports.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage x\nimport \"unicode/utf16\" // does not use unsafe, syscall, runtime/cgo, unicode\n```\n\n----------------------------------------\n\nTITLE: Defining a Subpackage in a Moved Module - Go\nDESCRIPTION: This snippet creates a new Go package named 'subpkg' within the 'subpkg' directory, representing the location to which the package has been moved. This minimal placeholder is often required for module resolution tests, allowing the Go toolchain to recognize the subpackage's presence. There are no dependencies or exports; it's used expressly for testing nested module structures.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_split-incompatible_v2.0.0+incompatible.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage subpkg\n```\n\n----------------------------------------\n\nTITLE: Analyzing Diff Output for Go Project File Changes\nDESCRIPTION: This diff output shows the changes made to a numbered list, likely representing line numbers or steps in a process. Lines 7, 14½, 15, and 16 have been removed from the original list.\nSOURCE: https://github.com/golang/go/blob/master/src/internal/diff/testdata/long.txt#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\ndiff old new\n--- old\n+++ new\n@@ -4,7 +4,6 @@\n 4\n 5\n 6\n-7\n 8\n 9\n 10\n@@ -12,9 +11,6 @@\n 12\n 13\n 14\n-14½\n-15\n-16\n 17\n 18\n 19\n```\n\n----------------------------------------\n\nTITLE: Verifying Go Command Installation Location\nDESCRIPTION: This snippet checks that the 'go' command is installed in $GOROOT/bin, not $GOBIN. It sets up the environment, creates a directory, and uses 'go list' to verify the installation path.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_cmd_gobin.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GOBIN=gobin\nmkdir gobin\ngo list -f '{{.Target}}' cmd/go\nstdout $GOROOT${/}bin${/}go$GOEXE\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests with Fail Fast Options\nDESCRIPTION: This snippet demonstrates running Go tests with different combinations of the -failfast flag and test patterns. It checks the output count of failed tests to verify the fail-fast behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fail_fast.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n! go test ./failfast_test.go -run='TestFailingA' -failfast=true\nstdout -count=1 'FAIL - '\n! go test ./failfast_test.go -run='TestFailing[AB]' -failfast=true\nstdout -count=1 'FAIL - '\n! go test ./failfast_test.go -run='TestFailing[AB]' -failfast=false\nstdout -count=2 'FAIL - '\n\n# mix with non-failing tests\n! go test ./failfast_test.go -run='TestA|TestFailing[AB]' -failfast=true\nstdout -count=1 'FAIL - '\n! go test ./failfast_test.go -run='TestA|TestFailing[AB]' -failfast=false\nstdout -count=2 'FAIL - '\n\n# mix with parallel tests\n! go test ./failfast_test.go -run='TestFailingB|TestParallelFailingA' -failfast=true\nstdout -count=2 'FAIL - '\n! go test ./failfast_test.go -run='TestFailingB|TestParallelFailingA' -failfast=false\nstdout -count=2 'FAIL - '\n! go test ./failfast_test.go -run='TestFailingB|TestParallelFailing[AB]' -failfast=true\nstdout -count=3 'FAIL - '\n! go test ./failfast_test.go -run='TestFailingB|TestParallelFailing[AB]' -failfast=false\nstdout -count=3 'FAIL - '\n\n# mix with parallel sub-tests\n! go test ./failfast_test.go -run='TestFailingB|TestParallelFailing[AB]|TestParallelFailingSubtestsA' -failfast=true\nstdout -count=3 'FAIL - '\n! go test ./failfast_test.go -run='TestFailingB|TestParallelFailing[AB]|TestParallelFailingSubtestsA' -failfast=false\nstdout -count=5 'FAIL - '\n! go test ./failfast_test.go -run='TestParallelFailingSubtestsA' -failfast=true\nstdout -count=1 'FAIL - '\n\n# only parallels\n! go test ./failfast_test.go -run='TestParallelFailing[AB]' -failfast=false\nstdout -count=2 'FAIL - '\n\n# non-parallel subtests\n! go test ./failfast_test.go -run='TestFailingSubtestsA' -failfast=true\nstdout -count=1 'FAIL - '\n! go test ./failfast_test.go -run='TestFailingSubtestsA' -failfast=false\nstdout -count=2 'FAIL - '\n\n# fatal test\n! go test ./failfast_test.go -run='TestFatal[CD]' -failfast=true\nstdout -count=1 'FAIL - '\n! go test ./failfast_test.go -run='TestFatal[CD]' -failfast=false\nstdout -count=2 'FAIL - '\n\n# cross package failfast\n! go test -p 1 -failfast ./a ./b ./c\nstdout -count=1 'FAIL - '\nstdout -count=1 'FAIL - TestFailingPkgA'\n```\n\n----------------------------------------\n\nTITLE: Go Package Implementation\nDESCRIPTION: This snippet shows the implementation of a Go package 'a' with imported dependencies and a function definition.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\nimport \"fmt\"\nimport \"rsc.io/quote\"\n\nfunc HelloFromA() {\n\tfmt.Println(quote.Hello())\n}\n```\n\n----------------------------------------\n\nTITLE: Shell Script for Go Version Display\nDESCRIPTION: This shell script is used to display the version of Golang being tested, specifically 'go1.999testmod'. It uses a simple echo command to achieve this. This script does not have any complex dependencies other than a shell environment to execute it.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.android-arm.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n#!/bin/sh\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Test2PKG Package Import Definition\nDESCRIPTION: HTML template defining svn import path for test2PKG package\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/go/test2-svn-git.txt#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<meta name=\"go-import\" content=\"vcs-test.golang.org/go/test2-svn-git/test2PKG svn https://vcs-test.golang.org/svn/test2-svn-git\">\n```\n\n----------------------------------------\n\nTITLE: Defining Network Routing Constants in Go for NetBSD ARM64\nDESCRIPTION: Network routing table constants for system management. These are used with sysctl to manage and inspect the system routing tables.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_44\n\nLANGUAGE: go\nCODE:\n```\nconst NET_RT_DUMP = 1\nconst NET_RT_FLAGS = 2\nconst NET_RT_IFLIST = 5\nconst NET_RT_MAXID = 6\nconst NET_RT_OIFLIST = 4\nconst NET_RT_OOIFLIST = 3\n```\n\n----------------------------------------\n\nTITLE: Package Usage Example\nDESCRIPTION: Go file demonstrating blank import of rsc.io/quote package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_readonly.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage use\n\nimport _ \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Resolved Dependency\nDESCRIPTION: This snippet verifies that the dependency is resolved by running 'go list' and 'go build' without errors.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_lazy_indirect.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngo list -deps .\n! stderr .\n[!short] go build .\n[!short] ! stderr .\n```\n\n----------------------------------------\n\nTITLE: Using go get with Tags to Fix Error\nDESCRIPTION: Shows how 'go get' with specific tags can resolve the version incompatibility.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goline_order.txt#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncp go.mod.orig go.mod\ngo get -tags usem1\ngo list -deps -tags usem1\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running CGO Compiler Path Test (Shell)\nDESCRIPTION: These shell commands configure and execute a test for CGO compiler discovery. It includes conditional skips based on build tags (!cgo, !cc:gcc, !cc:clang). A clean GOCACHE is set. For non-Windows systems, the PATH is modified to include the current directory (.), mock compiler scripts ('p/gcc', 'p/clang') are made executable, and their existence is checked. For Windows, the existence of batch script equivalents ('p/gcc.bat', 'p/clang.bat') is checked. The test then runs `go build -x` and asserts that a specific error occurs (`cannot run executable found relative to current directory`) and that the mock compiler scripts did not create the 'p/bug.txt' file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_path.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n[short] skip 'runs build'\n\n[!cgo] skip\n\n# Require that CC is something that requires a PATH lookup.\n# Normally, the default is gcc or clang, but if CC was set during make.bash,\n# that becomes the default.\n[!cc:clang] [!cc:gcc] skip 'C compiler is not gcc or clang'\n\nenv GOCACHE=$WORK/gocache  # Looking for compile flags, so need a clean cache.\n[!GOOS:windows] env PATH=.:$PATH\n[!GOOS:windows] chmod 0755 p/gcc p/clang\n[!GOOS:windows] exists -exec p/gcc p/clang\n[GOOS:windows] exists -exec p/gcc.bat p/clang.bat\n! exists p/bug.txt\n! go build -x\nstderr '^cgo: C compiler \"(clang|gcc)\" not found: exec: \"(clang|gcc)\": cannot run executable found relative to current directory'\n! exists p/bug.txt\n```\n\n----------------------------------------\n\nTITLE: Forced Rebuild with PGO\nDESCRIPTION: Tests that using -a flag forces preprofile to run again\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_pgo.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo build -a -x -pgo=default.pgo lib.go\nstderr 'preprofile.*default\\.pgo'\n```\n\n----------------------------------------\n\nTITLE: Go Main Package Definition\nDESCRIPTION: Minimal Go main package implementation containing an empty main function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_disabled.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Go Package Attempting Invalid Internal Import\nDESCRIPTION: Defines a Go package `baddep` that attempts to import `golang.org/notx/useinternal`. This package is used in tests designed to fail, simulating an attempt to incorrectly access another module's internal implementation details or a non-existent package resulting from test setup.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\n-- baddep/useinternal.go --\npackage baddep\nimport _ \"golang.org/notx/useinternal\"\n```\n\n----------------------------------------\n\nTITLE: Secondary Module Definition (m2/go.mod)\nDESCRIPTION: Defines the secondary module 'example.com/m2' with Go 1.19 requirement and generics dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_issue56222.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/m2\n\ngo 1.19\n\nrequire example.com/generics v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Testing `go tool cgo` Rejection of Newline Paths in Shell\nDESCRIPTION: Tests the `go tool cgo` command's handling of paths containing newlines. It asserts that running `cgo` directly on a source file (`main.go`) within the problematic directory fails (`!`) with a specific error. It then tests `cgo` with the `-trimpath=$PWD` flag, expecting success and verifying (`grep`, `! grep`) that the generated output (`_obj/main.cgo1.go`) contains cleaned line directives without the newline path component. Conditional execution (`[cgo]`) ensures these tests only run if CGO is enabled.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cwd_newline.txt#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# The cgo tool should only accept the source file if the working directory\n# is not written in line directives in the resulting files.\n\n[cgo] ! go tool cgo main.go\n[cgo] stderr 'cgo: input path contains newline character: .*uh-oh'\n[cgo] ! exists _obj\n\n[cgo] go tool cgo -trimpath=$PWD main.go\n[cgo] grep '//line main\\.go:1:1' _obj/main.cgo1.go\n[cgo] ! grep 'uh-oh' _obj/main.cgo1.go\n[cgo] rm _obj\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Go Package 'lib'\nDESCRIPTION: This is a simple Go package named 'lib' with no exported functions.  It is used as the target for the 'go build' commands in the test script.  Its sole purpose is to verify compilation and caching behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_compile.txt#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage lib\n```\n\n----------------------------------------\n\nTITLE: Defining Linux-specific Test for Package p\nDESCRIPTION: Creates a test file for package 'p' with a build constraint for Linux, importing package 'q'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_all_gobuild.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\n//go:build linux\n\npackage p\n\nimport \"m/q\"\n```\n\n----------------------------------------\n\nTITLE: Module P Configuration and Main Function\nDESCRIPTION: This snippet shows the go.mod file for module 'example.com/p' and its main Go file. It requires 'example.com/q' v1.0.0 and uses its PrintVersion function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_prune.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/p\n\ngo 1.18\n\nrequire example.com/q v1.0.0\n\nreplace example.com/q v1.0.0 => ../q1_0_0\nreplace example.com/q v1.1.0 => ../q1_1_0\n```\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport \"example.com/q\"\n\nfunc main() {\n\tq.PrintVersion()\n}\n```\n\n----------------------------------------\n\nTITLE: Testing 'go list all' without symlink warnings\nDESCRIPTION: This snippet tests that 'go list all' does not produce symlink warnings as per Issue 35941.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_symlink_issue35941.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngo list all\n! stderr 'warning: ignoring symlink'\n```\n\n----------------------------------------\n\nTITLE: Initializing an Empty Go Source File for i - Go\nDESCRIPTION: This Go source file declares package i. It is included only to ensure the module 'i' is recognized in imports and dependency resolution. There are no functions, exports, or logical content.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect.txt#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\npackage i\n```\n\n----------------------------------------\n\nTITLE: Git Log Output for Verification\nDESCRIPTION: Expected Git log output for verification after repository initialization. Used to confirm that the repository was created correctly with the expected commit history.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/modlegacy1-new.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n36cc50a (HEAD -> master) initial commit\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module (Go Module)\nDESCRIPTION: This `go.mod` file defines a Go module named `m` and specifies that the code requires Go version 1.16 or later. It serves as the root configuration for the Go project containing the test files.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_test_simple.txt#2025-04-22_snippet_1\n\nLANGUAGE: gomod\nCODE:\n```\n-- go.mod --\nmodule m\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Implementing Standard Go Test Function\nDESCRIPTION: Defines a regular test function that writes to stdout. This test will be executed normally during the test run, demonstrating the difference between standard tests and examples.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_no_run_example.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage pkg\n\nimport (\n\t\"os\"\n\t\"testing\"\n)\n\nfunc TestBuilt(t *testing.T) {\n\tos.Stdout.Write([]byte(\"A normal test was executed.\\n\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Go Module Definition\nDESCRIPTION: Simple Go module definition with module name and Go version specification\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_readonly.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.16\n\n```\n\n----------------------------------------\n\nTITLE: Generating Diff Output for File Comparison\nDESCRIPTION: This snippet demonstrates the resulting diff output from comparing the old and new file versions. It shows the unified diff format, highlighting additions, deletions, and context lines.\nSOURCE: https://github.com/golang/go/blob/master/src/internal/diff/testdata/basic.txt#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\ndiff old new\n--- old\n+++ new\n@@ -1,7 +1,7 @@\n+w\n a\n b\n-c\n-d\n+x\n+y\n+z\n e\n-f\n-g\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Tidy with Incorrect Sumdb\nDESCRIPTION: This snippet tests the 'go mod tidy' command with an incorrect sumdb setup, which results in a checksum mismatch and security error.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngo mod edit -require rsc.io/quote@v1.5.2\n! go mod tidy\nstderr 'go: rsc.io/quote@v1.5.2: verifying go.mod: checksum mismatch'\nstderr 'SECURITY ERROR\\n'\n\nrm go.sum\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Anchored Diff Limitation in File Comparison\nDESCRIPTION: This snippet shows two versions of a file (old and new) and the resulting diff output. The anchored diff algorithm fails to find any unique lines, leading to a complete replacement of the old content with the new content.\nSOURCE: https://github.com/golang/go/blob/master/src/internal/diff/testdata/triv.txt#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-- old --\na\nb\nc\na\nb\nb\na\n-- new --\nc\na\nb\na\nb\nc\n-- diff --\ndiff old new\n--- old\n+++ new\n@@ -1,7 +1,6 @@\n-a\n-b\n-c\n-a\n-b\n-b\n-a\n+c\n+a\n+b\n+a\n+b\n+c\n```\n\n----------------------------------------\n\nTITLE: Go Get with Multiple Retractions\nDESCRIPTION: This snippet checks that 'go get' reports only the first retraction to avoid being overly verbose.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_rationale.txt#_snippet_12\n\nLANGUAGE: go\nCODE:\n```\ngo get example.com/retract/rationale@v1.0.0-order\nstderr '^go: warning: example.com/retract/rationale@v1.0.0-order: retracted by module author: degenerate range$'\ngo get example.com/retract/rationale@v1.0.1-order\nstderr '^go: warning: example.com/retract/rationale@v1.0.1-order: retracted by module author: single version$'\n```\n\n----------------------------------------\n\nTITLE: Configuring Default TLS Cipher Suites using tlsrsakex GODEBUG Setting (Go 1.22)\nDESCRIPTION: Introduced in Go 1.22, this setting controls the default set of TLS cipher suites used when none are explicitly configured. Go 1.22 removed cipher suites using RSA key exchange from the default set. Setting tlsrsakex=1 reverts to the previous default set including RSA key exchange ciphers. Set via GODEBUG environment variable (e.g., GODEBUG=tlsrsakex=1).\nSOURCE: https://github.com/golang/go/blob/master/doc/godebug.md#2025-04-22_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\ntlsrsakex\n```\n\n----------------------------------------\n\nTITLE: Defining a Minimal Go Main Package - Go\nDESCRIPTION: Declares a minimal Go source file containing the definition of a main package with an empty main function. This file is used to simulate a Go project containing source code for the purpose of triggering module-related behaviors in the Go toolchain. There are no dependencies, input, or output; it simply provides necessary context for go mod commands. It requires at least Go version 1.12.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_off.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage sample\\n\\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Stub Go Tool Binary - Shell Script\nDESCRIPTION: A POSIX shell script intended as a placeholder for the 'go' binary in the toolchain, printing a static message ('go1.999testmod here!') when executed. The shebang line ensures it's interpreted by /bin/sh. There are no arguments or dependencies beyond a shell environment. The script is for testing toolchain presence or simulating a go binary for build or CI environments.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.freebsd-386.txt#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n#!/bin/sh\\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Output\nDESCRIPTION: Expected JSON output from go list command showing the import cycle error for packages a, b, and c.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_import_cycle_deps_errors.txt#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"ImportPath\": \"m/c\",\n\t\"DepsErrors\": [\n\t\t{\n\t\t\t\"ImportStack\": [\n\t\t\t\t\"m/a\",\n\t\t\t\t\"m/b\",\n\t\t\t\t\"m/c\",\n\t\t\t\t\"m/a\"\n\t\t\t],\n\t\t\t\"Pos\": \"\",\n\t\t\t\"Err\": \"import cycle not allowed\"\n\t\t}\n\t]\n}\n{\n\t\"ImportPath\": \"m/b\",\n\t\"DepsErrors\": [\n\t\t{\n\t\t\t\"ImportStack\": [\n\t\t\t\t\"m/a\",\n\t\t\t\t\"m/b\",\n\t\t\t\t\"m/c\",\n\t\t\t\t\"m/a\"\n\t\t\t],\n\t\t\t\"Pos\": \"\",\n\t\t\t\"Err\": \"import cycle not allowed\"\n\t\t}\n\t]\n}\n{\n\t\"ImportPath\": \"m/a\",\n\t\"Error\": {\n\t\t\"ImportStack\": [\n\t\t\t\"m/a\",\n\t\t\t\"m/b\",\n\t\t\t\"m/c\",\n\t\t\t\"m/a\"\n\t\t],\n\t\t\"Pos\": \"\",\n\t\t\"Err\": \"import cycle not allowed\"\n\t},\n\t\"DepsErrors\": [\n\t\t{\n\t\t\t\"ImportStack\": [\n\t\t\t\t\"m/a\",\n\t\t\t\t\"m/b\",\n\t\t\t\t\"m/c\",\n\t\t\t\t\"m/a\"\n\t\t\t],\n\t\t\t\"Pos\": \"\",\n\t\t\t\"Err\": \"import cycle not allowed\"\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Expected Error Output for Module Listing (Text)\nDESCRIPTION: Specifies the expected standard error output (`stderr`) when `go list -m all` fails after manually requiring `example.com/badchain/a@v1.1.0`. The error message shows the dependency chain (`a` requires `b` requires `c`) leading to the path mismatch error in `example.com/badchain/c@v1.1.0`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badchain.txt#2025-04-22_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n-- list-expected --\ngo: example.com/badchain/a@v1.1.0 requires\n\texample.com/badchain/b@v1.1.0 requires\n\texample.com/badchain/c@v1.1.0: parsing go.mod:\n\tmodule declares its path as: badchain.example.com/c\n\t        but was required as: example.com/badchain/c\n```\n\n----------------------------------------\n\nTITLE: Defining an Empty Package for SWIG - Go\nDESCRIPTION: This Go source file declares the 'swig' package, setting up a placeholder for sources that are to be combined with SWIG and Cgo-generated files. No functions or types are defined; its primary purpose is to ensure the package is recognized by the Go tooling, and that a.go is included in 'CompiledGoFiles'. The file must reside in the 'swig' directory of the module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_swigcxx.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage swig\n```\n\n----------------------------------------\n\nTITLE: Testing Quote Package Functions in Go\nDESCRIPTION: Unit tests for the quote package, verifying the output of all four functions (Hello, Glass, Go, and Opt) against their expected return values.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.4.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage quote\n\nimport \"testing\"\n\nfunc TestHello(t *testing.T) {\n\thello := \"Hello, world.\"\n\tif out := Hello(); out != hello {\n\t\tt.Errorf(\"Hello() = %q, want %q\", out, hello)\n\t}\n}\n\nfunc TestGlass(t *testing.T) {\n\tglass := \"I can eat glass and it doesn't hurt me.\"\n\tif out := Glass(); out != glass {\n\t\tt.Errorf(\"Glass() = %q, want %q\", out, glass)\n\t}\n}\n\nfunc TestGo(t *testing.T) {\n\tgo1 := \"Don't communicate by sharing memory, share memory by communicating.\"\n\tif out := Go(); out != go1 {\n\t\tt.Errorf(\"Go() = %q, want %q\", out, go1)\n\t}\n}\n\nfunc TestOpt(t *testing.T) {\n\topt := \"If a program is too slow, it must have a loop.\"\n\tif out := Opt(); out != opt {\n\t\tt.Errorf(\"Opt() = %q, want %q\", out, opt)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Package Import with Go Modules\nDESCRIPTION: A main function that tests go/build's Import functionality with both relative and absolute source directories. It imports a package, reports its directory, and lists its Go files.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gobuild_import.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"go/build\"\n\t\"log\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strings\"\n)\n\nfunc main() {\n\t// build.Import should support relative and absolute source dir paths.\n\tpath := os.Args[1]\n\tsrcDir := os.Args[2]\n\tp1, err := build.Import(path, srcDir, 0)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tabsSrcDir, err := filepath.Abs(srcDir)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tp2, err := build.Import(path, absSrcDir, 0)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif p1.Dir != p2.Dir {\n\t\tlog.Fatalf(\"different packages loaded with relative and absolute paths:\\n\\t%s\\n\\t%s\", p1.Dir, p2.Dir)\n\t}\n\n\tfmt.Printf(\"%s\\n%s\\n\", p1.Dir, strings.Join(p1.GoFiles, \" \"))\n}\n```\n\n----------------------------------------\n\nTITLE: Adding new methods and types to net/netip package\nDESCRIPTION: This snippet introduces new methods and types to the net/netip package, including Addr, AddrPort, and Prefix types, along with their associated methods for IP address and network prefix handling.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.18.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\npkg net/netip, type Addr struct\npkg net/netip, type AddrPort struct\npkg net/netip, type Prefix struct\npkg net/netip, func AddrFrom16([16]uint8) Addr\npkg net/netip, func AddrFrom4([4]uint8) Addr\npkg net/netip, func AddrFromSlice([]uint8) (Addr, bool)\npkg net/netip, func AddrPortFrom(Addr, uint16) AddrPort\npkg net/netip, method (Addr) AppendTo([]uint8) []uint8\npkg net/netip, method (Addr) As16() [16]uint8\npkg net/netip, method (Addr) As4() [4]uint8\npkg net/netip, method (Addr) AsSlice() []uint8\n```\n\n----------------------------------------\n\nTITLE: Setting Up GOCACHE and Initial Go Build\nDESCRIPTION: This snippet sets up a fresh GOCACHE environment variable and performs an initial Go build without CGO usage. It checks that the 'preferlinkext' token is not present in the build output, which would otherwise indicate a preference for external linking. This setup is preceded by a CGO_CFLAGS environment setting to test various linker behaviors.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_suspect_flag_force_external.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GOCACHE=$WORK/gocache\nmkdir $GOCACHE\n\ngo build -x -n -o dummy.exe ./noUseOfCgo\n! stderr preferlinkext\nenv CGO_CFLAGS=-flto\n\n```\n\n----------------------------------------\n\nTITLE: Adding File System Support to Zip Writer - Go Standard Library - Go\nDESCRIPTION: Adds the AddFS(fs.FS) error method to the *Writer type in archive/zip, enabling archival of an entire fs.FS object contents into a zip file. It expects a parameter implementing fs.FS and returns an error if encountered during write. This extends zip file creation to use abstract file systems.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc (w *Writer) AddFS(fs.FS) error\n```\n\n----------------------------------------\n\nTITLE: Expected Go Module Definition after Adding Import (Go 1.14)\nDESCRIPTION: The expected `go.mod` file (`go.mod.new`) after running `go mod tidy` on the modified `m.go` with Go 1.14. It adds a direct requirement for module `b` because `b/y` is now directly imported.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_import_allmod.txt#2025-04-22_snippet_4\n\nLANGUAGE: gomod\nCODE:\n```\n-- go.mod.new --\nmodule m\n\ngo 1.14\n\nrequire (\n\ta v0.1.0\n\tb v0.1.0\n)\n\nreplace (\n\ta v0.1.0 => ./a1\n\tb v0.1.0 => ./b1\n\tc v0.1.0 => ./c1\n\tc v0.2.0 => ./c2\n)\n```\n\n----------------------------------------\n\nTITLE: Terminal I/O Control Constants for Darwin ARM64 in Go\nDESCRIPTION: Constants for terminal I/O control operations (TIOC*) in the syscall package for Darwin ARM64. These constants are used with ioctl system calls to control terminal device behavior.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_111\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (darwin-arm64), const TIOCMSET = 2147775597\npkg syscall (darwin-arm64), const TIOCM_CAR = 64\npkg syscall (darwin-arm64), const TIOCM_CD = 64\npkg syscall (darwin-arm64), const TIOCM_CTS = 32\npkg syscall (darwin-arm64), const TIOCM_DSR = 256\npkg syscall (darwin-arm64), const TIOCM_DTR = 2\npkg syscall (darwin-arm64), const TIOCM_LE = 1\npkg syscall (darwin-arm64), const TIOCM_RI = 128\npkg syscall (darwin-arm64), const TIOCM_RNG = 128\npkg syscall (darwin-arm64), const TIOCM_RTS = 4\npkg syscall (darwin-arm64), const TIOCM_SR = 16\npkg syscall (darwin-arm64), const TIOCM_ST = 8\n```\n\n----------------------------------------\n\nTITLE: Testing Import Cycle Loading Error (Go)\nDESCRIPTION: This snippet tests an import cycle loading error in a non-test file. It verifies the JSON output for specific import cycle error messages and package information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_build.txt#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n! go test -json -o=$devnull ./cycle/p\nstdout '\"ImportPath\":\"m/cycle/q\",\"Action\":\"build-output\",\"Output\":\"# m/cycle/p\\\\n\"'\nstdout '\"ImportPath\":\"m/cycle/q\",\"Action\":\"build-output\",\"Output\":\"package m/cycle/p\\\\n\"'\nstdout '\"ImportPath\":\"m/cycle/q\",\"Action\":\"build-output\",\"Output\":\"\\\\timports m/cycle/q from p.go\\\\n\"'\nstdout '\"ImportPath\":\"m/cycle/q\",\"Action\":\"build-output\",\"Output\":\"\\\\timports m/cycle/q from q.go: import cycle not allowed\\\\n\"'\nstdout '\"ImportPath\":\"m/cycle/q\",\"Action\":\"build-fail\"'\nstdout '\"Action\":\"start\",\"Package\":\"m/cycle/p\"'\nstdout '\"Action\":\"output\",\"Package\":\"m/cycle/p\",\"Output\":\"FAIL\\\\tm/cycle/p \\[setup failed\\]\\\\n\"'\nstdout '\"Action\":\"fail\",\"Package\":\"m/cycle/p\",\"Elapsed\":.*,\"FailedBuild\":\"m/cycle/q\"'\n! stderr '.'\n```\n\n----------------------------------------\n\nTITLE: Implementing Quote Functions in Go\nDESCRIPTION: A Go package implementing various quote functions with v2 suffix. It depends on the rsc.io/sampler module for some functionality and provides methods for returning greetings, proverbs, and other pithy sayings.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v2_v2.0.1.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Copyright 2018 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// Package quote collects pithy sayings.\npackage quote // import \"rsc.io/quote\"\n\nimport \"rsc.io/sampler\"\n\n// Hello returns a greeting.\nfunc HelloV2() string {\n\treturn sampler.Hello()\n}\n\n// Glass returns a useful phrase for world travelers.\nfunc GlassV2() string {\n\t// See http://www.oocities.org/nodotus/hbglass.html.\n\treturn \"I can eat glass and it doesn't hurt me.\"\n}\n\n// Go returns a Go proverb.\nfunc GoV2() string {\n\treturn \"Don't communicate by sharing memory, share memory by communicating.\"\n}\n\n// Opt returns an optimization truth.\nfunc OptV2() string {\n\t// Wisdom from ken.\n\treturn \"If a program is too slow, it must have a loop.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Managing Go Module Dependencies\nDESCRIPTION: This snippet demonstrates initializing a Go module, fetching dependencies, and listing all modules. It shows how Go handles dependencies from files with different build tags.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_tags.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GO111MODULE=on\n\n# get should add modules needed to build packages, even if those\n# dependencies are in sources excluded by build tags.\n# All build tags are considered true except \"ignore\".\ngo mod init m\ngo get .\ngo list -m all\nstdout 'example.com/version v1.1.0'\nstdout 'rsc.io/quote v1.5.2'\n```\n\n----------------------------------------\n\nTITLE: Package B Main Function\nDESCRIPTION: Minimal main package implementation in directory 'b'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_cmd_v1.9.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Testing pre-release version resolution\nDESCRIPTION: Fetches a specific pre-release version and verifies it.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo.txt#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ngo get ...test@731e3b1\ngo list -m all\nstdout '^github.com/rsc/legacytest v1\\.1\\.0-pre$'\n```\n\n----------------------------------------\n\nTITLE: Socket Options Management in syscall Package for NetBSD ARM64\nDESCRIPTION: These functions provide options management for sockets, allowing the retrieval and setting of various socket parameters like buffer sizes, timeouts, and protocol-specific options.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_75\n\nLANGUAGE: Go\nCODE:\n```\nfunc GetsockoptByte(int, int, int) (uint8, error)\nfunc GetsockoptInt(int, int, int) (int, error)\nfunc GetsockoptInet4Addr(int, int, int) ([4]uint8, error)\nfunc GetsockoptIPMreq(int, int, int) (*IPMreq, error)\nfunc GetsockoptIPv6Mreq(int, int, int) (*IPv6Mreq, error)\nfunc GetsockoptICMPv6Filter(int, int, int) (*ICMPv6Filter, error)\nfunc GetsockoptIPv6MTUInfo(int, int, int) (*IPv6MTUInfo, error)\nfunc SetsockoptByte(int, int, int, uint8) error\nfunc SetsockoptInt(int, int, int, int) error\nfunc SetsockoptInet4Addr(int, int, int, [4]uint8) error\nfunc SetsockoptIPMreq(int, int, int, *IPMreq) error\nfunc SetsockoptIPv6Mreq(int, int, int, *IPv6Mreq) error\nfunc SetsockoptLinger(int, int, int, *Linger) error\nfunc SetsockoptString(int, int, int, string) error\nfunc SetsockoptTimeval(int, int, int, *Timeval) error\nfunc SetsockoptICMPv6Filter(int, int, int, *ICMPv6Filter) error\n```\n\n----------------------------------------\n\nTITLE: Setting up Go environment for module testing\nDESCRIPTION: Sets environment variables for Go module testing, disabling proxy and ensuring module mode is enabled.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_std_vendor.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\nenv GOPROXY=off\n\n[!compiler:gc] skip\n```\n\n----------------------------------------\n\nTITLE: Defining Memory Mapping Flags in Go for NetBSD\nDESCRIPTION: These constants define flags used in memory mapping system calls on NetBSD. They control various aspects of memory allocation and mapping behavior.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_21\n\nLANGUAGE: Go\nCODE:\n```\nconst MAP_SHARED = 1\nconst MAP_PRIVATE = 2\nconst MAP_FIXED = 16\nconst MAP_RENAME = 32\nconst MAP_NORESERVE = 64\nconst MAP_INHERIT = 128\nconst MAP_HASSEMAPHORE = 512\nconst MAP_TRYFIXED = 1024\nconst MAP_WIRED = 2048\nconst MAP_ANON = 4096\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module for SWIG/Cgo Integration - Go\nDESCRIPTION: This 'go.mod' file initializes a minimal Go module named 'example', specifying Go 1.16, to serve as the namespace for the SWIG/Cgo integration test case. No actual code dependencies are included; it is only used to establish module identity and environment for the test scenario. This file must be present at the root of the module intended for go tool commands.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_swigcxx.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Package Import Resolution Test - Test File\nDESCRIPTION: Test file that imports both testing package and golang.org/x/net/http2/hpack to verify vendor resolution in test context.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_std_vendor.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage vendoring17\n\nimport _ \"testing\"\nimport _ \"golang.org/x/net/http2/hpack\"\n```\n\n----------------------------------------\n\nTITLE: Markdown List Format\nDESCRIPTION: Represents the list in Markdown syntax with proper indentation and spacing.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list8.txt#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nLoose lists.\n\n  - A\n\n    B\n\n  - C D\n\n  - E\n\n  - F\n```\n\n----------------------------------------\n\nTITLE: Process Management Functions for NetBSD ARM64\nDESCRIPTION: Function signatures for process management operations in NetBSD on ARM64. These functions provide interfaces for creating, controlling, and monitoring processes.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_159\n\nLANGUAGE: Go\nCODE:\n```\nfunc Chflags(string, int) error\nfunc Chroot(string) error\nfunc ForkExec(string, []string, *ProcAttr) (int, error)\nfunc Fpathconf(int, int) (int, error)\nfunc Fstat(int, *Stat_t) error\nfunc Fsync(int) error\nfunc Ftruncate(int, int64) error\nfunc Futimes(int, []Timeval) error\nfunc Getdirentries(int, []uint8, *uintptr) (int, error)\nfunc Getpeername(int) (Sockaddr, error)\nfunc Getpgid(int) (int, error)\nfunc Getpgrp() int\nfunc Getpriority(int, int) (int, error)\nfunc Getrlimit(int, *Rlimit) error\nfunc Getrusage(int, *Rusage) error\nfunc Getsid(int) (int, error)\nfunc Issetugid() bool\nfunc Kevent(int, []Kevent_t, []Kevent_t, *Timespec) (int, error)\nfunc Kill(int, Signal) error\nfunc Kqueue() (int, error)\n```\n\n----------------------------------------\n\nTITLE: Testing Go Mod Vendor with Empty -o Flag\nDESCRIPTION: This snippet tests the behavior of 'go mod vendor' when an empty argument is passed to the -o flag, both in the module root directory and nested subdirectories.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor.txt#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# 'go mod vendor' should fall back to the default 'vendor' directory when an empty argument is passed to the -o flag\n# the same behavior should be exhibited both on the module root directory, as well as nested subdirectories\n\ngo mod vendor -v -o ''\nexists vendor/modules.txt\n\nenv GOFLAGS=-o=foo\ngo mod vendor -v -o ''\nexists vendor/modules.txt\nenv GOFLAGS=''\n\nmkdir -p nested/dir\ncd nested/dir\ngo mod vendor -v -o ''\n! exists vendor/\nexists ../../vendor/modules.txt\ncd ../..\n```\n\n----------------------------------------\n\nTITLE: Importing Another External Package in Go\nDESCRIPTION: This Go file imports an external package from rsc.io/sampler. It shows the use of a different external dependency in the project.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_concurrent.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage y\n\nimport _ \"rsc.io/sampler\"\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests with No Matches\nDESCRIPTION: Shell command demonstrating how to run Go tests with a pattern that matches no tests, showing the no-tests-to-run output\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_no_tests_with_subtests.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo test -run ThisWillNotMatch standalone_sub_test.go\\nstdout '^ok.*\\[no tests to run\\]'\n```\n\n----------------------------------------\n\nTITLE: Implementing QUOTE Package Functions\nDESCRIPTION: Main package implementation that provides uppercase versions of quotes by wrapping rsc.io/quote package. Includes functions for hello messages, glass eating quote, Go proverb, and optimization truth.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_!q!u!o!t!e_v1.5.3-!p!r!e.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage QUOTE\n\nimport (\n\t\"strings\"\n\n\t\"rsc.io/quote\"\n)\n\n// HELLO RETURNS A GREETING.\nfunc HELLO() string {\n\treturn strings.ToUpper(quote.Hello())\n}\n\n// GLASS RETURNS A USEFUL PHRASE FOR WORLD TRAVELERS.\nfunc GLASS() string {\n\treturn strings.ToUpper(quote.GLASS())\n}\n\n// GO RETURNS A GO PROVERB.\nfunc GO() string {\n\treturn strings.ToUpper(quote.GO())\n}\n\n// OPT RETURNS AN OPTIMIZATION TRUTH.\nfunc OPT() string {\n\treturn strings.ToUpper(quote.OPT())\n}\n```\n\n----------------------------------------\n\nTITLE: Go Build Cache Setup and Testing\nDESCRIPTION: Shell script that tests the Go build process, verifying compiler and linker execution patterns and build output caching. Sets up a fresh GOCACHE and runs multiple build commands to validate expected behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_link.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=off\n[short] skip\n\n# Set up fresh GOCACHE.\nenv GOCACHE=$WORK/gocache\nmkdir $GOCACHE\n\n# Building a main package should run the compiler and linker ...\ngo build -o $devnull -x main.go\nstderr '(compile|gccgo)( |\\.exe).*main\\.go'\nstderr '(link|gccgo)( |\\.exe)'\n\n# ... and then the linker again ...\ngo build -o $devnull -x main.go\n! stderr '(compile|gccgo)( |\\.exe).*main\\.go'\nstderr '(link|gccgo)( |\\.exe)'\n\n# ... but the output binary can serve as a cache.\ngo build -o main$GOEXE -x main.go\nstderr '(link|gccgo)( |\\.exe)'\ngo build -o main$GOEXE -x main.go\n! stderr '(link|gccgo)( |\\.exe)'\n```\n\n----------------------------------------\n\nTITLE: Bar Package Assembly Implementation\nDESCRIPTION: Assembly implementation for the bar package with a large function using NOP instructions to create distance.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/trampoline_reuse_test.txt#2025-04-22_snippet_2\n\nLANGUAGE: assembly\nCODE:\n```\n#define NOP64 DWORD $0; DWORD $0; DWORD $0; DWORD $0; DWORD $0; DWORD $0; DWORD $0; DWORD $0;\n#define NOP256 NOP64 NOP64 NOP64 NOP64\n#define NOP2S10 NOP256 NOP256 NOP256 NOP256\n#define NOP2S12 NOP2S10 NOP2S10 NOP2S10 NOP2S10\n#define NOP2S14 NOP2S12 NOP2S12 NOP2S12 NOP2S12\n#define NOP2S16 NOP2S14 NOP2S14 NOP2S14 NOP2S14\n#define NOP2S18 NOP2S16 NOP2S16 NOP2S16 NOP2S16\n#define NOP2S20 NOP2S18 NOP2S18 NOP2S18 NOP2S18\n#define NOP2S22 NOP2S20 NOP2S20 NOP2S20 NOP2S20\n#define NOP2S24 NOP2S22 NOP2S22 NOP2S22 NOP2S22\n#define BIGNOP NOP2S24 NOP2S24 NOP2S10\nTEXT bar·Bar(SB),0,$0-0\n        BIGNOP\n```\n\n----------------------------------------\n\nTITLE: Repository and Module Setup Commands\nDESCRIPTION: Shell commands for creating and initializing Git and Mercurial repositories with Go modules, demonstrating VCS integration tests and buildvcs flag handling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_nested.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n[!git] skip\n[!exec:hg] skip\n[short] skip\nenv GOFLAGS='-n -buildvcs'\n\n# Create a root module in a root Git repository.\nmkdir root\ncd root\ngo mod init example.com/root\nexec git init\n\n# Nesting repositories in parent directories are ignored, as the current\n# directory main package, and containing main module are in the same repository.\n# This is an error in GOPATH mode (to prevent VCS injection), but for modules,\n# we assume users have control over repositories they've checked out.\nmkdir hgsub\ncd hgsub\nexec hg init\ncp ../../main.go main.go\n! go build\nstderr '^error obtaining VCS status: main module is in repository \".*root\" but current directory is in repository \".*hgsub\"$'\nstderr '\\tUse -buildvcs=false to disable VCS stamping.$'\ngo build -buildvcs=false\ngo mod init example.com/root/hgsub\ngo build\ncd ..\n\n# It's an error to build a package from a nested Git repository if the package\n# is in a separate repository from the current directory or from the module\n# root directory.\nmkdir gitsub\ncd gitsub\nexec git init\nexec git config user.name 'J.R.Gopher'\nexec git config user.email 'gopher@golang.org'\ncp ../../main.go main.go\n! go build\nstderr '^error obtaining VCS status: main module is in repository \".*root\" but current directory is in repository \".*gitsub\"$'\ngo build -buildvcs=false\ngo mod init example.com/root/gitsub\nexec git commit --allow-empty -m empty # status commands fail without this\ngo build\nrm go.mod\ncd ..\n! go build ./gitsub\nstderr '^error obtaining VCS status: main package is in repository \".*gitsub\" but current directory is in repository \".*root\"$'\ngo build -buildvcs=false -o=gitsub${/} ./gitsub\n```\n\n----------------------------------------\n\nTITLE: Sub Package Interface Implementation\nDESCRIPTION: Implements an interface type and function F that creates and calls an anonymous function working with interface slices\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_issue62156.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage sub\n\ntype iface interface{ m() }\n\nfunc F() {\n\tf := func(rt []iface) []iface {\n\t\treturn append([]iface{}, rt...)\n\t}\n\tf(nil)\n}\n```\n\n----------------------------------------\n\nTITLE: Module Version Information\nDESCRIPTION: JSON configuration specifying the module version\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_fortune_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.0.0\"}\n```\n\n----------------------------------------\n\nTITLE: Test Function for Coverage in pkg2\nDESCRIPTION: Implements a test in 'pkg2', invoking functions from both 'pkg1' and 'pkg2'. This function evaluates coverage and ensures no leakage from 'pkg1'. Requires 'testing' package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_nocoverpkg.txt#2025-04-22_snippet_5\n\nLANGUAGE: Golang\nCODE:\n```\n-- pkg2/file_test.go --\npackage pkg2\n\nimport (\n\t\"cov/pkg1\"\n\t\"testing\"\n)\n\nfunc TestSmth(t *testing.T) {\n\tpkg1.DoSomething()\n\tDoSomething()\n}\n```\n\n----------------------------------------\n\nTITLE: Different Replacement Error Test\nDESCRIPTION: Sample modules.txt with a module that has a different replacement target than specified in go.mod, along with the expected error message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_modules_txt_consistent.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n## workspace\n# example.com/p v1.0.0 => ./r\n## explicit; go 1.21\n# example.com/q v1.0.0 => ./q\n## explicit; go 1.21\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ngo: inconsistent vendoring in $GOPATH${/}src:\n\texample.com/p@v1.0.0: is replaced by ../p in a${/}go.mod, but marked as replaced by ./r in vendor/modules.txt\n\n\tTo ignore the vendor directory, use -mod=readonly or -mod=mod.\n\tTo sync the vendor directory, run:\n\t\tgo work vendor\n```\n\n----------------------------------------\n\nTITLE: Setting up SVN repository with nested Git repository\nDESCRIPTION: Creates and configures an SVN repository with a nested Git repository, including directory creation, permissions setup, and environment configuration. Sets author information for commits and prepares the repository structure.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/test2-svn-git.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GIT_AUTHOR_NAME='Russ Cox'\nenv GIT_AUTHOR_EMAIL='rsc@golang.org'\nenv GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME\nenv GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL\n\nmkdir db/transactions\nmkdir db/txn-protorevs\nchmod 0755 hooks/pre-revprop-change\n\nenv ROOT=$PWD\ncd .checkout\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository with Initial Commit\nDESCRIPTION: Initializes a Git repository, adds go.mod and main.go files, creates an initial commit, and renames the default branch to master.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/no-tags.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit init\n\nat 2019-07-15T17:20:47-04:00\ngit add go.mod main.go\ngit commit -m 'all: add go.mod and main.go'\ngit branch -m master\n\ngit log --oneline --decorate=short\ncmp stdout .git-log\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Module Paths for gopkg.in Modules in Go\nDESCRIPTION: This snippet tests module path validation for gopkg.in modules, demonstrating that they require a version suffix in the format .vN. Each command is expected to fail with an error message suggesting the correct format for gopkg.in modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_init_invalid_major.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n! go mod init gopkg.in/pkg\nstderr '(?s)^go: invalid module path \"gopkg.in/pkg\": module paths beginning with gopkg.in/ must always have a major version suffix in the form of .vN(.*)go mod init gopkg.in/pkg.v1$'\n\n! go mod init gopkg.in/user/pkg\nstderr '(?s)^go: invalid module path \"gopkg.in/user/pkg\": module paths beginning with gopkg.in/ must always have a major version suffix in the form of .vN(.*)go mod init gopkg.in/user/pkg.v1$'\n\n! go mod init gopkg.in/user/pkg/v0\nstderr '(?s)^go: invalid module path \"gopkg.in/user/pkg/v0\": module paths beginning with gopkg.in/ must always have a major version suffix in the form of .vN(.*)go mod init gopkg.in/user/pkg.v1$'\n\n! go mod init gopkg.in/user/pkg/v1\nstderr '(?s)^go: invalid module path \"gopkg.in/user/pkg/v1\": module paths beginning with gopkg.in/ must always have a major version suffix in the form of .vN(.*)go mod init gopkg.in/user/pkg.v1$'\n\n! go mod init gopkg.in/user/pkg/v2\nstderr '(?s)^go: invalid module path \"gopkg.in/user/pkg/v2\": module paths beginning with gopkg.in/ must always have a major version suffix in the form of .vN(.*)go mod init gopkg.in/user/pkg.v2$'\n\n! go mod init gopkg.in/user/pkg.v\nstderr '(?s)^go: invalid module path \"gopkg.in/user/pkg.v\": module paths beginning with gopkg.in/ must always have a major version suffix in the form of .vN(.*)go mod init gopkg.in/user/pkg.v1$'\n\n! go mod init gopkg.in/user/pkg.v0.1\nstderr '(?s)^go: invalid module path \"gopkg.in/user/pkg.v0.1\": module paths beginning with gopkg.in/ must always have a major version suffix in the form of .vN(.*)go mod init gopkg.in/user/pkg.v1$'\n\n! go mod init gopkg.in/user/pkg.v.1\nstderr '(?s)^go: invalid module path \"gopkg.in/user/pkg.v.1\": module paths beginning with gopkg.in/ must always have a major version suffix in the form of .vN(.*)go mod init gopkg.in/user/pkg.v1$'\n\n! go mod init gopkg.in/user/pkg.v01\nstderr '(?s)^go: invalid module path \"gopkg.in/user/pkg.v01\": module paths beginning with gopkg.in/ must always have a major version suffix in the form of .vN(.*)go mod init gopkg.in/user/pkg.v1$'\n\n! go mod init gopkg.in/user/pkg.v.2.3\nstderr '(?s)^go: invalid module path \"gopkg.in/user/pkg.v.2.3\": module paths beginning with gopkg.in/ must always have a major version suffix in the form of .vN(.*)go mod init gopkg.in/user/pkg.v2$'\n```\n\n----------------------------------------\n\nTITLE: Go Module Path Declaration\nDESCRIPTION: Defines the module path and version information for a Go module\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_newcycle_b_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nexample.com/newcycle/b v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: A simple Go module definition file that defines a module named 'm' with Go 1.16 as the required version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_test_only.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Specifying Go Module Version Metadata - JSON\nDESCRIPTION: Provides metadata indicating the version ('v1.0.0') of the module 'example.com/newcycle/a'. Stored in a standard Go module .info file, this is used by tooling for version resolution, proxy caching, and reproducible builds. Inputs are the semantic version string, with the output being a JSON object; there are no dependencies. Typically auto-generated and not edited manually.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_newcycle_a_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\\"Version\\\":\\\"v1.0.0\\\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring ServeMux Pattern Matching Behavior using httpmuxgo121 GODEBUG Setting (Go 1.22)\nDESCRIPTION: Introduced in Go 1.22, this setting controls the behavior of net/http.ServeMux regarding extended patterns and path segment unescaping. Go 1.22 changed the default behavior; this setting allows reverting to the Go 1.21 behavior. Set via GODEBUG environment variable (e.g., GODEBUG=httpmuxgo121=1 to use Go 1.21 behavior).\nSOURCE: https://github.com/golang/go/blob/master/doc/godebug.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nhttpmuxgo121\n```\n\n----------------------------------------\n\nTITLE: Plan 9 File Header Structure Enhancements - debug/plan9obj Package - Go\nDESCRIPTION: Adds fields to the FileHeader struct for Plan 9 object files in the debug/plan9obj package. The new fields HdrSize and LoadAddress provide header size and memory load address data, improving support for Plan 9 binary formats. Values are of type uint64 and intended for tools parsing Plan 9 a.out headers.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\ntype FileHeader struct {\n    HdrSize uint64\n    LoadAddress uint64\n    // ... other fields\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Permissions Constants for Syscalls in Go\nDESCRIPTION: This snippet introduces constant declarations for permission bits used in syscall operations across FreeBSD and OpenBSD in Go. Constants like S_IRWXG and S_IRWXO represent read, write, and execute permissions for group and others, respectively. These constants are utilized to simplify the specification of file permissions in system calls.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.12.txt#2025-04-22_snippet_15\n\nLANGUAGE: Go\nCODE:\n```\nconst S_IRWXG = 56\nconst S_IRWXG ideal-int\nconst S_IRWXO = 7\nconst S_IRWXO ideal-int\n```\n\n----------------------------------------\n\nTITLE: Adding RevocationList parsing and handling in Go's crypto/x509 package\nDESCRIPTION: Introduces new functionality for parsing and handling certificate revocation lists (CRLs) in the crypto/x509 package. This includes methods for parsing, cloning, and checking signatures of revocation lists.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.19.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc ParseRevocationList([]uint8) (*RevocationList, error)\nmethod (*CertPool) Clone() *CertPool\nmethod (*CertPool) Equal(*CertPool) bool\nmethod (*RevocationList) CheckSignatureFrom(*Certificate) error\n\ntype RevocationList struct {\n    AuthorityKeyId []uint8\n    Extensions []pkix.Extension\n    Issuer pkix.Name\n    Raw []uint8\n    RawIssuer []uint8\n    RawTBSRevocationList []uint8\n    Signature []uint8\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Git with Test Configuration and Downloading Go Module\nDESCRIPTION: This script configures Git to use a test-specific .gitconfig file by setting environment variables, verifies the user identity is properly set, configures GOPRIVATE for private repository access, and runs go mod download with verbose output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_git_bareRepository.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Redirect git to a test-specific .gitconfig.\n# GIT_CONFIG_GLOBAL suffices for git 2.32.0 and newer.\n# For older git versions we also set $HOME.\nenv GIT_CONFIG_GLOBAL=$WORK${/}home${/}gopher${/}.gitconfig\nenv HOME=$WORK${/}home${/}gopher\nexec git config --global --show-origin user.name\nstdout 'Go Gopher'\n\nenv GOPRIVATE=vcs-test.golang.org\n\ngo mod download -x\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Path in go.mod - go.mod File\nDESCRIPTION: This snippet repeats the declaration of the Go module path 'golang.org/toolchain', which serves to establish the module identity within the standard go.mod configuration file. Go expects the first non-comment line of a go.mod to be the module path, enabling package resolution and build tooling to operate within the correct scope. No other configuration options are included in this minimal example.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.18.3.linux-amd64.txt#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ngolang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Declaring a Nested Go Submodule using go.mod - Golang - go\nDESCRIPTION: This go.mod snippet declares a nested Go submodule by specifying its module path and Go version within a subdirectory. Dependencies are not listed, focusing instead on establishing the nested module namespace in the repository. The required input is the submodule path, and the configuration supports situations where submodules override or replace packages in parent modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_ambiguous_v0.2.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/ambiguous\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Implementing Quote Functions in Go\nDESCRIPTION: Implements a Go package named 'quote' that contains three functions for returning different quotes. The functions include Hello() which returns a greeting, Glass() which returns a phrase about eating glass, and Go() which returns a Go proverb about communication.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.2.1.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// Copyright 2018 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// Package quote collects pithy sayings.\npackage quote // import \"rsc.io/quote\"\n\n// Hello returns a greeting.\nfunc Hello() string {\n\treturn \"Hello, world.\"\n}\n\n// Glass returns a useful phrase for world travelers.\nfunc Glass() string {\n\t// See http://www.oocities.org/nodotus/hbglass.html.\n\treturn \"I can eat glass and it doesn't hurt me.\"\n}\n\n// Go returns a Go proverb.\nfunc Go() string {\n\treturn \"Don't communicate by sharing memory, share memory by communicating.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Module Version Information in Go - JSON\nDESCRIPTION: This snippet defines structured metadata for the Go module, indicating its specific version as a JSON object in a .info file. This information is used by Go tooling and repositories to track and resolve specific module versions. The expected input file is a JSON document typically named after the module version (e.g., v1.0.0.info); the 'Version' field must reflect the release.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_join_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n-- .info --\\n{\\\"Version\\\": \\\"v1.0.0\\\"}\n```\n\n----------------------------------------\n\nTITLE: Defining NetBSD ARM64 Syscall Constants in Go\nDESCRIPTION: This code snippet defines system call constants for NetBSD on ARM64 architecture. It includes constants for various system operations such as file I/O, process management, and inter-process communication.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_150\n\nLANGUAGE: Go\nCODE:\n```\nconst SYS_MREMAP ideal-int\nconst SYS_MSGCTL = 444\nconst SYS_MSGCTL ideal-int\nconst SYS_MSGGET = 225\nconst SYS_MSGGET ideal-int\nconst SYS_MSGRCV = 227\nconst SYS_MSGRCV ideal-int\nconst SYS_MSGSND = 226\nconst SYS_MSGSND ideal-int\nconst SYS_MUNLOCK = 204\nconst SYS_MUNLOCKALL = 243\nconst SYS_MUNLOCKALL ideal-int\nconst SYS_MUNLOCK ideal-int\nconst SYS_MUNMAP = 73\nconst SYS_MUNMAP ideal-int\n// ... (additional constants omitted for brevity)\nconst SYS___SIGACTION_SIGTRAMP = 340\nconst SYS___SIGACTION_SIGTRAMP ideal-int\nconst SYS_SIGQUEUEINFO = 245\n```\n\n----------------------------------------\n\nTITLE: Go Source File with Empty Import Path - Go\nDESCRIPTION: Defines a minimal Go package 'a' that attempts to import a module with an empty path, which is illegal according to Go's import rules. This is intended to test or demonstrate the Go compiler's or build tool's import path validation mechanism. The only input is the empty import; the compiler or tooling is expected to produce an error such as 'invalid import path'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_empty_import.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\nimport \"\"\n```\n\n----------------------------------------\n\nTITLE: Event Action Constants in Go Syscall Package for Darwin ARM64\nDESCRIPTION: Event action constants for kqueue/kevent syscalls that specify actions to take on events. These flags control how events are registered, enabled, disabled, and processed in the kernel event queue system.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_148\n\nLANGUAGE: Go\nCODE:\n```\nconst EV_ADD = 1\nconst EV_ADD ideal-int\nconst EV_CLEAR = 32\nconst EV_CLEAR ideal-int\nconst EV_DELETE = 2\nconst EV_DELETE ideal-int\nconst EV_DISABLE = 8\nconst EV_DISABLE ideal-int\nconst EV_DISPATCH = 128\nconst EV_DISPATCH ideal-int\nconst EV_ENABLE = 4\nconst EV_ENABLE ideal-int\nconst EV_EOF = 32768\nconst EV_EOF ideal-int\nconst EV_ERROR = 16384\nconst EV_ERROR ideal-int\nconst EV_FLAG0 = 4096\nconst EV_FLAG0 ideal-int\nconst EV_FLAG1 = 8192\n```\n\n----------------------------------------\n\nTITLE: Implementing Chatty Go Tests\nDESCRIPTION: A Go test file that defines a test function which generates multiple log messages. The test creates three subtests, each logging two messages and an error, to demonstrate how verbose output is handled in Go's testing framework.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_chatty_fail.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage chatty_test\n\nimport (\n\t\"testing\"\n\t\"fmt\"\n)\n\nfunc TestChatty(t *testing.T) {\n    for i := 0; i < 3; i++ {\n        t.Run(fmt.Sprintf(\"sub-%d\", i), func(t *testing.T) {\n            for j := 0; j < 2; j++ {\n                t.Logf(\"this is sub-%d\", i)\n            }\n            t.Errorf(\"error from sub-%d\", i)\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Empty Content-Length Header Behavior using httplaxcontentlength GODEBUG Setting (Go 1.22)\nDESCRIPTION: Introduced in Go 1.22, this setting controls whether an empty Content-Length header in an HTTP request or response read by net/http client or server is treated as an error. The default behavior in Go 1.22+ makes this an error. Set via GODEBUG environment variable (e.g., GODEBUG=httplaxcontentlength=0 to revert to older behavior).\nSOURCE: https://github.com/golang/go/blob/master/doc/godebug.md#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nhttplaxcontentlength\n```\n\n----------------------------------------\n\nTITLE: Declaring Go Module Metadata - Go\nDESCRIPTION: This go.mod snippet declares the module path as 'example.com/retract/rationale' and specifies that Go version 1.14 or higher is required. It is the starting point for Go dependency management, instructing Go tools on how to resolve imports and maintain compatibility. The file does not specify explicit dependencies, focusing solely on module identity and baseline Go version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rationale_v1.0.0-block.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/retract/rationale\n\ngo 1.14\n```\n\n----------------------------------------\n\nTITLE: Socket and File Operation Functions for NetBSD ARM64\nDESCRIPTION: Function signatures for socket and file operations in NetBSD on ARM64. These functions provide interfaces to system calls for network communication, file handling, and process management.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_157\n\nLANGUAGE: Go\nCODE:\n```\nfunc Accept4(int, int) (int, Sockaddr, error)\nfunc Accept(int) (int, Sockaddr, error)\nfunc Access(string, uint32) error\nfunc Adjtime(*Timeval, *Timeval) error\nfunc Bind(int, Sockaddr) error\nfunc Close(int) error\nfunc CloseOnExec(int)\nfunc CmsgLen(int) int\nfunc CmsgSpace(int) int\nfunc Connect(int, Sockaddr) error\nfunc Dup2(int, int) error\nfunc Dup(int) (int, error)\nfunc Fchdir(int) error\nfunc Fchflags(int, int) error\nfunc Fchmod(int, uint32) error\nfunc Fchown(int, int, int) error\nfunc FcntlFlock(uintptr, int, *Flock_t) error\nfunc Flock(int, int) error\n```\n\n----------------------------------------\n\nTITLE: Displaying Git References and Comparing Output\nDESCRIPTION: Shows tags and branch references, then compares stdout with a reference file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/v3pkg.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit show-ref --tags --heads\ncmp stdout .git-refs\n```\n\n----------------------------------------\n\nTITLE: Go Module Tidy and Comparison\nDESCRIPTION: Performs 'go mod tidy' and compares the result with the original go.mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncp go.mod go.mod.orig\ngo mod tidy\ncmp go.mod go.mod.orig\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Definition\nDESCRIPTION: This snippet defines a simple Go module named 'm'. It's used as the base module for testing package import behaviors.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/std_vendor.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Testing go list command with empty module\nDESCRIPTION: Tests that 'go list ./...' in an empty module doesn't try to resolve the main module. It verifies there's no unnecessary resolution attempt and confirms the proper warning is displayed exactly once.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_patterns.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# 'go list ./...' should not try to resolve the main module.\ncd ../empty\ngo list -deps ./...\n! stdout .\n! stderr 'finding'\nstderr -count=1 '^go: warning: \"./...\" matched no packages'\n```\n\n----------------------------------------\n\nTITLE: Checking Out Main Branch and Verifying References\nDESCRIPTION: Returns to the main branch and displays all tags and branch references, then compares the output with expected reference list.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/semver-branch.txt#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main\n\ngit show-ref --tags --heads\ncmp stdout .git-refs\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Access Settings in JSON\nDESCRIPTION: JSON configuration file that defines authentication credentials and error response details. It specifies username 'aladdin', password 'opensesame', and a 404 status code with an error message when authentication fails.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/auth/or404.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"Username\": \"aladdin\",\n\t\"Password\": \"opensesame\",\n\t\"StatusCode\": 404,\n\t\"Message\": \"File? What file?\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Version Mismatch\nDESCRIPTION: This Go module definition for bad114 declares Go 1.13 but requires features from Go 1.14 or higher, creating a version mismatch.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_goversion.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// Module bad114 requires Go 1.14 or higher, but declares Go 1.13.\nmodule example.net/bad114\n\ngo 1.13\n```\n\n----------------------------------------\n\nTITLE: Main Package Import\nDESCRIPTION: Main package file importing the lazy module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_irrelevant.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage m\n\nimport _ \"example.net/lazy\"\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Pseudo-Version Generation\nDESCRIPTION: Performs a series of Go commands to test the pseudo-version generation for a module in a subdirectory, verifying that it's based on the correct prefixed tag.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo_prefix.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngo get vcs-test.golang.org/git/prefixtagtests.git/sub\ngo list -m all\nstdout '^vcs-test.golang.org/git/prefixtagtests.git/sub v0.0.10$'\n\ngo get -u vcs-test.golang.org/git/prefixtagtests.git/sub@master\ngo list -m all\nstdout '^vcs-test.golang.org/git/prefixtagtests.git/sub v0.0.11-0\\.'\n```\n\n----------------------------------------\n\nTITLE: Go Workspace Configuration\nDESCRIPTION: Workspace configuration file specifying Go version 1.18 and including the current directory in the workspace.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sum.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\n\nuse .\n```\n\n----------------------------------------\n\nTITLE: Initializing an Empty Package - Go\nDESCRIPTION: Defines an empty Go package named 'p' in p.go, serving as a placeholder for future implementation. This snippet sets up the basic package structure with the required package declaration at the top and allows later addition of functions, types, or variables. No dependencies, parameters, or logic are provided in this snippet.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_prev_v1.0.0-bad.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage p\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module `example.net/pkgadded` v1.1.0 (Actual go.mod)\nDESCRIPTION: This is the standard `go.mod` file content for the Go module `example.net/pkgadded` at version v1.1.0. It declares the module path and the minimum required Go version (1.16).\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_pkgadded_v1.1.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: gomod\nCODE:\n```\nmodule example.net/pkgadded\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Go Function\nDESCRIPTION: Defines a package 'p' with an empty function 'F()'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo118_v0.0.1.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage p\n\nfunc F() {}\n```\n\n----------------------------------------\n\nTITLE: Defining Leaf Go Package (Go)\nDESCRIPTION: This Go source file defines a simple, empty package named `c` located in the `c` directory (`m/c`). It serves as a dependency for package `m/b` in this test setup.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_pgo_issue66218.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage c\n```\n\n----------------------------------------\n\nTITLE: Module Definition with Replace Directive\nDESCRIPTION: Go module configuration file defining the module name and a replace directive for rsc.io/quote dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_cmd_v1.0.0-replace.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/cmd\n\ngo 1.16\n\nreplace rsc.io/quote => rsc.io/quote v1.5.2\n```\n\n----------------------------------------\n\nTITLE: Testing Go List Command for Darwin Environment\nDESCRIPTION: Sets the environment variable for Darwin (macOS) and runs 'go list all' command to verify package building on Darwin.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_all_gobuild.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nenv GOOS=darwin\ngo list all\n```\n\n----------------------------------------\n\nTITLE: Go Mod Definition\nDESCRIPTION: Defines a sample go.mod file for the module 'm'. This module uses go version 1.14.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_rationale.txt#_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.14\n```\n\n----------------------------------------\n\nTITLE: Memory Mapping Constants in Go for Darwin ARM64\nDESCRIPTION: Constants for memory mapping operations using mmap(). Defines options for shared/private mappings, anonymous mappings, fixed address mappings, and various Darwin-specific options.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_76\n\nLANGUAGE: Go\nCODE:\n```\nconst MAP_ANON = 4096\nconst MAP_COPY = 2\nconst MAP_FILE = 0\nconst MAP_FIXED = 16\nconst MAP_HASSEMAPHORE = 512\nconst MAP_JIT = 2048\nconst MAP_NOCACHE = 1024\nconst MAP_NOEXTEND = 256\nconst MAP_NORESERVE = 64\nconst MAP_PRIVATE = 2\nconst MAP_RENAME = 32\nconst MAP_RESERVED0080 = 128\nconst MAP_SHARED = 1\n```\n\n----------------------------------------\n\nTITLE: Defining Module Dependencies for y1\nDESCRIPTION: This go.mod file for the y1 module defines its dependencies on specific versions of modules w and x.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_convergence_loop.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/y\n\ngo 1.16\n\nrequire (\n\texample.net/w v0.2.0-pre\n\texample.net/x v0.2.0-pre\n)\n```\n\n----------------------------------------\n\nTITLE: Module Info JSON Configuration\nDESCRIPTION: JSON configuration file specifying version information for the module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_dotgo.go_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.0.0\"}\n```\n\n----------------------------------------\n\nTITLE: Testing First Listed Error in go.work File\nDESCRIPTION: Copies a go.work file with multiple errors and verifies that the first error is reported when running 'go list'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_errors_pos.txt#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncp go.work.firsterrlisted.txt go.work\n! go list\nstderr '^go.work:1: unknown godebug \"baz\"$'\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Package Documentation for Testing\nDESCRIPTION: Defines a Go package 'y' with a simple package comment to test documentation discovery. This is the primary test package for the go doc command tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_doc.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Package y is the next to last package of the alphabet.\npackage y\n```\n\n----------------------------------------\n\nTITLE: Environment and Build Command Test Script\nDESCRIPTION: Shell script that sets up test environment and executes go build with specific flags to verify gcflags override behavior. Tests that -shared=false flag can override default -shared behavior when building c-archive.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_gcflags.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=off\n\n# Test that the user can override default code generation flags.\n\n[compiler:gccgo] skip  # gccgo does not use -gcflags\n[!cgo] skip\n[!GOOS:linux] skip  # test only works if c-archive implies -shared\n[short] skip\n\nenv GOCACHE=$WORK/gocache  # Looking for compile commands, so need a clean cache.\ngo build -x -n -buildmode=c-archive -gcflags=all=-shared=false ./override.go\nstderr '^.*/compile (.* )?-shared (.* )?-shared=false'\n```\n\n----------------------------------------\n\nTITLE: Declaring Root Package pkgadded\nDESCRIPTION: This snippet declares the root package 'pkgadded' which was added in version 1.1.0 of the module. It demonstrates how new packages can be introduced in module versions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_pkgadded_v1.2.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n// Package pkgadded was added in v1.1.0.\npackage pkgadded\n```\n\n----------------------------------------\n\nTITLE: Testing GOAUTH=off Behavior in Go\nDESCRIPTION: This snippet tests the behavior when GOAUTH is set to 'off'. It attempts to download a module requiring HTTPS basic auth, expecting failure even with valid netrc credentials.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goauth_netrc.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n# GOAUTH=off should result in failures.\nenv GOAUTH='off'\n# Without credentials, downloading a module from a path that requires HTTPS\n# basic auth should fail.\nenv NETRC=$WORK/empty\n! go get vcs-test.golang.org/auth/or401\nstderr '^\\tserver response: ACCESS DENIED, buddy$'\n\n# GOAUTH='off' should ignore credentials from a valid netrc file.\nenv GOAUTH='off'\nenv NETRC=$WORK/netrc\n! go get vcs-test.golang.org/auth/or401\nstderr '^\\tserver response: ACCESS DENIED, buddy$'\n```\n\n----------------------------------------\n\nTITLE: Testing 'go list' with Non-Go File and Error Handling (Shell)\nDESCRIPTION: Executes the `go list` command with flags `-e` (proceed on error), `-test` (include tests), and `-json` (JSON output). It attempts to list information for a C file (`c.c`) and a Go file (`x.go`). The expected standard output (`stdout`) shows that `go list` should report an error in JSON format because `c.c` is not a `.go` file, demonstrating issue #29899.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_test_non_go_files.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# issue 29899: handling files with non-Go extension\ngo list -e -test -json -- c.c x.go\nstdout '\"Err\": \"named files must be .go files: c.c\"'\n```\n\n----------------------------------------\n\nTITLE: Initializing a Go Module (Shell)\nDESCRIPTION: Initializes a new Go module named 'm' in the current directory by creating a 'go.mod' file. This is the first step in setting up the environment for testing module behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_sum_noroot.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo mod init m\n```\n\n----------------------------------------\n\nTITLE: Toolow Module Configuration\nDESCRIPTION: Module configuration specifying an older version dependency that needs updating\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_indirect.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/toolow\n\ngo 1.16\n\nrequire example.net/indirect v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Replace Directive\nDESCRIPTION: This Go module definition specifies the module name, Go version, and includes a replace directive to use a local directory for a dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_issue46867.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule golang.org/issue46867\n\ngo 1.17\n\nreplace example.net/m v0.1.0 => ./m\n\nrequire example.net/m v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Testing Cross-Package Function Usage in Go\nDESCRIPTION: This Go test file defines a test package (p1_test) for p1, importing both the p2 package from the same module and the testing package. It contains a Test function that calls p2.F(), ensuring that p2's code is exercised during p1's tests. Requires the underlying package structure in place, Go's standard testing library, and module coverdep2. Expects no input parameters; the output depends on whether the covered code executes successfully.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_dep_loop.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage p1_test\n\nimport (\n\t\"coverdep2/p2\"\n\t\"testing\"\n)\n\nfunc Test(t *testing.T) {\n\tp2.F()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Memory Advisory Constants for OpenBSD in Go\nDESCRIPTION: Memory advisory (MADV) constants for the OpenBSD platform. These constants are used with madvise() system call to provide advice about the expected usage pattern of memory regions.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_36\n\nLANGUAGE: Go\nCODE:\n```\nconst MADV_DONTNEED = 4\nconst MADV_DONTNEED ideal-int\nconst MADV_FREE = 6\nconst MADV_FREE ideal-int\nconst MADV_NORMAL = 0\nconst MADV_NORMAL ideal-int\nconst MADV_RANDOM = 1\nconst MADV_RANDOM ideal-int\nconst MADV_SEQUENTIAL = 2\nconst MADV_SEQUENTIAL ideal-int\nconst MADV_SPACEAVAIL = 5\nconst MADV_SPACEAVAIL ideal-int\nconst MADV_WILLNEED = 3\nconst MADV_WILLNEED ideal-int\n```\n\n----------------------------------------\n\nTITLE: Asserting Non-Zero Coverage Output (Shell Script Syntax)\nDESCRIPTION: Uses test script syntax to assert that the standard error (`stderr`) and standard output (`stdout`) of the preceding `go test` command do *not* contain '0.0%' preceded by a non-digit character. This checks that some level of code coverage was actually measured and reported.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_modes.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n! stderr '[^0-9]0\\.0%'\n```\n\nLANGUAGE: shell\nCODE:\n```\n! stdout '[^0-9]0\\.0%'\n```\n\n----------------------------------------\n\nTITLE: Indirect Module Definition\nDESCRIPTION: Module configuration for the indirect dependency\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_ambiguous.txt#2025-04-22_snippet_2\n\nLANGUAGE: gomod\nCODE:\n```\nmodule example.net/indirect\n\ngo 1.17\n\nrequire example.net/ambiguous v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Darwin ARM64 Socket Option Constants\nDESCRIPTION: Constants defining socket options for Darwin ARM64 systems, including timestamp, type, and behavior flags.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_98\n\nLANGUAGE: Go\nCODE:\n```\nconst SO_TYPE = 4104\nconst SO_USELOOPBACK = 64\nconst SO_WANTMORE = 16384\nconst SO_WANTOOBFLAG = 32768\n```\n\n----------------------------------------\n\nTITLE: Package D Main with Import\nDESCRIPTION: Go main package that imports package b to test dependency handling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_git.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport _ \"example.com/b\"\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid +incompatible Suffix for Canonical Version in Go\nDESCRIPTION: This snippet tests that an invalid +incompatible suffix for a canonical version should error out, not resolve to a pseudo-version. It adds an invalid requirement and checks for the expected error message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_version.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ncp go.mod.orig go.mod\ngo mod edit -require github.com/pierrec/lz4@v2.0.8+incompatible\ncd outside\n! go list -m github.com/pierrec/lz4\nstderr '^go: github.com/pierrec/lz4@v2.0.8\\+incompatible: invalid version: module contains a go.mod file, so module path must match major version \\(\"github.com/pierrec/lz4/v2\"\\)$'\ncd ..\n! go list -m github.com/pierrec/lz4\nstderr '^go: github.com/pierrec/lz4@v2.0.8\\+incompatible: invalid version: module contains a go.mod file, so module path must match major version \\(\"github.com/pierrec/lz4/v2\"\\)$'\n```\n\n----------------------------------------\n\nTITLE: Testing 'go mod download -json' with GOTOOLCHAIN=go1.21 outside a module\nDESCRIPTION: Tests that 'go mod download -json' with GOTOOLCHAIN=go1.21 writes errors in the JSON Error fields rather than to stderr, and only fails for modules requiring newer versions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_exec_toolchain.txt#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nenv GOTOOLCHAIN=go1.21\n! go mod download -json rsc.io/needgo121@latest rsc.io/needgo122@latest rsc.io/needgo123@latest rsc.io/needall@latest\n! stderr switching\nstdout -count=1 '\"Error\": \"rsc.io/needgo122@v0.0.1 requires go .*= 1.22 \\(running go 1.21; GOTOOLCHAIN=go1.21\\)\"'\nstdout -count=1 '\"Error\": \"rsc.io/needgo123@v0.0.1 requires go .*= 1.23 \\(running go 1.21; GOTOOLCHAIN=go1.21\\)\"'\nstdout -count=1 '\"Error\": \"rsc.io/needall@v0.0.1 requires go .*= 1.23 \\(running go 1.21; GOTOOLCHAIN=go1.21\\)\"'\n! stdout '\"Error\": \"rsc.io/needgo121'  # We can handle this one.\n! stderr .\n```\n\n----------------------------------------\n\nTITLE: Fetching a Specific Go Module Version with go get (Shell)\nDESCRIPTION: Downloads and installs version 2 (`v2`) of the `rsc.io/fortune` package using the `go get` command. The `/v2` suffix in the import path specifies the major version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_install_versioned.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo get rsc.io/fortune/v2\n```\n\n----------------------------------------\n\nTITLE: Setting Multipart Form Limit using multipartmaxparts GODEBUG Setting (Go 1.21)\nDESCRIPTION: Introduced in Go 1.21, this setting controls the maximum number of parts allowed when parsing multipart forms via mime/multipart. This limit helps prevent denial of service attacks. This behavior was backported to Go 1.19.8+ and Go 1.20.3+. Set via GODEBUG environment variable (e.g., GODEBUG=multipartmaxparts=N).\nSOURCE: https://github.com/golang/go/blob/master/doc/godebug.md#2025-04-22_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\nmultipartmaxparts\n```\n\n----------------------------------------\n\nTITLE: GOPATH Test Package with Identical Import Path\nDESCRIPTION: A test package y with different documentation but the same import path as the module package. This is used to verify that module packages are preferred over GOPATH packages in module mode.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_doc.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Package y is located in a GOPATH workspace.\npackage y\n```\n\n----------------------------------------\n\nTITLE: Package B1 Implementation\nDESCRIPTION: Simple implementation of package b v0.1.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_downgrade.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage b\n```\n\n----------------------------------------\n\nTITLE: Go Module Download Cache Reuse Tests\nDESCRIPTION: Tests for reusing cached module information and verifying proper JSON output with reuse flag\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/reuse_git.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo mod download -reuse=hello.json -x -json vcs-test.golang.org/git/hello.git@latest\ngo mod download -reuse=hellopseudo.json -x -json vcs-test.golang.org/git/hello.git@v0.0.0-20170922010558-fc3a09f3dc5c\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module definition file for module 'x' specifying Go version 1.19.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_issue55952.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule x\n\ngo 1.19\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module definition file specifying the module name and its dependency on rsc.io/sampler v1.3.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v3_v3.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule rsc.io/quote/v3\n\nrequire rsc.io/sampler v1.3.0\n```\n\n----------------------------------------\n\nTITLE: Setting and Unsetting Multiple Go Environment Variables\nDESCRIPTION: This snippet demonstrates how to set multiple variables at once using 'go env -w' and how to unset them using 'go env -u'. It also shows that the environment file is maintained in sorted order.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_write.txt#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# go env -w can set multiple variables\nenv CC=\ngo env CC\n! stdout ^xyc$\ngo env -w GOOS=$GOOS CC=xyc\ngrep CC=xyc $GOENV\n# file is maintained in sorted order\ngrep 'CC=xyc\\nGOOS=' $GOENV\ngo env CC\nstdout ^xyc$\n\n# go env -u unsets effect of go env -w.\ngo env -u CC\ngo env CC\n! stdout ^xyc$\n```\n\n----------------------------------------\n\nTITLE: Specifying Module Version Metadata in JSON (.info)\nDESCRIPTION: This JSON object, stored in a `.info` file, provides metadata about the module version. It explicitly states the version is `v0.0.1-go1.999testmod.illumos-amd64`. Go tools use `.info` files to get version information for modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.illumos-amd64.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.999testmod.illumos-amd64\"}\n```\n\n----------------------------------------\n\nTITLE: Basic Go Program for Cross-Compilation Testing\nDESCRIPTION: Minimal Go program with empty main function used to test cross-compilation functionality for ARM Linux platform. Functions as a validation test to ensure basic compilation works without math library dependency errors.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_arm.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Future Version Requirement\nDESCRIPTION: This go.mod file defines a module named 'example.com' that requires Go version 1.999, which is a future version. It also includes an invalid line 'anewblock foo' to test error handling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_unknown_block.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com\n\ngo 1.999\n\nanewblock foo\n```\n\n----------------------------------------\n\nTITLE: Darwin ARM64 Syscall Constants Definition\nDESCRIPTION: System call constants for Darwin ARM64 platform, including file operations, process management, IPC, and memory management calls. Each constant is defined both as a numeric value and an ideal-int type.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_101\n\nLANGUAGE: Go\nCODE:\n```\nconst (\n    SYS_FUTIMES = 139\n    SYS_GETATTRLIST = 220\n    SYS_GETAUDIT_ADDR = 357\n    SYS_GETAUID = 353\n    SYS_GETDIRENTRIES = 196\n    SYS_GETDIRENTRIES64 = 344\n    SYS_GETDIRENTRIESATTR = 222\n    SYS_GETDTABLESIZE = 89\n    SYS_GETEGID = 43\n    SYS_GETEUID = 25\n    // ... additional constants omitted for brevity ...\n    SYS_OPEN = 5\n    SYS_OPEN_DPROTECTED_NP = 216\n    SYS_OPEN_EXTENDED = 277\n)\n```\n\n----------------------------------------\n\nTITLE: Checking Go Module Version with go list\nDESCRIPTION: This snippet shows how to use the 'go list' command to check the Go version specified in the module. It demonstrates that the initial Go version is 1.15.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline_old.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo list -f '{{.Module.GoVersion}}'\n```\n\n----------------------------------------\n\nTITLE: Empty Go Module File Template\nDESCRIPTION: An empty Go module file template used as the starting point for each test case in the script.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_test.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Go Program for Checking Runtime GOROOT\nDESCRIPTION: This Go program verifies the runtime.GOROOT() value against an expected value. It handles symlinks and performs a case-insensitive comparison to ensure the correct GOROOT is detected at runtime.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goroot_executable.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"runtime\"\n\t\"strings\"\n)\n\nfunc main() {\n\tgoroot, err := filepath.EvalSymlinks(runtime.GOROOT())\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n\twant, err := filepath.EvalSymlinks(os.Args[1])\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n\tif !strings.EqualFold(goroot, want) {\n\t\tfmt.Fprintf(os.Stderr, \"go env GOROOT:\\nhave %s\\nwant %s\\n\", goroot, want)\n\t\tos.Exit(1)\n\t}\n\tfmt.Fprintf(os.Stderr, \"go env GOROOT: %s\\n\", goroot)\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module for Version Control Testing\nDESCRIPTION: Go module definition file that specifies the module path. This establishes the import path for the module in the Go ecosystem.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/modlegacy1-new.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule \"vcs-test.golang.org/git/modlegacy1-new.git/v2\"\n```\n\n----------------------------------------\n\nTITLE: Automating Coverage and Cache Validation - Shell\nDESCRIPTION: This shell script automates Go test commands using different coverage and cache settings, including an isolated GOCACHE environment, and validates caching reliability and coverage output with regular expressions. It checks standard output and stderr patterns to ensure proper test results and absence of unexpected build/link events. The script is intended for use in regression testing for issue 64014 and assumes the presence of Go modules and packages laid out in the project, with required tools installed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_statements.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Workaround for issue 64014 -- for the portion of this test that\n# verifies that caching works correctly, the cache should theoretically\n# always behave reliably/deterministically, however if other tests are\n# concurrently accessing the cache while this test is running, it can\n# lead to cache lookup failures, which manifest as test failures here.\n# To avoid such flakes, use a separate isolated GOCACHE for this test.\nenv GOCACHE=$WORK/cache\n\n# Initial run with simple coverage.\ngo test -cover ./pkg1 ./pkg2 ./pkg3 ./pkg4\nstdout 'pkg1\t\tcoverage: 0.0% of statements'\nstdout 'pkg2\\S+coverage: 0.0% of statements \\[no tests to run\\]'\nstdout 'pkg3\\S+coverage: 100.0% of statements'\nstdout 'pkg4\\S+coverage: \\[no statements\\]'\n\n# Second run to make sure that caching works properly.\ngo test -x -cover ./pkg1 ./pkg2 ./pkg3 ./pkg4\nstdout 'pkg1\t\tcoverage: 0.0% of statements'\nstdout 'pkg2\\S+coverage: 0.0% of statements \\[no tests to run\\]'\nstdout 'pkg3\\S+coverage: 100.0% of statements'\nstdout 'pkg4\\S+coverage: \\[no statements\\]'\n! stderr 'link(\\.exe\"?)? -'\n! stderr 'compile(\\.exe\"?)? -'\n! stderr 'cover(\\.exe\"?)? -'\nstderr 'covdata(\\.exe\"?)? percent'\n\n# Now add in -coverprofile.\ngo test -cover -coverprofile=cov.dat ./pkg1 ./pkg2 ./pkg3 ./pkg4\nstdout 'pkg1\t\tcoverage: 0.0% of statements'\nstdout 'pkg2\\S+coverage: 0.0% of statements \\[no tests to run\\]'\nstdout 'pkg3\\S+coverage: 100.0% of statements'\nstdout 'pkg4\\S+coverage: \\[no statements\\]'\n\n# Validate\ngo tool cover -func=cov.dat\nstdout 'pkg1/a.go:5:\\s+F\\s+0.0%'\n\n```\n\n----------------------------------------\n\nTITLE: Module B Definition\nDESCRIPTION: The go.mod file for module 'm/b', which is the second dependent module in the circular dependency chain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_cycle.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule m/b\n```\n\n----------------------------------------\n\nTITLE: Declaring FreeBSD Network Buffer and IO Constants - Go\nDESCRIPTION: This snippet declares buffer, name size, and IO operation constants (e.g., MAP_ALIGNED_SUPER, MSG_CMSG_CLOEXEC, NAME_MAX, O_CLOEXEC) to facilitate lower-level memory and socket/channel operations in FreeBSD system programming. These are used anywhere Go applications or packages manipulate syscall buffers, perform IOCTLs, or open files with specific flags. Ensure compilation under matching architecture targets for correct values.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\nconst MAP_ALIGNED_SUPER = 16777216\nconst MAP_ALIGNED_SUPER ideal-int\nconst MAP_ALIGNMENT_MASK = -16777216\nconst MAP_ALIGNMENT_MASK ideal-int\nconst MAP_ALIGNMENT_SHIFT = 24\nconst MAP_ALIGNMENT_SHIFT ideal-int\nconst MSG_CMSG_CLOEXEC = 262144\nconst MSG_CMSG_CLOEXEC ideal-int\nconst NAME_MAX = 255\nconst NAME_MAX ideal-int\nconst O_CLOEXEC = 1048576\n\n```\n\n----------------------------------------\n\nTITLE: Defining Test Dependency for Package 'x/inall' (Go)\nDESCRIPTION: Defines a test file for package `x/inall` (using the `inall_test` naming convention). It imports `x/inall/fromtestinall` using a blank identifier, establishing a test-only dependency within the `x` module that should be picked up by `go list -deps all`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_notall.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n-- x/inall/inall_test.go --\npackage inall_test\n\nimport _ \"x/inall/fromtestinall\"\n```\n\n----------------------------------------\n\nTITLE: Git Credentials with Authentication\nDESCRIPTION: Git credentials file containing HTTP basic authentication information for the test repository.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goauth_git.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhttps://aladdin:opensesame@vcs-test.golang.org\n```\n\n----------------------------------------\n\nTITLE: Markdown Hello World\nDESCRIPTION: Hello world message formatted as markdown text.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/para.txt#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nHello, world. This is a paragraph.\n```\n\n----------------------------------------\n\nTITLE: Main Package with Dependency Import\nDESCRIPTION: The main package file that imports a dependency and defines a constant using Go 1.13+ syntax.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version_missing.txt#2025-04-22_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\npackage m\n\nimport _ \"example.com/dep\"\n\nconst x = 1_000\n```\n\n----------------------------------------\n\nTITLE: Invalid Go Source File\nDESCRIPTION: Contains an intentionally invalid Go source file to trigger a build failure during testing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_issue35169.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\npackage example\n\nThis is not valid Go source.\n```\n\n----------------------------------------\n\nTITLE: Running go list with vendor mode\nDESCRIPTION: Executes 'go list' command with the -mod=vendor flag to test behavior with redundant requirements in go.mod.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_redundant_requirement.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo list -mod=vendor\n```\n\n----------------------------------------\n\nTITLE: External Test with Main Import\nDESCRIPTION: External test file (xtest) attempting to import main package, which should fail during testing\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/import_main.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage p_test\n\nimport (\n\t\"testing\"\n\txmain \"x\"\n)\n\nvar _ = xmain.X\n\nfunc TestFoo(t *testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Main Module Configuration (go.mod)\nDESCRIPTION: Main module configuration file defining module dependencies and replace directives for module versions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downadd_indirect.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/a\n\ngo 1.15\n\nrequire example.com/b v0.2.0\n\nreplace (\n\texample.com/b v0.1.0 => ./b1\n\texample.com/b v0.2.0 => ./b2\n\texample.com/c v0.1.0 => ./c\n\texample.com/d v0.1.0 => ./d\n\texample.com/d v0.2.0 => ./d\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Toolchain Version in JSON (.info)\nDESCRIPTION: Provides the Go toolchain version in JSON format, typically found within a `.info` file associated with the toolchain module. This file stores metadata about the specific toolchain version (`v0.0.1-go1.22.1.linux-amd64`).\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.22.1.linux-amd64.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.22.1.linux-amd64\"}\n```\n\n----------------------------------------\n\nTITLE: Main Test File Implementation\nDESCRIPTION: A simple Go program that prints 'test' to stdout, used as a test file in various test cases.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_go_file.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\nfunc main() {println(\"test\")}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module and Package\nDESCRIPTION: Creates a minimal Go module and package structure for the test, including a go.mod file and a Go source file importing the test module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo_prefix.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n-- go.mod --\nmodule x\n\ngo 1.12\n-- x.go --\npackage x\n\nimport _ \"vcs-test.golang.org/prefixtagtests.git/sub\"\n```\n\n----------------------------------------\n\nTITLE: Test Using Only Struct Initialization in pkg4 - Go\nDESCRIPTION: This snippet provides a minimal test in 'pkg4' that initializes the struct T without executing any code, intentionally leaving the package with no statements to cover. It checks tool output when no coverage is possible and requires only the 'testing' package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_statements.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage pkg4\n\nimport (\n\t\"testing\"\n)\n\nfunc TestT(t *testing.T) {\n\t_ = T{}\n}\n```\n\n----------------------------------------\n\nTITLE: Vendor Directory Main Package\nDESCRIPTION: A Go main package file in the vendor directory that would be handled specifically in module-aware mode.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_fs_patterns.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n```\n\n----------------------------------------\n\nTITLE: Basic Go Program with CGO\nDESCRIPTION: Simple Go program that uses CGO and prints 'hello'. Includes an empty C import block to enable CGO functionality.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_gc_sections.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\n/*\n*/\nimport \"C\"\n\nfunc main() {\n\tprintln(\"hello\")\n}\n```\n\n----------------------------------------\n\nTITLE: Expected Output for Module Execution\nDESCRIPTION: This plaintext snippet shows the expected output when running the 'printversion' module, including path and version information for the main module and its dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_replace.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\npath is example.com/printversion\nmain is example.com/printversion v0.1.0\n\t(replaced by example.com/printversion v1.0.0)\nusing example.com/version v1.0.0\n\t(replaced by example.com/version v1.0.1)\n```\n\n----------------------------------------\n\nTITLE: Linux MIPS Platform Configuration\nDESCRIPTION: Configuration settings for Linux MIPS build environment\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_cross_build.txt#2025-04-22_snippet_3\n\nLANGUAGE: conf\nCODE:\n```\nGOOS=linux\nGOARCH=mips\n```\n\n----------------------------------------\n\nTITLE: Verifying Go Command Rejection of Newline Paths in Shell\nDESCRIPTION: Sets up a test directory with a newline character in its path (`$WORK${/}${newline}'package main'`). Copies Go source files (`go.mod`, `main.go`, etc.) into this directory. It then attempts to build, run, and test the package using `go build`, `go run`, and `go test`, asserting that these commands fail (`!`) and emit a specific error message (`stderr`) indicating an invalid package directory due to the newline. Includes conditional logic (`[cgo]`, `[!cgo]`) for CGO-specific builds.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cwd_newline.txt#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n[GOOS:windows] skip 'filesystem normalizes / to \\'\n[GOOS:plan9] skip 'filesystem disallows \\n in paths'\n\n# If the directory path containing a package to be built includes a newline,\n# the go command should refuse to even try to build the package.\n\nenv DIR=$WORK${/}${newline}'package main'${newline}'func main() { panic(\"uh-oh\")'${newline}'/*'\n\nmkdir $DIR\ncd $DIR\nexec pwd\ncp $WORK/go.mod ./go.mod\ncp $WORK/main.go ./main.go\ncp $WORK/main_nocgo.go ./main_nocgo.go\ncp $WORK/main_test.go ./main_test.go\n\n! go build -o $devnull .\nstderr 'package example: invalid package directory .*uh-oh'\n\n[cgo] ! go build -o $devnull main.go\n[!cgo] ! go build -o $devnull main_nocgo.go\nstderr 'package command-line-arguments: invalid package directory .*uh-oh'\n\n! go run .\nstderr 'package example: invalid package directory .*uh-oh'\n\n[cgo] ! go run main.go\n[!cgo] ! go run main_nocgo.go\nstderr 'package command-line-arguments: invalid package directory .*uh-oh'\n\n! go test .\nstderr 'package example: invalid package directory .*uh-oh'\n\n[cgo] ! go test -v main.go main_test.go\n[!cgo] ! go test -v main_nocgo.go main_test.go\nstderr 'package command-line-arguments: invalid package directory .*uh-oh'\n\ngo list -compiled -e -f '{{with .CompiledGoFiles}}{{.}}{{end}}' .\n! stdout .\n! stderr .\n! exists obj_\n```\n\n----------------------------------------\n\nTITLE: Verifying No Non-Standard Packages in GOROOT/src using Go List in Shell\nDESCRIPTION: Changes the current directory to the Go standard library source (`$GOROOT/src`) and uses `go list` with a custom format (`-f`) to find any packages recursively (`./...`) that are *not* marked as standard (`{{if not .Standard}}`). The command then asserts (`! stdout .`) that no such non-standard packages are found directly within `$GOROOT/src`, confirming its standard library contents.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_std.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Listing GOROOT should only find standard packages.\ncd $GOROOT/src\ngo list -f '{{if not .Standard}}{{.ImportPath}}{{end}}' ./...\n! stdout .\n```\n\n----------------------------------------\n\nTITLE: Testing QUOTE Package Functions in Go\nDESCRIPTION: This snippet contains test functions for the QUOTE package. It tests the HELLO, GLASS, GO, and OPT functions to ensure they return the expected uppercase quotes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_!q!u!o!t!e_v1.5.2.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage QUOTE\n\nimport (\n\t\"os\"\n\t\"testing\"\n)\n\nfunc init() {\n\tos.Setenv(\"LC_ALL\", \"en\")\n}\n\nfunc TestHELLO(t *testing.T) {\n\thello := \"HELLO, WORLD\"\n\tif out := HELLO(); out != hello {\n\t\tt.Errorf(\"HELLO() = %q, want %q\", out, hello)\n\t}\n}\n\nfunc TestGLASS(t *testing.T) {\n\tglass := \"I CAN EAT GLASS AND IT DOESN'T HURT ME.\"\n\tif out := GLASS(); out != glass {\n\t\tt.Errorf(\"GLASS() = %q, want %q\", out, glass)\n\t}\n}\n\nfunc TestGO(t *testing.T) {\n\tgo1 := \"DON'T COMMUNICATE BY SHARING MEMORY, SHARE MEMORY BY COMMUNICATING.\"\n\tif out := GO(); out != go1 {\n\t\tt.Errorf(\"GO() = %q, want %q\", out, go1)\n\t}\n}\n\nfunc TestOPT(t *testing.T) {\n\topt := \"IF A PROGRAM IS TOO SLOW, IT MUST HAVE A LOOP.\"\n\tif out := OPT(); out != opt {\n\t\tt.Errorf(\"OPT() = %q, want %q\", out, opt)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Go Checksum File for Dot-Go Suffix Package\nDESCRIPTION: This go.sum file contains the checksum for the 'example.com/dotgo.go' package version 1.0.0, ensuring integrity of the dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_trailing_slash.txt#2025-04-22_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\nexample.com/dotgo.go v1.0.0 h1:XKJfs0V8x2PvY2tX8bJBCEbCDLnt15ma2onwhVpew/I=\nexample.com/dotgo.go v1.0.0/go.mod h1:Qi6z/X3AC5vHiuMt6HF2ICx3KhIBGrMdrA7YoPDKqR0=\n```\n\n----------------------------------------\n\nTITLE: Minimal Go Main Package\nDESCRIPTION: A minimal Go program with an empty main function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_run_pkg_version.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Test Implementation for Package 'aa' in Go\nDESCRIPTION: Simple test for package 'aa' that calls the AA function with parameter 3.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_multipkg.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage aa\n\nimport \"testing\"\n\nfunc TestMumble(t *testing.T) {\n\tAA(3)\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Indirect Tag Removal in Go Module\nDESCRIPTION: This snippet tests if the indirect tag is removed from a dependency when it becomes directly imported in the code.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_indirect.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncp $WORK/tmp/uselang.go x.go\ngo get\ngrep 'rsc.io/quote v1.5.2$' go.mod\ngrep 'golang.org/x/text [v0-9a-f\\.-]+$' go.mod\n```\n\n----------------------------------------\n\nTITLE: Module D Implementation (d/d.go)\nDESCRIPTION: Implementation file for module d.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downadd_indirect.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage d\n```\n\n----------------------------------------\n\nTITLE: Declaring a Package-Level Constant in Go\nDESCRIPTION: This snippet defines a package named 'pseudoupgrade' and declares a single package-level constant 'X' with the value 1. It requires the Go programming language with a suitable Go workspace. The constant can be accessed as 'pseudoupgrade.X' from other Go code, and is integer-typed with no parameters or side effects. This minimalist pattern is often used to expose primitives or configuration in Go packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_pseudoupgrade_v0.1.1-0.20190429073117-b5426c86b553.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage pseudoupgrade\\n\\nconst X = 1\n```\n\n----------------------------------------\n\nTITLE: Deprecations in syscall package for freebsd-386-cgo\nDESCRIPTION: Lists deprecated functions in the syscall package for freebsd-386-cgo architecture.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_33\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-386-cgo), func BpfBuflen //deprecated\npkg syscall (freebsd-386-cgo), func BpfDatalink //deprecated\npkg syscall (freebsd-386-cgo), func BpfHeadercmpl //deprecated\npkg syscall (freebsd-386-cgo), func BpfInterface //deprecated\npkg syscall (freebsd-386-cgo), func BpfJump //deprecated\npkg syscall (freebsd-386-cgo), func BpfStats //deprecated\npkg syscall (freebsd-386-cgo), func BpfStmt //deprecated\npkg syscall (freebsd-386-cgo), func BpfTimeout //deprecated\npkg syscall (freebsd-386-cgo), func CheckBpfVersion //deprecated\npkg syscall (freebsd-386-cgo), func FlushBpf //deprecated\npkg syscall (freebsd-386-cgo), func ParseRoutingMessage //deprecated\npkg syscall (freebsd-386-cgo), func ParseRoutingSockaddr //deprecated\npkg syscall (freebsd-386-cgo), func RouteRIB //deprecated\npkg syscall (freebsd-386-cgo), func SetBpf //deprecated\npkg syscall (freebsd-386-cgo), func SetBpfBuflen //deprecated\npkg syscall (freebsd-386-cgo), func SetBpfDatalink //deprecated\n```\n\n----------------------------------------\n\nTITLE: Socket Address Structs for darwin-arm64\nDESCRIPTION: Collection of socket address structure definitions used for network programming on darwin-arm64, including raw socket representations for different address families.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_129\n\nLANGUAGE: go\nCODE:\n```\ntype RawSockaddr struct {\n\tLen uint8\n\tFamily uint8\n\tData [14]int8\n}\n\ntype RawSockaddrAny struct {\n\tPad [92]int8\n}\n\ntype RawSockaddrInet4 struct {\n\tLen uint8\n\tFamily uint8\n\tZero [8]int8\n}\n\ntype RawSockaddrInet6 struct {\n\tLen uint8\n\tFamily uint8\n}\n\ntype RawSockaddrUnix struct {\n\tLen uint8\n\tFamily uint8\n\tPath [104]int8\n}\n\ntype RawSockaddrDatalink struct {\n\tLen uint8\n\tFamily uint8\n\tIndex uint16\n\tType uint8\n\tNlen uint8\n\tAlen uint8\n\tSlen uint8\n\tData [12]int8\n}\n\ntype SockaddrDatalink struct {\n\tLen uint8\n\tFamily uint8\n\tIndex uint16\n\tType uint8\n\tNlen uint8\n\tAlen uint8\n\tSlen uint8\n\tData [12]int8\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an External Test for Main Package (Go)\nDESCRIPTION: Defines a test file for the 'pkg' package, also declared as part of the 'main' package. This structure creates an 'external test package'. It imports the standard 'testing' package and includes a minimal test function 'Test'. This file resides at '$GOPATH/src/pkg/pkg_test.go' and is crucial for triggering the specific recompilation behavior being tested.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_split_main.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// $GOPATH/src/pkg/pkg_test.go --\npackage main\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Localized Text Management in Go\nDESCRIPTION: Implementation of text struct and associated methods for managing and finding localized text based on language preferences. Includes RTL text handling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.99.99.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype text struct {\n    byTag   map[string]string\n    matcher language.Matcher\n}\n\nfunc newText(s string) *text {\n    t := &text{\n        byTag: make(map[string]string),\n    }\n    var tags []language.Tag\n    for _, line := range strings.Split(s, \"\\n\") {\n        line = strings.TrimSpace(line)\n        if line == \"\" {\n            continue\n        }\n        f := strings.Split(line, \": \")\n        if len(f) != 3 {\n            continue\n        }\n        tag := language.Make(f[1])\n        tags = append(tags, tag)\n        t.byTag[tag.String()] = f[2]\n    }\n    t.matcher = language.NewMatcher(tags)\n    return t\n}\n\nfunc (t *text) find(prefs []language.Tag) string {\n    tag, _, _ := t.matcher.Match(prefs...)\n    s := t.byTag[tag.String()]\n    if strings.HasPrefix(s, \"RTL \") {\n        s = \"\\u200F\" + strings.TrimPrefix(s, \"RTL \") + \"\\u200E\"\n    }\n    return s\n}\n```\n\n----------------------------------------\n\nTITLE: Terminal Control and Clone Flags in NetBSD ARM64\nDESCRIPTION: Terminal control and process clone flags for NetBSD ARM64. These constants define terminal input/output control flags and process cloning options used in system calls for controlling terminal behavior and process creation.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_12\n\nLANGUAGE: Go\nCODE:\n```\nconst BRKINT = 2\nconst BRKINT ideal-int\nconst CFLUSH = 15\nconst CFLUSH ideal-int\nconst CLOCAL = 32768\nconst CLOCAL ideal-int\nconst CLONE_CSIGNAL = 255\nconst CLONE_CSIGNAL ideal-int\nconst CLONE_FILES = 1024\nconst CLONE_FILES ideal-int\nconst CLONE_FS = 512\nconst CLONE_FS ideal-int\nconst CLONE_PID = 4096\nconst CLONE_PID ideal-int\nconst CLONE_PTRACE = 8192\nconst CLONE_PTRACE ideal-int\nconst CLONE_SIGHAND = 2048\nconst CLONE_SIGHAND ideal-int\nconst CLONE_VFORK = 16384\nconst CLONE_VFORK ideal-int\nconst CLONE_VM = 256\n```\n\n----------------------------------------\n\nTITLE: Archive File Validator Utility\nDESCRIPTION: A Go program that checks if a given file is a valid archive by examining its header bytes. It expects the file path as a command-line argument and validates that it starts with the archive signature '!<arch>'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_output.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\n\nfunc main() {\n\tf, err := os.Open(os.Args[1])\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n\tbuf := make([]byte, 100)\n\tio.ReadFull(f, buf)\n\tf.Close()\n\tif !bytes.HasPrefix(buf, []byte(\"!<arch>\\n\")) {\n\t\tfmt.Fprintf(os.Stderr, \"file %s exists but is not an archive\\n\", os.Args[1])\n\t\tos.Exit(1)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Test Cases for Go Compiler in Shell\nDESCRIPTION: This snippet runs various test cases to check the behavior of the Go compiler in different scenarios, including relocated executables, symlinked executables, and runtime GOROOT detection.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goroot_executable.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nexec $WORK/bin/check$GOEXE $WORK/new/bin/go$GOEXE $TESTGOROOT\n\nmkdir $WORK/new/pkg/tool\nexec $WORK/bin/check$GOEXE $WORK/new/bin/go$GOEXE $WORK/new\n\n[!symlink] stop 'The rest of the test cases require symlinks'\n\nmkdir $WORK/other/bin\nsymlink $WORK/other/bin/go$GOEXE -> $WORK/new/bin/go$GOEXE\nexec $WORK/bin/check$GOEXE $WORK/new/bin/go$GOEXE $WORK/new\n\nrm $WORK/new/pkg\n\nsymlink $WORK/new/src -> $TESTGOROOT/src\nsymlink $WORK/new/pkg -> $TESTGOROOT/pkg\nexec $WORK/new/bin/go$GOEXE run check_runtime_goroot.go $WORK/new\n```\n\n----------------------------------------\n\nTITLE: Testing Error Handling for Missing Packages\nDESCRIPTION: Tests the go command's error handling when a matched module does not contain the expected package. It uses 'go mod tidy' in a directory with intentionally problematic imports.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_import.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n# The go command should print an informative error when the matched\n# module does not contain a package.\n# TODO(#26909): Ideally these errors should include line numbers for the imports within the main module.\ncd fail\n! go mod tidy\nstderr '^go: localhost.fail imports\\n\\tw: module w@latest found \\(v0.0.0-00010101000000-000000000000, replaced by ../w\\), but does not contain package w$'\nstderr '^go: localhost.fail imports\\n\\tnonexist: nonexist@v0.1.0: replacement directory ../nonexist does not exist$'\n```\n\n----------------------------------------\n\nTITLE: Atomic Value Type and Access - sync/atomic Package - Go\nDESCRIPTION: Introduces Value struct in sync/atomic for safe concurrent storage, and Load()/Store() methods for reading/writing interface{} values atomically. Value provides a lock-free, thread-safe container for shared data. All reads and writes must use provided methods; improper use may result in panics or race conditions.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_23\n\nLANGUAGE: Go\nCODE:\n```\ntype Value struct\nmethod (*Value) Load() interface{}\nmethod (*Value) Store(interface{})\n```\n\n----------------------------------------\n\nTITLE: Defining Intermediate Go Package with Import (Go)\nDESCRIPTION: This Go source file defines a package named `a` (note: file path is `b/b.go`, typically package name would be `b`) located in the `b` directory (`m/b`). It imports package `m/c` using the blank identifier (`_`) for its side effects. This package is imported by `m/a`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_pgo_issue66218.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\nimport _ \"m/c\"\n```\n\n----------------------------------------\n\nTITLE: Declaring a Go Module with go.mod\nDESCRIPTION: Defines the module path for the project, enabling Go modules within the repository. This go.mod file is required for dependency management and module-scoped development, specifying 'ldflag' as the module name. No dependencies are specified, and no additional configuration is included.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/darwin_lto_library_ldflag.txt#2025-04-22_snippet_0\n\nLANGUAGE: mod\nCODE:\n```\n-- go.mod --\\nmodule ldflag\n```\n\n----------------------------------------\n\nTITLE: Terminal Control Character Constants for NetBSD ARM64\nDESCRIPTION: Constants defining special terminal control characters for NetBSD on ARM64. These specify indices into the c_cc array in termios structure, representing characters like EOF, interrupt, quit, etc.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_155\n\nLANGUAGE: Go\nCODE:\n```\nconst VDISCARD = 15\nconst VDSUSP = 11\nconst VEOF = 0\nconst VEOL = 1\nconst VEOL2 = 2\nconst VERASE = 3\nconst VINTR = 8\nconst VKILL = 5\nconst VLNEXT = 14\nconst VMIN = 16\nconst VQUIT = 9\nconst VREPRINT = 6\nconst VSTART = 12\nconst VSTATUS = 18\nconst VSTOP = 13\nconst VSUSP = 10\nconst VTIME = 17\nconst VWERASE = 4\n```\n\n----------------------------------------\n\nTITLE: JSTemplate Error Constant - html/template - Go\nDESCRIPTION: ErrJSTemplate constant is marked deprecated in html/template, indicating no further use and subject to removal. Used to indicate template errors in the context of JavaScript.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_16\n\nLANGUAGE: Go\nCODE:\n```\n// Deprecated\nconst ErrJSTemplate\n```\n\n----------------------------------------\n\nTITLE: Main Function for Cache Validation in Go\nDESCRIPTION: Entry point that processes command line arguments and checks all files in a directory for expected fuzzing cache contents. Returns exit code 1 if the expected value is not found.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_minimize_dirty_cov.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\tdir, expected := os.Args[1], os.Args[2]\n\tents, err := os.ReadDir(dir)\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n\tfor _, ent := range ents {\n\t\tname := filepath.Join(dir, ent.Name())\n\t\tif good, err := checkFile(name, expected); err != nil {\n\t\t\tfmt.Fprintln(os.Stderr, err)\n\t\t\tos.Exit(1)\n\t\t} else if good {\n\t\t\tos.Exit(0)\n\t\t}\n\t}\n\tfmt.Fprintln(os.Stderr, \"input over minimized\")\n\tos.Exit(1)\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Staleness Detection with File Modifications\nDESCRIPTION: Script that tests how the Go command detects package and executable staleness when source files are modified or removed. It specifically tests the behavior with both regular source files and those with build constraints.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_rebuild_removed.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=off\n\n# go command should detect package staleness as source file set changes\ngo install mypkg\n! stale mypkg\n\n# z.go was not compiled; removing it should NOT make mypkg stale\nrm mypkg/z.go\n! stale mypkg\n\n# y.go was compiled; removing it should make mypkg stale\nrm mypkg/y.go\nstale mypkg\n\n# go command should detect executable staleness too\ngo install mycmd\n! stale mycmd\nrm mycmd/z.go\n! stale mycmd\nrm mycmd/y.go\nstale mycmd\n```\n\n----------------------------------------\n\nTITLE: Malformed Go Module Checksums File (go.sum)\nDESCRIPTION: This `go.sum` file lists cryptographic checksums for required module versions. It contains an intentionally malformed line (`rsc.io/quote v1.5.2 # invalid line`) which lacks the required hash, designed to test the error handling capabilities of Go module commands like `go mod download`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/malformed_gosum_issue62345.txt#2025-04-22_snippet_2\n\nLANGUAGE: gosum\nCODE:\n```\n-- go.sum --\ngolang.org/x/text v0.0.0-20170915032832-14c0d48ead0c h1:pvCbr/wm8HzDD3fVywevekufpn6tCGPY3spdHeZJEsw=\ngolang.org/x/text v0.0.0-20170915032832-14c0d48ead0c/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\nrsc.io/quote v1.5.2 # invalid line\nrsc.io/quote v1.5.2/go.mod h1:LzX7hefJvL54yjefDEDHNONDjII0t9xZLPXsUe+TKr0=\nrsc.io/sampler v1.3.0 h1:HLGR/BgEtI3r0uymSP/nl2uPLsUnNJX8toRyhfpBTII=\nrsc.io/sampler v1.3.0/go.mod h1:T1hPZKmBbMNahiBKFy5HrXp6adAjACjK9JXDnKaTXpA=\nrsc.io/testonly v1.0.0 h1:K/VWHdO+Jv7woUXG0GzVNx1czBXUt3Ib1deaMn+xk64=\nrsc.io/testonly v1.0.0/go.mod h1:OqmGbIFOcF+XrFReLOGZ6BhMM7uMBiQwZsyNmh74SzY=\n```\n\n----------------------------------------\n\nTITLE: Testing Installation with Relative GOBIN Path in Shell\nDESCRIPTION: Shell commands that test Go's installation behavior when GOBIN is set to a relative path (\".\"). The expected result is an error stating that GOBIN must be an absolute path.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_relative_gobin_fail.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GOBIN=.\n! go install\nstderr 'cannot install, GOBIN must be an absolute path'\n```\n\n----------------------------------------\n\nTITLE: System Call Constants for darwin-arm64 in Go\nDESCRIPTION: This snippet contains system call number definitions and other constants for the darwin-arm64 platform used in Go's syscall package. It includes values for system calls, file modes, structure sizes, and terminal I/O controls.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_110\n\nLANGUAGE: Go\nCODE:\n```\n// System call constants for darwin-arm64\nconst SYS___SEMWAIT_SIGNAL_NOCANCEL = 423\nconst SYS___SIGWAIT = 330\nconst SYS___SIGWAIT_NOCANCEL = 422\nconst SYS___SYSCTL = 202\nconst S_IEXEC = 64\nconst S_IFMT = 61440\nconst S_IFWHT = 57344\nconst S_IREAD = 256\nconst S_IRGRP = 32\nconst S_IROTH = 4\nconst S_IRWXG = 56\nconst S_IRWXO = 7\nconst S_IRWXU = 448\nconst S_ISTXT = 512\nconst S_IWGRP = 16\nconst S_IWOTH = 2\nconst S_IWRITE = 128\nconst S_IXGRP = 8\nconst S_IXOTH = 1\n\n// Size constants for various system structures\nconst SizeofBpfHdr = 20\nconst SizeofBpfInsn = 8\nconst SizeofBpfProgram = 16\nconst SizeofBpfStat = 8\nconst SizeofBpfVersion = 4\nconst SizeofCmsghdr = 12\nconst SizeofICMPv6Filter = 32\nconst SizeofIPMreq = 8\nconst SizeofIPv6MTUInfo = 32\nconst SizeofIPv6Mreq = 20\nconst SizeofIfData = 96\nconst SizeofIfMsghdr = 112\nconst SizeofIfaMsghdr = 20\nconst SizeofIfmaMsghdr = 16\nconst SizeofIfmaMsghdr2 = 20\nconst SizeofInet4Pktinfo = 12\nconst SizeofInet6Pktinfo = 20\nconst SizeofLinger = 8\nconst SizeofMsghdr = 48\nconst SizeofRtMetrics = 56\nconst SizeofRtMsghdr = 92\nconst SizeofSockaddrAny = 108\nconst SizeofSockaddrDatalink = 20\nconst SizeofSockaddrInet4 = 16\nconst SizeofSockaddrInet6 = 28\nconst SizeofSockaddrUnix = 106\n\n// Terminal I/O constants\nconst TCIFLUSH = 1\nconst TCIOFLUSH = 3\nconst TCOFLUSH = 2\nconst TCSAFLUSH = 2\n\n// TCP related constants\nconst TCP_CONNECTIONTIMEOUT = 32\nconst TCP_ENABLE_ECN = 260\nconst TCP_KEEPALIVE = 16\nconst TCP_KEEPCNT = 258\nconst TCP_KEEPINTVL = 257\nconst TCP_MAXHLEN = 60\nconst TCP_MAXOLEN = 40\nconst TCP_MAXSEG = 2\nconst TCP_MAXWIN = 65535\nconst TCP_MAX_SACK = 4\nconst TCP_MAX_WINSHIFT = 14\nconst TCP_MINMSS = 216\nconst TCP_MSS = 512\nconst TCP_NOOPT = 8\nconst TCP_NOPUSH = 4\nconst TCP_NOTSENT_LOWAT = 513\nconst TCP_RXT_CONNDROPTIME = 128\nconst TCP_RXT_FINDROP = 256\nconst TCP_SENDMOREACKS = 259\n\n// Terminal I/O control constants\nconst TIOCCBRK = 536900730\nconst TIOCCDTR = 536900728\nconst TIOCCONS = 2147775586\nconst TIOCDCDTIMESTAMP = 1074820184\nconst TIOCDRAIN = 536900702\nconst TIOCDSIMICROCODE = 536900693\nconst TIOCEXCL = 536900621\nconst TIOCEXT = 2147775584\nconst TIOCFLUSH = 2147775504\nconst TIOCGDRAINWAIT = 1074033750\nconst TIOCGETA = 1078490131\nconst TIOCGETD = 1074033690\nconst TIOCGPGRP = 1074033783\nconst TIOCGWINSZ = 1074295912\nconst TIOCIXOFF = 536900736\nconst TIOCIXON = 536900737\nconst TIOCMBIC = 2147775595\nconst TIOCMBIS = 2147775596\nconst TIOCMGDTRWAIT = 1074033754\nconst TIOCMGET = 1074033770\nconst TIOCMODG = 1074033667\nconst TIOCMODS = 2147775492\nconst TIOCMSDTRWAIT = 2147775579\n```\n\n----------------------------------------\n\nTITLE: Building Constraints and Package Directives\nDESCRIPTION: This section covers build constraints and package struct definitions used in Go projects for managing building conditions and package directives. With the GoVersion and Directive structure, this set aids in defining conditions under which a package is built and how directives within build files are structured.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.21.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\npkg go/build/constraint, func GoVersion(Expr) string #59033\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg go/build, type Directive struct #56986\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg go/build, type Directive struct, Pos token.Position #56986\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg go/build, type Directive struct, Text string #56986\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg go/build, type Package struct, Directives []Directive #56986\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg go/build, type Package struct, TestDirectives []Directive #56986\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg go/build, type Package struct, XTestDirectives []Directive #56986\n```\n\n----------------------------------------\n\nTITLE: Displaying Git Commit History\nDESCRIPTION: Shows the Git commit history in a one-line format with decoration and compares the output to a reference file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/mainonly.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit log --oneline --decorate=short\ncmp stdout .git-log\n```\n\n----------------------------------------\n\nTITLE: Defining IPC and Semaphore Syscall Constants for Darwin ARM64\nDESCRIPTION: Constant definitions for interprocess communication (IPC) and semaphore-related system calls on Darwin ARM64 architecture. These include operations for System V semaphores and POSIX semaphores with their corresponding numeric identifiers.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_105\n\nLANGUAGE: Go\nCODE:\n```\nconst SYS_POLL = 230\nconst SYS_POLL_NOCANCEL = 417\nconst SYS_SELECT = 93\nconst SYS_SELECT_NOCANCEL = 407\nconst SYS_SEMCTL = 254\nconst SYS_SEMGET = 255\nconst SYS_SEMOP = 256\nconst SYS_SEMSYS = 251\nconst SYS_SEM_CLOSE = 269\nconst SYS_SEM_DESTROY = 276\nconst SYS_SEM_GETVALUE = 274\nconst SYS_SEM_INIT = 275\nconst SYS_SEM_OPEN = 268\nconst SYS_SEM_POST = 273\nconst SYS_SEM_TRYWAIT = 272\nconst SYS_SEM_UNLINK = 270\nconst SYS_SEM_WAIT = 271\nconst SYS_SEM_WAIT_NOCANCEL = 420\n```\n\n----------------------------------------\n\nTITLE: Go Source File without Imports\nDESCRIPTION: Basic Go source file with no external imports\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_sum.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage x\n```\n\n----------------------------------------\n\nTITLE: Executing Go List Command with No Go Line\nDESCRIPTION: Demonstrates running the 'go list' command in a module without a go line or toolchain specification in go.mod.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/old_tidy_toolchain.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo list\n```\n\n----------------------------------------\n\nTITLE: Broken Package with Invalid Embed Pattern\nDESCRIPTION: Package demonstrating error handling for invalid embed file patterns.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_embed.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage brokendep\n\nimport _ \"embed\"\n\n//go:embed ../foo.txt\nvar foo string\n```\n\n----------------------------------------\n\nTITLE: Setting Up Go Module Test Environment - Shell\nDESCRIPTION: Configures environment variables and invokes the Go build process to test module compatibility scenarios. Requires Go installed with module support. The snippet sets GO111MODULE to 'on' to enable module mode, then runs 'go build' to compile the code. It relies on the module and source files present in the directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version_mixed.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# Test that dependencies can use Go language features newer than the\n# Go version specified by the main module.\n\nenv GO111MODULE=on\n\ngo build\n```\n\n----------------------------------------\n\nTITLE: Testing Go Build/Install Behavior with Test-Only Packages\nDESCRIPTION: This snippet demonstrates the behavior of 'go build' and 'go install' commands when dealing with packages that only contain test files. When a test-only package is explicitly named, the commands fail with an error, but when matched through wildcards, these packages are silently ignored.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_test_only.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Named explicitly, test-only packages should be reported as\n# unbuildable/uninstallable, even if there is a wildcard also matching.\n! go build m/testonly m/testonly...\nstderr 'no non-test Go files in'\n! go install ./testonly\nstderr 'no non-test Go files in'\n\n# Named through a wildcard, the test-only packages should be silently ignored.\ngo build m/testonly...\ngo install ./testonly...\n```\n\n----------------------------------------\n\nTITLE: Reflect Type Utilities and Generics - reflect - Go\nDESCRIPTION: The reflect package deprecates PtrTo and introduces generic TypeFor, which creates a Type for an arbitrary interface type parameter. Useful for code generation, deep reflection, or working with generic code at runtime. TypeFor has no parameters; it returns a reflect.Type corresponding to the parameterized type.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_25\n\nLANGUAGE: Go\nCODE:\n```\n// Deprecated\nfunc PtrTo\nfunc TypeFor[$0 interface{}]() Type\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Basic Go module definition file specifying the module name as 'x'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_fossil.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule x\n```\n\n----------------------------------------\n\nTITLE: Package Requiring Build Tag 'extra' - Go\nDESCRIPTION: This file, under tagonly/tagonly.go, uses a '+build extra' build constraint. It declares a separate package tagonly, to be included only if the extra build tag is active. Key usage: demonstrates subpackage tag gating in go list tests. Limitation: ignored unless built with -tags=extra.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_constraints.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// +build extra\n\npackage tagonly\n\n```\n\n----------------------------------------\n\nTITLE: Listing Go Package Imports using go list\nDESCRIPTION: This snippet uses the 'go list' command to display import paths for Go packages 'a' and 'b', using a formatted output to show the import details including test imports. It requires the Go environment with GO111MODULE set to 'off'. The command formats the import paths using Go text/template syntax.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_test_imports.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo list -test -f '{{.ImportPath}}:{{with .Imports}} {{join . \", \"}}{{end}}' a b\n```\n\n----------------------------------------\n\nTITLE: Testing GO111MODULE=on Module Resolution in Go\nDESCRIPTION: Tests GO111MODULE=on behavior which should trigger module mode everywhere regardless of directory location. This verifies that module paths are correctly reported and modules are found in parent directories when needed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_enabled.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=on\n\ncd $GOPATH/src/x/y/z\ngo env GOMOD\nstdout z[/\\\\]go.mod\n\ncd $GOPATH/src/x/y/z/w\ngo env GOMOD\nstdout z[/\\\\]go.mod\n\ncd $GOPATH/src/x/y\ngo env GOMOD\nstdout 'NUL|/dev/null'\ngo list -m\nstdout '^command-line-arguments$'\n\ncd $GOPATH/foo\ngo env GOMOD\nstdout foo[/\\\\]go.mod\n\ncd $GOPATH/foo/bar/baz\ngo env GOMOD\nstdout foo[/\\\\]go.mod\n```\n\n----------------------------------------\n\nTITLE: Fetching Metadata of a Non-existent Module Version - Error Case\nDESCRIPTION: This snippet attempts to fetch metadata for a non-existent latest version of a nested module, which results in an error. The output includes an error message and other metadata details like 'URL', 'Subdir', 'Ref', and 'Hash'. It is useful for testing how Go handles non-existent versions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_issue61415.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo list -json -m --versions -e vcs-test.golang.org/git/issue61415.git/nested@latest\ncp stdout no-nested.json\n```\n\n----------------------------------------\n\nTITLE: Simple Go Program\nDESCRIPTION: Basic Go program that prints a message to standard output\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/testdata/script/script_test_basics.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {\n  println(\"Hi mom!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Final Checks and Actual Go Builds\nDESCRIPTION: This section involves actual Go builds without the '-n' flag to verify the correctness of CGO handling by the linker. It ensures that various builds, including those relying on runtime/cgo and explicitly using CGO, are linked correctly according to the provided flags.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_suspect_flag_force_external.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir tmp1\nmkdir tmp2\nmkdir tmp3\nmkdir tmp4\nmkdir tmp5\n\n# First build: no external linking expected\ngo build -ldflags=-tmpdir=tmp1 -o $devnull ./noUseOfCgo &\n\n```\n\n----------------------------------------\n\nTITLE: Attempting Go Module Initialization with Invalid Path (Shell)\nDESCRIPTION: Attempts to initialize a Go module in the current directory using '.' as the module path. This fails because '.' is considered a local import path, which is invalid for module initialization. The '!' prefix indicates an expected command failure, and 'stderr' captures the expected error message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_init_path.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n! go mod init .\nstderr '^go: malformed module path \".\": is a local import path$'\n```\n\n----------------------------------------\n\nTITLE: PTY Control Constants for Darwin ARM64 in Go\nDESCRIPTION: Constants for pseudoterminal (PTY) control in the syscall package for Darwin ARM64. These constants are used for operations such as granting, unlocking, and getting PTY names.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_113\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (darwin-arm64), const TIOCPTYGNAME = 1082160211\npkg syscall (darwin-arm64), const TIOCPTYGRANT = 536900692\npkg syscall (darwin-arm64), const TIOCPTYUNLK = 536900690\npkg syscall (darwin-arm64), const TIOCREMOTE = 2147775593\npkg syscall (darwin-arm64), const TIOCSBRK = 536900731\npkg syscall (darwin-arm64), const TIOCSCONS = 536900707\npkg syscall (darwin-arm64), const TIOCSCTTY = 536900705\npkg syscall (darwin-arm64), const TIOCSDRAINWAIT = 2147775575\npkg syscall (darwin-arm64), const TIOCSDTR = 536900729\n```\n\n----------------------------------------\n\nTITLE: AST Management in Go\nDESCRIPTION: This section encompasses function and type declarations related to Abstract Syntax Tree (AST) manipulation. Key functions include IsGenerated, which checks if a file is generated, and NewPackage, which is deprecated. The section also includes details on the File struct and deprecated types like Importer, Object, Package, and Scope.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.21.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\npkg go/ast, func IsGenerated(*File) bool #28089\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg go/ast, func NewPackage //deprecated #52463\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg go/ast, type File struct, GoVersion string #59033\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg go/ast, type Importer //deprecated #52463\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg go/ast, type Object //deprecated #52463\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg go/ast, type Package //deprecated #52463\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg go/ast, type Scope //deprecated #52463\n```\n\n----------------------------------------\n\nTITLE: Listing Expected Go Module Outputs - Text\nDESCRIPTION: This snippet provides the expected output list of Go modules/packages after running the go list command. The file is used to validate whether module discovery through symlinks matches expected results. Its content is static, and discrepancies between actual and expected results can indicate issues with symlink resolution or Go module structure.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_symlink_dotdotdot.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n-- want_list.txt --\nexample.com/tree\nexample.com/tree/branch\n```\n\n----------------------------------------\n\nTITLE: Go Module Configuration\nDESCRIPTION: This go.mod file defines a test module that requires a specific version of a Git repository from vcs-test.golang.org.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_git_bareRepository.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule test\n\ngo 1.18\n\nrequire vcs-test.golang.org/git/gitrepo1.git v1.2.3\n```\n\n----------------------------------------\n\nTITLE: Defining Workspace Configuration in Go\nDESCRIPTION: This snippet shows the contents of the go.work file, which defines the workspace configuration. It specifies the Go version, the modules to use, and various module replacements.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_prune_all.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\n\nuse (\n\t./a\n\t./p\n)\n\nreplace example.com/b v1.0.0 => ./b\nreplace example.com/q v1.0.0 => ./q1_0_0\nreplace example.com/q v1.0.5 => ./q1_0_5\nreplace example.com/q v1.1.0 => ./q1_1_0\nreplace example.com/r v1.0.0 => ./r\nreplace example.com/w v1.0.0 => ./w\nreplace example.com/x v1.0.0 => ./x\nreplace example.com/y v1.0.0 => ./y\nreplace example.com/z v1.0.0 => ./z1_0_0\nreplace example.com/z v1.1.0 => ./z1_1_0\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Binary for Embedded Module Info Presence via Shell\nDESCRIPTION: This shell script snippet changes the current directory to `unused`, builds the `unused` Go binary using `go build`, and then executes it using `exec ./unused$GOEXE`. This part of the test verifies that build information is still embedded within the binary itself, even if the program doesn't explicitly call `runtime/debug.ReadBuildInfo`. It relies on the Go toolchain being installed and the `unused` Go program existing in the subdirectory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_modinfo.txt#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n[short] skip\n\n# Build a binary that accesses its debug info by reading the binary directly\n# (rather than through debug.ReadBuildInfo).\n# The debug info should still be present (golang.org/issue/28753).\ncd unused\ngo build\nexec ./unused$GOEXE\n```\n\n----------------------------------------\n\nTITLE: Testing go mod init in Invalid Module Path\nDESCRIPTION: This snippet tests the `go mod init` command in a GOPATH location with an invalid module path. It ensures the command does not create a module with an invalid path and validates the error messages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_path.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd $WORK/'gopath/src/m''d'\n! go mod init\nstderr 'cannot determine module path'\n```\n\n----------------------------------------\n\nTITLE: Empty Go Package Declaration\nDESCRIPTION: A minimal Go source file that only declares a package named 'p'. Used to verify that actual Go files are correctly identified by the test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_symlink_dotgo.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage p\n```\n\n----------------------------------------\n\nTITLE: Listing Available Go Versions\nDESCRIPTION: Uses the go list command to display available Go versions. It checks for the presence of specific versions and ensures that version numbers are not prefixed with 'go'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_version.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngo list -m -versions go\nstdout 1.20.1 # among others\nstdout 1.19rc2\n! stdout go1.20.1 # no go prefixes\n! stdout go1.19rc2\n```\n\n----------------------------------------\n\nTITLE: Transitive Package Implementation\nDESCRIPTION: Final package in the dependency chain that provides the base functionality.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_deps.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage transitive\n\nfunc F() {\n}\n```\n\n----------------------------------------\n\nTITLE: Archive/zip Package Method Additions\nDESCRIPTION: New methods added to archive/zip package including OpenRaw(), Copy(), and CreateRaw() for working with raw zip file data\nSOURCE: https://github.com/golang/go/blob/master/api/go1.17.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc (*File) OpenRaw() (io.Reader, error)\nfunc (*Writer) Copy(*File) error\nfunc (*Writer) CreateRaw(*FileHeader) (io.Writer, error)\n```\n\n----------------------------------------\n\nTITLE: Checking for Root Package Absence (Shell)\nDESCRIPTION: Attempts to list the package 'rsc.io/QUOTE' using 'go list' with the '-mod=readonly' flag. The leading '!' negates the exit status, meaning this command is expected to fail, confirming that the module 'rsc.io/QUOTE' does not contain a Go package in its root directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_sum_noroot.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n! go list -mod=readonly rsc.io/QUOTE\n```\n\n----------------------------------------\n\nTITLE: Testing Linker Crash Error Message in Go Build\nDESCRIPTION: Shell script that disables Go modules and attempts to build with a linker flag that forces a crash. Verifies that the error message contains the linker tool path.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/linkname.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=off\n\n# check for linker name in error message about linker crash\n[!compiler:gc] skip\n! go build -ldflags=-crash_for_testing x.go\nstderr [\\/]tool[\\/].*[\\/]link\n```\n\n----------------------------------------\n\nTITLE: Setting and Checking Go Environment Variables\nDESCRIPTION: This snippet sets up initial environment variables and checks the default GOENV location for different operating systems.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_write.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=off\n\n# go env should default to the right places\nenv AppData=$HOME/windowsappdata\nenv home=$HOME/plan9home\ngo env GOENV\n[GOOS:aix] stdout $HOME/.config/go/env\n[GOOS:darwin] stdout $HOME'/Library/Application Support/go/env'\n[GOOS:freebsd] stdout $HOME/.config/go/env\n[GOOS:linux] stdout $HOME/.config/go/env\n[GOOS:netbsd] stdout $HOME/.config/go/env\n[GOOS:openbsd] stdout $HOME/.config/go/env\n[GOOS:plan9] stdout $HOME/plan9home/lib/go/env\n[GOOS:windows] stdout $HOME\\\\windowsappdata\\\\go\\\\env\n```\n\n----------------------------------------\n\nTITLE: X Module Test with Import\nDESCRIPTION: A test file for package 'x' that imports module 'w'. This demonstrates test files importing modules that may be only needed for testing purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vendormod.txt#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\npackage x\n\nimport _ \"w\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Function in Go Package (Go)\nDESCRIPTION: This snippet defines a Go package named 'x' with a single function F and imports the 'sync/atomic' package (for side effects only). It demonstrates how to create a simple Go source file with dummy code suitable for coverage and race detector testing. No dependencies are required other than Go's standard library, and no input or output is processed by the function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_atomic_pkgall.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage x\n\nimport _ \"sync/atomic\"\n\nfunc F() {}\n\n```\n\n----------------------------------------\n\nTITLE: Package B Test File with Internal Dependency\nDESCRIPTION: A test file for package 'b' that imports package 'a'. Used to test how test dependencies propagate through imported packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_test.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage b_test\n\nimport _ \"m/a\"\n```\n\n----------------------------------------\n\nTITLE: Describing Module Version Metadata - Go Module .info - JSON\nDESCRIPTION: This snippet provides metadata for the Go module version v1.9.0 in JSON format. It specifies the version string and serves as auxiliary data for Go tooling to associate information with the retracted release. Inputs are expected from Go's module proxy or build tools, and the output is used alongside versioned artifacts. Main constraint: only the version number is stored; additional fields can be added per Go's module proxy requirements.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_all_v1.9.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\\"Version\\\":\\\"v1.9.0\\\"}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Build Verbosity for Issue #68743 (Shell)\nDESCRIPTION: This command builds package `d` (a copy of `c`) with the `-x` flag, which prints the commands executed during the build. It tests for issue #68743, verifying specific output related to internal linking tests appears in the build process logs. The build itself (using external linking by default) is expected to succeed without 'undefined reference' errors, but the verbose output should contain the specific test message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_undef.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo build -x m/d\n! stderr 'undefined reference'\nstderr 'test for internal linking'\n```\n\n----------------------------------------\n\nTITLE: Stub Go file in subdirectory\nDESCRIPTION: A minimal Go file in a subdirectory used for testing directory restrictions in 'go run'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_dirs.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n```\n\n----------------------------------------\n\nTITLE: Package D Definition with Unsafe Import\nDESCRIPTION: Package 'd' declaration with blank import of unsafe package\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_pattern_work.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage d\n\nimport _ \"unsafe\"\n```\n\n----------------------------------------\n\nTITLE: Go Test File Implementation\nDESCRIPTION: Test file containing a simple test case that relies on environment variable checks in the main package initialization\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_loop.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"testing\"\n\nfunc TestEnv(t *testing.T) {\n\t// the check is in func init in m.go\n}\n```\n\n----------------------------------------\n\nTITLE: Testing 'go list all' Pattern with '-e' Flag (Shell)\nDESCRIPTION: Tests the 'go list all' pattern combined with the '-e' flag to list all packages within the module, including those with errors. It checks that the existing packages ('example.com/direct', 'example.com/indirect') are listed. A comment notes a potential bug where the non-existent package might also be listed incorrectly.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_bad_import.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# The pattern \"all\" should match only packages that actually exist,\n# ignoring those whose existence is merely implied by imports.\ngo list -e -f '{{.ImportPath}} {{.Error}}' all\nstdout example.com/direct\nstdout example.com/indirect\n# TODO: go list creates a dummy package with the import-not-found\n# but really the Error belongs on example.com/direct, and this package\n# should not be printed.\n# ! stdout example.com/notfound\n```\n\n----------------------------------------\n\nTITLE: Module Verification Script\nDESCRIPTION: Shell commands to verify and compare module states before and after running go mod tidy. Includes module backup and comparison.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_goproxy_off.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncp go.mod go.mod.orig\ngo mod tidy\ncmp go.mod go.mod.orig\n\ncd sub\ncp go.mod go.mod.orig\ngo mod tidy\ncmp go.mod go.mod.orig\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Go Module Initialization and Build Commands\nDESCRIPTION: Shell commands to initialize a Go module and build the project with GO111MODULE enabled\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_string_alias.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGO111MODULE=on\ngo mod init golang.org/issue/27584\ngo build .\n```\n\n----------------------------------------\n\nTITLE: Expected Module State After Tool Removal\nDESCRIPTION: Expected go.mod state after removing the tool but keeping the dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_tool.txt#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule example.com/foo\n\ngo 1.24\n\nrequire example.com/tools v1.1.0 // indirect\n```\n\n----------------------------------------\n\nTITLE: Testing Byte Fuzzing in Go\nDESCRIPTION: This function tests Go's fuzzing capabilities with byte inputs. It panics when the input is not 0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_crash.txt#2025-04-22_snippet_14\n\nLANGUAGE: Go\nCODE:\n```\nfunc FuzzByte(f *testing.F) {\n\tf.Add(byte(0))\n\tf.Fuzz(func(t *testing.T, a byte) {\n\t\tif a != 0 {\n\t\t\tpanic(\"this input caused a crash!\")\n\t\t}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Main Module Definition\nDESCRIPTION: Defines the main module 'example.com/m' with its Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_install_submodule.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/m\n\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Main Package with Vendor Imports\nDESCRIPTION: Main package demonstrating the use of vendored strings package with a simple print statement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_import.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\" // really ../vendor/strings\n)\n\nfunc main() {\n\tfmt.Printf(\"%s\\n\", strings.Msg)\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Packages Including Retraction using Go List\nDESCRIPTION: Executes 'go list -retracted pkg' to show retraction details for a module. This snippet checks that retraction details are correctly displayed if available.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_retract.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n# 'go list -retracted pkg' shows retraction.\\ngo list -retracted -f '{{with .Module}}{{with .Retracted}}retracted{{end}}{{end}}' example.com/retract\\nstdout retracted\n```\n\n----------------------------------------\n\nTITLE: Testing Version Listing with Direct VCS Connection\nDESCRIPTION: Tests that +incompatible versions are omitted from version listings when fetching directly from version control when compatible versions exist with go.mod files.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_prefer_compatible.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n[!git] stop\nenv GOPROXY=direct\n\ngo list -versions -m github.com/russross/blackfriday\nstdout '^github.com/russross/blackfriday v1\\.5\\.1 v1\\.5\\.2' # and possibly others\n! stdout ' v2\\.'\n```\n\n----------------------------------------\n\nTITLE: Benchmark validation test\nDESCRIPTION: Go test file that validates the behavior of -benchtime 1x. It contains TestMain to ensure the benchmark was called and a benchmark function that verifies it runs only once with b.N=1.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_benchmark_1x.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage bench\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"testing\"\n)\n\nvar called = false\n\nfunc TestMain(m *testing.M) {\n\tm.Run()\n\tif !called {\n\t\tfmt.Println(\"benchmark never called\")\n\t\tos.Exit(1)\n\t}\n}\n\nfunc Benchmark(b *testing.B) {\n\tif b.N > 1 {\n\t\tb.Fatalf(\"called with b.N=%d; want b.N=1 only\", b.N)\n\t}\n\tif called {\n\t\tb.Fatal(\"called twice\")\n\t}\n\tcalled = true\n}\n```\n\n----------------------------------------\n\nTITLE: Raw Input Code Block Format\nDESCRIPTION: Shows the raw input format of code blocks with varying indentation levels and blank lines\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/code.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nA tab-indented\n(no, not eight-space indented)\ncode block and haiku.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nOne space\n is\n  enough\n   to\n    start\n     a\n      block.\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n    Blocks\n  can\n\nhave\n  blank\n    lines.\n```\n\n----------------------------------------\n\nTITLE: Go Module Dependencies Declaration\nDESCRIPTION: Specifies the required module dependency rsc.io/fortune at version 1.0.0\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_fortune_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nrsc.io/fortune v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Test File Accessing Internal Package\nDESCRIPTION: A Go test file that imports and uses an internal package. This is used to test the visibility rules of internal packages in test contexts and verify that 'Hacks' is enabled.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test_files.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage foo_test\n\nimport (\n\t\"testing\"\n\t\"example.com/internal\"\n)\n\nfunc TestHacksEnabled(t *testing.T) {\n\tif !internal.Hacks {\n\t\tt.Fatal(\"hacks not enabled\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Memory Protection and Sync Constants for OpenBSD in Go\nDESCRIPTION: Memory protection (PROT) and synchronization (MS) constants for OpenBSD. These constants are used with memory-related system calls to control access permissions and synchronization behavior.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_38\n\nLANGUAGE: Go\nCODE:\n```\nconst MCL_CURRENT = 1\nconst MCL_CURRENT ideal-int\nconst MCL_FUTURE = 2\nconst MCL_FUTURE ideal-int\nconst MS_ASYNC = 1\nconst MS_ASYNC ideal-int\nconst MS_INVALIDATE = 4\nconst MS_INVALIDATE ideal-int\nconst MS_SYNC = 2\nconst MS_SYNC ideal-int\nconst PROT_EXEC = 4\nconst PROT_EXEC ideal-int\nconst PROT_NONE = 0\nconst PROT_NONE ideal-int\nconst PROT_READ = 1\nconst PROT_READ ideal-int\nconst PROT_WRITE = 2\nconst PROT_WRITE ideal-int\n```\n\n----------------------------------------\n\nTITLE: Executing Go Fuzz Tests with Shell Commands\nDESCRIPTION: This snippet contains shell commands to run various fuzz tests and verify their outputs. It demonstrates how to execute Go tests with different flags and how to check for expected stdout patterns.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_chatty.txt#2025-04-22_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nenv GOCACHE=$WORK/cache\n\n# Run chatty fuzz targets with an error.\n! go test -v chatty_error_fuzz_test.go\n! stdout '^ok'\nstdout 'FAIL'\nstdout 'error in target'\n\n# Run chatty fuzz targets with a fatal.\n! go test -v chatty_fatal_fuzz_test.go\n! stdout '^ok'\nstdout 'FAIL'\nstdout 'fatal in target'\n\n# Run chatty fuzz target with a panic\n! go test -v chatty_panic_fuzz_test.go\n! stdout ^ok\nstdout FAIL\nstdout 'this is bad'\n\n# Run skipped chatty fuzz targets.\ngo test -v chatty_skipped_fuzz_test.go\nstdout ok\nstdout SKIP\n! stdout FAIL\n\n# Run successful chatty fuzz targets.\ngo test -v chatty_fuzz_test.go\nstdout ok\nstdout PASS\nstdout 'all good here'\n! stdout FAIL\n\n# Fuzz successful chatty fuzz target that includes a separate unit test.\ngo test -v chatty_with_test_fuzz_test.go -fuzz=Fuzz -fuzztime=1x\nstdout ok\nstdout PASS\n! stdout FAIL\nstdout -count=1 'all good here'\n# Verify that the unit test is only run once.\nstdout -count=1 'logged foo'\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines the Go module path for the tagtests package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/tagtests.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule vcs-test.golang.org/git/tagtests.git\n```\n\n----------------------------------------\n\nTITLE: Example Go Module Definition\nDESCRIPTION: Defines a simple Go module that requires a dependency with a future Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_modcmds.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example\n\ngo 1.21\n\nrequire rsc.io/future v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Main Package Implementation\nDESCRIPTION: Main package 'a' that imports and uses package 'b'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_deps.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\nimport \"b\"\n\nfunc F() {\n\tb.F()\n}\n```\n\n----------------------------------------\n\nTITLE: Running Go Fuzz Tests with Context Verification\nDESCRIPTION: Shell commands to run context-related fuzz tests. First runs a regular test and then runs a fuzz test with a single iteration to verify context behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_context.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo test -vet=off context_fuzz_test.go\ngo test -vet=off -fuzz=Fuzz -fuzztime=1x context_fuzz_test.go\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines a Go module named 'm' with Go 1.16 as the required version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_pattern.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Adding Circular Dependency in Root Module\nDESCRIPTION: Updates the root go.mod to require the submodule at v1.0.5, creating a circular dependency, and tags it as v1.1.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nat 2018-02-19T18:13:36-05:00\ngit apply 0002-go.mod-add-require-submod-v1.0.5.patch\ngit commit -a -m 'go.mod: add require submod v1.0.5'\ngit tag v1.1.0\n```\n\n----------------------------------------\n\nTITLE: Module Declaration - Go\nDESCRIPTION: This Go snippet declares a module named 'example.com/simple'. Modules are the unit of source code distribution in Go projects, and this declaration is essential for the Go module system to recognize and track the module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_overlay.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/simple\n```\n\n----------------------------------------\n\nTITLE: Go Toolchain Identification Path\nDESCRIPTION: The full path identifier for a specific Go toolchain module version targeting OpenBSD on ARM64 architecture.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-arm64.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngolang.org/toolchain@v0.0.1-go1.999testmod.openbsd-arm64\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Module\nDESCRIPTION: Creates a new Go module named 'm'\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_incompatible.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo mod init m\n```\n\n----------------------------------------\n\nTITLE: Verifying Go Get Help Command Output\nDESCRIPTION: Tests the 'go help get' command and checks that the output contains expected usage information about dependency management functionality.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_help.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo help get\nstdout 'usage: go get'\nstdout 'updates go.mod to require those versions'\n```\n\n----------------------------------------\n\nTITLE: Module C Configuration (v0.2.0)\nDESCRIPTION: Configuration for module C version 0.2.0 requiring module D.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue65363.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/c\n\ngo 1.18\n\nrequire example.net/d v0.1.0\n```\n\nLANGUAGE: go\nCODE:\n```\npackage c\n```\n\nLANGUAGE: go\nCODE:\n```\npackage c_test\n\nimport _ \"example.net/d\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Repository References and Structure\nDESCRIPTION: Shows all tag and branch references in the repository and compares them with expected values stored in .git-refs file. This validates that the repository was created correctly with all expected references.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/querytest.txt#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit show-ref --tags --heads\ncmp stdout .git-refs\n```\n\n----------------------------------------\n\nTITLE: Handling Relative Paths in GOMODCACHE\nDESCRIPTION: This snippet tests the behavior of 'go env -w' when setting GOMODCACHE with relative paths. It demonstrates that absolute paths are required for this variable.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_write.txt#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# go env -w should reject relative paths in GOMODCACHE environment.\n! go env -w GOMODCACHE=~/test\nstderr 'go: GOMODCACHE entry is relative; must be absolute path: \"~/test\"'\n! go env -w GOMODCACHE=./test\nstderr 'go: GOMODCACHE entry is relative; must be absolute path: \"./test\"'\n```\n\n----------------------------------------\n\nTITLE: Declaring a Go Module\nDESCRIPTION: This snippet declares a Go module with the name 'example.com/retract/rationale' and specifies the Go version 1.14. The 'module' directive is used to name the module at the root of a project, defining how a package is imported elsewhere. This setup requires a Go toolchain and a compatible version specified.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rationale_v1.0.0-multiline2.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/retract/rationale\n\ngo 1.14\n```\n\n----------------------------------------\n\nTITLE: Expected go.mod After Tidy\nDESCRIPTION: The expected go.mod file after running 'go mod tidy' command, showing the upgrade to Go 1.22.0 and additional dependencies resolved during the process.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_toolchain.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule example\n\ngo 1.22.0\n\nrequire (\n\texample.net/a v0.1.0\n\texample.net/b v0.1.0\n)\n\nrequire (\n\texample.net/c v0.1.0 // indirect\n\texample.net/d v0.1.0 // indirect\n)\n\nreplace (\n\texample.net/a v0.1.0 => ./a1\n\texample.net/a v0.2.0 => ./a2\n\texample.net/b v0.1.0 => ./b1\n\texample.net/c v0.1.0 => ./c1\n\texample.net/d v0.1.0 => ./d1\n\texample.net/d v0.2.0 => ./d2\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module 'm' Version 0.2.0\nDESCRIPTION: This snippet shows the go.mod file for module 'm' version 0.2.0, which requires 'm/p' version 0.1.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_ambiguous_arg.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.16\n\nrequire m/p v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module declaration file defining the module name 'm' for the test project structure.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_set_executable_name.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Module and Netrc Files\nDESCRIPTION: This snippet shows the configuration of the go.mod file and the contents of the netrc files used in the tests. It includes both an empty netrc file and one with valid credentials.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goauth_netrc.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\n-- go.mod --\nmodule private.example.com\n-- $WORK/empty --\n-- $WORK/netrc --\nmachine vcs-test.golang.org\n\tlogin aladdin\n\tpassword opensesame\n# first one should override this one\nmachine vcs-test.golang.org\n\tlogin aladdin\n\tpassword ignored\n```\n\n----------------------------------------\n\nTITLE: Testing GOMODCACHE with Relative Paths in Go\nDESCRIPTION: This snippet tests Go's response to setting GOMODCACHE to relative paths. It first sets GO111MODULE to 'on', then attempts to use '~/test' and './test' as GOMODCACHE values, expecting both to fail with a 'must be absolute path' error.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_cache_dir.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GO111MODULE=on\n\n# Go should reject relative paths in GOMODCACHE environment.\n\nenv GOMODCACHE=\"~/test\"\n! go install example.com/tools/cmd/hello@latest\nstderr 'must be absolute path'\n\nenv GOMODCACHE=\"./test\"\n! go install example.com/tools/cmd/hello@latest\nstderr 'must be absolute path'\n```\n\n----------------------------------------\n\nTITLE: Copying Original go.mod File\nDESCRIPTION: Creates a backup of the original go.mod file for later use in the tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_ambiguous_pkg.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncp go.mod go.mod.orig\n```\n\n----------------------------------------\n\nTITLE: Go module definition\nDESCRIPTION: Go module file specifying the module path and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/issue47650.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nmodule vcs-test.golang.org/git/issue47650.git\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition (Root)\nDESCRIPTION: Root Go module definition file specifying module name and Go version requirement\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_bzr.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com\n\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Function Using rsc.io/quote in Go\nDESCRIPTION: This Go program imports the rsc.io/quote package and prints a greeting using the Hello() function from the package. It demonstrates the basic usage of the imported module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_fortune_v0.0.1.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport \"rsc.io/quote\"\n\nfunc main() {\n\tprintln(quote.Hello())\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module\nDESCRIPTION: Specifies the module name and Go version for the test project.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_issue35169.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nmodule example\ngo 1.19\n```\n\n----------------------------------------\n\nTITLE: Declaring Toolchain Module Path (.mod)\nDESCRIPTION: Specifies the module path `golang.org/toolchain`. This likely represents the content of a `.mod` file specific to the toolchain module itself, indicating its canonical import path.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.22.1.linux-amd64.txt#2025-04-22_snippet_2\n\nLANGUAGE: gomod\nCODE:\n```\ngolang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Testing Go List Command with Module Configuration\nDESCRIPTION: Shell script testing the behavior of 'go list' command with different module configurations and test packages. It verifies that test dependencies are correctly included or excluded based on the flags used.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\nenv GOFLAGS=-mod=mod\n[short] skip\n\n# TODO(bcmills): Convert the 'go test' calls below to 'go list -test' once 'go\n# list' is more sensitive to package loading errors.\n\n# A test in the module's root package should work.\ncd a/\ncp go.mod.empty go.mod\ngo list -test\n! stderr error\n\ncp go.mod.empty go.mod\ngo list -deps\n! stdout ^testing$\n\n# list all should include test dependencies, like testing\ncp go.mod.empty go.mod\ngo list all\nstdout ^testing$\nstdout ^rsc.io/quote$\nstdout ^rsc.io/testonly$\n\n# list -deps -tests should also include testing\n# but not deps of tests of deps (rsc.io/testonly).\ngo list -deps -test\nstdout ^testing$\nstdout ^rsc.io/quote$\n! stdout ^rsc.io/testonly$\n\n# list -test all should succeed\ncp go.mod.empty go.mod\ngo list -test all\nstdout '^testing'\n\ncp go.mod.empty go.mod\ngo list -test\n! stderr error\n\n# A test with the \"_test\" suffix in the module root should also work.\ncd ../b/\ngo list -test\n! stderr error\n\n# A test with the \"_test\" suffix of a *package* with a \"_test\" suffix should\n# even work (not that you should ever do that).\ncd ../c_test\ngo list -test\n! stderr error\n\ncd ../d_test\ngo list -test\n! stderr error\n\ncd ../e\ngo list -test\n! stderr error\n```\n\n----------------------------------------\n\nTITLE: Main Program Implementation\nDESCRIPTION: Simple main package with empty main function, used for testing build flags.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gcflags_patterns.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Outer Module Configuration\nDESCRIPTION: Go module configuration for the outer package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_issue60313.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/outer\n\ngo 1.21\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Go Module Testing\nDESCRIPTION: Sets the GOTOOLCHAIN to 'local' and GO111MODULE to 'on' for the test environment.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit_toolchain.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GOTOOLCHAIN=local\nenv GO111MODULE=on\n```\n\n----------------------------------------\n\nTITLE: Defining SWIG Interface for C Code (SWIG)\nDESCRIPTION: This SWIG interface file (`main.swig`) defines how the C code should be exposed to Go. It declares a module named 'main' and uses the `%inline` directive to directly include C declarations for the `gcd` function and the global variable `Foo`. SWIG processes this file to generate the necessary Go wrapper code (and C glue code) for interoperability.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_swig.txt#2025-04-22_snippet_4\n\nLANGUAGE: swig\nCODE:\n```\n-- main.swig --\n%module main\n\n%inline %{\nextern int    gcd(int x, int y);\nextern double Foo;\n%}\n```\n\n----------------------------------------\n\nTITLE: HTML Link Format\nDESCRIPTION: Displays documentation links converted to HTML format with proper anchor tags and href attributes.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/doclink.txt#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<p>In this package, see <a href=\"#Doc\">Doc</a> and <a href=\"#Parser.Parse\">Parser.Parse</a>.\nThere is no [Undef] or [Undef.Method].\nSee also the <a href=\"/go/doc/comment\">comment</a> package,\nespecially <a href=\"/go/doc/comment#Doc\">comment.Doc</a> and <a href=\"/go/doc/comment#Parser.Parse\">comment.Parser.Parse</a>.\n```\n\n----------------------------------------\n\nTITLE: Sample Go file in disallowed path\nDESCRIPTION: A minimal Go file located in the mod/foo path that is used to test import path restrictions. The file contains just a package declaration for demonstration purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_mod.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage foo\n```\n\n----------------------------------------\n\nTITLE: Defining Go Source Files with Missing Dependencies\nDESCRIPTION: These Go source files import packages that don't exist, creating the missing dependency conditions tested in the script. They include both direct and indirect missing dependencies in both regular and test code.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_e.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n-- untidy.go --\npackage untidy\n\nimport (\n\t_ \"example.net/m\"\n\t_ \"example.net/directnotfound\"\n)\n-- untidy_test.go --\npackage untidy_test\n\nimport _ \"example.net/directtestnotfound\"\n-- m/go.mod --\nmodule example.net/m\ngo 1.16\n-- m/m.go --\npackage m\n\nimport _ \"example.net/indirectnotfound\"\n-- m/m_test.go --\npackage m_test\n\nimport _ \"example.net/indirecttestnotfound\"\n```\n\n----------------------------------------\n\nTITLE: Package A v0.1.1 Definition\nDESCRIPTION: Module definition and implementation for example.net/a v0.1.1 with upgraded dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patch.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/a\n\ngo 1.16\n\nrequire example.net/b v0.2.0  // upgraded\n```\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\nimport _ \"example.net/b\"\n```\n\n----------------------------------------\n\nTITLE: Go Module with Indirect Dependencies\nDESCRIPTION: Module definition where all dependencies are marked as indirect\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_readonly.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.16\n\nrequire (\n\trsc.io/quote v1.5.2 // indirect\n\trsc.io/sampler v1.3.0 // indirect\n\trsc.io/testonly v1.0.0 // indirect\n)\n```\n\n----------------------------------------\n\nTITLE: Main Package Test Implementation\nDESCRIPTION: Test file importing and using the main package, demonstrating proper package import behavior in test context.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_main_archive.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main_test\n\nimport (\n\t. \"main_test\"\n\t\"testing\"\n)\n\nfunc Test1(t *testing.T) {\n\tF()\n}\n```\n\n----------------------------------------\n\nTITLE: Testing 'std' Import with Module Replacement in Go\nDESCRIPTION: This snippet tests the import of 'std' package after attempting to replace it with a local module. It verifies that the import still fails, maintaining the restriction.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_meta.txt#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngo mod edit -replace std@v0.1.0=./modstd\ngo mod edit -require std@v0.1.0\n\n! go list -deps ./importstd\nstderr '^importstd[/\\\\]x.go:3:8: \"std\" is not an importable package; see ''go help packages''$'\n```\n\n----------------------------------------\n\nTITLE: Go Module File for Version 1.22\nDESCRIPTION: Defines a Go module file for version 1.22, specifying the module and its dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_vendor.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/x\ngo 1.22\n\nrequire \"foo.com/internal/bar\" v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Test Implementation for Package 'b' in Go\nDESCRIPTION: Test function for package 'b' that verifies BFunc returns the expected value of -42.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_multipkg.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage b\n\nimport \"testing\"\n\nfunc TestB(t *testing.T) {\n\tif BFunc() != -42 {\n\t\tt.Fatalf(\"bad!\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Process Management Syscall Constants for Darwin ARM64\nDESCRIPTION: Constant definitions for process control system calls on Darwin ARM64 architecture. These include operations for process hibernation, suspension, resumption, and termination with their corresponding numeric identifiers.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_103\n\nLANGUAGE: Go\nCODE:\n```\nconst SYS_PID_HIBERNATE = 435\nconst SYS_PID_RESUME = 434\nconst SYS_PID_SHUTDOWN_SOCKETS = 436\nconst SYS_PID_SUSPEND = 433\nconst SYS_POSIX_SPAWN = 244\nconst SYS_PROCESS_POLICY = 323\nconst SYS_PROC_INFO = 336\nconst SYS_PTRACE = 26\nconst SYS_REBOOT = 55\nconst SYS_SETPGID = 82\nconst SYS_SETPRIORITY = 96\nconst SYS_SETPRIVEXEC = 152\nconst SYS_SETSID = 147\n```\n\n----------------------------------------\n\nTITLE: Go Test File with Custom Flag Handling\nDESCRIPTION: A test file demonstrating how to define and use custom flags in Go tests. It defines a '-v' flag and a '-custom' flag, then tests if the '-v' flag is properly set to the expected value when passed via command line.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_flag.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage flag_test\n\nimport (\n\t\"flag\"\n\t\"log\"\n\t\"testing\"\n)\n\nvar v = flag.Int(\"v\", 0, \"v flag\")\n\nvar custom = flag.Bool(\"custom\", false, \"\")\n\n// Run this as go test pkg -v=7\nfunc TestVFlagIsSet(t *testing.T) {\n\tif *v != 7 {\n\t\tlog.Fatal(\"v flag not set\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Git configuration for regression test\nDESCRIPTION: Creates a custom git configuration with a local repository in place of a remote one to simulate adding commits during the test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/get_issue53955.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GIT_CONFIG_GLOBAL=$WORK${/}home${/}gopher${/}.gitconfig\nenv HOME=$WORK${/}home${/}gopher\nexec git config --global --show-origin user.name\nstdout 'Go Gopher'\n\n# Inject a local repo in place of a remote one, so that we can\n# add commits to the repo partway through the test.\nenv GIT_ALLOW_PROTOCOL=file\nenv GOPRIVATE=github.com/golang/issue53955\n\n[!GOOS:windows] exec git config --global 'url.file://'$WORK'/repo.insteadOf' 'https://github.com/golang/issue53955'\n[GOOS:windows]  exec git config --global 'url.file:///'$WORK'/repo.insteadOf' 'https://github.com/golang/issue53955'\n```\n\n----------------------------------------\n\nTITLE: Defining Minimal Go Main Package (Go)\nDESCRIPTION: This Go source file defines a minimal `main` package with an empty `main` function. It resides in the directory `cmd/x++`, demonstrating a package path component containing the '+' character. This file is used by the test scripts to verify that Go tools can correctly handle such package paths.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_path_plus.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n-- cmd/x++/main.go --\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Testing an Internal Function in a With-Test Package - Go\nDESCRIPTION: Provides a test function TestBar within the 'withtest' package, directly calling Bar(). Uses the testing framework to ensure Bar is executed, contributing to coverage calculations. No external dependencies other than 'testing'. Inputs and outputs are managed by the Go testing infrastructure.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_pkgall_imports.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\npackage withtest\n\nimport \"testing\"\n\nfunc TestBar(t *testing.T) {\n\tBar()\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Internal Leakage with Module Replacement\nDESCRIPTION: Following the replacement of `golang.org/x/internal`, this attempts to get and build `./baddep`. The build (`! go build`) is expected to fail, demonstrating that the replacement does not allow modules outside the original internal scope (`golang.org/x/...`) to import the replaced internal package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngo get ./baddep\n! go build ./baddep\nstderr golang.org[/\\\\]notx[/\\\\]useinternal\nstderr 'use of internal package golang.org/x/.* not allowed'\n```\n\n----------------------------------------\n\nTITLE: Testing 'go build' Command Outside Module\nDESCRIPTION: Checks the behavior of 'go build' when run outside a module, including building standard library packages and files with different import scenarios.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_outside.txt#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncd needmod\n! go build\nstderr '^go: go.mod file not found in current directory or any parent directory; see ''go help modules''$'\ncd ..\n\n! go build ./needmod\nstderr '^go: go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n\n! go build -n ./needmod/needmod.go\nstderr '^needmod[/\\\\]needmod.go:10:2: no required module provides package example.com/version: go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n\ngo build -n -o ignore ./stdonly/stdonly.go\n\ngo build -n fmt\n\ngo build ./newgo/newgo.go\n```\n\n----------------------------------------\n\nTITLE: Testing 'go list std' in GOROOT/src (GOPATH Mode) (Shell)\nDESCRIPTION: While in $GOROOT/src and with Go module mode disabled (GOPATH mode), this runs `go list std`. It asserts that the synthesized GOPATH-style path for `GOROOT/src` is *not* included in the output, ensuring `go list std` only lists standard library packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_gofile_in_goroot.txt#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ngo list std\n! stdout goroot/src\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Dependency Management with Explicit Versions\nDESCRIPTION: This snippet tests that 'go get -u' does not upgrade modules with explicit version queries to any version other than the specified one. It uses 'go list -m all' to verify the correct versions are installed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_extra.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncp go.mod go.mod.orig\n\ngo get -u example.net/a@v0.1.0 example.net/b@v0.1.0\ngo list -m all\nstdout '^example.net/a v0.1.0 '\nstdout '^example.net/b v0.1.0 '\n! stdout '^example.net/c '\n```\n\n----------------------------------------\n\nTITLE: Creating Go Package for Testing\nDESCRIPTION: A simple Go package file containing a constant with a message. This file is used as part of the test repository structure to validate imports and references.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/test1-svn-git.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage pkg\nconst Message = \"code not in git-README-only\"\n```\n\n----------------------------------------\n\nTITLE: Cache File Validation Utility in Go\nDESCRIPTION: Utility program that checks fuzzing cache files for specific expected values. Uses regex to parse byte array representations and validates their contents against an expected string.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_minimize_dirty_cov.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc checkFile(name, expected string) (bool, error) {\n\tdata, err := os.ReadFile(name)\n\tif err != nil {\n\t\treturn false, err\n\t}\n\tfor _, line := range bytes.Split(data, []byte(\"\\n\")) {\n\t\tm := valRe.FindSubmatch(line)\n\t\tif m == nil {\n\t\t\tcontinue\n\t\t}\n\t\tfmt.Println(strconv.Unquote(string(m[1])))\n\t\tif s, err := strconv.Unquote(string(m[1])); err != nil {\n\t\t\treturn false, err\n\t\t} else if s == expected {\n\t\t\treturn true, nil\n\t\t}\n\t}\n\treturn false, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Covering Exported Functionality in a Test - Go\nDESCRIPTION: This Go test file imports the 'testing' package and defines a single test function that prints the result of 'Mainer'. It serves to exercise coverage measurement on 'Mainer' and verify that test runs impact coverage. Running this test requires the Go toolchain and a complete main package as context.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_main_import_path.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"testing\"\n\nfunc TestCoverage(t *testing.T) {\n\tprintln(Mainer())\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Signal Waiting System Call Constants in Go for Darwin ARM64\nDESCRIPTION: Constants defining system call numbers for signal waiting operations on Darwin ARM64 platform. These constants are used for implementing signal-related functionality in the syscall package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_191\n\nLANGUAGE: Go\nCODE:\n```\nconst SYS___OLD_SEMWAIT_SIGNAL = 370\nconst SYS___OLD_SEMWAIT_SIGNAL ideal-int\nconst SYS___OLD_SEMWAIT_SIGNAL_NOCANCEL = 371\nconst SYS___OLD_SEMWAIT_SIGNAL_NOCANCEL ideal-int\nconst SYS___SEMWAIT_SIGNAL = 334\nconst SYS___SEMWAIT_SIGNAL ideal-int\nconst SYS___SEMWAIT_SIGNAL_NOCANCEL = 423\nconst SYS___SEMWAIT_SIGNAL_NOCANCEL ideal-int\nconst SYS___SIGWAIT = 330\nconst SYS___SIGWAIT ideal-int\nconst SYS___SIGWAIT_NOCANCEL = 422\nconst SYS___SIGWAIT_NOCANCEL ideal-int\nconst SYS___SYSCTL = 202\nconst SYS___SYSCTL ideal-int\n```\n\n----------------------------------------\n\nTITLE: Handling Special Cases in GCD and LCM Calculations with Go\nDESCRIPTION: This code snippet demonstrates how GCD and LCM calculations handle special cases, such as when one or both input numbers are zero, or when both numbers are equal.\nSOURCE: https://github.com/golang/go/blob/master/src/crypto/internal/fips140/rsa/testdata/gcd_lcm_tests.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nA = 0\nB = 8d9d4f30773c4edf\nLCM = 0\n\nGCD = 8d9d4f30773c4edf\nA = 8d9d4f30773c4edf\nB = 0\nLCM = 0\n\nGCD = 8d9d4f30773c4edf\nA = 8d9d4f30773c4edf\nB = 8d9d4f30773c4edf\nLCM = 8d9d4f30773c4edf\n```\n\n----------------------------------------\n\nTITLE: Internal Package Definition\nDESCRIPTION: A minimal Go file that defines an internal package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_internal.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage internal\n```\n\n----------------------------------------\n\nTITLE: Package C Definition\nDESCRIPTION: Empty package declaration for package 'c'\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_pattern_work.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage c\n```\n\n----------------------------------------\n\nTITLE: Simple Go Main Program\nDESCRIPTION: A minimal Go program that prints a message to standard output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/link/testdata/script/script_test_basics.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {\n  println(\"Hi mom!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Repository Setup\nDESCRIPTION: Initializes a Git repository, creates README file, and sets up initial commit with tag v1.2.3\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/gitrepo1.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit init\nunquote ''\ncp stdout README\ngit add README\ngit commit -a -m 'empty README'\ngit branch -m master\ngit tag v1.2.3\n```\n\n----------------------------------------\n\nTITLE: Gofmt Formatted Reference Links\nDESCRIPTION: Shows the gofmt-processed version of the markdown content with reference links reorganized to the bottom.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/link5.txt#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nSee the [Go home page] and the [pkg\nsite].\n\nThey're really great!\n\n[Go home page]: https://go.dev/\n[pkg site]: https://pkg.go.dev\n\n[Go home page]: https://duplicate.ignored\n```\n\n----------------------------------------\n\nTITLE: External Test Implementation\nDESCRIPTION: External test file using _test package suffix with vendored imports.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_list_issue11977.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage tx_test\n\nimport _ \"vendor.org/p\"\nimport _ \"vendor.org/p1\"\nimport \"testing\"\n\nfunc TestNop(t *testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Importing a Go Package for Side Effects - Go\nDESCRIPTION: Defines the Go package a and imports example.com/badchain/b for its side effects only (using the blank identifier). This pattern is used when the imported package registers handlers or triggers initialization logic. There are no explicit function calls; all side-effects occur during package initialization.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_badchain_a_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage a\n\nimport _ \\\"example.com/badchain/b\\\"\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module 'example' for Testing\nDESCRIPTION: A minimal `go.mod` file defining a Go module named `example` and specifying Go version 1.19. This file provides the module context required by the `go` commands executed in the test script.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cwd_newline.txt#2025-04-22_snippet_5\n\nLANGUAGE: gomod\nCODE:\n```\n-- $WORK/go.mod --\nmodule example\ngo 1.19\n```\n\n----------------------------------------\n\nTITLE: Defining Test Dependency Package 'x/inall/fromtest' (Go)\nDESCRIPTION: Defines the empty package `x/inall/fromtest` within the `x` module. This package is imported only by the tests of the main module `m` (`m_test.go`) and is used to test how `go list -deps all` handles test dependencies of packages in `all`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_notall.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n-- x/inall/fromtest/fromtest.go --\npackage fromtest\n```\n\n----------------------------------------\n\nTITLE: HTML URL Formatting\nDESCRIPTION: HTML output showing proper anchor tag formatting for URLs with special characters, including proper HTML entity encoding and link structure.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/link6.txt#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p>URLs with punctuation are hard.\\nWe don&apos;t want to consume the end-of-sentence punctuation.\\n<p>For example, <a href=\"https://en.wikipedia.org/wiki/John_Adams_(miniseries)\">https://en.wikipedia.org/wiki/John_Adams_(miniseries)</a>.\\nAnd <a href=\"https://example.com/[foo]/bar\">https://example.com/[foo]/bar</a>{.\\nAnd <a href=\"https://example.com/(foo)/bar\">https://example.com/(foo)/bar</a>!\\nAnd <a href=\"https://example.com/{foo}/bar\">https://example.com/{foo}/bar</a>{.\\nAnd <a href=\"https://example.com/\">https://example.com/</a>)baz{foo}.\\n<p>[And <a href=\"https://example.com/\">https://example.com/</a>].\n```\n\n----------------------------------------\n\nTITLE: Implementing Functions in Assembly\nDESCRIPTION: Provides assembly implementations for the 255 functions (t0 to t254) declared in Go. Each function simply returns without performing any operations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/testdata/script/dwarf5_gen_assembly_and_go.txt#2025-04-22_snippet_3\n\nLANGUAGE: Assembly\nCODE:\n```\nTEXT ·t0(SB),0,$0\n\tRET\n\nTEXT ·t1(SB),0,$0\n\tRET\n\n// ... (omitted for brevity)\n\nTEXT ·t253(SB),0,$0\n\tRET\n\nTEXT ·t254(SB),0,$0\n\tRET\n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating Go Fuzz Cache\nDESCRIPTION: This shell script demonstrates how to create and manipulate the Go fuzz cache. It includes creating directories, copying files, and setting up cache entries for different fuzz targets.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_seed_corpus.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nmkdir $GOCACHE/fuzz/example.com/x/FuzzWithCache\ncp cache-file $GOCACHE/fuzz/example.com/x/FuzzWithCache/1\n\nmkdir $GOCACHE/fuzz/example.com/x/FuzzWithMinimizableCache\ncp cache-file-bytes $GOCACHE/fuzz/example.com/x/FuzzWithMinimizableCache/1\n\nmkdir $GOCACHE/fuzz/example.com/x/FuzzRunNoneWithCache\ncp cache-file $GOCACHE/fuzz/example.com/x/FuzzRunNoneWithCache/1\n```\n\n----------------------------------------\n\nTITLE: Testing explicit -mod=mod flag behavior\nDESCRIPTION: Ensures that -mod=mod forces the vendor directory to be ignored and uses the module cache instead.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_auto.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nenv GOFLAGS=-mod=mod\n\ngo list -f {{.Dir}} -tags tools -e all\nstdout '^'$WORK'[/\\\\]auto$'\nstdout '^'$GOPATH'[/\\\\]pkg[/\\\\]mod[/\\\\]example.com[/\\\\]printversion@v1.0.0$'\nstdout '^'$WORK'[/\\\\]auto[/\\\\]replacement-version$'\n\ngo list -m all\nstdout '^example.com/auto$'\nstdout 'example.com/printversion v1.0.0'\nstdout 'example.com/version v1.0.0'\n\ngo list -m -f '{{.Dir}}' all\nstdout '^'$WORK'[/\\\\]auto$'\nstdout '^'$GOPATH'[/\\\\]pkg[/\\\\]mod[/\\\\]example.com[/\\\\]printversion@v1.0.0$'\nstdout '^'$WORK'[/\\\\]auto[/\\\\]replacement-version$'\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests with Race Detection and Coverage\nDESCRIPTION: This command executes the tests for the 'issue.56370/filter' package. The `-race` flag enables the data race detector, and the `-cover` flag enables code coverage analysis. The preceding lines `[short] skip` and `[!race] skip` are likely build constraints or directives for the test environment.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_test_race_issue56370.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[short] skip\n[!race] skip\n\ngo test -race -cover issue.56370/filter\n```\n\n----------------------------------------\n\nTITLE: Declaring Go Toolchain Module Path - Plain Text\nDESCRIPTION: This snippet declares the module path for the Go toolchain, identifying \"golang.org/toolchain\" as the module. This is essential for Go module resolution, allowing other Go programs to refer to this toolchain as a dependency by its canonical name. It is used in both .mod and go.mod files to establish the root package for package management.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.22.3.linux-amd64.txt#2025-04-22_snippet_1\n\nLANGUAGE: Plain Text\nCODE:\n```\ngolang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Testing Go Build Command with Invalid GOOS Value\nDESCRIPTION: This script tests the Go build command's error handling by setting GOOS to 'windwos' (an intentional misspelling of 'windows') and attempting to build. The expected behavior is for the command to fail with an error message about unsupported GOOS/GOARCH pair.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_unsupported_goos.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n[compiler:gccgo] skip # gccgo assumes cross-compilation is always possible\n\nenv GOOS=windwos # intentional misspelling of windows\n\n! go build -n exclude\nstderr 'unsupported GOOS/GOARCH pair'\n```\n\n----------------------------------------\n\nTITLE: Implementing a Compiler Command Wrapper in Go\nDESCRIPTION: A Go program that wraps compiler commands, adding a define flag and forwarding all other arguments. This is used to verify that the compiler wrapper is correctly invoked through environment variables containing spaces and quotes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_path_space_quote.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n)\n\nfunc main() {\n\targs := append([]string{\"-DWRAPPER_WAS_USED=1\"}, os.Args[2:]...)\n\tcmd := exec.Command(os.Args[1], args...)\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n\tif err := cmd.Run(); err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Ed25519 Cryptographic Constants and Functions\nDESCRIPTION: Defines constants and functions for Ed25519 public-key signature system operations, including key sizes, signature verification, and key generation. These are essential for implementing Ed25519 cryptographic operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nconst PrivateKeySize = 64\nconst PublicKeySize = 32\nconst SeedSize = 32\nconst SignatureSize = 64\nfunc GenerateKey(io.Reader) (PublicKey, PrivateKey, error)\nfunc NewKeyFromSeed([]uint8) PrivateKey\nfunc Sign(PrivateKey, []uint8) []uint8\nfunc Verify(PublicKey, []uint8, []uint8) bool\nmethod (PrivateKey) Public() crypto.PublicKey\nmethod (PrivateKey) Seed() []uint8\nmethod (PrivateKey) Sign(io.Reader, []uint8, crypto.SignerOpts) ([]uint8, error)\ntype PrivateKey []uint8\ntype PublicKey []uint8\n```\n\n----------------------------------------\n\nTITLE: Updating Git remote URL and SVN repository\nDESCRIPTION: Updates the Git remote URL to a new domain, commits the change to SVN, and sets SVN properties for author and date on the third revision. Then performs SVN update and generates an XML log.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/test2-svn-git.txt#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit remote set-url origin https://vcs-test.golang.org/git/README-only\nsvn commit -m 'move from vcs-test.swtch.com to vcs-test.golang.org'\nsvn propset svn:author rsc --revprop -r3\nsvn propset svn:date 2017-10-04T15:09:35.963034Z --revprop -r3\n\nsvn update\nsvn log --xml\n```\n\n----------------------------------------\n\nTITLE: Setting up SVN Repository Structure\nDESCRIPTION: Creates the necessary directory structure for an SVN repository and sets permissions for hooks.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/hello.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir db/transactions\nmkdir db/txn-protorevs\nchmod 0755 hooks/pre-revprop-change\n\nenv ROOT=$PWD\ncd .checkout\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Go Test Function (Go)\nDESCRIPTION: Defines a test function 'TestF' within the 'x' package using Go's standard 'testing' package. This test calls the function 'F' from the same package, providing a basic test case used for coverage analysis and race detection in the accompanying shell commands.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_pkgall_runtime.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage x\nimport \"testing\"\nfunc TestF(t *testing.T) { F() }\n```\n\n----------------------------------------\n\nTITLE: Unit Testing a Go Function with testing Package (Go)\nDESCRIPTION: This code defines a Go test file in the 'x' package which imports the 'testing' package and provides a test function TestF. The test function simply calls F to ensure the function is reachable and compilable, aiding code coverage reports. It relies on Go's standard 'testing' package and requires both x.go and the test file to be in the same package directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_atomic_pkgall.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage x\n\nimport \"testing\"\n\nfunc TestF(t *testing.T) { F() }\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Go Package `w` with Dependency `x/y/z` (Go)\nDESCRIPTION: This Go source file defines package `w`. It imports package `x/y/z`, indicating a dependency relationship managed by the vendoring structure set up in the accompanying shell script. This file is intended to be placed in `x/y/w/w.go` within the GOPATH.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_symlink_vendor_issue15201.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n-- w.go --\npackage w\n\nimport \"x/y/z\"\n```\n\n----------------------------------------\n\nTITLE: Defining Dependency Module 'dep'\nDESCRIPTION: These snippets show the implementation of the 'example.com/dep' module in three different versions (dep1, dep2, dep3). Each version has a go.mod file and a dep.go file with the same content.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace_conflict_override.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/dep\n```\n\nLANGUAGE: go\nCODE:\n```\npackage dep\n\nfunc G() {\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Coverage Function Profile\nDESCRIPTION: Uses 'go tool cover' to generate a detailed function-level coverage report from the coverage profile file. Outputs coverage percentages for functions within the profiled packages. Requires a pre-generated coverage profile.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_nocoverpkg.txt#2025-04-22_snippet_1\n\nLANGUAGE: Golang\nCODE:\n```\ngo tool cover -func=cov.p\n```\n\n----------------------------------------\n\nTITLE: Testing Go Workspace Module Replacement Behavior\nDESCRIPTION: This script tests Go's handling of module replacements in a workspace. It checks if replaces of the main module are ignored in workspace modules and if replaces in the go.work file are properly disallowed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace_main_module.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngo list example.com/dep\n\ncp replace_main_module.go.work go.work\n! go list example.com/dep\nstderr 'go: workspace module example.com/mainmoda is replaced at all versions in the go.work file. To fix, remove the replacement from the go.work file or specify the version at which to replace the module.'\n```\n\n----------------------------------------\n\nTITLE: Parsing and Saving Go Bug Report URL in Go\nDESCRIPTION: This Go program parses a URL from command-line arguments, extracts the 'body' query parameter, and saves its unescaped content to a file named 'browser' in the system's temporary directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/bug.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/url\"\n\t\"os\"\n\t\"path/filepath\"\n)\n\nfunc main() {\n\tu, err := url.Parse(os.Args[1])\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tbody, err := url.PathUnescape(u.Query().Get(\"body\"))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tout := filepath.Join(os.TempDir(), \"browser\")\n\tf, err := os.Create(out)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Fprintln(f, body)\n\tif err := f.Close(); err != nil {\n\t\tpanic(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Package B Implementation with Range Loop Variable Capture\nDESCRIPTION: Implementation of package 'b' that contains functions capturing loop variables in a range loop. Both the index and value variables are captured by reference.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_shorten_pkg.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage b\n\nvar slice = []int{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024}\n\nfunc F() ([]*int, []*int) {\n\treturn g()\n}\n\nfunc g() ([]*int, []*int) {\n\tvar s []*int\n\tvar t []*int\n\tfor i, j := range slice {\n\t\ts = append(s, &i)\n\t\tt = append(t, &j)\n\t}\n\treturn s[:len(s)-1], t\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Import of 'std' Meta-Package in Go\nDESCRIPTION: This snippet tests the import of the 'std' meta-package in Go. It expects the command to fail and produce a specific error message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_meta.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n! go list -deps ./importstd\n! stderr 'internal error'\nstderr '^importstd[/\\\\]x.go:3:8: \"std\" is not an importable package; see ''go help packages''$'\n```\n\n----------------------------------------\n\nTITLE: Minimal Go Program for Installation Test\nDESCRIPTION: A trivial Go program with an empty main function. This serves as the code to be installed in the test scenario.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_relative_gobin_fail.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: OS File Mode Constants and Methods in Go\nDESCRIPTION: Definitions of file mode constants and methods for the os package, including various file type flags and permission modes.\nSOURCE: https://github.com/golang/go/blob/master/api/except.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype FileMode uint32\n\nconst (\n    ModeDir FileMode\n    ModeAppend FileMode\n    ModeExclusive FileMode\n    ModeTemporary FileMode\n    ModeSymlink FileMode\n    ModeDevice FileMode\n    ModeNamedPipe FileMode\n    ModeSocket FileMode\n    ModeSetuid FileMode\n    ModeSetgid FileMode\n    ModeCharDevice FileMode\n    ModeSticky FileMode\n    ModeIrregular FileMode\n    ModePerm FileMode\n)\n```\n\n----------------------------------------\n\nTITLE: Module A Definition\nDESCRIPTION: Module definition for example.com/a which requires example.com/b v0.1.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_downgrade.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/a\n\ngo 1.17\n\nrequire example.com/b v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Testing Vendor Directory Import Conflict\nDESCRIPTION: Tests import resolution when a package exists in both the main module and the vendor directory, expecting an error only when -mod=vendor is used.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_ambiguous_import.txt#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nmkdir vendor/example.com/m/importy\ncp $WORK/importy/importy.go vendor/example.com/m/importy/importy.go\ngo build example.com/m/importy\n! go build -mod=vendor example.com/m/importy\nstderr '^ambiguous import: found package example.com/m/importy in multiple directories:\\n\\t'$WORK'[/\\\\]importy\\n\\t'$WORK'[/\\\\]vendor[/\\\\]example.com[/\\\\]m[/\\\\]importy$'\n```\n\n----------------------------------------\n\nTITLE: Vendor Modules File with Future Version Dependency\nDESCRIPTION: This vendor/modules.txt file lists a dependency (golang.org/x/text) that requires a future Go version (1.99999), used to test vendored package version compatibility.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline_too_new.txt#2025-04-22_snippet_9\n\nLANGUAGE: Plain Text\nCODE:\n```\n# golang.org/x/text v0.9.0\n## explicit; go 1.99999\ngolang.org/x/text/internal/language\n```\n\n----------------------------------------\n\nTITLE: Specifying Version Information in JSON\nDESCRIPTION: This JSON snippet provides version information for the module, indicating an empty v1.0.0 version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rationale_v1.0.0-empty.txt#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\"Version\":\"v1.0.0-empty\"}\n```\n\n----------------------------------------\n\nTITLE: Module Definition with Dependencies\nDESCRIPTION: Go module definition file specifying the module name and its dependency requirements\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_direct_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule patch.example.com/direct\n\nrequire (\n\tpatch.example.com/indirect v1.0.0\n)\n```\n\n----------------------------------------\n\nTITLE: Requireincompatible Module Definition\nDESCRIPTION: Module configuration for requireincompatible that requires incompatible v2.0.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_irrelevant.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/requireincompatible\n\ngo 1.15\n\nrequire example.com/retract/incompatible v2.0.0+incompatible\n```\n\n----------------------------------------\n\nTITLE: Invalid Package with Import from Nested Vendor Directory\nDESCRIPTION: A Go file that attempts to import from a nested vendor directory, which is not allowed in Go's vendoring rules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_vendor.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage invalid\n\nimport \"vend/x/invalid/vendor/foo\"\n```\n\n----------------------------------------\n\nTITLE: Running Go Test Coverage on Multiple Packages\nDESCRIPTION: Executes `go test -count=1 -cover` on packages `a`, `b`, and `main`. Asserts via `stdout` check that the output line for the `main` package shows 'coverage: 75.0% of statements'. This verifies the coverage result when multiple packages are specified.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_single_vs_multiple.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo test -count=1 -cover ./a ./b ./main\nstdout '^ok\\s+M/main\\s+\\S+\\s+coverage: 75.0% of statements'\n```\n\n----------------------------------------\n\nTITLE: Empty Go Sum File\nDESCRIPTION: This snippet represents an empty go.sum file, which is typically used to store the expected cryptographic checksums of the content of specific module versions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_gomod.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Vendored dependency implementation\nDESCRIPTION: Contains the vendored version of the example.com/m dependency package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_redundant_requirement.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\npackage m\n```\n\n----------------------------------------\n\nTITLE: Testing Go List Prefix Behavior in Shell\nDESCRIPTION: This script tests the 'go list' command with a prefix argument to ensure it only reads relevant directories. It sets the GODEBUG environment variable to trace filesystem operations, executes 'go list m...', and checks the stderr output for expected and unexpected patterns.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/fsys_walk.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GODEBUG=gofsystrace=1\ngo list m...\nstderr mime\nstderr mime[\\/]multipart\n! stderr archive\n```\n\n----------------------------------------\n\nTITLE: Defining Main Module Package 'm' (Go)\nDESCRIPTION: Defines the main package `m` for the primary module. It imports package `x/inall` using a blank identifier to establish a dependency required for the `go list all` pattern test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_notall.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n-- m.go --\npackage m\n\nimport _ \"x/inall\"\n```\n\n----------------------------------------\n\nTITLE: Testing go work sync without modules\nDESCRIPTION: Verifies that go work sync command executes successfully when no modules are defined in go.work file\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_missing_module.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo work sync\n```\n\n----------------------------------------\n\nTITLE: Go Module in '_ignored' Directory\nDESCRIPTION: A Go source file placed in a directory with a leading underscore that imports 'rsc.io/quote' to test dependency management in specially named directories.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_in_testdata_dir.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage foo\n\nimport _ \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Go Package bar with cgo Import - Go\nDESCRIPTION: Implements a minimal Go source file for package 'bar', which imports 'C', thereby enabling cgo functionality. This tests the build caching and cgo integration in the context of the regression test. No functions or exported symbols are present; the import is solely for triggering cgo in compilation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_compiled_concurrent.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n-- bar.go --\npackage bar\n\nimport \"C\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Unicode Category Aliases in Go\nDESCRIPTION: The CategoryAliases map provides access to Unicode category alias names, such as 'Letter' for the 'L' category. This allows for more readable code when working with Unicode character categories.\nSOURCE: https://github.com/golang/go/blob/master/doc/next/6-stdlib/99-minor/unicode/70780.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nCategoryAliases\n```\n\n----------------------------------------\n\nTITLE: Unix Platform Main Implementation\nDESCRIPTION: Main program implementation specifically for Unix platforms using the unix build tag.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/import_unix_tag.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n//go:build unix\n\npackage main\n\nimport _ \"example.com/version\"\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Main Package with Imports\nDESCRIPTION: Defines the main package 'm' with blank imports of two modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_added.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage m\n\nimport (\n\t_ \"example.net/added\"\n\t_ \"example.net/lazy\"\n)\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition for Testing\nDESCRIPTION: A go.mod file that specifies Go 1.24 as the required Go version. This module definition is crucial for the test as it verifies behavior specific to Go 1.24 modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/godebug_decoratemappings_124.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngo 1.24\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Go Module with Explicit Package Requirement\nDESCRIPTION: Modified go.mod file after adding explicit requirement for indirect-with-pkg\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_promote_implicit.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.16\n\nrequire (\n\tdirect v1.0.0\n\tindirect-with-pkg v1.0.0\n)\n\nreplace (\n\tdirect v1.0.0 => ./direct\n\tindirect-with-pkg v1.0.0 => ./indirect-with-pkg\n\tindirect-without-pkg v1.0.0 => ./indirect-without-pkg\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Cgo Method Declaration Restrictions in Go\nDESCRIPTION: This code attempts to define methods on an alias type for a C integer, which should be rejected by the Go compiler. The test expects specific error messages about not being able to define methods on non-local types.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_badmethod_issue60725.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\n/*\ntypedef int T;\n*/\nimport \"C\"\n\ntype A = C.T\n\nfunc (A) m1() {}\nfunc (*A) m2() {}\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests with No Matches\nDESCRIPTION: This shell command runs Go tests using a pattern that matches no tests. It demonstrates the output when no tests are executed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_no_tests.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo test -run ThisWillNotMatch standalone_test.go\n```\n\n----------------------------------------\n\nTITLE: Base Go Module Definition\nDESCRIPTION: Defines the initial `go.mod` file content. It sets the module name placeholder `TBD` (which is changed by `go mod edit` commands later) and specifies Go version `1.12`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n-- go.mod --\nmodule TBD\ngo 1.12\n```\n\n----------------------------------------\n\nTITLE: Go Test File with Deliberate Syntax Error\nDESCRIPTION: This Go test file contains a function with a deliberate syntax error. It's designed to cause a build failure when running tests, which is crucial for the test case.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_no_tests_build_failure.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage p\n\nfunc f() (x.y, z int) {\n}\n```\n\n----------------------------------------\n\nTITLE: Importing 'std' Meta-Package in Go\nDESCRIPTION: This Go file attempts to import the 'std' meta-package, which is not allowed and should result in an error.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_meta.txt#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\npackage importstd\n\nimport _ \"std\"\n```\n\n----------------------------------------\n\nTITLE: Minimal Nested Vendored Package p\nDESCRIPTION: A minimal vendored package 'p' in a nested directory that only contains a package declaration.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_vendor.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage p\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module definition file specifying the module name and Go version requirement\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_lookup.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.15\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition for Regression Test\nDESCRIPTION: A minimal go.mod file required for the regression test. It defines a module named 'example' with Go version 1.19.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_insecure_issue63845.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example\n\ngo 1.19\n```\n\n----------------------------------------\n\nTITLE: Initializing Main Go Module with Dependency Replacement - Go\nDESCRIPTION: Defines the main module 'm' targeting Go version 1.12 and specifies a dependency on 'sub.1' version v1.0.0. The 'replace' directive points 'sub.1' to a local directory, enabling local development and module version overrides. This go.mod file is required for reproducible builds and dependency management using Go modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version_mixed.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n-- go.mod --\nmodule m\ngo 1.12\nrequire (\n\tsub.1 v1.0.0\n)\nreplace (\n\tsub.1 => ./sub\n)\n```\n\n----------------------------------------\n\nTITLE: Time Package Constants and Methods\nDESCRIPTION: Defines time format constants and methods for time manipulation in Go.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.17.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nconst Layout = \"01/02 03:04:05PM '06 -0700\"\n\nfunc UnixMicro(int64) Time\nfunc UnixMilli(int64) Time\nmethod (Time) UnixMicro() int64\nmethod (Time) UnixMilli() int64\nmethod (Time) GoString() string\nmethod (Time) IsDST() bool\n```\n\n----------------------------------------\n\nTITLE: Module Definition in go.mod\nDESCRIPTION: The go.mod file defining the golang.org/toolchain module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-mips64x.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Defining gen.go file content\nDESCRIPTION: Contains a Go package with a generate directive to exclude a specific module version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/modfile_flag.txt#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\n//go:generate go mod edit -exclude example.com/exclude@v1.0.0\n\npackage main\n```\n\n----------------------------------------\n\nTITLE: Checking Dependencies in Test Mode\nDESCRIPTION: This command uses 'go list -test' to check if vendored transitive dependencies of test imports appear in the Deps field with appropriate vendor prefixes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/std_vendor.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo list -test -f '{{.Deps}}'\n```\n\n----------------------------------------\n\nTITLE: Resetting Configuration for Lazy Modules\nDESCRIPTION: This snippet sets up a lazy main module configuration by restoring previous module and source files. It tests the deepening scan, which should capture transitive dependencies changes without resorting to using the 'latest' version. Steps involve copying backup files and handling dependency additions accurately using Go commands.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_new_import.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\ncp lazy.go.old lazy.go\ncp go.mod.117 go.mod\n\ngo list all\ncmp go.mod go.mod.117\n\ncp lazy.go.new lazy.go\n\n! go list all\nstderr '^go: updates to go.mod needed; to update it:\\n\\tgo mod tidy$'\n\ngo mod tidy\ngo list all\ngo list -m all\nstdout '^example.com/c v0.1.0'\ncmp go.mod go.mod.new\n```\n\n----------------------------------------\n\nTITLE: Testing 'go list ./...' in GOROOT/src (GOPATH Mode) (Shell)\nDESCRIPTION: Disables Go module mode (GO111MODULE=off) while in $GOROOT/src and runs `go list ./...`. It verifies that both the standard library package `fmt` and a synthesized GOPATH-style import path for the current directory (`$WORK/goroot/src` or `goroot/src` on Windows) are listed. This confirms legacy GOPATH behavior where directories in GOROOT/src could be listed relative to the current path.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_gofile_in_goroot.txt#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n# In GOPATH mode, 'go list ./...' should synthesize a legacy GOPATH-mode path —\n# not a standard-library or empty path — for the errant package.\nenv GO111MODULE=off\ngo list ./...\nstdout -count=2 '^.+$' # Both 'fmt' and GOROOT/src should be listed.\nstdout '^fmt$'\n[!GOOS:windows] stdout ^_$WORK/goroot/src$\n[GOOS:windows] stdout goroot/src$ # On windows the \":\" in the volume name is mangled\n```\n\n----------------------------------------\n\nTITLE: External Test Implementation (x_test.go)\nDESCRIPTION: External test file in p_test package that imports main package and p2 using relative paths to compare function outputs.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_relative_cmdline.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage p_test\n\nimport (\n\t. \"../testimport\"\n\n\t\"./p2\"\n\n\t\"testing\"\n)\n\nfunc TestF1(t *testing.T) {\n\tif F() != p2.F() {\n\t\tt.Fatal(F())\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Main Module Definition\nDESCRIPTION: Main go.mod file defining the example module with dependencies and replacements for example.net/a and example.net/b packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patch.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example\n\ngo 1.16\n\nrequire (\n\texample.net/a v0.1.0\n\texample.net/b v0.1.0  // indirect\n)\n\nreplace (\n\texample.net/a v0.1.0 => ./a10\n\texample.net/a v0.1.1 => ./a11\n\texample.net/a v0.2.0 => ./a20\n\texample.net/a v0.2.1 => ./a21\n\texample.net/b v0.1.0 => ./b\n\texample.net/b v0.1.1 => ./b\n\texample.net/b v0.2.0 => ./b\n\texample.net/b v0.2.1 => ./b\n\texample.net/b v0.3.0 => ./b\n\texample.net/b v0.3.1 => ./b\n)\n```\n\n----------------------------------------\n\nTITLE: Defining SockaddrDatalink Struct for Link-Layer Socket Addresses in Go Syscall Package\nDESCRIPTION: The SockaddrDatalink struct represents link-layer socket addresses for network interfaces in the syscall package for Darwin ARM64. It contains fields for addressing information such as family type, length specifications, interface index, and the actual address data.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_206\n\nLANGUAGE: Go\nCODE:\n```\ntype SockaddrDatalink struct {\n    Len    uint8\n    Family uint8\n    Index  uint16\n    Type   uint8\n    Nlen   uint8\n    Alen   uint8\n    Slen   uint8\n    Data   [12]int8\n}\n```\n\n----------------------------------------\n\nTITLE: Fuzzing Test with Minimization Counter\nDESCRIPTION: Implements a fuzzing test that tracks minimization attempts by creating files after finding the first crash. Uses a predetermined seed value to trigger minimization.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_fuzztime.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc FuzzMinimizeCount(f *testing.F) {\n\tpid := os.Getpid()\n\tn := 0\n\tseed := bytes.Repeat([]byte(\"a\"), 357)\n\tf.Add(seed)\n\tcrashFound := false\n\tf.Fuzz(func(t *testing.T, b []byte) {\n\t\tif crashFound {\n\t\t\tname := fmt.Sprintf(\"minimizecount/%v.%d\", pid, n)\n\t\t\tif err := os.WriteFile(name, nil, 0666); err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\t\t\tn++\n\t\t}\n\t\tif !bytes.Equal(b, seed) {  // this should happen right away\n\t\t\tcrashFound = true\n\t\t\tt.Error(\"minimize this!\")\n\t\t}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Empty Package Definition\nDESCRIPTION: Minimal Go package declaration used for testing empty package scenarios.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage p\n```\n\n----------------------------------------\n\nTITLE: RDS Package Declaration\nDESCRIPTION: Empty RDS package declaration file used as a dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_test_issue14613.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage rds\n```\n\n----------------------------------------\n\nTITLE: Testing Integer Fuzzing in Go\nDESCRIPTION: This function tests Go's fuzzing capabilities with integer inputs. It panics when the input is not 0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_crash.txt#2025-04-22_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\nfunc FuzzInt(f *testing.F) {\n\tf.Add(0)\n\tf.Fuzz(func(t *testing.T, a int) {\n\t\tif a != 0 {\n\t\t\tpanic(\"this input caused a crash!\")\n\t\t}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Version Incompatibility with go get\nDESCRIPTION: Demonstrates how 'go get go@1.21.2' can fix the version incompatibility error.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goline_order.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncp go.mod.orig go.mod\ngo get go@1.21.2\ngo list -deps -tags usem1\n```\n\n----------------------------------------\n\nTITLE: OS and Signal Handling Types - Go\nDESCRIPTION: Operating system related constants and functions for file modes and user directories. Includes signal handling utilities and file mode constants.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.11.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nconst (\n    ModeIrregular FileMode = 524288\n    ModeType = 2399666176\n)\n\nfunc UserCacheDir() (string, error)\nfunc Ignored(os.Signal) bool\n```\n\n----------------------------------------\n\nTITLE: Go Package Implementation with Test Suffix\nDESCRIPTION: A Go package declaration for a package named 'c_test' which is a regular package despite having a test suffix in its name.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// Package c_test is the non-test package for its import path!\npackage c_test\n```\n\n----------------------------------------\n\nTITLE: Go Module Direct Access Test\nDESCRIPTION: Tests direct module access failure scenario when proxy is bypassed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_proxy.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncp go.mod.orig go.mod\nenv GOSUMDB=$sumdb\nenv GOPROXY=direct\n! go get rsc.io/fortune@v1.0.0\nstderr 'verifying module: rsc.io/fortune@v1.0.0: .*: no such host localhost.localdev'\nrm $GOPATH/pkg/mod/cache/download/sumdb\nrm go.sum\n```\n\n----------------------------------------\n\nTITLE: Testing Go Build with Tags\nDESCRIPTION: This script tests the Go build command with tag specifications. It first skips the test for gccgo, then tests a valid space-separated tag format, followed by an invalid format that improperly mixes commas and spaces in the tag list.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_tags_no_comma.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[compiler:gccgo] skip 'gccgo has no standard packages'\ngo build -tags 'tag1 tag2' math\n! go build -tags 'tag1,tag2 tag3' math\nstderr 'space-separated list contains comma'\n```\n\n----------------------------------------\n\nTITLE: Deprecated API Functions\nDESCRIPTION: List of deprecated functions and types across various packages including crypto/x509, go/doc, and io/ioutil packages.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.19.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// crypto/x509\nfunc ParseCRL //deprecated\nfunc ParseDERCRL //deprecated\n\n// io/ioutil\nfunc NopCloser //deprecated\nfunc ReadAll //deprecated\nfunc ReadDir //deprecated\nfunc ReadFile //deprecated\nfunc TempDir //deprecated\nfunc TempFile //deprecated\nfunc WriteFile //deprecated\n```\n\n----------------------------------------\n\nTITLE: Viewing Help for Specific Command in Go CLI\nDESCRIPTION: This example shows how to view help information for a specific command, in this case, the 'wait' command. It provides targeted assistance for using particular CLI features.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/script_help.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelp wait\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment for Go Doc Test\nDESCRIPTION: Sets up the environment by removing 'go' from PATH to ensure 'go doc' uses GOROOT to locate the 'go' command. It includes a special case for Plan 9 OS.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_doc_path.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv PATH=''\n[GOOS:plan9] env path=''\n\ngo doc p.X\n```\n\n----------------------------------------\n\nTITLE: Creating Mock Gofmt Executable Script for Testing\nDESCRIPTION: A shell script that simulates the 'gofmt' command with a placeholder implementation that simply outputs a message indicating it's unused.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-ppc64le.txt#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: Go Fuzzing Test Implementation\nDESCRIPTION: A Go test file containing fuzzing test functions. It includes FuzzEmpty for testing with an empty implementation and FuzzY which tests the Y function with various inputs.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_cache.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage y\n\nimport (\n\t\"io\"\n\t\"testing\"\n)\n\nfunc FuzzEmpty(f *testing.F) {\n    f.Fuzz(func (*testing.T, []byte) {})\n}\n\nfunc FuzzY(f *testing.F) {\n\tf.Add([]byte(\"y\"))\n\tf.Fuzz(func(t *testing.T, b []byte) { Y(io.Discard, b) })\n}\n```\n\n----------------------------------------\n\nTITLE: Stub Go file in main directory\nDESCRIPTION: A minimal Go file in the main directory used for testing directory restrictions in 'go run'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_dirs.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n```\n\n----------------------------------------\n\nTITLE: Testing Go Vet Version Without go.mod or go.work\nDESCRIPTION: Verifies go vet behavior when neither go.mod nor go.work is present, expecting the local Go version to be used for single file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_commandline.txt#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nenv TESTGO_VERSION=go1.22.3\nrm go.mod\nrm go.work\n\n! go vet -n -json example.com/m\n\ngo vet -n -json main.go\nstderr '\"GoVersion\": \"go1.22.3\"'\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Test Dependencies Behavior with Various Flags\nDESCRIPTION: A shell script that tests how 'go get' handles test dependencies under different scenarios. It verifies behaviors such as ignoring tests by default, considering test dependencies with '-t' flag, and updating dependencies with '-u' flag.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_test.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n\n# By default, 'go get' should ignore tests\ncp go.mod.empty go.mod\ngo get m/a\n! grep rsc.io/quote go.mod\n\n# 'go get -t' should consider test dependencies of the named package.\ncp go.mod.empty go.mod\ngo get -t m/a\ngrep 'rsc.io/quote v1.5.2$' go.mod\n\n# 'go get -t' should not consider test dependencies of imported packages,\n# including packages imported from tests.\ncp go.mod.empty go.mod\ngo get -t m/b\n! grep rsc.io/quote go.mod\n\n# 'go get -t -u' should update test dependencies of the named package.\ncp go.mod.empty go.mod\ngo mod edit -require=rsc.io/quote@v1.5.1\ngo get -t -u m/a\ngrep 'rsc.io/quote v1.5.2$' go.mod\n\n# 'go get -t -u' should not add or update test dependencies\n# of imported packages, including packages imported from tests.\ncp go.mod.empty go.mod\ngo get -t -u m/b\n! grep rsc.io/quote go.mod\ngo mod edit -require=rsc.io/quote@v1.5.1\ngo get -t -u m/b\ngrep 'rsc.io/quote v1.5.1$' go.mod\n\n# 'go get all' should consider test dependencies with or without -t.\ncp go.mod.empty go.mod\ngo get all\ngrep 'rsc.io/quote v1.5.2$' go.mod\n```\n\n----------------------------------------\n\nTITLE: Go Environment Check\nDESCRIPTION: Checks go environment variables and verifies GOPATH warning message\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_issue46807.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo env\nstdout 'GOPATH='\nstderr '^go: warning: ignoring go.mod in \\$GOPATH'\n```\n\n----------------------------------------\n\nTITLE: Checking Toolchain Install Location\nDESCRIPTION: Test cases to verify that toolchain components (e.g., cmd/fix) are installed to GOROOT/pkg, not affected by GOPATH or GOBIN settings.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_install.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nenv GOPATH=$PWD\ngo list -f '{{.Target}}' cmd/fix\nstdout $GOROOT'[/\\\\]pkg[/\\\\]tool[/\\\\]'$GOOS'_'$GOARCH'[/\\\\]fix'$GOEXE'$'\n\nenv GOBIN=$WORK/bin1\ngo list -f '{{.Target}}' cmd/fix\nstdout $GOROOT'[/\\\\]pkg[/\\\\]tool[/\\\\]'$GOOS'_'$GOARCH'[/\\\\]fix'$GOEXE'$'\n```\n\n----------------------------------------\n\nTITLE: Creating Version Sequence for v2.x\nDESCRIPTION: Creates a series of commits and tags for v2 versions from v2.0.0 to v2.5.5, following the same pattern of creating commits before and at each version point with appropriate tags.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/querytest.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nat 2018-07-03T22:51:14-04:00\necho 'before v2.0.0'\ncp stdout status\ngit add status\ngit commit -a -m 'before v2.0.0'\n\nat 2018-07-03T22:51:14-04:00\necho 'at v2.0.0'\ncp stdout status\ngit commit -a -m 'at v2.0.0'\ngit tag 'v2.0.0'\n\nat 2018-07-03T22:51:14-04:00\necho 'before v2.1.0'\ncp stdout status\ngit commit -a -m 'before v2.1.0'\n\nat 2018-07-03T22:51:14-04:00\necho 'at v2.1.0'\ncp stdout status\ngit commit -a -m 'at v2.1.0'\ngit tag 'v2.1.0'\n\nat 2018-07-03T22:51:14-04:00\necho 'before v2.2.0'\ncp stdout status\ngit commit -a -m 'before v2.2.0'\n\nat 2018-07-03T22:51:14-04:00\necho 'at v2.2.0'\ncp stdout status\ngit commit -a -m 'at v2.2.0'\ngit tag 'v2.2.0'\n\nat 2018-07-03T22:51:14-04:00\necho 'before v2.5.5'\ncp stdout status\ngit commit -a -m 'before v2.5.5'\n\nat 2018-07-03T22:51:14-04:00\necho 'at v2.5.5'\ncp stdout status\ngit commit -a -m 'at v2.5.5'\ngit tag 'v2.5.5'\n\nat 2018-07-03T23:35:18-04:00\necho 'after v2.5.5'\ncp stdout status\ngit commit -a -m 'after v2.5.5'\n```\n\n----------------------------------------\n\nTITLE: Declaring Constants and Functions in Go\nDESCRIPTION: The snippet provides details about function signatures and constant declarations across different Go packages, mainly focusing on system calls for FreeBSD and OpenBSD. Dependencies include the respective Go packages such as 'testing', 'text/scanner', 'text/template/parse', and 'syscall'. The constants are mainly integral values representing system-level syscalls, while function signatures describe method contracts for packages like 'testing'. Inputs and outputs vary by package and context.\nSOURCE: https://github.com/golang/go/blob/master/api/except.txt#2025-04-22_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\npkg testing, func MainStart(func(string, string) (bool, error), []InternalTest, []InternalBenchmark, []InternalExample) *M\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg testing, func MainStart(testDeps, []InternalTest, []InternalBenchmark, []InternalExample) *M\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg testing, func RegisterCover(Cover)\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg text/scanner, const GoTokens = 1012\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg text/template/parse, type DotNode bool\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg text/template/parse, type Node interface { Copy, String, Type }\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg unicode, const Version = \\\"10.0.0\\\"\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg unicode, const Version = \\\"11.0.0\\\"\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg unicode, const Version = \\\"12.0.0\\\"\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg unicode, const Version = \\\"13.0.0\\\"\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg unicode, const Version = \\\"6.2.0\\\"\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg unicode, const Version = \\\"6.3.0\\\"\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg unicode, const Version = \\\"7.0.0\\\"\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg unicode, const Version = \\\"8.0.0\\\"\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg unicode, const Version = \\\"9.0.0\\\"\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg html/template, method (*Template) Funcs(FuncMap) *Template\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg html/template, type FuncMap map[string]interface{}\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-386), const SYS_FSTAT = 189\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-386), const SYS_FSTATAT = 493\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-386), const SYS_FSTATFS = 397\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-386), const SYS_GETDIRENTRIES = 196\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-386), const SYS_GETFSSTAT = 395\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-386), const SYS_LSTAT = 190\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-386), const SYS_LSTAT ideal-int\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-386), const SYS_MKNODAT = 498\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-386), const SYS_STAT = 188\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-386), const SYS_STAT ideal-int\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-386), const SYS_STATFS = 396\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-386-cgo), const SYS_FSTAT = 189\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-386-cgo), const SYS_FSTATAT = 493\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-386-cgo), const SYS_FSTATFS = 397\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-386-cgo), const SYS_GETDIRENTRIES = 196\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-386-cgo), const SYS_GETFSSTAT = 395\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-386-cgo), const SYS_LSTAT = 190\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-386-cgo), const SYS_LSTAT ideal-int\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-386-cgo), const SYS_MKNODAT = 498\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-386-cgo), const SYS_STAT = 188\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-386-cgo), const SYS_STAT ideal-int\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-386-cgo), const SYS_STATFS = 396\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-amd64), const SYS_FSTAT = 189\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-amd64), const SYS_FSTATAT = 493\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-amd64), const SYS_FSTATFS = 397\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-amd64), const SYS_GETDIRENTRIES = 196\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-amd64), const SYS_GETFSSTAT = 395\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-amd64), const SYS_LSTAT = 190\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-amd64), const SYS_LSTAT ideal-int\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-amd64), const SYS_MKNODAT = 498\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-amd64), const SYS_STAT = 188\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-amd64), const SYS_STAT ideal-int\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-amd64), const SYS_STATFS = 396\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-amd64-cgo), const SYS_FSTAT = 189\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-amd64-cgo), const SYS_FSTATAT = 493\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-amd64-cgo), const SYS_FSTATFS = 397\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-amd64-cgo), const SYS_GETDIRENTRIES = 196\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-amd64-cgo), const SYS_GETFSSTAT = 395\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-amd64-cgo), const SYS_LSTAT = 190\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-amd64-cgo), const SYS_LSTAT ideal-int\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-amd64-cgo), const SYS_MKNODAT = 498\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-amd64-cgo), const SYS_STAT = 188\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-amd64-cgo), const SYS_STAT ideal-int\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-amd64-cgo), const SYS_STATFS = 396\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm), const SYS_FSTAT = 189\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm), const SYS_FSTATAT = 493\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm), const SYS_FSTATFS = 397\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm), const SYS_GETDIRENTRIES = 196\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm), const SYS_GETFSSTAT = 395\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm), const SYS_LSTAT = 190\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm), const SYS_LSTAT ideal-int\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm), const SYS_MKNODAT = 498\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm), const SYS_STAT = 188\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm), const SYS_STAT ideal-int\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm), const SYS_STATFS = 396\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm-cgo), const SYS_FSTAT = 189\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm-cgo), const SYS_FSTATAT = 493\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm-cgo), const SYS_FSTATFS = 397\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm-cgo), const SYS_GETDIRENTRIES = 196\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm-cgo), const SYS_GETFSSTAT = 395\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm-cgo), const SYS_LSTAT = 190\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm-cgo), const SYS_LSTAT ideal-int\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm-cgo), const SYS_MKNODAT = 498\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm-cgo), const SYS_STAT = 188\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm-cgo), const SYS_STAT ideal-int\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm-cgo), const SYS_STATFS = 396\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm64), const SYS_FSTAT = 189\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm64), const SYS_FSTATAT = 493\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm64), const SYS_FSTATFS = 397\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm64), const SYS_GETDIRENTRIES = 196\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm64), const SYS_GETFSSTAT = 395\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm64), const SYS_LSTAT = 190\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm64), const SYS_LSTAT ideal-int\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm64), const SYS_MKNODAT = 498\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm64), const SYS_STAT = 188\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm64), const SYS_STAT ideal-int\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm64), const SYS_STATFS = 396\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm64-cgo), const SYS_FSTAT = 189\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm64-cgo), const SYS_FSTATAT = 493\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm64-cgo), const SYS_FSTATFS = 397\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm64-cgo), const SYS_GETDIRENTRIES = 196\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm64-cgo), const SYS_GETFSSTAT = 395\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm64-cgo), const SYS_LSTAT = 190\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm64-cgo), const SYS_LSTAT ideal-int\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm64-cgo), const SYS_MKNODAT = 498\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm64-cgo), const SYS_STAT = 188\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm64-cgo), const SYS_STAT ideal-int\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-arm64-cgo), const SYS_STATFS = 396\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (openbsd-386), const ELAST = 91\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (openbsd-386-cgo), const ELAST = 91\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (openbsd-amd64), const ELAST = 91\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (openbsd-amd64-cgo), const ELAST = 91\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Module Dependencies and Replacements in Go\nDESCRIPTION: This go.mod file defines the main module's dependencies and uses the 'replace' directive to specify local paths for different versions of dependent modules. It sets up a complex dependency structure for testing purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue60490.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule example\n\ngo 1.19\n\nrequire (\n\texample.net/a v0.1.0\n\texample.net/b v0.1.0\n)\n\nreplace (\n\texample.net/a v0.1.0 => ./a1\n\texample.net/a v0.2.0 => ./a2\n\texample.net/b v0.1.0 => ./b1\n\texample.net/b v0.2.0 => ./b2\n\texample.net/c v0.1.0 => ./c1\n)\n```\n\n----------------------------------------\n\nTITLE: Running Go Benchmark with Pattern Matching\nDESCRIPTION: Shell command for running Go benchmarks with a pattern that intentionally matches no benchmarks. Shows expected output validation with no matching tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_no_benchmarks.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo test -run '^$' -bench ThisWillNotMatch standalone_benchmark_test.go\n! stdout '^ok.*\\[no tests to run\\]'\n! stderr '^ok.*\\[no tests to run\\]'\nstdout '^ok'\n```\n\n----------------------------------------\n\nTITLE: Test-Only Package Implementation in Go\nDESCRIPTION: Package 'onlytest' that contains only a test file with a simple test function that logs a message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_multipkg.txt#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\npackage onlytest\n\nimport \"testing\"\n\nfunc TestFoo(t *testing.T) {\n\tt.Logf(\"Whee\\n\")\n}\n```\n\n----------------------------------------\n\nTITLE: Module C Definition\nDESCRIPTION: Module definition for example.com/c with no dependencies, representing the leaf module in the dependency chain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_downgrade.txt#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/c\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: Go Module Download Error Case Tests\nDESCRIPTION: Test cases for handling various error conditions in module downloads including non-existent versions and invalid paths\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/reuse_git.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n! go mod download -x -json vcs-test.golang.org/git/hello.git/v9@latest\n! go mod download -x -json vcs-test.golang.org/git/hello.git/sub/v9@latest\n! go mod download -x -json vcs-test.golang.org/git/hello.git@nonexist\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition with Version Retraction\nDESCRIPTION: Module definition file declaring the module path, Go version requirement, and version retraction directive.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_cmd_v1.9.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/cmd\n\ngo 1.16\n\n// this is a bad version\nretract v1.9.0\n```\n\n----------------------------------------\n\nTITLE: Verifying `go list` Accepts Package Paths with '+' (Shell)\nDESCRIPTION: This shell snippet tests if the `go list` command correctly handles package paths containing the '+' character. It first restores the main `go.mod` file, fetches a dependency, and then lists a specific package (`example.net/cmd/x++`) which resides within a valid module but has a '+' in its path.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_path_plus.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# 'go list' accepts package paths with pluses.\ncp go.mod.orig go.mod\ngo get example.net/cmd\ngo list example.net/cmd/x++\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Dependencies and Replacements\nDESCRIPTION: This go.mod file defines the module, its Go version requirement, and specifies dependencies and replacements for 'printversion' and 'version' modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_replace.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule golang.org/issue/37392\ngo 1.14\nrequire (\n\texample.com/printversion v0.1.0\n)\nreplace (\n\texample.com/printversion => example.com/printversion v1.0.0\n\texample.com/version v1.0.0 => example.com/version v1.0.1\n)\n```\n\n----------------------------------------\n\nTITLE: Empty Test File in pkg2 - Go\nDESCRIPTION: This is an intentionally empty test file for package 'pkg2', demonstrating a package without tests. The absence of test functions is key to verifying no-coverage and 'no tests to run' messages in test output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_statements.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage pkg2\n```\n\n----------------------------------------\n\nTITLE: Defining Module 'a' Version 0.1.0 in Go\nDESCRIPTION: This go.mod file defines the module 'example.net/a' version 0.1.0 without any dependencies. It's part of the test setup for dependency resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue60490.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/a\n\ngo 1.19\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Security Protocol Fallback Behavior\nDESCRIPTION: A regression test for issue #63845 that verifies the Go toolchain doesn't fall back to insecure protocols when secure protocols fail. The test sets environment variables to prevent network access and checks error messages for expected protocol attempts.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_insecure_issue63845.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n[!net:golang.org] skip\n[!git] skip\n[short] skip 'tries to access a nonexistent external Git repo'\n\nenv GOPRIVATE=golang.org\nenv CURLOPT_TIMEOUT_MS=100\nenv GIT_SSH_COMMAND=false\n\n! go get -x golang.org/nonexist.git@latest\nstderr '^git ls-remote https://golang.org/nonexist$'\nstderr '^git ls-remote git\\+ssh://golang.org/nonexist'\nstderr '^git ls-remote ssh://golang.org/nonexist$'\n! stderr 'git://'\nstderr '^go: golang.org/nonexist.git@latest: no secure protocol found for repository$'\n```\n\n----------------------------------------\n\nTITLE: Testing `go tool cgo` within Symlinked Newline Paths in Shell\nDESCRIPTION: Executes `go tool cgo main.go` while the current directory is the symlink (`$WORK/link`). It expects the command to succeed and uses `grep` to verify that the generated CGO file (`_obj/main.cgo1.go`) contains line directives referencing the symlink path (`link/main.go`) and not the original problematic path (`! grep 'uh-oh'`). Conditional execution (`[cgo]`) ensures this only runs if CGO is enabled.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cwd_newline.txt#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n[cgo] go tool cgo main.go\n[cgo] grep '//line .*'${/}'link'${/}'main\\.go:1:1' _obj/main.cgo1.go\n[cgo] ! grep 'uh-oh' _obj/main.cgo1.go\n```\n\n----------------------------------------\n\nTITLE: Main Package Using Upgraded Modules\nDESCRIPTION: Defines a Go package that imports the upgraded modules for testing purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_update_unrelated_sum.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage use\n\nimport (\n\t_ \"example.com/upgrade\"\n\t_ \"rsc.io/quote\"\n)\n```\n\n----------------------------------------\n\nTITLE: Checking Version Metadata After Additional Commit and Update\nDESCRIPTION: This snippet adds another commit and then reverts to a previous state to ensure that the VCS info reflects the checked-out revision, not the latest. Checks the go version -m output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_hg.txt#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ncp ../../outside/empty.txt .\nexec hg ci -Am 'another commit' --user test-user --date '2024-08-01T19:24:38+00:00'\nexec hg update --clean -r '.^'\n\n# Modified state is not thrown off by extra status output\nexec hg bisect -v -g .\nexec hg bisect -v -b '.^^'\nexec hg status\nstdout '^.+'\ngo install\ngo version -m $GOBIN/a$GOEXE\nstdout '^\\tbuild\\tvcs.revision=eae91df98b5dd3c4451accf64c683ddc3edff6a9$'\nstdout '^\\tbuild\\tvcs.time=2024-07-31T01:21:27Z$'\nstdout '^\\tbuild\\tvcs.modified=false$'\nstdout '\\s+mod\\s+example.com/a\\s+v1.2.3\\s+'\nrm $GOBIN/a$GOEXE\n```\n\n----------------------------------------\n\nTITLE: Defining a Package in Invalid Module Path in Golang\nDESCRIPTION: This code snippet defines a Go package within a module located in a path known to be potentially invalid to test behavior under such conditions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_path.txt#2025-04-22_snippet_5\n\nLANGUAGE: Golang\nCODE:\n```\n-- m'd/foo.go --\npackage mad\n```\n\n----------------------------------------\n\nTITLE: Testing Build Error in Imported Package (Go)\nDESCRIPTION: This snippet tests a build error in an imported package. It verifies that the error is attributed to the correct package in the JSON output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_build.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n! go test -json -o=$devnull ./builderror2\nstdout '\"ImportPath\":\"m/builderror2/x\",\"Action\":\"build-output\",\"Output\":\"# m/builderror2/x\\\\n\"'\nstdout '\"ImportPath\":\"m/builderror2/x\",\"Action\":\"build-output\",\"Output\":\"builderror2(/|\\\\\\\\)x(/|\\\\\\\\)main.go:3:11: undefined: y\\\\n\"'\nstdout '\"ImportPath\":\"m/builderror2/x\",\"Action\":\"build-fail\"'\nstdout '\"Action\":\"start\",\"Package\":\"m/builderror2\"'\nstdout '\"Action\":\"output\",\"Package\":\"m/builderror2\",\"Output\":\"FAIL\\\\tm/builderror2 \\[build failed\\]\\\\n\"'\nstdout '\"Action\":\"fail\",\"Package\":\"m/builderror2\",\"Elapsed\":.*,\"FailedBuild\":\"m/builderror2/x\"'\n! stderr '.'\n```\n\n----------------------------------------\n\nTITLE: Long Module Implementation\nDESCRIPTION: Implements a simple package for the 'long' module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_deprecate_message.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\npackage long\n```\n\n----------------------------------------\n\nTITLE: Testing Beginning-of-Line Anchor Matching\nDESCRIPTION: Tests patterns with beginning-of-line anchors (^abc) against various strings. Shows how leading anchors affect match positions with different pattern configurations.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_37\n\nLANGUAGE: go\nCODE:\n```\n\"^abc\"\n-;-;-;-\n-;0-3;-;0-3\n\"^(?:^abc)$\"\n-;-;-;-\n-;-;-;-\n\"^(?:^abc)\"\n-;-;-;-\n-;0-3;-;0-3\n\"(?:^abc)$\"\n-;-;-;-\n-;-;-;-\n```\n\n----------------------------------------\n\nTITLE: Go Module W Implementation\nDESCRIPTION: Module W with test file that imports module X. Includes go.mod file with dependency on module X v1.0.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune_all.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/w\n\ngo 1.18\n\nrequire example.com/x v1.0.0\n```\n\nLANGUAGE: go\nCODE:\n```\npackage w\n```\n\nLANGUAGE: go\nCODE:\n```\npackage w\n\nimport _ \"example.com/x\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Module Version Metadata in JSON\nDESCRIPTION: This JSON snippet from a `.info` file provides metadata about a specific module version. It includes the 'Version' identifier ('v0.0.0-20190619020302-197a620e0c9a') and the 'Time' the version was created ('2019-06-18T19:03:02-07:00'). This is often used by Go tooling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/github.com_dmitshur-test_modtest5_v0.0.0-20190619020302-197a620e0c9a.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n-- .info --\n{\"Version\":\"v0.0.0-20190619020302-197a620e0c9a\",\"Time\":\"2019-06-18T19:03:02-07:00\"}\n```\n\n----------------------------------------\n\nTITLE: Deprecations in runtime package\nDESCRIPTION: Lists deprecated function in the runtime package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_29\n\nLANGUAGE: Go\nCODE:\n```\npkg runtime, func CPUProfile //deprecated\n```\n\n----------------------------------------\n\nTITLE: Vendored Strings Package\nDESCRIPTION: Custom strings package implementation placed in vendor directory with a Msg variable.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_vendor.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage strings\n\nvar Msg = \"hello, world\"\n```\n\n----------------------------------------\n\nTITLE: Go File with Tag2 Build Constraint\nDESCRIPTION: A Go file (y.go) that uses the 'tag2' build constraint. This file will only be included in the build when 'tag2' is specified.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_tags.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n// +build tag2\n\npackage y\n```\n\n----------------------------------------\n\nTITLE: Supporting Module Definitions\nDESCRIPTION: Basic module definitions for supporting modules c, d, and e.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_artifact.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/c\n\ngo 1.16\npackage c\n```\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/d\n\ngo 1.16\npackage d\n```\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/e\n\ngo 1.16\npackage e\n```\n\n----------------------------------------\n\nTITLE: Untidy Go Module Definition\nDESCRIPTION: Module definition missing direct dependencies but containing indirect ones\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_readonly.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.16\n\nrequire (\n\trsc.io/sampler v1.3.0 // indirect\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Go Module\nDESCRIPTION: Defines a Go module named 'example.com/cov', essential for organizing the package and managing its dependencies when GO111MODULE is on.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_pkgall_multiple_mains.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/cov\n```\n\n----------------------------------------\n\nTITLE: Declaring a Go Module using .mod file - Golang - go\nDESCRIPTION: This snippet defines a Go module using a .mod file, specifying the module path and Go version. No external dependencies are listed, but the structure follows standard Go module initiation. Required fields are the 'module' name and the 'go' version, which establish the root for the module hierarchy. Inputs are the module path and Go version, with the output being the module's basic configuration for use by Go tools.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_ambiguous_v0.2.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/ambiguous\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Minimal go.mod for Directory Replacement (a) - Go\nDESCRIPTION: This go.mod resides in a directory named 'a' and defines the module example.com/deprecated/a, targeting Go 1.17. It is meant for use in a directory-based replacement configuration. No external dependencies or replacements are specified.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_deprecated_replace.txt#2025-04-22_snippet_6\n\nLANGUAGE: go.mod\nCODE:\n```\nmodule example.com/deprecated/a\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: Importing Dependency in Module 'c' Version 1\nDESCRIPTION: This Go file for module 'c' version 1 imports dependency 'b' as a blank import.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_pseudo_artifact.txt#2025-04-22_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\npackage c\n\nimport _ \"example.net/b\"\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module\nDESCRIPTION: Defines a Go module named 'example.com/pkg' using Go version 1.17.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_trimpath.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/pkg\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module for Syntax Error Test\nDESCRIPTION: This Go module definition sets up a module named 'syntaxerror' using Go 1.16. It's part of the test setup to demonstrate build failure behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_no_tests_build_failure.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule syntaxerror\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Testing Package b with b_test\nDESCRIPTION: This snippet defines the package 'b_test' for testing purposes and showcases cyclic import with package 'a'. This Go test file imports package 'a' as a dependency to run tests on package 'b'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_test_imports.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage b_test; import _ \"a\"\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Dependencies for a Subpackage\nDESCRIPTION: This Go module file (`go.mod`) declares the module path `example.com/join/subpkg` and specifies a direct dependency on the parent module `example.com/join` at version `v1.1.0`. This setup is common in test scenarios where a subpackage needs to import and utilize code from its containing module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_join_subpkg_v1.1.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n-- .mod --\nmodule example.com/join/subpkg\n\nrequire example.com/join v1.1.0\n```\n\n----------------------------------------\n\nTITLE: System Constants Definition - NetBSD ARM64\nDESCRIPTION: Defines system constants for Berkeley Packet Filter (BPF) operations, clone flags, terminal control flags, and network control parameters specific to NetBSD on ARM64 architecture.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_118\n\nLANGUAGE: Go\nCODE:\n```\nconst (\n    BPF_TAX = 0\n    BPF_TXA = 128\n    BPF_W = 0\n    BPF_X = 8\n    BRKINT = 2\n    CFLUSH = 15\n    CLOCAL = 32768\n    CLONE_CSIGNAL = 255\n    CLONE_FILES = 1024\n    CLONE_FS = 512\n    CLONE_PID = 4096\n    CLONE_PTRACE = 8192\n    CLONE_SIGHAND = 2048\n    CLONE_VFORK = 16384\n    CLONE_VM = 256\n)\n```\n\n----------------------------------------\n\nTITLE: Running Go Test Command with Coverage Pattern\nDESCRIPTION: This shell script tests the Go test command's behavior with the -coverpkg flag using a package pattern. It verifies that the command uses pattern matching rather than package loading, which would otherwise fail when encountering the invalid 'sleepybad' package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_pattern.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n! go list m/sleepy...\ngo test -c -n -coverprofile=$TMPDIR/cover.out -coverpkg=m/sleepy... -run=^$ m/sleepy1\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Go Build Test\nDESCRIPTION: This snippet sets the GO111MODULE environment variable to 'off' and defines a new GOCACHE directory. The GO111MODULE variable being set to 'off' disables module mode. The GOCACHE is set to a dedicated directory for the test to ensure consistent and isolated caching behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_compile.txt#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GO111MODULE=off\n[short] skip\n\n# Set up fresh GOCACHE.\nenv GOCACHE=$WORK/gocache\nmkdir $GOCACHE\n```\n\n----------------------------------------\n\nTITLE: Defining Test Dependency Package 'x/fromotherroottest' (Go)\nDESCRIPTION: Defines the empty package `x/fromotherroottest` within the `x` module. This package is imported only by the tests of package `x/otherroot` (`x/otherroot/otherroot_test.go`) and is used to test the `-test` flag's behavior with explicitly listed root packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_notall.txt#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n-- x/fromotherroottest/fromotherroottest.go --\npackage fromotherroottest\n```\n\n----------------------------------------\n\nTITLE: Declaring an Unconditional Package - Go\nDESCRIPTION: This Go file declares an empty package p with no build tags or imports. It is always included in builds and serves as a baseline file when testing go list output. There are no dependencies and no exported symbols. Input/Output: none. Limitation: only defines the package statement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_constraints.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\n```\n\n----------------------------------------\n\nTITLE: Testing explicit -mod=vendor flag behavior\nDESCRIPTION: Verifies that using -mod=vendor forces the use of the vendor directory and prevents 'all' computation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_auto.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nenv GOFLAGS=-mod=vendor\n\ngo list -f {{.Dir}} -tags tools -e all\nstdout '^'$WORK'[/\\\\]auto$'\nstdout '^'$WORK'[/\\\\]auto[/\\\\]vendor[/\\\\]example.com[/\\\\]printversion$'\nstdout '^'$WORK'[/\\\\]auto[/\\\\]vendor[/\\\\]example.com[/\\\\]version$'\n\n! go list -m all\nstderr 'go: can''t compute ''all'' using the vendor directory\\n\\t(Use -mod=mod or -mod=readonly to bypass.)'\n\n! go list -m -f '{{.Dir}}' all\nstderr 'go: can''t compute ''all'' using the vendor directory\\n\\t(Use -mod=mod or -mod=readonly to bypass.)'\n```\n\n----------------------------------------\n\nTITLE: Defining Signal Constants in Go for NetBSD ARM64\nDESCRIPTION: This snippet defines constants for various signal types used in the NetBSD ARM64 syscall package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_144\n\nLANGUAGE: Go\nCODE:\n```\nconst (\n    SIGBUS = 10\n    SIGCHLD Signal = 20\n    SIGCONT Signal = 19\n    SIGEMT Signal = 7\n    SIGINFO Signal = 29\n    SIGIO Signal = 23\n    SIGIOT Signal = 6\n    SIGPROF Signal = 27\n    SIGPWR Signal = 32\n    SIGSTOP Signal = 17\n    SIGSYS Signal = 12\n    SIGTSTP Signal = 18\n    SIGTTIN Signal = 21\n    SIGTTOU Signal = 22\n    SIGURG Signal = 16\n    SIGUSR1 Signal = 30\n    SIGUSR2 Signal = 31\n    SIGVTALRM Signal = 26\n    SIGWINCH Signal = 28\n    SIGXCPU Signal = 24\n    SIGXFSZ Signal = 25\n)\n```\n\n----------------------------------------\n\nTITLE: Downloading Go Modules from proxy.golang.org\nDESCRIPTION: This snippet tests downloading Go modules from proxy.golang.org. It cleans the module cache, sets GOPROXY to use the proxy, and then uses 'go list' commands to download module files and source code.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_golang.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo clean -modcache\nenv GOSUMDB=sum.golang.org\nenv GOPROXY=https://proxy.golang.org,direct\n\ngo list -x -m all  # Download go.mod files.\ngo list -x -deps rsc.io/quote  # Download module source.\n\ncmp go.sum saved.sum\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Test Caching using gocachetest GODEBUG Setting (Go 1.10)\nDESCRIPTION: Introduced in Go 1.10 alongside build and test caching. This setting controls whether the Go command caches test results. The default is 1 (enabled). Setting gocachetest=0 disables test result caching. Set via GODEBUG environment variable (e.g., GODEBUG=gocachetest=0).\nSOURCE: https://github.com/golang/go/blob/master/doc/godebug.md#2025-04-22_snippet_29\n\nLANGUAGE: plaintext\nCODE:\n```\ngocachetest\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests With and Without the -fullpath Flag\nDESCRIPTION: Shell commands demonstrating the difference in output format when running Go tests with and without the -fullpath flag. With -fullpath, the full filesystem path to the failing test is shown, while without it only the base filename is displayed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fullpath.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# test with -fullpath\n! go test ./x/... -fullpath\nstdout '^ +.+/gopath/src/x/fullpath/fullpath_test.go:8: test failed'\n# test without -fullpath\n! go test ./x/...\nstdout '^ +fullpath_test.go:8: test failed'\n```\n\n----------------------------------------\n\nTITLE: Simulating Unused gofmt Tool - gofmt - Shell\nDESCRIPTION: Defines a shell script that prints a message indicating it is unused. This script acts as a stub for the gofmt command, providing a placeholder in the toolchain directory structure. No dependencies or parameters are required; execution results in outputting an informational string.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.android-arm64.txt#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: RSA Key Test Data in Hexadecimal Format\nDESCRIPTION: Long sequence of hexadecimal strings representing RSA cryptographic key data and test vectors. Used for validating and benchmarking RSA key generation implementations.\nSOURCE: https://github.com/golang/go/blob/master/src/crypto/rsa/testdata/keygen2048.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nc3280c027a24d6e2277d1227e4531c1ee765bda9d304bfe7a59519bf2686fd5435c5e5a1200b74cba47c49f444e89b0e0991d05824119ee9dee73e4bd6ce3e93a10604239677fd0b735438b2360d0da9e6e929e1c564df0f0287eb0804cb9dba824a53156098ce8c8efdb8197d12ac040baef4e90710670aa7a33d9a0cd0c62d...\n```\n\n----------------------------------------\n\nTITLE: Testing Go Run Commands for Non-Main Packages\nDESCRIPTION: This snippet demonstrates various test cases for running Go packages, specifically showing the behavior when attempting to run non-main packages. It includes error messages for different scenarios.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_run_nonmain.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n! go run $PWD\n! stderr 'no packages loaded'\nstderr '^package example.net/nonmain is not a main package$'\n\n! go run .\nstderr '^package example.net/nonmain is not a main package$'\n\n! go run ./...\nstderr '^go: warning: \"\\./\\.\\.\\.\" matched only non-main packages$'\nstderr '^go: no packages loaded from \\./\\.\\.\\.'\n```\n\n----------------------------------------\n\nTITLE: Submodule Definition File\nDESCRIPTION: Go module definition for a submodule named 'example/bar/baz' that requires Go 1.18.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_dot.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule example/bar/baz\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Go module definition for example code\nDESCRIPTION: Defines a Go module named example.com/foo with Go 1.23 as the required version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_buildinfo_godebug_issue68053.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/foo\n\ngo 1.23\n```\n\n----------------------------------------\n\nTITLE: Raw Text Input Format\nDESCRIPTION: Shows raw text input with mixed bullet point styles and varying indentation levels.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nText.\n- Not a list.\n - Here is the list.\n     • Using multiple bullets.\n          * Indentation does not matter.\n     + Lots of bullets.\nMore text.\n```\n\n----------------------------------------\n\nTITLE: Storing Go Module Version Metadata in JSON\nDESCRIPTION: This JSON object represents the metadata for a specific version of the Go module, as typically stored in a `.info` file by the Go module proxy. It includes the precise pseudo-version string (`v0.5.0-alpha.0.20190619023908-3da23a9deb9e`) and the corresponding commit time.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/github.com_dmitshur-test_modtest5_v0.5.0-alpha.0.20190619023908-3da23a9deb9e.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.5.0-alpha.0.20190619023908-3da23a9deb9e\",\"Time\":\"2019-06-18T19:39:08-07:00\"}\n```\n\n----------------------------------------\n\nTITLE: Checksum Configuration\nDESCRIPTION: Checksum files containing dependency verification information for the external packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sum.txt#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ngolang.org/x/text v0.0.0-20170915032832-14c0d48ead0c h1:pvCbr/wm8HzDD3fVywevekufpn6tCGPY3spdHeZJEsw=\ngolang.org/x/text v0.0.0-20170915032832-14c0d48ead0c/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\nrsc.io/quote v1.5.2 h1:3fEykkD9k7lYzXqCYrwGAf7iNhbk4yCjHmKBN9td4L0=\nrsc.io/quote v1.5.2/go.mod h1:LzX7hefJvL54yjefDEDHNONDjII0t9xZLPXsUe+TKr0=\n```\n\n----------------------------------------\n\nTITLE: File Descriptor and Pipe Functions in syscall Package for NetBSD ARM64\nDESCRIPTION: These functions provide operations for managing file descriptors and creating pipes for interprocess communication. They include functions for duplicating descriptors and configuring their behavior.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_82\n\nLANGUAGE: Go\nCODE:\n```\nfunc Pipe([]int) error\nfunc Pipe2([]int, int) error\nfunc SetNonblock(int, bool) error\nfunc Select(int, *FdSet, *FdSet, *FdSet, *Timeval) error\nfunc Mkfifo(string, uint32) error\nfunc Mknod(string, uint32, int) error\nfunc Unmount(string, int) error\nfunc Sendfile(int, int, *int64, int) (int, error)\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines a Go module named 'cgocover3' with Go 1.16 as the required version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_cgo_extra_test.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule cgocover3\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: This snippet demonstrates the structure of a Go module definition file (go.mod) for the 'example.com/a' module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/a\n```\n\n----------------------------------------\n\nTITLE: Defining Process Priority Constants in Go for Darwin ARM64 CGO\nDESCRIPTION: This snippet defines constants for process priority levels used in system calls on Darwin ARM64 with CGO. These constants are used to set or get process priorities.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_169\n\nLANGUAGE: Go\nCODE:\n```\nconst PRIO_PGRP = 1\nconst PRIO_PGRP ideal-int\nconst PRIO_PROCESS = 0\nconst PRIO_PROCESS ideal-int\nconst PRIO_USER = 2\nconst PRIO_USER ideal-int\n```\n\n----------------------------------------\n\nTITLE: Example module go.mod.final file\nDESCRIPTION: Expected final state of the go.mod file after toolchain upgrade. It has updated the Go version to 1.23 and added a requirement for the rsc.io/needall module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_exec_toolchain.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nmodule example\n\ngo 1.23\n\nrequire rsc.io/needall v0.0.1\n\n```\n\n----------------------------------------\n\nTITLE: Nested Package Implementation\nDESCRIPTION: Implementation file for the nested package containing package declaration.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_split.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage nested\n```\n\n----------------------------------------\n\nTITLE: Main Go File\nDESCRIPTION: Empty main package definition for testing purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_commandline.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n```\n\n----------------------------------------\n\nTITLE: Defining Empty go.mod for i Module - mod\nDESCRIPTION: This file marks the presence of the i module by providing a go.mod file without content. Its primary function is to allow the module to be referenced via require statements and imports within the dependency graph. It does not declare dependencies or configurations, only the module's existence.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect.txt#2025-04-22_snippet_11\n\nLANGUAGE: mod\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Example Module Configuration\nDESCRIPTION: Configuration and implementation for the dotless 'example' module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_replaced.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example\ngo 1.16\n```\n\nLANGUAGE: go\nCODE:\n```\npackage example\n```\n\n----------------------------------------\n\nTITLE: Declaring Go Toolchain Module Path in .mod File\nDESCRIPTION: This snippet represents the content of a `.mod` file, likely residing within the Go module cache ($GOPATH/pkg/mod/cache/download/golang.org/toolchain/@v) or similar tooling structure. It simply declares the canonical module path `golang.org/toolchain`, identifying the module associated with the toolchain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.22rc1.linux-amd64.txt#2025-04-22_snippet_1\n\nLANGUAGE: go.mod\nCODE:\n```\ngolang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Module for Image Package\nDESCRIPTION: Defines a Go module named 'image' and a basic main program that prints 'hello world!'. This snippet establishes the module and provides a simple entry point. It requires module initialization via 'go mod init'. The main.go file serves as the executable entry of the module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_issue35270.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule image\n```\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nfunc main() {\n    println(\"hello world!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Go Module (go.mod) - Go - none\nDESCRIPTION: This snippet is the go.mod file declaring the module path for Go's dependency management. It acts as the root declaration of the module, critical for Go tooling operations. There are no parameters, outputs, or dependencies besides being a required config for Go modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.freebsd-riscv64.txt#2025-04-22_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Defining an Invalid Fuzz Target Function in Go\nDESCRIPTION: This code snippet demonstrates an incorrectly implemented fuzz test function that returns a value. Go's fuzzing framework requires that fuzz target functions do not return values, and this test case deliberately violates that requirement to demonstrate the validation error.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_return.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc Fuzz_returnErr(f *testing.F) {\n\tf.Add(\"hello, validation!\")\n\tf.Fuzz(func(t *testing.T, in string) string {\n\t\treturn in\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Terminal Control Constants in Go Syscall Package for Darwin ARM64\nDESCRIPTION: Terminal control constants used with terminal I/O operations. These constants are used for controlling terminal behavior such as character echoing and line processing when using terminal devices.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_145\n\nLANGUAGE: Go\nCODE:\n```\nconst ECHO = 8\nconst ECHO ideal-int\nconst ECHOCTL = 64\nconst ECHOCTL ideal-int\nconst ECHOE = 2\nconst ECHOE ideal-int\nconst ECHOK = 4\nconst ECHOK ideal-int\nconst ECHOKE = 1\nconst ECHOKE ideal-int\nconst ECHONL = 16\nconst ECHONL ideal-int\nconst ECHOPRT = 32\nconst ECHOPRT ideal-int\n```\n\n----------------------------------------\n\nTITLE: Testing GOPATH/pkg/mod exclusion with GO111MODULE=off\nDESCRIPTION: A shell script that tests if Go properly prevents access to packages in GOPATH/pkg/mod when modules are disabled. It sets GO111MODULE to off, attempts to list a package in mod/foo, and verifies that an error message about disallowed import paths is returned.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_mod.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Test that GOPATH/pkg/mod is excluded\nenv GO111MODULE=off\n! go list mod/foo\nstderr 'disallowed import path'\n```\n\n----------------------------------------\n\nTITLE: Testing Plugin Buildmode Requirements in Go\nDESCRIPTION: A test script that verifies plugin buildmode behavior in Go. It first attempts a normal build, then tries to build with the plugin buildmode, expecting it to fail with an error about requiring exactly one main package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_plugin_non_main.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Plugins are not supported on all platforms.\n[!buildmode:plugin] skip\n\ngo build -n testdep\n! go build -buildmode=plugin testdep\nstderr '-buildmode=plugin requires exactly one main package'\n```\n\n----------------------------------------\n\nTITLE: Executing Go Module Download Command (Shell)\nDESCRIPTION: Executes the `go mod download` command using the shell. This command attempts to download the module dependencies defined in the associated `go.mod` file. It's expected to fail and produce specific error output due to the module path mismatch configured in the test setup.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_replace_mismatch.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n! go mod download\n```\n\n----------------------------------------\n\nTITLE: Reusing Error Result for a Non-existent Module Version\nDESCRIPTION: This snippet reuses the error result of a previous metadata fetch for a non-existent module version using a JSON file. It demonstrates how persistent storage of error states aids debugging and analysis. It requires the JSON output of a prior execution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_issue61415.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo list -reuse=no-nested.json -json -m --versions -e vcs-test.golang.org/git/issue61415.git/nested@latest\n```\n\n----------------------------------------\n\nTITLE: Defining Sysctlnode Structure in Go for NetBSD ARM64\nDESCRIPTION: Definition of the Sysctlnode struct used for the sysctl interface in NetBSD. It contains fields for node name, number, flags, and various function pointers for sysctl operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_107\n\nLANGUAGE: Go\nCODE:\n```\ntype Sysctlnode struct {\n    Flags uint32\n    Num int32\n    Name [32]int8\n    Ver uint32\n    X__rsvd uint32\n    Un [16]uint8\n    X_sysctl_size [8]uint8\n    X_sysctl_func [8]uint8\n    X_sysctl_parent [8]uint8\n    X_sysctl_desc [8]uint8\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Setup and Conditional Execution in Shell\nDESCRIPTION: This shell script sets up the environment for running the Go module tests, specifically configuring environment variables, platform-specific skips, and file permissions. It is critical for ensuring the test only runs in compatible environments with the correct permissions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_permissions.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n\nenv GO111MODULE=on\n[short] skip\n\n# Skip platforms that do not have Unix-style file permissions.\n[GOOS:windows] skip\n[GOOS:plan9] skip\n\n```\n\n----------------------------------------\n\nTITLE: Testing Structured Logging Handlers - slogtest.Run - Go\nDESCRIPTION: Adds Run function to testing/slogtest, which takes a *testing.T plus two functions for generating a slog.Handler and key-value data, and runs a suite of structured logging tests. Used for verifying slog.Handler behaviors in tests.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_28\n\nLANGUAGE: Go\nCODE:\n```\nfunc Run(*testing.T, func(*testing.T) slog.Handler, func(*testing.T) map[string]interface{})\n```\n\n----------------------------------------\n\nTITLE: Defining Function in C Language\nDESCRIPTION: This snippet defines a simple C function returning the integer 42, intended to be used within Go code via cgo. It is part of an integration test to verify correct linking of syso files. The function must be compiled into a syso file using a C compiler.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_syso_issue29253.txt#2025-04-22_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n// +build ignore\n\nint f() { return 42; }\n```\n\n----------------------------------------\n\nTITLE: Defining Errors and Flags in Go\nDESCRIPTION: This section includes declarations relating to error handling and flag processing, specifically a generic unsupported error and methods for handling flags with custom functions. These snippets include the ErrUnsupported error variable and methods for handling flags using BoolFunc methods for enhanced input parsing capabilities.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.21.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npkg errors, var ErrUnsupported error #41198\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg flag, func BoolFunc(string, string, func(string) error) #53747\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg flag, method (*FlagSet) BoolFunc(string, string, func(string) error) #53747\n```\n\n----------------------------------------\n\nTITLE: Handling Branch History in Mercurial Repository\nDESCRIPTION: Updates to revision 4 and adds commits to v3 branch to maintain compatibility with an existing repository structure.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/hg/hgrepo1.txt#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# 'hg convert' blindly stamps a tag-update commit at the end of whatever branch\n# happened to contain the last converted commit — in this case, v3. However, the\n# original vcs-test.golang.org copy of this repo had this commit on the v3\n# branch as a descendent of 'add v3/sub/dir/file.txt', so that's where we put it\n# here. That leaves the convert-repo 'update tags' commit only reachable as the\n# head of the default branch.\nhg update -r 4\n\nhg branch v3\nunquote ''\ncp stdout dummy\nhg add dummy\nhg commit --user 'Russ Cox <rsc@golang.org>' --date '2018-06-27T12:15:45-04:00' -m 'dummy'\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module and Test File\nDESCRIPTION: This snippet defines a Go module and a test file. The test file includes flag definitions and test functions that log timeout and argument information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_flags.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n-- go.mod --\nmodule example.com\ngo 1.14\n-- x/x_test.go --\npackage x\n\nimport (\n\t\"flag\"\n\t\"strings\"\n\t\"testing\"\n)\n\nvar _ = flag.String(\"usage_message\", \"\", \"dummy flag to check usage message\")\nvar boolflag = flag.Bool(\"boolflag\", false, \"ignored boolean flag\")\nvar stringflag = flag.String(\"stringflag\", \"\", \"ignored string flag\")\n\nfunc TestLogTimeout(t *testing.T) {\n\tt.Logf(\"timeout: %v\", flag.Lookup(\"test.timeout\").Value)\n}\n\nfunc TestLogArgs(t *testing.T) {\n\tt.Logf(\"args: %s\", strings.Join(flag.Args(), \" \"))\n}\n```\n\n----------------------------------------\n\nTITLE: Second Example Test File Implementation\nDESCRIPTION: Defines two additional example functions (Example_y and Example_b) that continue incrementing and printing the shared counter. Tests execution order preservation within the second file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_source_order.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Copyright 2013 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// Make sure that go test runs Example_y before Example_b, preserving source order.\n\npackage p\n\nimport \"fmt\"\n\nfunc Example_y() {\n\tn++\n\tfmt.Println(n)\n\t// Output: 3\n}\n\nfunc Example_b() {\n\tn++\n\tfmt.Println(n)\n\t// Output: 4\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking File Versions in Type Info - go/types - Go\nDESCRIPTION: Info struct in go/types now contains FileVersions, mapping *ast.File pointers to string versions. Used for associating additional metadata, like compiler or language version, with each file during analysis.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_14\n\nLANGUAGE: Go\nCODE:\n```\ntype Info struct {\n    FileVersions map[*ast.File]string\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Version Requirement in Shell\nDESCRIPTION: This shell command sets the GOTOOLCHAIN environment variable to 'local' and attempts to list the current module. It expects to fail with an error message about the required Go version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_unknown_block.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GOTOOLCHAIN=local\n! go list .\nstderr 'go: go.mod requires go >= 1.999'\n```\n\n----------------------------------------\n\nTITLE: Running Go Benchmark Test with Verbose Output\nDESCRIPTION: This shell command runs a Go benchmark test with verbose output, asserting on CONT lines. It checks for specific output patterns and ensures benchmarks do not print CONT.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_benchmark_chatty_fail.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# Run chatty tests. Assert on CONT lines.\n! go test chatty_test.go -v -bench . chatty_bench\n\n# Sanity check that output occurs.\nstdout -count=2 'this is sub-0'\nstdout -count=2 'this is sub-1'\nstdout -count=2 'this is sub-2'\nstdout -count=1 'error from sub-0'\nstdout -count=1 'error from sub-1'\nstdout -count=1 'error from sub-2'\n\n# Benchmarks should not print CONT.\n! stdout CONT\n```\n\n----------------------------------------\n\nTITLE: Go Module B Implementation\nDESCRIPTION: Module B with a simple function implementation. Includes go.mod file with dependency on module Q v1.1.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune_all.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/b\n\ngo 1.18\n\nrequire example.com/q v1.1.0\n```\n\nLANGUAGE: go\nCODE:\n```\npackage b\n\nfunc B() {\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Build Caching with -trimpath Flag in Shell Script\nDESCRIPTION: A shell script that tests Go build caching behavior with -trimpath flag and verifies module versioning caching. It ensures different versions of the same module are cached separately.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_trimpath.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n[short] skip\nenv GO111MODULE=on\n\n# Set up fresh GOCACHE.\nenv GOCACHE=$WORK/gocache\nmkdir $GOCACHE\n\ncd $WORK\ngo build -o a.out\n\n# Varying -trimpath should cause a rebuild.\ngo build -x -o a.out -trimpath\nstderr '(compile|gccgo)( |\\.exe)'\nstderr 'link( |\\.exe)'\n\n# Two distinct versions of the same module with identical content should\n# still be cached separately.\n# Verifies golang.org/issue/35412.\ngo get example.com/stack@v1.0.0\ngo run -trimpath printstack.go\nstdout '^example.com/stack@v1.0.0/stack.go$'\ngo get example.com/stack@v1.0.1\ngo run -trimpath printstack.go\nstdout '^example.com/stack@v1.0.1/stack.go$'\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Function with Panic in Background Goroutine\nDESCRIPTION: This Go code implements a test function that spawns a background goroutine which panics, used to test the behavior of panics in background goroutines during tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_exit.txt#2025-04-22_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\npackage testbgpanic_test\n\nimport \"testing\"\n\nfunc TestPanicInBackground(*testing.T) {\n\tc := make(chan struct{})\n\tgo func() {\n\t\tpanic(\"haha no\")\n\t\tclose(c)\n\t}()\n\t<-c\n}\n```\n\n----------------------------------------\n\nTITLE: Go 1.22 Module Configuration\nDESCRIPTION: Module configuration for Go 1.22 testing embedded files with version and replacement directives.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_embed.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/foo\ngo 1.22\n\nrequire (\n\texample.com/a v0.1.0\n)\n\nreplace (\n\texample.com/a v0.1.0 => ../a\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Panic in Background Goroutine\nDESCRIPTION: This snippet tests a Go package where a test function panics in a background goroutine. It verifies that the test is marked as failing using go test -json and go tool test2json commands, with and without the -test.v flag.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_exit.txt#2025-04-22_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n! go test -json ./testbgpanic\nstdout '\"Action\":\"fail\"'\n! stdout '\"Action\":\"pass\"'\n\n! go tool test2json ./testbgpanic.exe -test.v\nstdout '\"Action\":\"fail\"'\n! stdout '\"Action\":\"pass\"'\n\n! go tool test2json ./testbgpanic.exe\nstdout '\"Action\":\"fail\"'\n! stdout '\"Action\":\"pass\"'\n```\n\n----------------------------------------\n\nTITLE: Lazy Package Implementation\nDESCRIPTION: The implementation file for the 'lazy' package that is imported by the main module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_deleted.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage lazy\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: A simple go.mod file defining the module name 'm' for the project. This is the minimal module definition required for a Go project.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/godebug_unknown.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Module Import with HTML Meta Tag\nDESCRIPTION: HTML document with a meta tag that specifies Go module import information. The tag defines 'vcs-test.golang.org/go/modauth404' as the module path, 'mod' as the version control system, and 'https://vcs-test.golang.org/auth/or404' as the repository URL.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/go/modauth404.txt#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<meta name=\"go-import\" content=\"vcs-test.golang.org/go/modauth404 mod https://vcs-test.golang.org/auth/or404\">\n```\n\n----------------------------------------\n\nTITLE: Testing Go Build with Forced Internal Linking (Shell)\nDESCRIPTION: This command attempts to build the Go project using internal linking mode, forced by the `-ldflags=-linkmode=internal` flag. This build is expected to fail because the generation of `_cgo_import.go` for package `c` does not account for the `#cgo LDFLAGS` specified in the dependency package `a`. The `stderr` check verifies that the error message indicates the inability to build for internal linking due to Cgo usage in package `c` or its dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_undef.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n! go build -ldflags=-linkmode=internal\nstderr 'some packages could not be built to support internal linking.*m/c|requires external linking|does not support internal cgo'\n```\n\n----------------------------------------\n\nTITLE: Defining Additional Go Tests in z_test.go\nDESCRIPTION: This Go code defines additional test and benchmark functions in the x package. It includes TestZ, TestXX, BenchmarkZ, and BenchmarkXX.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_regexps.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage x\n\nimport \"testing\"\n\nfunc TestZ(t *testing.T) {\n\tt.Logf(\"LOG: Z running\")\n}\n\nfunc TestXX(t *testing.T) {\n\tt.Logf(\"LOG: XX running\")\n}\n\nfunc BenchmarkZ(b *testing.B) {\n\tb.Logf(\"LOG: Z running N=%d\", b.N)\n}\n\nfunc BenchmarkXX(b *testing.B) {\n\tb.Logf(\"LOG: XX running N=%d\", b.N)\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module and Package Definition\nDESCRIPTION: This module definition and package file ('go.mod' and 'm.go') define the Go module and package setup for the tests. No external dependencies are indicated. This setup is essential for Go's module-aware mode.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_stale.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n-- go.mod --\nmodule example.com/m\n\ngo 1.17\n-- m.go --\npackage m\n\nimport \"C\"\n```\n\n----------------------------------------\n\nTITLE: Testing go mod init in empty directory\nDESCRIPTION: Tests that 'go mod init' does not recommend running 'go mod tidy' in an empty directory that contains no non-hidden .go files or subdirectories.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_init_tidy.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd empty\ngo mod init m\n! stderr tidy\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Test2 Module with Dependencies\nDESCRIPTION: Secondary module that imports and uses the main test module, including module replacement directive.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_issue51204.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/test2\n\ngo 1.18\n\nreplace example.com/test => ../test\n\nrequire example.com/test v0.0.0-00010101000000-000000000000\n```\n\nLANGUAGE: go\nCODE:\n```\npackage test2\n\nimport (\n\t\"example.com/test\"\n)\n\nfunc DoSomething() {\n\ttest.DoSomething()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IP Protocol Constants in Go for NetBSD ARM64 CGO\nDESCRIPTION: This snippet defines constants for various IP protocols used in network programming. These constants are specific to the syscall package for NetBSD on ARM64 architecture with CGO enabled.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_32\n\nLANGUAGE: Go\nCODE:\n```\nconst IPPROTO_AH ideal-int\nconst IPPROTO_CARP = 112\nconst IPPROTO_DONE = 257\nconst IPPROTO_DSTOPTS = 60\nconst IPPROTO_EGP = 8\nconst IPPROTO_ENCAP = 98\nconst IPPROTO_EON = 80\nconst IPPROTO_ESP = 50\nconst IPPROTO_ETHERIP = 97\nconst IPPROTO_FRAGMENT = 44\nconst IPPROTO_GGP = 3\nconst IPPROTO_GRE = 47\nconst IPPROTO_HOPOPTS = 0\nconst IPPROTO_ICMP = 1\nconst IPPROTO_ICMPV6 = 58\nconst IPPROTO_IDP = 22\nconst IPPROTO_IGMP = 2\nconst IPPROTO_IPCOMP = 108\nconst IPPROTO_IPIP = 4\nconst IPPROTO_IPV4 = 4\nconst IPPROTO_IPV6_ICMP = 58\nconst IPPROTO_MAX = 256\nconst IPPROTO_MAXID = 52\nconst IPPROTO_MOBILE = 55\nconst IPPROTO_NONE = 59\nconst IPPROTO_PFSYNC = 240\nconst IPPROTO_PIM = 103\nconst IPPROTO_PUP = 12\nconst IPPROTO_RAW = 255\nconst IPPROTO_ROUTING = 43\nconst IPPROTO_RSVP = 46\nconst IPPROTO_TP = 29\nconst IPPROTO_VRRP = 112\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with go.mod\nDESCRIPTION: Defines a Go module named 'importmain' with Go 1.16 as the required version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_import_main_loop.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule importmain\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Overlay Package File\nDESCRIPTION: Go file defining additional content for package dir2.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_overlay.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage dir2\n\n```\n\n----------------------------------------\n\nTITLE: Expected Go Module Definition after Adding Import (Go 1.17 Lazy Loading)\nDESCRIPTION: The expected `go.mod` file (`go.mod.lazy`) after running `go mod tidy` on the modified `m.go` with Go 1.17 (lazy loading). It requires both `a` and `b` directly. Crucially, it also includes an `// indirect` requirement for `c`, which is brought in because `b` is now a direct dependency and requires `c`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_import_allmod.txt#2025-04-22_snippet_5\n\nLANGUAGE: gomod\nCODE:\n```\n-- go.mod.lazy --\nmodule m\n\ngo 1.17\n\nrequire (\n\ta v0.1.0\n\tb v0.1.0\n)\n\nrequire c v0.1.0 // indirect\n\nreplace (\n\ta v0.1.0 => ./a1\n\tb v0.1.0 => ./b1\n\tc v0.1.0 => ./c1\n\tc v0.2.0 => ./c2\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing dependency module\nDESCRIPTION: Defines an empty package m for the example.com/m dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_redundant_requirement.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage m\n```\n\n----------------------------------------\n\nTITLE: Testing Go Build with External Linking (Shell)\nDESCRIPTION: This command runs a standard `go build`. By default, Go often uses external linking when Cgo is involved. This build is expected to succeed because external linking handles the separate C library dependencies correctly, even transitive ones. The `! stderr 'undefined reference'` indicates that the build should *not* produce 'undefined reference' errors.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_undef.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo build\n! stderr 'undefined reference'\n```\n\n----------------------------------------\n\nTITLE: Importing Package in Go\nDESCRIPTION: This snippet demonstrates how to import a package in a Go file, specifically importing rsc.io/quote as a blank import.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_lazy_indirect.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\npackage m\n\nimport _ \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: Package X Simple Function\nDESCRIPTION: Package 'x' with a simple computation function\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverpkg_with_init.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage x\n\nfunc XFunc() int {\n\treturn 2 * 2\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Retracted Module in Go\nDESCRIPTION: A Go package that imports the retracted module 'example.com/retract/rename' as a blank import. This demonstrates how a package would reference a dependency that has been retracted by its author.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_rename.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage use\n\nimport _ \"example.com/retract/rename\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Format Test\nDESCRIPTION: Shows content formatted as markdown\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/blank.txt#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nBlank line at start and end.\n```\n\n----------------------------------------\n\nTITLE: Checking Go Code Coverage with go tool cover (Bash)\nDESCRIPTION: Runs the `go tool cover` command with the `-func` flag on a coverage profile file (`cover.out`). It then checks the standard output (`stdout`) to ensure it matches the pattern indicating 0.0% total statement coverage. This command sequence is typically used in automated tests or scripts to verify code coverage reports.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_mod_empty.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo tool cover -func=cover.out\nstdout total.*statements.*0.0%\n```\n\n----------------------------------------\n\nTITLE: ELF-specific DWARF reader implementation\nDESCRIPTION: Platform-specific implementation for reading DWARF debug information from ELF binaries on Unix-like systems. The build tag specifies which operating systems use this implementation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_trimpath_cgo.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// +build android dragonfly freebsd illumos linux netbsd openbsd solaris\n\npackage main\n\nimport (\n\t\"debug/dwarf\"\n\t\"debug/elf\"\n)\n\nfunc readDWARF(exePath string) (*dwarf.Data, error) {\n\telfFile, err := elf.Open(exePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer elfFile.Close()\n\treturn elfFile.DWARF()\n}\n```\n\n----------------------------------------\n\nTITLE: Module C Configuration\nDESCRIPTION: Go.mod file for module 'c' which requires module 'd' at version v0.2.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_unused.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/c\nrequire example.com/d v0.2.0\n```\n\n----------------------------------------\n\nTITLE: Internal Package Y Definition\nDESCRIPTION: Definition of the internal package y that other packages attempt to import illegally.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_internal.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage y\n```\n\n----------------------------------------\n\nTITLE: Testing Quote Functions in Go\nDESCRIPTION: Contains test cases for all four quote functions, ensuring they return the expected strings. Includes environment setup for proper locale testing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180214005840-23179ee8a569.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage quote\n\nimport (\n\t\"os\"\n\t\"testing\"\n)\n\nfunc init() {\n\tos.Setenv(\"LC_ALL\", \"en\")\n}\n\nfunc TestHello(t *testing.T) {\n\thello := \"Hello, world.\"\n\tif out := Hello(); out != hello {\n\t\tt.Errorf(\"Hello() = %q, want %q\", out, hello)\n\t}\n}\n\nfunc TestGlass(t *testing.T) {\n\tglass := \"I can eat glass and it doesn't hurt me.\"\n\tif out := Glass(); out != glass {\n\t\tt.Errorf(\"Glass() = %q, want %q\", out, glass)\n\t}\n}\n\nfunc TestGo(t *testing.T) {\n\tgo1 := \"Don't communicate by sharing memory, share memory by communicating.\"\n\tif out := Go(); out != go1 {\n\t\tt.Errorf(\"Go() = %q, want %q\", out, go1)\n\t}\n}\n\nfunc TestOpt(t *testing.T) {\n\topt := \"If a program is too slow, it must have a loop.\"\n\tif out := Opt(); out != opt {\n\t\tt.Errorf(\"Opt() = %q, want %q\", out, opt)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Inclusion with Build Tag 'extra' - Go\nDESCRIPTION: This Go source file uses the '+build extra' tag to restrict its inclusion to builds where the extra tag is supplied. It defines package p and imports extra as a side effect. It depends on the availability of the extra import path in the module. Input: build tag. Output: module import side effect. Limitation: file is ignored unless the extra tag is set.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_constraints.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// +build extra\n\npackage p\n\nimport _ \"extra\"\n\n```\n\n----------------------------------------\n\nTITLE: Allowing Dependency Internal Usage (Setup)\nDESCRIPTION: Changes the current module path to `golang.org/notx` and gets the `./throughdep` package. This sets up a scenario where the main module (`golang.org/notx`) depends on a package (`./throughdep`) which in turn depends on `golang.org/x/useinternal`. The `golang.org/x/useinternal` package itself correctly uses `golang.org/x/internal`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# Dependencies should be able to use their own internal modules...\ngo mod edit -module=golang.org/notx\ngo get ./throughdep\n```\n\n----------------------------------------\n\nTITLE: Declaring a Go Module - Go\nDESCRIPTION: This go.mod file snippet declares a minimal Go module named 'm' using Go version 1.16. It is required to initialize the project and enable dependency and package management for the test. No parameters are required. Inputs are the module path and Go version; outputs are the go.mod metadata for the project.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_wildcard_skip_nonmatching.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n-- go.mod --\\nmodule m\\n\\ngo 1.16\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module and Main Package\nDESCRIPTION: Defines the go.mod file for a private module and a main.go file that imports authenticated packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_auth.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n-- go.mod --\nmodule private.example.com\n```\n\nLANGUAGE: Go\nCODE:\n```\n-- main.go --\npackage useprivate\n\nimport (\n\t_ \"vcs-test.golang.org/auth/or401\"\n\t_ \"vcs-test.golang.org/auth/or404\"\n)\n```\n\n----------------------------------------\n\nTITLE: Git User Configuration\nDESCRIPTION: Git configuration file that sets the user name and email for the test repository.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_version_stamping_git.txt#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[user]\n    name = Go Gopher\n    email = gopher@golang.org\n```\n\n----------------------------------------\n\nTITLE: Building and Verifying Module Info in Binary (Shell)\nDESCRIPTION: This shell snippet first builds an executable (`a.exe`) from the `a.go` source file using `go build`. It then uses `go version -m` to inspect the module information embedded within the compiled binary. It asserts that the main package path is reported as `command-line-arguments`, that the module `a` is listed as a dependency (`dep`), and crucially, that there is no `mod` line indicating a main module for the executable itself.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_command_line_arguments.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n[short] skip\n\n# check that the version of command-line-arguments doesn't include a module\ngo build -o a.exe a.go\ngo version -m a.exe\nstdout '^\\tpath\\tcommand-line-arguments$'\nstdout '^\\tdep\\ta\\t\\(devel\\)\\t$'\n! stdout mod[^e]\n```\n\n----------------------------------------\n\nTITLE: Testing Localized 'Hello' Function in Go\nDESCRIPTION: This snippet contains test cases for the 'Hello' function, checking if it returns the correct localized greeting based on the provided language preferences.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.3.0.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nvar helloTests = []struct {\n\tprefs []language.Tag\n\ttext  string\n}{\n\t{\n\t\t[]language.Tag{language.Make(\"en-US\"), language.Make(\"fr\")},\n\t\t\"Hello, world.\",\n\t},\n\t{\n\t\t[]language.Tag{language.Make(\"fr\"), language.Make(\"en-US\")},\n\t\t\"Bonjour le monde.\",\n\t},\n}\n\nfunc TestHello(t *testing.T) {\n\tfor _, tt := range helloTests {\n\t\ttext := Hello(tt.prefs...)\n\t\tif text != tt.text {\n\t\t\tt.Errorf(\"Hello(%v) = %q, want %q\", tt.prefs, text, tt.text)\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Package Dependencies with GO111MODULE Off\nDESCRIPTION: Shell commands testing package dependencies with module mode disabled, verifying proper error handling for excluded Go files due to build constraints.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_import_error_stack.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=off\n! go test testdep/p1\nstderr 'package testdep/p1 \\(test\\)\\n\\timports testdep/p2\\n\\timports testdep/p3: build constraints exclude all Go files '\n! go vet testdep/p1\nstderr 'package testdep/p1 \\(test\\)\\n\\timports testdep/p2\\n\\timports testdep/p3: build constraints exclude all Go files '\n```\n\n----------------------------------------\n\nTITLE: Setting Toolchain to Default\nDESCRIPTION: Changes the toolchain to 'default' and verifies the update in go.mod.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit_toolchain.txt#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngo mod edit -toolchain=default\ngrep 'toolchain default' go.mod\n```\n\n----------------------------------------\n\nTITLE: Failing Test Implementation in Go\nDESCRIPTION: A Go test file that demonstrates a failing test by writing 'exitcode=1' to stderr and exiting with status code 1 in TestMain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fail_newline.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage fail\n\nimport (\n\t\"os\"\n\t\"testing\"\n)\n\nfunc TestMain(m *testing.M) {\n\tos.Stderr.WriteString(\"exitcode=1\")\n\tos.Exit(1)\n}\n```\n\n----------------------------------------\n\nTITLE: Test Package with Embedded Files\nDESCRIPTION: Test file demonstrating embedded file usage in test packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_embed.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\nimport _ \"embed\"\n\n//go:embed subdir/test/embed.txt\nvar subderTest string\n```\n\n----------------------------------------\n\nTITLE: Go Test File with External Dependency\nDESCRIPTION: A test file for package 'a' that imports the testing package and rsc.io/quote as a blank import. It defines a simple test function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\nimport \"testing\"\nimport _ \"rsc.io/quote\"\n\nfunc Test(t *testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Go Generate with Echo Command\nDESCRIPTION: Go source file containing a go:generate directive that executes the echo command. The package imports itself demonstrating a cyclic import pattern.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/generate_bad_imports.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n//go:generate echo hello world\n\npackage gencycle\n\nimport _ \"gencycle\"\n```\n\n----------------------------------------\n\nTITLE: GOROOT Testing Program Test\nDESCRIPTION: Test file that calls the main function to verify GOROOT behavior when run via 'go test'. This allows testing GOROOT values in test binaries.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_trimpath_goroot.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"testing\"\n\nfunc TestMain(*testing.M) {\n\tmain()\n}\n```\n\n----------------------------------------\n\nTITLE: User-Configurable Logging for HTTP Reverse Proxy - net/http/httputil Package - Go\nDESCRIPTION: Extends ReverseProxy struct with ErrorLog field in net/http/httputil, allowing custom logging of errors via *log.Logger. This enables application-level control over proxy server error recording, requiring the standard library log package and log.Logger object.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_19\n\nLANGUAGE: Go\nCODE:\n```\ntype ReverseProxy struct {\n    ErrorLog *log.Logger\n    // ... other fields\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Unknown Package Error\nDESCRIPTION: Tests the error handling for unknown packages. It attempts to get a non-existent package and verifies that the correct error message is displayed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_commit.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n! go get -x golang.org/x/text/foo@14c0d48\nstderr '^go: module golang.org/x/text@14c0d48 found \\(v0.3.0\\), but does not contain package golang.org/x/text/foo$'\n```\n\n----------------------------------------\n\nTITLE: Minimal Go Program for Testing\nDESCRIPTION: A simple Go program with an empty main function used for testing the build process with -trimpath flag. This minimal program allows focusing on compiler behavior rather than program complexity.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/link_matching_actionid.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Main Test Module\nDESCRIPTION: Basic Go module definition with a simple function implementation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_issue51204.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/test\n\ngo 1.18\n```\n\nLANGUAGE: go\nCODE:\n```\npackage test\n\nfunc DoSomething() {\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Non-reusable Metadata Results\nDESCRIPTION: This snippet shows how changes in hash values invalidate previously obtained metadata, preventing reuse. It plays a crucial role in ensuring metadata integrity when repo HEAD or other refs change.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_issue61415.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nreplace f213069baa68ec26412fb373c7cf6669db1f8e69 08a4fa6bb9c04ffba03b26ae427b0d6335d90a2a no-nested.json\ngo list -reuse=no-nested.json -json -m --versions -e vcs-test.golang.org/git/issue61415.git/nested@latest\n```\n\n----------------------------------------\n\nTITLE: Querying 'latest' Module Version (Tagged Preference Test)\nDESCRIPTION: Executes 'go list -m' to retrieve metadata for the 'latest' version of the 'github.com/dmitshur-test/modtest5' module. The '-f' flag formats the output to include the module path, resolved version, and timestamp. This command triggers the Go module resolution logic using the configured file proxy, testing the preference for tagged versions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_pseudo.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo list -m -f '{{.Path}} {{.Version}} {{.Time.Format \"2006-01-02\"}}' github.com/dmitshur-test/modtest5@latest\n```\n\n----------------------------------------\n\nTITLE: Go Module File for 'std' Replacement\nDESCRIPTION: This snippet shows the go.mod file for a local module named 'std', used in testing module replacement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_meta.txt#2025-04-22_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\nmodule std\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Module B Configuration (v0.1.0)\nDESCRIPTION: Basic configuration for module B version 0.1.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue65363.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/b\n\ngo 1.16\n```\n\nLANGUAGE: go\nCODE:\n```\npackage b\n```\n\n----------------------------------------\n\nTITLE: Defining Module 'c' Version 1 in Go\nDESCRIPTION: This go.mod file defines module 'c' version 1 and its dependency on a specific version of module 'b'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_pseudo_artifact.txt#2025-04-22_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/c\n\ngo 1.16\n\nrequire example.net/b v0.2.1-0.20210219000000-000000000000\n```\n\n----------------------------------------\n\nTITLE: Deprecated Go Module Definition (b) - Go\nDESCRIPTION: This go.mod, located in directory 'b', defines module example.com/deprecated/b as deprecated via a leading comment. It uses Go 1.17 and is used as a replacement target in previous go.mod configurations. The deprecation comment signals downstream consumers that this module is no longer recommended for use.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_deprecated_replace.txt#2025-04-22_snippet_7\n\nLANGUAGE: go.mod\nCODE:\n```\n// Deprecated: in ./b\nmodule example.com/deprecated/b\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: Testing Go Commands with Symlinks to Newline Paths in Shell\nDESCRIPTION: Creates a symbolic link (`$WORK${/}link`) pointing to the directory containing the newline character. It then tests `go run` and `go test` by invoking them with paths that traverse the symlink (`$WORK${/}link${/}...`). The script expects these commands to succeed (indicated by lack of `!` and checking for `ok` on stderr) because the commands operate on the symlink path itself, which is valid, rather than the problematic target path. Includes conditional logic for symlink support (`[!symlink]`), test length (`[short]`), and CGO (`[cgo]`, `[!cgo]`).\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cwd_newline.txt#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# Since we do preserve $PWD (or set it appropriately) for commands, and we do\n# not resolve symlinks unnecessarily, referring to the contents of the unsafe\n# directory via a safe symlink should be ok, and should not inject the data from\n# the symlink target path.\n\n[!symlink] stop 'remainder of test checks symlink behavior'\n[short] stop 'links and runs binaries'\n\nsymlink $WORK${/}link -> $DIR\n\n[cgo] go run $WORK${/}link${/}main.go\n[!cgo] go run $WORK${/}link${/}main_nocgo.go\n! stdout panic\n! stderr panic\nstderr '^ok$'\n\n[cgo] go test -v $WORK${/}link${/}main.go $WORK${/}link${/}main_test.go\n[!cgo] go test -v $WORK${/}link${/}main_nocgo.go $WORK${/}link${/}main_test.go\n! stdout panic\n! stderr panic\nstdout '^ok$'   # 'go test' combines the test's stdout into stderr\n```\n\n----------------------------------------\n\nTITLE: NetBSD Network Protocol Constants\nDESCRIPTION: Network protocol address family constants for the NetBSD ARM64 platform defining various network protocol types and addressing schemes.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\nconst (\n    AF_APPLETALK = 16\n    AF_ARP = 28\n    AF_BLUETOOTH = 31\n    AF_INET6 = 24\n    AF_IPX = 23\n    AF_ISO = 7\n    AF_LOCAL = 1\n    AF_ROUTE = 34\n)\n```\n\n----------------------------------------\n\nTITLE: Removing Toolchain Directive\nDESCRIPTION: Sets the toolchain to 'none', effectively removing the directive, and verifies its absence.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit_toolchain.txt#2025-04-22_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ngo mod edit -toolchain=none\n! grep toolchain go.mod\n```\n\n----------------------------------------\n\nTITLE: Defining Module Dependencies for C v0.1.0 in Go\nDESCRIPTION: This go.mod file for example.net/c v0.1.0 specifies its Go version and a dependency on example.net/a v0.1.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_boost.txt#2025-04-22_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/c\n\ngo 1.17\n\nrequire example.net/a v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition File\nDESCRIPTION: A minimal Go module definition file that declares the module name as private.example.com. This is used in the tests to verify module fetching behavior with authentication.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goauth_userauth.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule private.example.com\n```\n\n----------------------------------------\n\nTITLE: Sub Package Implementation in Go\nDESCRIPTION: A sub-package implementation that provides different execution paths based on command-line arguments. It includes cases for normal execution, exit with code 0, exit with code 1, and panic, which are used to test code coverage in various program termination scenarios.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_build_simple.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage sub\n\nimport \"os\"\n\nfunc S() {\n\tswitch os.Args[1] {\n\tcase \"normal\":\n\t\tprintln(\"hi\")\n\tcase \"goodexit\":\n\t\tos.Exit(0)\n\tcase \"badexit\":\n\t\tos.Exit(1)\n\tcase \"panic\":\n\t\tpanic(\"something bad happened\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Module Info JSON Configuration\nDESCRIPTION: A JSON configuration file containing version information for the module, specifying version v1.0.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_newergoversion_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.0.0\"}\n```\n\n----------------------------------------\n\nTITLE: Setting GO111MODULE Off and Running TestReadResponseErrors\nDESCRIPTION: This snippet sets GO111MODULE to off, which uses Go 1.20 version for determining default GODEBUG settings. It then runs the TestReadResponseErrors test, expecting it to fail due to the httplaxcontentlength GODEBUG value being set to \"1\".\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_default_godebug_issue69203.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GO111MODULE=off\n! go test net/http -run=^TestReadResponseErrors$\n```\n\n----------------------------------------\n\nTITLE: Installing Package After Build\nDESCRIPTION: Tests that installing a package after building it does not trigger recompilation. It uses the -x flag for verbose output and checks that no compilation-related messages appear in the stderr.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_commit.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo install -x golang.org/x/text/language\n! stderr 'compile|cp|gccgo .*language\\.a$'\n```\n\n----------------------------------------\n\nTITLE: Setting GO111MODULE Environment Variable\nDESCRIPTION: Sets the GO111MODULE environment variable to 'on' to ensure module-aware mode is enabled for Go commands.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_import.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GO111MODULE=on\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Module Environment\nDESCRIPTION: Sets up the Go module environment with specific paths and settings.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/get_insecure.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nenv GOPATH=$WORK/m/gp\nmkdir $WORK/m\ncp module_file $WORK/m/go.mod\ncd $WORK/m\nenv GO111MODULE=on\nenv GOPROXY=''\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment for 'latest' Query (Pseudo-versions Only)\nDESCRIPTION: Configures the environment for testing 'latest' version resolution when only pseudo-versions are available in the proxy. It sets the `GOPROXY` environment variable to point to a different local directory (`$WORK/tinyproxy`) which contains only pseudo-versions for a different test module ('dmitri.shuralyov.com/test/modtest3').\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_pseudo.txt#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nenv GOPROXY=file:///$WORK/tinyproxy\n```\n\n----------------------------------------\n\nTITLE: Socket I/O Control Constants (SIOC family) for Darwin ARM64\nDESCRIPTION: This snippet defines socket I/O control constants used for network interface and socket manipulation on Darwin ARM64 systems. These constants are used with the ioctl system call to query or modify socket and network interface settings.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_95\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (darwin-arm64), const SIOCGDRVSPEC ideal-int\npkg syscall (darwin-arm64), const SIOCGETVLAN = 3223349631\npkg syscall (darwin-arm64), const SIOCGETVLAN ideal-int\npkg syscall (darwin-arm64), const SIOCGHIWAT = 1074033409\npkg syscall (darwin-arm64), const SIOCGHIWAT ideal-int\npkg syscall (darwin-arm64), const SIOCGIFADDR = 3223349537\npkg syscall (darwin-arm64), const SIOCGIFADDR ideal-int\npkg syscall (darwin-arm64), const SIOCGIFALTMTU = 3223349576\npkg syscall (darwin-arm64), const SIOCGIFALTMTU ideal-int\npkg syscall (darwin-arm64), const SIOCGIFASYNCMAP = 3223349628\npkg syscall (darwin-arm64), const SIOCGIFASYNCMAP ideal-int\npkg syscall (darwin-arm64), const SIOCGIFBOND = 3223349575\npkg syscall (darwin-arm64), const SIOCGIFBOND ideal-int\npkg syscall (darwin-arm64), const SIOCGIFBRDADDR = 3223349539\npkg syscall (darwin-arm64), const SIOCGIFBRDADDR ideal-int\npkg syscall (darwin-arm64), const SIOCGIFCAP = 3223349595\npkg syscall (darwin-arm64), const SIOCGIFCAP ideal-int\npkg syscall (darwin-arm64), const SIOCGIFCONF = 3222038820\npkg syscall (darwin-arm64), const SIOCGIFCONF ideal-int\npkg syscall (darwin-arm64), const SIOCGIFDEVMTU = 3223349572\npkg syscall (darwin-arm64), const SIOCGIFDEVMTU ideal-int\npkg syscall (darwin-arm64), const SIOCGIFDSTADDR = 3223349538\npkg syscall (darwin-arm64), const SIOCGIFDSTADDR ideal-int\npkg syscall (darwin-arm64), const SIOCGIFFLAGS = 3223349521\npkg syscall (darwin-arm64), const SIOCGIFFLAGS ideal-int\npkg syscall (darwin-arm64), const SIOCGIFGENERIC = 3223349562\npkg syscall (darwin-arm64), const SIOCGIFGENERIC ideal-int\npkg syscall (darwin-arm64), const SIOCGIFKPI = 3223349639\npkg syscall (darwin-arm64), const SIOCGIFKPI ideal-int\npkg syscall (darwin-arm64), const SIOCGIFMAC = 3223349634\npkg syscall (darwin-arm64), const SIOCGIFMAC ideal-int\npkg syscall (darwin-arm64), const SIOCGIFMEDIA = 3224135992\npkg syscall (darwin-arm64), const SIOCGIFMEDIA ideal-int\npkg syscall (darwin-arm64), const SIOCGIFMETRIC = 3223349527\npkg syscall (darwin-arm64), const SIOCGIFMETRIC ideal-int\npkg syscall (darwin-arm64), const SIOCGIFMTU = 3223349555\npkg syscall (darwin-arm64), const SIOCGIFMTU ideal-int\npkg syscall (darwin-arm64), const SIOCGIFNETMASK = 3223349541\npkg syscall (darwin-arm64), const SIOCGIFNETMASK ideal-int\npkg syscall (darwin-arm64), const SIOCGIFPDSTADDR = 3223349568\npkg syscall (darwin-arm64), const SIOCGIFPDSTADDR ideal-int\npkg syscall (darwin-arm64), const SIOCGIFPHYS = 3223349557\npkg syscall (darwin-arm64), const SIOCGIFPHYS ideal-int\npkg syscall (darwin-arm64), const SIOCGIFPSRCADDR = 3223349567\npkg syscall (darwin-arm64), const SIOCGIFPSRCADDR ideal-int\npkg syscall (darwin-arm64), const SIOCGIFSTATUS = 3274795325\npkg syscall (darwin-arm64), const SIOCGIFSTATUS ideal-int\npkg syscall (darwin-arm64), const SIOCGIFVLAN = 3223349631\npkg syscall (darwin-arm64), const SIOCGIFVLAN ideal-int\npkg syscall (darwin-arm64), const SIOCGIFWAKEFLAGS = 3223349640\npkg syscall (darwin-arm64), const SIOCGIFWAKEFLAGS ideal-int\npkg syscall (darwin-arm64), const SIOCGLOWAT = 1074033411\npkg syscall (darwin-arm64), const SIOCGLOWAT ideal-int\npkg syscall (darwin-arm64), const SIOCGPGRP = 1074033417\npkg syscall (darwin-arm64), const SIOCGPGRP ideal-int\npkg syscall (darwin-arm64), const SIOCIFCREATE = 3223349624\npkg syscall (darwin-arm64), const SIOCIFCREATE ideal-int\npkg syscall (darwin-arm64), const SIOCIFCREATE2 = 3223349626\npkg syscall (darwin-arm64), const SIOCIFCREATE2 ideal-int\npkg syscall (darwin-arm64), const SIOCIFDESTROY = 2149607801\npkg syscall (darwin-arm64), const SIOCIFDESTROY ideal-int\npkg syscall (darwin-arm64), const SIOCIFGCLONERS = 3222301057\npkg syscall (darwin-arm64), const SIOCIFGCLONERS ideal-int\npkg syscall (darwin-arm64), const SIOCRSLVMULTI = 3222300987\npkg syscall (darwin-arm64), const SIOCRSLVMULTI ideal-int\npkg syscall (darwin-arm64), const SIOCSDRVSPEC = 2150132091\npkg syscall (darwin-arm64), const SIOCSDRVSPEC ideal-int\npkg syscall (darwin-arm64), const SIOCSETVLAN = 2149607806\npkg syscall (darwin-arm64), const SIOCSETVLAN ideal-int\npkg syscall (darwin-arm64), const SIOCSHIWAT = 2147775232\npkg syscall (darwin-arm64), const SIOCSHIWAT ideal-int\npkg syscall (darwin-arm64), const SIOCSIFADDR = 2149607692\npkg syscall (darwin-arm64), const SIOCSIFADDR ideal-int\npkg syscall (darwin-arm64), const SIOCSIFALTMTU = 2149607749\npkg syscall (darwin-arm64), const SIOCSIFALTMTU ideal-int\npkg syscall (darwin-arm64), const SIOCSIFASYNCMAP = 2149607805\npkg syscall (darwin-arm64), const SIOCSIFASYNCMAP ideal-int\npkg syscall (darwin-arm64), const SIOCSIFBOND = 2149607750\npkg syscall (darwin-arm64), const SIOCSIFBOND ideal-int\npkg syscall (darwin-arm64), const SIOCSIFBRDADDR = 2149607699\npkg syscall (darwin-arm64), const SIOCSIFBRDADDR ideal-int\npkg syscall (darwin-arm64), const SIOCSIFCAP = 2149607770\npkg syscall (darwin-arm64), const SIOCSIFCAP ideal-int\npkg syscall (darwin-arm64), const SIOCSIFDSTADDR = 2149607694\npkg syscall (darwin-arm64), const SIOCSIFDSTADDR ideal-int\npkg syscall (darwin-arm64), const SIOCSIFFLAGS = 2149607696\npkg syscall (darwin-arm64), const SIOCSIFFLAGS ideal-int\npkg syscall (darwin-arm64), const SIOCSIFGENERIC = 2149607737\npkg syscall (darwin-arm64), const SIOCSIFGENERIC ideal-int\npkg syscall (darwin-arm64), const SIOCSIFKPI = 2149607814\npkg syscall (darwin-arm64), const SIOCSIFKPI ideal-int\npkg syscall (darwin-arm64), const SIOCSIFLLADDR = 2149607740\npkg syscall (darwin-arm64), const SIOCSIFLLADDR ideal-int\npkg syscall (darwin-arm64), const SIOCSIFMAC = 2149607811\npkg syscall (darwin-arm64), const SIOCSIFMAC ideal-int\npkg syscall (darwin-arm64), const SIOCSIFMEDIA = 3223349559\npkg syscall (darwin-arm64), const SIOCSIFMEDIA ideal-int\npkg syscall (darwin-arm64), const SIOCSIFMETRIC = 2149607704\npkg syscall (darwin-arm64), const SIOCSIFMETRIC ideal-int\npkg syscall (darwin-arm64), const SIOCSIFMTU = 2149607732\npkg syscall (darwin-arm64), const SIOCSIFMTU ideal-int\npkg syscall (darwin-arm64), const SIOCSIFNETMASK = 2149607702\npkg syscall (darwin-arm64), const SIOCSIFNETMASK ideal-int\npkg syscall (darwin-arm64), const SIOCSIFPHYADDR = 2151704894\npkg syscall (darwin-arm64), const SIOCSIFPHYADDR ideal-int\npkg syscall (darwin-arm64), const SIOCSIFPHYS = 2149607734\npkg syscall (darwin-arm64), const SIOCSIFPHYS ideal-int\npkg syscall (darwin-arm64), const SIOCSIFVLAN = 2149607806\npkg syscall (darwin-arm64), const SIOCSIFVLAN ideal-int\npkg syscall (darwin-arm64), const SIOCSLOWAT = 2147775234\npkg syscall (darwin-arm64), const SIOCSLOWAT ideal-int\npkg syscall (darwin-arm64), const SIOCSPGRP = 2147775240\npkg syscall (darwin-arm64), const SIOCSPGRP ideal-int\n```\n\n----------------------------------------\n\nTITLE: Go Function Declaration\nDESCRIPTION: Simple Go package declaration with an external function declaration for f that takes an int8 parameter.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_asm.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\nfunc f(x int8)\n```\n\n----------------------------------------\n\nTITLE: Sort Package Generic Slice Functions\nDESCRIPTION: Functions for the sort package that provide generic sorting capabilities for slices of any type. Includes sorting, stability checking, and stable sorting operations using custom comparison functions.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.8.txt#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\n// sort functions\nfunc Slice(interface{}, func(int, int) bool)\nfunc SliceIsSorted(interface{}, func(int, int) bool) bool\nfunc SliceStable(interface{}, func(int, int) bool)\n```\n\n----------------------------------------\n\nTITLE: Go Module Toolchain Tests\nDESCRIPTION: Tests toolchain version selection with go.mod file, including version requirements and toolchain directives\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_local.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo mod init m\ngo mod edit -go=1.700 -toolchain=none\ngo version\nstdout 1.700\n```\n\n----------------------------------------\n\nTITLE: Defining ARM64 ELF Relocation Type Constants in Go\nDESCRIPTION: Defines various constants for ARM64 ELF relocation types, including both 32-bit and 64-bit architectures. These constants are used to identify different types of relocations in ELF files.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nconst R_AARCH64_NONE = 0\nconst R_AARCH64_ABS64 = 257\nconst R_AARCH64_ABS32 = 258\nconst R_AARCH64_ABS16 = 259\nconst R_AARCH64_PREL64 = 260\nconst R_AARCH64_PREL32 = 261\nconst R_AARCH64_PREL16 = 262\n// ... (many more constants)\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Configuration for Module A\nDESCRIPTION: This snippet shows the content of the go.mod file for module 'example.com/a', specifying the module name and Go version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_module_not_in_go_work.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/a\n\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Dependency R Implementation\nDESCRIPTION: Implementation of shared dependency module 'r'\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage r\n\nfunc R() {}\n```\n\n----------------------------------------\n\nTITLE: Listing Non-Standard Test Dependencies (Shell/Go)\nDESCRIPTION: Executes the 'go list' command to find all non-standard Go package dependencies for the 'pkg' package, including its test dependencies. The '-e' flag allows processing even with errors, '-test' includes test dependencies, '-deps' lists all dependencies, and '-f' formats the output to show only the ImportPath for non-standard packages. This command is central to verifying the recompilation behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_split_main.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo list -e -test -deps -f '{{if not .Standard}}{{.ImportPath}}{{end}}' pkg\n```\n\n----------------------------------------\n\nTITLE: Storing Module Version Metadata - JSON\nDESCRIPTION: This snippet provides metadata about the Go module, including its semantic version ('v0.1.0'). This .info file is typically generated by Go's module proxy infrastructure and aids in module version management and reproducibility. It does not interact with code directly and is used for tooling and version control systems.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_fuzzfail_v0.1.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\\\"Version\\\":\\\"v0.1.0\\\"}\n```\n\n----------------------------------------\n\nTITLE: Test Output Attribution Test Implementation\nDESCRIPTION: Test implementation that creates a parallel subtest while logging messages from the outer test context. Verifies correct output attribution when parallel test execution occurs.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_interleaved.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"testing\"\n)\n\nfunc TestWeirdTiming(outer *testing.T) {\n\touter.Run(\"pauser\", func(pauser *testing.T) {\n\t\touter.Logf(\"logging to outer\")\n\t\tpauser.Parallel()\n\t})\n\n\touter.Logf(\"logging to outer again\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Opt Function in Go\nDESCRIPTION: Returns an optimization truth about programming by calling OptV2() from an imported module. The quote is attributed to Ken Thompson.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709160352-0d003b9c4bfa.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Opt returns an optimization truth.\nfunc Opt() string {\n\t// Wisdom from ken.\n\treturn quote.OptV2()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module golang.org/toolchain\nDESCRIPTION: Defines the Go module path as 'golang.org/toolchain'. This declaration is present in both the conceptual '.mod' file representation and the actual 'go.mod' file, establishing the module's identity.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.freebsd-arm.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n-- .mod --\nmodule golang.org/toolchain\n```\n\nLANGUAGE: go\nCODE:\n```\n-- go.mod --\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Expected Go workspace configuration\nDESCRIPTION: The expected go.work file after running 'go work use -r .' command, which replaces 'sub' with the current directory ('.').\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_issue50958.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\n\nuse .\n```\n\n----------------------------------------\n\nTITLE: Using Enhanced Unicode Character Classes in Go\nDESCRIPTION: The \\p{name} and \\P{name} character class syntaxes now support additional names and aliases, including Any, ASCII, Assigned, Cn, and LC. They also implement case-insensitive name lookups, ignoring spaces, underscores, and hyphens, as per Unicode TR18.\nSOURCE: https://github.com/golang/go/blob/master/doc/next/6-stdlib/99-minor/regexp/syntax/70781.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n\\p{name}\n```\n\nLANGUAGE: Go\nCODE:\n```\n\\P{name}\n```\n\nLANGUAGE: Go\nCODE:\n```\n\\p{Letter}\n```\n\nLANGUAGE: Go\nCODE:\n```\n\\pL\n```\n\n----------------------------------------\n\nTITLE: HTML List Format\nDESCRIPTION: Shows list formatted as HTML using unordered list tags and proper list item tags.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list.txt#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<p>Text.\n- Not a list.\n<ul>\n<li>Here is the list.\n<li>Using multiple bullets.\n<li>Indentation does not matter.\n<li>Lots of bullets.\n</ul>\n<p>More text.\n```\n\n----------------------------------------\n\nTITLE: Declaring the Main Module for Coverage Testing - Go Modules\nDESCRIPTION: This go.mod snippet defines the module name as 'mainwithtest' and specifies Go version 1.20 for the build. This is a standard Go module definition required for project builds and tooling, and is necessary for proper dependency tracking.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_main_import_path.txt#2025-04-22_snippet_1\n\nLANGUAGE: mod\nCODE:\n```\nmodule mainwithtest\n\ngo 1.20\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Version Compatibility with Local Toolchain\nDESCRIPTION: This snippet sets the GOTOOLCHAIN environment variable to 'local' and attempts to build the current package. It expects the build to fail with an error message indicating that go.mod requires a newer Go version than the one running.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline_too_new.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GOTOOLCHAIN=local\n! go build .\nstderr '^go: go.mod requires go >= 1.99999 \\(running go 1\\..+\\)$'\n```\n\n----------------------------------------\n\nTITLE: Testing Panic in Test Function\nDESCRIPTION: This snippet tests a Go package where a test function panics. It verifies that the test is marked as failing using go test -json and go tool test2json commands, with and without the -test.v flag.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_exit.txt#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n! go test -json ./testpanic\nstdout '\"Action\":\"fail\"'\n! stdout '\"Action\":\"pass\"'\n\n! go tool test2json ./testpanic.exe -test.v\nstdout '\"Action\":\"fail\"'\n! stdout '\"Action\":\"pass\"'\n\n! go tool test2json ./testpanic.exe\nstdout '\"Action\":\"fail\"'\n! stdout '\"Action\":\"pass\"'\n```\n\n----------------------------------------\n\nTITLE: Testing Package Functionality in Go\nDESCRIPTION: The 'd_test.go' file includes a basic test for the package 'd'. Using the 'testing' package, it verifies the 'Get' function from 'd'. The function 'TestD' checks execution without validating any output, focusing on process completeness.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/load_test_pkg_err.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n-- d_test.go --\npackage d_test\n\nimport \"testing\"\nimport \"golang.org/fake/d\"\nfunc TestD(t *testing.T) { d.Get(); }\n```\n\n----------------------------------------\n\nTITLE: Testing Go Help Doc Command in Shell\nDESCRIPTION: This shell snippet tests the 'go help doc' command, ensuring it outputs correctly formatted documentation requests such as 'go doc <pkg>' and 'go doc <pkg> <sym> <method>'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/doc.txt#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# go help doc\ngo help doc\nstdout 'go doc'\nstdout 'go doc <pkg>'\nstdout 'go doc <sym>\\[\\.<methodOrField>\\]'\nstdout 'go doc \\[<pkg>\\.\\]<sym>\\[\\.<methodOrField>\\]'\nstdout 'go doc \\[<pkg>\\.\\]\\[<sym>\\.\\]<methodOrField>'\nstdout 'go doc <pkg> <sym>\\[\\.<methodOrField>\\]'\n```\n\n----------------------------------------\n\nTITLE: Original go.mod File\nDESCRIPTION: The original go.mod file with Go 1.20 requirement and various module replacements for testing. This provides the base configuration for the toolchain switching tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_toolchain.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule example\n\ngo 1.20\n\nrequire example.net/a v0.1.0\n\nreplace (\n\texample.net/a v0.1.0 => ./a1\n\texample.net/a v0.2.0 => ./a2\n\texample.net/b v0.1.0 => ./b1\n\texample.net/c v0.1.0 => ./c1\n\texample.net/d v0.1.0 => ./d1\n\texample.net/d v0.2.0 => ./d2\n)\n```\n\n----------------------------------------\n\nTITLE: SysProcAttr Extensions for PID File Descriptor - syscall - Go\nDESCRIPTION: The SysProcAttr struct across various Linux and cgo platforms now includes a PidFD *int field. When set, it enables or provides process ID file descriptor management for advanced process control.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_27\n\nLANGUAGE: Go\nCODE:\n```\ntype SysProcAttr struct {\n    PidFD *int\n}\n```\n\n----------------------------------------\n\nTITLE: Socket Option Constants in Go for NetBSD ARM64\nDESCRIPTION: Constants for socket options and socket types in NetBSD. These are used to configure socket behavior using the setsockopt system call and for creating sockets with specific flags.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_62\n\nLANGUAGE: Go\nCODE:\n```\nconst SO_ACCEPTCONN = 2\nconst SO_ACCEPTFILTER = 4096\nconst SO_BROADCAST = 32\nconst SOCK_CLOEXEC = 268435456\nconst SOCK_FLAGS_MASK = 4026531840\nconst SOCK_NONBLOCK = 536870912\nconst SOCK_NOSIGPIPE = 1073741824\nconst SOCK_RDM = 4\n```\n\n----------------------------------------\n\nTITLE: Network Interface Type Constants - NetBSD ARM64\nDESCRIPTION: System constants that define different types of network interfaces for NetBSD ARM64. These constants are used to identify the type of network interface in system calls and network configuration.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_128\n\nLANGUAGE: Go\nCODE:\n```\nconst IFT_ETHER = 6\nconst IFT_FDDI = 15\nconst IFT_ISDN = 63\nconst IFT_LOOP = 24\nconst IFT_IEEE80211 = 71\nconst IFT_L2VLAN = 135\nconst IFT_GIF = 240\nconst IFT_FAITH = 242\nconst IFT_IEEE1394 = 144\nconst IFT_INFINIBAND = 199\n```\n\n----------------------------------------\n\nTITLE: Testing Script for Loopvar Experiment\nDESCRIPTION: Shell script used to test the loopvar experiment with inlining. It builds the code with specific flags to enable loop variable reporting and checks for expected error messages in the stderr output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_shorten_pkg.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nenv GOEXPERIMENT=loopvar\ngo build -gcflags=inlines/a=-d=loopvar=2 .\nstderr ^\\.[\\\\/]b[\\\\/]b\\.go:12:6:.*loop.inlined.into.a[\\\\/]a\\.go\nstderr ^\\.[\\\\/]b[\\\\/]b\\.go:12:9:.*loop.inlined.into.a[\\\\/]a\\.go\n```\n\n----------------------------------------\n\nTITLE: Defining the Go module `golang.org/toolchain` (.mod)\nDESCRIPTION: This snippet, found within a `.mod` file, defines the module path as `golang.org/toolchain`. This file format is part of the Go module system, likely used here in a testing or specific build context alongside the standard `go.mod`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.illumos-amd64.txt#2025-04-22_snippet_0\n\nLANGUAGE: gomod\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Defining Module and Packages - Go\nDESCRIPTION: This Go code defines the module example and encapsulates packages p, q, and r. These snippets illustrate how import cycles can occur, with package files referencing each other indirectly, leading to errors when running tests. The module requires Go version 1.20.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_test_cycle.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example\ngo 1.20\n```\n\nLANGUAGE: go\nCODE:\n```\npackage p\n```\n\nLANGUAGE: go\nCODE:\n```\npackage p\nimport \"example/q\"\n```\n\nLANGUAGE: go\nCODE:\n```\npackage q\nimport \"example/r\"\n```\n\nLANGUAGE: go\nCODE:\n```\npackage r\nimport \"example/p\"\n```\n\n----------------------------------------\n\nTITLE: Testing Go Build with Active Fossil Repository\nDESCRIPTION: Verifies that Go build includes VCS information (revision, commit time, modification status) when building from an active Fossil repository with commits.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_fossil.txt#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nexec fossil open ../repo.fossil -f\nexec fossil add a README\nexec fossil commit -m 'initial commit'\ncd a\ngo install\ngo version -m $GOBIN/a$GOEXE\nstdout '^\\tbuild\\tvcs=fossil\\n'\nstdout '^\\tbuild\\tvcs.revision='\nstdout '^\\tbuild\\tvcs.time='\nstdout '^\\tbuild\\tvcs.modified=false$'\nrm $GOBIN/a$GOEXE\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level with Standard Logger - log/slog - Go\nDESCRIPTION: SetLogLoggerLevel(Level) Level function allows adjusting and retrieving the log level for slog's compatibility with the standard library log.Logger. Accepts a Level parameter, sets the global or logger level, and returns the previous level.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_18\n\nLANGUAGE: Go\nCODE:\n```\nfunc SetLogLoggerLevel(Level) Level\n```\n\n----------------------------------------\n\nTITLE: Defining Priority and Protection Constants in Go for NetBSD ARM64\nDESCRIPTION: This snippet defines priority and memory protection constants for NetBSD ARM64. These constants are used in process management, memory mapping, and I/O scheduling operations through the syscall package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_48\n\nLANGUAGE: Go\nCODE:\n```\nconst PRI_IOFLUSH = 124\nconst PRIO_PGRP = 1\nconst PRIO_PROCESS = 0\nconst PRIO_USER = 2\nconst PROT_EXEC = 4\nconst PROT_NONE = 0\nconst PROT_READ = 1\nconst PROT_WRITE = 2\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests with Coverage and Race Detection\nDESCRIPTION: This shell script navigates through different package directories and runs Go tests with coverage and race detection. It uses the -cover, -coverpkg, and -race flags to enable comprehensive testing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_empty.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n[!race] skip\n\ncd $GOPATH/src/empty/pkg\ngo test -cover -coverpkg=. -race\n\n[short] stop # Only run first case in short mode\n\ncd $GOPATH/src/empty/test\ngo test -cover -coverpkg=. -race\n\ncd $GOPATH/src/empty/xtest\ngo test -cover -coverpkg=. -race\n\ncd $GOPATH/src/empty/pkgtest\ngo test -cover -coverpkg=. -race\n\ncd $GOPATH/src/empty/pkgxtest\ngo test -cover -coverpkg=. -race\n\ncd $GOPATH/src/empty/pkgtestxtest\ngo test -cover -coverpkg=. -race\n\ncd $GOPATH/src/empty/testxtest\ngo test -cover -coverpkg=. -race\n```\n\n----------------------------------------\n\nTITLE: Testing Package F Type Methods\nDESCRIPTION: Defines the F type and its methods for fuzzing-based testing in Go. Includes methods for test control flow, logging, cleanup, and environment management.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.18.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ntype F struct\nfunc (*F) Fuzz(interface{})\nfunc (*F) Helper()\nfunc (*F) Name() string\nfunc (*F) TempDir() string\n```\n\n----------------------------------------\n\nTITLE: Resource Usage Struct for darwin-arm64\nDESCRIPTION: Definition of the Rusage struct used to get resource usage information for processes on darwin-arm64 platforms, including CPU time, memory usage, and I/O operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_132\n\nLANGUAGE: go\nCODE:\n```\ntype Rusage struct {\n\tUtime Timeval\n\tStime Timeval\n\tMaxrss int64\n\tIxrss int64\n\tIdrss int64\n\tIsrss int64\n\tMinflt int64\n\tMajflt int64\n\tNswap int64\n\tInblock int64\n\tOutblock int64\n\tMsgsnd int64\n\tMsgrcv int64\n\tNsignals int64\n\tNvcsw int64\n\tNivcsw int64\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IP Option Constants in Go for NetBSD ARM64 CGO\nDESCRIPTION: This snippet defines constants for various IP options used in network programming. These constants are specific to the syscall package for NetBSD on ARM64 architecture with CGO enabled.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_33\n\nLANGUAGE: Go\nCODE:\n```\nconst IP_RECVDSTADDR = 7\nconst IP_RECVIF = 20\nconst IP_RECVOPTS = 5\nconst IP_RECVRETOPTS = 6\nconst IP_RECVTTL = 23\nconst IP_RETOPTS = 8\nconst IP_RF = 32768\nconst IP_TOS = 3\nconst IP_TTL = 4\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module 'coverdep' (go.mod)\nDESCRIPTION: This `go.mod` file declares a Go module named 'coverdep'. It specifies that the module requires Go version 1.16 or later. This file is essential for managing dependencies and build properties within the Go ecosystem.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_dash_c.txt#2025-04-22_snippet_1\n\nLANGUAGE: gomod\nCODE:\n```\n-- go.mod --\nmodule coverdep\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Module Declaration in go.mod File\nDESCRIPTION: Standard Go module declaration in go.mod file specifying the module name.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_indirect_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule patch.example.com/indirect\n```\n\n----------------------------------------\n\nTITLE: System Control and Information Functions in syscall Package for NetBSD ARM64\nDESCRIPTION: These functions provide system control and configuration operations, including sysctl for querying and modifying kernel parameters at runtime.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_80\n\nLANGUAGE: Go\nCODE:\n```\nfunc Sysctl(string) (string, error)\nfunc SysctlUint32(string) (uint32, error)\nfunc Settimeofday(*Timeval) error\nfunc Sync() error\nfunc Pathconf(string, int) (int, error)\nfunc Nanosleep(*Timespec, *Timespec) error\nfunc Umask(int) int\nfunc RouteRIB(int, int) ([]uint8, error)\nfunc ParseRoutingMessage([]uint8) ([]RoutingMessage, error)\nfunc ParseRoutingSockaddr(RoutingMessage) ([]Sockaddr, error)\n```\n\n----------------------------------------\n\nTITLE: Internal Test Implementation\nDESCRIPTION: Internal test file demonstrating imports within the same package with basic test function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_list_issue11977.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage t\n\nimport _ \"vendor.org/p\"\nimport _ \"vendor.org/p1\"\nimport \"testing\"\n\nfunc TestNop(t *testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Memory Protection Constants for OpenBSD in Go\nDESCRIPTION: Defines memory protection constants used with mprotect() system call on OpenBSD. These constants control access permissions for memory pages.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_53\n\nLANGUAGE: Go\nCODE:\n```\nconst PROT_NONE = 0         // No access\nconst PROT_READ = 1         // Pages can be read\nconst PROT_WRITE = 2        // Pages can be written\nconst PROT_EXEC = 4         // Pages can be executed\n```\n\n----------------------------------------\n\nTITLE: Testing Octal Escape Sequence Matching\nDESCRIPTION: Tests various octal escape sequences (\\141, \\060, etc.) for character matching. Shows how octal escapes match corresponding ASCII characters.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_33\n\nLANGUAGE: go\nCODE:\n```\n\"\\\\141\"\n-;-;-;-\n0-1;0-1;0-1;0-1\n\"^(?:\\\\141)$\"\n-;-;-;-\n0-1;0-1;0-1;0-1\n\"^(?:\\\\141)\"\n-;-;-;-\n0-1;0-1;0-1;0-1\n\"(?:\\\\141)$\"\n-;-;-;-\n0-1;0-1;0-1;0-1\n```\n\n----------------------------------------\n\nTITLE: Environment Setup and Build Command\nDESCRIPTION: Shell command to disable Go modules and attempt building package with non-canonical imports\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/noncanonical_import.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=off\\n\\n! go build canonical/d\n```\n\n----------------------------------------\n\nTITLE: Defining Module Name in go.mod File\nDESCRIPTION: Specifies the module name in the go.mod file for the Go toolchain package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.plan9-386.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Basic Go module declaration\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/fips.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Testing Go Package with Assembly Function Coverage\nDESCRIPTION: Shell commands that run Go tests with coverage analysis on a package containing both Go and assembly code. It verifies that the Go function 'g' shows 100% coverage while the assembly function 'f' is excluded from coverage metrics.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_asm.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo test -outputdir=$WORK -coverprofile=cover.out coverasm\ngo tool cover -func=$WORK/cover.out\nstdout '\\tg\\t*100.0%' # Check g is 100% covered.\n! stdout '\\tf\\t*[0-9]' # Check for no coverage on the assembly function\n```\n\n----------------------------------------\n\nTITLE: Implementation of Package D without Tests\nDESCRIPTION: Package 'd' containing a Go implementation but no tests. It defines a constant FortyTwo and a function DFunc() that returns the constant.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverpkg_partial.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage d\n\nconst FortyTwo = 42\n\nfunc DFunc() int {\n  return FortyTwo\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Linker Output Reproducibility with Different GOMAXPROCS\nDESCRIPTION: This shell script builds the cmd/gofmt package with different GOMAXPROCS values and compares the resulting executables to ensure consistent linker output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/repro_build.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Check that goroutine scheduling does not affect linker output.\nenv GOMAXPROCS=16\ngo build -a -o gofmt16.exe cmd/gofmt\nenv GOMAXPROCS=17\ngo build -a -o gofmt17.exe cmd/gofmt\ncmp -q gofmt16.exe gofmt17.exe\nenv GOMAXPROCS=18\ngo build -a -o gofmt18.exe cmd/gofmt\ncmp -q gofmt16.exe gofmt18.exe\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module configuration file defining dependencies on quote/v2 and sampler packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709162749-b44a0b17b2d1.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule rsc.io/quote\n\nrequire (\n\trsc.io/quote/v2 v2.0.1\n\trsc.io/sampler v1.3.0\n)\n```\n\n----------------------------------------\n\nTITLE: Embedding Multiple Files into String and Byte Slice in Go\nDESCRIPTION: This code snippet attempts to embed multiple files (x.go and go.mod) into both a string variable and a byte slice variable using the //go:embed directive. This is intended to cause a compiler error due to multiple files being embedded into single variables.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/testdata/script/embedbad.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage p\n\nimport _ \"embed\"\n\n//go:embed x.go go.mod\nvar s string\n\n//go:embed x.go go.mod\nvar b []byte\n```\n\n----------------------------------------\n\nTITLE: Defining File Event Notification Constants in Go for NetBSD ARM64\nDESCRIPTION: File and process event notification flags for kqueue. These constants define events that can be monitored through the kqueue/kevent mechanism.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_45\n\nLANGUAGE: go\nCODE:\n```\nconst NOTE_ATTRIB = 8\nconst NOTE_CHILD = 4\nconst NOTE_DELETE = 1\nconst NOTE_EXEC = 536870912\nconst NOTE_EXIT = 2147483648\nconst NOTE_EXTEND = 4\nconst NOTE_FORK = 1073741824\nconst NOTE_LINK = 16\nconst NOTE_LOWAT = 1\nconst NOTE_PCTRLMASK = 4026531840\nconst NOTE_PDATAMASK = 1048575\n```\n\n----------------------------------------\n\nTITLE: Specifying Go Toolchain Version Identifier\nDESCRIPTION: This line identifies the specific Go toolchain version being used, including the base version (go1.18.1) and the target platform (linux-amd64). It's likely part of a metadata or configuration file indicating which toolchain is active or required.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.18.1.linux-amd64.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngolang.org/toolchain v0.0.1-go1.18.1.linux-amd64\n```\n\n----------------------------------------\n\nTITLE: Adding Unicode 15.0.0 Support in unicode Package\nDESCRIPTION: This snippet updates the unicode package to support Unicode version 15.0.0. It introduces new RangeTable variables for various scripts including Cypro_Minoan, Kawi, Nag_Mundari, Old_Uyghur, Tangsa, Toto, and Vithkuqi.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.21.txt#2025-04-22_snippet_13\n\nLANGUAGE: Go\nCODE:\n```\nconst Version = \"15.0.0\"\n\nvar Cypro_Minoan *RangeTable\nvar Kawi *RangeTable\nvar Nag_Mundari *RangeTable\nvar Old_Uyghur *RangeTable\nvar Tangsa *RangeTable\nvar Toto *RangeTable\nvar Vithkuqi *RangeTable\n```\n\n----------------------------------------\n\nTITLE: File Path Printer Implementation in Overlay\nDESCRIPTION: Go program that uses runtime.Caller to get the filename of the current file and print it. Used to test how overlays affect file paths in runtime information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_overlay.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"path/filepath\"\n\t\"runtime\"\n)\n\nfunc main() {\n\t_, file, _, _ := runtime.Caller(0)\n\n\t// Since https://golang.org/cl/214286, the runtime's debug paths are\n\t// slash-separated regardless of platform, so normalize them to system file\n\t// paths.\n\tfmt.Println(filepath.FromSlash(file))\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module M\nDESCRIPTION: Defines the Go module named 'M' and specifies the minimum required Go version as 1.21. This `go.mod` file establishes the root of the test project's module structure, necessary for resolving imports like 'M/a'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_single_vs_multiple.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n-- go.mod --\nmodule M\n\ngo 1.21\n```\n\n----------------------------------------\n\nTITLE: Testing Go 1.18 Feature Compatibility with go1.10 Build Constraint\nDESCRIPTION: This snippet demonstrates a Go program with a go1.10 build constraint that uses the 'any' type, which was introduced in Go 1.18. It tests how the compiler handles this version mismatch in GOPATH mode.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_issue68658.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n//go:build go1.10\n\npackage p\n\nimport \"fmt\"\n\nfunc main() {\n\tvar x any  // any was added in Go 1.18\n\tfmt.Println(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sysctlnode struct for NetBSD ARM64 in syscall package\nDESCRIPTION: Definition of the Sysctlnode struct in the syscall package for NetBSD ARM64 architecture. This struct is used for interacting with the sysctl management information base (MIB) in NetBSD.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_165\n\nLANGUAGE: go\nCODE:\n```\ntype Sysctlnode struct {\n\tFlags uint32\n\tNum int32\n\tName [32]int8\n\tVer uint32\n\tX__rsvd uint32\n\tUn [16]uint8\n\tX_sysctl_size [8]uint8\n\tX_sysctl_func [8]uint8\n\tX_sysctl_parent [8]uint8\n\tX_sysctl_desc [8]uint8\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Indirect Import\nDESCRIPTION: Defines a Go module that indirectly imports a package from example.com/retract/incompatible, demonstrating version selection differences between Go 1.16 and 1.17.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_incompatible.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// Module m indirectly imports a package from\n// example.com/retract/incompatible. Its selected version of\n// that module is lower under Go 1.17 semantics than under Go 1.16.\nmodule example.com/m\n\ngo 1.17\n\nreplace (\n\texample.net/lazy v0.1.0 => ./lazy\n\texample.net/requireincompatible v0.1.0 => ./requireincompatible\n)\n\nrequire example.net/lazy v0.1.0\n\nrequire example.com/retract/incompatible v1.0.0 // indirect\n```\n\n----------------------------------------\n\nTITLE: Comparing Actual vs. Expected Output (Shell)\nDESCRIPTION: Uses the 'cmp' command to compare the standard output (stdout) generated by the preceding 'go list' command against the content defined in the 'want' section. This step validates whether the listed dependencies match the expected outcome.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_split_main.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncmp stdout want\n```\n\n----------------------------------------\n\nTITLE: Testing Go Vendor Consistency with Module Replacement\nDESCRIPTION: A shell script that tests Go's vendor consistency check behavior when one main module replaces another. It demonstrates that removing a replace directive causes consistency checks to fail.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_main_module_replaced.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo work vendor\ngo list all # make sure the consistency checks pass\n! stderr .\n\n# Removing the replace causes consistency checks to fail\ncp a_go_mod_no_replace a/go.mod\n! go list all # consistency checks fail\nstderr 'example.com/b@v0.0.0: is marked as replaced in vendor/modules.txt, but not replaced in the workspace'\n```\n\n----------------------------------------\n\nTITLE: Defining Termios Structure in Go for NetBSD ARM\nDESCRIPTION: This structure defines the terminal I/O settings for NetBSD ARM systems. It includes flags for input, output, control, and local modes, as well as special control characters and speed settings.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_32\n\nLANGUAGE: Go\nCODE:\n```\ntype Termios struct {\n\tIflag  uint32\n\tOflag  uint32\n\tCflag  uint32\n\tLflag  uint32\n\tCc     [20]uint8\n\tIspeed int32\n\tOspeed int32\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Package 'a' in Go\nDESCRIPTION: Defines package `a` within module `M`. It contains a single exported function `AFunc` that returns the integer 42. This package serves as a dependency for the `main` package in the test setup.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_single_vs_multiple.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n-- a/a.go --\npackage a\n\nfunc AFunc() int {\n\treturn 42\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Packages with Directory Context in Shell\nDESCRIPTION: Performs `go test` with the `-C` option to specify directories, illustrating potential errors if the `-C` flag is not in the correct position. It requires Go installed with testable packages available.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/chdir.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo test -C ../strings -n\nstderr 'strings\\.test'\n! go test -n -C ../strings\nstderr '^invalid value \"../strings\" for flag -C: -C flag must be first flag on command line$'\n```\n\n----------------------------------------\n\nTITLE: Test Only Package Implementation\nDESCRIPTION: Similar test function in a separate test-only package that verifies the absence of VCS settings in build info. Implements the same logic as the main package test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_buildvcs.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"runtime/debug\"\n\t\"strings\"\n\t\"testing\"\n)\n\nfunc TestDetail(t *testing.T) {\n\tbi, ok := debug.ReadBuildInfo()\n\tif !ok {\n\t\tt.Fatal(\"BuildInfo not present\")\n\t}\n\tfor _, s := range bi.Settings {\n\t\tif strings.HasPrefix(s.Key, \"vcs.\") {\n\t\t\tt.Fatalf(\"unexpected VCS setting: %s=%s\", s.Key, s.Value)\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Dependency Upgrade\nDESCRIPTION: This snippet tests the behavior of 'go get -u' command for upgrading dependencies in a Go module. It checks if the command correctly upgrades the 'rsc.io/quote' package when it's used in the code.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_indirect.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo get -u\ngo list -m all\nstdout 'quote v1.5.2$'\ngrep 'rsc.io/quote v1.5.2$' go.mod\n```\n\n----------------------------------------\n\nTITLE: Testing Start Anchor with \\B and Capturing Groups in Go Regexps\nDESCRIPTION: Tests patterns that combine start-of-string anchors (^) with non-word boundary assertions (\\B) and capturing groups. These tests verify how these elements interact for matching at the beginning of strings.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_12\n\nLANGUAGE: regexp\nCODE:\n```\n^\\B(fo|foo)\\B\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:^\\B(fo|foo)\\B)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:^\\B(fo|foo)\\B)\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:^\\B(fo|foo)\\B)$\n```\n\n----------------------------------------\n\nTITLE: Verifying GOMIPS=softfloat behavior after unset\nDESCRIPTION: This snippet tests Go compilation with GOMIPS set back to softfloat after being unset. It verifies that floating point registers are still not used.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_gomips.txt#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n# Building with GOMIPS should still not use floating point registers.\nenv GOMIPS=softfloat\ngo build -gcflags=-S f.go\n! stderr ADDD.F[0-9]+,.F[0-9]+,.F[0-9]+\n```\n\n----------------------------------------\n\nTITLE: Preventing Module Import of Standard Library Internal Packages\nDESCRIPTION: Attempts to get the `./fromstd` package (which imports `internal/testenv`) and build it. The build (`! go build`) is expected to fail because standard library internal packages cannot be imported by external modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# Internal packages in the standard library should not leak into modules.\ngo get ./fromstd\n! go build ./fromstd\nstderr 'use of internal package internal/testenv not allowed'\n```\n\n----------------------------------------\n\nTITLE: Testing go get for Mismatched Major Version Without go.mod in Go\nDESCRIPTION: This snippet tests that 'go get' for a mismatched major version without a go.mod file should resolve to the equivalent +incompatible version, not a pseudo-version with a different major version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_version.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ncp go.mod.orig go.mod\ngo get github.com/pierrec/lz4@v2.0.5\ngo list -m github.com/pierrec/lz4\nstdout 'github.com/pierrec/lz4 v2.0.5\\+incompatible'\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Go Module\nDESCRIPTION: This go.mod file defines a simple module 'example.com/dep' without any dependencies or replacements.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace_main_module.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/dep\n```\n\n----------------------------------------\n\nTITLE: Listing Go Modules\nDESCRIPTION: Lists all modules and checks for the presence of the insecure module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/get_insecure.txt#2025-04-22_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ngo list -m ...\nstdout 'insecure.go-get-issue'\n```\n\n----------------------------------------\n\nTITLE: Go Toolchain Module Declaration in .mod File\nDESCRIPTION: Defines the module name in the .mod file, specifying that this is the golang.org/toolchain module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-riscv64.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Module Q Configuration\nDESCRIPTION: Module definition for example.com/q, which is a dependency of module B.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_modules_txt_consistent.txt#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/q\n\ngo 1.21\n```\n\n----------------------------------------\n\nTITLE: Minimal Go benchmark test\nDESCRIPTION: A minimal Go benchmark test file with an empty benchmark function used to test the output formatting of 'go test -bench'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_benchmark_labels.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage bench\n\nimport \"testing\"\n\nfunc Benchmark(b *testing.B) {\n}\n```\n\n----------------------------------------\n\nTITLE: Package Variable Definition\nDESCRIPTION: Definition of a package variable Text that is modified through linker flags during tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cd_gopath_different.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage pkg\n\nvar Text = \"unset\"\n```\n\n----------------------------------------\n\nTITLE: Module B2 Configuration\nDESCRIPTION: Go.mod file for the second replacement of module 'b' (v0.2.0-unused) which requires module 'c' at version v0.2.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_unused.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/b\nrequire example.com/c v0.2.0\n```\n\n----------------------------------------\n\nTITLE: Manually Adding Dependency with Go Mod Edit (Shell)\nDESCRIPTION: This command uses `go mod edit -require` to manually add the specific version `v1.0.0` of the `rsc.io/badzip` module as a requirement to the `go.mod` file. This sets up the next step to test the build process with the problematic dependency already listed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badzip.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo mod edit -require rsc.io/badzip@v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Main Package Import (a.go)\nDESCRIPTION: Main package file importing module b.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downadd_indirect.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\nimport _ \"example.com/b\"\n```\n\n----------------------------------------\n\nTITLE: Build Command Script\nDESCRIPTION: Shell commands to navigate to module directory and build the package\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gccgo_mangle.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd m/a.0\ngo build\n```\n\n----------------------------------------\n\nTITLE: Initial Go Module Definition\nDESCRIPTION: Basic go.mod file defining a module named 'x' without any dependencies\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_quote.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule x\n```\n\n----------------------------------------\n\nTITLE: Empty Go Test Files\nDESCRIPTION: These Go test files represent empty test files used in the test structure. They include both package-level tests (package p) and external tests (package p_test).\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_empty.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage p\n```\n\nLANGUAGE: Go\nCODE:\n```\npackage p_test\n```\n\n----------------------------------------\n\nTITLE: Checking Version Metadata with Untracked File\nDESCRIPTION: This snippet adds an untracked file to the directory and installs the Go binary. It verifies that the version metadata includes the 'modified=true' flag. It also checks the module path to verify the `+dirty` suffix is added.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_hg.txt#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ncp ../../outside/empty.txt .\ngo install\ngo version -m $GOBIN/a$GOEXE\nstdout '^\\tbuild\\tvcs.modified=true$'\nstdout '\\s+mod\\s+example.com/a\\s+v1.2.3\\+dirty\\s+'\nrm empty.txt\nrm $GOBIN/a$GOEXE\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module and Package Resolution\nDESCRIPTION: This snippet demonstrates a series of commands to test Go module and package resolution. It includes updating the go.mod file, getting specific versions of modules, and listing all modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_ambiguous_arg.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo mod tidy\ncp go.mod go.mod.orig\n\ngo get m/p  # @latest\ngo list -m all\nstdout '^m/p v0.3.0 '\n! stdout '^m '\n\ncp go.mod.orig go.mod\n\ngo get m/p@v0.1.0\ngo list -m all\nstdout '^m/p v0.1.0 '\n! stdout '^m '\n\ngo get m/p@v0.2.0\ngo list -m all\nstdout '^m v0.2.0 '\nstdout '^m/p v0.1.0 '\n\ngo get m/p@v0.2.0\ngo list -m all\nstdout '^m v0.2.0 '\nstdout '^m/p v0.1.0 '\n```\n\n----------------------------------------\n\nTITLE: Go Source File Importing Indirect Dependency\nDESCRIPTION: A Go source file that imports the indirect dependency using a blank identifier.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_direct_v1.1.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage direct\n\nimport _ \"patch.example.com/indirect\"\n```\n\n----------------------------------------\n\nTITLE: Defining BadHop Function in Go for Baseball Simulation\nDESCRIPTION: Declares a function 'BadHop' that takes three integer parameters and returns two booleans, two pointers to ThirdBase, and an error. This function likely simulates a bad hop scenario in baseball.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/api/testdata/src/pkg/p3/golden.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc BadHop(int, int, int) (bool, bool, *ThirdBase, *ThirdBase, error)\n```\n\n----------------------------------------\n\nTITLE: Creating Main Package with Imports\nDESCRIPTION: Defines a main package that imports the test package, creating part of a circular import scenario.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_import_main_loop.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport _ \"importmain/test\"\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Defining Darwin ARM64 Syscall Constants in Go\nDESCRIPTION: System call constant definitions for Darwin ARM64 architecture. These constants represent system call numbers used for low-level operating system interactions on macOS/Darwin platforms with ARM64 processors.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_185\n\nLANGUAGE: Go\nCODE:\n```\nconst SYS_ACCESS_EXTENDED = 284\nconst SYS_ACCT = 51\nconst SYS_ADJTIME = 140\nconst SYS_AIO_CANCEL = 316\nconst SYS_AIO_ERROR = 317\nconst SYS_AIO_FSYNC = 313\nconst SYS_AIO_READ = 318\nconst SYS_AIO_RETURN = 314\nconst SYS_AIO_SUSPEND = 315\nconst SYS_AIO_SUSPEND_NOCANCEL = 421\nconst SYS_AIO_WRITE = 319\nconst SYS_ATGETMSG = 207\nconst SYS_ATPGETREQ = 211\nconst SYS_ATPGETRSP = 212\nconst SYS_ATPSNDREQ = 209\nconst SYS_ATPSNDRSP = 210\nconst SYS_ATPUTMSG = 208\nconst SYS_ATSOCKET = 206\nconst SYS_AUDIT = 350\nconst SYS_AUDITCTL = 359\nconst SYS_AUDITON = 351\nconst SYS_AUDIT_SESSION_JOIN = 429\nconst SYS_AUDIT_SESSION_PORT = 432\nconst SYS_AUDIT_SESSION_SELF = 428\nconst SYS_BIND = 104\nconst SYS_BSDTHREAD_CREATE = 360\nconst SYS_BSDTHREAD_REGISTER = 366\nconst SYS_BSDTHREAD_TERMINATE = 361\nconst SYS_CHDIR = 12\nconst SYS_CHFLAGS = 34\nconst SYS_CHMOD = 15\nconst SYS_CHMOD_EXTENDED = 282\nconst SYS_CHOWN = 16\nconst SYS_CHROOT = 61\nconst SYS_CHUD = 185\nconst SYS_CLOSE = 6\nconst SYS_CLOSE_NOCANCEL = 399\nconst SYS_CONNECT = 98\nconst SYS_CONNECT_NOCANCEL = 409\nconst SYS_COPYFILE = 227\nconst SYS_CSOPS = 169\nconst SYS_CSOPS_AUDITTOKEN = 170\nconst SYS_DELETE = 226\nconst SYS_DUP = 41\nconst SYS_DUP2 = 90\nconst SYS_EXCHANGEDATA = 223\nconst SYS_EXECVE = 59\nconst SYS_EXIT = 1\nconst SYS_FCHDIR = 13\nconst SYS_FCHFLAGS = 35\nconst SYS_FCHMOD = 124\nconst SYS_FCHMOD_EXTENDED = 283\nconst SYS_FCHOWN = 123\nconst SYS_FCNTL = 92\nconst SYS_FCNTL_NOCANCEL = 406\nconst SYS_FDATASYNC = 187\nconst SYS_FFSCTL = 245\nconst SYS_FGETATTRLIST = 228\nconst SYS_FGETXATTR = 235\nconst SYS_FHOPEN = 248\nconst SYS_FILEPORT_MAKEFD = 431\nconst SYS_FILEPORT_MAKEPORT = 430\nconst SYS_FLISTXATTR = 241\nconst SYS_FLOCK = 131\nconst SYS_FORK = 2\nconst SYS_FPATHCONF = 192\nconst SYS_FREMOVEXATTR = 239\nconst SYS_FSCTL = 242\nconst SYS_FSETATTRLIST = 229\nconst SYS_FSETXATTR = 237\nconst SYS_FSGETPATH = 427\nconst SYS_FSTAT = 189\nconst SYS_FSTAT64 = 339\nconst SYS_FSTAT64_EXTENDED = 343\nconst SYS_FSTATFS = 158\nconst SYS_FSTATFS64 = 346\nconst SYS_FSTAT_EXTENDED = 281\nconst SYS_FSYNC = 95\nconst SYS_FSYNC_NOCANCEL = 408\nconst SYS_FTRUNCATE = 201\nconst SYS_FUTIMES = 139\nconst SYS_GETATTRLIST = 220\nconst SYS_GETAUDIT_ADDR = 357\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines a Go module named 'gencycle' with Go version 1.16 requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/generate_bad_imports.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule gencycle\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Importing Compatible Packages\nDESCRIPTION: Imports packages to ensure compatibility with the module requirements.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage compatible\n\nimport (\n\t_ \"example.com/version\"\n\t_ \"example.net/lazy\"\n)\n```\n\n----------------------------------------\n\nTITLE: P2 Package Declaration\nDESCRIPTION: Empty package declaration for p2\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_legacy_mod.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage p2\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module and Version\nDESCRIPTION: This snippet defines a Go module with its version information. It is intended for testing module compatibility and package relocation. Requires Go modules to be initialized.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_split_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/split\n```\n\n----------------------------------------\n\nTITLE: Downloading Existing SVN Module in Go\nDESCRIPTION: Tests downloading an existing module from an SVN repository using 'go mod download'. Verifies the successful download by checking for the presence of the module zip file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_svn.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo mod download vcs-test.golang.org/svn/hello.svn@000000000001\nexists $GOPATH/pkg/mod/cache/download/vcs-test.golang.org/svn/hello.svn/@v/v0.0.0-20170922011245-000000000001.zip\n```\n\n----------------------------------------\n\nTITLE: Testing Package Listing with Go Tool - Shell Script\nDESCRIPTION: This shell script segment ensures that the Go tool correctly handles wildcards in package lists. It uses '! go list ./...' to check that a package named 'badpkg' fails as expected, and then verifies with 'go list ./goodpkg...' that the valid package is listed, confirming exclusion logic. Dependencies: Go CLI must be available, and the test structure follows shell conventions. Inputs are the Go list commands, and outputs are the command status and potential errors.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_wildcard_skip_nonmatching.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Test that wildcards don\\'t look in useless directories.\\n\\n# First make sure that badpkg fails the list of \\'...\\'.\\n! go list ./...\\nstderr badpkg\\n\\n# Check that the list of \\'./goodpkg...\\' succeeds. That implies badpkg was skipped.\\ngo list ./goodpkg...\\n\n```\n\n----------------------------------------\n\nTITLE: Testing Go Run Command with Nonexistent Path\nDESCRIPTION: Shell script to verify that 'go run' handles nonexistent package paths gracefully without panicking. Tests the fix for GitHub issue #28696 where 'go run x/...' would panic when directory x didn't exist.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_wildcard.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=off\n\n# Fix for https://github.com/golang/go/issues/28696:\n# go run x/... should not panic when directory x doesn't exist.\n\n! go run nonexistent/...\nstderr '^go: no packages loaded from nonexistent/...$'\n```\n\n----------------------------------------\n\nTITLE: Declaring the Go Module Path\nDESCRIPTION: This snippet defines the module path for the Go project using the `module` directive in a `go.mod` file. It establishes `github.com/dmitshur-test/modtest5` as the canonical import path for packages within this module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/github.com_dmitshur-test_modtest5_v0.5.0-alpha.txt#2025-04-22_snippet_0\n\nLANGUAGE: go.mod\nCODE:\n```\nmodule github.com/dmitshur-test/modtest5\n```\n\n----------------------------------------\n\nTITLE: Testing Directory Access in Go Package b\nDESCRIPTION: A test function for package b that verifies the existence of a testdata directory using os.Stat. The test attempts to access a testdata file in the parent directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vendormod.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage b\n\nimport (\n\t\"os\"\n\t\"testing\"\n)\n\nfunc TestDir(t *testing.T) {\n\tif _, err := os.Stat(\"../testdata/1\"); err != nil {\n\t\tt.Fatalf(\"testdata: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Empty GOPROXY List in Go Module Fetching\nDESCRIPTION: Verifies that an error is reported when GOPROXY is not empty but contains no entries. Attempts to get golang.org/x/text package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gonoproxy.txt#2025-04-22_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nenv GOPROXY=','\n! go get golang.org/x/text\nstderr '^go: golang.org/x/text: GOPROXY list is not the empty string, but contains no entries$'\n```\n\n----------------------------------------\n\nTITLE: Importing Version Package in Lazy Module\nDESCRIPTION: Imports the version package in the lazy module to demonstrate dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage lazy\n\nimport _ \"example.com/version\"\n```\n\n----------------------------------------\n\nTITLE: Go Package with Case-Sensitive Import\nDESCRIPTION: A Go package that imports 'rsc.io/QUOTE/QUOTE' with uppercase letters to test case sensitivity in the import system. The blank import is used to create a dependency without actually using the package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_case.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage use\n\nimport _ \"rsc.io/QUOTE/QUOTE\"\n```\n\n----------------------------------------\n\nTITLE: Defining Module Dependencies for Prerelease Version in Go\nDESCRIPTION: This go.mod file for the prerelease version of example.net/a module specifies its Go version without additional dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_boost.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/a\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: Defining Lazy Module with Pruned Dependency\nDESCRIPTION: Defines a 'lazy' module that requires example.com/retract/incompatible v1.0.0 and demonstrates pruning of transitive dependencies in lazy mode.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_incompatible.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// Module lazy requires example.com/retract/incompatible v1.0.0.\n//\n// When viewed from the outside it also has a transitive dependency\n// on v2.0.0+incompatible, but in lazy mode that transitive dependency\n// is pruned out.\nmodule example.net/lazy\n\ngo 1.17\n\nexclude example.com/retract/incompatible v2.0.0+incompatible\n\nrequire (\n\texample.com/retract/incompatible v1.0.0\n\texample.net/requireincompatible v0.1.0\n)\n```\n\n----------------------------------------\n\nTITLE: Verifying Passing Test Output in Go\nDESCRIPTION: This snippet defines a passing test in Go. It's used to verify that 'go test -json' correctly reports a passing test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_panic_exit.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage pass_test\n\nimport \"testing\"\n\nfunc TestPass(t *testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Generating Go Mod File with Absolute Path\nDESCRIPTION: A Go program that generates a go.mod file containing a module replacement with an absolute path. Uses the WORK environment variable to construct the replacement path.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_replace_absolute_windows.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n//go:build ignore\npackage main\n\nimport (\n    \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n    work := os.Getenv(\"WORK\")\nfmt.Printf(`module example.com/mod\n\nrequire b.com v0.0.0\n\nreplace b.com => %s\\gopath\\src/modb\n`,  work)\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring an Empty Go Package - Go\nDESCRIPTION: Defines an empty Go package named 'subpkg' in source file x.go. Contains only the package declaration, serving as a minimal starting point or test subject for package movement or discovery. No functions, types, or other code are included.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_join_subpkg_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage subpkg\n```\n\n----------------------------------------\n\nTITLE: Line Comment Printer Utility\nDESCRIPTION: Go program that reads a list of compiled Go files and prints all line directive comments found in them. Used to verify that line information is properly maintained with overlays.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_overlay.txt#2025-04-22_snippet_20\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tcompiledGoFilesArg := os.Args[1]\n\tb, err := ioutil.ReadFile(compiledGoFilesArg)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tcompiledGoFiles := strings.Split(strings.TrimSpace(string(b)), \"\\n\")\n\tfor _, f := range compiledGoFiles {\n\t\tb, err := ioutil.ReadFile(f)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tfor _, line := range strings.Split(string(b), \"\\n\") {\n\t\t\tif strings.HasPrefix(line, \"#line\") || strings.HasPrefix(line, \"//line\") {\n\t\t\t\tfmt.Println(line)\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies in Module C v0.1.0 in Go\nDESCRIPTION: This Go file for module C v0.1.0 imports example.net/a as a blank import.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_boost.txt#2025-04-22_snippet_11\n\nLANGUAGE: Go\nCODE:\n```\npackage c\n\nimport _ \"example.net/a\"\n```\n\n----------------------------------------\n\nTITLE: Test File for FIPS 140 Build in Go\nDESCRIPTION: Defines a simple test file used to verify FIPS 140 build behavior with test compilation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/fipssnap.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\nimport \"testing\"\nfunc Test(t *testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Testing 'go list ./...' in GOPATH/src (GOPATH Mode) (Shell)\nDESCRIPTION: Changes the directory to $GOPATH/src, ensures Go module mode is off (`GO111MODULE=off`), and runs `go list ./...`. It verifies that the command lists the synthesized GOPATH import path corresponding to the current directory ($GOPATH/src), demonstrating standard GOPATH behavior outside of GOROOT.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_gofile_in_goroot.txt#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n# switch to GOPATH/src\ncd $GOPATH/src\n\n# GO111MODULE=off,GOPATH\nenv GO111MODULE=off\ngo list ./...\n[!GOOS:windows] stdout ^_$WORK/gopath/src$\n[GOOS:windows] stdout gopath/src$\n```\n\n----------------------------------------\n\nTITLE: Rational Float Precision Query - math/big - Go\nDESCRIPTION: FloatPrec() (int, bool) is a method on *Rat, exposing the float precision and whether the conversion is exact. Used to inspect the bit size needed for floating-point representations of rationals.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_19\n\nLANGUAGE: Go\nCODE:\n```\nfunc (r *Rat) FloatPrec() (int, bool)\n```\n\n----------------------------------------\n\nTITLE: Testing Case-Insensitive Character Class Matching\nDESCRIPTION: Tests case-insensitive pattern matching with the (?i) modifier on character classes. Shows how the modifier affects character class ranges and explicit character lists.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_36\n\nLANGUAGE: go\nCODE:\n```\n\"(?i)[@-A]+\"\n-;-;-;-\n-;0-3;-;0-3\n\"^(?:(?i)[@-A]+)$\"\n-;-;-;-\n-;-;-;-\n\"^(?:(?i)[@-A]+)\"\n-;-;-;-\n-;0-3;-;0-3\n\"(?:(?i)[@-A]+)$\"\n-;-;-;-\n-;-;-;-\n```\n\n----------------------------------------\n\nTITLE: Defining Linux-specific Package q\nDESCRIPTION: Creates a Linux-specific implementation of package 'q'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_all_gobuild.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\npackage q\n```\n\n----------------------------------------\n\nTITLE: Declaring Go Module with v3 Path\nDESCRIPTION: Defines a Go module with explicit v3 path in the module directive and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/v3pkg.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule vcs-test.golang.org/git/v3pkg.git/v3\n\ngo 1.13\n```\n\n----------------------------------------\n\nTITLE: Getting Version of Shared Object\nDESCRIPTION: This snippet retrieves the version information of the built shared object `external.so` using the `go version` command. It expects the standard output to match a regular expression confirming that the `go version` command correctly identifies the `.so` file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_cshared.txt#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngo version external.so\nstdout '^external.so: .+'\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Workspace in go.work\nDESCRIPTION: Defines the Go version for the workspace. This file is used to specify module dependencies and workspace configuration.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_build_no_modules.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Go List Import Testing Commands\nDESCRIPTION: Shell commands to test package import behavior using 'go list' command with and without the -compiled flag. Verifies presence of specific imports including CGO-related packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_compiled_imports.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=off\n\n[!cgo] skip\n\n# go list should report import \"C\"\ncd x\ngo list -f '{{.Imports}}'\n! stdout runtime/cgo\n! stdout unsafe\n! stdout syscall\nstdout C\nstdout unicode\nstdout unicode/utf16\n\n# go list -compiled should report imports in compiled files as well,\n# adding \"runtime/cgo\", \"unsafe\", and \"syscall\" but not dropping \"C\".\ngo list -compiled -f '{{.Imports}}'\nstdout runtime/cgo\nstdout unsafe\nstdout syscall\nstdout C\nstdout unicode\nstdout unicode/utf16\n```\n\n----------------------------------------\n\nTITLE: Defining Memory Mapping Constants for OpenBSD in Go\nDESCRIPTION: Memory mapping (MAP) constants for OpenBSD platform. These constants are used with mmap() system call to control how memory mappings are created and managed.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_37\n\nLANGUAGE: Go\nCODE:\n```\nconst MAP_ANON = 4096\nconst MAP_ANON ideal-int\nconst MAP_COPY = 4\nconst MAP_COPY ideal-int\nconst MAP_FILE = 0\nconst MAP_FILE ideal-int\nconst MAP_FIXED = 16\nconst MAP_FIXED ideal-int\nconst MAP_FLAGMASK = 8183\nconst MAP_FLAGMASK ideal-int\nconst MAP_HASSEMAPHORE = 512\nconst MAP_HASSEMAPHORE ideal-int\nconst MAP_INHERIT = 128\nconst MAP_INHERIT ideal-int\nconst MAP_INHERIT_COPY = 1\nconst MAP_INHERIT_COPY ideal-int\nconst MAP_INHERIT_DONATE_COPY = 3\nconst MAP_INHERIT_DONATE_COPY ideal-int\nconst MAP_INHERIT_NONE = 2\nconst MAP_INHERIT_NONE ideal-int\nconst MAP_INHERIT_SHARE = 0\nconst MAP_INHERIT_SHARE ideal-int\nconst MAP_NOEXTEND = 256\nconst MAP_NOEXTEND ideal-int\nconst MAP_NORESERVE = 64\nconst MAP_NORESERVE ideal-int\nconst MAP_PRIVATE = 2\nconst MAP_PRIVATE ideal-int\nconst MAP_RENAME = 32\nconst MAP_RENAME ideal-int\nconst MAP_SHARED = 1\nconst MAP_SHARED ideal-int\nconst MAP_TRYFIXED = 1024\nconst MAP_TRYFIXED ideal-int\n```\n\n----------------------------------------\n\nTITLE: Type Aliasing Utilities in go/types - Go\nDESCRIPTION: The go/types package adds support for type alias objects via NewAlias, Unalias, and new methods on *Alias. Allows creating aliases to type names, query for underlying/object, and get string representations. Supports type analysis and manipulation of Go types programmatically.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_13\n\nLANGUAGE: Go\nCODE:\n```\nfunc NewAlias(obj *TypeName, typ Type) *Alias\nfunc Unalias(typ Type) Type\nfunc (a *Alias) Obj() *TypeName\nfunc (a *Alias) String() string\nfunc (a *Alias) Underlying() Type\ntype Alias struct\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines the Go module name for the test package\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_overlay.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule test.pkg\n```\n\n----------------------------------------\n\nTITLE: Placeholder 'go' Command Script (Shell)\nDESCRIPTION: A simple shell script located at `bin/go` within the module structure (indicated by context marker `bin/go`). It acts as a placeholder for the actual 'go' command in this test toolchain, printing a specific identifier string 'go1.999testmod here!' when executed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.android-386.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Sum File (Text)\nDESCRIPTION: Defines the content of the `go.sum` file for the test scenario. It contains cryptographic hashes for specific versions of the modules (`example.com/badchain/a`, `b`, `c`) and their corresponding `go.mod` files, ensuring module authenticity and integrity during dependency resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badchain.txt#2025-04-22_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n-- go.sum --\nexample.com/badchain/a v1.0.0 h1:iJDLiHLmpQgr9Zrv+44UqywAE2IG6WkHnH4uG08vf+s=\nexample.com/badchain/a v1.0.0/go.mod h1:6/gnCYHdVrs6mUgatUYUSbuHxEY+/yWedmTggLz23EI=\nexample.com/badchain/a v1.1.0 h1:cPxQpsOjaIrn05yDfl4dFFgGSbjYmytLqtIIBfTsEqA=\nexample.com/badchain/a v1.1.0/go.mod h1:T15b2BEK+RY7h7Lr2dgS38p1pgH5/t7Kf5nQXBlcW/A=\nexample.com/badchain/b v1.0.0 h1:kjDVlBxpjQavYxHE7ECCyyXhfwsfhWIqvghfRgPktSA=\nexample.com/badchain/b v1.0.0/go.mod h1:sYsH934pMc3/A2vQZh019qrWmp4+k87l3O0VFUYqL+I=\nexample.com/badchain/b v1.1.0 h1:iEALV+DRN62FArnYylBR4YwCALn/hCdITvhdagHa0L4=\nexample.com/badchain/b v1.1.0/go.mod h1:mlCgKO7lRZ+ijwMFIBFRPCGt5r5oqCcHdhSSE0VL4uY=\nexample.com/badchain/c v1.0.0 h1:lOeUHQKR7SboSH7Bj6eIDWoNHaDQXI0T2GfaH2x9fNA=\nexample.com/badchain/c v1.0.0/go.mod h1:4U3gzno17SaQ2koSVNxITu9r60CeLSgye9y4/5LnfOE=\nexample.com/badchain/c v1.1.0 h1:VtTg1g7fOutWKHQf+ag04KLRpdMGSfQ9s9tagVtGW14=\nexample.com/badchain/c v1.1.0/go.mod h1:tyoJj5qh+qtb48sflwdVvk4R+OjPQEY2UJOoibsVLPk=\n```\n\n----------------------------------------\n\nTITLE: Main Go Module Definition\nDESCRIPTION: Main module configuration defining dependencies and module path\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_ambiguous.txt#2025-04-22_snippet_0\n\nLANGUAGE: gomod\nCODE:\n```\nmodule example.com/m\n\ngo 1.17\n\nreplace example.net/indirect v0.1.0 => ./indirect\n\nrequire example.net/indirect v0.1.0\n\nrequire example.net/ambiguous/nested v0.1.0 // indirect\n```\n\n----------------------------------------\n\nTITLE: Main Go Program\nDESCRIPTION: Minimal Go program serving as the main entry point for testing purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_tool.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Nested Go Module Definition\nDESCRIPTION: Defines a nested Go module configuration within the main repository, also using Go 1.20.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/issue61415.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule vcs-test.golang.org/git/issue61415.git/nested\n\ngo 1.20\n```\n\n----------------------------------------\n\nTITLE: Main Package with Case-Insensitive Import Collision\nDESCRIPTION: A Go file that imports two modules with names that differ only by case (example.com/Foo and example.com/foo), which will cause a build error in Go.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_collision.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t_ \"example.com/Foo\"\n\t_ \"example.com/foo\"\n)\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Defining a Go Package Library - Go\nDESCRIPTION: This minimal Go code snippet defines a package named 'lib'. It acts as a placeholder for library source code within a module and does not implement any functions or variables, serving as a template for later library development.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_tool.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage lib\\n\n```\n\n----------------------------------------\n\nTITLE: Indirect Package Implementation\nDESCRIPTION: Implementation of the indirect package with nested dependency import\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_ambiguous.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage indirect\n\nimport _ \"example.net/ambiguous/nested/pkg\"\n```\n\n----------------------------------------\n\nTITLE: Configuring file-based GOPROXY\nDESCRIPTION: Sets up a file-based GOPROXY using the download cache, with different paths for Windows and non-Windows systems.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_fileproxy_vcs_missing_issue51589.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n[GOOS:windows] env GOPROXY=file:///$WORK/gopath/pkg/mod/cache/download\n[!GOOS:windows] env GOPROXY=file://$WORK/gopath/pkg/mod/cache/download\n```\n\n----------------------------------------\n\nTITLE: Go List Command Import Cycle Detection\nDESCRIPTION: Command to list package dependencies and detect import cycles using go list with JSON output format specifications for ImportPath, Error, and DepsErrors.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_import_cycle_deps_errors.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo list -e -deps -json=ImportPath,Error,DepsErrors m/a\n```\n\n----------------------------------------\n\nTITLE: Listing Go Module Dependencies\nDESCRIPTION: Uses 'go list' to display module dependencies, demonstrating pruning of test dependencies in Go 1.16 modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version_missing.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngo list -mod=readonly all\nstdout '^example.com/dep$'\n! stdout '^example.com/testdep$'\ncp stdout list-1.txt\ncmp go.mod go.mod.orig\n```\n\n----------------------------------------\n\nTITLE: Package breaker Constant Definition\nDESCRIPTION: Defines a constant XX with value 2 in the breaker package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_breaker_v2.0.0+incompatible.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage breaker\n\nconst XX = 2\n```\n\n----------------------------------------\n\nTITLE: Empty Package Declaration\nDESCRIPTION: Minimal Go package file with only the package declaration.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_get_toolchain.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage p\n```\n\n----------------------------------------\n\nTITLE: Testing Go Workspace Version Mismatch Error\nDESCRIPTION: This snippet tests the error message when running 'go list' with a version mismatch between go.work and go.mod files. It expects a specific error message suggesting the use of 'go work use' to resolve the issue.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_implicit_go_requirement.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n! go list\nstderr 'go: module . listed in go.work file requires go >= 1.21, but go.work implicitly requires go 1.18; to update it:\\s+go work use'\n\ngo work use\ngo list\nstdout foo\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module in go.mod File\nDESCRIPTION: Standard go.mod file declaration for the Go toolchain module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.ios-arm64.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Defining Minimal Main Go Package (Go)\nDESCRIPTION: This code snippet represents the content of the file `x.go`. It declares a simple Go package named `main`, serving as a valid Go source file for testing the `go list` command alongside invalid file types.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_test_non_go_files.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n-- x.go --\npackage main\n```\n\n----------------------------------------\n\nTITLE: Implementing TestOrphanCmd for Subprocess Management in Go\nDESCRIPTION: Defines TestOrphanCmd function to create and manage a subprocess that simulates a hanging test. It sets up the environment, stdin, and stderr for the subprocess.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_timeout_stdin.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nfunc TestOrphanCmd(t *testing.T) {\n\texe, err := os.Executable()\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tcmd := exec.Command(exe)\n\tcmd.Env = append(cmd.Environ(), \"TEST_TIMEOUT_HANG=1\")\n\n\t// Hold stdin open until this (parent) process exits.\n\tif _, err := cmd.StdinPipe(); err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\t// Forward stderr to the subprocess so that it can hold the stream open.\n\tcmd.Stderr = os.Stderr\n\n\tif err := cmd.Start(); err != nil {\n\t\tt.Fatal(err)\n\t}\n\tt.Logf(\"started %v\", cmd)\n\n\t// Intentionally leak cmd when the test completes.\n\t// This will allow the test process itself to exit, but (at least on Unix\n\t// platforms) will keep the parent process's stderr stream open.\n\tgo func() {\n\t\tif err := cmd.Wait(); err != nil {\n\t\t\tos.Exit(3)\n\t\t}\n\t}()\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Module Formatting\nDESCRIPTION: Sets an environment variable MODFMT to format module information, including path and version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_incompatible.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv MODFMT='{{with .Module}}{{.Path}} {{.Version}}{{end}}'\n```\n\n----------------------------------------\n\nTITLE: Package Using 'other' Dependency (Go)\nDESCRIPTION: Defines a package that imports the 'example.net/other' package, used for testing indirect dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue47979.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\npackage useother\n\nimport _ \"example.net/other\"\n```\n\n----------------------------------------\n\nTITLE: Creating Go Test Package with Circular Import (Part 2) (Go)\nDESCRIPTION: Defines the test package `sql` in `datastore/sql/sql_test.go`. It imports the `datastore` package (`golang.org/issue45863/datastore`) using a blank identifier (`_`) for its side effects (like initialization). This import, combined with the imports in `datastore/datastore_health.go`, completes the import cycle that issue 45863 aims to diagnose correctly when test dependencies are included.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_test_cycle.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n-- datastore/sql/sql_test.go --\npackage sql\n\nimport _ \"golang.org/issue45863/datastore\"\n```\n\n----------------------------------------\n\nTITLE: Go Module Declaration\nDESCRIPTION: Simple module declaration for the foo module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule foo\n```\n\n----------------------------------------\n\nTITLE: Defining ARM64 ELF Machine Type Constant in Go\nDESCRIPTION: Defines the constant EM_AARCH64 with value 183 to represent the ARM64 machine type in ELF files.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nconst EM_AARCH64 = 183\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Environment Command in Shell\nDESCRIPTION: This shell script installs the 'env' command and sets up the PATH environment variable. It includes conditional statements for different operating systems (Windows, Plan9, and others).\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/generate_env.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# Install an env command because Windows and plan9 don't have it.\nenv GOBIN=$WORK/tmp/bin\ngo install env.go\n[GOOS:plan9] env path=$GOBIN${:}$path\n[!GOOS:plan9] env PATH=$GOBIN${:}$PATH\n\n# Test generators have access to the environment\ngo generate ./printenv.go\nstdout '^GOARCH='$GOARCH\nstdout '^GOOS='$GOOS\nstdout '^GOFILE='\nstdout '^GOLINE='\nstdout '^GOPACKAGE='\nstdout '^DOLLAR='\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Replace Directives\nDESCRIPTION: This go.mod file defines the main module and includes replace directives for example.net/a, example.net/b, and example.net/c modules, pointing them to local directories.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_extra.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nmodule example\n\ngo 1.15\n\nreplace (\n\texample.net/a v0.1.0 => ./a1\n\texample.net/b v0.1.0 => ./b1\n\texample.net/b v0.2.0 => ./b2\n\texample.net/c v0.1.0 => ./c1\n\texample.net/c v0.2.0 => ./c1\n)\n```\n\n----------------------------------------\n\nTITLE: GOVCS Configuration Test Script\nDESCRIPTION: Shell script testing various GOVCS configurations including public/private repository access, pattern matching, and VCS restrictions. Tests cover git, svn, hg, fossil, and bzr version control systems.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/govcs.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\nenv proxy=$GOPROXY\nenv GOPROXY=direct\n\n# GOVCS stops go get\nenv GOVCS='*:none'\n! go get github.com/google/go-cmp\nstderr '^go: GOVCS disallows using git for public github.com/google/go-cmp; see ''go help vcs''$'\nenv GOPRIVATE='github.com/google'\n! go get github.com/google/go-cmp\nstderr '^go: GOVCS disallows using git for private github.com/google/go-cmp; see ''go help vcs''$'\n\n# public pattern works\nenv GOPRIVATE='github.com/google'\nenv GOVCS='public:all,private:none'\n! go get github.com/google/go-cmp\nstderr '^go: GOVCS disallows using git for private github.com/google/go-cmp; see ''go help vcs''$'\n\n# private pattern works\nenv GOPRIVATE='hubgit.com/google'\nenv GOVCS='private:all,public:none'\n! go get github.com/google/go-cmp\nstderr '^go: GOVCS disallows using git for public github.com/google/go-cmp; see ''go help vcs''$'\n\n# other patterns work (for more patterns, see TestGOVCS)\nenv GOPRIVATE=\nenv GOVCS='github.com:svn|hg'\n! go get github.com/google/go-cmp\nstderr '^go: GOVCS disallows using git for public github.com/google/go-cmp; see ''go help vcs''$'\nenv GOVCS='github.com/google/go-cmp/inner:git,github.com:svn|hg'\n! go get github.com/google/go-cmp\nstderr '^go: GOVCS disallows using git for public github.com/google/go-cmp; see ''go help vcs''$'\n\n# bad patterns are reported (for more bad patterns, see TestGOVCSErrors)\nenv GOVCS='git'\n! go get github.com/google/go-cmp\nstderr '^go: github.com/google/go-cmp: malformed entry in GOVCS \\(missing colon\\): \"git\"$'\n\nenv GOVCS=github.com:hg,github.com:git\n! go get github.com/google/go-cmp\nstderr '^go: github.com/google/go-cmp: unreachable pattern in GOVCS: \"github.com:git\" after \"github.com:hg\"$'\n\n# bad GOVCS patterns do not stop commands that do not need to check VCS\ngo list\nenv GOPROXY=$proxy\ngo get rsc.io/quote # ok because used proxy\nenv GOPROXY=direct\n\n# svn is disallowed by default\nenv GOPRIVATE=\nenv GOVCS=\n! go get rsc.io/nonexist.svn/hello\nstderr '^go: rsc.io/nonexist.svn/hello: GOVCS disallows using svn for public rsc.io/nonexist.svn; see ''go help vcs''$'\n\n# fossil is disallowed by default\nenv GOPRIVATE=\nenv GOVCS=\n! go get rsc.io/nonexist.fossil/hello\nstderr '^go: rsc.io/nonexist.fossil/hello: GOVCS disallows using fossil for public rsc.io/nonexist.fossil; see ''go help vcs''$'\n\n# bzr is disallowed by default\nenv GOPRIVATE=\nenv GOVCS=\n! go get rsc.io/nonexist.bzr/hello\nstderr '^go: rsc.io/nonexist.bzr/hello: GOVCS disallows using bzr for public rsc.io/nonexist.bzr; see ''go help vcs''$'\n\n# git is OK by default\nenv GOVCS=\nenv GONOSUMDB='*'\n[net:rsc.io] [git] [!short] go get rsc.io/sampler\n\n# hg is OK by default\nenv GOVCS=\nenv GONOSUMDB='*'\n[exec:hg] [!short] go get vcs-test.golang.org/go/custom-hg-hello\n\n# git can be disallowed\nenv GOVCS=public:hg\n! go get rsc.io/nonexist.git/hello\nstderr '^go: rsc.io/nonexist.git/hello: GOVCS disallows using git for public rsc.io/nonexist.git; see ''go help vcs''$'\n\n# hg can be disallowed\nenv GOVCS=public:git\n! go get rsc.io/nonexist.hg/hello\nstderr '^go: rsc.io/nonexist.hg/hello: GOVCS disallows using hg for public rsc.io/nonexist.hg; see ''go help vcs''$'\n```\n\n----------------------------------------\n\nTITLE: Testing Import of 'cmd' Meta-Package in Go\nDESCRIPTION: This snippet tests the import of the 'cmd' meta-package in Go. It expects the command to fail and produce a specific error message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_meta.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n! go list -deps ./importcmd\n! stderr 'internal error'\nstderr '^importcmd[/\\\\]x.go:3:8: \"cmd\" is not an importable package; see ''go help packages''$'\n```\n\n----------------------------------------\n\nTITLE: Testing Various 'go mod' Commands Outside Module\nDESCRIPTION: Verifies that various 'go mod' commands fail when executed outside of a module context.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_outside.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n! go mod graph\nstderr '^go: go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n\n! go mod why -m example.com/version\nstderr '^go: go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n\n! go mod tidy\nstderr '^go: go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n! go mod edit -fmt\nstderr '^go: go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n! go mod edit -require example.com/version@v1.0.0\nstderr '^go: go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n```\n\n----------------------------------------\n\nTITLE: Simple p2 Package Definition\nDESCRIPTION: A minimal Go package definition for p2 with no imports, serving as a dependency for the repository structure.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/modlegacy1-old.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage p2\n```\n\n----------------------------------------\n\nTITLE: Storing Go Module Version Metadata (JSON)\nDESCRIPTION: This JSON snippet represents the content typically found in a `.info` file associated with a specific Go module version, particularly a pseudo-version. It contains metadata like the full version string (`Version`), short commit hash (`Short`), and timestamp (`Time`), used by Go tooling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_pseudoupgrade_v0.0.0-20190430073000-30950c05d534.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.0.0-20190430073000-30950c05d534\",\"Name\":\"v0.0.0-20190430073000-30950c05d534\",\"Short\":\"30950c05d534\",\"Time\":\"2019-04-30T07:30:00Z\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Git Environment Variables for Repository Creation\nDESCRIPTION: Sets Git environment variables for author and committer information before initializing a repository. This ensures consistent authorship information across all commits in the test repository.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/modlegacy1-new.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GIT_AUTHOR_NAME='Russ Cox'\nenv GIT_AUTHOR_EMAIL='rsc@golang.org'\nenv GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME\nenv GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL\n\ngit init\n\nat 2018-04-25T11:00:57-04:00\ngit add go.mod new.go p1 p2\ngit commit -m 'initial commit'\ngit branch -m master\n\ngit log --oneline --decorate=short\ncmp stdout .git-log\n```\n\n----------------------------------------\n\nTITLE: Including Header in Vendored C Source (C)\nDESCRIPTION: This C source file (`foo.c`) within the vendored module simply includes the `bar.h` header file. It serves as part of the C dependency chain for the Go program, ensuring necessary definitions are linked.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_trimpath_macro.txt#2025-04-22_snippet_5\n\nLANGUAGE: C\nCODE:\n```\n#include \"bar.h\"\n```\n\n----------------------------------------\n\nTITLE: Import V2 Module in Go Package\nDESCRIPTION: This Go code snippet imports version 2 of the rsc.io/quote module within a package. This step checks and allows validation of the module import process.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_multirepo.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\npackage quote\nimport _ \"rsc.io/quote/v2\"\n```\n\n----------------------------------------\n\nTITLE: Main Package Importing Dependencies (Go)\nDESCRIPTION: Defines the main package that imports the 'example.net/a' package, triggering the dependency chain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue47979.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\npackage issue\n\nimport _ \"example.net/a\"\n```\n\n----------------------------------------\n\nTITLE: Listing Standard Packages and Excluding Vendor Directories with Go List in Shell\nDESCRIPTION: Executes `go list ./...` (implicitly within `$GOROOT/src` from the previous step) to list all standard packages recursively. It checks the standard output (`stdout`) to confirm that standard command packages like `cmd/compile` are included, while explicitly asserting (`! stdout`) that packages within potential top-level or `cmd`-specific vendor directories (`vendor/golang.org`, `cmd/vendor`) are excluded from this default recursive listing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_std.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Standard packages should include cmd, but not cmd/vendor.\ngo list ./...\nstdout cmd/compile\n! stdout vendor/golang.org\n! stdout cmd/vendor\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module for Example Test\nDESCRIPTION: Declares the Go module 'example' and specifies the Go version 1.20 as a requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_timeout_stdin.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule example\n\ngo 1.20\n```\n\n----------------------------------------\n\nTITLE: Testing Missing Module Declaration with go list\nDESCRIPTION: This shell command tests that executing `go list` in a directory with a `go.mod` file missing a module declaration produces an error. It checks for correct error messages related to missing module declarations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_path.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncd $WORK/gopath/src/mod\n! go list .\nstderr '^go: error reading go.mod: missing module declaration. To specify the module path:\\n\\tgo mod edit -module=example.com/mod$'\n```\n\n----------------------------------------\n\nTITLE: Module Checksum Configuration\nDESCRIPTION: Go.sum file containing checksums for module dependencies including retracted versions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nexample.com/retract v1.0.0-bad h1:liAW69rbtjY67x2CcNzat668L/w+YGgNX3lhJsWIJis=\nexample.com/retract v1.0.0-bad/go.mod h1:0DvGGofJ9hr1q63cBrOY/jSY52OwhRGA0K47NE80I5Y=\nexample.com/retract/self/prev v1.1.0 h1:0/8I/GTG+1eJTFeDQ/fUbgrMsVHyKhh3Z8DSZp1fuA=\nexample.com/retract/self/prev v1.1.0/go.mod h1:xl2EcklWuZZHVtHWcpzfSJQmnzAGpKZYpA/Wto7SZN4=\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Vendoring Behavior\nDESCRIPTION: This snippet demonstrates the process of vendoring dependencies and checking for the presence of go.sum files in vendored packages. It compares the behavior between Go 1.16 and Go 1.17.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_gomod.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo mod vendor\ncd vendor/example.net/x\ngo list all\n! stdout '^example.net/m'\nstdout '^example.net/x$'\nexists ./go.sum\n\ncd ../../..\ngo mod edit -go=1.17\ngo mod vendor\ncd vendor/example.net/x\ngo list all\nstdout '^example.net/m$'\nstdout '^example.net/x$'\n! exists ./go.sum\n```\n\n----------------------------------------\n\nTITLE: Internal CGO Usage Sample Program in Go\nDESCRIPTION: A Go program utilizing the 'runtime/cgo' package to demonstrate how internal CGO usage affects linking. It creates and deletes a CGO handle for a simple string, originally intended to test internal linking without forcing external linking.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_suspect_flag_force_external.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"runtime/cgo\"\n)\n\nfunc main() {\n\tq := \"hello\"\n\th := cgo.NewHandle(q)\n\th.Delete()\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Default GODEBUG Settings in Go Module File\nDESCRIPTION: Demonstrates how to set default GODEBUG values in a go.mod or go.work file. This example sets the default Go version to 1.21, enables old panic(nil) behavior, and disables async timer channels.\nSOURCE: https://github.com/golang/go/blob/master/doc/godebug.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngodebug (\n\tdefault=go1.21\n\tpanicnil=1\n\tasynctimerchan=0\n)\n```\n\n----------------------------------------\n\nTITLE: Filesystem integration for text/template package\nDESCRIPTION: Functions for parsing templates directly from a filesystem (fs.FS). Allows loading templates from any source that implements the fs.FS interface like embedded files, memory filesystems, or real filesystems.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nfunc ParseFS(fs.FS, ...string) (*Template, error)\nmethod (*Template) ParseFS(fs.FS, ...string) (*Template, error)\n```\n\n----------------------------------------\n\nTITLE: Defining Terminal I/O Structure in Go for NetBSD\nDESCRIPTION: This snippet defines the Termios struct for terminal I/O operations on NetBSD. It includes fields for various terminal settings such as input and output flags, control flags, and special characters.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_27\n\nLANGUAGE: Go\nCODE:\n```\ntype Termios struct {\n    Iflag uint32\n    Oflag uint32\n    Cflag uint32\n    Lflag uint32\n    Cc [20]uint8\n    Ispeed int32\n    Ospeed int32\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Syntax Error Handling (GO111MODULE on)\nDESCRIPTION: This snippet tests the Go test command's behavior when encountering a syntax error in a test file with GO111MODULE set to on. It changes to the syntaxerror directory and verifies that the error is diagnosed and that the test fails.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_syntax_error_says_fail.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nenv GO111MODULE=on\ncd syntaxerror\n! go test syntaxerror\nstderr 'x_test.go:' # check that the error is diagnosed\nstdout 'FAIL' # check that go test says FAIL\n```\n\n----------------------------------------\n\nTITLE: HTML Template for Missing SSH Git Repository\nDESCRIPTION: HTML template with a go-import meta tag for a non-existent SSH Git repository. This defines a module path pointing to a Git repo using SSH protocol that doesn't exist at the specified location.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/go/missingrepo.txt#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<meta name=\"go-import\" content=\"vcs-test.golang.org/go/missingrepo/missingrepo-git-ssh git ssh://nonexistent.vcs-test.golang.org/git/missingrepo\">\n```\n\n----------------------------------------\n\nTITLE: Creating v2 Branch with Module Path Update\nDESCRIPTION: Switches to the v2 branch, updates the go.mod file for v2 module path, and commits the changes. This establishes the v2 major version following Go modules conventions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/querytest.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nat 2018-07-03T22:50:24-04:00\ngit checkout v2\ncp v2/go.mod go.mod\ngit add go.mod\ngit commit -a -m 'v2'\n```\n\n----------------------------------------\n\nTITLE: Implementing FuzzKill Test in Go\nDESCRIPTION: This test sends a SIGKILL signal to itself, which cannot be caught and should not be interpreted as a crash by the fuzzing framework. It demonstrates handling of uncatchable termination signals.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_non_crash_signal.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc FuzzKill(f *testing.F) {\n\tf.Fuzz(func(*testing.T, bool) {\n\t\tpid := syscall.Getpid()\n\t\tif err := syscall.Kill(pid, syscall.SIGKILL); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\t// signal may not be received immediately. Wait for it.\n\t\tselect{}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Package to Module Transition in Go Dependencies\nDESCRIPTION: This snippet illustrates the behavior of 'go get' when resolving dependencies that change from a package to a module. It shows how version constraints are applied in this scenario.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patchmod.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n! go get example.net/pkgremoved@patch example.net/other@v0.1.0\nstderr '^go: example.net/other@v0.1.0 requires example.net/pkgremoved@v0.2.0, not example.net/pkgremoved@patch \\(v0.1.1\\)$'\ncmp go.mod.orig go.mod\n```\n\n----------------------------------------\n\nTITLE: Initializing Empty Go Source File for a - Go\nDESCRIPTION: This Go file initializes the a package with no exported symbols or logic. Its purpose is solely to be importable and to satisfy the module's presence in the test dependency graph. It requires no dependencies, parameters, or outputs.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage a\n```\n\n----------------------------------------\n\nTITLE: Explicit CGO Usage Sample Program in Go\nDESCRIPTION: This example demonstrates a Go program with explicit CGO usage, embedding C code to define a function returning the number 42. It is used to ensure that such programs trigger external linking as expected.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_suspect_flag_force_external.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\n/*\nint meaningOfLife() { return 42; }\n*/\nimport \"C\"\n\nfunc main() {\n     println(C.meaningOfLife())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Type Creation Functions in go/types Package\nDESCRIPTION: Collection of functions for creating new type instances including arrays, channels, interfaces, maps, and more. These functions are fundamental to the type system implementation in Go.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.5.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc NewArray(Type, int64) *Array\nfunc NewChan(ChanDir, Type) *Chan\nfunc NewInterface([]*Func, []*Named) *Interface\nfunc NewMap(Type, Type) *Map\nfunc NewSlice(Type) *Slice\nfunc NewStruct([]*Var, []string) *Struct\n```\n\n----------------------------------------\n\nTITLE: Testing Go Build Constraints with Module Mode Disabled\nDESCRIPTION: This code establishes a test environment where GO111MODULE is set to 'off' and attempts to compile a package with a '+build foo' constraint. The test expects the compilation to fail with a 'build comment' error.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_compile_binary.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// +build foo\npackage foo\n```\n\n----------------------------------------\n\nTITLE: File System Operation Functions for Darwin ARM64 in Go\nDESCRIPTION: Function declarations for file system operations in the syscall package for Darwin ARM64. These functions provide interfaces to system calls for operations like changing directory, flags, and root.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_119\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (darwin-arm64), func Chflags(string, int) error\npkg syscall (darwin-arm64), func Chroot(string) error\npkg syscall (darwin-arm64), func Fchdir(int) error\npkg syscall (darwin-arm64), func Exchangedata(string, string, int) error\n```\n\n----------------------------------------\n\nTITLE: Directory Validation Utility for Testing\nDESCRIPTION: A Go utility that checks if a directory contains files. It's used in the test script to verify that the fuzzing process has written files to the fuzz cache directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_cache.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"path/filepath\"\n\t\"io/ioutil\"\n\t\"os\"\n)\n\nfunc main() {\n\tinfos, err := ioutil.ReadDir(filepath.Clean(os.Args[1]))\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n\tif len(infos) == 0 {\n\t\tos.Exit(1)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Placeholder 'go' Command (Shell)\nDESCRIPTION: A simple shell script located at `bin/go` that acts as a placeholder for the Go command within this specific toolchain. It prints the message `go1.999testmod here!` to standard output when executed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.js-wasm.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Declaring a Root Go Module - Go\nDESCRIPTION: Defines the root module 'example.net/ambiguous' with Go version 1.16 in the module definition file. This is the primary module declaration that sets the context for module resolution in the test. No external dependencies are specified beyond the Go version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_ambiguous_v0.1.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/ambiguous\\n\\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Displaying repository references and log\nDESCRIPTION: Shows repository references (tags and branches) and the commit log, then compares the output with expected values.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/issue47650.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit show-ref --tags --heads\ncmp stdout .git-refs\n\ngit log --oneline --decorate=short\ncmp stdout .git-log\n```\n\n----------------------------------------\n\nTITLE: Go Module Checksums\nDESCRIPTION: A go.sum file containing the cryptographic checksums for the example.com/dotname module. This ensures dependency integrity when the module is fetched.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_path_dotname.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nexample.com/dotname v1.0.0 h1:Q0JMAn464CnwFVCshs1n4+f5EFiW/eRhnx/fTWjw2Ag=\nexample.com/dotname v1.0.0/go.mod h1:7K4VLT7QylRI8H7yZwUkeDH2s19wQnyfp/3oBlItWJ0=\n```\n\n----------------------------------------\n\nTITLE: Go Module Configuration File\nDESCRIPTION: Module definition file specifying dependencies and Go version requirements. Requires a retracted version of example.com/retract.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/use\n\ngo 1.15\n\nrequire example.com/retract v1.0.0-bad\n```\n\n----------------------------------------\n\nTITLE: Testing 'go get' Command Outside Module\nDESCRIPTION: Verifies that 'go get' fails when executed outside of a module context and does not download any packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_outside.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n! go get\nstderr '^go: go.mod file not found in current directory or any parent directory.$'\nstderr '^\\t''go get'' is no longer supported outside a module.$'\n! go get -u\nstderr '^go: go.mod file not found in current directory or any parent directory.$'\nstderr '^\\t''go get'' is no longer supported outside a module.$'\n! go get -u ./needmod\nstderr '^go: go.mod file not found in current directory or any parent directory.$'\nstderr '^\\t''go get'' is no longer supported outside a module.$'\n! go get -u all\nstderr '^go: go.mod file not found in current directory or any parent directory.$'\nstderr '^\\t''go get'' is no longer supported outside a module.$'\n! go get example.com/printversion@v1.0.0 example.com/version@none\nstderr '^go: go.mod file not found in current directory or any parent directory.$'\nstderr '^\\t''go get'' is no longer supported outside a module.$'\n\ngo clean -modcache\n! go get example.com/printversion@v1.0.0\nstderr '^go: go.mod file not found in current directory or any parent directory.$'\nstderr '^\\t''go get'' is no longer supported outside a module.$'\n! exists $GOPATH/pkg/mod/example.com/printversion@v1.0.0\n! exists $GOPATH/pkg/mod/example.com/version@v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Non-Main Package Pkg2\nDESCRIPTION: Second non-main package declaration for testing build behavior with non-executable packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_multi_main.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage pkg2\n```\n\n----------------------------------------\n\nTITLE: Module Checksum Configuration - A Only\nDESCRIPTION: go.sum entries with complete checksums for module A and only build list entry for module B\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_ambiguous.txt#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nexample.com/ambiguous/a v1.0.0 h1:pGZhTXy6+titE2rNfwHwJykSjXDR4plO52PfZrBM0T8=\nexample.com/ambiguous/a v1.0.0/go.mod h1:TrBl/3xTPFJ2gmMIYz53h2gkNtg0dokszEMuyS1QEb0=\nexample.com/ambiguous/a/b v0.0.0-empty/go.mod h1:MajJq5jPEBnnXP+NTWIeXX7kwaPS1sbVEJdooTmsePQ=\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module in go.mod\nDESCRIPTION: Specifies the module name for the Go package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_version_v1.1.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/version\n```\n\n----------------------------------------\n\nTITLE: Modified Main Module Source (Go)\nDESCRIPTION: The modified version of the main program (`m.go.new`). It adds a direct import of package `b/y` from module `b`. This change triggers the dependency resolution logic being tested, especially under lazy loading, as `b` is no longer just a test-only dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_import_allmod.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n-- m.go.new --\npackage main\n\nimport (\n\t\"fmt\"\n\n\t_ \"a\"  // a_test imports b/x.\n\t\"b/y\"  // This is a new import, not yet reflected in the go.mod file.\n)\n\nfunc main() {\n\tfmt.Println(b.CVersion())\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Loading Error\nDESCRIPTION: Shell command to test go list behavior with a missing module 'y' referenced in go.work file. Expects an error message indicating the module cannot be loaded.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_issue55952.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n! go list .\nstderr '^go: cannot load module y listed in go\\.work file: open y'${/}'go\\.mod:'\n```\n\n----------------------------------------\n\nTITLE: Testing Go Mod Vendor with Absolute Paths\nDESCRIPTION: This snippet tests the 'go mod vendor' command with absolute paths for the vendor directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor.txt#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n# 'go mod vendor' should work with absolute paths as well\ngo mod vendor -v -o $WORK/tmp/absolute-vendor-dir\nexists $WORK/tmp/absolute-vendor-dir/modules.txt\n\n[short] stop\n```\n\n----------------------------------------\n\nTITLE: Vendor Modules Definition\nDESCRIPTION: Vendor modules.txt file explicitly declaring dependency on rsc.io/sampler.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_require_exclude.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n# rsc.io/sampler v1.99.99\n## explicit\n```\n\n----------------------------------------\n\nTITLE: Testing Short Deprecation Message Display in Go Modules\nDESCRIPTION: Tests how 'go get' handles a short single-line deprecation message, ensuring it displays the full message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_deprecate_message.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get short\nstderr '^go: module short is deprecated: short$'\ngo list -m -u -f '{{.Deprecated}}' short\nstdout '^short$'\n```\n\n----------------------------------------\n\nTITLE: Leaf Dependency Package - dep3/dep3.go\nDESCRIPTION: Defines a leaf dependency package that is imported by multiple packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto_multi.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\npackage dep3\n```\n\n----------------------------------------\n\nTITLE: Testing implicit -pgo=auto behavior (default)\nDESCRIPTION: Tests that the -pgo=auto flag is the default behavior. Commands without explicitly specifying -pgo=auto should work the same way as with -pgo=auto.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngo build -a -n -o a1.exe ./a/a1\nstderr 'compile.*-pgoprofile=.*a1.go'\nstderr 'compile.*-p test/dep.*-pgoprofile=.*'\n\n# check that pgo appears in build info\nstderr 'build\\\\t-pgo=.*default\\.pgo'\n\ngo build -a -n -o nopgo.exe ./nopgo\nstderr 'compile.*nopgo.go'\n! stderr 'compile.*-pgoprofile'\n\n# check that pgo doesn't appear in build info\n! stderr 'build\\\\t-pgo='\n```\n\n----------------------------------------\n\nTITLE: BPF Interface I/O Control Constants for NetBSD ARM64\nDESCRIPTION: Berkeley Packet Filter (BPF) I/O control constants for managing network packet capture. These constants are used with ioctl() calls to configure BPF devices, set filters, and control packet capture behavior.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\nconst BIOCFEEDBACK = 2147762813\nconst BIOCFEEDBACK ideal-int\nconst BIOCFLUSH = 536887912\nconst BIOCFLUSH ideal-int\nconst BIOCGBLEN = 1074020966\nconst BIOCGBLEN ideal-int\nconst BIOCGDLT = 1074020970\nconst BIOCGDLT ideal-int\nconst BIOCGDLTLIST = 3222291063\nconst BIOCGDLTLIST ideal-int\nconst BIOCGETIF = 1083196011\nconst BIOCGETIF ideal-int\nconst BIOCGFEEDBACK = 1074020988\nconst BIOCGFEEDBACK ideal-int\nconst BIOCGHDRCMPLT = 1074020980\nconst BIOCGHDRCMPLT ideal-int\nconst BIOCGRTIMEOUT = 1074807419\nconst BIOCGRTIMEOUT ideal-int\nconst BIOCGSEESENT = 1074020984\nconst BIOCGSEESENT ideal-int\nconst BIOCGSTATS = 1082147439\nconst BIOCGSTATS ideal-int\nconst BIOCGSTATSOLD = 1074283119\nconst BIOCGSTATSOLD ideal-int\nconst BIOCIMMEDIATE = 2147762800\nconst BIOCIMMEDIATE ideal-int\nconst BIOCPROMISC = 536887913\nconst BIOCPROMISC ideal-int\nconst BIOCSBLEN = 3221504614\nconst BIOCSBLEN ideal-int\nconst BIOCSDLT = 2147762806\nconst BIOCSDLT ideal-int\nconst BIOCSETF = 2148549223\nconst BIOCSETF ideal-int\nconst BIOCSETIF = 2156937836\nconst BIOCSETIF ideal-int\nconst BIOCSFEEDBACK = 2147762813\nconst BIOCSFEEDBACK ideal-int\nconst BIOCSHDRCMPLT = 2147762805\nconst BIOCSHDRCMPLT ideal-int\nconst BIOCSRTIMEOUT = 2148549242\nconst BIOCSRTIMEOUT ideal-int\nconst BIOCSSEESENT = 2147762809\nconst BIOCSSEESENT ideal-int\nconst BIOCSTCPF = 2148549234\nconst BIOCSTCPF ideal-int\nconst BIOCSUDPF = 2148549235\nconst BIOCSUDPF ideal-int\nconst BIOCVERSION = 1074020977\nconst BIOCVERSION ideal-int\n```\n\n----------------------------------------\n\nTITLE: Go Module Declaration\nDESCRIPTION: Declares the Go module used in the test cases. This file sets the module path 'cgo.example' and specifies the Go version as 1.20.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_suspect_flag_force_external.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule cgo.example\n\ngo 1.20\n\n```\n\n----------------------------------------\n\nTITLE: Go Module Get with Empty Checksum Directory\nDESCRIPTION: Test case demonstrating module download failure with an empty checksum directory in the file-based proxy\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_file_path.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nenv GOPROXY=file://$WORK/sumproxy,https://proxy.golang.org\n! go get golang.org/x/text@v0.3.2\n```\n\n----------------------------------------\n\nTITLE: Running Go Mod Tidy with -e Flag\nDESCRIPTION: Executes 'go mod tidy -e' command to proceed past the first error and show version discrepancy.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_added.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo mod tidy -e\n\nstderr '^go: example\\.com/m imports\\n\\texample\\.net/added: module example\\.net/added@latest found \\(v0\\.3\\.0, replaced by \\.\\./a1\\), but does not contain package example\\.net/added\\ngo: example\\.net/added failed to load from any module,\\n\\tbut go 1\\.16 would load it from example\\.net/added@v0\\.2\\.0$'\n\n! stderr '\\n\\tgo mod tidy'\n```\n\n----------------------------------------\n\nTITLE: Testing Go 1.23+ Vendoring Behavior\nDESCRIPTION: Tests the behavior of Go 1.23+ when a package is missing from vendor/modules.txt. It should result in a build error.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_vendor.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncp incorrect_modules.txt vendor/modules.txt\n! go build ./vendor/foo.com/internal/bar/a\nstderr 'cannot find module providing package foo.com/internal/bar/b: import lookup disabled by -mod=vendor'\nstderr 'go: ignoring package foo.com/internal/bar/b which exists in the vendor directory but is missing from vendor/modules.txt. To sync the vendor directory run go mod vendor.'\n\ncp correct_modules.txt vendor/modules.txt\ngo build ./vendor/foo.com/internal/bar/a\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Main Go Package\nDESCRIPTION: This snippet defines a non-main Go package named 'nonmain'. It includes a package comment describing that it is not a main package, which is relevant to the test cases in the file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_run_nonmain.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n// Package nonmain is not a main package.\npackage nonmain\n```\n\n----------------------------------------\n\nTITLE: Module Definitions for Dependent Packages\nDESCRIPTION: These go.mod files define modules for the dependent packages 'w', 'x', 'y', and 'z'. They include various module declarations and requirements.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule w\n```\n\nLANGUAGE: go\nCODE:\n```\nmodule x\nrequire w.1 v1.1.0\nrequire z.1 v1.1.0\n```\n\nLANGUAGE: go\nCODE:\n```\nmodule y\nrequire z.1 v1.2.0\n```\n\nLANGUAGE: go\nCODE:\n```\nmodule z\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: A basic Go module definition for the cgocover test package. It specifies the module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_cgo.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule cgocover\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Testing Go Workspace Configurations\nDESCRIPTION: This snippet includes tests for various Go workspace configurations, including duplicate path handling, backwards compatibility, and command-line arguments processing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Test that duplicates in the use list return an error\ncp go.work go.work.backup\ncp go.work.dup go.work\n! go run example.com/b\nstderr 'go.work:6: path .* appears multiple times in workspace'\ncp go.work.backup go.work\n\ncp go.work.d go.work\ngo work use # update go version\ngo run example.com/d\n\n# Test that we don't run into \"newRequirements called with unsorted roots\"\n# panic with unsorted main modules.\ncp go.work.backwards go.work\ngo work use # update go version\ngo run example.com/d\n\n# Test that command-line-arguments work inside and outside modules.\n# This exercises the code that determines which module command-line-arguments\n# belongs to.\ngo list ./b/main.go\nenv GOWORK=off\ngo build -n -o foo foo.go\nenv GOWORK=\ngo build -n -o foo foo.go\n```\n\n----------------------------------------\n\nTITLE: sync/atomic Type Additions\nDESCRIPTION: New atomic types and methods for concurrent operations including Bool, Int32, Int64, Uint32, Uint64, Uintptr, and generic Pointer types.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.19.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype Bool struct\ntype Int32 struct\ntype Int64 struct\ntype Pointer[$0 interface{}] struct\ntype Uint32 struct\ntype Uint64 struct\ntype Uintptr struct\n```\n\n----------------------------------------\n\nTITLE: Testing GOTOOLCHAIN=auto Behavior\nDESCRIPTION: Tests how GOTOOLCHAIN=auto switches to a newer toolchain when dependencies require it.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_exec_toolchain.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# GOTOOLCHAIN=auto should run the newer toolchain\nenv GOTOOLCHAIN=auto\ncp go.mod.new go.mod\ngo get rsc.io/needgo121 rsc.io/needgo122 rsc.io/needgo123 rsc.io/needall\nstderr '^go: rsc.io/needall@v0.0.1 requires go >= 1.23; switching to go1.23.9$'\n! stderr '\\(running'\nstderr '^go: added rsc.io/needall v0.0.1'\ngrep 'go 1.23' go.mod\n! grep toolchain go.mod\n```\n\n----------------------------------------\n\nTITLE: Setting CGO_CFLAGS in Go\nDESCRIPTION: This snippet sets a unique CGO_CFLAGS variable to test if runtime/cgo is reported as stale. It uses environment variable settings to influence the build process. Ensure that the go command-line tools are installed and accessible.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_stale.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv CGO_CFLAGS=-DTestScript_cgo_stale=true\nstale runtime/cgo\n```\n\n----------------------------------------\n\nTITLE: Fake Mercurial Batch Executable\nDESCRIPTION: This snippet defines a batch script that acts as a fake `hg` executable for Windows environments, always exiting with status 1. It's used to test error handling when the real Mercurial tool is unavailable.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_hg.txt#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\nexit 1\n```\n\n----------------------------------------\n\nTITLE: Plan9 Object File Structures and Methods\nDESCRIPTION: Definitions for handling Plan9 object files including File, Section, and Symbol structures with their associated methods for reading and manipulating object file data.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype File struct {\n    Sections []*Section\n    FileHeader\n}\n\ntype FileHeader struct {\n    Magic uint32\n    Bss uint32\n    Entry uint64\n    PtrSize int\n}\n\ntype Section struct {\n    SectionHeader\n    io.ReaderAt\n}\n\ntype SectionHeader struct {\n    Name string\n    Offset uint32\n    Size uint32\n}\n\ntype Sym struct {\n    Name string\n    Type int32\n    Value uint64\n}\n```\n\n----------------------------------------\n\nTITLE: Downgrading Module and Verifying Dependencies\nDESCRIPTION: This snippet downgrades module 'd' to version 1, which triggers a downgrade of 'b' and an upgrade of 'c'. It then lists all modules to verify the changes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_indirect_pruned.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngo get -v example.com/d@v0.1.0\ngo list -m all\nstdout '^example.com/b v0.1.0 '\nstdout '^example.com/c v0.2.0 '\nstdout '^example.com/d v0.1.0 '\ncmp go.mod go.mod.down1\n```\n\n----------------------------------------\n\nTITLE: Building Package and Verifying Compilation\nDESCRIPTION: Builds a package and verifies that compilation occurs. It sets up a clean GOCACHE, runs the build with verbose output, and checks for compilation-related messages in the stderr.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_commit.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nenv GOCACHE=$WORK/gocache\n\ngo build -x golang.org/x/text/language\nstderr 'compile|cp|gccgo .*language\\.a$'\n\ngo list -f '{{.Stale}}' golang.org/x/text/language\nstdout ^false\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Import Path with GO111MODULE Unset\nDESCRIPTION: This snippet tests the Go compiler's behavior when attempting to build a package with an invalid import path while GO111MODULE is unset. It changes to the package directory and expects the build to fail with a specific error message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_import_wrong.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nenv GO111MODULE=\ncd vend/x/invalid\n! go build vend/x/invalid\nstderr 'must be imported as foo'\n```\n\n----------------------------------------\n\nTITLE: Querying Default GODEBUG Values for a Go Package\nDESCRIPTION: Demonstrates how to use the go list command to query the default GODEBUG values that will be compiled into a main package. This command reports differences from the base Go toolchain defaults.\nSOURCE: https://github.com/golang/go/blob/master/doc/godebug.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo list -f '{{.DefaultGODEBUG}}' my/main/package\n```\n\n----------------------------------------\n\nTITLE: Setting Up Go Module Environment and Running Vendor Test\nDESCRIPTION: This snippet configures the Go environment and runs the vendor command. It then compares the expected modules.txt with the actual one generated during vendoring to verify replacement handling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_unused.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nenv GO111MODULE=on\n\ngo mod vendor\ncmp go1.14-modules.txt vendor/modules.txt\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Fetch without Proxy\nDESCRIPTION: Fetches a specific module version without using a proxy, relying on cache or go.sum. Tests both scenarios by removing and using the checksum cache.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_cache.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncp go.mod.orig go.mod\nrm go.sum\nenv GOPROXY=off\ngo get rsc.io/quote@v1.5.2 # using cache\nrm $GOPATH/pkg/mod/cache/download/sumdb/localhost.localdev/sumdb/lookup/rsc.io/quote@v1.5.2\ngo get rsc.io/quote@v1.5.2 # using go.sum\n```\n\n----------------------------------------\n\nTITLE: NetBSD File Type Constants\nDESCRIPTION: Constants representing different file types in the NetBSD filesystem. Includes definitions for regular files, directories, symbolic links, character devices, and other special files.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_15\n\nLANGUAGE: Go\nCODE:\n```\nconst DT_BLK = 6\nconst DT_CHR = 2\nconst DT_DIR = 4\nconst DT_FIFO = 1\nconst DT_LNK = 10\nconst DT_REG = 8\nconst DT_SOCK = 12\nconst DT_UNKNOWN = 0\n```\n\n----------------------------------------\n\nTITLE: Implementing Race Condition Benchmark in Go\nDESCRIPTION: This snippet defines a benchmark function BenchmarkRace that creates a race condition similar to TestRace. It's designed to measure the performance impact of the race condition over multiple iterations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_race.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc BenchmarkRace(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tc := make(chan int)\n\t\tx := 1\n\t\tgo func() {\n\t\t\tx = 2\n\t\t\tc <- 1\n\t\t}()\n\t\tx = 3\n\t\t<-c\n\t\t_ = x\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Complex Word Boundary Negation Patterns in Go Regexps\nDESCRIPTION: Tests complex regular expressions using \\B to match non-word boundaries combined with grouping and alternation. These patterns check how \\B behaves with different character classes and specific words.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_6\n\nLANGUAGE: regexp\nCODE:\n```\n\\B(foo|bar|[A-Z])\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:\\B(foo|bar|[A-Z]))$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:\\B(foo|bar|[A-Z]))\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:\\B(foo|bar|[A-Z]))$\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Go Package `d`\nDESCRIPTION: This snippet defines a minimal Go package named `d`. It serves as the base package being analyzed and imported in the associated test file (`d_test.go`) for the `go list` test case.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_test_e.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n-- p/d.go --\npackage d\n```\n\n----------------------------------------\n\nTITLE: Setting Go Environment Variables for Module and Proxy Testing\nDESCRIPTION: Sets up environment variables for Go module proxy and sumdb testing. Includes variables for GO111MODULE, GOSUMDB, GOPROXY, GOPRIVATE, GONOPROXY, GONOSUMDB, and a custom database name.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gonoproxy.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GO111MODULE=on\nenv sumdb=$GOSUMDB\nenv proxy=$GOPROXY\nenv GOPRIVATE GOPROXY GONOPROXY GOSUMDB GONOSUMDB\nenv dbname=localhost.localdev/sumdb\n```\n\n----------------------------------------\n\nTITLE: Disabling Go Modules via Environment Variable (Shell)\nDESCRIPTION: Sets the GO111MODULE environment variable to 'off'. This forces the Go tools to operate in the older GOPATH mode, which is necessary for this specific test scenario involving package layout within $GOPATH.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_split_main.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=off\n```\n\n----------------------------------------\n\nTITLE: Defining Module Dependencies (Go)\nDESCRIPTION: Specifies module dependencies, replacements, and versions in the go.mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue47979.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nmodule golang.org/issue47979\n\ngo 1.17\n\nreplace (\n\texample.net/a v0.1.0 => ./a1\n\texample.net/a v0.2.0 => ./a2\n\texample.net/indirect v0.1.0 => ./indirect1\n\texample.net/indirect v0.2.0 => ./indirect2\n\texample.net/other v0.1.0 => ./other\n\texample.net/other v0.2.0 => ./other\n)\n\nrequire (\n\texample.net/a v0.1.0\n\texample.net/other v0.1.0\n)\n\nrequire example.net/indirect v0.1.0 // indirect\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP Authentication Authenticator in Go\nDESCRIPTION: A simple Go program that outputs HTTP authentication credentials in the format expected by the GOAUTH mechanism. It provides Basic authentication credentials (username: aladdin, password: opensesame) encoded in base64.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goauth_userauth.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Printf(\"https://vcs-test.golang.org\\n\\nAuthorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l\\n\\n\")\n}\n```\n\n----------------------------------------\n\nTITLE: Setting GODEBUG Values with go:debug Directives in Go\nDESCRIPTION: Shows how to use //go:debug directives in a Go source file to set GODEBUG values. This example sets the same values as the previous snippet but using inline directives.\nSOURCE: https://github.com/golang/go/blob/master/doc/godebug.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n//go:debug default=go1.21\n//go:debug panicnil=1\n//go:debug asynctimerchan=0\n```\n\n----------------------------------------\n\nTITLE: GOCACHEPROG Test Commands\nDESCRIPTION: Shell commands to test GOCACHEPROG environment variable behavior using go env command with different flags.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_gocacheprog.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GOCACHEPROG=\n\ngo env\nstdout 'GOCACHEPROG=''?''?'\n\ngo env -changed\n! stdout 'GOCACHEPROG'\n\ngo env -changed -json\n! stdout 'GOCACHEPROG'\n\ngo build -o cacheprog$GOEXE cacheprog.go\n\nenv GOCACHEPROG=$GOPATH/src/cacheprog$GOEXE\n\ngo env\nstdout 'GOCACHEPROG=''?'$GOCACHEPROG'''?'\n\ngo env -changed\nstdout 'GOCACHEPROG=''?'$GOCACHEPROG'''?'\n\ngo env -changed -json\nstdout '\"GOCACHEPROG\": \".*cacheprog'$GOEXE'\"'\n```\n\n----------------------------------------\n\nTITLE: Map, doc and importer package declarations in Go\nDESCRIPTION: Declarations for Map.Delete method in expvar, PreserveAST constant in go/doc, and ForCompiler function in go/importer.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.12.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmethod (*Map) Delete(string)\nconst PreserveAST = 4\nconst PreserveAST Mode\nfunc ForCompiler(*token.FileSet, string, Lookup) types.Importer\n```\n\n----------------------------------------\n\nTITLE: Downloading Go Tools with Proxy\nDESCRIPTION: Downloads the goimports tool using the configured proxy with verbose and debug output flags. Checks that the request goes through the proxy rather than directly to golang.org.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_fallback.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo get -x -v golang.org/x/tools/cmd/goimports\nstderr '# get https://proxy.golang.org/golang.org/x/tools/@v/list'\n! stderr '# get https://golang.org'\n```\n\n----------------------------------------\n\nTITLE: Defining Record and Source Structs in log/slog Package\nDESCRIPTION: This snippet defines the Record and Source structs in the log/slog package. The Record struct includes a Time field, while the Source struct contains File, Function, and Line fields for logging purposes.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.21.txt#2025-04-22_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\ntype Record struct {\n    Time time.Time\n}\n\ntype Source struct {\n    File     string\n    Function string\n    Line     int\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Subpackage subpkg\nDESCRIPTION: This snippet declares a subpackage named 'subpkg' which was added in version 1.2.0 of the module. It shows how modules can be expanded with additional packages over time.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_pkgadded_v1.2.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n// Package subpkg was added in v1.2.0.\npackage subpkg\n```\n\n----------------------------------------\n\nTITLE: Invalid Go Environment Configuration\nDESCRIPTION: Configuration file defining invalid Go environment settings for testing purposes. Sets invalid values for GOOS, GOARCH, and GOEXPERIMENT variables.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_unset.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nGOOS=bados\nGOARCH=badarch\nGOEXPERIMENT=badexp\n```\n\n----------------------------------------\n\nTITLE: Building Go File with Standard Library Import\nDESCRIPTION: Demonstrates building a Go file (baz.go) that only imports the fmt package using different -mod flags. This build succeeds in all modes: mod, readonly, and vendor.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_outside_module.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo build -x -mod=mod my-module/vendor/example.com/another-module/foo/bar/baz.go\ngo build -x -mod=readonly my-module/vendor/example.com/another-module/foo/bar/baz.go\ngo build -x -mod=vendor my-module/vendor/example.com/another-module/foo/bar/baz.go\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module\nDESCRIPTION: This snippet defines a Go module named 'm' with Go version 1.16.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_vet.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module in .mod File\nDESCRIPTION: Defines a Go module named 'golang.org/x/useinternal'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_x_useinternal_v0.1.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule golang.org/x/useinternal\n```\n\n----------------------------------------\n\nTITLE: Go Comment Heading Format Tests\nDESCRIPTION: A series of test cases showing what does and doesn't constitute a valid Go comment heading format, including examples of valid and invalid heading patterns.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/head2.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nAlmost a+heading\n\nDon't be a heading\n\nA.b is a heading\n\nA. b is not a heading\n```\n\n----------------------------------------\n\nTITLE: Basic Hello World Program in Go\nDESCRIPTION: Simple Go program that prints \"hello, world\" to the console. This is the file being committed to the Git repository.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/hello.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {\n\tprintln(\"hello, world\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Test Function with Properties in Go\nDESCRIPTION: Example of a test function definition with associated property comments. The comments include a function identifier, human-readable property dump, JSON representation of properties, and callsite information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/internal/inline/inlheur/testdata/props/README.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// params.go T_feeds_if_simple 35 0 1\n// RecvrParamFlags:\n//   0: ParamFeedsIfOrSwitch\n// <endpropsdump>\n// {\"Flags\":0,\"RecvrParamFlags\":[8],\"ReturnFlags\":[]}\n// callsite: params.go:34:10|0 \"CallSiteOnPanicPath\" 2\n// <endcallsites>\n// <endfuncpreamble>\nfunc T_feeds_if_simple(x int) {\n\tif x < 100 {\n\t\tos.Exit(1)\n\t}\n\tprintln(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Testing GOTOOLCHAIN Environment Variable\nDESCRIPTION: Validates behavior with different GOTOOLCHAIN environment variable values, including valid versions, invalid versions, and auto-download scenarios.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_issue66175.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nenv GOTOOLCHAIN=go1.14\ngo version\nstdout 'go1.14'\n\nenv GOTOOLCHAIN=go1.20\n! go version\nstderr 'go: downloading go1.20 '\n```\n\n----------------------------------------\n\nTITLE: Module Version Information in JSON Format\nDESCRIPTION: JSON file containing version information for the module, specifying v0.0.1 as the current version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo121_v0.0.1.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.0.1\"}\n```\n\n----------------------------------------\n\nTITLE: Runtime metrics functions and methods in runtime/metrics package\nDESCRIPTION: Functions and methods for collecting runtime metrics. Includes All() to get all available metrics descriptions and Read() to read metrics values, along with methods to access different types of metric values.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc All() []Description\nfunc Read([]Sample)\nmethod (Value) Float64() float64\nmethod (Value) Float64Histogram() *Float64Histogram\nmethod (Value) Kind() ValueKind\nmethod (Value) Uint64() uint64\n```\n\n----------------------------------------\n\nTITLE: Defining Go module for testing environment\nDESCRIPTION: Creates a minimal go.mod file to set up the testing environment with a scratch module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_versioned.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule scratch\n```\n\n----------------------------------------\n\nTITLE: Go Module Checksum File\nDESCRIPTION: A go.sum file containing the cryptographic checksum for the dependency's go.mod file. This ensures reproducible builds and is part of the standard Go modules system.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_unused_only.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nexample.com v1.0.0/go.mod h1:WRiieAqDBb1hVdDXLLdxNtCDWNfehn7FWyPC5Oz2vB4=\n```\n\n----------------------------------------\n\nTITLE: Testing Go List Command with Incomplete Package\nDESCRIPTION: Shell script testing go list -find behavior with incomplete packages and imports. Verifies incomplete status reporting and import list handling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_find.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=off\n\ngo list -f {{.Incomplete}} x/y/z...  # should probably exit non-zero but never has\nstdout true\ngo list -find -f '{{.Incomplete}} {{.Imports}}' x/y/z...\nstdout '^false \\[\\]'\n```\n\n----------------------------------------\n\nTITLE: Defining Toolchain Module Path in .mod (Text)\nDESCRIPTION: This plain text snippet, representing the content of a conceptual `.mod` file associated with the toolchain package, specifies the Go module path (`golang.org/toolchain`). This file is part of the toolchain's metadata.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.22.9.linux-amd64.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ngolang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Basic Go module definition file declaring module 'm'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_edit_toolchain.txt#2025-04-22_snippet_2\n\nLANGUAGE: gomod\nCODE:\n```\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Main Package Test Implementation (p_test.go)\nDESCRIPTION: Test file for package p that imports p1 using relative path and compares function outputs.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_relative_cmdline.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nimport (\n\t\"./p1\"\n\n\t\"testing\"\n)\n\nfunc TestF(t *testing.T) {\n\tif F() != p1.F() {\n\t\tt.Fatal(F())\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Go Test Command with Force Rebuild\nDESCRIPTION: Shell command to test forced rebuilding of dependencies using 'go test -a'. Verifies that standard library components like regexp are recompiled when the -a flag is used.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_rebuildall.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=off\n\ngo test -x -a -c testdata/dep_test.go\nstderr '^.*[/\\\\]compile'$GOEXE'[\"]? (.* )?regexp .*[/\\\\]regexp\\.go'\n```\n\n----------------------------------------\n\nTITLE: Setting Git Author Information in Shell\nDESCRIPTION: Sets up Git author and committer environment variables for repository initialization.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/empty-v2-without-v1.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GIT_AUTHOR_NAME='Bryan C. Mills'\nenv GIT_AUTHOR_EMAIL='bcmills@google.com'\nenv GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME\nenv GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL\n```\n\n----------------------------------------\n\nTITLE: Module Download Commands\nDESCRIPTION: Demonstrates usage of 'go mod download' command with different version specifiers including specific versions and @latest tag.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query_main.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo mod download rsc.io/quote@5d9f230b\ngo mod download rsc.io/quote@v1.5.2\ngo mod download rsc.io/quote@latest\n```\n\n----------------------------------------\n\nTITLE: Defining interface-related structs in Go for Darwin ARM64\nDESCRIPTION: This snippet defines structures related to network interfaces, including IfData, IfMsghdr, IfaMsghdr, and IfmaMsghdr.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_126\n\nLANGUAGE: Go\nCODE:\n```\ntype IfData struct {\n    Type uint8\n    Typelen uint8\n    Physical uint8\n    Addrlen uint8\n    Hdrlen uint8\n    Recvquota uint8\n    Xmitquota uint8\n    Unused1 uint8\n    Mtu uint32\n    Metric uint32\n    Baudrate uint32\n    Ipackets uint32\n    Ierrors uint32\n    Opackets uint32\n    Oerrors uint32\n    Collisions uint32\n    Ibytes uint32\n    Obytes uint32\n    Imcasts uint32\n    Omcasts uint32\n    Iqdrops uint32\n    Noproto uint32\n    Recvtiming uint32\n    Xmittiming uint32\n    Lastchange Timeval32\n    Unused2 uint32\n    Hwassist uint32\n    Reserved1 uint32\n    Reserved2 uint32\n}\n\ntype IfMsghdr struct {\n    Msglen uint16\n    Version uint8\n    Type uint8\n    Addrs int32\n    Flags int32\n    Index uint16\n    Pad_cgo_0 [2]uint8\n    Data IfData\n}\n\ntype IfaMsghdr struct {\n    Msglen uint16\n    Version uint8\n    Type uint8\n    Addrs int32\n    Flags int32\n    Metric int32\n    Index uint16\n    Pad_cgo_0 [2]uint8\n}\n\ntype IfmaMsghdr struct {\n    Msglen uint16\n    Version uint8\n    Type uint8\n    Addrs int32\n    Flags int32\n    Index uint16\n    Pad_cgo_0 [2]uint8\n}\n```\n\n----------------------------------------\n\nTITLE: Package B with Non-Canonical Import\nDESCRIPTION: Go package 'b' demonstrating incorrect import path with trailing slash\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/noncanonical_import.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage b\\n\\nimport _ \"canonical/a/\"\n```\n\n----------------------------------------\n\nTITLE: Image RGBA64 Interface Definition\nDESCRIPTION: Definition of RGBA64Image interface for handling 16-bits-per-channel RGBA colors\nSOURCE: https://github.com/golang/go/blob/master/api/go1.17.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype RGBA64Image interface {\n    At(int, int) color.Color\n    Bounds() Rectangle\n    ColorModel() color.Model\n    RGBA64At(int, int) color.RGBA64\n}\n```\n\n----------------------------------------\n\nTITLE: Module A Configuration\nDESCRIPTION: The go.mod file for module 'a' v0.1.0, requiring 'b' v0.1.0. This forms part of the dependency cycle in the test case.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_cycle.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule a\n\ngo 1.13\n\nrequire b v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with .go Extension\nDESCRIPTION: Module definition file specifying module path example.com/dotgo.go and Go version 1.13 requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_dotgo.go_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/dotgo.go\n\ngo 1.13\n```\n\n----------------------------------------\n\nTITLE: Describing Module Version Information - JSON\nDESCRIPTION: Represents metadata for the module version 'v0.1.0' in JSON format. This typically simulates the .info file in Go module proxy caches, holding fields like module version or timestamps. Here, it only specifies the version, with no further data.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_ambiguous_v0.1.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\\\"Version\\\": \\\"v0.1.0\\\"}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Build and Install Cleanup Behavior\nDESCRIPTION: A series of shell commands to test how 'go build' and 'go install' handle cleanup of executable files in different scenarios. It checks the behavior when running commands with and without arguments, and in different directories.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_cleans_build.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=off\n[short] skip\n\n# 'go install' with no arguments should clean up after go build\ncd mycmd\ngo build\nexists mycmd$GOEXE\ngo install\n! exists mycmd$GOEXE\n\n# 'go install mycmd' does not clean up, even in the mycmd directory\ngo build\nexists mycmd$GOEXE\ngo install mycmd\nexists mycmd$GOEXE\n\n# 'go install mycmd' should not clean up in an unrelated current directory either\ncd ..\ncp mycmd/mycmd$GOEXE mycmd$GOEXE\ngo install mycmd\nexists mycmd$GOEXE\n```\n\n----------------------------------------\n\nTITLE: Go Module File with Incorrect Indirect Marking\nDESCRIPTION: A go.mod file that incorrectly marks a direct dependency as indirect, used to test indirect comment removal.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retention.txt#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.14\n\nrequire (\n\trsc.io/quote v1.5.2 // indirect\n\trsc.io/testonly v1.0.0 // indirect\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Package in Go\nDESCRIPTION: This snippet demonstrates importing a package in a Go file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_of_test_dep.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage lazy\n\nimport (\n\t_ \"example.com/a\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Go Workspace Configuration\nDESCRIPTION: This snippet shows the contents of the go.work file, which defines the workspace configuration. It specifies the Go version and the modules to be used in the workspace.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace_main_module.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\nuse (\n    ./mainmoda\n    ./mainmodb\n)\n```\n\n----------------------------------------\n\nTITLE: Original Go Module Definition\nDESCRIPTION: Initial go.mod file defining module x with dependencies on rsc.io/quote v1.5.1 and example.com/latemigrate/v2 v2.0.1\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downgrade.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule x\nrequire (\n\trsc.io/quote v1.5.1\n\texample.com/latemigrate/v2 v2.0.1\n)\n```\n\n----------------------------------------\n\nTITLE: Standard Error Expected Output - Shell Script\nDESCRIPTION: The file wanterr.txt contains the expected error message output when import cycles are detected in the Go module. It describes the modules and import paths that are investigated, specifically mentioning the package cycle involving packages p, q, and r.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_test_cycle.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo: can\\'t load test package: package example/p\n\timports example/q from p_test.go\n\timports example/r from q.go\n\timports example/p from r.go: import cycle not allowed in test\n```\n\n----------------------------------------\n\nTITLE: Language Tag Implementation and Matching in Go\nDESCRIPTION: Implements core language tag functionality including tag creation, string conversion, and matching against preferred languages. Includes a matcher that supports basic language tag comparison with region subtag handling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_x_text_v0.3.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Copyright 2018 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// This is a tiny version of golang.org/x/text.\n\npackage language\n\nimport \"strings\"\n\ntype Tag string\n\nfunc Make(s string) Tag { return Tag(s) }\n\nfunc (t Tag) String() string { return string(t) }\n\nfunc NewMatcher(tags []Tag) Matcher { return &matcher{tags} }\n\ntype Matcher interface {\n\tMatch(...Tag) (Tag, int, int)\n}\n\ntype matcher struct {\n\ttags []Tag\n}\n\nfunc (m *matcher) Match(prefs ...Tag) (Tag, int, int) {\n\tfor _, pref := range prefs {\n\t\tfor _, tag := range m.tags {\n\t\t\tif tag == pref || strings.HasPrefix(string(pref), string(tag+\"-\")) || strings.HasPrefix(string(tag), string(pref+\"-\")) {\n\t\t\t\treturn tag, 0, 0\n\t\t\t}\n\t\t}\n\t}\n\treturn m.tags[0], 0, 0\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Module Version Metadata for Go Tooling - JSON\nDESCRIPTION: Provides version metadata ('v1.0.0-bad') for the Go module using a .info JSON file. This is typically generated by Go's proxy infrastructure for version tracking and validation. The file helps in managing and retrieving specific module versions, with 'Version' being the key parameter, and is consumed internally by Go tools, not directly by users.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_prev_v1.0.0-bad.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\\"Version\\\":\\\"v1.0.0-bad\\\"}\n```\n\n----------------------------------------\n\nTITLE: Basic Go Workspace File Structure\nDESCRIPTION: Initial go.work file structure showing module usage declaration\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_edit.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo $goversion\n\nuse ./m\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependency Module with go.mod - Go\nDESCRIPTION: This go.mod file sets up the example.com/dependency module specifying module path and Go version, preparing the module for dependency management by downstream modules. No tool or replace directives are present, making it a simple module configuration.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_tool.txt#2025-04-22_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nmodule example.com/dependency\\n\\ngo 1.24\\n\n```\n\n----------------------------------------\n\nTITLE: Initial Go Program\nDESCRIPTION: The initial version of main.go with just a main function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/commit-after-tag.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Go Package Imports with go list (Shell)\nDESCRIPTION: This shell command uses the Go toolchain's `list` command to retrieve and format specific information about packages `m/a` and `m/b`. The `-f` flag specifies a Go template to print the `ImportPath`, `Imports`, and `ImportMap` for each package. This is used to test how PGO affects the reported import information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_pgo_issue66218.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo list -f 'ImportPath: \"{{.ImportPath}}\", Imports: \"{{.Imports}}\", ImportMap: \"{{.ImportMap}}\"' m/a m/b\n```\n\n----------------------------------------\n\nTITLE: File Count Verification Utility\nDESCRIPTION: Utility program that counts files in a directory and verifies the count matches an expected value. Used to validate the execution count of fuzzing tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_fuzztime.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\tdir, err := os.ReadDir(os.Args[1])\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n\tgot := len(dir)\n\twant, _ := strconv.Atoi(os.Args[2])\n\tif got != want {\n\t\tfmt.Fprintf(os.Stderr, \"got %d files; want %d\\n\", got, want)\n\t\tos.Exit(1)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IfaMsghdr Struct in Go for Darwin ARM64 CGO\nDESCRIPTION: Defines the IfaMsghdr struct used for interface address messages. It includes fields for addresses, flags, index, metric, and message details.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_200\n\nLANGUAGE: Go\nCODE:\n```\ntype IfaMsghdr struct {\n    Addrs int32\n    Flags int32\n    Index uint16\n    Metric int32\n    Msglen uint16\n    Pad_cgo_0 [2]uint8\n    Type uint8\n    Version uint8\n}\n```\n\n----------------------------------------\n\nTITLE: Package Usage File\nDESCRIPTION: Go source file importing the retract packages as blank imports for testing purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_replace.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage use\n\nimport (\n\t_ \"example.com/retract\"\n\t_ \"example.com/retract/missingmod\"\n)\n```\n\n----------------------------------------\n\nTITLE: Testing GOAUTH Behavior with Unset Home Directory in Go\nDESCRIPTION: This snippet tests GOAUTH behavior when the home directory is unset. It expects a warning but not a failure when attempting to download a module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goauth_netrc.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\n[short] skip 'requires a remote vcs lookup'\n[!git] skip\n# An unset home directory should warn the user but not cause a failure.\nenv NETRC=\nenv HOME=\nenv USERPROFILE=\nenv home=\ngo get -x vcs-test.golang.org/git/emptytest.git\n[!GOOS:windows] [!GOOS:plan9] stderr 'GOAUTH=netrc: \\$HOME is not defined'\n[GOOS:windows] stderr 'GOAUTH=netrc: \\%userprofile\\% is not defined'\n[GOOS:plan9] stderr 'GOAUTH=netrc: \\$home is not defined'\n```\n\n----------------------------------------\n\nTITLE: Testing Vendor Directory Contents\nDESCRIPTION: This snippet checks the contents of the vendor directory, ensuring test dependencies are not copied and licenses are properly included.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# Test dependencies should not be copied.\n! exists vendor/x/testdata\n! exists vendor/a/foo/bar/b/ignored.go\n! exists vendor/a/foo/bar/b/main_test.go\n\n# Licenses and other metadata for each module should be copied\n# if any package within their module is copied.\nexists vendor/a/foo/AUTHORS.txt\nexists vendor/a/foo/CONTRIBUTORS\nexists vendor/a/foo/LICENSE\nexists vendor/a/foo/PATENTS\nexists vendor/a/foo/COPYING\nexists vendor/a/foo/COPYLEFT\nexists vendor/x/NOTICE!\nexists vendor/mysite/myname/mypkg/LICENSE.txt\n\n! exists vendor/a/foo/licensed-to-kill\n! exists vendor/w\n! exists vendor/w/LICENSE\n! exists vendor/x/x2\n! exists vendor/x/x2/LICENSE\n```\n\n----------------------------------------\n\nTITLE: Defining Expected Error Output for Main Module Update (Text)\nDESCRIPTION: Specifies the expected standard error output (`stderr`) when the `go get -u ./...` command fails due to the module path mismatch in `example.com/badchain/c@v1.1.0`. It indicates the module path declaration mismatch and the subsequent restoration of the older version (`v1.0.0`).\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badchain.txt#2025-04-22_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n-- update-main-expected --\ngo: example.com/badchain/c@v1.1.0: parsing go.mod:\n\tmodule declares its path as: badchain.example.com/c\n\t        but was required as: example.com/badchain/c\n\trestoring example.com/badchain/c@v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Module Checksum Configuration - B Only\nDESCRIPTION: go.sum entries with complete checksums for module B and only build list entry for module A\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_ambiguous.txt#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nexample.com/ambiguous/a v1.0.0/go.mod h1:TrBl/3xTPFJ2gmMIYz53h2gkNtg0dokszEMuyS1QEb0=\nexample.com/ambiguous/a/b v0.0.0-empty h1:xS29ReXXuhjT7jc79mo91h/PevaZ2oS9PciF1DucXtg=\nexample.com/ambiguous/a/b v0.0.0-empty/go.mod h1:MajJq5jPEBnnXP+NTWIeXX7kwaPS1sbVEJdooTmsePQ=\n```\n\n----------------------------------------\n\nTITLE: Go Version Output Program\nDESCRIPTION: Simple Go program that prints the runtime version information, used to verify experiment flags are properly propagated to the binary.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_goexperiment.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\nimport \"runtime\"\nfunc main() { println(runtime.Version()) }\n```\n\n----------------------------------------\n\nTITLE: Go Module Dependency Declaration\nDESCRIPTION: Declares a dependency on rsc.io/badfile1 version 1.0.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badfile2_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nrsc.io/badfile1 v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Encoding Package Methods and Types\nDESCRIPTION: Defines methods and types for encoding packages (base64 and json). Includes functions for strict encoding, JSON marshaling, and error handling during unmarshaling operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.8.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// encoding/base64 methods\nfunc (Encoding) Strict() *Encoding\n\n// encoding/json methods and types\nfunc (RawMessage) MarshalJSON() ([]uint8, error)\n\ntype UnmarshalTypeError struct {\n    Field string\n    Struct string\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module Download Command Tests\nDESCRIPTION: Series of go mod download commands testing various version specifications and error cases with JSON output validation\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/reuse_git.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo mod download -x -json vcs-test.golang.org/git/hello.git@v0.0.0-20170922010558-fc3a09f3dc5c\ngo mod download -x -json vcs-test.golang.org/git/hello.git@latest\ngo mod download -x -json vcs-test.golang.org/git/hello.git@fc3a09f3dc5c\n```\n\n----------------------------------------\n\nTITLE: Pruned Dependency Module\nDESCRIPTION: A Go module file for the 'pruned' dependency which requires version 0.2.0 of the 'deleted' module where the package no longer exists.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_deleted.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/pruned\n\ngo 1.17\n\nrequire example.net/deleted v0.2.0\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module declaration file specifying the module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_cgo_excluded.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule cgotest\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Testing GOWORK Environment Variable Behavior\nDESCRIPTION: Shell commands testing go list behavior with different GOWORK environment variable settings, including invalid paths and absolute path requirements.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_gowork.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GOWORK=stop.work\n! go list a # require absolute path\n! stderr panic\nenv GOWORK=doesnotexist\n! go list a\n! stderr panic\n\nenv GOWORK=$GOPATH/src/stop.work\ngo list -n a\ngo build -n a\ngo test -n a\n```\n\n----------------------------------------\n\nTITLE: Module B Configuration\nDESCRIPTION: Second module configuration also with a name that sorts after 'go' alphabetically, reinforcing the test case requirements.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_verify_work.txt#2025-04-22_snippet_3\n\nLANGUAGE: plain text\nCODE:\n```\nmodule hexample.com/b // important for test that module name sorts after 'go'\n\ngo 1.21\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module\nDESCRIPTION: Defines a Go module named 'xtestonly' using Go version 1.16.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_xtestonly_works.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule xtestonly\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Testing go list command patterns with various modules\nDESCRIPTION: A test script that verifies the behavior of 'go list' with different patterns (all, ..., example.com/m/..., ./...) to ensure it correctly selects packages based on module context. It checks that package matching works as expected and that warnings about unmatched patterns are only printed once.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_patterns.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=on\n[short] skip\n\ncd m\n\n# 'go list all' should list all of the packages used (directly or indirectly) by\n# the packages in the main module, but no other packages from the standard\n# library or active modules.\n#\n# 'go list ...' should list packages in all active modules and the standard library.\n#\n# 'go list example.com/m/...' should list packages in all modules that begin with 'example.com/m/'.\n#\n# 'go list ./...' should list only packages in the current module, not other active modules.\n#\n# Warnings about unmatched patterns should only be printed once.\n#\n# And the go command should be able to keep track of all this!\ngo list -f '{{.ImportPath}}: {{.Match}}' all ... example.com/m/... ./... ./xyz...\nstdout 'example.com/m/useunicode: \\[all \\.\\.\\. example.com/m/... ./...\\]'\nstdout 'example.com/m/useunsafe: \\[all \\.\\.\\. example.com/m/... ./...\\]'\n[cgo] stdout 'example.com/m/useC: \\[all \\.\\.\\. example.com/m/... ./...\\]'\n[!cgo] ! stdout example.com/m/useC\nstdout 'example.com/unused/useerrors: \\[\\.\\.\\.\\]' # but not \"all\"\nstdout 'example.com/m/nested/useencoding: \\[\\.\\.\\. example.com/m/...\\]' # but NOT \"all\" or \"./...\"\nstdout '^unicode: \\[all \\.\\.\\.\\]'\nstdout '^unsafe: \\[all \\.\\.\\.\\]'\nstdout 'index/suffixarray: \\[\\.\\.\\.\\]'\nstdout 'cmd/pprof: \\[\\.\\.\\.\\]'\n\nstderr -count=1 '^go: warning: \"./xyz...\" matched no packages$'\n```\n\n----------------------------------------\n\nTITLE: Gofmt Output\nDESCRIPTION: Text formatted according to Go formatting rules\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/hello.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nHello,\nworld\n\nThis is\na test.\n```\n\n----------------------------------------\n\nTITLE: Original Go Module Definition\nDESCRIPTION: Initial go.mod file defining the module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_diff.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com\n\ngo 1.22\n```\n\n----------------------------------------\n\nTITLE: Go Workspace Configuration\nDESCRIPTION: Go work file specifying workspace modules a and b\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sum_mismatch.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\n\nuse ./a\nuse ./b\n```\n\n----------------------------------------\n\nTITLE: Module Implementation\nDESCRIPTION: Implements a simple function M() in the main module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_install_submodule.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage m\n\nfunc M() {}\n```\n\n----------------------------------------\n\nTITLE: Skipped Test Implementation in Go\nDESCRIPTION: A Go test file that demonstrates a skipped test by writing 'skipping' to stderr and exiting with status code 0 in TestMain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fail_newline.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage skip\n\nimport (\n\t\"os\"\n\t\"testing\"\n)\n\nfunc TestMain(m *testing.M) {\n\tos.Stderr.WriteString(\"skipping\")\n\tos.Exit(0)\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go List on Nonexistent Directory\nDESCRIPTION: Tests error message for 'go list' on a nonexistent directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dot.txt#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# golang.org/issue/27122: 'go build' of a nonexistent directory should produce\n# a helpful \"no Go files\" error message, not a generic \"unknown import path\".\n! go list ./subdir\nstderr '^no Go files in '$WORK'[/\\\\]gopath[/\\\\]src[/\\\\]dir[/\\\\]subdir$'\n```\n\n----------------------------------------\n\nTITLE: Socket Configuration Constants for Darwin ARM64\nDESCRIPTION: This snippet defines socket configuration constants including socket type (SOCK_*), socket option level (SOL_*), and maximum connection values (SOMAXCONN). These constants define fundamental socket behavior and configuration parameters.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_96\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (darwin-arm64), const SOCK_MAXADDRLEN = 255\npkg syscall (darwin-arm64), const SOCK_MAXADDRLEN ideal-int\npkg syscall (darwin-arm64), const SOCK_RDM = 4\npkg syscall (darwin-arm64), const SOCK_RDM ideal-int\npkg syscall (darwin-arm64), const SOL_SOCKET = 65535\npkg syscall (darwin-arm64), const SOMAXCONN = 128\n```\n\n----------------------------------------\n\nTITLE: Fetching and Listing Package Dependencies in Go\nDESCRIPTION: This snippet shows how to fetch a specific version of a package and list it using Go commands. It also demonstrates copying the go.mod file for comparison.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patchmod.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo get example.net/pkgremoved@v0.1.0\n\ngo list example.net/pkgremoved\nstdout '^example.net/pkgremoved'\n\ncp go.mod go.mod.orig\n```\n\n----------------------------------------\n\nTITLE: Go Module File Definition\nDESCRIPTION: A minimal Go module file used for testing. It specifies go version 1.1 as a baseline.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_exec_toolchain.txt#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nmodule m\ngo 1.1\n```\n\n----------------------------------------\n\nTITLE: HTML Module Discovery Metadata for Go Modules\nDESCRIPTION: HTML file with go-import meta tag that helps Go's module system discover and locate the module source. It specifies that vcs-test.golang.org/auth/or404 is a module hosted at the specified URL.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/auth/or404.txt#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<meta name=\"go-import\" content=\"vcs-test.golang.org/auth/or404 mod https://vcs-test.golang.org/auth/or404\">\n```\n\n----------------------------------------\n\nTITLE: Defining a Failing Input for `FuzzFail` (Go Fuzz Corpus)\nDESCRIPTION: This file is an entry in the Go fuzzing corpus located in `testdata/fuzz/FuzzFail/`. It indicates the fuzzing engine version (`go test fuzz v1`) and contains a specific input (`[]byte(\"\\x05\")`) that previously caused the `FuzzFail` test to fail. This input is saved by the fuzzer to be reused in future test runs as a regression test case.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_fuzzfail_v0.2.0.txt#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\ngo test fuzz v1\n[]byte(\"\\x05\")\n```\n\n----------------------------------------\n\nTITLE: Testing GOPATH Validation with Relative Paths\nDESCRIPTION: Test script that validates Go's handling of various GOPATH configurations. It checks rejection of relative paths, blank paths, and proper handling of empty path entries in the GOPATH environment variable.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_paths.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Regression test for GOPATH validation in GOPATH mode.\nenv GO111MODULE=off\n\nenv ORIG_GOPATH=$GOPATH\n\n# The literal path '.' in GOPATH should be rejected.\nenv GOPATH=.\n! go build go-cmd-test/helloworld.go\nstderr 'GOPATH entry is relative'\n\n# It should still be rejected if the requested package can be\n# found using another entry.\nenv GOPATH=${:}$ORIG_GOPATH${:}.\n! go build go-cmd-test\nstderr 'GOPATH entry is relative'\n\n# GOPATH cannot be a relative subdirectory of the working directory.\nenv ORIG_GOPATH\nstdout 'ORIG_GOPATH='$WORK[/\\\\]gopath\ncd $WORK\nenv GOPATH=gopath\n! go build gopath/src/go-cmd-test/helloworld.go\nstderr 'GOPATH entry is relative'\n\n# Blank paths in GOPATH should be rejected as relative (issue 21928).\nenv GOPATH=' '${:}$ORIG_GOPATH\n! go build go-cmd-test\nstderr 'GOPATH entry is relative'\n\n[short] stop\n\n# Empty paths in GOPATH should be ignored (issue 21928).\nenv GOPATH=${:}$ORIG_GOPATH\nenv GOPATH\ngo install go-cmd-test\nexists $ORIG_GOPATH/bin/go-cmd-test$GOEXE\n```\n\n----------------------------------------\n\nTITLE: Go Module with External Dependencies\nDESCRIPTION: A Go program that imports an external module and uses the runtime/debug package to print build information including module dependencies. It also includes a go:generate directive to create a file during code generation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_outside.txt#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n//go:generate touch gen.txt\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"runtime/debug\"\n\n\t_ \"example.com/version\"\n)\n\nfunc main() {\n\tinfo, ok := debug.ReadBuildInfo()\n\tif !ok {\n\t\tpanic(\"missing build info\")\n\t}\n\tfmt.Fprintf(os.Stdout, \"path is %s\\n\", info.Path)\n\tfmt.Fprintf(os.Stdout, \"main is %s %s\\n\", info.Main.Path, info.Main.Version)\n\tfor _, m := range info.Deps {\n\t\tfmt.Fprintf(os.Stdout, \"using %s %s\\n\", m.Path, m.Version)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal Go Program\nDESCRIPTION: Empty main package implementation with no functionality\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_gomod_in_gopath.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Testing Default GOPROXY and GOSUMDB Settings in Go\nDESCRIPTION: This snippet checks the default values for GOPROXY and GOSUMDB environment variables in Go. It verifies that GOPROXY defaults to 'https://proxy.golang.org,direct' and GOSUMDB defaults to 'sum.golang.org'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_golang.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GOPROXY=\nenv GOSUMDB=\ngo env GOPROXY\ngo env GOSUMDB\nenv GOPROXY=https://proxy.golang.org\ngo env GOSUMDB\n```\n\n----------------------------------------\n\nTITLE: Reading and Comparing ACLs using PowerShell\nDESCRIPTION: Uses PowerShell commands to read and store ACLs for the built executables and source file, then compares them.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_acl_windows.txt#2025-04-22_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nexec powershell -Command 'Get-Acl main.exe | Select -expand AccessToString'\ncp stdout $WORK\\exe-acl.txt\nexec powershell -Command 'Get-Acl main.go | Select -expand AccessToString'\ncp stdout $WORK\\src-acl.txt\ncd $TMP\nexec powershell -Command 'Get-Acl main.exe | Select -expand AccessToString'\ncp stdout $WORK\\guest-acl.txt\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module\nDESCRIPTION: This snippet defines a Go module named 'm' in the go.mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_print.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Defining Dependency Module 'a' with Circular Dependency in Go\nDESCRIPTION: This go.mod file for module 'example.net/a' requires 'example.net/m v0.1.0', creating a circular dependency for testing purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue48511.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/a\n\ngo 1.16\n\nrequire example.net/m v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Testing Relative -pkgdir Argument in Go Build Command\nDESCRIPTION: This script tests if the Go command can accept a relative path for the -pkgdir flag. It sets up a custom GOCACHE directory, disables Go modules, and attempts to build the runtime package with a relative pkgdir path ('.') which should succeed if the issue is fixed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_relative_pkgdir.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=off\n\n# Regression test for golang.org/issue/21309: accept relative -pkgdir argument.\n\n[short] skip\n\nmkdir $WORK/gocache\nenv GOCACHE=$WORK/gocache\ngo build -pkgdir=. runtime\n```\n\n----------------------------------------\n\nTITLE: Switching Go Proxy to Filesystem-Based Module Cache - Shell\nDESCRIPTION: This snippet conditionally sets the 'GOPROXY' environment variable to point to the local filesystem cache where module versions have been stored, using correct file URI syntax for the current OS. It also sets a new GOMODCACHE directory to isolate test side effects. The configuration ensures that subsequent module resolutions occur against the simulated proxy containing limited metadata. There are no runtime parameters, just environment variables.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_issue61423.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n[GOOS:windows] env GOPROXY=file:///$WORK/mod1/cache/download\n[!GOOS:windows] env GOPROXY=file://$WORK/mod1/cache/download\nenv GOMODCACHE=$WORK/modcache2\n\n```\n\n----------------------------------------\n\nTITLE: Go Workspace Configuration\nDESCRIPTION: Main workspace configuration file specifying Go version 1.18 and including two modules 'a' and 'b' in the workspace.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_why_download_graph.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\n\nuse (\n\t./a\n\t./b\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up Go environment and fetching fortune v2 module\nDESCRIPTION: Sets the GO111MODULE environment variable to 'on' and fetches the rsc.io/fortune/v2 module using go get.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_versioned.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n[short] skip\n\ngo get rsc.io/fortune/v2\n```\n\n----------------------------------------\n\nTITLE: Defining c Module with No Direct Dependencies - mod\nDESCRIPTION: This go.mod file for the c module sets up a Go module with no required dependencies. This configuration is included to demonstrate modules that only take dependencies through imports, not through the go.mod 'require' stanza.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect.txt#2025-04-22_snippet_7\n\nLANGUAGE: mod\nCODE:\n```\nmodule c\ngo 1.13\n```\n\n----------------------------------------\n\nTITLE: Defining Go Workspace Configuration\nDESCRIPTION: This snippet shows the content of the go.work file, which specifies the Go version and the modules to be used in the workspace.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_module_not_in_go_work.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\n\nuse ./b\n```\n\n----------------------------------------\n\nTITLE: Internal Package Definition\nDESCRIPTION: Defines a simple internal package that will be used in import testing. Package is placed in an internal directory to test access restrictions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_import_err.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage p\n```\n\n----------------------------------------\n\nTITLE: Testing Internal Import within golang.org/x Tests\nDESCRIPTION: Runs `go test` within the `golang.org/x/anything` module context. This verifies that test files within a `golang.org/x` module can also successfully import `golang.org/x/internal`. The expected output is `PASS`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# ...and their tests...\ngo test\nstdout PASS\n```\n\n----------------------------------------\n\nTITLE: Object Creation Functions in go/types Package\nDESCRIPTION: Functions for creating various object types like constants, variables, functions, and type names. These are used for representing program entities during type checking.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.5.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc NewConst(token.Pos, *Package, string, Type, constant.Value) *Const\nfunc NewVar(token.Pos, *Package, string, Type) *Var\nfunc NewFunc(token.Pos, *Package, string, *Signature) *Func\nfunc NewTypeName(token.Pos, *Package, string, Type) *TypeName\n```\n\n----------------------------------------\n\nTITLE: Parsing URLs with Plain Text Format\nDESCRIPTION: Example of URLs with various punctuation and special characters in plain text format, showing how end-of-sentence punctuation and special characters are handled.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/link6.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nURLs with punctuation are hard. We don't want to consume the end-of-sentence\\npunctuation.\\n\\nFor example, https://en.wikipedia.org/wiki/John_Adams_(miniseries).\\nAnd https://example.com/[foo]/bar{. And https://example.com/(foo)/bar! And\\nhttps://example.com/{foo}/bar{. And https://example.com/)baz{foo}.\\n\\n[And https://example.com/].\n```\n\n----------------------------------------\n\nTITLE: Main Program with Direct Module Imports\nDESCRIPTION: Example Go program demonstrating correct usage of module imports without subdirectory specification. It imports modules from vcs-test.golang.org and prints hello world messages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_subdir.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"vcs-test.golang.org/go/gitreposubdir\"\n    \"vcs-test.golang.org/go/gitreposubdirv2/v2\"\n)\n\nfunc main() {\n    fmt.Println(greeter.Hello())\n    fmt.Println(greeterv2.Hello())\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Minimal Go Module (go.mod)\nDESCRIPTION: A basic `go.mod` file that declares the module's path as `m`. This file establishes the context for Go module commands executed within the same directory or subdirectories.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_install_versioned.txt#2025-04-22_snippet_5\n\nLANGUAGE: go.mod\nCODE:\n```\n-- go.mod --\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Testing go list command with CGO disabled\nDESCRIPTION: Tests the behavior of 'go list' when CGO is disabled, specifically verifying that packages using C imports are excluded from the results.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_patterns.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# disabling cgo should drop useC\n[short] skip\nenv CGO_ENABLED=0\ngo list -f '{{.ImportPath}}: {{.Match}}' all ... example.com/m/... ./... ./xyz...\n! stdout example.com/m/useC\n```\n\n----------------------------------------\n\nTITLE: Testing Path Separators in Go Archive Files\nDESCRIPTION: This snippet builds a Go archive file and checks that it doesn't contain Windows-style backslashes in paths. It specifically checks for GOROOT, text/template, and c: drive references.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/slashpath.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo build -o x.a text/template\n! grep 'GOROOT\\\\' x.a\n! grep 'text\\\\template' x.a\n! grep 'c:\\\\' x.a\n```\n\n----------------------------------------\n\nTITLE: Testing 'go doc' Command Outside Module\nDESCRIPTION: Demonstrates the behavior of 'go doc' when run outside a module context, including success for standard library packages and failure for external packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_outside.txt#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncd needmod\ngo doc\ncd ..\n\ngo doc ./needmod\n\ngo doc fmt\n\n! go doc example.com/version\nstderr 'doc: no required module provides package example.com/version: go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n```\n\n----------------------------------------\n\nTITLE: Storing Version Metadata (JSON)\nDESCRIPTION: This JSON snippet contains version information for the associated Go module or package. It stores the version string \"v1.1.0\" under the key \"Version\". This likely serves as metadata for version control or build systems.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_prev_v1.1.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n-- .info --\n{\"Version\":\"v1.1.0\"}\n```\n\n----------------------------------------\n\nTITLE: Defining a Go Module with Legacy Go Version\nDESCRIPTION: This go.mod file defines a module using Go version 1.0 and requires the golang.org/x/text package. It demonstrates how very old Go versions can be specified in module files for compatibility testing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_oldgo.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/legacy/go1\n\ngo 1.0\n\nrequire golang.org/x/text v0.3.0\n```\n\n----------------------------------------\n\nTITLE: Vendoring Go Modules Without Version Information\nDESCRIPTION: This snippet shows the process of vendoring Go modules without version information in vendor/modules.txt, demonstrating how this affects build outcomes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_goversion.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo mod vendor\n\n! grep 1.17 vendor/modules.txt\n! go build example.net/need117\nstderr '^vendor[/\\\\]example\\.net[/\\\\]need117[/\\\\]need117.go:5:1[89]:'\nstderr 'conversion of slice to array pointer requires go1\\.17 or later'\n\n! grep 1.13 vendor/modules.txt\ngo build example.net/bad114\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Package Import Metadata in HTML\nDESCRIPTION: HTML document that specifies the VCS configuration for importing a Go package. Uses the go-import meta tag to define the import path, VCS type (git), and repository URL for an insecure Go package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/go/insecure.txt#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<meta name=\"go-import\" content=\"vcs-test.golang.org/insecure/go/insecure git https://vcs-test.golang.org/git/insecurerepo\">\n```\n\n----------------------------------------\n\nTITLE: Testing Go Commands with File Arguments\nDESCRIPTION: A series of commands demonstrating that 'go install', 'go test', and 'go vet' commands work properly with file arguments rather than package paths.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_outside.txt#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# 'go install' should work with file arguments.\ngo install ./stdonly/stdonly.go\n\n# 'go test' should work with file arguments.\ngo test -v ./stdonly/stdonly_test.go\nstdout 'stdonly was tested'\n\n# 'go vet' should work with file arguments.\ngo vet ./stdonly/stdonly.go\n```\n\n----------------------------------------\n\nTITLE: Shell Commands for Go Module Test Setup\nDESCRIPTION: Series of shell commands to set up and test Go module behavior with symlinks and module dependencies\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_symlink_issue35941.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n[!symlink] skip\n\ncd m\nsymlink symlink -> ../outside\n\ncp go.mod go.mod.orig\n\n# Issue 35941: suppress symlink warnings when running 'go mod tidy'.\n# 'go mod tidy' should not scan packages in symlinked subdirectories.\ngo mod tidy\n! stderr 'warning: ignoring symlink'\ncmp go.mod go.mod.orig\n\n! go build ./symlink\nstderr '^symlink[\\/]symlink.go:3:8: module example.net/unresolved provides package example.net/unresolved and is replaced but not required; to add it:\\n\\tgo get example.net/unresolved@v0.1.0$'\n```\n\n----------------------------------------\n\nTITLE: Defining Termios struct for NetBSD ARM64 in syscall package\nDESCRIPTION: Definition of the Termios struct in the syscall package for NetBSD ARM64 architecture. This struct is used for terminal I/O interfaces, containing control flags and settings for terminal devices.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_167\n\nLANGUAGE: go\nCODE:\n```\ntype Termios struct {\n\tIflag uint32\n\tOflag uint32\n\tCflag uint32\n\tLflag uint32\n\tCc [20]uint8\n\tIspeed int32\n\tOspeed int32\n}\n```\n\n----------------------------------------\n\nTITLE: Unused Placeholder Source Code for 'c' v0.2.0\nDESCRIPTION: A placeholder file indicating the location for the source code of a different version (v0.2.0) of module `c`. This file is explicitly marked as unused in the test setup.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_import_allmod.txt#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n-- c2/c.go --\nThis file should be unused.\n```\n\n----------------------------------------\n\nTITLE: Package Variable Definition in Go\nDESCRIPTION: Defines a package named `pkg` with a single variable `Text` initialized to \"unset\". This variable is intended to be set via the build process using ldflags, showing flexibility in environment configuration.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_link_x_import_path_escape.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n-- pkg.go --\npackage pkg\n\nvar Text = \"unset\"\n```\n\n----------------------------------------\n\nTITLE: Defining Root Package `pkgadded` in Go (v1.1.0)\nDESCRIPTION: This Go code defines the initial root package `pkgadded` for the module `example.net/pkgadded`. The comment indicates this package was introduced in version v1.1.0. The snippet contains only the package declaration.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_pkgadded_v1.1.0.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Package pkgadded was added in v1.1.0.\npackage pkgadded\n```\n\n----------------------------------------\n\nTITLE: Invalid Archive Files - Go Object Code\nDESCRIPTION: These represent object code archives named `foo.a` and `baz.a`. The content `bad` is intentionally provided to reflect invalid or placeholder archive content, showcasing how incorrect archives are treated in the installation process.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_gopath_order.txt#2025-04-22_snippet_2\n\nLANGUAGE: unknown\nCODE:\n```\nbad\n```\n\nLANGUAGE: unknown\nCODE:\n```\nbad\n```\n\n----------------------------------------\n\nTITLE: Main Module Configuration\nDESCRIPTION: Primary go.mod file defining the module, its Go version requirement, and dependencies including replacement directives\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_indirect.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/tidy\n\ngo 1.16\n\nrequire (\n\texample.net/incomplete v0.1.0\n\texample.net/indirect v0.2.0 // indirect\n\texample.net/toolow v0.1.0\n)\n\nreplace (\n\texample.net/incomplete v0.1.0 => ./incomplete\n\texample.net/indirect v0.1.0 => ./indirect.1\n\texample.net/indirect v0.2.0 => ./indirect.2\n\texample.net/toolow v0.1.0 => ./toolow\n)\n```\n\n----------------------------------------\n\nTITLE: Memory Management Functions in syscall Package for NetBSD ARM64\nDESCRIPTION: These functions provide memory-mapped I/O operations, allowing file contents to be mapped directly into memory for efficient access without explicit read/write operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_84\n\nLANGUAGE: Go\nCODE:\n```\nfunc Mmap(int, int64, int, int, int) ([]uint8, error)\nfunc Munmap([]uint8) error\n```\n\n----------------------------------------\n\nTITLE: Source Code for Package 'a' (Go)\nDESCRIPTION: The source code for package `a` within module `a`. This file is empty as its purpose in the test is just to exist and have a test file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_import_allmod.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n-- a1/a.go --\npackage a\n```\n\n----------------------------------------\n\nTITLE: Defining the `fuzzfail` Go Module\nDESCRIPTION: This `go.mod` file formally declares the Go module with the path `example.com/fuzzfail`. It also specifies that the code within the module requires Go version `1.18` or a compatible later version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_fuzzfail_v0.2.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: gomod\nCODE:\n```\nmodule example.com/fuzzfail\n\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Printing Version in Go Application\nDESCRIPTION: This Go snippet defines a simple main package that prints the module version using fmt.Println(). It requires the fmt package from the Go standard library. The input is hardcoded as a version string that is outputted to the console.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_undeprecated_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\\n\\nimport \\\"fmt\\\"\\n\\nfunc main() { fmt.Println(\\\"a@v1.0.0\\\") }\n```\n\n----------------------------------------\n\nTITLE: Handling Non-existent SVN Module Download in Go\nDESCRIPTION: Tests the behavior of 'go mod download' when attempting to download a non-existent module from an SVN repository. Ensures it fails with an appropriate error message without panicking.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_svn.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n! go mod download vcs-test.golang.org/svn/nonexistent.svn@latest\n! stderr panic\nstderr 'go: module vcs-test.golang.org/svn/nonexistent.svn: no matching versions for query \"latest\"$'\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module and Package\nDESCRIPTION: The `go.mod` and `p.go` files define a simple module in Go. The `go.mod` file specifies a module named 'testdata'. The `p.go` file declares a package 'p'. These files simulate a basic Go module without additional dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_testdata.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n-- go.mod --\nmodule testdata\n-- p.go --\npackage p\n```\n\n----------------------------------------\n\nTITLE: Go Module Version Information\nDESCRIPTION: This snippet provides version information for a Go module. The 'Version' key specifies the version 'v1.0.0-multiline2', and this information is used by the Go module system to manage dependency versions. The dependency on a Go toolchain is implied for processing this information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rationale_v1.0.0-multiline2.txt#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\"Version\":\"v1.0.0-multiline2\"}\n```\n\n----------------------------------------\n\nTITLE: Building package with CGO_LDFLAGS environment variable (Go)\nDESCRIPTION: This snippet defines a Go package that imports the C package without specifying LDFLAGS. It's expected to build successfully when the flags are provided through the CGO_LDFLAGS environment variable.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/ldflag.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage ok\n\nimport \"C\"\n\nfunc F() {}\n```\n\n----------------------------------------\n\nTITLE: Event Filter Constants for NetBSD ARM64\nDESCRIPTION: Defines constants for event filtering and handling in NetBSD ARM64. Includes event types, filters, and flags for system event handling.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_25\n\nLANGUAGE: Go\nCODE:\n```\nconst (\n    EVFILT_READ = 0\n    EVFILT_WRITE = 1\n    EVFILT_AIO = 2\n    EVFILT_VNODE = 3\n    EVFILT_PROC = 4\n    EVFILT_SIGNAL = 5\n    EVFILT_TIMER = 6\n    EV_ADD = 1\n    EV_DELETE = 2\n    EV_ENABLE = 4\n)\n```\n\n----------------------------------------\n\nTITLE: NetBSD ARM64 IPv6-specific Structures Definition in Go\nDESCRIPTION: Defines IPv6-specific structures including ICMPv6Filter, Inet6Pktinfo, and IPv6MTUInfo. These are used for IPv6 socket options and operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_101\n\nLANGUAGE: go\nCODE:\n```\ntype ICMPv6Filter struct {\n\tFilt [8]uint32\n}\n\ntype Inet6Pktinfo struct {\n\tAddr [16]uint8\n\tIfindex uint32\n}\n\ntype IPv6MTUInfo struct {\n\tAddr RawSockaddrInet6\n\tMtu uint32\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal Vendored Package q\nDESCRIPTION: A minimal vendored package 'q' that only contains a package declaration.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_vendor.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage q\n```\n\n----------------------------------------\n\nTITLE: Error Constants in Go Syscall Package for Darwin ARM64\nDESCRIPTION: Error number constants (errno) used in system calls on Darwin ARM64. These constants represent different types of errors that can occur during system operations, such as file access errors, network errors, and resource limitation errors.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_144\n\nLANGUAGE: Go\nCODE:\n```\nconst EALREADY = 37\nconst EAUTH = 80\nconst EAUTH Errno\nconst EBADARCH = 86\nconst EBADARCH Errno\nconst EBADEXEC = 85\nconst EBADEXEC Errno\nconst EBADF = 9\nconst EBADMACHO = 88\nconst EBADMACHO Errno\nconst EBADMSG = 94\nconst EBADMSG Errno\nconst EBADRPC = 72\nconst EBADRPC Errno\nconst EBUSY = 16\nconst ECANCELED = 89\nconst ECHILD = 10\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Main Package (Go)\nDESCRIPTION: Defines a minimal Go program belonging to the 'main' package. It contains only an empty 'main' function. This file serves as the base package being tested and resides at '$GOPATH/src/pkg/pkg.go'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_split_main.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// $GOPATH/src/pkg/pkg.go --\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Testing Panic in TestMain\nDESCRIPTION: This snippet tests a Go package where TestMain panics. It verifies that the test is marked as failing using both go test -json and go tool test2json commands.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_exit.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n! go test -json ./mainpanic\nstdout '\"Action\":\"fail\"'\n! stdout '\"Action\":\"pass\"'\n\n! go tool test2json ./mainpanic.exe\nstdout '\"Action\":\"fail\"'\n! stdout '\"Action\":\"pass\"'\n```\n\n----------------------------------------\n\nTITLE: Testing Executable Name Output in Go\nDESCRIPTION: Go program that prints the base name of the executable being run using filepath.Base() and os.Args[0]. Used to verify the naming behavior of temporary executables created by 'go run' command.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_set_executable_name.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\nimport(\n\t\"os\"\n\t\"path/filepath\"\n)\nfunc main() {\n\tprintln(filepath.Base(os.Args[0]))\n}\n```\n\n----------------------------------------\n\nTITLE: Running Go List Command to Check Test Imports\nDESCRIPTION: This shell command uses 'go list' with a format flag to display test imports. The script verifies that imports from _test.go files appear in the TestImports field.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/std_vendor.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo list -f '{{.TestImports}}'\n```\n\n----------------------------------------\n\nTITLE: Storing Version Information (JSON)\nDESCRIPTION: This JSON snippet, found in a `.info` file, stores version information (`v0.2.0`). This metadata is likely used internally by Go tooling, possibly relating to the module or its dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_fuzzfail_v0.2.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.2.0\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Hello Package in Go\nDESCRIPTION: This snippet creates a separate 'hello' package within the module structure. It's an empty package declaration.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_ignore_leading_bom.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage hello\n```\n\n----------------------------------------\n\nTITLE: Testing Package Resolution Outside Main Module\nDESCRIPTION: Tests error message for a package found in the filesystem but not part of the main module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dot.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# golang.org/issue/30590: if a package is found in the filesystem\n# but is not in the main module, the error message should not say\n# \"cannot find module providing package\", and we shouldn't try\n# to find a module providing the package.\n! go list ./othermodule\n! stderr 'cannot find module providing package'\nstderr '^main module \\(example\\.com\\) does not contain package example.com/othermodule$'\n```\n\n----------------------------------------\n\nTITLE: HTML Template for Missing Git Repository\nDESCRIPTION: HTML template with a go-import meta tag for a non-existent Git repository. This defines a module path of 'vcs-test.golang.org/go/missingrepo/missingrepo-git' pointing to a Git repo that doesn't exist.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/go/missingrepo.txt#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<meta name=\"go-import\" content=\"vcs-test.golang.org/go/missingrepo/missingrepo-git git https://vcs-test.golang.org/git/missingrepo\">\n```\n\n----------------------------------------\n\nTITLE: Pre-revprop-change hook script\nDESCRIPTION: Shell script hook for SVN that executes before revision properties are changed. This minimal implementation allows property changes without any checks.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/test2-svn-git.txt#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\n\n```\n\n----------------------------------------\n\nTITLE: Testing Go Coverage Instrumentation in Shell Script\nDESCRIPTION: A shell script that tests Go's coverage instrumentation behavior. It compiles an object, builds a standard library command with coverage, runs it, and then verifies that only the main package was instrumented and not its dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_build_cmdline_pkgs.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# This test is intended to verify that when a user does \"go run -cover ...\"\n# or \"go build -cover ...\", packages named on the command line are\n# always instrumented (but not their dependencies). This rule applies\n# inside and outside the standard library.\n\n[short] skip\n\n# Compile an object.\ngo tool compile -p tiny tiny/tiny.go tiny/tiny2.go\n\n# Build a stdlib command with coverage.\ngo build -o $WORK/nm.exe -cover cmd/nm \n\n# Save off old GOCOVERDIR setting\nenv SAVEGOCOVERDIR=$GOCOVERDIR\n\n# Collect a coverage profile from running 'cmd/nm' on the object.\nmkdir $WORK/covdata\nenv GOCOVERDIR=$WORK/covdata\nexec $WORK/nm.exe tiny.o\n\n# Restore previous GOCOVERDIR setting\nenv GOCOVERDIR=$SAVEGOCOVERDIR\n\n# Check to make sure we instrumented just the main package, not\n# any dependencies.\ngo tool covdata pkglist -i=$WORK/covdata\nstdout cmd/nm\n! stdout cmd/internal/goobj pkglist.txt\n\n# ... now collect a coverage profile from a Go file\n# listed on the command line.\ngo build -cover -o $WORK/another.exe testdata/another.go\nmkdir $WORK/covdata2\nenv GOCOVERDIR=$WORK/covdata2\nexec $WORK/another.exe \n\n# Restore previous GOCOVERDIR setting\nenv GOCOVERDIR=$SAVEGOCOVERDIR\n\n# Check to make sure we instrumented just the main package.\ngo tool covdata pkglist -i=$WORK/covdata2\nstdout command-line-arguments\n! stdout fmt\n```\n\n----------------------------------------\n\nTITLE: Setting Git Operation Timestamp in Bash\nDESCRIPTION: Sets a specific timestamp for Git operations to ensure reproducible commits.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/retract-pseudo.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nat 2020-10-09T13:37:47-04:00\n```\n\n----------------------------------------\n\nTITLE: Mach-O Flag Constants - debug/macho\nDESCRIPTION: Flag constants for Mach-O binary format controlling various linking and execution behaviors\nSOURCE: https://github.com/golang/go/blob/master/api/go1.10.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nconst (\n    FlagNoUndefs = 1\n    FlagIncrLink = 2\n    FlagDyldLink = 4\n    FlagBindAtLoad = 8\n    FlagPrebound = 16\n)\n```\n\n----------------------------------------\n\nTITLE: Adding time measurement methods to Duration type in time package\nDESCRIPTION: Declaration of Microseconds and Milliseconds methods for the Duration type in the time package. These methods convert a duration to microseconds and milliseconds respectively.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_177\n\nLANGUAGE: go\nCODE:\n```\nfunc (Duration) Microseconds() int64\nfunc (Duration) Milliseconds() int64\n```\n\n----------------------------------------\n\nTITLE: Example Function Order Preservation Test\nDESCRIPTION: Go test file containing two example functions that verify source order preservation during test execution using a shared counter variable\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_only_example.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Copyright 2013 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// Make sure that go test runs Example_z before Example_a, preserving source order.\n\npackage p\n\nimport \"fmt\"\n\nvar n int\n\nfunc Example_z() {\n\tn++\n\tfmt.Println(n)\n\t// Output: 1\n}\n\nfunc Example_a() {\n\tn++\n\tfmt.Println(n)\n\t// Output: 2\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Go Module Info Files\nDESCRIPTION: Downloads .info files needed for 'go list -m all' command. Includes a TODO comment about potential improvements to this process.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gonoproxy.txt#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngo list -m all\nstdout '^golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c$'\n```\n\n----------------------------------------\n\nTITLE: Running Go Program With Trimpath and Vendor Mode\nDESCRIPTION: This snippet runs a Go program with both -trimpath and -mod=vendor flags, expecting the output to show a trimmed path including the module version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_trimpath.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo run -mod=vendor -trimpath main.go\nstdout '^example.com/stack@v1.0.0/stack.go$'\n```\n\n----------------------------------------\n\nTITLE: Implementing Race-Enabled Go Test\nDESCRIPTION: This Go test file is conditionally compiled with the 'race' build tag. It imports the 'rsc.io/sampler' package as a side effect and defines an empty test function 'TestRaceTag'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_race_tag.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n//go:build race\n\npackage testrace\n\nimport (\n        \"testing\"\n\n        _ \"rsc.io/sampler\"\n)\n\nfunc TestRaceTag(t *testing.T) {\n}\n```\n\n----------------------------------------\n\nTITLE: Adding TextVar function to Go's flag package\nDESCRIPTION: Introduces a new function TextVar in the flag package for handling text-based flag variables using the encoding.TextUnmarshaler and encoding.TextMarshaler interfaces.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.19.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nfunc TextVar(encoding.TextUnmarshaler, string, encoding.TextMarshaler, string)\nmethod (*FlagSet) TextVar(encoding.TextUnmarshaler, string, encoding.TextMarshaler, string)\n```\n\n----------------------------------------\n\nTITLE: Defining SocketControlMessage Structure in Go for NetBSD ARM64\nDESCRIPTION: Definition of the SocketControlMessage struct used for ancillary data in socket operations. It contains a header field of type Cmsghdr and a Data field for the actual control message data.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_105\n\nLANGUAGE: Go\nCODE:\n```\ntype SocketControlMessage struct {\n    Header Cmsghdr\n    Data []uint8\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid GOAUTH Configuration in Go\nDESCRIPTION: This snippet tests an invalid GOAUTH configuration where 'off' is combined with other authentication commands. It expects a specific error message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goauth_netrc.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n# GOAUTH=off cannot be combined with other authentication commands\nenv GOAUTH='off; netrc'\nenv NETRC=$WORK/netrc\n! go get vcs-test.golang.org/auth/or401\nstderr 'GOAUTH=off cannot be combined with other authentication commands \\(GOAUTH=off; netrc\\)'\n```\n\n----------------------------------------\n\nTITLE: Main Package Implementation in Go\nDESCRIPTION: Main package that imports and uses packages 'a' and 'b', defines functions MFunc and M2Func, and includes an init function and main function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_multipkg.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"M/a\"\n\t\"M/b\"\n)\n\nfunc MFunc() string {\n\treturn \"42\"\n}\n\nfunc M2Func() int {\n\treturn a.AFunc() + b.BFunc()\n}\n\nfunc init() {\n\tprintln(\"package 'main' init\")\n}\n\nfunc main() {\n\tprintln(a.AFunc() + b.BFunc())\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated Network Configuration Functions\nDESCRIPTION: Deprecated functions for network configuration and routing including parsing routing messages, managing routing tables, and handling routing socket addresses. These functions were part of the platform-specific networking implementations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_43\n\nLANGUAGE: go\nCODE:\n```\nfunc ParseRoutingMessage() //deprecated\nfunc ParseRoutingSockaddr() //deprecated\nfunc RouteRIB() //deprecated\nfunc SetBpf() //deprecated\nfunc StringSlicePtr() //deprecated\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Path for modtest5\nDESCRIPTION: This snippet contains the `go.mod` file content, which declares the canonical import path for the Go module as `github.com/dmitshur-test/modtest5`. This is the first line typically found in a `go.mod` file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/github.com_dmitshur-test_modtest5_v0.5.0-alpha.0.20190619023908-3da23a9deb9e.txt#2025-04-22_snippet_0\n\nLANGUAGE: gomod\nCODE:\n```\nmodule github.com/dmitshur-test/modtest5\n```\n\n----------------------------------------\n\nTITLE: Listing Standard Library Packages with Vendored Paths in Shell\nDESCRIPTION: This shell command uses 'go list' to report vendored packages as standard library components, ensuring dependencies follow vendored paths. No external dependencies are required as it's a native Go tool invocation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_std.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo list -f '{{if .Standard}}{{.ImportPath}}{{end}}' std cmd\n```\n\n----------------------------------------\n\nTITLE: Expected Tidy Module Definition\nDESCRIPTION: Shows the expected state of go.mod after running 'go mod tidy', with the self-reference removed and proper dependency version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_lazy_self.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule golang.org/issue/46078\n\ngo 1.17\n\nreplace (\n\texample.net/x v0.1.0 => ./x\n\texample.net/x v0.2.0 => ./x\n\tgolang.org/issue/46078 v0.1.0 => ./old\n)\n\nrequire example.net/x v0.2.0\n```\n\n----------------------------------------\n\nTITLE: Testing Go Get with Test-only Packages\nDESCRIPTION: This snippet demonstrates how 'go get' handles modules with test-only packages and their dependencies, addressing issue #29268.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pkgtags.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ngo get example.net/testonly@v0.1.0\n\n! go get -t example.net/testonly@v0.1.0\nstderr '^go: example.net/testonly tested by\\n\\texample.net/testonly\\.test imports\\n\\texample.net/missing: cannot find module providing package example.net/missing$'\n```\n\n----------------------------------------\n\nTITLE: SQL Package Architecture Flow\nDESCRIPTION: Illustrates the architectural flow between user code, SQL package, and database drivers showing how the components interact through concrete types and interfaces.\nSOURCE: https://github.com/golang/go/blob/master/src/database/sql/doc.txt#2025-04-22_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nUser Code ---> sql package (concrete types) ---> sql/driver (interfaces)\nDatabase Driver -> sql (to register) + sql/driver (implement interfaces)\n```\n\n----------------------------------------\n\nTITLE: Go Package with External Dependency\nDESCRIPTION: This Go file defines a package named 'mod' and imports 'rsc.io/quote' as a blank import. This import is used to test the behavior of 'go mod tidy' in managing dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_support_buildx.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage mod\nimport _ \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: Executing Go Version Script\nDESCRIPTION: This shell script outputs the Go version for this toolchain module. There are no special dependencies to run this script directly from the command line. The script uses the echo command to return the mocked Go version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.dragonfly-amd64.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n#!/bin/sh\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Adding Git repository to SVN and committing\nDESCRIPTION: Adds the Git repository and package to SVN version control, commits them, and sets SVN properties for author and date on the first revision.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/test2-svn-git.txt#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsvn add .git pkg\nsvn commit -m 'git'\nsvn propset svn:author rsc --revprop -r1\nsvn propset svn:date 2017-09-27T18:00:52.201719Z --revprop -r1\n```\n\n----------------------------------------\n\nTITLE: Creating Test File with Circular Import\nDESCRIPTION: Defines a test that imports the main package, completing the circular import. This is used to verify that Go's test command correctly detects and handles the circular import involving a main package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_import_main_loop.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage test_test\n\nimport \"testing\"\nimport _ \"importmain/ismain\"\n\nfunc TestCase(t *testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Adding new methods to sync package\nDESCRIPTION: This snippet introduces new TryLock methods for Mutex and RWMutex types in the sync package. These methods attempt to acquire locks without blocking.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.18.txt#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\npkg sync, method (*Mutex) TryLock() bool\npkg sync, method (*RWMutex) TryLock() bool\npkg sync, method (*RWMutex) TryRLock() bool\n```\n\n----------------------------------------\n\nTITLE: Adding new tag and testing version detection\nDESCRIPTION: Adds a new tag v1.0.10 to the repository and verifies go get properly detects and uses the new tag.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/get_issue53955.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncd $WORK/repo\nexec git tag v1.0.10\n\ncd $WORK/m\ngo get -x github.com/golang/issue53955@v1.0.10\n! stderr 'v1\\.0\\.10 is not a tag'\nstderr '^go: upgraded github.com/golang/issue53955 v.* => v1\\.0\\.10$'\n```\n\n----------------------------------------\n\nTITLE: Implementing GoodPlayer Method for ThirdBase Struct in Go\nDESCRIPTION: Defines a method 'GoodPlayer' for the ThirdBase struct that returns three integers. This method probably evaluates or retrieves statistics for a good player at third base.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/api/testdata/src/pkg/p3/golden.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc (*ThirdBase) GoodPlayer() (int, int, int)\n```\n\n----------------------------------------\n\nTITLE: Using `go vet` with Directory Context in Shell\nDESCRIPTION: Illustrates `go vet` to analyze and verify Go code with a specified directory using `-C`. It identifies potential issues in the `strings` test code, requiring a configured Go environment.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/chdir.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo vet -C ../strings -n\nstderr strings_test\n```\n\n----------------------------------------\n\nTITLE: JSON Format Go Workspace Configuration\nDESCRIPTION: Structured JSON representation of go.work file settings including Go version, module usage, and replacements\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_edit.txt#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"Go\": \"1.19\",\n\t\"Use\": [\n\t\t{\n\t\t\t\"DiskPath\": \"../a\"\n\t\t},\n\t\t{\n\t\t\t\"DiskPath\": \"./b\"\n\t\t}\n\t],\n\t\"Replace\": [\n\t\t{\n\t\t\t\"Old\": {\n\t\t\t\t\"Path\": \"x.1\",\n\t\t\t\t\"Version\": \"v1.4.0\"\n\t\t\t},\n\t\t\t\"New\": {\n\t\t\t\t\"Path\": \"../z\"\n\t\t\t}\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Windows DNS Resolution Constants and Functions\nDESCRIPTION: Defines constants and functions for DNS resolution on Windows, including section identifiers and name comparison functionality for both 386 and amd64 architectures.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_25\n\nLANGUAGE: Go\nCODE:\n```\nconst (\n    DNS_INFO_NO_RECORDS = 9501\n    DnsSectionQuestion = 0\n    DnsSectionAnswer = 1\n    DnsSectionAuthority = 2\n    DnsSectionAdditional = 3\n)\n\nfunc DnsNameCompare(*uint16, *uint16) bool\n```\n\n----------------------------------------\n\nTITLE: Terminal Configuration Struct for darwin-arm64\nDESCRIPTION: Definition of the Termios struct used for terminal I/O configuration on darwin-arm64 platforms, controlling terminal attributes like input/output processing and line discipline.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_136\n\nLANGUAGE: go\nCODE:\n```\ntype Termios struct {\n\tIflag uint64\n\tOflag uint64\n\tCflag uint64\n\tLflag uint64\n\tCc [20]uint8\n\tIspeed uint64\n\tOspeed uint64\n\tPad_cgo_0 [4]uint8\n}\n```\n\n----------------------------------------\n\nTITLE: Expected Module Graph Output\nDESCRIPTION: Expected output from 'go mod graph' command showing module dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_skip_write.txt#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nm go@1.18\nm golang.org/x/text@v0.0.0-20170915032832-14c0d48ead0c\nm rsc.io/quote@v1.5.2\nm rsc.io/sampler@v1.3.0\nm rsc.io/testonly@v1.0.0\nrsc.io/quote@v1.5.2 rsc.io/sampler@v1.3.0\nrsc.io/sampler@v1.3.0 golang.org/x/text@v0.0.0-20170915032832-14c0d48ead0c\n```\n\n----------------------------------------\n\nTITLE: Go Module with Indirect Requirements\nDESCRIPTION: Final go.mod file showing both direct and indirect dependencies marked with // indirect comments\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_promote_implicit.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.16\n\nrequire (\n\tdirect v1.0.0\n\tindirect-with-pkg v1.0.0 // indirect\n\tindirect-without-pkg v1.0.0 // indirect\n)\n\nreplace (\n\tdirect v1.0.0 => ./direct\n\tindirect-with-pkg v1.0.0 => ./indirect-with-pkg\n\tindirect-without-pkg v1.0.0 => ./indirect-without-pkg\n)\n```\n\n----------------------------------------\n\nTITLE: HTML Template for Valid Repository in SSH Subdirectory\nDESCRIPTION: HTML template with a go-import meta tag for a valid repository in an SSH Git subdirectory. This maps a module path to an existing Git repository using HTTPS instead of SSH.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/go/missingrepo.txt#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<meta name=\"go-import\" content=\"vcs-test.golang.org/go/missingrepo/missingrepo-git-ssh/notmissing git https://vcs-test.golang.org/git/mainonly\">\n```\n\n----------------------------------------\n\nTITLE: Shell Setup Commands for Go Testing Environment\nDESCRIPTION: Shell commands to set up the test environment, including creating directories, copying files, and configuring GOPATH.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_dedup_packages.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=off\nmkdir $WORK/tmp/testdata/src/xtestonly\ncp f.go $WORK/tmp/testdata/src/xtestonly/f.go\ncp f_test.go $WORK/tmp/testdata/src/xtestonly/f_test.go\nenv GOPATH=$WORK/tmp/testdata\ncd $WORK\n\ngo list xtestonly ./tmp/testdata/src/xtestonly/...\ncmp stdout $WORK/gopath/src/wantstdout\n```\n\n----------------------------------------\n\nTITLE: Go Get with Empty Rationale\nDESCRIPTION: This snippet tests the behavior of 'go get' when a module version is retracted without a rationale. It asserts that a hard-coded message is printed to stderr.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_rationale.txt#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo get example.com/retract/rationale@v1.0.0-empty\nstderr '^go: warning: example.com/retract/rationale@v1.0.0-empty: retracted by module author$'\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests with Empty TERM Environment Variable\nDESCRIPTION: A shell script that sets the TERM environment variable to an empty string before running a Go test. It verifies the test output doesn't contain '[no tests to run]' but does contain 'ok'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_env_term.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv TERM=''\ngo test test_test.go\n! stdout '^ok.*\\[no tests to run\\]'\nstdout '^ok'\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Environment Variables for Repository Setup\nDESCRIPTION: Sets up Git author and committer information using environment variables. This ensures consistent authorship information for commits created in the repository.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/gitreposubdirv2.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GIT_AUTHOR_NAME='Sam Thanawalla'\nenv GIT_AUTHOR_EMAIL='samthanawalla@google.com'\nenv GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME\nenv GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL\n```\n\n----------------------------------------\n\nTITLE: Example Module Definitions and Implementations\nDESCRIPTION: This set of Go module definitions with Go source files provides a workspace structure for testing. The two main modules, example.com/a and example.com/b, each define dependencies which are used to validate module handling by the go command.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_direct_work.txt#2025-04-22_snippet_1\n\nLANGUAGE: Golang\nCODE:\n```\n-- go.work --\ngo 1.23\n\nuse ./a\nuse ./b\n-- a/go.mod --\nmodule example.com/a\n\ngo 1.23\n\nrequire rsc.io/sampler v1.2.1\n\nrequire golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c // indirect\n-- a/a.go --\npackage a\n\nimport \"rsc.io/sampler\"\n\nfunc A() string {\n    return sampler.Hello()\n}\n-- b/go.mod --\nmodule example.com/b\n\ngo 1.23\n\n// The indirect comment below is inaccurate. Its purpose\n// is to test that it is corrected when enough packages\n// are loaded to correct it.\n\nrequire example.com/c v1.0.0 // indirect\n\nreplace example.com/c => ../c\n-- b/b.go --\npackage b\n\nimport \"example.com/c\"\n\nfunc B() {\n    c.C()\n}\n-- c/go.mod --\nmodule example.com/c\n\ngo 1.23\n-- c/c.go --\npackage c\n\nfunc C() {}\n```\n\n----------------------------------------\n\nTITLE: Basic Fast Fuzzing Test Implementation in Go\nDESCRIPTION: Implements a basic fuzzing test that performs no operations. Used to verify basic fuzzing behavior and timeout handling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_fuzztime.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc FuzzFast(f *testing.F) {\n\tf.Fuzz(func (*testing.T, []byte) {})\n}\n```\n\n----------------------------------------\n\nTITLE: Empty Package Declaration\nDESCRIPTION: Empty Go package file declaring package x without any content\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downgrade.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage x\n```\n\n----------------------------------------\n\nTITLE: Simulating a cloned Git repository\nDESCRIPTION: Creates necessary files and configurations to make the repository appear as if it were cloned from a remote origin. Sets up remote references, packed-refs, and tracking information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/test2-svn-git.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Fake a clone from an origin repo at this commit.\ngit remote add origin https://vcs-test.swtch.com/git/README-only\nmkdir .git/refs/remotes/origin\necho 'ref: refs/remotes/origin/master'\ncp stdout .git/refs/remotes/origin/HEAD\nunquote '# pack-refs with: peeled fully-peeled \\n7f800d2ac276dd7042ea0e8d7438527d236fd098 refs/remotes/origin/master\\n'\ncp stdout .git/packed-refs\ngit branch --set-upstream-to=origin/master\n```\n\n----------------------------------------\n\nTITLE: Vendor Package Declaration\nDESCRIPTION: Vendored version of package p that should cause build error when imported incorrectly.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_vendor_dup_err.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage p\n```\n\n----------------------------------------\n\nTITLE: Module B Go Module Definition\nDESCRIPTION: Go module configuration for module b requiring rsc.io/quote v1.5.2\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sum_mismatch.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\n\nmodule example.com/hi2\n\nrequire \"rsc.io/quote\" v1.5.2\n```\n\n----------------------------------------\n\nTITLE: Declaring a Go Module with Self-Retraction - Go\nDESCRIPTION: Declares a Go module named example.com/retract/self/prerelease and sets the minimum required Go version to 1.15. It is used to define the module boundary and constraint the toolchain version. The module directive is required for module-aware builds, while the go version restricts compatibility. No additional dependencies are listed. There are no replace or require directives, indicating this module is self-contained.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_prerelease_v1.9.1-pre.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/retract/self/prerelease\n\ngo 1.15\n\n```\n\n----------------------------------------\n\nTITLE: Testing pkg@version Syntax Rejection in GOPATH Mode\nDESCRIPTION: This test script verifies that the pkg@version syntax is properly rejected when modules are disabled with GO111MODULE=off. It tests both 'go get' and 'go build' commands to ensure they fail with appropriate error messages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_versions.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Test rejection of pkg@version in GOPATH mode.\nenv GO111MODULE=off\n! go get rsc.io/quote@v1.5.1\nstderr '^go: modules disabled by GO111MODULE=off'\n! go build rsc.io/quote@v1.5.1\nstderr '^package rsc.io/quote@v1.5.1: can only use path@version syntax with ''go get'' and ''go install'' in module-aware mode$'\n```\n\n----------------------------------------\n\nTITLE: Package B2 Test with Import\nDESCRIPTION: Test file for package b v0.2.0 which imports example.com/c.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_downgrade.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\npackage b_test\nimport _ \"example.com/c\"\n```\n\n----------------------------------------\n\nTITLE: Package B Module\nDESCRIPTION: Simple Go package used as a dependency in tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_git.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage b\n```\n\n----------------------------------------\n\nTITLE: Shell Commands for Test Execution and Validation\nDESCRIPTION: Shell script commands to run the test file and validate its output formatting. Specifically checks that non-parallel tests don't produce CONT lines in output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_chatty_success.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Run chatty tests. Assert on CONT lines.\ngo test chatty_test.go -v\n\n# Non-parallel tests should not print CONT.\n! stdout CONT\n\n# The assertion is condensed into one line so that it precisely matches output,\n# rather than skipping lines and allow rogue CONT lines.\nstdout '=== RUN   TestChatty\\n=== RUN   TestChatty/sub-0\\n    chatty_test.go:12: this is sub-0\\n    chatty_test.go:12: this is sub-0\\n=== RUN   TestChatty/sub-1\\n    chatty_test.go:12: this is sub-1\\n    chatty_test.go:12: this is sub-1\\n=== RUN   TestChatty/sub-2\\n    chatty_test.go:12: this is sub-2\\n    chatty_test.go:12: this is sub-2\\n--- PASS: TestChatty'\n```\n\n----------------------------------------\n\nTITLE: Unformatted Go Workspace File\nDESCRIPTION: Example of an unformatted go.work file with inconsistent spacing and alignment\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_edit.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\n use (\n a\n  b\n  c\n  )\n  replace (\n  x.1 v1.3.0 => y.1 v1.4.0\n                            x.1 v1.4.0 => ../z\n                            )\n```\n\n----------------------------------------\n\nTITLE: Building Go for MIPS without GOMIPS after previous softfloat build\nDESCRIPTION: This snippet tests Go compilation without setting GOMIPS after a previous build with softfloat. It verifies that floating point registers are used when GOMIPS is not set.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_gomips.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n# Clean cache\ngo clean -cache\n\n# Build without setting GOMIPS\nenv GOMIPS=\ngo build -gcflags=-S f.go\nstderr ADDD.F[0-9]+,.F[0-9]+,.F[0-9]+\n```\n\n----------------------------------------\n\nTITLE: Verifying 'set' Coverage Mode in Profile (Shell)\nDESCRIPTION: Uses `grep` to check the generated coverage profile (`$WORK/cover.out`). It asserts that the file contains exactly one line (`-count=1`) that starts with `mode: set`. This confirms that the default coverage mode ('set') was used as expected.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_modes.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngrep -count=1 '^mode: set$' $WORK/cover.out\n```\n\n----------------------------------------\n\nTITLE: Defining a Go Package in Module Root (Go)\nDESCRIPTION: This snippet contains the source code for a Go file named `x.go`. It defines a package named `m`, corresponding to the module name declared in `go.mod`. This file is part of the package structure that the `go list` command is expected to analyze.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_perm.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n-- x.go --\npackage m\n```\n\n----------------------------------------\n\nTITLE: Version Metadata for Go Module\nDESCRIPTION: This JSON structure provides metadata information about the current version (v2.0.0) of the module 'example.com/latemigrate'. This is essential for tracking module versions and ensuring compatibility, especially considering the transition past version v2.0.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_latemigrate_v2_v2.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: Structured Data\nCODE:\n```\n{\"Version\":\"v2.0.0\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mock 'gofmt' Command with Shell Script\nDESCRIPTION: A basic shell script found at 'bin/gofmt', serving as a placeholder for the 'gofmt' tool. It simply outputs the text 'i am unused', suggesting this mock implementation is not actively used or required for the specific test setup.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.freebsd-arm.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n-- bin/gofmt --\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: Importing a Dependency Package with Blank Identifier - Go\nDESCRIPTION: This Go code defines the 'root' package and imports 'golang.org/issue/mirror' with a blank identifier, ensuring the dependency is referenced without explicit use. No exported functions are defined, making this a stub intended just to pull in module dependencies as part of the test case. Requires the 'golang.org/issue/mirror' module to be available per the import path and go.mod setup.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_main.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage root\n\nimport _ \"golang.org/issue/mirror\"\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module in Go\nDESCRIPTION: This go.mod file defines the module 'x' and specifies the Go version 1.12 as a requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_upgrade_pseudo.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nmodule x\n\ngo 1.12\n```\n\n----------------------------------------\n\nTITLE: Initializing and Adding 8-bit Integers in Go SSA\nDESCRIPTION: Demonstrates the SSA representation of adding two uint8 values in Go. The example shows how values are assigned unique identifiers and how the Add8 operator is used.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/internal/ssa/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// var c uint8 = a + b\nv4 = Add8 <uint8> v2 v3\n```\n\n----------------------------------------\n\nTITLE: Testing iOS ARM64 Build Requirements\nDESCRIPTION: Verifies build failures and error messages when attempting to build Go programs for iOS/arm64 with CGO disabled.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_android_issue62123.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nenv GOOS=ios GOARCH=arm64 CGO_ENABLED=0\n\n! go build -o $devnull cmd/buildid\nstderr 'ios/arm64 requires external \\(cgo\\) linking, but cgo is not enabled'\n! stderr 'cannot find runtime/cgo'\n\n! go test -c -o $devnull os\nstderr '# os\\nios/arm64 requires external \\(cgo\\) linking, but cgo is not enabled'\n! stderr 'cannot find runtime/cgo'\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module\nDESCRIPTION: This snippet defines a basic Go module file (go.mod) with module name and Go version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_init_path.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule example\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Archive Package Updates - Go\nDESCRIPTION: Addition of Flush method to zip.Writer and updates to compression packages including new Reset functionality for flate and zlib packages.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npkg archive/zip, method (*Writer) Flush() error\n\npkg compress/flate, type Resetter interface { Reset }\npkg compress/flate, type Resetter interface, Reset(io.Reader, []uint8) error\npkg compress/zlib, type Resetter interface { Reset }\npkg compress/zlib, type Resetter interface, Reset(io.Reader, []uint8) error\n```\n\n----------------------------------------\n\nTITLE: Initializing and Setting Up Git Repository with Tagged Subdirectory\nDESCRIPTION: Initializes a Git repository, adds a subdirectory, commits it, renames the branch to master, and creates a version tag for the subdirectory. This sets up proper versioning for a Go module located in a subdirectory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/gitreposubdirv2.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit init\n\ngit add subdir\ngit commit -m 'initial commit'\ngit branch -m master\ngit tag subdir/v2.0.0\ngit show-ref --tags --heads\ncmp stdout .git-refs\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Go module definition file specifying the module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_chatty_parallel_success_run.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule chatty_parallel\n\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Referencing Go Toolchain Module in go.mod\nDESCRIPTION: This line shows the Go toolchain module path 'golang.org/toolchain' as it might appear within a project's `go.mod` file. This indicates a dependency on or requirement for this specific Go toolchain for building the project.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.18.1.linux-amd64.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ngolang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Verifying Initial Module State\nDESCRIPTION: Checks the initial state of go.mod and go.sum files before upgrades.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_update_unrelated_sum.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncp go.mod.orig go.mod\ncp go.sum.orig go.sum\ngo mod tidy\ncmp go.mod.orig go.mod\ncmp go.sum.orig go.sum\n```\n\n----------------------------------------\n\nTITLE: Handling Unknown Directives in go.mod\nDESCRIPTION: This shell script demonstrates handling errors resulting from unknown directives in the main module go.mod file. The script requires a go.mod file setup with errors and outputs specific error messages with 'stderr'. Mainly for debugging purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badmod.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncp go.mod.bad go.mod\n! go list -m -mod=mod all\nstderr 'unknown directive: hello'\n```\n\n----------------------------------------\n\nTITLE: Creating Placeholder Go Command Script (Shell)\nDESCRIPTION: This shell script, intended to be placed at `bin/go`, acts as a simple placeholder for the actual Go command. When executed, it prints a specific test version string (`go1.999testmod here!`) to standard output. This is useful in test environments to simulate the presence of a Go toolchain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.android-amd64.txt#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n#!/bin/sh\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Running `go list` with Specific Flags and Environment (Issue #25980) in Shell\nDESCRIPTION: Sets the `GO111MODULE` environment variable to `off` to disable Go modules, then executes the `go list` command. The command uses the `-e` flag to report errors for erroneous packages, `-test` to include test dependencies, `-deps` to list dependencies, and `-f '{{.Error}}'` to format the output to show only the error message for package `p`. This setup tests a fix for issue #25980.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_test_e.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=off\n\n# issue 25980: crash in go list -e -test\ngo list -e -test -deps -f '{{.Error}}' p\n```\n\n----------------------------------------\n\nTITLE: Testing go list -m with alternate file\nDESCRIPTION: Verifies that 'go list -m' prints the path to the alternate go.mod file when using the -modfile flag.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/modfile_flag.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo list -m -f '{{.GoMod}}'\nstdout '^go.alt.mod$'\n```\n\n----------------------------------------\n\nTITLE: Module Definition in .mod File\nDESCRIPTION: Declares the module path for the Go package\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_invalidpath_v1_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/invalidpath/v1\n```\n\n----------------------------------------\n\nTITLE: Go Module Configuration with Case-Insensitive Dependencies\nDESCRIPTION: A go.mod file that requires two modules that differ only by case and uses replacements to point to local directories. This configuration will cause import collision errors.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_collision.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule play.ground\n\ngo 1.14\n\nrequire (\n\texample.com/foo v0.1.0\n\texample.com/Foo v0.1.0\n)\n\nreplace (\n\texample.com/foo => ./foo\n\texample.com/Foo => ./foo_alt\n)\n```\n\n----------------------------------------\n\nTITLE: Copying and Validating go.mod Files\nDESCRIPTION: This sequence of shell commands illustrates how to copy and validate go.mod files with Go's module system. Dependencies include a proper Go setup. It involves copying go.mod files and validating using 'go list' utility, useful for testing module replacements.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badmod.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncp go.mod go.mod.usesub\ngo list -m -mod=mod all\n```\n\n----------------------------------------\n\nTITLE: Test package file in repository\nDESCRIPTION: The main package file for the test repository.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/get_issue53955.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage issue53955\n```\n\n----------------------------------------\n\nTITLE: Referencing Go Toolchain Module Path in go.mod\nDESCRIPTION: Specifies the module path `golang.org/toolchain`, presented as the content of a `go.mod` file snippet. While a full `go.mod` file usually starts with `module ...`, this line alone indicates the identification or reference to the toolchain module path.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.18.9.linux-amd64.txt#2025-04-22_snippet_2\n\nLANGUAGE: gomod\nCODE:\n```\ngolang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Go File with Invalid Import Path\nDESCRIPTION: This snippet contains a Go file that demonstrates an invalid import path. It imports a package from the vendor directory using an incorrect path, which should trigger an error during compilation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_import_wrong.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage invalid\n\nimport \"vend/x/invalid/vendor/foo\"\n```\n\n----------------------------------------\n\nTITLE: Main Package Implementation A\nDESCRIPTION: Minimal main package implementation with empty main function in package a.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_cmd_v1.0.0-exclude.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Testing Module Paths with Spaces in Go\nDESCRIPTION: This snippet tests that module paths with spaces are rejected as invalid. The commands attempt to initialize modules with paths containing spaces and expect specific error messages indicating the invalid character.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_init_invalid_major.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# module paths with spaces are also rejected\n! go mod init 'foo bar'\nstderr '(?s)^go: malformed module path \"foo bar\": invalid char '' ''$'\n\n! go mod init 'foo  bar baz'\nstderr '(?s)^go: malformed module path \"foo  bar baz\": invalid char '' ''$'\n```\n\n----------------------------------------\n\nTITLE: Missing Replacement Error Test\nDESCRIPTION: Sample modules.txt with a module that is replaced in go.mod but not marked as replaced in modules.txt, along with the expected error message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_modules_txt_consistent.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n## workspace\n# example.com/p v1.0.0\n## explicit; go 1.21\n# example.com/q v1.0.0 => ./q\n## explicit; go 1.21\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ngo: inconsistent vendoring in $GOPATH${/}src:\n\texample.com/p@v1.0.0: is replaced in a${/}go.mod, but not marked as replaced in vendor/modules.txt\n\n\tTo ignore the vendor directory, use -mod=readonly or -mod=mod.\n\tTo sync the vendor directory, run:\n\t\tgo work vendor\n```\n\n----------------------------------------\n\nTITLE: Go Test Command\nDESCRIPTION: Test command demonstrating coverage testing with dry-run flag\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_n_cover.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo test -vet=off -n -cover ./f\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module\nDESCRIPTION: A go.mod file defining the module for the test project. It specifies the module name as \"test\" and sets the Go version to 1.13.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_ambiguous_path.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nmodule \"test\"\n\ngo 1.13\n```\n\n----------------------------------------\n\nTITLE: Go Package with Blank Import\nDESCRIPTION: Defines a Go package 'x' with a blank import of 'rsc.io/quote' to ensure the package is included but not directly used.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_verify.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage x\nimport _ \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: Package with Leading Dot Import\nDESCRIPTION: A Go source file that imports a package with a leading dot in its path. This file demonstrates the use case being tested in the script.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_path_dotname.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage use\n\nimport _ \"example.com/dotname/.dot\"\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module\nDESCRIPTION: Creates a go.mod file for the TestACL module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_acl_windows.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nmodule TestACL\n```\n\n----------------------------------------\n\nTITLE: Maintaining Version Information in JSON - JSON\nDESCRIPTION: Stores the version metadata of the Go toolchain using a JSON object. This snippet can be processed by tools or custom scripts to programmatically access the version information. Input is structured as a JSON object with a Version field and expects consumers to handle parsing. There are no external dependencies beyond a JSON parser.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.22.0.linux-amd64.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\\"Version\\\":\\\"v0.0.1-go1.22.0.linux-amd64\\\"}\n```\n\n----------------------------------------\n\nTITLE: Package Declaration in Go Source File\nDESCRIPTION: Declares the package name 'depofdirectpatch' in the Go source file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_depofdirectpatch_v1.0.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage depofdirectpatch\n```\n\n----------------------------------------\n\nTITLE: Simple Go Package Implementation for B\nDESCRIPTION: An empty Go package declaration for package 'b'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage b\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module 'm/p'\nDESCRIPTION: This snippet shows the go.mod file for module 'm/p', demonstrating that it exists as a separate module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_ambiguous_arg.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule m/p\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Importing External Go Packages\nDESCRIPTION: This code snippet imports deprecated packages using blank identifiers, which indicates that the package is imported for side effects only. It demonstrates dependency management in a Go project where specific packages are imported without whitespace conflicts.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_missingpkg_prerelease.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage use\n\nimport (\n\t_ \"example.com/missingpkg/deprecated\"\n\t_ \"example.com/usemissingpre\"\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Go Package Loading Errors\nDESCRIPTION: This snippet demonstrates running Go tests with expected loading errors. It checks for proper error reporting and test execution behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_setup_error.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n! go test -o=$devnull ./t1/p ./t\nstderr '# m/t1/p\\n.*package x is not in std'\nstdout 'FAIL\tm/t1/p \\[setup failed\\]'\nstdout 'ok  \tm/t'\n```\n\n----------------------------------------\n\nTITLE: Checking for Absence of Pass Actions\nDESCRIPTION: Verifies that there are no 'pass' actions in the JSON output, as the test is expected to fail due to a build error.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_issue35169.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n! stdout '\\{.*\"Action\":\"pass\".*\\}'\n```\n\n----------------------------------------\n\nTITLE: Testdata Validator for Fuzzing Minimization Tests\nDESCRIPTION: Utility program that checks testdata files generated by fuzzing tests. It verifies that inputs stored in testdata have been properly minimized to the expected length, confirming the minimizer's effectiveness.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_minimize_interesting.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n//go:build ignore\n// +build ignore\n\n// check_testdata.go checks that the string written\n// is not longer than the provided length.\npackage main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"regexp\"\n\t\"strconv\"\n)\n\nfunc main() {\n\twantLen, err := strconv.Atoi(os.Args[2])\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n\ttestName := os.Args[1]\n\tdir := filepath.Join(\"testdata/fuzz\", testName)\n\n\tfiles, err := ioutil.ReadDir(dir)\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n\n\tif len(files) == 0 {\n\t\tfmt.Fprintf(os.Stderr, \"expect at least one failure to be written to testdata\\n\")\n\t\tos.Exit(1)\n\t}\n\n\tfor _, f := range files {\n\t\tdata, err := ioutil.ReadFile(filepath.Join(dir, f.Name()))\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tvar containsVal bool\n\t\tfor _, line := range bytes.Split(data, []byte(\"\\n\")) {\n\t\t\tm := valRe.FindSubmatch(line)\n\t\t\tif m == nil {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tcontainsVal = true\n\t\t\ts, err := strconv.Unquote(string(m[1]))\n\t\t\tif err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t\tif len(s) != wantLen {\n\t\t\t\tfmt.Fprintf(os.Stderr, \"expect length %d, got %d (%q)\\n\", wantLen, len(s), line)\n\t\t\t\tos.Exit(1)\n\t\t\t}\n\t\t}\n\t\tif !containsVal {\n\t\t\tfmt.Fprintln(os.Stderr, \"corpus file contained no values\")\n\t\t\tos.Exit(1)\n\t\t}\n\t}\n}\n\nvar valRe = regexp.MustCompile(`^\\[\\]byte\\(([^)]+)\\)$`)\n```\n\n----------------------------------------\n\nTITLE: Missing Module v1.0.0 Definition\nDESCRIPTION: Module definition for v1.0.0 of the missing module test package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_replace.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/retract/missingmod\n\ngo 1.14\n```\n\n----------------------------------------\n\nTITLE: Testing 'go mod download' with GOTOOLCHAIN=go1.21 outside a module\nDESCRIPTION: Tests that 'go mod download' with GOTOOLCHAIN=go1.21 fails when downloading modules requiring newer Go versions and correctly reports version requirements in error messages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_exec_toolchain.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nenv GOTOOLCHAIN=go1.21\n! go mod download rsc.io/needgo121@latest rsc.io/needgo122@latest rsc.io/needgo123@latest rsc.io/needall@latest\n! stderr switching\nstderr 'rsc.io/needgo122@v0.0.1 requires go >= 1.22'\nstderr 'rsc.io/needgo123@v0.0.1 requires go >= 1.23'\nstderr 'rsc.io/needall@v0.0.1 requires go >= 1.23'\nstderr 'requires go >= 1.23'\n! stderr 'requires go >= 1.21' # that's us!\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines a Go module with version 1.20 specification\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_issue62156.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.20\n```\n\n----------------------------------------\n\nTITLE: Creating initial commit and tag\nDESCRIPTION: Creates the first commit with go.mod and issue53955.go files, and tags it as v1.0.9.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/get_issue53955.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nenv GIT_COMMITTER_DATE=2022-07-19T11:07:00-04:00\nenv GIT_AUTHOR_DATE=2022-07-19T11:07:00-04:00\nexec git add go.mod issue53955.go\nexec git commit -m 'initial commit'\nexec git branch -m main\nexec git tag v1.0.9\n```\n\n----------------------------------------\n\nTITLE: Go Command Shell Script Implementation\nDESCRIPTION: Shell script for the 'go' command that outputs a version identifier. This script is placed in the bin directory of the toolchain package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-s390x.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Main Fortune Program Implementation\nDESCRIPTION: Main program that imports the quote package and prints a hello message\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_fortune_v2_v2.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"rsc.io/quote\"\n\nfunc main() {\n\tprintln(quote.Hello())\n}\n```\n\n----------------------------------------\n\nTITLE: Go File Importing golang.org/x/text/language\nDESCRIPTION: This Go file imports the golang.org/x/text/language package as a blank import, used to test direct dependency behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_indirect.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\npackage x\nimport _ \"golang.org/x/text/language\"\n```\n\n----------------------------------------\n\nTITLE: Defining Main Module 'a' in Go\nDESCRIPTION: This go.mod file defines the main module 'a' and its dependencies. It includes replace directives for various versions of modules b, c, d, and e.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_pseudo_artifact.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/a\n\ngo 1.16\n\nrequire (\n\texample.net/b v0.3.0\n\texample.net/c v0.2.0\n)\n\nreplace (\n\texample.net/b v0.1.0 => ./b1\n\texample.net/b v0.2.1-0.20210219000000-000000000000 => ./b2\n\texample.net/b v0.3.0 => ./b3\n\texample.net/c v0.1.0 => ./c1\n\texample.net/c v0.2.0 => ./c2\n\texample.net/d v0.1.0 => ./d\n\texample.net/d v0.2.0 => ./d\n\texample.net/e v0.1.0 => ./e\n)\n```\n\n----------------------------------------\n\nTITLE: Fixing Module Path in v2/go.mod\nDESCRIPTION: Corrects the module path in v2/go.mod to include the version correctly and tags it as v2.0.4.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nat 2018-02-19T19:03:38-05:00\nenv GIT_AUTHOR_DATE=2018-02-19T18:16:38-05:00\necho 'module \"github.com/rsc/vgotest1/v2\" // v2/go.mod'\ncp stdout v2/go.mod\ngit add v2/go.mod\ngit commit -m 'v2/go.mod: fix'\ngit tag v2.0.4\n```\n\n----------------------------------------\n\nTITLE: Storing Version Information in JSON\nDESCRIPTION: This JSON snippet stores the version information for the module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo123_v0.0.1.txt#2025-04-22_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\"Version\":\"v0.0.1\"}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Experiment Environment Variable in Bash\nDESCRIPTION: A bash script that tests the GOEXPERIMENT environment variable with fieldtrack being disabled and enabled, verifying that the correct build files are selected.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_tag_goexperiment.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Reset all experiments so fieldtrack is definitely off.\nenv GOEXPERIMENT=none\ngo run m\nstderr 'fieldtrack off'\n# Turn fieldtrack on.\nenv GOEXPERIMENT=none,fieldtrack\ngo run m\nstderr 'fieldtrack on'\n```\n\n----------------------------------------\n\nTITLE: Time Package Duration Calculation\nDESCRIPTION: Function for the time package that calculates the duration until a future time. Provides a convenience method for determining time remaining until a specific point.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.8.txt#2025-04-22_snippet_19\n\nLANGUAGE: go\nCODE:\n```\n// time functions\nfunc Until(Time) Duration\n```\n\n----------------------------------------\n\nTITLE: Expected Output on Linux\nDESCRIPTION: Shows the expected output of the 'go env' command on Linux, demonstrating how special characters are escaped in GOFLAGS.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_sanitize.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n[GOOS:linux] stdout 'GOFLAGS=''\\$\\(echo ''\\\\''''cc\"''\\\\''''; echo ''\\\\''''OOPS=\"oops''\\\\''''\\)'\n```\n\n----------------------------------------\n\nTITLE: Testing Go Version Command with PIE Binaries\nDESCRIPTION: Builds and checks version information for Position Independent Executables (PIE).\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version.txt#2025-04-22_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ngo build -buildmode=pie -o external.exe rsc.io/fortune\ngo version external.exe\nstdout '^external.exe: .+'\ngo version -m external.exe\nstdout -buildmode=pie\nstdout '^\\tpath\\trsc.io/fortune'\nstdout '^\\tmod\\trsc.io/fortune\\tv1.0.0'\n\ngo build -buildmode=pie -ldflags=-linkmode=internal -o internal.exe rsc.io/fortune\ngo version internal.exe\nstdout '^internal.exe: .+'\ngo version -m internal.exe\nstdout -buildmode=pie\nstdout '^\\tpath\\trsc.io/fortune'\nstdout '^\\tmod\\trsc.io/fortune\\tv1.0.0'\n```\n\n----------------------------------------\n\nTITLE: Parallel Fuzzing Test with Race Detection in Go\nDESCRIPTION: A Go test file that defines a fuzzing function with parallel test execution. It adds 100 seed values and uses parallel execution to test race detection.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_test_race.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage race\n\nimport \"testing\"\n\nfunc FuzzRace(f *testing.F) {\n\tfor i := 0; i < 100; i++ {\n\t\tf.Add(i)\n\t}\n\n\tf.Fuzz(func(t *testing.T, i int) {\n\t\tt.Parallel()\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Dependencies\nDESCRIPTION: This Go module definition specifies dependencies on two modules (bad114 and need117) and their local replacements.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_goversion.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/m\n\ngo 1.16\n\nrequire (\n\texample.net/bad114 v0.1.0\n\texample.net/need117 v0.1.0\n)\n\nreplace (\n\texample.net/bad114 v0.1.0 => ./bad114\n\texample.net/need117 v0.1.0 => ./need117\n)\n```\n\n----------------------------------------\n\nTITLE: Storing Go Module Version Metadata - Go - json\nDESCRIPTION: Contains version metadata for the Go module in JSON format. This metadata is generated and managed automatically by the Go tooling and is used for module version tracking and caching. The 'Version' field specifies the current version, which is essential for reproducible builds and version resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_downgrade_v2_v2.0.1.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\\"Version\\\":\\\"v2.0.1\\\"}\n```\n\n----------------------------------------\n\nTITLE: Testing 'go list ...' in GOROOT/src (GOPATH Mode) (Shell)\nDESCRIPTION: While in $GOROOT/src and with Go module mode disabled (GOPATH mode), this runs `go list ...`. It asserts that the synthesized GOPATH-style path for `GOROOT/src` is *not* included in the output, indicating `...` doesn't list the current directory itself in this mode.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_gofile_in_goroot.txt#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ngo list ...\n! stdout goroot/src\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Module and Testing Version Listing\nDESCRIPTION: Sets up a Go module and tests version listing with and without retracted versions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_pseudo_base.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo mod init m\n\ngo list -m -versions vcs-test.golang.org/git/retract-pseudo.git\nstdout '^vcs-test.golang.org/git/retract-pseudo.git$'\ngo list -m -versions -retracted vcs-test.golang.org/git/retract-pseudo.git\nstdout '^vcs-test.golang.org/git/retract-pseudo.git v1.0.0$'\n```\n\n----------------------------------------\n\nTITLE: Module Declaration with Dependency\nDESCRIPTION: This go.mod snippet declares the module rsc.io/quote with a dependency requirement on rsc.io/quote/v2 version 2.0.1, facilitating v2 module operations and version management in Go.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_multirepo.txt#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\nmodule rsc.io/quote\nrequire rsc.io/quote/v2 v2.0.1\n```\n\n----------------------------------------\n\nTITLE: Go Module File with Initial Dependency\nDESCRIPTION: This is the initial go.mod file for the test module, specifying a dependency on rsc.io/quote v1.5.1.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_indirect.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nmodule x\nrequire rsc.io/quote v1.5.1\n```\n\n----------------------------------------\n\nTITLE: Golang Package with Dependencies in needx2\nDESCRIPTION: The Go source file for `needx2` imports `example.net/x` and utilizes its features, demonstrating backward compatibility and feature usage with versioned Go modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_consistency.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// Package needx2 needs x v0.2.0 or higher.\npackage needx2\n\nimport \"example.net/x\"\n\nvar _ = x.AddedInV2\n```\n\n----------------------------------------\n\nTITLE: Context Package Extensions\nDESCRIPTION: New context management functions including AfterFunc for delayed execution, WithDeadlineCause and WithTimeoutCause for error-aware timeouts, and WithoutCancel for cancellation-free contexts.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.21.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc AfterFunc(Context, func()) func() bool\nfunc WithDeadlineCause(Context, time.Time, error) (Context, CancelFunc)\nfunc WithTimeoutCause(Context, time.Duration, error) (Context, CancelFunc)\nfunc WithoutCancel(Context) Context\n```\n\n----------------------------------------\n\nTITLE: Defining Memory Protection Constants in Go for NetBSD ARM\nDESCRIPTION: These constants define memory protection flags used in memory management syscalls on NetBSD ARM systems. They specify the desired protection for memory pages, such as read, write, or execute permissions.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_31\n\nLANGUAGE: Go\nCODE:\n```\nconst PROT_NONE = 0\nconst PROT_READ = 1\nconst PROT_WRITE = 2\nconst PROT_EXEC = 4\n```\n\n----------------------------------------\n\nTITLE: Go Main Package Implementation\nDESCRIPTION: Main package implementation that checks for internal toolchain environment variables and ensures they are not leaked\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_loop.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"os\"\n\nfunc init() {\n\tenvs := []string{\n\t\t\"GOTOOLCHAIN_INTERNAL_SWITCH_COUNT\",\n\t\t\"GOTOOLCHAIN_INTERNAL_SWITCH_VERSION\",\n\t}\n\tfor _, e := range envs {\n\t\tif v := os.Getenv(e); v != \"\" {\n\t\t\tpanic(\"$\"+e+\"=\"+v)\n\t\t}\n\t}\n\tos.Stdout.WriteString(\"clean\\n\")\n}\n\nfunc main() {\n}\n```\n\n----------------------------------------\n\nTITLE: Go List with Block Comment Rationale\nDESCRIPTION: This snippet checks if the rationale is derived from the block comment when individual retractions don't have comments.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_rationale.txt#_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ngo list -m -retracted -f '{{.Retracted}}' example.com/retract/rationale@v1.0.0-block\nstdout '^\\\\[block comment\\\\]$'\ngo list -m -retracted -f '{{.Retracted}}' example.com/retract/rationale@v1.0.0-blockwithcomment\nstdout '^\\\\[inner comment\\\\]$'\n```\n\n----------------------------------------\n\nTITLE: Proposed Go Method for WaitGroup in Golang\nDESCRIPTION: This snippet shows the proposed signature for a new Go method on sync.WaitGroup. It would take a function as an argument and internally call Add(1), launch the function as a goroutine, and call Done() when finished.\nSOURCE: https://github.com/golang/go/blob/master/api/next/63796.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n(*WaitGroup) Go(func())\n```\n\n----------------------------------------\n\nTITLE: Test package that imports encoding\nDESCRIPTION: A Go package in the 'nested' module that imports the standard library 'encoding' package, used to test how the list command handles packages in modules with paths that appear to be nested under the main module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_patterns.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\npackage useencoding\nimport _ \"encoding\"\n```\n\n----------------------------------------\n\nTITLE: Declaring a Go Package - Go\nDESCRIPTION: Defines a new Go package named 'lib'. There is no additional logic or exported functionality. This is a minimal placeholder for a library package and does not require any imports or dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_missingpkg_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage lib\n```\n\n----------------------------------------\n\nTITLE: Displaying Old and New File Contents for Diff Comparison\nDESCRIPTION: This snippet shows the contents of the old and new files side by side, preparing for a differential comparison. It illustrates the input format for the diff algorithm.\nSOURCE: https://github.com/golang/go/blob/master/src/internal/diff/testdata/basic.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-- old --\na\nb\nc\nd\ne\nf\ng\n-- new --\nw\na\nb\nx\ny\nz\ne\n```\n\n----------------------------------------\n\nTITLE: Testing Start Anchor with \\B in Go Regexps\nDESCRIPTION: Tests the interaction between start-of-string anchors (^) and non-word boundary assertions (\\B). These tests verify how \\B behaves at the beginning of strings.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_13\n\nLANGUAGE: regexp\nCODE:\n```\n^\\B\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:^\\B)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:^\\B)\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:^\\B)$\n```\n\n----------------------------------------\n\nTITLE: Go main package using cgo to call C function\nDESCRIPTION: A simple Go program that imports the C package using cgo and calls the say_hello() function defined in hello.c. This demonstrates basic cgo functionality for the test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_trimpath_cgo.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\n// void say_hello();\nimport \"C\"\n\nfunc main() {\n\tC.say_hello()\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Standard Cmd Packages with Vendored Dependencies in Shell\nDESCRIPTION: This 'go list' command highlights the inclusion of vendored dependencies as part of 'cmd' when reporting standard cmd packages, demonstrating Go’s treatment of internal vendoring.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_std.txt#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngo list -f '{{if .Standard}}{{.ImportPath}}{{end}}' cmd\n```\n\n----------------------------------------\n\nTITLE: Expected Fossil Timeline Output\nDESCRIPTION: The expected output from the Fossil timeline command showing the commit history. It displays two commits: the initial empty check-in and the 'hello world' commit.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/fossil/hello.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nd4c7dcdc29 hello world\n58da0d15e9 initial empty check-in\n+++ no more data (2) +++\n```\n\n----------------------------------------\n\nTITLE: Build Command Directory Output Test\nDESCRIPTION: Shell script testing Go build command's ability to output multiple executables to a directory and handle various package scenarios.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_multi_main.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir $WORK/bin\ngo build -o $WORK/bin ./cmd/c1 ./cmd/c2\n! stderr 'multiple packages'\n\n! go build -o $WORK/bin ./pkg1 ./pkg1\nstderr 'no main packages'\n\n! go build ./cmd/c1\nstderr 'already exists and is a directory'\n\n# Verify build -o output correctly local packages\nmkdir $WORK/local\ngo build -o $WORK/local ./exec.go\nexists $WORK/local/exec$GOEXE\n```\n\n----------------------------------------\n\nTITLE: Installing Go Module with Readonly Flag\nDESCRIPTION: Command to install a specific version of a module that depends on generics using the --mod=readonly flag. Sets GOTOOLCHAIN to local and attempts to install example.com/depends/on/generics@v1.0.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_dep_version.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GOTOOLCHAIN=local\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo install --mod=readonly example.com/depends/on/generics@v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Managing Toolchain and Go Versions Separately\nDESCRIPTION: This snippet demonstrates how to manage toolchain and Go versions separately, including adding a specific toolchain, removing it, and updating the Go version independently.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_toolchain.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ngo get toolchain@go1.23.9 go@1.23.5\ngo get toolchain@none\ngo get toolchain@go1.23.0 go@1.22.0\ngo get go@1.24.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Module 'x' with Dependency on 'c v0.1.0'\nDESCRIPTION: This go.mod file defines module 'x'. It requires module 'c' at version v0.1.0. This is a direct dependency used by package 'x' and its tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_horizon.txt#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n-- x1/go.mod --\nmodule x\n\ngo 1.17\n\nrequire c v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Replaced Modules in Go\nDESCRIPTION: This Go file demonstrates how to import and use modules that have been replaced in the workspace configuration. It shows that the code can use the replaced modules transparently.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage m\n\nimport \"example.com/dep\"\nimport \"example.com/other\"\n\nfunc F() {\n\tdep.G()\n\tother.H()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Root Package with Imported Dependency\nDESCRIPTION: Root package file that imports a subpackage from the same module. This demonstrates package organization and import relationships within a module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/modlegacy1-new.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage new\n\nimport _ \"vcs-test.golang.org/git/modlegacy1-new.git/v2/p2\"\n```\n\n----------------------------------------\n\nTITLE: Adding Token field to SysProcAttr struct for Windows AMD64 architecture\nDESCRIPTION: Extends the SysProcAttr struct in the syscall package for Windows 64-bit architecture with a Token field. This allows specifying a security token when creating new processes.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.10.txt#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\npkg syscall (windows-amd64), type SysProcAttr struct, Token Token\n```\n\n----------------------------------------\n\nTITLE: Display Unused Script\nDESCRIPTION: A shell command to print a message indicating that this script is unused. It highlights that this script is not intended for active use and does not require any special dependencies, only echo.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.freebsd-amd64.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence and Package Directory in Go\nDESCRIPTION: This snippet checks for the existence of a README file in the regexp/testdata directory and prints the directory of the package. It demonstrates how Go handles files in the src directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/src_file.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nexists $GOROOT/src/regexp/testdata/README\ngo list -f '{{.Dir}}' regexp/testdata/README\n```\n\n----------------------------------------\n\nTITLE: Implementing Compiler Lookup Utility in Go\nDESCRIPTION: This Go program implements a simple utility to look up the path of a specified command using exec.LookPath and write it to stdout.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cc_cache_issue64589.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"os\"\n\t\"os/exec\"\n)\n\nfunc main() {\n\tpath, err := exec.LookPath(os.Args[1])\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tos.Stdout.WriteString(path)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository with Initial Commit\nDESCRIPTION: Creates a new Git repository, adds files, makes an initial commit, and renames the default branch to master.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/modlegacy1-old.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit init\n\nat 2018-04-25T10:59:24-04:00\ngit add p1 p2\ngit commit -m 'initial commit'\ngit branch -m master\n```\n\n----------------------------------------\n\nTITLE: Package p1 with External Module Imports\nDESCRIPTION: Go package that imports modules from test repositories, including an old version, a new version, and a root module import.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/modlegacy1-old.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage p1\n\nimport _ \"vcs-test.golang.org/git/modlegacy1-old.git/p2\"\nimport _ \"vcs-test.golang.org/git/modlegacy1-new.git/p1\"\nimport _ \"vcs-test.golang.org/git/modlegacy1-new.git\"\n```\n\n----------------------------------------\n\nTITLE: Go Test Fuzzing Setup\nDESCRIPTION: A Go test file that defines a fuzz test function named FuzzFoo which tests string inputs. The function will fail if the input string equals 'fails'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_run.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage x\n\nimport \"testing\"\n\nfunc FuzzFoo(f *testing.F) {\n    f.Add(\"this is fine\")\n    f.Fuzz(func(t *testing.T, s string) {\n        if s == \"fails\" {\n            t.Error(\"error here\")\n        }\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Memory Synchronization Constants in Go for NetBSD ARM64\nDESCRIPTION: Memory synchronization flags for the msync system call. These define how memory mapped regions should be synchronized with their backing storage.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_41\n\nLANGUAGE: go\nCODE:\n```\nconst MS_ASYNC = 1\nconst MS_INVALIDATE = 2\nconst MS_SYNC = 4\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Commit with v2.0.0+incompatible Tag\nDESCRIPTION: Creates the first commit with a README file, renames the branch to 'main', and tags it with an incompatible v2 version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/odd-tags.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit add README.txt\ngit commit -m 'initial state'\ngit branch -m main\ngit tag 'v2.0.0+incompatible'\n```\n\n----------------------------------------\n\nTITLE: Vendor Replacement Go Module Definition for internal\nDESCRIPTION: Defines a `go.mod` file for the vendor-style replacement version of `golang.org/x/internal`, located within the `vendor` directory structure. It declares the module path as `golang.org/x/internal`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_20\n\nLANGUAGE: go\nCODE:\n```\n-- vendor/golang.org/x/internal/go.mod --\nmodule golang.org/x/internal\n```\n\n----------------------------------------\n\nTITLE: Testing Glass Function in Go\nDESCRIPTION: Tests the Glass function by comparing its output to the expected phrase about eating glass. Fails the test if the output doesn't match the expected string.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709160352-0d003b9c4bfa.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc TestGlass(t *testing.T) {\n\tglass := \"I can eat glass and it doesn't hurt me.\"\n\tif out := Glass(); out != glass {\n\t\tt.Errorf(\"Glass() = %q, want %q\", out, glass)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Path\nDESCRIPTION: This snippet defines the module path for a Go project using the `module` directive and specifies the Go version with `go` directive. This setup is crucial for module identification and compatibility enforcement in Go projects.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rationale_v1.0.1-order.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule example.com/retract/rationale\n\ngo 1.14\n```\n\n----------------------------------------\n\nTITLE: Defining Module Path in Go\nDESCRIPTION: This snippet establishes a Go module with a specific path, indicating that it is meant as a replacement for another module. It lists the Go version required to work with the module, which is set to 1.14.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_quote_v1.5.2.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule rsc.io/Quote\n\ngo 1.14\n```\n\n----------------------------------------\n\nTITLE: Implementing a Minimal Go Main Package\nDESCRIPTION: Creates a minimal main.go file with an empty main function to serve as the entry point of the module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_init_empty.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Package 'b' with Undefined Variable\nDESCRIPTION: Contains the implementation of package 'b' with a reference to an undefined variable 'Y', which will cause a compilation error.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_single_error.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage b\n\nvar X = Y\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Import Path for missingrepo-git/notmissing Repository in HTML\nDESCRIPTION: HTML snippet with go-import metadata tag that maps the import path vcs-test.golang.org/go/missingrepo/missingrepo-git/notmissing to a Git repository at vcs-test.golang.org/git/mainonly.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/missingrepo.txt#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<meta name=\"go-import\" content=\"vcs-test.golang.org/go/missingrepo/missingrepo-git/notmissing git https://vcs-test.golang.org/git/mainonly\">\n```\n\n----------------------------------------\n\nTITLE: Defining Module Dependencies for w1\nDESCRIPTION: This go.mod file for the w1 module defines its dependencies on specific versions of modules y and z.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_convergence_loop.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/w\n\ngo 1.16\n\nrequire (\n\texample.net/y v0.2.0-pre\n\texample.net/z v0.2.0-pre\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Start Anchor with Double \\B in Go Regexps\nDESCRIPTION: Tests patterns combining start-of-string anchors (^) with consecutive \\B assertions. These tests verify how multiple non-word boundary assertions behave at the beginning of strings.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_14\n\nLANGUAGE: regexp\nCODE:\n```\n^\\B\\B\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:^\\B\\B)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:^\\B\\B)\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:^\\B\\B)$\n```\n\n----------------------------------------\n\nTITLE: Git References Validation File\nDESCRIPTION: A file containing the expected Git references (branches and tags) to validate the repository structure. Contains hashes for all commits referenced by tags and branch heads.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/querytest.txt#2025-04-22_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n-- .git-refs --\ned5ffdaa1f5e7e0be6f5ba2d63097026506224f2 refs/heads/master\nfeed8f518cf4a7215a3b2a8268b8b0746dcbb12d refs/heads/v2\nf6abd4e3ed7f2297bc8fd2888bd6d5412e255fcc refs/tags/favorite\n5e9e31667ddfe16e9350f4bd00acc933c8cd5e56 refs/tags/start\n0de900e0063bcc310ea0621bfbc227a9b4e3b020 refs/tags/v0.0.0\ne5ec98b1c15df29e3bd346d538d73b6e8c3b500c refs/tags/v0.0.0-pre1\n179bc86b1be3f6d4553f77ebe68a8b6d750ceff8 refs/tags/v0.0.1\n81da2346e009fa1072fe4de3a9a223398ea8ec39 refs/tags/v0.0.2\nf6abd4e3ed7f2297bc8fd2888bd6d5412e255fcc refs/tags/v0.0.3\n7a1b6bf60ae5bb2b2bd49d152e0bbad806056122 refs/tags/v0.1.0\ndaedca9abee3171fe45e0344098a993675ac799e refs/tags/v0.1.1\nce829e0f1c45a2eca0f1ad16d7c1aca7cddb433b refs/tags/v0.1.2\n44aadfee25d86acb32d6f352afd1d602b0e3a651 refs/tags/v0.3.0\n20756d3a393908b2edb5db0f0bb954e962860168 refs/tags/v1.0.0\nb0bf267f64b7d5b5cabe22fbcad22f3f1642b7e5 refs/tags/v1.1.0\n609dca58c03f0ddf1d8ebe46c1f74fc6a99f3e73 refs/tags/v1.9.0\ne0cf3de987e660c21b6950e85b317ce5f7fbb9d9 refs/tags/v1.9.10-pre1\n42abcb6df8eee6983aeca9a307c28ea40530aceb refs/tags/v1.9.10-pre2+metadata\n5ba9a4ea62136ae86213feba68bc73858f55b7e1 refs/tags/v1.9.9\n9763aa065ae27c6cacec5ca8b6dfa43a1b31dea0 refs/tags/v2.0.0\n23c28cb696ff40a2839ce406f2c173aa6c3cdda6 refs/tags/v2.1.0\n1828ee9f8074075675013e4d488d5d49ddc1b502 refs/tags/v2.2.0\nd7352560158175e3b6aa11e22efb06d9e87e6eea refs/tags/v2.5.5\nfb9e35b393eb0cccc37e13e243ce60b4ff8c7eea refs/tags/v2.6.0-pre1\n```\n\n----------------------------------------\n\nTITLE: Package Q Implementation\nDESCRIPTION: Package 'q' implementation that depends on package 'p'\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_relevant_dependency.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage q\n\nimport example.com/p\n\nfunc Q() {\n\tp.P()\n}\n```\n\n----------------------------------------\n\nTITLE: Correcting Module Path\nDESCRIPTION: Updates the go.mod file with a corrected module path without version suffix and commits it as 'bad mod path'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nat 2018-02-19T17:30:45-05:00\necho 'module \"github.com/vgotest1\"'\ncp stdout go.mod\ngit add go.mod\ngit commit -m 'bad mod path'\n```\n\n----------------------------------------\n\nTITLE: System Call Package Constants and Functions\nDESCRIPTION: Platform-specific syscall constants and functions for various operating systems and architectures. Includes time conversion functions and error constants for Windows and OpenBSD.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.8.txt#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\n// syscall platform-specific functions and constants\n// Linux ARM\nfunc TimevalToNsec(Timeval) int64 // linux-arm and linux-arm-cgo\n\n// OpenBSD\nconst SYS_KILL = 122 // openbsd-386, openbsd-386-cgo, openbsd-amd64, openbsd-amd64-cgo\n\n// Windows\nconst ERROR_DIR_NOT_EMPTY = 145 // windows-386, windows-amd64\nconst ERROR_DIR_NOT_EMPTY Errno // windows-386, windows-amd64\n```\n\n----------------------------------------\n\nTITLE: Quote Package Implementation\nDESCRIPTION: Empty package declaration for the quote replacement module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_readonly.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage quote\n\n```\n\n----------------------------------------\n\nTITLE: Function Implementation in Package 'bar' Using 'foo'\nDESCRIPTION: Defines BarFunc in the 'bar' package, which calls FooFunc2 from the imported 'foo' package. It illustrates cross-package functionality and usage in Go.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_test_pkgselect.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n-- bar/bar.go --\npackage bar\n\nimport \"example/foo\"\n\nfunc BarFunc() int {\n\treturn foo.FooFunc2()\n}\n\n```\n\n----------------------------------------\n\nTITLE: NetBSD ARM64 Credential Structure Definition in Go\nDESCRIPTION: Defines the Credential structure used for process credential management. Contains fields for user ID, group ID, supplementary groups, and NoSetGroups flag.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_88\n\nLANGUAGE: go\nCODE:\n```\ntype Credential struct {\n\tUid uint32\n\tGid uint32\n\tGroups []uint32\n\tNoSetGroups bool\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing External Test with File Path Printing\nDESCRIPTION: Implements an external test that prints file paths from different contexts: package, package test, and external test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_trimpath.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage pkg_test\n\nimport (\n\t\"runtime\"\n\t\"testing\"\n\n\t\"example.com/pkg\"\n)\n\nfunc TestMain(m *testing.M) {\n\tpkg.PrintFile()\n\tpkg.PrintFileForTest()\n\tPrintFileInXTest()\n}\n\nfunc PrintFileInXTest() {\n\t_, file, _, _ := runtime.Caller(0)\n\tprintln(file)\n}\n```\n\n----------------------------------------\n\nTITLE: Module R Definition with Replacement\nDESCRIPTION: Defines a module 'example.com/r' that requires and replaces another module. Includes a test file that should be deleted during cleaning.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_clean_cache.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n-- r/go.mod --\nmodule example.com/r\nrequire example.com/r/replaced v0.0.0\nreplace example.com/r/replaced => ../replaced\n-- r/r.go --\npackage r\nimport _ \"example.com/r/replaced\"\n-- r/test.out --\nDELETE ME\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Go List Output Format\nDESCRIPTION: Defines a format string for 'go list' output, displaying the import path and any errors encountered.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_update_unrelated_sum.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv fmt='{{.ImportPath}}: {{if .Error}}{{.Error.Err}}{{else}}ok{{end}}'\n```\n\n----------------------------------------\n\nTITLE: README File Content for Root Module\nDESCRIPTION: Explanation that the root module intentionally lacks a go.mod file, which is typical for modules that follow the major version subdirectory convention.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/v2sub.txt#2025-04-22_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nThis root module lacks a go.mod file.\n```\n\n----------------------------------------\n\nTITLE: Cache Test Implementation in Overlay\nDESCRIPTION: Go file used to test build caching with overlays. Contains a function that prints \"something\" and will be modified to test if changing a file in the overlay properly invalidates the cache.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_overlay.txt#2025-04-22_snippet_18\n\nLANGUAGE: go\nCODE:\n```\npackage foo\n\nimport \"fmt\"\n\nfunc bar() {\n\tfmt.Println(\"something\")\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Explicit +incompatible Version Selection\nDESCRIPTION: Confirms that explicitly requesting a +incompatible version still works even when it's not listed in standard version queries.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_prefer_compatible.txt#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngo list -m github.com/russross/blackfriday@v2.0.0+incompatible\nstdout '^github.com/russross/blackfriday v2\\.0\\.0\\+incompatible$'\n```\n\n----------------------------------------\n\nTITLE: Stub Gofmt Tool Binary - Shell Script\nDESCRIPTION: A single-line shell script that echoes 'i am unused,' serving as a dummy stub for the 'gofmt' binary. Designed for placeholder or testing purposes, particularly in builds where the actual formatting logic is unnecessary. Requires only a shell environment to run and expects no arguments or inputs.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.freebsd-386.txt#2025-04-22_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: Setting Old Go Version and Executing Go List\nDESCRIPTION: Sets an old Go version (1.16) in go.mod and runs 'go list' command, then updates to a newer version (1.20) and runs 'go list' again.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/old_tidy_toolchain.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngo mod edit -go=1.16\ngo list\n\ngo mod edit -go=1.20\ngo list\n```\n\n----------------------------------------\n\nTITLE: Defining Dependent Modules with Different Go Versions\nDESCRIPTION: These go.mod files define modules for 'example.com/a' and 'example.com/b' with different Go versions, demonstrating how dependencies can have varying Go version requirements.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline_old.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/a\ngo 1.16\n\nrequire example.com/b v1.0.0\n```\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/a\ngo 1.17\n\nrequire example.com/b v1.0.1\n```\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/b\ngo 1.18\n```\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/b\ngo 1.19\n```\n\n----------------------------------------\n\nTITLE: Testing GOMODCACHE Behavior with Unset GOPATH in Go\nDESCRIPTION: This snippet tests GOMODCACHE behavior when neither GOMODCACHE nor GOPATH are set, expecting it to default to $HOME/go/pkg/mod.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gomodcache.txt#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n[GOOS:windows] env USERPROFILE=$WORK/home\n[GOOS:plan9] env home=$WORK/home\n[!GOOS:windows] [!GOOS:plan9] env HOME=$WORK/home\nenv GOMODCACHE=\nenv GOPATH=\ngo env GOMODCACHE\nstdout $HOME[/\\\\]go[/\\\\]pkg[/\\\\]mod\n```\n\n----------------------------------------\n\nTITLE: Adding p1 directory to SVN\nDESCRIPTION: Adds a p1 directory to SVN, commits it, and sets SVN properties for author and date on the second revision.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/test2-svn-git.txt#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsvn add p1\nsvn commit -m 'add p1'\nsvn propset svn:author rsc --revprop -r2\nsvn propset svn:date 2017-09-27T18:16:14.650893Z --revprop -r2\n```\n\n----------------------------------------\n\nTITLE: Testing Multi-line Deprecation Message Display in Go Modules\nDESCRIPTION: Tests how 'go get' handles a multi-line deprecation message, ensuring it only displays the first line.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_deprecate_message.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo get multiline\nstderr '^go: module multiline is deprecated: first line$'\n! stderr 'second line'\ngo list -m -u -f '{{.Deprecated}}' multiline\nstdout '^first line\\nsecond line.$'\n```\n\n----------------------------------------\n\nTITLE: Database and Debug Package Updates - Go\nDESCRIPTION: Addition of Drivers function to sql package and UnspecifiedType handling in debug/dwarf package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npkg database/sql, func Drivers() []string\n\npkg debug/dwarf, method (*UnspecifiedType) Basic() *BasicType\npkg debug/dwarf, method (*UnspecifiedType) Common() *CommonType\npkg debug/dwarf, method (*UnspecifiedType) Size() int64\npkg debug/dwarf, method (*UnspecifiedType) String() string\npkg debug/dwarf, type UnspecifiedType struct\npkg debug/dwarf, type UnspecifiedType struct, embedded BasicType\n```\n\n----------------------------------------\n\nTITLE: Running Fuzz Tests with Fatal Error in Go\nDESCRIPTION: This snippet shows a fuzz test that triggers a fatal error. It illustrates how fatal errors are handled in fuzz testing and how they affect test execution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_chatty.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage chatty_fatal_fuzz\n\nimport \"testing\"\n\nfunc Fuzz(f *testing.F) {\n    f.Fatal(\"fatal in target\")\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Import with Custom Build Tag\nDESCRIPTION: A Go file with the build constraint 'notmytag' that imports a subpackage 'x/x1'. This file will only be included when the 'notmytag' build tag is specified.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vendormod.txt#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n// +build notmytag\n\npackage m\n\nimport _ \"x/x1\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Generic Pair Type and Methods in Go\nDESCRIPTION: Defines a generic Pair type with two type parameters and associated First and Second methods. The type parameters have constraints: $0 must implement the M interface, and $1 must be compatible with int.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/api/testdata/src/pkg/p4/golden.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ntype Pair[$0 interface{ M }, $1 interface{ ~int }] struct\n```\n\nLANGUAGE: Go\nCODE:\n```\nfunc NewPair[$0 interface{ M }, $1 interface{ ~int }]($0, $1) Pair[$0, $1]\n```\n\nLANGUAGE: Go\nCODE:\n```\nmethod (Pair[$0, $1]) Second() $1\n```\n\nLANGUAGE: Go\nCODE:\n```\nmethod (Pair[$0, $1]) First() $0\n```\n\n----------------------------------------\n\nTITLE: Git User Configuration File\nDESCRIPTION: This .gitconfig file sets up the Git user identity with a name and email, and configures the safe.bareRepository setting to explicit for security purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_git_bareRepository.txt#2025-04-22_snippet_2\n\nLANGUAGE: gitconfig\nCODE:\n```\n[user]\n\tname = Go Gopher\n\temail = gopher@golang.org\n[safe]\n\tbareRepository = explicit\n```\n\n----------------------------------------\n\nTITLE: Math Bits Package Functions\nDESCRIPTION: Binary manipulation functions for various integer types including operations for leading/trailing zeros, bit counting, and bit manipulation.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.9.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc LeadingZeros(x uint) int\nfunc TrailingZeros(x uint) int\nfunc OnesCount(x uint) int\nfunc Reverse(x uint) uint\nfunc ReverseBytes(x uint) uint\nfunc RotateLeft(x uint, k int) uint\n```\n\n----------------------------------------\n\nTITLE: Defining Terminal Control Constants for Darwin ARM64 in Go\nDESCRIPTION: This snippet defines constants related to terminal control for the Darwin ARM64 platform. These constants are used for configuring terminal behavior and input processing.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_72\n\nLANGUAGE: Go\nCODE:\n```\nconst ISIG = 128\nconst ISTRIP = 32\nconst IUTF8 = 16384\nconst IXANY = 2048\n```\n\n----------------------------------------\n\nTITLE: Expected Module Versions for Vendoring Test\nDESCRIPTION: Expected output file listing module paths with their resolved versions after vendoring, used to verify correct version resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune_all.txt#2025-04-22_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\nexample.com/a@\nexample.com/b@v1.0.0\nexample.com/p@\nexample.com/q@v1.1.0\nexample.com/w@v1.0.0\nexample.com/z@v1.1.0\n```\n\n----------------------------------------\n\nTITLE: Go Package Importing Standard Library Internal Package\nDESCRIPTION: Defines a Go package `fromstd` that attempts to import `internal/testenv` from the standard library. This is used to test the rule preventing modules from importing standard library internal packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\n-- fromstd/useinternal.go --\npackage fromstd\nimport _ \"internal/testenv\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Committing Go Files in Git\nDESCRIPTION: Commands to add a Go file to Git, commit it with a message, and rename the default branch to 'master'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/hello.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nat 2017-09-21T21:05:58-04:00\ngit add hello.go\ngit commit -a -m 'hello'\ngit branch -m master\n```\n\n----------------------------------------\n\nTITLE: Embedding Files from Directory in Go\nDESCRIPTION: The Go file uses `embed` to include files from `symdir` directory matching the wildcard pattern. It illustrates directory-based embedding, depending on the existence of a directory structure and files matching the pattern.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/embed.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\npackage p\n\nimport \"embed\"\n\n//go:embed symdir/*\nvar X embed.FS\n```\n\n----------------------------------------\n\nTITLE: Testing go mod init with .go file in root\nDESCRIPTION: Tests that 'go mod init' recommends running 'go mod tidy' when the directory contains a .go file in the root.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_init_tidy.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd pkginroot\ngo mod init m\nstderr '^go: to add module requirements and sums:\\n\\tgo mod tidy$'\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Adding ParseOID Function to crypto/x509 Package\nDESCRIPTION: This snippet adds a new function ParseOID to the crypto/x509 package. It parses a string representation of an Object Identifier (OID) and returns an OID type and an error.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.23.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nfunc ParseOID(string) (OID, error)\n```\n\n----------------------------------------\n\nTITLE: Main Vendor Test Implementation\nDESCRIPTION: Test file implementing vendor package testing using the fake package. Tests the DoNothing() function return value against expected output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_test_issue14613.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"testing\"\n\n\t\"github.com/clsung/fake\"\n)\n\nfunc TestVendor(t *testing.T) {\n\tret := fake.DoNothing()\n\texpected := \"Ok\"\n\tif expected != ret {\n\t\tt.Errorf(\"fake returned %q, expected %q\", ret, expected)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Test Implementation for Package 'deadstuff' in Go\nDESCRIPTION: Test for package 'deadstuff' that calls the panic-inducing function but recovers from the panic using defer and recover().\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_multipkg.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage deadstuff\n\nimport \"testing\"\n\nfunc TestMumble(t *testing.T) {\n\tdefer func() {\n\t\tif x := recover(); x != nil {\n\t\t\tprintln(\"recovered\")\n\t\t}\n\t}()\n\tdownStreamOfPanic(10)\n}\n```\n\n----------------------------------------\n\nTITLE: Test Function for Package X\nDESCRIPTION: A Go test file for package 'x' that contains a minimal test function. The test doesn't assert anything but is used to verify that tests run correctly.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_patterns_outside_gopath.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage x_test\n\nimport \"testing\"\n\nfunc TestX(t *testing.T) {\n}\n```\n\n----------------------------------------\n\nTITLE: Netrc Credentials File\nDESCRIPTION: A .netrc/.netrc file containing authentication credentials for a test server. This file provides the username and password for basic authentication to protected repositories.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/netrc_issue66832.txt#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nmachine vcs-test.golang.org\n\tlogin aladdin\n\tpassword opensesame\n```\n\n----------------------------------------\n\nTITLE: Function Implementation for Package 'aa' in Go\nDESCRIPTION: Defines package 'aa' with an AA function that imports and uses the 'it' package to create a Conc object and call Callee.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_multipkg.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage aa\n\nimport \"M/it\"\n\nfunc AA(y int) int {\n\tc := it.Conc{}\n\tx := it.Callee(&c)\n\tprintln(x, y)\n\treturn 0\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Go Modules for Test Execution (Shell)\nDESCRIPTION: Sets the `GO111MODULE` environment variable to `off`. This ensures that the subsequent Go commands run in the traditional GOPATH mode rather than using Go modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_modes.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=off\n```\n\n----------------------------------------\n\nTITLE: Module C v1 Package\nDESCRIPTION: Version 1 of module c with empty implementation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_indirect.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage c\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Download With Credentials\nDESCRIPTION: Runs 'go mod tidy' and 'go list all' with credentials from a netrc file, expecting successful module downloads.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_auth.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nenv NETRC=$WORK/netrc\ngo mod tidy\ngo list all\nstdout vcs-test.golang.org/auth/or401\nstdout vcs-test.golang.org/auth/or404\n```\n\n----------------------------------------\n\nTITLE: Testing Go Import Cycle Error\nDESCRIPTION: This snippet tests for proper reporting of import cycle errors in Go packages. It verifies that the error is detected and reported correctly.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_setup_error.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n! go test -o=$devnull ./cycle/p ./t\nstderr '# m/cycle/p\\n.*package m/cycle/p\\n\\timports m/cycle/p from p\\.go: import cycle not allowed'\nstdout 'FAIL\tm/cycle/p \\[setup failed\\]'\nstdout 'ok  \tm/t'\n```\n\n----------------------------------------\n\nTITLE: Go Source File with External Import\nDESCRIPTION: Go source file importing an external package rsc.io/quote\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_readonly.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage x\nimport _ \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: Importing Non-existent Appengine Package\nDESCRIPTION: This Go file imports a non-existent 'appengine' package to test error handling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_bad_domain.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\npackage useappengine\nimport _ \"appengine\" // package does not exist\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies with go mod tidy\nDESCRIPTION: This snippet uses 'go mod tidy' to update and clean up module dependencies. It shows that the Go version remains unchanged after this operation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline_old.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo mod tidy\ngo list -f '{{.Module.GoVersion}}'\n```\n\n----------------------------------------\n\nTITLE: Tabular Results of Go ABI Register Usage Analysis\nDESCRIPTION: This table presents the results of analyzing the impact of varying available integer registers (from 0 to infinity, with 8 fixed floating-point registers) on Go function argument passing within the Kubernetes `cmd/kubelet` (v1.18.8) codebase. It shows the percentage of functions whose arguments fit entirely in registers (% fit), and the median (p50), 95th percentile (p95), and 99th percentile (p99) for stack argument bytes, on-stack spill bytes, and total stack bytes (arguments + spills). The first row represents the baseline ABI0 (0 integer, 0 float registers).\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/abi-internal.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n|      |        |       |      stack args |          spills |     stack total |\n| ints | floats | % fit | p50 | p95 | p99 | p50 | p95 | p99 | p50 | p95 | p99 |\n|    0 |      0 |  6.3% |  32 | 152 | 256 |   0 |   0 |   0 |  32 | 152 | 256 |\n|    0 |      8 |  6.4% |  32 | 152 | 256 |   0 |   0 |   0 |  32 | 152 | 256 |\n|    1 |      8 | 21.3% |  24 | 144 | 248 |   8 |   8 |   8 |  32 | 152 | 256 |\n|    2 |      8 | 38.9% |  16 | 128 | 224 |   8 |  16 |  16 |  24 | 136 | 240 |\n|    3 |      8 | 57.0% |   0 | 120 | 224 |  16 |  24 |  24 |  24 | 136 | 240 |\n|    4 |      8 | 73.0% |   0 | 120 | 216 |  16 |  32 |  32 |  24 | 136 | 232 |\n|    5 |      8 | 83.3% |   0 | 112 | 216 |  16 |  40 |  40 |  24 | 136 | 232 |\n|    6 |      8 | 87.5% |   0 | 112 | 208 |  16 |  48 |  48 |  24 | 136 | 232 |\n|    7 |      8 | 89.8% |   0 | 112 | 208 |  16 |  48 |  56 |  24 | 136 | 232 |\n|    8 |      8 | 91.3% |   0 | 112 | 200 |  16 |  56 |  64 |  24 | 136 | 232 |\n|    9 |      8 | 92.1% |   0 | 112 | 192 |  16 |  56 |  72 |  24 | 136 | 232 |\n|   10 |      8 | 92.6% |   0 | 104 | 192 |  16 |  56 |  72 |  24 | 136 | 232 |\n|   11 |      8 | 93.1% |   0 | 104 | 184 |  16 |  56 |  80 |  24 | 128 | 232 |\n|   12 |      8 | 93.4% |   0 | 104 | 176 |  16 |  56 |  88 |  24 | 128 | 232 |\n|   13 |      8 | 94.0% |   0 |  88 | 176 |  16 |  56 |  96 |  24 | 128 | 232 |\n|   14 |      8 | 94.4% |   0 |  80 | 152 |  16 |  64 | 104 |  24 | 128 | 232 |\n|   15 |      8 | 94.6% |   0 |  80 | 152 |  16 |  64 | 112 |  24 | 128 | 232 |\n|   16 |      8 | 94.9% |   0 |  16 | 152 |  16 |  64 | 112 |  24 | 128 | 232 |\n|    ∞ |      8 | 99.8% |   0 |   0 |   0 |  24 | 112 | 216 |  24 | 120 | 216 |\n```\n\n----------------------------------------\n\nTITLE: Go Module File with Dependency Replacements\nDESCRIPTION: A Go module file that sets up replacements for dependencies, including different versions of 'example.net/deleted' that will be used to test compatibility between Go 1.16 and 1.17.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_deleted.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/m\n\ngo 1.17\n\nreplace (\n\texample.net/deleted v0.1.0 => ./d1\n\texample.net/deleted v0.2.0 => ./d2\n\texample.net/lazy v0.1.0 => ./lazy\n\texample.net/pruned v0.1.0 => ./pruned\n)\n\nrequire (\n\texample.net/deleted v0.1.0\n\texample.net/deleted v0.1.0 // redundant\n\texample.net/lazy v0.1.0\n)\n```\n\n----------------------------------------\n\nTITLE: Self-Import Cycle Detection Test in Go\nDESCRIPTION: Demonstrates a simple case of an import cycle where a package imports itself. This is an invalid Go code pattern that should trigger an 'import cycle not allowed' error during build.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_import_cycle.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage selfimport\n\nimport \"selfimport\"\n```\n\n----------------------------------------\n\nTITLE: Deeply Nested Package Definition\nDESCRIPTION: Go file defining package w inside a deeply nested directory structure, used to test recursive directory traversal behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_fs_patterns.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage w\n```\n\n----------------------------------------\n\nTITLE: Go Module in 'testdata' Directory\nDESCRIPTION: A Go source file placed in a 'testdata' directory that imports 'rsc.io/quote' to test dependency management in special directories.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_in_testdata_dir.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage foo\n\nimport _ \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: Go Build System Test Commands\nDESCRIPTION: Shell commands to test the Go build system's handling of import cycles, including build attempt and error message verification using go list.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_import_cycle.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n! go build selfimport\ngo list -e -f '{{.Error}}' selfimport\n```\n\n----------------------------------------\n\nTITLE: Building BoringCrypto Module for Linux AMD64\nDESCRIPTION: Command to build the BoringCrypto module for Linux AMD64 architecture, generating syso/goboringcrypto_linux_amd64.syso file. Requires Docker for execution.\nSOURCE: https://github.com/golang/go/blob/master/src/crypto/internal/boring/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGOARCH=amd64 ./build.sh\n```\n\n----------------------------------------\n\nTITLE: Testing go generate with alternate file\nDESCRIPTION: Verifies that go generate uses the alternate file for package resolution and that recursive go commands respect GOFLAGS.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/modfile_flag.txt#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncp go.alt.mod go.gen.mod\nenv OLD_GOFLAGS=$GOFLAGS\nenv GOFLAGS=-modfile=go.gen.mod\ngo generate -modfile=go.alt.mod .\nenv GOFLAGS=$OLD_GOFLAGS\ngrep example.com/exclude go.gen.mod\n! grep example.com/exclude go.alt.mod\n```\n\n----------------------------------------\n\nTITLE: Handling Failed Module Operations in Vendor Mode\nDESCRIPTION: This snippet shows examples of operations that fail when using vendor mode, such as querying the latest version of a module or updating dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_getmode_vendor.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n! go list -mod=vendor -m rsc.io/quote@latest\nstderr 'go: rsc.io/quote@latest: cannot query module due to -mod=vendor'\n! go get -mod=vendor -u\nstderr 'flag provided but not defined: -mod'\n```\n\n----------------------------------------\n\nTITLE: Defining Vendored Package in Go\nDESCRIPTION: This Go file defines an empty package 'b', which is part of the vendored 'foo.com/internal/bar' module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_internal.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\npackage b\n```\n\n----------------------------------------\n\nTITLE: Declaring Go Package 'b'\nDESCRIPTION: This Go source file (`b.go`) declares the package named 'b'. It serves as the entry point or part of the source code for the 'b' package within the 'example.com/deprecated/b' module. It currently only contains the package declaration.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_deprecated_b_v1.0.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage b\n```\n\n----------------------------------------\n\nTITLE: Including Header in Main Module C Source (C)\nDESCRIPTION: This C source file (`foo.c`) within the main module includes the `bar.h` header file. It acts as an intermediary C file within the main module's Cgo build process.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_trimpath_macro.txt#2025-04-22_snippet_8\n\nLANGUAGE: C\nCODE:\n```\n#include \"bar.h\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Go Toolchain Module Path (.mod)\nDESCRIPTION: This snippet specifies the Go module path for the toolchain itself, 'golang.org/toolchain'. It is likely found within a `.mod` file associated directly with the toolchain definition.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.18.1.linux-amd64.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngolang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Implementing FuzzCrash Test in Go\nDESCRIPTION: This test sends a SIGILL signal to itself, which should be interpreted as a crash by the fuzzing framework. It demonstrates handling of crash-inducing signals and expects the fuzzer to save a crasher.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_non_crash_signal.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nfunc FuzzCrash(f *testing.F) {\n\tf.Fuzz(func(*testing.T, bool) {\n\t\tpid := syscall.Getpid()\n\t\tif err := syscall.Kill(pid, syscall.SIGILL); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\t// signal may not be received immediately. Wait for it.\n\t\tselect{}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Go Compiler with Build Flags\nDESCRIPTION: Various compiler flags for debugging, optimization info, and visualization of compiler internals\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go build -gcflags=-m=2\n$ go build -gcflags=-d=ssa/check_bce/debug\n$ go build -gcflags=-W\n$ GOSSAFUNC=Foo go build\n$ go build -gcflags=-S\n$ go tool compile -bench=out.txt x.go\n```\n\n----------------------------------------\n\nTITLE: Expected Git references output\nDESCRIPTION: Expected output from the git show-ref command, showing the commit hashes for the main branch and v0.1.0 tag.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/issue47650.txt#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n21535ef346c3e79fd09edd75bd4725f06c828e43 refs/heads/main\n4d237df2dbfc8a443af2f5e84be774f08a2aed0c refs/tags/v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Empty Package Placeholder Source File - Go\nDESCRIPTION: This Go source file defines the 'pkg' package and contains no additional code or imports. Its primary purpose is to act as the minimal module content required for Go tooling and dependency resolution in the tested module graph.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_main.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage pkg\n```\n\n----------------------------------------\n\nTITLE: Package dir2 Private Implementation in Overlay\nDESCRIPTION: Implementation of the private printMessage function in dir2 that imports the dir package. This file is only in the overlay and demonstrates multi-level package imports.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_overlay.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage dir2\n\nimport \"m/dir\"\n\nfunc printMessage() {\n\tdir.PrintMessage()\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Server Response Truncation and Error Handling\nDESCRIPTION: A series of commands to test how Go handles module server responses in different edge cases. Tests verify truncation of responses with too many lines, truncation of very long single-line responses, and proper propagation of error messages from servers using the 'mod' protocol.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_proxy_errors.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=on\nenv GOSUMDB=off\nenv GOPROXY=direct\n\n# Server responses should be truncated to some reasonable number of lines.\n# (For now, exactly eight.)\n! go list -m vcs-test.golang.org/auth/ormanylines@latest\nstderr '\\tserver response:\\n(.|\\n)*\\tline 8\\n\\t\\[Truncated: too many lines.\\]$'\n\n# Server responses should be truncated to some reasonable number of characters.\n! go list -m vcs-test.golang.org/auth/oronelongline@latest\n! stderr 'blah{40}'\nstderr '\\tserver response: \\[Truncated: too long\\.\\]$'\n\n# Responses from servers using the 'mod' protocol should be propagated.\n! go list -m vcs-test.golang.org/go/modauth404@latest\nstderr '\\tserver response: File\\? What file\\?'\n```\n\n----------------------------------------\n\nTITLE: Setting Go Module Environment Variables\nDESCRIPTION: Environment configuration for Go modules with GO111MODULE enabled and direct GOPROXY setting.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_git_export_subst.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nenv GO111MODULE=on\nenv GOPROXY=direct\n```\n\n----------------------------------------\n\nTITLE: Testing Go Vet Version for Command Line File\nDESCRIPTION: Runs go vet on a single file and verifies that the local Go version is used.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_commandline.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngo vet -n -json main.go\nstderr '\"GoVersion\": \"go1.22.1\"'\n```\n\n----------------------------------------\n\nTITLE: Executing Go List Commands in Shell\nDESCRIPTION: This shell script demonstrates the use of the go list command to list Go import paths under different module settings (GO111MODULE on and off) and for specific versions. It shows how to populate the go.sum file, download specific module versions, and verify the import paths of modules. Dependencies include Go installed with available go list command. Execution depends on the Go environment variables like GOROOT and GOPATH being correctly set.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_dir.txt#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# populate go.sum\\ngo get\\n\\nenv GO111MODULE=off\\ngo list -f '{{.ImportPath}}' $GOROOT/src/math\\nstdout ^math$\\n\\nenv GO111MODULE=on\\ngo list -f '{{.ImportPath}}' $GOROOT/src/math\\nstdout ^math$\\ngo list -f '{{.ImportPath}}' .\\nstdout ^x$\\n\\ngo mod download rsc.io/quote@v1.5.2\\ngo list -f '{{.ImportPath}}' $GOPATH/pkg/mod/rsc.io/quote@v1.5.2\\nstdout '^rsc.io/quote$'\\ngo list -f '{{.ImportPath}}' $GOPATH/pkg/mod/rsc.io/sampler@v1.3.0\\nstdout '^rsc.io/sampler$'\\ngo get rsc.io/sampler@v1.3.1\\ngo list -f '{{.ImportPath}}' $GOPATH/pkg/mod/rsc.io/sampler@v1.3.1\\nstdout '^rsc.io/sampler$'\\n! go list -f '{{.ImportPath}}' $GOPATH/pkg/mod/rsc.io/sampler@v1.3.0\\nstderr 'outside main module or its selected dependencies'\\n\n```\n\n----------------------------------------\n\nTITLE: Module Definition in Go\nDESCRIPTION: Defines the Go module named 'cov'. This file sets the module path necessary for Go module management and dependency handling. Must be placed at the root of the project.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_nocoverpkg.txt#2025-04-22_snippet_2\n\nLANGUAGE: Golang\nCODE:\n```\n-- go.mod --\nmodule cov\n```\n\n----------------------------------------\n\nTITLE: Non-existent Import Module (Go)\nDESCRIPTION: Test file demonstrating import of non-existent package with ignore build tag to prevent errors during 'go mod tidy'\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_lookup.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// ignore tags prevents errors in 'go mod tidy'\n// +build ignore\n\npackage use\n\nimport _ \"example.com/join/subpkg/noexist\"\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module in go.mod File\nDESCRIPTION: This snippet shows the contents of a go.mod file, which defines a module named 'm' and specifies the Go version 1.18 as the minimum required version for this module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/get_404_meta.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule m\n\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: A minimal Go module definition for the fuzzing test package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutator_repeat.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule fuzz\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: Toolchain Version Information in .info File\nDESCRIPTION: JSON configuration specifying the version of the Go toolchain module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-loong64.txt#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.999testmod.linux-loong64\"}\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Unicode 7.0.0 in Go unicode package\nDESCRIPTION: Updates the Unicode package to version 7.0.0, adding support for multiple new scripts through additional RangeTable definitions. Each RangeTable represents the character set for a specific script or writing system.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_34\n\nLANGUAGE: go\nCODE:\n```\nconst Version = \"7.0.0\"\n\n// New script definitions\nvar Bassa_Vah *RangeTable\nvar Caucasian_Albanian *RangeTable\nvar Duployan *RangeTable\nvar Elbasan *RangeTable\nvar Grantha *RangeTable\nvar Khojki *RangeTable\nvar Khudawadi *RangeTable\nvar Linear_A *RangeTable\nvar Mahajani *RangeTable\nvar Manichaean *RangeTable\nvar Mende_Kikakui *RangeTable\nvar Modi *RangeTable\nvar Mro *RangeTable\nvar Nabataean *RangeTable\nvar Old_North_Arabian *RangeTable\nvar Old_Permic *RangeTable\nvar Pahawh_Hmong *RangeTable\nvar Palmyrene *RangeTable\nvar Pau_Cin_Hau *RangeTable\nvar Psalter_Pahlavi *RangeTable\nvar Siddham *RangeTable\nvar Tirhuta *RangeTable\nvar Warang_Citi *RangeTable\n```\n\n----------------------------------------\n\nTITLE: Configuring Module 'a' with Dependency on 'b'\nDESCRIPTION: This go.mod file defines module 'a'. It requires module 'b' at version v0.1.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_horizon.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n-- a1/go.mod --\nmodule a\n\ngo 1.17\n\nrequire b v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Version Requirement\nDESCRIPTION: A go.mod file that defines a module named 'example.com/retract' and specifies Go 1.15 as the required version. This file is essential for Go's module system to manage dependencies and versioning.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_v1.0.0-unused.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/retract\n\ngo 1.15\n```\n\n----------------------------------------\n\nTITLE: Setting New Go Version and Executing Go List with Same Toolchain\nDESCRIPTION: Sets the Go version to 1.21 in go.mod, sets the TESTGO_VERSION environment variable to 1.21, and runs 'go list' command.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/old_tidy_toolchain.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nenv TESTGO_VERSION=1.21\ngo mod edit -go=1.21\ngo list\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module and Retracting Incompatible Version (Go Module)\nDESCRIPTION: This `go.mod` file defines the module `example.com/retract/incompatible`, specifies Go version `1.16`, and uses the `retract` directive to withdraw version `v2.0.0+incompatible` from use. This represents the module file content for the `v1.0.0` release.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_incompatible_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: gomod\nCODE:\n```\nmodule example.com/retract/incompatible\n\ngo 1.16\n\nretract v2.0.0+incompatible\n```\n\n----------------------------------------\n\nTITLE: Implementing Gofmt Command Script\nDESCRIPTION: A simple shell script that serves as a placeholder for the gofmt command, indicating that it's not actually used.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.plan9-386.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: Golang Module and Upgrade for Package x.2 with Constant\nDESCRIPTION: The Go module under version `x.2` defines a package with an additional constant, `AddedInV2`, indicating new features or changes in this version of the module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_consistency.txt#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule example.com/x\n\ngo 1.17\n```\n\nLANGUAGE: go\nCODE:\n```\npackage x\n\nconst AddedInV2 = true\n```\n\n----------------------------------------\n\nTITLE: Go Source File with External Module Import\nDESCRIPTION: A Go package file that imports the 'golang.org/x/mod/modfile' package as a blank import. This file demonstrates importing an external module dependency, which would be tracked in the go.mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/import_ignore.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage p\nimport _ \"golang.org/x/mod/modfile\"\n```\n\n----------------------------------------\n\nTITLE: Listing Vendored Modules in Go\nDESCRIPTION: This vendor/modules.txt file lists the vendored module 'foo.com/internal/bar' and its packages. It indicates that the module is explicitly required and includes the package 'foo.com/internal/bar/a'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_internal.txt#2025-04-22_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\n# foo.com/internal/bar v1.0.0\n## explicit\nfoo.com/internal/bar/a\n```\n\n----------------------------------------\n\nTITLE: Overlay JSON Configuration\nDESCRIPTION: A JSON configuration file for Go's overlay system that maps a file path in an overlay directory to an actual file path. This allows building code from virtual locations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_trimpath.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{ \"Replace\": { \"overlaydir/paths.go\": \"paths.go\" } }\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Go Package\nDESCRIPTION: Defines an empty package named 'indirect' in a Go file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_indirect_v1.0.1.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage indirect\n```\n\n----------------------------------------\n\nTITLE: Defining Main Package with Conditional Build Tag\nDESCRIPTION: Defines the main package with a conditional build tag and imports the m1 module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goline_order.txt#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\n//go:build usem1\n\npackage p\n\nimport _ \"m1\"\n```\n\n----------------------------------------\n\nTITLE: OpenBSD Socket Constants and System Calls\nDESCRIPTION: OpenBSD-specific socket and system call constants with implementations for Accept4 and Pipe2 across different architectures.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.11.txt#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nconst SOCK_CLOEXEC = 32768\nconst SOCK_NONBLOCK = 16384\nconst SYS_ACCEPT4 = 93\nconst SYS_PIPE2 = 101\nfunc Accept4(int, int) (int, Sockaddr, error)\nfunc Pipe2([]int, int) error\n```\n\n----------------------------------------\n\nTITLE: Version Information in .info JSON\nDESCRIPTION: JSON file containing version information for the module\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_invalidpath_v1_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.0.0\"}\n```\n\n----------------------------------------\n\nTITLE: Main Go Program Using Vendored Package\nDESCRIPTION: A simple Go program that imports a vendored 'strings' package and prints a message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_vendor.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\" // really ../vendor/strings\n)\n\nfunc main() {\n\tfmt.Printf(\"%s\\n\", strings.Msg)\n}\n```\n\n----------------------------------------\n\nTITLE: Go Implementation with Blank-Named Functions\nDESCRIPTION: Implementation file containing a type X with a Print method and unreachable code in blank-named functions (_). These blank-named functions are not counted in coverage calculations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_blank_func_decl.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage coverblank\n\nfunc _() {\n\tprintln(\"unreachable\")\n}\n\ntype X int\n\nfunc (x X) Print() {\n\tprintln(x)\n}\n\nfunc (x X) _() {\n\tprintln(\"unreachable\")\n}\n```\n\n----------------------------------------\n\nTITLE: Module A Source Code\nDESCRIPTION: Source code for module A that imports rsc.io/quote package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_issue54372.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage a\nimport _ \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: HTML List Formatting with Large Numbers\nDESCRIPTION: HTML implementation of an ordered list containing extremely large numeric values. Uses explicit value attribute to maintain large number formatting.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list5.txt#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p>Text.\n<ol>\n<li>One\n<li value=\"999999999999999999999\">Big\n<li>Bigger\n<li>Biggest\n</ol>\n```\n\n----------------------------------------\n\nTITLE: Package Declaration - Noread Package\nDESCRIPTION: Simple package declaration for a package that will be made unreadable during testing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_perm.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Package noread exists, but will be made unreadable.\npackage noread\n```\n\n----------------------------------------\n\nTITLE: Package dir2 Implementation\nDESCRIPTION: Main file for the dir2 package which exports PrintMessage and calls a private implementation. Shows package structure spanning files in and outside the overlay.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_overlay.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage dir2\n\nfunc PrintMessage() {\n\tprintMessage()\n}\n```\n\n----------------------------------------\n\nTITLE: Testing explicit vendor prefix import restrictions\nDESCRIPTION: Verifies that modules cannot explicitly use the 'cmd/vendor/' or 'vendor/' prefix to import vendored packages from the standard library.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_std_vendor.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncd ../importcmd\n! go build .\nstderr 'use of vendored package'\n\ncd ../importstd\n! go build .\nstderr 'use of vendored package'\n```\n\n----------------------------------------\n\nTITLE: Initializing Fuzzing Test Environment in Go\nDESCRIPTION: Sets up the test environment for fuzzing, including log file creation and command-line flag parsing. It defines two fuzz targets (FuzzA and FuzzB) that write input to log files.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutator.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage fuzz_test\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"os\"\n\t\"testing\"\n)\n\nvar (\n\tlogPath = flag.String(\"log\", \"\", \"path to log file\")\n\tlogFile *os.File\n)\n\nfunc TestMain(m *testing.M) {\n\tflag.Parse()\n\tvar err error\n\tlogFile, err = os.OpenFile(*logPath, os.O_RDWR|os.O_CREATE|os.O_EXCL, 0666)\n\tif os.IsExist(err) {\n\t\t*logPath += \".worker\"\n\t\tlogFile, err = os.OpenFile(*logPath, os.O_RDWR|os.O_CREATE|os.O_EXCL, 0666)\n\t}\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n\tos.Exit(m.Run())\n}\n\nfunc FuzzA(f *testing.F) {\n\tf.Add([]byte(\"seed\"))\n\tf.Fuzz(func(t *testing.T, b []byte) {\n\t\tfmt.Fprintf(logFile, \"FuzzA %q\\n\", b)\n\t})\n}\n\nfunc FuzzB(f *testing.F) {\n\tf.Add([]byte(\"seed\"))\n\tf.Fuzz(func(t *testing.T, b []byte) {\n\t\tfmt.Fprintf(logFile, \"FuzzB %q\\n\", b)\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Go 1.16\nDESCRIPTION: A go.mod file that defines a simple module named 'm' using Go 1.16. This sets up the module context for testing the import error.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_issue42891.txt#2025-04-22_snippet_1\n\nLANGUAGE: go.mod\nCODE:\n```\nmodule m\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Module B v0.1.0 Definition\nDESCRIPTION: Module definition and implementation for example.net/b v0.1.0\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_wild.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/b\n\ngo 1.16\n```\n\nLANGUAGE: go\nCODE:\n```\npackage b\n```\n\n----------------------------------------\n\nTITLE: Verifying Cache Behavior with GO111MODULE Off\nDESCRIPTION: This snippet sets GO111MODULE back to off and runs TestReadResponseErrors again. It ensures that the previous cached pass isn't reused when setting httplaxcontentlength=1, expecting the test to fail.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_default_godebug_issue69203.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nenv GO111MODULE=off\n! go test net/http -run=^TestReadResponseErrors$\n```\n\n----------------------------------------\n\nTITLE: Building Go Executables in Different Directories\nDESCRIPTION: Compiles a Go program twice: once in the current directory and once in the guest directory, to compare ACLs.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_acl_windows.txt#2025-04-22_snippet_2\n\nLANGUAGE: Batch\nCODE:\n```\ncd TestACL\ngo build -o main.exe main.go\ngo build -o $TMP\\main.exe main.go\n```\n\n----------------------------------------\n\nTITLE: Declaring Package and Constant in Go\nDESCRIPTION: Defines a Go package named 'breaker' and declares a constant 'X' with a value of 1. This forms the core functionality of the rsc.io/breaker module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_breaker_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage breaker\n\nconst X = 1\n```\n\n----------------------------------------\n\nTITLE: Declaring standard file descriptors in syscall package for NetBSD ARM64\nDESCRIPTION: Declaration of standard file descriptors (stdin, stdout, stderr) as variables in the syscall package for NetBSD ARM64 architecture.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_171\n\nLANGUAGE: go\nCODE:\n```\nvar Stdin int\nvar Stdout int\nvar Stderr int\n```\n\n----------------------------------------\n\nTITLE: Main Package File for Module 'm'\nDESCRIPTION: Simple Go file defining package x in the main module 'm'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_fs_patterns.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage x\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Commit and Tag\nDESCRIPTION: Adds files to Git, creates the initial commit, renames the default branch to 'main', and creates a version tag v0.1.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/semver-branch.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit add pkg go.mod\ngit commit -a -m 'pkg: add empty package'\ngit branch -m main\ngit tag 'v0.1.0'\n```\n\n----------------------------------------\n\nTITLE: Specifying Module Version Metadata (JSON)\nDESCRIPTION: This JSON object contains metadata about a specific version of the Go module. It includes the semantic version string (`Version`) and the timestamp (`Time`) associated with that version commit.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/github.com_dmitshur-test_modtest5_v0.5.0-alpha.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.5.0-alpha\",\"Time\":\"2019-06-18T19:04:46-07:00\"}\n```\n\n----------------------------------------\n\nTITLE: Testing Pseudo-version Generation for Commit After Non-matching Major Version Tag in Go\nDESCRIPTION: This snippet tests that the pseudo-version for a commit after a tag with a non-matching major version should be based on the last matching tag. It uses go mod edit to add a requirement and verifies the correct pseudo-version is generated.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_version.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncp go.mod.orig go.mod\ngo mod edit -require github.com/pierrec/lz4@473cd7ce01a1\ngo list -m github.com/pierrec/lz4\nstdout 'github.com/pierrec/lz4 v1.0.2-0.20190131084431-473cd7ce01a1'\ncd outside\ngo list -m github.com/pierrec/lz4\nstdout 'github.com/pierrec/lz4 v1.0.2-0.20190131084431-473cd7ce01a1'\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Testing Main Module Update Failure with Path Mismatch (Shell)\nDESCRIPTION: Attempts to update all dependencies of the main module using `go get -u ./...`. This command is expected to fail (`!`) due to the path mismatch in `example.com/badchain/c@v1.1.0`. The script compares the actual standard error output with the expected error message stored in `update-main-expected` and verifies that the `go.mod` file has been updated to include `example.com/badchain/c` (as defined in `go.mod.withc`), despite the error during resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badchain.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Try to update the main module. This updates everything, including\n# modules that aren't direct requirements, so the error stack is shorter.\ngo get -u ./...\ncmp stderr update-main-expected\ncmp go.mod go.mod.withc\n```\n\n----------------------------------------\n\nTITLE: Declaring Cgo CFLAGS and LDFLAGS in Go (main.go)\nDESCRIPTION: This Go snippet defines the main package and uses cgo directives to specify custom compiler (-I) and linker (-L) flags for an embedded C build step. cgo parses the special #cgo comments to add these flags to the build process. The snippet requires the Go toolchain and cgo support, and expects the specified directories (\\\"c flags\\\", \\\"ld flags\\\") to exist or be valid per test context. Inputs are the cgo directives; the output is a compiled Go binary linked appropriately. The main function does nothing, serving only to trigger build.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_flag_contains_space.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n// #cgo CFLAGS: -I\\\"c flags\\\"\n// #cgo LDFLAGS: -L\\\"ld flags\\\"\nimport \"C\"\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Plain Text Template Section\nDESCRIPTION: Simple plain text template section\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/link3.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nDoc text.\n```\n\n----------------------------------------\n\nTITLE: Source Code for Package 'c' (Go)\nDESCRIPTION: The source code for package `c` within module `c`. It defines a constant `Version` used by `b/y`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_import_allmod.txt#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n-- c1/c.go --\npackage c\n\nconst Version = \"v0.1.0\"\n```\n\n----------------------------------------\n\nTITLE: Go Workspace Environment Test\nDESCRIPTION: Tests GOWORK path resolution without triggering toolchain download\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_gomod_issue61455.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd $GOPATH/work\ngo env GOWORK\nstdout work[/\\\\]go.work\n! stderr 'go: toolchain go1.500 invoked to provide go1.700'\n```\n\n----------------------------------------\n\nTITLE: Generating Fuzz Corpus in Go\nDESCRIPTION: This Go program generates a fuzz corpus with potential duplicate entries. It creates 10 files, with values 0-5 duplicated and 6-9 unique, demonstrating handling of duplicate corpus entries.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_dup_cache.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n    \"path/filepath\"\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc main() {\n\tfor i := 0; i < 10; i++ {\n\t\tb := byte(0)\n\t\tif i > 5 {\n\t\t\tb = byte(i)\n\t\t}\n        tmpl := \"go test fuzz v1\\nint(%d)\\n\"\n\t\tif err := os.WriteFile(filepath.Join(os.Args[1], fmt.Sprint(i)), []byte(fmt.Sprintf(tmpl, b)), 0777); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Module Declaration and Dependency Requirements in .mod file\nDESCRIPTION: Defines the module name, Go version requirement (1.23), and three dependencies with specific versions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needall_v0.0.1.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule rsc.io/needall\ngo 1.23\n\nrequire rsc.io/needgo121 v0.0.1\nrequire rsc.io/needgo122 v0.0.1\nrequire rsc.io/needgo123 v0.0.1\n```\n\n----------------------------------------\n\nTITLE: GCD and LCM Calculation with Equal Inputs\nDESCRIPTION: This snippet shows the calculation of GCD and LCM when both inputs (A and B) are equal. In this case, the GCD and LCM are both equal to the input value.\nSOURCE: https://github.com/golang/go/blob/master/src/crypto/internal/fips140/rsa/testdata/gcd_lcm_tests.txt#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nGCD = 3d319c42d872f21131ce5ff3ab8bec94339308e620316dda218e85fedcd511cd62f0b2f3448d5e58fd3520ae8118abd54ead9ad9e8ec3890365c6b2cca2172d4b8839b2d2c5ab02f65180826cb0cd5c9798f5d6261efe6e6ec31dea047da7c486b0590359e6f333557f67ceebf9ea9cd5dd986a999a8c88bdbd0ca21816b2423\nA = 3d319c42d872f21131ce5ff3ab8bec94339308e620316dda218e85fedcd511cd62f0b2f3448d5e58fd3520ae8118abd54ead9ad9e8ec3890365c6b2cca2172d4b8839b2d2c5ab02f65180826cb0cd5c9798f5d6261efe6e6ec31dea047da7c486b0590359e6f333557f67ceebf9ea9cd5dd986a999a8c88bdbd0ca21816b2423\nB = 3d319c42d872f21131ce5ff3ab8bec94339308e620316dda218e85fedcd511cd62f0b2f3448d5e58fd3520ae8118abd54ead9ad9e8ec3890365c6b2cca2172d4b8839b2d2c5ab02f65180826cb0cd5c9798f5d6261efe6e6ec31dea047da7c486b0590359e6f333557f67ceebf9ea9cd5dd986a999a8c88bdbd0ca21816b2423\nLCM = 3d319c42d872f21131ce5ff3ab8bec94339308e620316dda218e85fedcd511cd62f0b2f3448d5e58fd3520ae8118abd54ead9ad9e8ec3890365c6b2cca2172d4b8839b2d2c5ab02f65180826cb0cd5c9798f5d6261efe6e6ec31dea047da7c486b0590359e6f333557f67ceebf9ea9cd5dd986a999a8c88bdbd0ca21816b2423\n```\n\n----------------------------------------\n\nTITLE: Unlisted Vendor Package Example Go File\nDESCRIPTION: A Go file not listed in modules.txt to test vendor resolution behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dot.txt#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\npackage unlisted\n```\n\n----------------------------------------\n\nTITLE: New Package Implementation\nDESCRIPTION: Main package implementing 'new' with dependency on p2 subpackage\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_legacy_mod.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage new\n\nimport _ \"new/v2/p2\"\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition with Retracted Dependency\nDESCRIPTION: A go.mod file declaring module 'use' with Go 1.19 as the target version, requiring a dependency on 'example.com/retract/noupgrade' at version v1.0.0, which is a retracted version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_noupgrade.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule use\n\ngo 1.19\n\nrequire example.com/retract/noupgrade v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Implementation of Package A with Test\nDESCRIPTION: Package 'a' containing a Go implementation and test that imports package 'f'. It has a global variable G and a function AFunc() that returns the result of f.Id().\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverpkg_partial.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\nimport \"M/f\"\n\nvar G int\n\nfunc AFunc() int {\n\tG = 1\n\treturn f.Id()\n}\n```\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\nimport \"testing\"\n\nfunc TestA(t *testing.T) {\n\tif AFunc() != 42 {\n\t\tt.Fatalf(\"bad!\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Module Import Path with HTML Meta Tag\nDESCRIPTION: This HTML snippet defines a go-import meta tag that instructs the Go tooling where to find the module 'vcs-test.golang.org/go/gitreposubdirv2/v2'. It specifies that the module uses git version control, the repository URL, and that the module is located in a subdirectory of the repository.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/go/gitreposubdirv2.txt#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<meta name=\"go-import\" content=\"vcs-test.golang.org/go/gitreposubdirv2/v2 git https://vcs-test.golang.org/git/gitreposubdirv2 subdir\">\n```\n\n----------------------------------------\n\nTITLE: Overlay Replacement for go.mod - JSON\nDESCRIPTION: This snippet shows a JSON configuration for replacing the go.mod file with another version in a Go project overlay. It specifies which go.mod file to use via path replacement, which is critical for setups using overlays.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_overlay.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"Replace\": {\n\t\t\"go.mod\": \"../../../overlay/simple_go_mod\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Goexit Behavior in Go Fuzz Tests\nDESCRIPTION: This function tests how Go's fuzzing handles a call to runtime.Goexit(). It calls Goexit when the input is not 'aa'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_crash.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nfunc FuzzWithGoexit(f *testing.F) {\n\tf.Add([]byte(\"aa\"))\n\tf.Fuzz(func(t *testing.T, b []byte) {\n\t\tif string(b) != \"aa\" {\n\t\t\truntime.Goexit()\n\t\t}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go List Command for Import Errors\nDESCRIPTION: This snippet uses the 'go list' command to check if line numbers are included in module import errors. It expects the output to include the file path, line number, and specific error message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_info_err.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo list -e -mod=mod -deps -f '{{with .Error}}{{.Pos}}: {{.Err}}{{end}}' ./main\nstdout '^bad[/\\\\]bad.go:3:8: malformed import path \"🐧.example.com/string\": invalid char ''🐧''$'\n```\n\n----------------------------------------\n\nTITLE: Adding Binary Encoding and Decoding Functions to encoding/binary Package\nDESCRIPTION: This snippet adds new functions Append, Decode, and Encode to the encoding/binary package for binary encoding and decoding of data.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.23.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nfunc Append([]uint8, ByteOrder, interface{}) ([]uint8, error)\nfunc Decode([]uint8, ByteOrder, interface{}) (int, error)\nfunc Encode([]uint8, ByteOrder, interface{}) (int, error)\n```\n\n----------------------------------------\n\nTITLE: Module Configuration in go.mod file\nDESCRIPTION: Standard go.mod file that defines the module name, Go version requirement (1.23), and three dependencies with specific versions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needall_v0.0.1.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule rsc.io/needall\ngo 1.23\n\nrequire rsc.io/needgo121 v0.0.1\nrequire rsc.io/needgo122 v0.0.1\nrequire rsc.io/needgo123 v0.0.1\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Validation Function in bytes Package\nDESCRIPTION: Function to convert potentially invalid UTF-8 to valid UTF-8 by replacing invalid bytes. Takes source byte slice and replacement byte slice as input, returns a valid UTF-8 byte slice.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc ToValidUTF8([]uint8, []uint8) []uint8\n```\n\n----------------------------------------\n\nTITLE: Go Package Importing golang.org/x/internal\nDESCRIPTION: Defines a Go package `useinternal` that directly imports `golang.org/x/internal/subtle`. This package is used to test whether such an import is allowed based on the module context.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n-- useinternal.go --\npackage useinternal\nimport _ \"golang.org/x/internal/subtle\"\n```\n\n----------------------------------------\n\nTITLE: Go Code with CGO Import\nDESCRIPTION: A minimal Go file that imports the C library through cgo and defines a C macro. This file is used to test compilation with the C compiler in a path containing spaces.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_path_space.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage m\n\n// #define X 1\nimport \"C\"\n```\n\n----------------------------------------\n\nTITLE: Go.mod Module Definition\nDESCRIPTION: Module definition file for the Go fuzzing test project.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_minimize.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/y\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Testing Sleep Function in Go\nDESCRIPTION: This Go test function demonstrates the use of 'time.Sleep' to pause execution within a test. It imports necessary packages like 'testing' and 'time' to perform the sleep operation. The test function 'TestSleep' is basic and serves to illustrate sleeping for 10 milliseconds during testing. The main limitation is that sleeping in tests is generally discouraged unless necessary.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cpu_profile_twice.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage x_test\nimport (\n    \"testing\"\n    \"time\"\n)\nfunc TestSleep(t *testing.T) {\n    time.Sleep(10 * time.Millisecond)\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Code Coverage with CGO Integration\nDESCRIPTION: A shell command that runs tests with code coverage on a CGO-enabled package. It verifies that the coverage percentage is non-zero and properly reported.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_cgo.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo test -short -cover cgocover\nstdout  'coverage:.*[1-9][0-9.]+%'\n! stderr '[^0-9]0\\.0%'\n```\n\n----------------------------------------\n\nTITLE: Ignored Package with Build Constraint\nDESCRIPTION: Package p3 with build constraint that excludes it from compilation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_import_error_stack.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// +build ignore\n\npackage ignored\n```\n\n----------------------------------------\n\nTITLE: Mercurial Configuration\nDESCRIPTION: Defines a mercurial configuration file for the test. It enables tweakdefaults, an opt-in feature that might print extra output which can be disabled using HGPLAIN=1.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_hg.txt#_snippet_12\n\nLANGUAGE: Go\nCODE:\n```\n[ui]\n# tweakdefaults is an opt-in that may print extra output in commands like\n# status.  That can be disabled by setting HGPLAIN=1.\ntweakdefaults = 1\n```\n\n----------------------------------------\n\nTITLE: Verifying ACL Configurations\nDESCRIPTION: Compares the ACLs of executables in different directories to ensure proper security attributes are applied.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_acl_windows.txt#2025-04-22_snippet_4\n\nLANGUAGE: Batch\nCODE:\n```\ncmp $WORK\\exe-acl.txt $WORK\\src-acl.txt\ngrep 'BUILTIN\\\\Guests\\s+Allow' $WORK\\guest-acl.txt\n! grep 'BUILTIN\\\\Guests\\s+Allow' $WORK\\exe-acl.txt\n```\n\n----------------------------------------\n\nTITLE: Testing Parallel Output Behavior with Standard Verbose Mode in Go\nDESCRIPTION: Shell commands that run a parallel Go test with verbose output and verify the expected continuation messages appear in the correct order for each subtest.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_chatty_parallel_fail.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n! go test -parallel 3 chatty_parallel_test.go -v\n\nstdout -count=1 '^=== CONT  TestChattyParallel/sub-0'\nstdout -count=1 '^=== CONT  TestChattyParallel/sub-1'\nstdout -count=1 '^=== CONT  TestChattyParallel/sub-2'\n\nstdout -count=1 '^=== (CONT|NAME)  TestChattyParallel/sub-0\\n    chatty_parallel_test.go:38: error from sub-0$'\nstdout -count=1 '^=== (CONT|NAME)  TestChattyParallel/sub-1\\n    chatty_parallel_test.go:38: error from sub-1$'\nstdout -count=1 '^=== (CONT|NAME)  TestChattyParallel/sub-2\\n    chatty_parallel_test.go:38: error from sub-2$'\n```\n\n----------------------------------------\n\nTITLE: Validating Rebuild of CGO in Go\nDESCRIPTION: After caching, this snippet validates that runtime/cgo is not rebuilt on subsequent builds when it is not stale. The snippet requires the go build tools to check the absence of stale marks and improper rebuilds.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_stale.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo build -x .\n! stderr '[/\\\\]cgo'$GOEXE'[\"]? .* -importpath runtime/cgo'\n! stale runtime/cgo\n```\n\n----------------------------------------\n\nTITLE: Updating Root go.mod to v2 Module Path\nDESCRIPTION: Updates the root go.mod file to use the v2 module path, matching the subdirectory module path.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nat 2018-02-19T17:32:37-05:00\necho 'module \"github.com/vgotest1/v2\"'\ncp stdout go.mod\ngit add go.mod\ngit commit -m 'say v2 in root go.mod'\n```\n\n----------------------------------------\n\nTITLE: Verifying 'atomic' Coverage Mode with Race Detector (Shell)\nDESCRIPTION: Uses `grep` to check the coverage profile (`$WORK/cover.out`) generated by the test run with the race detector. It asserts that the file contains exactly one line (`-count=1`) starting with `mode: atomic`. This confirms that the coverage mode correctly switches to 'atomic' when the `-race` flag is used.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_modes.txt#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngrep -count=1 '^mode: atomic$' $WORK/cover.out\n```\n\n----------------------------------------\n\nTITLE: Setting Git Author and Committer Information in Shell\nDESCRIPTION: Sets up Git author and committer environment variables for repository initialization. These commands configure the name and email for both author and committer to be used in commits.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/v2sub.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GIT_AUTHOR_NAME='Bryan C. Mills'\nenv GIT_AUTHOR_EMAIL='bcmills@google.com'\nenv GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME\nenv GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL\n```\n\n----------------------------------------\n\nTITLE: Language Testing Implementation\nDESCRIPTION: Test cases for verifying correct language selection and text output based on language preferences\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.2.1.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage sampler\n\nimport (\n\t\"testing\"\n\n\t\"golang.org/x/text/language\"\n)\n\nvar helloTests = []struct {\n\tprefs []language.Tag\n\ttext  string\n}{\n\t{\n\t\t[]language.Tag{language.Make(\"en-US\"), language.Make(\"fr\")},\n\t\t\"Hello, world.\",\n\t},\n\t{\n\t\t[]language.Tag{language.Make(\"fr\"), language.Make(\"en-US\")},\n\t\t\"Bonjour le monde.\",\n\t},\n}\n\nfunc TestHello(t *testing.T) {\n\tfor _, tt := range helloTests {\n\t\ttext := Hello(tt.prefs...)\n\t\tif text != tt.text {\n\t\t\tt.Errorf(\"Hello(%v) = %q, want %q\", tt.prefs, text, tt.text)\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Second Commit After Tag\nDESCRIPTION: Copies new version of main.go, adds it to the repository, and commits the changes with a message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/commit-after-tag.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nat 2019-07-15T17:17:27-04:00\ncp _next/main.go main.go\ngit add main.go\ngit commit -m 'add init function'\n```\n\n----------------------------------------\n\nTITLE: Verifying Fail Output in JSON\nDESCRIPTION: Checks for the presence of specific JSON entries indicating a build failure and a test failure for the 'example' package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_issue35169.txt#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nstdout '\\{.*\"Action\":\"output\",\"Package\":\"example\",\"Output\":\"FAIL\\\\texample \\[build failed\\]\\\\n\"\\}'\nstdout '\\{.*\"Action\":\"fail\",\"Package\":\"example\",.*\\}'\n```\n\n----------------------------------------\n\nTITLE: Defining Hello Function in Go\nDESCRIPTION: Returns a greeting by calling HelloV2() from an imported module. This function is part of the quote package which collects pithy sayings.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709160352-0d003b9c4bfa.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Hello returns a greeting.\nfunc Hello() string {\n\treturn quote.HelloV2()\n}\n```\n\n----------------------------------------\n\nTITLE: Go Program with Nested Relative Import\nDESCRIPTION: A Go program that imports a package from a subdirectory, which itself contains a relative import. This tests that files in relative-imported packages can use relative imports themselves.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_local.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"./sub\"\n\nfunc main() {\n\tsub.Hello()\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Toolchain in go.mod\nDESCRIPTION: Tests behavior when invalid toolchain versions are specified in go.mod file. Verifies error messages for unsupported version formats.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_issue66175.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo mod init m\ngo mod edit -go=1.14 -toolchain=go1.22\n! go version\nstderr 'go: invalid toolchain: go1.22 is a language version but not a toolchain version (go1.22.x)'\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Dependencies\nDESCRIPTION: A go.mod file that defines a module named 'm' with a direct dependency on rsc.io/quote version 1.5.2. This file is used by the test script to verify module graph resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_graph.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule m\nrequire rsc.io/quote v1.5.2\n```\n\n----------------------------------------\n\nTITLE: Defining ELF Compression Header Structs - Go\nDESCRIPTION: Definitions of 32-bit and 64-bit ELF compression header structures used in the debug/elf package for handling compressed sections.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.6.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Chdr32 struct {\n    Type uint32\n    Size uint32\n    Addralign uint32\n}\n\ntype Chdr64 struct {\n    Type uint32\n    Size uint64\n    Addralign uint64\n}\n```\n\n----------------------------------------\n\nTITLE: Go File with Interface Cycle\nDESCRIPTION: This Go file defines a set of interfaces with a cycle, used to test vet's ability to detect interface cycles.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_vet.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\ntype (\n\t_  interface{ m(B1) }\n\tA1 interface{ a(D1) }\n\tB1 interface{ A1 }\n\tC1 interface {\n\t\tB1 /* ERROR issue #18395 */\n\t}\n\tD1 interface{ C1 }\n)\n\nvar _ A1 = C1 /* ERROR cannot use C1 */ (nil)\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Module\nDESCRIPTION: This snippet shows the content of a go.mod file, which defines the module name and Go version for the project. It specifies the module as 'example.net/nonmain' and sets the Go version to 1.17.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_run_nonmain.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/nonmain\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: Implementation of Package B with Test\nDESCRIPTION: Package 'b' containing a Go implementation and test that imports packages 'a' and 'd'. It has a function BFunc() that combines values from imported packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverpkg_partial.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage b\n\nimport (\n\t\"M/a\"\n\t\"M/d\"\n)\n\nfunc BFunc() int {\n\treturn -d.FortyTwo + a.AFunc()\n}\n```\n\nLANGUAGE: go\nCODE:\n```\npackage b\n\nimport \"testing\"\n\nfunc TestB(t *testing.T) {\n\tif BFunc() == 1010101 {\n\t\tt.Fatalf(\"bad!\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Module Versions with Exclusions\nDESCRIPTION: Shows how version queries are affected by module exclusions when using 'go list' command.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query_exclude.txt#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngo list -m rsc.io/quote@>=v1.5\nstdout '^rsc.io/quote v1.5.0$'\ngo list -modfile=go.exclude.mod -m rsc.io/quote@>=v1.5\nstdout '^rsc.io/quote v1.5.1$'\n```\n\n----------------------------------------\n\nTITLE: Testing go list and build commands with alternate file\nDESCRIPTION: Verifies that go list and build commands update the alternate go.mod file when a dependency is missing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/modfile_flag.txt#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngo mod edit -droprequire rsc.io/quote\ngo list -mod=mod .\ngrep rsc.io/quote go.alt.mod\ngo build -n -mod=mod .\ngo test -n -mod=mod .\ngo get rsc.io/quote\n```\n\n----------------------------------------\n\nTITLE: Go Subtest Implementation\nDESCRIPTION: Implementation of a Go test file that contains a test with a subtest named 'Sub'. Shows the basic structure of using t.Run() for creating subtests in Go.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_no_tests_with_subtests.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage standalone_sub_test\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\tt.Run(\"Sub\", func(t *testing.T) {})\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Environment Variables for Author and Committer\nDESCRIPTION: Sets up the Git environment variables for author and committer information, ensuring consistent attribution in commits.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/semver-branch.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GIT_AUTHOR_NAME='Bryan C. Mills'\nenv GIT_AUTHOR_EMAIL='bcmills@google.com'\nenv GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME\nenv GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition with Local Replacement\nDESCRIPTION: A go.mod file defining a module 'example.com/a' that requires 'example.com/b' but replaces it with a local directory path.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_replace_file.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/a\n\nrequire example.com/b v1.0.0\n\nreplace example.com/b => ./local/b\n```\n\n----------------------------------------\n\nTITLE: Testing Unsigned Integer Fuzzing in Go\nDESCRIPTION: This fuzz test function demonstrates Go's fuzzing capabilities with unsigned integer inputs. It panics when the input is not 0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_crash.txt#2025-04-22_snippet_11\n\nLANGUAGE: Go\nCODE:\n```\nfunc FuzzUint(f *testing.F) {\n\tf.Add(uint(0))\n\tf.Fuzz(func(t *testing.T, a uint) {\n\t\tif a != 0 {\n\t\t\tpanic(\"this input caused a crash!\")\n\t\t}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Fetch with Failing Proxy\nDESCRIPTION: Attempts to fetch a module through a proxy that fails verification. Expects the command to fail with a 503 error.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_cache.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncp go.mod.orig go.mod\nrm go.sum\nenv GOPROXY=$proxy/sumdb-503\n! go get rsc.io/quote\nstderr 503\n```\n\n----------------------------------------\n\nTITLE: Empty Go Package for Syntax Error Test\nDESCRIPTION: This Go file defines an empty package 'p'. It's part of the test setup and doesn't contain any actual code.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_no_tests_build_failure.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage p\n```\n\n----------------------------------------\n\nTITLE: Creating Guest Directory with Full Access\nDESCRIPTION: Creates a guest directory in the work folder and grants full access to the Guests group using icacls command.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_acl_windows.txt#2025-04-22_snippet_0\n\nLANGUAGE: Batch\nCODE:\n```\nmkdir $WORK\\guest\nexec icacls $WORK\\guest /grant '*S-1-5-32-546:(oi)(ci)f'\n```\n\n----------------------------------------\n\nTITLE: Adding new OSABI constants to debug/elf package in Go\nDESCRIPTION: Introduces new OSABI (Operating System ABI) constants for AROS, CloudABI, and FenixOS in the debug/elf package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.11.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nconst ELFOSABI_AROS = 15\nconst ELFOSABI_AROS OSABI\nconst ELFOSABI_CLOUDABI = 17\nconst ELFOSABI_CLOUDABI OSABI\nconst ELFOSABI_FENIXOS = 16\nconst ELFOSABI_FENIXOS OSABI\n```\n\n----------------------------------------\n\nTITLE: Implementing CreateProcessAsUser function for Windows 386 architecture\nDESCRIPTION: Defines the CreateProcessAsUser function signature for the syscall package on Windows 32-bit architecture. This function creates a new process with the security context of the specified token.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.10.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\npkg syscall (windows-386), func CreateProcessAsUser(Token, *uint16, *uint16, *SecurityAttributes, *SecurityAttributes, bool, uint32, *uint16, *uint16, *StartupInfo, *ProcessInformation) error\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Version Formatting Commands\nDESCRIPTION: Shell commands to test go.mod exclude block formatting across Go versions 1.20 and 1.21, verifying proper version sorting behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_exclude_go121.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncp $WORK/go.mod.badfmtexclude go.mod\ngo mod edit -go=1.20\ncmp go.mod $WORK/go.mod.goodfmtexclude120\ngo mod edit -go=1.21\ncmp go.mod $WORK/go.mod.goodfmtexclude121\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Commit and Master Branch\nDESCRIPTION: Creates the initial commit with LICENSE and README.md files and renames the default branch to 'master'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nat 2018-02-19T17:21:09-05:00\ngit add LICENSE README.md\ngit commit -m 'initial commit'\ngit branch -m master\n```\n\n----------------------------------------\n\nTITLE: ELF Dynamic Tags Constants\nDESCRIPTION: Constants defining various dynamic tags used in ELF binary format. These constants are of type DynTag and represent different dynamic linking information.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nconst (\n    DT_ADDRRNGHI DynTag = 1879047935\n    DT_ADDRRNGLO DynTag = 1879047680\n    // ... additional DT_ constants\n)\n```\n\n----------------------------------------\n\nTITLE: Deprecated Windows String and Message Functions (386)\nDESCRIPTION: Deprecated Windows-specific string conversion and message formatting functions for 32-bit systems. These functions handled UTF-16 string conversions and Windows message formatting.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_45\n\nLANGUAGE: go\nCODE:\n```\nfunc FormatMessage() {} //deprecated\nfunc StringToUTF16() {} //deprecated\nfunc StringToUTF16Ptr() {} //deprecated\n```\n\n----------------------------------------\n\nTITLE: Terminal Control Constants - Darwin ARM64\nDESCRIPTION: Constants used for terminal control and input processing on Darwin ARM64. These values control terminal behavior like character processing and input modes.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_151\n\nLANGUAGE: Go\nCODE:\n```\nconst IGNBRK = 1\nconst IGNCR = 128\nconst IGNPAR = 4\nconst IMAXBEL = 8192\nconst INLCR = 64\nconst INPCK = 16\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Module Environment in Shell\nDESCRIPTION: Sets environment variables for Go modules and a misconfigured sum database proxy. This setup is used to test error handling in module downloads.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_json.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GO111MODULE=on\nenv GOSUMDB=$sumdb' '$proxy/sumdb-wrong\n```\n\n----------------------------------------\n\nTITLE: Adding Version-Specific go.mod in v2 Directory\nDESCRIPTION: Creates a v2 directory with its own go.mod file containing the v2 module path.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nat 2018-02-19T17:31:34-05:00\nmkdir v2\necho 'module \"github.com/vgotest1/v2\"'\ncp stdout v2/go.mod\ngit add v2/go.mod\ngit commit -m 'add v2/go.mod'\n```\n\n----------------------------------------\n\nTITLE: Running Go Benchmark Tests Command\nDESCRIPTION: Shell command to run only benchmark tests while skipping regular tests using regex pattern matching. Includes validation of expected output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_only_benchmarks.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo test -run '^$' -bench . standalone_benchmark_test.go\n! stdout '^ok.*\\[no tests to run\\]'\n! stderr '^ok.*\\[no tests to run\\]'\nstdout '^ok'\n```\n\n----------------------------------------\n\nTITLE: Verifying Build Status After Upgrade\nDESCRIPTION: Checks the build status after upgrading, expecting an error due to missing checksum for a new dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_update_unrelated_sum.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo list -deps -e -f $fmt\nstdout 'rsc.io/quote: ok'\nstdout 'rsc.io/sampler: missing go.sum entry for module providing package rsc.io/sampler'\n```\n\n----------------------------------------\n\nTITLE: Buggy Test Implementation in Go\nDESCRIPTION: A test file that intentionally fails with a fatal error message. This is likely used for testing error handling or demonstrating test failures in the package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709162816-fe488b867524.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage buggy\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\tt.Fatal(\"buggy!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Socket Control Constants - Darwin ARM64\nDESCRIPTION: Socket control message and operation constants for Darwin ARM64. Includes definitions for socket options and control operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_94\n\nLANGUAGE: Go\nCODE:\n```\nconst (\n    SCM_CREDS = 3\n    SCM_RIGHTS = 1\n    SCM_TIMESTAMP = 2\n    SCM_TIMESTAMP_MONOTONIC = 4\n    SIOCADDMULTI = 2149607729\n    SIOCAIFADDR = 2151704858\n    // ... additional socket constants\n)\n```\n\n----------------------------------------\n\nTITLE: Simple Hello World Program in Go\nDESCRIPTION: A minimal Go program that prints 'hello, world' to the console. This is the file that gets added to the Fossil repository in the example workflow.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/fossil/hello.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {\n\tprintln(\"hello, world\")\n}\n```\n\n----------------------------------------\n\nTITLE: Package Function Definition in pkg2\nDESCRIPTION: Creates an identical 'DoSomething' function in package 'pkg2'. This function is used in conjunction with 'pkg1' for coverage testing and demonstrates namespace separation in Go.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_nocoverpkg.txt#2025-04-22_snippet_4\n\nLANGUAGE: Golang\nCODE:\n```\n-- pkg2/file.go --\npackage pkg2\n\nfunc DoSomething() bool {\n\treturn true\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Format Output\nDESCRIPTION: Final HTML output showing heading structure with proper tags and IDs.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/head.txt#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p>Some text.\n<h3 id=\"hdr-An_Old_Heading\">An Old Heading</h3>\n<p>Not An Old Heading.\n<p>And some text.\n<h3 id=\"hdr-A_New_Heading_\">A New Heading.</h3>\n<p>And some more text.\n<p># Not a heading,\nbecause text follows it.\n<p>Because text precedes it,\n# not a heading.\n<p>## Not a heading either.\n```\n\n----------------------------------------\n\nTITLE: Mercurial Commands for Repository Setup\nDESCRIPTION: Series of Mercurial commands to initialize repository, add files, and create an initial commit with specific metadata. Includes log verification.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/hg/custom-hg-hello.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhg init\n\nhg add hello.go\nhg commit --user 'Russ Cox <rsc@golang.org>' --date '2017-10-10T19:39:36-04:00' --message 'hello'\n\nhg log -r ':' --template '{node|short} {desc|strip|firstline}\\n'\ncmp stdout .hg-log\n```\n\n----------------------------------------\n\nTITLE: Module B v0.2.0 Configuration\nDESCRIPTION: The go.mod file for module 'b' v0.2.0, requiring 'c' v0.2.0. This creates a different dependency path than v0.1.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_cycle.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nmodule b\n\ngo 1.13\n\nrequire c v0.2.0\n```\n\n----------------------------------------\n\nTITLE: Go Module Edit Permission Test Script\nDESCRIPTION: Shell script that sets up a readonly directory and tests 'go mod edit' behavior with restricted permissions to verify cache locking behavior\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit_no_modcache.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir $WORK/readonly\nchmod 0555 $WORK/readonly\nenv GOPATH=$WORK/readonly/nonexist\n\ngo mod edit -go=1.17\n```\n\n----------------------------------------\n\nTITLE: Defining Data Structures in Go for OpenBSD 386 CGO\nDESCRIPTION: This snippet defines various system-specific data structures used in syscalls and low-level operations on OpenBSD 386, including file descriptors, events, and terminal settings.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_49\n\nLANGUAGE: Go\nCODE:\n```\ntype Dirent struct {\n    Fileno uint64\n    Off int64\n    X__d_padding [4]uint8\n}\n\ntype FdSet struct {\n    Bits [32]uint32\n}\n\ntype Kevent_t struct {\n    Data int64\n}\n\ntype Termios struct {\n    Iflag uint32\n    Oflag uint32\n    Cflag uint32\n    Lflag uint32\n    Cc [20]uint8\n    Ispeed int32\n    Ospeed int32\n}\n```\n\n----------------------------------------\n\nTITLE: Go 1.21 Module Definition File\nDESCRIPTION: A Go 1.21 module definition that declares module m, requires q v1.0.0 with a local replacement, and depends on rsc.io/panicnil v1.0.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/godebug_default.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ngo 1.21\nmodule m\nrequire q v1.0.0\nreplace q => ./q\nrequire rsc.io/panicnil v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Getting Package Without Go Files in Root\nDESCRIPTION: Tests that 'go get' skips the build process when there are no Go files in the root of the package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_commit.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo get golang.org/x/text@14c0d48\n```\n\n----------------------------------------\n\nTITLE: Listing Module Without Showing Retraction using Go List\nDESCRIPTION: Validates that 'go list -m' does not produce retraction-related output when attempting to list module information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_retract.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\n# 'go list -m' does not show retraction.\\ngo list -m -f '{{with .Retracted}}retracted{{end}}' example.com/retract\\n! stdout .\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module in .mod File\nDESCRIPTION: Module declaration for gopkg.in/dummy.v2-unstable which defines the module's import path.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/gopkg.in_dummy.v2-unstable_v2.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule gopkg.in/dummy.v2-unstable\n```\n\n----------------------------------------\n\nTITLE: Signal Constants - Darwin ARM64\nDESCRIPTION: Signal constants for process control and system signals in Darwin ARM64. Defines various signal types for process management and system events.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_93\n\nLANGUAGE: Go\nCODE:\n```\nconst (\n    SIGBUS = 10\n    SIGCHLD = 20\n    SIGCONT = 19\n    SIGEMT = 7\n    SIGINFO = 29\n    SIGIO = 23\n    // ... additional signal constants\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a simple CSS file\nDESCRIPTION: This snippet contains a minimal CSS file that is part of the symlinked directory structure.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_symlink_issue35941.txt#2025-04-22_snippet_4\n\nLANGUAGE: CSS\nCODE:\n```\nbody {}\n```\n\n----------------------------------------\n\nTITLE: Testing Unparsable Directive Error in go.work File\nDESCRIPTION: Copies a go.work file with an unparsable directive and verifies the error message format when running 'go list'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_errors_pos.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp go.work.unparsable.txt go.work\n! go list\nstderr '^go.work:5: unknown directive: notadirective'\n```\n\n----------------------------------------\n\nTITLE: Archive ZIP Methods\nDESCRIPTION: Methods for opening files within ZIP archives using both ReadCloser and Reader types. Returns an fs.File interface and potential error.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc (*ReadCloser) Open(string) (fs.File, error)\nfunc (*Reader) Open(string) (fs.File, error)\n```\n\n----------------------------------------\n\nTITLE: Defining SVN Repository Import Path in HTML Meta Tag\nDESCRIPTION: HTML template with a go-import meta tag that maps the vcs-test.golang.org/go/test1-svn-git import path to an SVN repository at https://vcs-test.golang.org/svn/test1-svn-git.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/go/test1-svn-git.txt#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<meta name=\"go-import\" content=\"vcs-test.golang.org/go/test1-svn-git svn https://vcs-test.golang.org/svn/test1-svn-git\">\n```\n\n----------------------------------------\n\nTITLE: Defining Linux-specific Test for Package r\nDESCRIPTION: Creates a test file for package 'r' with a build constraint for Linux using the old '+build' syntax, importing package 's'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_all_gobuild.txt#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\n// +build linux\n\npackage r\n\nimport \"m/s\"\n```\n\n----------------------------------------\n\nTITLE: Implementation of Package E with Tests Only\nDESCRIPTION: Package 'e' containing only tests but no implementation. It imports packages 'a' and 'b' and tests their functionality.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverpkg_partial.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage e\n\nimport (\n\t\"M/a\"\n\t\"M/b\"\n\t\"testing\"\n)\n\nfunc TestBlah(t *testing.T) {\n\tif b.BFunc() == 1010101 {\n\t\tt.Fatalf(\"bad\")\n\t}\n\ta.AFunc()\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Repeated Path Error in go.work File\nDESCRIPTION: Copies a go.work file with a repeated path and verifies the error message format when running 'go list'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_errors_pos.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp go.work.repeated.txt go.work\n! go list\nstderr '^go.work:4: path .* appears multiple times in workspace$'\n```\n\n----------------------------------------\n\nTITLE: Testing Go list -test reporting vendored dependencies\nDESCRIPTION: Verifies that 'go list -test' reports vendored transitive dependencies of test imports in the Deps field.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_std_vendor.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo list -test -f '{{range .Deps}}{{.}}{{\"\\n\"}}{{end}}'\nstdout ^vendor/golang.org/x/crypto # dep of .TestImports\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition with Version Retraction\nDESCRIPTION: Defines a Go module with a retracted version v1.0.0. The retract directive indicates that this version should not be used.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/retract-pseudo.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule vcs-test.golang.org/git/retract-pseudo.git\n\ngo 1.16\n\nretract v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Go Vet Dependency Test Script\nDESCRIPTION: Shell script commands to test go vet behavior with module dependencies. Sets GO111MODULE=off and verifies that go vet only processes immediate dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_deps.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=off\n\n# Issue 30296. Verify that \"go vet\" uses only immediate dependencies.\n\n# First run fills the cache.\ngo vet a\n\ngo vet -x a\n! stderr 'transitive'\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies in Go Code\nDESCRIPTION: This Go file imports the 'example.com/a' and 'example.com/b' packages as blank imports, demonstrating how to use the dependencies specified in the go.mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline_old.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage m\n\nimport (\n\t_ \"example.com/a\"\n\t_ \"example.com/b\"\n)\n```\n\n----------------------------------------\n\nTITLE: Go Module Version Information\nDESCRIPTION: This JSON snippet provides metadata about the module version, essential for version tracking and module distribution. It represents the version 'v2.0.1' of the module example.com/latemigrate/v2.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_latemigrate_v2_v2.0.1.txt#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\"Version\":\"v2.0.1\"}\n```\n\n----------------------------------------\n\nTITLE: Setting List Item Margins with CSS\nDESCRIPTION: Defines vertical margin spacing of 0.5em for list items (<li>) that appear within the main element.\nSOURCE: https://github.com/golang/go/blob/master/doc/initial/1-intro.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  main ul li { margin: 0.5em 0; }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Testing Hello Function in Go\nDESCRIPTION: Tests the Hello function by comparing its output to the expected greeting. Fails the test if the output doesn't match the expected string.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709160352-0d003b9c4bfa.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc TestHello(t *testing.T) {\n\thello := \"Hello, world.\"\n\tif out := Hello(); out != hello {\n\t\tt.Errorf(\"Hello() = %q, want %q\", out, hello)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Module Dependencies in Go\nDESCRIPTION: This snippet demonstrates updating module dependencies and checking the results using various go commands.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_of_test_dep.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo get -t example.com/b@v0.1.0\ngo list -test -deps example.com/b\nstdout example.com/c\n\n[!short] go test -c -o $devnull example.com/b\n\ngo list -m example.com/c\nstdout '^example.com/c v0.1.0 '\n\ncmp go.mod go.mod.b\n```\n\n----------------------------------------\n\nTITLE: Tiny Package Definitions for Testing\nDESCRIPTION: Two Go source files defining a simple package 'tiny' with integer and boolean variables. Used as test objects for the Go coverage instrumentation test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_build_cmdline_pkgs.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage tiny\n\nvar Tvar int\n```\n\nLANGUAGE: go\nCODE:\n```\npackage tiny\n\nvar Tvar2 bool\n```\n\n----------------------------------------\n\nTITLE: Implementing Race Condition Test in Go\nDESCRIPTION: This test function creates a potential race condition between a goroutine and a cleanup function. It uses channels to synchronize the goroutine and the cleanup function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/testing_issue40908.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage testrace\n\nimport \"testing\"\n\nfunc TestRace(t *testing.T) {\n\thelperDone := make(chan struct{})\n\tgo func() {\n\t\tt.Logf(\"Something happened before cleanup.\")\n\t\tclose(helperDone)\n\t}()\n\n\tt.Cleanup(func() {\n\t\t<-helperDone\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Subpackage Implementation\nDESCRIPTION: A simple Go subpackage that provides a Hello function which prints a message to stdout. This package is imported by the parent package using a relative import.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_local.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage subsub\n\nimport \"fmt\"\n\nfunc Hello() {\n\tfmt.Println(\"subsub.Hello\")\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Word Boundaries with \\b in Go Regexps\nDESCRIPTION: Tests the behavior of the \\b assertion which matches word boundaries. These tests verify how \\b behaves with different character contexts.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_20\n\nLANGUAGE: regexp\nCODE:\n```\n\\bx\\b\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:\\bx\\b)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:\\bx\\b)\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:\\bx\\b)$\n```\n\n----------------------------------------\n\nTITLE: Checking error for excluded Go files\nDESCRIPTION: Uses 'go list' to check the error message for a directory with excluded Go files due to build constraints.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_empty_err.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo list -e -f {{.Error}} ./exclude\nstdout 'build constraints exclude all Go files in '$WORK${/}'exclude'\n```\n\n----------------------------------------\n\nTITLE: Setting up Git environment variables and repository initialization\nDESCRIPTION: Configures Git author and committer information, then initializes a new Git repository.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/issue47650.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GIT_AUTHOR_NAME='Bryan C. Mills'\nenv GIT_AUTHOR_EMAIL='bcmills@google.com'\nenv GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME\nenv GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL\n\ngit init\n```\n\n----------------------------------------\n\nTITLE: Testing RISC-V Architecture Features\nDESCRIPTION: Tests RISC-V 64-bit architecture with various instruction set extensions (RVA20U64, RVA22U64, RVA23U64).\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/tooltags.txt#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nenv GOARCH=riscv64\nenv GORISCV64=rva20u64\ngo list -f '{{context.ToolTags}}'\n\nenv GOARCH=riscv64\nenv GORISCV64=rva22u64\ngo list -f '{{context.ToolTags}}'\n```\n\n----------------------------------------\n\nTITLE: Triggering Go Generate for CGO Test\nDESCRIPTION: A simple Go file with a go:generate directive that runs the generator script to create a file with very long CGO LDFLAGS for testing purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_long_cmd.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\n//go:generate go run generate.go\n```\n\n----------------------------------------\n\nTITLE: Module B v0.1.0 Configuration\nDESCRIPTION: The go.mod file for module 'b' v0.1.0, requiring 'c' v0.1.0. This continues building the dependency chain for the test case.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_cycle.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule b\n\ngo 1.13\n\nrequire c v0.1.0\n```\n\n----------------------------------------\n\nTITLE: NetBSD ARM64 I/O Vector Structure Definition in Go\nDESCRIPTION: Defines the Iovec structure used for scatter/gather I/O operations. Contains fields for buffer address and length.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_95\n\nLANGUAGE: go\nCODE:\n```\ntype Iovec struct {\n\tBase *uint8\n\tLen uint64\n}\n```\n\n----------------------------------------\n\nTITLE: Comment List Formatting - Input Style\nDESCRIPTION: Shows original comment formatting with numbered list and extra spacing, including tab indentation and blank line within the comment block.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list10.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n\t1. This list\n\t2. Starts the comment\n\t3. And also has a blank line before it.\n\nAll of which is a little weird.\n```\n\n----------------------------------------\n\nTITLE: Setting Go Environment Variables\nDESCRIPTION: Sets environment variables for Go module behavior, including enabling modules, setting the proxy to direct, and disabling checksum database.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo_prefix.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GO111MODULE=on\nenv GOPROXY=direct\nenv GOSUMDB=off\n```\n\n----------------------------------------\n\nTITLE: Attempting to Modify GOWORK Environment Variable\nDESCRIPTION: This snippet attempts to modify the GOWORK environment variable using 'go env -w', which should fail with an error message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_env.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n! go env -w GOWORK=off\nstderr '^go: GOWORK cannot be modified$'\n```\n\n----------------------------------------\n\nTITLE: Testing version resolution with commit hash for v2\nDESCRIPTION: Fetches a specific commit hash corresponding to v2.0.0 and verifies the version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo.txt#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngo get ...test@d7ae1e4\ngo list -m all\nstdout '^github.com/rsc/legacytest v2\\.0\\.0\\+incompatible$'\n```\n\n----------------------------------------\n\nTITLE: Checking Module Resolution Before Vendoring in Go\nDESCRIPTION: Uses 'go list' command to verify the module version and directory before vendoring.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_replace.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo list -f '{{with .Module}}{{.Version}}{{end}} {{.Dir}}' rsc.io/quote/v3\nstdout 'v3.0.0'\nstdout '.*[/\\\\]not-rsc.io[/\\\\]quote[/\\\\]v3'\n```\n\n----------------------------------------\n\nTITLE: Database/sql NullByte and NullInt16 Types\nDESCRIPTION: New nullable types for byte and int16 values in database/sql package with associated Scan() and Value() methods\nSOURCE: https://github.com/golang/go/blob/master/api/go1.17.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype NullByte struct {\n    Byte uint8\n    Valid bool\n}\n\ntype NullInt16 struct {\n    Int16 int16\n    Valid bool\n}\n```\n\n----------------------------------------\n\nTITLE: Package-Specific Go Test Command\nDESCRIPTION: Extended test command targeting specific packages using multiple -pkg flags. The command is split across multiple lines for readability.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/code4.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo test -more \\\n  -pkg first/package \\\n  -pkg second/package \\\n  -pkg third/package\n```\n\n----------------------------------------\n\nTITLE: Listing Available Toolchain Versions\nDESCRIPTION: Uses the go list command to display available toolchain versions. It checks for the presence of specific versions, including release candidates.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_version.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngo list -m -versions toolchain\nstdout go1.20.1 # among others\nstdout go1.19rc2\n```\n\n----------------------------------------\n\nTITLE: Testing Preservation of Required Indirect Comments\nDESCRIPTION: Verifies that the go command maintains direct dependencies without automatically adding '// indirect' comments.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retention.txt#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncp go.mod.toodirect go.mod\ngo list all\ncmp go.mod go.mod.toodirect\n```\n\n----------------------------------------\n\nTITLE: Empty In-Package Test File\nDESCRIPTION: An empty test file within the package. This is part of the test case to verify coverage reporting works with both in-package and external tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_cgo_extra_test.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage p\n```\n\n----------------------------------------\n\nTITLE: Implementing Timeout Benchmark Test in Go\nDESCRIPTION: Defines a benchmark test that sleeps for 1 second to test timeout behavior. The test is designed to exceed the specified timeout of 750ms to verify proper timeout handling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_benchmark_timeout.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage timeoutbench_test\n\nimport (\n\t\"testing\"\n\t\"time\"\n)\n\nfunc BenchmarkSleep1s(b *testing.B) {\n\ttime.Sleep(1 * time.Second)\n}\n```\n\n----------------------------------------\n\nTITLE: Environment and Test Commands Configuration\nDESCRIPTION: Shell commands setting up the test environment with GO111MODULE off and executing various go commands to verify package import behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_main_archive.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=off\n\nenv GOBIN=$WORK/bin\ngo test main_test\ngo install main_test\n\ngo list -f '{{.Stale}}' main_test\nstdout false\n\ngo test main_test\n```\n\n----------------------------------------\n\nTITLE: Compiling Fake Go Toolchain in Shell\nDESCRIPTION: This shell command compiles the fake Go toolchain executable and places it in a specific directory. It's used to set up the test environment.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_path.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngo build -o $WORK/bin/go1.50.0$GOEXE ./fakego.go  # adds .exe extension implicitly on Windows\n```\n\n----------------------------------------\n\nTITLE: Original C Header Before Overlay\nDESCRIPTION: Original version of the C header file before being replaced by the overlay. Contains an incorrect function declaration that would cause compilation errors.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_overlay.txt#2025-04-22_snippet_12\n\nLANGUAGE: c\nCODE:\n```\n // Test that this header is replaced with one that has the proper declaration.\nvoid say_goodbye();\n```\n\n----------------------------------------\n\nTITLE: Windows batch file for pre-revprop-change hook\nDESCRIPTION: Windows batch script equivalent of the pre-revprop-change hook, which simply exits without performing any checks to allow property changes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/test2-svn-git.txt#2025-04-22_snippet_14\n\nLANGUAGE: batch\nCODE:\n```\n@exit\n\n```\n\n----------------------------------------\n\nTITLE: Internal Test File\nDESCRIPTION: Internal test file checking the vendored strings package message value.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_import.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"strings\" // really ../vendor/strings\n\t\"testing\"\n)\n\nfunc TestMsgInternal(t *testing.T) {\n\tif strings.Msg != \"hello, world\" {\n\t\tt.Fatalf(\"unexpected msg: %v\", strings.Msg)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Internal Leakage with Vendor Replacement\nDESCRIPTION: Attempts to get and build `./baddep` after setting up the vendor-like replacement for `golang.org/x/internal`. The build (`! go build`) is expected to fail, confirming that the vendored replacement still respects the original internal package boundaries.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ngo get ./baddep\n! go build ./baddep\nstderr golang.org[/\\\\]notx[/\\\\]useinternal\nstderr 'use of internal package golang.org/x/.* not allowed'\n```\n\n----------------------------------------\n\nTITLE: Implementing a Fuzz Test That Always Fails - Go\nDESCRIPTION: This Go testing snippet defines a fuzzing function 'FuzzFail' using the built-in 'testing' package. It uses Go 1.18's 'f.Fuzz' method to repeatedly invoke the test with arbitrary byte slices as input, always triggering a fatal error and causing the test to fail with the input bytes rendered as a quoted string. This setup is intended for demonstration or testing of fuzzing infrastructure failure handling. Requires Go 1.18+, and no external dependencies are needed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_fuzzfail_v0.1.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage fuzzfail\\n\\nimport \\\"testing\\\"\\n\\nfunc FuzzFail(f *testing.F) {\\n\\tf.Fuzz(func(t *testing.T, b []byte) {\\n\\t\\tt.Fatalf(\\\"oops: %q\\\", b)\\n\\t})\\n}\n```\n\n----------------------------------------\n\nTITLE: Main Package Implementation\nDESCRIPTION: Empty main package implementation with minimal main function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_test_issue14613.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Dependency Package Implementation\nDESCRIPTION: An empty Go source file that defines the 'dep' package, used as a dependency in this test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_perpkgflag.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage dep\n```\n\n----------------------------------------\n\nTITLE: Testing Go Get Behavior with Constrained-out Packages\nDESCRIPTION: This snippet tests the behavior of 'go get' when dealing with a module whose root is a constrained-out package, addressing issue #33526.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pkgtags.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ngo get example.net/tools@v0.1.0\n! stderr .\n\n! go build example.net/tools\nstderr '^package example.net/tools: build constraints exclude all Go files in .*[/\\\\]tools$'\n```\n\n----------------------------------------\n\nTITLE: Specifying Module Version Information in JSON\nDESCRIPTION: This JSON snippet provides version metadata, specifically setting the \"Version\" key to \"v1.1.0\". This information likely corresponds to the version of the parent module (`example.com/join`) being used or tested against in this specific test case context.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_join_subpkg_v1.1.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n-- .info --\n{\"Version\": \"v1.1.0\"}\n```\n\n----------------------------------------\n\nTITLE: Vendor Directory Package with External Dependency\nDESCRIPTION: Go file in the vendor directory demonstrating a package with an external dependency that would be ignored in module-aware mode.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_fs_patterns.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage v\nimport _ \"golang.org/x/crypto\"\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines the Go module configuration specifying module name 'm' and Go version requirement 1.16.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_exe.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Verifying original files are unmodified\nDESCRIPTION: Checks that the original go.mod and go.sum files have not been modified during the tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/modfile_flag.txt#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncmp go.mod go.mod.orig\ncmp go.sum go.sum.orig\n```\n\n----------------------------------------\n\nTITLE: AST Dump Format\nDESCRIPTION: Abstract Syntax Tree representation of the text structure\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/hello.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nDoc\n\tParagraph\n\t\tPlain\n\t\t\t\"Hello,\\n\"\n\t\t\t\"world\"\n\tParagraph\n\t\tPlain\n\t\t\t\"This is\\n\"\n\t\t\t\"a test.\"\n```\n\n----------------------------------------\n\nTITLE: Testing 'go mod download' with explicit versions inside a module\nDESCRIPTION: Tests that 'go mod download' with explicit versions inside a module correctly upgrades the toolchain if needed but does not change the main module's toolchain version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_exec_toolchain.txt#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd example\ncp go.mod go.mod.orig\n\nenv GOTOOLCHAIN=auto\ngo mod download rsc.io/needgo121@latest rsc.io/needgo122@latest rsc.io/needgo123@latest rsc.io/needall@latest\nstderr '^go: rsc.io/needall@v0.0.1 requires go >= 1.23; switching to go1.23.9$'\n! stderr '\\(running'\ncmp go.mod go.mod.orig\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Dependencies\nDESCRIPTION: The 'go.mod' file specifies the module name 'd' and sets the Go version to 1.16. This module definition is essential for compiling and linking the provided Go code correctly.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/load_test_pkg_err.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n-- go.mod --\nmodule d\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module File (go.mod)\nDESCRIPTION: Standard go.mod file declaring the module name.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-ppc64.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Module Definition with Dropped Exclusion\nDESCRIPTION: Simplified module definition after dropping excluded version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_require_exclude.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule x\n\ngo 1.13\n\nexclude rsc.io/sampler v1.99.99\n```\n\n----------------------------------------\n\nTITLE: Testing GOWORK Variable with go work init\nDESCRIPTION: Test script that validates the go work init command behavior with different GOWORK environment variable settings. Tests include checking default location, custom path creation, and handling of existing work files.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_init_gowork.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n! exists go.work\ngo work init\nexists go.work\n\nenv GOWORK=$GOPATH/src/foo/foo.work\n! exists foo/foo.work\ngo work init\nexists foo/foo.work\n\nenv GOWORK=\ncd foo/bar\n! go work init\nstderr 'already exists'\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n-- foo/dummy.txt --\n-- foo/bar/dummy.txt --\n```\n\n----------------------------------------\n\nTITLE: Go List with Long Rationale\nDESCRIPTION: This snippet tests 'go list' with a module retracted with a long rationale. It confirms that 'go list' displays the full long message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_rationale.txt#_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ngo list -m -retracted -f '{{.Retracted}}' example.com/retract/rationale\nstdout '^\\\\[lo{500}ng\\\\]$'\n```\n\n----------------------------------------\n\nTITLE: Executing Module Dependency Test in Go\nDESCRIPTION: This script performs a series of commands to test module dependency management. It includes copying the go.mod file, running 'go mod tidy', comparing mod files, downgrading a dependency, and listing all modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_pseudo_artifact.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncp go.mod go.mod.orig\ngo mod tidy\ncmp go.mod.orig go.mod\n\n# When we downgrade d.2 to d.1, no dependency on e should be added\n# because nothing else in the module or import graph requires it.\ngo get example.net/d@v0.1.0\n\ngo list -m all\nstdout '^example.net/b v0.2.1-0.20210219000000-000000000000 '\nstdout '^example.net/c v0.1.0 '\nstdout '^example.net/d v0.1.0 '\n! stdout '^example.net/e '\n```\n\n----------------------------------------\n\nTITLE: Package A Implementation\nDESCRIPTION: Simple implementation of package a.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_downgrade.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage a\n```\n\n----------------------------------------\n\nTITLE: Module A Implementation\nDESCRIPTION: Main implementation file for module a that imports and uses package p\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_irrelevant_dependency.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\nimport (\n\t\"example.com/p\"\n)\n\nfunc Foo() {\n\tp.P()\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Help Overview Command\nDESCRIPTION: Verifies that the main 'go help' command shows basic overview and bug report information\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/help.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo help\nstdout 'Go is a tool'\nstdout 'bug.*start a bug report'\n```\n\n----------------------------------------\n\nTITLE: Replacement C Header in Overlay\nDESCRIPTION: Replacement C header file from the overlay that contains the correct function declaration for say_hello, which matches what's called from Go.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_overlay.txt#2025-04-22_snippet_14\n\nLANGUAGE: c\nCODE:\n```\nvoid say_hello();\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Basic Go module declaration for the test package 'coverasm' specifying Go 1.16 as the required version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_asm.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule coverasm\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Executing Go Test with Coverage\nDESCRIPTION: Command to run Go tests with coverage reporting, which shows 100% coverage despite unreachable code in blank-named functions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_blank_func_decl.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo test -cover coverblank\n```\n\n----------------------------------------\n\nTITLE: Empty Go Test File\nDESCRIPTION: Defines an empty test function in the 'example' package, which is not expected to run due to the build failure.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_issue35169.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\npackage  example\n\nfunc Test(*testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Testing version resolution with specific commit hash\nDESCRIPTION: Fetches a specific commit and verifies the resulting version string.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo get ...test@7303f77\ngo list -m all\nstdout '^github.com/rsc/legacytest v2\\.0\\.1-0\\.\\d{14}-7303f7796364\\+incompatible$'\n```\n\n----------------------------------------\n\nTITLE: Go Package with Embedded File\nDESCRIPTION: Defines a Go package 'blah' that uses the embed directive to include a README.md file as a string variable.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_module_when_error.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage blah\n\nimport _ \"embed\"\n\n//go:embed README.md\nvar readme string\n```\n\n----------------------------------------\n\nTITLE: Module C Configuration\nDESCRIPTION: Basic module configuration for module c with no dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_newroot.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/c\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Defining Go Workspace Configuration\nDESCRIPTION: This snippet shows the content of the go.work file, which defines the workspace configuration. It specifies the Go version and the modules to be included in the workspace.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_prune.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\ngo 1.18\n\nuse (\n\t./a\n\t./p\n)\n```\n\n----------------------------------------\n\nTITLE: Defining the Go Module (Go Mod)\nDESCRIPTION: This `go.mod` file defines the root of the Go module named 'm'. It's a prerequisite for the Go build system to correctly process the packages within this test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_path.txt#2025-04-22_snippet_1\n\nLANGUAGE: gomod\nCODE:\n```\n-- go.mod --\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Module for Syso and Cgo Test\nDESCRIPTION: Defines the Go module configuration for the test project.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/link_syso_deps.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule m\n\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Expected Module State After Tool Addition\nDESCRIPTION: Expected go.mod state after adding a specific tool version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_tool.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule example.com/foo\n\ngo 1.24\n\ntool example.com/tools/cmd/hello\n\nrequire example.com/tools v1.0.0 // indirect\n```\n\n----------------------------------------\n\nTITLE: Defining Go Source File with Dependency (Go)\nDESCRIPTION: Defines a simple Go source file (`use/use.go`) for package `use`. This package imports `example.com/badchain/c` for its side effects (using the blank identifier `_`). This file is used in tests where listing this package triggers dependency resolution errors.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badchain.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n-- use/use.go --\npackage use\n\nimport _ \"example.com/badchain/c\"\n```\n\n----------------------------------------\n\nTITLE: Go Package Import for Module Use\nDESCRIPTION: The use.go file contains a Go package 'use' that imports the module 'rsc.io/quote'. The import is done anonymously to ensure dependencies are correctly initialized.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_replace_dir.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n-- use.go --\npackage use\n\nimport _ \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: Expected Output for 'go get -v' Command\nDESCRIPTION: Expected output for the 'go get -v' command showing the toolchain switching and module upgrade process when dependencies require a newer Go version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_toolchain.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ngo: trying upgrade to example.net/b@v0.1.0\ngo: module ./b1 requires go >= 1.22.0; switching to go1.22.9\ngo: trying upgrade to example.net/b@v0.1.0\ngo: accepting indirect upgrade from go@1.20 to 1.22.0\ngo: trying upgrade to example.net/c@v0.1.0\ngo: upgraded go 1.20 => 1.22.0\ngo: added example.net/b v0.1.0\ngo: added example.net/c v0.1.0\ngo: added example.net/d v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module\nDESCRIPTION: This Go module file defines the module name as 'empty' and specifies the Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_empty.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule empty\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Testing 'go test -c' Behavior with Shell Script\nDESCRIPTION: This shell script tests the `go test -c` command in the Go toolchain. It installs helper utilities, builds test binaries for the 'errors' package with different flags (`-test.bench=XXX`, `-o`), compares the generated binaries using `cmp`, and verifies that the modification times (`mtime`) of the test binaries are updated correctly even when they are rebuilt from cache using helper commands `now`, `mtime`, and `before` to manage and compare timestamps.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_issue6480.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Install some commands to compare mtimes\nenv GOBIN=$WORK/tmp/bin\ngo install m/now m/mtime m/before\n\n# Initial builds\ngo test -c -test.bench=XXX errors\ngo test -c -o errors2.test errors\ncmp errors.test$GOEXE errors2.test # // errors2.test has no exeSuffix because -o above doesn't have it\n\n# Check errors.test mtime is updated\nexec $GOBIN/now\ncp stdout start_time.txt\ngo test -x -c -test.bench=XXX errors\n! stderr '[\\/]link|gccgo' # make sure up-to-date test binary is not relinked\nexec $GOBIN/mtime errors.test$GOEXE\ncp stdout errors1_mod_time.txt\nexec $GOBIN/before start_time.txt errors1_mod_time.txt\nrm start_time.txt errors1_mod_time.txt\n\n# Check errors2.test mtime is updated\nexec $GOBIN/now\ncp stdout start_time.txt\ngo test -x -c -o errors2.test errors\n! stderr '[\\/]link|gccgo' # make sure up-to-date test binary is not relinked\nexec $GOBIN/mtime errors2.test\ncp stdout errors2_mod_time.txt\nexec $GOBIN/before start_time.txt errors2_mod_time.txt\n```\n\n----------------------------------------\n\nTITLE: Main Module Definition with Dependency on Sub-module\nDESCRIPTION: Defines the main module 'm' with Go 1.1 compatibility, requiring the 'sub' module and replacing it with a local path.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule m\ngo 1.1\nrequire (\n\tsub v1.0.0\n)\nreplace (\n\tsub => ./sub\n)\n```\n\n----------------------------------------\n\nTITLE: Minimal Go Program (Go)\nDESCRIPTION: This is a minimal Go program that defines an empty main function. It serves as the entry point for the 'mycmd' module used in the GOARM test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_arch_mode.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Formatting URLs in Markdown\nDESCRIPTION: Markdown representation of URLs with special characters, showing proper escaping of underscores, brackets, and other special characters in both link text and URLs.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/link6.txt#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nURLs with punctuation are hard. We don't want to consume the end-of-sentence punctuation.\\n\\nFor example, [https://en.wikipedia.org/wiki/John\\_Adams\\_(miniseries)](https://en.wikipedia.org/wiki/John_Adams_(miniseries)). And [https://example.com/\\[foo]/bar](https://example.com/[foo]/bar){. And [https://example.com/(foo)/bar](https://example.com/(foo)/bar)! And [https://example.com/{foo}/bar](https://example.com/{foo}/bar){. And [https://example.com/](https://example.com/))baz{foo}.\\n\\n\\[And [https://example.com/](https://example.com/)].\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Basic Go module definition file showing module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_main.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule rsc.io\n\ngo 1.13\n```\n\n----------------------------------------\n\nTITLE: Minimal Go Test File for Cache Testing\nDESCRIPTION: This Go file provides a minimal test case (`x_test.go`) used by the shell script to exercise the `go test` and `go clean -testcache` commands. It defines an empty `TestMain` function within the `x_test` package, sufficient to trigger test execution and caching mechanisms.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/clean_testcache.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n-- x/x_test.go --\npackage x_test\nimport (\n    \"testing\"\n)\nfunc TestMain(t *testing.T) {\n}\n```\n\n----------------------------------------\n\nTITLE: Vendored Dependency Implementation\nDESCRIPTION: Vendored version of the dependency package implementing the Dep function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_disablevendor.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage dep\n\nimport \"fmt\"\n\nfunc Dep() {\n\tfmt.Println(\"the vendored dep\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Quote Package with v2 Dependency in Go\nDESCRIPTION: Core implementation of the quote package that provides access to various pithy sayings. The package imports functionality from the v2 version and exposes simplified function calls that delegate to the v2 implementations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709162816-fe488b867524.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Package quote collects pithy sayings.\npackage quote // import \"rsc.io/quote\"\n\nimport \"rsc.io/quote/v2\"\n\n// Hello returns a greeting.\nfunc Hello() string {\n\treturn quote.HelloV2()\n}\n\n// Glass returns a useful phrase for world travelers.\nfunc Glass() string {\n\t// See http://www.oocities.org/nodotus/hbglass.html.\n\treturn quote.GlassV2()\n}\n\n// Go returns a Go proverb.\nfunc Go() string {\n\treturn quote.GoV2()\n}\n\n// Opt returns an optimization truth.\nfunc Opt() string {\n\t// Wisdom from ken.\n\treturn quote.OptV2()\n}\n```\n\n----------------------------------------\n\nTITLE: Another Package 1 Test File Structure\nDESCRIPTION: Empty test file for package pkg1 in the anotherpkg directory. This creates a name collision with the other pkg1 package to test how 'go test' handles multiple packages with the same name.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_compile_multi_pkg.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage pkg1\n```\n\n----------------------------------------\n\nTITLE: Defining System Call Functions for Go\nDESCRIPTION: Function prototypes for common system calls like Fstatat, Mknod, and Syscall18 are defined for use in FreeBSD and Windows Go programs. These functions interface with the operating system to perform tasks such as retrieving file status and creating special files.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.12.txt#2025-04-22_snippet_17\n\nLANGUAGE: Go\nCODE:\n```\nfunc Fstatat(fd int, path string, stat *Stat_t, flag int) error\nfunc Mknod(path string, mode uint32, dev uint64) error\nfunc Syscall18(trap, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18 uintptr) (r1, r2 uintptr, err Errno)\n```\n\n----------------------------------------\n\nTITLE: Function Implementation for Internal Package 'q' in Go\nDESCRIPTION: Internal package 'q' with a function Q that returns 42.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_multipkg.txt#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\npackage q\n\nfunc Q() int {\n\treturn 42\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Modified Package for Custom bytes Import\nDESCRIPTION: This Go file defines a 'modified' package within the bytes directory. It's used as part of the custom GOROOT setup to test package import behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_alt_goroot.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage modified\n```\n\n----------------------------------------\n\nTITLE: Test File for Package b - b/b_test.go\nDESCRIPTION: Defines a test for package 'b' that imports a test-only dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto_multi.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\nimport \"testing\"\nimport _ \"test/testdep\"\nfunc TestB(*testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Go Module Declaration\nDESCRIPTION: Defines a Go module named 'm'\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gccgo_mangle.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Building Go for MIPS with GOMIPS=softfloat\nDESCRIPTION: This snippet tests Go compilation with GOMIPS set to softfloat. It verifies that floating point registers are not used in this configuration.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_gomips.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n# Clean cache\ngo clean -cache\n\n# Building with GOMIPS=softfloat will not use floating point registers\nenv GOMIPS=softfloat\ngo build -gcflags=-S f.go\n! stderr ADDD.F[0-9]+,.F[0-9]+,.F[0-9]+\n```\n\n----------------------------------------\n\nTITLE: Version Information in .info File\nDESCRIPTION: JSON-formatted version information for the Go toolchain module, specifying the exact version string.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-arm64.txt#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.999testmod.openbsd-arm64\"}\n```\n\n----------------------------------------\n\nTITLE: Subdirectory Go Application Code\nDESCRIPTION: Simple Go application in a subdirectory with an empty main function for testing version stamping in nested modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_version_stamping_git.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {\n}\n```\n\n----------------------------------------\n\nTITLE: Explicit Module Upgrade to Resolve Conflict\nDESCRIPTION: Demonstrates how to explicitly upgrade a conflicting module to resolve ambiguity.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_ambiguous_pkg.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo get example.net/ambiguous@v0.2.0 example.net/ambiguous/nested/pkg@v0.1.0\ngo list -m all\nstdout '^example.net/ambiguous/nested v0.1.0$'\nstdout '^example.net/ambiguous v0.2.0$'\n```\n\n----------------------------------------\n\nTITLE: CGO Integration with Angle Brackets Header\nDESCRIPTION: Alternative CGO implementation that includes a header using angle brackets. Tests that overlays work with different header inclusion styles.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_overlay.txt#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\n// #include <cgo_header.h>\nimport \"C\"\n\nfunc main() {\n\tC.say_hello()\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated NetBSD BPF Functions\nDESCRIPTION: Collection of deprecated Berkeley Packet Filter (BPF) related functions for NetBSD across various architectures. These functions handle packet filtering, network interface operations, and routing.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_38\n\nLANGUAGE: go\nCODE:\n```\nfunc BpfBuflen\nfunc BpfDatalink\nfunc BpfHeadercmpl\nfunc BpfInterface\nfunc BpfJump\nfunc BpfStats\nfunc BpfStmt\nfunc BpfTimeout\nfunc CheckBpfVersion\nfunc FlushBpf\nfunc SetBpf\nfunc SetBpfBuflen\nfunc SetBpfDatalink\nfunc SetBpfHeadercmpl\nfunc SetBpfImmediate\nfunc SetBpfInterface\nfunc SetBpfPromisc\nfunc SetBpfTimeout\n```\n\n----------------------------------------\n\nTITLE: Verifying Vendored Module Content in Go\nDESCRIPTION: Compares the vendored module file with the local replacement to ensure correct vendoring.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_replace.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncmp vendor/rsc.io/quote/v3/quote.go local/not-rsc.io/quote/v3/quote.go\n```\n\n----------------------------------------\n\nTITLE: Expected go.sum Content for Module Verification\nDESCRIPTION: This file contains the expected content of go.sum after concurrent builds. It includes cryptographic hashes for the required modules and their versions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_concurrent.txt#2025-04-22_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\ngolang.org/x/text v0.3.0 h1:ivTorhoiROmZ1mcs15mO2czVF0uy0tnezXpBVNzgrmA=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\nrsc.io/sampler v1.0.0 h1:SRJnjyQ07sAtq6G4RcfJEmz8JxqLyj3PoGXG2VhbDWo=\nrsc.io/sampler v1.0.0/go.mod h1:cqxpM3ZVz9VtirqxZPmrWzkQ+UkiNiGtkrN+B+i8kx8=\n```\n\n----------------------------------------\n\nTITLE: Multiple TestMain Execution Test\nDESCRIPTION: Implementation of TestMain that runs tests twice and a basic test function. This pattern supports scenarios where global state needs to be modified between test runs, as referenced in golang.org/issue/23129.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_main_twice.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage multimain_test\n\nimport \"testing\"\n\nfunc TestMain(m *testing.M) {\n\t// Some users run m.Run multiple times, changing\n\t// some kind of global state between runs.\n\t// This used to work so I guess now it has to keep working.\n\t// See golang.org/issue/23129.\n\tm.Run()\n\tm.Run()\n}\n\nfunc Test(t *testing.T) {\n\tt.Log(\"notwithstanding\")\n}\n```\n\n----------------------------------------\n\nTITLE: Module Definition for rsc.io/breaker\nDESCRIPTION: Defines the Go module name for rsc.io/breaker.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_breaker_v2.0.0+incompatible.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule rsc.io/breaker\n```\n\n----------------------------------------\n\nTITLE: Package B Definition (b.go)\nDESCRIPTION: Go source file defining package 'b'\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_ambiguous_a_v1.0.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage b\n```\n\n----------------------------------------\n\nTITLE: Main Package Import\nDESCRIPTION: Main package file importing the badimport package\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_errors.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage m\n\nimport _ \"example.com/badimport\"\n```\n\n----------------------------------------\n\nTITLE: Defining Dependency Package 'x/otherdep' (Go)\nDESCRIPTION: Defines the empty package `x/otherdep` within the `x` module. This package is imported by `x/otherroot` and serves as an intermediate dependency in the graph.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_notall.txt#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n-- x/otherdep/otherdep.go --\npackage otherdep\n```\n\n----------------------------------------\n\nTITLE: Go Work Toolchain Test Script\nDESCRIPTION: Shell script that tests the functionality of go work edit -toolchain command. Tests setting specific version (go1.9), default value, and removing toolchain setting while verifying changes through grep commands.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_edit_toolchain.txt#2025-04-22_snippet_0\n\nLANGUAGE: shellscript\nCODE:\n```\nenv GOTOOLCHAIN=local\nenv GO111MODULE=on\n\n! grep toolchain go.work\ngo work edit -toolchain=go1.9\ngrep 'toolchain go1.9' go.work\n\ngo work edit -toolchain=default\ngrep 'toolchain default' go.work\n\ngo work edit -toolchain=none\n! grep toolchain go.work\n```\n\n----------------------------------------\n\nTITLE: Module Declaration in .mod File\nDESCRIPTION: Declares the module name for the toolchain package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-mipsx.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Level1a Package Implementation\nDESCRIPTION: Level1a package implementation with conflicting imports of level2x and level2y packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_issue_59905.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage level1a\n\nimport (\n\t\"test/main/level1a/level2x\"\n\t\"test/main/level1a/level2y\"\n)\n\nfunc Print() { println(level2x.Value, level2y.Value) }\n```\n\n----------------------------------------\n\nTITLE: SVN Pre-revprop-change Hook Scripts\nDESCRIPTION: Hook scripts for SVN that run before revision properties are changed, with versions for both Unix/Linux and Windows.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/hello.txt#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n-- hooks/pre-revprop-change --\n#!/bin/sh\n\n-- hooks/pre-revprop-change.bat --\n@exit\n```\n\n----------------------------------------\n\nTITLE: Testing Deprecated Insecure Flag in GOPATH Mode\nDESCRIPTION: Sets GO111MODULE to off for GOPATH mode and attempts to use the deprecated -insecure flag with go get, which should produce an error message recommending GOINSECURE instead.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/get_insecure_no_longer_supported.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=off\n\n# GOPATH: Fetch with insecure, should error\n! go get -insecure test\nstderr 'go: -insecure flag is no longer supported; use GOINSECURE instead'\n```\n\n----------------------------------------\n\nTITLE: Go File with Non-Vendored Import\nDESCRIPTION: A Go file that imports a package 'r' which is not found in the immediate vendor directory, causing a potential build error.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_vendor.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage subdir\n\nimport _ \"r\"\n```\n\n----------------------------------------\n\nTITLE: Testing Retracted Modules in GOPATH Mode using Go\nDESCRIPTION: This snippet verifies that 'go list -retracted' reports an error when the GOPATH mode is active, expecting a message that the command can only be run in module-aware mode.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_retract.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n# 'go list -retracted' reports an error in GOPATH mode.\\nenv GO111MODULE\\u003doff\\n! go list -retracted\\nstderr '^go list -retracted can only be used in module-aware mode$'\\nenv GO111MODULE\\u003d\n```\n\n----------------------------------------\n\nTITLE: Go Workspace With Replace Directives\nDESCRIPTION: Go workspace configuration with module replacements specified\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_edit.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\n\nuse ./n\n\nreplace (\n\tx.1 v1.3.0 => y.1 v1.4.0\n\tx.1 v1.4.0 => ../z\n)\n```\n\n----------------------------------------\n\nTITLE: Test File with Sleep for Second Package\nDESCRIPTION: A simple Go test file for the second sleepy package that imports testing and time packages. It contains a single test function that sleeps for 200 milliseconds.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_pattern.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nimport (\n\t\"testing\"\n\t\"time\"\n)\n\nfunc Test1(t *testing.T) {\n\ttime.Sleep(200 * time.Millisecond)\n}\n```\n\n----------------------------------------\n\nTITLE: No Version Module Definition\nDESCRIPTION: Module definition for example.com/noversion test module used in proxy response testing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_update_nolatest.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/noversion\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: Mock GCC Compiler Batch Script (Batch)\nDESCRIPTION: This Windows batch script acts as a placeholder for the `gcc` compiler. If executed, it writes \"ran gcc\" to `bug.txt`. The test uses this on Windows to ensure `go build` doesn't insecurely execute compilers found relative to the current directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_path.txt#2025-04-22_snippet_6\n\nLANGUAGE: batch\nCODE:\n```\n-- p/gcc.bat --\necho ran gcc >bug.txt\n```\n\n----------------------------------------\n\nTITLE: Module B Configuration\nDESCRIPTION: Go module configuration for example.com/b with dependency on module C\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_regression_hang.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/b\n\ngo 1.18\n\nrequire example.com/c v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition Files\nDESCRIPTION: Two identical module definition files specifying the module name 'rsc.io/needgo124' and the required Go version 1.24.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo124_v0.0.1.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule rsc.io/needgo124\ngo 1.24\n```\n\n----------------------------------------\n\nTITLE: Defining conflicting module path in go.mod\nDESCRIPTION: A go.mod file that deliberately sets up a module path conflict by using 'example.com/hello/v2' when the directory path is 'example.com/hello'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_run_path.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/hello/v2\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition with Dependencies\nDESCRIPTION: Main go.mod file defining module dependencies for testing version checking behavior with example.com/nolatest and example.com/noversion modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_update_nolatest.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.17\n\nrequire (\n\texample.com/nolatest v0.0.0\n\texample.com/noversion v0.0.0\n)\n```\n\n----------------------------------------\n\nTITLE: Non-existent Package Import Test\nDESCRIPTION: A Go file that attempts to import a non-existent package named 'nonexist'. Used to test how the build system handles missing standard library packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goroot_errors.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage importnonexist\nimport _ \"nonexist\"\n```\n\n----------------------------------------\n\nTITLE: Malforming Go Module Declaration\nDESCRIPTION: Includes a malformed `go.mod` file where the module declaration is invalid due to an incorrect path, used for testing error reporting.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_path.txt#2025-04-22_snippet_6\n\nLANGUAGE: Golang\nCODE:\n```\n-- badname/go.mod --\n\nmodule .\\. \n```\n\n----------------------------------------\n\nTITLE: HTML Rendered Code Block Format\nDESCRIPTION: Demonstrates how the code blocks are rendered in HTML using pre tags\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/code.txt#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p>Text.\n<pre>A tab-indented\n(no, not eight-space indented)\ncode block and haiku.\n</pre>\n<p>More text.\n<pre>One space\n is\n  enough\n   to\n    start\n     a\n      block.\n</pre>\n<p>More text.\n<pre>    Blocks\n  can\n\nhave\n  blank\n    lines.\n</pre>\n```\n\n----------------------------------------\n\nTITLE: Generic Comparison Functions in cmp Package\nDESCRIPTION: New generic comparison functions for ordered types. Includes Compare for three-way comparison and Less for two-way comparison of ordered values.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.21.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc Compare[$0 Ordered]($0, $0) int\nfunc Less[$0 Ordered]($0, $0) bool\ntype Ordered interface {}\n```\n\n----------------------------------------\n\nTITLE: HTML Metadata for Go Module Import\nDESCRIPTION: HTML file with go-import meta tag that defines the module import path and location for the package manager.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/auth/or401.txt#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<meta name=\"go-import\" content=\"vcs-test.golang.org/auth/or401 mod https://vcs-test.golang.org/auth/or401\">\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Flag Combination (JSON then Template)\nDESCRIPTION: Verifies that using both -json and -f flags together (in that order) produces an error\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_json_with_f.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n! go list -json -f '{{.}}' ./...\n```\n\n----------------------------------------\n\nTITLE: HTML Format List Marker Tests\nDESCRIPTION: HTML representation of list marker test cases with proper paragraph and preformatted text elements.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list7.txt#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<p>Almost list markers (but not quite):\n<pre>-\n</pre>\n<p>❦\n<pre>- $\n</pre>\n<p>❦\n<pre>- $\n</pre>\n<p>❦\n<p>❦\n<pre>1! List.\n</pre>\n<p>❦\n```\n\n----------------------------------------\n\nTITLE: Debug DWARF LineEntry Struct Definition\nDESCRIPTION: Definition of the LineEntry struct in debug/dwarf package that represents line number information for debugging.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.5.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype LineEntry struct {\n    Address uint64\n    File *LineFile\n    Line int\n    Column int\n    ISA int\n    Discriminator int\n    IsStmt bool\n    BasicBlock bool\n    EndSequence bool\n    PrologueEnd bool\n    EpilogueBegin bool\n    OpIndex int\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository with Author Configuration\nDESCRIPTION: Sets up Git environment variables for author and committer information before initializing a new Git repository.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GIT_AUTHOR_NAME='Russ Cox'\nenv GIT_AUTHOR_EMAIL='rsc@golang.org'\nenv GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME\nenv GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL\n\ngit init\n```\n\n----------------------------------------\n\nTITLE: Go Module Get with Empty Proxy Fallback\nDESCRIPTION: Test case showing successful module download when falling back to proxy.golang.org after empty proxy\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_file_path.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nenv GOPROXY=file://$WORK/emptyproxy,https://proxy.golang.org\ngo get golang.org/x/text@v0.3.2\n```\n\n----------------------------------------\n\nTITLE: Testing Lazy Loading Behavior with go list\nDESCRIPTION: Demonstrates how lazy loading affects the output of various 'go list' commands.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_all.txt#2025-04-22_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\ngo list -f $PKGFMT all\n\ngo list -test -f $PKGFMT all\n\ngo list -test -deps -f $PKGFMT all\n```\n\n----------------------------------------\n\nTITLE: Executing Go Module Vendoring\nDESCRIPTION: Runs 'go mod vendor' and checks that no downloading or finding operations occur due to all dependencies being replaced.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_replace.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo mod vendor\n! stderr 'downloading'\n! stderr 'finding'\n```\n\n----------------------------------------\n\nTITLE: Lazy Dependency Module\nDESCRIPTION: A Go module file for the 'lazy' dependency which requires another module 'pruned' that will be used in testing dependency pruning behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_deleted.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/lazy\n\ngo 1.17\n\nrequire example.net/pruned v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Main Test Program in Go\nDESCRIPTION: A minimal Go program used as the primary test subject for PGO builds. This trivial program does nothing but serves as the target for the various build commands.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Verifying Package Path with go list\nDESCRIPTION: Runs 'go list' without flags to verify the package path is correctly identified as 'example.com' despite the invalid GOPATH.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_init_empty.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo list\nstdout '^example.com$'\n```\n\n----------------------------------------\n\nTITLE: Example Package With Imports\nDESCRIPTION: The main package that imports example.net/a and example.net/b, triggering the toolchain switching during dependency resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_toolchain.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage example\n\nimport (\n\t_ \"example.net/a\"\n\t_ \"example.net/b\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Bar Package in Go\nDESCRIPTION: A Go file defining the 'bar' package. This file is used as part of the test cases for the 'go list' command to verify correct package identification.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_ambiguous_path.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage bar\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Dependency\nDESCRIPTION: This go.mod file for example.net/b v0.2.0 includes a dependency on example.net/c v0.1.0, demonstrating module versioning and dependency declaration.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_extra.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/b\n\ngo 1.15\n\nrequire example.net/c v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Testing 'go list' with '...' pattern for symlink warnings\nDESCRIPTION: This snippet demonstrates that using 'go list' with a pattern containing '...' will show symlink warnings.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_symlink_issue35941.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngo list goproj/...\nstderr 'warning: ignoring symlink'\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: This snippet defines a Go module named 'p'. It's a minimal go.mod file that specifies the module name without any dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_prints.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule p\n```\n\n----------------------------------------\n\nTITLE: Unformatted Go Module with Exclude Block\nDESCRIPTION: Initial unformatted go.mod file with poorly formatted exclude block containing version exclusions for x.1 module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_exclude_go121.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule     x.x/y/z\nexclude  (\n\tx.1   v1.11.0\n\tx.1    v1.10.0\n\tx.1     v1.9.0\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Git repository for testing\nDESCRIPTION: Sets up a git repository with author and committer information for test commits.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/get_issue53955.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd $WORK/repo\n\nenv GIT_AUTHOR_NAME='Go Gopher'\nenv GIT_AUTHOR_EMAIL='gopher@golang.org'\nenv GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME\nenv GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL\n\nexec git init\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition with Future Version Requirement\nDESCRIPTION: A go.mod file defining a module named 'rsc.io/future' that requires Go version 1.999, which is a future version that doesn't exist yet.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_future_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule rsc.io/future\ngo 1.999\n```\n\n----------------------------------------\n\nTITLE: Defining Go Toolchain Module Information in JSON\nDESCRIPTION: JSON configuration file that specifies the version information for the Go toolchain. It defines a test module version labeled 'v0.0.1-go1.999testmod.linux-386'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-386.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.999testmod.linux-386\"}\n```\n\n----------------------------------------\n\nTITLE: Invalid Go Debug Directive Example in Go\nDESCRIPTION: A minimal Go program demonstrating an error case with an invalid //go:debug directive. The directive 'x=y' is not recognized by the Go compiler, causing a build error.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/godebug_unknown.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n//go:debug x=y\npackage main\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Adding Toolchain in Newer Go Version\nDESCRIPTION: This snippet demonstrates adding a specific toolchain version when using a newer Go version. It shows how to verify the changes in the go.mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_toolchain.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nenv TESTGO_VERSION=go1.30\ngo get toolchain@1.22.3\n```\n\n----------------------------------------\n\nTITLE: Building Tests with FIPS 140 in Go\nDESCRIPTION: Checks that building tests with FIPS 140 enabled uses the correct packages and caches the build appropriately.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/fipssnap.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo test -x -c\nstderr link.*-fipso\ngo test -x -c\n! stderr link\n```\n\n----------------------------------------\n\nTITLE: Setting Go Environment Variables for Module Testing\nDESCRIPTION: Sets environment variables to enable Go modules, use direct proxy, and disable sum database for testing purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo_other_branch.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GO111MODULE=on\nenv GOPROXY=direct\nenv GOSUMDB=off\n```\n\n----------------------------------------\n\nTITLE: Package B with Dot Import from Package A\nDESCRIPTION: Defines package 'b' which imports package 'a' using a dot import, allowing direct access to functions from package 'a' without qualification.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_dot_import.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage b\n\nimport . \"coverdot/a\"\n\nfunc G() { F() }\n```\n\n----------------------------------------\n\nTITLE: Simple Benchmark Function in Go\nDESCRIPTION: This Go file defines a simple benchmark function in a standalone package. It's designed to be run outside the standard GOPATH to test benchmark functionality.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_benchmark_labels.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage standalone_benchmark\n\nimport \"testing\"\n\nfunc Benchmark(b *testing.B) {\n}\n```\n\n----------------------------------------\n\nTITLE: Empty Assembly Implementation\nDESCRIPTION: Empty assembly file that could potentially contain implementations of the undefined Go functions\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/link_external_undef.txt#2025-04-22_snippet_2\n\nLANGUAGE: assembly\nCODE:\n```\n// Add an assembly function so as to leave open the possibility\n// that body-less functions in Go might be defined in assembly.\n\n// Currently we just need an empty file here.\n```\n\n----------------------------------------\n\nTITLE: Formatting Text in HTML\nDESCRIPTION: This snippet demonstrates the HTML representation of the text, including italic tags and anchor tags for hyperlinks.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/words.txt#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<p>This is an <i>italicword</i> and a <a href=\"https://example.com/linkedword\"><i>linkedword</i></a> and Unicöde.\n```\n\n----------------------------------------\n\nTITLE: Comment List Formatting - Gofmt Style\nDESCRIPTION: Shows how gofmt reformats the same comment, standardizing the indentation to single spaces and maintaining the list structure.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list10.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n 1. This list\n 2. Starts the comment\n 3. And also has a blank line before it.\n\nAll of which is a little weird.\n```\n\n----------------------------------------\n\nTITLE: Function Implementation for Package 'b' in Go\nDESCRIPTION: Defines package 'b' with an init function that prints a message and a function BFunc that returns -42.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_multipkg.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage b\n\nfunc init() {\n\tprintln(\"package 'b' init: release the kraken\")\n}\n\nfunc BFunc() int {\n\treturn -42\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal Go program for testing module path conflict\nDESCRIPTION: A minimal Go program that serves as the test subject for the module path conflict test. It contains only the required elements to be a valid Go program without additional functionality.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_run_path.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Fuzz Test Worker Detection Function\nDESCRIPTION: Helper function to determine if the current process is running as a fuzz worker by checking test flags\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_fail.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc isWorker() bool {\n\tf := flag.Lookup(\"test.fuzzworker\")\n\tif f == nil {\n\t\treturn false\n\t}\n\tget, ok := f.Value.(flag.Getter)\n\tif !ok {\n\t\treturn false\n\t}\n\treturn get.Get() == interface{}(true)\n}\n```\n\n----------------------------------------\n\nTITLE: Go Package Import Example\nDESCRIPTION: Demonstrates importing packages that are affected by the replace directive and version constraints in the module definition.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_replace_old.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage m\n\nimport (\n\t_ \"example.com/missingpkg/deprecated\"\n\t_ \"example.com/usemissingpre\"\n)\n```\n\n----------------------------------------\n\nTITLE: Minimal Go Source File for Build Test\nDESCRIPTION: A minimal Go source file used as the test subject for the language version flag test. This file simply declares a main package without any actual implementation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_vers.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n```\n\n----------------------------------------\n\nTITLE: Module Definitions for Test Dependencies\nDESCRIPTION: A series of go.mod files for the test dependencies with different Go version requirements, used to test the toolchain switching mechanism.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_toolchain.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// a1/go.mod\nmodule example.net/a\n\ngo 1.20\n```\n\nLANGUAGE: go\nCODE:\n```\n// a2/go.mod\nmodule example.net/a\n\ngo 1.22.0\n\ntoolchain go1.23.0\n```\n\nLANGUAGE: go\nCODE:\n```\n// b1/go.mod\nmodule example.net/b\n\ngo 1.22.0\n\ntoolchain go1.23.0\n```\n\nLANGUAGE: go\nCODE:\n```\n// c1/go.mod\nmodule example.net/c\n\ngo 1.22.0\n\nrequire example.net/d v0.1.0\n```\n\nLANGUAGE: go\nCODE:\n```\n// d1/go.mod\nmodule example.net/d\n\ngo 1.22.0\n```\n\nLANGUAGE: go\nCODE:\n```\n// d2/go.mod\nmodule example.net/d\n\ngo 1.23.0\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Go Build Test\nDESCRIPTION: Sets GOFLAGS to use -trimpath and defines a custom GOCACHE directory for the test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_trimpath_issue48557.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GOFLAGS=-trimpath\nenv GOCACHE=$WORK/gocache\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Rune Handling Function\nDESCRIPTION: Adds AppendRune function to the unicode/utf8 package for appending a Unicode code point to a byte slice.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.18.txt#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nfunc AppendRune([]uint8, int32) []uint8\n```\n\n----------------------------------------\n\nTITLE: V Package in Root Vendor\nDESCRIPTION: Package defining Hello constant used in the main package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_complex.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage v\n\nconst Hello = \"hello\"\n```\n\n----------------------------------------\n\nTITLE: Go File with Standard Library Import\nDESCRIPTION: A simple Go program that imports the fmt package and prints \"hello, world.\"\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_outside_module.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(\"hello, world.\")\n}\n```\n\n----------------------------------------\n\nTITLE: Vendored Strings Package Definition\nDESCRIPTION: A simple Go package that defines a Msg variable with the 'hello, world' string, used as a vendored dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_vendor.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage strings\n\nvar Msg = \"hello, world\"\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Limit Constants (RLIMIT_*) in Go for darwin-arm64\nDESCRIPTION: Constants for resource limit types used with getrlimit(2) and setrlimit(2) system calls. These constants identify which resource limit is being queried or modified, such as CPU time, file size, or number of open files.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_90\n\nLANGUAGE: Go\nCODE:\n```\nconst RLIMIT_AS = 5\nconst RLIMIT_AS ideal-int\nconst RLIMIT_CORE = 4\nconst RLIMIT_CORE ideal-int\nconst RLIMIT_CPU = 0\nconst RLIMIT_CPU ideal-int\nconst RLIMIT_CPU_USAGE_MONITOR = 2\nconst RLIMIT_CPU_USAGE_MONITOR ideal-int\nconst RLIMIT_DATA = 2\nconst RLIMIT_DATA ideal-int\nconst RLIMIT_FSIZE = 1\nconst RLIMIT_FSIZE ideal-int\nconst RLIMIT_NOFILE = 8\nconst RLIMIT_NOFILE ideal-int\nconst RLIMIT_STACK = 3\nconst RLIMIT_STACK ideal-int\nconst RLIM_INFINITY = 9223372036854775807\nconst RLIM_INFINITY ideal-int\n```\n\n----------------------------------------\n\nTITLE: Direct Package with Missing Import\nDESCRIPTION: Go package that directly imports a non-existent package to test dependency error handling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_bad_import.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage direct\nimport _ \"example.com/notfound\"\n```\n\n----------------------------------------\n\nTITLE: Testing Multiple Input Types in Go Fuzz Tests\nDESCRIPTION: This fuzz test function demonstrates how Go's fuzzing handles multiple input types. It panics when both byte slices have non-zero length.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_crash.txt#2025-04-22_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\nfunc FuzzWithTwoTypes(f *testing.F) {\n\tf.Fuzz(func(t *testing.T, a, b []byte) {\n\t\tif len(a) > 0 && len(b) > 0 {\n\t\t\tpanic(\"these inputs caused a crash!\")\n\t\t}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: NetBSD ARM64 Directory Entry Structure Definition in Go\nDESCRIPTION: Defines the Dirent structure representing directory entries in the filesystem. Contains fields for file number, name, name length, record length, and file type.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_89\n\nLANGUAGE: go\nCODE:\n```\ntype Dirent struct {\n\tFileno uint64\n\tReclen uint16\n\tType uint8\n\tNamelen uint16\n\tPad_cgo_0 [3]uint8\n\tName [512]int8\n}\n```\n\n----------------------------------------\n\nTITLE: Expected Mercurial Log Output\nDESCRIPTION: The expected output from the hg log command, showing the commit hash and message for verification purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/hg/hello.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ne483a7d9f8c9 hello world\n```\n\n----------------------------------------\n\nTITLE: External Test File with Vendor Imports\nDESCRIPTION: Defines an external test file that imports vendored packages p and p1, and includes a no-op test function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_test_issue11864.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage tx_test\n\nimport _ \"vendor.org/p\"\nimport _ \"vendor.org/p1\"\nimport \"testing\"\n\nfunc TestNop(t *testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Main Package Implementation in Go\nDESCRIPTION: Simple main package that imports and calls a function from the sub package. This is used to test code coverage functionality.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_build_simple.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"example/sub\"\n\nfunc main() {\n\tsub.S()\n}\n```\n\n----------------------------------------\n\nTITLE: Unresolved Package Implementation\nDESCRIPTION: Implementation file for the unresolved package with documentation comment\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_symlink_issue35941.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// Package unresolved exists, but 'go mod tidy' won't add it.\npackage unresolved\n```\n\n----------------------------------------\n\nTITLE: External Go Test Implementation\nDESCRIPTION: External test file that imports and tests the xtestonly package, verifying the F() function returns 42.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_dedup_packages.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage xtestonly_test\n\nimport (\n\t\"testing\"\n\t\"xtestonly\"\n)\n\nfunc TestF(t *testing.T) {\n\tif x := xtestonly.F(); x != 42 {\n\t\tt.Errorf(\"f.F() = %d, want 42\", x)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Method Declarations in Go\nDESCRIPTION: Method declarations for various struct types with different receiver types (pointer and value receivers).\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/api/testdata/src/pkg/p1/golden.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmethod (*B) JustOnB()\nmethod (*B) OnBothTandBPtr()\nmethod (*T) JustOnT()\nmethod (B) OnBothTandBVal()\nmethod (S) StructValueMethod()\nmethod (S2) StructValueMethodNamedRecv()\n```\n\n----------------------------------------\n\nTITLE: Test Module Definition in go.mod\nDESCRIPTION: A simple Go module definition file used for the test. It defines the module with a name that matches the issue being tested.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_cache_rw.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule golang.org/issue/31481\n```\n\n----------------------------------------\n\nTITLE: Secondary Go Module Definition with Dependencies\nDESCRIPTION: Alternative go.mod file with explicit quoted requirements for rsc.io/sampler and rsc.io/quote packages\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_quote.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule x\nrequire (\n\t\"rsc.io/sampler\" v1.3.0\n\t\"rsc.io/quote\" v1.5.2\n)\n```\n\n----------------------------------------\n\nTITLE: Invalid Go Build Command Example\nDESCRIPTION: Shows the error message when attempting to use an invalid value (-1) for the -p flag in go build command. The -p flag must be a positive integer.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_negative_p.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n! go build -p=-1 example.go\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines a simple Go module named 'example.com' with Go 1.14 as the target version. This module serves as the base for the import resolution tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goroot_errors.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com\ngo 1.14\n```\n\n----------------------------------------\n\nTITLE: Nested module definition\nDESCRIPTION: Module definition for 'example.com/m/nested', which has a path that appears to be inside the main module but is actually a separate module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_patterns.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/m/nested\n```\n\n----------------------------------------\n\nTITLE: Module Definition for Broken Package\nDESCRIPTION: This defines a Go module named 'broken' which will be used to demonstrate improper use of standard library vendored packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/std_vendor.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nmodule broken\n```\n\n----------------------------------------\n\nTITLE: Testing Go Version Command with GOROOT Binary\nDESCRIPTION: Builds a binary from GOROOT/src/cmd and checks its version information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version.txt#2025-04-22_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ngo build -o test2json.exe cmd/test2json\ngo version -m test2json.exe\nstdout -buildmode=exe\nstdout '^test2json.exe: .+'\nstdout '^\\tpath\\tcmd/test2json$'\n! stdout 'mod[^e]'\n```\n\n----------------------------------------\n\nTITLE: Testing version resolution for v1.0.0\nDESCRIPTION: Fetches v1.0.0 using a commit hash and verifies the version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo.txt#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ngo get ...test@7fff7f3\ngo list -m all\nstdout '^github.com/rsc/legacytest v1\\.0\\.0$'\n```\n\n----------------------------------------\n\nTITLE: Installing Go Program Outside GOPATH With GOBIN\nDESCRIPTION: Test case to verify that installing a program outside GOPATH with GOBIN set succeeds and installs to GOBIN.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_install.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nenv GOBIN=$WORK/bin1\ngo install go-cmd-test/helloworld.go\nexists $GOBIN/helloworld$GOEXE\n```\n\n----------------------------------------\n\nTITLE: Subdirectory V2 Module Declaration\nDESCRIPTION: This go.mod snippet in a subdirectory declares a package for rsc.io/quote/v2. It sets up a separate module space, demonstrating Go's module system flexibility.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_multirepo.txt#2025-04-22_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\npackage rsc.io/quote/v2\n```\n\n----------------------------------------\n\nTITLE: Go File with Tag1 Build Constraint\nDESCRIPTION: A Go file (x.go) that uses the 'tag1' build constraint. This file will only be included in the build when 'tag1' is specified.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_tags.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n// +build tag1\n\npackage y\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition for Plugin Test\nDESCRIPTION: A simple Go module definition used in the plugin buildmode test. It defines a module named 'testdep' with Go 1.16 as the required version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_plugin_non_main.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule testdep\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: External Test for Package with Test Suffix in Module Name\nDESCRIPTION: A test file for the e_test package using the external test pattern, resulting in a e_test_test package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test.txt#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\npackage e_test_test\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition with Non-existent Dependency\nDESCRIPTION: A Go module definition file that requires a non-existent GitHub package, used to test error handling in module downloads.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_issue51114.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule test\n\ngo 1.18\n\nrequire github.com/golang/notexist/subdir v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Implementing Minimal Go Program for gccgo Test\nDESCRIPTION: This snippet contains a minimal Go program (main.go) used to test compilation with both default Go compiler and gccgo.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gccgo_m.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage main\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Defining Package 'p' in Module 'm'\nDESCRIPTION: This snippet defines package 'p' within module 'm', demonstrating that 'p' exists in 'm' but not in 'm/p'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_ambiguous_arg.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Package p is present in module m, but not module m/p.\npackage p\n```\n\n----------------------------------------\n\nTITLE: Importing Vendored Package in Go\nDESCRIPTION: This Go file defines package 'a' and imports the 'foo.com/internal/bar/b' package using a blank import for side effects.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_internal.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage a\nimport _ \"foo.com/internal/bar/b\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Module in go.mod\nDESCRIPTION: The go.mod file that defines the module name as \"rsc.io/quote\" and specifies a dependency on \"rsc.io/sampler\" version 1.3.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.5.3-pre1.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule \"rsc.io/quote\"\n\nrequire \"rsc.io/sampler\" v1.3.0\n```\n\n----------------------------------------\n\nTITLE: Setting up Go environment and symlink for testing\nDESCRIPTION: This snippet sets up the Go environment by disabling Go modules and creates a symlink for testing purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_symlink_issue35941.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GO111MODULE=off\n\n# Issue 35941: suppress symlink warnings when running 'go list all'.\nsymlink goproj/css -> $GOPATH/src/css\n```\n\n----------------------------------------\n\nTITLE: Minimal Go Test File\nDESCRIPTION: A minimal Go test file containing an empty test function. Used to verify the basic functionality of go test -n command without any actual test logic.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_minus_n.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage x_test\n\nimport (\n\t\"testing\"\n)\n\nfunc TestEmpty(t *testing.T) {\n}\n```\n\n----------------------------------------\n\nTITLE: README Information\nDESCRIPTION: This snippet contains the contents of a README.txt file, indicating that there is no go.work file in the current directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_nowork.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nThere is no go.work file here.\n```\n\n----------------------------------------\n\nTITLE: Emitting Experimental Events in Go Runtime\nDESCRIPTION: Example of defining helper methods on runtime.traceEventWriter for emitting experimental events in Go.\nSOURCE: https://github.com/golang/go/blob/master/src/internal/trace/tracev2/EXPERIMENTS.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (w *traceEventWriter) EmitExperimentalEvent1(arg1, arg2 uint64) {\n    w.emit(EventExperimentalType1, arg1, arg2)\n}\n\nfunc (w *traceEventWriter) EmitExperimentalEvent2(arg1 string) {\n    w.emit(EventExperimentalType2, w.string(arg1))\n}\n```\n\n----------------------------------------\n\nTITLE: Importing rsc.io/quote Package\nDESCRIPTION: This Go file imports the 'rsc.io/quote' package as a blank import, which is likely used for testing purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_file_proxy.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage x\nimport _ \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: Triggering a nil panic in Go\nDESCRIPTION: A minimal Go program that demonstrates how to trigger a panic with nil as the argument. This showcases Go's panic mechanism with an explicit nil value.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_panicnil_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {\n\tpanic(nil)\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines the main module and its dependencies, including replacements for local development.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version_missing.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/m\n\nrequire example.com/dep v0.1.0\n\nreplace (\n\texample.com/dep v0.1.0 => ./dep\n\texample.com/testdep v0.1.0 => ./testdep\n)\n```\n\n----------------------------------------\n\nTITLE: Testing x86 and WebAssembly Features\nDESCRIPTION: Verifies x86 (386) architecture with SSE2 support and WebAssembly with satconv feature.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/tooltags.txt#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nenv GOARCH=386\nenv GO386=sse2\ngo list -f '{{context.ToolTags}}'\n\nenv GOARCH=wasm\nenv GOWASM=satconv\ngo list -f '{{context.ToolTags}}'\n```\n\n----------------------------------------\n\nTITLE: Module A Configuration\nDESCRIPTION: The go.mod file for module 'example.com/a' that requires and provides a local replacement for module 'example.com/b'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_modules_txt_conditional.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/a\n\ngo 1.21\n\nrequire example.com/b v0.0.0\nreplace example.com/b => ./b\n```\n\n----------------------------------------\n\nTITLE: Right Module Definition and Implementation\nDESCRIPTION: Right module files including go.mod and conditional import implementations based on the mirror build tag.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tagged_import_cycle.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/right\n\ngo 1.14\n\nrequire example.com/left v0.1.0\n\nreplace example.com/left v0.1.0 => ../left\n```\n\nLANGUAGE: go\nCODE:\n```\n// +build !mirror\n\npackage right\n```\n\nLANGUAGE: go\nCODE:\n```\n// +build mirror\n\npackage right\n\nimport _ \"example.com/left\"\n```\n\n----------------------------------------\n\nTITLE: Go Command Shell Script\nDESCRIPTION: A shell script that simulates the 'go' command by echoing a version identifier. This script would be placed in the bin directory of the toolchain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-arm64.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Defining Go Function in Go\nDESCRIPTION: Returns a Go programming language proverb by calling GoV2() from an imported module. This function is part of the quote collection package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709160352-0d003b9c4bfa.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Go returns a Go proverb.\nfunc Go() string {\n\treturn quote.GoV2()\n}\n```\n\n----------------------------------------\n\nTITLE: Subpackage Definition\nDESCRIPTION: An empty Go file that defines a subpackage 'a', used for testing directory structure handling within the module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_patterns_outside_gopath.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage a\n```\n\n----------------------------------------\n\nTITLE: Go Module File with Go Version and Module Path\nDESCRIPTION: Shows a basic go.mod file with module path and Go version. This is the initialization template produced by 'go mod init'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nmodule x.x/y/z\n\ngo $goversion\n```\n\n----------------------------------------\n\nTITLE: Lazy Module Definition\nDESCRIPTION: Module declaration for the lazy package with dependency requirements and version exclusions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_implicit.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/lazy\n\ngo 1.17\n\nexclude example.com/retract/incompatible v2.0.0+incompatible\n\nrequire (\n\texample.com/retract/incompatible v1.0.0\n\texample.net/requireincompatible v0.1.0\n)\n```\n\n----------------------------------------\n\nTITLE: Go File with Build Constraint and Vet Error\nDESCRIPTION: This Go file includes a build constraint and a formatting error in Printf, used to test vet's behavior with build constraints.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_vet.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// +build !foo-bar\n\npackage p1\n\nimport \"fmt\"\n\nfunc F() {\n\tfmt.Printf(\"%d\", \"hello\") // causes vet error\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Go module\nDESCRIPTION: This snippet shows the go.mod file content, defining the module 'm' and specifying Go version 1.16.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nmodule m\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Package Implementations for Test Dependencies\nDESCRIPTION: The Go package implementations for the test dependencies with imports that form a dependency chain, triggering toolchain switching at different points.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_toolchain.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// a1/a.go\npackage a\n```\n\nLANGUAGE: go\nCODE:\n```\n// a2/a.go\npackage a\n```\n\nLANGUAGE: go\nCODE:\n```\n// b1/b.go\npackage b\n\nimport _ \"example.net/c\"  // Note: module b is intentionally untidy, as if due to a bad git merge\n```\n\nLANGUAGE: go\nCODE:\n```\n// c1/c.go\npackage c\n\nimport _ \"example.net/d\"\n```\n\nLANGUAGE: go\nCODE:\n```\n// d1/d.go\npackage d\n```\n\nLANGUAGE: go\nCODE:\n```\n// d2/d.go\npackage d\n```\n\n----------------------------------------\n\nTITLE: Expected Git log output\nDESCRIPTION: Expected output from the git log command, showing the commit history with decorations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/issue47650.txt#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n21535ef (HEAD -> main) add go.mod\n4d237df (tag: v0.1.0) add cmd/issue47650\n```\n\n----------------------------------------\n\nTITLE: Main Program with Invalid Import\nDESCRIPTION: Go program attempting to import an invalid module path while maintaining valid Go syntax. Uses a blank import to prevent unused import errors.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_v1suffix.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\nimport _ \"example.com/invalidpath/v1\"\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Go Main Package with Import\nDESCRIPTION: Basic Go file that imports the patch.example.com/direct package as a blank import, used for testing module resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_upgrade_patch.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage x\nimport _ \"patch.example.com/direct\"\n```\n\n----------------------------------------\n\nTITLE: Text and Code Block Formatting in Go\nDESCRIPTION: Example showing a simple code block embedded within text content, followed by tight and loose list formatting examples with various indentation levels.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/text.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nCode block here.\n```\n\n----------------------------------------\n\nTITLE: Defining Package in y.go File\nDESCRIPTION: Declares a Go package named 'y' within the module. This establishes a package that consumers of the module can import.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_nest_sub_v1.0.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage y\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Go Binary Script\nDESCRIPTION: Shell script that simulates the 'go' command for testing purposes, which outputs a test version identifier.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-ppc64.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Running Go Module Commands\nDESCRIPTION: Commands to run a Go application from different contexts, showing module-based execution and direct directory execution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_hello_pkg.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo run m/hello\nstderr 'hello, world'\n\ncd hello\ngo run .\nstderr 'hello, world'\n```\n\n----------------------------------------\n\nTITLE: Go Module with Unspecified Version\nDESCRIPTION: Defines a Go module without version specification in go.mod, including the same foo package structure and external dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_buildmod_reason_issue67587.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage foo\n\nimport _ \"github.com/foo/bar\"\n```\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com\n```\n\nLANGUAGE: go\nCODE:\n```\npackage bar\n```\n\n----------------------------------------\n\nTITLE: Windows Network Error Constants\nDESCRIPTION: Network-related error constants and socket options for Windows platforms (386 and AMD64).\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_62\n\nLANGUAGE: Go\nCODE:\n```\nconst (\n    ERROR_MORE_DATA = 234\n    ERROR_NETNAME_DELETED = 64\n    IOC_VENDOR = 402653184\n    SIO_KEEPALIVE_VALS = 2550136836\n    WSAECONNRESET = 10054\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module\nDESCRIPTION: This go.mod file defines the module 'm' and specifies Go version 1.16 as the minimum required version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_n_cgo.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule m\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Package D Implementation\nDESCRIPTION: Basic implementation of package d, which has no further dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_version.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage d\n```\n\n----------------------------------------\n\nTITLE: Module B Configuration\nDESCRIPTION: Go module configuration for package b including its dependency on outer package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_issue60313.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/b\n\ngo 1.21\n\nrequire example.net/outer v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Defining the Go Module (Go)\nDESCRIPTION: This `go.mod` file defines a Go module named 'simple' and specifies the Go language version 1.21. It serves as the root declaration for the Go project, enabling dependency management and proper build behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_swig.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n-- go.mod --\nmodule simple\n\ngo 1.21\n```\n\n----------------------------------------\n\nTITLE: Version Information in .info File (JSON)\nDESCRIPTION: JSON file containing version information for the module, specifying v1.0.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_indirect_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.0.0\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Package 'a' in Go\nDESCRIPTION: This Go source file defines a minimal package 'a'. It contains no exported identifiers and serves primarily as a node in the dependency graph.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_horizon.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n-- a1/a.go --\npackage a\n```\n\n----------------------------------------\n\nTITLE: Testing Go Version Directive Addition\nDESCRIPTION: Tests that a missing 'go' version directive is added when necessary, without removing other redundant requirements.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retention.txt#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncp go.mod.nogo go.mod\ngo list -mod=mod all\ncmpenv go.mod go.mod.addedgo\n```\n\n----------------------------------------\n\nTITLE: Test file in onlytest package\nDESCRIPTION: This snippet shows a test file in the onlytest package, containing a single empty test function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet.txt#2025-04-22_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\npackage p\n\nimport \"testing\"\n\nfunc TestMe(*testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Basic Command Package A\nDESCRIPTION: Minimal Go command package implementation with empty main function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_cmd_v1.0.0-replace.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Module A v0.2.0 Definition\nDESCRIPTION: Module definition and implementation for example.net/a v0.2.0\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_wild.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/a\n\ngo 1.16\n```\n\nLANGUAGE: go\nCODE:\n```\npackage a\n```\n\n----------------------------------------\n\nTITLE: Declaring a Go Package - Go\nDESCRIPTION: This snippet is a minimal Go source file that declares the package 'x'. It lacks any functions, types, or variables and acts as a placeholder. Required for ensuring that the subdirectory 'sub/x/' is recognized as a valid Go package by tooling and for test coverage of module and package detection. No dependencies, imports, or code logic are present.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_nest_v1.0.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage x\n```\n\n----------------------------------------\n\nTITLE: Go Module Configuration\nDESCRIPTION: Basic go.mod file configuration declaring module name and Go version requirement\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_issue51125.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: HTML Link Rendering\nDESCRIPTION: HTML output format for documentation links\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/link7.txt#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<p><a href=\"https://example.com\">math</a> is a package but this is not a doc link.\n<p><a href=\"/io\">io</a> is a doc link.\n```\n\n----------------------------------------\n\nTITLE: Testing Dry Run Clean with -n Flag\nDESCRIPTION: Tests the 'go clean -modcache -n' command which should print but not execute the clean operation. Verifies that module files still exist after the command.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_clean_cache.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo clean -modcache -n\nstdout '^rm -rf .*pkg.mod$'\nexists $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.0.info\nexists $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.0.mod\nexists $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.5.0.zip\n```\n\n----------------------------------------\n\nTITLE: Running Specific Go Tests with Pattern Matching\nDESCRIPTION: Shell commands to run Go tests matching 'Test' pattern and verify expected stdout/stderr outputs. Ensures tests run successfully without 'no tests to run' messages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_only_tests.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo test -run Test standalone_test.go\n! stdout '^ok.*\\[no tests to run\\]'\n! stderr '^ok.*\\[no tests to run\\]'\nstdout '^ok'\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module definition file specifying the module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_json.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule m\ngo 1.21\n```\n\n----------------------------------------\n\nTITLE: Empty Go Package for Plugin Test\nDESCRIPTION: A minimal Go package file that doesn't contain a main function. This is used to test the requirement that plugin buildmode needs a main package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_plugin_non_main.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage p\n```\n\n----------------------------------------\n\nTITLE: Expected go.mod with Valid Retraction\nDESCRIPTION: Reference go.mod file showing correct structure with module declaration and proper version retraction\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_fix_version.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngo 1.16\n\nretract v2.0.1\n\nmodule rsc.io/quote/v2\n```\n\n----------------------------------------\n\nTITLE: Go Test Implementation with Subtests\nDESCRIPTION: Go test file implementing a chatty test with multiple subtests. Each subtest runs in a loop and logs messages multiple times to generate verbose output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_chatty_success.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage chatty_test\n\nimport (\n\t\"testing\"\n\t\"fmt\"\n)\n\nfunc TestChatty(t *testing.T) {\n    for i := 0; i < 3; i++ {\n        t.Run(fmt.Sprintf(\"sub-%d\", i), func(t *testing.T) {\n            for j := 0; j < 2; j++ {\n                t.Logf(\"this is sub-%d\", i)\n            }\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Module 'b' with Dependency on 'c v0.2.0'\nDESCRIPTION: This go.mod file defines module 'b'. It requires module 'c' at version v0.2.0. This requirement is part of the dependency chain initiated by the test file `a1/a_test.go`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_horizon.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n-- b1/go.mod --\nmodule b\n\ngo 1.17\n\nrequire c v0.2.0\n```\n\n----------------------------------------\n\nTITLE: Main Module Source File with Import\nDESCRIPTION: The main package file that imports the module 'example.com/a', which triggers the dependency chain for testing replacement directives.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_unused.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage foo\nimport _ \"example.com/a\"\n```\n\n----------------------------------------\n\nTITLE: Explaining Package Migration in Documentation - Golang - plaintext\nDESCRIPTION: This snippet is a plaintext (comment) README that documents the migration of a Go package (pkg) from the top-level module to a nested module at the same version. No code is present, but it provides important historical context for maintainers and users. The documentation clarifies package location and helps avoid ambiguity when resolving dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_ambiguous_v0.2.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n// Package pkg no longer exists in this module at v0.2.0.\n// Find it in module example.net/ambiguous/nested instead.\n```\n\n----------------------------------------\n\nTITLE: Defining Empty Go Package\nDESCRIPTION: This Go code snippet defines an empty package named 'p'. It serves as a placeholder for package content in the module structure.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_race_install.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage p\n```\n\n----------------------------------------\n\nTITLE: Main Package with Import\nDESCRIPTION: This snippet defines the main package file (main.go) which imports the 'bad' package. It's used to test the propagation of import errors.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_info_err.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport _ \"m/bad\"\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Package Declaration\nDESCRIPTION: Go package declaration for the newergoversion module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_newergoversion_v1.2.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage newergoversion\n```\n\n----------------------------------------\n\nTITLE: Importing Non-existent Package\nDESCRIPTION: This Go file imports a non-existent package 'nonexistent.rsc.io' to test error handling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_bad_domain.txt#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\npackage usenonexistent\nimport _ \"nonexistent.rsc.io\" // domain does not exist\n```\n\n----------------------------------------\n\nTITLE: foo directory\nDESCRIPTION: An empty directory named foo, used for testing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_only_dirs.txt#_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\n-- foo --\n```\n\n----------------------------------------\n\nTITLE: Defining use.go file content\nDESCRIPTION: Contains a Go package that imports rsc.io/quote.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/modfile_flag.txt#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport _ \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Verbose Help in Go CLI\nDESCRIPTION: This command displays verbose help information for the Go project's command-line interface. The '-v' flag is used to request more detailed output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/script_help.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelp -v\n```\n\n----------------------------------------\n\nTITLE: Package Import Resolution Test - Main Package\nDESCRIPTION: Defines a package that imports golang.org/x/net/http2/hpack to test vendoring behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_std_vendor.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage vendoring17\n\nimport _ \"golang.org/x/net/http2/hpack\"\n```\n\n----------------------------------------\n\nTITLE: Original Go Module Definition\nDESCRIPTION: Base go.mod file defining direct dependencies and module replacements\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_promote_implicit.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.16\n\nrequire direct v1.0.0\n\nreplace (\n\tdirect v1.0.0 => ./direct\n\tindirect-with-pkg v1.0.0 => ./indirect-with-pkg\n\tindirect-without-pkg v1.0.0 => ./indirect-without-pkg\n)\n```\n\n----------------------------------------\n\nTITLE: Module Definition for CGO Long Command Test\nDESCRIPTION: The go.mod file defining the module for the CGO long command line test, specifying the module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_long_cmd.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule cgolongcmd\n\ngo 1.22\n```\n\n----------------------------------------\n\nTITLE: Main Entry Point for Hello World Program in Go\nDESCRIPTION: The Go snippet defines the main entry point of a program that prints 'hello'. It showcases a simple program that integrates with CGO, indicating a basic understanding of CGO usage in a Go application. The code requires a Go runtime for execution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_dash_x.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"C\"\n\nfunc main() {\n\tprint(\"hello\\n\")\n}\n\n```\n\n----------------------------------------\n\nTITLE: Module Definition and Configuration\nDESCRIPTION: Defines the Go module 'example' and specifies the Go version as 1.20. There are no external dependencies or specific configurations beyond the module name and Go version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_var_init_order.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule example\n\ngo 1.20\n\n```\n\n----------------------------------------\n\nTITLE: Test Function for Package B\nDESCRIPTION: Defines a test for package 'b' that calls the G() function, which in turn calls the F() function from package 'a'. This will be used to verify coverage reporting.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_dot_import.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage b\n\nimport \"testing\"\n\nfunc TestG(t *testing.T) {\n\tG()\n}\n```\n\n----------------------------------------\n\nTITLE: Vendor Replacement Internal Package Source File\nDESCRIPTION: Defines a placeholder source file for the `subtle` package within the vendor-style replacement `golang.org/x/internal` module. Similar to the other replacement, it's a minimal package for testing purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_21\n\nLANGUAGE: go\nCODE:\n```\n-- vendor/golang.org/x/internal/subtle/subtle.go --\npackage subtle\n// Ha ha! Nothing here!\n```\n\n----------------------------------------\n\nTITLE: Example Main Package for Coverage Testing\nDESCRIPTION: A simple Go program that imports the fmt package and prints a message. Used to test coverage instrumentation on command-line specified files.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_build_cmdline_pkgs.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n  fmt.Println(\"Hi dad\")\n}\n```\n\n----------------------------------------\n\nTITLE: Go Workspace Configuration\nDESCRIPTION: Defines a Go workspace configuration file that specifies Go version 1.21 and includes four modules (a, b, c, d) in the workspace.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_issue54372.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo 1.21\n\nuse (\n    ./a\n    ./b\n    ./c\n    ./d\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Go Commands within Symlinked Newline Paths in Shell\nDESCRIPTION: Changes the current working directory to the symbolic link (`cd $WORK/link`). It then tests `go run` and `go test`. First, it verifies that attempting to run/test using the absolute path to the original directory with the newline (`$DIR${/}main.go`) still fails (`!`). Then, it runs/tests using relative paths (`.`, `main.go`) within the symlinked directory, expecting these to succeed (checking for `ok` output).\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cwd_newline.txt#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd $WORK/link\n\n[cgo] ! go run $DIR${/}main.go\n[!cgo] ! go run $DIR${/}main_nocgo.go\nstderr 'package command-line-arguments: invalid package directory .*uh-oh'\n\ngo run .\n! stdout panic\n! stderr panic\nstderr '^ok$'\n\n[cgo] go run main.go\n[!cgo] go run main_nocgo.go\n! stdout panic\n! stderr panic\nstderr '^ok$'\n\ngo test -v\n! stdout panic\n! stderr panic\nstdout '^ok$'  # 'go test' combines the test's stdout into stderr\n\ngo test -v .\n! stdout panic\n! stderr panic\nstdout '^ok$'  # 'go test' combines the test's stdout into stderr\n```\n\n----------------------------------------\n\nTITLE: Testing Quote Functions in Go\nDESCRIPTION: Test suite for the quote package functions. Each test verifies that the corresponding function returns the expected string. The tests cover Hello(), Glass(), and Go() functions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180214005133-e7a685a342c0.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n// Copyright 2018 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\npackage quote\n\nimport \"testing\"\n\nfunc TestHello(t *testing.T) {\n\thello := \"Hello, world.\"\n\tif out := Hello(); out != hello {\n\t\tt.Errorf(\"Hello() = %q, want %q\", out, hello)\n\t}\n}\n\nfunc TestGlass(t *testing.T) {\n\tglass := \"I can eat glass and it doesn't hurt me.\"\n\tif out := Glass(); out != glass {\n\t\tt.Errorf(\"Glass() = %q, want %q\", out, glass)\n\t}\n}\n\nfunc TestGo(t *testing.T) {\n\tgo1 := \"Don't communicate by sharing memory. Share memory by communicating.\"\n\tif out := Go(); out != go1 {\n\t\tt.Errorf(\"Go() = %q, want %q\", out, go1)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Go module environment\nDESCRIPTION: Sets the GO111MODULE environment variable to 'on' and changes the working directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_empty_err.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\ncd $WORK\n```\n\n----------------------------------------\n\nTITLE: Module 'i' Definition\nDESCRIPTION: The go.mod file for module 'i' that simply defines the module name and Go version. This module is required by x v0.1.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_tidy.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nmodule i\ngo 1.13\n```\n\n----------------------------------------\n\nTITLE: Plain Text Output\nDESCRIPTION: Shows the rendered plain text version with links transformed into regular text.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/link5.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nSee the Go home page and the pkg site.\n\nThey're really great!\n\n[Go home page]: https://go.dev/\n[pkg site]: https://pkg.go.dev\n```\n\n----------------------------------------\n\nTITLE: Toolchain Version JSON Metadata\nDESCRIPTION: JSON metadata containing version information for the Go toolchain. This is stored in a .info file and specifies the exact toolchain version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.18.7.linux-amd64.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.18.7.linux-amd64\"}\n```\n\n----------------------------------------\n\nTITLE: Wrong Import Path\nDESCRIPTION: Go file with mismatched import path comment\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_import_comment.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage x // import \"my/x\"\n```\n\n----------------------------------------\n\nTITLE: Minimal Go Program for Linker Test\nDESCRIPTION: Minimal Go program with empty main function used as test input for the linker crash test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/linkname.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main; func main() {}\n```\n\n----------------------------------------\n\nTITLE: Maintaining Module Boundaries within Standard Module using Shell\nDESCRIPTION: Lists non-vendored packages inside the standard module, enforcing module integrity by excluding vendor-specific packages, which helps align with usual module boundary rules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_std.txt#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngo list ./...\n```\n\n----------------------------------------\n\nTITLE: Testing go mod tidy Behavior\nDESCRIPTION: Executes 'go mod tidy' and checks for expected error messages regarding version incompatibility between Go 1.16 and 1.17.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_incompatible.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncp go.mod go.mod.orig\n! go mod tidy\nstderr '^go: example\\.com/m imports\\n\\texample\\.net/lazy imports\\n\\texample\\.com/retract/incompatible loaded from example\\.com/retract/incompatible@v1\\.0\\.0,\\n\\tbut go 1\\.16 would select v2\\.0\\.0\\+incompatible\\n\\n'\nstderr '\\n\\nTo upgrade to the versions selected by go 1\\.16:\\n\\tgo mod tidy -go=1\\.16 && go mod tidy -go=1\\.17\\nIf reproducibility with go 1\\.16 is not needed:\\n\\tgo mod tidy -compat=1.17\\nFor information about ''go mod tidy'' compatibility, see:\\n\\thttps://go\\.dev/ref/mod#graph-pruning\\n'\n\ncmp go.mod go.mod.orig\n```\n\n----------------------------------------\n\nTITLE: Verifying JSON Output Structure\nDESCRIPTION: Uses grep-like commands to ensure that the output is properly formatted as JSON, checking for the presence of curly braces at the start and end of each line.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_issue35169.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n! stdout '^[^{]'\n! stdout '[^}]\\n$'\n```\n\n----------------------------------------\n\nTITLE: Defining message handling syscall constants for Darwin ARM64 CGO in Go\nDESCRIPTION: This snippet defines constants used for message handling operations in system calls on the Darwin ARM64 CGO platform. It includes flags for controlling message behavior during send and receive operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_160\n\nLANGUAGE: Go\nCODE:\n```\nconst MSG_CTRUNC = 32\nconst MSG_DONTROUTE = 4\nconst MSG_DONTWAIT = 128\nconst MSG_EOF = 256\n```\n\n----------------------------------------\n\nTITLE: Testing First Line Error in go.work File\nDESCRIPTION: Copies a go.work file with an error on the first line and verifies the error message format when running 'go list'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_errors_pos.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp go.work.firstlineerr.txt go.work\n! go list\nstderr '^go.work:1: unknown godebug \"bar\"$'\n```\n\n----------------------------------------\n\nTITLE: Indirect Import Test Package\nDESCRIPTION: Package that imports another package to test indirect import case collision reporting\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_case_collision.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage c\n\nimport _ \"example/b\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Go Module with Metadata - Go\nDESCRIPTION: This snippet defines the module name and target Go version for the package using a go.mod file, which is required for Go module support. The module path is set to 'example.com/stack', and the Go version is specified as 1.14. Dependencies and additional requirements would be listed here, but this module is self-contained.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_stack_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go.mod\nCODE:\n```\nmodule example.com/stack\\n\\ngo 1.14\n```\n\n----------------------------------------\n\nTITLE: String Comparison Utility Function for Fuzzing Tests\nDESCRIPTION: Utility function that compares a string input against a fixed value. This function is used as a target for fuzzing tests to discover interesting inputs based on coverage.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_minimize_interesting.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage fuzz\n\nimport (\n\t\"bytes\"\n\t\"io\"\n)\n\nfunc Y(w io.Writer, s string) {\n\tif !bytes.Equal([]byte(s), []byte(\"y\")) {\n\t\tw.Write([]byte(\"not equal\"))\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition for Coverage Testing\nDESCRIPTION: Defines a Go module named 'coverdot' with Go 1.16 as the target version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_dot_import.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule coverdot\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Enhancing COFF symbol handling in Go's debug/pe package\nDESCRIPTION: Adds new constants and types for handling COFF (Common Object File Format) symbols in the debug/pe package. This includes constants for COMDAT selection and section characteristics, and a new type for auxiliary symbol information.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.19.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nconst (\n    IMAGE_COMDAT_SELECT_NODUPLICATES = 1\n    IMAGE_COMDAT_SELECT_ANY = 2\n    // ... (other IMAGE_COMDAT_SELECT constants)\n)\n\nconst (\n    IMAGE_SCN_CNT_CODE = 32\n    IMAGE_SCN_CNT_INITIALIZED_DATA = 64\n    // ... (other IMAGE_SCN constants)\n)\n\ntype COFFSymbolAuxFormat5 struct {\n    Size uint32\n    NumRelocs uint16\n    NumLineNumbers uint16\n    Checksum uint32\n    SecNum uint16\n    Selection uint8\n}\n\nmethod (*File) COFFSymbolReadSectionDefAux(int) (*COFFSymbolAuxFormat5, error)\n```\n\n----------------------------------------\n\nTITLE: Testing Go Work Vendor Command with Empty Workspace and Invalid Modules File\nDESCRIPTION: A series of shell commands that test the 'go work vendor' command's behavior when no dependencies exist and when an invalid modules.txt file is present. The commands verify error messages and file existence.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_empty.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo work vendor\nstderr 'go: no dependencies to vendor'\n! exists vendor/modules.txt\n! go list .\nstderr 'go: no modules were found in the current workspace'\nmkdir vendor\nmv bad_modules.txt vendor/modules.txt\n! go list .\nstderr 'go: no modules were found in the current workspace'\n```\n\n----------------------------------------\n\nTITLE: Declaring a No-Test Package Function - Go\nDESCRIPTION: This snippet declares a package 'notest' with a single exported function Foo with no implementation. Its purpose is to provide a code package without any test files, which is leveraged in the test-only package to verify if code coverage metrics correctly account for indirect references. No inputs, outputs, or dependencies are present; Foo exists solely for coverage purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_pkgall_imports.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage notest\n\nfunc Foo() {}\n```\n\n----------------------------------------\n\nTITLE: Defining a Go Module with go.mod - Go Mod - Go\nDESCRIPTION: Defines the module path 'example.com/cov' in a go.mod file, which establishes the root for this collection of example Go packages targeting code coverage testing. No dependencies or module versions are specified beyond the root module. This file allows Go to recognize the working directory as a referenceable module for the subsequent test runs.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_pkgall_imports.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go Mod\nCODE:\n```\nmodule example.com/cov\n```\n\n----------------------------------------\n\nTITLE: Declaring a Go Module - Go\nDESCRIPTION: Defines a new Go module named \"example.net/ambiguous/nested\" with a declared Go version of 1.16. This file is essential for module initialization and dependency management. Required for any Go project using modules and consumed by the Go toolchain to resolve import paths.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_ambiguous_nested_v0.1.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/ambiguous/nested\\n\\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Testing Go Vet Behavior with Custom Flags\nDESCRIPTION: Demonstrates the use of 'go vet' with various flags to test analyzer behavior, particularly for standard packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_flags.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo vet -n -buildtags=false runtime\nstderr '-buildtags=false'\n! stderr '-unsafeptr=false'\n\ngo vet -n runtime\nstderr '-unsafeptr=false'\n! stderr '-unreachable=false'\n\ngo vet -n -unsafeptr runtime\nstderr '-unsafeptr'\n! stderr '-unsafeptr=false'\n\ngo test -n runtime\nstderr '-unreachable=false'\n\ngo vet -n -- .\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Proxy with File Cache\nDESCRIPTION: This snippet tests using the download cache as a file proxy for Go modules. It sets up different GOPROXY paths for Windows and non-Windows systems.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_file_proxy.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nenv GOPATH=$WORK/gopath2\n[GOOS:windows] env GOPROXY=file:///C:/nonexist\n[!GOOS:windows] env GOPROXY=file:///nonexist\n! go list\n[GOOS:windows] env GOPROXY=file:///$WORK/gopath1/pkg/mod/cache/download\n[!GOOS:windows] env GOPROXY=file://$WORK/gopath1/pkg/mod/cache/download\ngo list\ngrep v1.5.1 $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/list\n```\n\n----------------------------------------\n\nTITLE: Using Go Module with Dependent Packages\nDESCRIPTION: A simple Go module that imports a package from the example.net/pkgadded/subpkg dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downgrade_missing.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage m\n\nimport _ \"example.net/pkgadded/subpkg\"\n```\n\n----------------------------------------\n\nTITLE: Creating Second Version Tag on Branch\nDESCRIPTION: Switches to branch 'b', adds v0.2.2 file and creates corresponding Git tag.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/tagtests.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout b\ngit add 'v0.2.2'\ngit commit -m 'v0.2.2'\ngit tag 'v0.2.2'\n```\n\n----------------------------------------\n\nTITLE: Main Driver Program with Relative Import\nDESCRIPTION: Example program demonstrating relative import usage that should fail in module mode\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_issue51125.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"./mypkg\"\n\nfunc main() {\n\tmypkg.MyFunc()\n}\n```\n\n----------------------------------------\n\nTITLE: Git Log Output Sample for Go Project\nDESCRIPTION: Sample output of the git log command showing a single commit with a hash, branch information, and commit message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/mainonly.txt#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n8a27e8b (HEAD -> master) add main.go\n```\n\n----------------------------------------\n\nTITLE: Defining Go Test File with External Import\nDESCRIPTION: This snippet demonstrates a Go test file that imports an external package and defines an empty test function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pkgtags.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\npackage testonly_test\n\nimport _ \"example.net/missing\"\n\nfunc Test(t *testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: This is the go.mod file that defines the module 'p'. It's a minimal module definition without any dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_timeout.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule p\n```\n\n----------------------------------------\n\nTITLE: Testing Go Get Command with Non-existent Packages\nDESCRIPTION: This snippet tests the 'go get' command with non-existent packages and verifies that appropriate error messages are displayed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_bad_domain.txt#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngo get ./useappengine  # TODO(#41315): This should fail.\n # stderr '^useappengine[/\\\\]x.go:2:8: cannot find package$'\n\n! go get  ./usenonexistent\nstderr '^go: x/usenonexistent imports\\n\\tnonexistent.rsc.io: cannot find module providing package nonexistent.rsc.io$'\n```\n\n----------------------------------------\n\nTITLE: Main Package Implementation\nDESCRIPTION: The main Go package that imports the example.com/a module. This forms the root of the dependency graph for the application code.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_all.txt#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport _ \"example.com/a\"\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Importing Nested Dependency Package - Go\nDESCRIPTION: This Go source snippet is the package declaration for a file named other.go, which defines the package other and imports a nested package (example.com/retract/ambiguous/nested) using a blank identifier. Importing via blank identifier ensures that the imported package's init functions execute even if its exported names are not directly referenced. This can be used to trigger side effects such as registration or initialization routines.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_ambiguous_other_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage other\n\nimport _ \\\"example.com/retract/ambiguous/nested\\\"\n```\n\n----------------------------------------\n\nTITLE: Module D1 Source File\nDESCRIPTION: Source file for the first replacement of module 'd' that defines package 'd'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_unused.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage d\n```\n\n----------------------------------------\n\nTITLE: Extra Go File\nDESCRIPTION: Empty Go file that's part of the main package, used to test multi-file commits.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_git_missing_tree.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n```\n\n----------------------------------------\n\nTITLE: Conditional Package i Definition\nDESCRIPTION: A Go package with build constraints that is used to test FindOnly mode's ability to locate packages regardless of build errors.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gobuild_import.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// +build i\n\npackage i\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: This snippet defines the Go module 'rsc.io/quote' and specifies its dependency on 'rsc.io/sampler' version 1.3.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709153244-fd906ed3b100.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule \"rsc.io/quote\"\n\nrequire \"rsc.io/sampler\" v1.3.0\n```\n\n----------------------------------------\n\nTITLE: Running Go benchmark with benchtime 1x flag\nDESCRIPTION: Command to run the benchmark with the -benchtime 1x flag, ensuring only one iteration runs.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_benchmark_1x.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo test -run ^$ -bench . -benchtime 1x\n```\n\n----------------------------------------\n\nTITLE: Module Q v1.0.0 Implementation\nDESCRIPTION: Package q implementation version 1.0.0 with PrintVersion function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage q\n\nimport \"fmt\"\n\nfunc PrintVersion() {\n\tfmt.Println(\"version 1.0.0\")\n}\n```\n\n----------------------------------------\n\nTITLE: Running Go Test with JSON Output and Timeout\nDESCRIPTION: This command runs Go tests with JSON output format and a 1ms timeout. It's used to demonstrate test failure due to timeout.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_timeout.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n! go test -json -timeout=1ms\n```\n\n----------------------------------------\n\nTITLE: Copying System Binaries for Go Version Testing\nDESCRIPTION: This snippet copies system binaries (/bin/true for Unix-like systems or help.exe for Windows) to the current directory for testing purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/go_version.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n[exec:/bin/true] cp /bin/true true\n[exec:C:\\windows\\system32\\help.exe] cp C:\\windows\\system32\\help.exe help.exe\n```\n\n----------------------------------------\n\nTITLE: Multi-line Deprecated Module Definition\nDESCRIPTION: Defines a 'multiline' Go module with a multi-line deprecation message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_deprecate_message.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// Deprecated: first line\n// second line.\nmodule multiline\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Function in pkg2 - Go\nDESCRIPTION: This snippet defines package 'pkg2' and provides function F which prints 'pkg2' to standard output. Like pkg1, it imports 'fmt' and contains no input parameters or return values. This file is used to assess testing and coverage when there are no linked tests present.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_statements.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage pkg2\n\nimport \"fmt\"\n\nfunc F() {\n\tfmt.Println(\"pkg2\")\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Stopping Test Execution (Shell Script Syntax)\nDESCRIPTION: This is a conditional command within the test script's syntax. If the race detector is not enabled or available (indicated by the `[!race]` condition evaluated by the test harness), the script execution stops at this point, skipping the subsequent race-specific tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_modes.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n[!race] stop\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Path in go.mod - Go - Text\nDESCRIPTION: Specifies the module path at the root of the domain in a go.mod file. This is essential for Go module management, enabling dependency tracking and versioning. The 'module' directive declares the import path used by consumers, and no additional parameters or dependencies are present in this minimal configuration.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nmodule example.com\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercurial Repo and Checking Version Metadata\nDESCRIPTION: This snippet initializes an empty Mercurial repository and installs a Go binary. It verifies that the version metadata includes the null cset ID (all zeros) and the time is set to the Unix epoch (1/1/70).\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_hg.txt#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nexec hg init\ncd a\ngo install\ngo version -m $GOBIN/a$GOEXE\nstdout '^\\tbuild\\tvcs.revision=0000000000000000000000000000000000000000$'\nstdout '^\\tbuild\\tvcs.time=1970-01-01T00:00:00Z$'\nstdout '^\\tbuild\\tvcs.modified=true$'\nstdout '\\s+mod\\s+example.com/a\\s+\\(devel\\)\\s+'\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Generating Base64 Encoded C Binary\nDESCRIPTION: Shell commands to compile a C program, encode it to base64, and clean up the original binary. This process creates notgo.base64 which is used for testing debug/buildinfo errors.\nSOURCE: https://github.com/golang/go/blob/master/src/debug/buildinfo/testdata/notgo/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cc -o notgo main.c\n$ base64 notgo > notgo.base64\n$ rm notgo\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module in .mod File\nDESCRIPTION: Declares the module name in the .mod file for the Go toolchain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.ios-arm64.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Defining byte manipulation functions in Go\nDESCRIPTION: Function signatures for the bytes package, including ReplaceAll which replaces all occurrences of a byte slice with another byte slice.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.12.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc ReplaceAll([]uint8, []uint8, []uint8) []uint8\n```\n\n----------------------------------------\n\nTITLE: Second Main Package Definition\nDESCRIPTION: Defines another minimal main package with an empty main() function. Used alongside main_one to test multiple main package build rejection.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_exe.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: External Test with Dot Import\nDESCRIPTION: Defines an external test file that uses a dot import to access an internal package's exported variable.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_test_issue11864.txt#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\npackage tx2_test\n\nimport . \"vendor.org/tx2\"\nimport \"testing\"\n\nvar Found = Exported\n\nfunc TestNop(t *testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: External Test in Test-Named Directory\nDESCRIPTION: A test file using the external test pattern for package 'd', resulting in a d_test package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test.txt#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\npackage d_test\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition File\nDESCRIPTION: Defines a Go module with path vcs-test.golang.org/git/empty-v2-without-v1.git/v2 and specifies Go version 1.14 compatibility.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/empty-v2-without-v1.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule vcs-test.golang.org/git/empty-v2-without-v1.git/v2\n\ngo 1.14\n```\n\n----------------------------------------\n\nTITLE: Testing Network Download of Test Toolchain\nDESCRIPTION: Verifies downloading of a test toolchain version from network and subsequent caching behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_net.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n[!exec:/bin/sh] stop 'the fake proxy serves shell scripts instead of binaries'\nenv GOTOOLCHAIN=go1.999testmod\ngo version\nstderr 'go: downloading go1.999testmod \\(.*/.*\\)'\n```\n\n----------------------------------------\n\nTITLE: Configuring Module 'c' (Version 1)\nDESCRIPTION: This go.mod file defines module 'c'. It represents one specific version of the 'c' module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_horizon.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n-- c1/go.mod --\nmodule c\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: Go module definition\nDESCRIPTION: Defines a minimal go.mod file for the test module named 'test' with Go 1.17 as the target version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_versions.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule test\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: Simple Go Program for Testing\nDESCRIPTION: This is a minimal Go program used as input for the executable build test. It simply prints 'hello' to the console.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/slashpath.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\nfunc main() { println(\"hello\") }\n```\n\n----------------------------------------\n\nTITLE: Module 'a' Package Declaration\nDESCRIPTION: A simple Go file for module 'a' that just declares the package. This file exists to make module 'a' a valid Go module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_tidy.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage a\n```\n\n----------------------------------------\n\nTITLE: Verifying Git Log Output\nDESCRIPTION: Displays the Git log in a one-line format with decoration and compares it to an expected output file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/empty-v2-without-v1.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit log --oneline --decorate=short\ncmp stdout .git-log\n```\n\n----------------------------------------\n\nTITLE: Minimal Go Benchmark Test Implementation\nDESCRIPTION: Basic implementation of a benchmark test function in Go using the testing package. Provides the minimal structure required for a valid benchmark.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_only_benchmarks.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage standalone_benchmark\n\nimport \"testing\"\n\nfunc Benchmark(b *testing.B) {\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module Z v1.0.0 Implementation\nDESCRIPTION: Module Z version 1.0.0 implementation that imports module Q v1.0.5. Includes go.mod file with dependency on module Q v1.0.5.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune_all.txt#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/z\n\ngo 1.18\n\nrequire example.com/q v1.0.5\n```\n\nLANGUAGE: go\nCODE:\n```\npackage z\n\nimport _ \"example.com/q\"\n```\n\n----------------------------------------\n\nTITLE: Go Package b Declaration\nDESCRIPTION: Defines a basic Go package 'b'. This package is tested in the provided snippets to demonstrate how Go handles package imports.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_test_imports.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage b\n```\n\n----------------------------------------\n\nTITLE: Go package z with internal import\nDESCRIPTION: A Go package 'z' that imports the 'y' package from the same module, forming an internal dependency chain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_why.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage z\nimport _ \"mymodule/y\"\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Incompatible Version\nDESCRIPTION: Module declaration for example.com/incompatiblewithsub which is marked as v2.0.0+incompatible as indicated in the .info file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_incompatiblewithsub_v2.0.0+incompatible.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/incompatiblewithsub\n```\n\n----------------------------------------\n\nTITLE: Internal Package Implementation\nDESCRIPTION: The implementation of the internal package with a constant 'Hacks' that is accessed by the test file. This is the package that will be subject to Go's visibility rules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test_files.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage internal\nconst Hacks = true\n```\n\n----------------------------------------\n\nTITLE: Main Package with Internal Import\nDESCRIPTION: A Go file that imports an internal package. This demonstrates the basic structure of a package that relies on an internal dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test_files.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage foo\nimport _ \"example.com/internal\"\n```\n\n----------------------------------------\n\nTITLE: Checking Git Repository Log\nDESCRIPTION: Checks the Git log and compares it with the expected output to verify the repository setup was successful.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/modlegacy1-old.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit log --oneline --decorate=short\ncmp stdout .git-log\n```\n\n----------------------------------------\n\nTITLE: Formatted Go Workspace File\nDESCRIPTION: Properly formatted version of the go.work file with consistent spacing and alignment\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_edit.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\n\nuse (\n\ta\n\tb\n\tc\n)\n\nreplace (\n\tx.1 v1.3.0 => y.1 v1.4.0\n\tx.1 v1.4.0 => ../z\n)\n```\n\n----------------------------------------\n\nTITLE: Go Executable Shell Script\nDESCRIPTION: A simple shell script that serves as the 'go' executable, which prints a version identifier message when run.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-arm64.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Go Work File with Current Version\nDESCRIPTION: This go.work file specifies a current Go version (1.10) and includes the current directory in the workspace.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline_too_new.txt#2025-04-22_snippet_8\n\nLANGUAGE: Plain Text\nCODE:\n```\ngo 1.10\nuse .\n```\n\n----------------------------------------\n\nTITLE: Configuring Doc Link Base URL with JSON\nDESCRIPTION: Defines the base URL for documentation links using a JSON configuration object that points to pkg.go.dev.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/doclink5.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"DocLinkBaseURL\": \"https://pkg.go.dev\"}\n```\n\n----------------------------------------\n\nTITLE: Go Library Package Implementation\nDESCRIPTION: This snippet shows the implementation of a Go library package that imports and uses a function from another module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage lib\n\nimport \"example.com/a\"\n\nfunc Hello() {\n\ta.HelloFromA()\n}\n```\n\n----------------------------------------\n\nTITLE: Go Package Source File with Error\nDESCRIPTION: A Go source file with a function calling an undefined function 'g()', which will cause a compilation error.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_error.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nfunc f() {\n\tg()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Module Dependencies in Go\nDESCRIPTION: This go.mod file for example.net/a module specifies its Go version and a dependency on example.net/b v0.2.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_boost.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/a\n\ngo 1.17\n\nrequire example.net/b v0.2.0\n```\n\n----------------------------------------\n\nTITLE: Testing Go Test Help Output\nDESCRIPTION: Verifies the concise help output format for go test command, directing users to detailed help documentation\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/help.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n! go test -h\nstderr 'usage: go test'\nstderr 'Run \\'go help test\\' and \\'go help testflag\\' for details.'\n```\n\n----------------------------------------\n\nTITLE: Defining Go Workspace Configuration\nDESCRIPTION: This snippet shows the content of a go.work file, which specifies the use of the current directory in the workspace.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_implicit_go_requirement.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nuse .\n```\n\n----------------------------------------\n\nTITLE: Importing Dependent Modules\nDESCRIPTION: This Go file imports the bad114 and need117 modules as blank imports.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_goversion.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage m\n\nimport _ \"example.net/bad114\"\nimport _ \"example.net/need117\"\n```\n\n----------------------------------------\n\nTITLE: Adding Binary and Text Appender Interfaces in Go\nDESCRIPTION: New interfaces for appending binary and text data in the encoding package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_12\n\nLANGUAGE: Go\nCODE:\n```\ntype BinaryAppender interface {\n    AppendBinary([]uint8) ([]uint8, error)\n}\n\ntype TextAppender interface {\n    AppendText([]uint8) ([]uint8, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Module A Implementation with Import\nDESCRIPTION: The package implementation for 'm/a' that imports 'm/b', continuing the circular dependency chain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_cycle.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage a\nimport _ \"m/b\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Version Information for rsc.io/fortune\nDESCRIPTION: This JSON snippet provides version information for the rsc.io/fortune module. It specifies the version as v0.0.1.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_fortune_v0.0.1.txt#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\"Version\":\"v0.0.1\"}\n```\n\n----------------------------------------\n\nTITLE: Go Module Q v1.0.5 Implementation\nDESCRIPTION: Module Q version 1.0.5 implementation that imports module R. Includes go.mod file with dependency on module R v1.0.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune_all.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/q\n\ngo 1.18\n\nrequire example.com/r v1.0.0\n```\n\nLANGUAGE: go\nCODE:\n```\npackage q\n\nimport _ \"example.com/r\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Go Command Script for Plan9\nDESCRIPTION: A Plan9 rc shell script that simulates the 'go' command by echoing a test version string.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.plan9-arm.txt#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n#!/bin/rc\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Go module definition\nDESCRIPTION: A minimal go.mod file that defines the module name and Go version requirement for the test project.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_trimpath_cgo.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.14\n```\n\n----------------------------------------\n\nTITLE: Go Module with Version 1.13\nDESCRIPTION: Defines a Go module with version 1.13 specified in go.mod, including a foo package that imports an external dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_buildmod_reason_issue67587.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage foo\n\nimport _ \"github.com/foo/bar\"\n```\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com\n\ngo 1.13\n```\n\nLANGUAGE: go\nCODE:\n```\npackage bar\n```\n\n----------------------------------------\n\nTITLE: Setting up Go test environment variables\nDESCRIPTION: Sets environment variables for Go module mode, cache location, and debug settings for test caching.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test_cached.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GO111MODULE=on\nenv GOCACHE=$WORK/gocache\nenv GODEBUG=gocachetest=1\n```\n\n----------------------------------------\n\nTITLE: Testing Go Version Command with Invalid Arguments\nDESCRIPTION: Checks that 'go version' fails when given invalid arguments or flags.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n! go version missing.exe\n! go version -m\nstderr 'with arguments'\n! go version -v\nstderr 'with arguments'\n```\n\n----------------------------------------\n\nTITLE: Simple Go Test Program\nDESCRIPTION: A minimal Go program used for testing the build process. The program contains just an empty main function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_nocache.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Testing Removal of Unnecessary Indirect Comments\nDESCRIPTION: Verifies that '// indirect' comments are removed when dependencies become direct during module operations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retention.txt#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncp go.mod.indirect go.mod\ngo list -mod=mod all\ncmp go.mod go.mod.tidy\n```\n\n----------------------------------------\n\nTITLE: AST Dump Format\nDESCRIPTION: Internal document structure representation showing the parse tree with formatting attributes for lists and paragraphs.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list6.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nDoc\n\tParagraph\n\t\tPlain \"Text.\"\n\tList ForceBlankBefore=false ForceBlankBetween=false\n\t\tItem Number=\"\"\n\t\t\tParagraph\n\t\t\t\tPlain \"List immediately after.\"\n\t\tItem Number=\"\"\n\t\t\tParagraph\n\t\t\t\tPlain \"Another.\"\n\tParagraph\n\t\tPlain \"More text.\"\n\tList ForceBlankBefore=true ForceBlankBetween=false\n\t\tItem Number=\"\"\n\t\t\tParagraph\n\t\t\t\tPlain \"List after blank line.\"\n\t\tItem Number=\"\"\n\t\t\tParagraph\n\t\t\t\tPlain \"Another.\"\n\tParagraph\n\t\tPlain \"Even more text.\"\n\tList ForceBlankBefore=false ForceBlankBetween=true\n\t\tItem Number=\"\"\n\t\t\tParagraph\n\t\t\t\tPlain \"List immediately after.\"\n\t\tItem Number=\"\"\n\t\t\tParagraph\n\t\t\t\tPlain \"Blank line between items.\"\n\tParagraph\n\t\tPlain \"Yet more text.\"\n\tList ForceBlankBefore=true ForceBlankBetween=true\n\t\tItem Number=\"\"\n\t\t\tParagraph\n\t\t\t\tPlain \"Another list after blank line.\"\n\t\tItem Number=\"\"\n\t\t\tParagraph\n\t\t\t\tPlain \"Blank line between items.\"\n\tParagraph\n\t\tPlain \"Still more text.\"\n\tList ForceBlankBefore=false ForceBlankBetween=true\n\t\tItem Number=\"\"\n\t\t\tParagraph\n\t\t\t\tPlain \"One list item.\"\n\t\t\tParagraph\n\t\t\t\tPlain \"Multiple paragraphs.\"\n```\n\n----------------------------------------\n\nTITLE: Preventing Transitive Internal Leakage via Direct Dependency\nDESCRIPTION: In the `golang.org/notx` module context, attempts to get and build the `./baddep` package. `./baddep` imports `golang.org/notx/useinternal` which does *not* exist, but the setup implies a test against incorrect internal usage. The expected build failure (`! go build`) and error message confirm that importing internal packages across module boundaries (`golang.org/x/internal` from `golang.org/notx`) is disallowed, even transitively.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n# And transitive dependencies still should not leak.\ngo get ./baddep\n! go build ./baddep\nstderr golang.org[/\\\\]notx[/\\\\]useinternal\nstderr 'use of internal package golang.org/x/.* not allowed'\n```\n\n----------------------------------------\n\nTITLE: Defining Go File with Multiple Imports\nDESCRIPTION: This snippet defines a Go file with multiple imports, including one that will cause an error.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_setup_error.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage q\n\nimport (\n\t\"m/bad\"\n\t\"m/cycle/p\"\n)\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines a Go module named github.com/golang/issue65339 with Go 1.20 as the required version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_git_missing_tree.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule github.com/golang/issue65339\n\ngo 1.20\n```\n\n----------------------------------------\n\nTITLE: Gofmt Executable Shell Script\nDESCRIPTION: A shell script that serves as the 'gofmt' executable, which simply outputs a message indicating that it's unused.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-arm64.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: LookupSelection Function\nDESCRIPTION: Function for looking up type selections in a package, returns a Selection and boolean indicating success\nSOURCE: https://github.com/golang/go/blob/master/api/next/70250.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc LookupSelection(Type, bool, *Package, string) (Selection, bool)\n```\n\n----------------------------------------\n\nTITLE: Main Go Module Definition\nDESCRIPTION: Main module definition file specifying module name, Go version requirement, and dependencies on retract packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_replace.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.14\n\nrequire (\n\texample.com/retract v1.0.0-good\n\texample.com/retract/missingmod v1.0.0\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Android ARM64 Build Target\nDESCRIPTION: Platform specification indicating the build target is Android on ARM64 architecture. This is used to configure the Go build process for Android ARM64 platforms.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/internal/imports/testdata/android/tags.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nandroid arm64\n```\n\n----------------------------------------\n\nTITLE: Populating go.mod and go.sum Files in Go\nDESCRIPTION: Uses 'go mod tidy' to populate the go.mod and go.sum files with the necessary dependencies for the project.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_build.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo mod tidy\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module in go.mod File - Go\nDESCRIPTION: Specifies the module path and Go version for the 'example.com/ambiguous/a/b' module using the standard 'go.mod' file which is required for all Go modules. This file enables module support and establishes version requirements for Go. The file has no dependencies beyond the Go toolchain and is used during dependency resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_ambiguous_a_b_v0.0.0-empty.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/ambiguous/a/b\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Subsequent Package Build with PGO\nDESCRIPTION: Verifies that subsequent builds don't trigger preprofile\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_pgo.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo build -x -pgo=default.pgo lib.go\n! stderr 'preprofile.*default\\.pgo'\n```\n\n----------------------------------------\n\nTITLE: System Constants for NetBSD\nDESCRIPTION: Defines system call constants for NetBSD operating system across different architectures.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.17.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nconst SYS_WAIT6 = 481\nconst WEXITED = 32\n```\n\n----------------------------------------\n\nTITLE: Importing Module in Go Main Package\nDESCRIPTION: This snippet demonstrates a simple main package that imports the rsc.io/quote module as a side effect.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_replaced.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport _ \"rsc.io/quote\"\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Fuzzing Test Implementations for Minimization Testing\nDESCRIPTION: Test functions implementing various fuzzing scenarios to test the minimizer's behavior. Includes tests for normal minimization, crashes during minimization, and non-recoverable errors during minimization.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_minimize_interesting.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage fuzz\n\nimport (\n\t\"bytes\"\n\t\"os\"\n\t\"testing\"\n)\n\nfunc FuzzMinimizerCrashInMinimization(f *testing.F) {\n\tseed := bytes.Repeat([]byte{255}, 100)\n\tf.Add(seed)\n\tf.Fuzz(func(t *testing.T, b []byte) {\n\t\tif bytes.Equal(seed, b) {\n\t\t\treturn\n\t\t}\n\t\tt.Error(\"bad input\")\n\t\tif len(b) == 1 {\n\t\t\tt.Error(\"got the minimum size!\")\n\t\t}\n\t})\n}\n\nvar fuzzing bool\n\nfunc FuzzMinimizerNonrecoverableCrashInMinimization(f *testing.F) {\n\tseed := bytes.Repeat([]byte{255}, 100)\n\tf.Add(seed)\n\tf.Fuzz(func(t *testing.T, b []byte) {\n\t\tif bytes.Equal(seed, b) {\n\t\t\treturn\n\t\t} else if len(b) == 1 {\n\t\t\tos.Exit(1)\n\t\t}\n\t})\n}\n\nfunc FuzzMinCache(f *testing.F) {\n\tseed := bytes.Repeat([]byte(\"a\"), 20)\n\tf.Add(seed)\n\tf.Fuzz(func(t *testing.T, buf []byte) {\n\t\tif bytes.Equal(buf, seed) {\n\t\t\treturn\n\t\t}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Setup and Skip Commands\nDESCRIPTION: Initial environment configuration disabling Go modules and skip commands for certain executions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/script_wait.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=off\n\n[!exec:echo] skip\n[!exec:false] skip\n```\n\n----------------------------------------\n\nTITLE: Empty Non-Cgo File (Go)\nDESCRIPTION: An empty Go file that is part of package p but doesn't contain any Cgo code. It's included to test coverage reporting with mixed cgo and non-cgo files.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_cgo_extra_file.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage p\n```\n\n----------------------------------------\n\nTITLE: Running Go List Command to Verify Import Cycle Error\nDESCRIPTION: This snippet uses the 'go list' command to ensure that an import cycle error does not cause infinite recursion, which is validated by an error message check. This setup aims to validate issue #25830 in the Go project.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_err_cycle.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n! go list\nstderr 'found packages a \\(a.go\\) and b \\(b.go\\)'\n```\n\n----------------------------------------\n\nTITLE: Module Definition with Go Version Requirement\nDESCRIPTION: Module file specifying the module name 'rsc.io/needgo121' and requiring Go 1.21 as the minimum version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo121_v0.0.1.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule rsc.io/needgo121\ngo 1.21\n```\n\n----------------------------------------\n\nTITLE: Markdown Input Example with Doc Links\nDESCRIPTION: Example showing the difference between valid doc links and escaped bracket text in the input format.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/doclink3.txt#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[encoding/json.Marshal] is a doc link.\n\n[rot13.Marshal] is not.\n```\n\n----------------------------------------\n\nTITLE: Defining Empty Package A\nDESCRIPTION: This snippet shows an empty Go file for package 'a'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_module_not_in_go_work.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage a\n```\n\n----------------------------------------\n\nTITLE: Defining an Empty Go Package - Go\nDESCRIPTION: Declares the 'empty' package in Go with no implementation or exported symbols. This file serves as a placeholder to maintain package structure or satisfy build/tooling requirements. It requires no dependencies and does not provide any functionality. It is commonly found in Go projects to ensure a package directory compiles, even in the absence of logic.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rationale_v1.0.0-long.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage empty\n```\n\n----------------------------------------\n\nTITLE: Testing Go Fuzzing with Zero Minimization Time\nDESCRIPTION: Tests that verify the behavior when fuzzminimizetime is set to zero (either as a duration or an iteration count). These tests confirm that minimization is properly disabled when the time is set to zero.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_minimize.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Test that fuzzminimizetime can be zero seconds, and minimization is disabled\n! go test -fuzz=FuzzMinimizeZeroDurationSet -run=FuzzMinimizeZeroDurationSet -fuzztime=10000x -fuzzminimizetime=0s .\n! stdout '^ok'\n! stdout 'minimizing'\nstdout 'there was an Error'\nstdout FAIL\n\n# Test that fuzzminimizetime can be zero times, and minimization is disabled\n! go test -fuzz=FuzzMinimizeZeroLimitSet -run=FuzzMinimizeZeroLimitSet -fuzztime=10000x -fuzzminimizetime=0x .\n! stdout '^ok'\n! stdout 'minimizing'\nstdout -count=1 'there was an Error'\nstdout FAIL\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module for Test Package\nDESCRIPTION: Defines a simple Go module for the test package 'a'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_fossil.txt#2025-04-22_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/a\n\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Module B v2 Package\nDESCRIPTION: Version 2 of module b that imports module c v0.1.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_indirect.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage b\n\nimport _ \"example.com/c\"\n```\n\n----------------------------------------\n\nTITLE: Go Type Definition with Method\nDESCRIPTION: Defines a custom type T as an integer and implements a method M() that returns the integer value of T\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gccgo_mangle.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\ntype T int\n\nfunc (t T) M() int {\n\treturn int(t)\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Basic go.mod file defining the module as 'example' and specifying Go version 1.24 as requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_subdir.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example\n\ngo 1.24\n```\n\n----------------------------------------\n\nTITLE: FileInfo Interface Definition in Go\nDESCRIPTION: Interface definition for FileInfo in the os package, specifying methods for accessing file metadata.\nSOURCE: https://github.com/golang/go/blob/master/api/except.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype FileInfo interface {\n    IsDir() bool\n    ModTime() time.Time\n    Mode() FileMode\n    Name() string\n    Size() int64\n    Sys() interface{}\n}\n```\n\n----------------------------------------\n\nTITLE: Testing MIPS Architecture Features\nDESCRIPTION: Tests MIPS and MIPS64 architectures with hardfloat configuration.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/tooltags.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nenv GOARCH=mips\nenv GOMIPS=hardfloat\ngo list -f '{{context.ToolTags}}'\n\nenv GOARCH=mips64\nenv GOMIPS=hardfloat\ngo list -f '{{context.ToolTags}}'\n```\n\n----------------------------------------\n\nTITLE: Setting Git Author Information in Bash\nDESCRIPTION: Sets up Git author and committer environment variables for a repository.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/no-tags.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GIT_AUTHOR_NAME='Bryan C. Mills'\nenv GIT_AUTHOR_EMAIL='bcmills@google.com'\nenv GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME\nenv GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module for Example\nDESCRIPTION: Specifies the module definition for the example project, including the Go version and a local replacement for a dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_doc_path.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule example\n\ngo 1.19\n\nrequire example.com/p v0.1.0\n\nreplace example.com/p => ./pfork\n```\n\n----------------------------------------\n\nTITLE: HTTP Connection State Constants and Types\nDESCRIPTION: HTTP server connection state definitions and related types for managing connection lifecycle states.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype ConnState int\n\nconst (\n    StateNew ConnState = iota\n    StateActive\n    StateIdle\n    StateHijacked\n    StateClosed\n)\n```\n\n----------------------------------------\n\nTITLE: External Test File\nDESCRIPTION: External test file (package main_test) verifying the vendored strings package message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_import.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main_test\n\nimport (\n\t\"strings\" // really ../vendor/strings\n\t\"testing\"\n)\n\nfunc TestMsgExternal(t *testing.T) {\n\tif strings.Msg != \"hello, world\" {\n\t\tt.Fatalf(\"unexpected msg: %v\", strings.Msg)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Vendored Dependency with Bad Import\nDESCRIPTION: A vendored dependency file that imports a non-existent package, used to test vendoring behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version_missing.txt#2025-04-22_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\npackage dep\nimport _ \"example.com/badedit\"\n```\n\n----------------------------------------\n\nTITLE: Getting Non-Excluded Module Version\nDESCRIPTION: Demonstrates successful retrieval of a non-excluded module version using 'go get' command.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query_exclude.txt#2025-04-22_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ncp go.exclude.mod.orig go.exclude.mod\ngo get -modfile=go.exclude.mod rsc.io/quote@v1.5.1\nstderr 'rsc.io/quote v1.5.1'\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: A simple Go module definition file that specifies the module name 'hello' and requires Go version 1.20.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_static.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule hello\n\ngo 1.20\n```\n\n----------------------------------------\n\nTITLE: Vendored Package Test with Dot Import\nDESCRIPTION: Test file for tx2 package using dot import syntax to access exported variables.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_list_issue11977.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage tx2_test\n\nimport . \"vendor.org/tx2\"\nimport \"testing\"\n\nvar Found = Exported\n\nfunc TestNop(t *testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Main Package with Import Declarations\nDESCRIPTION: Main package 'p' importing two packages 'y' and 'z' from package 'q'\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_resolve.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nimport (\n\t_ \"q/y\"\n\t_ \"q/z\"\n)\n```\n\n----------------------------------------\n\nTITLE: Go Command Test Script\nDESCRIPTION: Shell script that simulates the Go command by echoing a version message. Used for testing the toolchain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-386.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module in go.mod\nDESCRIPTION: Specifies the Go version and module name for the project. This file is essential for Go's module system to manage dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_build_no_modules.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\ngo 1.18\n\nmodule foo\n```\n\n----------------------------------------\n\nTITLE: Defining Windows Socket Error Constant in Go\nDESCRIPTION: Declaration of WSAENOPROTOOPT error constant for Windows socket operations indicating protocol option is not available.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.23.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nconst WSAENOPROTOOPT Errno\n```\n\n----------------------------------------\n\nTITLE: Go Submodule Declaration\nDESCRIPTION: Go module declaration for a submodule, using a different module path to distinguish it from the parent module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_24\n\nLANGUAGE: go\nCODE:\n```\nmodule \"github.com/vgotest1/submod\" // submod/go.mod\n```\n\n----------------------------------------\n\nTITLE: Test Package Main Implementation\nDESCRIPTION: Simple main package that prints the value of pkg.Text variable, used for testing GOPATH manipulations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cd_gopath_different.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"my.pkg\"\n\nfunc main() {\n\tprintln(pkg.Text)\n}\n```\n\n----------------------------------------\n\nTITLE: Git Environment Configuration\nDESCRIPTION: Sets up Git author and committer environment variables for repository commits.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/tagtests.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GIT_AUTHOR_NAME='Jay Conrod'\nenv GIT_AUTHOR_EMAIL='jayconrod@google.com'\nenv GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME\nenv GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Dependencies\nDESCRIPTION: This snippet shows the contents of a go.mod file, defining the module and its dependency on rsc.io/quote.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_replaced.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nmodule golang.org/issue/27868\n\nrequire rsc.io/quote v1.5.0\n```\n\n----------------------------------------\n\nTITLE: Testing Go Vet Version for Module\nDESCRIPTION: Runs go vet on a module and checks the GoVersion output. Expects the version from go.mod to be used.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_commandline.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo vet -n -json example.com/m\nstderr '\"GoVersion\": \"go1.22.0\"'\n```\n\n----------------------------------------\n\nTITLE: No PGO main package implementation\nDESCRIPTION: A simple main package without PGO file that is used to test behavior when default.pgo is absent.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\npackage main\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Scan Package with Import\nDESCRIPTION: Package containing an import statement for the want package and an invalid file with scan errors\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_load_err.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage scan\n\nimport _ \"m/want\"\n```\n\n----------------------------------------\n\nTITLE: Testing Helper Method Definitions\nDESCRIPTION: Defines Helper methods for testing package's B and T types, and TB interface for test helper functionality\nSOURCE: https://github.com/golang/go/blob/master/api/go1.9.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc (*B) Helper()\nfunc (*T) Helper()\ntype TB interface {\n    Helper()\n}\n```\n\n----------------------------------------\n\nTITLE: Go package x with internal import\nDESCRIPTION: A simple Go package 'x' that imports the 'z' package from the same module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_why.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage x\nimport _ \"mymodule/z\"\n```\n\n----------------------------------------\n\nTITLE: Module B1 Definition\nDESCRIPTION: Module definition for example.com/b v0.1.0 which requires example.com/c v0.1.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_downgrade.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/b\n\ngo 1.17\n\nrequire example.com/c v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Minimal Go Main Package\nDESCRIPTION: A minimal Go program containing only an empty main function, used as test input for the build process verification.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_link.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Module B3 Definition\nDESCRIPTION: Module definition for example.com/b v0.3.0 which requires example.com/c v0.2.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_downgrade.txt#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/b\n\ngo 1.17\n\nrequire example.com/c v0.2.0\n```\n\n----------------------------------------\n\nTITLE: Go Module Configuration with Retraction\nDESCRIPTION: Defines a Go module configuration that retracts version v1.2.0 of the example.com/retract/newergoversion module. Uses Go version 1.23.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_newergoversion_v1.2.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/retract/newergoversion\n\ngo 1.23\n\nretract v1.2.0\n```\n\n----------------------------------------\n\nTITLE: Invalid Version Retraction in v2 Module\nDESCRIPTION: go.mod file demonstrating an invalid retraction where the version number doesn't match the module's major version\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_fix_version.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngo 1.16\n\nretract v3.0.1\n\nmodule rsc.io/quote/v2\n```\n\n----------------------------------------\n\nTITLE: Syscall Credential Structure Definition\nDESCRIPTION: Defines the Credential structure with NoSetGroups field for OpenBSD systems on AMD64 architecture\nSOURCE: https://github.com/golang/go/blob/master/api/go1.9.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype Credential struct {\n    NoSetGroups bool\n}\n```\n\n----------------------------------------\n\nTITLE: Module A v1.0.2 Configuration\nDESCRIPTION: Go module configuration for example.com/a v1.0.2 with upgraded Go version requirement\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// this module is technically invalid, since the dep example.com/b has a newer go line than this module,\n// but we should still be able to handle it.\nmodule example.com/a\ngo 1.25\n\nrequire example.com/b v1.0.2\n```\n\n----------------------------------------\n\nTITLE: Package with Undeprecated Import - undeprecated.go\nDESCRIPTION: Defines a package that imports a module that is no longer deprecated in its latest version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_deprecated.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage undeprecated\n\nimport _ \"example.com/undeprecated\"\n```\n\n----------------------------------------\n\nTITLE: Module B Source File\nDESCRIPTION: A simple Go source file that defines the package 'b' which is imported by module 'a'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_main_module_replaced.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage b\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Configuration\nDESCRIPTION: A go.mod file defining a module named 'm' with Go version 1.16 as the minimum requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_hello_pkg.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Input Format Example\nDESCRIPTION: Raw input format showing heading and text formatting examples.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/head.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nSome text.\n\nAn Old Heading\n\nNot An Old Heading.\n\nAnd some text.\n\n# A New Heading.\n\nAnd some more text.\n\n# Not a heading,\nbecause text follows it.\n\nBecause text precedes it,\n# not a heading.\n\n## Not a heading either.\n```\n\n----------------------------------------\n\nTITLE: Shell Script Mock for the Gofmt Command\nDESCRIPTION: A shell script that mocks the behavior of the gofmt command, with a note that it's unused.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.netbsd-386.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: Dependency Usage Implementation\nDESCRIPTION: Go source file implementing package that uses a direct patch dependency through import.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_direct_v1.0.1.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage usedepofdirectpatch\n\nimport _ \"patch.example.com/depofdirectpatch\"\n```\n\n----------------------------------------\n\nTITLE: Module B Configuration with Local Dependency\nDESCRIPTION: Go module configuration for example.com/b that requires and replaces example.com/c with a local version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_why_download_graph.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\n\nmodule example.com/b\n\nrequire example.com/c v1.0.0\nreplace example.com/c => ../c\n```\n\n----------------------------------------\n\nTITLE: Go Module Tidy with 1.17 Compatibility\nDESCRIPTION: Performs 'go mod tidy' with explicit 1.17 compatibility and checks the results.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncp go.mod.orig go.mod\ngo mod tidy -compat=1.17\ncmp go.mod go.mod.orig\n```\n\n----------------------------------------\n\nTITLE: Basic Go Module Fetch Test\nDESCRIPTION: Tests basic module fetching through proxy using rsc.io/fortune module as an example.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_proxy.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncp go.mod.orig go.mod\ngo get rsc.io/fortune@v1.0.0\nrm $GOPATH/pkg/mod/cache/download/sumdb\nrm go.sum\n```\n\n----------------------------------------\n\nTITLE: Basic Want Package Declaration\nDESCRIPTION: Empty package declaration serving as a dependency target for other test packages\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_load_err.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage want\n```\n\n----------------------------------------\n\nTITLE: Sample Go Package with Invalid Import\nDESCRIPTION: Go source file demonstrating an incomplete package with an invalid import path, used for testing go list behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_find.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage z\nimport \"does/not/exist\"\n```\n\n----------------------------------------\n\nTITLE: Local Usequote Module Definition\nDESCRIPTION: go.mod file for the local usequote module that depends on rsc.io/quote v1.5.2\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_changes.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule usequote\n\ngo 1.16\n\nrequire rsc.io/quote v1.5.2\n```\n\n----------------------------------------\n\nTITLE: Initial Go workspace configuration\nDESCRIPTION: The initial go.work file that specifies Go 1.18 and uses the 'sub' directory as a workspace module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_issue50958.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\n\nuse sub\n```\n\n----------------------------------------\n\nTITLE: Package X v0.1.0 Implementation\nDESCRIPTION: First version of package x with test dependency on package y.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_convergence.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/x\n\ngo 1.16\n```\n\nLANGUAGE: go\nCODE:\n```\npackage x\n```\n\nLANGUAGE: go\nCODE:\n```\npackage x\n\nimport _ \"example.net/y\"\n```\n\n----------------------------------------\n\nTITLE: Go Module File for Main Project\nDESCRIPTION: This snippet shows the go.mod file for the main project, specifying the module name and Go version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_meta.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Invalid Go Module with Custom Directives\nDESCRIPTION: Shows an invalid go.mod setup with unknown directives, helpful for testing directives handling and error generation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badmod.txt#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n-- go.mod.bad --\nmodule m\nhello world\n```\n\n----------------------------------------\n\nTITLE: Module Q v1.0.0 Implementation\nDESCRIPTION: This snippet shows the go.mod file and implementation for 'example.com/q' version 1.0.0. It provides a PrintVersion function that prints \"version 1.0.0\".\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_prune.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/q\n\ngo 1.18\n```\n\nLANGUAGE: Go\nCODE:\n```\npackage q\n\nimport \"fmt\"\n\nfunc PrintVersion() {\n\tfmt.Println(\"version 1.0.0\")\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Fossil Command for Windows\nDESCRIPTION: Creates a Windows batch file version of the mock Fossil command that always exits with an error.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_fossil.txt#2025-04-22_snippet_7\n\nLANGUAGE: Batch\nCODE:\n```\nexit 1\n```\n\n----------------------------------------\n\nTITLE: Testing Function FooFunc in Package 'foo'\nDESCRIPTION: Defines a unit test for the FooFunc in the 'foo' package. It validates that FooFunc returns the expected integer value, using Go's testing package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_test_pkgselect.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n-- foo/foo_test.go --\npackage foo\n\nimport \"testing\"\n\nfunc TestFoo(t *testing.T) {\n\tif FooFunc() != 42 {\n\t\tt.Fatalf(\"bad\")\n\t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing SQL Driver Interfaces and Structs - Go\nDESCRIPTION: These types, interface definitions, and struct fields specify the required contracts for implementing a database/sql driver. Includes interfaces for beginning transactions, preparing statements, executing and querying with context, pinging, and iterating over rows with column type metadata. NamedValue and TxOptions structs are used to convey named parameter values and transaction options, including isolation level and read-only semantics. These APIs are essential for interoperability with database/sql core.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.8.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\ntype ConnBeginTx interface { BeginTx }\nConnBeginTx.BeginTx(context.Context, TxOptions) (Tx, error)\n```\n\nLANGUAGE: Go\nCODE:\n```\ntype ConnPrepareContext interface { PrepareContext }\nConnPrepareContext.PrepareContext(context.Context, string) (Stmt, error)\n```\n\nLANGUAGE: Go\nCODE:\n```\ntype ExecerContext interface { ExecContext }\nExecerContext.ExecContext(context.Context, string, []NamedValue) (Result, error)\n```\n\nLANGUAGE: Go\nCODE:\n```\ntype IsolationLevel int\n```\n\nLANGUAGE: Go\nCODE:\n```\ntype NamedValue struct\nNamedValue.Name string\nNamedValue.Ordinal int\nNamedValue.Value Value\n```\n\nLANGUAGE: Go\nCODE:\n```\ntype Pinger interface { Ping }\nPinger.Ping(context.Context) error\n```\n\nLANGUAGE: Go\nCODE:\n```\ntype QueryerContext interface { QueryContext }\nQueryerContext.QueryContext(context.Context, string, []NamedValue) (Rows, error)\n```\n\nLANGUAGE: Go\nCODE:\n```\ntype RowsColumnTypeDatabaseTypeName interface { Close, ColumnTypeDatabaseTypeName, Columns, Next }\nRowsColumnTypeDatabaseTypeName.Close() error\nRowsColumnTypeDatabaseTypeName.Columns() []string\nRowsColumnTypeDatabaseTypeName.ColumnTypeDatabaseTypeName(int) string\nRowsColumnTypeDatabaseTypeName.Next([]Value) error\n```\n\nLANGUAGE: Go\nCODE:\n```\ntype RowsColumnTypeLength interface { Close, ColumnTypeLength, Columns, Next }\nRowsColumnTypeLength.Close() error\nRowsColumnTypeLength.Columns() []string\nRowsColumnTypeLength.ColumnTypeLength(int) (int64, bool)\nRowsColumnTypeLength.Next([]Value) error\n```\n\nLANGUAGE: Go\nCODE:\n```\ntype RowsColumnTypeNullable interface { Close, ColumnTypeNullable, Columns, Next }\nRowsColumnTypeNullable.Close() error\nRowsColumnTypeNullable.Columns() []string\nRowsColumnTypeNullable.ColumnTypeNullable(int) (bool, bool)\nRowsColumnTypeNullable.Next([]Value) error\n```\n\nLANGUAGE: Go\nCODE:\n```\ntype RowsColumnTypePrecisionScale interface { Close, ColumnTypePrecisionScale, Columns, Next }\nRowsColumnTypePrecisionScale.Close() error\nRowsColumnTypePrecisionScale.Columns() []string\nRowsColumnTypePrecisionScale.ColumnTypePrecisionScale(int) (int64, int64, bool)\nRowsColumnTypePrecisionScale.Next([]Value) error\n```\n\nLANGUAGE: Go\nCODE:\n```\ntype RowsColumnTypeScanType interface { Close, ColumnTypeScanType, Columns, Next }\nRowsColumnTypeScanType.Close() error\nRowsColumnTypeScanType.Columns() []string\nRowsColumnTypeScanType.ColumnTypeScanType(int) reflect.Type\nRowsColumnTypeScanType.Next([]Value) error\n```\n\nLANGUAGE: Go\nCODE:\n```\ntype RowsNextResultSet interface { Close, Columns, HasNextResultSet, Next, NextResultSet }\nRowsNextResultSet.Close() error\nRowsNextResultSet.Columns() []string\nRowsNextResultSet.HasNextResultSet() bool\nRowsNextResultSet.NextResultSet() error\nRowsNextResultSet.Next([]Value) error\n```\n\nLANGUAGE: Go\nCODE:\n```\ntype StmtExecContext interface { ExecContext }\nStmtExecContext.ExecContext(context.Context, []NamedValue) (Result, error)\n```\n\nLANGUAGE: Go\nCODE:\n```\ntype StmtQueryContext interface { QueryContext }\nStmtQueryContext.QueryContext(context.Context, []NamedValue) (Rows, error)\n```\n\nLANGUAGE: Go\nCODE:\n```\ntype TxOptions struct\nTxOptions.Isolation IsolationLevel\nTxOptions.ReadOnly bool\n```\n\n----------------------------------------\n\nTITLE: Error Package with Compilation Error\nDESCRIPTION: Package demonstrating an intentional compilation error with undefined reference.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_cmd_v1.0.0-newerself.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage err\n\nvar X = DoesNotCompile\n```\n\n----------------------------------------\n\nTITLE: Testing Go Get Command for Import Errors\nDESCRIPTION: This snippet tests the 'go get' command to check error reporting for malformed import paths. It expects the command to fail and output an error message with the import stack.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_info_err.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n! go get ./main\nstderr '^go: m/main imports\\n\\tm/bad imports\\n\\t🐧.example.com/string: malformed import path \"🐧.example.com/string\": invalid char ''🐧''$'\n```\n\n----------------------------------------\n\nTITLE: Go Module Test File\nDESCRIPTION: Empty test file for module 'a'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_gowork.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage a\n```\n\n----------------------------------------\n\nTITLE: Test2PKG/pkg Package Import Definition\nDESCRIPTION: HTML template defining svn import path for test2PKG/pkg package\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/go/test2-svn-git.txt#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<meta name=\"go-import\" content=\"vcs-test.golang.org/go/test2-svn-git/test2PKG svn https://vcs-test.golang.org/svn/test2-svn-git\">\n```\n\n----------------------------------------\n\nTITLE: Testing Go Functions with Relative Imports\nDESCRIPTION: This Go test file demonstrates the use of relative imports in test files. It imports a subpackage using a relative path and compares the output of functions from different packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_relative_import.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage p\n\nimport (\n\t\"./p1\"\n\n\t\"testing\"\n)\n\nfunc TestF(t *testing.T) {\n\tif F() != p1.F() {\n\t\tt.Fatal(F())\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Word Boundary Regex Patterns in Go\nDESCRIPTION: Test cases for regular expressions using word boundary patterns (\\b) with various strings. The tests check how word boundaries behave with different strings and combinations of anchors.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n\"\\\\b(foo|bar|[A-Z])\\\\b\"\n```\n\n----------------------------------------\n\nTITLE: Simple Go Main Program\nDESCRIPTION: Minimal Go program with empty main function used for testing build and install commands\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_cross_gobin.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module definition file specifying the module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_goroot_PATH.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example\n\ngo 1.19\n```\n\n----------------------------------------\n\nTITLE: Go Module File with Current Version\nDESCRIPTION: This go.mod file specifies a current Go version (1.10) to contrast with the future version in the main test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline_too_new.txt#2025-04-22_snippet_6\n\nLANGUAGE: Plain Text\nCODE:\n```\nmodule example\ngo 1.10\n```\n\n----------------------------------------\n\nTITLE: Version Information in .info JSON File\nDESCRIPTION: JSON configuration file containing version information for the Go toolchain test module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-arm.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.999testmod.openbsd-arm\"}\n```\n\n----------------------------------------\n\nTITLE: Go module definition\nDESCRIPTION: Minimal go.mod file defining a module named 'm' with Go 1.16 requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_no_go.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: go/doc/comment Package Structures\nDESCRIPTION: New types and methods for handling documentation comments including parsing, formatting and rendering in different formats (HTML, Markdown, Text).\nSOURCE: https://github.com/golang/go/blob/master/api/go1.19.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype Doc struct {\n    Content []Block\n    Links []*LinkDef\n}\n\ntype Parser struct {\n    LookupPackage func(string) (string, bool)\n    LookupSym func(string, string) bool\n    Words map[string]string\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module for Tools\nDESCRIPTION: This snippet shows the content of a go.mod file for a tools module without explicit requirements.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pkgtags.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/tools\n\ngo 1.15\n\n// Requirements intentionally omitted.\n```\n\n----------------------------------------\n\nTITLE: Testing Internal Scope Preservation with Module Replacement\nDESCRIPTION: Sets the module path to `golang.org/notx`, then uses `go mod edit -replace` to replace `golang.org/x/internal` with a local copy (`./replace/golang.org/notx/internal`). It then gets `./throughdep`. This test verifies that even when `golang.org/x/internal` is replaced, its internal nature relative to the original path (`golang.org/x/...`) should be maintained.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n# Replacing an internal module should keep it internal to the same paths.\ngo mod edit -module=golang.org/notx\ngo mod edit -replace golang.org/x/internal=./replace/golang.org/notx/internal\ngo get ./throughdep\n```\n\n----------------------------------------\n\nTITLE: Defining Go Test File with Dependency (Go)\nDESCRIPTION: Defines a Go test file (`testuse/testuse_test.go`) for package `testuse`. It includes a basic test function `Test` and imports `example.com/badchain/c` for side effects (`_`). This import is intended to trigger dependency resolution errors when listing the package with the `-test` flag.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badchain.txt#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n-- testuse/testuse_test.go --\npackage testuse\n\nimport (\n\t\"testing\"\n\t_ \"example.com/badchain/c\"\n)\n\nfunc Test(t *testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Creating Package A With Import Cycle in Go Language\nDESCRIPTION: A package named 'a' is defined, which imports package 'errcycle', creating an import cycle. This forms part of a test case for detecting import cycle errors in Go.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_err_cycle.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage a\n\nimport _ \"errcycle\"\n```\n\n----------------------------------------\n\nTITLE: Simple Go Package Importing Export-Subst\nDESCRIPTION: A minimal Go package that imports the export-subst package to test git export-subst functionality.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_git_export_subst.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage x\n\nimport _ \"github.com/jasonkeene/export-subst\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Go Module\nDESCRIPTION: A minimal go.mod file defining a module named 'x'. This file is used in the test scenario to provide a module context when testing with GO111MODULE=on.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_versions.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule x\n```\n\n----------------------------------------\n\nTITLE: Empty Go Package Definition\nDESCRIPTION: An empty Go package file that defines a package named 'm'. This is a minimal Go source file used in the staleness test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_stale.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage m\n```\n\n----------------------------------------\n\nTITLE: Main Package Import\nDESCRIPTION: Main package file importing required dependencies using blank identifiers\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_indirect.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage tidy\n\nimport (\n\t_ \"example.net/incomplete\"\n\t_ \"example.net/toolow\"\n)\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module definition file specifying Go version 1.16 requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_shuffle.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Invoking go list on a Go File with Invalid Import - Shell\nDESCRIPTION: Executes the 'go list' command targeting the file 'a.go' to enumerate build details, revealing how Go reacts to files with invalid import statements. It is expected to fail with a recognized error message. This command requires a Go installation and expects to find 'a.go' in the working directory; it will produce errors if the import path is invalid.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_empty_import.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n! go list a.go\n```\n\n----------------------------------------\n\nTITLE: Specifying Module Version in .info File (JSON)\nDESCRIPTION: Provides the specific version string `v0.0.1-go1.999testmod.android-386` in JSON format, typically stored in a `.info` file (indicated by context marker `.info`) within the module cache. This metadata is used by the Go command to track module versions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.android-386.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.999testmod.android-386\"}\n```\n\n----------------------------------------\n\nTITLE: Importing C in Go Package\nDESCRIPTION: Defines a Go package named 'foo' and imports the C package for CGo functionality.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cgo_error.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage foo\n\nimport \"C\"\n```\n\n----------------------------------------\n\nTITLE: Empty Go Test File\nDESCRIPTION: Basic Go test file definition used as part of the testing environment.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goflags.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage foo\n```\n\n----------------------------------------\n\nTITLE: Background Process Execution and Output Verification\nDESCRIPTION: Demonstrates running multiple background processes, output verification, and wait behavior for concurrent executions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/script_wait.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexec echo foo\nstdout foo\n\nexec echo foo &\nexec echo bar &\n! exec false &\n\n# Starting a background process should clear previous output.\n! stdout foo\n\n# Wait should set the output to the concatenated outputs of the background\n# programs, in the order in which they were started.\nwait\nstdout 'foo\\nbar'\n```\n\n----------------------------------------\n\nTITLE: Empty Package Definition\nDESCRIPTION: Empty Go package definition file\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_symlink_issue35941.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage a\n```\n\n----------------------------------------\n\nTITLE: Go Command Shell Script Implementation\nDESCRIPTION: Shell script that implements the 'go' command for this test toolchain, which outputs a test version message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.netbsd-arm64.txt#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n#!/bin/sh\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Buggy Test Implementation in Go\nDESCRIPTION: A deliberately failing test in the buggy package that always calls t.Fatal. This appears to be used for testing error handling or test failures.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709160352-0d003b9c4bfa.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc Test(t *testing.T) {\n\tt.Fatal(\"buggy!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Buggy Test Implementation in Go\nDESCRIPTION: A test file that intentionally fails, likely used for testing error handling or CI systems.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709162749-b44a0b17b2d1.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage buggy\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\tt.Fatal(\"buggy!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Empty Go Module\nDESCRIPTION: This snippet shows the contents of a go.mod file for an empty module named 'm'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vcs_missing.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Adding LoongArch architecture support in Go's debug/elf package\nDESCRIPTION: Introduces constants and types for the LoongArch architecture in the debug/elf package. This includes machine types, relocation types, and associated string methods.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.19.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nconst EM_LOONGARCH = 258\nconst EM_LOONGARCH Machine\n\ntype R_LARCH int\n\nconst (\n    R_LARCH_NONE R_LARCH = 0\n    R_LARCH_32 R_LARCH = 1\n    R_LARCH_64 R_LARCH = 2\n    // ... (other R_LARCH constants)\n)\n\nmethod (R_LARCH) GoString() string\nmethod (R_LARCH) String() string\n```\n\n----------------------------------------\n\nTITLE: Module-level Internal Subpackage Definition\nDESCRIPTION: A minimal Go file that defines a subpackage within a module-level internal package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_internal.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage z\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Commit and Starting Point\nDESCRIPTION: Creates the first commit with a go.mod file, sets the branch name to master, and tags the commit as 'start'. This establishes the initial state of the repository.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/querytest.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nat 2018-07-03T22:31:01-04:00\ngit add go.mod\ngit commit -a -m 'v1'\ngit branch -m master\ngit tag start\n\ngit branch v2\n```\n\n----------------------------------------\n\nTITLE: Go Workspace Configuration\nDESCRIPTION: A go.work file that defines a workspace containing two modules 'a' and 'b'. This establishes the multi-module workspace for testing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_main_module_replaced.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ngo 1.21\n\nuse (\n    a\n    b\n)\n```\n\n----------------------------------------\n\nTITLE: Testing ARM Architecture Features\nDESCRIPTION: Verifies ARM architecture support with ARM v6 instruction set, showing compatibility with v5 and v6 features.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/tooltags.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nenv GOARCH=arm\nenv GOARM=6\ngo list -f '{{context.ToolTags}}'\n```\n\n----------------------------------------\n\nTITLE: Additional test package file\nDESCRIPTION: An additional file added in the second commit to trigger version changes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/get_issue53955.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage issue53955\n```\n\n----------------------------------------\n\nTITLE: Release Information Metadata - JSON\nDESCRIPTION: Contains metadata about the module release, specifying that version v1.0.0 is present. This information is typically generated automatically and used by Go tooling to resolve versions and manage dependencies. Inputs and outputs are internal to the Go module proxy system.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_prerelease_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\\"Version\\\":\\\"v1.0.0\\\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing C Functions and Global Variable (C)\nDESCRIPTION: This C source file (`main.c`) provides the native implementation details. It defines a global double variable `Foo` initialized to 3.0 and a function `gcd(int x, int y)` that calculates the greatest common divisor of two positive integers using the Euclidean algorithm. These C elements are intended to be accessed from Go code via SWIG.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_swig.txt#2025-04-22_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n-- main.c --\n/* A global variable */\ndouble Foo = 3.0;\n\n/* Compute the greatest common divisor of positive integers */\nint gcd(int x, int y) {\n  int g;\n  g = y;\n  while (x > 0) {\n    g = x;\n    x = y % x;\n    y = g;\n  }\n  return g;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Main Package Implementation\nDESCRIPTION: Main entry point that imports and calls the sub package's F function\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_issue62156.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"m/sub\"\n\nfunc main() { sub.F() }\n```\n\n----------------------------------------\n\nTITLE: Defining Module 'b' Version 2 in Go\nDESCRIPTION: This go.mod file defines module 'b' version 2 without any dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_pseudo_artifact.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/b\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Specifying Toolchain Version Information\nDESCRIPTION: Provides version information for the Golang toolchain in JSON format.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.windows-arm.txt#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.999testmod.windows-arm\"}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Package with Duplicate Path - Go\nDESCRIPTION: Defines the package 'pkg', existing in both the root and nested module at version v0.1.0, as documented in the comments. This file is the main content of the ambiguous package and is used to test the Go module system's handling of duplicate package paths. No functions or variables are defined; only the package clause and informative comments are present.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_ambiguous_v0.1.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n// Package pkg exists in both example.net/ambiguous v0.1.0\\n// and example.net/ambiguous/nested v0.1.0\\npackage pkg\n```\n\n----------------------------------------\n\nTITLE: Test File Path Printer\nDESCRIPTION: Test implementation that prints file paths from both main and test contexts using runtime.Caller()\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_trimpath_main.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"runtime\"\n\t\"testing\"\n)\n\nfunc PrintFileForTest() {\n\t_, file, _, _ := runtime.Caller(0)\n\tprintln(file)\n}\n\nfunc TestMain(m *testing.M) {\n\tPrintFile()\n\tPrintFileForTest()\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Version Query Failure for Invalid Semver Range\nDESCRIPTION: Tests that querying for a partial version range that only has +incompatible implementations fails appropriately when a v2+ module with go.mod exists.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_prefer_compatible.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n! go list -m github.com/russross/blackfriday@v2.0\nstderr '^go: module github.com/russross/blackfriday: no matching versions for query \"v2\\.0\"'\n```\n\n----------------------------------------\n\nTITLE: Testing Module Path Restrictions\nDESCRIPTION: Tests that verify relative and absolute paths must be within the main module scope. Shows error cases for invalid path references.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_main.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n! go get ..\nstderr '^go: \\.\\..*is not within module rooted at.*'\n! go get $WORK\nstderr '^go: '$WORK' is not within module rooted at.*'\n! go get ../...\nstderr '^go: \\.\\./.\\.\\..*is not within module rooted at.*'\n! go get $WORK/...\nstderr '^go: '$WORK'/... is not within module rooted at.*'\n```\n\n----------------------------------------\n\nTITLE: Version Information JSON\nDESCRIPTION: JSON file containing version information for the module\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo1183_v0.0.1.txt#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.0.1\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module\nDESCRIPTION: Defines a Go module named 'example.com' with Go version 1.13 in the go.mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_major.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com\ngo 1.13\n```\n\n----------------------------------------\n\nTITLE: Verifying Go Module Tidiness Control Test\nDESCRIPTION: Tests that the go.mod.tidy file is actually tidy by copying it to go.mod and verifying no changes occur after listing all modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retention.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp go.mod.tidy go.mod\ngo list -mod=mod all\ncmp go.mod go.mod.tidy\n```\n\n----------------------------------------\n\nTITLE: Go Module Declaration in Subdirectory with v2 Versioning\nDESCRIPTION: Defines a Go module in a subdirectory with explicit v2 versioning in the module path. This follows Go's semantic import versioning convention for major version 2.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/gitreposubdirv2.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule vcs-test.golang.org/go/gitreposubdirv2/v2\n\ngo 1.23\n```\n\n----------------------------------------\n\nTITLE: Printing OIDs as String - crypto/x509 - Go\nDESCRIPTION: Adds String() string method to OID, providing string representation of the OID for logging or display. Returns a textual encoding of the OID value.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nfunc (o OID) String() string\n```\n\n----------------------------------------\n\nTITLE: Creating Symlinks and Running Go Commands - Shell\nDESCRIPTION: This snippet illustrates how to use shell commands to create symbolic links between directories in a Go workspace and run Go tooling commands for module/package listing and validation. Dependencies include an environment with shell access, Go installed, and appropriate permissions to create and traverse symlinks. The key operations are creating symlinks (except those marked to skip), changing directories, listing Go packages, and comparing outputs for correctness. The commands are meant for integration or scenario testing with Go projects involving symlinks.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_symlink_dotdotdot.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# [!symlink] skip\n\nsymlink $WORK/gopath/src/sym -> $WORK/gopath/src/tree\nsymlink $WORK/gopath/src/tree/squirrel -> $WORK/gopath/src/dir2 # this symlink should not be followed\ncd sym\ngo list ./...\ncmp stdout $WORK/gopath/src/want_list.txt\n```\n\n----------------------------------------\n\nTITLE: Package X Implementation\nDESCRIPTION: Empty package declaration for x\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_legacy_mod.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage x\n```\n\n----------------------------------------\n\nTITLE: Go Fuzz Test Commands\nDESCRIPTION: Shell commands for executing various fuzz test scenarios including basic test runs, targeted fuzzing, and pattern matching tests. Demonstrates different command line flags and their effects on test execution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_match.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nenv GOCACHE=$WORK/cache\n\ngo test standalone_fuzz_test.go\ngo test -fuzz Fuzz -fuzztime 1x standalone_fuzz_test.go\ngo test -fuzz ThisWillNotMatch -fuzztime 1x standalone_fuzz_test.go\ngo test -run Fuzz standalone_fuzz_test.go\ngo test -run ThisWillNotMatch standalone_fuzz_test.go\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Constant in Go Package p\nDESCRIPTION: This Go code snippet defines a package named `p`. Within this package, it declares a constant named `v` of inferred integer type and assigns it the value `3`. This represents a minimal Go source file within the module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/github.com_dmitshur-test_modtest5_v0.5.0-alpha.0.20190619023908-3da23a9deb9e.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nconst v = 3\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests Verbosely\nDESCRIPTION: Executes Go tests in verbose mode for the current directory. This command provides detailed output for each test run.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_issue45477.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo test -v .\n```\n\n----------------------------------------\n\nTITLE: Subdirectory Test File Implementation\nDESCRIPTION: A duplicate of the main test file placed in a subdirectory for testing path-based scenarios.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_go_file.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\nfunc main() {println(\"test\")}\n```\n\n----------------------------------------\n\nTITLE: Building BoringCrypto Module for Linux ARM64\nDESCRIPTION: Command to build the BoringCrypto module for Linux ARM64 architecture, generating syso/goboringcrypto_linux_arm64.syso file. Requires Docker and QEMU support for cross-platform building on x86 systems.\nSOURCE: https://github.com/golang/go/blob/master/src/crypto/internal/boring/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nGOARCH=arm64 ./build.sh\n```\n\n----------------------------------------\n\nTITLE: Maintaining Existing Module Path\nDESCRIPTION: Shows how 'go get' maintains an existing shorter module path when it's already in the dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_ambiguous_pkg.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncp go.mod.orig go.mod\ngo mod edit -require=example.net/ambiguous@v0.1.0\n\ngo get example.net/ambiguous/nested/pkg@v0.1.0\ngo list -m all\nstdout '^example.net/ambiguous v0.1.0$'\n! stdout '^example.net/ambiguous/nested '\n```\n\n----------------------------------------\n\nTITLE: Go Workspace Configuration\nDESCRIPTION: Workspace configuration file specifying Go version 1.20 and including the './a' module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_reject_modfile.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo 1.20\n\nuse (\n    ./a\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Go 1.21 Feature Compatibility with go1.20 Build Constraint\nDESCRIPTION: This snippet shows a Go program with a go1.20 build constraint that uses the 'max' function, which was introduced in Go 1.21. It tests the compiler's behavior when encountering a newer feature with an older build constraint in GOPATH mode.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_issue68658.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n//go:build go1.20\n\npackage p\n\nimport \"fmt\"\n\nfunc main() {\n    y := max(1, 2)  // max was added in Go 1.21\n    fmt.Println(y)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Git Environment Variables\nDESCRIPTION: Configures Git environment variables for author and committer information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/commit-after-tag.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GIT_AUTHOR_NAME='Bryan C. Mills'\nenv GIT_AUTHOR_EMAIL='bcmills@google.com'\nenv GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME\nenv GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL\n```\n\n----------------------------------------\n\nTITLE: Building with FIPS 140 in Go\nDESCRIPTION: Verifies that building with FIPS 140 enabled uses the correct packages and caches the build appropriately.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/fipssnap.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo build -x -o x.exe\nstderr link.*-fipso\ngo build -x -o x.exe\n! stderr link.*-fipso\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Dependency\nDESCRIPTION: This go.mod file defines the module 'example.com/mainmoda' with a dependency on 'example.com/dep' and a local replacement for that dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace_main_module.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/mainmoda\n\ngo 1.18\n\nrequire example.com/dep v1.0.0\nreplace example.com/dep => ../dep\n```\n\n----------------------------------------\n\nTITLE: NetBSD System Call Implementation\nDESCRIPTION: System call implementations for Accept4 and Pipe2 functions across different NetBSD architectures (386, amd64, arm) with and without CGO support.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.11.txt#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nfunc Accept4(int, int) (int, Sockaddr, error)\nfunc Pipe2([]int, int) error\n```\n\n----------------------------------------\n\nTITLE: Simple Hello World Go Program\nDESCRIPTION: A minimal Go program that prints 'hello, world' to the console. This file is used as part of a Bazaar version control test to demonstrate basic repository operations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/bzr/hello.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {\n\tprintln(\"hello, world\")\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Configuration for Go Module Testing\nDESCRIPTION: JSON configuration defining authentication requirements with username, password, status code, and error message for a test module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/auth/or401.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"Username\": \"aladdin\",\n\t\"Password\": \"opensesame\",\n\t\"StatusCode\": 401,\n\t\"Message\": \"ACCESS DENIED, buddy\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Test Repository for Retracted Pseudo-Versions\nDESCRIPTION: Shell script to create and update a Git repository with a retracted version for testing purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_pseudo_base.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n# This is not part of the test.\n# Run this to generate and update the repository on vcs-test.golang.org.\n\nset -euo pipefail\n\nrm -rf retract-pseudo\nmkdir retract-pseudo\ncd retract-pseudo\ngit init\n\n# Create the module.\n# Retract v1.0.0 and tag v1.0.0 at the same commit.\n# The module has no unretracted release versions.\ngo mod init vcs-test.golang.org/git/retract-pseudo.git\ngo mod edit -retract v1.0.0\necho 'package p' >p.go\ngit add -A\ngit commit -m 'create module retract-pseudo'\ngit tag v1.0.0\n\n# Commit a trivial change so the default branch does not point to v1.0.0.\ngit mv p.go q.go\ngit commit -m 'trivial change'\n\nzip -r ../retract-pseudo.zip .\ngsutil cp ../retract-pseudo.zip gs://vcs-test/git/retract-pseudo.zip\n```\n\n----------------------------------------\n\nTITLE: Level2x Package Values\nDESCRIPTION: Value definitions for level2x packages in both level1a and level1b hierarchies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_issue_59905.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage level2x\n\nvar Value = \"1a/2x\"\n```\n\nLANGUAGE: go\nCODE:\n```\npackage level2x\n\nvar Value = \"1b/2x\"\n```\n\n----------------------------------------\n\nTITLE: Basic Go Test Command\nDESCRIPTION: Simple command to run Go tests with additional verbosity using the -more flag.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/code4.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo test -more\n```\n\n----------------------------------------\n\nTITLE: Module A Definition\nDESCRIPTION: The go.mod file for module 'm/a', which is one of the modules in the circular dependency chain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_cycle.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule m/a\n```\n\n----------------------------------------\n\nTITLE: Go File with Vendored Import\nDESCRIPTION: A Go file that imports a package 'p' which is available in the vendor directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_vendor.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage subdir\n\nimport _ \"p\"\n```\n\n----------------------------------------\n\nTITLE: MapFS Implementation Methods\nDESCRIPTION: Implementation of Lstat and ReadLink methods for the MapFS type in the testing/fstest package.\nSOURCE: https://github.com/golang/go/blob/master/api/next/49580.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmethod (MapFS) Lstat(string) (fs.FileInfo, error)\nmethod (MapFS) ReadLink(string) (string, error)\n```\n\n----------------------------------------\n\nTITLE: Module Version Information in .info File\nDESCRIPTION: JSON data storing version information for the module, defining it as version 'v1.0.0'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badfile3_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.0.0\"}\n```\n\n----------------------------------------\n\nTITLE: Multi-Package Files\nDESCRIPTION: Two files declaring different packages, with one importing the want package\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_load_err.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage a\n```\n\nLANGUAGE: go\nCODE:\n```\npackage b\n\nimport _ \"m/want\"\n```\n\n----------------------------------------\n\nTITLE: Documentation Link Output Format\nDESCRIPTION: Markdown output showing documentation references transformed into full URLs\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/doclink6.txt#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[encoding/json.Marshal](https://go.dev/pkg/encoding/json/#Marshal) is a doc link, and so is [rsc.io/quote.NonExist](https://go.dev/pkg/rsc.io/quote/#NonExist).\n```\n\n----------------------------------------\n\nTITLE: Empty Main Function Implementation in Go\nDESCRIPTION: A minimal Go program with an empty main function. This serves as a placeholder implementation with no functionality.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_future_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Go module file that defines the 'example' module with Go 1.18 as requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_version_stamping_git.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example\n\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Internal Module Definition\nDESCRIPTION: Go module configuration file for the 'example.com/internal' package that is imported by the main foo package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test_files.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/internal\n```\n\n----------------------------------------\n\nTITLE: Empty Go Module Definition\nDESCRIPTION: A minimal Go module definition for the 'a' module, specifying the module path and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/user/a\n\ngo 1.11\n```\n\n----------------------------------------\n\nTITLE: Listing Dependencies in Go Project\nDESCRIPTION: Uses 'go list -deps' to list all dependencies of the project, including transitive dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_build.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo list -deps\n```\n\n----------------------------------------\n\nTITLE: Package B3 Test with Import\nDESCRIPTION: Test file for package b v0.3.0 which imports example.com/c.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_downgrade.txt#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\npackage b_test\nimport _ \"example.com/c\"\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Replacement\nDESCRIPTION: Specifies a Go module with a requirement and a local replacement for rsc.io/quote/v3.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_replace.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/replace\n\nrequire rsc.io/quote/v3 v3.0.0\nreplace rsc.io/quote/v3 => ./vendor/not-rsc.io/quote/v3\n```\n\n----------------------------------------\n\nTITLE: Defining the Go Toolchain Module Path\nDESCRIPTION: Specifies the full path of the Go toolchain module with version and platform details.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-mipsx.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngolang.org/toolchain@v0.0.1-go1.999testmod.linux-mipsx\n```\n\n----------------------------------------\n\nTITLE: Submodule Implementation\nDESCRIPTION: Implements the main package that imports and uses the main module's functionality.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_install_submodule.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"example.com/m\"\n\nfunc main() {\n    m.M()\n}\n```\n\n----------------------------------------\n\nTITLE: Importing C Package in Go for CGO Test\nDESCRIPTION: Imports the C package and declares a variable of type C.int to ensure CGO functionality in the test project.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cgo_consistent_results.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\npackage cgotest\n\nimport \"C\"\n\nvar _ C.int\n```\n\n----------------------------------------\n\nTITLE: Specific Version Go Module Definition\nDESCRIPTION: Module definition with specific version replacement and requirement for rsc.io/quote.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_readonly.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.16\n\nreplace rsc.io/quote v1.0.0-doesnotexist => ./quote\n\nrequire rsc.io/quote v1.0.0-doesnotexist // indirect\n```\n\n----------------------------------------\n\nTITLE: Module A Configuration with Quote Dependency\nDESCRIPTION: Go module configuration for example.com/a that requires rsc.io/quote v1.5.2 as a dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_why_download_graph.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\n\nmodule example.com/a\n\nrequire \"rsc.io/quote\" v1.5.2\n```\n\n----------------------------------------\n\nTITLE: Go Module R Implementation\nDESCRIPTION: Module R with a simple stub implementation. Includes go.mod file with circular dependency on itself.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune_all.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/r\n\ngo 1.18\n\nrequire example.com/r v1.0.0\n```\n\nLANGUAGE: go\nCODE:\n```\npackage r\n```\n\n----------------------------------------\n\nTITLE: Gofmt Command Shell Script Placeholder\nDESCRIPTION: Shell script that implements a placeholder 'gofmt' command indicating it's not used.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.netbsd-arm64.txt#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: Testing Unused Ambiguous Import\nDESCRIPTION: Builds a package with an unused ambiguous import, which should not result in an error.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_ambiguous_import.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngo build ./importy\n```\n\n----------------------------------------\n\nTITLE: Go Module File with CRLF Line Endings\nDESCRIPTION: A go.mod file with CRLF line endings used to test line ending preservation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retention.txt#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.14\n\nrequire (\n\trsc.io/quote v1.5.2\n\trsc.io/testonly v1.0.0 // indirect\n)\n```\n\n----------------------------------------\n\nTITLE: Sub Package Implementation\nDESCRIPTION: Secondary Go program implementation with empty main function in sub directory\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_buildvcs_auto.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Mock Gofmt Binary Implementation\nDESCRIPTION: A placeholder implementation for the gofmt binary that outputs a message indicating it's unused.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.plan9-amd64.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: Adding Size Methods to bufio Package in Go\nDESCRIPTION: This snippet adds Size methods to both Reader and Writer types in the bufio package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.10.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nmethod (*Reader) Size() int\nmethod (*Writer) Size() int\n```\n\n----------------------------------------\n\nTITLE: Referencing Deprecated Go Parser Function\nDESCRIPTION: Reference to the ParseDir function in the go/parser package that is being marked as deprecated.\nSOURCE: https://github.com/golang/go/blob/master/api/next/71122.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npkg go/parser, func ParseDir\n```\n\n----------------------------------------\n\nTITLE: Go Module Update Target Configuration\nDESCRIPTION: Updated Go module configuration with newer version requirements\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule m\n\ngo 1.16\n\nrequire (\n\trsc.io/quote v1.5.2\n\trsc.io/sampler v1.3.0 // older version than in build list\n)\n```\n\n----------------------------------------\n\nTITLE: Setting GO111MODULE Environment Variable\nDESCRIPTION: Sets the GO111MODULE environment variable to 'on' to enable module-aware mode for Go commands.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query_exclude.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GO111MODULE=on\n```\n\n----------------------------------------\n\nTITLE: RecordHeaderError struct definition in crypto/tls\nDESCRIPTION: Definition of the RecordHeaderError struct in the crypto/tls package for handling TLS record header errors.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.12.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype RecordHeaderError struct, Conn net.Conn\n```\n\n----------------------------------------\n\nTITLE: Empty Go Package File\nDESCRIPTION: An empty package declaration used to test building non-executable packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_output.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage p\n```\n\n----------------------------------------\n\nTITLE: Declaring Syso2 Package\nDESCRIPTION: Declares the syso2 package without any content, serving as a placeholder for the syso file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/link_syso_deps.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\npackage syso2\n```\n\n----------------------------------------\n\nTITLE: Basic Module Download Test\nDESCRIPTION: Downloads a specific version of a module using go mod download command.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query_empty.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\nenv GOSUMDB=off\n\ngo mod download example.com/join@v1.1.0\n```\n\n----------------------------------------\n\nTITLE: Go Module Configuration\nDESCRIPTION: A go.mod file defining the cgoasm module and its Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_asm_error.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule cgoasm\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: CGO Flag Package\nDESCRIPTION: Package with invalid cgo flag directive and want package import\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_load_err.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage cgoflag\n\n// #cgo ʕ◔ϖ◔ʔ:\n\nimport _ \"m/want\"\n```\n\n----------------------------------------\n\nTITLE: Testing Multiple Internal Package Imports\nDESCRIPTION: Tests importing both internal and regular packages from module paths\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_internal.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nimport (\n\t_ \"testinternal4/q/internal/x\"\n\t_ \"testinternal4/q/j\"\n)\n```\n\n----------------------------------------\n\nTITLE: CGO Package with C Integration\nDESCRIPTION: Go package using CGO to access C's INT_MAX constant, demonstrating CGO integration\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_find_nodeps.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage cgopkg\n\n/*\n#include <limits.h>\n*/\nimport \"C\"\n\nfunc F() {\n    println(C.INT_MAX)\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition with Version 1.22\nDESCRIPTION: Main module definition requiring Go 1.22 and depending on example.net/a package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_version_tooold.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example\n\ngo 1.22\n\nrequire example.net/a v0.1.0\n\nreplace example.net/a v0.1.0 => ./a\n```\n\n----------------------------------------\n\nTITLE: Defining Module Requiring Incompatible Version\nDESCRIPTION: Defines a module that requires an incompatible version (v2.0.0+incompatible) of example.com/retract/incompatible.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_incompatible.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/requireincompatible\n\ngo 1.15\n\nrequire example.com/retract/incompatible v2.0.0+incompatible\n```\n\n----------------------------------------\n\nTITLE: Skipping Short Tests in Bash\nDESCRIPTION: Marks the test as one to be skipped when running short tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_verify.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[short] skip\n```\n\n----------------------------------------\n\nTITLE: Testing Byte-Based Character Matching with Unicode\nDESCRIPTION: Tests the special \\C pattern (matches single byte) against Unicode characters. Shows how multi-byte Unicode characters interact with byte-level matching.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_30\n\nLANGUAGE: go\nCODE:\n```\n\"^\\\\C\\\\C\\\\C$\"\n-;-;-;-\n0-3;0-3;0-3;0-3\n\"^(?:^\\\\C\\\\C\\\\C$)$\"\n-;-;-;-\n0-3;0-3;0-3;0-3\n\"^(?:^\\\\C\\\\C\\\\C$)\"\n-;-;-;-\n0-3;0-3;0-3;0-3\n\"(?:^\\\\C\\\\C\\\\C$)$\"\n-;-;-;-\n0-3;0-3;0-3;0-3\n```\n\n----------------------------------------\n\nTITLE: Version Information in .info JSON File\nDESCRIPTION: JSON data containing version information for the toolchain module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.netbsd-arm64.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.999testmod.netbsd-arm64\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module 'issue.56370'\nDESCRIPTION: This `go.mod` file defines a Go module named 'issue.56370' and specifies that it requires Go version 1.20 or later. It serves as the root configuration for the project's dependencies and module path.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_test_race_issue56370.txt#2025-04-22_snippet_1\n\nLANGUAGE: go-mod\nCODE:\n```\n-- go.mod --\nmodule issue.56370\n\ngo 1.20\n```\n\n----------------------------------------\n\nTITLE: Go Toolchain Module Path Declaration\nDESCRIPTION: Specifies the full module path with version for the Go toolchain, including platform targeting for OpenBSD on RISC-V 64-bit architecture.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-riscv64.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngolang.org/toolchain@v0.0.1-go1.999testmod.openbsd-riscv64\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Metadata for `fuzzfail` (Internal)\nDESCRIPTION: This snippet, likely from an internal tooling file (`.mod`), defines metadata for the `example.com/fuzzfail` Go module. It specifies the module path and the required Go version (`1.18`).\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_fuzzfail_v0.2.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: gomod\nCODE:\n```\nmodule example.com/fuzzfail\n\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module 'm'\nDESCRIPTION: This `go.mod` file defines a Go module named 'm' and specifies the Go version `1.16` required for the project. It serves as the root for the helper Go programs (`now`, `mtime`, `before`) used in the test script.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_issue6480.txt#2025-04-22_snippet_1\n\nLANGUAGE: go.mod\nCODE:\n```\n-- go.mod --\nmodule m\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Setting GOWORK Environment Variable to 'off'\nDESCRIPTION: This snippet sets the GOWORK environment variable to 'off' and verifies the change.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_env.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nenv GOWORK='off'\ngo env GOWORK\nstdout 'off'\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Requirements in .mod File\nDESCRIPTION: Module definition file specifying the module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo122_v0.0.1.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule rsc.io/needgo122\ngo 1.22\n```\n\n----------------------------------------\n\nTITLE: Self-Importing Go Package\nDESCRIPTION: Go source file demonstrating an invalid self-import cycle where a package attempts to import itself\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/import_cycle.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage selfimport\n\nimport \"selfimport\"\n```\n\n----------------------------------------\n\nTITLE: Test-Only Package Implementation\nDESCRIPTION: A test-only package that imports example.com/q, creating another test-only dependency path in the module graph.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_all.txt#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\npackage testonly_test\n\nimport _ \"example.com/q\"\n```\n\n----------------------------------------\n\nTITLE: Mock GCC Compiler Script (Shell)\nDESCRIPTION: This shell script acts as a placeholder for the `gcc` compiler on non-Windows systems. If executed, it writes \"ran gcc\" to `bug.txt`. The test is designed to ensure this script is *not* run, verifying that `go build` doesn't insecurely execute compilers found relative to the current directory via PATH.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_path.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n-- p/gcc --\n#!/bin/sh\necho ran gcc >bug.txt\n```\n\n----------------------------------------\n\nTITLE: Adding String method to IsolationLevel in database/sql package in Go\nDESCRIPTION: Adds String method to IsolationLevel type in the database/sql package. The method returns a string.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.11.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nmethod (IsolationLevel) String() string\n```\n\n----------------------------------------\n\nTITLE: Go Workspace Setup Commands\nDESCRIPTION: Commands to initialize a Go workspace and add modules to it. Includes workspace initialization and module addition.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_goproxy_off.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo work init\ngo work use . ./sub\n```\n\n----------------------------------------\n\nTITLE: V2 Package in Nest Vendor\nDESCRIPTION: Package defining v2 constant in the nest/vendor directory that is superseded by sub/vendor.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_complex.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage v2\n\nconst ComplexNestVendorV2 = true\n```\n\n----------------------------------------\n\nTITLE: Running Linting and Formatting Tools\nDESCRIPTION: Command to run ESLint, Stylelint, and Prettier formatting tools on the codebase\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/vendor/golang.org/x/telemetry/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./npm run all\n```\n\n----------------------------------------\n\nTITLE: Intermediate Package Implementation\nDESCRIPTION: Package 'b' that imports and uses the transitive package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_deps.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage b\n\nimport \"transitive\"\n\nfunc F() {\n\ttransitive.F()\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module definition file specifying the module name and its dependency on rsc.io/sampler package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180214005840-23179ee8a569.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule \"rsc.io/quote\"\n\nrequire \"rsc.io/sampler\" v1.3.0\n```\n\n----------------------------------------\n\nTITLE: Correct Modules.txt File\nDESCRIPTION: Defines a correct modules.txt file that includes all required packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_vendor.txt#2025-04-22_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\n# foo.com/internal/bar v1.0.0\n## explicit\nfoo.com/internal/bar/a\nfoo.com/internal/bar/b\n```\n\n----------------------------------------\n\nTITLE: Defining Module A/X\nDESCRIPTION: Specifies the module configuration for the 'example.com/a/x' module used to create ambiguous imports.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_ambiguous_import.txt#2025-04-22_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/a/x\ngo 1.14\n```\n\n----------------------------------------\n\nTITLE: Expected Git Log Output for Verification\nDESCRIPTION: Contains the expected output from the git log command for comparison.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/emptytest.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n7bb9146 initial\n```\n\n----------------------------------------\n\nTITLE: Configuring Doc Link Base URL in JSON\nDESCRIPTION: JSON configuration setting the base URL prefix for documentation links to go.dev/pkg/\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/doclink6.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"DocLinkBaseURL\": \"https://go.dev/pkg/\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Up GOCACHE Environment\nDESCRIPTION: Creates a fresh GOCACHE directory for testing PGO build behavior\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_pgo.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GOCACHE=$WORK/gocache\nmkdir $GOCACHE\n```\n\n----------------------------------------\n\nTITLE: Main Program with Crypto Import\nDESCRIPTION: Simple Go program that imports the sha256 crypto package\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/fips.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\nimport _ \"crypto/sha256\"\nfunc main() {\n}\n```\n\n----------------------------------------\n\nTITLE: Math/Big Float Operations\nDESCRIPTION: Implements arbitrary-precision floating-point arithmetic operations and conversions\nSOURCE: https://github.com/golang/go/blob/master/api/go1.5.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype Float struct {}\n\nfunc NewFloat(x float64) *Float\nfunc ParseFloat(s string, base int, prec uint, mode RoundingMode) (*Float, int, error)\n\ntype RoundingMode uint8\ntype Accuracy int8\n```\n\n----------------------------------------\n\nTITLE: Basic Go Program Implementation\nDESCRIPTION: Simple Go program that prints 'Hi mom!' to demonstrate randomized layout functionality\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/link/testdata/script/randlayout_option.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {\n  println(\"Hi mom!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Gofmt Command Test Script\nDESCRIPTION: Shell script that simulates the gofmt command with a placeholder implementation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-386.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: Module P Main Implementation\nDESCRIPTION: Main package implementation for module 'p' that imports and uses module 'q'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"example.com/q\"\n\nfunc main() {\n\tq.PrintVersion()\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module definition file that specifies the module name as 'M' and Go version 1.21.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_multipkg.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nmodule M\n\ngo 1.21\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module\nDESCRIPTION: This snippet defines a Go module named 'm' with Go version 1.14.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_exit.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nmodule m\ngo 1.14\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines a basic Go module named 'example.com' using Go version 1.14\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_linkshared.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com\n\ngo 1.14\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module definition for the coverblank project specifying Go 1.16 as the required version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_blank_func_decl.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule coverblank\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Empty Go Package File\nDESCRIPTION: An empty Go package file used for testing toolchain behavior with actual Go code.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_exec_toolchain.txt#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\npackage p\n```\n\n----------------------------------------\n\nTITLE: Basic No-op Fuzz Test Implementation in Go\nDESCRIPTION: Demonstrates the minimal implementation of a fuzz test function that does nothing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage noop_fuzz\n\nimport \"testing\"\n\nfunc Fuzz(f *testing.F) {}\n```\n\n----------------------------------------\n\nTITLE: Empty Root Package Example Go File\nDESCRIPTION: A Go file in the emptyroot/pkg directory for testing package resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dot.txt#2025-04-22_snippet_18\n\nLANGUAGE: go\nCODE:\n```\npackage pkg\n```\n\n----------------------------------------\n\nTITLE: Minimal Go Program for Plugin Testing\nDESCRIPTION: A minimal Go program with an empty main function used for testing the plugin build mode functionality.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_plugin_reproducible.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition for Main Test Directory\nDESCRIPTION: Defines a Go module named 'example.com' for the main test directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dot.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com\ngo 1.13\n```\n\n----------------------------------------\n\nTITLE: Failing Go Test Implementation\nDESCRIPTION: Go test file implementing a deliberately failing test case using t.Fail()\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_status.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage x\n\nimport \"testing\"\n\nfunc TestNothingJustFail(t *testing.T) {\n    t.Fail()\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition (Go)\nDESCRIPTION: A simple Go module definition for the cgocover4 package using Go 1.16.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_cgo_extra_file.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule cgocover4\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Deprecated Module Definition\nDESCRIPTION: Module definition file declaring a deprecated Go module with Go 1.17 requirement\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_deprecated_a_v1.9.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Deprecated: in example.com/deprecated/a@v1.9.0\nmodule example.com/deprecated/a\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Workspace\nDESCRIPTION: This snippet defines a go.work file that specifies the Go version to be used in the workspace.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_no_mod_root_issue54419.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\ngo 1.25\n```\n\n----------------------------------------\n\nTITLE: Lowercase Module Definition\nDESCRIPTION: A simple go.mod file that defines the lowercase module example.com/foo.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_collision.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/foo\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Basic Go module definition file specifying the module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_buildvcs.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example\n\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Package Load Error Test\nDESCRIPTION: Test file containing an invalid import to verify package loading error handling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_json.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// A bad import causes a failure directly in cmd/go during import processing.\n\npackage loaderror\n\nimport _ \"x\"\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines the module name and Go version requirement\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/link_external_undef.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule issue47993\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Module B Command Implementation\nDESCRIPTION: Main package in module B's cmd directory importing and using module C\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_regression_hang.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"example.com/c\"\n\nfunc main() {\n\tc.C()\n}\n```\n\n----------------------------------------\n\nTITLE: Import Collision Test Module Definition\nDESCRIPTION: Go module definition file specifying module name and Go version requirement\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_case_collision.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Defining Empty Package for Prerelease Version in Go\nDESCRIPTION: This Go file defines an empty package a for the prerelease version of example.net/a.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_boost.txt#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\npackage a\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module for Race Condition Test\nDESCRIPTION: This snippet defines a Go module named 'testrace' with Go version 1.16.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/testing_issue40908.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule testrace\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Subpackage Definition for Module 'm'\nDESCRIPTION: Go file defining package y as a subpackage within module 'm'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_fs_patterns.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage y\n```\n\n----------------------------------------\n\nTITLE: Test package that imports unsafe\nDESCRIPTION: A Go package that imports the built-in 'unsafe' package, used to test special package imports with the list command.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_patterns.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage useunsafe\nimport _ \"unsafe\"\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module\nDESCRIPTION: Defines a simple Go module named 'm'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version.txt#2025-04-22_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Module B v1.1 Configuration\nDESCRIPTION: Module B version 1.1's go.mod file with updated dependency requirements\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patchbound.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/b\n\ngo 1.16\n\nrequire example.net/a v0.2.0\n```\n\n----------------------------------------\n\nTITLE: Go Helper Utility for File Timestamp Modification\nDESCRIPTION: A Go program that modifies the timestamps of files to appear older by a specified duration. This utility is used in the test script to test cache invalidation based on file modification times.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_cache_inputs.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\t\"time\"\n)\n\nfunc main() {\n\td, err := time.ParseDuration(os.Args[1])\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tpath := os.Args[2]\n\told := time.Now().Add(-d)\n\terr = os.Chtimes(path, old, old)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Quote Package Functions in Go\nDESCRIPTION: Comprehensive test suite for the quote package that verifies each function returns the expected string. Tests include checks for Hello, Glass, Go, and Opt functions with environment setup to ensure consistent results.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709162816-fe488b867524.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage quote\n\nimport (\n\t\"os\"\n\t\"testing\"\n)\n\nfunc init() {\n\tos.Setenv(\"LC_ALL\", \"en\")\n}\n\nfunc TestHello(t *testing.T) {\n\thello := \"Hello, world.\"\n\tif out := Hello(); out != hello {\n\t\tt.Errorf(\"Hello() = %q, want %q\", out, hello)\n\t}\n}\n\nfunc TestGlass(t *testing.T) {\n\tglass := \"I can eat glass and it doesn't hurt me.\"\n\tif out := Glass(); out != glass {\n\t\tt.Errorf(\"Glass() = %q, want %q\", out, glass)\n\t}\n}\n\nfunc TestGo(t *testing.T) {\n\tgo1 := \"Don't communicate by sharing memory, share memory by communicating.\"\n\tif out := Go(); out != go1 {\n\t\tt.Errorf(\"Go() = %q, want %q\", out, go1)\n\t}\n}\n\nfunc TestOpt(t *testing.T) {\n\topt := \"If a program is too slow, it must have a loop.\"\n\tif out := Opt(); out != opt {\n\t\tt.Errorf(\"Opt() = %q, want %q\", out, opt)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Go Package Implementation\nDESCRIPTION: An empty Go package declaration for package 'a'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage a\n```\n\n----------------------------------------\n\nTITLE: Defining Test Go Source File in GOROOT/src (Go)\nDESCRIPTION: Defines the content of `$WORK/goroot/src/foo.go`. This is a minimal Go file containing only a package declaration (`package foo`). Its presence directly within `$GOROOT/src` is used to test how `go list` handles such files.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_gofile_in_goroot.txt#2025-04-22_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n-- $WORK/goroot/src/foo.go --\n```\n\nLANGUAGE: go\nCODE:\n```\npackage foo\n```\n\n----------------------------------------\n\nTITLE: Module Definition with Broken Hash\nDESCRIPTION: Module definition file intentionally modified with a comment to break hash verification.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badsum_v1.0.1.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule \"rsc.io/badsum\"\n# break hash\n```\n\n----------------------------------------\n\nTITLE: Empty Package Declaration\nDESCRIPTION: Basic Go package declaration without implementation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_deprecated_a_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage a\n```\n\n----------------------------------------\n\nTITLE: Latest Version Go Module Definition\nDESCRIPTION: Module definition with replacement and indirect requirement for rsc.io/quote.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_readonly.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.16\n\nreplace rsc.io/quote => ./quote\n\nrequire rsc.io/quote v1.5.2 // indirect\n```\n\n----------------------------------------\n\nTITLE: Defining Empty Package x for Module\nDESCRIPTION: Creates an empty package x for the module. This simply declares the package without any functionality to establish the module's root package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_doc.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage x\n```\n\n----------------------------------------\n\nTITLE: Go Module with Redundant Dependencies\nDESCRIPTION: Module definition with explicit and indirect dependencies\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_readonly.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.16\n\nrequire (\n\trsc.io/quote v1.5.2\n\trsc.io/sampler v1.3.0 // indirect\n\trsc.io/testonly v1.0.0 // indirect\n)\n```\n\n----------------------------------------\n\nTITLE: CGO Integration Implementation\nDESCRIPTION: Package implementing C code integration using cgo, including a C function that returns 42.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/toolexec.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage withcgo\n\n// int fortytwo()\n// {\n//     return 42;\n//}\nimport \"C\"\n```\n\n----------------------------------------\n\nTITLE: Basic Compilation Error Test\nDESCRIPTION: Test file containing an undefined variable reference to verify basic compilation error reporting.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_json.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage compileerror\n\nconst x = y\n```\n\n----------------------------------------\n\nTITLE: Adding Iterator Methods to go/types Package in Go\nDESCRIPTION: New methods returning iterators for various types in the go/types package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_13\n\nLANGUAGE: Go\nCODE:\n```\nfunc (*Interface) EmbeddedTypes() iter.Seq[Type]\nfunc (*Interface) ExplicitMethods() iter.Seq[*Func]\nfunc (*Interface) Methods() iter.Seq[*Func]\nfunc (*MethodSet) Methods() iter.Seq[*Selection]\nfunc (*Named) Methods() iter.Seq[*Func]\nfunc (*Scope) Children() iter.Seq[*Scope]\nfunc (*Struct) Fields() iter.Seq[*Var]\nfunc (*Tuple) Variables() iter.Seq[*Var]\nfunc (*TypeList) Types() iter.Seq[Type]\nfunc (*TypeParamList) TypeParams() iter.Seq[*TypeParam]\nfunc (*Union) Terms() iter.Seq[*Term]\n```\n\n----------------------------------------\n\nTITLE: Specifying Module Version Info (`.info`) (JSON)\nDESCRIPTION: This JSON snippet represents the version information associated with the Go module, typically found in a `.info` file within a module proxy or local cache. It explicitly declares the module's version as `\"v1.0.0-bad\"`, which is relevant in the context of retraction.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_pseudo_v1.0.0-bad.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.0.0-bad\"}\n```\n\n----------------------------------------\n\nTITLE: Testing Retracted Modules in Vendoring Mode using Go\nDESCRIPTION: This snippet tests the behavior of 'go list -retracted' when vendoring is enabled in Go. It expects an error message indicating that 'go list -retracted' cannot be used with vendoring.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_retract.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n# 'go list -mod\\u003dvendor -retracted' reports an error.\\ngo mod vendor\\n! go list -m -retracted -mod\\u003dvendor\\nstderr '^go list -retracted cannot be used when vendoring is enabled$'\\nrm vendor\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition for Quote Package\nDESCRIPTION: Go module file that specifies the module name and its dependencies. The quote package depends on rsc.io/quote/v2 v2.0.1 and rsc.io/sampler v1.3.0 for its implementation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709162816-fe488b867524.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule rsc.io/quote\n\nrequire (\n\trsc.io/quote/v2 v2.0.1\n\trsc.io/sampler v1.3.0\n)\n```\n\n----------------------------------------\n\nTITLE: Describing Future Package Addition in README (Text)\nDESCRIPTION: This plain text snippet from a README file states the intention to add a subpackage named `example.net/pkgadded/subpkg` in the upcoming version v1.2.0 of the module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_pkgadded_v1.1.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nWe will add the package example.net/pkgadded/subpkg in v1.2.0.\n```\n\n----------------------------------------\n\nTITLE: Testing Quote Functions in Go\nDESCRIPTION: Test suite for the quote package that verifies each function returns the expected string. The tests use the standard Go testing package and set the LC_ALL environment variable to ensure consistent behavior across different environments.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v2_v2.0.1.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Copyright 2018 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\npackage quote\n\nimport (\n\t\"os\"\n\t\"testing\"\n)\n\nfunc init() {\n\tos.Setenv(\"LC_ALL\", \"en\")\n}\n\nfunc TestHello(t *testing.T) {\n\thello := \"Hello, world.\"\n\tif out := Hello(); out != hello {\n\t\tt.Errorf(\"Hello() = %q, want %q\", out, hello)\n\t}\n}\n\nfunc TestGlass(t *testing.T) {\n\tglass := \"I can eat glass and it doesn't hurt me.\"\n\tif out := Glass(); out != glass {\n\t\tt.Errorf(\"Glass() = %q, want %q\", out, glass)\n\t}\n}\n\nfunc TestGo(t *testing.T) {\n\tgo1 := \"Don't communicate by sharing memory, share memory by communicating.\"\n\tif out := Go(); out != go1 {\n\t\tt.Errorf(\"Go() = %q, want %q\", out, go1)\n\t}\n}\n\nfunc TestOpt(t *testing.T) {\n\topt := \"If a program is too slow, it must have a loop.\"\n\tif out := Opt(); out != opt {\n\t\tt.Errorf(\"Opt() = %q, want %q\", out, opt)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining File and Socket Functions for OpenBSD in Go\nDESCRIPTION: Function declarations for file control and socket operations on OpenBSD. These functions are used to manipulate file descriptors and perform socket communications.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_42\n\nLANGUAGE: Go\nCODE:\n```\nfunc FcntlFlock(uintptr, int, *Flock_t) error\nfunc SendmsgN(int, []uint8, []uint8, Sockaddr, int) (int, error)\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module\nDESCRIPTION: This snippet shows the contents of a go.mod file, defining the module name for the 'a' directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_env.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/a\n```\n\n----------------------------------------\n\nTITLE: Defining Unused Test-Related Package 'x/otherroot/testonly' (Go)\nDESCRIPTION: Defines an empty package `x/otherroot/testonly` within the `x` module. This package exists in the file structure but is not imported by any code or test file in this specific test setup, serving potentially as a negative control or for future test variations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_notall.txt#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n-- x/otherroot/testonly/testonly.go --\npackage testonly\n```\n\n----------------------------------------\n\nTITLE: Go Checksum File\nDESCRIPTION: This snippet shows the go.sum file content, containing the checksum for the dependent module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_trimpath.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nexample.com/stack v1.0.0 h1:IEDLeew5NytZ8vrgCF/QVem3H3SR3QMttdu9HfJvk9I=\nexample.com/stack v1.0.0/go.mod h1:7wFEbaV5e5O7wJ8aBdqQOR//UXppm/pwnwziMKViuI4=\n```\n\n----------------------------------------\n\nTITLE: Defining Go File with Non-Existent Import\nDESCRIPTION: This snippet defines a Go file that imports a non-existent package 'x', which will cause a compilation error.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_setup_error.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage bad\n\nimport \"x\"\n```\n\n----------------------------------------\n\nTITLE: Module Version Information\nDESCRIPTION: JSON configuration specifying the module version as v2.0.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_downgrade_v2.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v2.0.0\"}\n```\n\n----------------------------------------\n\nTITLE: Listing Excluded Module Version\nDESCRIPTION: Uses 'go list' command with a custom modfile to list a specific excluded version of the rsc.io/quote module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query_exclude.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngo list -modfile=go.exclude.mod -m rsc.io/quote@v1.5.0\nstdout '^rsc.io/quote v1.5.0$'\n```\n\n----------------------------------------\n\nTITLE: Minimal Go Module Definition\nDESCRIPTION: A simple Go module file that defines a module named 'x'. This provides the module context for the case sensitivity tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_case.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule x\n```\n\n----------------------------------------\n\nTITLE: Package Definition for Import Test\nDESCRIPTION: Simple package definition used in testing case-sensitive import collisions\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_case_collision.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage pkg\n```\n\n----------------------------------------\n\nTITLE: Go Build Command with Empty Output File\nDESCRIPTION: Shell command demonstrating building a Go program with output directed to an existing empty file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_compile_tempfile.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo build -o empty-file$GOEXE main.go\n```\n\n----------------------------------------\n\nTITLE: Minimal Go Program for Testing\nDESCRIPTION: Defines a minimal Go program with an empty main function for testing purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_acl_windows.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\npackage main\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Executing Invalid Go Command\nDESCRIPTION: This command shows how the Go CLI responds when provided with an unknown command 'asdf'. The command is expected to fail and output an error message to stderr.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/go_badcmd.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n! go asdf\nstderr '^go asdf: unknown command'\n```\n\n----------------------------------------\n\nTITLE: Go Toolchain Version Information in .info File\nDESCRIPTION: JSON object in the .info file specifying the version of the Go toolchain module, matching the version in the module path.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-riscv64.txt#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.999testmod.openbsd-riscv64\"}\n```\n\n----------------------------------------\n\nTITLE: Mock Go Version Executable Implementation\nDESCRIPTION: A Go program that simulates a Go toolchain executable, used for testing PATH-based toolchain resolution. Prints its own name and exits with status 1 to prevent accidental real usage.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_godebug_trace.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strings\"\n)\n\nfunc main() {\n\texe, _ := os.Executable()\n\tname := filepath.Base(exe)\n\tname = strings.TrimSuffix(name, \".exe\")\n\tfmt.Fprintf(os.Stderr, \"running %s from PATH\\n\", name)\n\tos.Exit(1) // fail in case we are running this accidentally (like in \"go mod edit\")\n}\n```\n\n----------------------------------------\n\nTITLE: Module A v1.0.0 Configuration\nDESCRIPTION: Go module configuration for example.com/a v1.0.0\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/a\ngo 1.22\n\nrequire example.com/b v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Basic Go Test Function\nDESCRIPTION: Minimal Go test file containing an empty test function TestF. Used to verify module testing behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_go111module_cache.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"testing\"\n\nfunc TestF(t *testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Requirements (go.mod)\nDESCRIPTION: Module definition file that specifies the module path and its dependencies. It requires rsc.io/quote/v3 v3.0.0 and rsc.io/sampler v1.3.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180710144737-5d9f230bcfba.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule rsc.io/quote\n\nrequire (\n\trsc.io/quote/v3 v3.0.0\n\trsc.io/sampler v1.3.0\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Quote Package in Go\nDESCRIPTION: This snippet defines the quote package, which collects pithy sayings. It imports the v3 version of the same package and provides functions to return different types of quotes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709162918-a91498bed0a7.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// Package quote collects pithy sayings.\npackage quote // import \"rsc.io/quote\"\n\nimport \"rsc.io/quote/v3\"\n\n// Hello returns a greeting.\nfunc Hello() string {\n\treturn quote.HelloV3()\n}\n\n// Glass returns a useful phrase for world travelers.\nfunc Glass() string {\n\t// See http://www.oocities.org/nodotus/hbglass.html.\n\treturn quote.GlassV3()\n}\n\n// Go returns a Go proverb.\nfunc Go() string {\n\treturn quote.GoV3()\n}\n\n// Opt returns an optimization truth.\nfunc Opt() string {\n\t// Wisdom from ken.\n\treturn quote.OptV3()\n}\n```\n\n----------------------------------------\n\nTITLE: Test File with HTTP Import\nDESCRIPTION: This test file imports the 'net/http' package and defines a minimal test function. It's used to verify that test-only imports are correctly reported by 'go list'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/std_vendor.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage x\nimport \"testing\"\nimport _ \"net/http\"\nfunc Test(t *testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Package Depends-on-a Source\nDESCRIPTION: Package that depends on package a which contains illegal imports.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_internal.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// A package that depends on a package with a bad import\npackage depends\n\nimport (\n  _ \"a\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Test Dependencies\nDESCRIPTION: This snippet defines a Go module with test dependencies in the go.mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_of_test_dep.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/a\n\ngo 1.15\n\nrequire example.com/b v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module (go.mod)\nDESCRIPTION: This `go.mod` file declares a Go module named `m`. It serves as the root of the project structure containing packages `a`, `b`, `c`, `d`, and `main`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_undef.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n-- go.mod --\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Using cgo CFLAGS and LDFLAGS in Go with main.go\nDESCRIPTION: Implements a minimal Go program that demonstrates the specification of cgo CFLAGS and LDFLAGS via comments above an import of the 'C' pseudo-package. CFLAGS sets the '-flto' flag for Link Time Optimization, while LDFLAGS attempts to link against 'bad.dylib' using the '-lto_library' flag, which causes a build error ('invalid flag in #cgo LDFLAGS: -lto_library'). This setup requires cgo and a supported C toolchain; it is subject to platform-specific constraints and may fail during build if invalid flags are used, as shown in the attached stderr message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/darwin_lto_library_ldflag.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n-- main.go --\\npackage main\\n\\n// #cgo CFLAGS: -flto\\n// #cgo LDFLAGS: -lto_library bad.dylib\\nimport \\\"C\\\"\\n\\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Trivial Fuzzing Test Function in Go\nDESCRIPTION: A minimal Go fuzzing test function implementation that takes a byte slice as input. This function is used as the target for the fuzzing tests in the shell commands above.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_profile_flags.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage example\n\nimport \"testing\"\n\nfunc FuzzTrivial(f *testing.F) {\n\tf.Fuzz(func(t *testing.T, _ []byte) {})\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Minimal Go module definition file declaring module name 'test'\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_gomod_in_gopath.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule test\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module declaration for the profiling test package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_write_profiles_on_timeout.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule profiling\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Environment and Test Configuration Script\nDESCRIPTION: Shell script configuration for running Go tests with modules disabled and expected test outcomes specified\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_status.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=off\n\n! go test x y\nstdout ^FAIL\\s+x\nstdout ^ok\\s+y\nstdout (?-m)FAIL\\n$\n```\n\n----------------------------------------\n\nTITLE: Specifying Module Version Metadata (JSON)\nDESCRIPTION: This JSON object contains metadata about the module, indicating its version is `v1.0.0`. This information is often used by Go's module proxy protocol or other tooling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_badchain_b_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.0.0\"}\n```\n\n----------------------------------------\n\nTITLE: Empty Go Package Declaration\nDESCRIPTION: Declares an empty package named 'p'. This is a minimal Go source file that serves as a package definition placeholder.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_issue_65528.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage p\n```\n\n----------------------------------------\n\nTITLE: Linux Build Tag and Tagged Import - Go\nDESCRIPTION: This Go file includes a '+build linux' tag, so it is only built when GOOS=linux. It defines package p and performs a side-effect import of tag. Depends on 'tag' being resolvable. Takes no parameters. Limitation: ignored except in linux builds.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_constraints.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// +build linux\n\npackage p\n\nimport _ \"tag\"\n\n```\n\n----------------------------------------\n\nTITLE: File Operations Functions in syscall Package for NetBSD ARM64\nDESCRIPTION: These functions provide file system operations including opening, reading, writing, seeking, and closing files. They also include functions for retrieving file information and manipulating directory entries.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_73\n\nLANGUAGE: Go\nCODE:\n```\nfunc Futimes(int, []Timeval) error\nfunc Getdirentries(int, []uint8, *uintptr) (int, error)\nfunc Lstat(string, *Stat_t) error\nfunc Stat(string, *Stat_t) error\nfunc Open(string, int, uint32) (int, error)\nfunc Read(int, []uint8) (int, error)\nfunc Write(int, []uint8) (int, error)\nfunc Pread(int, []uint8, int64) (int, error)\nfunc Pwrite(int, []uint8, int64) (int, error)\nfunc Seek(int, int64, int) (int64, error)\nfunc Truncate(string, int64) error\nfunc ReadDirent(int, []uint8) (int, error)\nfunc ParseDirent([]uint8, int, []string) (int, int, []string)\n```\n\n----------------------------------------\n\nTITLE: Testing Go Runtime Debugging Annotations\nDESCRIPTION: This program reads the process memory map and checks for Go runtime annotations. It's designed to fail if it finds annotations when the debug decoration is set to 1.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/godebug_decoratemappings_comment.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n//go:debug decoratemappings=1\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tb, err := os.ReadFile(\"/proc/self/maps\")\n\tif err != nil {\n\t\tlog.Fatalf(\"Error reading: %v\", err)\n\t}\n\n\tif strings.Contains(string(b), \"[anon: Go:\") {\n\t\tlog.Printf(\"/proc/self/maps:\\n%s\", string(b))\n\t\tlog.Fatalf(\"/proc/self/maps contains Go annotation\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CGO Test Module in Go\nDESCRIPTION: Defines the Go module for the CGO test project, specifying the module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cgo_consistent_results.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nmodule cgotest\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Testing Internal Package Import\nDESCRIPTION: Tests that importing an internal package from outside its allowed scope results in an error on the importing package. Verifies that other/internal/p cannot be imported from unauthorized locations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_import_err.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage importinternal\nimport \"other/internal/p\"\n```\n\n----------------------------------------\n\nTITLE: CGO Handle Type Definition\nDESCRIPTION: Defines the Handle type and associated methods for CGO operations across multiple platforms.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.17.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype Handle uintptr\n\nfunc NewHandle(interface{}) Handle\nmethod (Handle) Delete()\nmethod (Handle) Value() interface{}\n```\n\n----------------------------------------\n\nTITLE: Module Version Info JSON\nDESCRIPTION: JSON configuration file specifying the module version information\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badzip_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.0.0\"}\n```\n\n----------------------------------------\n\nTITLE: Module Definition with Future Version Exclusion\nDESCRIPTION: Module definition excluding a future version while requiring a current version of rsc.io/quote.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_require_exclude.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule x\n\ngo 1.13\n\nexclude rsc.io/quote v1.5.2\nrequire rsc.io/quote v1.5.1\n```\n\n----------------------------------------\n\nTITLE: Go Module Checksums\nDESCRIPTION: This go.sum file contains the checksums for the module dependencies, including 'golang.org/x/text', 'rsc.io/quote', and 'rsc.io/sampler'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_file_proxy.txt#2025-04-22_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\ngolang.org/x/text v0.0.0-20170915032832-14c0d48ead0c h1:pvCbr/wm8HzDD3fVywevekufpn6tCGPY3spdHeZJEsw=\ngolang.org/x/text v0.0.0-20170915032832-14c0d48ead0c/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\nrsc.io/quote v1.5.1 h1:ZE3OgnVGrhXtFkGw90HwW992ZRqcdli/33DLqEYsoxA=\nrsc.io/quote v1.5.1/go.mod h1:LzX7hefJvL54yjefDEDHNONDjII0t9xZLPXsUe+TKr0=\nrsc.io/sampler v1.3.0 h1:HLGR/BgEtI3r0uymSP/nl2uPLsUnNJX8toRyhfpBTII=\nrsc.io/sampler v1.3.0/go.mod h1:T1hPZKmBbMNahiBKFy5HrXp6adAjACjK9JXDnKaTXpA=\n```\n\n----------------------------------------\n\nTITLE: Alternate GOROOT Builtin Package\nDESCRIPTION: Defines a builtin package in the alternate GOROOT for testing package resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dot.txt#2025-04-22_snippet_20\n\nLANGUAGE: go\nCODE:\n```\npackage builtin\n```\n\n----------------------------------------\n\nTITLE: Empty Go Package File\nDESCRIPTION: This is an empty Go package file, likely used as a placeholder in the test setup.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline_too_new.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\npackage p\n```\n\n----------------------------------------\n\nTITLE: Module B v0.2.0 Definition\nDESCRIPTION: Module definition and implementation for example.net/b v0.2.0 with dependency on example.net/a\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_wild.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/b\n\ngo 1.16\n\nrequire example.net/a v0.2.0\n```\n\nLANGUAGE: go\nCODE:\n```\npackage b\n```\n\nLANGUAGE: go\nCODE:\n```\npackage b_test\n\nimport _ \"example.net/a\"\n```\n\n----------------------------------------\n\nTITLE: Testing Go List Command Error Reporting\nDESCRIPTION: Test script that verifies error reporting behavior when parsing invalid Go files. Tests both module-aware and traditional modes using the go list command with -e and -json flags.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_err_stack.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=off\ncd sandbox/foo\ngo list -e -json .\nstdout '\"sandbox/foo\"'\nstdout '\"sandbox/bar\"'\nstdout '\"Pos\": \"..(/|\\\\\\\\)bar(/|\\\\\\\\)bar.go:1:1\"'\nstdout '\"Err\": \"expected \\'package\\', found ackage\"'\n\nenv GO111MODULE=on\ngo list -e -json .\nstdout '\"sandbox/foo\"'\nstdout '\"sandbox/bar\"'\nstdout '\"Pos\": \"..(/|\\\\\\\\)bar(/|\\\\\\\\)bar.go:1:1\"'\nstdout '\"Err\": \"expected \\'package\\', found ackage\"'\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Command Failure States with Missing Dependencies\nDESCRIPTION: This script tests how 'go mod tidy' and 'go mod vendor' handle missing dependencies. It verifies error messages for direct and indirect dependencies that can't be found, and confirms that these commands fail without modifying go.mod or creating vendor directories when dependencies are missing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_e.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp go.mod go.mod.orig\n\n\n# If a dependency cannot be resolved, 'go mod tidy' fails with an error message\n# explaining the problem and does not update the go.mod file.\n# TODO(bcmills): Ideally, with less redundancy than these error messages!\n\n! go mod tidy\n\nstderr '^go: example.com/untidy imports\\n\\texample.net/directnotfound: cannot find module providing package example.net/directnotfound: module example.net/directnotfound: reading http://.*: 404 Not Found$'\n\nstderr '^go: example.com/untidy imports\\n\\texample.net/m imports\\n\\texample.net/indirectnotfound: cannot find module providing package example.net/indirectnotfound: module example.net/indirectnotfound: reading http://.*: 404 Not Found$'\n\nstderr '^go: example.com/untidy tested by\\n\\texample.com/untidy.test imports\\n\\texample.net/directtestnotfound: cannot find module providing package example.net/directtestnotfound: module example.net/directtestnotfound: reading http://.*: 404 Not Found$'\n\nstderr '^go: example.com/untidy imports\\n\\texample.net/m tested by\\n\\texample.net/m.test imports\\n\\texample.net/indirecttestnotfound: cannot find module providing package example.net/indirecttestnotfound: module example.net/indirecttestnotfound: reading http://.*: 404 Not Found$'\n\ncmp go.mod.orig go.mod\n\n\n# If a dependency cannot be resolved, 'go mod vendor' fails with an error message\n# explaining the problem, does not update the go.mod file, and does not create\n# the vendor directory.\n\n! go mod vendor\n\nstderr '^go: example.com/untidy imports\\n\\texample.net/directnotfound: no required module provides package example.net/directnotfound; to add it:\\n\\tgo get example.net/directnotfound$'\n\nstderr '^go: example.com/untidy imports\\n\\texample.net/m: module example.net/m provides package example.net/m and is replaced but not required; to add it:\\n\\tgo get example.net/m@v0.1.0$'\n\nstderr '^go: example.com/untidy tested by\\n\\texample.com/untidy.test imports\\n\\texample.net/directtestnotfound: no required module provides package example.net/directtestnotfound; to add it:\\n\\tgo get example.net/directtestnotfound$'\n\n! stderr 'indirecttestnotfound'  # Vendor prunes test dependencies.\n\ncmp go.mod.orig go.mod\n! exists vendor\n```\n\n----------------------------------------\n\nTITLE: Expected Modules.txt Format Sample\nDESCRIPTION: A sample of the expected content for the vendor/modules.txt file showing correct workspace module references with explicit markings and replacements.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_modules_txt_consistent.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n## workspace\n# example.com/p v1.0.0 => ./p\n## explicit; go 1.21\n# example.com/q v1.0.0 => ./q\n## explicit; go 1.21\n```\n\n----------------------------------------\n\nTITLE: Validating go list Behavior for Proxy-Resolved Latest Version - Shell\nDESCRIPTION: With the Go proxy and module cache set to local disk, this snippet runs 'go list' to resolve the latest version of the module and checks that the output deliberately omits the 'Origin' field. This tests that, when metadata is incomplete (because only one commit is available), the tooling does not emit partial origin details. Assertions check both presence and absence of expected fields. No external inputs beyond the local proxy are required.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_issue61423.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# If we resolve the \"latest\" version query using a proxy,\n# it is only going to have Git origin information about the one\n# commit — not the other tags that would go into resolving\n# the underlying version list.\n# 'go list' should not emit the partial information,\n# since it isn't enough to reconstruct the result.\n\ngo list -m -json vcs-test.golang.org/git/issue61415.git@latest\ncp stdout proxy-latest.json\nstdout '\"Version\": \"v0.0.0-20231114180000-08a4fa6bb9c0\"'\n! stdout '\"Origin\":'\n\n```\n\n----------------------------------------\n\nTITLE: Simple Go Package for Build Testing\nDESCRIPTION: A minimal Go package file used as a test subject for the 'go build' command in the test script.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_relative_tmpdir.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage a\n```\n\n----------------------------------------\n\nTITLE: Minimal Go Program for Build Testing\nDESCRIPTION: This is a simple Go program within the 'main' package. Its 'main' function initializes an integer slice, creates a pointer to a two-element array derived from a sub-slice of the original slice, and prints the second element of that array using `println`. This program serves as the compilation target for the Go build tests in the accompanying script.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_gcflags_order.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n-- m/main.go --\npackage main\n\nfunc main() {\n    var s = []int{1, 2, 3}\n    var pa = (*[2]int)(s[1:])\n    println(pa[1])\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid JSON Module Info\nDESCRIPTION: Example of an invalid JSON response from the proxy for version info.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query_empty.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nThis file is not valid JSON.\n```\n\n----------------------------------------\n\nTITLE: Testing Go Fuzzing Minimization with Invalid Parameters\nDESCRIPTION: Tests that validate the behavior of Go's fuzzing minimization feature when provided with invalid parameters like negative duration or negative iteration counts. The test ensures proper error messages are displayed when invalid parameters are provided.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_minimize.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Test that fuzzminimizetime cannot be negative seconds\n! go test -fuzz=FuzzMinimizerRecoverable -run=FuzzMinimizerRecoverable -fuzztime=10000x -fuzzminimizetime=-1ms .\n! stdout '^ok'\n! stdout 'contains a non-zero byte'\nstdout 'invalid duration'\nstdout FAIL\n\n# Test that fuzzminimizetime cannot be negative times\n! go test -fuzz=FuzzMinimizerRecoverable -run=FuzzMinimizerRecoverable -fuzztime=10000x -fuzzminimizetime=-1x .\n! stdout '^ok'\n! stdout 'contains a non-zero byte'\nstdout 'invalid count'\nstdout FAIL\n```\n\n----------------------------------------\n\nTITLE: Testing Internal Package Visibility in Go Modules\nDESCRIPTION: A bash script that tests how the Go toolchain handles internal package visibility in different contexts. It verifies access rules when testing from the same directory, from the vendor directory, and from outside the module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test_files.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=on\n\ncd foo\n\n# Testing an explicit source file should use the same import visibility as the\n# package in the same directory.\ngo list -test -deps\ngo list -test -deps foo_test.go\n\n# If the file is inside the main module's vendor directory, it should have\n# visibility based on the vendor-relative import path.\nmkdir vendor/example.com/foo\ncp foo_test.go vendor/example.com/foo\ngo list -test -deps vendor/example.com/foo/foo_test.go\n\n# If the file is outside the main module entirely, it should be treated as outside.\ncp foo_test.go ../foo_test.go\n! go list -test -deps ../foo_test.go\nstderr 'use of internal package'\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines a Go module named 'example.com/foo' using Go version 1.20\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_issue_56509.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/foo\n\ngo 1.20\n```\n\n----------------------------------------\n\nTITLE: Incomplete Go Module Dependencies\nDESCRIPTION: Incomplete go.sum file missing the hash for rsc.io/quote v1.5.2 to test error handling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_missing_ziphash.txt#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ngolang.org/x/text v0.0.0-20170915032832-14c0d48ead0c h1:pvCbr/wm8HzDD3fVywevekufpn6tCGPY3spdHeZJEsw=\ngolang.org/x/text v0.0.0-20170915032832-14c0d48ead0c/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\nrsc.io/quote v1.5.2/go.mod h1:LzX7hefJvL54yjefDEDHNONDjII0t9xZLPXsUe+TKr0=\nrsc.io/sampler v1.3.0 h1:HLGR/BgEtI3r0uymSP/nl2uPLsUnNJX8toRyhfpBTII=\nrsc.io/sampler v1.3.0/go.mod h1:T1hPZKmBbMNahiBKFy5HrXp6adAjACjK9JXDnKaTXpA=\nrsc.io/testonly v1.0.0 h1:K/VWHdO+Jv7woUXG0GzVNx1czBXUt3Ib1deaMn+xk64=\nrsc.io/testonly v1.0.0/go.mod h1:OqmGbIFOcF+XrFReLOGZ6BhMM7uMBiQwZsyNmh74SzY=\n```\n\n----------------------------------------\n\nTITLE: Test Environment Setup Commands\nDESCRIPTION: Shell commands to set up the test environment in GOPATH mode and execute various go list commands to test dependency handling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_bad_import.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=off\n[short] skip\n\nenv GO111MODULE=off\ncd example.com\n```\n\n----------------------------------------\n\nTITLE: Implementing Parallel Subtests in Go\nDESCRIPTION: This Go code defines a test function with nested subtests. The outer subtest 'Sub' runs in parallel and waits for a signal from a channel before executing its nested subtest 'Nested'. This structure demonstrates Go's capability for parallel test execution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_only_subtests_parallel.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage standalone_parallel_sub_test\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\tch := make(chan bool, 1)\n\tt.Run(\"Sub\", func(t *testing.T) {\n\t\tt.Parallel()\n\t\t<-ch\n\t\tt.Run(\"Nested\", func(t *testing.T) {})\n\t})\n\t// Ensures that Sub will finish after its t.Run call already returned.\n\tch <- true\n}\n```\n\n----------------------------------------\n\nTITLE: Building with Internal CGO and Checking for External Linking\nDESCRIPTION: This segment tests building a program that uses internal CGO components. It modifies CGO_CFLAGS with various flags to observe when 'preferlinkext' is included in stderr, signalling the need for external linking. Notable flags include '-flto', '-fplugin', and '-fprofile-instr-generate', all of which prompt external linking.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_suspect_flag_force_external.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo build -x -n -o dummy.exe ./usesInternalCgo\n! stderr preferlinkext\nenv CGO_CFLAGS=-flto\n\n```\n\n----------------------------------------\n\nTITLE: Rational Number to Float32 Conversion - math/big Package - Go\nDESCRIPTION: Adds a Float32() method to the math/big Rat (rational number) type, enabling conversion of a Rat value to float32. The return is a tuple (float32, bool), where bool indicates whether the value is exact. Prerequisite: importing math/big, creating a Rat value; result may be inexact due to rounding.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_16\n\nLANGUAGE: Go\nCODE:\n```\nmethod (*Rat) Float32() (float32, bool)\n```\n\n----------------------------------------\n\nTITLE: NetBSD Terminal Control Constants\nDESCRIPTION: Constants for terminal control operations including echo settings and character handling modes.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_17\n\nLANGUAGE: Go\nCODE:\n```\nconst ECHO = 8\nconst ECHOCTL = 64\nconst ECHOE = 2\nconst ECHOK = 4\nconst ECHOKE = 1\nconst ECHONL = 16\nconst ECHOPRT = 32\n```\n\n----------------------------------------\n\nTITLE: Basic Go Module with CGO Import\nDESCRIPTION: A simple Go module file that establishes the module name for the test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_path_space.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Git Commit for Go Project\nDESCRIPTION: Adds the main.go file to the repository, creates the initial commit with a message, and renames the default branch to 'master'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/mainonly.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nat 2019-09-05T14:07:43-04:00\ngit add main.go\ngit commit -a -m 'add main.go'\ngit branch -m master\n```\n\n----------------------------------------\n\nTITLE: Import Error Test\nDESCRIPTION: Test file that imports a package with compilation errors to verify error attribution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_json.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport _ \"m/compileerror\"\n```\n\n----------------------------------------\n\nTITLE: Running Go Get Command for Module Resolution Test\nDESCRIPTION: Executes 'go get' command with verbose output to test module resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_direct.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngo get -v\n```\n\n----------------------------------------\n\nTITLE: Language Package Import\nDESCRIPTION: Go package that imports the golang.org/x/text/language package as a blank import.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_local.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage uselang\nimport _ \"golang.org/x/text/language\"\n```\n\n----------------------------------------\n\nTITLE: Importing rsc.io/quote in Go Package\nDESCRIPTION: Defines a Go package 'x' that imports the rsc.io/quote package as a side effect.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query_exclude.txt#2025-04-22_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\npackage x\nimport _ \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: Basic Go module definition\nDESCRIPTION: A minimal go.mod file defining a module named 'example' using Go 1.18.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_issue50958.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Go Package Declaration\nDESCRIPTION: Declares a package named smiley in a file with non-standard naming using a smiley character.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badfile2_v1.0.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage smiley\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines a simple Go module with minimum Go version requirement of 1.15\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_GOTMPDIR.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.15\n```\n\n----------------------------------------\n\nTITLE: Setting GO111MODULE Environment Variable\nDESCRIPTION: Sets the GO111MODULE environment variable to 'on' to ensure module mode is enabled.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_nodeps.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n```\n\n----------------------------------------\n\nTITLE: Defining Version Constant in Go\nDESCRIPTION: Declares a constant 'V' with the version string in a Go package named 'version'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_version_v1.1.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage version\n\nconst V = \"v1.1.0\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository\nDESCRIPTION: Initializes a new Git repository in the current directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/insecurerepo.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit init\n```\n\n----------------------------------------\n\nTITLE: Deprecations in debug/gosym package\nDESCRIPTION: Lists deprecated methods in the debug/gosym package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_21\n\nLANGUAGE: Go\nCODE:\n```\npkg debug/gosym, method (*LineTable) LineToPC //deprecated\npkg debug/gosym, method (*LineTable) PCToLine //deprecated\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition for Package B\nDESCRIPTION: A Go module definition for the 'b' module, specifying only the module path.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/user/b\n```\n\n----------------------------------------\n\nTITLE: Defining Package and Function in Go\nDESCRIPTION: Declares a package 'p' and defines an empty function 'F()'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo1223_v0.0.1.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage p\n\nfunc F() {}\n```\n\n----------------------------------------\n\nTITLE: Input Format Link Processing\nDESCRIPTION: Raw input format showing package reference handling\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/link7.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[math] is a package but this is not a doc link.\n\n[io] is a doc link.\n\n[math]: https://example.com\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module for Major Version Suffix Test\nDESCRIPTION: Creates a go.mod file defining the module and Go version for the test case.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_direct.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com\ngo 1.13\n```\n\n----------------------------------------\n\nTITLE: Hello World Go Program\nDESCRIPTION: Simple Go program that prints 'hello, world' to demonstrate build output behavior\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_dash_o_dev_null.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {\n\tprintln(\"hello, world\")\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: A simple Go module definition file that specifies the module name as 'example'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fullpath.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example\n```\n\n----------------------------------------\n\nTITLE: Proxy Error Response\nDESCRIPTION: Example error response from the module proxy when latest version is forbidden.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query_empty.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nERROR: Latest version is forbidden.\n```\n\n----------------------------------------\n\nTITLE: Testdata Directory Example Go File\nDESCRIPTION: A simple Go file in the testdata directory to test package path resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dot.txt#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\npackage testdata\n```\n\n----------------------------------------\n\nTITLE: Module D1 Configuration\nDESCRIPTION: Go.mod file for the first replacement of module 'd' (v0.1.0).\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_unused.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/d\n```\n\n----------------------------------------\n\nTITLE: Cyclic Dependency Package\nDESCRIPTION: Demonstration of cyclic dependency between packages a and b.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_replace.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage cycle\n\nimport (\n\t_ \"golang.org/issue/30166/a\"\n\t_ \"golang.org/issue/30166/b\"\n)\n```\n\n----------------------------------------\n\nTITLE: Module B Definition v0.1.0\nDESCRIPTION: Module b v0.1.0 configuration and implementation requiring module c v0.1.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_artifact.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/b\n\ngo 1.16\n\nrequire example.com/c v0.1.0\n```\n\nLANGUAGE: go\nCODE:\n```\npackage b\n\nimport _ \"example.com/c\"\n```\n\n----------------------------------------\n\nTITLE: Empty Go File\nDESCRIPTION: An empty Go file that defines the package 'm'. This file serves as a minimal package declaration.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_tags.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage m\n```\n\n----------------------------------------\n\nTITLE: Unprintable Module Implementation\nDESCRIPTION: Implements a simple package for the 'unprintable' module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_deprecate_message.txt#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\npackage unprintable\n```\n\n----------------------------------------\n\nTITLE: Module Declaration for Go Toolchain\nDESCRIPTION: Declares the module name for the Go toolchain package, identifying it as golang.org/toolchain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.plan9-amd64.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Package B with Clean Source\nDESCRIPTION: Package b with no imports in the source file, demonstrating clean code.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_internal.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// A package with a bad import in test only\npackage b\n```\n\n----------------------------------------\n\nTITLE: Storing Module Version Information in JSON Format\nDESCRIPTION: JSON file containing version information for the module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo122_v0.0.1.txt#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.0.1\"}\n```\n\n----------------------------------------\n\nTITLE: Example Go Source File\nDESCRIPTION: Simple Go source file importing the rsc.io/sampler package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_goproxy_off.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage example\n\nimport _ \"rsc.io/sampler\"\n```\n\n----------------------------------------\n\nTITLE: Module B Implementation\nDESCRIPTION: Implementation of module 'b' that imports and uses package 'q'\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_relevant_dependency.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage b\n\nimport (\n\t\"example.com/q\"\n)\n\nfunc Foo() {\n\tq.Q()\n}\n```\n\n----------------------------------------\n\nTITLE: Test Dependency Module Definition\nDESCRIPTION: Defines the 'testdep' module used for testing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version_missing.txt#2025-04-22_snippet_14\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/testdep\n```\n\n----------------------------------------\n\nTITLE: Module-level Internal Package Definition\nDESCRIPTION: A minimal Go file that defines an internal package at the module level.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_internal.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage internal\n```\n\n----------------------------------------\n\nTITLE: Multiple Module Usage Declaration\nDESCRIPTION: Extended go.work file with multiple module usage declarations\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_edit.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngo $goversion\n\nuse (\n\t./m\n\t./n\n)\n```\n\n----------------------------------------\n\nTITLE: Module B v1.0 Configuration\nDESCRIPTION: Module B version 1.0's go.mod file with dependencies\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patchbound.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/b\n\ngo 1.16\n\nrequire example.net/a v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Defining Test Package\nDESCRIPTION: Creates an empty test package that will be imported by the main package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_import_main_loop.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage test\n```\n\n----------------------------------------\n\nTITLE: Minimal Vendored Package p\nDESCRIPTION: A minimal vendored package 'p' that only contains a package declaration.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_vendor.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage p\n```\n\n----------------------------------------\n\nTITLE: Module A v0.1.1 Definition\nDESCRIPTION: Module definition and implementation for example.net/a v0.1.1 with dependency on example.net/b\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_wild.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/a\n\ngo 1.16\n\nrequire example.net/b v0.1.0\n```\n\nLANGUAGE: go\nCODE:\n```\npackage a\n```\n\nLANGUAGE: go\nCODE:\n```\npackage unimported\n\nimport _ \"example.net/b\"\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Basic Go module definition file specifying the module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue47650.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example\n\ngo 1.20\n```\n\n----------------------------------------\n\nTITLE: Windows Batch Script for Go Test Module\nDESCRIPTION: Batch script that outputs a version identifier for the test Go toolchain\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.windows-amd64.txt#2025-04-22_snippet_2\n\nLANGUAGE: batch\nCODE:\n```\n@echo go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Original go.mod file defining the module and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query_empty.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/othermodule\ngo 1.13\n```\n\n----------------------------------------\n\nTITLE: Socket Control Message Struct for darwin-arm64\nDESCRIPTION: Definition of the SocketControlMessage struct used for handling ancillary data in socket operations on darwin-arm64 platforms.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_133\n\nLANGUAGE: go\nCODE:\n```\ntype SocketControlMessage struct {\n\tHeader Cmsghdr\n\tData []uint8\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines the module configuration for the test project using Go 1.20.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_export_embed.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example\ngo 1.20\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Go File\nDESCRIPTION: Go source file with Windows build constraint.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/fmt_load_errors.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// +build windows\n\npackage x\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Basic Go module configuration specifying module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_limit_dup_entry.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: File Locking Constants in Go for Darwin ARM64\nDESCRIPTION: Constants used for advisory file locking operations with flock(). LOCK_SH for shared locks, LOCK_EX for exclusive locks, LOCK_NB for non-blocking operation, and LOCK_UN for unlocking.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_74\n\nLANGUAGE: Go\nCODE:\n```\nconst LOCK_EX = 2\nconst LOCK_NB = 4\nconst LOCK_SH = 1\nconst LOCK_UN = 8\n```\n\n----------------------------------------\n\nTITLE: Defining Module Name in .mod File\nDESCRIPTION: Specifies the module name in the .mod file for the Go toolchain package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.plan9-386.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Defining Module 'd' in Go\nDESCRIPTION: This go.mod file defines module 'd' without any dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_pseudo_artifact.txt#2025-04-22_snippet_13\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/d\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Module Version Info JSON\nDESCRIPTION: JSON configuration specifying the module version as v1.0.0-multiline1\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rationale_v1.0.0-multiline1.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.0.0-multiline1\"}\n```\n\n----------------------------------------\n\nTITLE: Incompatible Version Requirement Module\nDESCRIPTION: A module configuration that requires an incompatible version (v2.0.0+incompatible) of a dependency. This module is used to test how Go 1.16 and 1.17 handle transitive dependencies on incompatible versions differently.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_graph_version.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/requireincompatible\n\ngo 1.15\n\nrequire example.com/retract/incompatible v2.0.0+incompatible\n```\n\n----------------------------------------\n\nTITLE: Version Information Definition\nDESCRIPTION: JSON configuration file defining the project version number.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_deprecated_a_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.0.0\"}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module definition file specifying the module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_overlay.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Go Module Configuration\nDESCRIPTION: Module definition file specifying Go version 1.20 requirement\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/testdata/script/script_test_basics.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule main\n\ngo 1.20\n```\n\n----------------------------------------\n\nTITLE: Main Package Import\nDESCRIPTION: Main package file importing dependent modules\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage m\n\nimport (\n\t_ \"example.com/a\"\n\t_ \"example.com/b\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining empty package implementation\nDESCRIPTION: Defines an empty package implementation file for the module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_std_vendor.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage x\n```\n\n----------------------------------------\n\nTITLE: Package Import Example\nDESCRIPTION: Demonstrates importing a relocated package from a nested submodule\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_issue41113.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage issue41113\n\nimport _ \"example.com/split-incompatible/subpkg\"\n```\n\n----------------------------------------\n\nTITLE: Empty Go Package Declaration\nDESCRIPTION: Minimal Go source file declaring package foo without any implementation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_compiled_files_issue28749.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage foo\n```\n\n----------------------------------------\n\nTITLE: Defining Package X in Module A\nDESCRIPTION: Creates an empty package 'x' in module 'example.com/a' for testing import resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_ambiguous_import.txt#2025-04-22_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\npackage x\n```\n\n----------------------------------------\n\nTITLE: Constraint Package with Build Tag\nDESCRIPTION: Package with build constraints and want package import\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_load_err.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// +build !!nope\n\npackage constraint\n```\n\nLANGUAGE: go\nCODE:\n```\npackage constraint\n\nimport _ \"m/want\"\n```\n\n----------------------------------------\n\nTITLE: Empty Link in HTML\nDESCRIPTION: Shows HTML markup for an empty anchor tag with http:// href\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/crash1.txt#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p><a href=\\\"http://\\\"></a>\n```\n\n----------------------------------------\n\nTITLE: LazyUpgrade v0.1.0 Module Definition\nDESCRIPTION: go.mod file for lazyupgrade module version 0.1.0\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_lazy_upgrade_lazy.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/lazyupgrade\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Basic Go module definition requiring rsc.io/quote package version 1.1.0\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_upgrade.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule x\nrequire rsc.io/quote v1.1.0\n```\n\n----------------------------------------\n\nTITLE: Internal Subpackage Definition\nDESCRIPTION: A minimal Go file that defines a subpackage within an internal package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_internal.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage y\n```\n\n----------------------------------------\n\nTITLE: Go Module Declaration\nDESCRIPTION: Defines the module name for the package using Go modules system.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_badchain_c_v1.1.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule badchain.example.com/c\n```\n\n----------------------------------------\n\nTITLE: Dependency Package Import\nDESCRIPTION: Go source file in the replaced module importing rsc.io/quote package\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_old.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage use\n\nimport _ \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: W Package Implementation\nDESCRIPTION: Package defining World constant used in the main package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_complex.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage w\n\nconst World = \"world\"\n```\n\n----------------------------------------\n\nTITLE: Simple Go Main Package\nDESCRIPTION: A minimal Go program with an empty main function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/no-tags.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Package A Definition\nDESCRIPTION: Go package 'a' importing package 'b', forming part of the import cycle.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_import_cycle_deps_errors.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\nimport _ \"m/b\"\n```\n\n----------------------------------------\n\nTITLE: Module Declaration in .mod File\nDESCRIPTION: Declares the module name in the .mod file for the Go toolchain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-amd64.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Toolchain Module Definition\nDESCRIPTION: Defines the Go module name for the toolchain in the .mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-386.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Markdown Link Processing\nDESCRIPTION: Markdown formatted documentation links with proper syntax\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/link7.txt#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[math](https://example.com) is a package but this is not a doc link.\n\n[io](/io) is a doc link.\n```\n\n----------------------------------------\n\nTITLE: Go Module Configuration for 'n' Directory\nDESCRIPTION: Module configuration file for example.com/n using Go 1.24\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_pattern_work.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/n\n\ngo 1.24\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines a Go module named 'm' using Go version 1.17.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_run_pkgerror.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: V3 Package in Nest Vendor\nDESCRIPTION: Package defining v3 constant in the nest/vendor directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_complex.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage v3\n\nconst ComplexNestVendorV3 = true\n```\n\n----------------------------------------\n\nTITLE: Module Declaration in go.mod File\nDESCRIPTION: Declares the module name in the go.mod file for the Go toolchain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-amd64.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Importing Syso Package in Cgo\nDESCRIPTION: Imports the syso package as a side-effect import in the cgo package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/link_syso_deps.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage cgo\n\nimport _ \"m/syso\"\n```\n\n----------------------------------------\n\nTITLE: Invalid Package File\nDESCRIPTION: Intentionally malformed Go file missing package declaration to test error handling\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_parse_err.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// no package statement\n```\n\n----------------------------------------\n\nTITLE: Go Module Empty Module Definition\nDESCRIPTION: Basic Go module definition file used as a template for tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_proxy.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Go Module Declaration\nDESCRIPTION: Module declaration in go.mod file for the golang.org/toolchain module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.netbsd-arm.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Nested Module Definition\nDESCRIPTION: Module definition for the nested package with different versions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_split.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/split/nested\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Main Go Package\nDESCRIPTION: Simple Go main package with empty main function for testing purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_git.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: V1 Package in Nest Vendor\nDESCRIPTION: Package defining v1 constant in the nest/vendor directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_complex.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage v1\n\nconst ComplexNestVendorV1 = true\n```\n\n----------------------------------------\n\nTITLE: Deprecations in os package\nDESCRIPTION: Lists deprecated constants in the os package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_26\n\nLANGUAGE: Go\nCODE:\n```\npkg os, const SEEK_CUR //deprecated\npkg os, const SEEK_END //deprecated\npkg os, const SEEK_SET //deprecated\n```\n\n----------------------------------------\n\nTITLE: Main Package Import\nDESCRIPTION: Main package file importing example.net/a package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patch.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage example\n\nimport _ \"example.net/a\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Module\nDESCRIPTION: Defines the module name and Go version for the project.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/testdata/script/dwarf5_gen_assembly_and_go.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule uses.asm\n\ngo 1.25\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration for Doc Links\nDESCRIPTION: Base URL configuration for package documentation links\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/linklist4.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"DocLinkBaseURL\": \"https://pkg.go.dev\"}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines a Go module in the a subdirectory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_hg.txt#_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/a\n\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Without Root Package\nDESCRIPTION: Module definition file specifying the module path without a root package implementation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_noroot_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/noroot\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Simple module declaration for the test package\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gccgo_link_c.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Storing Version Information in JSON\nDESCRIPTION: Contains version information in JSON format, likely used for module metadata.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_version_v1.1.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\"Version\":\"v1.1.0\"}\n```\n\n----------------------------------------\n\nTITLE: Submodule X Configuration\nDESCRIPTION: Configuration and implementation for the example.com/x submodule.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_replaced.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/x\n\ngo 1.16\n```\n\nLANGUAGE: go\nCODE:\n```\npackage x\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines a Go module named 'example.com/m' using Go version 1.14\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_e_readonly.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/m\n\ngo 1.14\n```\n\n----------------------------------------\n\nTITLE: Testing go run command with files in different directories\nDESCRIPTION: A bash script testing the requirement that all files specified in a 'go run' command must be in the same directory. It demonstrates error cases when mixing files from different directories.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_dirs.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd rundir\n\n! go run x.go sub/sub.go\nstderr 'named files must all be in one directory; have . and sub'\n! go run sub/sub.go x.go\nstderr 'named files must all be in one directory; have sub and .'\n\ncd ../\ngo run rundir/foo.go ./rundir/bar.go\nstderr 'hello world'\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Dependencies\nDESCRIPTION: This go.mod file defines the main module 'example.com/a' with its dependencies and replace directives for version resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_indirect_pruned.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/a\n\ngo 1.17\n\nrequire (\n\texample.com/b v0.2.0\n\texample.com/c v0.1.0\n)\n\nreplace (\n\texample.com/b v0.1.0 => ./b1\n\texample.com/b v0.2.0 => ./b2\n\texample.com/c v0.1.0 => ./c1\n\texample.com/c v0.2.0 => ./c2\n\texample.com/d v0.1.0 => ./d\n\texample.com/d v0.2.0 => ./d\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Filter Factory Function in Go\nDESCRIPTION: This Go code defines a package named 'filter'. It contains a single function `New` which acts as a factory. `New` returns another function that accepts an error as input and always returns `false`. This structure might be a placeholder or a simplified example for testing purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_test_race_issue56370.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n-- filter/filter.go --\n\npackage filter\n\nfunc New() func(error) bool {\n\treturn func(error) bool {\n\t\treturn false\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Non-Vendored Dependencies in the Standard Module with Shell\nDESCRIPTION: This 'go list' command maps non-vendored dependencies within the 'std' module to vendored paths, illustrating how Go manages module boundaries by ensuring external dependencies resolve internally.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_std.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngo list -deps -f '{{if not .Standard}}{{.ImportPath}}{{end}}' std\n```\n\n----------------------------------------\n\nTITLE: Indirect Usage Module\nDESCRIPTION: Go file demonstrating indirect import of the lazyupgrade module through 'direct' package\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_lazy_upgrade_lazy.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage use\n\nimport _ \"direct\"\n```\n\n----------------------------------------\n\nTITLE: Main Package C1\nDESCRIPTION: Simple Go main package with empty main function for testing build output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_multi_main.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Implementing FuzzNonCrash Test in Go\nDESCRIPTION: This test sends a SIGTERM signal to itself, which should not be interpreted as a crash by the fuzzing framework. It demonstrates handling of non-crash termination signals.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_non_crash_signal.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc FuzzNonCrash(f *testing.F) {\n\tf.Fuzz(func(*testing.T, bool) {\n\t\tpid := syscall.Getpid()\n\t\tif err := syscall.Kill(pid, syscall.SIGTERM); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\t// signal may not be received immediately. Wait for it.\n\t\tselect{}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Empty Package Declaration\nDESCRIPTION: Package declaration file with no content\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_deprecated_a_v1.9.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage a\n```\n\n----------------------------------------\n\nTITLE: Verifying Embedded Build Info by Reading Go Binary Directly\nDESCRIPTION: This Go program (`unused`) checks for the presence of embedded build information by reading its own executable file rather than using `runtime/debug.ReadBuildInfo`. It reads the binary content using `os.ReadFile`, searches for a specific known byte sequence (`infoStart`) that precedes the build info data using `bytes.Contains`, and logs \"ok\" if found, otherwise logs an error. It imports `rsc.io/quote` primarily to ensure dependency information is included in the build metadata being checked. It depends on standard library packages `os`, `bytes`, `encoding/hex`, and `log`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_modinfo.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n-- x/unused/main.go --\n// The unused binary does not access runtime/debug.modinfo.\npackage main\n\nimport (\n\t\"bytes\"\n\t\"encoding/hex\"\n\t\"log\"\n\t\"os\"\n\n\t_ \"rsc.io/quote\"\n)\n\nfunc main() {\n\tb, err := os.ReadFile(os.Args[0])\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tinfoStart, _ := hex.DecodeString(\"3077af0c9274080241e1c107e6d618e6\")\n\tif !bytes.Contains(b, infoStart) {\n\t\tlog.Fatal(\"infoStart not found in binary\")\n\t}\n\tlog.Println(\"ok\")\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go List Command with Dot-Go Suffix Packages\nDESCRIPTION: This snippet tests the 'go list' command with package names ending in '.go', ensuring it correctly identifies and lists these packages regardless of whether they correspond to local files.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_trailing_slash.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo list example.com/dotgo.go\nstdout ^example.com/dotgo.go$\ngo list example.com/dotgo.go/\nstdout ^example.com/dotgo.go$\n```\n\n----------------------------------------\n\nTITLE: Go Module Configuration for Invalid Replacement of gopkg.in v3\nDESCRIPTION: This go.mod file attempts an invalid replacement of a gopkg.in v3 module with a v4 module, which should result in an error.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_gopkgin.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nmodule golang.org/issue/34254\ngo 1.13\n\nrequire gopkg.in/src-d/go-git.v3 v3.2.0\n\n// This replacement has a go.mod file declaring its path to be\n// gopkg.in/src-d/go-git.v4, so it cannot be used as a replacement for v3.\nreplace gopkg.in/src-d/go-git.v3 v3.2.0 => gopkg.in/src-d/go-git.v3 v3.0.0-20190801152248-0d1a009cbb60\n```\n\n----------------------------------------\n\nTITLE: Empty Go Package Declaration in Y.go\nDESCRIPTION: A Go source file with an uppercase filename (Y.go) declaring package x without any content.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badfile4_v1.0.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage x\n```\n\n----------------------------------------\n\nTITLE: Empty Package Declaration\nDESCRIPTION: Empty Go package file declaring package x without any content\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badzip_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage x\n```\n\n----------------------------------------\n\nTITLE: Package B3 Implementation\nDESCRIPTION: Simple implementation of package b v0.3.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_downgrade.txt#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\npackage b\n```\n\n----------------------------------------\n\nTITLE: Defining OpenBSD System Constants in Go\nDESCRIPTION: Various OpenBSD-specific system call constants for network operations, memory allocation, and file handling. These constants are used when making system calls to the OpenBSD kernel.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_35\n\nLANGUAGE: Go\nCODE:\n```\nconst BIOCGRTIMEOUT = 1074545262\nconst BIOCSRTIMEOUT = 2148287085\nconst IPPROTO_DIVERT_INIT = 2\nconst IPPROTO_DIVERT_INIT ideal-int\nconst IPPROTO_DIVERT_RESP = 1\nconst IPPROTO_DIVERT_RESP ideal-int\nconst IPV6_RECVDSTPORT = 64\nconst IPV6_RECVDSTPORT ideal-int\nconst IP_DIVERTFL = 4130\nconst IP_DIVERTFL ideal-int\n```\n\n----------------------------------------\n\nTITLE: Using go list to verify debug directives in test binary\nDESCRIPTION: Demonstrates using go list with -test flag to verify that DefaultGODEBUG contains the specified debug directive panicnil=1.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_buildinfo_godebug_issue68053.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo list -test -f '{{.ImportPath}} {{.DefaultGODEBUG}}'\nstdout 'example.com/foo\\.test.*panicnil=1.*'\n```\n\n----------------------------------------\n\nTITLE: Defining Initial Go Module File (Go)\nDESCRIPTION: Defines the content of the initial `go.mod` file, named `go.mod.orig` within the test script context. This file declares the main module `m`, specifies the Go version `1.13`, and requires version `v1.0.0` of the `example.com/badchain/a` module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badchain.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n-- go.mod.orig --\nmodule m\n\ngo 1.13\n\nrequire example.com/badchain/a v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Module Definition\nDESCRIPTION: Module definition file specifying dependency on golang.org/x/text package\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.2.1.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule \"rsc.io/sampler\"\n\nrequire \"golang.org/x/text\" v0.0.0-20170915032832-14c0d48ead0c\n```\n\n----------------------------------------\n\nTITLE: Git Credentials Configuration\nDESCRIPTION: Empty git credentials file used for testing authentication failure scenarios.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goauth_git.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Mercurial Repository Conversion\nDESCRIPTION: Converts Git repository to Mercurial format and manages tags and branches in the new format.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/hg/vgotest1.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhg init\nhg convert ./git .\nrm ./git\n\nhg update -C -r 18\nhg tag --user 'Russ Cox <rsc@golang.org>' --date '2018-07-18T21:24:45-04:00' -m 'Removed tag v2.0.0' --remove v2.0.0\n```\n\n----------------------------------------\n\nTITLE: Package B2 Implementation\nDESCRIPTION: Simple implementation of package b v0.2.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_downgrade.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage b\n```\n\n----------------------------------------\n\nTITLE: Storing Module Version Metadata in JSON\nDESCRIPTION: This JSON snippet contains metadata associated with the Go module, specifically defining its version as `v1.0.0-order`. This information is likely used by Go tooling or related systems for version management, often stored alongside the module source.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rationale_v1.0.0-order.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n-- .info --\n{\"Version\":\"v1.0.0-order\"}\n```\n\n----------------------------------------\n\nTITLE: Package A Test File with Invalid Import\nDESCRIPTION: Test file for package a containing an illegal internal package import.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_internal.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\nimport (\n  _ \"a/x/internal/y\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining User and Group Management Syscall Constants for Darwin ARM64\nDESCRIPTION: Constant definitions for user and group management system calls on Darwin ARM64 architecture. These include operations for setting user IDs, group IDs, and permissions with their corresponding numeric identifiers.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_107\n\nLANGUAGE: Go\nCODE:\n```\nconst SYS_SETAUDIT_ADDR = 358\nconst SYS_SETAUID = 354\nconst SYS_SETEGID = 182\nconst SYS_SETEUID = 183\nconst SYS_SETGID = 181\nconst SYS_SETGROUPS = 80\nconst SYS_SETITIMER = 83\nconst SYS_SETLCID = 394\nconst SYS_SETLOGIN = 50\nconst SYS_SETREGID = 127\nconst SYS_SETREUID = 126\nconst SYS_SETRLIMIT = 195\nconst SYS_SETSGROUPS = 287\n```\n\n----------------------------------------\n\nTITLE: Testing Internal Package Import\nDESCRIPTION: Tests importing a non-existent internal package\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_internal.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage t\n\nimport _ \"internal/does-not-exist\"\n```\n\n----------------------------------------\n\nTITLE: Other Package Implementation\nDESCRIPTION: Implementation file for the 'other' package importing a non-existent package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_error.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage other\n\nimport \"other.example.com/nonexist\"\n```\n\n----------------------------------------\n\nTITLE: Testing Package-Specific Flag Patterns in Go Build\nDESCRIPTION: Shell script that tests how 'work=' and 'tool=' patterns in '-gcflags' affect different packages during compilation. It verifies that 'work=' applies flags only to the specified package while 'tool=' applies flags to the main package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_perpkgflag.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo build -n '-gcflags=work=-fakeflag' example.com/foo/a\nstderr 'compile.*-p example.com/foo/a.*-fakeflag'\n! stderr 'compile.*-p example.com/dep.*-fakeflag'\n\ngo build -n '-gcflags=tool=-fakeflag' example.com/foo/a example.com/dep/tooldep\n! stderr 'compile.*-p example.com/foo/a.*-fakeflag'\n! stderr 'compile.*-p example.com/dep.*-fakeflag'\nstderr 'compile.*-p main.*-fakeflag.*main.go'\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module 'a' (Go Module File)\nDESCRIPTION: This snippet defines the content of the `a/go.mod` file. It declares a Go module named 'a' and specifies that it uses Go language version 1.17. This file establishes the module context for the test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_command_line_arguments.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n-- a/go.mod --\nmodule a\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: Environment Setup and Test Command\nDESCRIPTION: Sets CGO_ENABLED=0 and attempts to install a cgotest package, expecting a build constraint error.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_cgo_excluded.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv CGO_ENABLED=0\n\n! go install cgotest\nstderr 'build constraints exclude all Go files'\n```\n\n----------------------------------------\n\nTITLE: Testing Go Commands in Empty Directory\nDESCRIPTION: Tests how 'go get' and 'go list' commands behave in an empty directory, verifying appropriate error messages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dot.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# golang.org/issue/32917 and golang.org/issue/28459: 'go build' and 'go test'\n# in an empty directory should refer to the path '.' and should not attempt\n# to resolve an external module.\ncd dir\n! go get\nstderr '^go: no package to get in current directory$'\n! go get .\nstderr '^go: .: no package to get in current directory$'\n! go get ./subdir\nstderr '^go: \\.[/\\\\]subdir \\('$WORK'[/\\\\]gopath[/\\\\]src[/\\\\]dir[/\\\\]subdir\\) is not a package in module rooted at '$WORK'[/\\\\]gopath[/\\\\]src[/\\\\]dir$'\n! go list\n! stderr 'cannot find module providing package'\nstderr '^no Go files in '$WORK'[/\\\\]gopath[/\\\\]src[/\\\\]dir$'\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid GOEXPERIMENT Values\nDESCRIPTION: Verifies that unknown experiment names are rejected with appropriate error message\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_exp.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nenv GOEXPERIMENT=bad\n! go env GOEXPERIMENT\nstderr 'unknown GOEXPERIMENT bad'\n```\n\n----------------------------------------\n\nTITLE: Testing Go List Command Error Handling\nDESCRIPTION: Tests go list command's handling of invalid Go files and package errors, specifically for issue #39986 ensuring invalid files are listed in InvalidGoFiles.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_run_pkgerror.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo list -e -f '{{.Incomplete}}{{\"\\n\"}}{{.Error}}{{\"\\n\"}}{{.InvalidGoFiles}}{{\"\\n\"}}' .\n```\n\n----------------------------------------\n\nTITLE: Lazy Package Declaration\nDESCRIPTION: Empty package declaration for the lazy module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_irrelevant.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage lazy\n```\n\n----------------------------------------\n\nTITLE: Defining Simple External Package 'b' (Go)\nDESCRIPTION: This snippet defines the content of the `b/b.go` file. It simply declares an empty package named `b`. This file exists in a separate directory and is used in the test to check how `go list` handles file paths outside the current module's immediate directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_command_line_arguments.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n-- b/b.go --\npackage b\n```\n\n----------------------------------------\n\nTITLE: Module 'x2' Definition\nDESCRIPTION: The go.mod file for x v0.2.0 (located in directory x2) that defines just the module name and Go version without dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_tidy.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nmodule x\ngo 1.13\n```\n\n----------------------------------------\n\nTITLE: Implementing Quote Collection Functions in Go\nDESCRIPTION: A Go package that implements four main functions: HelloV3(), GlassV3(), GoV3(), and OptV3(). Each function returns a specific type of quote or saying. The package depends on rsc.io/sampler for some functionality.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v3_v3.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Package quote collects pithy sayings.\npackage quote // import \"rsc.io/quote\"\n\nimport \"rsc.io/sampler\"\n\n// Hello returns a greeting.\nfunc HelloV3() string {\n\treturn sampler.Hello()\n}\n\n// Glass returns a useful phrase for world travelers.\nfunc GlassV3() string {\n\t// See http://www.oocities.org/nodotus/hbglass.html.\n\treturn \"I can eat glass and it doesn't hurt me.\"\n}\n\n// Go returns a Go proverb.\nfunc GoV3() string {\n\treturn \"Don't communicate by sharing memory, share memory by communicating.\"\n}\n\n// Opt returns an optimization truth.\nfunc OptV3() string {\n\t// Wisdom from ken.\n\treturn \"If a program is too slow, it must have a loop.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Main Package Import\nDESCRIPTION: Main package file importing the dependency package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_nospace.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage m\nimport _ \"example.net/x\"\n```\n\n----------------------------------------\n\nTITLE: Incorrect Modules.txt File\nDESCRIPTION: Defines an incorrect modules.txt file that is missing a required package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_vendor.txt#2025-04-22_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\n# foo.com/internal/bar v1.0.0\n## explicit\nfoo.com/internal/bar/a\n```\n\n----------------------------------------\n\nTITLE: Declaring the Unicode Version Constant - Go\nDESCRIPTION: Specifies the Version constant in the unicode package, indicating the version of the Unicode standard currently supported (here, \\\"6.3.0\\\"). This constant is useful for developers needing to ensure text processing aligns with a specific Unicode revision. Consumers should check this value for compatibility or feature support in Unicode operations within the Go standard library.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_67\n\nLANGUAGE: Go\nCODE:\n```\npkg unicode, const Version = \"6.3.0\"\n```\n\n----------------------------------------\n\nTITLE: Level2y Package Values\nDESCRIPTION: Value definitions for level2y packages in both level1a and level1b hierarchies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_issue_59905.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage level2x\n\nvar Value = \"1a/2y\"\n```\n\nLANGUAGE: go\nCODE:\n```\npackage level2x\n\nvar Value = \"1b/2y\"\n```\n\n----------------------------------------\n\nTITLE: Defining module with vendor import\nDESCRIPTION: Defines a module that tries to explicitly import a package from vendor, which should be disallowed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_std_vendor.txt#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nmodule importvendor\n```\n\nLANGUAGE: go\nCODE:\n```\npackage importstd\n\nimport _ \"vendor/golang.org/x/net/http2/hpack\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Go Module (`go.mod`)\nDESCRIPTION: This snippet shows the content of a `go.mod` file. It uses the `module` directive to declare the module path as `example.com/pseudoupgrade`. This file is essential for defining a Go module and managing its dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_pseudoupgrade_v0.0.0-20190430073000-30950c05d534.txt#2025-04-22_snippet_0\n\nLANGUAGE: gomod\nCODE:\n```\nmodule example.com/pseudoupgrade\n```\n\n----------------------------------------\n\nTITLE: Listing Go Module Dependencies with Retraction Information\nDESCRIPTION: Command to list dependencies of a Go module showing retraction status. The '-m' flag shows module information and '-u' checks for available upgrades, displaying that the dependency 'example.com/retract/noupgrade' is retracted.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_noupgrade.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo list -m -u example.com/retract/noupgrade\nstdout '^example.com/retract/noupgrade v1.0.0 \\(retracted\\)$'\n```\n\n----------------------------------------\n\nTITLE: Package Implementation with Breaker Import\nDESCRIPTION: Go source file importing and using the rsc.io/breaker package with a placeholder variable.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_incompatible.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage x\nimport \"rsc.io/breaker\"\nvar _ = breaker.XX\n```\n\n----------------------------------------\n\nTITLE: Sub-module Source File\nDESCRIPTION: Go source file in the sub-module importing the rsc.io/quote package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_goproxy_off.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage example\n\nimport _ \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition in go.mod\nDESCRIPTION: Defines the module name in the standard go.mod file format.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-arm.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Version Information Configuration\nDESCRIPTION: JSON configuration file specifying the project version information\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_dotname_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.0.0\"}\n```\n\n----------------------------------------\n\nTITLE: Module P Configuration\nDESCRIPTION: Module definition for example.com/p, which is a dependency of module A.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_modules_txt_consistent.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/p\n\ngo 1.21\n```\n\n----------------------------------------\n\nTITLE: Verifying Package Inclusion in Coverage Profile (Shell)\nDESCRIPTION: Uses `grep` to search the coverage profile (`$WORK/cover.out`) for lines containing the filenames `errors.go` and `binary.go`. This verifies that coverage data from both tested packages (`errors` and `encoding/binary`) has been correctly merged into the output profile.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_modes.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngrep 'errors\\.go' $WORK/cover.out\n```\n\nLANGUAGE: shell\nCODE:\n```\ngrep 'binary\\.go' $WORK/cover.out\n```\n\n----------------------------------------\n\nTITLE: Display Module Dependencies\nDESCRIPTION: Command to show the module dependency graph.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_disabled.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngo mod graph\n```\n\n----------------------------------------\n\nTITLE: Querying All Available Module Versions Using go list - Go - Shell\nDESCRIPTION: This snippet demonstrates querying all available versions of the specified Go module using the -versions flag. It requires network access and the Go toolchain. The critical parameter is the module path, and the expected output should only display the module path, as no tagged versions are available due to the odd tags being filtered out. This is useful for testing the effect of non-standard tags on module version listing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_odd_tags.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo list -m -versions vcs-test.golang.org/git/odd-tags.git\nstdout -count=1 '^.'\nstdout '^vcs-test.golang.org/git/odd-tags.git$'  # No versions listed — the odd tags are filtered out.\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module definition file specifying the module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_import_error_stack.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule testdep\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Defining Empty Main Package in Module A\nDESCRIPTION: This snippet shows an empty Go file for a main package in module 'a'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_module_not_in_go_work.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n```\n\n----------------------------------------\n\nTITLE: Verifying no caching for 'go test' without arguments\nDESCRIPTION: Runs 'go test' without arguments twice to ensure it's not cached in either case.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test_cached.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngo test -run=WriteTmp\n! stdout '(cached)'\ngo test -run=WriteTmp\n! stdout '(cached)'\n```\n\n----------------------------------------\n\nTITLE: Getting Module Version with Query and Exclusion\nDESCRIPTION: Shows how 'go get' handles a version query when there's an excluded version, followed by listing the retrieved module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query_exclude.txt#2025-04-22_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ncp go.exclude.mod.orig go.exclude.mod\ngo get -modfile=go.exclude.mod rsc.io/quote@>=v1.5\ngo list -modfile=go.exclude.mod -m ...quote\nstdout 'rsc.io/quote v1.5.[1-9]'\n```\n\n----------------------------------------\n\nTITLE: Running Go Program With Trimpath and Module Mode\nDESCRIPTION: This snippet runs a Go program with -trimpath and -mod=mod flags, demonstrating that the behavior should be the same as with vendored code when trimmed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_trimpath.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo run -mod=mod -trimpath main.go\nstdout '^example.com/stack@v1.0.0/stack.go$'\n```\n\n----------------------------------------\n\nTITLE: Initializing c with an Indirect Import - Go\nDESCRIPTION: This package c Go file imports i solely for side effects, bringing i into the build list as an indirect dependency. There are no functions or exports; the purpose is to test indirect dependency handling in the Go module graph.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage c\nimport _ \"i\"\n```\n\n----------------------------------------\n\nTITLE: Package C Definition\nDESCRIPTION: Go package 'c' importing package 'a', completing the import cycle.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_import_cycle_deps_errors.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage c\n\nimport _ \"m/a\"\n```\n\n----------------------------------------\n\nTITLE: Basic Go Module with Private Dependency\nDESCRIPTION: Minimal Go module that imports a package from a private repository requiring authentication.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goauth_git.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage useprivate\n\nimport \"vcs-test.golang.org/auth/or404\"\n```\n\n----------------------------------------\n\nTITLE: Removing Output Entries with Go\nDESCRIPTION: Script written in Go to walk through a cache directory and remove entries that have output files ending with '-d'. It ensures that unnecessary or problematic entries are removed cleanly. Key parameters include the cache directory path, which is provided as an argument. The script outputs any errors encountered during the process.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_issue_70600.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n-- remove_output_entries.go --\npackage main\n\nimport (\n\t\"io/fs\"\n\t\"log\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strings\"\n)\n\nfunc main() {\n\tcachedir := os.Args[1]\n\terr := filepath.WalkDir(cachedir, func(path string, d fs.DirEntry, err error) error {\n\t\tif strings.HasSuffix(path, \"-d\") {\n\t\t\tif err := os.RemoveAll(path); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t\treturn nil\n\t})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Go Workspace Configuration File\nDESCRIPTION: Workspace configuration file that specifies module usage and replacement directives.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_disablevendor.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nuse .\nreplace example.com/dep => ../dep\n```\n\n----------------------------------------\n\nTITLE: Process Management Functions in syscall Package for NetBSD ARM64\nDESCRIPTION: These functions provide process control operations including process creation, termination, priority management, and resource limits. They also handle process groups and session management.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_76\n\nLANGUAGE: Go\nCODE:\n```\nfunc Kill(int, Signal) error\nfunc Getpgid(int) (int, error)\nfunc Getpgrp() int\nfunc Getpriority(int, int) (int, error)\nfunc Getrlimit(int, *Rlimit) error\nfunc Getrusage(int, *Rusage) error\nfunc Getsid(int) (int, error)\nfunc Setpgid(int, int) error\nfunc Setpriority(int, int, int) error\nfunc Setrlimit(int, *Rlimit) error\nfunc Setsid() (int, error)\nfunc Wait4(int, *WaitStatus, int, *Rusage) (int, error)\n```\n\n----------------------------------------\n\nTITLE: Defining Module Version Metadata - JSON\nDESCRIPTION: Provides version metadata (v1.0.0-long) for the Go module using a JSON object. This .info file is typically generated by the Go tooling and may be required by Go module proxies or for internal bookkeeping. The file includes a single key ('Version') and expects a semver version string as its value.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rationale_v1.0.0-long.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\\"Version\\\":\\\"v1.0.0-long\\\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module for ABI Test\nDESCRIPTION: This snippet defines the Go module for the ABI test program.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_ppc64_linker_funcs.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule abitest\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Function with Module Import in Go\nDESCRIPTION: This snippet shows the main function of the 'p' module, which imports and uses the 'q' module. It demonstrates how the module graph affects import resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_prune_all.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"example.com/q\"\n\nfunc main() {\n\tq.PrintVersion()\n}\n```\n\n----------------------------------------\n\nTITLE: Test Script for GOROOT Detection\nDESCRIPTION: Shell script that sets up test environment and performs various checks for GOROOT detection in different scenarios including cross-compiled binaries and relocated executables.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goroot_executable_trimpath.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmkdir $WORK/new/bin\nmkdir $WORK/new/bin/${GOOS}_${GOARCH}\n\ngo build -trimpath -o $WORK/new/bin/go$GOEXE cmd/go &\ngo build -trimpath -o $WORK/bin/check$GOEXE check.go &\nwait\n\nenv TESTGOROOT=$GOROOT\nenv GOROOT=\nenv GOPATH=\nenv HOME=''\nenv USERPROFILE=''\nenv home=''\n\n! exec $WORK/new/bin/go$GOEXE env GOROOT\nstderr '^go: cannot find GOROOT directory: ''go'' binary is trimmed and GOROOT is not set$'\n! stderr 'GOPATH set to GOROOT'\n\ncp $WORK/new/bin/go$GOEXE $WORK/new/bin/${GOOS}_${GOARCH}/go$GOEXE\n! exec $WORK/new/bin/${GOOS}_${GOARCH}/go$GOEXE env GOROOT\nstderr '^go: cannot find GOROOT directory: ''go'' binary is trimmed and GOROOT is not set$'\n! stderr 'GOPATH set to GOROOT'\n\nmkdir $WORK/new/pkg/tool\nexec $WORK/bin/check$GOEXE $WORK/new/bin/go$GOEXE $WORK/new\nexec $WORK/bin/check$GOEXE $WORK/new/bin/${GOOS}_${GOARCH}/go$GOEXE $WORK/new\n! stderr 'GOPATH set to GOROOT'\n```\n\n----------------------------------------\n\nTITLE: Generic Type Aliases Implementation\nDESCRIPTION: Defines a generic SliceFlag type and creates 20 type aliases with different fixed-size array parameters. Includes a String() method implementation for the SliceFlag type.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_issue59571.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage m\n\ntype (\n\tSliceFlag[T any] struct{}\n\n\tAlias1  = SliceFlag[[1]int]\n\tAlias2  = SliceFlag[[2]int]\n\tAlias3  = SliceFlag[[3]int]\n\tAlias4  = SliceFlag[[4]int]\n\tAlias5  = SliceFlag[[5]int]\n\tAlias6  = SliceFlag[[6]int]\n\tAlias7  = SliceFlag[[7]int]\n\tAlias8  = SliceFlag[[8]int]\n\tAlias9  = SliceFlag[[9]int]\n\tAlias10 = SliceFlag[[10]int]\n\tAlias11 = SliceFlag[[11]int]\n\tAlias12 = SliceFlag[[12]int]\n\tAlias13 = SliceFlag[[13]int]\n\tAlias14 = SliceFlag[[14]int]\n\tAlias15 = SliceFlag[[15]int]\n\tAlias16 = SliceFlag[[16]int]\n\tAlias17 = SliceFlag[[17]int]\n\tAlias18 = SliceFlag[[18]int]\n\tAlias19 = SliceFlag[[19]int]\n\tAlias20 = SliceFlag[[20]int]\n)\n\nfunc (x *SliceFlag[T]) String() string { return \"zzz\" }\n```\n\n----------------------------------------\n\nTITLE: Go Module Dependency Check Command\nDESCRIPTION: Command to list the version of module example.com/c\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_regression_hang.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo list -m -f '{{.Version}}' example.com/c\n```\n\n----------------------------------------\n\nTITLE: Defining a Version Constant in Go\nDESCRIPTION: This Go code snippet defines a constant `V` within the `version` package. The constant holds the string literal \"v1.0.0\", making the module's version accessible programmatically within the Go code.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_version_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage version\n\nconst V = \"v1.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Defining Go Toolchain Module Path for Linux RISCV64\nDESCRIPTION: Specifies the module path for a custom Go toolchain version for testing on Linux RISCV64 architecture.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-riscv64.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngolang.org/toolchain@v0.0.1-go1.999testmod.linux-riscv64\n```\n\n----------------------------------------\n\nTITLE: Testing Word Boundary Negation with \\B in Go Regexps\nDESCRIPTION: Tests the behavior of the \\B assertion which matches positions that are not word boundaries. The tests include different patterns and string combinations to verify matching behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_5\n\nLANGUAGE: regexp\nCODE:\n```\n\\B\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:\\B)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:\\B)\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:\\B)$\n```\n\n----------------------------------------\n\nTITLE: Error Package Example\nDESCRIPTION: Package demonstrating an intentional compilation error with undefined reference.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_cmd_v1.0.0.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage err\n\nvar X = DoesNotCompile\n```\n\n----------------------------------------\n\nTITLE: Invalid Go Package File\nDESCRIPTION: Intentionally malformed Go source file with a syntax error in the package declaration\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_err_stack.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nackage bar\n```\n\n----------------------------------------\n\nTITLE: Generating Content-Disposition Header for File Attachments in Go\nDESCRIPTION: The FileContentDisposition function takes a filename and fallback name as input and returns a Content-Disposition header string. It handles proper escaping and encoding of the filename for use in multipart MIME messages.\nSOURCE: https://github.com/golang/go/blob/master/api/next/46771.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc FileContentDisposition(string, string) string\n```\n\n----------------------------------------\n\nTITLE: Module Version Information in JSON Format\nDESCRIPTION: JSON file containing version information for the module, specifying v1.1.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_panicnil_v1.1.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.1.0\"}\n```\n\n----------------------------------------\n\nTITLE: Testing Internal Package Re-export\nDESCRIPTION: Tests re-exporting an internal package through a public package\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_internal.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage j\n\nimport _ \"testinternal4/q/internal/x\"\n```\n\n----------------------------------------\n\nTITLE: Assembly Implementation for gccgo in Overlay\nDESCRIPTION: Assembly file specifically for the gccgo compiler that implements the foo function. Has a build tag to ensure it's only used with the gccgo compiler.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_overlay.txt#2025-04-22_snippet_10\n\nLANGUAGE: assembly\nCODE:\n```\n// +build gccgo\n\n.globl main.foo\n.text\nmain.foo:\n\tret\n```\n\n----------------------------------------\n\nTITLE: Replaced Module Definition\nDESCRIPTION: Defines the 'example.com/r/replaced' module that is referenced by the module r. Includes a test file that should not be deleted during recursive cleaning.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_clean_cache.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n-- replaced/go.mod --\nmodule example.com/r/replaced\n-- replaced/replaced.go --\npackage replaced\n-- replaced/test.out --\nDO NOT DELETE\n```\n\n----------------------------------------\n\nTITLE: Testing go mod init with existing GOPATH-mode vendor directory\nDESCRIPTION: Verifies that 'go mod init' works with an existing GOPATH-mode vendor directory and uses -mod=vendor by default for Go versions prior to 1.23.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_auto.txt#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nrm go.mod\nrm vendor/modules.txt\n\ngo mod init example.com/auto\ngo mod edit -go=1.22\ngo list -f {{.Dir}} -tags tools -e all\nstdout '^'$WORK'[/\\\\]auto$'\nstdout '^'$WORK'[/\\\\]auto[/\\\\]vendor[/\\\\]example.com[/\\\\]printversion$'\nstdout '^'$WORK'[/\\\\]auto[/\\\\]vendor[/\\\\]example.com[/\\\\]version$'\n```\n\n----------------------------------------\n\nTITLE: Generating Base64 Encoded Go 1.17 Binary\nDESCRIPTION: Shell commands to build a Go 1.17 binary with specific platform settings, encode it to base64, and clean up. Uses GOTOOLCHAIN to ensure Go 1.17 is used, targeting Linux AMD64 architecture.\nSOURCE: https://github.com/golang/go/blob/master/src/debug/buildinfo/testdata/go117/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGOTOOLCHAIN=go1.17 GOOS=linux GOARCH=amd64 go build -trimpath\nbase64 go117 > go117.base64\nrm go117\n```\n\n----------------------------------------\n\nTITLE: Test File Implementation\nDESCRIPTION: Basic Go test file containing an empty test function\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_build_failure.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Configuration\nDESCRIPTION: Simple go.mod file that defines a module named 'x' without any dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_nodeps.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nmodule x\n```\n\n----------------------------------------\n\nTITLE: Module Definition in .mod File\nDESCRIPTION: Basic module declaration for the golang.org/toolchain module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-arm64.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Querying Module Information Using go list - Go - Shell\nDESCRIPTION: This snippet sets the Go proxy to direct mode and invokes go list to retrieve the module and version information for the given module path and pseudo-version tag. It requires Go to be installed and assumes network access to the provided repository. The key parameter is the module path with version (vcs-test.golang.org/git/odd-tags.git@latest), and the expected output is a pseudo-version resolved from repository state. Limitations include relying on the repository being available and supporting direct access.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_odd_tags.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GOPROXY=direct\n\ngo list -m vcs-test.golang.org/git/odd-tags.git@latest\nstdout -count=1 '^.'\nstdout '^vcs-test.golang.org/git/odd-tags.git v0.1.1-0.20220223184835-9d863d525bbf$'\n```\n\n----------------------------------------\n\nTITLE: Mach-O Relocation Types and Structures - debug/macho\nDESCRIPTION: Type definitions and structures for handling relocations in Mach-O binaries\nSOURCE: https://github.com/golang/go/blob/master/api/go1.10.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype Reloc struct {\n    Addr uint32\n    Value uint32\n    Type uint8\n    Len uint8\n    Pcrel bool\n    Extern bool\n    Scattered bool\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Build Output for $WORK Path Prefix\nDESCRIPTION: This shell script tests the 'go build' command output to ensure that nothing is prepended to the $WORK path prefix, addressing issue golang.org/issue/37012.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_n_cgo.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n[!cgo] skip\n\n# Test that nothing is prepended to $WORK path prefix.\n# See issue golang.org/issue/37012.\ngo build -n\n! stderr '[/\\\\]\\$WORK'\nstderr '[ =]\\$WORK'\n```\n\n----------------------------------------\n\nTITLE: Standalone Go Benchmark Test Definition\nDESCRIPTION: Defines a basic empty benchmark function in Go. This is a minimal benchmark test setup that can be used as a template for more complex benchmarking scenarios.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_no_benchmarks.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage standalone_benchmark\n\nimport \"testing\"\n\nfunc Benchmark(b *testing.B) {\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Old and New File Contents with Diff Output\nDESCRIPTION: This snippet shows the contents of the old and new versions of a file, followed by the diff output. The diff indicates that a newline was added at the end of the file.\nSOURCE: https://github.com/golang/go/blob/master/src/internal/diff/testdata/eof2.txt#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-- old --\na\nb\nc^D\n-- new --\na\nb\nc\n-- diff --\ndiff old new\n--- old\n+++ new\n@@ -1,3 +1,3 @@\n a\n b\n-c\n\\ No newline at end of file\n+c\n```\n\n----------------------------------------\n\nTITLE: Defining Module 'b' Version 1 in Go\nDESCRIPTION: This go.mod file defines module 'b' version 1 and its dependency on module 'e'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_pseudo_artifact.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/b\n\ngo 1.16\n\nrequire example.net/e v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Package Usage Example\nDESCRIPTION: Simple Go package that imports rsc.io/quote module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_skip_write.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage use\n\nimport _ \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: Verifying t.Fatal Behavior in Go Benchmarks with Shell Commands\nDESCRIPTION: A set of shell commands that run a benchmark test with the expectation that it will fail. The commands verify that the output doesn't indicate success and instead shows FAIL.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_benchmark_fatal.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n! go test -run '^$' -bench . benchfatal\n! stdout ^ok\n! stderr ^ok\nstdout FAIL.*benchfatal\n```\n\n----------------------------------------\n\nTITLE: Defining Error Constants for NetBSD ARM64 CGO in Go\nDESCRIPTION: This snippet defines various error constants used in system calls for NetBSD on ARM64 architecture. These constants are part of the syscall package and are used to represent different error conditions that can occur during system operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_18\n\nLANGUAGE: Go\nCODE:\n```\nconst EFTYPE = 79\nconst EFTYPE Errno\nconst EHOSTDOWN = 64\nconst EHOSTUNREACH = 65\nconst EIDRM = 82\nconst EILSEQ = 85\nconst EINPROGRESS = 36\nconst EINTR = 4\nconst EINVAL = 22\nconst EIO = 5\n// ... (more error constants)\n```\n\n----------------------------------------\n\nTITLE: Storing Version Metadata in JSON\nDESCRIPTION: This snippet contains JSON data, likely from a `.info` file associated with the module version. It stores the version string \"v1.0.0\" under the key \"Version\", commonly used for metadata purposes in the Go ecosystem.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_version_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.0.0\"}\n```\n\n----------------------------------------\n\nTITLE: Creating v3 Branch with Module Path Update\nDESCRIPTION: Creates and checks out a v3-dev branch, updates the go.mod file for v3 module path, commits the change, and tags it with a pre-release version format.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/odd-tags.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit branch v3-dev\ngit checkout v3-dev\ncp v3/go.mod go.mod\ngit commit go.mod -m 'update to /v3'\ngit tag 'v3.0.0-20220223184802-12d19af20458'\n\ngit checkout main\n```\n\n----------------------------------------\n\nTITLE: Defining a Minimal Go Module File - Go\nDESCRIPTION: Specifies a basic go.mod file to declare the module path as 'sample' and set the Go language version to 1.12. This file allows the Go toolchain to recognize the directory as a Go module, supporting testing of error handling when GO111MODULE is set to off. The file has no parameters and is required for module command testing but imposes no functional constraints.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_off.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule sample\\n\\ngo 1.12\n```\n\n----------------------------------------\n\nTITLE: Vendor Package C Definition\nDESCRIPTION: Empty package 'c' definition in vendor directory\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/noncanonical_import.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage c\n```\n\n----------------------------------------\n\nTITLE: Sample Go Module Definition\nDESCRIPTION: Basic module definition file named x.mod declaring a module named 'm'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_nomod.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Main Package Implementation\nDESCRIPTION: Minimal Go program implementation with empty main function\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_bzr.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Dependency Package Definition\nDESCRIPTION: Empty package definition for the external dependency example.net/x.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_lazy_self.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage x\n```\n\n----------------------------------------\n\nTITLE: Module A Implementation\nDESCRIPTION: Implementation of module 'a' using dependencies p and q\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\nimport (\n\t\"example.com/p\"\n\t\"example.com/q\"\n)\n\nfunc Foo() {\n\tp.P()\n\tq.Q()\n}\n```\n\n----------------------------------------\n\nTITLE: Package Depends-on-a Test\nDESCRIPTION: Test file for package depends-on-a that imports package a.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_internal.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage depends\n\nimport (\n  _ \"a\"\n)\n```\n\n----------------------------------------\n\nTITLE: Go Module Configuration\nDESCRIPTION: Basic Go module configuration file specifying module name and Go version\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_file_path.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com\ngo 1.13\n```\n\n----------------------------------------\n\nTITLE: Direct Usage Module\nDESCRIPTION: Go file demonstrating direct import of the lazyupgrade module\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_lazy_upgrade_lazy.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage use\n\nimport _ \"example.com/lazyupgrade\"\n```\n\n----------------------------------------\n\nTITLE: Package Import Example\nDESCRIPTION: Simple Go package that imports a retracted module version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage use\n\nimport _ \"example.com/retract\"\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module\nDESCRIPTION: This Go module definition declares the module name for the test project.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_symlink.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule golang.org/issue/28107\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration for Documentation\nDESCRIPTION: Base URL configuration for package documentation links\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/linklist3.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"DocLinkBaseURL\": \"https://pkg.go.dev\"}\n```\n\n----------------------------------------\n\nTITLE: Module Definition Configuration\nDESCRIPTION: Defines the module name in .mod file for the Go package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_depofdirectpatch_v1.0.1.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule patch.example.com/depofdirectpatch\n```\n\n----------------------------------------\n\nTITLE: iOS ARM64 Platform Configuration\nDESCRIPTION: Configuration settings for iOS ARM64 build environment\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_cross_build.txt#2025-04-22_snippet_2\n\nLANGUAGE: conf\nCODE:\n```\nGOOS=ios\nGOARCH=arm64\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module definition file specifying Go version 1.20 requirement\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/link/testdata/script/randlayout_option.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule main\n\ngo 1.20\n```\n\n----------------------------------------\n\nTITLE: Go module definition\nDESCRIPTION: Defines a Go module named 'bench' with Go version 1.16.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_benchmark_1x.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule bench\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines the module name for the test file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_prefer_compatible.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nmodule github.com/golang.org/issue/34165\n```\n\n----------------------------------------\n\nTITLE: Multiline String Definition\nDESCRIPTION: Defines a multiline string to be used for testing purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_rationale.txt#_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n[short description\nmore\n\ndetail\nsuffix]\n```\n\n----------------------------------------\n\nTITLE: Basic Go Command Package\nDESCRIPTION: Minimal Go main package implementation for testing go list -find command\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_find_nodeps.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Minimal Go Main Package\nDESCRIPTION: A minimal Go main package with an empty main function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_output.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module\nDESCRIPTION: Defines a basic Go module named 'x' in the go.mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query_exclude.txt#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\nmodule x\n```\n\n----------------------------------------\n\nTITLE: Module Version Information\nDESCRIPTION: JSON format version information for the module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_badchain_b_v1.1.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.1.0\"}\n```\n\n----------------------------------------\n\nTITLE: Module Definition in Go\nDESCRIPTION: Basic Go module definition specifying Go version 1.21.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/ws2_32.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.21\n```\n\n----------------------------------------\n\nTITLE: Module B Implementation\nDESCRIPTION: Package b implementation with a simple exported function B().\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage b\n\nfunc B() {\n}\n```\n\n----------------------------------------\n\nTITLE: Module C Configuration\nDESCRIPTION: Basic module configuration for example.com/c with Go 1.21.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_issue54372.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/c\n\ngo 1.21\n```\n\n----------------------------------------\n\nTITLE: Module B Configuration\nDESCRIPTION: Basic module configuration for example.com/b with Go 1.21.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_issue54372.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/b\n\ngo 1.21\n```\n\n----------------------------------------\n\nTITLE: Syntax Error Package\nDESCRIPTION: Package with intentional syntax error to test import behavior\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_errors.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npack-age syntaxerror // sic\n\nimport \"example.net/oops\"\n```\n\n----------------------------------------\n\nTITLE: Module Version Information in .info File\nDESCRIPTION: JSON configuration specifying the version of the module as v2.0.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/gopkg.in_dummy.v2-unstable_v2.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v2.0.0\"}\n```\n\n----------------------------------------\n\nTITLE: Package Declaration\nDESCRIPTION: Basic Go package declaration file with package name 'b'\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_deprecated_b_v1.9.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage b\n```\n\n----------------------------------------\n\nTITLE: Package B Go File\nDESCRIPTION: Defines package 'b' for testing purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_vendor.txt#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\npackage b\n```\n\n----------------------------------------\n\nTITLE: Defining Syscall Constants for NetBSD ARM64 CGO\nDESCRIPTION: This snippet defines various system call constants for NetBSD on ARM64 architecture with CGO enabled. It includes constants for terminal control, network control, data link types, and other system-specific values.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_13\n\nLANGUAGE: Go\nCODE:\n```\nconst CLONE_VM ideal-int\nconst CREAD = 2048\nconst CREAD ideal-int\nconst CS5 = 0\nconst CS5 ideal-int\nconst CS6 = 256\nconst CS6 ideal-int\nconst CS7 = 512\nconst CS7 ideal-int\nconst CS8 = 768\nconst CS8 ideal-int\nconst CSIZE = 768\nconst CSIZE ideal-int\nconst CSTART = 17\nconst CSTART ideal-int\nconst CSTATUS = 20\nconst CSTATUS ideal-int\nconst CSTOP = 19\nconst CSTOPB = 1024\nconst CSTOPB ideal-int\nconst CSTOP ideal-int\nconst CSUSP = 26\nconst CSUSP ideal-int\nconst CTL_MAXNAME = 12\nconst CTL_MAXNAME ideal-int\nconst CTL_NET = 4\nconst CTL_NET ideal-int\nconst CTL_QUERY = -2\nconst CTL_QUERY ideal-int\nconst DIOCBSFLUSH = 536896632\nconst DIOCBSFLUSH ideal-int\n// ... (truncated for brevity)\n```\n\n----------------------------------------\n\nTITLE: Testing Default GOEXPERIMENT Value\nDESCRIPTION: Verifies that GOEXPERIMENT environment variable is empty by default\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_exp.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo env\nstdout GOEXPERIMENT=\n```\n\n----------------------------------------\n\nTITLE: Initializing Git repository with specific configuration\nDESCRIPTION: Initializes a Git repository with case-insensitive and Unicode precomposition settings, then adds and commits a README file as the initial commit. Creates the master branch.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/test2-svn-git.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit init\ngit config --add core.ignorecase true\ngit config --add core.precomposeunicode true\n\ngit add README\nat 2017-09-22T11:39:03-04:00\ngit commit -a -m 'README'\ngit branch -m master\n\ngit rev-parse HEAD\nstdout '^7f800d2ac276dd7042ea0e8d7438527d236fd098$'\n```\n\n----------------------------------------\n\nTITLE: Empty Assembly Implementation File\nDESCRIPTION: An empty assembly file that allows the Go compiler to accept the external declaration of function 'f' in the Go code without implementation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_asm.txt#2025-04-22_snippet_3\n\nLANGUAGE: assembly\nCODE:\n```\n// empty asm file,\n// so go test doesn't complain about declaration of f in p.go.\n```\n\n----------------------------------------\n\nTITLE: Symlink Package Import\nDESCRIPTION: Go file importing an unresolved package through symlink\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_symlink_issue35941.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage symlink\n\nimport _ \"example.net/unresolved\"\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines a Go module with version 1.700 requirement\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_gomod_issue61455.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com\n\ngo 1.700\n```\n\n----------------------------------------\n\nTITLE: Defining Module Version Information in JSON\nDESCRIPTION: This JSON snippet, likely from a '.info' file, specifies the version of the Go module. It contains a single key-value pair setting the 'Version' to 'v1.0.0'. This format might be specific to the project's tooling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_deprecated_b_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.0.0\"}\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Go Binary in Different Directory\nDESCRIPTION: Rebuilds the same Go binary in a different directory to verify cache usage and consistency of build outputs.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_trimpath_issue48557.txt#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nmkdir bar\ncp foo/main.go bar/main.go\ncd bar\ngo build -x -o a.exe main.go\n! stderr ${/}compile$GOEXE\n\ngo tool buildid a.exe\ncp stdout ../bar-buildid.txt\ngo version a.exe\ncp stdout ../bar-version.txt\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Empty Package File\nDESCRIPTION: A placeholder Go source file defining an empty package 'p'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_goline_order.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage p\n```\n\n----------------------------------------\n\nTITLE: Package Y Implementation\nDESCRIPTION: Empty package declaration for y\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_legacy_mod.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage y\n```\n\n----------------------------------------\n\nTITLE: Dependency Module Definition\nDESCRIPTION: Module definition for the dependent package x.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_nospace.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/x\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Defining Golang Toolchain Module\nDESCRIPTION: Defines the module name for the Golang toolchain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.windows-arm.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Empty Package Y Implementation\nDESCRIPTION: Minimal package y definition with no functionality.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gcflags_patterns.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage y\n```\n\n----------------------------------------\n\nTITLE: Raw Input Format\nDESCRIPTION: Original input text format with line breaks\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/hello.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\tHello,\n\tworld\n\n\tThis is\n\ta test.\n```\n\n----------------------------------------\n\nTITLE: Subdirectory Go Module Definition\nDESCRIPTION: Module definition for the sub/dir directory\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_deleted.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule example/sub/dir\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Module A v0.2.0 Definition\nDESCRIPTION: Definition for example.net/a module version 0.2.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patchcycle.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/a\n\ngo 1.16\n```\n\nLANGUAGE: go\nCODE:\n```\npackage a\n```\n\n----------------------------------------\n\nTITLE: Module Definition\nDESCRIPTION: Basic module declaration for golang.org/toolchain\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.windows-arm64.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Empty Link in gofmt Format\nDESCRIPTION: Shows gofmt formatted version of an empty link reference\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/crash1.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n[]\\n\\n[]: http://\n```\n\n----------------------------------------\n\nTITLE: Empty Package Declaration\nDESCRIPTION: An empty package declaration for the b package in the replacement module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_replace_absolute_windows.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage b\n```\n\n----------------------------------------\n\nTITLE: Defining Empty Go Module File\nDESCRIPTION: Creates an empty Go module file named 'm'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/get_insecure.txt#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Vendored HPACK Package\nDESCRIPTION: Placeholder for the vendored hpack package implementation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_std_vendor.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage hpack\n```\n\n----------------------------------------\n\nTITLE: Go Module Declaration\nDESCRIPTION: Module declaration in go.mod file specifying the module path.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_depofdirectpatch_v1.0.1.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule patch.example.com/depofdirectpatch\n```\n\n----------------------------------------\n\nTITLE: Overlay Function Definition\nDESCRIPTION: Go file containing function f definition in package m.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_overlay.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage m\n\nfunc f() {\n}\n```\n\n----------------------------------------\n\nTITLE: Main Package Declaration\nDESCRIPTION: Empty main package declaration file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_buildvcs.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n```\n\n----------------------------------------\n\nTITLE: Defining Go module\nDESCRIPTION: Defines the Go module for the test project.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test_cached.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nmodule golang.org/issue/29111/foo\n```\n\n----------------------------------------\n\nTITLE: Unresolved Module Definition\nDESCRIPTION: Go module definition for the unresolved package\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_symlink_issue35941.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/unresolved\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Linux system calls for 32-bit x86 architecture in syscall package\nDESCRIPTION: System call functions for Linux 386 architecture. Includes AllThreadsSyscall variants for executing syscalls across all threads and functions to set effective group and user IDs.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc AllThreadsSyscall(uintptr, uintptr, uintptr, uintptr) (uintptr, uintptr, Errno)\nfunc AllThreadsSyscall6(uintptr, uintptr, uintptr, uintptr, uintptr, uintptr, uintptr) (uintptr, uintptr, Errno)\nfunc Setegid(int) error\nfunc Seteuid(int) error\n```\n\n----------------------------------------\n\nTITLE: Testing Example Output with Println\nDESCRIPTION: Go test example that uses fmt.Println to generate output with platform's default line endings to verify correct handling during testing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_crlf_example.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc Example_println() {\n\tfmt.Println(\"foo\")\n\tfmt.Println(\"bar\")\n\t// Output:\n\t// foo\n\t// bar\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module declaration file specifying the module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_compiled_files_issue28749.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/foo\n\ngo 1.20\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Gofmt Binary\nDESCRIPTION: Shell script implementing a placeholder 'gofmt' command that outputs a message but is noted as unused.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.ios-arm64.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: Doc Link Input Format\nDESCRIPTION: Shows the original format of a documentation link reference before processing.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/doclink5.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n[encoding/json.Marshal] is a doc link.\n```\n\n----------------------------------------\n\nTITLE: ReadLinkFS Interface Definition\nDESCRIPTION: Definition of the ReadLinkFS interface that combines Lstat, Open, and ReadLink capabilities for filesystem operations.\nSOURCE: https://github.com/golang/go/blob/master/api/next/49580.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype ReadLinkFS interface {\n    Lstat(string) (FileInfo, error)\n    Open(string) (File, error)\n    ReadLink(string) (string, error)\n}\n```\n\n----------------------------------------\n\nTITLE: NetBSD System Constants\nDESCRIPTION: Memory management and process cloning constants for NetBSD 386 architecture. Defines various flags and options for memory mapping and process control.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_18\n\nLANGUAGE: Go\nCODE:\n```\nconst (\n    CLONE_VM = 256\n    CLONE_FS = 512\n    CLONE_FILES = 1024\n    CLONE_SIGHAND = 2048\n    MAP_SHARED = 1\n    MAP_PRIVATE = 2\n    PROT_NONE = 0\n    PROT_READ = 1\n    PROT_EXEC = 4\n)\n```\n\n----------------------------------------\n\nTITLE: Local Module Definition\nDESCRIPTION: A simple go.mod file for the local replacement module 'example.com/b'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_replace_file.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/b\n```\n\n----------------------------------------\n\nTITLE: Declaring Empty Go Package\nDESCRIPTION: This Go file declares an empty package named 'empty', which serves as a placeholder or for demonstration purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rationale_v1.0.0-empty.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage empty\n```\n\n----------------------------------------\n\nTITLE: Markdown Input with Go Doc References\nDESCRIPTION: Markdown formatted text containing references to Go testing package components that should be converted to documentation links\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/linklist2.txt#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nDid you know?\n\n  - [testing.T] is one doc link.\n  - So is [testing.M].\n  - So is [testing.B].\n    This is the same list paragraph.\n\n    There is [testing.PB] in this list item, too!\n```\n\n----------------------------------------\n\nTITLE: Defining Expected Error Output for Specific Module Update (Text)\nDESCRIPTION: Specifies the expected standard error output (`stderr`) when the `go get example.com/badchain/a` command fails. The error indicates that upgrading `example.com/badchain/a` indirectly requires `example.com/badchain/c@v1.1.0`, which fails parsing due to the module path mismatch.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badchain.txt#2025-04-22_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n-- update-a-expected --\ngo: example.com/badchain/a@upgrade (v1.1.0) indirectly requires example.com/badchain/c@v1.1.0: parsing go.mod:\n\tmodule declares its path as: badchain.example.com/c\n\t        but was required as: example.com/badchain/c\n```\n\n----------------------------------------\n\nTITLE: Defining Socket Message Constants for NetBSD ARM64 in Go\nDESCRIPTION: This snippet defines constants used for socket message handling on NetBSD ARM64. These constants are typically used with send, recv, and related socket operations to control message behavior.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_139\n\nLANGUAGE: Go\nCODE:\n```\nconst MSG_BCAST = 256\nconst MSG_BCAST ideal-int\nconst MSG_CMSG_CLOEXEC = 2048\nconst MSG_CMSG_CLOEXEC ideal-int\nconst MSG_CONTROLMBUF = 33554432\n```\n\n----------------------------------------\n\nTITLE: Command Package A Implementation\nDESCRIPTION: Minimal main package implementation for command a.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_cmd_v1.0.0-newerself.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Go Workspace Definition\nDESCRIPTION: Defines a Go workspace with version 1.22.2 and includes the current directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_commandline.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\ngo 1.22.2\n\nuse .\n```\n\n----------------------------------------\n\nTITLE: Verifying Absence of Vendored Unix Package in Go Standard Library\nDESCRIPTION: Shell script that runs Go module commands to verify that golang.org/x/sys/unix is not present in the vendored dependencies of the standard library. Uses GO111MODULE=on environment setting and checks the output of 'go list std' command.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/prevent_sys_unix_import.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\ngo list std\n! stdout vendor/golang.org/x/sys/unix\n```\n\n----------------------------------------\n\nTITLE: Replacement Internal Package Source File\nDESCRIPTION: Defines a placeholder source file for the `subtle` package within the replacement `golang.org/x/internal` module. It contains only a comment, serving as a minimal valid package for replacement purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_19\n\nLANGUAGE: go\nCODE:\n```\n-- replace/golang.org/notx/internal/subtle/subtle.go --\npackage subtle\n// Ha ha! Nothing here!\n```\n\n----------------------------------------\n\nTITLE: Defining Network Control Constants in Go for Darwin ARM64 CGO\nDESCRIPTION: This snippet defines constants related to network control operations for the syscall package on Darwin ARM64 with CGO. These constants are used for system-level network configuration and management.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_140\n\nLANGUAGE: Go\nCODE:\n```\nconst CTL_MAXNAME = 12\nconst CTL_NET = 4\n```\n\n----------------------------------------\n\nTITLE: Module Version Information\nDESCRIPTION: JSON configuration containing version information for the module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_badchain_c_v1.1.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.1.0\"}\n```\n\n----------------------------------------\n\nTITLE: Declaring Init function in testing package\nDESCRIPTION: Declaration of the Init function in the testing package. This function initializes the testing package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_173\n\nLANGUAGE: go\nCODE:\n```\nfunc Init()\n```\n\n----------------------------------------\n\nTITLE: Package z Definition\nDESCRIPTION: Empty package declaration in lowercase directory path\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badfile5_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage z\n```\n\n----------------------------------------\n\nTITLE: Testing module version detection with commit hash\nDESCRIPTION: Tests go get with a specific commit hash which should detect the correct pseudo-version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/get_issue53955.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncd $WORK/m\ngo get -x github.com/golang/issue53955@2cb3d49f\nstderr '^go: added github.com/golang/issue53955 v1.0.10-0.20220719150701-2cb3d49f8874$'\n```\n\n----------------------------------------\n\nTITLE: Specifying Module Version v1.1.0 in JSON (Test Context .info)\nDESCRIPTION: This JSON snippet specifies the version \"v1.1.0\" for the test module. This metadata file is likely used by the testing framework to identify the state of the module being tested.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_pkgadded_v1.1.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.1.0\"}\n```\n\n----------------------------------------\n\nTITLE: Test Function for Subpackage A\nDESCRIPTION: A Go test file for subpackage 'a' with a minimal test function. This is used to verify that tests for subpackages run correctly.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_patterns_outside_gopath.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage a_test\n\nimport \"testing\"\n\nfunc TestA(t *testing.T) {\n}\n```\n\n----------------------------------------\n\nTITLE: Recursive Go Work Usage Error Handling\nDESCRIPTION: This snippet shows an example of using 'go work use -r' command. It demonstrates the expected error when a non-directory is supplied to the command.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_only_dirs.txt#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n! go work use -r qux\nstderr '^go: qux is not a directory'\n```\n\n----------------------------------------\n\nTITLE: Module A v0.1.1 Definition\nDESCRIPTION: Definition for example.net/a module version 0.1.1 with dependency on example.net/b.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patchcycle.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/a\n\ngo 1.16\n\nrequire example.net/b v0.1.0\n```\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\nimport _ \"example.net/b\"\n```\n\n----------------------------------------\n\nTITLE: Go Workspace Non-Overlay Definition\nDESCRIPTION: Standard Go workspace configuration file defining module usage without overlay\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_overlay.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nuse (\n    ./a\n    ./b\n    ./c\n)\n```\n\n----------------------------------------\n\nTITLE: Data Link Type Constants for Darwin ARM64\nDESCRIPTION: Defines constants for different types of data link protocols and network interfaces supported by the system\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_56\n\nLANGUAGE: Go\nCODE:\n```\nconst (\n    DLT_NULL = 0\n    DLT_EN10MB = 1\n    DLT_EN3MB = 2\n    DLT_AX25 = 3\n    DLT_PRONET = 4\n    DLT_CHAOS = 5\n    // ... other DLT constants\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Time Comparison Utility in Go\nDESCRIPTION: A Go program that compares two timestamps stored in JSON format. It's used to verify if the mtime of cgo remains unchanged after the test operation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_race_install_cgo.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n\t\"time\"\n)\n\n\nfunc main() {\n\tvar t1 time.Time\n\tb1, err := os.ReadFile(os.Args[1])\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n\tif err := json.Unmarshal(b1, &t1); err != nil  {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n\n\tvar t2 time.Time\n\tb2, err := os.ReadFile(os.Args[2])\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n\tif err := json.Unmarshal(b2, &t2); err != nil  {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n\n\tif !t1.Equal(t2) {\n\t\tfmt.Fprintf(os.Stderr, \"time in %v (%v) is not the same as time in %v (%v)\", os.Args[1], t1, os.Args[2], t2)\n\t\tos.Exit(1)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Test Package Declaration\nDESCRIPTION: External test package declaration used for testing package visibility boundaries.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage p_test\n```\n\n----------------------------------------\n\nTITLE: Defining File Type Constants for NetBSD ARM64\nDESCRIPTION: These constants define file type identifiers used in directory entries on NetBSD ARM64. They are used to determine the type of a file when reading directory contents with functions like readdir().\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_121\n\nLANGUAGE: Go\nCODE:\n```\nconst DT_BLK = 6\nconst DT_BLK ideal-int\nconst DT_CHR = 2\nconst DT_CHR ideal-int\nconst DT_DIR = 4\nconst DT_DIR ideal-int\nconst DT_FIFO = 1\nconst DT_FIFO ideal-int\nconst DT_LNK = 10\nconst DT_LNK ideal-int\nconst DT_REG = 8\nconst DT_REG ideal-int\nconst DT_SOCK = 12\nconst DT_SOCK ideal-int\nconst DT_UNKNOWN = 0\nconst DT_UNKNOWN ideal-int\nconst DT_WHT = 14\nconst DT_WHT ideal-int\n```\n\n----------------------------------------\n\nTITLE: Testing Go List Command with Package Patterns\nDESCRIPTION: A series of shell commands testing the 'go list' functionality with various package patterns. It includes tests for single and multiple patterns, correct package identification, and error handling for non-existent files or directories.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_ambiguous_path.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# Ensures that we can correctly list package patterns ending in '.go'.\n# See golang.org/issue/34653.\n\n# A single pattern for a package ending in '.go'.\ngo list ./foo.go\nstdout '^test/foo.go$'\n\n# Multiple patterns for packages including one ending in '.go'.\ngo list ./bar ./foo.go\nstdout '^test/bar$'\nstdout '^test/foo.go$'\n\n# A single pattern for a Go file.\ngo list ./a.go\nstdout '^command-line-arguments$'\n\n# A single typo-ed pattern for a Go file. This should\n# treat the wrong pattern as if it were a package.\n! go list ./foo.go/b.go\nstderr '^stat .*[/\\\\]foo\\.go[/\\\\]b\\.go: directory not found$'\n\n# Multiple patterns for Go files with a typo. This should\n# treat the wrong pattern as if it were a nonexistent file.\n! go list ./foo.go/a.go ./foo.go/b.go\n[GOOS:plan9] stderr 'stat ./foo.go/b.go: ''./foo.go/b.go'' does not exist'\n[GOOS:windows] stderr './foo.go/b.go: The system cannot find the file specified'\n[!GOOS:plan9] [!GOOS:windows] stderr './foo.go/b.go: no such file or directory'\n```\n\n----------------------------------------\n\nTITLE: Simple Go Package Implementation\nDESCRIPTION: A minimal Go package implementation with a single exported function F() that has no implementation details.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo121_v0.0.1.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nfunc F() {}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: This snippet defines the Go module for the test project. It specifies the module name as 'example.com/mod'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_support_buildx.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/mod\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Configuration for Module B\nDESCRIPTION: This snippet shows the content of the go.mod file for module 'example.com/b', specifying the module name and Go version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_module_not_in_go_work.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/b\n\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Basic Module Import with Default Build Tags\nDESCRIPTION: A Go file importing module 'x' with no build constraints. This file will be included in all builds as it doesn't have any build tag restrictions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vendormod.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage m\n\nimport _ \"x\"\n```\n\n----------------------------------------\n\nTITLE: Go Command Shell Script Implementation\nDESCRIPTION: Simple shell script that serves as the 'go' command for this test toolchain, printing a version identifier message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-loong64.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Basic Go module definition file specifying the module name\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badfile5_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule rsc.io/badfile5\n```\n\n----------------------------------------\n\nTITLE: Raw Input Format Test\nDESCRIPTION: Shows raw input format with dollar signs as delimiters and blank lines at start/end\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/blank.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\t$\n\tBlank line at start and end.\n\t$\n```\n\n----------------------------------------\n\nTITLE: Defining Empty Go Package\nDESCRIPTION: This snippet shows an empty Go package declaration for the 'foo' module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_implicit_go_requirement.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage foo\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Replacement Without Requirement\nDESCRIPTION: This script initializes a new Go module, adds a replacement for a non-existent module, and then verifies that attempting to install the module fails without suggesting to add it as a requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_install_hint.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo mod init m\ngo mod edit -replace=github.com/notrequired@v0.5.0=github.com/doesnotexist@v0.5.0\n! go install github.com/notrequired\n! stderr 'to add it:'\n```\n\n----------------------------------------\n\nTITLE: GOROOT Testing Main Program\nDESCRIPTION: Go program that prints the runtime.GOROOT() value and attempts to import the runtime package to verify GOROOT detection. This is used to test GOROOT behavior across different build configurations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_trimpath_goroot.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\n//go:generate go run .\n\nimport (\n\t\"fmt\"\n\t\"go/build\"\n\t\"os\"\n\t\"runtime\"\n)\n\nfunc main() {\n\tfmt.Println(\"GOROOT\", runtime.GOROOT())\n\n\tp, err := build.Default.Import(\"runtime\", \"\", build.FindOnly)\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n\tfmt.Println(\"runtime\", p.Dir)\n}\n```\n\n----------------------------------------\n\nTITLE: Expected Output for Dependency Listing (Text)\nDESCRIPTION: Specifies the expected output content for the 'go list' command executed earlier. This content is compared against the actual output using the 'cmp' command. It lists the non-standard import paths: the package itself ('pkg'), the package qualified for testing ('pkg [pkg.test]'), and the synthesized test main package ('pkg.test').\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_split_main.txt#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n-- want --\npkg\npkg [pkg.test]\npkg.test\n```\n\n----------------------------------------\n\nTITLE: Implementing Localized Greeting Function in Go\nDESCRIPTION: This function returns a localized greeting based on provided language preferences or default preferences if none are provided.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.2.0.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc Hello(prefs ...language.Tag) string {\n\tif len(prefs) == 0 {\n\t\tprefs = DefaultUserPrefs()\n\t}\n\treturn hello.find(prefs)\n}\n```\n\n----------------------------------------\n\nTITLE: Testing \\B with End Anchors in Go Regexps\nDESCRIPTION: Tests the interaction between \\B non-word boundary assertions and end-of-string anchors ($). These tests verify how non-word boundaries behave at string boundaries.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_10\n\nLANGUAGE: regexp\nCODE:\n```\n\\B$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:\\B$)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:\\B$)\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:\\B$)$\n```\n\n----------------------------------------\n\nTITLE: Command Line Program Implementation\nDESCRIPTION: Main package implementing a simple command that prints the module version string\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_deprecated_a_v1.9.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() { fmt.Println(\"a@v1.9.0\") }\n```\n\n----------------------------------------\n\nTITLE: Platform-specific Go file with incompatible build tag\nDESCRIPTION: A Go file with a filename indicating Linux platform but with a Windows-only build constraint, making it excluded from standard builds.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_no_go.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// +build windows\n\npackage x\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Limit Constants in Go for Darwin ARM64 CGO\nDESCRIPTION: This snippet defines constants for resource limits used in system calls on Darwin ARM64 with CGO. These constants are used to set or get process resource limits.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_172\n\nLANGUAGE: Go\nCODE:\n```\nconst RLIMIT_AS = 5\nconst RLIMIT_AS ideal-int\nconst RLIMIT_CORE = 4\nconst RLIMIT_CORE ideal-int\nconst RLIMIT_CPU = 0\nconst RLIMIT_CPU ideal-int\nconst RLIMIT_CPU_USAGE_MONITOR = 2\nconst RLIMIT_CPU_USAGE_MONITOR ideal-int\nconst RLIMIT_DATA = 2\nconst RLIMIT_DATA ideal-int\nconst RLIMIT_FSIZE = 1\nconst RLIMIT_FSIZE ideal-int\nconst RLIMIT_NOFILE = 8\nconst RLIMIT_NOFILE ideal-int\nconst RLIMIT_STACK = 3\nconst RLIMIT_STACK ideal-int\nconst RLIM_INFINITY = 9223372036854775807\nconst RLIM_INFINITY ideal-int\n```\n\n----------------------------------------\n\nTITLE: NetBSD ARM64 System Call Constants in Go\nDESCRIPTION: Defines system call numbers for various operations in NetBSD on ARM64. These constants are used when making direct system calls from Go code running on NetBSD ARM64 platforms.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_151\n\nLANGUAGE: Go\nCODE:\n```\nconst SYS___SIGTIMEDWAIT = 431\nconst SYS_SOCKET = 394\nconst SYS_SOCKETPAIR = 135\nconst SYS_SSTK = 70\nconst SYS_STAT = 439\nconst SYS_STATVFS1 = 357\nconst SYS_SWAPCTL = 271\nconst SYS_SYMLINK = 57\nconst SYS_SYMLINKAT = 470\nconst SYS_SYNC = 36\nconst SYS_SYSARCH = 165\nconst SYS___SYSCTL = 202\nconst SYS_TIMER_CREATE = 235\nconst SYS_TIMER_DELETE = 236\nconst SYS_TIMER_GETOVERRUN = 239\nconst SYS_TIMER_GETTIME = 447\nconst SYS_TIMER_SETTIME = 446\nconst SYS_TRUNCATE = 200\nconst SYS_UMASK = 60\nconst SYS_UNDELETE = 205\nconst SYS_UNLINK = 10\nconst SYS_UNLINKAT = 471\nconst SYS_UNMOUNT = 22\nconst SYS_UTIMENSAT = 467\nconst SYS_UTIMES = 420\nconst SYS_UTRACE = 306\nconst SYS_UUIDGEN = 355\nconst SYS_VADVISE = 72\nconst SYS_VFORK = 66\nconst SYS_WAIT4 = 449\nconst SYS_WRITE = 4\nconst SYS_WRITEV = 121\n```\n\n----------------------------------------\n\nTITLE: Running Parallel Subtests in Go\nDESCRIPTION: This shell command runs Go tests, specifically targeting subtests named 'Sub' and 'Nested' in the standalone_parallel_sub_test.go file. It ensures the tests run and complete successfully.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_only_subtests_parallel.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo test -run Test/Sub/Nested standalone_parallel_sub_test.go\n! stdout '^ok.*\\[no tests to run\\]'\n! stderr '^ok.*\\[no tests to run\\]'\nstdout '^ok'\n```\n\n----------------------------------------\n\nTITLE: Empty Go Module Definition\nDESCRIPTION: Minimal go.mod file defining only the module name x without any dependencies\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downgrade.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule x\n```\n\n----------------------------------------\n\nTITLE: Go Program for Path Verification\nDESCRIPTION: Main program that attempts to locate the 'go' executable in the system path using exec.LookPath. Used to verify path configuration and accessibility of the go toolchain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/generate_goroot_PATH.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n//go:generate go run .\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n)\n\nfunc main() {\n\t_, err := exec.LookPath(\"go\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(1)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Go Command Script for Plan9\nDESCRIPTION: A Plan9 rc shell script that serves as a placeholder implementation of the go command for testing purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.plan9-386.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/rc\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Testing Go Version Command with Non-Go Files\nDESCRIPTION: Verifies the behavior of 'go version' with files that don't contain Go build info.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngo version empty.txt\n! stdout .\n! stderr .\ngo version empty.exe\nstderr 'could not read Go build info'\ngo version empty.so\nstderr 'could not read Go build info'\ngo version empty.dll\nstderr 'could not read Go build info'\n```\n\n----------------------------------------\n\nTITLE: Testing error handling for invalid -modfile suffix\nDESCRIPTION: Verifies that an error is reported when the -modfile flag points to a file without a .mod suffix.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/modfile_flag.txt#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncp go.alt.mod goaltmod\n! go mod tidy -modfile=goaltmod\nstderr '-modfile=goaltmod: file does not have .mod extension'\n```\n\n----------------------------------------\n\nTITLE: Empty Go Package File\nDESCRIPTION: An empty Go file that defines the package. This file can be used as a placeholder or for future implementation of package functionality.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_issue45477.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage pkg_test\n```\n\n----------------------------------------\n\nTITLE: Testing go get for Mismatched Major Version With go.mod in Go\nDESCRIPTION: This snippet tests that 'go get' for a mismatched major version with a go.mod file should error out, not resolve to a pseudo-version with a different major version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_version.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ncp go.mod.orig go.mod\n! go get github.com/pierrec/lz4@v2.0.8\nstderr 'go: github.com/pierrec/lz4@v2.0.8: invalid version: module contains a go.mod file, so module path must match major version \\(\"github.com/pierrec/lz4/v2\"\\)$'\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Retractions with Path Changes\nDESCRIPTION: A series of Go commands that test how module retractions are handled, especially when a module has changed its path. The commands check if retractions are properly loaded and warnings are displayed, as well as how upgrade attempts behave when the module path has changed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_rename.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Populate go.sum.\ngo get\n\n# 'go list -m -retracted' should load retractions, even if the version\n# containing retractions has a different module path.\ngo list -m -retracted -f '{{with .Retracted}}retracted{{end}}' example.com/retract/rename\n\n# 'go list -m -u' should load retractions, too.\ngo list -m -u -f '{{with .Retracted}}retracted{{end}}' example.com/retract/rename\n\n# 'go get' should warn about the retracted version.\ngo get\nstderr '^go: warning: example.com/retract/rename@v1.0.0-bad: retracted by module author: bad$'\n\n# We can't upgrade, since this latest version has a different module path.\n! go get example.com/retract/rename\nstderr 'module declares its path as: example.com/retract/newname'\n```\n\n----------------------------------------\n\nTITLE: Go Test Timeout Verification Code\nDESCRIPTION: Go test file that prints the value of test.timeout flag to verify proper timeout configuration. Uses the flag package to access test flags.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_timeout.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage t\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"testing\"\n)\nfunc TestTimeout(t *testing.T) {\n\tfmt.Println(flag.Lookup(\"test.timeout\").Value.String())\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Toolchain Module in .mod File\nDESCRIPTION: The .mod file defines the module name for the Go toolchain test package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.solaris-amd64.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Defining Go Test Toolchain Module Files\nDESCRIPTION: Shows the content of .mod and .info files that define a test Go toolchain module with version information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.plan9-arm.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nmodule golang.org/toolchain\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.999testmod.plan9-arm\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Go Binary Script\nDESCRIPTION: Shell script that identifies itself as the custom go1.999testmod version when executed. This serves as a mock go binary for testing purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-riscv64.txt#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n#!/bin/sh\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Declaring Go Toolchain Version Metadata - JSON\nDESCRIPTION: Declares the Go toolchain version metadata using a JSON object. This snippet specifies the version as v0.0.1-go1.22.5.linux-amd64 and is typically used by Go module infrastructure to track builds. The 'Version' field is necessary for automated tooling and information retrieval; it requires no dependencies beyond JSON parsing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.22.5.linux-amd64.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\\"Version\\\":\\\"v0.0.1-go1.22.5.linux-amd64\\\"}\n```\n\n----------------------------------------\n\nTITLE: Module C Configuration (v0.1.0)\nDESCRIPTION: Basic configuration for module C version 0.1.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue65363.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/c\n\ngo 1.18\n```\n\nLANGUAGE: go\nCODE:\n```\npackage c\n```\n\n----------------------------------------\n\nTITLE: Go Workspace Configuration\nDESCRIPTION: Definition of go.work file specifying Go version 1.18\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_missing_module.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Testing Go Build with Relative GOTMPDIR Path\nDESCRIPTION: This bash script tests how 'go build' behaves when GOTMPDIR is set to a relative path. It verifies that Go properly converts this to an absolute working directory path.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_relative_tmpdir.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=off\n\n# If GOTMPDIR is relative, 'go build' should derive an absolute $WORK directory.\ncd $WORK\nmkdir tmp\nenv GOTMPDIR=tmp\ngo build -work a\nstderr 'WORK='$WORK\n\n# Similarly if TMP/TMPDIR is relative.\nenv GOTMPDIR=\nenv TMP=tmp    # Windows\nenv TMPDIR=tmp # Unix\ngo build -work a\nstderr 'WORK='$WORK\n```\n\n----------------------------------------\n\nTITLE: Using `go list` with Directory Context Switching in Shell\nDESCRIPTION: Executes `go list` in various directories to list packages with context switching using `-C`. This example accesses the `strings` package and attempts an invalid directory, demonstrating error handling. It requires the Go environment to be set up with `GOROOT` pointing to the correct directories.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/chdir.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd $GOROOT/src/math\ngo list -C ../strings\nstdout strings\n! go list -C ../nonexist\nstderr 'chdir.*nonexist'\n```\n\n----------------------------------------\n\nTITLE: Testing Go Bug Help Command\nDESCRIPTION: Tests the help output for the bug command and verifies error handling for invalid arguments\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/help.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo help bug\nstdout 'usage: go bug'\nstdout 'bug report'\n\n! go bug help\nstderr 'bug takes no arguments'\n```\n\n----------------------------------------\n\nTITLE: Dependency Implementation v0.1.0\nDESCRIPTION: The implementation file for the 'deleted' package in version 0.1.0 that will be imported by the main module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_deleted.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage deleted\n```\n\n----------------------------------------\n\nTITLE: Running Go Test with Non-Matching Pattern\nDESCRIPTION: Command to run Go tests with a pattern that won't match any subtests, demonstrating the 'no tests to run' output behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_no_subtests.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test -run Test/ThisWillNotMatch standalone_sub_test.go\\nstdout '^ok.*\\[no tests to run\\]'\n```\n\n----------------------------------------\n\nTITLE: Additional Go Command Source File\nDESCRIPTION: An auxiliary Go source file for the executable package. This file is used to test staleness when removing active source files from an executable package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_rebuild_removed.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n```\n\n----------------------------------------\n\nTITLE: Displaying Git Diff Output for File Addition\nDESCRIPTION: This snippet shows the git diff output for adding three new lines to an empty file. The diff indicates that lines 'a', 'b', and 'c' were added to the file.\nSOURCE: https://github.com/golang/go/blob/master/src/internal/diff/testdata/allnew.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndiff old new\n--- old\n+++ new\n@@ -0,0 +1,3 @@\n+a\n+b\n+c\n```\n\n----------------------------------------\n\nTITLE: Building Go Binaries with -trimpath from Different GOROOT Locations\nDESCRIPTION: A shell script that tests if Go produces identical binaries with -trimpath flag when building from different GOROOT paths. The test creates two different GOROOT locations, builds the same source file, and compares the build IDs to verify deterministic builds.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/link_matching_actionid.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Symlink the compiler to a local path\nenv GOROOT=$WORK/goroot1\nsymlink $GOROOT -> $TESTGO_GOROOT\n\n# Set up fresh GOCACHE\nenv GOCACHE=$WORK/gocache1\nmkdir $GOCACHE\n\n# Build a simple binary\ngo build -o binary1 -trimpath -x main.go\n\n# Now repeat the same process with the compiler at a different local path\nenv GOROOT=$WORK/goroot2\nsymlink $GOROOT -> $TESTGO_GOROOT\n\nenv GOCACHE=$WORK/gocache2\nmkdir $GOCACHE\n\ngo build -o binary2 -trimpath -x main.go\n\n# Check that the binaries match exactly\ngo tool buildid binary1\ncp stdout buildid1\ngo tool buildid binary2\ncp stdout buildid2\ncmp buildid1 buildid2\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Links\nDESCRIPTION: Markdown formatted documentation links for Go's encoding/json package methods\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/linklist.txt#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nDid you know?\n\n  - [encoding/json.Marshal](https://pkg.go.dev/encoding/json#Marshal) is a doc link. So is [encoding/json.Unmarshal](https://pkg.go.dev/encoding/json#Unmarshal).\n```\n\n----------------------------------------\n\nTITLE: Cgo Package Implementation with C Function\nDESCRIPTION: Defines a Go package that uses cgo to interface with a simple C function. It includes a Go function F() that calls the C function and has a conditional branch for coverage testing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_cgo_xtest.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\n/*\nvoid\nf(void)\n{\n}\n*/\nimport \"C\"\n\nvar b bool\n\nfunc F() {\n\tif b {\n\t\tfor {\n\t\t}\n\t}\n\tC.f()\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing Go Module Environment for Testing\nDESCRIPTION: Copies a predefined go.mod file and removes the vendor directory to set up the test environment.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_replace.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncp go.mod1 go.mod\nrm -r vendor\n```\n\n----------------------------------------\n\nTITLE: No CGO Usage Sample Program in Go\nDESCRIPTION: This Go program, intended for testing, doesn't use CGO directly. It's a simple 'Hello World'-like program used to confirm that linking remains internal under normal conditions without CGO_FLAGS.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_suspect_flag_force_external.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {\n\tprintln(\"clean as a whistle\")\n}\n\n```\n\n----------------------------------------\n\nTITLE: Package A Implementation\nDESCRIPTION: Implementation of package a that imports package b.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_version.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\nimport _ \"example.net/b\"\n```\n\n----------------------------------------\n\nTITLE: Empty List Test Package\nDESCRIPTION: Declares an empty test package for list functionality\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_json_with_f.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage list_test\n```\n\n----------------------------------------\n\nTITLE: Module Version Information\nDESCRIPTION: JSON configuration specifying the module version information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_testonly_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.0.0\"}\n```\n\n----------------------------------------\n\nTITLE: Module Version Information\nDESCRIPTION: JSON format version information for the Go module\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_newcycle_b_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.0.0\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Toolchain Version Information in JSON Format\nDESCRIPTION: JSON configuration specifying the version of the test toolchain module for OpenBSD MIPS64.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-mips64.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.999testmod.openbsd-mips64\"}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines the Go module for the test program, setting the module name to 'm' and specifying Go version 1.21 as the requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pie_race.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.21\n```\n\n----------------------------------------\n\nTITLE: Defining UNIX_PATH_MAX Constant in Windows Go Syscalls\nDESCRIPTION: This snippet declares the UNIX_PATH_MAX constant, representing the maximum length for a file path in the Unix domain sockets, defined here for use in Windows architecture. This constant helps to ensure compatibility between platforms when dealing with socket paths in Go system programming.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.12.txt#2025-04-22_snippet_16\n\nLANGUAGE: Go\nCODE:\n```\nconst UNIX_PATH_MAX = 108\nconst UNIX_PATH_MAX ideal-int\n```\n\n----------------------------------------\n\nTITLE: Initializing Empty Go Source File for b - Go\nDESCRIPTION: This file declares package b with neither functions nor exports. It is present so that the module b can be imported and used in the dependency resolution process. No functionality or outputs are produced.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage b\n```\n\n----------------------------------------\n\nTITLE: Package M Definition\nDESCRIPTION: Defines an empty package 'm'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_run_pkgerror.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage m\n```\n\n----------------------------------------\n\nTITLE: Defining BPF Constants in Go for Darwin ARM64 CGO\nDESCRIPTION: This snippet defines constants related to Berkeley Packet Filter (BPF) operations for the syscall package on Darwin ARM64 with CGO. These constants are used for packet filtering and network operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_138\n\nLANGUAGE: Go\nCODE:\n```\nconst BPF_H ideal-int\nconst BPF_IMM = 0\nconst BPF_IND = 64\nconst BPF_JA = 0\nconst BPF_JEQ = 16\nconst BPF_JGE = 48\nconst BPF_JGT = 32\nconst BPF_JMP = 5\nconst BPF_JSET = 64\nconst BPF_K = 0\nconst BPF_LD = 0\nconst BPF_LDX = 1\nconst BPF_LEN = 128\nconst BPF_LSH = 96\nconst BPF_MAJOR_VERSION = 1\nconst BPF_MAXBUFSIZE = 524288\nconst BPF_MAXINSNS = 512\nconst BPF_MEM = 96\nconst BPF_MEMWORDS = 16\nconst BPF_MINBUFSIZE = 32\nconst BPF_MINOR_VERSION = 1\nconst BPF_MISC = 7\nconst BPF_MSH = 160\nconst BPF_MUL = 32\nconst BPF_NEG = 128\nconst BPF_OR = 64\nconst BPF_RELEASE = 199606\nconst BPF_RET = 6\nconst BPF_RSH = 112\nconst BPF_ST = 2\nconst BPF_STX = 3\nconst BPF_SUB = 16\nconst BPF_TAX = 0\nconst BPF_TXA = 128\nconst BPF_W = 0\nconst BPF_X = 8\n```\n\n----------------------------------------\n\nTITLE: Go Test Package Importing golang.org/x/internal\nDESCRIPTION: Defines a Go test file for the `useinternal` package (using `_test` naming convention). It also imports `golang.org/x/internal/subtle` and includes a basic test function `Test`. This is used to verify internal imports within test code.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n-- useinternal_test.go --\npackage useinternal_test\nimport (\n\t\"testing\"\n\t_ \"golang.org/x/internal/subtle\"\n)\n\nfunc Test(*testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Commented Example: Setting GOEXPERIMENT=crashme via Environment Command Syntax\nDESCRIPTION: This is a commented-out example demonstrating how the GOEXPERIMENT variable could potentially be set to 'crashme' using the same syntax. The leading '#' indicates it's inactive. This line serves as a placeholder or documentation for potentially testing a 'crashme' experimental flag.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/check_goexperiment.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n#[GOEXPERIMENT:crashme] env\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines a Go module named 'mod.com' with Go 1.16 requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_module_when_error.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule mod.com\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Module B Configuration\nDESCRIPTION: Module b's configuration file specifying a dependency on module c version 0.2.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_newroot.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/b\n\ngo 1.16\n\nrequire example.net/c v0.2.0\n```\n\n----------------------------------------\n\nTITLE: Main Package File Path Printer\nDESCRIPTION: Implementation of a function that prints its own source file path using runtime.Caller()\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_trimpath_main.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"runtime\"\n\nfunc PrintFile() {\n\t_, file, _, _ := runtime.Caller(0)\n\tprintln(file)\n}\n```\n\n----------------------------------------\n\nTITLE: Build and Test Shell Commands\nDESCRIPTION: Shell commands for building with different random seeds and comparing symbol tables\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/link/testdata/script/randlayout_option.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo build -o prog123.exe -ldflags=-randlayout=123\nexec ./prog123.exe\n\ngo build -x -o prog456.exe -ldflags=-randlayout=456\nexec ./prog456.exe\n\ngo tool nm prog123.exe\ncp stdout syms123.txt\n\ngo tool nm prog456.exe\ncp stdout syms456.txt\n\n! cmp syms123.txt syms456.txt\n```\n\n----------------------------------------\n\nTITLE: Defining Filesystem Constants in Go for NetBSD ARM64\nDESCRIPTION: Filesystem-related constants including maximum filename length. This defines the maximum length of a filename component in the filesystem.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_43\n\nLANGUAGE: go\nCODE:\n```\nconst NAME_MAX = 511\n```\n\n----------------------------------------\n\nTITLE: Testing Go Get Command with Malformed Module Paths\nDESCRIPTION: This snippet tests the 'go get' command with malformed module paths and verifies that appropriate error messages are displayed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_bad_domain.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n! go get appengine\nstderr '^go: malformed module path \"appengine\": missing dot in first path element$'\n! go get x/y.z\nstderr 'malformed module path \"x/y.z\": missing dot in first path element'\n```\n\n----------------------------------------\n\nTITLE: Testing Undefined Variable Usage in Go\nDESCRIPTION: This Go test file demonstrates the use of an undefined variable, which should cause a compilation error.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_badtest.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage badvar_test\n\nfunc f() {\n\t_ = notdefined\n}\n```\n\n----------------------------------------\n\nTITLE: Var Type Methods\nDESCRIPTION: Methods for getting and setting the kind of a variable, and converting VarKind to string representation\nSOURCE: https://github.com/golang/go/blob/master/api/next/70250.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (v *Var) Kind() VarKind\nfunc (v *Var) SetKind(kind VarKind)\nfunc (k VarKind) String() string\n```\n\n----------------------------------------\n\nTITLE: Setting GOFLAGS with Complex Shell Escaping\nDESCRIPTION: Sets the GOFLAGS environment variable with a complex value containing quotes and commands to test escaping behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_sanitize.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GOFLAGS='$(echo ''cc\"''; echo ''OOPS=\"oops'')'\n```\n\n----------------------------------------\n\nTITLE: Restoring Module Version and Verifying Dependencies\nDESCRIPTION: This snippet restores module 'c' to version 1, which causes 'd' to upgrade to meet 'c's requirements. It then lists all modules to verify the changes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_indirect_pruned.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngo get example.com/c@v0.1.0\ngo list -m all\n! stdout '^example.com/b '\nstdout '^example.com/c v0.1.0 '\nstdout '^example.com/d v0.2.0 '\ncmp go.mod go.mod.down2\n```\n\n----------------------------------------\n\nTITLE: Minimal Go Program for Module 'y' (Go)\nDESCRIPTION: Defines a basic Go program located in 'y/main.go'. Similar to the one in 'x', it includes the main package and an empty main function. This file belongs to the 'm' module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_init_path.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n-- y/main.go --\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mock 'go' Command with Shell Script\nDESCRIPTION: A simple shell script located at 'bin/go' designed to act as a placeholder or mock version of the standard 'go' command. When executed, it prints the string 'go1.999testmod here!' to standard output, likely indicating the specific test version it represents.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.freebsd-arm.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n-- bin/go --\n#!/bin/sh\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Package Implementation File\nDESCRIPTION: Simple package implementation with a function that prints 'Hello, world!'\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_issue51125.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage mypkg\n\nimport \"fmt\"\n\nfunc MyFunc() {\n\tfmt.Println(\"Hello, world!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Testing 'go list' with Indirect Missing Import (Shell)\nDESCRIPTION: Tests the 'go list' command on a package ('example.com/indirect') that indirectly depends on a non-existent package via its import of 'example.com/direct'. Similar to the direct import test, this section checks the output format, incompleteness flag, dependency errors, and command success/failure with and without the '-e' and '-deps' flags, asserting specific stdout and stderr content.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_bad_import.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Listing an otherwise-valid package that imports some *other* package with an\n# unsatisfied import should also fail.\n# BUG: Today, it succeeds.\ngo list -f '{{if .Error}}error{{end}} {{if .Incomplete}}incomplete{{end}} {{range .DepsErrors}}bad dep: {{.Err}}{{end}}' example.com/indirect\n! stdout ^error\nstdout incomplete\nstdout 'bad dep: .*example.com/notfound'\n\n# Again, -deps should fail.\n! go list -deps example.com/indirect\nstderr example.com/notfound\n\n# But -e -deps should succeed.\ngo list -e -deps example.com/indirect\nstdout example.com/notfound\n```\n\n----------------------------------------\n\nTITLE: Using `go doc` with Directory Context in Shell\nDESCRIPTION: Demonstrates using `go doc` with `-C` to fetch documentation for symbols in a specified package directory. This requires the Go runtime with the source setup for custom documentation querying.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/chdir.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo doc -C ../strings HasPrefix\n```\n\n----------------------------------------\n\nTITLE: Adding Token field to SysProcAttr struct for Windows 386 architecture\nDESCRIPTION: Extends the SysProcAttr struct in the syscall package for Windows 32-bit architecture with a Token field. This allows specifying a security token when creating new processes.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.10.txt#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\npkg syscall (windows-386), type SysProcAttr struct, Token Token\n```\n\n----------------------------------------\n\nTITLE: Go Module Replacement Directives\nDESCRIPTION: This snippet showcases contents of module files with replacement directives. It describes the structure of 'go.mod', indicating specific versions to replace with local modules. This ensures control over which version of a module is used, primarily for testing purposes or local development.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_new_import.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n-- go.mod --\nmodule example.com/lazy\n\ngo 1.15\n\nrequire example.com/a v0.1.0\n\nreplace (\n\texample.com/a v0.1.0 => ./a\n\texample.com/b v0.1.0 => ./b\n\texample.com/c v0.1.0 => ./c1\n\texample.com/c v0.2.0 => ./c2\n)\n\n-- go.mod.117 --\nmodule example.com/lazy\n\ngo 1.17\n\nrequire example.com/a v0.1.0\n\nrequire example.com/b v0.1.0 // indirect\n\nreplace (\n\texample.com/a v0.1.0 => ./a\n\texample.com/b v0.1.0 => ./b\n\texample.com/c v0.1.0 => ./c1\n\texample.com/c v0.2.0 => ./c2\n)\n\n-- go.mod.new --\nmodule example.com/lazy\n\ngo 1.17\n\nrequire example.com/a v0.1.0\n\nrequire (\n\texample.com/b v0.1.0 // indirect\n\texample.com/c v0.1.0 // indirect\n)\n\nreplace (\n\texample.com/a v0.1.0 => ./a\n\texample.com/b v0.1.0 => ./b\n\texample.com/c v0.1.0 => ./c1\n\texample.com/c v0.2.0 => ./c2\n)\n```\n\n----------------------------------------\n\nTITLE: Defining SysProcAttr struct for Windows in syscall package\nDESCRIPTION: Definition of the SysProcAttr struct fields specifically for Windows platforms (both 386 and AMD64 architectures). This shows platform-specific process attributes for process creation on Windows.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_172\n\nLANGUAGE: go\nCODE:\n```\ntype SysProcAttr struct {\n\tProcessAttributes *SecurityAttributes\n\tThreadAttributes *SecurityAttributes\n\t// Other fields not shown\n}\n```\n\n----------------------------------------\n\nTITLE: Go Workspace Configuration\nDESCRIPTION: Workspace configuration file using modules from '../m' and '../n' directories with Go 1.24\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_pattern_work.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ngo 1.24\n\nuse (\n\t../m\n\t../n\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Go Source File for Test Dependency (Go)\nDESCRIPTION: Defines a simple Go source file (`testuse/testuse.go`) for package `testuse`. This file itself has no external imports and serves as the main code for the package whose test file introduces a problematic dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badchain.txt#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n-- testuse/testuse.go --\npackage testuse\n```\n\n----------------------------------------\n\nTITLE: V2 Package in Sub Vendor\nDESCRIPTION: Package defining v2 constant in the sub/vendor directory that takes precedence over root vendor.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_complex.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage v2\n\nconst ComplexNestSubVendorV2 = true\n```\n\n----------------------------------------\n\nTITLE: Providing Version Information in .info File\nDESCRIPTION: JSON metadata providing version information for the Go toolchain package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.plan9-386.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.999testmod.plan9-386\"}\n```\n\n----------------------------------------\n\nTITLE: Version Information in JSON Format\nDESCRIPTION: JSON configuration in .info file that defines the version of the toolchain module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.windows-386.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.999testmod.windows-386\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Go Environment Variables for Module Testing\nDESCRIPTION: Sets environment variables to enable Go modules, use direct proxy, and disable sum database for testing purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_direct.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GO111MODULE=on\nenv GOPROXY=direct\nenv GOSUMDB=off\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies in Main Module 'a'\nDESCRIPTION: This Go file for module 'a' imports dependencies 'b' and 'c' as blank imports.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_pseudo_artifact.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage a\n\nimport (\n\t_ \"example.net/b\"\n\t_ \"example.net/c\"\n)\n```\n\n----------------------------------------\n\nTITLE: Empty PGO Profile (PGO)\nDESCRIPTION: This is an empty Profile-Guided Optimization (PGO) profile file named `default.pgo`, located in the `a` directory. Its presence, even empty, signals to the Go toolchain (version 1.21+) to apply PGO-specific build optimizations and behaviors for the corresponding package (`m/a`), which is being tested here.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_pgo_issue66218.txt#2025-04-22_snippet_4\n\nLANGUAGE: pgo\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Expected Output on Darwin (macOS)\nDESCRIPTION: Shows the expected output of the 'go env' command on macOS, demonstrating how special characters are escaped in GOFLAGS.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_sanitize.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n[GOOS:darwin] stdout 'GOFLAGS=''\\$\\(echo ''\\\\''''cc\"''\\\\''''; echo ''\\\\''''OOPS=\"oops''\\\\''''\\)'\n```\n\n----------------------------------------\n\nTITLE: Defining Event Notification Constants in Go for Darwin ARM64\nDESCRIPTION: This snippet defines constants used with the kqueue facility for event notifications on Darwin ARM64. These flags are used to specify the type of events to monitor and control notification behavior.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_164\n\nLANGUAGE: Go\nCODE:\n```\nconst NOTE_ABSOLUTE = 8\nconst NOTE_ATTRIB = 8\nconst NOTE_BACKGROUND = 64\nconst NOTE_CHILD = 4\nconst NOTE_CRITICAL = 32\nconst NOTE_DELETE = 1\nconst NOTE_EXEC = 536870912\nconst NOTE_EXIT = 2147483648\nconst NOTE_EXITSTATUS = 67108864\nconst NOTE_EXIT_CSERROR = 262144\nconst NOTE_EXIT_DECRYPTFAIL = 65536\nconst NOTE_EXIT_DETAIL = 33554432\nconst NOTE_EXIT_DETAIL_MASK = 458752\nconst NOTE_EXIT_MEMORY = 131072\nconst NOTE_EXIT_REPARENTED = 524288\nconst NOTE_EXTEND = 4\nconst NOTE_FFAND = 1073741824\nconst NOTE_FFCOPY = 3221225472\nconst NOTE_FFCTRLMASK = 3221225472\nconst NOTE_FFLAGSMASK = 16777215\nconst NOTE_FFNOP = 0\nconst NOTE_FFOR = 2147483648\nconst NOTE_FORK = 1073741824\nconst NOTE_LEEWAY = 16\nconst NOTE_LINK = 16\nconst NOTE_LOWAT = 1\nconst NOTE_NONE = 128\nconst NOTE_NSECONDS = 4\nconst NOTE_PCTRLMASK = -1048576\nconst NOTE_PDATAMASK = 1048575\nconst NOTE_REAP = 268435456\nconst NOTE_RENAME = 32\nconst NOTE_REVOKE = 64\nconst NOTE_SECONDS = 1\nconst NOTE_SIGNAL = 134217728\nconst NOTE_TRACK = 1\nconst NOTE_TRACKERR = 2\nconst NOTE_TRIGGER = 16777216\nconst NOTE_USECONDS = 2\nconst NOTE_VM_ERROR = 268435456\nconst NOTE_VM_PRESSURE = 2147483648\nconst NOTE_VM_PRESSURE_SUDDEN_TERMINATE = 536870912\nconst NOTE_VM_PRESSURE_TERMINATE = 1073741824\nconst NOTE_WRITE = 2\n```\n\n----------------------------------------\n\nTITLE: Fossil Repository Fetch Test\nDESCRIPTION: Tests fetching a package from a Fossil repository while checking for specific error conditions and verifying the module appears in go.mod.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_fossil.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo get vcs-test.golang.org/fossil/hello.fossil\n! stderr 'unexpected response from fossil info'\ngrep 'vcs-test.golang.org/fossil/hello.fossil' go.mod\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Module with Version Replacements\nDESCRIPTION: This go.mod file sets up the module configuration for the test. It includes version replacements to simulate different versions of the 'example.net/a' module, pointing to local directories for testing purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue37438.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule example\n\ngo 1.15\n\nrequire example.net/a v0.1.0\n\nreplace (\n\texample.net/a v0.1.0 => ./a1\n\texample.net/a v0.2.0 => ./a2\n\texample.net/a v0.3.0 => ./a1\n)\n```\n\n----------------------------------------\n\nTITLE: Hello World Consumer Program\nDESCRIPTION: Simple program that imports and uses a vendored strings package to print a hello message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_gopath_issue11409.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\" // really ../vendor/strings\n)\n\nfunc main() {\n\tfmt.Printf(\"%s\\n\", strings.Msg)\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Go Toolchain Version (Go Module Syntax)\nDESCRIPTION: Declares the specific version (`v0.0.1-go1.22.1.linux-amd64`) of the `golang.org/toolchain` to be used. This line likely appears in a Go project's configuration, potentially within a `go.mod` file or a related dependency manifest, indicating the required toolchain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.22.1.linux-amd64.txt#2025-04-22_snippet_0\n\nLANGUAGE: gomod\nCODE:\n```\ngolang.org/toolchain v0.0.1-go1.22.1.linux-amd64\n```\n\n----------------------------------------\n\nTITLE: Testing Go Fuzzing for Non-Recoverable Errors\nDESCRIPTION: Tests that verify the behavior when encountering non-recoverable errors during fuzzing. This ensures that minimization is skipped appropriately when the fuzzing process terminates unexpectedly.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_minimize.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Test that minimization doesn't run for non-recoverable errors.\n! go test -fuzz=FuzzMinimizerNonrecoverable -run=FuzzMinimizerNonrecoverable -fuzztime=10000x .\n! stdout '^ok'\n! stdout 'minimizing'\nstdout -count=1 '^\\s+fuzzing process hung or terminated unexpectedly: exit status 99'\nstdout FAIL\n\n# Check that re-running the value causes a crash.\n! go test -run=FuzzMinimizerNonrecoverable .\nrm testdata\n```\n\n----------------------------------------\n\nTITLE: Toolchain go.mod Definition\nDESCRIPTION: Standard Go module declaration file for the toolchain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-386.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Adding Issue Reference Comment in Markdown\nDESCRIPTION: Shows how to add a GitHub issue reference as a comment in release note markdown files.\nSOURCE: https://github.com/golang/go/blob/master/doc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- go.dev/issue/12345 -->\n```\n\n----------------------------------------\n\nTITLE: Unit Testing with Test Function in Go\nDESCRIPTION: Defines a Go test within the mainwithtest package, testing the Foo function. It uses the 'testing' package to ensure the Foo function is executed correctly.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_pkgall_multiple_mains.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport \"testing\"\n\nfunc TestFoo(t *testing.T) {\n  Foo()\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go List in Empty Subdirectory\nDESCRIPTION: Verifies the behavior of 'go list' in a subdirectory with no Go files.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dot.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd subdir\n! go list\n! stderr 'cannot find module providing package'\nstderr '^no Go files in '$WORK'[/\\\\]gopath[/\\\\]src[/\\\\]dir[/\\\\]subdir$'\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Checking error for directory with only test files\nDESCRIPTION: Uses 'go build -n' to check the error message for a directory containing only test Go files.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_empty_err.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n! go build -n ./testonly\nstderr 'example.com/m/testonly: no non-test Go files in '$WORK${/}'testonly'\n```\n\n----------------------------------------\n\nTITLE: Module A Configuration\nDESCRIPTION: Go module configuration for module 'a' with dependencies and replacements\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\n\nmodule example.com/a\n\nrequire (\n\texample.com/p v1.0.0\n\texample.com/q v1.1.0\n\texample.com/r v1.0.0\n)\n\nreplace (\n\texample.com/p => ../p\n\texample.com/q => ../q\n\texample.com/r => ../r\n)\n```\n\n----------------------------------------\n\nTITLE: Verifying go env GOMOD behavior\nDESCRIPTION: Checks that 'go env GOMOD' returns the path to the original go.mod file, as it does not recognize the -modfile flag.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/modfile_flag.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo env GOMOD\nstdout '^'$WORK${/}gopath${/}src${/}'go\\.mod$'\n```\n\n----------------------------------------\n\nTITLE: Defining Termios Struct for Terminal I/O Settings in Go Syscall Package\nDESCRIPTION: The Termios struct represents terminal I/O settings in the syscall package for Darwin ARM64. It contains terminal control flags, special character definitions, and speed settings for terminal devices.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_211\n\nLANGUAGE: Go\nCODE:\n```\ntype Termios struct {\n    Iflag    uint64\n    Oflag    uint64\n    Cflag    uint64\n    Lflag    uint64\n    Cc       [20]uint8\n    Pad_cgo_0 [4]uint8\n    Ispeed    uint64\n    Ospeed    uint64\n}\n```\n\n----------------------------------------\n\nTITLE: Extra Explicit Module Error Test\nDESCRIPTION: Sample modules.txt with a module marked as explicit but not required in any go.mod file, along with the expected error message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_modules_txt_consistent.txt#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n## workspace\n# example.com/p v1.0.0 => ./p\n## explicit; go 1.21\n# example.com/q v1.0.0 => ./q\n## explicit; go 1.21\n# example.com/r v1.0.0\nexample.com/r\n## explicit; go 1.21\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ngo: inconsistent vendoring in $GOPATH${/}src:\n\texample.com/r@v1.0.0: is marked as explicit in vendor/modules.txt, but not explicitly required in a go.mod\n\n\tTo ignore the vendor directory, use -mod=readonly or -mod=mod.\n\tTo sync the vendor directory, run:\n\t\tgo work vendor\n```\n\n----------------------------------------\n\nTITLE: Version Information JSON\nDESCRIPTION: JSON file containing version information for the module\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_direct_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.0.0\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module and Dependencies\nDESCRIPTION: Defines the main module and its dependency in the go.mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goline_order.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nmodule m\ngo 1.21.1\n\nrequire m1 v0.0.1\n\nreplace m1 => ./m1\n```\n\n----------------------------------------\n\nTITLE: NetBSD ARM64 Message Header Structure Definition in Go\nDESCRIPTION: Defines the Msghdr structure used for sending and receiving messages on sockets. Contains fields for name, I/O vectors, control data, and flags.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_96\n\nLANGUAGE: go\nCODE:\n```\ntype Msghdr struct {\n\tName *uint8\n\tNamelen uint32\n\tPad_cgo_0 [4]uint8\n\tIov *Iovec\n\tIovlen int32\n\tControl *uint8\n\tControllen uint32\n\tFlags int32\n\tPad_cgo_1 [4]uint8\n}\n```\n\n----------------------------------------\n\nTITLE: Defining system call constants for NetBSD ARM64 in Go\nDESCRIPTION: This code snippet defines system call number constants for NetBSD on the ARM64 architecture. Each system call is assigned a unique numeric identifier that is used by the Go syscall package to make system calls to the NetBSD kernel. The constants follow the pattern of SYS_NAME = value paired with SYS_NAME ideal-int type declarations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_149\n\nLANGUAGE: Go\nCODE:\n```\nconst SYS_FORK = 2\nconst SYS_FORK ideal-int\nconst SYS_FPATHCONF = 192\nconst SYS_FPATHCONF ideal-int\nconst SYS_FREMOVEXATTR = 386\nconst SYS_FREMOVEXATTR ideal-int\nconst SYS_FSETXATTR = 377\nconst SYS_FSETXATTR ideal-int\nconst SYS_FSTAT = 440\nconst SYS_FSTATAT = 466\nconst SYS_FSTATAT ideal-int\nconst SYS_FSTAT ideal-int\nconst SYS_FSTATVFS1 = 358\nconst SYS_FSTATVFS1 ideal-int\nconst SYS_FSYNC = 95\nconst SYS_FSYNC ideal-int\nconst SYS_FSYNC_RANGE = 354\nconst SYS_FSYNC_RANGE ideal-int\nconst SYS_FTRUNCATE = 201\nconst SYS_FTRUNCATE ideal-int\nconst SYS_FUTIMENS = 472\nconst SYS_FUTIMENS ideal-int\nconst SYS_FUTIMES = 423\nconst SYS_FUTIMES ideal-int\nconst SYS_GETCONTEXT = 307\nconst SYS_GETCONTEXT ideal-int\nconst SYS___GETCWD = 296\nconst SYS___GETCWD ideal-int\nconst SYS_GETDENTS = 390\nconst SYS_GETDENTS ideal-int\nconst SYS_GETEGID = 43\nconst SYS_GETEGID ideal-int\nconst SYS_GETEUID = 25\nconst SYS_GETEUID ideal-int\nconst SYS_GETFH = 395\nconst SYS_GETFH ideal-int\nconst SYS_GETGID = 47\nconst SYS_GETGID ideal-int\nconst SYS_GETGROUPS = 79\nconst SYS_GETGROUPS ideal-int\nconst SYS_GETITIMER = 426\nconst SYS_GETITIMER ideal-int\nconst SYS___GETLOGIN = 49\nconst SYS___GETLOGIN ideal-int\nconst SYS_GETPEERNAME = 31\nconst SYS_GETPEERNAME ideal-int\nconst SYS_GETPGID = 207\nconst SYS_GETPGID ideal-int\nconst SYS_GETPGRP = 81\nconst SYS_GETPGRP ideal-int\nconst SYS_GETPID = 20\nconst SYS_GETPID ideal-int\nconst SYS_GETPPID = 39\nconst SYS_GETPPID ideal-int\nconst SYS_GETPRIORITY = 100\nconst SYS_GETPRIORITY ideal-int\nconst SYS_GETRLIMIT = 194\nconst SYS_GETRLIMIT ideal-int\nconst SYS_GETRUSAGE = 445\nconst SYS_GETRUSAGE ideal-int\nconst SYS_GETSID = 286\nconst SYS_GETSID ideal-int\nconst SYS_GETSOCKNAME = 32\nconst SYS_GETSOCKNAME ideal-int\nconst SYS_GETSOCKOPT = 118\nconst SYS_GETSOCKOPT ideal-int\nconst SYS_GETTIMEOFDAY = 418\nconst SYS_GETTIMEOFDAY ideal-int\nconst SYS_GETUID = 24\nconst SYS_GETUID ideal-int\nconst SYS_GETVFSSTAT = 356\nconst SYS_GETVFSSTAT ideal-int\nconst SYS_GETXATTR = 378\nconst SYS_GETXATTR ideal-int\nconst SYS_IOCTL = 54\nconst SYS_IOCTL ideal-int\nconst SYS_ISSETUGID = 305\nconst SYS_ISSETUGID ideal-int\nconst SYS_KEVENT = 435\nconst SYS_KEVENT ideal-int\nconst SYS_KILL = 37\nconst SYS_KILL ideal-int\nconst SYS_KQUEUE1 = 455\nconst SYS_KQUEUE1 ideal-int\nconst SYS_KQUEUE = 344\nconst SYS_KQUEUE ideal-int\nconst SYS_KTRACE = 45\nconst SYS_KTRACE ideal-int\nconst SYS_LCHFLAGS = 304\nconst SYS_LCHFLAGS ideal-int\nconst SYS_LCHMOD = 274\nconst SYS_LCHMOD ideal-int\nconst SYS_LCHOWN = 275\nconst SYS_LCHOWN ideal-int\nconst SYS_LGETXATTR = 379\nconst SYS_LGETXATTR ideal-int\nconst SYS_LINK = 9\nconst SYS_LINKAT = 457\nconst SYS_LINKAT ideal-int\nconst SYS_LINK ideal-int\nconst SYS_LISTEN = 106\nconst SYS_LISTEN ideal-int\nconst SYS_LISTXATTR = 381\nconst SYS_LISTXATTR ideal-int\nconst SYS_LLISTXATTR = 382\nconst SYS_LLISTXATTR ideal-int\nconst SYS_LREMOVEXATTR = 385\nconst SYS_LREMOVEXATTR ideal-int\nconst SYS_LSEEK = 199\nconst SYS_LSEEK ideal-int\nconst SYS_LSETXATTR = 376\nconst SYS_LSETXATTR ideal-int\nconst SYS_LSTAT = 441\nconst SYS_LSTAT ideal-int\nconst SYS_LUTIMES = 424\nconst SYS_LUTIMES ideal-int\nconst SYS__LWP_CONTINUE = 314\nconst SYS__LWP_CONTINUE ideal-int\nconst SYS__LWP_CREATE = 309\nconst SYS__LWP_CREATE ideal-int\nconst SYS__LWP_CTL = 325\nconst SYS__LWP_CTL ideal-int\nconst SYS__LWP_DETACH = 319\nconst SYS__LWP_DETACH ideal-int\nconst SYS__LWP_EXIT = 310\nconst SYS__LWP_EXIT ideal-int\nconst SYS__LWP_GETNAME = 324\nconst SYS__LWP_GETNAME ideal-int\nconst SYS__LWP_GETPRIVATE = 316\nconst SYS__LWP_GETPRIVATE ideal-int\nconst SYS__LWP_KILL = 318\nconst SYS__LWP_KILL ideal-int\nconst SYS__LWP_PARK = 434\nconst SYS__LWP_PARK ideal-int\nconst SYS__LWP_SELF = 311\nconst SYS__LWP_SELF ideal-int\nconst SYS__LWP_SETNAME = 323\nconst SYS__LWP_SETNAME ideal-int\nconst SYS__LWP_SETPRIVATE = 317\nconst SYS__LWP_SETPRIVATE ideal-int\nconst SYS__LWP_SUSPEND = 313\nconst SYS__LWP_SUSPEND ideal-int\nconst SYS__LWP_UNPARK = 321\nconst SYS__LWP_UNPARK_ALL = 322\nconst SYS__LWP_UNPARK_ALL ideal-int\nconst SYS__LWP_UNPARK ideal-int\nconst SYS__LWP_WAIT = 312\nconst SYS__LWP_WAIT ideal-int\nconst SYS__LWP_WAKEUP = 315\nconst SYS__LWP_WAKEUP ideal-int\nconst SYS_MADVISE = 75\nconst SYS_MADVISE ideal-int\nconst SYS_MINCORE = 78\nconst SYS_MINCORE ideal-int\nconst SYS_MINHERIT = 273\nconst SYS_MINHERIT ideal-int\nconst SYS_MKDIR = 136\nconst SYS_MKDIRAT = 461\nconst SYS_MKDIRAT ideal-int\nconst SYS_MKDIR ideal-int\nconst SYS_MKFIFO = 132\nconst SYS_MKFIFOAT = 459\nconst SYS_MKFIFOAT ideal-int\nconst SYS_MKFIFO ideal-int\nconst SYS_MKNOD = 450\nconst SYS_MKNODAT = 460\nconst SYS_MKNODAT ideal-int\nconst SYS_MKNOD ideal-int\nconst SYS_MLOCK = 203\nconst SYS_MLOCKALL = 242\nconst SYS_MLOCKALL ideal-int\nconst SYS_MLOCK ideal-int\nconst SYS_MMAP = 197\nconst SYS_MMAP ideal-int\nconst SYS_MODCTL = 246\nconst SYS_MODCTL ideal-int\nconst SYS_MOUNT = 410\nconst SYS_MOUNT ideal-int\nconst SYS_MPROTECT = 74\nconst SYS_MPROTECT ideal-int\nconst SYS_MREMAP = 411\n```\n\n----------------------------------------\n\nTITLE: Defining Go Test with Failing Parent and Subtest\nDESCRIPTION: This Go code defines a test function 'TestThatFails' that contains a subtest and deliberately fails. It demonstrates how a parent test can fail even if its subtest passes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_no_subtests_failure.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage standalone_fail_sub_test\n\nimport \"testing\"\n\nfunc TestThatFails(t *testing.T) {\n\tt.Run(\"Sub\", func(t *testing.T) {})\n\tt.Fail()\n}\n```\n\n----------------------------------------\n\nTITLE: Working Import Comment\nDESCRIPTION: Valid Go files with correct import path comments\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_import_comment.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage x // import \"m/works/x\"\n```\n\nLANGUAGE: go\nCODE:\n```\npackage x // important! not an import comment\n```\n\n----------------------------------------\n\nTITLE: Shell Script for Testing Go Panic Behavior\nDESCRIPTION: A shell script that sets up the environment and runs tests to verify the behavior of Go's testing package when handling panics. It checks that the testing package waits for panics and handles them correctly, without causing extra panics.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_cleanup_failnow.txt#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# For issue 41355\n[short] skip\n\n# This test could fail if the testing package does not wait until\n# a panicking test does the panic. Turn off multithreading and GC\n# to increase the probability of such a failure.\nenv GOMAXPROCS=1\nenv GOGC=off\n\n# If the test exits with 'no tests to run', it means the testing package\n# implementation is incorrect and does not wait until a test panic.\n# If the test exits with '(?s)panic: die.*panic: die', it means\n# the testing package did an extra panic for a panicking test.\n\n! go test -v cleanup_failnow/panic_nocleanup_test.go\n! stdout 'no tests to run'\nstdout '(?s)panic: die \\[recovered, reraised\\]'\n! stdout '(?s)panic: die \\[recovered, reraised\\].*panic: die'\n\n! go test -v cleanup_failnow/panic_withcleanup_test.go\n! stdout 'no tests to run'\nstdout '(?s)panic: die \\[recovered\\].*panic: die'\n! stdout '(?s)panic: die \\[recovered\\].*panic: die.*panic: die'\n```\n\n----------------------------------------\n\nTITLE: Git Repository Initialization and Initial Commit\nDESCRIPTION: Initializes a new Git repository and creates the first commit with go.mod and tagtests.go files.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/tagtests.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit init\n\ngit add go.mod tagtests.go\ngit commit -m 'create module tagtests'\ngit branch -m master\ngit branch b\n```\n\n----------------------------------------\n\nTITLE: Invalid Credentials Authenticator in Go\nDESCRIPTION: A Go program that intentionally provides invalid authentication credentials to test error handling. It outputs an Authorization header with an invalid Basic authentication token that should cause authentication failures.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goauth_userauth.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Printf(\"https://vcs-test.golang.org\\n\\nAuthorization: Basic invalid\\n\\n\")\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Go Toolchain Version\nDESCRIPTION: JSON object containing the version information for the Go toolchain, indicating a test module for FreeBSD ARM64.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.freebsd-arm64.txt#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.999testmod.freebsd-arm64\"}\n```\n\n----------------------------------------\n\nTITLE: Testing Non-Word Boundaries with \\B in Go Regexps\nDESCRIPTION: Tests patterns using \\B to match positions that are not word boundaries. These tests compare the behavior with \\b by using the same test strings but opposite expectations.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_21\n\nLANGUAGE: regexp\nCODE:\n```\n\\Bx\\B\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:\\Bx\\B)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:\\Bx\\B)\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:\\Bx\\B)$\n```\n\n----------------------------------------\n\nTITLE: Declaring a Deprecated Subpackage - Go\nDESCRIPTION: Defines a deprecated Go package named 'deprecated'. No implementation or functions are provided. Serves as a marker for deprecation in the module's subpackage structure; has no external dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_missingpkg_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage deprecated\n```\n\n----------------------------------------\n\nTITLE: Defining Go Test Function with Parallel Subtests\nDESCRIPTION: This Go code defines a test function with parallel subtests and uses channel synchronization to ensure specific execution order. It demonstrates the use of t.Parallel() and nested subtests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_no_subtests_parallel.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage standalone_parallel_sub_test\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\tch := make(chan bool, 1)\n\tt.Run(\"Sub\", func(t *testing.T) {\n\t\tt.Parallel()\n\t\t<-ch\n\t\tt.Run(\"Nested\", func(t *testing.T) {})\n\t})\n\t// Ensures that Sub will finish after its t.Run call already returned.\n\tch <- true\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Default GODEBUG Setting in Go 1.24 Module\nDESCRIPTION: Verifies that Go 1.24 modules have decoratemappings=0 as their default GODEBUG setting. This is important for ensuring consistent behavior in memory mapping annotations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/godebug_decoratemappings_124.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n\n# Go 1.24 module should disable decoratemappings.\ngo list -f '{{.Module.GoVersion}} {{.DefaultGODEBUG}}'\nstdout decoratemappings=0\n\n[!GOOS:linux] skip\n[short] skip\n\n# Programs in Go 1.24 module should never see annotations. This ensures that\n# the runtime has not overridden the default.\ngo run .\n```\n\n----------------------------------------\n\nTITLE: TLS Security Improvements - Go\nDESCRIPTION: Implementation of TLS fallback SCSV and dynamic certificate handling for SNI support in the crypto/tls package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npkg crypto/tls, const TLS_FALLBACK_SCSV = 22016\npkg crypto/tls, const TLS_FALLBACK_SCSV uint16\n\npkg crypto/tls, type ClientHelloInfo struct\npkg crypto/tls, type ClientHelloInfo struct, CipherSuites []uint16\npkg crypto/tls, type ClientHelloInfo struct, ServerName string\npkg crypto/tls, type ClientHelloInfo struct, SupportedCurves []CurveID\npkg crypto/tls, type ClientHelloInfo struct, SupportedPoints []uint8\n```\n\n----------------------------------------\n\nTITLE: Testing go list with latest version query for unknown module\nDESCRIPTION: Executes 'go list -m' command with an unknown module and @latest version query, verifying the expected error output format.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_versions.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo list -m -e -f $FMT example.com/retract/self/pseudo@latest\nstdout '^example.com/retract/self/pseudo: \"module example.com/retract/self/pseudo: no matching versions for query \\\\\"latest\\\\\"\" \"latest\"$'\n```\n\n----------------------------------------\n\nTITLE: CGO Library Reference Implementation\nDESCRIPTION: Main package implementing CGO function call with custom LDFLAGS for library linking. Tests proper handling of library path and linking flags when using GCCGO compiler.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gccgo_link_c.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n// #cgo LDFLAGS: -L alibpath -lalib\n// void f(void) {}\nimport \"C\"\n\nfunc main() { C.f() }\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module definition for the rsc.io/quote package. This simple go.mod file declares the module name without any dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.2.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: Testing Repeated Debug Directives in Go Build\nDESCRIPTION: A shell script that runs go build on a file with repeated debug directives and verifies the expected error message is generated. It checks that the build fails with an appropriate error message about repeated debug directives.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_repeated_godebug_issue62346.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n[short] skip # runs go build\n! go build file.go\n! stderr 'panic:'\n! stderr 'runtime error'\nstderr 'file.go:2:1: repeated //go:debug for panicnil'\n```\n\n----------------------------------------\n\nTITLE: Running go vet on package with only cgo files\nDESCRIPTION: This snippet demonstrates running go vet on a package that contains only cgo files. It skips the test if cgo is not available or if running in short mode.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet.txt#2025-04-22_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n[!cgo] skip\n[short] skip\ngo vet m/onlycgo\n! stderr .\n```\n\n----------------------------------------\n\nTITLE: System Error Constants in Go\nDESCRIPTION: Definition of EBADMSG and EPROTO error constants for handling bad messages and protocol errors in system calls.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.23.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nconst EBADMSG Errno\nconst EPROTO Errno\n```\n\n----------------------------------------\n\nTITLE: Testing Non-Existent Toolchain Version\nDESCRIPTION: Tests behavior when requesting a non-existent Go toolchain version from network.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_net.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nenv GOTOOLCHAIN=go1.9999x\n! go version\nstderr 'go: download go1.9999x for .*: toolchain not available'\n```\n\n----------------------------------------\n\nTITLE: Networking Package Extensions with Context Support and URL Handling\nDESCRIPTION: Types and methods for net and net/url packages. Adds context-aware DNS operations, URL parsing enhancements, and new buffer types for efficient I/O operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.8.txt#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n// net methods and types\nfunc (*Buffers) Read([]uint8) (int, error)\nfunc (*Buffers) WriteTo(io.Writer) (int64, error)\nfunc (*Resolver) LookupAddr(context.Context, string) ([]string, error)\nfunc (*Resolver) LookupCNAME(context.Context, string) (string, error)\nfunc (*Resolver) LookupHost(context.Context, string) ([]string, error)\nfunc (*Resolver) LookupIPAddr(context.Context, string) ([]IPAddr, error)\nfunc (*Resolver) LookupMX(context.Context, string) ([]*MX, error)\nfunc (*Resolver) LookupNS(context.Context, string) ([]*NS, error)\nfunc (*Resolver) LookupPort(context.Context, string, string) (int, error)\nfunc (*Resolver) LookupSRV(context.Context, string, string, string) (string, []*SRV, error)\nfunc (*Resolver) LookupTXT(context.Context, string) ([]string, error)\nfunc (*UnixListener) SetUnlinkOnClose(bool)\n\ntype Buffers [][]uint8\ntype Dialer struct {\n    Resolver *Resolver\n}\ntype Resolver struct {\n    PreferGo bool\n}\nvar DefaultResolver *Resolver\n\n// net/mail functions\nfunc ParseDate(string) (time.Time, error)\n\n// net/url functions and methods\nfunc PathEscape(string) string\nfunc PathUnescape(string) (string, error)\nfunc (*URL) Hostname() string\nfunc (*URL) MarshalBinary() ([]uint8, error)\nfunc (*URL) Port() string\nfunc (*URL) UnmarshalBinary([]uint8) error\n```\n\n----------------------------------------\n\nTITLE: Building and Executing Cache Testing Script in Go\nDESCRIPTION: This script compiles and executes a Go program designed to test cache output entry handling. It involves setting up a new cache environment, removing specific output entries, and verifying that the Go command does not panic. Dependencies include the Go runtime environment and specific system environment settings.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_issue_70600.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Test that the go command does not panic if it tries to read\n# a file from the cache that has an index entry, but is missing\n# an entry for the output. This test creates that situation by\n# running a go list (creating index and output cache entries for\n# the module index) and then removing just the output entries.\n\n[short] skip 'runs go build'\n\ngo build -o roe$GOEXE ./remove_output_entries.go\n\n# populate new cache\nenv GOCACHE=$WORK/newcache\ngo list runtime\n\n# remove output entries and check the panic doesn't happen\nexec ./roe$GOEXE $WORK/newcache\ngo list runtime\n\n```\n\n----------------------------------------\n\nTITLE: System Call Function Signatures in Assembly\nDESCRIPTION: Core system call dispatch function signatures implemented in assembly. These functions provide different levels of system call access, with Syscall and Syscall6 being standard interfaces and RawSyscall for low-level use.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/vendor/golang.org/x/sys/unix/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc Syscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)\nfunc Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2, err uintptr)\nfunc RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)\n```\n\n----------------------------------------\n\nTITLE: Setting GOROOT and GOPATH Environment Variables (Shell)\nDESCRIPTION: Sets the GOROOT and GOPATH environment variables to temporary directories ($WORK/goroot and $WORK/gopath) specific to the test execution environment. This isolates the test from the system's actual Go installation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_gofile_in_goroot.txt#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nenv GOROOT=$WORK/goroot\nenv GOPATH=$WORK/gopath\n```\n\n----------------------------------------\n\nTITLE: Go Work Configuration File\nDESCRIPTION: Initial go.work file configuration specifying Go version 1.8 and current directory usage.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_edit_toolchain.txt#2025-04-22_snippet_1\n\nLANGUAGE: gomod\nCODE:\n```\ngo 1.8\nuse .\n```\n\n----------------------------------------\n\nTITLE: Converting Git Repository to Mercurial\nDESCRIPTION: Uses the hg convert command to transform the Git repository into a Mercurial repository with date sorting of commits.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/hg/hgrepo1.txt#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd ..\n\nhg init\nhg convert --datesort ./git .\nrm ./git\n```\n\n----------------------------------------\n\nTITLE: Defining Go Package with Build Constraints\nDESCRIPTION: This snippet demonstrates a Go package with build constraints and import statements for other packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pkgtags.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// +build tools\n\npackage tools\n\nimport (\n\t_ \"example.net/cmd/tool\"\n\t_ \"example.net/missing\"\n)\n```\n\n----------------------------------------\n\nTITLE: HTML Hello World\nDESCRIPTION: Hello world message formatted as HTML with paragraph tags.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/para.txt#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<p>Hello, world.\nThis is a paragraph.\n```\n\n----------------------------------------\n\nTITLE: Git Environment Setup and Commands\nDESCRIPTION: Sets up Git environment variables and executes a series of Git commands to manage repository state. Includes committing a nested Go module and then removing it.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/issue61415.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GIT_AUTHOR_NAME='Bryan C. Mills'\nenv GIT_AUTHOR_EMAIL='bcmills@google.com'\nenv GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME\nenv GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL\n\ngit init\n\ngit add go.mod nested\ngit commit -m 'nested: add go.mod'\ngit branch -m main\n\ngit tag has-nested\n\ngit rm -r nested\ngit commit -m 'nested: delete subdirectory'\n\ngit show-ref --tags --heads\ngit log --pretty=oneline\n```\n\n----------------------------------------\n\nTITLE: Configuring Transitive Dependency Go Module 'y' (Go Module)\nDESCRIPTION: Defines the Go module named `y` using Go version 1.15. This module contains the package `y/fromotherdeptest`, which is imported only by tests in module `x`, making it a transitive test dependency relative to the main module `m`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_notall.txt#2025-04-22_snippet_16\n\nLANGUAGE: gomod\nCODE:\n```\n-- y/go.mod --\nmodule y\n\ngo 1.15\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with External Dependency\nDESCRIPTION: This snippet defines a Go module named 'testrace' with a dependency on 'rsc.io/sampler'. It specifies Go version 1.18 as the minimum required version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_race_tag.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule testrace\n\ngo 1.18\n\nrequire rsc.io/sampler v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Testing Go List with Vendor Mode Limitations\nDESCRIPTION: This snippet tests the limitations of 'go list' command when using vendor mode, particularly for version-related flags.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# -mod=vendor should cause 'go list' flags that look up versions to fail.\n! go list -mod=vendor -versions -m x\nstderr '^go: can''t determine available versions using the vendor directory\\n\\t(Use -mod=mod or -mod=readonly to bypass.)$'\n! go list -mod=vendor -u -m x\nstderr '^go: can''t determine available upgrades using the vendor directory\\n\\t(Use -mod=mod or -mod=readonly to bypass.)$'\n\n# 'go list -mod=vendor -m' on a transitive dependency that does not\n# provide vendored packages should give a helpful error rather than\n# 'not a known dependency'.\n! go list -mod=vendor -f '{{.Version}} {{.Dir}}' -m diamondright\nstderr 'go: module diamondright: can''t resolve module using the vendor directory\\n\\t(Use -mod=mod or -mod=readonly to bypass.)'\n```\n\n----------------------------------------\n\nTITLE: Defining SSH Stub in Go\nDESCRIPTION: Creates a Go program that stubs out uses of SSH by 'go get' and always exits with status 1.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/get_insecure.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\n// stub out uses of ssh by go get\npackage main\n\nimport \"os\"\n\nfunc main() {\n\tos.Exit(1)\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Build with Fake Clang Compiler\nDESCRIPTION: This snippet runs the Go build command with the fake clang compiler and then breaks the fake clang to test error handling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cc_cache_issue64589.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngo build -x runtime/cgo\n\nenv GO_BREAK_CLANG=1\n! go build -x runtime/cgo\nstderr '# runtime/cgo\\nGO_BREAK_CLANG is set'\n```\n\n----------------------------------------\n\nTITLE: Basic Go Package Declaration with Import Path\nDESCRIPTION: A simple Go package declaration with an explicit import path. The package is named 'x' with an import path of 'm/x'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_convert_git.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage x // import \"m/x\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Quote Functions in Go\nDESCRIPTION: Defines four functions in the quote package that return various sayings and proverbs. The functions include Hello() which returns a greeting, Glass() which returns a phrase about eating glass, Go() which returns a Go programming proverb, and Opt() which returns an optimization truth.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180628003336-dd9747d19b04.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Package quote collects pithy sayings.\npackage quote // import \"rsc.io/quote\"\n\nimport \"rsc.io/sampler\"\n\nAN EVEN WORSE CHANGE!\n\n// Hello returns a greeting.\nfunc Hello() string {\n\treturn sampler.Hello()\n}\n\n// Glass returns a useful phrase for world travelers.\nfunc Glass() string {\n\t// See http://www.oocities.org/nodotus/hbglass.html.\n\treturn \"I can eat glass and it doesn't hurt me.\"\n}\n\n// Go returns a Go proverb.\nfunc Go() string {\n\treturn \"Don't communicate by sharing memory, share memory by communicating.\"\n}\n\n// Opt returns an optimization truth.\nfunc Opt() string {\n\t// Wisdom from ken.\n\treturn \"If a program is too slow, it must have a loop.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go List Command for Linux Environment\nDESCRIPTION: Sets the environment variables for Linux and runs 'go list all' command to ensure all packages build on Linux.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_all_gobuild.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GOOS=linux\nenv GOARCH=amd64\ngo list all\n```\n\n----------------------------------------\n\nTITLE: Checking Default GOMODCACHE Location in Go\nDESCRIPTION: This snippet verifies the default location of GOMODCACHE when it's not explicitly set, which should be $GOPATH[0]/pkg/mod.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gomodcache.txt#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nenv GOMODCACHE=\ngo env GOMODCACHE\nstdout $GOPATH[/\\\\]pkg[/\\\\]mod\ngo get rsc.io/quote@v1.0.0\nexists $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.0.0.info\ngrep '{\"Version\":\"v1.0.0\",\"Time\":\"2018-02-14T00:45:20Z\"}' $GOPATH/pkg/mod/cache/download/rsc.io/quote/@v/v1.0.0.info\n```\n\n----------------------------------------\n\nTITLE: Declaring Syscall Functions for NetBSD ARM64 CGO\nDESCRIPTION: This snippet declares various syscall functions for NetBSD ARM64 using CGO. It includes functions for file operations, network operations, process management, and other system-level operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_72\n\nLANGUAGE: Go\nCODE:\n```\nfunc Accept4(int, int) (int, Sockaddr, error)\nfunc Accept(int) (int, Sockaddr, error)\nfunc Access(string, uint32) error\nfunc Adjtime(*Timeval, *Timeval) error\nfunc Bind(int, Sockaddr) error\nfunc BpfBuflen(int) (int, error)\n// ... (more function declarations)\nfunc Fstat(int, *Stat_t) error\nfunc Fsync(int) error\nfunc Ftruncate(int, int64) error\n```\n\n----------------------------------------\n\nTITLE: Checking error for missing directory\nDESCRIPTION: Uses 'go list' to check the error message for a non-existent directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_empty_err.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo list -e -f {{.Error}} ./missing\nstdout 'stat '$WORK'[/\\\\]missing: directory not found'\n```\n\n----------------------------------------\n\nTITLE: Testing Directory Access in Go Package a\nDESCRIPTION: A test function for package a that verifies the existence of a testdata directory using os.Stat. The test accesses a file in the local testdata directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vendormod.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\nimport (\n\t\"os\"\n\t\"testing\"\n)\n\nfunc TestDir(t *testing.T) {\n\tif _, err := os.Stat(\"./testdata/1\"); err != nil {\n\t\tt.Fatalf(\"testdata: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal GOCACHEPROG Program Implementation\nDESCRIPTION: A minimal Go program that implements a basic GOCACHEPROG interface, handling JSON encoding/decoding for known commands. The program only supports the 'close' command and exits immediately.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_gocacheprog.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// This is a minimal GOCACHEPROG program that can't actually do anything but exit.\npackage main\n\nimport (\n    \"encoding/json\"\n    \"os\"\n)\n\nfunc main() {\n    json.NewEncoder(os.Stdout).Encode(map[string][]string{\"KnownCommands\": {\"close\"}})\n    var res struct{}\n    json.NewDecoder(os.Stdin).Decode(&res)\n}\n```\n\n----------------------------------------\n\nTITLE: Plain Text List Format\nDESCRIPTION: Shows the list in plain text format with simplified spacing and alignment.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list8.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nLoose lists.\n\n  - A\n\n    B\n\n  - C D\n\n  - E\n\n  - F\n```\n\n----------------------------------------\n\nTITLE: Implementing Minimal Go Program in foo.go\nDESCRIPTION: Contains a basic Go program with an empty main function. This serves as the entry point for the Go application.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_build_no_modules.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Defining a Go Package in a Subdirectory (Go)\nDESCRIPTION: This snippet shows the content of `_data/x.go`. It defines a Go package named `p`. This file resides within the `_data` directory, whose permissions are manipulated in one of the test cases to check the behavior of `go list` with unreadable directories.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_perm.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\n-- _data/x.go --\npackage p\n```\n\n----------------------------------------\n\nTITLE: Data Link Types Definition - NetBSD ARM64\nDESCRIPTION: Defines constants for various Data Link Types (DLT) used in network packet capture and analysis on NetBSD ARM64 platform. Includes definitions for Ethernet, FDDI, IEEE 802.11, and other network protocols.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_119\n\nLANGUAGE: Go\nCODE:\n```\nconst (\n    DLT_NULL = 0\n    DLT_EN10MB = 1\n    DLT_EN3MB = 2\n    DLT_AX25 = 3\n    DLT_CHAOS = 5\n    DLT_IEEE802 = 6\n    DLT_ARCNET = 7\n    DLT_FDDI = 10\n    DLT_ATM_RFC1483 = 11\n    DLT_IEEE802_11 = 105\n    DLT_IEEE802_11_RADIO = 127\n    DLT_IEEE802_15_4 = 195\n    DLT_IEEE802_16_MAC_CPS = 188\n)\n```\n\n----------------------------------------\n\nTITLE: Testing @upgrade Version Selection Preferring Compatible Versions\nDESCRIPTION: Tests that @upgrade prefers compatible versions (v1.x) over +incompatible versions when a go.mod file exists in the compatible version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_prefer_compatible.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo list -m github.com/russross/blackfriday@upgrade\nstdout '^github.com/russross/blackfriday v1\\.'\n```\n\n----------------------------------------\n\nTITLE: Go Module Configuration\nDESCRIPTION: Module definition file (go.mod) specifying Go version 1.18 and module name 'foo'\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_missing_module.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\nmodule foo\n```\n\n----------------------------------------\n\nTITLE: Comparing go.mod Files in Go\nDESCRIPTION: This snippet compares the current go.mod file with a previously saved version to check for changes after running 'go mod tidy'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_of_test_dep.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncp go.mod go.mod.old\ngo mod tidy\ncmp go.mod go.mod.old\n```\n\n----------------------------------------\n\nTITLE: Declaring Go Toolchain Module Path (.mod)\nDESCRIPTION: Declares the module path `golang.org/toolchain`. This specific content is typically found within the `.mod` file corresponding to a specific module version in the Go module cache, identifying the module's canonical path.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.18.9.linux-amd64.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ngolang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Module Definition for Dependency 'b'\nDESCRIPTION: The `go.mod` file for module `b`. It requires module `c` at version v0.1.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_import_allmod.txt#2025-04-22_snippet_9\n\nLANGUAGE: gomod\nCODE:\n```\n-- b1/go.mod --\nmodule b\n\ngo 1.17\n\nrequire c v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Main Package Implementation\nDESCRIPTION: Main package with initialization and functions integrating packages a and b\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverpkg_with_init.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"M/a\"\n\t\"M/b\"\n)\n\nfunc MFunc() string {\n\treturn \"42\"\n}\n\nfunc M2Func() int {\n\treturn a.AFunc() + b.BFunc()\n}\n\nfunc init() {\n\tprintln(\"package 'main' init\")\n}\n\nfunc main() {\n\tprintln(a.AFunc() + b.BFunc())\n}\n```\n\n----------------------------------------\n\nTITLE: Actual Dependency Implementation\nDESCRIPTION: Actual implementation of the dependency package located in the source directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_disablevendor.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage dep\n\nimport \"fmt\"\n\nfunc Dep () {\n    fmt.Println(\"the real dep\")\n}\n```\n\n----------------------------------------\n\nTITLE: Non-Main Package Pkg1\nDESCRIPTION: Non-main package declaration for testing build behavior with non-executable packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_multi_main.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage pkg1\n```\n\n----------------------------------------\n\nTITLE: Memory Synchronization Constants in Go for Darwin ARM64\nDESCRIPTION: Constants for memory synchronization operations with msync(). Controls whether sync is asynchronous or synchronous, and whether to invalidate mappings or kill pages.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_79\n\nLANGUAGE: Go\nCODE:\n```\nconst MS_ASYNC = 1\nconst MS_DEACTIVATE = 8\nconst MS_INVALIDATE = 2\nconst MS_KILLPAGES = 4\nconst MS_SYNC = 16\n```\n\n----------------------------------------\n\nTITLE: Empty Package 'b' Declaration in Go\nDESCRIPTION: This Go file declares an empty package 'b', serving as a placeholder for the dependency module in the test setup.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue48511.txt#2025-04-22_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\npackage b\n```\n\n----------------------------------------\n\nTITLE: Adding ELF File Handling Functions in Go\nDESCRIPTION: New constants, methods, and types for handling ELF (Executable and Linkable Format) files in the debug/elf package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_11\n\nLANGUAGE: Go\nCODE:\n```\nconst VER_FLG_BASE = 1\nconst VER_FLG_INFO = 4\nconst VER_FLG_WEAK = 2\n\ntype DynamicVersion struct {\n    Deps []string\n    Flags DynamicVersionFlag\n    Name string\n    Index uint16\n}\n\ntype DynamicVersionDep struct {\n    Dep string\n    Flags DynamicVersionFlag\n    Index uint16\n}\n\ntype DynamicVersionFlag uint16\n\ntype DynamicVersionNeed struct {\n    Name string\n    Needs []DynamicVersionDep\n}\n\ntype Symbol struct {\n    HasVersion bool\n    VersionIndex VersionIndex\n}\n\ntype VersionIndex uint16\n```\n\n----------------------------------------\n\nTITLE: Dependency Module Definition\nDESCRIPTION: Defines the 'dep' module and its test dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version_missing.txt#2025-04-22_snippet_11\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/dep\n\nrequire example.com/testdep v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Defining Ethernet Type Constants in Go for NetBSD ARM64\nDESCRIPTION: This snippet defines numerous Ethernet type constants used in network programming on NetBSD ARM64 systems. These constants represent different protocol types that can be encapsulated in Ethernet frames.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_124\n\nLANGUAGE: Go\nCODE:\n```\nconst ETHERTYPE_PAE = 34958\nconst ETHERTYPE_PAE ideal-int\nconst ETHERTYPE_PCS = 16962\nconst ETHERTYPE_PCS ideal-int\n// ... (more ETHERTYPE constants)\n```\n\n----------------------------------------\n\nTITLE: Original Go Module Definition\nDESCRIPTION: Base go.mod file defining the module 'm' with Go 1.13 requirement\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patterns.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.13\n\n```\n\n----------------------------------------\n\nTITLE: Adding second commit\nDESCRIPTION: Creates a second commit adding extra.go file, then displays and validates the repository references.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/get_issue53955.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nenv GIT_COMMITTER_DATE=2022-07-19T11:07:01-04:00\nenv GIT_AUTHOR_DATE=2022-07-19T11:07:01-04:00\nexec git add extra.go\nexec git commit -m 'next commit'\nexec git show-ref --tags --heads\ncmp stdout $WORK/.git-refs-1\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Module Import Path with HTML Meta Tag\nDESCRIPTION: HTML file that specifies the import path for a Go module using a meta tag. The configuration directs the module 'gitrepo1' to be imported from vcs-test.golang.org using git protocol.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/go/mod/gitrepo1.txt#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<meta name=\"go-import\" content=\"vcs-test.golang.org/go/mod/gitrepo1 git https://vcs-test.golang.org/git/gitrepo1\">\n```\n\n----------------------------------------\n\nTITLE: Declaring Package Name (Go)\nDESCRIPTION: This Go code snippet declares the package name `incompatible` for the `incompatible.go` source file within the `example.com/retract/incompatible` module. It establishes the namespace for the code within this file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_incompatible_v1.0.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage incompatible\n```\n\n----------------------------------------\n\nTITLE: Defining Test Package with Unused Import\nDESCRIPTION: Creates a test package with an unused import, used to verify that unused ambiguous imports don't cause errors.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_ambiguous_import.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\npackage importy\nimport _ \"example.com/a/y\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Go Module Version Metadata - JSON\nDESCRIPTION: Describes module version information using JSON syntax. The 'Version' key specifies the current version of the module, which is 'v1.1.0' here. This file is typically used by Go module tooling to track published versions. Requires standard JSON parsing and no additional dependencies; its main output is to serve as metadata for Go's module system.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_nest_v1.1.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\\\"Version\\\": \\\"v1.1.0\\\"}\n```\n\n----------------------------------------\n\nTITLE: Empty Go Package\nDESCRIPTION: Empty Go package file 'm.go' in module 'x'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_issue55952.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage m\n```\n\n----------------------------------------\n\nTITLE: Configuration JSON for Doc Links\nDESCRIPTION: JSON configuration specifying the base URL for Go package documentation links\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/linklist2.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"DocLinkBaseURL\": \"https://pkg.go.dev\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Socket I/O Control Constants in Go for NetBSD ARM64\nDESCRIPTION: This snippet defines constants for socket I/O control commands used in the NetBSD ARM64 syscall package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_145\n\nLANGUAGE: Go\nCODE:\n```\nconst (\n    SIOCADDMULTI = 2156947761\n    SIOCADDRT = 2151182858\n    SIOCAIFADDR = 2151704858\n    SIOCALIFADDR = 2165860636\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Additional Package Files\nDESCRIPTION: Defines additional package files for the main module and the dependency module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goline_order.txt#2025-04-22_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\npackage p\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Go Command Shell Script\nDESCRIPTION: Shell script that simulates the 'go' command by outputting a test version string.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-mips64.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Verifying Exit 1 Test Output in Go\nDESCRIPTION: This snippet defines a test that exits with status 1. It's used to verify how 'go test -json' reports tests that exit with a failure status without running any actual tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_panic_exit.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage exit1_test\n\nimport (\n\t\"os\"\n\t\"testing\"\n)\n\nfunc TestMain(m *testing.M) {\n\tos.Exit(1)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Toolchain Version in JSON (.info)\nDESCRIPTION: This JSON object, likely from a `.info` file, explicitly defines the 'Version' field for the Go toolchain, corresponding to the identifier 'v0.0.1-go1.18.1.linux-amd64'. This structured format provides machine-readable version information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.18.1.linux-amd64.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.18.1.linux-amd64\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Path and Version (gomod)\nDESCRIPTION: This snippet defines a Go module named `example.com/retract/self/prev`. It specifies that the module requires Go version 1.15 or later. This is the standard `go.mod` file format used by Go's module system.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_prev_v1.1.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: gomod\nCODE:\n```\n-- .mod --\nmodule example.com/retract/self/prev\n\ngo 1.15\n```\n\n----------------------------------------\n\nTITLE: Declaring Toolchain Module in Go.mod\nDESCRIPTION: Specifies the module name for the Go toolchain in the go.mod file. This is used for module management and dependency resolution in Go projects.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.18.5.linux-amd64.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ngolang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Sync Pool Implementation\nDESCRIPTION: Thread-safe pool implementation for storing and retrieving interface{} objects with custom creation function.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype Pool struct {\n    New func() interface{}\n}\n\nfunc (p *Pool) Get() interface{}\nfunc (p *Pool) Put(x interface{})\n```\n\n----------------------------------------\n\nTITLE: Creating test-only Go file\nDESCRIPTION: Defines a Go test file to test the scenario where a package only contains test files.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_empty_err.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage testonly_test\n```\n\n----------------------------------------\n\nTITLE: Testing @patch Version Selection Error Handling\nDESCRIPTION: Tests the error behavior when using @patch without a previously required version, showing the appropriate error message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_prefer_compatible.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n! go list -m github.com/russross/blackfriday@patch\nstderr '^go: github.com/russross/blackfriday@patch: can\\'t query version \"patch\" of module github.com/russross/blackfriday: no existing version is required$'\n```\n\n----------------------------------------\n\nTITLE: Empty Package Z3 Implementation\nDESCRIPTION: Minimal package z3 definition with no functionality.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gcflags_patterns.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage z3\n```\n\n----------------------------------------\n\nTITLE: Go Module with Test Suffix in Module Name\nDESCRIPTION: A Go module definition for a module with a 'test' suffix in its name.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test.txt#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/e_test\n```\n\n----------------------------------------\n\nTITLE: Conditional Go file with Printf error in vetpkg\nDESCRIPTION: This snippet shows a Go file with a build tag 'tagtest' and a Printf statement with too many arguments, which should trigger a vet error when the tag is included.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet.txt#2025-04-22_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\n// +build tagtest\n\npackage p\n\nimport \"fmt\"\n\nfunc g() {\n\tfmt.Printf(\"%d\", 3, 4)\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Templates and IO Formatting in Go\nDESCRIPTION: Details constants and functions relevant for handling HTML templates and directory entry formatting. ErrJSTemplate constant is defined along with functions like FormatDirEntry and FormatFileInfo to aid in formatting operations within file systems.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.21.txt#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\npkg html/template, const ErrJSTemplate = 12 #59584\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg html/template, const ErrJSTemplate ErrorCode #59584\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg io/fs, func FormatDirEntry(DirEntry) string #54451\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg io/fs, func FormatFileInfo(FileInfo) string #54451\n```\n\n----------------------------------------\n\nTITLE: Verifying GOROOT Environment Variable Setting (Shell)\nDESCRIPTION: Executes `go env GOROOT` to retrieve the currently set GOROOT path and asserts that the standard output matches the expected path ($WORK/goroot), confirming the previous environment variable setting was successful.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_gofile_in_goroot.txt#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngo env GOROOT\nstdout $WORK[/\\\\]goroot\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition for Race Condition Testing\nDESCRIPTION: This snippet defines a Go module named 'testrace' with Go version 1.16.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_race_cover_mode_issue20435.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule testrace\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Defining WaitStatus type for NetBSD ARM64 in syscall package\nDESCRIPTION: Definition of the WaitStatus type in the syscall package for NetBSD ARM64 architecture. This type represents the status of a child process as returned by wait() system calls.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_170\n\nLANGUAGE: go\nCODE:\n```\ntype WaitStatus uint32\n```\n\n----------------------------------------\n\nTITLE: Package 1 Test File Structure\nDESCRIPTION: Empty test file for package pkg1 in the pkg directory. Used as part of the test structure to verify the behavior of 'go test' with multiple packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_compile_multi_pkg.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage pkg1\n```\n\n----------------------------------------\n\nTITLE: Executing Go Test and Coverage\nDESCRIPTION: Initiates a Go test with coverage profile generation for packages. The 'go test' command is executed without vetting and a single count, creating a coverage profile. Dependencies include a Go runtime environment.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_nocoverpkg.txt#2025-04-22_snippet_0\n\nLANGUAGE: Golang\nCODE:\n```\ngo test -vet=off -count=1 -coverprofile=cov.p ./...\n```\n\n----------------------------------------\n\nTITLE: Main Package Implementation with Undefined Reference\nDESCRIPTION: Go source file containing a function with an undefined reference to function g()\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_build_failure.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nfunc f() {\n\tg()\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Setup for Fossil Integration Test\nDESCRIPTION: Sets up the required environment variables for testing Go module fetch from Fossil repositories, including module mode, direct proxy, and Fossil user configuration.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_fossil.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\nenv GOPROXY=direct\nenv GOSUMDB=off\nenv USER=fossiluser\nenv FOSSIL_HOME=$WORK/home\n```\n\n----------------------------------------\n\nTITLE: Default Go Implementation for Disabled Fieldtrack\nDESCRIPTION: A Go file with a build constraint that only compiles when the fieldtrack experiment is disabled. It outputs a message indicating that fieldtrack is off.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_tag_goexperiment.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// +build !goexperiment.fieldtrack\n\npackage main\n\nfunc main() {\n\tprintln(\"fieldtrack off\")\n}\n```\n\n----------------------------------------\n\nTITLE: Importing rsc.io/quote/v3 in Go\nDESCRIPTION: Imports the rsc.io/quote/v3 package in a Go file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_replace.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\npackage replace\n\nimport _ \"rsc.io/quote/v3\"\n```\n\n----------------------------------------\n\nTITLE: Testing Multiple Anchors with \\B and Dot in Go Regexps\nDESCRIPTION: Tests patterns with multiple repeated anchors, non-word boundary assertions, and the dot metacharacter. These tests verify how redundant anchors affect character matching with non-word boundary constraints.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_19\n\nLANGUAGE: regexp\nCODE:\n```\n^^^^^^^^\\B.$$$$$$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:^^^^^^^^\\B.$$$$$$)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:^^^^^^^^\\B.$$$$$$)\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:^^^^^^^^\\B.$$$$$$)$\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Standard go.mod file declaring the module path\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_invalidpath_v1_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/invalidpath/v1\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Module\nDESCRIPTION: Basic Go module configuration file specifying the module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_main_twice.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule multimain\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment for 'latest' Query (Tagged vs Pseudo)\nDESCRIPTION: Configures the environment for testing 'latest' version resolution when both tagged and pseudo-versions exist in the proxy. It disables checksum database verification (`GOSUMDB=off`), sets the module proxy (`GOPROXY`) to the pre-populated cache directory, defines a temporary `GOPATH`, and creates the temporary directory. This setup isolates the test and directs the 'go' command to use the local cache as the source for module information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_pseudo.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nenv GOSUMDB=off # don't verify go.mod files when loading retractions\nenv GOPROXY=file:///$GOPATH/pkg/mod/cache/download\nenv GOPATH=$WORK/gopath2\nmkdir $GOPATH\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module for README Package\nDESCRIPTION: This snippet defines a Go module named 'regexp/testdata/README'. It demonstrates how to specify a module name in a go.mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/src_file.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule regexp/testdata/README\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with go.mod File\nDESCRIPTION: Specifies the module name 'rsc.io/panicnil' and sets the Go version requirement to 1.21.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_panicnil_v1.1.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule rsc.io/panicnil\ngo 1.21\n```\n\n----------------------------------------\n\nTITLE: SVN Repository Configuration Files\nDESCRIPTION: Various configuration files for the SVN repository, including revision data, formatting, and authorization settings.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/hello.txt#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n-- conf/authz --\n-- conf/passwd --\n-- conf/svnserve.conf --\n-- db/current --\n0\n-- db/format --\n6\nlayout sharded 1000\n-- db/fs-type --\nfsfs\n-- db/fsfs.conf --\n-- db/min-unpacked-rev --\n0\n-- db/revprops/0/0 --\nK 8\nsvn:date\nV 27\n2017-09-22T01:11:53.895835Z\nEND\n-- db/revs/0/0 --\nPLAIN\nEND\nENDREP\nid: 0.0.r0/17\ntype: dir\ncount: 0\ntext: 0 0 4 4 2d2977d1c96f487abe4a1e202dd03b4e\ncpath: /\n\n\n17 107\n-- db/txn-current --\n0\n-- db/txn-current-lock --\n-- db/uuid --\n53cccb44-0fca-40a2-b0c5-acaf9e75039a\n-- db/write-lock --\n-- format --\n5\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: A simple Go module definition for the test package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_test_race.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule test\n```\n\n----------------------------------------\n\nTITLE: Package A Implementation\nDESCRIPTION: Valid Go file with package declaration and fmt import\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_parse_err.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\nimport \"fmt\"\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition for patch.example.com/direct\nDESCRIPTION: The go.mod file defining the module name and its dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_direct_v1.1.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule patch.example.com/direct\n\nrequire (\n\tpatch.example.com/indirect v1.0.0\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Go Environment Variables for Testing\nDESCRIPTION: Sets up the Go environment for testing by disabling workspace mode and enabling module mode.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dot.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GOWORK=off\nenv GO111MODULE=on\n```\n\n----------------------------------------\n\nTITLE: Different Package Build with PGO\nDESCRIPTION: Verifies that building a different package uses cached profile instead of running preprofile again\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_pgo.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo build -x -pgo=default.pgo lib2.go\n! stderr 'preprofile.*default\\.pgo'\nstderr 'compile.*-pgoprofile=\\S+gocache.*lib2.go'\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Metadata in .mod File\nDESCRIPTION: This snippet specifies the Go module's path using the 'module' directive, which is essential for Go's dependency management system. The specified value ('example.com/pseudoupgrade') uniquely identifies this module. There are no dependencies or imports listed, and no parameters are accepted. The file must be named 'go.mod' and placed at the module root for proper operation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_pseudoupgrade_v0.1.1-0.20190429073117-b5426c86b553.txt#2025-04-22_snippet_1\n\nLANGUAGE: INI\nCODE:\n```\nmodule example.com/pseudoupgrade\n```\n\n----------------------------------------\n\nTITLE: Checking Compiled Go Files\nDESCRIPTION: Shell command to list compiled Go files in the current directory, verifying that foo.s is not included in output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_compiled_files_issue28749.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo list -compiled -f {{.CompiledGoFiles}} .\n! stdout 'foo.s'\n```\n\n----------------------------------------\n\nTITLE: Package C Main\nDESCRIPTION: Go main package used for testing external module builds.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_git.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: CGo Package Implementation with Undefined Reference\nDESCRIPTION: Go source file with CGo import containing a function with an undefined reference to function j()\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_build_failure.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nimport \"C\"\n\nfunc h() {\n\tj()\n}\n```\n\n----------------------------------------\n\nTITLE: Time Duration Rounding Methods\nDESCRIPTION: Defines Round and Truncate methods for Duration type to handle time duration calculations\nSOURCE: https://github.com/golang/go/blob/master/api/go1.9.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc (Duration) Round(Duration) Duration\nfunc (Duration) Truncate(Duration) Duration\n```\n\n----------------------------------------\n\nTITLE: Fake Package Implementation\nDESCRIPTION: Simple fake package implementation with DoNothing function that returns a static string value.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_test_issue14613.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage fake\n\nfunc DoNothing() string {\n\treturn \"Ok\"\n}\n```\n\n----------------------------------------\n\nTITLE: Install Go Binary and Check Version Metadata (No Local Repo)\nDESCRIPTION: This snippet installs a Go binary and checks its version metadata. It expects the metadata to be absent since there's no local Mercurial repository. It then removes the binary.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_hg.txt#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo install\ngo version -m $GOBIN/a$GOEXE\n! stdout hgrevision\nstdout '\\s+mod\\s+example.com/a\\s+\\(devel\\)'\nrm $GOBIN/a$GOEXE\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines a Go module named 'cgocover2' with Go 1.16 as the minimum required version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_cgo_xtest.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule cgocover2\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Defining Dependency Module\nDESCRIPTION: This Go module definition is for the dependency module used in the vendoring test, specifying its name and Go version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_issue46867.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/m\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Basic Go module declaration for example.com\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_export_e.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com\n```\n\n----------------------------------------\n\nTITLE: Testing Alternative Capturing Groups with Word Boundary Negation in Go Regexps\nDESCRIPTION: Tests patterns that use alternation within capturing groups combined with \\B assertions. These expressions check how the regex engine prioritizes different alternatives with non-word boundary constraints.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_8\n\nLANGUAGE: regexp\nCODE:\n```\n\\B(fo|foo)\\B\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:\\B(fo|foo)\\B)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:\\B(fo|foo)\\B)\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:\\B(fo|foo)\\B)$\n```\n\n----------------------------------------\n\nTITLE: Defining Empty Go Package\nDESCRIPTION: Contents of p.go file defining an empty package 'p'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/old_tidy_toolchain.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\npackage p\n```\n\n----------------------------------------\n\nTITLE: Verifying Go Coverage Profile Path Contents (Shell)\nDESCRIPTION: These shell commands use `grep` to check the contents of the generated coverage profile `blah.prof`. The first command verifies that the source file name (`prog.go`) is present. The second command checks for the presence of the current working directory path (`$PWD`), ensuring correct path resolution in the profile.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_test_localpkg_filepath.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# should not contain cmd-line pseudo-import-path\ngrep prog.go blah.prof\ngrep $PWD blah.prof\n```\n\n----------------------------------------\n\nTITLE: TestMain Function Not Calling os.Exit in Go\nDESCRIPTION: This snippet shows a TestMain function that doesn't call os.Exit directly. Instead, it uses a defer and panic to handle the exit code, which is not the recommended approach and may cause issues with test execution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_main.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage standalone_testmain_not_call_os_exit_test\n\nimport (\n\t\"testing\"\n)\n\nfunc TestWillFail(t *testing.T) {\n\tt.Error(\"this test will fail.\")\n}\n\nfunc TestMain(m *testing.M) {\n\tdefer func() {\n\t\trecover()\n\t}()\n\texit := m.Run()\n\tpanic(exit)\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition for C_test\nDESCRIPTION: A Go module definition for a package with a 'test' suffix in its name.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/c_test\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Module Version in Go\nDESCRIPTION: This command fetches a specific version of the 'example.com/pseudoupgrade' module using a commit hash.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_upgrade_pseudo.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngo get example.com/pseudoupgrade@b5426c8\n```\n\n----------------------------------------\n\nTITLE: Defining RTM (Routing Message) Constants in Go Syscall Package for Darwin-arm64-cgo\nDESCRIPTION: Constants for routing message types used in network routing operations. These values define different actions that can be performed on the routing table, such as adding, deleting, or modifying routes.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_176\n\nLANGUAGE: Go\nCODE:\n```\nconst RTM_ADD = 1\nconst RTM_DELETE = 2\nconst RTM_CHANGE = 3\nconst RTM_GET = 4\nconst RTM_LOSING = 5\nconst RTM_REDIRECT = 6\nconst RTM_MISS = 7\nconst RTM_LOCK = 8\nconst RTM_OLDADD = 9\nconst RTM_OLDDEL = 10\nconst RTM_RESOLVE = 11\nconst RTM_NEWADDR = 12\nconst RTM_DELADDR = 13\nconst RTM_IFINFO = 14\nconst RTM_NEWMADDR = 15\nconst RTM_DELMADDR = 16\nconst RTM_IFINFO2 = 18\nconst RTM_NEWMADDR2 = 19\nconst RTM_GET2 = 20\nconst RTM_VERSION = 5\nconst RTM_RTTUNIT = 1000000\n```\n\n----------------------------------------\n\nTITLE: Version Information in .info File for Go Module\nDESCRIPTION: Contains version information for the 'depofdirectpatch' module in JSON format.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_depofdirectpatch_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\"Version\":\"v1.0.0\"}\n```\n\n----------------------------------------\n\nTITLE: Minimal Go Package Definition\nDESCRIPTION: A minimal Go package file that defines just the package name with no other contents. Used for testing basic package resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/test1-svn-git.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage tiny\n```\n\n----------------------------------------\n\nTITLE: Defining NOTE and File Operation Constants in Go for NetBSD ARM64\nDESCRIPTION: This snippet defines various system constants related to file notifications (NOTE_*) and file operation flags (O_*) for NetBSD ARM64 platform. These constants are used in syscalls for file operations and event notifications in the Go standard library.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_46\n\nLANGUAGE: Go\nCODE:\n```\nconst NOTE_RENAME = 32\nconst NOTE_REVOKE = 64\nconst NOTE_TRACK = 1\nconst NOTE_TRACKERR = 2\nconst NOTE_WRITE = 2\nconst O_ACCMODE = 3\nconst O_ALT_IO = 262144\nconst O_APPEND = 8\nconst O_ASYNC = 64\nconst O_CLOEXEC = 4194304\nconst O_CREAT = 512\nconst O_DIRECT = 524288\nconst O_DIRECTORY = 2097152\nconst O_DSYNC = 65536\nconst O_EXCL = 2048\nconst O_EXLOCK = 32\nconst O_FSYNC = 128\nconst O_NDELAY = 4\nconst O_NOCTTY = 32768\nconst O_NOFOLLOW = 256\nconst O_NONBLOCK = 4\nconst O_NOSIGPIPE = 16777216\nconst O_RSYNC = 131072\nconst O_SHLOCK = 16\nconst O_SYNC = 128\nconst O_TRUNC = 1024\n```\n\n----------------------------------------\n\nTITLE: Direct Module Tidying\nDESCRIPTION: Demonstrates that using 'go mod tidy' directly keeps requirements tidy from the start.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version_missing.txt#2025-04-22_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ncp go.mod.orig go.mod\ngo mod tidy\ncmpenv go.mod go.mod.tidy\n```\n\n----------------------------------------\n\nTITLE: Markdown List Format\nDESCRIPTION: Shows list formatted as Markdown with proper spacing and indentation.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list.txt#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nText. - Not a list.\n\n  - Here is the list.\n  - Using multiple bullets.\n  - Indentation does not matter.\n  - Lots of bullets.\n\nMore text.\n```\n\n----------------------------------------\n\nTITLE: Fatal Error Fuzz Test in Go\nDESCRIPTION: Demonstrates a fuzz test that triggers a fatal error using f.Fatal().\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage fatal_fuzz\n\nimport \"testing\"\n\nfunc Fuzz(f *testing.F) {\n    f.Fatal(\"fatal in target\")\n}\n```\n\n----------------------------------------\n\nTITLE: Running go vet on package with only test files\nDESCRIPTION: This snippet shows running go vet on a package that contains only test files. It expects no error output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet.txt#2025-04-22_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ngo vet m/onlytest\n! stderr .\n```\n\n----------------------------------------\n\nTITLE: Testing Build Error in Test File (Go)\nDESCRIPTION: This snippet tests a build error directly in a test file. It checks the JSON output for specific build failure messages and package information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_build.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n! go test -json -o=$devnull ./builderror\nstdout '\"ImportPath\":\"m/builderror \\[m/builderror\\.test\\]\",\"Action\":\"build-output\",\"Output\":\"# m/builderror \\[m/builderror.test\\]\\\\n\"'\nstdout '\"ImportPath\":\"m/builderror \\[m/builderror\\.test\\]\",\"Action\":\"build-output\",\"Output\":\"builderror(/|\\\\\\\\)main_test.go:3:11: undefined: y\\\\n\"'\nstdout '\"ImportPath\":\"m/builderror \\[m/builderror\\.test\\]\",\"Action\":\"build-fail\"'\nstdout '\"Action\":\"start\",\"Package\":\"m/builderror\"'\nstdout '\"Action\":\"output\",\"Package\":\"m/builderror\",\"Output\":\"FAIL\\\\tm/builderror \\[build failed\\]\\\\n\"'\nstdout '\"Action\":\"fail\",\"Package\":\"m/builderror\",\"Elapsed\":.*,\"FailedBuild\":\"m/builderror \\[m/builderror\\.test\\]\"'\n! stderr '.'\n```\n\n----------------------------------------\n\nTITLE: Fake Mercurial Executable\nDESCRIPTION: This snippet defines a shell script that acts as a fake `hg` executable, always exiting with status 1. It's used to test error handling when the real Mercurial tool is unavailable.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_hg.txt#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\n#!/bin/sh\nexit 1\n```\n\n----------------------------------------\n\nTITLE: Main Module Configuration\nDESCRIPTION: Main go.mod file defining module dependencies and replacements for test versions of example.net/a and example.net/b modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patchcycle.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example\n\ngo 1.16\n\nrequire example.net/a v0.1.0\n\nreplace (\n\texample.net/a v0.1.0 => ./a10\n\texample.net/a v0.1.1 => ./a11\n\texample.net/a v0.2.0 => ./a20\n\texample.net/b v0.1.0 => ./b10\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Package Dependencies with GO111MODULE On\nDESCRIPTION: Shell commands testing package dependencies with module mode enabled, checking the same error conditions in a modular context.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_import_error_stack.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\ncd testdep\n! go test testdep/p1\nstderr 'package testdep/p1 \\(test\\)\\n\\timports testdep/p2\\n\\timports testdep/p3: build constraints exclude all Go files '\n! go vet testdep/p1\nstderr 'package testdep/p1 \\(test\\)\\n\\timports testdep/p2\\n\\timports testdep/p3: build constraints exclude all Go files '\n```\n\n----------------------------------------\n\nTITLE: Vendored Package Definition\nDESCRIPTION: Defines a vendored package p1 with an import path.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_test_issue11864.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\npackage p1 // import \"vendor.org/p1\"\n```\n\n----------------------------------------\n\nTITLE: Defining File Descriptor and fcntl Constants for Darwin ARM64 in Go\nDESCRIPTION: This snippet defines constants related to file descriptors and the fcntl system call for Darwin ARM64. These constants are used for various file and I/O operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_61\n\nLANGUAGE: Go\nCODE:\n```\nconst FD_CLOEXEC = 1\nconst FD_CLOEXEC ideal-int\nconst FD_SETSIZE = 1024\nconst FD_SETSIZE ideal-int\nconst F_ADDFILESIGS = 61\nconst F_ADDFILESIGS ideal-int\nconst F_ADDSIGS = 59\nconst F_ADDSIGS ideal-int\n// ... more file descriptor and fcntl constants ...\n```\n\n----------------------------------------\n\nTITLE: Executable Main Package\nDESCRIPTION: Simple executable Go main package with empty main function for testing local package builds.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_multi_main.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Adding Zanabazar_Square RangeTable to unicode package\nDESCRIPTION: Adds support for the Zanabazar Square script block by defining a new RangeTable in the unicode package. This allows identifying and handling characters from this Unicode block.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.10.txt#2025-04-22_snippet_20\n\nLANGUAGE: go\nCODE:\n```\npkg unicode, var Zanabazar_Square *RangeTable\n```\n\n----------------------------------------\n\nTITLE: Testing Go Get with Non-package Subdirectories\nDESCRIPTION: This snippet tests 'go get' behavior with module paths that do not contain a package and with non-package subdirectories of a module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pkgtags.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n! go get example.net/missing/subdir@v0.1.0\nstderr '^go: module example.net/missing@v0.1.0 found \\(replaced by ./missing\\), but does not contain package example.net/missing/subdir$'\n\ngo get example.net/missing@v0.1.0\n\n! go get example.net/missing/subdir@v0.1.0\nstderr '^go: module example.net/missing@v0.1.0 found \\(replaced by ./missing\\), but does not contain package example.net/missing/subdir$'\n```\n\n----------------------------------------\n\nTITLE: Command A Implementation\nDESCRIPTION: Minimal Go program for cmd/a package used in wildcard testing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_tool.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Go Program to Verify Absence of Memory Mapping Annotations\nDESCRIPTION: A Go program that checks if /proc/self/maps contains Go annotations. It reads the memory maps file and fails if it finds any '[anon: Go:' annotations, verifying that decoratemappings=0 is being honored.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/godebug_decoratemappings_124.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tb, err := os.ReadFile(\"/proc/self/maps\")\n\tif err != nil {\n\t\tlog.Fatalf(\"Error reading: %v\", err)\n\t}\n\n\tif strings.Contains(string(b), \"[anon: Go:\") {\n\t\tlog.Printf(\"/proc/self/maps:\\n%s\", string(b))\n\t\tlog.Fatalf(\"/proc/self/maps contains Go annotation\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing Test Environment (Shell)\nDESCRIPTION: Copies the original go.mod file to preserve the initial state for testing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue47979.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncp go.mod go.mod.orig\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Update Failure with Path Mismatch (Shell)\nDESCRIPTION: Attempts to update the `example.com/badchain/a` module using `go get`. This command is expected to fail (`!`) because a transitive dependency (`example.com/badchain/c@v1.1.0`) has a mismatch between its declared module path and the path used to require it. The script then compares the actual standard error output with the expected error message stored in `update-a-expected` and verifies that the `go.mod` file remains unchanged.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badchain.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Try to update example.com/badchain/a (and its dependencies).\n! go get example.com/badchain/a\ncmp stderr update-a-expected\ncmp go.mod go.mod.orig\n```\n\n----------------------------------------\n\nTITLE: Defining Package 'd' (Copy of 'c') (Go)\nDESCRIPTION: This Go package `d` is functionally identical to package `c`. It serves as a separate target for the `go build -x m/d` command, allowing isolated observation of the build steps for the transitive Cgo dependency scenario, specifically for testing issue #68743.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_undef.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n-- d/d.go --\n// Package d is a copy of package c, to build with -x.\npackage d\n\n// static int D(int i) { return i; }\nimport \"C\"\n\nimport \"m/a\"\n\nfunc Fn(i int) (int, int) {\n     return a.GoFn(i), int(C.D(C.int(i)))\n}\n```\n\n----------------------------------------\n\nTITLE: Module Version Information JSON\nDESCRIPTION: JSON file containing version information for the module, specifying version v0.0.1.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo124_v0.0.1.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.0.1\"}\n```\n\n----------------------------------------\n\nTITLE: Updated Go Program with Init Function\nDESCRIPTION: The updated version of main.go adding an init function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/commit-after-tag.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\nfunc init() {}\n```\n\n----------------------------------------\n\nTITLE: First Main Package Definition\nDESCRIPTION: Defines a minimal main package with an empty main() function. Used as part of testing multiple main package builds.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_exe.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Module Definition for Dependency 'a'\nDESCRIPTION: The `go.mod` file for module `a`. It requires module `b` at version v0.1.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_import_allmod.txt#2025-04-22_snippet_6\n\nLANGUAGE: gomod\nCODE:\n```\n-- a1/go.mod --\nmodule a\n\ngo 1.17\n\nrequire b v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Running Go Module and Checking Version Output\nDESCRIPTION: This snippet shows how to run a specific version of a Go module using 'go run' and verifies its stdout output. It checks if the output matches the expected version string.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_work_versioned.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngo run example.com/printversion@v0.1.0\nstdout '^main is example.com/printversion v0.1.0$'\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Module with go.mod\nDESCRIPTION: Defines a basic Go module named 'test' using Go version 1.0. The go.mod file is essential for dependency management and module identification in Go projects.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_issue_65528.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule test\n\ngo 1.0\n```\n\n----------------------------------------\n\nTITLE: Plain Input Text Format\nDESCRIPTION: Raw input text showing URL handling with various test cases including valid and invalid URL patterns.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/link2.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThe Go home page is https://go.dev/.\nIt used to be https://golang.org.\nhttps:// is not a link.\nNor is https://\nhttps://☺ is not a link.\nhttps://:80 is not a link.\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module in go.mod File\nDESCRIPTION: The go.mod file defines the module name for the Go toolchain package, making it recognizable by the Go module system.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.solaris-amd64.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Test-only Go files in testxtest package\nDESCRIPTION: Two test-only Go files in the testxtest package: one with the same package name and one with the _test suffix package name.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_no_go.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage p\n```\n\nLANGUAGE: go\nCODE:\n```\npackage p_test\n```\n\n----------------------------------------\n\nTITLE: Module Not Marked Explicit Error Test\nDESCRIPTION: Sample modules.txt with a module that is required in go.mod but not marked as explicit, along with the expected error message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_modules_txt_consistent.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n## workspace\n# example.com/p v1.0.0 => ./p\n## go 1.21\n# example.com/q v1.0.0 => ./q\n## explicit; go 1.21\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ngo: inconsistent vendoring in $GOPATH${/}src:\n\texample.com/p@v1.0.0: is explicitly required in go.mod, but not marked as explicit in vendor/modules.txt\n\n\tTo ignore the vendor directory, use -mod=readonly or -mod=mod.\n\tTo sync the vendor directory, run:\n\t\tgo work vendor\n```\n\n----------------------------------------\n\nTITLE: Checking Directory Path for Vendored Packages\nDESCRIPTION: This command checks how Go reports the directory of a standard-vendored package. It verifies that vendored packages are correctly located in the GOROOT/src/vendor directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/std_vendor.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo list -f '{{.Dir}}' vendor/golang.org/x/net/http2/hpack\n```\n\n----------------------------------------\n\nTITLE: Minimal Go Program Implementation\nDESCRIPTION: A basic Go program with an empty main function. This serves as the initial code for the repository.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/mainonly.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: HTTP Import Test Package\nDESCRIPTION: Simple package that imports net/http to test dependency resolution through the standard library.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_std_vendor.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage importnethttp\n\nimport _ \"net/http\"\n```\n\n----------------------------------------\n\nTITLE: Asserting Test Output with Regex Pattern\nDESCRIPTION: Shell command that verifies the output of the tests contains the expected CONT or NAME lines and log messages in the correct order.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_chatty_parallel_success_run.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nstdout '=== RUN   TestInterruptor/interruption\\n=== (CONT|NAME)  TestLog\\n    chatty_parallel_test.go:28: this is the second TestLog log\\n--- PASS: Test(Log|Interruptor) \\([0-9.]{4}s\\)'\n```\n\n----------------------------------------\n\nTITLE: Adding IndexListExpr struct to go/ast package\nDESCRIPTION: This snippet introduces a new IndexListExpr struct to the go/ast package, along with its fields and methods.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.18.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\npkg go/ast, type IndexListExpr struct\npkg go/ast, type IndexListExpr struct, Indices []Expr\npkg go/ast, type IndexListExpr struct, Lbrack token.Pos\npkg go/ast, type IndexListExpr struct, Rbrack token.Pos\npkg go/ast, type IndexListExpr struct, X Expr\npkg go/ast, method (*IndexListExpr) End() token.Pos\npkg go/ast, method (*IndexListExpr) Pos() token.Pos\n```\n\n----------------------------------------\n\nTITLE: Defining Package 'x/inall' (Go)\nDESCRIPTION: Defines the empty package `x/inall` within the `x` module. This package is directly imported by the main module `m` and serves as part of the dependency graph for the `all` pattern.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_notall.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n-- x/inall/inall.go --\npackage inall\n```\n\n----------------------------------------\n\nTITLE: Defining Memory Advisory Constants in Go for NetBSD ARM64\nDESCRIPTION: Memory advisory constants for the madvise system call. These specify how the application expects to use memory ranges and help the kernel optimize memory management.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_38\n\nLANGUAGE: go\nCODE:\n```\nconst MADV_DONTNEED = 4\nconst MADV_FREE = 6\nconst MADV_NORMAL = 0\nconst MADV_RANDOM = 1\nconst MADV_SEQUENTIAL = 2\nconst MADV_SPACEAVAIL = 5\nconst MADV_WILLNEED = 3\n```\n\n----------------------------------------\n\nTITLE: Importing Syso2 Package in Syso\nDESCRIPTION: Imports the syso2 package as a side-effect import in the syso package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/link_syso_deps.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\npackage syso\n\nimport _ \"m/syso2\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Format Conversion\nDESCRIPTION: Text transformed into Markdown format with proper heading syntax and anchor links.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/head.txt#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nSome text.\n\n### An Old Heading {#hdr-An_Old_Heading}\n\nNot An Old Heading.\n\nAnd some text.\n\n### A New Heading. {#hdr-A_New_Heading_}\n\nAnd some more text.\n\n\\# Not a heading, because text follows it.\n\nBecause text precedes it, # not a heading.\n\n\\## Not a heading either.\n```\n\n----------------------------------------\n\nTITLE: External Package Test\nDESCRIPTION: Test file in a separate test package testing the vendored strings.Msg value.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_vendor.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main_test\n\nimport (\n\t\"strings\" // really ../vendor/strings\n\t\"testing\"\n)\n\nfunc TestMsgExternal(t *testing.T) {\n\tif strings.Msg != \"hello, world\" {\n\t\tt.Fatalf(\"unexpected msg: %v\", strings.Msg)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Module Version Information in JSON\nDESCRIPTION: This JSON snippet specifies the version information for a Go package. It is necessary for tracking the specific version of the package used. The version is defined as 'v0.1.0'. The input is JSON formatted version data, which outputs a standardized version record for package management.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_split-incompatible_subpkg_v0.1.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\\\"Version\\\": \\\"v0.1.0\\\"}\n```\n\n----------------------------------------\n\nTITLE: Go Module Configuration\nDESCRIPTION: Module definition file specifying the module name and external dependency on rsc.io/quote package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sum.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\n\nmodule example.com/hi\n\nrequire \"rsc.io/quote\" v1.5.2\n```\n\n----------------------------------------\n\nTITLE: SVN Update and Log Commands\nDESCRIPTION: Updates the working copy and generates an XML log of the repository history.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/hello.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsvn update\nsvn log --xml\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Package in Go\nDESCRIPTION: This Go code snippet defines a simple package named 'p'. It declares a single constant 'v' with an integer value of 1. This file (`p.go`) serves as a basic example of source code within the module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/github.com_dmitshur-test_modtest5_v0.0.0-20190619020302-197a620e0c9a.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n-- p.go --\npackage p\n\nconst v = 1\n```\n\n----------------------------------------\n\nTITLE: Go Package Declaration\nDESCRIPTION: Declares the tagtests package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/tagtests.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage tagtests\n```\n\n----------------------------------------\n\nTITLE: Testing Allowed Internal Package Import in Go\nDESCRIPTION: A Go file that imports internal packages from its own module, which is allowed by Go's access control rules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_internal.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\nimport _ \"m/internal\"\nimport _ \"m/internal/z\"\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Verifying Module Replacement Path in Go\nDESCRIPTION: Checks if 'go list' provides the original replacement directory as the module's replacement path.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_replace.txt#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngo list -mod=vendor -f '{{with .Module}}{{with .Replace}}{{.Path}}{{end}}{{end}}' rsc.io/quote/v3\nstdout '.*[/\\\\]not-rsc.io[/\\\\]quote[/\\\\]v3'\n```\n\n----------------------------------------\n\nTITLE: Module Information JSON\nDESCRIPTION: JSON metadata containing version, commit, and timestamp information for the module\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.0.0\",\"Name\":\"60bef405c52117ad21d2adb10872b95cf17f8fca\",\"Short\":\"60bef405c521\",\"Time\":\"2018-02-13T18:05:54Z\"}\n```\n\n----------------------------------------\n\nTITLE: Defining an Empty Go Vendor Package - Go\nDESCRIPTION: This code snippet provides the minimal definition of a Go package named 'v', used as a vendored dependency in the main program. The absence of exports or functionality is intentional for verifying vendoring behavior. This package is required to exist in the vendor directory for the main program to compile.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_symlink_vendor_issue14054.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage v\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module\nDESCRIPTION: Contents of the go.mod file defining the module 'm' without any go version or toolchain specifications.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/old_tidy_toolchain.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Environment Setup for Go Toolchain Tests\nDESCRIPTION: Sets up initial environment variables for testing toolchain version selection, including resetting GOEXPERIMENT and setting test version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_net.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GOEXPERIMENT=''\nenv TESTGO_VERSION=go1.21actual\n```\n\n----------------------------------------\n\nTITLE: Configuring Module 'b' Version 0.2.0 with Dependency in Go\nDESCRIPTION: This go.mod file defines module 'example.net/b' version 0.2.0 with a dependency on 'example.net/a' version 0.2.0, creating a cyclic dependency with module 'a' for testing purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue60490.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/b\n\ngo 1.19\n\nrequire example.net/a v0.2.0\n```\n\n----------------------------------------\n\nTITLE: Testing Go Build Without Local Fossil Repository\nDESCRIPTION: Verifies that Go build doesn't include VCS information when there's no local Fossil repository. It installs the package and checks the binary for VCS revision information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_fossil.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngo install\ngo version -m $GOBIN/a$GOEXE\n! stdout vcs.revision\nrm $GOBIN/a$GOEXE\n```\n\n----------------------------------------\n\nTITLE: Go Types Package Structures and Interfaces\nDESCRIPTION: Defines core types and interfaces for Go's type checking system, including Checker, Error, TypeAndValue, and various type definitions\nSOURCE: https://github.com/golang/go/blob/master/api/go1.5.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype Checker struct {\n    *Info\n}\n\ntype Error struct {\n    Fset *token.FileSet\n    Pos token.Pos\n    Msg string\n    Soft bool\n}\n\ntype TypeAndValue struct {\n    Type Type\n    Value constant.Value\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Pre-Release Version without Retraction using Go List\nDESCRIPTION: Verifies that a pre-release version is selected when all regular release versions are retracted.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_retract.txt#2025-04-22_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\n# 'go list -m mod@latest' selects a pre-release version if all release versions are retracted.\\ngo list -m -f '{{.Version}}{{with .Retracted}} retracted{{end}}' example.com/retract/self/prerelease@latest\\nstdout '^v1.9.1-pre$'\n```\n\n----------------------------------------\n\nTITLE: Testing Internal Scope Preservation with Vendor Replacement\nDESCRIPTION: Changes the replacement for `golang.org/x/internal` to use a path simulating vendoring (`./vendor/golang.org/x/internal`) and gets `./throughdep`. This further tests that replacements, even with different path structures, maintain the original internal package scoping rules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ngo mod edit -replace golang.org/x/internal=./vendor/golang.org/x/internal\ngo get ./throughdep\n```\n\n----------------------------------------\n\nTITLE: Subdirectory Go Module Definition\nDESCRIPTION: Go module file for a subdirectory that defines 'example/subdir/v2' module with Go 1.18 as requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_version_stamping_git.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example/subdir/v2\n\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Listing Packages Without Showing Retraction using Go List\nDESCRIPTION: Checks that 'go list pkg' does not output retraction information. The command tries to list retraction details for 'example.com/retract' but expects no such information in package output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_retract.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n# 'go list pkg' does not show retraction.\\ngo list -f '{{with .Module}}{{with .Retracted}}retracted{{end}}{{end}}' example.com/retract\\n! stdout .\n```\n\n----------------------------------------\n\nTITLE: Simple Go Package Declaration\nDESCRIPTION: Simple Go package declaration for a package in the v2 directory structure.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_23\n\nLANGUAGE: go\nCODE:\n```\npackage q\n```\n\n----------------------------------------\n\nTITLE: Defining SIOC (Socket I/O Control) Constants in Go Syscall Package for Darwin-arm64-cgo\nDESCRIPTION: Socket I/O control constants used with ioctl() system calls to configure network interfaces and sockets. These constants enable operations like configuring interface addresses, multicast memberships, and retrieving network interface information.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_181\n\nLANGUAGE: Go\nCODE:\n```\nconst SIOCADDMULTI = 2149607729\nconst SIOCAIFADDR = 2151704858\nconst SIOCARPIPLL = 3223349544\nconst SIOCATMARK = 1074033415\nconst SIOCAUTOADDR = 3223349542\nconst SIOCAUTONETMASK = 2149607719\nconst SIOCDELMULTI = 2149607730\nconst SIOCDIFADDR = 2149607705\nconst SIOCDIFPHYADDR = 2149607745\nconst SIOCGDRVSPEC = 3223873915\nconst SIOCGETVLAN = 3223349631\nconst SIOCGHIWAT = 1074033409\nconst SIOCGIFADDR = 3223349537\nconst SIOCGIFALTMTU = 3223349576\nconst SIOCGIFASYNCMAP = 3223349628\nconst SIOCGIFBOND = 3223349575\nconst SIOCGIFBRDADDR = 3223349539\nconst SIOCGIFCAP = 3223349595\nconst SIOCGIFCONF = 3222038820\nconst SIOCGIFDEVMTU = 3223349572\nconst SIOCGIFDSTADDR = 3223349538\nconst SIOCGIFFLAGS = 3223349521\nconst SIOCGIFGENERIC = 3223349562\nconst SIOCGIFKPI = 3223349639\n```\n\n----------------------------------------\n\nTITLE: Go Generate Package Environment Variable Test\nDESCRIPTION: Test file for verifying the correct $GOPACKAGE environment variable value in test packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/generate.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main_test\n\n//go:generate echo $GOPACKAGE\n```\n\n----------------------------------------\n\nTITLE: Defining Rusage Structure in Go for NetBSD ARM64\nDESCRIPTION: Definition of the Rusage struct which captures system resource usage statistics. It contains fields for tracking CPU time, memory usage, I/O operations, and various system events.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_103\n\nLANGUAGE: Go\nCODE:\n```\ntype Rusage struct {\n    Utime Timeval\n    Stime Timeval\n    Maxrss int64\n    Ixrss int64\n    Idrss int64\n    Isrss int64\n    Minflt int64\n    Majflt int64\n    Nswap int64\n    Inblock int64\n    Oublock int64\n    Msgsnd int64\n    Msgrcv int64\n    Nsignals int64\n    Nvcsw int64\n    Nivcsw int64\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Trace Tests in Go\nDESCRIPTION: Explains how to generate trace tests using the go generate command in the current directory. The generated tests are placed in a 'tests' directory for the trace reader tests to find.\nSOURCE: https://github.com/golang/go/blob/master/src/internal/trace/testdata/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo generate .\n```\n\n----------------------------------------\n\nTITLE: Defining a Nested Package Go Module - Go\nDESCRIPTION: Defines the nested module 'example.net/ambiguous' with Go version 1.16 in its own go.mod file. This file is placed in a subdirectory to create ambiguity with the root module, emulating a nested module scenario in dependency resolution tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_ambiguous_v0.1.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/ambiguous\\n\\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Defining System Call Constants for NetBSD ARM64 with CGO\nDESCRIPTION: This snippet defines system call constants used for making system calls on NetBSD ARM64 architecture. These constants are numerical identifiers for specific kernel operations like socket creation, file operations, and process management.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_68\n\nLANGUAGE: Go\nCODE:\n```\nconst SYS___SIGACTION_SIGTRAMP ideal-int\nconst SYS_SIGQUEUEINFO = 245\nconst SYS_SIGQUEUEINFO ideal-int\nconst SYS___SIGTIMEDWAIT = 431\nconst SYS___SIGTIMEDWAIT ideal-int\nconst SYS_SOCKET = 394\nconst SYS_SOCKET ideal-int\nconst SYS_SOCKETPAIR = 135\nconst SYS_SOCKETPAIR ideal-int\nconst SYS_SSTK = 70\nconst SYS_SSTK ideal-int\nconst SYS_STAT = 439\nconst SYS_STAT ideal-int\nconst SYS_STATVFS1 = 357\nconst SYS_STATVFS1 ideal-int\nconst SYS_SWAPCTL = 271\nconst SYS_SWAPCTL ideal-int\nconst SYS_SYMLINK = 57\nconst SYS_SYMLINKAT = 470\nconst SYS_SYMLINKAT ideal-int\nconst SYS_SYMLINK ideal-int\nconst SYS_SYNC = 36\nconst SYS_SYNC ideal-int\nconst SYS_SYSARCH = 165\nconst SYS_SYSARCH ideal-int\nconst SYS___SYSCTL = 202\nconst SYS___SYSCTL ideal-int\nconst SYS_TIMER_CREATE = 235\nconst SYS_TIMER_CREATE ideal-int\nconst SYS_TIMER_DELETE = 236\nconst SYS_TIMER_DELETE ideal-int\nconst SYS_TIMER_GETOVERRUN = 239\nconst SYS_TIMER_GETOVERRUN ideal-int\nconst SYS_TIMER_GETTIME = 447\nconst SYS_TIMER_GETTIME ideal-int\nconst SYS_TIMER_SETTIME = 446\nconst SYS_TIMER_SETTIME ideal-int\nconst SYS_TRUNCATE = 200\nconst SYS_TRUNCATE ideal-int\nconst SYS_UMASK = 60\nconst SYS_UMASK ideal-int\nconst SYS_UNDELETE = 205\nconst SYS_UNDELETE ideal-int\nconst SYS_UNLINK = 10\nconst SYS_UNLINKAT = 471\nconst SYS_UNLINKAT ideal-int\nconst SYS_UNLINK ideal-int\nconst SYS_UNMOUNT = 22\nconst SYS_UNMOUNT ideal-int\nconst SYS_UTIMENSAT = 467\nconst SYS_UTIMENSAT ideal-int\nconst SYS_UTIMES = 420\nconst SYS_UTIMES ideal-int\nconst SYS_UTRACE = 306\nconst SYS_UTRACE ideal-int\nconst SYS_UUIDGEN = 355\nconst SYS_UUIDGEN ideal-int\nconst SYS_VADVISE = 72\nconst SYS_VADVISE ideal-int\nconst SYS_VFORK = 66\nconst SYS_VFORK ideal-int\nconst SYS_WAIT4 = 449\nconst SYS_WAIT4 ideal-int\nconst SYS_WRITE = 4\nconst SYS_WRITE ideal-int\nconst SYS_WRITEV = 121\nconst SYS_WRITEV ideal-int\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module for Import Cycle Test (Go Mod)\nDESCRIPTION: Defines a Go module named `golang.org/issue45863` using Go version 1.17. This `go.mod` file establishes the root of the project structure and specifies the Go language version baseline for the test case demonstrating the import cycle issue.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_test_cycle.txt#2025-04-22_snippet_1\n\nLANGUAGE: gomod\nCODE:\n```\n-- go.mod --\nmodule golang.org/issue45863\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: NetBSD ARM64 Filesystem ID Structure Definition in Go\nDESCRIPTION: Defines the Fsid structure that uniquely identifies a filesystem. Contains an array of two 32-bit integers to form the filesystem identifier.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_92\n\nLANGUAGE: go\nCODE:\n```\ntype Fsid struct {\n\tX__fsid_val [2]int32\n}\n```\n\n----------------------------------------\n\nTITLE: Package C Implementation\nDESCRIPTION: The implementation of package 'c', which is an empty package used to complete the dependency graph for the test case.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_cycle.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage c\n```\n\n----------------------------------------\n\nTITLE: Empty Go Workspace Configuration\nDESCRIPTION: Minimal go.work file specifying Go version 1.21.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_empty_panic_GOPATH.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo 1.21\n```\n\n----------------------------------------\n\nTITLE: Network Interface Hardware Type Constants in Go for NetBSD-arm64\nDESCRIPTION: Constants defining the hardware types for network interfaces on NetBSD ARM64. These ARPHRD_* constants are used to identify different network hardware types within the syscall package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_114\n\nLANGUAGE: Go\nCODE:\n```\nconst ARPHRD_FRELAY = 15\nconst ARPHRD_IEEE1394 = 24\nconst ARPHRD_IEEE802 = 6\nconst ARPHRD_STRIP = 23\n```\n\n----------------------------------------\n\nTITLE: Adding and Committing Main Go Source File\nDESCRIPTION: Adds main.go to Git and creates a commit with a timestamp.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/insecurerepo.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nat 2019-09-04T14:39:48-04:00\ngit add main.go\ngit commit -m 'main: add Go source file'\n```\n\n----------------------------------------\n\nTITLE: Module Information\nDESCRIPTION: This JSON snippet contains version information for the Go toolchain module. It's used for tracking the specific version and platform, important for builds and consistency. It requires being part of the module's metadata and is read by Go-related tooling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.freebsd-amd64.txt#2025-04-22_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\\\"Version\\\":\\\"v0.0.1-go1.999testmod.freebsd-amd64\\\"}\n```\n\n----------------------------------------\n\nTITLE: Git reference validation file\nDESCRIPTION: Expected output from git show-ref command to validate the repository state.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/get_issue53955.txt#2025-04-22_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n2cb3d49f8874b9362ed0ddd2a6512e4108bbf6b1 refs/heads/main\n050526ebf5883191e990529eb3cc9345abaf838c refs/tags/v1.0.9\n```\n\n----------------------------------------\n\nTITLE: Gofmt List Formatting\nDESCRIPTION: Displays the list formatted according to gofmt standards with normalized spacing and line breaks.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list8.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nLoose lists.\n\n  - A\n\n    B\n\n  - C\n    D\n\n  - E\n\n  - F\n```\n\n----------------------------------------\n\nTITLE: Setting Executable Permissions for Scripts in Go Module Exploit Test\nDESCRIPTION: This snippet sets executable permissions (0777) for two shell scripts: 'go1.999999-/run.sh' and 'run.sh'. These scripts are part of the exploit test setup.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_toolchain_slash.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nchmod 0777 go1.999999-/run.sh\nchmod 0777 run.sh\n```\n\n----------------------------------------\n\nTITLE: Main Application Entry Point\nDESCRIPTION: Main Go file that imports and uses the dependency package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_disablevendor.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"example.com/dep\"\n\nfunc main() {\n\tdep.Dep()\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Ambiguous Import Error\nDESCRIPTION: Attempts to build a package with an ambiguous import, expecting an error message that indicates the package is found in multiple modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_ambiguous_import.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n! go build ./importx\nstderr '^importx[/\\\\]importx.go:2:8: ambiguous import: found package example.com/a/x in multiple modules:\\n\\texample.com/a v0.1.0 \\('$WORK'[/\\\\]a[/\\\\]x\\)\\n\\texample.com/a/x v0.1.0 \\('$WORK'[/\\\\]ax\\)$'\n```\n\n----------------------------------------\n\nTITLE: Basic Go Package File\nDESCRIPTION: Simple Go file in dir2 defining package dir2.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_overlay.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage dir2\n```\n\n----------------------------------------\n\nTITLE: Creating v2.0.0 Tag with Commit Message\nDESCRIPTION: Checks out an earlier commit and creates a v2.0.0 tag with a specific commit message indicating v2 compatibility.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout --detach mytag~1\nat 2018-07-18T21:21:27-04:00\nenv GIT_AUTHOR_DATE=2018-02-19T18:10:06-05:00\nmkdir pkg\necho 'package p // pkg/p.go'\ncp stdout pkg/p.go\ngit add pkg/p.go\nunquote 'add pkg/p.go\\n\\nv2\\n'\ncp stdout COMMIT_MSG\ngit commit -F COMMIT_MSG\ngit tag v2.0.0\n```\n\n----------------------------------------\n\nTITLE: Go Module Checksum File\nDESCRIPTION: The go.sum file containing the checksum for rsc.io/breaker v1.0.0, ensuring dependency integrity for the test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_update_sum_readonly.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nrsc.io/breaker v1.0.0/go.mod h1:s5yxDXvD88U1/ESC23I2FK3Lkv4YIKaB1ij/Hbm805g=\n```\n\n----------------------------------------\n\nTITLE: Go Package Declaration\nDESCRIPTION: Simple Go file declaring package 'bar'\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_issue_56509.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage bar\n```\n\n----------------------------------------\n\nTITLE: Go Toolchain Module Path Definition\nDESCRIPTION: Defines the module path for a custom Go toolchain with specific version and platform.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-amd64.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngolang.org/toolchain@v0.0.1-go1.999testmod.linux-amd64\n```\n\n----------------------------------------\n\nTITLE: Gofmt Command Shell Script Implementation\nDESCRIPTION: Shell script for the 'gofmt' command that simply outputs a message indicating it's unused.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-loong64.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: Vendoring Consistency Check\nDESCRIPTION: Shows that after updating go.mod, -mod=vendor is triggered by default and a stronger consistency check is applied.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version_missing.txt#2025-04-22_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n! go list all\nstderr '^go: inconsistent vendoring'\n! stderr badedit\n```\n\n----------------------------------------\n\nTITLE: Defining File Permission Constants in Go for Darwin ARM64\nDESCRIPTION: Constants defining file permission flags and modes on Darwin ARM64 platform. These constants are used for file operations to control read, write, and execute permissions for owner, group, and others.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_192\n\nLANGUAGE: Go\nCODE:\n```\nconst S_IEXEC = 64\nconst S_IEXEC ideal-int\nconst S_IFMT = 61440\nconst S_IFWHT = 57344\nconst S_IFWHT ideal-int\nconst S_IREAD = 256\nconst S_IREAD ideal-int\nconst S_IRGRP = 32\nconst S_IRGRP ideal-int\nconst S_IROTH = 4\nconst S_IROTH ideal-int\nconst S_IRWXG = 56\nconst S_IRWXG ideal-int\nconst S_IRWXO = 7\nconst S_IRWXO ideal-int\nconst S_IRWXU = 448\nconst S_IRWXU ideal-int\nconst S_ISTXT = 512\nconst S_ISTXT ideal-int\nconst S_IWGRP = 16\nconst S_IWGRP ideal-int\nconst S_IWOTH = 2\nconst S_IWOTH ideal-int\nconst S_IWRITE = 128\nconst S_IWRITE ideal-int\nconst S_IXGRP = 8\nconst S_IXGRP ideal-int\nconst S_IXOTH = 1\nconst S_IXOTH ideal-int\n```\n\n----------------------------------------\n\nTITLE: Overlay Replacement for go.sum - JSON\nDESCRIPTION: This JSON configuration snippet is used to replace the go.sum file with a corrected version in a Go project overlay. Overlays are useful for testing and manipulating module dependencies without altering the original files.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_overlay.txt#2025-04-22_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"Replace\": {\n\t\t\"go.sum\": \"../../../overlay/overlay-sum-used-correct-sums\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Main Package 'm' in Go\nDESCRIPTION: This Go source file defines the main package 'm'. It imports packages 'a' and 'x', establishing the initial dependencies for the main module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_horizon.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n-- m.go --\npackage m\n\nimport (\n\t_ \"a\"\n\t_ \"x\"\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling Go Modules via Environment Variable (Shell)\nDESCRIPTION: Sets the GO111MODULE environment variable to 'off' for the execution of a subsequent command. This forces the Go toolchain to operate in the older GOPATH mode, disabling the Go modules system.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_pkgall_runtime.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=off\n```\n\n----------------------------------------\n\nTITLE: Package Y v0.2.0 Implementation\nDESCRIPTION: Second version of package y with dependency on x v0.2.0-pre.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_convergence.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/y\n\ngo 1.16\n\nrequire example.net/x v0.2.0-pre\n```\n\nLANGUAGE: go\nCODE:\n```\npackage y\n\nimport _ \"example.net/x/subpkg\"\n```\n\n----------------------------------------\n\nTITLE: Deprecated NetBSD Interface Types\nDESCRIPTION: Collection of deprecated interface-related message types for NetBSD. These types were used for network interface management and routing operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_40\n\nLANGUAGE: go\nCODE:\n```\ntype InterfaceAddrMessage\ntype InterfaceAnnounceMessage\ntype InterfaceMessage\ntype RouteMessage\ntype RoutingMessage\n```\n\n----------------------------------------\n\nTITLE: Test Data Validation Utility\nDESCRIPTION: A Go utility that checks the testdata generated by fuzz tests to validate the size of the test case that was written to the corpus. It verifies that minimization correctly reduced test cases to the expected size.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_minimize.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strconv\"\n)\n\nfunc main() {\n\ttarget := os.Args[1]\n\tnumBytes, err := strconv.Atoi(os.Args[2])\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n\n\t// Open the file in testdata (there should only be one)\n\tdir := fmt.Sprintf(\"testdata/fuzz/%s\", target)\n\tfiles, err := ioutil.ReadDir(dir)\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n\tif len(files) != 1 {\n\t\tfmt.Fprintf(os.Stderr, \"expected one file, got %d\", len(files))\n\t\tos.Exit(1)\n\t}\n\tgot, err := ioutil.ReadFile(filepath.Join(dir, files[0].Name()))\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n\n\t// Trim the newline at the end of the file\n\tgot = bytes.TrimSpace(got)\n\n\t// Make sure that there were exactly 100 bytes written to the corpus entry\n\tprefix := []byte(\"[]byte(\")\n\ti := bytes.Index(got, prefix)\n\tgotBytes := got[i+len(prefix) : len(got)-1]\n\ts, err := strconv.Unquote(string(gotBytes))\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n\tif want, got := numBytes, len(s); want != got {\n\t\tfmt.Fprintf(os.Stderr, \"want %d bytes, got %d\\n\", want, got)\n\t\tos.Exit(1)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding FIPS 140 Compliance Check in Go\nDESCRIPTION: New function to check if FIPS 140 compliance is enabled in the crypto/fips140 package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nfunc Enabled() bool\n```\n\n----------------------------------------\n\nTITLE: Module D Package\nDESCRIPTION: Base module d implementation with no dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_indirect.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/d\n\ngo 1.15\n```\n\n----------------------------------------\n\nTITLE: Main Go Program\nDESCRIPTION: Main package that imports and calls the ObjTest function from the syso package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/link_syso_issue33139.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"m/syso\"\n\nfunc main() {\n\tsyso.ObjTest()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GCD Test Vector for Zero Values\nDESCRIPTION: Specifies a test case for GCD calculation where both input values A and B are zero, resulting in a GCD of 0. This represents an edge case in GCD calculations.\nSOURCE: https://github.com/golang/go/blob/master/src/crypto/internal/fips140/rsa/testdata/gcd_lcm_tests.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGCD = 0\nA = 0\nB = 0\n```\n\n----------------------------------------\n\nTITLE: Invalid Go File\nDESCRIPTION: Example of an invalid Go file that doesn't start with a package declaration.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/fmt_load_errors.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nnot the proper start to a Go file\n```\n\n----------------------------------------\n\nTITLE: Package A Go File\nDESCRIPTION: Defines package 'a' and imports package 'b' for testing purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_vendor.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\npackage a\nimport _ \"foo.com/internal/bar/b\"\n```\n\n----------------------------------------\n\nTITLE: Unused Gofmt Shell Script\nDESCRIPTION: This shell script is intended as a placeholder and simply prints 'i am unused' to the console. It's not intended for active usage and serves no practical purpose within the toolchain setup.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.android-arm.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: Command B Implementation\nDESCRIPTION: Minimal Go program for cmd/b package used in wildcard testing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_tool.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage b\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition for Quote Package\nDESCRIPTION: Module definition file (go.mod) for the rsc.io/quote/v2 package, specifying the module name and its dependency on rsc.io/sampler v1.3.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v2_v2.0.1.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule rsc.io/quote/v2\n\nrequire rsc.io/sampler v1.3.0\n```\n\n----------------------------------------\n\nTITLE: Go file with contradictory build constraints\nDESCRIPTION: A Go file with build constraints that cannot be satisfied (linux AND NOT linux), which will be excluded from any build.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_no_go.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// +build linux,!linux\n\npackage x\n```\n\n----------------------------------------\n\nTITLE: Main Package Implementation\nDESCRIPTION: Main package that imports package x.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_convergence.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage m\n\nimport _ \"example.net/x\"\n```\n\n----------------------------------------\n\nTITLE: Testing Vet Error (Go)\nDESCRIPTION: This snippet tests a vet error. It checks the JSON output for specific vet error messages and build failure information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_build.txt#2025-04-22_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n! go test -json -o=$devnull ./veterror\nstdout '\"ImportPath\":\"m/veterror \\[m/veterror.test\\]\",\"Action\":\"build-output\",\"Output\":\"# m/veterror\\\\n\"'\nstdout '\"ImportPath\":\"m/veterror \\[m/veterror.test\\]\",\"Action\":\"build-output\",\"Output\":\"# \\[m/veterror\\]\\\\n\"'\nstdout '\"ImportPath\":\"m/veterror \\[m/veterror.test\\]\",\"Action\":\"build-output\",\"Output\":\"veterror(/|\\\\\\\\)main_test.go:9:9: fmt.Printf format %s reads arg #1, but call has 0 args\\\\n\"'\nstdout '\"ImportPath\":\"m/veterror \\[m/veterror.test\\]\",\"Action\":\"build-fail\"'\nstdout '\"Action\":\"start\",\"Package\":\"m/veterror\"'\nstdout '\"Action\":\"output\",\"Package\":\"m/veterror\",\"Output\":\"FAIL\\\\tm/veterror \\[build failed\\]\\\\n\"'\nstdout '\"Action\":\"fail\",\"Package\":\"m/veterror\",\"Elapsed\":.*,\"FailedBuild\":\"m/veterror \\[m/veterror.test\\]\"'\n! stderr '.'\n```\n\n----------------------------------------\n\nTITLE: Package Location Verification\nDESCRIPTION: Tests go list command's ability to find and report correct paths for standard library packages through symlinks\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_goroot_symlink.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexec $WORK/lib/goroot/bin/go list -f '{{.ImportPath}}: {{.Dir}}' encoding/binary\nstdout '^encoding/binary: '$WORK${/}lib${/}goroot${/}src${/}encoding${/}binary'$'\n\nexec $WORK/lib/goroot/bin/go list -f '{{.ImportPath}}: {{.Dir}}' std\nstdout '^encoding/binary: '$WORK${/}lib${/}goroot${/}src${/}encoding${/}binary'$'\n\nexec $WORK/lib/goroot/bin/go list -f '{{.ImportPath}}: {{.Dir}}' .../binary\nstdout '^encoding/binary: '$WORK${/}lib${/}goroot${/}src${/}encoding${/}binary'$'\n! stderr .\n```\n\n----------------------------------------\n\nTITLE: Defining Glass Function in Go\nDESCRIPTION: Returns a phrase for world travelers by calling GlassV2() from an imported module. The quote relates to eating glass without injury.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709160352-0d003b9c4bfa.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Glass returns a useful phrase for world travelers.\nfunc Glass() string {\n\t// See http://www.oocities.org/nodotus/hbglass.html.\n\treturn quote.GlassV2()\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching and Listing v2 Module Without v1\nDESCRIPTION: Fetches a v2 module that doesn't have a v1 version using go get and lists its version using go list. This tests the resolution of a v2 module path.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_major.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngo get vcs-test.golang.org/git/empty-v2-without-v1.git/v2@v2.0.0\n\ngo list -m vcs-test.golang.org/git/empty-v2-without-v1.git/v2\nstdout '^vcs-test.golang.org/git/empty-v2-without-v1.git/v2 v2.0.0$'\n```\n\n----------------------------------------\n\nTITLE: Main Package Implementation\nDESCRIPTION: Main package that imports and uses level1a and level1b packages to demonstrate import conflicts.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_issue_59905.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"test/main/level1a\"\n\t\"test/main/level1b\"\n)\n\nfunc main() {\n\tlevel1a.Print()\n\tlevel1b.Print()\n}\n```\n\n----------------------------------------\n\nTITLE: Main Package C2\nDESCRIPTION: Second simple Go main package with empty main function for testing multiple package builds.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_multi_main.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Running Go List Command for Module Analysis\nDESCRIPTION: This shell command uses 'go list' to display import and embed information for the current module. It checks for specific imports and embedded files.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_ignore_leading_bom.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo list -f 'Imports: {{.Imports}} EmbedFiles: {{.EmbedFiles}}' .\nstdout '^Imports: \\[embed m/hello\\] EmbedFiles: \\[.*file\\]$'\n```\n\n----------------------------------------\n\nTITLE: Defining Terminal Control Constants (PAR*) in Go for darwin-arm64\nDESCRIPTION: Constants for terminal control attributes related to parity and other terminal settings. These are used with termios interfaces to configure parity checking, odd/even parity, and input processing behaviors.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_86\n\nLANGUAGE: Go\nCODE:\n```\nconst PARENB = 4096\nconst PARENB ideal-int\nconst PARMRK = 8\nconst PARMRK ideal-int\nconst PARODD = 8192\nconst PARODD ideal-int\nconst PENDIN = 536870912\nconst PENDIN ideal-int\n```\n\n----------------------------------------\n\nTITLE: Main Package with Crypto Import in Go\nDESCRIPTION: Defines a simple main package that imports the crypto/sha256 package, used for testing FIPS 140 builds.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/fipssnap.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\nimport _ \"crypto/sha256\"\nfunc main() {\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Memory Aliasing Using Unsafe Pointers in Go\nDESCRIPTION: This function checks if two byte slices have any overlapping memory. It uses unsafe pointers to compare memory addresses, making it efficient but not suitable for AppEngine environments.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_x_internal_v0.1.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc AnyOverlap(x, y []byte) bool {\n\treturn len(x) > 0 && len(y) > 0 &&\n\t\tuintptr(unsafe.Pointer(&x[0])) <= uintptr(unsafe.Pointer(&y[len(y)-1])) &&\n\t\tuintptr(unsafe.Pointer(&y[0])) <= uintptr(unsafe.Pointer(&x[len(x)-1]))\n}\n```\n\n----------------------------------------\n\nTITLE: GCD and LCM Calculation with Small GCD\nDESCRIPTION: This snippet demonstrates the calculation of GCD and LCM for two large numbers with a small GCD (2). The LCM is correspondingly large.\nSOURCE: https://github.com/golang/go/blob/master/src/crypto/internal/fips140/rsa/testdata/gcd_lcm_tests.txt#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nGCD = 2\nA = 14e95a85e59ade9ef39e2f400c65db18702fa5fc485b9bba479a5282b2206129160e54f73ef4917983c17b4c5ebff7be112a886de069706eee29ba902515cb038\nB = ddcfff1d39c90c599f55495bf71c1e7597c6b08b7430707f360c6a6e5137bbc7b403c6d9e2c34f3d2f29d5d32b869346853c2de239cc35381bdfb4a01569211a\nLCM = 90f38564ee72e55d362c04599e7d74f068c75f541b84e97abba2841f1a9f66b06b5c9009f6a4c2e319fced85270588de03ccebddbd9279aaecb13bdc1dbea7f42acaee751cb7da83779b8785cc86f41b94b13b54964208ca287d981634778d1096f20e76ca636c0717fd27e0800c43f599a5eded807421b502eaf9990a8c8ed8\n```\n\n----------------------------------------\n\nTITLE: Platform-specific line ending conversion\nDESCRIPTION: Converts line endings from Unix (LF) to Windows (CRLF) format when running on Windows, then compares the output with an expected log file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/test2-svn-git.txt#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n[GOOS:windows] replace '\\n' '\\r\\n' .svn-log\ncmp stdout .svn-log\n```\n\n----------------------------------------\n\nTITLE: Adding Package in Master Branch\nDESCRIPTION: Switches to the master branch and adds a package in the pkg directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout master\n\nat 2018-02-19T17:23:01-05:00\nmkdir pkg\necho 'package pkg'\ncp stdout pkg/p.go\ngit add pkg/p.go\ngit commit -m 'pkg: add'\n```\n\n----------------------------------------\n\nTITLE: Fuzz Test for Coverage Instrumentation in Go\nDESCRIPTION: A Go fuzz test that expects the fuzzer to find a specific byte sequence 'hello :)'. When this sequence is found, it panics with a specific message to indicate that the coverage instrumentation is working properly. Without proper instrumentation, finding this specific sequence would be extremely unlikely.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_cov.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage cov\n\nimport \"testing\"\n\nfunc FuzzCov(f *testing.F) {\n\tf.Fuzz(func(t *testing.T, b []byte) {\n\t\tif len(b) == 8 &&\n\t\t\tb[0] == 'h' &&\n\t\t\tb[1] == 'e' &&\n\t\t\tb[2] == 'l' &&\n\t\t\tb[3] == 'l' &&\n\t\t\tb[4] == 'o' &&\n\t\t\tb[5] == ' ' &&\n\t\t\tb[6] == ':' &&\n\t\t\tb[7] == ')' {\n\t\t\tpanic(\"cov instrumentation working\")\n\t\t}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Raw Input Format with Link Reference\nDESCRIPTION: Original input format showing a list with a reference-style link definition\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/linklist3.txt#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nCool things:\n\n  - Foo\n  - [Go]\n  - Bar\n\n[Go]: https://go.dev/\n```\n\n----------------------------------------\n\nTITLE: Blank Import for Dependency Inclusion in Mirror Module - Go\nDESCRIPTION: This Go source file in 'mirror' imports 'golang.org/issue/pkg' using the blank identifier, ensuring that the package is included without referencing symbols directly. This supports the test's objective of forming dependency chains and exposing module graph issues. It requires 'golang.org/issue/pkg' to exist and be accessible via the configured module path.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_main.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage mirror\n\nimport _ \"golang.org/issue/pkg\"\n```\n\n----------------------------------------\n\nTITLE: Go Module Configuration with Dependency\nDESCRIPTION: Go module configuration file specifying a dependency on rsc.io/breaker version 1.0.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_incompatible.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule x\nrequire rsc.io/breaker v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Go Package with Cgo Integration\nDESCRIPTION: A Go package that uses cgo to call a C function. It includes a conditional infinite loop that's never executed to test coverage reporting.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_cgo_extra_test.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\n/*\nvoid\nf(void)\n{\n}\n*/\nimport \"C\"\n\nvar b bool\n\nfunc F() {\n\tif b {\n\t\tfor {\n\t\t}\n\t}\n\tC.f()\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Module Version Handling with rsc.io/breaker\nDESCRIPTION: Shell script to test Go's behavior when finding the latest version of a module without downloading version contents. The test uses rsc.io/breaker which has two versions without .mod files and verifies that Go doesn't download .zip files when checking for updates.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_update_sum_readonly.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# rsc.io/breaker has two versions, neither of which has a .mod file.\ngo list -m -versions rsc.io/breaker\nstdout '^rsc.io/breaker v1.0.0 v2.0.0\\+incompatible$'\ngo mod download rsc.io/breaker@v1.0.0\n! grep '^go' $GOPATH/pkg/mod/cache/download/rsc.io/breaker/@v/v1.0.0.mod\ngo mod download rsc.io/breaker@v2.0.0+incompatible\n! grep '^go' $GOPATH/pkg/mod/cache/download/rsc.io/breaker/@v/v2.0.0+incompatible.mod\n\n# Delete downloaded .zip files.\ngo clean -modcache\n\n# Check for updates.\ngo list -m -u rsc.io/breaker\nstdout '^rsc.io/breaker v1.0.0 \\[v2.0.0\\+incompatible\\]$'\n\n# We should not have downloaded zips.\n! exists $GOPATH/pkg/mod/cache/download/rsc.io/breaker/@v/v1.0.0.zip\n! exists $GOPATH/pkg/mod/cache/download/rsc.io/breaker/@v/v2.0.0+incompatible.zip\n```\n\n----------------------------------------\n\nTITLE: Package Definition in direct.go\nDESCRIPTION: Defines a Go package named 'indirect' in the direct.go file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_indirect_v1.0.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage indirect\n```\n\n----------------------------------------\n\nTITLE: Sample Go Application with Missing Dependency\nDESCRIPTION: A simple Go program that imports a package 'example.com/version' which is not initially available in the go.mod file. This program is used to test dependency resolution behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_run_issue52331.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"example.com/version\"\n)\n\nfunc main() {\n\tfmt.Println(version.V)\n}\n```\n\n----------------------------------------\n\nTITLE: Go Package Import Example\nDESCRIPTION: This snippet demonstrates a simple Go file that imports a package from one of the modules defined in the project. It shows how the package is referenced in the code.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_ambiguous_import.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage importer\nimport _ \"example.net/m/p\"\n```\n\n----------------------------------------\n\nTITLE: Implementing the go Command Script\nDESCRIPTION: Shell script for the go command that outputs version information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-mipsx.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Go Fuzzing Test Implementation\nDESCRIPTION: Minimal fuzzing test that accepts an integer input. Used to verify that fuzzing works with cgo-enabled packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_cgo.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nimport \"testing\"\n\nfunc Fuzz(f *testing.F) {\n\tf.Add(0)\n\tf.Fuzz(func(t *testing.T, x int) {})\n}\n```\n\n----------------------------------------\n\nTITLE: Testing go get behavior with vendor directory present\nDESCRIPTION: Verifies that 'go get' updates from the network or module cache, even when a vendor directory is present, potentially causing inconsistencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_auto.txt#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ngo get example.com/version@v1.1.0\n! go list -f {{.Dir}} -tags tools all\nstderr '^go: inconsistent vendoring'\n```\n\n----------------------------------------\n\nTITLE: Module Declaration in .mod File\nDESCRIPTION: Declares the module name 'patch.example.com/indirect' in the .mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_indirect_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule patch.example.com/indirect\n```\n\n----------------------------------------\n\nTITLE: Minimal Go Program\nDESCRIPTION: A minimal Go program with empty main function used for testing build output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_compile_tempfile.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: HTML List Rendering\nDESCRIPTION: Shows the list converted to HTML markup with proper list elements and paragraph tags.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list8.txt#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<p>Loose lists.\n<ul>\n<li><p>A\n<p>B\n<li><p>C\nD\n<li><p>E\n<li><p>F\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Testing Restricted Internal Subpackage Import in Go\nDESCRIPTION: A Go file that attempts to import a restricted internal subpackage from another module, which should fail due to Go's access control rules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_internal.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\nimport _ \"m/x/internal/y\"\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Defining Memory Locking Constants in Go for NetBSD ARM64\nDESCRIPTION: Constants for the mlockall system call. These specify whether to lock current pages in memory, future pages, or both.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_40\n\nLANGUAGE: go\nCODE:\n```\nconst MCL_CURRENT = 1\nconst MCL_FUTURE = 2\n```\n\n----------------------------------------\n\nTITLE: Storing Version Metadata in JSON\nDESCRIPTION: This JSON snippet contains metadata defining a \"Version\" key with the value \"v1.0.0\". It likely corresponds to the version being retracted or discussed in the associated Go module context.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_noupgrade_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.0.0\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Module\nDESCRIPTION: Module definition file specifying the module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_example_goexit.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule examplegoexit\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Package p2 Implementation (p2.go)\nDESCRIPTION: Supporting package p2 implementation with identical function F returning integer 1.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_relative_cmdline.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage p2\n\nfunc F() int { return 1 }\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Module and Running Test\nDESCRIPTION: This snippet shows the commands to initialize a Go module named 'foo' and run the test with verbose output. It expects to see '(devel)' in the stdout.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_buildinfo.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo mod init foo\ngo test -v\nstdout '(devel)'\n```\n\n----------------------------------------\n\nTITLE: Expected Output File: List All Modules and Replacements - Text\nDESCRIPTION: This verification file shows the output of 'go list -m all', including the main module and resolved replacements, used for regression test comparisons. Accurate matches confirm correct display of the final module list and local substitution behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_main.txt#2025-04-22_snippet_9\n\nLANGUAGE: text\nCODE:\n```\ngolang.org/issue/root\ngolang.org/issue/mirror v0.1.0 => ./mirror-v0.1.0\ngolang.org/issue/pkg v0.1.0 => ./pkg-v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Verifying go test bench header output using shell commands\nDESCRIPTION: A shell script that tests if 'go test -bench' correctly prints GOOS, GOARCH, and package information in the output header, and ensures package information is not duplicated.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_benchmark_labels.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Tests that go test -bench prints out goos, goarch, and pkg.\n\n# Check for goos, goarch, and pkg.\ngo test -run ^$ -bench . bench\nstdout '^goos: '$GOOS\nstdout '^goarch: '$GOARCH\nstdout '^pkg: bench'\n\n# Check go test does not print pkg multiple times\n! stdout 'pkg:.*pkg: '\n! stderr 'pkg:.*pkg:'\n```\n\n----------------------------------------\n\nTITLE: Dependency Package with Further Import - dep/dep.go\nDESCRIPTION: Defines a dependency package that imports another dependency, creating a diamond-shaped import graph.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto_multi.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage dep\nimport _ \"test/dep3\"\n```\n\n----------------------------------------\n\nTITLE: Defining AArch64 ELF Relocation Constants - Go Standard Library - Go\nDESCRIPTION: These declarations add or document new ELF (Executable and Linkable Format) relocation constants and types in the debug/elf package for AArch64 architecture. Dependencies include Go's standard library and typically pertain to compilers, linkers, or tools that process ELF files. These values serve as symbolic names for relocation codes and as type methods for string representations and formatting, enhancing debugging, readability, and portability.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nconst R_AARCH64_TLSDESC_ADD = 568\nconst R_AARCH64_TLSDESC_ADD_LO12_NC = 564\nconst R_AARCH64_TLSDESC_ADR_PAGE21 = 562\nconst R_AARCH64_TLSDESC_ADR_PREL21 = 561\nconst R_AARCH64_TLSDESC_CALL = 569\nconst R_AARCH64_TLSDESC_LD64_LO12_NC = 563\nconst R_AARCH64_TLSDESC_LDR = 567\nconst R_AARCH64_TLSDESC_LD_PREL19 = 560\nconst R_AARCH64_TLSDESC_OFF_G0_NC = 566\nconst R_AARCH64_TLSDESC_OFF_G1 = 565\nconst R_AARCH64_TLSGD_ADD_LO12_NC = 514\nconst R_AARCH64_TLSGD_ADR_PAGE21 = 513\nconst R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21 = 541\nconst R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC = 542\nconst R_AARCH64_TLSIE_LD_GOTTPREL_PREL19 = 543\nconst R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC = 540\nconst R_AARCH64_TLSIE_MOVW_GOTTPREL_G1 = 539\nconst R_AARCH64_TLSLE_ADD_TPREL_HI12 = 549\nconst R_AARCH64_TLSLE_ADD_TPREL_LO12 = 550\nconst R_AARCH64_TLSLE_ADD_TPREL_LO12_NC = 551\nconst R_AARCH64_TLSLE_MOVW_TPREL_G0 = 547\nconst R_AARCH64_TLSLE_MOVW_TPREL_G0_NC = 548\nconst R_AARCH64_TLSLE_MOVW_TPREL_G1 = 545\nconst R_AARCH64_TLSLE_MOVW_TPREL_G1_NC = 546\nconst R_AARCH64_TLSLE_MOVW_TPREL_G2 = 544\nconst R_AARCH64_TLS_DTPMOD64 = 1028\nconst R_AARCH64_TLS_DTPREL64 = 1029\nconst R_AARCH64_TLS_TPREL64 = 1030\nconst R_AARCH64_TSTBR14 = 279\n// ... plus type and method declarations\nmethod (R_AARCH64) GoString() string\nmethod (R_AARCH64) String() string\ntype R_AARCH64 int\n```\n\n----------------------------------------\n\nTITLE: Matching Packages in GOPATH Mode with Shell\nDESCRIPTION: Executes 'go list' to match packages under the 'cmd' directory, reflecting their discovery within GOPATH mode. This ensures the packages matched are consistent as per old package resolution strategies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_std.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo list cmd/...\n```\n\n----------------------------------------\n\nTITLE: VarKind Type Definition and Constants\nDESCRIPTION: Defines the VarKind type and its constant values representing different kinds of variables in Go: package variables, local variables, receiver variables, parameter variables, result variables, and field variables\nSOURCE: https://github.com/golang/go/blob/master/api/next/70250.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype VarKind uint8\n\nconst (\n    PackageVar VarKind = 1\n    LocalVar   VarKind = 2\n    RecvVar    VarKind = 3\n    ParamVar   VarKind = 4\n    ResultVar  VarKind = 5\n    FieldVar   VarKind = 6\n)\n```\n\n----------------------------------------\n\nTITLE: Appending Binary and Text Serialization Methods - Go\nDESCRIPTION: These code snippets introduce AppendBinary and AppendText methods to various types in Go's core packages, standardizing efficient serialization into []uint8 slices. Dependencies include correct type imports (e.g., math/big, net/netip, time) and error handling. The methods accept an output byte slice and return the appended result and an error if serialization fails, enhancing interoperability and custom marshaling across big.Int, net addresses, time, and regexp types.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_17\n\nLANGUAGE: Go\nCODE:\n```\npkg math/big, method (*Int) AppendText([]uint8) ([]uint8, error) #62384\npkg math/big, method (*Rat) AppendText([]uint8) ([]uint8, error) #62384\npkg math/rand/v2, method (*ChaCha8) AppendBinary([]uint8) ([]uint8, error) #62384\npkg math/rand/v2, method (*PCG) AppendBinary([]uint8) ([]uint8, error) #62384\npkg net, method (IP) AppendText([]uint8) ([]uint8, error) #62384\npkg net/netip, method (Addr) AppendBinary([]uint8) ([]uint8, error) #62384\npkg net/netip, method (Addr) AppendText([]uint8) ([]uint8, error) #62384\npkg net/netip, method (AddrPort) AppendBinary([]uint8) ([]uint8, error) #62384\npkg net/netip, method (AddrPort) AppendText([]uint8) ([]uint8, error) #62384\npkg net/netip, method (Prefix) AppendBinary([]uint8) ([]uint8, error) #62384\npkg net/netip, method (Prefix) AppendText([]uint8) ([]uint8, error) #62384\npkg net/url, method (*URL) AppendBinary([]uint8) ([]uint8, error) #62384\npkg regexp, method (*Regexp) AppendText([]uint8) ([]uint8, error) #62384\npkg time, method (Time) AppendBinary([]uint8) ([]uint8, error) #62384\npkg time, method (Time) AppendText([]uint8) ([]uint8, error) #62384\n```\n\n----------------------------------------\n\nTITLE: Gofmt Formatting Test\nDESCRIPTION: Shows text formatted according to gofmt rules\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/blank.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nBlank line at start and end.\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Package Function\nDESCRIPTION: Defines a function F() in the xtestonly package that returns the integer 42.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_xtestonly_works.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage xtestonly\n\nfunc F() int { return 42 }\n```\n\n----------------------------------------\n\nTITLE: Testing Go Command Behavior with Workspace Modules\nDESCRIPTION: This snippet includes multiple test cases for the Go command, checking its behavior when trying to access modules not listed in go.work. It tests various scenarios including listing, installing, and running packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_module_not_in_go_work.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n! go list ./...\nstderr 'pattern ./...: directory prefix . does not contain modules listed in go.work or their selected dependencies'\n\n! go list ./a/c\nstderr 'directory a[\\/]c is contained in a module that is not one of the workspace modules listed in go.work. You can add the module to the workspace using:\\n\\tgo work use a'\n\n! go install ./a/c\nstderr 'directory a[\\/]c is contained in a module that is not one of the workspace modules listed in go.work. You can add the module to the workspace using:\\n\\tgo work use a'\n\ncd a/c\n! go run .\nstderr 'current directory is contained in a module that is not one of the workspace modules listed in go.work. You can add the module to the workspace using:\\n\\tgo work use ..'\n\ncd ../..\n! go run .\nstderr 'current directory outside modules listed in go.work or their selected dependencies'\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Environment in Go\nDESCRIPTION: Initializes the test environment by setting the LC_ALL environment variable to 'en' to ensure consistent test results across different locales.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709160352-0d003b9c4bfa.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc init() {\n\tos.Setenv(\"LC_ALL\", \"en\")\n}\n```\n\n----------------------------------------\n\nTITLE: NetBSD ARM64 Interface Message Structures Definition in Go\nDESCRIPTION: Defines message structures for network interface operations including InterfaceMessage, InterfaceAddrMessage, and InterfaceAnnounceMessage. Used for interface configuration through routing sockets.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_100\n\nLANGUAGE: go\nCODE:\n```\ntype InterfaceMessage struct {\n\tHeader IfMsghdr\n\tData []uint8\n}\n\ntype InterfaceAddrMessage struct {\n\tHeader IfaMsghdr\n\tData []uint8\n}\n\ntype InterfaceAnnounceMessage struct {\n\tHeader IfAnnounceMsghdr\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Go File with Import Cycle\nDESCRIPTION: This snippet defines a Go file that creates an import cycle by importing itself.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_setup_error.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nimport \"m/cycle/p\"\n```\n\n----------------------------------------\n\nTITLE: Terminal I/O Control Constants for NetBSD ARM64\nDESCRIPTION: Constants used for terminal I/O control operations in NetBSD on ARM64. These values are used with ioctl calls to control terminal behavior such as flushing buffers, setting modes, and controlling terminal properties.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_154\n\nLANGUAGE: Go\nCODE:\n```\nconst TIOCPKT_FLUSHREAD = 1\nconst TIOCPKT_FLUSHWRITE = 2\nconst TIOCPKT_IOCTL = 64\nconst TIOCPKT_NOSTOP = 16\nconst TIOCPKT_START = 8\nconst TIOCPKT_STOP = 4\nconst TIOCPTMGET = 1076393030\nconst TIOCPTSNAME = 1076393032\nconst TIOCRCVFRAME = 2148037701\nconst TIOCREMOTE = 2147775593\nconst TIOCSBRK = 536900731\nconst TIOCSCTTY = 536900705\nconst TIOCSDTR = 536900729\nconst TIOCSETA = 2150396948\nconst TIOCSETAF = 2150396950\nconst TIOCSETAW = 2150396949\nconst TIOCSETD = 2147775515\nconst TIOCSFLAGS = 2147775580\nconst TIOCSIG = 536900703\nconst TIOCSLINED = 2149610563\nconst TIOCSPGRP = 2147775606\nconst TIOCSQSIZE = 2147775616\nconst TIOCSSIZE = 2148037735\nconst TIOCSTART = 536900718\nconst TIOCSTAT = 2147775589\nconst TIOCSTI = 2147578994\nconst TIOCSTOP = 536900719\nconst TIOCSWINSZ = 2148037735\nconst TIOCUCNTL = 2147775590\nconst TIOCXMTFRAME = 2148037700\nconst TOSTOP = 4194304\n```\n\n----------------------------------------\n\nTITLE: Package B Implementation\nDESCRIPTION: Basic implementation of package b with test file importing package c.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_version.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage b\n```\n\nLANGUAGE: go\nCODE:\n```\npackage b_test\n\nimport _ \"example.net/c\"\n```\n\n----------------------------------------\n\nTITLE: Defining Inet6Pktinfo Struct in Go for Darwin ARM64 CGO\nDESCRIPTION: Defines the Inet6Pktinfo struct used for IPv6 packet information. It includes fields for the IPv6 address and interface index.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_201\n\nLANGUAGE: Go\nCODE:\n```\ntype Inet6Pktinfo struct {\n    Addr [16]uint8\n    Ifindex uint32\n}\n```\n\n----------------------------------------\n\nTITLE: Network Interface Constants for NetBSD ARM64\nDESCRIPTION: Defines constants for network interface types and flags used in NetBSD ARM64 syscalls. Includes definitions for interface capabilities, states and naming conventions.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_23\n\nLANGUAGE: Go\nCODE:\n```\nconst (\n    IFNAMSIZ = 16\n    IFF_ALLMULTI = 512\n    IFF_CANTCHANGE = 36690\n    IFF_DEBUG = 4\n    IFF_LINK0 = 4096\n    IFF_LOOPBACK = 8\n    IFF_MULTICAST = 32768\n    IFF_NOARP = 128\n    IFF_PROMISC = 256\n    IFF_RUNNING = 64\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Path (go.mod)\nDESCRIPTION: This snippet shows the content of the `go.mod` file for the `golang.org/toolchain` module. It defines the module path, which is the standard way Go projects declare their module identity.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.android-amd64.txt#2025-04-22_snippet_2\n\nLANGUAGE: gomod\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Module Definition in .mod File\nDESCRIPTION: Defines the module name for the Go toolchain test package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-arm.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Socket Control Message Functions in syscall Package for NetBSD ARM64\nDESCRIPTION: These functions provide handling of socket control messages (ancillary data) for advanced socket operations like passing file descriptors between processes.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_83\n\nLANGUAGE: Go\nCODE:\n```\nfunc ParseSocketControlMessage([]uint8) ([]SocketControlMessage, error)\nfunc ParseUnixRights(*SocketControlMessage) ([]int, error)\nfunc UnixRights(...int) []uint8\n```\n\n----------------------------------------\n\nTITLE: Go Package Import\nDESCRIPTION: Go source file importing a submodule from the incompatible dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_prefer_incompatible.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage use\n\nimport _ \"example.com/incompatiblewithsub/sub\"\n```\n\n----------------------------------------\n\nTITLE: Defining Go Toolchain Module Import Path\nDESCRIPTION: Specifies the import path for a test Go toolchain module targeted for iOS ARM64 platform with version 1.999.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.ios-arm64.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngolang.org/toolchain@v0.0.1-go1.999testmod.ios-arm64\n```\n\n----------------------------------------\n\nTITLE: Package A with Invalid Internal Import\nDESCRIPTION: Package a demonstrating an illegal import of an internal package in both source and test files.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_internal.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// A package with bad imports in both src and test\npackage a\n\nimport (\n  _ \"a/x/internal/y\"\n)\n```\n\n----------------------------------------\n\nTITLE: Go Get with Unprintable Rationale\nDESCRIPTION: This snippet tests the behavior of 'go get' when a module version is retracted with a rationale containing unprintable characters. It verifies that the output indicates that the message was omitted due to the presence of these characters.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_rationale.txt#_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ngo get example.com/retract/rationale@v1.0.0-unprintable\nstderr '^go: warning: example.com/retract/rationale@v1.0.0-unprintable: retracted by module author: \\(message omitted: contains non-printable characters\\)'\n```\n\n----------------------------------------\n\nTITLE: Running Go Test with Vet Disabled for Invalid Examples\nDESCRIPTION: Shell command to run a Go test with the vet tool disabled. This is necessary because the 'tests' analyzer would object to the surplus parameter in the example function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_bad_example.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo test -vet=off x_test.go\n```\n\n----------------------------------------\n\nTITLE: Module Definition for '@at' Special Character Test\nDESCRIPTION: Go module definition for a module with '@' in its directory path, used to test special character handling in file paths.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_fs_patterns.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nmodule at\n\ngo 1.14\n```\n\n----------------------------------------\n\nTITLE: Testing Go List Failure for Test Package with Missing Requirement (Shell)\nDESCRIPTION: Attempts to list the `m/testuse` package including its tests (`go list -mod=mod -test m/testuse`). The test file for this package imports `example.com/badchain/c`. Similar to the previous test, this command is expected to fail (`!`) due to the path mismatch error when resolving the test dependency `example.com/badchain/c@v1.1.0`. The script compares the standard error output with `list-missing-test-expected`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badchain.txt#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n! go list -mod=mod -test m/testuse\ncmp stderr list-missing-test-expected\n```\n\n----------------------------------------\n\nTITLE: Testing Commit Hash Resolution to +incompatible Version\nDESCRIPTION: Tests that requesting a specific commit hash that corresponds to a +incompatible version still resolves to that version, even if it's no longer listed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_prefer_compatible.txt#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngo list -m github.com/russross/blackfriday@cadec560ec52\nstdout '^github.com/russross/blackfriday v2\\.0\\.0\\+incompatible$'\n```\n\n----------------------------------------\n\nTITLE: Creating Mock Go Executable Script for Testing\nDESCRIPTION: A shell script that simulates the 'go' command by echoing a test version identifier. Used for testing the toolchain module functionality.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-ppc64le.txt#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n#!/bin/sh\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Module B Definition\nDESCRIPTION: Go module configuration for example.com/b requiring rsc.io/quote v1.0.0 with dependency checksums\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_sum.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/b\ngo 1.18\nrequire rsc.io/quote v1.0.0\n```\n\nLANGUAGE: go\nCODE:\n```\npackage b\nimport _ \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: Getting Excluded Module Version\nDESCRIPTION: Attempts to get an excluded module version using 'go get' command, which should fail with an error message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query_exclude.txt#2025-04-22_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ncp go.exclude.mod go.exclude.mod.orig\n! go get -modfile=go.exclude.mod rsc.io/quote@v1.5.0\nstderr '^go: rsc.io/quote@v1.5.0: excluded by go.mod$'\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Go Package\nDESCRIPTION: This basic Go code snippet declares a package named 'p'. It sets the foundation for implementing package functionalities in Go. As it stands, the package is empty and requires further development to provide any functionality. The primary input is the package's name, while the output depends on subsequent code added within the package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_prerelease_v1.9.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage p\n```\n\n----------------------------------------\n\nTITLE: Testing 'go list .' Failure in GOROOT/src (Module Mode) (Shell)\nDESCRIPTION: Runs `go list .` while in $GOROOT/src with Go module mode enabled. It asserts that the command fails (`! go list .`) and produces a specific error message on stderr indicating that `GOROOT/src` is not considered an importable package in this context. This directly tests the behavior described in issue golang.org/issue/36587.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_gofile_in_goroot.txt#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n! go list .\nstderr '^GOROOT/src is not an importable package$'\n```\n\n----------------------------------------\n\nTITLE: Sample Go Package Files\nDESCRIPTION: Empty package declarations for testing PGO build behavior\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_pgo.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage lib\n```\n\nLANGUAGE: go\nCODE:\n```\npackage lib2\n```\n\n----------------------------------------\n\nTITLE: Importing Dependency in Module 'b' Version 1\nDESCRIPTION: This Go file for module 'b' version 1 imports dependency 'e' as a blank import.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_pseudo_artifact.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\npackage b\n\nimport _ \"example.net/e\"\n```\n\n----------------------------------------\n\nTITLE: System Call Function Signatures for Darwin ARM64\nDESCRIPTION: Function declarations for Darwin ARM64 system calls in Go, including file operations, process management, socket operations, and system configuration calls.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_120\n\nLANGUAGE: Go\nCODE:\n```\nfunc Fchflags(int, int) error\nfunc Fchmod(int, uint32) error\nfunc Fchown(int, int, int) error\nfunc FcntlFlock(uintptr, int, *Flock_t) error\nfunc Flock(int, int) error\nfunc FlushBpf(int) error\nfunc ForkExec(string, []string, *ProcAttr) (int, error)\nfunc Fpathconf(int, int) (int, error)\n```\n\n----------------------------------------\n\nTITLE: Go Module Declaration\nDESCRIPTION: Module declaration file specifying the module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_perm.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com\ngo 1.15\n```\n\n----------------------------------------\n\nTITLE: Module Definition for Test Package\nDESCRIPTION: The go.mod file defining the module gobuild.example.com/x/y/z used in the tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gobuild_import.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule gobuild.example.com/x/y/z\n```\n\n----------------------------------------\n\nTITLE: Building a Simple Hello World Application\nDESCRIPTION: This Go code snippet initializes a main function that outputs 'hello v1.1' to the console. The 'fmt' package is imported as a dependency for printing strings to the standard output. This snippet is intended for users learning basics of Go, with no additional parameters or complex logic.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_tools_v1.1.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(\"hello v1.1\")\n}\n```\n\n----------------------------------------\n\nTITLE: Doc Link Output in Markdown\nDESCRIPTION: Shows the final markdown format of the documentation link after processing, with the full URL to pkg.go.dev.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/doclink5.txt#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[encoding/json.Marshal](https://pkg.go.dev/encoding/json#Marshal) is a doc link.\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Method Constant in Go\nDESCRIPTION: The 'd.go' file defines a package 'd' and uses the 'net/http' package to set a constant 'd' to the value of 'GET'. It provides a function 'Get' that returns this constant, demonstrating a simple exported function returning a constant value.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/load_test_pkg_err.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n-- d.go --\npackage d\n\nimport \"net/http\"\n\nconst d = http.MethodGet\nfunc Get() string { return d; }\n```\n\n----------------------------------------\n\nTITLE: Time-related Structs for darwin-arm64\nDESCRIPTION: Time-related structure definitions used for system calls on darwin-arm64 platforms, providing high-resolution time representations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_137\n\nLANGUAGE: go\nCODE:\n```\ntype Timespec struct {\n\tSec int64\n\tNsec int64\n}\n\ntype Timeval struct {\n\tPad_cgo_0 [4]uint8\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Go and Assembly Source Files for Function Stubs - Shell\nDESCRIPTION: This shell script creates a Go source file (a.go) and a Go assembly file (a.s), each containing a list of functions (t0 through t254) and corresponding function calls. The script includes a helper to prepend a license header, then iteratively generates function signatures and no-op bodies in Go and assembly syntax. Requires a POSIX-compliant shell, standard Unix utilities, and Go toolchain. Outputs are self-contained, consistently structured, and do not perform meaningful computation but lay out the function scaffolding.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/testdata/script/dwarf5_gen_assembly_and_go.txt#2025-04-22_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n#!/bin/sh\\n# Generator script (for posterity, in case we need to\\n# recreate or modify).\\nN=255\\nfunction cophdr() {\\n    local F=$1\\n    cat > $F <<EOF\\n// Copyright 2025 The Go Authors. All rights reserved.\\n// Use of this source code is governed by a BSD-style\\n// license that can be found in the LICENSE file.\\nEOF\\n}\\n#\\n# Go source\\n#\\ncophdr a.go\\necho \"package main\" >> a.go\\necho \"func main() { \" >> a.go\\nI=0\\nwhile [ $I -lt $N ]; do\\n    echo \"  t${I}()\" >> a.go\\n    I=`expr $I + 1`\\ndone\\necho \"}\" >> a.go\\ngo\\necho  >> a.go\\nI=0\\nwhile [ $I -lt $N ]; do\\n    echo \"func t${I}() \" >> a.go\\n    I=`expr $I + 1`\\ndone\\n#SALT=`date '+%Y%M%d%h%m%s'`\\n#echo \"var foofoo = \\\"${SALT}\\\"\" >> a.go\\ngofmt -w a.go\\n#\\n# Assembly sources\\n#\\ncophdr a.s\\nI=0\\nwhile [ $I -lt $N ]; do\\n    echo \"TEXT ·t${I}(SB),0,\\$0\" >> a.s\\n    echo \"\\tRET\" >> a.s\\n    echo >> a.s\\n    I=`expr $I + 1`\\ndone\n```\n\n----------------------------------------\n\nTITLE: Enabling Go Modules Environment\nDESCRIPTION: Sets the environment variable `GO111MODULE` to `on`, ensuring that the subsequent `go` commands operate in module-aware mode. This is a prerequisite for the module-related tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_internal.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Module and Verifying Tidy State\nDESCRIPTION: This snippet copies the original go.mod file, runs go mod tidy, and compares the result with the original to ensure no changes were made.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_indirect_pruned.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncp go.mod go.mod.orig\ngo mod tidy\ncmp go.mod.orig go.mod\n```\n\n----------------------------------------\n\nTITLE: Checking Git Commit History\nDESCRIPTION: Displays the Git commit log in a one-line format with decorations and compares it to an expected output file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/insecurerepo.txt#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit log --oneline --decorate=short\ncmp stdout .git-log\n```\n\n----------------------------------------\n\nTITLE: Compiling Fake Go Toolchain in Go\nDESCRIPTION: This snippet defines a simple Go program that simulates a Go toolchain executable. It prints a message indicating it's running from PATH and exits with an error code.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_path.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strings\"\n)\n\nfunc main() {\n\texe, _ := os.Executable()\n\tname := filepath.Base(exe)\n\tname = strings.TrimSuffix(name, \".exe\")\n\tfmt.Fprintf(os.Stderr, \"running %s from PATH\\n\", name)\n\tos.Exit(1) // fail in case we are running this accidentally (like in \"go mod edit\")\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Git Environment Variables for Repository Creation\nDESCRIPTION: Configures Git environment variables for author and committer information before repository initialization.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/modlegacy1-old.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GIT_AUTHOR_NAME='Russ Cox'\nenv GIT_AUTHOR_EMAIL='rsc@golang.org'\nenv GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME\nenv GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL\n```\n\n----------------------------------------\n\nTITLE: Enabling Go Modules via Environment Variable\nDESCRIPTION: Sets the GO111MODULE environment variable to 'on'. This explicitly enables Go module support for the subsequent commands in the script, ensuring that the go command operates in module-aware mode.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_pseudo.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n```\n\n----------------------------------------\n\nTITLE: Platform-specific SVN Checkout Commands\nDESCRIPTION: Performs SVN checkout with platform-specific file paths for Windows and non-Windows systems.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/hello.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[GOOS:windows] svn checkout file:///$ROOT .\n[!GOOS:windows] svn checkout file://$ROOT .\n```\n\n----------------------------------------\n\nTITLE: Tool Dependency Main Package\nDESCRIPTION: Go source file for the 'main' package in the tool dependency, which imports 'example.com/dep' as a blank import. This is used to test the 'tool=' pattern in '-gcflags'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_perpkgflag.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport _ \"example.com/dep\"\n```\n\n----------------------------------------\n\nTITLE: Running Fuzz Tests with Error in Go\nDESCRIPTION: This snippet defines a fuzz test that intentionally triggers an error. It demonstrates how to handle and report errors in fuzz testing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_chatty.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage chatty_error_fuzz\n\nimport \"testing\"\n\nfunc Fuzz(f *testing.F) {\n    f.Error(\"error in target\")\n}\n```\n\n----------------------------------------\n\nTITLE: External test implementation for main package\nDESCRIPTION: External test for the main package that imports the main package and provides tests in a separate package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage main_test\nimport \"testing\"\nfunc TestExternal(*testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Redefining Nested Go Module with Module Directive - Go\nDESCRIPTION: This snippet defines another Go module by specifying the same module path 'example.com/nest' in a nested 'go.mod' file. This is used to simulate or test the behavior of nested modules without declaring dependencies between them. It is essential for developers testing Go's module resolution logic in complex directory structures. Like the root module, it introduces no dependencies and does not restrain or reflect any explicit relationship with its parent.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_nest_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/nest\n```\n\n----------------------------------------\n\nTITLE: Input Format List Marker Tests\nDESCRIPTION: Raw input format showing various edge cases for list marker parsing, including isolated hyphens and numbered markers.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list7.txt#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n -\n\n❦\n\n - $\n\n❦\n\n - $\n\n❦\n\n  $\n   $\n\n❦\n\n 1! List.\n\n❦\n```\n\n----------------------------------------\n\nTITLE: Expected Go Workspace Configuration\nDESCRIPTION: Expected go.work file after cleanup of deleted module references\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_deleted.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\n\nuse ./sub/dir\n```\n\n----------------------------------------\n\nTITLE: Simple Go Package Implementation\nDESCRIPTION: A basic Go package implementation with a single exported function F() that doesn't take any parameters and doesn't return any values.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo124_v0.0.1.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nfunc F() {}\n```\n\n----------------------------------------\n\nTITLE: Configuration JSON for Text Width\nDESCRIPTION: JSON configuration object specifying text width parameter of 30 characters\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/text3.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"TextWidth\": 30}\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Function for Test Package\nDESCRIPTION: Implements a minimal main function for the test package 'a'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_fossil.txt#2025-04-22_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Vendored Strings Package\nDESCRIPTION: Custom vendored strings package providing a message variable.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_import.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage strings\n\nvar Msg = \"hello, world\"\n```\n\n----------------------------------------\n\nTITLE: Package B Implementation with Init Function\nDESCRIPTION: Package 'b' with an init function and BFunc returning a constant value\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverpkg_with_init.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage b\n\nfunc init() {\n\tprintln(\"package 'b' init: release the kraken\")\n}\n\nfunc BFunc() int {\n\treturn -42\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode version and new RangeTables in unicode package\nDESCRIPTION: Declaration of the Unicode version constant and new RangeTable variables in the unicode package. These represent Unicode character ranges for various scripts added in Unicode 11.0.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_178\n\nLANGUAGE: go\nCODE:\n```\nconst Version = \"11.0.0\"\nvar Dogra *RangeTable\nvar Gunjala_Gondi *RangeTable\nvar Hanifi_Rohingya *RangeTable\nvar Makasar *RangeTable\nvar Medefaidrin *RangeTable\nvar Old_Sogdian *RangeTable\nvar Sogdian *RangeTable\n```\n\n----------------------------------------\n\nTITLE: Gofmt Formatted Text Example\nDESCRIPTION: The same text after being processed by gofmt, showing standardized indentation and spacing\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list9.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nText.\n\n1. Not a list\n2. because it is\n3. unindented.\n\n 4. This one\n    is a list\n    because of the indented text.\n 5. More wrapped\n    items.\n 6. And unwrapped.\n\n7. The blank line stops the heuristic.\n```\n\n----------------------------------------\n\nTITLE: Defining Module 'c' with Dependency in Go\nDESCRIPTION: This go.mod file defines module 'example.net/c' with a dependency on 'example.net/a' version 0.2.0. It's used to test how 'go get' handles this dependency in relation to the cyclic dependencies between modules 'a' and 'b'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue60490.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/c\n\ngo 1.19\n\nrequire example.net/a v0.2.0\n```\n\n----------------------------------------\n\nTITLE: Package Declaration in dot.go\nDESCRIPTION: Go source file establishing the dot package\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_dotname_v1.0.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage dot\n```\n\n----------------------------------------\n\nTITLE: Toolchain Module Definition\nDESCRIPTION: Module definition files (.mod and go.mod) that define the toolchain module path without a version. These files establish the module identity for the toolchain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.18.7.linux-amd64.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ngolang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Module with External Dependency\nDESCRIPTION: A Go module configuration file that defines a module named 'x' with a dependency on rsc.io/quote v1.5.2. This is used for testing module documentation behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_doc.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule x\nrequire rsc.io/quote v1.5.2\n```\n\n----------------------------------------\n\nTITLE: Go Command Shell Script\nDESCRIPTION: Shell script that implements a test 'go' command, which outputs a version identifier message when executed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-arm.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Minimal Go Program for Testing\nDESCRIPTION: This Go program simply exits with a status code of 1. It's likely used as a placeholder or for testing purposes in the context of the 'go bug' command test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/bug.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n    \"os\"\n)\n\nfunc main() {\n    os.Exit(1)\n}\n```\n\n----------------------------------------\n\nTITLE: Darwin ARM64 System Call Constants\nDESCRIPTION: System call numbers for basic operations like file access, process management, and networking on Darwin ARM64.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_99\n\nLANGUAGE: Go\nCODE:\n```\nconst SYS_ACCEPT = 30\nconst SYS_ACCESS = 33\nconst SYS_CHDIR = 12\nconst SYS_CHMOD = 15\nconst SYS_CHOWN = 16\nconst SYS_CLOSE = 6\nconst SYS_DUP = 41\nconst SYS_EXIT = 1\nconst SYS_FORK = 2\nconst SYS_FSTAT = 189\n```\n\n----------------------------------------\n\nTITLE: Defining Test Go Source File in GOPATH/src (Go)\nDESCRIPTION: Defines the content of `$GOPATH/src/foo.go`. This is a minimal Go file (`package foo`) placed in the test's GOPATH source directory. It's used for verifying `go list` behavior within a standard GOPATH setup.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_gofile_in_goroot.txt#2025-04-22_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n-- $GOPATH/src/foo.go --\n```\n\nLANGUAGE: go\nCODE:\n```\npackage foo\n```\n\n----------------------------------------\n\nTITLE: HTML Rendered Output\nDESCRIPTION: Shows the final HTML rendered output with proper list formatting and anchor tags\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/linklist4.txt#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<p>Cool things:\n<ul>\n<li><p>Foo\n<li><p><a href=\"https://go.dev/\">Go</a> is great\n<li><p>Bar\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Analyzing Diff Output for File Content Removal\nDESCRIPTION: This diff output shows the complete removal of content from a file. The old version contained three lines (a, b, c), while the new version is empty. The diff indicates that all three lines were deleted.\nSOURCE: https://github.com/golang/go/blob/master/src/internal/diff/testdata/allold.txt#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\ndiff old new\n--- old\n+++ new\n@@ -1,3 +0,0 @@\n-a\n-b\n-c\n```\n\n----------------------------------------\n\nTITLE: Simple Go Program (No CGO) for Testing\nDESCRIPTION: A basic Go program (`main_nocgo.go`) in package `main`. It includes the build constraint `//go:build !cgo` to ensure it's compiled only when CGO is disabled. The `main` function prints \"ok\" to standard output, providing equivalent functionality to `main.go` for non-CGO test scenarios.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cwd_newline.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n-- $WORK/main_nocgo.go --\n//go:build !cgo\n\npackage main\n\nfunc main() {\n\t/* nothing here */\n\tprintln(\"ok\")\n}\n```\n\n----------------------------------------\n\nTITLE: NetBSD ARM64 Kernel Event Structure Definition in Go\nDESCRIPTION: Defines the Kevent_t structure used for kernel event notifications. Contains fields for event identifier, filter type, flags, and data.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_98\n\nLANGUAGE: go\nCODE:\n```\ntype Kevent_t struct {\n\tIdent uint64\n\tFilter uint32\n\tFlags uint32\n\tFflags uint32\n\tPad_cgo_0 [4]uint8\n\tData int64\n\tUdata int64\n}\n```\n\n----------------------------------------\n\nTITLE: Git Tree Object References\nDESCRIPTION: File containing Git tree object hashes for verification purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_git_missing_tree.txt#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nac724c6e5e3f86815e057ff58a639cab613abf28\n66400c89b45cc96da36d232844dbf9ea5daa6bcf\n```\n\n----------------------------------------\n\nTITLE: Defining Go Toolchain Module Name\nDESCRIPTION: Specifies the module name for the Go toolchain test package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-mips64.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: FreeBSD ARM CGO Syscall Definitions\nDESCRIPTION: System call definitions and structures specific to FreeBSD on ARM architecture with CGO support. Includes terminal I/O controls, file operations, and socket operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_16\n\nLANGUAGE: Go\nCODE:\n```\nconst TIOCTIMESTAMP = 1074820185\n\nfunc Accept4(int, int) (int, Sockaddr, error)\nfunc Fchflags(int, int) error\nfunc FcntlFlock(uintptr, int, *Flock_t) error\nfunc SendmsgN(int, []uint8, []uint8, Sockaddr, int) (int, error)\n\ntype Termios struct {\n    Iflag uint32\n    Oflag uint32\n    Cflag uint32\n    Lflag uint32\n    Cc [20]uint8\n    Ispeed uint32\n    Ospeed uint32\n}\n```\n\n----------------------------------------\n\nTITLE: Simulating 'gofmt' Tool Output with Shell Echo - Shell\nDESCRIPTION: Provides a placeholder for the 'gofmt' binary using a simple shell echo command. Intended for scenarios where the actual formatting tool is not used, such as pipeline or installation testing. Requires only a shell interpreter; always outputs 'i am unused', ignores all arguments, and has no formatting functionality.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.darwin-amd64.txt#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: Message Header Structures in syscall Package for NetBSD ARM64\nDESCRIPTION: These structures define the message header data types used for socket operations, particularly for control messages and vectored I/O operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_87\n\nLANGUAGE: Go\nCODE:\n```\ntype Cmsghdr struct {\n    Len uint32\n    Level int32\n    Type int32\n}\n\nfunc (*Cmsghdr) SetLen(int)\nfunc (*Iovec) SetLen(int)\nfunc (*Msghdr) SetControllen(int)\n```\n\n----------------------------------------\n\nTITLE: Defining IP Protocol Constants in Go for NetBSD ARM64\nDESCRIPTION: This snippet defines constants for IP protocol settings (IP_*) used in the syscall package for NetBSD ARM64 with CGO. These constants are used to configure IP-level socket options and behavior.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_31\n\nLANGUAGE: Go\nCODE:\n```\nconst IP_ADD_MEMBERSHIP = 12\nconst IP_DEFAULT_MULTICAST_LOOP = 1\nconst IP_DEFAULT_MULTICAST_LOOP ideal-int\nconst IP_DEFAULT_MULTICAST_TTL = 1\nconst IP_DEFAULT_MULTICAST_TTL ideal-int\nconst IP_DF = 16384\nconst IP_DF ideal-int\n// ... more IP_* constants\n```\n\n----------------------------------------\n\nTITLE: Setting Git Environment Variables for Author and Committer\nDESCRIPTION: Sets Git environment variables for author and committer name and email.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/v3pkg.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GIT_AUTHOR_NAME='Bryan C. Mills'\nenv GIT_AUTHOR_EMAIL='bcmills@google.com'\nenv GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME\nenv GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL\n```\n\n----------------------------------------\n\nTITLE: Defining Directory Entry Type Constants in Go for Darwin ARM64 CGO\nDESCRIPTION: This snippet defines constants for directory entry types used in filesystem operations for the syscall package on Darwin ARM64 with CGO. These constants are used to identify the type of filesystem entries.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_142\n\nLANGUAGE: Go\nCODE:\n```\nconst DT_BLK = 6\nconst DT_CHR = 2\nconst DT_DIR = 4\nconst DT_FIFO = 1\nconst DT_LNK = 10\nconst DT_REG = 8\nconst DT_SOCK = 12\nconst DT_UNKNOWN = 0\nconst DT_WHT = 14\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Path and Version in .mod File\nDESCRIPTION: This Go module file (`.mod`) declares the module path as 'example.com/deprecated/b' and specifies the required Go version as '1.17'. The `.mod` extension suggests it might be a non-standard or tool-specific module definition file, distinct from the standard `go.mod`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_deprecated_b_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/deprecated/b\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: Testing Custom Internal Package Access\nDESCRIPTION: Tests importing an internal package from a relative path\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_internal.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nimport _ \"./x/y/z/internal/w\"\n```\n\n----------------------------------------\n\nTITLE: Defining Message Flags Constants in Go for Darwin ARM64\nDESCRIPTION: This snippet defines constants for message flags used in network programming on Darwin ARM64. These flags are used with send and receive operations to control message behavior.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_161\n\nLANGUAGE: Go\nCODE:\n```\nconst MSG_EOR = 8\nconst MSG_FLUSH = 1024\nconst MSG_HAVEMORE = 8192\nconst MSG_HOLD = 2048\nconst MSG_NEEDSA = 65536\nconst MSG_OOB = 1\nconst MSG_PEEK = 2\nconst MSG_RCVMORE = 16384\nconst MSG_SEND = 4096\nconst MSG_TRUNC = 16\nconst MSG_WAITALL = 64\nconst MSG_WAITSTREAM = 512\n```\n\n----------------------------------------\n\nTITLE: Go Module Download with Commit Hash (GOPROXY=direct)\nDESCRIPTION: Downloads a module using a commit hash when GOPROXY is set to 'direct'. This test checks if the go command can re-resolve the commit to the highest appropriate pseudo-version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_pseudo_cache.txt#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nenv GOPROXY=direct\ngo mod download -json golang.org/x/text@a1b916ed6726\nstdout '\"Version\": \"v0.3.1-0.20171215141712-a1b916ed6726\",'\n```\n\n----------------------------------------\n\nTITLE: Invalid Go File\nDESCRIPTION: Go file without a package declaration.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_overlay.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// no package statement\n```\n\n----------------------------------------\n\nTITLE: Deprecated syscall Functions for FreeBSD\nDESCRIPTION: List of deprecated syscall functions for FreeBSD, including BPF operations and routing-related functions. These are marked for removal in future Go versions.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_34\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-386-cgo), func SetBpfHeadercmpl //deprecated\npkg syscall (freebsd-386-cgo), func SetBpfImmediate //deprecated\npkg syscall (freebsd-386-cgo), func SetBpfInterface //deprecated\npkg syscall (freebsd-386-cgo), func SetBpfPromisc //deprecated\npkg syscall (freebsd-386-cgo), func SetBpfTimeout //deprecated\npkg syscall (freebsd-386-cgo), func StringSlicePtr //deprecated\n```\n\n----------------------------------------\n\nTITLE: Importing Package 'c' for Side Effects in Package 'b' (Go)\nDESCRIPTION: This Go source file defines package `b`. It imports the package `example.com/badchain/c` using a blank identifier (`_`), which executes the imported package's `init` functions but doesn't make its exported identifiers directly accessible in package `b`. This is used when an import is needed solely for its initialization side effects.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_badchain_b_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage b\n\nimport _ \"example.com/badchain/c\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Module with Replace Directives\nDESCRIPTION: This go.mod file defines the module and sets up replace directives for different versions of the dependent modules. It also includes an initial require statement for one of the modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_convergence_loop.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/m\n\ngo 1.16\n\nreplace (\n\texample.net/w v0.1.0 => ./w1\n\texample.net/w v0.2.0-pre => ./w2-pre\n\texample.net/x v0.1.0 => ./x1\n\texample.net/x v0.2.0-pre => ./x2-pre\n\texample.net/y v0.1.0 => ./y1\n\texample.net/y v0.2.0-pre => ./y2-pre\n\texample.net/z v0.1.0 => ./z1\n\texample.net/z v0.2.0-pre => ./z2-pre\n)\n\nrequire example.net/w v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Testing 'go list ./...' in GOROOT/src (Module Mode) (Shell)\nDESCRIPTION: While in $GOROOT/src and with Go module mode enabled, this runs `go list ./...`. It verifies that, similar to `go list ...`, only standard library packages like `fmt` are listed, and local files within GOROOT/src are not treated as an importable package relative to the current directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_gofile_in_goroot.txt#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngo list ./...\nstdout -count=1 '^.+$'\nstdout '^fmt$'\n! stdout foo\n```\n\n----------------------------------------\n\nTITLE: Downloading Go Module Dependencies (Shell)\nDESCRIPTION: Prepares the test environment by copying the original `go.mod` file and downloading all specified module versions, including potentially problematic ones (`example.com/badchain/...`). This is done to avoid 'finding' messages in stderr during the actual test commands, ensuring cleaner error output comparison.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badchain.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Download everything to avoid \"finding\" messages in stderr later.\ncp go.mod.orig go.mod\ngo mod download\ngo mod download example.com@v1.0.0\ngo mod download example.com/badchain/a@v1.1.0\ngo mod download example.com/badchain/b@v1.1.0\ngo mod download example.com/badchain/c@v1.1.0\n```\n\n----------------------------------------\n\nTITLE: Conditionally Built Package Implementation\nDESCRIPTION: A Go file for package 'x1' with the build constraint 'notmytag'. This implementation will only be included when building with the 'notmytag' tag specified.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vendormod.txt#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n// +build notmytag\n\npackage x1\n```\n\n----------------------------------------\n\nTITLE: Defining a Go Module (gomod)\nDESCRIPTION: This snippet declares a Go module named 'example.com/notags'. This is the content of a go.mod file, serving as the root definition for the module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_notags_v0.0.0-20190507143103-cc8cbe209b64.txt#2025-04-22_snippet_0\n\nLANGUAGE: gomod\nCODE:\n```\n-- .mod --\nmodule example.com/notags\n```\n\n----------------------------------------\n\nTITLE: Bar Package Go Implementation\nDESCRIPTION: Go package bar with function declarations and implementation of Bar2.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/trampoline_reuse_test.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage bar\n\nfunc Bar()\n\nfunc Bar2() {\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Go Command Script in Shell\nDESCRIPTION: A simple shell script that implements the 'go' command for testing purposes. The script just outputs a message indicating it's the test version of the Go tool.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.netbsd-amd64.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Go Package with Assembly Function Declaration\nDESCRIPTION: A simple Go package that declares an assembly function 'f' without implementation in Go and a regular Go function 'g' that prints a message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_asm.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nfunc f()\n\nfunc g() {\n\tprintln(\"g\")\n}\n```\n\n----------------------------------------\n\nTITLE: Net Package Build Version\nDESCRIPTION: Main function implementation for the net build tag version that imports the net package and calls the module handle check.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/ws2_32.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n//go:build net\npackage main\n\nimport _ \"net\"\n\nfunc main() {\n    hasModuleHandle()\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Go Module Format\nDESCRIPTION: Sets the MODFMT environment variable to format module information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_added.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv MODFMT='{{with .Module}}{{.Path}} {{.Version}}{{end}}'\n```\n\n----------------------------------------\n\nTITLE: Module A Configuration\nDESCRIPTION: Go module configuration for package a including its dependency on inner package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_issue60313.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/a\n\ngo 1.21\n\nrequire example.net/outer/inner v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Package Declaration\nDESCRIPTION: Declares a Go package named 'c'\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_badchain_c_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage c\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Module errcycle in Go Language\nDESCRIPTION: This Go module declaration specifies the usage of module 'errcycle' with Go version 1.16 as a setup for testing import cycle errors.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_err_cycle.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule errcycle\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Implementing Language Tag Handling in Go\nDESCRIPTION: This snippet defines the core functionality for handling language tags, including creation, string conversion, and matching. It implements a Tag type, a Matcher interface, and a basic matcher struct.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_x_text_v0.0.0-20170915032832-14c0d48ead0c.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// Copyright 2018 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// This is a tiny version of golang.org/x/text.\n\npackage language\n\nimport \"strings\"\n\ntype Tag string\n\nfunc Make(s string) Tag { return Tag(s) }\n\nfunc (t Tag) String() string { return string(t) }\n\nfunc NewMatcher(tags []Tag) Matcher { return &matcher{tags} }\n\ntype Matcher interface {\n\tMatch(...Tag) (Tag, int, int)\n}\n\ntype matcher struct {\n\ttags []Tag\n}\n\nfunc (m *matcher) Match(prefs ...Tag) (Tag, int, int) {\n\tfor _, pref := range prefs {\n\t\tfor _, tag := range m.tags {\n\t\t\tif tag == pref || strings.HasPrefix(string(pref), string(tag+\"-\")) || strings.HasPrefix(string(tag), string(pref+\"-\")) {\n\t\t\t\treturn tag, 0, 0\n\t\t\t}\n\t\t}\n\t}\n\treturn m.tags[0], 0, 0\n}\n```\n\n----------------------------------------\n\nTITLE: Alternate Go Module Definition\nDESCRIPTION: Alternative go.mod file (go.alt.mod) with identical module definition.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_reject_modfile.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/foo\n\ngo 1.20\n```\n\n----------------------------------------\n\nTITLE: Expected Git Log Output File\nDESCRIPTION: Contains the expected Git log output showing the commit and tag information for verification.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/empty-v2-without-v1.txt#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n122733c (HEAD -> master, tag: v2.0.0) add go.mod file without go source files\n```\n\n----------------------------------------\n\nTITLE: Defining broken module with vendored imports\nDESCRIPTION: Defines a module that tries to use packages vendored in the standard library, which should fail to build.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_std_vendor.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nmodule broken\n```\n\nLANGUAGE: go\nCODE:\n```\npackage broken\n\nimport (\n\t_ \"net/http\"\n\t_ \"golang.org/x/net/http2/hpack\"\n)\n```\n\n----------------------------------------\n\nTITLE: Comparing Go Module Files in Go\nDESCRIPTION: This command compares the current go.mod file with the expected go.mod.want file after dependency upgrades.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_boost.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncmp go.mod go.mod.want\n```\n\n----------------------------------------\n\nTITLE: Module C Implementation (c/c.go)\nDESCRIPTION: Implementation file for module c.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downadd_indirect.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage c\n```\n\n----------------------------------------\n\nTITLE: Invalid Go File with Syntax Error\nDESCRIPTION: An intentionally broken Go file that contains syntax errors. This file is used to test that the Go test command doesn't attempt to load packages that don't compile when using pattern matching.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_pattern.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nimport ^\n\nvar _ = io.DoesNotExist\n```\n\n----------------------------------------\n\nTITLE: Non-CGO Fallback Implementation\nDESCRIPTION: Fallback implementation for environments where CGO is not available, using build constraints\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_find_nodeps.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n//go:build !cgo\n// +build !cgo\n\npackage cgopkg\n\nfunc F() {\n    println(0)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Terminal Control Constants in Go for NetBSD ARM64\nDESCRIPTION: Terminal input control flags for NetBSD ARM64 systems. These constants control terminal behavior such as signal generation, character stripping, and XON/XOFF flow control.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_36\n\nLANGUAGE: go\nCODE:\n```\nconst ISIG = 128\nconst ISTRIP = 32\nconst IXANY = 2048\nconst IXOFF = 1024\nconst IXON = 512\nconst NOFLSH = 2147483648\n```\n\n----------------------------------------\n\nTITLE: Go Module Build and Cross-compilation Test Script\nDESCRIPTION: Shell script that tests Go build and install commands with various architecture and OS configurations, including path verification and GOBIN settings\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_cross_gobin.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=off\n[short] skip # rebuilds std for alternate architecture\n\ncd mycmd\ngo build mycmd\n\n# cross-compile install with implicit GOBIN=$GOPATH/bin can make subdirectory\nenv GOARCH=386\n[GOARCH:386] env GOARCH=amd64\nenv GOOS=linux\ngo install mycmd\nexists $GOPATH/bin/linux_$GOARCH/mycmd\n\n# cross-compile install with explicit GOBIN cannot make subdirectory\nenv GOBIN=$WORK/bin\n! go install mycmd\n! exists $GOBIN/linux_$GOARCH\n\n# The install directory for a cross-compiled standard command should include GOARCH.\ngo list -f '{{.Target}}'  cmd/pack\nstdout ${GOROOT}[/\\]pkg[/\\]tool[/\\]${GOOS}_${GOARCH}[/\\]pack$\n```\n\n----------------------------------------\n\nTITLE: Declaring Module Path for Go Toolchain - Plaintext\nDESCRIPTION: Specifies the Go module path to indicate the dependency on the Go toolchain or to be used as an identifier in Go module dependency graphs. This plaintext snippet is typically part of the .mod or go.mod files and does not include version or additional configuration. Required by Go tooling for module resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.22.0.linux-amd64.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ngolang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Executing Go List Command for Test Loading Verification\nDESCRIPTION: The shell command 'go list -e -test d' verifies whether tests are still loaded when the package 'd' contains an error. It outputs the standard expected values. Dependencies can be added using the '-deps' flag to include them in the output as well.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/load_test_pkg_err.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo list -e -test d\ncmp stdout want_stdout\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo list -e -test -deps d\nstdout golang.org/fake/d\n```\n\n----------------------------------------\n\nTITLE: Go Workspace Configuration with Module Replacements\nDESCRIPTION: Go workspace configuration file (go.work) specifying Go version, modules to include, and module replacements to control dependency resolution. It defines replacement paths for various module versions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune_all.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\n\nuse (\n\t./a\n\t./p\n)\n\nreplace example.com/b v1.0.0 => ./b\nreplace example.com/q v1.0.0 => ./q1_0_0\nreplace example.com/q v1.0.5 => ./q1_0_5\nreplace example.com/q v1.1.0 => ./q1_1_0\nreplace example.com/r v1.0.0 => ./r\nreplace example.com/w v1.0.0 => ./w\nreplace example.com/x v1.0.0 => ./x\nreplace example.com/y v1.0.0 => ./y\nreplace example.com/z v1.0.0 => ./z1_0_0\nreplace example.com/z v1.1.0 => ./z1_1_0\n```\n\n----------------------------------------\n\nTITLE: Go Module Declaration\nDESCRIPTION: Defines a Go module with an insecure import path and specifies Go version 1.13 as requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/insecurerepo.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nmodule vcs-test.golang.org/insecure/go/insecure\n\ngo 1.13\n```\n\n----------------------------------------\n\nTITLE: Windows Batch Script for Test Clang Compiler\nDESCRIPTION: A Windows batch script that simulates the clang compiler by writing 'ok' to a log file. This is placed in a directory with spaces to test path handling on Windows.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_path_space.txt#2025-04-22_snippet_5\n\nLANGUAGE: bat\nCODE:\n```\necho ok >%WORK%\\log.txt\n```\n\n----------------------------------------\n\nTITLE: Implementing the gofmt Command Script\nDESCRIPTION: Shell script for the gofmt command with a placeholder implementation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-mipsx.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: Defining Syscall Constants for OpenBSD/Windows in Go\nDESCRIPTION: Defines constant integer values used in interfacing with system-level APIs for OpenBSD and Windows (across multiple architectures), such as syscall numbers, IOCTL values, and permission masks. These constants are required for invoking specific syscalls directly or setting up structures for system calls at the Go layer. Input and output are strictly typed integer literals with no runtime dependencies, mapping Go constants to C/OS definitions.\nSOURCE: https://github.com/golang/go/blob/master/api/except.txt#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\nconst SizeofRtMsghdr = 88\nconst TIOCGTSTAMP = 1074295899\nconst CCR0_FLUSH = 16\nconst CCR0_FLUSH ideal-int\nconst CPUID_CFLUSH = 524288\nconst CPUID_CFLUSH ideal-int\nconst EFER_LMA = 1024\nconst EFER_LMA ideal-int\nconst EFER_LME = 256\nconst EFER_LME ideal-int\nconst EFER_NXE = 2048\nconst EFER_NXE ideal-int\nconst EFER_SCE = 1\nconst EFER_SCE ideal-int\nconst ImplementsGetwd = false\nconst PMC5_PIPELINE_FLUSH = 21\nconst PMC5_PIPELINE_FLUSH ideal-int\nconst RTF_FMASK = 63496\nconst RTM_VERSION = 4\nconst SIOCBRDGDADDR = 2150132039\nconst SIOCBRDGSADDR = 3223873860\nconst SYS_CLOCK_GETRES = 234\nconst SYS_CLOCK_GETTIME = 232\nconst SYS_CLOCK_SETTIME = 233\nconst SYS_FHSTATFS = 309\nconst SYS_FSTAT = 292\nconst SYS_FSTATAT = 316\nconst SYS_FSTATFS = 308\nconst SYS_FUTIMENS = 327\nconst SYS_FUTIMES = 206\nconst SYS_GETDIRENTRIES = 312\nconst SYS_GETDIRENTRIES ideal-int\nconst SYS_GETFSSTAT = 306\nconst SYS_GETITIMER = 86\nconst SYS_GETRUSAGE = 117\nconst SYS_GETTIMEOFDAY = 116\nconst SYS_KEVENT = 270\nconst SYS_KILL = 37\nconst SYS_LSTAT = 293\nconst SYS_NANOSLEEP = 240\nconst SYS_SELECT = 93\nconst SYS_SETITIMER = 83\nconst SYS_SETTIMEOFDAY = 122\nconst SYS_STAT = 291\nconst SYS_STATFS = 307\nconst SYS_UTIMENSAT = 326\nconst SYS_UTIMES = 138\nconst SYS_WAIT4 = 7\nconst SYS___THRSLEEP = 300\nconst SizeofRtMetrics = 48\nconst SizeofRtMsghdr = 88\nconst TOKEN_ALL_ACCESS = 983295\n```\n\n----------------------------------------\n\nTITLE: Describing Go Module Version - JSON Info\nDESCRIPTION: Provides a JSON object with version information for the module, required for Go's module proxy and integrity verification. The 'Version' field specifies the release version as 'v0.0.1-go1.999testmod.freebsd-386.' This file is typically auto-generated and facilitates module version tracking. No input or output processing is expected from this file; it serves as metadata.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.freebsd-386.txt#2025-04-22_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\\\"Version\\\":\\\"v0.0.1-go1.999testmod.freebsd-386\\\"}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Get Update without GOINSECURE\nDESCRIPTION: Attempts to update the package without GOINSECURE, which should fail.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/get_insecure.txt#2025-04-22_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nenv GOINSECURE=''\nenv GONOSUMDB=''\n! go get -d -u -f insecure.go-get-issue-15410.appspot.com/pkg/p\n```\n\n----------------------------------------\n\nTITLE: Regular Package Definition\nDESCRIPTION: A Go implementation file that defines a package named 'testonly2' which contains implementation files, used as a contrast to the test-only package in the build examples.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_test_only.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage testonly2\n```\n\n----------------------------------------\n\nTITLE: Version Info Configuration\nDESCRIPTION: Version information file specifying v1.9.0 version\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_deprecated_b_v1.9.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.9.0\"}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Basic Go module declaration specifying the module name 'example' and Go version 1.19.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_trimpath_goroot.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example\n\ngo 1.19\n```\n\n----------------------------------------\n\nTITLE: Package Import Collision Test\nDESCRIPTION: Go source file demonstrating case-sensitive package import collision by importing same package with different case paths\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_case_collision.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage p\nimport (\n\t_ \"example/a/pkg\"\n\t_ \"example/a/Pkg\"\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Go Workspace Vendor Command\nDESCRIPTION: A bash script that tests the 'go work vendor' command for proper handling of various error conditions involving inconsistencies between go.mod files and vendor/modules.txt.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_modules_txt_consistent.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo work vendor\ncmp modules.txt.want vendor/modules.txt\ngo list example.com/a example.com/b\n\n# Module required in go.mod but not marked explicit in modules.txt\ncp modules.txt.required_but_not_explicit vendor/modules.txt\n! go list example.com/a example.com/b\ncmpenv stderr required_but_not_explicit_error.txt\n\n# Replacement in go.mod but no replacement in modules.txt\ncp modules.txt.missing_replacement vendor/modules.txt\n! go list example.com/a example.com/b\ncmpenv stderr missing_replacement_error.txt\n\n# Replacement in go.mod but different replacement target in modules.txt\ncp modules.txt.different_replacement vendor/modules.txt\n! go list example.com/a example.com/b\ncmpenv stderr different_replacement_error.txt\n\n# Module marked explicit in modules.txt but not required in go.mod\ncp modules.txt.extra_explicit vendor/modules.txt\n! go list example.com/a example.com/b\ncmpenv stderr extra_explicit_error.txt\n\n# Replacement in modules.txt but not in go.mod\ncp modules.txt.extra_replacement vendor/modules.txt\n! go list example.com/a example.com/b\ncmpenv stderr extra_replacement_error.txt\n```\n\n----------------------------------------\n\nTITLE: Testing go list JSON Output\nDESCRIPTION: Tests the go list command with -json flag to ensure proper JSON output to stdout\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_json_with_f.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo list -json ./...\n```\n\n----------------------------------------\n\nTITLE: Git References File Content\nDESCRIPTION: Contains the expected Git references output showing the master branch and v3.0.0 tag pointing to the same commit.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/v3pkg.txt#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\na3eab1261b8e3164bcbde9171c23d5fd36e32a85 refs/heads/master\na3eab1261b8e3164bcbde9171c23d5fd36e32a85 refs/tags/v3.0.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Environment Variables\nDESCRIPTION: Sets up Git environment variables for author and committer information before initializing the repository.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/odd-tags.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GIT_AUTHOR_NAME='Bryan C. Mills'\nenv GIT_AUTHOR_EMAIL='bcmills@google.com'\nenv GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME\nenv GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL\n\ngit init\n```\n\n----------------------------------------\n\nTITLE: Testing Preservation of Redundant Requirements\nDESCRIPTION: Tests that redundant dependencies are preserved during regular operations like 'go list' and 'go mod vendor'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retention.txt#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncp go.mod.redundant go.mod\ngo list all\ncmp go.mod go.mod.redundant\ngo mod vendor\ncmp go.mod go.mod.redundant\nrm -r vendor\n```\n\n----------------------------------------\n\nTITLE: Displaying and Verifying Git References\nDESCRIPTION: Shows all tags and branch heads in the Git repository and compares the output with an expected reference file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/v2sub.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit show-ref --tags --heads\ncmp stdout .git-refs\n```\n\n----------------------------------------\n\nTITLE: Testing Go Syntax Error Handling (GO111MODULE off)\nDESCRIPTION: This snippet tests the Go test command's behavior when encountering a syntax error in a test file with GO111MODULE set to off. It verifies that the error is diagnosed and that the test fails.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_syntax_error_says_fail.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GO111MODULE=off\n! go test syntaxerror\nstderr 'x_test.go:' # check that the error is diagnosed\nstdout 'FAIL' # check that go test says FAIL\n```\n\n----------------------------------------\n\nTITLE: Module A Implementation\nDESCRIPTION: The main Go file for module 'example.com/a' that imports module 'example.com/b' for side effects only.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_modules_txt_conditional.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\nimport _ \"example.com/b\"\n```\n\n----------------------------------------\n\nTITLE: Complete Go Module Dependencies\nDESCRIPTION: Complete go.sum file containing all required module checksums for the build.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_missing_ziphash.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ngolang.org/x/text v0.0.0-20170915032832-14c0d48ead0c h1:pvCbr/wm8HzDD3fVywevekufpn6tCGPY3spdHeZJEsw=\ngolang.org/x/text v0.0.0-20170915032832-14c0d48ead0c/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\nrsc.io/quote v1.5.2 h1:3fEykkD9k7lYzXqCYrwGAf7iNhbk4yCjHmKBN9td4L0=\nrsc.io/quote v1.5.2/go.mod h1:LzX7hefJvL54yjefDEDHNONDjII0t9xZLPXsUe+TKr0=\nrsc.io/sampler v1.3.0 h1:HLGR/BgEtI3r0uymSP/nl2uPLsUnNJX8toRyhfpBTII=\nrsc.io/sampler v1.3.0/go.mod h1:T1hPZKmBbMNahiBKFy5HrXp6adAjACjK9JXDnKaTXpA=\nrsc.io/testonly v1.0.0 h1:K/VWHdO+Jv7woUXG0GzVNx1czBXUt3Ib1deaMn+xk64=\nrsc.io/testonly v1.0.0/go.mod h1:OqmGbIFOcF+XrFReLOGZ6BhMM7uMBiQwZsyNmh74SzY=\n```\n\n----------------------------------------\n\nTITLE: Setting Git Author Date and Committing Files\nDESCRIPTION: Sets the Git author date, adds go.mod and v3pkg.go files, commits them with a message, renames the branch to master, and tags the commit as v3.0.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/v3pkg.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nat 2019-07-15T14:01:24-04:00\nenv GIT_AUTHOR_DATE=2019-07-15T13:59:34-04:00\ngit add go.mod v3pkg.go\ngit commit -a -m 'all: add go.mod with v3 path'\ngit branch -m master\ngit tag 'v3.0.0'\n```\n\n----------------------------------------\n\nTITLE: Executing Trimpath Tests in Different Modes (Shell)\nDESCRIPTION: These shell commands execute Go programs using `go run -trimpath` to test path trimming functionality. The tests cover running from the main module with vendoring enabled, running a vendored module directly, and running in GOPATH mode. Each command checks the standard output (`stdout`) for a specific pattern representing the expected trimmed path from the C `__FILE__` macro.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_trimpath_macro.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# Test in main module.\ngo run -trimpath -mod=vendor ./main\nstdout '(\\_\\_|/_)[\\/]m[\\/]c[\\/]bar.h'\n\n# Test in vendored module.\ngo run -trimpath -mod=vendor v.com/main\nstdout '(\\_\\_|/_)[\\/]vendor[\\/]v.com[\\/]c[\\/]bar.h'\n\n# Test in GOPATH mode.\nenv GO111MODULE=off\ngo run -trimpath ./main\nstdout '(\\_\\_|/_)[\\/]GOPATH[\\/]src[\\/]c[\\/]bar.h'\n```\n\n----------------------------------------\n\nTITLE: Cgo file in onlycgo package\nDESCRIPTION: This snippet demonstrates a Go file that uses cgo by importing the \"C\" package and defining an empty exported function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet.txt#2025-04-22_snippet_11\n\nLANGUAGE: Go\nCODE:\n```\npackage p\n\nimport \"C\"\n\nfunc F() {}\n```\n\n----------------------------------------\n\nTITLE: Invalid HTTP Package with Standard Library Vendored Dependencies\nDESCRIPTION: This file demonstrates an invalid import pattern by trying to use 'golang.org/x/net/http/httpproxy' from outside the standard library. This is not allowed as packages outside the standard library cannot use its vendored dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/std_vendor.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage broken\n\nimport (\n\t_ \"net/http\"\n\t_ \"golang.org/x/net/http/httpproxy\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Go Module 'm' (Go Module)\nDESCRIPTION: Defines the main Go module named `m` using Go version 1.15. It declares a dependency on module `x` (version v0.1.0) and uses `replace` directives to point to local directories `./x` and `./y` for modules `x` and `y` respectively, facilitating local multi-module testing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_notall.txt#2025-04-22_snippet_4\n\nLANGUAGE: gomod\nCODE:\n```\n-- go.mod --\nmodule m\n\ngo 1.15\n\nrequire x v0.1.0\n\nreplace (\n\tx v0.1.0 => ./x\n\ty v0.1.0 => ./y\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Import Path with Mercurial VCS\nDESCRIPTION: HTML meta tag that specifies the import path for a Go module using Mercurial (hg) version control system. Sets up vcs-test.golang.org as the import source with a custom Mercurial repository path.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/go/custom-hg-hello.txt#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"go-import\" content=\"vcs-test.golang.org/go/custom-hg-hello hg https://vcs-test.golang.org/hg/custom-hg-hello\">\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests with Full Coverage\nDESCRIPTION: Commands for running Go tests with coverage analysis across all packages using various `-coverpkg` patterns. Each command demonstrates different coverage reporting configurations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverpkg_partial.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test -coverprofile=cov.p -coverpkg=./... ./...\nstdout '^ok\\s+M/a\\s+\\S+\\s+coverage: 50.0% of statements in ./...'\nstdout '^ok\\s+M/b\\s+\\S+\\s+coverage: 60.0% of statements in ./...'\nstdout '^ok\\s+M/c\\s+\\S+\\s+coverage: 30.0% of statements in ./...'\nstdout '^\\s*M/d\\s+coverage: 0.0% of statements'\nstdout '^\\s*M/f\\s+coverage: 0.0% of statements'\n\n# Test just the test-only package ./e but with -coverpkg=./...\n# Total number of statements should be 7 (e.g. a/b/d/f but not c)\n# and covered percent should be 6/7 (we hit everything in the\n# coverpkg pattern except the func in \"d\").\ngo test -coverprofile=bar.p -coverpkg=./... ./e\nstdout '^ok\\s+M/e\\s+\\S+\\s+coverage: 85.7% of statements in ./...'\n\n# Test b and f with -coverpkg set to a/d/f. Total of 6 statements\n# in a/d/f, again we hit everything except DFunc.\ngo test -coverprofile=baz.p -coverpkg=./a,./d,./f ./b ./f\nstdout '^ok\\s+M/b\\s+\\S+\\s+coverage: 83.3% of statements in ./a, ./d, ./f'\nstdout '^\\s*M/f\\s+coverage: 0.0% of statements'\n\n# This sub-test inspired by issue 65653: if package P is is matched\n# via the package pattern supplied as the argument to \"go test -cover\"\n# but P is not part of \"-coverpkg\", then we don't want coverage for P\n# (including the specific case where P has no test files).\ngo test -coverpkg=./a ./...\nstdout '^ok\\s+M/a\\s+\\S+\\s+coverage: 100.0% of statements in ./a'\nstdout '^\\s*\\?\\s+M/f\\s+\\[no test files\\]'\n```\n\n----------------------------------------\n\nTITLE: Package Declaration in Subpackage\nDESCRIPTION: Empty package declaration in a subpackage, demonstrating module structure without root package implementation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_noroot_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage pkg\n```\n\n----------------------------------------\n\nTITLE: Defining C Library Function LibFn (C)\nDESCRIPTION: This C source file `b/lib.c` defines the function `LibFn`, which simply returns its integer argument. This file is compiled and archived into `a/libb.a`, which package `a` links against via its `#cgo LDFLAGS`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_undef.txt#2025-04-22_snippet_7\n\nLANGUAGE: c\nCODE:\n```\n-- b/lib.c --\nint LibFn(int i) { return i; }\n```\n\n----------------------------------------\n\nTITLE: Git Environment Configuration and Version Control Commands\nDESCRIPTION: Sets up Git environment variables and executes a series of Git commands to initialize a repository, create commits, and manage version tags for a Go module. Demonstrates proper version tag sequencing and submodule management.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/prefixtagtests.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GIT_AUTHOR_NAME='Jay Conrod'\nenv GIT_AUTHOR_EMAIL='jayconrod@google.com'\nenv GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME\nenv GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL\n\ngit init\n\ngit add sub\ngit commit -m 'create module sub'\ngit branch -m master\n\necho 'v0.1.0'\ncp stdout status\ngit add status\ngit commit -a -m 'v0.1.0'\ngit tag 'v0.1.0'\n\necho 'sub/v0.0.9'\ncp stdout status\ngit commit -a -m 'sub/v0.0.9'\ngit tag 'sub/v0.0.9'\n\necho 'sub/v0.0.10'\ncp stdout status\ngit commit -a -m 'sub/v0.0.10'\ngit tag 'sub/v0.0.10'\n\necho 'v0.2.0'\ncp stdout status\ngit commit -a -m 'v0.2.0'\ngit tag 'v0.2.0'\n\necho 'after last tag'\ncp stdout status\ngit commit -a -m 'after last tag'\n\ngit show-ref --tags --heads\n```\n\n----------------------------------------\n\nTITLE: Checking Default GODEBUG Settings for FIPS 140 in Go\nDESCRIPTION: Verifies that the default GODEBUG settings include 'fips140=on' when FIPS is enabled.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/fipssnap.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo list -f '{{.DefaultGODEBUG}}'\nstdout fips140=on\n```\n\n----------------------------------------\n\nTITLE: Testing Go List Compiled Package Caching\nDESCRIPTION: Shell commands to verify that go list -find -compiled caches and reuses compiled sources appropriately, ensuring no cgo operations occur on second run.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_find.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo list -find -compiled net\ngo list -find -compiled -x net\n! stderr 'cgo'\n```\n\n----------------------------------------\n\nTITLE: Localized Text Testing in Go\nDESCRIPTION: Test cases for verifying correct language-based text selection and translation lookup functionality.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.3.1.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc TestHello(t *testing.T) {\n\tfor _, tt := range helloTests {\n\t\ttext := Hello(tt.prefs...)\n\t\tif text != tt.text {\n\t\t\tt.Errorf(\"Hello(%v) = %q, want %q\", tt.prefs, text, tt.text)\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Windows WSAECONNABORTED Constant Definition\nDESCRIPTION: Defines WSAECONNABORTED constant and its Errno type for Windows systems, used for connection abort errors\nSOURCE: https://github.com/golang/go/blob/master/api/go1.9.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nconst WSAECONNABORTED Errno = 10053\n```\n\n----------------------------------------\n\nTITLE: BPF Constants Definition in Go for Darwin ARM64\nDESCRIPTION: Defines Berkeley Packet Filter (BPF) related constants including version numbers, buffer sizes, operation codes and memory settings for the Darwin ARM64 platform\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_54\n\nLANGUAGE: Go\nCODE:\n```\nconst (\n    BPF_MAJOR_VERSION = 1\n    BPF_MAXBUFSIZE = 524288\n    BPF_MAXINSNS = 512\n    BPF_MEM = 96\n    BPF_MEMWORDS = 16\n    BPF_MINBUFSIZE = 32\n    BPF_MINOR_VERSION = 1\n    // ... other BPF constants\n)\n```\n\n----------------------------------------\n\nTITLE: Go package y implementation\nDESCRIPTION: A basic Go package 'y' with no imports.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_why.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage y\n```\n\n----------------------------------------\n\nTITLE: Testing 64-bit Floating-Point Conversion in Go\nDESCRIPTION: This snippet demonstrates test cases for converting 64-bit floating-point numbers between binary and decimal representations. It includes stress inputs for conversion to 53-bit binary and from 53-bit binary to decimal, covering cases both less than and greater than 1/2 ULP (Unit in the Last Place).\nSOURCE: https://github.com/golang/go/blob/master/src/strconv/testdata/testfp.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfloat64 %b 5e+125 6653062250012735p+365\nfloat64 %b 69e+267 4705683757438170p+841\nfloat64 %b 999e-026 6798841691080350p-129\n// ... more test cases ...\nfloat64 %.21e 7363326733505337p+272 5.58769757362301140950e+97\nfloat64 %.21e 8549497411294502p-448 1.176257830728540379990e-119\n```\n\n----------------------------------------\n\nTITLE: Simple Go Hello World Program\nDESCRIPTION: Basic Go program that prints 'hello' to stdout. Includes an explicit import path comment for custom package naming.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/hg/custom-hg-hello.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main // import \"vcs-test.golang.org/go/custom-hg-hello\"\n\nfunc main() {\n\tprintln(\"hello\")\n}\n```\n\n----------------------------------------\n\nTITLE: Module Definition for Other Test Package\nDESCRIPTION: The go.mod file for an alternate test module other/x/y used in the tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gobuild_import.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nmodule other/x/y\n```\n\n----------------------------------------\n\nTITLE: Building Package with cgo in Go\nDESCRIPTION: The build process checks if runtime/cgo is rebuilt with new flags and ensures it is cached but not installed. This requires Go's build tools and environment to be set properly, making sure the GOCACHE is designated to prevent run interference.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_stale.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nenv GOCACHE=$WORK/cache  # Use a fresh cache to avoid interference between runs.\n\ngo build -x .\nstderr '[/\\\\]cgo'$GOEXE'[\"]? .* -importpath runtime/cgo'\n! stale runtime/cgo\n```\n\n----------------------------------------\n\nTITLE: Dependency Package\nDESCRIPTION: An empty package definition for the 'dep' module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version_missing.txt#2025-04-22_snippet_12\n\nLANGUAGE: Go\nCODE:\n```\npackage dep\n```\n\n----------------------------------------\n\nTITLE: NetBSD ARM64 Socket Control Constants\nDESCRIPTION: Socket control (SIOC) constants for network interface operations, including address management, media control, and interface configuration\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_146\n\nLANGUAGE: Go\nCODE:\n```\nconst SIOCATMARK = 1074033415\nconst SIOCDELMULTI = 2156947762\nconst SIOCDELRT = 2151182859\nconst SIOCDIFADDR = 2156947737\nconst SIOCDIFPHYADDR = 2156947785\nconst SIOCDLIFADDR = 2165860638\n```\n\n----------------------------------------\n\nTITLE: Defining Expected Error Output for Listing Package with Missing Requirement (Text)\nDESCRIPTION: Specifies the expected standard error output (`stderr`) when `go list m/use` fails after dropping the explicit requirement for `example.com/badchain/a`. The output shows the tool finding the module for the imported package `example.com/badchain/c` and then failing due to the path mismatch when parsing its `go.mod`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badchain.txt#2025-04-22_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n-- list-missing-expected --\ngo: finding module for package example.com/badchain/c\ngo: found example.com/badchain/c in example.com/badchain/c v1.1.0\ngo: m/use imports\n\texample.com/badchain/c: example.com/badchain/c@v1.1.0: parsing go.mod:\n\tmodule declares its path as: badchain.example.com/c\n\t        but was required as: example.com/badchain/c\n```\n\n----------------------------------------\n\nTITLE: Configuring Module 'c' (Version 2)\nDESCRIPTION: This go.mod file defines module 'c'. It represents a second, different version of the 'c' module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_horizon.txt#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n-- c2/go.mod --\nmodule c\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: Main Module Definition with Indirect Dependency\nDESCRIPTION: Primary go.mod file containing module definition with an indirect dependency comment that includes spacing issue.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_nospace.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/m\n\ngo 1.16\n\nrequire example.net/x v0.1.0 //indirect\n\nreplace example.net/x v0.1.0 => ./x\n```\n\n----------------------------------------\n\nTITLE: Comparing IP Address and Port Structures - net/netip - Go\nDESCRIPTION: Adds Compare(AddrPort) int to AddrPort, allowing sorting or comparison of address-port combinations. Returns negative, zero, or positive integer according to relative order.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_24\n\nLANGUAGE: Go\nCODE:\n```\nfunc (ap AddrPort) Compare(AddrPort) int\n```\n\n----------------------------------------\n\nTITLE: Testing Go Get Command with Empty Local Module Patterns\nDESCRIPTION: This snippet tests the 'go get' command with empty patterns that are local to the module. It verifies that the command warns about matched no packages exactly once for repeated executions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_nopkgs.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo get ./...\nstderr -count=1 'matched no packages'\n\ngo get ./...\nstderr -count=1 'matched no packages'\n```\n\n----------------------------------------\n\nTITLE: Implementing Hello Function in Go Quote Package\nDESCRIPTION: Implements a Hello() function in the 'quote' package that returns a simple greeting string 'Hello, world.'\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Copyright 2018 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// Package quote collects pithy sayings.\npackage quote // import \"rsc.io/quote\"\n\n// Hello returns a greeting.\nfunc Hello() string {\n\treturn \"Hello, world.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Styling List Items in Main Content for Go 1.25 Release Notes\nDESCRIPTION: CSS snippet to add margin to list items within the main content area, improving readability of the release notes.\nSOURCE: https://github.com/golang/go/blob/master/doc/next/1-intro.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n<style>\n  main ul li { margin: 0.5em 0; }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default User Language Preferences in Go\nDESCRIPTION: This function retrieves the default user language preferences by checking environment variables LC_ALL, LC_MESSAGES, and LANG in that order. It returns a slice of language tags.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.3.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc DefaultUserPrefs() []language.Tag {\n\tvar prefs []language.Tag\n\tfor _, k := range []string{\"LC_ALL\", \"LC_MESSAGES\", \"LANG\"} {\n\t\tif env := os.Getenv(k); env != \"\" {\n\t\t\tprefs = append(prefs, language.Make(env))\n\t\t}\n\t}\n\treturn prefs\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Benchmark Function (Go)\nDESCRIPTION: This file (`bench_test.go`) defines a benchmark function `BenchmarkSimplefunc` within the `testlist` package. It uses the `testing` package and follows the `BenchmarkXxx(*testing.B)` signature. The function body contains a loop controlled by `b.N` to measure the performance of `fmt.Sprint`. Note the use of `b.StopTimer()` and `b.StartTimer()`, although their placement here has minimal effect.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_test_simple.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n-- bench_test.go --\npackage testlist\n\nimport (\n\t\"fmt\"\n\t\"testing\"\n)\n\nfunc BenchmarkSimplefunc(b *testing.B) {\n\tb.StopTimer()\n\tb.StartTimer()\n\tfor i := 0; i < b.N; i++ {\n\t\t_ = fmt.Sprint(\"Test for bench\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module in go.mod File\nDESCRIPTION: Duplicate of the .mod file, specifying the module name and required Go version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo1223_v0.0.1.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule rsc.io/needgo1223\ngo 1.22.3\n```\n\n----------------------------------------\n\nTITLE: Defining Rusage Struct in Go for Darwin ARM64 CGO\nDESCRIPTION: Defines the Rusage struct used for resource usage information. It includes fields for various system resource metrics.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_204\n\nLANGUAGE: Go\nCODE:\n```\ntype Rusage struct {\n    Idrss int64\n    Inblock int64\n    Isrss int64\n    Ixrss int64\n    Majflt int64\n    Maxrss int64\n    Minflt int64\n    Msgrcv int64\n    Msgsnd int64\n    Nivcsw int64\n    Nsignals int64\n    Nswap int64\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Process32 API for Windows in Go syscall package\nDESCRIPTION: Defines Windows process management constants and functions in the syscall package for both 386 and amd64 architectures. Includes process enumeration capabilities with CreateToolhelp32Snapshot, Process32First, and Process32Next functions along with the ProcessEntry32 structure.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_28\n\nLANGUAGE: go\nCODE:\n```\n// Windows process-related constants\nconst TH32CS_INHERIT = 2147483648\nconst TH32CS_SNAPALL = 15\nconst TH32CS_SNAPHEAPLIST = 1\nconst TH32CS_SNAPMODULE = 8\nconst TH32CS_SNAPMODULE32 = 16\nconst TH32CS_SNAPPROCESS = 2\nconst TH32CS_SNAPTHREAD = 4\n\n// Windows process management functions\nfunc CreateToolhelp32Snapshot(uint32, uint32) (Handle, error)\nfunc Process32First(Handle, *ProcessEntry32) error\nfunc Process32Next(Handle, *ProcessEntry32) error\n\n// ProcessEntry32 structure definition\ntype ProcessEntry32 struct {\n    Size uint32\n    Usage uint32\n    ProcessID uint32\n    DefaultHeapID uintptr\n    ModuleID uint32\n    Threads uint32\n    ParentProcessID uint32\n    PriClassBase int32\n    Flags uint32\n    ExeFile [260]uint16\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Add Function in Image Package\nDESCRIPTION: Introduces a function Add in the image package, which returns the sum of two integers. It demonstrates how to include basic arithmetic functionality in the package, making it available under the vendor directory for module 'test'. This requires the go.mod file in the parent directory and utilizes the vendor directory setup.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_issue35270.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule test\n```\n\nLANGUAGE: Go\nCODE:\n```\npackage image\nfunc Add(a, b int) int {\n    return a + b\n}\n```\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n    \"image\"\n)\n\nfunc main() {\n    println(image.Add(1,1))\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NetBSD ARM64 Routing Values Constants in Go Syscall Package\nDESCRIPTION: Constants for routing value types used in NetBSD. These define what routing metrics are available, including MTU, hop counts, expiration, pipe sizes, round-trip times, and slow-start thresholds.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_53\n\nLANGUAGE: Go\nCODE:\n```\nconst RTV_EXPIRE = 4\nconst RTV_EXPIRE ideal-int\nconst RTV_HOPCOUNT = 2\nconst RTV_HOPCOUNT ideal-int\nconst RTV_MTU = 1\nconst RTV_MTU ideal-int\nconst RTV_RPIPE = 8\nconst RTV_RPIPE ideal-int\nconst RTV_RTT = 64\nconst RTV_RTT ideal-int\nconst RTV_RTTVAR = 128\nconst RTV_RTTVAR ideal-int\nconst RTV_SPIPE = 16\nconst RTV_SPIPE ideal-int\nconst RTV_SSTHRESH = 32\nconst RTV_SSTHRESH ideal-int\n```\n\n----------------------------------------\n\nTITLE: Providing Version Metadata for a Go Module - JSON\nDESCRIPTION: Supplies JSON metadata indicating that the module is at version v0.1.0. This information is used by the Go module proxy to track available versions. Consumed by tools processing Go module version histories.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_ambiguous_nested_v0.1.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\\\"Version\\\": \\\"v0.1.0\\\"}\n```\n\n----------------------------------------\n\nTITLE: Defining network-related structs in Go for Darwin ARM64\nDESCRIPTION: This snippet defines structures related to network operations, including Cmsghdr, ICMPv6Filter, IPv6MTUInfo, and Inet4Pktinfo.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_124\n\nLANGUAGE: Go\nCODE:\n```\ntype Cmsghdr struct {\n    Len uint32\n    Level int32\n    Type int32\n}\n\ntype ICMPv6Filter struct {\n    Filt [8]uint32\n}\n\ntype IPv6MTUInfo struct {\n    Addr RawSockaddrInet6\n    Mtu uint32\n}\n\ntype Inet4Pktinfo struct {\n    Addr [4]uint8\n    Ifindex uint32\n    Spec_dst [4]uint8\n}\n\ntype Inet6Pktinfo struct {\n    Addr [16]uint8\n    Ifindex uint32\n}\n```\n\n----------------------------------------\n\nTITLE: Module Declaration in go.mod File\nDESCRIPTION: Standard go.mod file declaring the module name.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-mipsx.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Alternate GOROOT Vendor Package\nDESCRIPTION: Defines a package in the alternate GOROOT vendor directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dot.txt#2025-04-22_snippet_21\n\nLANGUAGE: go\nCODE:\n```\npackage hpack\n```\n\n----------------------------------------\n\nTITLE: Defining Memory Mapping Constants in Go for NetBSD ARM64\nDESCRIPTION: Memory mapping flags for the mmap system call. These constants define mapping attributes including alignment requirements, visibility, sharing, and special properties.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_39\n\nLANGUAGE: go\nCODE:\n```\nconst MAP_ALIGNMENT_16MB = 402653184\nconst MAP_ALIGNMENT_1TB = 671088640\nconst MAP_ALIGNMENT_256TB = 805306368\nconst MAP_ALIGNMENT_4GB = 536870912\nconst MAP_ALIGNMENT_64KB = 268435456\nconst MAP_ALIGNMENT_64PB = 939524096\nconst MAP_ALIGNMENT_MASK = -16777216\nconst MAP_ALIGNMENT_SHIFT = 24\nconst MAP_ANON = 4096\nconst MAP_FILE = 0\nconst MAP_FIXED = 16\nconst MAP_HASSEMAPHORE = 512\nconst MAP_INHERIT = 128\nconst MAP_INHERIT_COPY = 1\nconst MAP_INHERIT_DEFAULT = 1\nconst MAP_INHERIT_DONATE_COPY = 3\nconst MAP_INHERIT_NONE = 2\nconst MAP_INHERIT_SHARE = 0\nconst MAP_NORESERVE = 64\nconst MAP_PRIVATE = 2\nconst MAP_RENAME = 32\nconst MAP_SHARED = 1\nconst MAP_STACK = 8192\nconst MAP_TRYFIXED = 1024\nconst MAP_WIRED = 2048\n```\n\n----------------------------------------\n\nTITLE: New ELF Relocation Constants - debug/elf - Go\nDESCRIPTION: Introduces constants for additional ELF relocation types for LoongArch and MIPS architectures in debug/elf. Each constant is named R_LARCH_* or R_MIPS_PC32 with explicit integer value, and includes an association with relocation families (e.g., R_LARCH, R_MIPS). These values are used for binary analysis or manipulation of ELF files.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\nconst R_LARCH_64_PCREL = 109\nconst R_LARCH_64_PCREL R_LARCH\nconst R_LARCH_ADD6 = 105\nconst R_LARCH_ADD6 R_LARCH\nconst R_LARCH_ADD_ULEB128 = 107\nconst R_LARCH_ADD_ULEB128 R_LARCH\nconst R_LARCH_ALIGN = 102\nconst R_LARCH_ALIGN R_LARCH\nconst R_LARCH_CFA = 104\nconst R_LARCH_CFA R_LARCH\nconst R_LARCH_DELETE = 101\nconst R_LARCH_DELETE R_LARCH\nconst R_LARCH_PCREL20_S2 = 103\nconst R_LARCH_PCREL20_S2 R_LARCH\nconst R_LARCH_SUB6 = 106\nconst R_LARCH_SUB6 R_LARCH\nconst R_LARCH_SUB_ULEB128 = 108\nconst R_LARCH_SUB_ULEB128 R_LARCH\nconst R_MIPS_PC32 = 248\nconst R_MIPS_PC32 R_MIPS\n```\n\n----------------------------------------\n\nTITLE: Go Module File Missing Go Version Directive\nDESCRIPTION: A go.mod file that lacks the 'go' version directive, used to test automatic version addition.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retention.txt#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\nrequire (\n\trsc.io/quote v1.5.2\n\trsc.io/sampler v1.3.0 // indirect\n\trsc.io/testonly v1.0.0 // indirect\n)\n```\n\n----------------------------------------\n\nTITLE: Go Build Command Test\nDESCRIPTION: Shell command to test building a Go program with output directed to devnull, followed by existence check\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_dash_o_dev_null.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo build -o $devnull hello.go\n! exists 'hello'$GOEXE\n```\n\n----------------------------------------\n\nTITLE: Simple Dependency Package - dep2/dep2.go\nDESCRIPTION: Defines a simple dependency package without further imports.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto_multi.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage dep2\n```\n\n----------------------------------------\n\nTITLE: Declaring a Go Module with Versioning\nDESCRIPTION: This snippet declares a Go module and sets the minimum required Go version. It also includes version metadata in JSON format relevant for version management. The '.mod' file specifies the module path 'example.com/retract' and requires Go version 1.15, while '.info' provides a JSON representation of the module's version 'v1.0.0-good'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_v1.0.0-good.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/retract\n\ngo 1.15\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\\\"Version\\\":\\\"v1.0.0-good\\\"}\n```\n\n----------------------------------------\n\nTITLE: Expanding DBStats struct in database/sql package in Go\nDESCRIPTION: Adds new fields to the DBStats struct in the database/sql package, including connection counts, wait statistics, and lifetime information.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.11.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\ntype DBStats struct {\n    Idle int\n    InUse int\n    MaxIdleClosed int64\n    MaxLifetimeClosed int64\n    MaxOpenConnections int\n    WaitCount int64\n    WaitDuration time.Duration\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Module Definition in Submodule\nDESCRIPTION: An intentionally invalid Go module file used to test how Go handles syntax errors in nested module definitions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_fs_patterns.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nsyntax error!\n```\n\n----------------------------------------\n\nTITLE: Module Path Definition for Test Toolchain\nDESCRIPTION: Defines the golang.org/toolchain module path with a specific test version for NetBSD on ARM64 architecture.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.netbsd-arm64.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngolang.org/toolchain@v0.0.1-go1.999testmod.netbsd-arm64\n```\n\n----------------------------------------\n\nTITLE: Lazy Module Definition\nDESCRIPTION: Configuration for the lazy module that requires incompatible v1.0.0 and excludes v2.0.0+incompatible.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_irrelevant.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/lazy\n\ngo 1.17\n\nexclude example.com/retract/incompatible v2.0.0+incompatible\n\nrequire (\n\texample.com/retract/incompatible v1.0.0\n\texample.net/requireincompatible v0.1.0\n)\n```\n\n----------------------------------------\n\nTITLE: Initialize Go Module Configuration\nDESCRIPTION: Defines the module configuration for the example project using a go.mod file. Specifies the module path and Go version required to compile the module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_test_pkgselect.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n-- go.mod --\nmodule example\n\ngo 1.18\n\n```\n\n----------------------------------------\n\nTITLE: Test File with Scan Error\nDESCRIPTION: Test file containing valid test function and intentional scan error for testing error handling\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_parse_err.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage t\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {}\n\n// scan error\nʕ◔ϖ◔ʔ\n```\n\n----------------------------------------\n\nTITLE: Module A Configuration\nDESCRIPTION: Go.mod file for module 'example.com/a' which includes indirect requirements for modules 'b' and 'c'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_unused.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/a\nrequire (\n\texample.com/b v0.1.0 // indirect\n\texample.com/c v0.1.0 // indirect\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Go Fuzzing Minimization Time Constraints\nDESCRIPTION: Tests that validate the behavior when minimization is constrained by a time limit, ensuring that even if minimization is incomplete, the latest crash is logged and written to testdata properly.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_minimize.txt#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Clear the fuzzing cache. There may already be minimized inputs that would\n# interfere with the next stage of the test.\ngo clean -fuzzcache\n\n# Test that minimization can be cancelled by fuzzminimizetime and the latest\n# crash will still be logged and written to testdata.\n! go test -fuzz=FuzzMinimizerRecoverable -run=FuzzMinimizerRecoverable -fuzztime=100x -fuzzminimizetime=1x .\n! stdout '^ok'\nstdout 'testdata[/\\\\]fuzz[/\\\\]FuzzMinimizerRecoverable[/\\\\]'\n! stdout 'got the minimum size!'  # it shouldn't have had enough time to minimize it\nstdout FAIL\n\n# Test that re-running the unminimized value causes a crash.\n! go test -run=FuzzMinimizerRecoverable .\n```\n\n----------------------------------------\n\nTITLE: Simple Go Package with Version Identifier in Return Value\nDESCRIPTION: Implements a simple Go package named 'greeterv2' with a Hello function that returns a string indicating it's version 2. This demonstrates a basic Go package implementation with version information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/gitreposubdirv2.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage greeterv2\n\nfunc Hello() string {\n\treturn \"hello, world v2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PBKDF2 with Generic Types in Go\nDESCRIPTION: New function in the crypto/pbkdf2 package using generic types for hash functions.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nfunc Key[$0 hash.Hash](func() $0, string, []uint8, int, int) ([]uint8, error)\n```\n\n----------------------------------------\n\nTITLE: Specifying Project Version in JSON\nDESCRIPTION: This JSON snippet contains metadata specifying the project or component version as 'v1.0.1-beta'. This format is often used in auxiliary files (like the '.info' file shown) for tracking build or release information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_missingpkg_v1.0.1-beta.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.0.1-beta\"}\n```\n\n----------------------------------------\n\nTITLE: Terminal I/O Control Constants for NetBSD ARM64\nDESCRIPTION: Terminal I/O control constants used for configuring and manipulating terminal devices on NetBSD. These constants are used with ioctl system calls to perform operations like setting terminal modes, flushing terminal buffers, and controlling terminal flags.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_69\n\nLANGUAGE: Go\nCODE:\n```\nconst TCIFLUSH = 1\nconst TCIFLUSH ideal-int\nconst TCIOFLUSH = 3\nconst TCIOFLUSH ideal-int\nconst TCOFLUSH = 2\nconst TCOFLUSH ideal-int\nconst TCSAFLUSH = 2\nconst TCSAFLUSH ideal-int\nconst TIOCCBRK = 536900730\nconst TIOCCBRK ideal-int\nconst TIOCCDTR = 536900728\nconst TIOCCDTR ideal-int\nconst TIOCCONS = 2147775586\nconst TIOCCONS ideal-int\nconst TIOCDCDTIMESTAMP = 1074820184\nconst TIOCDCDTIMESTAMP ideal-int\nconst TIOCDRAIN = 536900702\nconst TIOCDRAIN ideal-int\nconst TIOCEXCL = 536900621\nconst TIOCEXCL ideal-int\nconst TIOCEXT = 2147775584\nconst TIOCEXT ideal-int\nconst TIOCFLAG_CDTRCTS = 16\nconst TIOCFLAG_CDTRCTS ideal-int\nconst TIOCFLAG_CLOCAL = 2\nconst TIOCFLAG_CLOCAL ideal-int\nconst TIOCFLAG_CRTSCTS = 4\nconst TIOCFLAG_CRTSCTS ideal-int\nconst TIOCFLAG_MDMBUF = 8\nconst TIOCFLAG_MDMBUF ideal-int\nconst TIOCFLAG_SOFTCAR = 1\nconst TIOCFLAG_SOFTCAR ideal-int\nconst TIOCFLUSH = 2147775504\nconst TIOCFLUSH ideal-int\nconst TIOCGETA = 1076655123\nconst TIOCGETA ideal-int\nconst TIOCGETD = 1074033690\nconst TIOCGETD ideal-int\nconst TIOCGFLAGS = 1074033757\nconst TIOCGFLAGS ideal-int\nconst TIOCGLINED = 1075868738\nconst TIOCGLINED ideal-int\nconst TIOCGPGRP = 1074033783\nconst TIOCGPGRP ideal-int\nconst TIOCGQSIZE = 1074033793\nconst TIOCGQSIZE ideal-int\nconst TIOCGRANTPT = 536900679\nconst TIOCGRANTPT ideal-int\nconst TIOCGSID = 1074033763\nconst TIOCGSID ideal-int\nconst TIOCGSIZE = 1074295912\nconst TIOCGSIZE ideal-int\nconst TIOCGWINSZ = 1074295912\nconst TIOCGWINSZ ideal-int\nconst TIOCMBIC = 2147775595\nconst TIOCMBIC ideal-int\nconst TIOCMBIS = 2147775596\nconst TIOCMBIS ideal-int\nconst TIOCM_CAR = 64\nconst TIOCM_CAR ideal-int\nconst TIOCM_CD = 64\nconst TIOCM_CD ideal-int\nconst TIOCM_CTS = 32\nconst TIOCM_CTS ideal-int\nconst TIOCM_DSR = 256\nconst TIOCM_DSR ideal-int\nconst TIOCM_DTR = 2\nconst TIOCM_DTR ideal-int\nconst TIOCMGET = 1074033770\nconst TIOCMGET ideal-int\nconst TIOCM_LE = 1\nconst TIOCM_LE ideal-int\nconst TIOCM_RI = 128\nconst TIOCM_RI ideal-int\nconst TIOCM_RNG = 128\nconst TIOCM_RNG ideal-int\nconst TIOCM_RTS = 4\nconst TIOCM_RTS ideal-int\nconst TIOCMSET = 2147775597\nconst TIOCMSET ideal-int\n```\n\n----------------------------------------\n\nTITLE: Go Module B Definition\nDESCRIPTION: Module definition for example.com/b\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_overlay.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/b\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Module for Cleanup Tests\nDESCRIPTION: Defines the Go module for the cleanup test package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_cleanup.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule cleanup\n\ngo 1.15\n```\n\n----------------------------------------\n\nTITLE: Module B v1 Implementation (b1/b.go)\nDESCRIPTION: Implementation file for version 1 of module b, importing module c.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downadd_indirect.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage b\n\nimport _ \"example.com/c\"\n```\n\n----------------------------------------\n\nTITLE: Minimal Vendored Package r\nDESCRIPTION: A minimal vendored package 'r' that only contains a package declaration.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_vendor.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\npackage r\n```\n\n----------------------------------------\n\nTITLE: Baud Rate Constants for Serial Communication\nDESCRIPTION: Defines standard baud rate constants for serial communication on Darwin ARM64. These constants specify communication speeds for serial interfaces.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_52\n\nLANGUAGE: Go\nCODE:\n```\nconst B0 = 0\nconst B110 = 110\nconst B115200 = 115200\nconst B1200 = 1200\nconst B134 = 134\nconst B14400 = 14400\nconst B150 = 150\nconst B1800 = 1800\nconst B19200 = 19200\nconst B200 = 200\nconst B230400 = 230400\n```\n\n----------------------------------------\n\nTITLE: Simple Go Program Using CGO for Testing\nDESCRIPTION: A basic Go program (`main.go`) in package `main`. It imports the pseudo-package `C`, enabling CGO processing. The `main` function simply prints \"ok\" to standard output. This version is intended for use in test scenarios where CGO is enabled.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cwd_newline.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n-- $WORK/main.go --\npackage main\n\nimport \"C\"\n\nfunc main() {\n\t/* nothing here */\n\tprintln(\"ok\")\n}\n```\n\n----------------------------------------\n\nTITLE: Unused Gofmt Script\nDESCRIPTION: Shell script for a gofmt command that echoes a message indicating it is unused.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.freebsd-arm64.txt#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: Module B Configuration\nDESCRIPTION: The go.mod file for the dependency module 'example.com/b', specifying Go version 1.21.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_modules_txt_conditional.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/b\n\ngo 1.21\n```\n\n----------------------------------------\n\nTITLE: Testing 'go mod download' with GOTOOLCHAIN=auto outside a module\nDESCRIPTION: Tests that 'go mod download' with GOTOOLCHAIN=auto correctly switches to a newer toolchain when needed outside a module context.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_exec_toolchain.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nenv GOTOOLCHAIN=auto\ngo mod download rsc.io/needgo121@latest rsc.io/needgo122@latest rsc.io/needgo123@latest rsc.io/needall@latest\nstderr '^go: rsc.io/needall@v0.0.1 requires go >= 1.23; switching to go1.23.9$'\n! stderr '\\(running'\n```\n\n----------------------------------------\n\nTITLE: Dependency Package Definition\nDESCRIPTION: Empty package declaration for package 'dep'\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_pattern_work.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage dep\n```\n\n----------------------------------------\n\nTITLE: Build-Tagged Go Program with Current Directory Import\nDESCRIPTION: A Go program marked with a build tag 'ignore' that imports the current directory as a package. This tests that ignored files can import packages built from non-ignored files in the same directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_local.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// +build ignore\n\npackage main\n\nimport \".\"\n\nfunc main() {\n\teasysub.Hello()\n}\n```\n\n----------------------------------------\n\nTITLE: Generating SVG Graph from Calibration Data in Go\nDESCRIPTION: This command runs a Go program to generate an SVG graph from the calibration CSV data. It visualizes the performance of different threshold values for the Karatsuba multiplication algorithm.\nSOURCE: https://github.com/golang/go/blob/master/src/math/big/calibrate.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo run calibrate_graph.go kmul.csv >kmul.svg\n```\n\n----------------------------------------\n\nTITLE: Defining IP Protocol Constants for darwin-arm64-cgo in Go\nDESCRIPTION: This code snippet defines a comprehensive set of Internet Protocol (IP) protocol constants for the syscall package on darwin-arm64-cgo platform. These constants represent protocol numbers used in socket programming and network communications, with each constant having both a numeric value and an ideal-int type declaration.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_153\n\nLANGUAGE: Go\nCODE:\n```\n// IP protocol constants for darwin-arm64-cgo platform\nconst IPPROTO_AHIP = 61\nconst IPPROTO_APES = 99\nconst IPPROTO_ARGUS = 13\nconst IPPROTO_AX25 = 93\nconst IPPROTO_BHA = 49\nconst IPPROTO_BLT = 30\nconst IPPROTO_BRSATMON = 76\nconst IPPROTO_CFTP = 62\nconst IPPROTO_CHAOS = 16\nconst IPPROTO_CMTP = 38\nconst IPPROTO_CPHB = 73\nconst IPPROTO_CPNX = 72\nconst IPPROTO_DDP = 37\nconst IPPROTO_DGP = 86\nconst IPPROTO_DIVERT = 254\nconst IPPROTO_DONE = 257\nconst IPPROTO_DSTOPTS = 60\nconst IPPROTO_EGP = 8\nconst IPPROTO_EMCON = 14\nconst IPPROTO_ENCAP = 98\nconst IPPROTO_EON = 80\nconst IPPROTO_ESP = 50\nconst IPPROTO_ETHERIP = 97\nconst IPPROTO_FRAGMENT = 44\nconst IPPROTO_GGP = 3\nconst IPPROTO_GMTP = 100\nconst IPPROTO_GRE = 47\nconst IPPROTO_HELLO = 63\nconst IPPROTO_HMP = 20\nconst IPPROTO_HOPOPTS = 0\nconst IPPROTO_ICMP = 1\nconst IPPROTO_ICMPV6 = 58\nconst IPPROTO_IDP = 22\nconst IPPROTO_IDPR = 35\nconst IPPROTO_IDRP = 45\nconst IPPROTO_IGMP = 2\nconst IPPROTO_IGP = 85\nconst IPPROTO_IGRP = 88\nconst IPPROTO_IL = 40\nconst IPPROTO_INLSP = 52\nconst IPPROTO_INP = 32\nconst IPPROTO_IPCOMP = 108\nconst IPPROTO_IPCV = 71\nconst IPPROTO_IPEIP = 94\nconst IPPROTO_IPIP = 4\nconst IPPROTO_IPPC = 67\nconst IPPROTO_IPV4 = 4\nconst IPPROTO_IRTP = 28\nconst IPPROTO_KRYPTOLAN = 65\nconst IPPROTO_LARP = 91\nconst IPPROTO_LEAF1 = 25\nconst IPPROTO_LEAF2 = 26\nconst IPPROTO_MAX = 256\nconst IPPROTO_MAXID = 52\nconst IPPROTO_MEAS = 19\nconst IPPROTO_MHRP = 48\nconst IPPROTO_MICP = 95\nconst IPPROTO_MTP = 92\nconst IPPROTO_MUX = 18\nconst IPPROTO_ND = 77\nconst IPPROTO_NHRP = 54\nconst IPPROTO_NONE = 59\nconst IPPROTO_NSP = 31\nconst IPPROTO_NVPII = 11\nconst IPPROTO_OSPFIGP = 89\nconst IPPROTO_PGM = 113\nconst IPPROTO_PIGP = 9\nconst IPPROTO_PIM = 103\nconst IPPROTO_PRM = 21\nconst IPPROTO_PUP = 12\nconst IPPROTO_PVP = 75\nconst IPPROTO_RAW = 255\nconst IPPROTO_RCCMON = 10\nconst IPPROTO_RDP = 27\nconst IPPROTO_ROUTING = 43\nconst IPPROTO_RSVP = 46\nconst IPPROTO_RVD = 66\nconst IPPROTO_SATEXPAK = 64\nconst IPPROTO_SATMON = 69\nconst IPPROTO_SCCSP = 96\nconst IPPROTO_SCTP = 132\nconst IPPROTO_SDRP = 42\nconst IPPROTO_SEP = 33\nconst IPPROTO_SRPC = 90\nconst IPPROTO_ST = 7\n```\n\n----------------------------------------\n\nTITLE: Build System Test Script\nDESCRIPTION: Shell script testing Go build system behavior with GOCACHE and GOTMPDIR environment variables, including failure cases and command-specific behaviors\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_GOTMPDIR.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n[short] skip 'runs build'\n\n# Set GOCACHE to a clean directory to ensure that 'go build' has work to report.\n[!GOOS:windows] env GOCACHE=$WORK/gocache\n[GOOS:windows] env GOCACHE=$WORK\\gocache\n\n# 'go build' should use GOTMPDIR if set.\n[!GOOS:windows] env GOTMPDIR=$WORK/my-favorite-tmpdir\n[GOOS:windows] env GOTMPDIR=$WORK\\my-favorite-tmpdir\nmkdir $GOTMPDIR\ngo build -x hello.go\nstderr ^WORK=.*my-favorite-tmpdir\n\n# Make GOTMPDIR a regular file. This prevents the creation of work directories,\n# so we can check that certain commands don't create them.\n# This simulates running on a full disk or a read-only volume.\nrm $GOTMPDIR\ncp hello.go $GOTMPDIR # any file will do\n\n# 'go build' should fail if GOTMPDIR is read-only.\n! go build -x .\nstderr '^go: creating work dir: \\w+ '$GOTMPDIR\n\n# 'go list' should only fail if it needs to build something.\ngo list -x .\n! stderr 'creating work dir'\nstdout m\ngo list -m all\nstdout m\n! go list -x -export .\nstderr '^go: creating work dir: \\w+ '$GOTMPDIR\n\n# 'go clean -cache' and 'go clean -modcache' should not fail.\ngo clean -x -cache\n! stderr 'creating work dir'\ngo clean -x -modcache\n! stderr 'creating work dir'\n\n# 'go env' should not fail for specific variables.\n# Without arguments, it needs to initialize a builder to load cgo flags, and\n# that uses a temporary directory.\n! go env\nstderr '^go: creating work dir: \\w+ '$GOTMPDIR\ngo env GOROOT\n```\n\n----------------------------------------\n\nTITLE: Testing Localized Greetings in Go\nDESCRIPTION: Test suite for the Hello function that verifies correct language-specific greeting responses based on provided language preferences.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.99.99.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar helloTests = []struct {\n    prefs []language.Tag\n    text  string\n}{\n    {\n        []language.Tag{language.Make(\"en-US\"), language.Make(\"fr\")},\n        \"Hello, world.\",\n    },\n    {\n        []language.Tag{language.Make(\"fr\"), language.Make(\"en-US\")},\n        \"Bonjour le monde.\",\n    },\n}\n\nfunc TestHello(t *testing.T) {\n    for _, tt := range helloTests {\n        text := Hello(tt.prefs...)\n        if text != tt.text {\n            t.Errorf(\"Hello(%v) = %q, want %q\", tt.prefs, text, tt.text)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Go Fuzzing Test Module Definition\nDESCRIPTION: Module definition file specifying Go version 1.16 requirement\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_deadline.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule fuzz\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Defining Package p\nDESCRIPTION: Creates an empty package 'p' as a placeholder.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_all_gobuild.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage p\n```\n\n----------------------------------------\n\nTITLE: Overlay Configuration JSON\nDESCRIPTION: JSON configuration for file overlays, specifying file replacements and removals.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_overlay.txt#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Replace\": {\n        \"f.go\": \"overlay/f_go\",\n        \"dir/g.go\": \"overlay/dir_g_go\",\n        \"dir2/i.go\": \"overlay/dir2_i_go\",\n        \"dir3/bad.go\": \"\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Package\nDESCRIPTION: This code defines a placeholder for a Go package named 'subpkg'. It is used to represent a package that might be tested or relocated. No specific functionality is implemented.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_split_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage subpkg\n```\n\n----------------------------------------\n\nTITLE: Go Build Cache Test Script\nDESCRIPTION: Shell script that tests Go's build caching behavior using various build commands and verifying compiler/linker execution patterns.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_output.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=off\nenv GODEBUG=gocachetest=1\n\n[!compiler:gc] skip\n[short] skip # clears cache, rebuilds too much\n\n# Set up fresh GOCACHE.\nenv GOCACHE=$WORK/gocache\nmkdir $GOCACHE\n\n# Building a trivial non-main package should run compiler the first time.\ngo build -x -gcflags=-m lib.go\nstderr 'compile( |\\.exe\"?)'\nstderr 'lib.go:2.* can inline f'\n\n# ... but not the second, even though it still prints the compiler output.\ngo build -x -gcflags=-m lib.go\n! stderr 'compile( |\\.exe\"?)'\nstderr 'lib.go:2.* can inline f'\n```\n\n----------------------------------------\n\nTITLE: Updating Logging Functions in Go\nDESCRIPTION: New methods and variables for structured logging in the log/slog package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_15\n\nLANGUAGE: Go\nCODE:\n```\nfunc (*LevelVar) AppendText([]uint8) ([]uint8, error)\nfunc (Level) AppendText([]uint8) ([]uint8, error)\nvar DiscardHandler Handler\n```\n\n----------------------------------------\n\nTITLE: Setting Git Author and Committer Information in Bash\nDESCRIPTION: Sets environment variables for Git author and committer information before creating commits.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/retract-pseudo.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GIT_AUTHOR_NAME='Jay Conrod'\nenv GIT_AUTHOR_EMAIL='jayconrod@google.com'\nenv GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME\nenv GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: A Go module definition file that specifies the module name 'example.com/y' and sets the Go version to 1.16.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_cache.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/y\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Creating Module with Incorrect Module Path\nDESCRIPTION: Adds a go.mod file in the v2 directory without a version in the module path, which is incorrect. Tags this state as v2.0.3.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nat 2018-02-19T18:16:04-05:00\necho 'module \"github.com/rsc/vgotest\" // v2/go.mod'\ncp stdout v2/go.mod\ngit add v2/go.mod\ngit commit -m 'v2/go.mod: bad go.mod (no version)'\ngit tag v2.0.3\n```\n\n----------------------------------------\n\nTITLE: Declaring Go Toolchain Version\nDESCRIPTION: Specifies the Go toolchain version to be used for the project. The version indicates Go 1.18.7 for Linux AMD64 architecture.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.18.7.linux-amd64.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngolang.org/toolchain v0.0.1-go1.18.7.linux-amd64\n```\n\n----------------------------------------\n\nTITLE: Go List Command Test\nDESCRIPTION: Shell command to test go list behavior with readonly mode and error reporting format\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_e_readonly.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo list -mod=readonly -e -deps -f '{{if .Error}}{{.ImportPath}}: {{.Error}}{{end}}' .\n```\n\n----------------------------------------\n\nTITLE: Runtime Frame and Debug Information Structures in Go\nDESCRIPTION: Defines structures for stack frame and debugging information in the runtime package. Includes Frame struct for representing stack frames and related functions for stack trace analysis.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.7.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Frame struct {\n    PC uintptr\n    Func *Func\n    Function string\n    File string\n    Line int\n    Entry uintptr\n}\n\nfunc CallersFrames([]uintptr) *Frames\nfunc KeepAlive(interface{})\nfunc SetCgoTraceback(int, unsafe.Pointer, unsafe.Pointer, unsafe.Pointer)\n```\n\n----------------------------------------\n\nTITLE: Defining Module Path for Go Toolchain\nDESCRIPTION: Module declaration file that defines the module path as 'golang.org/toolchain'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-arm.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Empty Go Package Declaration in y.go\nDESCRIPTION: A Go source file with a lowercase filename (y.go) declaring package x without any content. Creates case-sensitivity conflict with Y.go.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badfile4_v1.0.0.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage x\n```\n\n----------------------------------------\n\nTITLE: Defining dependency module\nDESCRIPTION: Specifies the go.mod file for the example.com/m dependency module with its Go version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_redundant_requirement.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/m\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: Executing Custom Go Version Script\nDESCRIPTION: Shell script that echoes a message indicating the custom Go version (1.999testmod) is being used.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.freebsd-arm64.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n#!/bin/sh\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Exclude Error Message Template\nDESCRIPTION: Error message template for exclude directive violations in go.mod files.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_run_pkg_version.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ngo: example.com/cmd/a@v1.0.0-exclude (in example.com/cmd@v1.0.0-exclude):\n\tThe go.mod file for the module providing named packages contains one or\n\tmore exclude directives. It must not contain directives that would cause\n\tit to be interpreted differently than if it were the main module.\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Version Metadata - JSON\nDESCRIPTION: This snippet provides module version metadata for the Go toolchain in a machine-readable JSON object. It includes a single 'Version' key containing the toolchain's semantic version identifier, which is essential for tools that verify or resolve Go dependencies. No external dependencies are required to parse this JSON, but consumers should expect only metadata fields.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.23.9.linux-amd64.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\\"Version\\\":\\\"v0.0.1-go1.23.9.linux-amd64\\\"}\n```\n\n----------------------------------------\n\nTITLE: Go Test for Package with Assembly Function\nDESCRIPTION: A test file that calls the Go function 'g' but not the assembly function 'f', used to validate the coverage reporting behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_asm.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\tg()\n}\n```\n\n----------------------------------------\n\nTITLE: Vendored Package Definition\nDESCRIPTION: Definition of vendored package 'x' in the vendor directory\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_resolve.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage x\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines a Go module with version 1.22.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_commandline.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/m\n\ngo 1.22.0\n```\n\n----------------------------------------\n\nTITLE: NetBSD ARM64 Resource Limit Structure Definition in Go\nDESCRIPTION: Defines the Rlimit structure for setting resource limits on processes. Contains fields for current and maximum limit values.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_97\n\nLANGUAGE: go\nCODE:\n```\ntype Rlimit struct {\n\tCur uint64\n\tMax uint64\n}\n```\n\n----------------------------------------\n\nTITLE: NetBSD ARM64 Network Interface Structures Definition in Go\nDESCRIPTION: Defines several structures for network interface management including IfData, IfMsghdr, IfaMsghdr, and IfAnnounceMsghdr. These structures are used for sending and receiving routing socket messages.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_93\n\nLANGUAGE: go\nCODE:\n```\ntype IfData struct {\n\tType uint8\n\tAddrlen uint8\n\tHdrlen uint8\n\tPad_cgo_0 [1]uint8\n\tLink_state int32\n\tMtu uint64\n\tMetric uint64\n\tBaudrate uint64\n\tIpackets uint64\n\tIerrors uint64\n\tOpackets uint64\n\tOerrors uint64\n\tCollisions uint64\n\tIbytes uint64\n\tObytes uint64\n\tImcasts uint64\n\tOmcasts uint64\n\tIqdrops uint64\n\tNoproto uint64\n\tLastchange Timespec\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Process Tracing Constants (PTRACE_*, PT_*) in Go for darwin-arm64\nDESCRIPTION: Constants for process tracing operations used with ptrace(2) system calls. These flags control process debugging operations including attaching to processes, reading and writing memory, and controlling execution.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_89\n\nLANGUAGE: Go\nCODE:\n```\nconst PTRACE_CONT = 7\nconst PTRACE_CONT ideal-int\nconst PTRACE_KILL = 8\nconst PTRACE_KILL ideal-int\nconst PTRACE_TRACEME = 0\nconst PTRACE_TRACEME ideal-int\nconst PT_ATTACH = 10\nconst PT_ATTACH ideal-int\nconst PT_ATTACHEXC = 14\nconst PT_ATTACHEXC ideal-int\nconst PT_CONTINUE = 7\nconst PT_CONTINUE ideal-int\nconst PT_DENY_ATTACH = 31\nconst PT_DENY_ATTACH ideal-int\nconst PT_DETACH = 11\nconst PT_DETACH ideal-int\nconst PT_FIRSTMACH = 32\nconst PT_FIRSTMACH ideal-int\nconst PT_FORCEQUOTA = 30\nconst PT_FORCEQUOTA ideal-int\nconst PT_KILL = 8\nconst PT_KILL ideal-int\nconst PT_READ_D = 2\nconst PT_READ_D ideal-int\nconst PT_READ_I = 1\nconst PT_READ_I ideal-int\nconst PT_READ_U = 3\nconst PT_READ_U ideal-int\nconst PT_SIGEXC = 12\nconst PT_SIGEXC ideal-int\nconst PT_STEP = 9\nconst PT_STEP ideal-int\nconst PT_THUPDATE = 13\nconst PT_THUPDATE ideal-int\nconst PT_TRACE_ME = 0\nconst PT_TRACE_ME ideal-int\nconst PT_WRITE_D = 5\nconst PT_WRITE_D ideal-int\nconst PT_WRITE_I = 4\nconst PT_WRITE_I ideal-int\nconst PT_WRITE_U = 6\nconst PT_WRITE_U ideal-int\n```\n\n----------------------------------------\n\nTITLE: Getting Module Information from Shared Object\nDESCRIPTION: This snippet extracts module dependency information from the `external.so` file using `go version -m`. The expected output includes the module path and version of the dependency. The `stdout` lines assert that the module path and version are correctly extracted.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_cshared.txt#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngo version -m external.so\nstdout '^\\tpath\\trsc.io/fortune'\nstdout '^\\tmod\\trsc.io/fortune\\tv1.0.0'\n```\n\n----------------------------------------\n\nTITLE: Package Import Test Configuration\nDESCRIPTION: Go source file defining a package 'b' with an import of package 'c/d'\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_importmap.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage b\n\nimport _ \"c/d\"\n```\n\n----------------------------------------\n\nTITLE: External Test File for Cgo Coverage\nDESCRIPTION: An external test file (in the p_test package) that imports and calls the package function to ensure coverage is measured correctly.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_cgo_extra_test.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage p_test\n\nimport (\n\t. \"cgocover3\"\n\t\"testing\"\n)\n\nfunc TestF(t *testing.T) {\n\tF()\n}\n```\n\n----------------------------------------\n\nTITLE: Template Parse Node Types and Methods\nDESCRIPTION: Defines new node types (BreakNode and ContinueNode) for template parsing with their associated constants and methods. These nodes represent break and continue statements in templates.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.18.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nconst NodeBreak NodeType = 21\nconst NodeContinue NodeType = 22\n\ntype BreakNode struct {\n    NodeType\n    Pos\n    Line int\n}\n\ntype ContinueNode struct {\n    NodeType\n    Pos\n    Line int\n}\n```\n\n----------------------------------------\n\nTITLE: Go Command Shell Script Implementation\nDESCRIPTION: Shell script for the 'go' command that outputs a version identifier message. This script serves as a placeholder or test implementation for the Go command.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-riscv64.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Running Go Test with Specific Pattern\nDESCRIPTION: This command runs a Go test, filtering for a specific subtest pattern that doesn't match any tests. It expects no tests to run.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_no_subtests_parallel.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo test -run Test/Sub/ThisWillNotMatch standalone_parallel_sub_test.go\n```\n\n----------------------------------------\n\nTITLE: Structure Definitions for OpenBSD in Go\nDESCRIPTION: Defines various system structures used in OpenBSD syscalls. These structures represent file descriptors, events, statistics, and terminal configurations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_57\n\nLANGUAGE: Go\nCODE:\n```\ntype Dirent struct {\n    Fileno uint64\n    Off int64\n    X__d_padding [4]uint8\n    // Other fields not shown\n}\n\ntype FdSet struct {\n    Bits [32]uint32\n}\n\ntype Kevent_t struct {\n    Ident uint64\n    Data int64\n    // Other fields not shown\n}\n\ntype Mclpool struct {\n    Grown int32\n    // Other fields not shown\n}\n\ntype RtMetrics struct {\n    Expire int64\n    Pad uint32\n    // Other fields not shown\n}\n\ntype Stat_t struct {\n    Ino uint64\n    Pad_cgo_0 [4]uint8\n    // Other fields not shown\n}\n\ntype Statfs_t struct {\n    F_ctime uint64\n    F_mntfromspec [90]int8\n    Pad_cgo_1 [2]uint8\n    // Other fields not shown\n}\n\ntype Termios struct {\n    Iflag uint32\n    Oflag uint32\n    Cflag uint32\n    Lflag uint32\n    Cc [20]uint8\n    Ispeed int32\n    Ospeed int32\n}\n\ntype Timespec struct {\n    Sec int64\n    // Other fields not shown\n}\n```\n\n----------------------------------------\n\nTITLE: Main Package with Various Import Statements\nDESCRIPTION: The main package 'x' that imports various packages from different locations, including vendored and non-vendored imports, testing Go's import resolution rules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_vendor.txt#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\npackage x\n\nimport _ \"p\"\nimport _ \"q\"\nimport _ \"r\"\nimport _ \"vend/dir1\"      // not vendored\nimport _ \"vend/dir1/dir2\" // vendored\n```\n\n----------------------------------------\n\nTITLE: Testing 'go list -deps -test all x/otherroot' Dependency Resolution (Shell)\nDESCRIPTION: Runs `go list -deps -test` with the `all` pattern and an additional root pattern `x/otherroot`. It uses `stdout` and `! stdout` commands to assert which packages should and should not be included. This test verifies that with the `-test` flag, test dependencies of *all* specified roots (`all` and `x/otherroot`) are included, but test dependencies of non-root packages (like `x/otherdep`, which imports `y/fromotherdeptest`) are still excluded. It compares the go.mod file to ensure it hasn't been modified.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_notall.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# With -deps -test, test dependencies of other roots should be included,\n# but test dependencies of non-roots should not.\n\ngo list -deps -test all x/otherroot\nstdout '^x/inall$'\nstdout '^x/inall/fromtest$'\nstdout '^x/inall/fromtestinall$'\nstdout '^x/otherroot$'\nstdout '^x/otherdep$'\n\nstdout '^x/fromotherroottest$'\n! stdout '^y/fromotherdeptest$'\n\ncmp go.mod go.mod.orig\n```\n\n----------------------------------------\n\nTITLE: Deprecations in net packages\nDESCRIPTION: Lists deprecated struct fields, methods, types, and variables in net packages.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_25\n\nLANGUAGE: Go\nCODE:\n```\npkg net, type Dialer struct, Cancel //deprecated\npkg net, type Dialer struct, DualStack //deprecated\npkg net/http, method (*Transport) CancelRequest //deprecated\npkg net/http, type CloseNotifier //deprecated\npkg net/http, type ProtocolError //deprecated\npkg net/http, type Request struct, Cancel //deprecated\npkg net/http, type Transport struct, Dial //deprecated\npkg net/http, type Transport struct, DialTLS //deprecated\npkg net/http, var ErrHeaderTooLong //deprecated\npkg net/http, var ErrMissingContentLength //deprecated\npkg net/http, var ErrShortBody //deprecated\npkg net/http, var ErrUnexpectedTrailer //deprecated\npkg net/http, var ErrWriteAfterFlush //deprecated\npkg net/http/httptest, type ResponseRecorder struct, HeaderMap //deprecated\npkg net/http/httputil, func NewClientConn //deprecated\npkg net/http/httputil, func NewProxyClientConn //deprecated\npkg net/http/httputil, func NewServerConn //deprecated\npkg net/http/httputil, type ClientConn //deprecated\npkg net/http/httputil, type ServerConn //deprecated\npkg net/http/httputil, var ErrClosed //deprecated\npkg net/http/httputil, var ErrPersistEOF //deprecated\npkg net/http/httputil, var ErrPipeline //deprecated\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition for Other Module Test\nDESCRIPTION: Defines a Go module named 'example.com/othermodule' for testing module resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dot.txt#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/othermodule\ngo 1.13\n```\n\n----------------------------------------\n\nTITLE: Mercurial Repository Reference Files\nDESCRIPTION: Reference files containing the expected output from Mercurial branch, tag, and bookmark commands for verification purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/hg/hgrepo1.txt#2025-04-22_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\n-- .hg-branches --\nv2.3.4                         9:18518c07eb8e\nv3                             7:a2cad8a2b1bb\nv2                             6:9a4f43d231ec\n-- .hg-tags --\ntip                                9:18518c07eb8e\nv2.0.2                             3:8f49ee7a6ddc\nv2.3                               1:88fde824ec8b\nv2.0.1                             1:88fde824ec8b\nv1.2.4-annotated                   0:41964ddce118\nv1.2.3                             0:41964ddce118\n-- .hg-bookmarks --\n   master                    0:41964ddce118\n   v2                        3:8f49ee7a6ddc\n   v2.3.4                    1:88fde824ec8b\n```\n\n----------------------------------------\n\nTITLE: Defining Routing Flag Constants in Go for Darwin ARM64 CGO\nDESCRIPTION: This snippet defines constants for routing flags used in system calls on Darwin ARM64 with CGO. These constants are used to specify various routing options and behaviors.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_174\n\nLANGUAGE: Go\nCODE:\n```\nconst RTF_BLACKHOLE = 4096\nconst RTF_BLACKHOLE ideal-int\nconst RTF_BROADCAST = 4194304\nconst RTF_BROADCAST ideal-int\nconst RTF_CLONING = 256\nconst RTF_CLONING ideal-int\nconst RTF_CONDEMNED = 33554432\nconst RTF_CONDEMNED ideal-int\nconst RTF_DELCLONE = 128\nconst RTF_DELCLONE ideal-int\nconst RTF_DONE = 64\nconst RTF_DONE ideal-int\nconst RTF_DYNAMIC = 16\nconst RTF_DYNAMIC ideal-int\nconst RTF_GATEWAY = 2\nconst RTF_GATEWAY ideal-int\nconst RTF_HOST = 4\nconst RTF_HOST ideal-int\nconst RTF_IFREF = 67108864\nconst RTF_IFREF ideal-int\nconst RTF_IFSCOPE = 16777216\nconst RTF_IFSCOPE ideal-int\nconst RTF_LLINFO = 1024\nconst RTF_LLINFO ideal-int\nconst RTF_LOCAL = 2097152\nconst RTF_LOCAL ideal-int\nconst RTF_MODIFIED = 32\nconst RTF_MODIFIED ideal-int\nconst RTF_MULTICAST = 8388608\nconst RTF_MULTICAST ideal-int\nconst RTF_PINNED = 1048576\nconst RTF_PINNED ideal-int\nconst RTF_PRCLONING = 65536\nconst RTF_PRCLONING ideal-int\nconst RTF_PROTO1 = 32768\nconst RTF_PROTO1 ideal-int\n```\n\n----------------------------------------\n\nTITLE: Importing Dot-Go Suffix Package in Go\nDESCRIPTION: This Go file demonstrates the usage of the 'example.com/dotgo.go' package by importing it as a side-effect-only import.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_trailing_slash.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\npackage use\n\nimport _ \"example.com/dotgo.go\"\n```\n\n----------------------------------------\n\nTITLE: Main Path Volume Manipulation Program\nDESCRIPTION: Main program that handles path volume modifications and executes a child Go program. Takes GOPATH arguments, modifies volume cases, and executes a vendored package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_gopath_issue11409.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\t\"strings\"\n)\n\nfunc changeVolume(s string, f func(s string) string) string {\n\tvol := filepath.VolumeName(s)\n\treturn f(vol) + s[len(vol):]\n}\n\nfunc main() {\n\tgopath := changeVolume(os.Args[1], strings.ToLower)\n\tdir := changeVolume(os.Args[2], strings.ToUpper)\n\tcmd := exec.Command(\"go\", \"run\", \"hello.go\")\n\tcmd.Dir = dir\n\tcmd.Env = append(os.Environ(), \"GOPATH=\"+gopath)\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n\tif err := cmd.Run(); err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Error Constants in Go for NetBSD ARM64\nDESCRIPTION: This snippet defines error constants used in system programming on NetBSD ARM64. These constants represent various error conditions that can occur during system calls or operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_125\n\nLANGUAGE: Go\nCODE:\n```\nconst ETIME = 92\nconst ETIMEDOUT = 60\nconst ETIME Errno\nconst ETOOMANYREFS = 59\nconst ETXTBSY = 26\nconst EUSERS = 68\n```\n\n----------------------------------------\n\nTITLE: Original C Implementation Before Overlay\nDESCRIPTION: Original version of the C implementation file before being replaced by the overlay. Implements say_goodbye instead of the required say_hello function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_overlay.txt#2025-04-22_snippet_13\n\nLANGUAGE: c\nCODE:\n```\n#include <stdio.h>\n\nvoid say_goodbye() { puts(\"goodbye cgo\\n\"); fflush(stdout); }\n```\n\n----------------------------------------\n\nTITLE: Go Workspace Configuration\nDESCRIPTION: Workspace configuration file specifying Go version 1.18 and including modules a and b\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_irrelevant_dependency.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\n\nuse (\n\t./a\n\t./b\n)\n```\n\n----------------------------------------\n\nTITLE: Package p1 Implementation (p1.go)\nDESCRIPTION: Supporting package p1 implementation with identical function F returning integer 1.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_relative_cmdline.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage p1\n\nfunc F() int { return 1 }\n```\n\n----------------------------------------\n\nTITLE: Defining a Minimal Go Main Package (Go)\nDESCRIPTION: This Go source file defines a minimal executable program in package `y`. It contains only an empty `main` function. This file (`y/y.go`) serves as a valid target for the `go build` command used in the test script.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/devnull.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage y\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Package Y with External Import\nDESCRIPTION: Package 'y' importing package 'x' using bare import path\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_resolve.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage y\n\nimport _ \"x\"\n```\n\n----------------------------------------\n\nTITLE: Go Fuzzing Deadline Test Implementation\nDESCRIPTION: Test implementation that verifies deadline detection in fuzzing functions. Uses command line flags to control expected deadline behavior and tests various timeout configurations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_deadline.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage fuzz_test\n\nimport (\n\t\"flag\"\n\t\"testing\"\n)\n\nvar wantDeadline = flag.Bool(\"wantdeadline\", false, \"whether the test should have a deadline\")\n\nfunc FuzzDeadline(f *testing.F) {\n\tf.Add(\"run once\")\n\tf.Fuzz(func (t *testing.T, _ string) {\n\t\tif _, hasDeadline := t.Deadline(); hasDeadline != *wantDeadline {\n\t\t\tt.Fatalf(\"function got %v; want %v\", hasDeadline, *wantDeadline)\n\t\t}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NetBSD ARM64 Routing Constants in Go Syscall Package\nDESCRIPTION: Routing message constants used for NetBSD network route management. These constants define various routing operations like adding, changing, and deleting routes, as well as interface announcements and information queries.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_52\n\nLANGUAGE: Go\nCODE:\n```\nconst RTM_ADD ideal-int\nconst RTM_CHANGE = 3\nconst RTM_CHANGE ideal-int\nconst RTM_CHGADDR = 21\nconst RTM_CHGADDR ideal-int\nconst RTM_DELADDR = 13\nconst RTM_DELADDR ideal-int\nconst RTM_DELETE = 2\nconst RTM_DELETE ideal-int\nconst RTM_GET = 4\nconst RTM_GET ideal-int\nconst RTM_IEEE80211 = 17\nconst RTM_IEEE80211 ideal-int\nconst RTM_IFANNOUNCE = 16\nconst RTM_IFANNOUNCE ideal-int\nconst RTM_IFINFO = 20\nconst RTM_IFINFO ideal-int\nconst RTM_LLINFO_UPD = 19\nconst RTM_LLINFO_UPD ideal-int\nconst RTM_LOCK = 8\nconst RTM_LOCK ideal-int\nconst RTM_LOSING = 5\nconst RTM_LOSING ideal-int\nconst RTM_MISS = 7\nconst RTM_MISS ideal-int\nconst RTM_NEWADDR = 12\nconst RTM_NEWADDR ideal-int\nconst RTM_OIFINFO = 15\nconst RTM_OIFINFO ideal-int\nconst RTM_OLDADD = 9\nconst RTM_OLDADD ideal-int\nconst RTM_OLDDEL = 10\nconst RTM_OLDDEL ideal-int\nconst RTM_OOIFINFO = 14\nconst RTM_OOIFINFO ideal-int\nconst RTM_REDIRECT = 6\nconst RTM_REDIRECT ideal-int\nconst RTM_RESOLVE = 11\nconst RTM_RESOLVE ideal-int\nconst RTM_RTTUNIT = 1000000\nconst RTM_RTTUNIT ideal-int\nconst RTM_SETGATE = 18\nconst RTM_SETGATE ideal-int\nconst RTM_VERSION = 4\nconst RTM_VERSION ideal-int\n```\n\n----------------------------------------\n\nTITLE: Testing Package Resolution in Alternative GOROOT\nDESCRIPTION: Tests package resolution behavior in a different GOROOT to ensure it doesn't get the special treatment of the main GOROOT.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dot.txt#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# golang.org/issue/30756: packages in other GOROOTs should not get the special\n# prefixless treatment of GOROOT itself.\ncd $WORK/othergoroot/src\n! go list .\nstderr '^no Go files in '$WORK'[/\\\\]othergoroot[/\\\\]src$'\n\ngo list ./builtin\nstdout '^std/builtin$'  # Only the \"std\" in actual $GOROOT is special, and only its \"builtin\" is special.\n\n! go list ./bytes\n! stderr 'cannot find module providing package'\nstderr '^no Go files in '$WORK'[/\\\\]othergoroot[/\\\\]src[/\\\\]bytes$'\n\n! go list ./vendor/golang.org/x/net/http2/hpack\nstderr '^without -mod=vendor, directory '$WORK'[/\\\\]othergoroot[/\\\\]src[/\\\\]vendor[/\\\\]golang.org[/\\\\]x[/\\\\]net[/\\\\]http2[/\\\\]hpack has no package path$'\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: A minimal Go module definition for the test package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_cov.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule test\n```\n\n----------------------------------------\n\nTITLE: Setting Environment and Running go list Concurrently - Shell\nDESCRIPTION: Configures the Go environment by enabling modules (GO111MODULE=on), sets up a dedicated GOCACHE, and launches two background processes to run 'go list' with various flags for regression test purposes. The code also includes conditional skips and background execution with 'wait'. Designed to uncover cache-related issues in Go's build system when running concurrent list operations. Requires Go tools available in the PATH and directory write permissions for $WORK/gocache.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_compiled_concurrent.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n\n[short] skip\n[!cgo] skip\n\n# Regression test for golang.org/issue/29667:\n# spurious 'failed to cache compiled Go files' errors.\n\nenv GOCACHE=$WORK/gocache\nmkdir $GOCACHE\n\ngo list -json -compiled -test=false -export=false -deps=true -- . &\ngo list -json -compiled -test=false -export=false -deps=true -- . &\nwait\n```\n\n----------------------------------------\n\nTITLE: Module D2 Configuration\nDESCRIPTION: Go.mod file for the second replacement of module 'd' (v0.2.0).\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_unused.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/d\n```\n\n----------------------------------------\n\nTITLE: Dependency Module Definition\nDESCRIPTION: Secondary go.mod file for the replaced module 'example.com/r' requiring rsc.io/quote v1.5.0\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_old.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/r\n\nrequire rsc.io/quote v1.5.0\n```\n\n----------------------------------------\n\nTITLE: Defining Available Pseudo-Versions in Tiny Proxy\nDESCRIPTION: Defines the content of the file '$WORK/tinyproxy/dmitri.shuralyov.com/test/modtest3/@v/list'. This file simulates the list of available versions provided by a module proxy for 'modtest3', containing only pseudo-versions. It serves as input data for the second test scenario.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_pseudo.txt#2025-04-22_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n-- $WORK/tinyproxy/dmitri.shuralyov.com/test/modtest3/@v/list --\nv0.1.0-0.20161023043300-000000000000\nv0.0.0-20181023043359-a85b471d5412\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: This go.mod file defines the module for the project. It's a minimal module definition without any dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/embed_fmt.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Testing Sumdb Disagreement in Go Module Fetching\nDESCRIPTION: Tests the behavior when the sumdb disagrees with the module checksum. Expects a security error when attempting to get rsc.io/quote package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gonoproxy.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncp go.mod.orig go.mod\nenv GOSUMDB=$sumdb' '$proxy/sumdb-wrong\n! go get rsc.io/quote\nstderr 'SECURITY ERROR'\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines a Go module with name vcs-test.golang.org/go/gitreposubdir and Go version requirement\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/gitreposubdir.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule vcs-test.golang.org/go/gitreposubdir\n\ngo 1.23\n```\n\n----------------------------------------\n\nTITLE: Direct Dependency Module Definition\nDESCRIPTION: Expected go.mod file state after removing the indirect comment.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_nospace.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/m\n\ngo 1.16\n\nrequire example.net/x v0.1.0\n\nreplace example.net/x v0.1.0 => ./x\n```\n\n----------------------------------------\n\nTITLE: Simple Package Declaration Y\nDESCRIPTION: Basic Go package declaration for package y\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_find.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage y\n```\n\n----------------------------------------\n\nTITLE: Defining File Operation Constants (O_*) in Go for darwin-arm64\nDESCRIPTION: Constants for file opening and control operations. These flags are used with open(2) and similar system calls to specify file access modes, creation behavior, synchronization requirements, and other file operation attributes.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_85\n\nLANGUAGE: Go\nCODE:\n```\nconst O_ACCMODE = 3\nconst O_ACCMODE ideal-int\nconst O_ALERT = 536870912\nconst O_ALERT ideal-int\nconst O_APPEND = 8\nconst O_ASYNC = 64\nconst O_CLOEXEC = 16777216\nconst O_CREAT = 512\nconst O_DIRECTORY = 1048576\nconst O_DIRECTORY ideal-int\nconst O_DP_GETRAWENCRYPTED = 1\nconst O_DP_GETRAWENCRYPTED ideal-int\nconst O_DSYNC = 4194304\nconst O_DSYNC ideal-int\nconst O_EVTONLY = 32768\nconst O_EVTONLY ideal-int\nconst O_EXCL = 2048\nconst O_EXLOCK = 32\nconst O_EXLOCK ideal-int\nconst O_FSYNC = 128\nconst O_FSYNC ideal-int\nconst O_NDELAY = 4\nconst O_NDELAY ideal-int\nconst O_NOCTTY = 131072\nconst O_NOFOLLOW = 256\nconst O_NOFOLLOW ideal-int\nconst O_NONBLOCK = 4\nconst O_POPUP = 2147483648\nconst O_POPUP ideal-int\nconst O_SHLOCK = 16\nconst O_SHLOCK ideal-int\nconst O_SYMLINK = 2097152\nconst O_SYMLINK ideal-int\nconst O_SYNC = 128\nconst O_TRUNC = 1024\n```\n\n----------------------------------------\n\nTITLE: Go Package with Invalid Absolute Path Import\nDESCRIPTION: A Go source file that intentionally includes an invalid import statement using an absolute path '/'. This demonstrates the problematic import that should trigger an error rather than an infinite loop.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_issue42891.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage m\n\nimport \"/\"\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition in .mod File\nDESCRIPTION: Defines the module name in the .mod file for the Go toolchain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-loong64.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Compiler Behavior Control Flags\nDESCRIPTION: Flags to modify compiler behavior like error handling and pointer checking\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ go tool compile -h file.go\n$ go build -gcflags=-d=checkptr=2\n```\n\n----------------------------------------\n\nTITLE: Importing Dependency in Module 'c' Version 2\nDESCRIPTION: This Go file for module 'c' version 2 imports dependency 'd' as a blank import.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_pseudo_artifact.txt#2025-04-22_snippet_12\n\nLANGUAGE: Go\nCODE:\n```\npackage c\n\nimport _ \"example.net/d\"\n```\n\n----------------------------------------\n\nTITLE: Defining Expected Module Version List for modtest5\nDESCRIPTION: Defines the content of the file '$WORK/modtest5.list'. This file lists the specific versions of 'github.com/dmitshur-test/modtest5' expected to be present in the module cache/proxy list file. It is used by the 'cmp' command for verification.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_pseudo.txt#2025-04-22_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n-- $WORK/modtest5.list --\nv0.0.0-20190619020302-197a620e0c9a\nv0.5.0-alpha\nv0.5.0-alpha.0.20190619023908-3da23a9deb9e\n```\n\n----------------------------------------\n\nTITLE: Version Info JSON for Test Toolchain\nDESCRIPTION: JSON file (.info) containing version information for the mock toolchain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-amd64.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.999testmod.openbsd-amd64\"}\n```\n\n----------------------------------------\n\nTITLE: Terminal Control Constants for Darwin ARM64\nDESCRIPTION: Defines terminal control constants for input/output processing, including character size, stop bits, and local modes\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_55\n\nLANGUAGE: Go\nCODE:\n```\nconst (\n    BRKINT = 2\n    CLOCAL = 32768\n    CREAD = 2048\n    CS5 = 0\n    CS6 = 256\n    CS7 = 512\n    CS8 = 768\n    CSIZE = 768\n    // ... other terminal constants\n)\n```\n\n----------------------------------------\n\nTITLE: File and Type Methods in Go Libraries\nDESCRIPTION: Defines File and Package types along with various methods within the go/token, go/types, and go/ast packages. The methods encapsulated include Lines for token files and the GoVersion method for package types, supporting detailed connectivity or parsing operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.21.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\npkg go/token, method (*File) Lines() []int #57708\n```\n\nLANGUAGE: Go\nCODE:\n```\npkg go/types, method (*Package) GoVersion() string #61175\n```\n\n----------------------------------------\n\nTITLE: Testing 'go mod download' with GOTOOLCHAIN=min+auto outside a module\nDESCRIPTION: Tests that 'go mod download' with GOTOOLCHAIN=go1.21+auto correctly switches to a newer toolchain when needed outside a module context.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_exec_toolchain.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nenv GOTOOLCHAIN=go1.21+auto\ngo mod download rsc.io/needgo121@latest rsc.io/needgo122@latest rsc.io/needgo123@latest rsc.io/needall@latest\nstderr '^go: rsc.io/needall@v0.0.1 requires go >= 1.23; switching to go1.23.9$'\n! stderr '\\(running'\n```\n\n----------------------------------------\n\nTITLE: Plain Text Format List Marker Tests\nDESCRIPTION: Plain text version of list marker test cases with consistent tab indentation.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list7.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n\t-\n\n❦\n\n\t-\n\n❦\n\n\t-\n\n❦\n\n❦\n\n\t1! List.\n\n❦\n```\n\n----------------------------------------\n\nTITLE: Specifying Go Toolchain Version Metadata - Go - json\nDESCRIPTION: This JSON snippet provides the exact version information of the toolchain as required by Go module systems. The 'Version' field declares the pseudo-version and platform variant for this build. This is used by tools and scripts to confirm binary compatibility. No additional dependencies or inputs are required; outputs are only programmatic consumption of this metadata.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.freebsd-riscv64.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\\"Version\\\":\\\"v0.0.1-go1.999testmod.freebsd-riscv64\\\"}\n```\n\n----------------------------------------\n\nTITLE: Simple Package Z1 Implementation\nDESCRIPTION: Basic Go package Z1 with imports for packages y and z2.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gcflags_patterns.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage z1\nimport _ \"y\"\nimport _ \"z2\"\n```\n\n----------------------------------------\n\nTITLE: Raw Input Format with Markdown References\nDESCRIPTION: Shows the raw input format with reference-style markdown link syntax\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/linklist4.txt#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nCool things:\n\n  - Foo\n  - [Go] is great\n    \n    [Go]: https://go.dev/\n  - Bar\n```\n\n----------------------------------------\n\nTITLE: Defining IP Address Class Constants in Go for NetBSD ARM64\nDESCRIPTION: This snippet defines constants related to IP address classes (IN_CLASS*) used in the syscall package for NetBSD ARM64 with CGO. These constants are used for IP address manipulation and network calculations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_30\n\nLANGUAGE: Go\nCODE:\n```\nconst IN_CLASSA_HOST = 16777215\nconst IN_CLASSA_HOST ideal-int\nconst IN_CLASSA_MAX = 128\nconst IN_CLASSA_MAX ideal-int\nconst IN_CLASSA_NET = 4278190080\nconst IN_CLASSA_NET ideal-int\n// ... more IN_CLASS* constants\n```\n\n----------------------------------------\n\nTITLE: Mock Clang Compiler Batch Script (Batch)\nDESCRIPTION: This Windows batch script acts as a placeholder for the `clang` compiler. If executed, it writes \"ran clang\" to `bug.txt`. Similar to the mock `gcc.bat` script, the test uses this on Windows to ensure correct compiler path lookup behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_path.txt#2025-04-22_snippet_7\n\nLANGUAGE: batch\nCODE:\n```\n-- p/clang.bat --\necho ran clang >bug.txt\n```\n\n----------------------------------------\n\nTITLE: Expvar Package Functions and Methods\nDESCRIPTION: Defines functions and methods for the expvar package which provides a standardized interface to public variables for monitoring and debugging. Includes handlers and value accessors.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.8.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// expvar functions and methods\nfunc Handler() http.Handler\nfunc (*Float) Value() float64\nfunc (Func) Value() interface{}\nfunc (*Int) Value() int64\nfunc (*String) Value() string\n```\n\n----------------------------------------\n\nTITLE: Asserting Expected Stderr Output (Shell/Test)\nDESCRIPTION: Asserts that the preceding 'go list' command (which is expected to fail) produces a specific error message on stderr. This confirms the reason for the failure is the inability to find the root package in readonly mode.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_sum_noroot.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nstderr '^cannot find module providing package rsc.io/QUOTE: import lookup disabled by -mod=readonly$'\n```\n\n----------------------------------------\n\nTITLE: Regular Package in Test-Named Directory\nDESCRIPTION: A Go package declaration for package 'd' located in a directory named 'd_test'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test.txt#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\npackage d\n```\n\n----------------------------------------\n\nTITLE: Go Module Version 2 Executable Name Check\nDESCRIPTION: A v2 version of the tool program that prints its executable name, used to test module versioning impact on tool naming.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/tool_exename.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"path/filepath\"\n)\n\nfunc main() {\n\tfmt.Println(\"my name is:\", filepath.Base(os.Args[0]))\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Build Command with Non-existent Packages\nDESCRIPTION: This snippet tests the 'go build' command with non-existent packages and verifies that appropriate error messages are displayed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_bad_domain.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n! go build ./useappengine\nstderr '^useappengine[/\\\\]x.go:2:8: cannot find package$'\n! go build ./usenonexistent\nstderr '^usenonexistent[/\\\\]x.go:2:8: no required module provides package nonexistent.rsc.io; to add it:\\n\\tgo get nonexistent.rsc.io$'\n```\n\n----------------------------------------\n\nTITLE: Verifying Generated Code Comment in Go Test Main File\nDESCRIPTION: Go test function that checks whether the auto-generated _testmain.go file includes the expected generated code comment. The test locates the executable's directory, finds the _testmain.go file, and uses regex to check for the presence of the generated code comment line.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_generated_main.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage x\n\nimport (\n\t\"os\"\n\t\"path/filepath\"\n\t\"regexp\"\n\t\"testing\"\n)\n\nfunc Test(t *testing.T) {\n\texePath, err := os.Executable()\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\ttestmainPath := filepath.Join(filepath.Dir(exePath), \"_testmain.go\")\n\tsource, err := os.ReadFile(testmainPath)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tif matched, err := regexp.Match(`(?m)^// Code generated .* DO NOT EDIT\\.$`, source); err != nil {\n\t\tt.Fatal(err)\n\t} else if !matched {\n\t\tt.Error(\"_testmain.go does not have generated code comment\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Module Dependencies in Go\nDESCRIPTION: This command attempts to update all module dependencies to their latest versions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_upgrade_pseudo.txt#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngo get -u\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Fetch with Working Proxy\nDESCRIPTION: Fetches a module through a working proxy. Expects the command to succeed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_cache.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncp go.mod.orig go.mod\nrm go.sum\nenv GOPROXY=$proxy\ngo get rsc.io/quote\n```\n\n----------------------------------------\n\nTITLE: Database SQL Null Types Implementation\nDESCRIPTION: Implementation of Null types for database operations that can handle NULL values from SQL databases. Includes NullInt32 and NullTime with Scan and Value methods for database I/O.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nmethod (*Conn) Raw(func(interface{}) error) error\nmethod (*NullInt32) Scan(interface{}) error\nmethod (NullInt32) Value() (driver.Value, error)\nmethod (*NullTime) Scan(interface{}) error\nmethod (NullTime) Value() (driver.Value, error)\ntype NullInt32 struct\ntype NullInt32 struct, Int32 int32\ntype NullInt32 struct, Valid bool\ntype NullTime struct\ntype NullTime struct, Time time.Time\ntype NullTime struct, Valid bool\n```\n\n----------------------------------------\n\nTITLE: Defining WaitStatus and Standard File Descriptors in Go Syscall Package\nDESCRIPTION: The WaitStatus type represents process exit status in the syscall package for Darwin ARM64. The standard file descriptors (Stdin, Stdout, Stderr) are also defined as integer variables.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_213\n\nLANGUAGE: Go\nCODE:\n```\ntype WaitStatus uint32\n\nvar Stdin int\nvar Stdout int\nvar Stderr int\n```\n\n----------------------------------------\n\nTITLE: Old P1 Package Implementation\nDESCRIPTION: Package p1 implementation with imports from old and new packages\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_legacy_mod.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage p1\n\nimport _ \"old/p2\"\nimport _ \"new/p1\"\nimport _ \"new\"\n```\n\n----------------------------------------\n\nTITLE: Defining Empty Package for Module 'd'\nDESCRIPTION: This Go file defines an empty package for module 'd'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_pseudo_artifact.txt#2025-04-22_snippet_14\n\nLANGUAGE: Go\nCODE:\n```\npackage d\n```\n\n----------------------------------------\n\nTITLE: Mock Go Binary Script for Testing\nDESCRIPTION: Shell script that mimics the go binary for testing, outputs a version identifier when executed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-amd64.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Setting Up Go Module Environment\nDESCRIPTION: Sets the GO111MODULE environment variable to 'on' and changes the current directory to the working directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_ambiguous_import.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GO111MODULE=on\n\ncd $WORK\n```\n\n----------------------------------------\n\nTITLE: Declaring Go Toolchain Module Path in go.mod File\nDESCRIPTION: This snippet shows the content of a `go.mod` file declaring the module path `golang.org/toolchain`. This specific instance likely represents the `go.mod` file *for* the toolchain module itself, rather than a typical user project file, defining the module's own identity within the Go ecosystem.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.22rc1.linux-amd64.txt#2025-04-22_snippet_2\n\nLANGUAGE: go.mod\nCODE:\n```\ngolang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module in go.mod\nDESCRIPTION: Declares the module name and Go version for the project. This is essential for managing dependencies and ensuring compatibility.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_no_run_example.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule norunexample\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Raw Input Format Hello World\nDESCRIPTION: Basic hello world message in raw input format.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/para.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nHello, world.\nThis is a paragraph.\n```\n\n----------------------------------------\n\nTITLE: Declaring Package in Subdirectory\nDESCRIPTION: Definition of a package named 'sub' located in a subdirectory of the main module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_incompatiblewithsub_v2.0.0+incompatible.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage sub\n```\n\n----------------------------------------\n\nTITLE: Network and Socket Control Constants for OpenBSD in Go\nDESCRIPTION: Defines socket and network control constants for OpenBSD. These constants are used with ioctl() and socket options to configure network interfaces and connections.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_56\n\nLANGUAGE: Go\nCODE:\n```\nconst TCP_NOPUSH = 16\nconst RTM_VERSION = 5\nconst RTF_FMASK = 1112072\n\nconst SIOCBRDGDADDR = 2166909255\nconst SIOCBRDGSADDR = 3240651076\nconst SIOCGETVLAN = 3223349648\nconst SIOCGIFHARDMTU = 3223349669\nconst SIOCGLIFPHYTTL = 3223349673\nconst SIOCGSPPPPARAMS = 3223349652\nconst SIOCGVNETID = 3223349671\nconst SIOCSETVLAN = 2149607823\nconst SIOCSLIFPHYTTL = 2149607848\nconst SIOCSSPPPPARAMS = 2149607827\nconst SIOCSVNETID = 2149607846\nconst TIOCGSID = 1074033763\n\nconst IPPROTO_DIVERT_INIT = 2\nconst IPPROTO_DIVERT_RESP = 1\nconst IPV6_RECVDSTPORT = 64\nconst IP_DIVERTFL = 4130\n```\n\n----------------------------------------\n\nTITLE: Testing Go Get Command with Missing Bzr\nDESCRIPTION: This snippet tests the 'go get' command for a Launchpad.net package when 'bzr' is not installed. It expects the command to fail with a specific error message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vcs_missing.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncd empty\n! go get launchpad.net/gocheck\nstderr '\"bzr\": executable file not found'\ncd ..\n```\n\n----------------------------------------\n\nTITLE: IP Protocol Constants in Go Syscall Package for darwin-arm64\nDESCRIPTION: Constants that define IP protocol numbers for various networking protocols. These are used in socket programming to specify the protocol for network communications.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_68\n\nLANGUAGE: Go\nCODE:\n```\nconst IPPROTO_3PC = 34\nconst IPPROTO_3PC ideal-int\nconst IPPROTO_ADFS = 68\nconst IPPROTO_ADFS ideal-int\nconst IPPROTO_AH = 51\nconst IPPROTO_AH ideal-int\nconst IPPROTO_AHIP = 61\nconst IPPROTO_AHIP ideal-int\nconst IPPROTO_APES = 99\nconst IPPROTO_APES ideal-int\nconst IPPROTO_ARGUS = 13\nconst IPPROTO_ARGUS ideal-int\nconst IPPROTO_AX25 = 93\nconst IPPROTO_AX25 ideal-int\nconst IPPROTO_BHA = 49\nconst IPPROTO_BHA ideal-int\nconst IPPROTO_BLT = 30\nconst IPPROTO_BLT ideal-int\nconst IPPROTO_BRSATMON = 76\nconst IPPROTO_BRSATMON ideal-int\nconst IPPROTO_CFTP = 62\nconst IPPROTO_CFTP ideal-int\nconst IPPROTO_CHAOS = 16\nconst IPPROTO_CHAOS ideal-int\nconst IPPROTO_CMTP = 38\nconst IPPROTO_CMTP ideal-int\nconst IPPROTO_CPHB = 73\nconst IPPROTO_CPHB ideal-int\nconst IPPROTO_CPNX = 72\nconst IPPROTO_CPNX ideal-int\nconst IPPROTO_DDP = 37\nconst IPPROTO_DDP ideal-int\nconst IPPROTO_DGP = 86\nconst IPPROTO_DGP ideal-int\nconst IPPROTO_DIVERT = 254\nconst IPPROTO_DIVERT ideal-int\nconst IPPROTO_DONE = 257\nconst IPPROTO_DONE ideal-int\nconst IPPROTO_DSTOPTS = 60\nconst IPPROTO_DSTOPTS ideal-int\nconst IPPROTO_EGP = 8\nconst IPPROTO_EGP ideal-int\nconst IPPROTO_EMCON = 14\nconst IPPROTO_EMCON ideal-int\nconst IPPROTO_ENCAP = 98\nconst IPPROTO_ENCAP ideal-int\nconst IPPROTO_EON = 80\nconst IPPROTO_EON ideal-int\nconst IPPROTO_ESP = 50\nconst IPPROTO_ESP ideal-int\nconst IPPROTO_ETHERIP = 97\nconst IPPROTO_ETHERIP ideal-int\nconst IPPROTO_FRAGMENT = 44\nconst IPPROTO_FRAGMENT ideal-int\nconst IPPROTO_GGP = 3\nconst IPPROTO_GGP ideal-int\nconst IPPROTO_GMTP = 100\nconst IPPROTO_GMTP ideal-int\nconst IPPROTO_GRE = 47\nconst IPPROTO_GRE ideal-int\nconst IPPROTO_HELLO = 63\nconst IPPROTO_HELLO ideal-int\nconst IPPROTO_HMP = 20\nconst IPPROTO_HMP ideal-int\nconst IPPROTO_HOPOPTS = 0\nconst IPPROTO_HOPOPTS ideal-int\nconst IPPROTO_ICMP = 1\nconst IPPROTO_ICMP ideal-int\nconst IPPROTO_ICMPV6 = 58\nconst IPPROTO_ICMPV6 ideal-int\nconst IPPROTO_IDP = 22\nconst IPPROTO_IDP ideal-int\nconst IPPROTO_IDPR = 35\nconst IPPROTO_IDPR ideal-int\nconst IPPROTO_IDRP = 45\nconst IPPROTO_IDRP ideal-int\nconst IPPROTO_IGMP = 2\nconst IPPROTO_IGMP ideal-int\nconst IPPROTO_IGP = 85\nconst IPPROTO_IGP ideal-int\nconst IPPROTO_IGRP = 88\nconst IPPROTO_IGRP ideal-int\nconst IPPROTO_IL = 40\n```\n\n----------------------------------------\n\nTITLE: Defining Original go.mod File\nDESCRIPTION: Defines the contents of the original go.mod file used in the tests. Contains only the module declaration.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_cache.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines the Go module named 'hello'\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_gc_sections.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule hello\n```\n\n----------------------------------------\n\nTITLE: Defining Syscall Constants for Darwin ARM64 in Go\nDESCRIPTION: This snippet defines syscall constants for the Darwin ARM64 architecture. Each constant is defined with both its numeric value and as an ideal-int type. These constants represent various system calls available on the Darwin ARM64 platform.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_109\n\nLANGUAGE: Go\nCODE:\n```\nconst SYS_SETTID = 285\nconst SYS_SETTID ideal-int\nconst SYS_SETTID_WITH_PID = 311\nconst SYS_SETTID_WITH_PID ideal-int\nconst SYS_SETTIMEOFDAY = 122\nconst SYS_SETTIMEOFDAY ideal-int\n// ... (many more constants defined similarly)\nconst SYS___PTHREAD_SIGMASK = 329\nconst SYS___PTHREAD_SIGMASK ideal-int\n```\n\n----------------------------------------\n\nTITLE: External Test for Package with Test Suffix\nDESCRIPTION: A test file for the c_test package using the external test pattern, resulting in a c_test_test package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage c_test_test\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Go Module Testing\nDESCRIPTION: Sets the GO111MODULE environment variable to 'on' to enable module mode and sets GOPATH to an invalid path (a file instead of a directory).\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_init_empty.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n\nenv GOPATH=$WORK${/}invalid-gopath\n```\n\n----------------------------------------\n\nTITLE: Tracking Input Offset in XML Decoder - encoding/xml Package - Go\nDESCRIPTION: Adds an InputOffset method to the Decoder type in the encoding/xml package, allowing applications to query the byte offset of the XML input stream being processed. The method returns an int64, indicating the zero-based byte index. Useful for error reporting and input debugging; requires using the Decoder object from encoding/xml.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\nmethod (*Decoder) InputOffset() int64\n```\n\n----------------------------------------\n\nTITLE: Defining Main Package with Vendor Imports\nDESCRIPTION: Defines a main package that imports vendored packages p and p1.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_test_issue11864.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage g\n\nimport _ \"vendor.org/p\"\nimport _ \"vendor.org/p1\"\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Markdown Heading with Identifier\nDESCRIPTION: Shows a level 5 heading in Markdown format with a custom identifier\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/head3.txt#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n##### Heading {#hdr-Heading}\n```\n\n----------------------------------------\n\nTITLE: Testing test binary naming for fortune v2 module\nDESCRIPTION: Compiles a test binary for rsc.io/fortune/v2 and verifies that it's named 'fortune.test' instead of 'v2.test'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_versioned.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# The default test binary name shouldn't be v2.test$GOEXE\ngo test -c rsc.io/fortune/v2\n! exists v2.test$GOEXE\nexists fortune.test$GOEXE\n```\n\n----------------------------------------\n\nTITLE: Windows Syscall Functions Deprecation and Addition\nDESCRIPTION: Documents deprecated syscall functions for Windows platforms (386 and amd64) and introduces the new SyscallN function. The SyscallN function provides a more flexible approach for making system calls with variable arguments.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.18.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc SyscallN(uintptr, ...uintptr) (uintptr, uintptr, Errno)\n```\n\n----------------------------------------\n\nTITLE: C Variable Declaration\nDESCRIPTION: A simple C source file that declares a global integer variable.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/link/testdata/script/script_test_basics.txt#2025-04-22_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nint x;\n```\n\n----------------------------------------\n\nTITLE: Defining Terminal Control Constants in Go for Darwin ARM64\nDESCRIPTION: Constants defining terminal control operations on Darwin ARM64 platform. These constants are used for terminal I/O control such as flushing input and output buffers.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_194\n\nLANGUAGE: Go\nCODE:\n```\nconst TCIFLUSH = 1\nconst TCIFLUSH ideal-int\nconst TCIOFLUSH = 3\nconst TCIOFLUSH ideal-int\nconst TCOFLUSH = 2\nconst TCOFLUSH ideal-int\nconst TCSAFLUSH = 2\nconst TCSAFLUSH ideal-int\nconst TIOCCBRK = 536900730\nconst TIOCCBRK ideal-int\nconst TIOCCDTR = 536900728\n```\n\n----------------------------------------\n\nTITLE: Importing Internal Package in Go\nDESCRIPTION: Go source file that imports an internal package from another module. Uses a blank import of 'golang.org/x/internal/subtle' to demonstrate accessing an internal package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_x_useinternal_v0.1.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage useinternal\n\nimport _ \"golang.org/x/internal/subtle\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Go Tool Installation Location\nDESCRIPTION: This snippet checks that Go tools, specifically the 'compile' command, are installed in $GOTOOLDIR, not $GOBIN. It uses 'go list' to verify the installation path of the compile tool.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_cmd_gobin.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo list -f '{{.Target}}' cmd/compile\nstdout $GOROOT${/}pkg${/}tool${/}${GOOS}_${GOARCH}${/}compile$GOEXE\n```\n\n----------------------------------------\n\nTITLE: Testing Go Build Failure with Non-Matching Run Flag\nDESCRIPTION: This shell command runs a Go test with a non-matching -run flag on a package with a syntax error. It checks that the build failure is reported correctly and the 'no tests to run' message is not displayed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_no_tests_build_failure.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n! go test -run ThisWillNotMatch syntaxerror\n! stderr '(?m)^ok.*\\[no tests to run\\]'\nstdout 'FAIL'\n```\n\n----------------------------------------\n\nTITLE: Defining IPv6 Protocol Constants for Darwin ARM64 in Go\nDESCRIPTION: This snippet defines various IPv6 protocol constants for the syscall package on Darwin ARM64. It includes IPPROTO values for different protocols and IPV6 socket options. These constants are used for network programming and socket operations on the Darwin ARM64 platform.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_69\n\nLANGUAGE: Go\nCODE:\n```\npackage syscall\n\nconst (\n    IPPROTO_IL = 52\n    IPPROTO_INLSP = 52\n    IPPROTO_INP = 32\n    IPPROTO_IPCOMP = 108\n    IPPROTO_IPCV = 71\n    IPPROTO_IPEIP = 94\n    IPPROTO_IPIP = 4\n    IPPROTO_IPPC = 67\n    IPPROTO_IPV4 = 4\n    // ... (other IPPROTO constants)\n    IPV6_2292DSTOPTS = 23\n    IPV6_2292HOPLIMIT = 20\n    IPV6_2292HOPOPTS = 22\n    IPV6_2292NEXTHOP = 21\n    IPV6_2292PKTINFO = 19\n    IPV6_2292PKTOPTIONS = 25\n    IPV6_2292RTHDR = 24\n    IPV6_BINDV6ONLY = 27\n    IPV6_BOUND_IF = 125\n    IPV6_CHECKSUM = 26\n    // ... (other IPV6 constants)\n)\n```\n\n----------------------------------------\n\nTITLE: Go Module Sum Update Configuration\nDESCRIPTION: Checksum configuration for module dependencies\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\ngolang.org/x/text v0.0.0-20170915032832-14c0d48ead0c/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\nrsc.io/quote v1.5.2/go.mod h1:LzX7hefJvL54yjefDEDHNONDjII0t9xZLPXsUe+TKr0=\nrsc.io/sampler v1.3.0/go.mod h1:T1hPZKmBbMNahiBKFy5HrXp6adAjACjK9JXDnKaTXpA=\n```\n\n----------------------------------------\n\nTITLE: Importing 'cmd' Meta-Package in Go\nDESCRIPTION: This Go file attempts to import the 'cmd' meta-package, which is not allowed and should result in an error.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_meta.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\npackage importcmd\n\nimport _ \"cmd\"\n```\n\n----------------------------------------\n\nTITLE: Test Dependency Package\nDESCRIPTION: An empty package definition for the 'testdep' module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version_missing.txt#2025-04-22_snippet_15\n\nLANGUAGE: Go\nCODE:\n```\npackage testdep\n```\n\n----------------------------------------\n\nTITLE: Go Greeting Function Implementation\nDESCRIPTION: Implements a simple Hello function in Go that returns a greeting string\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/gitreposubdir.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage greeter\n\nfunc Hello() string {\n\treturn \"hello, world\"\n}\n```\n\n----------------------------------------\n\nTITLE: go.work_want file content\nDESCRIPTION: This is the expected content of the go.work file after certain operations. In this example it remains the same as initial go.work content.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_only_dirs.txt#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n-- go.work_want --\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Deprecations in encoding packages\nDESCRIPTION: Lists deprecated struct fields, variables, and types in encoding packages.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_22\n\nLANGUAGE: Go\nCODE:\n```\npkg encoding/csv, type Reader struct, TrailingComma //deprecated\npkg encoding/csv, var ErrTrailingComma //deprecated\npkg encoding/json, type InvalidUTF8Error //deprecated\npkg encoding/json, type UnmarshalFieldError //deprecated\n```\n\n----------------------------------------\n\nTITLE: Test-only Go file in test package\nDESCRIPTION: A test-only Go file that defines package p for testing purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_no_go.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage p\n```\n\n----------------------------------------\n\nTITLE: Empty Package Declaration for Dependency\nDESCRIPTION: This Go file declares an empty package 'n' within the dependency module, used to test the vendoring process.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_issue46867.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage n\n```\n\n----------------------------------------\n\nTITLE: Testing t.Log() and t.Fail() Combination in Go Fuzz Tests\nDESCRIPTION: This function tests how Go's fuzzing handles a combination of t.Log() and t.Fail(). It logs a message and fails the test when the input is not 'aa'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_crash.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nfunc FuzzWithLogFail(f *testing.F) {\n\tf.Add([]byte(\"aa\"))\n\tf.Fuzz(func(t *testing.T, b []byte) {\n\t\tif string(b) != \"aa\" {\n\t\t\tt.Log(\"logged something\")\n\t\t\tt.Fail()\n\t\t}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Go Source File with Unstable Import\nDESCRIPTION: A Go source file that imports an unstable package from gopkg.in. This file is used to test Go's module resolution for unstable versions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gopkg_unstable.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage x\nimport _ \"gopkg.in/dummy.v2-unstable\"\n```\n\n----------------------------------------\n\nTITLE: Adding package file to Git repository\nDESCRIPTION: Adds a package file to the Git repository and commits it with a timestamp. Verifies the Git log history matches expected output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/test2-svn-git.txt#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit add pkg/pkg.go\nat 2017-09-22T11:41:28-04:00\ngit commit -a -m 'add pkg'\n\ngit log --oneline --decorate=short\ncmp stdout .git-log\n\nrm README\n```\n\n----------------------------------------\n\nTITLE: Panic-inducing Fuzz Test in Go\nDESCRIPTION: Shows how to implement a fuzz test that triggers a panic with nil value.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage panic_fuzz\n\nimport \"testing\"\n\nfunc Fuzz_panic(f *testing.F) {\n    panic(nil)\n}\n```\n\n----------------------------------------\n\nTITLE: Go Work File with Future Version\nDESCRIPTION: This go.work file specifies a future Go version (1.99999) and includes the current directory in the workspace.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline_too_new.txt#2025-04-22_snippet_7\n\nLANGUAGE: Plain Text\nCODE:\n```\ngo 1.99999\nuse .\n```\n\n----------------------------------------\n\nTITLE: Providing Module Version Metadata - JSON\nDESCRIPTION: This JSON snippet provides version metadata for the Go module, indicating the version as v1.0.0. It is used as module metadata typically generated by the Go module proxy. No dependencies are needed to interpret this except JSON parsing. Inputs and outputs are static, and the structure is limited to basic version information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_missingmod_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\\"Version\\\":\\\"v1.0.0\\\"}\n```\n\n----------------------------------------\n\nTITLE: File System Statistics Structs for darwin-arm64\nDESCRIPTION: Structures used for file system operations and statistics on darwin-arm64, including file metadata (Stat_t) and file system information (Statfs_t).\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_134\n\nLANGUAGE: go\nCODE:\n```\ntype Stat_t struct {\n\tDev int32\n\tMode uint16\n\tNlink uint16\n\tIno uint64\n\tUid uint32\n\tGid uint32\n\tRdev int32\n\tPad_cgo_0 [4]uint8\n\tAtimespec Timespec\n\tMtimespec Timespec\n\tCtimespec Timespec\n\tBirthtimespec Timespec\n\tSize int64\n\tBlocks int64\n\tBlksize int32\n\tFlags uint32\n\tGen uint32\n\tLspare int32\n\tQspare [2]int64\n}\n\ntype Statfs_t struct {\n\tOwnername [1024]int8\n\tMntfromname [1024]int8\n\tFstypename [16]int8\n\tFsid Fsid\n\tBsize uint32\n\tIosize int32\n\tBlocks uint64\n\tBfree uint64\n\tBavail uint64\n\tFiles uint64\n\tFfree uint64\n\tFlags uint32\n\tType uint32\n\tFssubtype uint32\n\tReserved [8]uint32\n\tOwner uint32\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Module Dependencies for C v0.2.0 in Go\nDESCRIPTION: This go.mod file for example.net/c v0.2.0 specifies its Go version and a dependency on example.net/a v0.2.0-pre.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_boost.txt#2025-04-22_snippet_12\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/c\n\ngo 1.17\n\nrequire example.net/a v0.2.0-pre\n```\n\n----------------------------------------\n\nTITLE: Buggy Test Implementation in Go\nDESCRIPTION: A test file in the buggy package that intentionally fails by calling t.Fatal with a message \"buggy!\". This seems to be part of the test suite to verify error handling or demonstrate test failures.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180628003336-dd9747d19b04.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage buggy\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\tt.Fatal(\"buggy!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Goroutine Hello World Example in Go\nDESCRIPTION: Demonstrates printing 'hello, world' using an anonymous function executed as a goroutine.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/code6.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngo func() {\n\tfmt.Println(\"hello, world\")\n}()\n```\n\n----------------------------------------\n\nTITLE: Expected Output File: List All Packages with Module Versions - Text\nDESCRIPTION: This text file presents the expected output from 'go list' for all dependencies, listing each package path and version. It is used as a reference in regression tests to validate proper dependency enumeration and version resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_main.txt#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\ngolang.org/issue/mirror v0.1.0\ngolang.org/issue/pkg v0.1.0\ngolang.org/issue/root\n```\n\n----------------------------------------\n\nTITLE: Go Package with Init Panic\nDESCRIPTION: Defines a 'pkg' package with an init function that panics with a TODO message, indicating incomplete functionality.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/semver-branch.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage pkg\n\nfunc init() {\n\tpanic(\"TODO\")\n}\n```\n\n----------------------------------------\n\nTITLE: Assembly Implementation with External Symbol Reference\nDESCRIPTION: Assembly code that defines ObjTest function which jumps to an external C implementation defined in the syso file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/link_syso_issue33139.txt#2025-04-22_snippet_1\n\nLANGUAGE: assembly\nCODE:\n```\n#include \"textflag.h\"\n\nTEXT ·ObjTest(SB), NOSPLIT, $0\n\t// We do not actually execute this function in the test above, thus\n\t// there is no stack frame setup here.\n\t// We only care about Go build and/or link errors when referencing\n\t// the objTestImpl symbol in the syso file.\n\tJMP objTestImpl(SB)\n```\n\n----------------------------------------\n\nTITLE: Package Z with Vendored Import\nDESCRIPTION: Package 'z' importing package 'x' using vendored path\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_resolve.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage z\n\nimport _ \"q/vendor/x\"\n```\n\n----------------------------------------\n\nTITLE: Executing Test Files in Specific Order\nDESCRIPTION: Shell commands demonstrating how test file order affects execution. Shows both failing and passing test scenarios based on file ordering.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_source_order.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n! go test example2_test.go example1_test.go\ngo test example1_test.go example2_test.go\n```\n\n----------------------------------------\n\nTITLE: Sub-module Definition with High Go Version Requirement\nDESCRIPTION: Defines the 'sub' module with a Go version requirement of 1.999, which is higher than the current Go version in the test environment.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule sub\ngo 1.999\n```\n\n----------------------------------------\n\nTITLE: Testing Go Build Command for Import Errors\nDESCRIPTION: This snippet tests the 'go build' command to verify error reporting for malformed import paths. It expects the build to fail and output an error message with file path and line number.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_info_err.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n! go build ./main\nstderr '^bad[/\\\\]bad.go:3:8: malformed import path \"🐧.example.com/string\": invalid char ''🐧''$'\n```\n\n----------------------------------------\n\nTITLE: Testing Testdata Directory Package Path\nDESCRIPTION: Verifies that 'go list ./testdata' correctly outputs the package path without synthesizing underscores.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dot.txt#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# golang.org/issue/28155: 'go list ./testdata' should not synthesize underscores.\ngo list ./testdata\nstdout '^example.com/testdata'\n```\n\n----------------------------------------\n\nTITLE: Go Module Y Implementation\nDESCRIPTION: Module Y with minimal implementation, providing a simple dependency for testing module import chains.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune_all.txt#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/y\n\ngo 1.18\n```\n\nLANGUAGE: go\nCODE:\n```\npackage y\n```\n\n----------------------------------------\n\nTITLE: Empty Package Declaration\nDESCRIPTION: Empty Go package declaration file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badsum_v1.0.1.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage badsum\n```\n\n----------------------------------------\n\nTITLE: Running Race Condition Tests in Go\nDESCRIPTION: This snippet shows commands for running Go tests with the -race flag. It demonstrates that -race cannot be used with -covermode=set.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_race_cover_mode_issue20435.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# Make sure test is functional.\ngo test testrace\n\n# Now, check that -race -covermode=set is not allowed.\n! go test -race -covermode=set testrace\nstderr '-covermode must be \"atomic\", not \"set\", when -race is enabled'\n! stdout PASS\n! stderr PASS\n```\n\n----------------------------------------\n\nTITLE: Building package with #cgo LDFLAGS (Go)\nDESCRIPTION: This snippet defines a Go package that uses #cgo LDFLAGS directive. It's expected to fail building due to the use of unsupported flags in the directive.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/ldflag.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage bad\n\n// #cgo LDFLAGS: -Wno-such-warning -Wno-unknown-warning\nimport \"C\"\n\nfunc F() {}\n```\n\n----------------------------------------\n\nTITLE: Go Get with Long Rationale\nDESCRIPTION: This snippet tests the behavior of 'go get' when a module version is retracted with a long rationale. It checks if the output indicates that the message was omitted due to its length.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_rationale.txt#_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ngo get example.com/retract/rationale@v1.0.0-long\nstderr '^go: warning: example.com/retract/rationale@v1.0.0-long: retracted by module author: \\(message omitted: too long\\)'\n```\n\n----------------------------------------\n\nTITLE: Defining SysProcAttr Struct for Process Attributes in Go Syscall Package\nDESCRIPTION: The SysProcAttr struct represents process creation attributes in the syscall package for Darwin ARM64. It allows configuration of process behaviors like process groups, credentials, terminal settings, and chroot environments when starting new processes.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_210\n\nLANGUAGE: Go\nCODE:\n```\ntype SysProcAttr struct {\n    Chroot       string\n    Credential   *Credential\n    Ctty         int\n    Foreground   bool\n    Noctty       bool\n    Pgid         int\n    Ptrace       bool\n    Setctty      bool\n    Setpgid      bool\n    Setsid       bool\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Statfs_t Struct for Filesystem Statistics in Go Syscall Package\nDESCRIPTION: The Statfs_t struct represents filesystem statistics in the syscall package for Darwin ARM64. It provides information about mounted filesystems, including capacity, usage, type, and location details.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_209\n\nLANGUAGE: Go\nCODE:\n```\ntype Statfs_t struct {\n    Bsize         uint32\n    Iosize        int32\n    Blocks        uint64\n    Bfree         uint64\n    Bavail        uint64\n    Files         uint64\n    Ffree         uint64\n    Fsid          Fsid\n    Owner         uint32\n    Type          uint32\n    Flags         uint32\n    Fssubtype     uint32\n    Fstypename    [16]int8\n    Mntonname     [1024]int8\n    Mntfromname   [1024]int8\n    Reserved      [8]uint32\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Multiline Mode Anchor Matching\nDESCRIPTION: Tests multiline mode patterns with the (?m) modifier for handling line anchors. Shows how multiline mode affects beginning and end-of-line assertions.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_39\n\nLANGUAGE: go\nCODE:\n```\n\"(?m)^abc\"\n-;-;-;-\n-;0-3;-;0-3\n\"^(?:(?m)^abc)$\"\n-;-;-;-\n-;-;-;-\n\"^(?:(?m)^abc)\"\n-;-;-;-\n-;0-3;-;0-3\n\"(?:(?m)^abc)$\"\n-;-;-;-\n-;-;-;-\n```\n\n----------------------------------------\n\nTITLE: Git References Expected Output\nDESCRIPTION: Expected reference output showing the commit hashes for the main branch and v2.0.0 tag.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/v2sub.txt#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n80beb17a16036f17a5aedd1bb5bd6d407b3c6dc5 refs/heads/main\n5fcd3eaeeb391d399f562fd45a50dac9fc34ae8b refs/tags/v2.0.0\n```\n\n----------------------------------------\n\nTITLE: Defining Terminal Control Constants in Go for Darwin ARM64 CGO\nDESCRIPTION: This snippet defines constants for terminal control flags used in system calls on Darwin ARM64 with CGO. These constants are used to configure terminal behavior and settings.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_168\n\nLANGUAGE: Go\nCODE:\n```\nconst PARENB = 4096\nconst PARENB ideal-int\nconst PARMRK = 8\nconst PARMRK ideal-int\nconst PARODD = 8192\nconst PARODD ideal-int\nconst PENDIN = 536870912\nconst PENDIN ideal-int\n```\n\n----------------------------------------\n\nTITLE: Minimal Go Test Implementation\nDESCRIPTION: Simple Go test file containing a single empty test function. Demonstrates basic test structure in standalone package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_only_tests.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage standalone_test\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating GCD and LCM for Large Hexadecimal Numbers\nDESCRIPTION: This snippet shows the calculation of GCD and LCM for two large hexadecimal numbers A and B. The results are also presented in hexadecimal format.\nSOURCE: https://github.com/golang/go/blob/master/src/crypto/internal/fips140/rsa/testdata/gcd_lcm_tests.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nGCD = 206695d52bc391a4db61bf8cb6ea96188333a9c78f477ee76976c2346dad682cf56ca6f176d86ef67d41ff5921b6162b0eca52359975872430dd14c45643eacdf028d830770714c033fd150669705851b2f02de932322d271d565d26768530c3f6cb84f0b3356f970b9070b26c050ead0417152c324c8ffe266d4e8b5b7bef3a\nA = 1114eb9f1a9d5947eb1399e57f5c980833489685023ed2fe537fe1276c1e026b9a19e6fff55aa889d6c4e977b6e6f3111e2ad463138637b50f42cf32e57d83f282de9e72f813e5969195159a666d74dcd689bd527c60199ae327f7bd548ac36868fea5fdf6f35d19b921e7c10b6448ca480de6826478cd0642d72f05af3f8e65ce42409fbd49f56e81946e89c8e83962c4edc0ed54600600a305e52d081aed3c351e450e11f8fb0ce5754c92cf765b71393b2b7a89c95df79b9ea1b3cb600862\nB = 1d8f3179ca7b5cc7119360c10de939ffa57c9043da2f2b0ca3009c9bdad9f19ed16e3c2c197bef4b527fa1bf2bbab98b77e26c329911db68bd63d3d0fbfc727a977395b9ad067106de3094d68e097830858c5ccfa505fc25e972bdee6f347e7d1163efacd3d29a791ec2a94ffeed467884ae04896efc5e7e5f43d8d76c147e3c9951a1999173bc4e5767d51268b92cc68487ba1295372143b538711e0a62bf0ac111cc750ca4dd6c318c9cbe106d7fc492261404b86a1ba728e2d25b1976dc42\nLCM = f9570211f694141bfb096560551080cbe02a80271b4505591aaea9e3b99ea1d5ac1c1f2378fd72799e117ac2a73381b1ad26314e39972164d93971479ee3ba21a4d98cef0bd299d540ce5826995dcee0de420dff73d30b23cbf3188c625c7696df517535bc5675d71faa00807efbebdca547933f4a37849d1c014484a77da6df0670c4974bcc91eb5f5fe5faf9dd095ef195ec32ad9eeebf0e63288b4032ed9e70b888afc642f4ff96f0b4c0a68787301c12e4527fe79bdfe72dd3844ab5e094a9295df6616f24d1b9eeebc2116177dacf91969dda73667bc421ef3ccd8d5c23dddc283f5d36568d31f2654926be67f78e181075bdc148f2b39c630b141ae8a\n```\n\n----------------------------------------\n\nTITLE: Module Version Definitions\nDESCRIPTION: Individual go.mod files for each version of the badgo module, testing different Go version formats including release candidates and invalid formats.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/badgo.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/badgo\ngo 1.17.0\n```\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/badgo\ngo 1.17rc2\n```\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/badgo\ngo 1.17.1\n```\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/badgo\ngo v1.17.0\n```\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/badgo\ngo v1.17.0-rc.2\n```\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/badgo\ngo v1.17.1\n```\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/badgo\ngo X.Y\n```\n\n----------------------------------------\n\nTITLE: Defining No-Op Functions in Go Assembly (Plan 9 Syntax) - Go Assembly\nDESCRIPTION: Each snippet declares a global symbol (t183 through t254) that represents a function, immediately followed by the RET instruction, making it a no-operation routine. These serve as stubbed function targets for a larger system generated by the accompanying shell script. No external dependencies are required, only the Go assembler and its conventions for symbol and function definitions. Each function takes no arguments or return values, and exists solely as a target for linkage or automated calls.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/testdata/script/dwarf5_gen_assembly_and_go.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t183(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t184(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t185(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t186(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t187(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t188(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t189(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t190(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t191(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t192(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t193(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t194(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t195(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t196(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t197(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t198(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t199(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t200(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t201(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t202(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t203(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t204(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t205(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t206(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t207(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t208(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t209(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t210(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t211(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t212(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t213(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t214(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t215(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t216(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t217(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t218(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t219(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t220(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t221(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t222(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t223(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t224(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t225(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t226(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t227(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t228(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t229(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t230(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t231(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t232(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t233(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t234(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t235(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t236(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t237(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t238(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t239(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t240(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t241(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t242(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t243(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t244(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t245(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t246(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t247(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t248(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t249(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t250(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t251(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t252(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t253(SB),0,$0\\n\tRET\n```\n\nLANGUAGE: Go Assembly\nCODE:\n```\nTEXT ·t254(SB),0,$0\\n\tRET\n```\n\n----------------------------------------\n\nTITLE: Calculating Field Offsets and Sequence Properties in Go\nDESCRIPTION: This code snippet defines formulas for calculating field offsets, alignment, and size of a sequence of fields in Go's memory layout. It's crucial for understanding how composite types are structured in memory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/abi-internal.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\noffset(S, i) = 0  if i = 1\n             = align(offset(S, i-1) + sizeof(t_(i-1)), alignof(t_i))\nalignof(S)   = 1  if N = 0\n             = max(alignof(t_i) | 1 <= i <= N)\nsizeof(S)    = 0  if N = 0\n             = align(offset(S, N) + sizeof(t_N), alignof(S))\n```\n\n----------------------------------------\n\nTITLE: Testing Wildcard Matching with Mixed ASCII and Unicode Characters\nDESCRIPTION: Tests matching patterns with '...' against '.本.' string that contains both ASCII and Unicode characters. Shows match positions across different pattern configurations.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_29\n\nLANGUAGE: go\nCODE:\n```\n\"^...$\"\n-;-;-;-\n0-5;0-5;0-5;0-5\n\"^(?:^...$)$\"\n-;-;-;-\n0-5;0-5;0-5;0-5\n\"^(?:^...$)\"\n-;-;-;-\n0-5;0-5;0-5;0-5\n\"(?:^...$)$\"\n-;-;-;-\n0-5;0-5;0-5;0-5\n```\n\n----------------------------------------\n\nTITLE: Defining Process Tracing Constants in Go for Darwin ARM64 CGO\nDESCRIPTION: This snippet defines constants for process tracing operations used in system calls on Darwin ARM64 with CGO. These constants are used for debugging and process control.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_171\n\nLANGUAGE: Go\nCODE:\n```\nconst PTRACE_CONT = 7\nconst PTRACE_CONT ideal-int\nconst PTRACE_KILL = 8\nconst PTRACE_KILL ideal-int\nconst PTRACE_TRACEME = 0\nconst PTRACE_TRACEME ideal-int\nconst PT_ATTACH = 10\nconst PT_ATTACH ideal-int\nconst PT_ATTACHEXC = 14\nconst PT_ATTACHEXC ideal-int\nconst PT_CONTINUE = 7\nconst PT_CONTINUE ideal-int\nconst PT_DENY_ATTACH = 31\nconst PT_DENY_ATTACH ideal-int\nconst PT_DETACH = 11\nconst PT_DETACH ideal-int\nconst PT_FIRSTMACH = 32\nconst PT_FIRSTMACH ideal-int\nconst PT_FORCEQUOTA = 30\nconst PT_FORCEQUOTA ideal-int\nconst PT_KILL = 8\nconst PT_KILL ideal-int\nconst PT_READ_D = 2\nconst PT_READ_D ideal-int\nconst PT_READ_I = 1\nconst PT_READ_I ideal-int\nconst PT_READ_U = 3\nconst PT_READ_U ideal-int\nconst PT_SIGEXC = 12\nconst PT_SIGEXC ideal-int\nconst PT_STEP = 9\nconst PT_STEP ideal-int\nconst PT_THUPDATE = 13\nconst PT_THUPDATE ideal-int\nconst PT_TRACE_ME = 0\nconst PT_TRACE_ME ideal-int\nconst PT_WRITE_D = 5\nconst PT_WRITE_D ideal-int\nconst PT_WRITE_I = 4\nconst PT_WRITE_I ideal-int\nconst PT_WRITE_U = 6\nconst PT_WRITE_U ideal-int\n```\n\n----------------------------------------\n\nTITLE: Basic Go Module Configuration\nDESCRIPTION: A simple Go module configuration file specifying module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_run_pkg_version.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.16\n\nrequire example.com/cmd v1.1.0-doesnotexist\n```\n\n----------------------------------------\n\nTITLE: Testing Go Doc Help Command in Shell\nDESCRIPTION: This shell snippet tests the help functionality of the 'go doc' command, validating its output against expected formats for accessing documentation. It verifies various syntaxes like 'go doc <pkg>' and 'go doc <sym>'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/doc.txt#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# go doc --help\n! go doc --help\nstderr 'go doc'\nstderr 'go doc <pkg>'\nstderr 'go doc <sym>\\[\\.<methodOrField>\\]'\nstderr 'go doc \\[<pkg>\\.\\]<sym>\\[\\.<methodOrField>\\]'\nstderr 'go doc \\[<pkg>\\.\\]\\[<sym>\\.\\]<methodOrField>'\nstderr 'go doc <pkg> <sym>\\[\\.<methodOrField>\\]'\n```\n\n----------------------------------------\n\nTITLE: Clang Path Lookup Utility in Go\nDESCRIPTION: A simple Go program that looks up the full path of a command (Clang) in the system PATH and writes it to stdout.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cc_cache_issue64423.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"os\"\n\t\"os/exec\"\n)\n\nfunc main() {\n\tpath, err := exec.LookPath(os.Args[1])\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tos.Stdout.WriteString(path)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Constants for archive/tar Package in Go\nDESCRIPTION: This snippet defines constants for different tar archive formats including GNU, PAX, USTAR, and Unknown. It also declares a Format type and a Header struct with related fields.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.10.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nconst FormatGNU = 8\nconst FormatGNU Format\nconst FormatPAX = 4\nconst FormatPAX Format\nconst FormatUSTAR = 2\nconst FormatUSTAR Format\nconst FormatUnknown = 0\nconst FormatUnknown Format\n\ntype Format int\n\ntype Header struct {\n    Format Format\n    PAXRecords map[string]string\n}\n```\n\n----------------------------------------\n\nTITLE: Module A Definition\nDESCRIPTION: Go module configuration for example.com/a requiring rsc.io/fortune v1.0.0\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_sum.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/a\ngo 1.18\nrequire rsc.io/fortune v1.0.0\n```\n\nLANGUAGE: go\nCODE:\n```\npackage a\nimport \"rsc.io/fortune\"\n```\n\n----------------------------------------\n\nTITLE: Successful Import Module (Go)\nDESCRIPTION: Test file showing successful import of an existing package\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_lookup.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage use\n\nimport _ \"example.com/join/subpkg\"\n```\n\n----------------------------------------\n\nTITLE: Testing Hexadecimal Escape Sequence Matching\nDESCRIPTION: Tests hexadecimal escape sequences (\\x61, \\x{61}, \\x{00000061}) for character matching. Shows how different hex notations represent the same character.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_34\n\nLANGUAGE: go\nCODE:\n```\n\"\\\\x{61}\"\n-;-;-;-\n0-1;0-1;0-1;0-1\n\"^(?:\\\\x{61})$\"\n-;-;-;-\n0-1;0-1;0-1;0-1\n\"^(?:\\\\x{61})\"\n-;-;-;-\n0-1;0-1;0-1;0-1\n\"(?:\\\\x{61})$\"\n-;-;-;-\n0-1;0-1;0-1;0-1\n```\n\n----------------------------------------\n\nTITLE: Basic Go Package Declaration\nDESCRIPTION: Simple Go file containing only a package declaration.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/fmt_load_errors.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage x\n```\n\n----------------------------------------\n\nTITLE: Unit Tests for Quote Functions in Go\nDESCRIPTION: Test suite that verifies each function (TestHello, TestGlass, TestGo) returns the expected quote string. The tests ensure the output matches the predefined quotes exactly.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/not-rsc.io_quote_v0.1.0-nomod.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Copyright 2018 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\npackage quote\n\nimport \"testing\"\n\nfunc TestHello(t *testing.T) {\n\thello := \"Hello, world.\"\n\tif out := Hello(); out != hello {\n\t\tt.Errorf(\"Hello() = %q, want %q\", out, hello)\n\t}\n}\n\nfunc TestGlass(t *testing.T) {\n\tglass := \"I can eat glass and it doesn't hurt me.\"\n\tif out := Glass(); out != glass {\n\t\tt.Errorf(\"Glass() = %q, want %q\", out, glass)\n\t}\n}\n\nfunc TestGo(t *testing.T) {\n\tgo1 := \"Don't communicate by sharing memory. Share memory by communicating.\"\n\tif out := Go(); out != go1 {\n\t\tt.Errorf(\"Go() = %q, want %q\", out, go1)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Placeholder Gofmt Command Script (Shell)\nDESCRIPTION: This shell script, intended for `bin/gofmt`, serves as a placeholder for the `gofmt` tool. It simply prints the message \"i am unused\" when run, indicating it's likely part of a test setup where the actual formatting functionality isn't required.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.android-amd64.txt#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: Go Module Declaration\nDESCRIPTION: This snippet declares a Go module named 'm' and sets the Go version to 1.18, which is required for compatibility with features and syntax of that specific version of Go. It is crucial for managing dependencies and ensuring consistent builds.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_getx.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n-- go.mod --\nmodule m\n\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Adding go.mod with v2 Module Path in Master\nDESCRIPTION: Adds a go.mod file with a v2 module path in the master branch.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nat 2018-02-19T17:30:23-05:00\nenv GIT_AUTHOR_DATE=2018-02-19T17:24:48-05:00\necho 'module \"github.com/vgotest1/v2\"'\ncp stdout go.mod\ngit add go.mod\ngit commit -m 'add go.mod'\n```\n\n----------------------------------------\n\nTITLE: Testing Go Vet Version in Workspace Mode\nDESCRIPTION: Checks go vet behavior in workspace mode, expecting the go.work version to be used for both module and single file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_commandline.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncp go.work.orig go.work\ngo vet -n -json example.com/m\nstderr '\"GoVersion\": \"go1.22.0'\n\ngo vet -n -json main.go\nstderr '\"GoVersion\": \"go1.22.2'\n```\n\n----------------------------------------\n\nTITLE: Main Package Implementation\nDESCRIPTION: Main package file importing non-existent packages to test error handling behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_error.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"nonexist\"\n\n\t\"nonexist.example.com\"\n\t\"issue27063/other\"\n)\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Event Filter Constants in Go Syscall Package for Darwin ARM64\nDESCRIPTION: Event filter constants used with kqueue/kevent system calls. These identify the different types of events that can be monitored, such as file descriptor readiness, process events, signals, and timers.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_147\n\nLANGUAGE: Go\nCODE:\n```\nconst EVFILT_AIO = -3\nconst EVFILT_AIO ideal-int\nconst EVFILT_FS = -9\nconst EVFILT_FS ideal-int\nconst EVFILT_MACHPORT = -8\nconst EVFILT_MACHPORT ideal-int\nconst EVFILT_PROC = -5\nconst EVFILT_PROC ideal-int\nconst EVFILT_READ = -1\nconst EVFILT_READ ideal-int\nconst EVFILT_SIGNAL = -6\nconst EVFILT_SIGNAL ideal-int\nconst EVFILT_SYSCOUNT = 14\nconst EVFILT_SYSCOUNT ideal-int\nconst EVFILT_THREADMARKER = 14\nconst EVFILT_THREADMARKER ideal-int\nconst EVFILT_TIMER = -7\nconst EVFILT_TIMER ideal-int\nconst EVFILT_USER = -10\nconst EVFILT_USER ideal-int\nconst EVFILT_VM = -12\nconst EVFILT_VM ideal-int\nconst EVFILT_VNODE = -4\nconst EVFILT_VNODE ideal-int\nconst EVFILT_WRITE = -2\nconst EVFILT_WRITE ideal-int\n```\n\n----------------------------------------\n\nTITLE: File Permission Constants in Go for NetBSD ARM64\nDESCRIPTION: Constants representing file permission bits for the NetBSD operating system. These define read, write, and execute permissions for user, group, and others as well as special bits like sticky bit.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_60\n\nLANGUAGE: Go\nCODE:\n```\nconst S_IREAD = 256\nconst S_IRGRP = 32\nconst S_IROTH = 4\nconst S_IRWXG = 56\nconst S_IRWXO = 7\nconst S_IRWXU = 448\nconst S_ISTXT = 512\nconst S_IWGRP = 16\nconst S_IWOTH = 2\nconst S_IWRITE = 128\nconst S_IXGRP = 8\nconst S_IXOTH = 1\nconst S_LOGIN_SET = 1\n```\n\n----------------------------------------\n\nTITLE: Implementing Version Printing Function in Go Module\nDESCRIPTION: This snippet shows the implementation of the PrintVersion function in the 'q' module (version 1.1.0). It demonstrates how different versions of a module can have different implementations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_prune_all.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage q\n\nimport _ \"example.com/w\"\nimport _ \"example.com/z\"\n\nimport \"fmt\"\n\nfunc PrintVersion() {\n\tfmt.Println(\"version 1.1.0\")\n}\n```\n\n----------------------------------------\n\nTITLE: Empty Package Definition for File Collision Test\nDESCRIPTION: Empty package definition used to test file name case collision\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_case_collision.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage b\n```\n\n----------------------------------------\n\nTITLE: Defining Memory Mapping Constants in Go for NetBSD\nDESCRIPTION: This snippet defines constants for memory mapping operations on NetBSD. It includes flags for map types, inheritance, and special behaviors. These constants are used with mmap-related system calls.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_24\n\nLANGUAGE: Go\nCODE:\n```\nconst MAP_FIXED ideal-int\nconst MAP_HASSEMAPHORE = 512\nconst MAP_INHERIT = 128\nconst MAP_NORESERVE = 64\nconst MAP_PRIVATE = 2\nconst MAP_SHARED = 1\nconst MAP_STACK = 8192\n```\n\n----------------------------------------\n\nTITLE: Specifying Toolchain Version Metadata - Go Modules - Go\nDESCRIPTION: Provides version information for the module in JSON format, used by Go to track module versions for dependency resolution. This snippet is required by the Go module proxy and infrastructure. Input is static JSON and the output is for internal tooling use only.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.android-arm64.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n{\\\"Version\\\":\\\"v0.0.1-go1.999testmod.android-arm64\\\"}\n```\n\n----------------------------------------\n\nTITLE: OS package constants and functions in Go\nDESCRIPTION: Constants, functions, and methods for the os package, including file mode types, user home directory retrieval, and process state information.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.12.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nconst ModeType = 2401763328\nfunc UserHomeDir() (string, error)\nmethod (*File) SyscallConn() (syscall.RawConn, error)\nmethod (*ProcessState) ExitCode() int\nmethod (ExitError) ExitCode() int\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Go Module (go.mod)\nDESCRIPTION: This file defines a Go module named 'example.com' and declares that the code within this module requires Go version 1.16 or higher. This 'go.mod' file provides context for the 'go build' commands executed in the test script.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_gcflags_order.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n-- m/go.mod --\nmodule example.com\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Defining Stat_t struct for NetBSD ARM64 in syscall package\nDESCRIPTION: Definition of the Stat_t struct in the syscall package for NetBSD ARM64 architecture. This struct represents file status information returned by system calls like stat(), containing fields for file metadata such as timestamps, permissions, and size.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_164\n\nLANGUAGE: go\nCODE:\n```\ntype Stat_t struct {\n\tDev uint64\n\tIno uint64\n\tMode uint32\n\tNlink uint32\n\tUid uint32\n\tGid uint32\n\tRdev uint64\n\tAtimespec Timespec\n\tMtimespec Timespec\n\tCtimespec Timespec\n\tBirthtimespec Timespec\n\tSize int64\n\tBlocks int64\n\tBlksize uint32\n\tFlags uint32\n\tGen uint32\n\tSpare [2]uint32\n\tPad_cgo_0 [4]uint8\n\tPad_cgo_1 [4]uint8\n\tPad_cgo_2 [4]uint8\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Buggy Test in Go\nDESCRIPTION: A test file in the buggy subdirectory that purposely fails by calling t.Fatal(). This is likely used to test error handling or test framework behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.5.3-pre1.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Copyright 2018 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\npackage buggy\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\tt.Fatal(\"buggy!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Version Information in JSON\nDESCRIPTION: Contains version information for the module in JSON format.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo1223_v0.0.1.txt#2025-04-22_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\"Version\":\"v0.0.1\"}\n```\n\n----------------------------------------\n\nTITLE: Defining FreeBSD System Struct Types - Go\nDESCRIPTION: This snippet defines struct types corresponding to FreeBSD kernel structures required for IO control, terminal settings, file locks, network interface data, and more. For example, Termios struct (with fields Cc, Cflag, Iflag, Ispeed, Lflag, Oflag, Ospeed) models terminal state, while BpfHdr, IfData, Timespec, and others preserve binary compatibility for memory operations. These are critical for correct syscalls and must match FreeBSD ABI layouts in field order, type, and alignment.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_15\n\nLANGUAGE: Go\nCODE:\n```\ntype Termios struct {\n    Cc    [20]uint8\n    Cflag uint32\n    Iflag uint32\n    Ispeed uint32\n    Lflag uint32\n    Oflag uint32\n    Ospeed uint32\n}\ntype BpfHdr struct {\n    Pad_cgo_0 [6]uint8\n}\ntype Flock_t struct {\n    Pad_cgo_0 [4]uint8\n}\ntype IfData struct {\n    Pad_cgo_0 [4]uint8\n}\ntype Timespec struct {\n    Pad_cgo_0 [4]uint8\n}\ntype Timeval struct {\n    Pad_cgo_0 [4]uint8\n}\n\n```\n\n----------------------------------------\n\nTITLE: Formatting Text in Markdown\nDESCRIPTION: This snippet shows how to format the text in Markdown, including italics and hyperlinks.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/words.txt#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nThis is an *italicword* and a [*linkedword*](https://example.com/linkedword) and Unicöde.\n```\n\n----------------------------------------\n\nTITLE: Terminal Control Character Constants for Darwin ARM64 in Go\nDESCRIPTION: Constants for terminal control characters (V*) in the syscall package for Darwin ARM64. These define special character positions in the terminal control structure, used for operations like interrupt, erase, and flow control.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_115\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (darwin-arm64), const VDISCARD = 15\npkg syscall (darwin-arm64), const VDSUSP = 11\npkg syscall (darwin-arm64), const VEOF = 0\npkg syscall (darwin-arm64), const VEOL = 1\npkg syscall (darwin-arm64), const VEOL2 = 2\npkg syscall (darwin-arm64), const VERASE = 3\npkg syscall (darwin-arm64), const VINTR = 8\npkg syscall (darwin-arm64), const VKILL = 5\npkg syscall (darwin-arm64), const VLNEXT = 14\npkg syscall (darwin-arm64), const VMIN = 16\npkg syscall (darwin-arm64), const VQUIT = 9\npkg syscall (darwin-arm64), const VREPRINT = 6\npkg syscall (darwin-arm64), const VSTART = 12\npkg syscall (darwin-arm64), const VSTATUS = 18\npkg syscall (darwin-arm64), const VSTOP = 13\npkg syscall (darwin-arm64), const VSUSP = 10\npkg syscall (darwin-arm64), const VT0 = 0\npkg syscall (darwin-arm64), const VT1 = 65536\npkg syscall (darwin-arm64), const VTDLY = 65536\npkg syscall (darwin-arm64), const VTIME = 17\npkg syscall (darwin-arm64), const VWERASE = 4\n```\n\n----------------------------------------\n\nTITLE: Module A Configuration\nDESCRIPTION: First module configuration with a name that intentionally sorts after 'go' alphabetically, which is important for reproducing the test case issue.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_verify_work.txt#2025-04-22_snippet_2\n\nLANGUAGE: plain text\nCODE:\n```\nmodule hexample.com/a // important for test that module name sorts after 'go'\n\ngo 1.21\n```\n\n----------------------------------------\n\nTITLE: Reflection and Runtime Support\nDESCRIPTION: Functions and types for reflect and runtime packages. Provides swapping support for arbitrary types, mutex profiling, and memory statistics enhancements.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.8.txt#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n// reflect functions\nfunc Swapper(interface{}) func(int, int)\n\n// runtime functions and types\nfunc MutexProfile([]BlockProfileRecord) (int, bool)\nfunc SetMutexProfileFraction(int) int\ntype MemStats struct {\n    NumForcedGC uint32\n}\n```\n\n----------------------------------------\n\nTITLE: Functions and Type Definitions in Go\nDESCRIPTION: Declares functions and a struct related to system calls on FreeBSD, including Accept4, FcntlFlock, and SendmsgN with signatures for handling file descriptors and socket operations. The Termios struct handles terminal attributes. These function declarations rely on the termios struct for terminal operations and syscall interaction with file descriptors.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\nfunc Accept4(int, int) (int, Sockaddr, error)\nfunc FcntlFlock(uintptr, int, *Flock_t) error\nfunc SendmsgN(int, []uint8, []uint8, Sockaddr, int) (int, error)\ntype Termios struct {\n    Cc [20]uint8\n    Cflag uint32\n    Iflag uint32\n    Ispeed uint32\n    Lflag uint32\n    Oflag uint32\n    Ospeed uint32\n}\n```\n\n----------------------------------------\n\nTITLE: Unix Shell Script for Test Clang Compiler\nDESCRIPTION: A shell script that simulates the clang compiler by writing 'ok' to a log file. This is placed in a directory with spaces to test path handling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_path_space.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\n\necho ok >$WORK/log.txt\n```\n\n----------------------------------------\n\nTITLE: AppEngine Build Constraint in Go\nDESCRIPTION: A Go file with a build constraint that indicates it should only be included when building for AppEngine. The file imports AppEngine packages to test conditional compilation based on build tags.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vendormod.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// +build appengine\n\npackage m\n\nimport _ \"appengine\"\nimport _ \"appengine/datastore\"\n```\n\n----------------------------------------\n\nTITLE: Testing Quote Functions in Go\nDESCRIPTION: Implements test cases for the Hello, Glass, Go, and Opt functions. It sets the 'LC_ALL' environment variable to 'en' and checks if the functions return the expected quotes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v2.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage quote\n\nimport (\n\t\"os\"\n\t\"testing\"\n)\n\nfunc init() {\n\tos.Setenv(\"LC_ALL\", \"en\")\n}\n\nfunc TestHello(t *testing.T) {\n\thello := \"Hello, world.\"\n\tif out := Hello(); out != hello {\n\t\tt.Errorf(\"Hello() = %q, want %q\", out, hello)\n\t}\n}\n\nfunc TestGlass(t *testing.T) {\n\tglass := \"I can eat glass and it doesn't hurt me.\"\n\tif out := Glass(); out != glass {\n\t\tt.Errorf(\"Glass() = %q, want %q\", out, glass)\n\t}\n}\n\nfunc TestGo(t *testing.T) {\n\tgo1 := \"Don't communicate by sharing memory, share memory by communicating.\"\n\tif out := Go(); out != go1 {\n\t\tt.Errorf(\"Go() = %q, want %q\", out, go1)\n\t}\n}\n\nfunc TestOpt(t *testing.T) {\n\topt := \"If a program is too slow, it must have a loop.\"\n\tif out := Opt(); out != opt {\n\t\tt.Errorf(\"Opt() = %q, want %q\", out, opt)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module File with Redundant Requirements\nDESCRIPTION: A go.mod file containing redundant dependencies that aren't directly needed, used to test preservation behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retention.txt#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.14\n\nrequire (\n\trsc.io/quote v1.5.2\n\trsc.io/sampler v1.3.0 // indirect\n\trsc.io/testonly v1.0.0 // indirect\n)\n```\n\n----------------------------------------\n\nTITLE: C Source File\nDESCRIPTION: Minimal C source file declaring a global integer variable\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/testdata/script/script_test_basics.txt#2025-04-22_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nint x;\n```\n\n----------------------------------------\n\nTITLE: Executing Go Version Script\nDESCRIPTION: This shell script prints a custom Go version message, potentially simulating a Go version binary. There are no prerequisites as it uses echo, a basic command available in all Unix-like environments. It outputs a simple string indicating the Go version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.freebsd-amd64.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n#!/bin/sh\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module\nDESCRIPTION: Defines a Go module named 'example.com/pkg_test' using Go version 1.17.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_trimpath_test_suffix.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/pkg_test\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: Module Version Information in JSON Format\nDESCRIPTION: JSON configuration specifying the version of the mock Go toolchain module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.netbsd-386.txt#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.999testmod.netbsd-386\"}\n```\n\n----------------------------------------\n\nTITLE: Darwin ARM64 Extended System Calls\nDESCRIPTION: Extended and platform-specific system calls for Darwin ARM64, including file system operations and process management.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_100\n\nLANGUAGE: Go\nCODE:\n```\nconst SYS_CHMOD_EXTENDED = 282\nconst SYS_FSTAT64 = 339\nconst SYS_FSTAT64_EXTENDED = 343\nconst SYS_FILEPORT_MAKEPORT = 430\nconst SYS_BSDTHREAD_CREATE = 360\n```\n\n----------------------------------------\n\nTITLE: Module Declaration for rsc.io/badzip\nDESCRIPTION: Simple module declaration file specifying the module name rsc.io/badzip\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badzip_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule rsc.io/badzip\n```\n\n----------------------------------------\n\nTITLE: Defining Use Package in Go\nDESCRIPTION: This snippet defines a Go package named 'use' that imports a package from the retracted module being tested.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_retract.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage use\n\nimport _ \"example.com/retract/self/prev\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Link Format\nDESCRIPTION: Shows documentation links formatted in Markdown with proper linking syntax and escaping.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/doclink.txt#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nIn this package, see [Doc](#Doc) and [Parser.Parse](#Parser.Parse). There is no \\[Undef] or \\[Undef.Method]. See also the [comment](/go/doc/comment) package, especially [comment.Doc](/go/doc/comment#Doc) and [comment.Parser.Parse](/go/doc/comment#Parser.Parse).\n```\n\n----------------------------------------\n\nTITLE: Main Package with Launchpad.net Import\nDESCRIPTION: This snippet defines a main package that imports a package from Launchpad.net. It's used to test build behavior when the required version control tool (bzr) is missing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vcs_missing.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport _ \"launchpad.net/gocheck\"\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Testing Mutex Profiling in Go with Custom Output Name\nDESCRIPTION: Executes a Go test with mutex profiling and a custom output name for the test executable. It then verifies the existence of the custom-named executable.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_profile.txt#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngo test -mutexprofile errors.prof -o myerrors.test$GOEXE errors\nexists -exec myerrors.test$GOEXE\n```\n\n----------------------------------------\n\nTITLE: Testing Go Work File Compatibility with Outdated Module\nDESCRIPTION: This snippet tests the scenario where a go.work file references a module with a go.mod file requiring a newer Go version. It expects the build and 'go work sync' commands to fail with appropriate error messages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline_too_new.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncp go.work.old go.work\n! go build .\nstderr '^go: module . listed in go.work file requires go >= 1.99999, but go.work lists go 1.10; to update it:\\n\\tgo work use$'\n\n! go work sync\nstderr '^go: cannot load module . listed in go.work file: go.mod requires go >= 1.99999 \\(running go 1\\..+\\)$'\n```\n\n----------------------------------------\n\nTITLE: Defining Go Package in Subdirectory\nDESCRIPTION: This snippet defines a Go package named 'x' in the 'sub' directory. It's an empty package declaration used for testing package resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dir.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage x\n```\n\n----------------------------------------\n\nTITLE: Module Version Info JSON\nDESCRIPTION: JSON file containing version information for the Go module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badmod_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.0.0\"}\n```\n\n----------------------------------------\n\nTITLE: DWARF Debugging Information Support for Unsupported Types\nDESCRIPTION: DWARF debugging type system support for handling unsupported types in compiled Go programs. Provides methods to access common type information and size from unsupported DWARF debug entries.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nmethod (*UnsupportedType) Common() *CommonType\nmethod (*UnsupportedType) Size() int64\nmethod (*UnsupportedType) String() string\ntype UnsupportedType struct\ntype UnsupportedType struct, embedded CommonType\ntype UnsupportedType struct, Tag Tag\n```\n\n----------------------------------------\n\nTITLE: Base go.mod Configuration\nDESCRIPTION: Basic go.mod file with a retraction directive but missing module declaration\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_fix_version.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo 1.16\n\nretract latest\n```\n\n----------------------------------------\n\nTITLE: Supporting Import Comment in Packages - go/build Package - Go\nDESCRIPTION: Defines a constant and a field to facilitate import comment handling by the go/build package. The ImportComment constant and ImportComment field in Package struct allow tools to recognize and extract go:generate or similar source directives. Dependencies: go/build and syntax analysis components; the ImportComment string field is set based on the parsed source.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\nconst ImportComment = 4\n// ...\nconst ImportComment ImportMode\n// ...\ntype Package struct {\n    ImportComment string\n    // ... other fields\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Dot-Go Suffix Dependency\nDESCRIPTION: This go.mod file defines a module 'm' and specifies a dependency on 'example.com/dotgo.go' version 1.0.0. It sets the Go version to 1.13.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_trailing_slash.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nmodule m\n\ngo 1.13\n\nrequire example.com/dotgo.go v1.0.0\n```\n\n----------------------------------------\n\nTITLE: V3 Branch Setup with Directory Structure\nDESCRIPTION: Creates v3 branch with nested directory structure and file creation\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/gitrepo1.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout master\ngit branch v3\ngit checkout v3\nmkdir v3/sub/dir\necho 'v3/sub/dir/file'\ncp stdout v3/sub/dir/file.txt\ngit add v3\ngit commit -a -m 'add v3/sub/dir/file.txt'\n```\n\n----------------------------------------\n\nTITLE: HTML Format\nDESCRIPTION: HTML formatted version with anchor tags for Go homepage URLs\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/link.txt#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p>The Go home page is <a href=\"https://go.dev/\">https://go.dev/</a>.\nIt used to be <a href=\"https://golang.org\">https://golang.org</a>.\n```\n\n----------------------------------------\n\nTITLE: Expected Bazaar Log Output\nDESCRIPTION: The expected output from the 'bzr log' command after committing the hello world Go program. This is used to verify the test worked correctly by comparing actual output with this expected output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/bzr/hello.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n------------------------------------------------------------\nrevno: 1\ncommitter: Russ Cox <rsc@google.com>\nbranch nick: b\ntimestamp: Thu 2017-09-21 21:20:12 -0400\nmessage:\n  hello world\n```\n\n----------------------------------------\n\nTITLE: NetBSD Syslog Constants and Functions\nDESCRIPTION: Syslog package constants, types and functions for logging on NetBSD ARM64 systems. Includes priority levels and writer methods for different log severities.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nconst (\n    LOG_USER Priority\n    LOG_UUCP = 64\n    LOG_WARNING = 4\n)\n\ntype Priority int\ntype Writer struct\n\nfunc Dial(network, raddr string, priority Priority, tag string) (*Writer, error)\nfunc New(priority Priority, tag string) (*Writer, error)\nfunc NewLogger(priority Priority, flags int) (*log.Logger, error)\n```\n\n----------------------------------------\n\nTITLE: Building and Running Main Application in Shell\nDESCRIPTION: The snippet compiles and executes the main.go file, comparing outputs to validate the execution correctness. It demonstrates building, running, and validating a Go program using bash commands, requiring the Go compiler and runtime in the environment.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_dash_x.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo build -x -o main main.go\ncp stderr commands.txt\ncat header.txt commands.txt\ncp stdout test.sh\n\nexec ./main\ncmp stderr hello.txt\nrm ./main\n\nexec /usr/bin/env bash -x test.sh\nexec ./main\ncmp stderr hello.txt\n\ngrep '^WORK=(.*)\\n' commands.txt\n\n```\n\n----------------------------------------\n\nTITLE: Creating Go Package with Circular Test Dependency (Part 1) (Go)\nDESCRIPTION: Defines the `datastore` package in `datastore/datastore_health.go`. It imports both its own package (`golang.org/issue45863/datastore`) and the `sql` subpackage (`golang.org/issue45863/datastore/sql`). This setup contributes to the import cycle when the `sql` package's test file (`sql_test.go`) imports the `datastore` package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_test_cycle.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n-- datastore/datastore_health.go --\npackage datastore\n\nimport (\n\t\"golang.org/issue45863/datastore\"\n\t\"golang.org/issue45863/datastore/sql\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Module in .mod File\nDESCRIPTION: Simple .mod file declaring the module name for the Golang toolchain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.windows-386.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Module Definition with Go 1.20\nDESCRIPTION: Defines a Go module named 'example' using Go version 1.20\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_pkgconfig_error.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example\ngo 1.20\n```\n\n----------------------------------------\n\nTITLE: Testing End-of-Line Anchor Matching\nDESCRIPTION: Tests patterns with end-of-line anchors (def$) against various strings. Shows how trailing anchors affect match positions with different pattern configurations.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_38\n\nLANGUAGE: go\nCODE:\n```\n\"def$\"\n-;-;-;-\n-;3-6;-;3-6\n\"^(?:def$)$\"\n-;-;-;-\n-;-;-;-\n\"^(?:def$)\"\n-;-;-;-\n-;-;-;-\n\"(?:def$)$\"\n-;-;-;-\n-;3-6;-;3-6\n```\n\n----------------------------------------\n\nTITLE: Testing Wildcard Pattern Matching with ASCII Characters\nDESCRIPTION: Tests wildcard pattern matching with the '...' pattern against strings including 'abc'. Shows how boundary assertions and non-capturing groups affect match results.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_26\n\nLANGUAGE: go\nCODE:\n```\n\"^...$\"\n-;-;-;-\n0-3;0-3;0-3;0-3\n\"^(?:^...$)$\"\n-;-;-;-\n0-3;0-3;0-3;0-3\n\"^(?:^...$)\"\n-;-;-;-\n0-3;0-3;0-3;0-3\n\"(?:^...$)$\"\n-;-;-;-\n0-3;0-3;0-3;0-3\n```\n\n----------------------------------------\n\nTITLE: Defining Darwin ARM64 System Call Constants in Go\nDESCRIPTION: Defines syscall constants for various system operations on Darwin ARM64 platform. These constants represent system call numbers that are used to interface with the kernel for operations like file I/O, process management, and system configuration.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_188\n\nLANGUAGE: Go\nCODE:\n```\nconst SYS_SETLOGIN ideal-int\nconst SYS_SETPGID = 82\nconst SYS_SETPRIORITY = 96\nconst SYS_SETPRIVEXEC = 152\nconst SYS_SETREGID = 127\nconst SYS_SETREUID = 126\nconst SYS_SETRLIMIT = 195\nconst SYS_SETSGROUPS = 287\nconst SYS_SETSID = 147\nconst SYS_SETSOCKOPT = 105\nconst SYS_SETTID = 285\nconst SYS_SETTID_WITH_PID = 311\nconst SYS_SETTIMEOFDAY = 122\nconst SYS_SETUID = 23\nconst SYS_SETWGROUPS = 289\nconst SYS_SETXATTR = 236\n// Additional constants omitted for brevity...\n```\n\n----------------------------------------\n\nTITLE: Defining Hardware Address Types Constants in Go for NetBSD ARM64\nDESCRIPTION: Declaration of hardware address type (ARPHRD_*) constants used in the Address Resolution Protocol (ARP) for NetBSD ARM64.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_113\n\nLANGUAGE: Go\nCODE:\n```\nconst ARPHRD_ARCNET = 7\nconst ARPHRD_ETHER = 1\n```\n\n----------------------------------------\n\nTITLE: Test File Implementation\nDESCRIPTION: Basic test file with empty test function\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/fips.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\nimport \"testing\"\nfunc Test(t *testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Vendor Package Example Go File\nDESCRIPTION: A simple Go file in the vendor/pkg directory for testing vendor resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dot.txt#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\npackage pkg\n```\n\n----------------------------------------\n\nTITLE: Defining an Empty Go Package - Go\nDESCRIPTION: Establishes a minimal Go package named 'incompatible'. This file contains solely a package declaration, with no types, functions, or variables. It enables builds to recognize and import the package but provides no functionality. There are no dependencies or configuration parameters.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_incompatible_v2.0.0+incompatible.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage incompatible\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module for rsc.io/fortune\nDESCRIPTION: This snippet defines the module configuration for rsc.io/fortune. It specifies the module name and the Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_fortune_v0.0.1.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule rsc.io/fortune\ngo 1.21rc999\n```\n\n----------------------------------------\n\nTITLE: Setting Mercurial Bookmarks to Match Original Repository\nDESCRIPTION: Forces bookmarks to point to specific revisions to match the structure of the original reference repository.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/hg/hgrepo1.txt#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# Adding commits to the above branches updates both the branch heads and the\n# corresponding bookmarks.\n# But apparently at some point it did not do so? The original copy of this repo\n# had bookmarks pointing to the base of each branch instead of the tip. 🤔\n# Either way, force the bookmarks we care about to match the original copy of\n# the repo.\nhg book v2 -r 3 --force\nhg book v2.3.4 -r 1 --force\nhg book v3 -r 5 --force\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Usage of Clean Command\nDESCRIPTION: Tests that 'go clean -modcache' cannot be used with package arguments, verifying the error message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_clean_cache.txt#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n! go clean -modcache m\nstderr 'go: clean -modcache cannot be used with package arguments'\n```\n\n----------------------------------------\n\nTITLE: IP Address Class Constants in Go Syscall Package for darwin-arm64\nDESCRIPTION: Constants that define IP address class boundaries and masks for Class A, B, C, and D networks. These constants are used for IP address manipulation and classification in network code.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_67\n\nLANGUAGE: Go\nCODE:\n```\nconst IN_CLASSA_HOST = 16777215\nconst IN_CLASSA_HOST ideal-int\nconst IN_CLASSA_MAX = 128\nconst IN_CLASSA_MAX ideal-int\nconst IN_CLASSA_NET = 4278190080\nconst IN_CLASSA_NET ideal-int\nconst IN_CLASSA_NSHIFT = 24\nconst IN_CLASSA_NSHIFT ideal-int\nconst IN_CLASSB_HOST = 65535\nconst IN_CLASSB_HOST ideal-int\nconst IN_CLASSB_MAX = 65536\nconst IN_CLASSB_MAX ideal-int\nconst IN_CLASSB_NET = 4294901760\nconst IN_CLASSB_NET ideal-int\nconst IN_CLASSB_NSHIFT = 16\nconst IN_CLASSB_NSHIFT ideal-int\nconst IN_CLASSC_HOST = 255\nconst IN_CLASSC_HOST ideal-int\nconst IN_CLASSC_NET = 4294967040\nconst IN_CLASSC_NET ideal-int\nconst IN_CLASSC_NSHIFT = 8\nconst IN_CLASSC_NSHIFT ideal-int\nconst IN_CLASSD_HOST = 268435455\nconst IN_CLASSD_HOST ideal-int\nconst IN_CLASSD_NET = 4026531840\nconst IN_CLASSD_NET ideal-int\nconst IN_CLASSD_NSHIFT = 28\nconst IN_CLASSD_NSHIFT ideal-int\nconst IN_LINKLOCALNETNUM = 2851995648\nconst IN_LINKLOCALNETNUM ideal-int\nconst IN_LOOPBACKNET = 127\nconst IN_LOOPBACKNET ideal-int\n```\n\n----------------------------------------\n\nTITLE: P1 Package Implementation with Multiple Imports\nDESCRIPTION: Package p1 implementation showing various import patterns including versioned modules and subdirectories\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_legacy_mod.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage p1\n\nimport _ \"old/p2\"\nimport _ \"new/v2\"\nimport _ \"new/v2/p2\"\nimport _ \"new/sub/v2/x/v1/y\" // v2 is module, v1 is directory in module\nimport _ \"new/sub/inner/x\"   // new/sub/inner/go.mod overrides new/sub/go.mod\n```\n\n----------------------------------------\n\nTITLE: Resource Limit Struct for darwin-arm64\nDESCRIPTION: Definition of the Rlimit struct used to get and set resource limits for processes on darwin-arm64 platforms. Contains current and maximum values for system resources.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_130\n\nLANGUAGE: go\nCODE:\n```\ntype Rlimit struct {\n\tCur uint64\n\tMax uint64\n}\n```\n\n----------------------------------------\n\nTITLE: Instrumenting Go Runtime with Experimental Events\nDESCRIPTION: Example of instrumenting the Go runtime to emit experimental events, ensuring atomic emission with traceAcquire and traceRelease.\nSOURCE: https://github.com/golang/go/blob/master/src/internal/trace/tracev2/EXPERIMENTS.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc someRuntimeFunction() {\n    traceAcquire()\n    w := traceEvent(0)\n    w.EmitExperimentalEvent1(42, 84)\n    traceRelease()\n\n    // Perform operation\n\n    traceAcquire()\n    w = traceEvent(0)\n    w.EmitExperimentalEvent2(\"operation complete\")\n    traceRelease()\n}\n```\n\n----------------------------------------\n\nTITLE: Testing 'go run' Command Outside Module\nDESCRIPTION: Verifies the behavior of 'go run' when executed outside a module context, including failure for unresolved packages and success for standard library imports.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_outside.txt#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n! go run example.com/printversion\nstderr '^no required module provides package example.com/printversion: go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n\n! go run ./needmod/needmod.go\nstderr '^needmod[/\\\\]needmod.go:10:2: no required module provides package example.com/version: go.mod file not found in current directory or any parent directory; see ''go help modules''$'\n\ngo run ./stdonly/stdonly.go\nstdout 'path is command-line-arguments$'\nstdout 'main is  $'\n```\n\n----------------------------------------\n\nTITLE: Module Modules.txt Configuration\nDESCRIPTION: Expected content for the module-generated modules.txt file. It lacks the '## workspace' marker which means standard vendor mode should be used.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_modules_txt_conditional.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n# example.com/b v0.0.0 => ./b\n## explicit; go 1.21\nexample.com/b\n# example.com/b => ./b\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Function in Go\nDESCRIPTION: The main function calls 255 other functions (t0 to t254) sequentially. This demonstrates a large number of function calls in Go.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/testdata/script/dwarf5_gen_assembly_and_go.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc main() {\n\tt0()\n\tt1()\n\t// ... (omitted for brevity)\n\tt253()\n\tt254()\n}\n```\n\n----------------------------------------\n\nTITLE: Secondary Package with Vendor Import\nDESCRIPTION: Package p2 that imports the vendor version of package p, creating the duplicate import scenario.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_vendor_dup_err.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage p2\n\nimport _ \"dupload/vendor/p\"\n```\n\n----------------------------------------\n\nTITLE: Defining Package X in Module A/X\nDESCRIPTION: Creates an empty package 'x' in module 'example.com/a/x' to create an ambiguous import situation with the 'x' package in 'example.com/a'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_ambiguous_import.txt#2025-04-22_snippet_11\n\nLANGUAGE: Go\nCODE:\n```\npackage x\n```\n\n----------------------------------------\n\nTITLE: Copying Initial Release Notes Template\nDESCRIPTION: Commands to copy initial release notes template to start a new release cycle.\nSOURCE: https://github.com/golang/go/blob/master/doc/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> cd doc\n> cp -R initial/ next\n```\n\n----------------------------------------\n\nTITLE: Running go vet with printf flag enabled\nDESCRIPTION: This snippet shows running go vet with the printf flag explicitly enabled. It expects an error message containing 'Printf'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n! go vet -printf m/vetpkg\nstderr 'Printf'\n```\n\n----------------------------------------\n\nTITLE: CGO Implementation with Source Directory Flag\nDESCRIPTION: Implements a basic CGO package with CFLAGS configuration to include the source directory. Includes a variable V initialized to 0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_!c!g!o_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Copyright 2018 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\npackage CGO\n\n// #cgo CFLAGS: -I${SRCDIR}\nimport \"C\"\n\nvar V = 0\n```\n\n----------------------------------------\n\nTITLE: Gofmt Command Shell Script Implementation\nDESCRIPTION: Shell script for the 'gofmt' command that outputs a message indicating it's unused. This serves as a placeholder implementation for the code formatting tool.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-riscv64.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: Routing-related Structs for darwin-arm64\nDESCRIPTION: Collection of routing-related structure definitions used for network routing operations on darwin-arm64, including route messages and metrics.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_131\n\nLANGUAGE: go\nCODE:\n```\ntype RouteMessage struct { //deprecated\n\tHeader RtMsghdr\n\tData []uint8\n}\n\ntype RoutingMessage interface { //deprecated\n\tunexported methods\n}\n\ntype RtMetrics struct {\n\tLocks uint32\n\tMtu uint32\n\tHopcount uint32\n\tExpire int32\n\tRecvpipe uint32\n\tSendpipe uint32\n\tSsthresh uint32\n\tRtt uint32\n\tRttvar uint32\n\tPksent uint32\n\tFiller [4]uint32\n}\n\ntype RtMsghdr struct {\n\tMsglen uint16\n\tVersion uint8\n\tType uint8\n\tIndex uint16\n\tPad_cgo_0 [2]uint8\n\tFlags int32\n\tAddrs int32\n\tPid int32\n\tSeq int32\n\tErrno int32\n\tUse int32\n\tInits uint32\n\tRmx RtMetrics\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Placeholder README in GOROOT cmd Directory (Text)\nDESCRIPTION: Defines the content of `$WORK/goroot/src/cmd/README`. This file exists solely to ensure the `cmd` directory is present within the test's GOROOT structure, allowing commands or patterns potentially matching `cmd` to function correctly if needed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_gofile_in_goroot.txt#2025-04-22_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n-- $WORK/goroot/src/cmd/README --\nThis directory must exist in order for the 'cmd' pattern to have something to\nmatch against.\n```\n\n----------------------------------------\n\nTITLE: Gofmt Formatted Text\nDESCRIPTION: Shows how gofmt tool formats the text block with proper indentation\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/code3.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nA tab-indented\n(surrounded by more blank lines)\ncode block and haiku.\n```\n\n----------------------------------------\n\nTITLE: Defining IPv6 Option Constants in Go for Darwin ARM64 CGO\nDESCRIPTION: This snippet defines constants for IPv6 options. These are used to set or get various IPv6-specific socket options.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_155\n\nLANGUAGE: Go\nCODE:\n```\nconst IPV6_2292DSTOPTS = 23\nconst IPV6_2292DSTOPTS ideal-int\nconst IPV6_2292HOPLIMIT = 20\nconst IPV6_2292HOPLIMIT ideal-int\nconst IPV6_2292HOPOPTS = 22\nconst IPV6_2292HOPOPTS ideal-int\n// ... more IPv6 option constants\n```\n\n----------------------------------------\n\nTITLE: Testing Directory Access in Go Package c\nDESCRIPTION: A test function for package c that verifies the existence of testdata directories at multiple relative paths. The test checks for files both in the package's own testdata directory and in higher-level directories.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vendormod.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage c\n\nimport (\n\t\"os\"\n\t\"testing\"\n)\n\nfunc TestDir(t *testing.T) {\n\tif _, err := os.Stat(\"../../../testdata/1\"); err != nil {\n\t\tt.Fatalf(\"testdata: %v\", err)\n\t}\n\tif _, err := os.Stat(\"./testdata/1\"); err != nil {\n\t\tt.Fatalf(\"testdata: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining QUOTE Package with Uppercase Quote Functions in Go\nDESCRIPTION: This snippet defines the QUOTE package with four functions that return uppercase versions of quotes from the 'rsc.io/quote' package. It includes HELLO, GLASS, GO, and OPT functions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_!q!u!o!t!e_v1.5.2.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// PACKAGE QUOTE COLLECTS LOUD SAYINGS.\npackage QUOTE\n\nimport (\n\t\"strings\"\n\n\t\"rsc.io/quote\"\n)\n\n// HELLO RETURNS A GREETING.\nfunc HELLO() string {\n\treturn strings.ToUpper(quote.Hello())\n}\n\n// GLASS RETURNS A USEFUL PHRASE FOR WORLD TRAVELERS.\nfunc GLASS() string {\n\treturn strings.ToUpper(quote.GLASS())\n}\n\n// GO RETURNS A GO PROVERB.\nfunc GO() string {\n\treturn strings.ToUpper(quote.GO())\n}\n\n// OPT RETURNS AN OPTIMIZATION TRUTH.\nfunc OPT() string {\n\treturn strings.ToUpper(quote.OPT())\n}\n```\n\n----------------------------------------\n\nTITLE: Internal Test Export\nDESCRIPTION: Defines an internal test file that exports a variable for use in external tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_test_issue11864.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\npackage tx3\n\nvar Exported = true\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module and Dependencies in go.mod\nDESCRIPTION: This `go.mod` file defines a Go module named 'm' using Go version 1.20. It declares a direct dependency on `rsc.io/quote` version v1.5.2 and lists several indirect dependencies (`golang.org/x/text`, `rsc.io/sampler`, `rsc.io/testonly`) required by the direct dependency or its transitive dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/malformed_gosum_issue62345.txt#2025-04-22_snippet_1\n\nLANGUAGE: gomod\nCODE:\n```\n-- go.mod --\nmodule m\n\ngo 1.20\n\nrequire rsc.io/quote v1.5.2\n\nrequire (\n\tgolang.org/x/text v0.0.0-20170915032832-14c0d48ead0c // indirect\n\trsc.io/sampler v1.3.0 // indirect\n\trsc.io/testonly v1.0.0 // indirect\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring System Call Functions in Go for NetBSD\nDESCRIPTION: These function declarations represent system calls for file control and message sending on NetBSD. They provide low-level access to operating system functionality.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_23\n\nLANGUAGE: Go\nCODE:\n```\nfunc FcntlFlock(uintptr, int, *Flock_t) error\nfunc SendmsgN(int, []uint8, []uint8, Sockaddr, int) (int, error)\n```\n\n----------------------------------------\n\nTITLE: Initial Go Module Definition\nDESCRIPTION: Defines the base module without version suffix, specifying Go 1.18 as the required version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/odd-tags.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule vcs-test.golang.org/git/odd-tags.git\n\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: NetBSD Data Link Type Constants\nDESCRIPTION: Constants defining various data link types (DLT) for network interfaces and packet capture on NetBSD ARM64. Includes Juniper-specific, PPP, USB, and other protocol constants.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_14\n\nLANGUAGE: Go\nCODE:\n```\nconst DLT_JUNIPER_GGSN = 133\nconst DLT_JUNIPER_ISM = 194\nconst DLT_JUNIPER_MFR = 134\nconst DLT_JUNIPER_MLFR = 131\nconst DLT_JUNIPER_MLPPP = 130\n```\n\n----------------------------------------\n\nTITLE: Go Module Z v1.1.0 Implementation\nDESCRIPTION: Module Z version 1.1.0 implementation with minimal code, used for testing module version resolution in the workspace.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune_all.txt#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/z\n\ngo 1.18\n```\n\nLANGUAGE: go\nCODE:\n```\npackage z\n```\n\n----------------------------------------\n\nTITLE: Mock Clang Compiler Script (Shell)\nDESCRIPTION: This shell script acts as a placeholder for the `clang` compiler on non-Windows systems. If executed, it writes \"ran clang\" to `bug.txt`. Similar to the mock `gcc` script, the test ensures this script is *not* run.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_path.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n-- p/clang --\n#!/bin/sh\necho ran clang >bug.txt\n```\n\n----------------------------------------\n\nTITLE: Handling Pseudo-Versions in Go List without Retraction\nDESCRIPTION: Addresses the scenario where 'go list -m mod@latest' reports errors for pseudo-versions if all versions are retracted, with a TODO note on exposing the pseudo-version by the proxy.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_retract.txt#2025-04-22_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\n# 'go list -m mod@latest' reports an error if all versions are retracted.\\ngo list -m -e -f '{{.Error.Err}}' example.com/retract/self/all@latest\\nstdout '^module example.com/retract/self/all: no matching versions for query \"latest\"$'\n```\n\n----------------------------------------\n\nTITLE: Testing go list Template Output\nDESCRIPTION: Tests the go list command with -f flag using a template to format output to stdout\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_json_with_f.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo list -f '{{.}}' ./...\n```\n\n----------------------------------------\n\nTITLE: Verifying Exit 0 Test Output in Go\nDESCRIPTION: This snippet defines a test that exits with status 0. It's used to verify how 'go test -json' reports tests that exit successfully without running any actual tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_panic_exit.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage exit0_test\n\nimport (\n\t\"os\"\n\t\"testing\"\n)\n\nfunc TestMain(m *testing.M) {\n\tos.Exit(0)\n}\n```\n\n----------------------------------------\n\nTITLE: Struct Type Definitions in Go\nDESCRIPTION: Struct type definitions with various field types and embedded structs.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/api/testdata/src/pkg/p1/golden.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype ByteStruct struct {\n    B uint8\n    R int32\n}\n\ntype Codec struct {\n    Func func(int, int) int\n}\n\ntype S struct {\n    Public *int\n    PublicTime Time\n}\n\ntype S2 struct {\n    Extra bool\n    embedded S\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Module 'n' with Dependencies\nDESCRIPTION: This go.mod file for module 'n' specifies its dependencies and includes a replace directive for 'example.com/dep'. This replace will also be overridden by the one in go.work.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace_conflict_override.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/n\n\nrequire example.com/dep v1.0.0\nreplace example.com/dep => ./dep2\n```\n\n----------------------------------------\n\nTITLE: Module A Configuration with External Dependency\nDESCRIPTION: Module configuration for example.com/a that includes a dependency on rsc.io/quote v1.1.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_issue54372.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/a\n\ngo 1.21\n\nrequire rsc.io/quote v1.1.0\n```\n\n----------------------------------------\n\nTITLE: Empty Go Package Definition\nDESCRIPTION: An empty Go package that may be used as part of the test setup.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_minimize.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage empty\n```\n\n----------------------------------------\n\nTITLE: Dummy Quote Module\nDESCRIPTION: Defines a dummy implementation of the rsc.io/quote module for testing replacement scenarios.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_update_unrelated_sum.txt#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nmodule rsc.io/quote\n\ngo 1.16\n```\n\nLANGUAGE: go\nCODE:\n```\npackage quote\n```\n\n----------------------------------------\n\nTITLE: Defining the Go Single Package Index Format (v0)\nDESCRIPTION: Describes the binary layout for a version 0 Go index file, representing a single package. It starts with a magic string 'go index v0\\n', followed by the offset to the string table, detailed information for the single package (using the same structure as in v2), and finally the string table. Uses little-endian uint32 and uvarint-prefixed strings.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/internal/modindex/index_format.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n“go index v0\\n”\nstr uint32 - offset of string table\nfor the single RawPackage:\n\t[same RawPackage format as above]\n[string table]\n```\n\n----------------------------------------\n\nTITLE: Defining Go module and package\nDESCRIPTION: Defines a simple Go module 'x' and a package that imports github.com/rsc/legacytest.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pseudo.txt#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nmodule x\n```\n\nLANGUAGE: go\nCODE:\n```\npackage x\nimport \"github.com/rsc/legacytest\"\n```\n\n----------------------------------------\n\nTITLE: Importing Package from Git Repository\nDESCRIPTION: A Go source file that imports a package from the test Git repository within SVN. Used to test cross-repository dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/test1-svn-git.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nimport \"vcs-test.swtch.com/go/test1-svn-git/git-README-only/pkg\"\n\nconst _ = pkg.Message\n```\n\n----------------------------------------\n\nTITLE: Modular Multiplicative Inverse Test Vectors\nDESCRIPTION: A comprehensive set of test vectors for modular multiplicative inverse calculations. Each test case consists of three hexadecimal values: ModInv (the modular multiplicative inverse), A (the input value), and M (the modulus). The values satisfy the equation ModInv * A ≡ 1 (mod M) with the constraint 0 ≤ ModInv < M.\nSOURCE: https://github.com/golang/go/blob/master/src/crypto/internal/fips140/bigmod/testdata/mod_inv_tests.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# ModInv tests.\n#\n# These test vectors satisfy ModInv * A = 1 (mod M) and 0 <= ModInv < M.\n\nModInv = 00\nA = 00\nM = 01\n\nModInv = 00\nA = 01\nM = 01\n\nModInv = 00\nA = 02\nM = 01\n\nModInv = 00\nA = 03\nM = 01\n\nModInv = 64\nA = 54\nM = e3\n\nModInv = 13\nA = 2b\nM = 30\n\nModInv = 2f\nA = 30\nM = 37\n\nModInv = 4\nA = 13\nM = 4b\n\nModInv = 1c47\nA = cd4\nM = 6a21\n\nModInv = 2b97\nA = 8e7\nM = 49c0\n\nModInv = 29b9\nA = fcb\nM = 3092\n\nModInv = a83\nA = 14bf\nM = 41ae\n\nModInv = 18f15fe1\nA = 11b5d53e\nM = 322e92a1\n\nModInv = 32f9453b\nA = 8af6df6\nM = 33d45eb7\n\nModInv = d696369\nA = c5f89dd5\nM = fc09c17c\n\nModInv = 622839d8\nA = 60c2526\nM = 74200493\n\nModInv = fb5a8aee7bbc4ef\nA = 24ebd835a70be4e2\nM = 9c7256574e0c5e93\n\nModInv = 846bc225402419c\nA = 23026003ab1fbdb\nM = 1683cbe32779c59b\n\nModInv = 5ff84f63a78982f9\nA = 4a2420dc733e1a0f\nM = a73c6bfabefa09e6\n\nModInv = 133e74d28ef42b43\nA = 2e9511ae29cdd41\nM = 15234df99f19fcda\n\nModInv = 46ae1fabe9521e4b99b198fc8439609023aa69be2247c0d1e27c2a0ea332f9c5\nA = 6331fec5f01014046788c919ed50dc86ac7a80c085f1b6f645dd179c0f0dc9cd\nM = 8ef409de82318259a8655a39293b1e762fa2cc7e0aeb4c59713a1e1fff6af640\n\nModInv = 444ccea3a7b21677dd294d34de53cc8a5b51e69b37782310a00fc6bcc975709b\nA = 679280bd880994c08322143a4ea8a0825d0466fda1bb6b3eb86fc8e90747512b\nM = e4fecab84b365c63a0dab4244ce3f921a9c87ec64d69a2031939f55782e99a2e\n\nModInv = 1ac7d7a03ceec5f690f567c9d61bf3469c078285bcc5cf00ac944596e887ca17\nA = 1593ef32d9c784f5091bdff952f5c5f592a3aed6ba8ea865efa6d7df87be1805\nM = 1e276882f90c95e0c1976eb079f97af075445b1361c02018d6bd7191162e67b2\n\nModInv = 639108b90dfe946f498be21303058413bbb0e59d0bd6a6115788705abd0666d6\nA = 9258d6238e4923d120b2d1033573ffcac691526ad0842a3b174dccdbb79887bd\nM = ce62909c39371d463aaba3d4b72ea6da49cb9b529e39e1972ef3ccd9a66fe08f\n```\n\n----------------------------------------\n\nTITLE: Go Test File for CRLF Handling in Examples\nDESCRIPTION: Complete Go test file containing examples that verify correct handling of different line endings in example output. It imports necessary packages for I/O operations and platform detection.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_crlf_example.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage  x\n\nimport (\n    \"io\"\n    \"fmt\"\n    \"os\"\n    \"runtime\"\n)\n\nfunc Example_lf() {\n\tfmt.Print(\"foo\", \"\\n\", \"bar\")\n\t// Output:\n\t// foo\n\t// bar\n}\n\nfunc Example_println() {\n\tfmt.Println(\"foo\")\n\tfmt.Println(\"bar\")\n\t// Output:\n\t// foo\n\t// bar\n}\n\nfunc Example_crlf() {\n\tif runtime.GOOS == \"windows\" {\n\t\tio.WriteString(os.Stdout, \"foo\\r\\nbar\\r\\n\")\n\t} else {\n\t\tio.WriteString(os.Stdout, \"foo\\nbar\\n\")\n\t}\n\t// Output:\n\t// foo\n\t// bar\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Command Behavior with Syntax Errors\nDESCRIPTION: This script sets GO111MODULE to off and executes three Go commands with the expectation that they will fail due to syntax errors in the package files. The commands tested are 'go list', 'go build', and 'go install'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/pattern_syntax_error.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=off\n\n# patterns match directories with syntax errors\n! go list ./...\n! go build ./...\n! go install ./...\n```\n\n----------------------------------------\n\nTITLE: Restoring Preinstalled Standard Library Archives using installgoroot GODEBUG Setting (Go 1.20)\nDESCRIPTION: Introduced in Go 1.20, this setting reverts the behavior of Go installations regarding standard library package archives (.a files). Go 1.20 stopped shipping pre-built archives, building them on demand instead. Setting installgoroot=1 restores the Go 1.19 behavior of installing and using pre-built standard library archives from GOROOT/pkg. Set via GODEBUG environment variable (e.g., GODEBUG=installgoroot=1).\nSOURCE: https://github.com/golang/go/blob/master/doc/godebug.md#2025-04-22_snippet_23\n\nLANGUAGE: plaintext\nCODE:\n```\ninstallgoroot\n```\n\n----------------------------------------\n\nTITLE: Module Definition Files for Testing\nDESCRIPTION: Go module definition files and placeholder files used in the test script. These files establish the module structure needed to test the various GO111MODULE behaviors.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_enabled.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n-- $GOPATH/src/x/y/z/go.mod --\nmodule x/y/z\n-- $GOPATH/src/x/y/z/w/w.txt --\n-- $GOPATH/foo/go.mod --\nmodule example.com/mod\n-- $GOPATH/foo/bar/baz/quux.txt --\n```\n\n----------------------------------------\n\nTITLE: Unicode 13.0.0 support in unicode package\nDESCRIPTION: Constants and variables related to Unicode 13.0.0 support. Includes the Unicode version constant and RangeTable variables for new scripts added in Unicode 13.0.0 such as Chorasmian, Dives Akuru, Khitan Small Script, and Yezidi.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nconst Version = \"13.0.0\"\nvar Chorasmian *RangeTable\nvar Dives_Akuru *RangeTable\nvar Khitan_Small_Script *RangeTable\nvar Yezidi *RangeTable\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module for Empty Subdirectory\nDESCRIPTION: This snippet defines a Go module named 'example.net/emptysubdir' with Go version 1.16. It's used as the module context for the test cases in the script.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_nopkgs.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/emptysubdir\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Package zz Definition\nDESCRIPTION: Empty package declaration in mixed-case directory path\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badfile5_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage zz\n```\n\n----------------------------------------\n\nTITLE: Verifying cache invalidation on testdata modification\nDESCRIPTION: Tests cache behavior when modifying files in the testdata directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test_cached.txt#2025-04-22_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ngo test -run=ReadTestdata .\n! stdout '(cached)'\ngo test -run=ReadTestdata .\nstdout '(cached)'\ncp testdata/bar.txt testdata/foo.txt\ngo test -run=ReadTestdata .\n! stdout '(cached)'\n```\n\n----------------------------------------\n\nTITLE: Package w Definition\nDESCRIPTION: A simple Go package named w that is a subpackage of z in the test module structure.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gobuild_import.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage w\n```\n\n----------------------------------------\n\nTITLE: Empty Package Declaration\nDESCRIPTION: Go source file declaring an empty package named 'retract'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_v1.0.0-bad.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage retract\n```\n\n----------------------------------------\n\nTITLE: Testing Go Build Coverage via Shell Commands - Shell Script\nDESCRIPTION: Executes a series of shell commands to build Go binaries with coverage flags, run them with specified GOCOVERDIR directories, and analyze coverage output. Verifies which packages are included in coverage data both by default and with explicit -coverpkg=all, and demonstrates usage of go tool covdata for inspection and selection of coverage results. Requires the Go toolchain available in the environment, with variables such as $WORK and $GOCOVERDIR set up and a Go module matching the provided module context. Inputs are shell environment, outputs are tested coverage results, and constraints include reliance on directory structure and external Go tools.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_build_pkg_select.txt#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Build for coverage.\ngo build -mod=mod -o $WORK/modex.exe -cover mod.example/main\n\n# Save off old GOCOVERDIR setting\nenv SAVEGOCOVERDIR=$GOCOVERDIR\n\n# Execute.\nmkdir $WORK/covdata\nenv GOCOVERDIR=$WORK/covdata\nexec $WORK/modex.exe\n\n# Restore previous GOCOVERDIR setting\nenv GOCOVERDIR=$SAVEGOCOVERDIR\n\n# Examine the result.\ngo tool covdata percent -i=$WORK/covdata\nstdout 'coverage: 100.0% of statements'\n\n# By default we want to see packages resident in the module covered,\n# but not dependencies.\ngo tool covdata textfmt -i=$WORK/covdata -o=$WORK/covdata/out.txt\ngrep 'mode: set' $WORK/covdata/out.txt\ngrep 'mod.example/main/main.go:' $WORK/covdata/out.txt\ngrep 'mod.example/sub/sub.go:' $WORK/covdata/out.txt\n! grep 'rsc.io' $WORK/covdata/out.txt\n\nrm $WORK/covdata\nrm $WORK/modex.exe\n\n#-------------------------------------------\n\n# Repeat the build but with -coverpkg=all\n\ngo build -mod=mod -coverpkg=all -o $WORK/modex.exe -cover mod.example/main\n\n# Execute.\nmkdir $WORK/covdata\nenv GOCOVERDIR=$WORK/covdata\nexec $WORK/modex.exe\n\n# Restore previous GOCOVERDIR setting\nenv GOCOVERDIR=$SAVEGOCOVERDIR\n\n# Examine the result.\ngo tool covdata percent -i=$WORK/covdata\nstdout  'coverage:.*[1-9][0-9.]+%'\n\n# The whole enchilada.\ngo tool covdata textfmt -i=$WORK/covdata -o=$WORK/covdata/out.txt\ngrep 'mode: set' $WORK/covdata/out.txt\ngrep 'mod.example/main/main.go:' $WORK/covdata/out.txt\ngrep 'mod.example/sub/sub.go:' $WORK/covdata/out.txt\ngrep 'rsc.io' $WORK/covdata/out.txt\ngrep 'bufio/bufio.go:' $WORK/covdata/out.txt\n\n# Use the covdata tool to select a specific set of module paths\nmkdir $WORK/covdata2\ngo tool covdata merge -pkg=rsc.io/quote -i=$WORK/covdata -o=$WORK/covdata2\n\n# Examine the result.\ngo tool covdata percent -i=$WORK/covdata2\nstdout  'coverage:.*[1-9][0-9.]+%'\n\n# Check for expected packages + check that we don't see things from stdlib.\ngo tool covdata textfmt -i=$WORK/covdata2 -o=$WORK/covdata2/out.txt\ngrep 'mode: set' $WORK/covdata2/out.txt\n! grep 'mod.example/main/main.go:' $WORK/covdata2/out.txt\n! grep 'mod.example/sub/sub.go:' $WORK/covdata2/out.txt\ngrep 'rsc.io' $WORK/covdata2/out.txt\n! grep 'bufio/bufio.go:' $WORK/covdata2/out.txt\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: A minimal Go module definition file that creates a module named 'm' with no dependencies. This is used as the module context for the tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_hash.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module configuration file specifying the module name and dependencies\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_duplicates.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule use\n\ngo 1.16\n\nrequire rsc.io/quote v1.5.2\n```\n\n----------------------------------------\n\nTITLE: Defining Go Test File\nDESCRIPTION: This snippet defines a simple Go test file with a passing test function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_setup_error.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage t\n\nimport \"testing\"\n\nfunc TestGood(t *testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Command Line Options for CGo Source Generator in Makefile\nDESCRIPTION: This snippet defines a command line tool interface for generating CGo source files, taking specific arguments including package path, file output path, and objdir. It parses command line arguments and sets up required variables for file processing.\nSOURCE: https://github.com/golang/go/blob/master/src/compress/testdata/pi.txt#2025-04-22_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\n46\n```\n\n----------------------------------------\n\nTITLE: SVN repository format configuration\nDESCRIPTION: Configuration for SVN repository structure, including format version, sharding layout, and filesystem type settings.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/test2-svn-git.txt#2025-04-22_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\n6\nlayout sharded 1000\n```\n\n----------------------------------------\n\nTITLE: Defining Version Information in .info File\nDESCRIPTION: JSON configuration that specifies the version information for the Go toolchain module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-riscv64.txt#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.999testmod.linux-riscv64\"}\n```\n\n----------------------------------------\n\nTITLE: SVN Add and Commit Operations\nDESCRIPTION: Adds a Go file to SVN and commits it with a message, then sets custom properties for the commit.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/hello.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsvn add hello.go\nsvn commit --file MSG\nsvn propset svn:author 'rsc' --revprop -r1\nsvn propset svn:date '2017-09-22T01:12:45.861368Z' --revprop -r1\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module declaration for the fuzz testing package\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_fail.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: Package x with No Implementation\nDESCRIPTION: Introduces a package named x meant for structuring tests or further implementations. It currently does not contain any code.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_pkgall_multiple_mains.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\npackage x\n```\n\n----------------------------------------\n\nTITLE: Raw Input Format Example\nDESCRIPTION: Shows a text block with tab-indented code section in raw input format.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/code2.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nText.\n\n\tA tab-indented\n\t(no, not eight-space indented)\n\tcode block and haiku.\n\nMore text.\n```\n\n----------------------------------------\n\nTITLE: Defining Toolchain Version Information in JSON\nDESCRIPTION: JSON object containing the version information for the Go toolchain. This is likely used for internal version tracking and management.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.18.5.linux-amd64.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.18.5.linux-amd64\"}\n```\n\n----------------------------------------\n\nTITLE: Module D Configuration\nDESCRIPTION: Module d's configuration file requiring module c version 0.1.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_newroot.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/d\n\ngo 1.16\n\nrequire example.net/c v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Standalone Test in a Separate Package\nDESCRIPTION: Defines a standalone test in the x_test package designed to test the functionality within package x. It sets up the framework for future expansions or testing implementations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_pkgall_multiple_mains.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\npackage x_test\n\nimport \"testing\"\n\nfunc TestX(t *testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Attempting Invalid Replacement of gopkg.in Module in Go\nDESCRIPTION: This snippet demonstrates an invalid replacement attempt where a mismatched gopkg.in path tries to replace a different major version, resulting in an error.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_gopkgin.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ncd ../3-to-gomod-4\n! go list -m gopkg.in/src-d/go-git.v3\nstderr '^go: gopkg\\.in/src-d/go-git\\.v3@v3\\.2\\.0 \\(replaced by gopkg\\.in/src-d/go-git\\.v3@v3\\.0\\.0-20190801152248-0d1a009cbb60\\): version \"v3\\.0\\.0-20190801152248-0d1a009cbb60\" invalid: go\\.mod has non-\\.\\.\\.\\.\\.v3 module path \"gopkg\\.in/src-d/go-git\\.v4\" at revision 0d1a009cbb60$'\n```\n\n----------------------------------------\n\nTITLE: Test Script Commands\nDESCRIPTION: Shell commands for testing different GOPATH manipulation scenarios including building and executing the test program.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cd_gopath_different.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=off\ngo build run_go.go\n\nexec ./run_go$GOEXE $GOPATH/src/my.pkg/main $GOPATH IDENTITY build -o $WORK/tmp/a.exe -ldflags -X=my.pkg.Text=linkXworked\nexec $WORK/tmp/a.exe\nstderr 'linkXworked'\nrm $WORK/tmp/a.exe\n```\n\n----------------------------------------\n\nTITLE: Initial Go Workspace Configuration\nDESCRIPTION: Original go.work file containing references to existing and deleted module paths\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_deleted.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\n\nuse (\n\t.\n\t./sub\n\t./sub/dir/deleted\n)\n```\n\n----------------------------------------\n\nTITLE: Defining System Call Constants for Darwin ARM64 (CGO)\nDESCRIPTION: This snippet defines a series of constants used in system calls for the Darwin ARM64 architecture. These constants include file descriptor flags, I/O control flags, network interface flags, and more. They are essential for low-level system programming on this platform.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_149\n\nLANGUAGE: Go\nCODE:\n```\nconst EV_FLAG1 ideal-int\nconst EV_ONESHOT = 16\nconst EV_ONESHOT ideal-int\nconst EV_OOBAND = 8192\nconst EV_OOBAND ideal-int\nconst EV_POLL = 4096\nconst EV_POLL ideal-int\nconst EV_RECEIPT = 64\nconst EV_RECEIPT ideal-int\nconst EV_SYSFLAGS = 61440\nconst EV_SYSFLAGS ideal-int\nconst EWOULDBLOCK = 35\nconst EXDEV = 18\nconst EXTA = 19200\nconst EXTA ideal-int\nconst EXTB = 38400\nconst EXTB ideal-int\nconst EXTPROC = 2048\nconst EXTPROC ideal-int\nconst FD_CLOEXEC = 1\nconst FD_CLOEXEC ideal-int\nconst FD_SETSIZE = 1024\nconst FD_SETSIZE ideal-int\nconst FLUSHO = 8388608\nconst FLUSHO ideal-int\nconst F_ADDFILESIGS = 61\nconst F_ADDFILESIGS ideal-int\nconst F_ADDSIGS = 59\nconst F_ADDSIGS ideal-int\nconst F_ALLOCATEALL = 4\nconst F_ALLOCATEALL ideal-int\nconst F_ALLOCATECONTIG = 2\nconst F_ALLOCATECONTIG ideal-int\nconst F_CHKCLEAN = 41\nconst F_CHKCLEAN ideal-int\nconst F_DUPFD = 0\nconst F_DUPFD ideal-int\nconst F_DUPFD_CLOEXEC = 67\nconst F_DUPFD_CLOEXEC ideal-int\n// ... (truncated for brevity)\nconst IFT_ARCNETPLUS = 36\nconst IFT_ARCNETPLUS ideal-int\nconst IFT_ATM = 37\nconst IFT_ATM ideal-int\n```\n\n----------------------------------------\n\nTITLE: HTML Link Rendering\nDESCRIPTION: HTML output showing how the link cases should be rendered in browser\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/link4.txt#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p>These are not links.\n<p>[x\n<p>[x]:\n<p>[x]:<a href=\"https://go.dev\">https://go.dev</a>\n<p>[x]<a href=\"https://go.dev\">https://go.dev</a>\n<p>[x]: surprise://go.dev\n<p>[x]: surprise!\n<p>But this is, with a tab (although it&apos;s unused).\n```\n\n----------------------------------------\n\nTITLE: Specifying Go Toolchain Version in JSON (.info)\nDESCRIPTION: Defines the Go toolchain module version `v0.0.1-go1.18.9.linux-amd64` using JSON format. This structure is typically found in the `.info` file associated with a Go module version within the module cache, storing metadata about the version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.18.9.linux-amd64.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.18.9.linux-amd64\"}\n```\n\n----------------------------------------\n\nTITLE: Defining File Operation Syscall Constants for Darwin ARM64\nDESCRIPTION: Constant definitions for file-related system calls on Darwin ARM64 architecture. These include operations like open, read, write, and file manipulation syscalls, with their corresponding numeric identifiers.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_102\n\nLANGUAGE: Go\nCODE:\n```\nconst SYS_OPEN_NOCANCEL = 398\nconst SYS_PATHCONF = 191\nconst SYS_PIPE = 42\nconst SYS_PREAD = 153\nconst SYS_PREAD_NOCANCEL = 414\nconst SYS_PWRITE = 154\nconst SYS_PWRITE_NOCANCEL = 415\nconst SYS_READ = 3\nconst SYS_READLINK = 58\nconst SYS_READV = 120\nconst SYS_READV_NOCANCEL = 411\nconst SYS_READ_NOCANCEL = 396\nconst SYS_REMOVEXATTR = 238\nconst SYS_RENAME = 128\nconst SYS_REVOKE = 56\nconst SYS_RMDIR = 137\nconst SYS_SEARCHFS = 225\nconst SYS_SETATTRLIST = 221\n```\n\n----------------------------------------\n\nTITLE: Go Module Configuration\nDESCRIPTION: Defines the module configuration with dependencies on example.com/version v1.1.0\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/import_unix_tag.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example\n\ngo 1.19\n\nrequire example.com/version v1.1.0\n```\n\n----------------------------------------\n\nTITLE: Defining an Empty Internal Package - Go\nDESCRIPTION: This code snippet defines a Go package named 'v' under an 'internal' directory. It acts as a placeholder to test internal package import and access restrictions in the broader Go build environment. There are no exported functions, types, or variables. This package is used solely to test Go's behavior when importing internal packages via various command-line operations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_symlink_internal.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage v\n```\n\n----------------------------------------\n\nTITLE: Defining Stat_t Struct for File Statistics in Go Syscall Package\nDESCRIPTION: The Stat_t struct represents file statistics in the syscall package for Darwin ARM64. It contains detailed information about a file, including ownership, permissions, size, timestamps, and various system-specific attributes.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_208\n\nLANGUAGE: Go\nCODE:\n```\ntype Stat_t struct {\n    Dev           int32\n    Mode          uint16\n    Nlink         uint16\n    Ino           uint64\n    Uid           uint32\n    Gid           uint32\n    Rdev          int32\n    Pad_cgo_0     [4]uint8\n    Atimespec     Timespec\n    Mtimespec     Timespec\n    Ctimespec     Timespec\n    Birthtimespec Timespec\n    Size          int64\n    Blocks        int64\n    Blksize       int32\n    Flags         uint32\n    Gen           uint32\n    Lspare        int32\n    Qspare        [2]int64\n}\n```\n\n----------------------------------------\n\nTITLE: Module A v0.1.0 Definition\nDESCRIPTION: Module definition and implementation for example.net/a v0.1.0\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_wild.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/a\n\ngo 1.16\n```\n\nLANGUAGE: go\nCODE:\n```\npackage a\n```\n\n----------------------------------------\n\nTITLE: Testing Non-Word Boundary Regex Patterns in Go\nDESCRIPTION: Test cases for regular expressions using non-word boundary patterns (\\B) with various strings. These tests verify the behavior of non-word boundary assertions in different contexts.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n\"\\\\Bfoo\\\\B\"\n```\n\n----------------------------------------\n\nTITLE: Removing Branch Tags in Mercurial\nDESCRIPTION: Removes specified branch tags from the Mercurial repository with a commit message indicating the removals.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/hg/hgrepo1.txt#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nhg tag --user 'Russ Cox <rsc@golang.org>' --date '2018-06-27T12:16:30-04:00' -m 'Removed tag branch-v2, branch-v3, branch-v2.3.4' --remove branch-v2 branch-v3 branch-v2.3.4\n```\n\n----------------------------------------\n\nTITLE: Deprecated Network Interface Message Types\nDESCRIPTION: Deprecated type definitions for network interface related messages including interface announcements, address messages, and routing messages. These types were used for network interface management and routing operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_42\n\nLANGUAGE: go\nCODE:\n```\ntype InterfaceAddrMessage //deprecated\ntype InterfaceAnnounceMessage //deprecated\ntype InterfaceMessage //deprecated\ntype RouteMessage //deprecated\ntype RoutingMessage //deprecated\n```\n\n----------------------------------------\n\nTITLE: Toolstash Setup Commands\nDESCRIPTION: Initial setup commands for using toolstash to manage compiler versions\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ go install golang.org/x/tools/cmd/toolstash@latest\n$ git clone https://go.googlesource.com/go\n$ cd go\n$ git checkout -b mybranch\n$ ./src/all.bash\n$ export PATH=$PWD/bin:$PATH\n$ toolstash save\n```\n\n----------------------------------------\n\nTITLE: Socket Option Functions for NetBSD ARM64\nDESCRIPTION: Function signatures for socket option operations in NetBSD on ARM64. These functions provide interfaces for getting socket options of various types, used for controlling network socket behavior.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_160\n\nLANGUAGE: Go\nCODE:\n```\nfunc Getsockname(int) (Sockaddr, error)\nfunc GetsockoptByte(int, int, int) (uint8, error)\nfunc GetsockoptICMPv6Filter(int, int, int) (*ICMPv6Filter, error)\nfunc GetsockoptInet4Addr(int, int, int) ([4]uint8, error)\nfunc GetsockoptInt(int, int, int) (int, error)\nfunc GetsockoptIPMreq(int, int, int) (*IPMreq, error)\nfunc GetsockoptIPv6Mreq(int, int, int) (*IPv6Mreq, error)\nfunc GetsockoptIPv6MTUInfo(int, int, int) (*IPv6MTUInfo, error)\n```\n\n----------------------------------------\n\nTITLE: Expected Module Why Output\nDESCRIPTION: Expected output from 'go mod why' command explaining why rsc.io/sampler is needed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_skip_write.txt#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n# rsc.io/sampler\nm\nrsc.io/quote\nrsc.io/sampler\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module `example.com` with Go 1.12\nDESCRIPTION: This snippet defines a simple Go module named `example.com` and specifies Go version 1.12. It sets up the basic project structure required by the Go compiler for the test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_badmethod_issue57926.txt#2025-04-22_snippet_0\n\nLANGUAGE: gomod\nCODE:\n```\nmodule example.com\ngo 1.12\n```\n\n----------------------------------------\n\nTITLE: Testing Wildcard Matching with Japanese Characters\nDESCRIPTION: Tests wildcard pattern matching with '...' against Japanese text ('日本語'). Shows how the pattern matches multi-byte characters with different assertion configurations.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_28\n\nLANGUAGE: go\nCODE:\n```\n\"^...$\"\n-;-;-;-\n0-9;0-9;0-9;0-9\n\"^(?:^...$)$\"\n-;-;-;-\n0-9;0-9;0-9;0-9\n\"^(?:^...$)\"\n-;-;-;-\n0-9;0-9;0-9;0-9\n\"(?:^...$)$\"\n-;-;-;-\n0-9;0-9;0-9;0-9\n```\n\n----------------------------------------\n\nTITLE: Running Example Tests with Pattern Matching\nDESCRIPTION: Test script that verifies go test command can match and run only example functions, ensuring no 'no tests to run' message appears\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_only_example.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test -run Example example1_test.go\n! stderr '^ok.*\\[no tests to run\\]'\nstdout '^ok'\n```\n\n----------------------------------------\n\nTITLE: Defining Go Package with Import\nDESCRIPTION: This Go code snippet defines a main package and imports the 'bar' package. It serves as a placeholder or example file for testing purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/fileline.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage main; import \"bar\"\n```\n\n----------------------------------------\n\nTITLE: Testing Multiple Anchors with \\B in Go Regexps\nDESCRIPTION: Tests patterns with multiple repeated anchors combined with non-word boundary assertions. These tests verify how the regex engine handles redundant anchors with non-word boundary constraints.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_18\n\nLANGUAGE: regexp\nCODE:\n```\n^^^^^^^^\\B$$$$$$$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:^^^^^^^^\\B$$$$$$$)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:^^^^^^^^\\B$$$$$$$)\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:^^^^^^^^\\B$$$$$$$)$\n```\n\n----------------------------------------\n\nTITLE: Defining File System and Time Structures for OpenBSD in Go\nDESCRIPTION: Structure definitions for directory entries, file descriptor sets, kernel events, and file statistics on OpenBSD. These structures are used for interacting with the file system and kernel events.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_43\n\nLANGUAGE: Go\nCODE:\n```\ntype Dirent struct {\n\tFileno uint64\n\tOff int64\n\tX__d_padding [4]uint8\n}\n\ntype FdSet struct {\n\tBits [32]uint32\n}\n\ntype Kevent_t struct {\n\tData int64\n}\n\ntype Mclpool struct {\n\tGrown int32\n}\n\ntype RtMetrics struct {\n\tExpire int64\n\tPad uint32\n}\n\ntype Stat_t struct {\n\tIno uint64\n}\n\ntype Statfs_t struct {\n\tF_ctime uint64\n\tF_mntfromspec [90]int8\n\tPad_cgo_0 [2]uint8\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Package Declaration P\nDESCRIPTION: Basic Go package declaration for package p\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_find.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage p\n```\n\n----------------------------------------\n\nTITLE: Alternative Module Configuration Example with Replace and Exclude - Go (.mod)\nDESCRIPTION: The .mod file provides an additional Go module configuration with the same module path and similar dependency resolution rules as go.mod, but with minor version differences in the exclude directive (excludes v1.1.0 instead of v1.0.1). It demonstrates how different versions can be controlled or overridden across builds, affecting dependency selection.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_printversion_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/printversion\n\nrequire example.com/version v1.0.0\nreplace example.com/version v1.0.0 => ../oops v0.0.0\nexclude example.com/version v1.1.0\n```\n\n----------------------------------------\n\nTITLE: Defining Module 'e' in Go\nDESCRIPTION: This go.mod file defines module 'e' without any dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_pseudo_artifact.txt#2025-04-22_snippet_15\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/e\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: This snippet defines a Go module configuration with the module name 'x' targeting Go version 1.12. It is foundational for using Go modules in a project and must be present in the root of the module's directory structure. This configuration helps in managing dependencies and versioning.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_upgrade_pseudo.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n-- go.mod --\nmodule x\n\ngo 1.12\n```\n\n----------------------------------------\n\nTITLE: Test Configuration Commands\nDESCRIPTION: Test commands and environment settings to verify go list -u -m behavior\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_retractions_issue66403.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nenv TESTGO_VERSION=go1.21\nenv TESTGO_VERSION_SWITCH=switch\ngo list -u -m example.com/retract/newergoversion\nstdout 'example.com/retract/newergoversion v1.0.0'\n! stdout 'v1.2.0'\n```\n\n----------------------------------------\n\nTITLE: Test Go Command Script Implementation\nDESCRIPTION: Shell script for the go command binary that outputs a version identifier. This script would be executed when running the go command in this toolchain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.netbsd-arm.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Directory Setup and Symlink Creation\nDESCRIPTION: Creates test directories and establishes symlinks to simulate a split GOROOT structure with source files in a separate location\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_goroot_symlink.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir $WORK/lib/goroot\nmkdir $WORK/share/goroot\nsymlink $WORK/share/goroot/src -> $GOROOT${/}src\nsymlink $WORK/lib/goroot/src -> ../../share/goroot/src\nsymlink $WORK/lib/goroot/pkg -> $GOROOT${/}pkg\n```\n\n----------------------------------------\n\nTITLE: Leaf Test Dependency Package - testdep2/testdep2.go\nDESCRIPTION: Defines a leaf test-only dependency package without further imports.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_pgo_auto_multi.txt#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\npackage testdep2\n```\n\n----------------------------------------\n\nTITLE: Defining System Constants for Kernel Events (NOTE_*) in Go for darwin-arm64\nDESCRIPTION: Constants for kqueue event notifications in Darwin/macOS systems. These constants define various events that can be monitored through the kqueue interface, including file system events, process events, and VM-related notifications.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_83\n\nLANGUAGE: Go\nCODE:\n```\nconst NOTE_PDATAMASK ideal-int\nconst NOTE_REAP = 268435456\nconst NOTE_REAP ideal-int\nconst NOTE_RENAME = 32\nconst NOTE_RENAME ideal-int\nconst NOTE_REVOKE = 64\nconst NOTE_REVOKE ideal-int\nconst NOTE_SECONDS = 1\nconst NOTE_SECONDS ideal-int\nconst NOTE_SIGNAL = 134217728\nconst NOTE_SIGNAL ideal-int\nconst NOTE_TRACK = 1\nconst NOTE_TRACK ideal-int\nconst NOTE_TRACKERR = 2\nconst NOTE_TRACKERR ideal-int\nconst NOTE_TRIGGER = 16777216\nconst NOTE_TRIGGER ideal-int\nconst NOTE_USECONDS = 2\nconst NOTE_USECONDS ideal-int\nconst NOTE_VM_ERROR = 268435456\nconst NOTE_VM_ERROR ideal-int\nconst NOTE_VM_PRESSURE = 2147483648\nconst NOTE_VM_PRESSURE ideal-int\nconst NOTE_VM_PRESSURE_SUDDEN_TERMINATE = 536870912\nconst NOTE_VM_PRESSURE_SUDDEN_TERMINATE ideal-int\nconst NOTE_VM_PRESSURE_TERMINATE = 1073741824\nconst NOTE_VM_PRESSURE_TERMINATE ideal-int\nconst NOTE_WRITE = 2\nconst NOTE_WRITE ideal-int\n```\n\n----------------------------------------\n\nTITLE: Function Declarations for OpenBSD in Go\nDESCRIPTION: Defines Go syscall functions specific to OpenBSD. These functions provide interfaces to underlying system calls for file and socket operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_58\n\nLANGUAGE: Go\nCODE:\n```\nfunc FcntlFlock(uintptr, int, *Flock_t) error\nfunc SendmsgN(int, []uint8, []uint8, Sockaddr, int) (int, error)\n```\n\n----------------------------------------\n\nTITLE: Defining Process Tracing Constants in Go for NetBSD ARM64\nDESCRIPTION: This snippet defines constants used for process tracing and debugging operations on NetBSD ARM64. These constants are used with the ptrace system call to control process execution for debugging purposes.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_49\n\nLANGUAGE: Go\nCODE:\n```\nconst PTRACE_CONT = 7\nconst PTRACE_KILL = 8\nconst PTRACE_TRACEME = 0\n```\n\n----------------------------------------\n\nTITLE: Adding Masaram_Gondi RangeTable to unicode package\nDESCRIPTION: Adds support for the Masaram Gondi script block by defining a new RangeTable in the unicode package. This allows identifying and handling characters from this Unicode block.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.10.txt#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\npkg unicode, var Masaram_Gondi *RangeTable\n```\n\n----------------------------------------\n\nTITLE: Demonstrating debuglog Usage in Go Runtime\nDESCRIPTION: Example of how to use the debuglog tool for low-overhead debugging in the Go runtime. It shows how to create a log entry with a string and unsigned 32-bit integer.\nSOURCE: https://github.com/golang/go/blob/master/src/runtime/HACKING.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ndlog().s(\"hello world\").u32(5).end()\n```\n\n----------------------------------------\n\nTITLE: Go Binary Setup and GOROOT Verification\nDESCRIPTION: Copies Go executable to test location and verifies GOROOT detection through os.Executable()\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_goroot_symlink.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmkdir $WORK/lib/goroot/bin\ncp $TESTGO_EXE $WORK/lib/goroot/bin/go$GOEXE\n\nenv GOROOT=''  # Clear to force cmd/go to find GOROOT itself.\nexec $WORK/lib/goroot/bin/go env GOROOT\nstdout $WORK${/}lib${/}goroot\n```\n\n----------------------------------------\n\nTITLE: Creating Development Branch and Beta Tag\nDESCRIPTION: Creates a development branch v3.0.0-devel, checks it out, reverts package file to v0.1.0 version, commits changes, and tags it as v4.0.0-beta.1.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/semver-branch.txt#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit branch 'v3.0.0-devel'\ngit checkout 'v3.0.0-devel'\ngit checkout v0.1.0 pkg/pkg.go\ngit commit -a -m 'pkg: remove panic'\ngit tag v4.0.0-beta.1\n```\n\n----------------------------------------\n\nTITLE: Defining Dependency Module 'b' in Go\nDESCRIPTION: This go.mod file defines module 'example.net/b' with Go version 1.16, used as a dependency in the test setup.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue48511.txt#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/b\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Package F Simple Helper Function\nDESCRIPTION: Helper package 'f' containing a simple Id function returning a constant\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverpkg_with_init.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage f\n\nfunc Id() int {\n     return 42\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go build command on empty packages\nDESCRIPTION: Shell commands testing go build behavior with various error cases: packages with only test files, packages with no Go files, and packages with build constraints that exclude all files.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_no_go.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n! go build ./empty/test\nstderr 'no non-test Go files in '\n\n! go build ./empty/xtest\nstderr 'no non-test Go files in '\n\n! go build ./empty/testxtest\nstderr 'no non-test Go files in '\n\n! go build ./exclude\nstderr 'build constraints exclude all Go files in '\n\n! go build ./exclude/ignore\nstderr 'no Go files in '\n\n! go build ./exclude/empty\nstderr 'no Go files in '\n```\n\n----------------------------------------\n\nTITLE: Markdown Formatted Text\nDESCRIPTION: Shows how the text appears when formatted as markdown with code block indentation\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/code3.txt#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nA tab-indented\n(surrounded by more blank lines)\ncode block and haiku.\n```\n\n----------------------------------------\n\nTITLE: Defining Go Tests in x_test.go\nDESCRIPTION: This Go code defines test and benchmark functions in the x package. It includes TestX with a sub-test Y, and BenchmarkX with a sub-benchmark Y.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_regexps.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage x\n\nimport \"testing\"\n\nfunc TestX(t *testing.T) {\n\tt.Logf(\"LOG: X running\")\n\tt.Run(\"Y\", func(t *testing.T) {\n\t\tt.Logf(\"LOG: Y running\")\n\t})\n}\n\nfunc BenchmarkX(b *testing.B) {\n\tb.Logf(\"LOG: X running N=%d\", b.N)\n\tb.Run(\"Y\", func(b *testing.B) {\n\t\tb.Logf(\"LOG: Y running N=%d\", b.N)\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Package with Multiple Imports\nDESCRIPTION: Package demonstrating multiple imports including both vendored and non-vendored packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_import.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage x\n\nimport _ \"p\"\nimport _ \"q\"\nimport _ \"r\"\nimport _ \"vend/dir1\"      // not vendored\nimport _ \"vend/dir1/dir2\" // vendored\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with External Dependency\nDESCRIPTION: A Go module definition (go.mod) for a module named 'example.com/use' that depends on a retracted version (v1.0.0-bad) of the 'example.com/retract/rename' module. The module specifies Go 1.16 as the required Go version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_rename.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/use\n\ngo 1.16\n\nrequire example.com/retract/rename v1.0.0-bad\n```\n\n----------------------------------------\n\nTITLE: Validating GOEXPERIMENT Values\nDESCRIPTION: This snippet tests the validation of GOEXPERIMENT values when using 'go env -w'. It checks for invalid experiment names and demonstrates setting a valid experiment.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_write.txt#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# go env -w checks validity of GOEXPERIMENT\nenv GOEXPERIMENT=\n! go env -w GOEXPERIMENT=badexp\nstderr 'unknown GOEXPERIMENT badexp'\ngo env -w GOEXPERIMENT=fieldtrack\n```\n\n----------------------------------------\n\nTITLE: Hello World Function Implementation\nDESCRIPTION: Simple Go package that provides a Hello() function returning a greeting string. Part of the sampler package with proper documentation and copyright notice.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Copyright 2018 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// Package sampler shows simple texts.\npackage sampler // import \"rsc.io/sampler\"\n\n// Hello returns a greeting.\nfunc Hello() string {\n\treturn \"Hello, world.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Unused Script\nDESCRIPTION: This shell script is intended to indicate that it is not used in the current context. There are no dependencies, and it simply uses the echo command to output a placeholder message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.dragonfly-amd64.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: Module A Source File\nDESCRIPTION: Source file for module 'a' that imports module 'd', extending the dependency chain for testing replacement resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_unused.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage a\nimport _ \"example.com/d\"\n```\n\n----------------------------------------\n\nTITLE: Defining Memory Advice Constants in Go for NetBSD ARM\nDESCRIPTION: These constants define memory advice flags used in memory management syscalls on NetBSD ARM systems. They specify how the application intends to use the memory, which can help the kernel optimize memory usage.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_29\n\nLANGUAGE: Go\nCODE:\n```\nconst MADV_NORMAL = 0\nconst MADV_RANDOM = 1\nconst MADV_SEQUENTIAL = 2\nconst MADV_WILLNEED = 3\nconst MADV_DONTNEED = 4\nconst MADV_FREE = 6\nconst MADV_SPACEAVAIL = 5\n```\n\n----------------------------------------\n\nTITLE: Module B v0.1.0 Definition\nDESCRIPTION: Definition for example.net/b module version 0.1.0 with dependency on example.net/a v0.2.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patchcycle.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/b\n\ngo 1.16\n\nrequire example.net/a v0.2.0\n```\n\nLANGUAGE: go\nCODE:\n```\npackage b\n\nimport _ \"example.net/a\"\n```\n\n----------------------------------------\n\nTITLE: Test2pkg/pkg Package Import Definition\nDESCRIPTION: HTML template defining git import path for test2pkg/pkg package\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/go/test2-svn-git.txt#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<meta name=\"go-import\" content=\"vcs-test.golang.org/go/test2-svn-git/test2pkg git https://vcs-test.golang.org/git/README-only\">\n```\n\n----------------------------------------\n\nTITLE: Go Command Shell Script for Testing\nDESCRIPTION: A shell script that mocks the go command for testing, printing a version identifier.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-mips64x.txt#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n#!/bin/sh\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependency Go Module 'x' (Go Module)\nDESCRIPTION: Defines the dependency Go module named `x` using Go version 1.15. This module contains several packages used in the dependency tests but does not declare any external requirements itself within this test setup.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_notall.txt#2025-04-22_snippet_5\n\nLANGUAGE: gomod\nCODE:\n```\n-- x/go.mod --\nmodule x\n\ngo 1.15\n```\n\n----------------------------------------\n\nTITLE: NetBSD ARM64 System Call Constants\nDESCRIPTION: Collection of system call constants defined for NetBSD on ARM64 architecture. These constants are used for various system operations including socket messaging, file operations, terminal control, process management, and network routing.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_140\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (netbsd-arm64), const MSG_CONTROLMBUF ideal-int\npkg syscall (netbsd-arm64), const MSG_CTRUNC = 32\npkg syscall (netbsd-arm64), const MSG_CTRUNC ideal-int\npkg syscall (netbsd-arm64), const MSG_DONTROUTE = 4\npkg syscall (netbsd-arm64), const MSG_DONTROUTE ideal-int\npkg syscall (netbsd-arm64), const MSG_DONTWAIT = 128\npkg syscall (netbsd-arm64), const MSG_DONTWAIT ideal-int\npkg syscall (netbsd-arm64), const MSG_EOR = 8\npkg syscall (netbsd-arm64), const MSG_EOR ideal-int\npkg syscall (netbsd-arm64), const MSG_IOVUSRSPACE = 67108864\npkg syscall (netbsd-arm64), const MSG_IOVUSRSPACE ideal-int\npkg syscall (netbsd-arm64), const MSG_LENUSRSPACE = 134217728\npkg syscall (netbsd-arm64), const MSG_LENUSRSPACE ideal-int\npkg syscall (netbsd-arm64), const MSG_MCAST = 512\npkg syscall (netbsd-arm64), const MSG_MCAST ideal-int\npkg syscall (netbsd-arm64), const MSG_NAMEMBUF = 16777216\npkg syscall (netbsd-arm64), const MSG_NAMEMBUF ideal-int\npkg syscall (netbsd-arm64), const MSG_NBIO = 4096\npkg syscall (netbsd-arm64), const MSG_NBIO ideal-int\npkg syscall (netbsd-arm64), const MSG_NOSIGNAL = 1024\npkg syscall (netbsd-arm64), const MSG_NOSIGNAL ideal-int\npkg syscall (netbsd-arm64), const MSG_OOB = 1\npkg syscall (netbsd-arm64), const MSG_OOB ideal-int\npkg syscall (netbsd-arm64), const MSG_PEEK = 2\npkg syscall (netbsd-arm64), const MSG_PEEK ideal-int\npkg syscall (netbsd-arm64), const MSG_TRUNC = 16\npkg syscall (netbsd-arm64), const MSG_TRUNC ideal-int\npkg syscall (netbsd-arm64), const MSG_USERFLAGS = 16777215\npkg syscall (netbsd-arm64), const MSG_USERFLAGS ideal-int\npkg syscall (netbsd-arm64), const MSG_WAITALL = 64\npkg syscall (netbsd-arm64), const MSG_WAITALL ideal-int\npkg syscall (netbsd-arm64), const MS_INVALIDATE = 2\npkg syscall (netbsd-arm64), const MS_INVALIDATE ideal-int\npkg syscall (netbsd-arm64), const MS_SYNC = 4\npkg syscall (netbsd-arm64), const MS_SYNC ideal-int\npkg syscall (netbsd-arm64), const NAME_MAX = 511\npkg syscall (netbsd-arm64), const NAME_MAX ideal-int\npkg syscall (netbsd-arm64), const NET_RT_DUMP = 1\npkg syscall (netbsd-arm64), const NET_RT_DUMP ideal-int\npkg syscall (netbsd-arm64), const NET_RT_FLAGS = 2\npkg syscall (netbsd-arm64), const NET_RT_FLAGS ideal-int\npkg syscall (netbsd-arm64), const NET_RT_IFLIST = 5\npkg syscall (netbsd-arm64), const NET_RT_IFLIST ideal-int\npkg syscall (netbsd-arm64), const NET_RT_MAXID = 6\npkg syscall (netbsd-arm64), const NET_RT_MAXID ideal-int\npkg syscall (netbsd-arm64), const NET_RT_OIFLIST = 4\npkg syscall (netbsd-arm64), const NET_RT_OIFLIST ideal-int\npkg syscall (netbsd-arm64), const NET_RT_OOIFLIST = 3\npkg syscall (netbsd-arm64), const NET_RT_OOIFLIST ideal-int\npkg syscall (netbsd-arm64), const NOFLSH = 2147483648\npkg syscall (netbsd-arm64), const NOFLSH ideal-int\npkg syscall (netbsd-arm64), const NOTE_ATTRIB = 8\npkg syscall (netbsd-arm64), const NOTE_ATTRIB ideal-int\npkg syscall (netbsd-arm64), const NOTE_CHILD = 4\npkg syscall (netbsd-arm64), const NOTE_CHILD ideal-int\npkg syscall (netbsd-arm64), const NOTE_DELETE = 1\npkg syscall (netbsd-arm64), const NOTE_DELETE ideal-int\npkg syscall (netbsd-arm64), const NOTE_EXEC = 536870912\npkg syscall (netbsd-arm64), const NOTE_EXEC ideal-int\npkg syscall (netbsd-arm64), const NOTE_EXIT = 2147483648\npkg syscall (netbsd-arm64), const NOTE_EXIT ideal-int\npkg syscall (netbsd-arm64), const NOTE_EXTEND = 4\npkg syscall (netbsd-arm64), const NOTE_EXTEND ideal-int\npkg syscall (netbsd-arm64), const NOTE_FORK = 1073741824\npkg syscall (netbsd-arm64), const NOTE_FORK ideal-int\npkg syscall (netbsd-arm64), const NOTE_LINK = 16\npkg syscall (netbsd-arm64), const NOTE_LINK ideal-int\npkg syscall (netbsd-arm64), const NOTE_LOWAT = 1\npkg syscall (netbsd-arm64), const NOTE_LOWAT ideal-int\npkg syscall (netbsd-arm64), const NOTE_PCTRLMASK = 4026531840\npkg syscall (netbsd-arm64), const NOTE_PCTRLMASK ideal-int\npkg syscall (netbsd-arm64), const NOTE_PDATAMASK = 1048575\npkg syscall (netbsd-arm64), const NOTE_PDATAMASK ideal-int\npkg syscall (netbsd-arm64), const NOTE_RENAME = 32\npkg syscall (netbsd-arm64), const NOTE_RENAME ideal-int\npkg syscall (netbsd-arm64), const NOTE_REVOKE = 64\npkg syscall (netbsd-arm64), const NOTE_REVOKE ideal-int\npkg syscall (netbsd-arm64), const NOTE_TRACK = 1\npkg syscall (netbsd-arm64), const NOTE_TRACKERR = 2\npkg syscall (netbsd-arm64), const NOTE_TRACKERR ideal-int\npkg syscall (netbsd-arm64), const NOTE_TRACK ideal-int\npkg syscall (netbsd-arm64), const NOTE_WRITE = 2\npkg syscall (netbsd-arm64), const NOTE_WRITE ideal-int\npkg syscall (netbsd-arm64), const O_ACCMODE = 3\npkg syscall (netbsd-arm64), const O_ACCMODE ideal-int\npkg syscall (netbsd-arm64), const O_ALT_IO = 262144\npkg syscall (netbsd-arm64), const O_ALT_IO ideal-int\npkg syscall (netbsd-arm64), const O_APPEND = 8\npkg syscall (netbsd-arm64), const O_ASYNC = 64\npkg syscall (netbsd-arm64), const O_CLOEXEC = 4194304\npkg syscall (netbsd-arm64), const O_CREAT = 512\npkg syscall (netbsd-arm64), const OCRNL = 16\npkg syscall (netbsd-arm64), const OCRNL ideal-int\npkg syscall (netbsd-arm64), const O_DIRECT = 524288\npkg syscall (netbsd-arm64), const O_DIRECT ideal-int\npkg syscall (netbsd-arm64), const O_DIRECTORY = 2097152\npkg syscall (netbsd-arm64), const O_DIRECTORY ideal-int\npkg syscall (netbsd-arm64), const O_DSYNC = 65536\npkg syscall (netbsd-arm64), const O_DSYNC ideal-int\npkg syscall (netbsd-arm64), const O_EXCL = 2048\npkg syscall (netbsd-arm64), const O_EXLOCK = 32\npkg syscall (netbsd-arm64), const O_EXLOCK ideal-int\npkg syscall (netbsd-arm64), const OFIOGETBMAP = 3221513850\npkg syscall (netbsd-arm64), const OFIOGETBMAP ideal-int\npkg syscall (netbsd-arm64), const O_FSYNC = 128\npkg syscall (netbsd-arm64), const O_FSYNC ideal-int\npkg syscall (netbsd-arm64), const O_NDELAY = 4\npkg syscall (netbsd-arm64), const O_NDELAY ideal-int\npkg syscall (netbsd-arm64), const ONLCR = 2\npkg syscall (netbsd-arm64), const ONLCR ideal-int\npkg syscall (netbsd-arm64), const ONLRET = 64\npkg syscall (netbsd-arm64), const ONLRET ideal-int\npkg syscall (netbsd-arm64), const ONOCR = 32\npkg syscall (netbsd-arm64), const ONOCR ideal-int\npkg syscall (netbsd-arm64), const O_NOCTTY = 32768\npkg syscall (netbsd-arm64), const ONOEOT = 8\npkg syscall (netbsd-arm64), const ONOEOT ideal-int\npkg syscall (netbsd-arm64), const O_NOFOLLOW = 256\npkg syscall (netbsd-arm64), const O_NOFOLLOW ideal-int\npkg syscall (netbsd-arm64), const O_NONBLOCK = 4\npkg syscall (netbsd-arm64), const O_NOSIGPIPE = 16777216\npkg syscall (netbsd-arm64), const O_NOSIGPIPE ideal-int\npkg syscall (netbsd-arm64), const OPOST = 1\npkg syscall (netbsd-arm64), const OPOST ideal-int\npkg syscall (netbsd-arm64), const O_RSYNC = 131072\npkg syscall (netbsd-arm64), const O_RSYNC ideal-int\npkg syscall (netbsd-arm64), const O_SHLOCK = 16\npkg syscall (netbsd-arm64), const O_SHLOCK ideal-int\npkg syscall (netbsd-arm64), const O_SYNC = 128\npkg syscall (netbsd-arm64), const O_TRUNC = 1024\npkg syscall (netbsd-arm64), const PARENB = 4096\npkg syscall (netbsd-arm64), const PARENB ideal-int\npkg syscall (netbsd-arm64), const PARMRK = 8\npkg syscall (netbsd-arm64), const PARMRK ideal-int\npkg syscall (netbsd-arm64), const PARODD = 8192\npkg syscall (netbsd-arm64), const PARODD ideal-int\npkg syscall (netbsd-arm64), const PENDIN = 536870912\npkg syscall (netbsd-arm64), const PENDIN ideal-int\npkg syscall (netbsd-arm64), const PRI_IOFLUSH = 124\npkg syscall (netbsd-arm64), const PRI_IOFLUSH ideal-int\npkg syscall (netbsd-arm64), const PRIO_PGRP = 1\npkg syscall (netbsd-arm64), const PRIO_PGRP ideal-int\npkg syscall (netbsd-arm64), const PRIO_PROCESS = 0\npkg syscall (netbsd-arm64), const PRIO_PROCESS ideal-int\npkg syscall (netbsd-arm64), const PRIO_USER = 2\npkg syscall (netbsd-arm64), const PRIO_USER ideal-int\npkg syscall (netbsd-arm64), const PROT_EXEC = 4\npkg syscall (netbsd-arm64), const PROT_EXEC ideal-int\npkg syscall (netbsd-arm64), const PROT_NONE = 0\npkg syscall (netbsd-arm64), const PROT_NONE ideal-int\npkg syscall (netbsd-arm64), const PROT_READ = 1\npkg syscall (netbsd-arm64), const PROT_READ ideal-int\npkg syscall (netbsd-arm64), const PROT_WRITE = 2\npkg syscall (netbsd-arm64), const PROT_WRITE ideal-int\npkg syscall (netbsd-arm64), const PTRACE_CONT = 7\npkg syscall (netbsd-arm64), const PTRACE_CONT ideal-int\npkg syscall (netbsd-arm64), const PTRACE_KILL = 8\npkg syscall (netbsd-arm64), const PTRACE_KILL ideal-int\npkg syscall (netbsd-arm64), const PTRACE_TRACEME = 0\npkg syscall (netbsd-arm64), const PTRACE_TRACEME ideal-int\npkg syscall (netbsd-arm64), const RLIM_INFINITY = 9223372036854775807\npkg syscall (netbsd-arm64), const RLIM_INFINITY ideal-int\npkg syscall (netbsd-arm64), const RLIMIT_AS = 10\npkg syscall (netbsd-arm64), const RLIMIT_AS ideal-int\npkg syscall (netbsd-arm64), const RLIMIT_CORE = 4\npkg syscall (netbsd-arm64), const RLIMIT_CORE ideal-int\npkg syscall (netbsd-arm64), const RLIMIT_CPU = 0\npkg syscall (netbsd-arm64), const RLIMIT_CPU ideal-int\npkg syscall (netbsd-arm64), const RLIMIT_DATA = 2\npkg syscall (netbsd-arm64), const RLIMIT_DATA ideal-int\npkg syscall (netbsd-arm64), const RLIMIT_FSIZE = 1\npkg syscall (netbsd-arm64), const RLIMIT_FSIZE ideal-int\npkg syscall (netbsd-arm64), const RLIMIT_NOFILE = 8\npkg syscall (netbsd-arm64), const RLIMIT_NOFILE ideal-int\npkg syscall (netbsd-arm64), const RLIMIT_STACK = 3\npkg syscall (netbsd-arm64), const RLIMIT_STACK ideal-int\npkg syscall (netbsd-arm64), const RTA_AUTHOR = 64\npkg syscall (netbsd-arm64), const RTA_AUTHOR ideal-int\npkg syscall (netbsd-arm64), const RTA_BRD = 128\npkg syscall (netbsd-arm64), const RTA_BRD ideal-int\npkg syscall (netbsd-arm64), const RTA_DST = 1\npkg syscall (netbsd-arm64), const RTA_DST ideal-int\npkg syscall (netbsd-arm64), const RTA_GATEWAY = 2\npkg syscall (netbsd-arm64), const RTA_GATEWAY ideal-int\npkg syscall (netbsd-arm64), const RTA_GENMASK = 8\npkg syscall (netbsd-arm64), const RTA_GENMASK ideal-int\npkg syscall (netbsd-arm64), const RTA_IFA = 32\npkg syscall (netbsd-arm64), const RTA_IFA ideal-int\npkg syscall (netbsd-arm64), const RTA_IFP = 16\n```\n\n----------------------------------------\n\nTITLE: Using LookupSelection Function in Go\nDESCRIPTION: The LookupSelection function looks up a field or method by name and receiver type, returning the result as a Selection. It provides similar functionality to LookupFieldOrMethod but with a different return type.\nSOURCE: https://github.com/golang/go/blob/master/doc/next/6-stdlib/99-minor/go/types/70737.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nLookupSelection(name string, receiverType Type) *Selection\n```\n\n----------------------------------------\n\nTITLE: Testing Go List with Error Flag\nDESCRIPTION: Tests the behavior of 'go list -e' which should report a nonexistent package with an error.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dot.txt#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# golang.org/issue/29280: 'go list -e' for a nonexistent directory should\n# report a nonexistent package with an error.\ngo list -e -json ./subdir\nstdout '\"Incomplete\": true'\n```\n\n----------------------------------------\n\nTITLE: Main Package Implementation\nDESCRIPTION: Main package file implementing basic imports from vendored packages p and p1.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_list_issue11977.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage g\n\nimport _ \"vendor.org/p\"\nimport _ \"vendor.org/p1\"\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Module D Configuration\nDESCRIPTION: Configuration for module D requiring an invalid dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue65363.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/d\n\ngo 1.18\n\nrequire example.net/invalid v0.1.0\n```\n\nLANGUAGE: go\nCODE:\n```\npackage d\n```\n\nLANGUAGE: go\nCODE:\n```\npackage d\n\nimport _ \"example.net/invalid\"\n```\n\n----------------------------------------\n\nTITLE: Documentation Link Input Format\nDESCRIPTION: Raw input format showing documentation references before URL transformation\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/doclink6.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n[encoding/json.Marshal] is a doc link, and so is [rsc.io/quote.NonExist].\n```\n\n----------------------------------------\n\nTITLE: Main Package Go Implementation\nDESCRIPTION: Main package implementation with function declarations and a call to external bar package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/trampoline_reuse_test.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"foo/bar\"\n\nfunc Func1()\n\nfunc main() {\n        Func1()\n        bar.Bar2()\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Go Module Sum JSON Output with Regex Patterns - Shell\nDESCRIPTION: These patterns are used to validate 'GoModSum' and 'Sum' fields in the JSON output from the Go module listing, ensuring the expected format of hash sums. Dependencies include output from 'go list -m -json all'. No direct parameters; intended for output validation workflows.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_m.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nstdout '\"GoModSum\":\\s+\"h1:.+\"'\nstdout '\"Sum\":\\s+\"h1:.+\"'\n```\n\n----------------------------------------\n\nTITLE: Defining Module Metadata - Go Modules - Go\nDESCRIPTION: Defines the module path for the Go project using the go.mod file. This entry declares the root module (golang.org/toolchain) and is essential for Go dependency management and build integration. There are no dependencies specified, and this serves as an anchor point for module-aware builds and versioning.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.android-arm64.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Go Package Usage\nDESCRIPTION: Go package that imports rsc.io/quote as a blank import\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage use\n\nimport _ \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Syscall Functions in Go for NetBSD\nDESCRIPTION: This snippet declares two system call functions specific to NetBSD: FcntlFlock for file control operations and SendmsgN for sending messages over a socket.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_28\n\nLANGUAGE: Go\nCODE:\n```\nfunc FcntlFlock(uintptr, int, *Flock_t) error\nfunc SendmsgN(int, []uint8, []uint8, Sockaddr, int) (int, error)\n```\n\n----------------------------------------\n\nTITLE: Main Package with External Import\nDESCRIPTION: Main package attempting to import another main package in its test file, which should fail\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/import_main.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"testing\"\n\txmain \"x\"\n)\n\nvar _ = xmain.X\n\nfunc TestFoo(t *testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Excluding cmd/vendor Packages from Wildcard Match with Go List in Shell\nDESCRIPTION: Executes `go list cmd/...` to list all packages under the `cmd` directory using a wildcard pattern. It checks that standard command packages (e.g., `cmd/compile`) are included (`stdout cmd/compile`) but asserts that packages within the specific `cmd/vendor` subdirectory are explicitly excluded (`! stdout cmd/vendor`) from the results of this wildcard match.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_std.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# However, vendored packages should not match wildcard patterns beginning with cmd.\ngo list cmd/...\nstdout cmd/compile\n! stdout cmd/vendor\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module declaration file specifying the module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_cmd_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/cmd\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Basic Txtar Format Example\nDESCRIPTION: Example of a txtar format file showing input and expected output in different formats (gofmt, html, markdown, text)\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/README.md#2025-04-22_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n-- input --\nHello.\n-- gofmt --\nHello.\n-- html --\n<p>Hello.\n-- markdown --\nHello.\n-- text --\nHello.\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module\nDESCRIPTION: This snippet shows the contents of a go.mod file for a module named 'example.com/m'. It specifies the module name and the Go version to be used.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_no_mod_root_issue54419.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/m\n\ngo 1.25\n```\n\n----------------------------------------\n\nTITLE: Go Module Path Declaration\nDESCRIPTION: Defines the module path for a Go package\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_badchain_c_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/badchain/c\n```\n\n----------------------------------------\n\nTITLE: Implementing Gofmt Command Shell Script\nDESCRIPTION: A shell script that serves as the 'gofmt' command executable. It simply echoes a message stating it is unused, likely included as a placeholder in the test toolchain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-386.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: C-Archive Go Source File\nDESCRIPTION: Go source file defining a C-exportable function for testing build mode flags. Contains minimal implementation with an exported GoFunc and empty main function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_gcflags.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"C\"\n\n//export GoFunc\nfunc GoFunc() {}\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Defining Routing Message Types in Go for NetBSD ARM64\nDESCRIPTION: This snippet defines constants for various routing message types used in the NetBSD ARM64 syscall package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_143\n\nLANGUAGE: Go\nCODE:\n```\nconst (\n    RTM_ADD = 1\n    RTM_CHANGE = 3\n    RTM_CHGADDR = 21\n    RTM_DELADDR = 13\n    RTM_DELETE = 2\n    RTM_GET = 4\n    RTM_IEEE80211 = 17\n    RTM_IFANNOUNCE = 16\n    RTM_IFINFO = 20\n    RTM_LLINFO_UPD = 19\n    RTM_LOCK = 8\n    RTM_LOSING = 5\n    RTM_MISS = 7\n    RTM_NEWADDR = 12\n    RTM_OIFINFO = 15\n    RTM_OLDADD = 9\n    RTM_OLDDEL = 10\n    RTM_OOIFINFO = 14\n    RTM_REDIRECT = 6\n    RTM_RESOLVE = 11\n    RTM_RTTUNIT = 1000000\n    RTM_SETGATE = 18\n    RTM_VERSION = 4\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module\nDESCRIPTION: Specifies the module name and Go version requirement for the project.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_unsupported.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule example\n\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: System Call Constant Type Declarations for Darwin ARM64\nDESCRIPTION: Type declarations for syscall constants in Go's syscall package for Darwin ARM64. These specify that the constants are of type 'ideal-int', which is Go's internal representation for untyped integer constants.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_108\n\nLANGUAGE: Go\nCODE:\n```\nconst SYS_OPEN_NOCANCEL ideal-int\nconst SYS_PATHCONF ideal-int\nconst SYS_PID_HIBERNATE ideal-int\nconst SYS_PID_RESUME ideal-int\nconst SYS_PID_SHUTDOWN_SOCKETS ideal-int\nconst SYS_PID_SUSPEND ideal-int\nconst SYS_PIPE ideal-int\nconst SYS_POLL ideal-int\nconst SYS_POLL_NOCANCEL ideal-int\nconst SYS_POSIX_SPAWN ideal-int\nconst SYS_PREAD ideal-int\nconst SYS_PREAD_NOCANCEL ideal-int\nconst SYS_PROCESS_POLICY ideal-int\nconst SYS_PROC_INFO ideal-int\n```\n\n----------------------------------------\n\nTITLE: Declaring Struct Field Layouts for OpenBSD (386, amd64, amd64-cgo) in Go\nDESCRIPTION: Declares individual struct fields and types that directly map Go struct layouts to OpenBSD kernel or libc data structures for syscall purposes. This includes fields for directory entries, file descriptors, kernel events, time representations, filesystem statistics, network routing, and memory pools. Dependencies are the Go 'syscall' package and OpenBSD system headers. Expected input is native struct declarations; output is correct Go memory layout for OS interop.\nSOURCE: https://github.com/golang/go/blob/master/api/except.txt#2025-04-22_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\ntype Dirent struct { Fileno uint32 }\ntype FdSet struct { Bits [32]int32 }\ntype Kevent_t struct { Data int32; Ident uint32 }\ntype Mclpool struct { Grown uint32 }\ntype RtMetrics struct { Expire uint32 }\ntype Stat_t struct { Ino uint32; Lspare0 int32; Lspare1 int32; Qspare [2]int64 }\ntype Statfs_t struct { F_ctime uint32; F_spare [3]uint32; Pad_cgo_1 [4]uint8 }\ntype Timespec struct { Sec int32; Pad_cgo_0 [4]uint8 }\ntype Timeval struct { Sec int32 }\n```\n\n----------------------------------------\n\nTITLE: Gofmt Template Section\nDESCRIPTION: Gofmt formatted template section with Go homepage link reference\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/link3.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nDoc text.\n\n[Go home page]: https://go.dev\n```\n\n----------------------------------------\n\nTITLE: Testing Regular Expression Anchor and Group Combinations in Go\nDESCRIPTION: This collection demonstrates various regular expression patterns with different combinations of anchors (^ and $) and non-capturing groups (?:). The data includes test strings and expected match positions indicated by the numbers (like 0-3) which represent character positions in the string where matches occur.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_40\n\nLANGUAGE: regexp\nCODE:\n```\n(?m)def$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:(?m)def$)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:(?m)def$)\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:(?m)def$)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?m)d[ex][fy]$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:(?m)d[ex][fy]$)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:(?m)d[ex][fy]$)\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:(?m)d[ex][fy]$)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?m)[dz][ex][fy]$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:(?m)[dz][ex][fy]$)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:(?m)[dz][ex][fy]$)\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:(?m)[dz][ex][fy]$)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:^)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:^)\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:^)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^^\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:^^)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:^^)\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:^^)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\na\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:a)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:a)\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:a)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\nab*\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:ab*)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:ab*)\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:ab*)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\na\\C*\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:a\\C*)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:a\\C*)\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:a\\C*)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\na\\C+\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:a\\C+)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:a\\C+)\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:a\\C+)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\na\\C?\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:a\\C?)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:a\\C?)\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:a\\C?)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\na\\C*?\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:a\\C*?)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:a\\C*?)\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:a\\C*?)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\na\\C+?\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:a\\C+?)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:a\\C+?)\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:a\\C+?)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\na\\C??\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:a\\C??)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:a\\C??)\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:a\\C??)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\na\\C*|ba\\C\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:a\\C*|ba\\C)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:a\\C*|ba\\C)\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:a\\C*|ba\\C)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n\\w*I\\w*\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:\\w*I\\w*)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:\\w*I\\w*)\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:\\w*I\\w*)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:|a)*\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:(?:|a)*)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:(?:|a)*)\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:(?:|a)*)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:|a)+\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:(?:|a)+)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:(?:|a)+)\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:(?:|a)+)$\n```\n\n----------------------------------------\n\nTITLE: Defining Memory Mapping Constants in Go for OpenBSD 386 CGO\nDESCRIPTION: This snippet defines constants for memory mapping flags used in system calls like mmap(). These constants control various aspects of memory mapping behavior.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_46\n\nLANGUAGE: Go\nCODE:\n```\nconst MAP_ANON = 4096\nconst MAP_ANON ideal-int\nconst MAP_FIXED = 16\nconst MAP_FIXED ideal-int\nconst MAP_PRIVATE = 2\nconst MAP_PRIVATE ideal-int\nconst MAP_SHARED = 1\nconst MAP_SHARED ideal-int\n```\n\n----------------------------------------\n\nTITLE: Defining Kevent_t Struct in Go for Darwin ARM64 CGO\nDESCRIPTION: Defines the Kevent_t struct used for kernel event notifications. It includes fields for identifier, filter, flags, and associated data.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_202\n\nLANGUAGE: Go\nCODE:\n```\ntype Kevent_t struct {\n    Data int64\n    Fflags uint32\n    Filter int16\n    Flags uint16\n    Ident uint64\n    Udata *uint8\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Hello World Program in Go\nDESCRIPTION: Basic Go program that prints 'hello, world' using the main function and fmt.Println.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/code6.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\tfmt.Println(\"hello, world\")\n}\n```\n\n----------------------------------------\n\nTITLE: NetBSD ARM64 Data Structure Size Constants\nDESCRIPTION: Size constants for various system data structures including BPF, network messages, and socket structures\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_148\n\nLANGUAGE: Go\nCODE:\n```\nconst SizeofBpfHdr = 32\nconst SizeofBpfInsn = 8\nconst SizeofBpfProgram = 16\nconst SizeofBpfStat = 128\nconst SizeofCmsghdr = 12\nconst SizeofMsghdr = 48\n```\n\n----------------------------------------\n\nTITLE: Testing Start and End Anchors with \\B and Dot in Go Regexps\nDESCRIPTION: Tests patterns with start and end anchors, non-word boundary assertions, and the dot metacharacter. These tests verify single-character matches with non-word boundary constraints at both ends.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_17\n\nLANGUAGE: regexp\nCODE:\n```\n^\\B.\\B$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:^\\B.\\B$)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:^\\B.\\B$)\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:^\\B.\\B$)$\n```\n\n----------------------------------------\n\nTITLE: Example module go.mod file\nDESCRIPTION: Initial go.mod file for the example module used in testing. It specifies the module name and Go version 1.21.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_exec_toolchain.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nmodule example\n\ngo 1.21\n```\n\n----------------------------------------\n\nTITLE: Defining Time-Related Structs in Go Syscall Package\nDESCRIPTION: Definitions for time-related structures in the syscall package for Darwin ARM64. These include Timespec (high-resolution time with seconds and nanoseconds), Timeval (time with seconds and microseconds), and Timeval32 (32-bit version for compatibility).\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_212\n\nLANGUAGE: Go\nCODE:\n```\ntype Timespec struct {\n    Sec  int64\n    Nsec int64\n}\n\ntype Timeval struct {\n    Sec         int64\n    Usec        int32\n    Pad_cgo_0   [4]uint8\n}\n\ntype Timeval32 struct {\n    Sec  int32\n    Usec int32\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Port Number Allocations for Golang Services\nDESCRIPTION: This snippet provides a table of port number allocations for various Golang services and tools. It includes the port number, service name, and any additional notes or descriptions.\nSOURCE: https://github.com/golang/go/blob/master/doc/initial/7-ports.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n| Port | Service |\n|------|----------|\n| 6060 | Go standard library's http/pprof package |\n| 8080 | Go standard library's http/net package examples |\n| 10000 | net/http/httptest package |\n| 10001 | net/http/httptest package |\n| 20000 | Go standard library's http/httptest package (httptest.Server) |\n| 30000 | cmd/go (for module proxy tests) |\n| 30001 | cmd/go (for module proxy tests) |\n| 30002 | cmd/go (for module proxy tests) |\n| 40000 | cmd/go (for module proxy tests) |\n```\n\n----------------------------------------\n\nTITLE: Defining Time Structures in Go for NetBSD ARM64\nDESCRIPTION: Definitions of time-related structures: Timespec for high-resolution time with seconds and nanoseconds, and Timeval for time with seconds and microseconds.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_110\n\nLANGUAGE: Go\nCODE:\n```\ntype Timespec struct {\n    Sec int64\n    Nsec int64\n}\n\ntype Timeval struct {\n    Sec int64\n    Usec int32\n    Pad_cgo_0 [4]uint8\n}\n```\n\n----------------------------------------\n\nTITLE: Fortune Test Implementation\nDESCRIPTION: Test file containing a placeholder test function for Fortune v2\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_fortune_v2_v2.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"testing\"\n\nfunc TestFortuneV2(t *testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Defining Syscall Constants for Darwin ARM64 CGO in Go\nDESCRIPTION: This snippet defines various constants used in system calls for the Darwin ARM64 CGO platform. These constants are used for terminal I/O, process control, and other system operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_197\n\nLANGUAGE: Go\nCODE:\n```\nconst VTDLY ideal-int\nconst VTIME = 17\nconst VTIME ideal-int\nconst VWERASE = 4\nconst VWERASE ideal-int\nconst WCONTINUED = 16\nconst WCONTINUED ideal-int\nconst WCOREFLAG = 128\nconst WCOREFLAG ideal-int\nconst WEXITED = 4\nconst WEXITED ideal-int\nconst WNOHANG = 1\nconst WNOHANG ideal-int\nconst WNOWAIT = 32\nconst WNOWAIT ideal-int\nconst WORDSIZE = 64\nconst WORDSIZE ideal-int\nconst WSTOPPED = 8\nconst WSTOPPED ideal-int\nconst WUNTRACED = 2\nconst WUNTRACED ideal-int\n```\n\n----------------------------------------\n\nTITLE: Implementing CreateProcessAsUser function for Windows AMD64 architecture\nDESCRIPTION: Defines the CreateProcessAsUser function signature for the syscall package on Windows 64-bit architecture. This function creates a new process with the security context of the specified token.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.10.txt#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\npkg syscall (windows-amd64), func CreateProcessAsUser(Token, *uint16, *uint16, *SecurityAttributes, *SecurityAttributes, bool, uint32, *uint16, *uint16, *StartupInfo, *ProcessInformation) error\n```\n\n----------------------------------------\n\nTITLE: Describing Module Version Information with .info File - JSON\nDESCRIPTION: Defines the version metadata for a Go module in JSON format. This file typically contains version details such as the version string, commit time, and more, but here only the 'Version' property ('v0.0.0-empty') is populated. No dependencies are required to interpret this format, but it is consumed by Go toolchain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_ambiguous_a_b_v0.0.0-empty.txt#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\\\"Version\\\":\\\"v0.0.0-empty\\\"}\n```\n\n----------------------------------------\n\nTITLE: Basic Go Module Setup\nDESCRIPTION: Defines a basic Go module named 'm' with a specified Go version of 1.16. This module setup is essential for managing dependencies and module paths in Go projects.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/embed.txt#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\nmodule m\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Manual go.mod Editing with Commit Hash\nDESCRIPTION: Tests that manually editing go.mod with a commit hash using 'go mod edit' does not interpret the commit as a version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_commit.txt#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngo mod edit -require rsc.io/quote@23179ee\ngrep 'rsc.io/quote 23179ee' go.mod\n```\n\n----------------------------------------\n\nTITLE: Main Package Implementation (p.go)\nDESCRIPTION: Simple Go package implementation containing a function F that returns integer 1.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_relative_cmdline.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nfunc F() int { return 1 }\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Main Package in Go\nDESCRIPTION: This snippet defines an empty `main` package with a `main` function. This is often used as a placeholder or a basic entry point when creating modules or libraries in Go, particularly when no explicit executable is required.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_cshared.txt#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\nfunc main(){}\n```\n\n----------------------------------------\n\nTITLE: Godeps JSON Configuration\nDESCRIPTION: JSON configuration file specifying import path for package z\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_find.txt#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"ImportPath\": \"unexpected.com/z\"}\n```\n\n----------------------------------------\n\nTITLE: Socket and File Operation Functions for Darwin ARM64 in Go\nDESCRIPTION: Function declarations for socket and file operations in the syscall package for Darwin ARM64. These functions provide interfaces to system calls for network and file I/O operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_117\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (darwin-arm64), func Accept(int) (int, Sockaddr, error)\npkg syscall (darwin-arm64), func Access(string, uint32) error\npkg syscall (darwin-arm64), func Adjtime(*Timeval, *Timeval) error\npkg syscall (darwin-arm64), func Bind(int, Sockaddr) error\npkg syscall (darwin-arm64), func Close(int) error\npkg syscall (darwin-arm64), func CloseOnExec(int)\npkg syscall (darwin-arm64), func CmsgLen(int) int\npkg syscall (darwin-arm64), func CmsgSpace(int) int\npkg syscall (darwin-arm64), func Connect(int, Sockaddr) error\npkg syscall (darwin-arm64), func Dup(int) (int, error)\npkg syscall (darwin-arm64), func Dup2(int, int) error\n```\n\n----------------------------------------\n\nTITLE: Go Test File\nDESCRIPTION: A simple Go test file with an empty test function. This file allows 'go test' to run, triggering the compilation errors in the other files.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_error.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Formatting Text in Plain Format\nDESCRIPTION: This snippet shows the original text without any formatting.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/words.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nThis is an italicword and a linkedword and Unicöde.\n```\n\n----------------------------------------\n\nTITLE: Simple Package Declaration Z\nDESCRIPTION: Basic Go package declaration for package z\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_find.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage z\n```\n\n----------------------------------------\n\nTITLE: Testing go list with --versions flag for unknown module\nDESCRIPTION: Executes 'go list -m' command with the --versions flag for an unknown module to verify that it doesn't affect the error reporting behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_versions.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngo list -m -e -f $FMT --versions example.com/retract/self/pseudo\nstdout '^example.com/retract/self/pseudo \"\"$'\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Path in go.mod\nDESCRIPTION: Specifies the module path `golang.org/toolchain` within the `go.mod` file (indicated by context markers `.mod` and `go.mod`). This declaration is fundamental for Go's module system to identify the module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.android-386.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Mock Go Binary Implementation in rc Shell\nDESCRIPTION: A minimal Plan9 rc shell script that mocks the Go binary, simply echoing a version identifier when executed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.plan9-amd64.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/rc\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Deprecated Windows String and Message Functions (AMD64)\nDESCRIPTION: Deprecated Windows-specific string conversion and message formatting functions for 64-bit systems. These functions handled UTF-16 string conversions and Windows message formatting.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_46\n\nLANGUAGE: go\nCODE:\n```\nfunc FormatMessage() {} //deprecated\nfunc StringToUTF16() {} //deprecated\nfunc StringToUTF16Ptr() {} //deprecated\n```\n\n----------------------------------------\n\nTITLE: Simple Go Main Function\nDESCRIPTION: A minimal Go program with an empty main function, used as a test subject for the build and install commands.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_cleans_build.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Deprecated OpenBSD Route Message Types\nDESCRIPTION: Deprecated route message type declarations for OpenBSD AMD64 with CGO enabled. These types were used for routing message handling on OpenBSD systems.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_44\n\nLANGUAGE: go\nCODE:\n```\ntype RouteMessage struct {} //deprecated\ntype RoutingMessage struct {} //deprecated\n```\n\n----------------------------------------\n\nTITLE: Adding TLS Support for X25519MLKEM768 in Go\nDESCRIPTION: New constant for X25519MLKEM768 curve in the crypto/tls package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\nconst X25519MLKEM768 = 4588\nconst X25519MLKEM768 CurveID\n```\n\n----------------------------------------\n\nTITLE: Gofmt Formatting\nDESCRIPTION: The text formatted according to gofmt style with normalized spacing and line breaks.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list4.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nText.\n 1. List\n\n2. Not indented, not a list.\n 3. Another list.\n```\n\n----------------------------------------\n\nTITLE: Specifying Module Version Metadata - Go - JSON\nDESCRIPTION: Provides versioning information for the Go module in a separate metadata file. This snippet contains a JSON object with the 'Version' key, indicating the semantic version for the module release. Such metadata is typically managed by Go tools and is used for resolving dependencies. No code dependencies are required.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\\\"Version\\\": \\\"v1.0.0\\\"}\n```\n\n----------------------------------------\n\nTITLE: Testing module build restrictions with vendored packages\nDESCRIPTION: Verifies that modules outside the standard library cannot use packages vendored in the standard library, showing the appropriate error messages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_std_vendor.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncd broken\n! go build -mod=readonly\nstderr 'disabled by -mod=readonly'\n! go build -mod=vendor\nstderr 'http.go:5:2: cannot find module providing package golang.org/x/net/http2/hpack: import lookup disabled by -mod=vendor'\n```\n\n----------------------------------------\n\nTITLE: Defining Process Priority Constants (PRIO_*) in Go for darwin-arm64\nDESCRIPTION: Constants for process priority manipulation. These constants are used with setpriority(2) and getpriority(2) system calls to specify which entities (process, process group, or user) should have their priorities modified.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_87\n\nLANGUAGE: Go\nCODE:\n```\nconst PRIO_PGRP = 1\nconst PRIO_PGRP ideal-int\nconst PRIO_PROCESS = 0\nconst PRIO_PROCESS ideal-int\nconst PRIO_USER = 2\nconst PRIO_USER ideal-int\n```\n\n----------------------------------------\n\nTITLE: Defining RtMsghdr Structure in Go for NetBSD ARM64\nDESCRIPTION: Definition of the RtMsghdr struct which represents a routing message header in NetBSD. This structure contains fields for message length, type, flags, and other routing-related information.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_102\n\nLANGUAGE: Go\nCODE:\n```\ntype RtMsghdr struct {\n    Msglen uint16\n    Version uint8\n    Type uint8\n    Index uint16\n    Pad_cgo_0 [2]uint8\n    Flags int32\n    Pid int32\n    Seq int32\n    Inits int32\n    Rmx RtMetrics\n    Use int32\n    Pad_cgo_1 [4]uint8\n}\n```\n\n----------------------------------------\n\nTITLE: Network Error Constants in Go Syscall Package for Darwin ARM64\nDESCRIPTION: Network-related error constants used in network operations through syscalls. These error codes signal various network failure conditions such as connection refused, reset, or timeout.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_146\n\nLANGUAGE: Go\nCODE:\n```\nconst ECONNABORTED = 53\nconst ECONNREFUSED = 61\nconst ECONNRESET = 54\nconst EDEADLK = 11\nconst EDESTADDRREQ = 39\nconst EDEVERR = 83\nconst EDEVERR Errno\nconst EDOM = 33\nconst EDQUOT = 69\nconst EEXIST = 17\nconst EFAULT = 14\nconst EFBIG = 27\nconst EFTYPE = 79\nconst EFTYPE Errno\nconst EHOSTDOWN = 64\nconst EHOSTUNREACH = 65\n```\n\n----------------------------------------\n\nTITLE: Implementing Switch Statements with Fallthrough in Go\nDESCRIPTION: This code snippet demonstrates two switch statements in Go. The first switch uses a fallthrough statement after a blank identifier case, while the second includes multiple blank identifier cases before the fallthrough.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/testdata/script/issue70173.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nfunc main() {\n\tswitch {\n\tcase true:\n\t_:\n\t\tfallthrough\n\tdefault:\n\t}\n\tswitch {\n\tcase true:\n\t_:\n\t_:\n\t\tfallthrough\n\tdefault:\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Testing vendored dependencies in std module\nDESCRIPTION: Verifies that when run within the 'std' module, 'go list -test' reports vendored transitive dependencies at their vendored paths.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_std_vendor.txt#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncd $GOROOT/src\ngo list -test -f '{{range .Deps}}{{.}}{{\"\\n\"}}{{end}}' net/http\n! stdout ^golang.org/x/net/http2/hpack\nstdout ^vendor/golang.org/x/net/http2/hpack\n```\n\n----------------------------------------\n\nTITLE: IP Address Classification Constants in Go for NetBSD ARM64\nDESCRIPTION: Constants for IPv4 address classification in NetBSD ARM64. These define masks and shift values for Class A, B, C, and D address ranges.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_132\n\nLANGUAGE: Go\nCODE:\n```\nconst IN_CLASSA_HOST = 16777215\nconst IN_CLASSA_MAX = 128\nconst IN_CLASSA_NET = 4278190080\nconst IN_CLASSA_NSHIFT = 24\nconst IN_CLASSB_HOST = 65535\nconst IN_CLASSB_MAX = 65536\nconst IN_CLASSB_NET = 4294901760\nconst IN_CLASSB_NSHIFT = 16\nconst IN_CLASSC_HOST = 255\nconst IN_CLASSC_NET = 4294967040\nconst IN_CLASSC_NSHIFT = 8\nconst IN_CLASSD_HOST = 268435455\nconst IN_CLASSD_NET = 4026531840\nconst IN_CLASSD_NSHIFT = 28\nconst IN_LOOPBACKNET = 127\n```\n\n----------------------------------------\n\nTITLE: Defining Transitive Test Dependency via 'x/otherdep' (Go)\nDESCRIPTION: Defines a test file for package `x/otherdep` (using the `otherdep_test` naming convention). It imports `y/fromotherdeptest` from module `y` using a blank identifier. This establishes a test-only dependency for `x/otherdep`. The tests check if this package is *excluded* by `go list -deps -test all x/otherroot` because `x/otherdep` itself is not a root package in that command.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_notall.txt#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n-- x/otherdep/otherdep_test.go --\npackage otherdep_test\n\nimport _ \"y/fromotherdeptest\"\n```\n\n----------------------------------------\n\nTITLE: NetBSD ARM64 Terminal I/O Control Constants in Go\nDESCRIPTION: Defines terminal I/O control flags and operations for NetBSD on ARM64. These constants are used when manipulating terminal settings through the ioctl system call in Go programs running on NetBSD ARM64.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_152\n\nLANGUAGE: Go\nCODE:\n```\nconst TCIFLUSH = 1\nconst TCIOFLUSH = 3\nconst TCOFLUSH = 2\nconst TCSAFLUSH = 2\nconst TIOCCBRK = 536900730\nconst TIOCCDTR = 536900728\nconst TIOCCONS = 2147775586\nconst TIOCDCDTIMESTAMP = 1074820184\nconst TIOCDRAIN = 536900702\nconst TIOCEXCL = 536900621\nconst TIOCEXT = 2147775584\nconst TIOCFLAG_CDTRCTS = 16\nconst TIOCFLAG_CLOCAL = 2\nconst TIOCFLAG_CRTSCTS = 4\nconst TIOCFLAG_MDMBUF = 8\nconst TIOCFLAG_SOFTCAR = 1\nconst TIOCFLUSH = 2147775504\nconst TIOCGETA = 1076655123\nconst TIOCGETD = 1074033690\nconst TIOCGFLAGS = 1074033757\nconst TIOCGLINED = 1075868738\nconst TIOCGPGRP = 1074033783\nconst TIOCGQSIZE = 1074033793\nconst TIOCGRANTPT = 536900679\nconst TIOCGSID = 1074033763\nconst TIOCGSIZE = 1074295912\nconst TIOCGWINSZ = 1074295912\nconst TIOCMBIC = 2147775595\nconst TIOCMBIS = 2147775596\nconst TIOCM_CAR = 64\nconst TIOCM_CD = 64\nconst TIOCM_CTS = 32\nconst TIOCM_DSR = 256\nconst TIOCM_DTR = 2\nconst TIOCMGET = 1074033770\nconst TIOCM_LE = 1\nconst TIOCM_RI = 128\nconst TIOCM_RNG = 128\nconst TIOCM_RTS = 4\nconst TIOCMSET = 2147775597\nconst TIOCM_SR = 16\nconst TIOCM_ST = 8\nconst TIOCNOTTY = 536900721\nconst TIOCNXCL = 536900622\nconst TIOCOUTQ = 1074033779\nconst TIOCPKT = 2147775600\nconst TIOCPKT_DATA = 0\nconst TIOCPKT_DOSTOP = 32\n```\n\n----------------------------------------\n\nTITLE: Defining File Operation Constants for Darwin ARM64 in Go\nDESCRIPTION: This snippet defines constants used in file operations for the Darwin ARM64 architecture. These constants are used with system calls to perform various file-related operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_62\n\nLANGUAGE: Go\nCODE:\n```\nconst F_GETLK ideal-int\nconst F_GETLKPID = 66\nconst F_GETNOSIGPIPE = 74\nconst F_GETOWN = 5\nconst F_GETPATH = 50\nconst F_GETPATH_MTMINFO = 71\nconst F_GETPROTECTIONCLASS = 63\nconst F_GETPROTECTIONLEVEL = 77\nconst F_GLOBAL_NOCACHE = 55\nconst F_LOG2PHYS = 49\nconst F_LOG2PHYS_EXT = 65\nconst F_NOCACHE = 48\nconst F_NODIRECT = 62\nconst F_OK = 0\nconst F_PATHPKG_CHECK = 52\nconst F_PEOFPOSMODE = 3\nconst F_PREALLOCATE = 42\nconst F_RDADVISE = 44\nconst F_RDAHEAD = 45\nconst F_RDLCK = 1\nconst F_SETBACKINGSTORE = 70\nconst F_SETFD = 2\nconst F_SETFL = 4\nconst F_SETLK = 8\nconst F_SETLKW = 9\nconst F_SETLKWTIMEOUT = 10\nconst F_SETNOSIGPIPE = 73\nconst F_SETOWN = 6\nconst F_SETPROTECTIONCLASS = 64\nconst F_SETSIZE = 43\nconst F_SINGLE_WRITER = 76\nconst F_THAW_FS = 54\nconst F_TRANSCODEKEY = 75\nconst F_UNLCK = 2\nconst F_VOLPOSMODE = 4\nconst F_WRLCK = 3\n```\n\n----------------------------------------\n\nTITLE: Defining Package Y in Module A\nDESCRIPTION: Creates an empty package 'y' in module 'example.com/a' for testing unused imports.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_ambiguous_import.txt#2025-04-22_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\npackage y\n```\n\n----------------------------------------\n\nTITLE: Checking error for empty directory\nDESCRIPTION: Uses 'go list' to check the error message for an empty directory, which should indicate no Go files.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_empty_err.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo list -e -f {{.Error}} ./empty\nstdout 'no Go files in '$WORK${/}'empty'\n```\n\n----------------------------------------\n\nTITLE: Implementing a Failing Fuzz Test in Go\nDESCRIPTION: This Go test file defines a fuzz test function `FuzzFail` within the `fuzzfail` package. It uses the `testing` package's fuzzing capabilities (`f.Fuzz`). The provided fuzz target function immediately calls `t.Fatalf` with the received byte slice `b`, ensuring the test fails for any input provided by the fuzzing engine.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_fuzzfail_v0.2.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage fuzzfail\n\nimport \"testing\"\n\nfunc FuzzFail(f *testing.F) {\n\tf.Fuzz(func(t *testing.T, b []byte) {\n\t\tt.Fatalf(\"oops: %q\", b)\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Main Module Definition\nDESCRIPTION: Defines the main module with replacements for test dependencies and version requirements.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_convergence.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/m\n\ngo 1.16\n\nreplace (\n\texample.net/x v0.1.0 => ./x1\n\texample.net/x v0.2.0-pre => ./x2-pre\n\texample.net/y v0.1.0 => ./y1\n\texample.net/y v0.2.0 => ./y2\n)\n\nrequire (\n\texample.net/x v0.1.0\n)\n```\n\n----------------------------------------\n\nTITLE: NetBSD System Constants\nDESCRIPTION: System-level constants for NetBSD ARM64 platform including file modes, path separators and architecture identifiers.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\nconst (\n    DevNull = \"/dev/null\"\n    O_APPEND = 8\n    O_CREATE = 512\n    O_EXCL = 2048\n    O_SYNC = 128\n    O_TRUNC = 1024\n    PathListSeparator = 58\n    PathSeparator = 47\n    GOARCH = \"arm64\"\n    GOOS = \"netbsd\"\n)\n```\n\n----------------------------------------\n\nTITLE: Detecting Memory Aliasing Using Reflection in Go for AppEngine\nDESCRIPTION: This version of AnyOverlap uses reflection to check for memory overlap between byte slices. It's designed for compatibility with AppEngine environments where unsafe pointers are not allowed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_x_internal_v0.1.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc AnyOverlap(x, y []byte) bool {\n\treturn len(x) > 0 && len(y) > 0 &&\n\t\treflect.ValueOf(&x[0]).Pointer() <= reflect.ValueOf(&y[len(y)-1]).Pointer() &&\n\t\treflect.ValueOf(&y[0]).Pointer() <= reflect.ValueOf(&x[len(x)-1]).Pointer()\n}\n```\n\n----------------------------------------\n\nTITLE: Error Package with Compilation Error\nDESCRIPTION: Package demonstrating a compilation error by referencing an undefined identifier.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_cmd_v1.0.0-exclude.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage err\n\nvar X = DoesNotCompile\n```\n\n----------------------------------------\n\nTITLE: Defining Error Constants for Darwin ARM64 in Go\nDESCRIPTION: This snippet defines various error constants for the Darwin ARM64 architecture. These constants represent different types of system errors that can occur during program execution.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_58\n\nLANGUAGE: Go\nCODE:\n```\nconst EFTYPE = 79\nconst EFTYPE Errno\nconst EHOSTDOWN = 64\nconst EHOSTUNREACH = 65\nconst EIDRM = 90\nconst EILSEQ = 92\nconst EINPROGRESS = 36\nconst EINTR = 4\nconst EINVAL = 22\nconst EIO = 5\n// ... more error constants ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Quote Functions in Go\nDESCRIPTION: Defines a package 'quote' with three functions: Hello() returns a greeting, Glass() returns a phrase about eating glass, and Go() returns a Go programming proverb.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/not-rsc.io_quote_v0.1.0-nomod.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Copyright 2018 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// Package quote collects pithy sayings.\npackage quote // import \"rsc.io/quote\"\n\n// Hello returns a greeting.\nfunc Hello() string {\n\treturn \"Hello, world.\"\n}\n\n// Glass returns a useful phrase for world travelers.\nfunc Glass() string {\n\t// See http://www.oocities.org/nodotus/hbglass.html.\n\treturn \"I can eat glass and it doesn't hurt me.\"\n}\n\n// Go returns a Go proverb.\nfunc Go() string {\n\treturn \"Don't communicate by sharing memory, share memory by communicating.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Main Package with Type Mismatch Error\nDESCRIPTION: Main package attempting to compare string with integer, demonstrating intentional type mismatch error\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_export_e.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"fmt\"\nimport \"example.com/p1\"\n\nfunc main() {\n\tfmt.Println(p1.Name == 5)\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring FreeBSD System Call and Socket Constants - Go\nDESCRIPTION: This snippet declares various syscall and socket-related constants (e.g., SOCK_NONBLOCK, SO_VENDOR, SYS_ACCEPT4) as well as error codes and flag values specific to FreeBSD's implementation. The snippet is architecture-specific, with parallel sets for freebsd-amd64-cgo, freebsd-arm, and freebsd-arm-cgo build tags. These constants are used throughout low-level networking and OS interaction code in Go. Dependencies: natives Go types, and executed under appropriate GOOS/GOARCH settings for correct effect.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\nconst SOCK_NONBLOCK = 536870912\nconst SOCK_NONBLOCK ideal-int\nconst SO_VENDOR = 2147483648\nconst SO_VENDOR ideal-int\nconst SYS_ACCEPT4 = 541\nconst SYS_ACCEPT4 ideal-int\nconst SYS_BINDAT = 538\nconst SYS_BINDAT ideal-int\nconst SYS_CHFLAGSAT = 540\nconst SYS_CHFLAGSAT ideal-int\nconst SYS_CONNECTAT = 539\nconst SYS_CONNECTAT ideal-int\nconst SYS_PIPE2 = 542\nconst SYS_PIPE2 ideal-int\nconst SYS_PROCCTL = 544\nconst SYS_PROCCTL ideal-int\nconst TCP_VENDOR = 2147483648\nconst TCP_VENDOR ideal-int\nconst WEXITED = 16\nconst WEXITED ideal-int\nconst WTRAPPED = 32\nconst WTRAPPED ideal-int\n// ...plus additional constants for freebsd-arm and freebsd-arm-cgo\n\n```\n\n----------------------------------------\n\nTITLE: Unused Placeholder Module Definition for 'c' v0.2.0\nDESCRIPTION: A placeholder file indicating the location for a different version (v0.2.0) of module `c`. This file is explicitly marked as unused in the test setup.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_import_allmod.txt#2025-04-22_snippet_14\n\nLANGUAGE: gomod\nCODE:\n```\n-- c2/go.mod --\nThis file should be unused.\n```\n\n----------------------------------------\n\nTITLE: Printer Configuration Example with Text Width\nDESCRIPTION: Example showing how to configure the comment.Printer with JSON initialization and expected text wrapping output\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/README.md#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n{\"TextWidth\": 20}\n-- input --\nPackage gob manages streams of gobs - binary values exchanged between an\nEncoder (transmitter) and a Decoder (receiver).\n-- text --\nPackage gob\nmanages streams\nof gobs - binary\nvalues exchanged\nbetween an Encoder\n(transmitter) and a\nDecoder (receiver).\n```\n\n----------------------------------------\n\nTITLE: HTML Output Format\nDESCRIPTION: Final HTML rendering of the list with proper link tag\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/linklist3.txt#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<p>Cool things:\n<ul>\n<li>Foo\n<li><a href=\"https://go.dev/\">Go</a>\n<li>Bar\n</ul>\n\n```\n\n----------------------------------------\n\nTITLE: Main Module Configuration\nDESCRIPTION: Main go.mod file defining module dependencies and replacements for version control\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patchbound.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example\n\ngo 1.16\n\nrequire (\n\texample.net/a v0.1.0\n\texample.net/b v0.1.0 // indirect\n)\n\nreplace (\n\texample.net/a v0.1.0 => ./a\n\texample.net/a v0.2.0 => ./a\n\texample.net/a v0.3.0 => ./a\n\texample.net/b v0.1.0 => ./b10\n\texample.net/b v0.1.1 => ./b11\n\texample.net/b v0.1.2 => ./b12\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Versioning\nDESCRIPTION: The code specifies Go module versioning information and dependencies required. It includes a Go module and a dependency on example.com/badchain/b version v1.1.0. The context ensures correct version management for consistent builds.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_badchain_a_v1.1.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n\nmodule example.com/badchain/a\n\nrequire example.com/badchain/b v1.1.0\n\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines a Go module named 'm' with Go version 1.18 requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_go_file.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Package A Definition\nDESCRIPTION: Go package 'a' with an import of package 'c'\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/noncanonical_import.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage a\\n\\nimport _ \"c\"\n```\n\n----------------------------------------\n\nTITLE: Package 2 Test File Structure\nDESCRIPTION: Empty test file for package pkg2 in the pkg directory. Used as part of the test structure to verify the behavior of 'go test' with multiple packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_compile_multi_pkg.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage pkg2\n```\n\n----------------------------------------\n\nTITLE: Linux and NetBSD Syscall Definitions\nDESCRIPTION: Definitions for Linux and NetBSD across different architectures (386, amd64, arm), including control message header structures and platform-specific function implementations.\nSOURCE: https://github.com/golang/go/blob/master/api/except.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// Linux definitions\ntype Cmsghdr struct {\n    X__cmsg_data [0]uint8\n    // other fields not shown\n}\n\n// NetBSD definitions\nconst ImplementsGetwd = false\nconst SizeofIfData = 132\n\nfunc Fchflags(string, int) error\n\ntype IfMsghdr struct {\n    Pad_cgo_1 [4]uint8\n    // other fields not shown\n}\n```\n\n----------------------------------------\n\nTITLE: Module Definition File for patch.example.com/direct\nDESCRIPTION: Defines the module and its dependencies in the .mod file format.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_direct_v1.1.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule patch.example.com/direct\n\nrequire (\n\tpatch.example.com/indirect v1.0.0\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Memory Synchronization Constants in Go for NetBSD\nDESCRIPTION: This snippet defines constants for memory synchronization options on NetBSD. These flags are used with the msync system call to control how memory is synchronized with storage.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_26\n\nLANGUAGE: Go\nCODE:\n```\nconst MS_ASYNC = 1\nconst MS_INVALIDATE = 2\nconst MS_SYNC = 4\n```\n\n----------------------------------------\n\nTITLE: Package C Implementation\nDESCRIPTION: Implementation of package c with test file importing package d.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_version.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage c\n```\n\nLANGUAGE: go\nCODE:\n```\npackage c_test\n\nimport _ \"example.net/d\"\n```\n\n----------------------------------------\n\nTITLE: Reporting Multiple Packages in Directory - go/build Package - Go\nDESCRIPTION: Introduces MultiplePackageError for go/build, reporting errors when a directory contains multiple Go packages. Adds type, struct fields, and an Error() method to encapsulate and describe conflicts. Fields include Dir (string), Files ([]string), and Packages ([]string); the Error() method provides a formatted error message for user diagnostics.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_11\n\nLANGUAGE: Go\nCODE:\n```\ntype MultiplePackageError struct {\n    Dir string\n    Files []string\n    Packages []string\n}\nmethod (*MultiplePackageError) Error() string\n```\n\n----------------------------------------\n\nTITLE: Importing Dependency in Module 'b' Version 3\nDESCRIPTION: This Go file for module 'b' version 3 imports dependency 'd' as a blank import.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_pseudo_artifact.txt#2025-04-22_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\npackage b\n\nimport _ \"example.net/d\"\n```\n\n----------------------------------------\n\nTITLE: Deprecated syscall Types for FreeBSD\nDESCRIPTION: List of deprecated syscall types for FreeBSD, including interface and routing message types. These are marked for removal in future Go versions.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_35\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (freebsd-386-cgo), type InterfaceAddrMessage //deprecated\npkg syscall (freebsd-386-cgo), type InterfaceAnnounceMessage //deprecated\npkg syscall (freebsd-386-cgo), type InterfaceMessage //deprecated\npkg syscall (freebsd-386-cgo), type InterfaceMulticastAddrMessage //deprecated\npkg syscall (freebsd-386-cgo), type RouteMessage //deprecated\npkg syscall (freebsd-386-cgo), type RoutingMessage //deprecated\n```\n\n----------------------------------------\n\nTITLE: Implementing Quote Functions in Go\nDESCRIPTION: Main implementation file containing four functions that return different quotes. Includes Hello() for greetings, Glass() for a phrase about glass eating, Go() for a Go programming proverb, and Opt() for an optimization truth.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.3.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Package quote collects pithy sayings.\npackage quote // import \"rsc.io/quote\"\n\n// Hello returns a greeting.\nfunc Hello() string {\n\treturn \"Hello, world.\"\n}\n\n// Glass returns a useful phrase for world travelers.\nfunc Glass() string {\n\t// See http://www.oocities.org/nodotus/hbglass.html.\n\treturn \"I can eat glass and it doesn't hurt me.\"\n}\n\n// Go returns a Go proverb.\nfunc Go() string {\n\treturn \"Don't communicate by sharing memory, share memory by communicating.\"\n}\n\n// Opt returns an optimization truth.\nfunc Opt() string {\n\t// Wisdom from ken.\n\treturn \"If a program is too slow, it must have a loop.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition (Submodule)\nDESCRIPTION: Submodule Go module definition file for the 'a' package\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_bzr.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/a\n\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Specifying Module Version Metadata in JSON (.info)\nDESCRIPTION: This JSON snippet defines the version metadata for the current state of the Go module as \"v1.9.0-new\". This `.info` file format is typically used within the Go module proxy protocol or testing frameworks to convey specific version information for a module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rename_v1.9.0-new.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n \"Version\": \"v1.9.0-new\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Unwrap method for ExecError in text/template package\nDESCRIPTION: Declaration of the Unwrap method for the ExecError type in the text/template package. This method supports Go's error unwrapping mechanism introduced in Go 1.13.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_176\n\nLANGUAGE: go\nCODE:\n```\nfunc (ExecError) Unwrap() error\n```\n\n----------------------------------------\n\nTITLE: Defining RawSockaddrInet4 Struct in Go for Darwin ARM64 CGO\nDESCRIPTION: Defines the RawSockaddrInet4 struct used for raw IPv4 socket addresses. It includes fields for address family and length.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_203\n\nLANGUAGE: Go\nCODE:\n```\ntype RawSockaddrInet4 struct {\n    Family uint8\n    Len uint8\n    Zero [8]int8\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Comparable Hashing Functions in Go\nDESCRIPTION: New functions for hashing comparable types in the hash/maphash package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_14\n\nLANGUAGE: Go\nCODE:\n```\nfunc Comparable[$0 comparable](Seed, $0) uint64\nfunc WriteComparable[$0 comparable](*Hash, $0)\n```\n\n----------------------------------------\n\nTITLE: Go Package Implementation\nDESCRIPTION: Empty package declaration for the or401 module that serves as a placeholder for the test package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/auth/or401.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage or401\n\n```\n\n----------------------------------------\n\nTITLE: Expected go.mod After Upgrade\nDESCRIPTION: The expected go.mod file after running 'go get -u -v' command, showing the upgrade to Go 1.23.0 and updated module versions based on the latest available dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_toolchain.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nmodule example\n\ngo 1.23.0\n\nrequire (\n\texample.net/a v0.2.0\n\texample.net/b v0.1.0\n)\n\nrequire (\n\texample.net/c v0.1.0 // indirect\n\texample.net/d v0.2.0 // indirect\n)\n\nreplace (\n\texample.net/a v0.1.0 => ./a1\n\texample.net/a v0.2.0 => ./a2\n\texample.net/b v0.1.0 => ./b1\n\texample.net/c v0.1.0 => ./c1\n\texample.net/d v0.1.0 => ./d1\n\texample.net/d v0.2.0 => ./d2\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Build Tag Usage with Go List Command\nDESCRIPTION: A series of shell commands to test the behavior of 'go list' with different build tag configurations. It verifies that the correct Go files are included or excluded based on the specified tags.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_tags.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GO111MODULE=on\n\ncd x\n! go list -f {{.GoFiles}}\nstderr 'build constraints exclude all Go files'\n\ngo list -f {{.GoFiles}} -tags tag1\nstdout '\\[x.go\\]'\n\ngo list -f {{.GoFiles}} -tags tag2\nstdout '\\[y\\.go\\]'\n\ngo list -f {{.GoFiles}} -tags 'tag1 tag2'\nstdout '\\[x\\.go y\\.go\\]'\n\ngo list -f {{.GoFiles}} -tags tag1,tag2 # commas allowed as of Go 1.13\nstdout '\\[x\\.go y\\.go\\]'\n```\n\n----------------------------------------\n\nTITLE: Dependency Module Definition\nDESCRIPTION: Module definition for the example.net/a dependency requiring Go 1.22.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_version_tooold.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/a\n\ngo 1.22\n```\n\n----------------------------------------\n\nTITLE: Implementing If-Else Control Flow in Go SSA\nDESCRIPTION: Shows how if-else control flow is represented using basic blocks in Go SSA. The example includes an entry block, two conditional blocks, and demonstrates the use of If, VarDef, Store, and Ret operations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/internal/ssa/README.md#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\n// func(b bool) int {\n//   if b {\n//     return 2\n//   }\n//   return 3\n// }\nb1:\n  v1 = InitMem <mem>\n  v2 = SP <uintptr>\n  v5 = Addr <*int> {~r1} v2\n  v6 = Arg <bool> {b}\n  v8 = Const64 <int> [2]\n  v12 = Const64 <int> [3]\n  If v6 -> b2 b3\nb2: <- b1\n  v10 = VarDef <mem> {~r1} v1\n  v11 = Store <mem> {int} v5 v8 v10\n  Ret v11\nb3: <- b1\n  v14 = VarDef <mem> {~r1} v1\n  v15 = Store <mem> {int} v5 v12 v14\n  Ret v15\n```\n\n----------------------------------------\n\nTITLE: Declaring a Go Module with Self-Retraction - Go\nDESCRIPTION: Defines a Go module named example.com/retract/self/prerelease targeting Go version 1.15. This module is intended to retract its own release versions, leaving a pre-release available for use. No additional dependencies are specified, and the file is required for Go tooling to recognize the module and its retraction policy.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_prerelease_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/retract/self/prerelease\n\ngo 1.15\n```\n\n----------------------------------------\n\nTITLE: Quote Package Implementation in Go\nDESCRIPTION: Implementation of the rsc.io/quote package which provides functions for retrieving various quotes and sayings. The package contains three functions: Hello(), Glass(), and Go() which return different fixed strings.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.2.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Copyright 2018 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// Package quote collects pithy sayings.\npackage quote // import \"rsc.io/quote\"\n\n// Hello returns a greeting.\nfunc Hello() string {\n\treturn \"Hello, world.\"\n}\n\n// Glass returns a useful phrase for world travelers.\nfunc Glass() string {\n\t// See http://www.oocities.org/nodotus/hbglass.html.\n\treturn \"I can eat glass and it doesn't hurt me.\"\n}\n\n// Go returns a Go proverb.\nfunc Go() string {\n\treturn \"Don't communicate by sharing memory, share memory by communicating.\"\n}\n```\n\n----------------------------------------\n\nTITLE: TCP Socket Option Constants for NetBSD ARM64\nDESCRIPTION: TCP socket option constants used for configuring TCP connection parameters on NetBSD. These constants are used with setsockopt/getsockopt system calls to control behavior like keep-alive timers, maximum segment size, and congestion control algorithms.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_70\n\nLANGUAGE: Go\nCODE:\n```\nconst TCP_CONGCTL = 32\nconst TCP_CONGCTL ideal-int\nconst TCP_KEEPCNT = 6\nconst TCP_KEEPCNT ideal-int\nconst TCP_KEEPIDLE = 3\nconst TCP_KEEPIDLE ideal-int\nconst TCP_KEEPINIT = 7\nconst TCP_KEEPINIT ideal-int\nconst TCP_KEEPINTVL = 5\nconst TCP_KEEPINTVL ideal-int\nconst TCP_MAXBURST = 4\nconst TCP_MAXBURST ideal-int\nconst TCP_MAXSEG = 2\nconst TCP_MAXSEG ideal-int\nconst TCP_MAXWIN = 65535\nconst TCP_MAXWIN ideal-int\nconst TCP_MAX_WINSHIFT = 14\nconst TCP_MAX_WINSHIFT ideal-int\nconst TCP_MD5SIG = 16\nconst TCP_MD5SIG ideal-int\nconst TCP_MINMSS = 216\nconst TCP_MINMSS ideal-int\nconst TCP_MSS = 536\nconst TCP_MSS ideal-int\n```\n\n----------------------------------------\n\nTITLE: HTML Documentation Links\nDESCRIPTION: HTML formatted documentation links with proper anchor tags and href attributes\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/linklist.txt#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p>Did you know?\n<ul>\n<li><a href=\"https://pkg.go.dev/encoding/json#Marshal\">encoding/json.Marshal</a> is a doc link. So is <a href=\"https://pkg.go.dev/encoding/json#Unmarshal\">encoding/json.Unmarshal</a>.\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module\nDESCRIPTION: This snippet defines a Go module named 'x'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_bad_domain.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nmodule x\n```\n\n----------------------------------------\n\nTITLE: Go Get with Multi-line Rationale\nDESCRIPTION: This snippet tests the behavior of 'go get' when a module version is retracted with a multi-line rationale. It verifies that only the first line of the message is printed to stderr.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_rationale.txt#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngo get example.com/retract/rationale@v1.0.0-multiline1\nstderr '^go: warning: example.com/retract/rationale@v1.0.0-multiline1: retracted by module author: short description$'\n! stderr 'detail'\n```\n\n----------------------------------------\n\nTITLE: Defining go.mod for Test GOROOT (Go Module)\nDESCRIPTION: Defines the content of the `$WORK/goroot/src/go.mod` file. This minimal module file declares the module path as `std` (simulating the standard library) and specifies Go version 1.14. It's essential for testing module-aware command behavior within the simulated GOROOT.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_gofile_in_goroot.txt#2025-04-22_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n-- $WORK/goroot/src/go.mod --\n```\n\nLANGUAGE: go\nCODE:\n```\nmodule std\n\ngo 1.14\n```\n\n----------------------------------------\n\nTITLE: Debug PE (Portable Executable) Parser Types and Methods\nDESCRIPTION: Provides types and methods for working with Portable Executable (PE) files in the debug/pe package. Includes structures for COFF symbols, relocations, and string tables.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.8.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// debug/pe methods and types\nfunc (*COFFSymbol) FullName(StringTable) (string, error)\nfunc (StringTable) String(uint32) (string, error)\n\ntype File struct {\n    COFFSymbols []COFFSymbol\n    StringTable StringTable\n}\n\ntype Reloc struct {\n    SymbolTableIndex uint32\n    Type uint16\n    VirtualAddress uint32\n}\n\ntype Section struct {\n    Relocs []Reloc\n}\n\ntype StringTable []uint8\n```\n\n----------------------------------------\n\nTITLE: Defining Memory Protection Constants (PROT_*) in Go for darwin-arm64\nDESCRIPTION: Constants for memory protection flags used with mmap(2) and related system calls. These flags control whether memory can be read from, written to, or executed, or combinations of these permissions.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_88\n\nLANGUAGE: Go\nCODE:\n```\nconst PROT_EXEC = 4\nconst PROT_EXEC ideal-int\nconst PROT_NONE = 0\nconst PROT_NONE ideal-int\nconst PROT_READ = 1\nconst PROT_READ ideal-int\nconst PROT_WRITE = 2\nconst PROT_WRITE ideal-int\n```\n\n----------------------------------------\n\nTITLE: Defining Address Family Constants in Go for NetBSD ARM64\nDESCRIPTION: Declaration of address family (AF_*) constants for network programming in NetBSD. These constants define the address families supported for socket communications.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_112\n\nLANGUAGE: Go\nCODE:\n```\nconst AF_APPLETALK = 16\nconst AF_ARP = 28\nconst AF_BLUETOOTH = 31\nconst AF_CCITT = 10\nconst AF_CHAOS = 5\nconst AF_CNT = 21\nconst AF_COIP = 20\nconst AF_DATAKIT = 9\nconst AF_DECnet = 12\nconst AF_DLI = 13\nconst AF_E164 = 26\nconst AF_ECMA = 8\nconst AF_HYLINK = 15\nconst AF_IEEE80211 = 32\nconst AF_IMPLINK = 3\nconst AF_INET6 = 24\nconst AF_IPX = 23\nconst AF_ISDN = 26\nconst AF_ISO = 7\nconst AF_LAT = 14\nconst AF_LINK = 18\nconst AF_LOCAL = 1\nconst AF_MAX = 35\nconst AF_MPLS = 33\nconst AF_NATM = 27\nconst AF_NS = 6\nconst AF_OROUTE = 17\nconst AF_OSI = 7\nconst AF_PUP = 4\nconst AF_ROUTE = 34\nconst AF_SNA = 11\n```\n\n----------------------------------------\n\nTITLE: GCD and LCM Calculation with Zero Input\nDESCRIPTION: This snippet demonstrates the calculation of GCD and LCM when one of the inputs (A) is zero. The GCD is equal to the non-zero input, while the LCM is zero.\nSOURCE: https://github.com/golang/go/blob/master/src/crypto/internal/fips140/rsa/testdata/gcd_lcm_tests.txt#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nGCD = 3d319c42d872f21131ce5ff3ab8bec94339308e620316dda218e85fedcd511cd62f0b2f3448d5e58fd3520ae8118abd54ead9ad9e8ec3890365c6b2cca2172d4b8839b2d2c5ab02f65180826cb0cd5c9798f5d6261efe6e6ec31dea047da7c486b0590359e6f333557f67ceebf9ea9cd5dd986a999a8c88bdbd0ca21816b2423\nA = 0\nB = 3d319c42d872f21131ce5ff3ab8bec94339308e620316dda218e85fedcd511cd62f0b2f3448d5e58fd3520ae8118abd54ead9ad9e8ec3890365c6b2cca2172d4b8839b2d2c5ab02f65180826cb0cd5c9798f5d6261efe6e6ec31dea047da7c486b0590359e6f333557f67ceebf9ea9cd5dd986a999a8c88bdbd0ca21816b2423\nLCM = 0\n```\n\n----------------------------------------\n\nTITLE: Iterator-Based String Splitting and Line Processing - strings Go\nDESCRIPTION: These code snippets introduce iterator-sequence variants of Fields, Lines, Split, and SplitAfter in the strings package, returning iter.Seq[string] for efficient, lazy string tokenization. All methods accept a string input, with some requiring additional separators or callback functions as arguments, enabling processing of large strings without allocating intermediate slices. Dependencies are iter.Seq and appropriate user-defined lambda functions for FieldsFuncSeq. Inputs and outputs are designed for performance-critical streaming applications.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_20\n\nLANGUAGE: Go\nCODE:\n```\npkg strings, func FieldsFuncSeq(string, func(int32) bool) iter.Seq[string] #61901\npkg strings, func FieldsSeq(string) iter.Seq[string] #61901\npkg strings, func Lines(string) iter.Seq[string] #61901\npkg strings, func SplitAfterSeq(string, string) iter.Seq[string] #61901\npkg strings, func SplitSeq(string, string) iter.Seq[string] #61901\n```\n\n----------------------------------------\n\nTITLE: Defining NetBSD ARM64 Resource Usage Constants in Go Syscall Package\nDESCRIPTION: Resource usage constants for the getrusage system call in NetBSD. These define whether to get resource usage for the current process (SELF) or its terminated and waited-for child processes (CHILDREN).\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_54\n\nLANGUAGE: Go\nCODE:\n```\nconst RUSAGE_CHILDREN = -1\nconst RUSAGE_CHILDREN ideal-int\nconst RUSAGE_SELF = 0\nconst RUSAGE_SELF ideal-int\n```\n\n----------------------------------------\n\nTITLE: Uppercase Module Implementation\nDESCRIPTION: A simple Go file that defines the uppercase Foo package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_collision.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage Foo\n\n```\n\n----------------------------------------\n\nTITLE: Socket Operation Functions for Darwin ARM64\nDESCRIPTION: Socket-related system call functions for network operations including socket creation, configuration, and communication.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_121\n\nLANGUAGE: Go\nCODE:\n```\nfunc Socket(int, int, int) (int, error)\nfunc Socketpair(int, int, int) ([2]int, error)\nfunc SetsockoptByte(int, int, int, uint8) error\nfunc SetsockoptInt(int, int, int, int) error\nfunc Getsockname(int) (Sockaddr, error)\nfunc Getpeername(int) (Sockaddr, error)\n```\n\n----------------------------------------\n\nTITLE: Windows-specific syscall functionality\nDESCRIPTION: Windows-specific system call functionality for both 32-bit and 64-bit architectures. Includes DLLError.Unwrap method for error handling and NoInheritHandles field in SysProcAttr struct to control handle inheritance.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nmethod (*DLLError) Unwrap() error\ntype SysProcAttr struct, NoInheritHandles bool\n```\n\n----------------------------------------\n\nTITLE: File System Limit Constants in Go for Darwin ARM64\nDESCRIPTION: The NAME_MAX constant defines the maximum length for a file name component (excluding path).\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_80\n\nLANGUAGE: Go\nCODE:\n```\nconst NAME_MAX = 255\n```\n\n----------------------------------------\n\nTITLE: Go Module Update Original Configuration\nDESCRIPTION: Initial Go module configuration with specific version requirements for quote and sampler packages\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule m\n\ngo 1.16\n\nrequire (\n\trsc.io/quote v1.5.2\n\trsc.io/sampler v1.2.1 // older version than in build list\n)\n```\n\n----------------------------------------\n\nTITLE: Submodule with Custom Directives\nDESCRIPTION: Defines a go.mod file for a submodule with custom, non-standard directives. This configuration would typically be used for testing misconfigurations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badmod.txt#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n-- sub/go.mod --\nmodule sub\nhello world\n```\n\n----------------------------------------\n\nTITLE: Empty Package Declaration in Invalid Filename\nDESCRIPTION: An empty package declaration for package 'x' in a file with an invalid name 'x?y.go', likely used to test Go's handling of improper filenames.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badfile3_v1.0.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage x\n```\n\n----------------------------------------\n\nTITLE: Large Numerical Constant\nDESCRIPTION: A multi-thousand digit numerical constant that appears to be a precise mathematical value. Could be used for mathematical computations, cryptographic operations, or as a reference constant.\nSOURCE: https://github.com/golang/go/blob/master/src/compress/testdata/pi.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nn```\n\n----------------------------------------\n\nTITLE: Mocking Fossil Command for Error Testing\nDESCRIPTION: Creates a mock Fossil command that always exits with an error. This is used to test Go's behavior when the Fossil command fails.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_fossil.txt#2025-04-22_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n#!/bin/sh\nexit 1\n```\n\n----------------------------------------\n\nTITLE: Defining Ethernet Constants for NetBSD ARM64 CGO in Go\nDESCRIPTION: This snippet defines various Ethernet-related constants, including address lengths, capabilities, frame sizes, and Ethertype values. These constants are used in network programming and device driver implementations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_20\n\nLANGUAGE: Go\nCODE:\n```\nconst ETHER_ADDR_LEN = 6\nconst ETHER_ADDR_LEN ideal-int\nconst ETHERCAP_JUMBO_MTU = 4\nconst ETHERCAP_JUMBO_MTU ideal-int\nconst ETHERCAP_VLAN_HWTAGGING = 2\nconst ETHERCAP_VLAN_HWTAGGING ideal-int\nconst ETHERCAP_VLAN_MTU = 1\nconst ETHERCAP_VLAN_MTU ideal-int\n// ... (more Ethernet constants)\nconst ETHERTYPE_AARP = 33011\nconst ETHERTYPE_AARP ideal-int\nconst ETHERTYPE_ACCTON = 33680\nconst ETHERTYPE_ACCTON ideal-int\n// ... (more Ethertype constants)\n```\n\n----------------------------------------\n\nTITLE: Base Package Declaration\nDESCRIPTION: Simple package declaration for package p used in the duplicate load test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_vendor_dup_err.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage p\n```\n\n----------------------------------------\n\nTITLE: Module Version Info Configuration\nDESCRIPTION: Version information configuration file specifying v1.9.0\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_deprecated_a_v1.9.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.9.0\"}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Fetch Failure without Cache and go.sum\nDESCRIPTION: Attempts to fetch a module without access to both cache and go.sum. Expects the command to fail with a 504 error.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_cache.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nrm go.sum\nenv GOPROXY=$proxy/sumdb-504\n! go get rsc.io/quote@v1.5.2\nstderr 504\n```\n\n----------------------------------------\n\nTITLE: Deprecated Linux ARM CGO Functions\nDESCRIPTION: List of deprecated syscall functions for Linux ARM with CGO support. These functions include LSF (Linux Socket Filter) related operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_37\n\nLANGUAGE: go\nCODE:\n```\nfunc LsfStmt\nfunc SetLsfPromisc\nfunc StringSlicePtr\n```\n\n----------------------------------------\n\nTITLE: HTTP Package Extensions for Server Push and Tracing\nDESCRIPTION: Types, methods, and constants for net/http package with support for HTTP/2 server push, connection tracing, and enhanced server lifecycle management including graceful shutdown.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.8.txt#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n// net/http constants, methods, and types\nconst TrailerPrefix = \"Trailer:\"\n\nfunc (*Server) Close() error\nfunc (*Server) Shutdown(context.Context) error\n\ntype Pusher interface {\n    Push(string, *PushOptions) error\n}\n\ntype PushOptions struct {\n    Header Header\n    Method string\n}\n\ntype Request struct {\n    GetBody func() (io.ReadCloser, error)\n}\n\ntype Server struct {\n    IdleTimeout time.Duration\n    ReadHeaderTimeout time.Duration\n}\n\ntype Transport struct {\n    ProxyConnectHeader Header\n}\n\nvar ErrAbortHandler error\nvar ErrServerClosed error\nvar NoBody noBody\n\n// net/http/httptrace types\ntype ClientTrace struct {\n    TLSHandshakeDone func(tls.ConnectionState, error)\n    TLSHandshakeStart func()\n}\n\n// net/http/httputil types\ntype ReverseProxy struct {\n    ModifyResponse func(*http.Response) error\n}\n```\n\n----------------------------------------\n\nTITLE: LazyUpgrade v0.1.1 Module Definition\nDESCRIPTION: go.mod file for lazyupgrade module version 0.1.1\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_lazy_upgrade_lazy.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/lazyupgrade\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: Testing Module Import in Go\nDESCRIPTION: A test file that imports a package from a custom module path. This file demonstrates how to import packages from replaced module paths defined in the go.mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vendormod.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage m\n\nimport _ \"mysite/myname/mypkg/mydir\"\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Retraction\nDESCRIPTION: Module declaration file (.mod) specifying the module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_v1.0.0-bad.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/retract\n\ngo 1.15\n```\n\n----------------------------------------\n\nTITLE: V2 Branch Creation and Tagging\nDESCRIPTION: Creates and configures v2 branch with multiple tags and commits\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/gitrepo1.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit branch v2\ngit checkout v2\necho 'v2'\ncp stdout v2\ngit add v2\ngit commit -a -m 'v2'\ngit tag v2.3\ngit tag v2.0.1\ngit branch v2.3.4\n```\n\n----------------------------------------\n\nTITLE: Architecture-Specific Assembly File\nDESCRIPTION: AMD64-specific assembly file with unparsable content to test architecture-based build constraints\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_issue_56509.txt#2025-04-22_snippet_3\n\nLANGUAGE: assembly\nCODE:\n```\n;/\n```\n\n----------------------------------------\n\nTITLE: Setting Go Environment Variables for Testing\nDESCRIPTION: Initial setup of environment variables for testing Go toolchain behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_exec_toolchain.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv TESTGO_VERSION=go1.21\nenv TESTGO_VERSION_SWITCH=switch\n```\n\n----------------------------------------\n\nTITLE: Export Test Variable Definition\nDESCRIPTION: Package files defining exported test variables for test consumption.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_list_issue11977.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage tx3\n\nvar Exported = true\n```\n\nLANGUAGE: go\nCODE:\n```\npackage tx2\n\nvar Exported = true\n```\n\n----------------------------------------\n\nTITLE: Invalid String Type Redefinition in Go\nDESCRIPTION: Go code attempting to redefine the built-in string type as []int, which demonstrates type aliasing syntax but would cause compilation errors\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_string_alias.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\ntype string = []int\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Non-Unix Platform Main Implementation\nDESCRIPTION: Main program implementation for non-Unix platforms using build constraints to exclude Unix-like operating systems.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/import_unix_tag.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n//go:build !(aix || darwin || dragonfly || freebsd || hurd || linux || netbsd || openbsd || solaris)\n\npackage main\n\nimport _ \"example.com/version\"\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Terminal Control Constants in Go for NetBSD ARM64\nDESCRIPTION: Constants used for terminal control operations in NetBSD ARM64. These flags control input processing behavior in terminal devices.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_131\n\nLANGUAGE: Go\nCODE:\n```\nconst IGNBRK = 1\nconst IGNCR = 128\nconst IGNPAR = 4\nconst IMAXBEL = 8192\nconst INLCR = 64\nconst INPCK = 16\n```\n\n----------------------------------------\n\nTITLE: Testing Go Get Command with Standard Library Path\nDESCRIPTION: This snippet tests the 'go get' command with a path in the standard library. It verifies that the command reports a 'malformed module path' error for the 'builtin' package, which is in GOROOT/src but contains no packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_nopkgs.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n! go get builtin/...  # in GOROOT/src, but contains no packages\nstderr '^go: builtin/...: malformed module path \"builtin\": missing dot in first path element$'\n```\n\n----------------------------------------\n\nTITLE: Direct Package Import\nDESCRIPTION: Go source file implementing the direct package with an import of an indirect dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_direct_v1.0.1.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage direct\n\nimport _ \"patch.example.com/indirect\"\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines a Go module at vcs-test.golang.org/git/no-tags.git with Go 1.13 compatibility.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/no-tags.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule vcs-test.golang.org/git/no-tags.git\n\ngo 1.13\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Test Dependency Package 'x/inall/fromtestinall' (Go)\nDESCRIPTION: Defines the empty package `x/inall/fromtestinall` within the `x` module. This package is imported only by the tests of package `x/inall` (`x/inall/inall_test.go`), representing a test dependency of a package within the `all` scope.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_notall.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n-- x/inall/fromtestinall/fromtestinall.go --\npackage fromtestinall\n```\n\n----------------------------------------\n\nTITLE: Defining IPv6 Constants for NetBSD ARM64 in Go\nDESCRIPTION: This snippet defines various IPv6-related constants for the NetBSD operating system on ARM64 architecture. These constants are used for configuring IPv6 socket options and handling IPv6 packets.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_136\n\nLANGUAGE: Go\nCODE:\n```\nconst IPV6_DEFAULT_MULTICAST_LOOP ideal-int\nconst IPV6_DEFHLIM = 64\nconst IPV6_DEFHLIM ideal-int\nconst IPV6_DONTFRAG = 62\nconst IPV6_DONTFRAG ideal-int\nconst IPV6_DSTOPTS = 50\nconst IPV6_DSTOPTS ideal-int\nconst IPV6_FAITH = 29\nconst IPV6_FAITH ideal-int\nconst IPV6_FLOWINFO_MASK = 4294967055\nconst IPV6_FLOWINFO_MASK ideal-int\nconst IPV6_FLOWLABEL_MASK = 4294905600\nconst IPV6_FLOWLABEL_MASK ideal-int\n```\n\n----------------------------------------\n\nTITLE: Adding Text Appending to big.Float in Go\nDESCRIPTION: New method for appending text representation of big.Float in the math/big package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_16\n\nLANGUAGE: Go\nCODE:\n```\nfunc (*Float) AppendText([]uint8) ([]uint8, error)\n```\n\n----------------------------------------\n\nTITLE: Testing Example Output with Line Feed Characters\nDESCRIPTION: Go test example that prints output using explicit line feed characters to verify correct handling during testing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_crlf_example.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc Example_lf() {\n\tfmt.Print(\"foo\", \"\\n\", \"bar\")\n\t// Output:\n\t// foo\n\t// bar\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecations in compress/flate package\nDESCRIPTION: Lists deprecated types in the compress/flate package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_18\n\nLANGUAGE: Go\nCODE:\n```\npkg compress/flate, type ReadError //deprecated\npkg compress/flate, type WriteError //deprecated\n```\n\n----------------------------------------\n\nTITLE: Testing Escaped Dollar Sign in Go Regexps\nDESCRIPTION: Tests patterns with escaped dollar signs (\\$). These tests verify how the regex engine handles literal dollar signs rather than interpreting them as end anchors.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_24\n\nLANGUAGE: regexp\nCODE:\n```\n^(foo\\$)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:^(foo\\$)$)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:^(foo\\$)$)\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:^(foo\\$)$)$\n```\n\n----------------------------------------\n\nTITLE: Placeholder 'gofmt' Command Script (Shell)\nDESCRIPTION: A basic shell script located at `bin/gofmt` within the module structure (indicated by context marker `bin/gofmt`). It serves as a placeholder for the 'gofmt' tool in this test toolchain, simply outputting 'i am unused' to indicate its status.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.android-386.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: Testing Nil Panic Handling in Go Fuzz Tests\nDESCRIPTION: This fuzz test function demonstrates how Go's fuzzing handles a nil panic. It panics with a nil value when the input is not 'aa'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_crash.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc FuzzWithNilPanic(f *testing.F) {\n\tf.Add([]byte(\"aa\"))\n\tf.Fuzz(func(t *testing.T, b []byte) {\n\t\tif string(b) != \"aa\" {\n\t\t\tpanic(nil)\n\t\t}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Image Package CMYK Implementation\nDESCRIPTION: Defines CMYK image type and related color conversion functions for image processing\nSOURCE: https://github.com/golang/go/blob/master/api/go1.5.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype CMYK struct {\n    Pix []uint8\n    Rect Rectangle\n    Stride int\n}\n\nfunc CMYKToRGB(c, m, y, k uint8) (uint8, uint8, uint8)\nfunc RGBToCMYK(r, g, b uint8) (uint8, uint8, uint8, uint8)\n```\n\n----------------------------------------\n\nTITLE: Defining Structure Size Constants in Go for Darwin ARM64\nDESCRIPTION: Constants defining sizes of various system structures on Darwin ARM64 platform. These size constants are used for memory allocation and syscall parameter passing for network, socket, and interface operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_193\n\nLANGUAGE: Go\nCODE:\n```\nconst SizeofBpfHdr = 20\nconst SizeofBpfHdr ideal-int\nconst SizeofBpfInsn = 8\nconst SizeofBpfInsn ideal-int\nconst SizeofBpfProgram = 16\nconst SizeofBpfProgram ideal-int\nconst SizeofBpfStat = 8\nconst SizeofBpfStat ideal-int\nconst SizeofBpfVersion = 4\nconst SizeofBpfVersion ideal-int\nconst SizeofCmsghdr = 12\nconst SizeofCmsghdr ideal-int\nconst SizeofICMPv6Filter = 32\nconst SizeofICMPv6Filter ideal-int\nconst SizeofIPMreq = 8\nconst SizeofIPMreq ideal-int\nconst SizeofIPv6MTUInfo = 32\nconst SizeofIPv6MTUInfo ideal-int\nconst SizeofIPv6Mreq = 20\nconst SizeofIPv6Mreq ideal-int\nconst SizeofIfData = 96\nconst SizeofIfData ideal-int\nconst SizeofIfMsghdr = 112\nconst SizeofIfMsghdr ideal-int\nconst SizeofIfaMsghdr = 20\nconst SizeofIfaMsghdr ideal-int\nconst SizeofIfmaMsghdr = 16\nconst SizeofIfmaMsghdr ideal-int\nconst SizeofIfmaMsghdr2 = 20\nconst SizeofIfmaMsghdr2 ideal-int\nconst SizeofInet4Pktinfo = 12\nconst SizeofInet4Pktinfo ideal-int\nconst SizeofInet6Pktinfo = 20\nconst SizeofInet6Pktinfo ideal-int\nconst SizeofLinger = 8\nconst SizeofLinger ideal-int\nconst SizeofMsghdr = 48\nconst SizeofMsghdr ideal-int\nconst SizeofRtMetrics = 56\nconst SizeofRtMetrics ideal-int\nconst SizeofRtMsghdr = 92\nconst SizeofRtMsghdr ideal-int\nconst SizeofSockaddrAny = 108\nconst SizeofSockaddrAny ideal-int\nconst SizeofSockaddrDatalink = 20\nconst SizeofSockaddrDatalink ideal-int\nconst SizeofSockaddrInet4 = 16\nconst SizeofSockaddrInet4 ideal-int\nconst SizeofSockaddrInet6 = 28\nconst SizeofSockaddrInet6 ideal-int\nconst SizeofSockaddrUnix = 106\nconst SizeofSockaddrUnix ideal-int\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: The go.mod file defining the module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/commit-after-tag.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nmodule vcs-test.golang.org/git/commit-after-tag.git\n\ngo 1.13\n```\n\n----------------------------------------\n\nTITLE: Build Verification Commands\nDESCRIPTION: Shell commands to verify build reproducibility by comparing two separate builds of the same code\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_issue59571.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo build -a -o 1.a\ngo build -a -o 2.a\ncmp -q 1.a 2.a\n```\n\n----------------------------------------\n\nTITLE: OpenBSD 386 Syscall Constants and Structures\nDESCRIPTION: System call numbers, network interface constants, and data structures for OpenBSD on 386 architecture, including time-related functions, file operations, and network interface management.\nSOURCE: https://github.com/golang/go/blob/master/api/except.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nconst BIOCGRTIMEOUT = 1074283118\nconst BIOCSRTIMEOUT = 2148024941\nconst ImplementsGetwd = false\nconst RTF_FMASK = 63496\nconst RTM_VERSION = 4\nconst SIOCBRDGDADDR = 2150132039\nconst SIOCBRDGGPARAM = 3224922456\nconst SIOCBRDGSADDR = 3223873860\nconst SYS_CLOCK_GETRES = 234\nconst SYS_CLOCK_GETTIME = 232\nconst SYS_CLOCK_SETTIME = 233\nconst SYS_FHSTATFS = 309\nconst SYS_FSTAT = 292\nconst SYS_FSTATAT = 316\nconst SYS_FSTATFS = 308\nconst SYS_FUTIMENS = 327\nconst SYS_FUTIMES = 206\nconst SYS_GETDIRENTRIES = 312\nconst SYS_GETFSSTAT = 306\nconst SYS_GETITIMER = 86\nconst SYS_GETRUSAGE = 117\nconst SYS_GETTIMEOFDAY = 116\nconst SYS_KEVENT = 270\nconst SYS_KILL = 37\nconst SYS_LSTAT = 293\nconst SYS_NANOSLEEP = 240\nconst SYS_SELECT = 93\nconst SYS_SETITIMER = 83\nconst SYS_SETTIMEOFDAY = 122\nconst SYS_STAT = 291\nconst SYS_STATFS = 307\nconst SYS_UTIMENSAT = 326\nconst SYS_UTIMES = 138\nconst SYS_WAIT4 = 7\nconst SYS___THRSLEEP = 300\nconst SizeofIfData = 208\nconst SizeofIfMsghdr = 232\nconst SizeofRtMetrics = 48\nconst SizeofRtMsghdr = 88\nconst TIOCGTSTAMP = 1074295899\n\ntype Dirent struct {\n    Fileno uint32\n    // other fields not shown\n}\n\ntype FdSet struct {\n    Bits [32]int32\n}\n\ntype Kevent_t struct {\n    Data int32\n    // other fields not shown\n}\n\ntype Mclpool struct {\n    Grown uint32\n    // other fields not shown\n}\n\ntype RtMetrics struct {\n    Expire uint32\n    // other fields not shown\n}\n\ntype Stat_t struct {\n    Ino uint32\n    Lspare0 int32\n    Lspare1 int32\n    Qspare [2]int64\n    // other fields not shown\n}\n\ntype Statfs_t struct {\n    F_ctime uint32\n    F_spare [3]uint32\n    // other fields not shown\n}\n\ntype Timespec struct {\n    Sec int32\n    // other fields not shown\n}\n\ntype Timeval struct {\n    Sec int32\n    // other fields not shown\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Module Version Information\nDESCRIPTION: Provides version information for the module in JSON format.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo118_v0.0.1.txt#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\"Version\":\"v0.0.1\"}\n```\n\n----------------------------------------\n\nTITLE: Test package that imports C\nDESCRIPTION: A Go package that imports the pseudo-package C, used to test CGO behavior with the list command.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_patterns.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage useC\nimport _ \"C\" // \"C\" is a pseudo-package, not an actual one\n```\n\n----------------------------------------\n\nTITLE: Verifying Initial Absence of Toolchain Directive\nDESCRIPTION: Checks that the go.mod file initially does not contain a toolchain directive.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit_toolchain.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n! grep toolchain go.mod\n```\n\n----------------------------------------\n\nTITLE: Go.mod Configuration for Module A\nDESCRIPTION: The go.mod file for module A, which requires modules B and C as dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_all.txt#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/a\n\ngo 1.15\n\nrequire (\n\texample.com/b v0.1.0\n\texample.com/c v0.1.0\n)\n```\n\n----------------------------------------\n\nTITLE: qux directory\nDESCRIPTION: An empty directory named qux, used for testing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_only_dirs.txt#_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\n-- qux --\n```\n\n----------------------------------------\n\nTITLE: Simple Function Definition in Package A\nDESCRIPTION: Defines package 'a' with a simple function F() that will be imported by another package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_dot_import.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\nfunc F() {}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module declaration for coverbad package specifying Go 1.16 version requirement\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_build_failure.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule coverbad\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Setting up environment and building Go for MIPS without GOMIPS\nDESCRIPTION: This snippet sets up the environment for MIPS builds and tests Go compilation without setting GOMIPS. It verifies the use of floating point registers.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_gomips.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GO111MODULE=off\n[short] skip # rebuilds std for mips\n\n# Set up fresh GOCACHE.\nenv GOCACHE=$WORK/gocache\nmkdir $GOCACHE\n\n# Building for mipsle without setting GOMIPS will use floating point registers.\nenv GOARCH=mipsle\nenv GOOS=linux\ngo build -gcflags=-S f.go\nstderr ADDD.F[0-9]+,.F[0-9]+,.F[0-9]+\n```\n\n----------------------------------------\n\nTITLE: Defining a Parallel Benchmark State Struct - Go\nDESCRIPTION: Reference to the PB struct in the testing package, which encapsulates the state required for parallel benchmark iterations in Go. This struct is passed to benchmark functions running in parallel, providing the necessary context and helper methods for controlling iteration. There are no required external dependencies, but correct use assumes integration with Go's benchmark framework.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_66\n\nLANGUAGE: Go\nCODE:\n```\npkg testing, type PB struct\n```\n\n----------------------------------------\n\nTITLE: go.work File with First Listed Error\nDESCRIPTION: Contents of go.work.firsterrlisted.txt file, containing multiple unknown godebug flags 'baz'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_errors_pos.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ngodebug baz=1\ngodebug baz=1\n\n\n```\n\n----------------------------------------\n\nTITLE: Go Workspace Configuration\nDESCRIPTION: Workspace configuration file (go.work) specifying Go version 1.22 and including the mod directory in the workspace.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/generate_workspace.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngo 1.22\n\nuse ./mod\n```\n\n----------------------------------------\n\nTITLE: Adding Submodule Package\nDESCRIPTION: Creates a submodule with a Go package and tags it as v2.0.2. This demonstrates the structure of nested packages in Go modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nat 2018-02-19T18:15:11-05:00\nmkdir submod/pkg\necho 'package p // submod/pkg/p.go'\ncp stdout submod/pkg/p.go\ngit add submod/pkg/p.go\ngit commit -m 'submod/pkg/p.go'\ngit tag v2.0.2\n```\n\n----------------------------------------\n\nTITLE: Updating trace_viewer_full.html for Go Trace Viewer\nDESCRIPTION: Commands to clone the Catapult repository, generate the trace_viewer_full.html file using the vulcanize_trace_viewer command, and copy it to the Go source directory.\nSOURCE: https://github.com/golang/go/blob/master/src/internal/trace/traceviewer/static/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://chromium.googlesource.com/catapult\n$ cd catapult\n$ ./tracing/bin/vulcanize_trace_viewer --config=full\n$ cp tracing/bin/trace_viewer_full.html $GOROOT/src/cmd/trace/static/trace_viewer_full.html\n```\n\n----------------------------------------\n\nTITLE: Defining Test Dependency for Package 'm' (Go)\nDESCRIPTION: Defines a test file associated with package `m` (using the `m_test` naming convention). It imports `x/inall/fromtest` using a blank identifier to establish a test-only dependency for the main module `m`, relevant for testing the `-deps` flag with the `all` pattern.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_notall.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n-- m_test.go --\npackage m_test\n\nimport _ \"x/inall/fromtest\"\n```\n\n----------------------------------------\n\nTITLE: Defining Stat_t Structure in Go for NetBSD ARM64\nDESCRIPTION: Definition of the Stat_t struct which holds file status information. It contains fields for file size, permissions, ownership, timestamps, and other file attributes returned by stat() system calls.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_106\n\nLANGUAGE: Go\nCODE:\n```\ntype Stat_t struct {\n    Dev uint64\n    Mode uint32\n    Ino uint64\n    Nlink uint32\n    Uid uint32\n    Gid uint32\n    Rdev uint64\n    Pad_cgo_0 [4]uint8\n    Atimespec Timespec\n    Mtimespec Timespec\n    Ctimespec Timespec\n    Birthtimespec Timespec\n    Size int64\n    Blocks int64\n    Blksize uint32\n    Flags uint32\n    Gen uint32\n    Spare [2]uint32\n    Pad_cgo_1 [4]uint8\n    Pad_cgo_2 [4]uint8\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Go Module Version Info - Golang - json\nDESCRIPTION: This snippet is a JSON object holding version information for a Go module, typically found in module proxy caches or tooling support files. It contains the module version and can be used by tools to retrieve version-specific metadata or validate dependency graphs. Expected input is a JSON object with a 'Version' field and its purpose is to relay exact module versioning information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_ambiguous_v0.2.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"v0.2.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Euler's Number with High Precision\nDESCRIPTION: A high-precision representation of Euler's number (e) showing approximately 1000 decimal places. This mathematical constant is the base of natural logarithms and is defined as the limit of (1 + 1/n)^n as n approaches infinity.\nSOURCE: https://github.com/golang/go/blob/master/src/compress/testdata/e.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n2.71828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642742746639193200305992181741359662904357290033429526059563073813232862794349076323382988075319525101901157383418793070215408914993488416750924476146066808226480016847741185374234544243710753907774499206955170276183860626133138458300075204493382656029760673711320070932870912744374704723069697720931014169283681902551510865746377211125238978442505695369677078544996996794686445490598793163688923009879312773617821542499922957635148220826989519366803318252886939849646510582093923982948879332036250944311730123819706841614039701983767932068328237646480429531180232878250981945581530175671736133206981125099618188159304169035159888851934580727386673858942287922849989208680582574927961048419844436346324496848756023362482704197862320900216099023530436994184914631409343173814364054625315209618369088870701676839642437814059271456354906130310720851038375051011574770417189861068739696552126715468895703503540212340784981933432106817012100562788023519303322474501585390473041995777709350366041699732972508868769664035557071622684471625607988265178713419512466520103059212366771943252786753985589448969709640975459185695638023637016211204774272283648961342251644507818244235294863637214174023889344124796357437026375529444833799801612549227850925778256209262264832627793338656648162772516401910590049164499828931505660472580277863186415519565324425869829469593080191529872117255634754639644791014590409058629849679128740687050489585867174798546677575732056812884592054133405392200011378630094556068816674001698420558040336379537645203040243225661352783695117788386387443966253224985065499588623428189970773327617178392803494650143455889707194258639877275471096295374152111513683506275260232648472870392076431005958411661205452970302364725492966693811513732275364509888903136020572481765851180630364428123149655070475102544650117272115551948668508003685322818315219600373562527944951582841882947876108526398139559900673764829224437528718462457803619298197139914756448826260390338144182326251509748279877799643730899703888677822713836057729788241256119071766394650706330452795466185509666618566470971134447401607046262156807174818778443714369882185596709591025968620023537185887485696522000503117343920732113908032936344797273559552773490717837934216370120500545132638354400018632399149070547977805669785335804896690629511943247309958765523681285904138324116072260299833053537087613893963917795745401613722361878936526053815584158718692553860616477983402543512843961294603529133259427949043372990857315802909586313826832914771163963370924003168945863606064584592512699465572483918656420975268508230754425459937691704197778008536273094171016343490769642372229435236612557250881477922315197477806056967253801718077636034624592787784658506560507808442115296975218908740196609066518035165017925046195013665854366327125496399085491442000145747608193022120660243300964127048943903971771951806990869986066365832322787093765022601492910115171776359446020232493002804018677239102880978666056511832600436885088171572386698422422010249505518816948032210025154264946398128736776589276881635983124778865201411741109136011649950766290779436460058519419985601626479076153210387275571269925182756879893027617611461625493564959037980458381823233686120162437365698467037858533052758333379399075216606923805336988795651372855938834998947074161815501253970646481719467083481972144888987906765037959036696724949925452790337296361626589760394985767413973594410237443297093554779826296145914429364514286171585873397467918975712119561873857836447584484235555810500256114923915188930994634284139360803830916628188115037152849670597416256282360921680751501777253874025642534708790891372917228286115159156837252416307722544063378759310598267609442032619242853170187817729602354130606721360460003896610936470951414171857770141806064436368154644400533160877831431744408119494229755993140118886833148328027065538330046932901157441475631399972217038046170928945790962716622607407187499753592127560844147378233032703301682371936480021732857349359475643341299430248502357322145978432826414216848787216733670106150942434569844018733128101079451272237378861260581656680537143961278887325273738903928905068653241380627960259303877276977837928684093253658807339884572187460210053114833513238500478271693762180049047955979592905916554705057775143081751126989851884087185640260353055837378324229241856256442550226721559802740126179719280471396006891638286652770097527670697770364392602243728418408832518487704726384403795301669054659374616193238403638931313643271376888410268112198912752230562567562547017250863497653672886059667527408686274079128565769963137897530346606166698042182677245605306607738996242183408598820718646826232150802882863597468396543588566855037731312965879758105012149162076567699506597153447634703208532156036748286083786568030730626576334697742956346437167093971930608769634953288468336130388294310408002968738691170666661468000151211434422560238744743252507693870777751932999421372772112588436087158348356269616619805725266122067975406210620806498829184543953015299820925030054982570433905535701686531205264956148572492573862069174036952135337325316663454665885972866594511364413703313936721185695539521084584072443238355860631068069649248512326326995146035960372972531983684233639046321367101161928217111502828016044880588023820319814930963695967358327420249882456849412738605664913525267060462344505492275811517093149218795927180019409688669868370373022004753143381810927080300172059355305207007060722339994639905713115870996357773590271962850611465148375262095653467132900259943976631145459026858989791158370934193704411551219201171648805669459381311838437656206278463104903462939500294583411648241149697583260118007316994373935069662957124102732391387417549230718624545432220395527352952402459038057445028922468862853365422138157221311632881120521464898051800920247193917105553901139433166815158288436876069611025051710073927623855533862725535388309606716446623709226468096712540618695021431762116681400975952814939072226011126811531083873176173232352636058381731510345957365382235349929358228368510078108846343499835184044517042701893819942434100905753762577675711180900881641833192019626234162881665213747173254777277834887743665188287521566857195063719365653903894493664217640031215278702223664636357555035655769488865495002708539236171055021311474137441061344455441921013361729962856948991933691847294785807291560885103967819594298331864807560836795514966364489655929481878517840387733262470519450504198477420141839477312028158868457072905440575106012852580565947030468363445926525521370080687520095934536073162261187281739280746230946853678231060979215993600199462379934342106878134973469592464697525062469586169091785739765951993929939955675427146549104568607020990126068187049841780791739240719459963230602547079017745275131868099822847308607665368668555164677029113368275631072233467261137054907953658345386371962358563126183871567741187385277229225947433737856955384562468010139057278710165129666367644518724656537304024436841408144887329578473484900030194778880204603246608428753518483649591950828883232065221281041904480472479492913422849519700226013104300624107179715027934332634079959605314460532304885289729176598760166678119379323724538572096075822771784833616135826128962261181294559274627671377944875867536575448614076119311259585126557597345730153336426307679854433857617153334623252705720053039882894990342595662329757824887350292591668258944568946559926584547626945287805165017206747854178879822768065366506419109734345288783386217261562695826544782056729877564263253215942944180399432170000905426507630955884658951717091476074371368933194690909819045012903070995662266203031826493657336984195557769637876249188528656866076005660256054457113372868402055744160308370523122425872234388541231794813885500756893811249353863186352870837998456926199817945233640874295911807474534195514203517261842008455091708456823682008977394558426792142734775608796442792027083121501564063413416171664480698154837644915739001212170415478725919989438253649505147713793991472052195290793961376211072384942906163576045962312535060685376514231153496656837151166042207963944666211632551577290709784731562782775987881364919512574833287937715714590910648416426783099497236744201758622694021594079244805412553604313179926967391575424192966073123937635421392306178767539587114361040894099660894714183406983629936753626215452472984642137528910798843813060955526227208375186298370667872244301957937937860721072542772890717328548743743557819665117166183308811291202452040486822000723440350254482028342541878846536025915064452716577000445210977355858976226554849416217149895323834216001140629507184904277892585527430352213968356790180764060421383073087744601708426882722611771808426643336517800021719034492342642662922614560043373838683355553434530042648184739892156270860956506293404052649432442614456659212912256488935696550091543064261342526684725949143142393988454324863274618428466559853323122104662598901417121034460842716166190012571958707932175696985440133976220967494541854071184464339469901626983516078489245140589409463952678073545797003070511636825194877011897640028276484141605872061841852971891540196882532893091496653457535714273184820163846448324990378860690080727093276731275819665639411489617168329804551397295066876047409154204284299935410258291135022416907694316685742425225090269390348148564513030699251995904363840284292674125734224477655841778861717372654620854982944989467873509295816526320722589923687684570178230380965678831122893058091405726108658848458731016581511675333276748870148291674197015125597825727074064318086014281490241467804723275976842696339357735429301867394397163886117642090040686633988568416810038723892144831760701166845038872123643670433140911557332801829779887365909166596124020217785588548761761619893707943800566633648843650891448055710397652146960276625835990519870423001794655367\n```\n\n----------------------------------------\n\nTITLE: Comparing Build Outputs for Consistency\nDESCRIPTION: Compares the build IDs, version information, and binary files from both builds to ensure consistency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_trimpath_issue48557.txt#2025-04-22_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ncmp bar-buildid.txt foo-buildid.txt\ncmp bar-version.txt foo-version.txt\ncmp bar/a.exe foo/a.exe\n```\n\n----------------------------------------\n\nTITLE: Testing executable naming for fortune v2 module\nDESCRIPTION: Builds the rsc.io/fortune/v2 module and checks that the executable is named 'fortune' instead of 'v2'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_versioned.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# The default executable name shouldn't be v2$GOEXE\ngo build rsc.io/fortune/v2\n! exists v2$GOEXE\nexists fortune$GOEXE\n```\n\n----------------------------------------\n\nTITLE: Defining a Function in a Subpackage\nDESCRIPTION: This Go code defines a package 'p1' with a function 'F' that returns an integer value of 1, similar to the main package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_relative_import.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage p1\n\nfunc F() int { return 1 }\n```\n\n----------------------------------------\n\nTITLE: Main with Additional Functionality\nDESCRIPTION: Implements a main function with an additional Foo function in the mainwithtest package. This setup could aid in testing scenarios where multiple functions need to be validated.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_pkgall_multiple_mains.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nfunc main() {}\n\nfunc Foo() {}\n```\n\n----------------------------------------\n\nTITLE: Module B Test Implementation\nDESCRIPTION: Test file for package b that imports and uses module 'q'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage b\n\nimport \"example.com/q\"\n\nfunc TestB() {\n\tq.PrintVersion()\n}\n```\n\n----------------------------------------\n\nTITLE: Main Package Import\nDESCRIPTION: Main package file importing example.net/a module\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_wild.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage example\n\nimport _ \"example.net/a\"\n```\n\n----------------------------------------\n\nTITLE: Defining Timeval struct for NetBSD ARM64 in syscall package\nDESCRIPTION: Definition of the Timeval struct in the syscall package for NetBSD ARM64 architecture. This struct represents a time value with separate fields for seconds and microseconds, commonly used in system calls.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_169\n\nLANGUAGE: go\nCODE:\n```\ntype Timeval struct {\n\tSec int64\n\tUsec int32\n\tPad_cgo_0 [4]uint8\n}\n```\n\n----------------------------------------\n\nTITLE: Bazaar Fake Client Script (Unix)\nDESCRIPTION: A shell script that simulates a failing Bazaar client by always returning exit code 1\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_bzr.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\nexit 1\n```\n\n----------------------------------------\n\nTITLE: BPF Header Structure Definition\nDESCRIPTION: Berkeley Packet Filter header structure definition for packet capture operations on Darwin ARM64.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_122\n\nLANGUAGE: Go\nCODE:\n```\ntype BpfHdr struct {\n    Caplen uint32\n    Datalen uint32\n}\n```\n\n----------------------------------------\n\nTITLE: Defining File Locking Constants in Go for NetBSD ARM64\nDESCRIPTION: File locking mode constants for the flock system call. These define exclusive locks, shared locks, non-blocking operation, and lock release operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_37\n\nLANGUAGE: go\nCODE:\n```\nconst LOCK_EX = 2\nconst LOCK_NB = 4\nconst LOCK_SH = 1\nconst LOCK_UN = 8\n```\n\n----------------------------------------\n\nTITLE: Memory Advisory Constants in Go for Darwin ARM64\nDESCRIPTION: Constants for madvise() system call to advise the kernel about memory usage patterns. Includes flags for normal, random, sequential access patterns, and freeing memory.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_75\n\nLANGUAGE: Go\nCODE:\n```\nconst MADV_CAN_REUSE = 9\nconst MADV_DONTNEED = 4\nconst MADV_FREE = 5\nconst MADV_FREE_REUSABLE = 7\nconst MADV_FREE_REUSE = 8\nconst MADV_NORMAL = 0\nconst MADV_RANDOM = 1\nconst MADV_SEQUENTIAL = 2\nconst MADV_WILLNEED = 3\nconst MADV_ZERO_WIRED_PAGES = 6\n```\n\n----------------------------------------\n\nTITLE: Defining Memory Protection Constants in Go for NetBSD\nDESCRIPTION: These constants define memory protection flags used in system calls on NetBSD. They specify read, write, and execute permissions for memory pages.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_19\n\nLANGUAGE: Go\nCODE:\n```\nconst PROT_READ = 1\nconst PROT_WRITE = 2\nconst PROT_EXEC = 4\nconst PROT_NONE = 0\n```\n\n----------------------------------------\n\nTITLE: Empty Root Module Definition\nDESCRIPTION: Defines a Go module for testing empty root directory behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dot.txt#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/emptyroot\n```\n\n----------------------------------------\n\nTITLE: Empty Go Package Declaration\nDESCRIPTION: Declares an empty package named 'x' with no implementations\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_linkshared.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage x\n```\n\n----------------------------------------\n\nTITLE: Radvisory_t Struct Definition for darwin-arm64\nDESCRIPTION: Definition of the Radvisory_t struct used in file system operations to provide advice about file access patterns on darwin-arm64 platforms.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_128\n\nLANGUAGE: go\nCODE:\n```\ntype Radvisory_t struct {\n\tOffset int64\n\tCount int32\n\tPad_cgo_0 [4]uint8\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Mod Edit Formatting\nDESCRIPTION: Tests that 'go mod edit -fmt' sorts requirements in the go.mod file according to the standard format.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retention.txt#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngo mod edit -fmt\ncmp go.mod go.mod.tidy\n```\n\n----------------------------------------\n\nTITLE: Simple Go Function Implementation\nDESCRIPTION: Basic Go package containing an Id function that returns a constant integer value\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_n_cover.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage f\n\nfunc Id() int {\n     return 42\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Empty Go Program\nDESCRIPTION: Defines an empty Go program with a main function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version.txt#2025-04-22_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\npackage main\nfunc main(){}\n```\n\n----------------------------------------\n\nTITLE: Dependency Package Declaration\nDESCRIPTION: Empty package declaration for the example.net/a dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_version_tooold.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage a\n```\n\n----------------------------------------\n\nTITLE: Gofmt Command Shell Script\nDESCRIPTION: A shell script that mocks the gofmt command, with a comment noting it is unused.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-mips64x.txt#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: Empty Go Package File - Go\nDESCRIPTION: Declares an empty Go package named 'p'. This minimal file is used to satisfy the Go module's requirement for package content. No functions, types, or exports are defined, and there are no parameters or outputs.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_prerelease_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage p\n```\n\n----------------------------------------\n\nTITLE: Basic Package Declaration in dummy.go\nDESCRIPTION: Empty Go file that declares the package name as 'dummy', establishing the package identity.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/gopkg.in_dummy.v2-unstable_v2.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage dummy\n```\n\n----------------------------------------\n\nTITLE: Go Module Main Source File\nDESCRIPTION: Empty package declaration for module 'a'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_gowork.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage a\n```\n\n----------------------------------------\n\nTITLE: HTML URL Formatting\nDESCRIPTION: HTML formatted version demonstrating URL conversion to anchor tags while maintaining invalid URLs as plain text.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/link2.txt#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p>The Go home page is <a href=\"https://go.dev/\">https://go.dev/</a>.\nIt used to be <a href=\"https://golang.org\">https://golang.org</a>.\nhttps:// is not a link.\nNor is https://\nhttps://☺ is not a link.\nhttps://:80 is not a link.\n```\n\n----------------------------------------\n\nTITLE: Empty Go Package for Path Separator Test\nDESCRIPTION: An empty Go package file (pkg.go) used as part of the test setup. It only contains the package declaration without any actual code.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_script_cmdcd.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage pkg\n```\n\n----------------------------------------\n\nTITLE: Displaying Terminal Functionality Warning\nDESCRIPTION: A warning message shown to users when the terminal is not operating with full functionality, prompting for a return key press to continue.\nSOURCE: https://github.com/golang/go/blob/master/src/embed/internal/embedtest/testdata/-not-hidden/fortune.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nWARNING: terminal is not fully functional\n -  (press RETURN)\n```\n\n----------------------------------------\n\nTITLE: Testing Quote Functions in Go\nDESCRIPTION: Test suite for the quote package, validating each function returns the expected quote. Tests the Hello, Glass, Go, and Opt functions by comparing their outputs with the expected strings.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.5.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n// Copyright 2018 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\npackage quote\n\nimport \"testing\"\n\nfunc TestHello(t *testing.T) {\n\thello := \"Hello, world.\"\n\tif out := Hello(); out != hello {\n\t\tt.Errorf(\"Hello() = %q, want %q\", out, hello)\n\t}\n}\n\nfunc TestGlass(t *testing.T) {\n\tglass := \"I can eat glass and it doesn't hurt me.\"\n\tif out := Glass(); out != glass {\n\t\tt.Errorf(\"Glass() = %q, want %q\", out, glass)\n\t}\n}\n\nfunc TestGo(t *testing.T) {\n\tgo1 := \"Don't communicate by sharing memory, share memory by communicating.\"\n\tif out := Go(); out != go1 {\n\t\tt.Errorf(\"Go() = %q, want %q\", out, go1)\n\t}\n}\n\nfunc TestOpt(t *testing.T) {\n\topt := \"If a program is too slow, it must have a loop.\"\n\tif out := Opt(); out != opt {\n\t\tt.Errorf(\"Opt() = %q, want %q\", out, opt)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Assembly Integration Test in Overlay\nDESCRIPTION: Main Go file that calls a function implemented in assembly. Used to test that overlay works correctly with assembly files.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_overlay.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc foo() // There will be a \"missing function body\" error if the assembly file isn't found.\n\nfunc main() {\n\tfoo()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Empty File Content (Text)\nDESCRIPTION: Specifies that the file located at `$WORK/empty.txt` should contain no content (be zero bytes). This empty file is used as a reference point by the `cmp` command in the shell script to verify that writing output to the null device (`$devnull`) does not modify it.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/devnull.txt#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module definition file specifying the module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_import_cycle_deps_errors.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.21\n```\n\n----------------------------------------\n\nTITLE: Setting Go Version and Preparing Test Environment\nDESCRIPTION: Sets the Go version for testing and creates a backup of the go.mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goline_order.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv TESTGO_VERSION=go1.21.1\nenv TESTGO_VERSION_SWITCH=switch\ncp go.mod go.mod.orig\n```\n\n----------------------------------------\n\nTITLE: Empty Go Package File\nDESCRIPTION: Defines an empty package named 'pkg' without any exported functions or types.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/semver-branch.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage pkg\n```\n\n----------------------------------------\n\nTITLE: Markdown Output\nDESCRIPTION: Text converted to Markdown format with simplified line breaks\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/hello.txt#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nHello, world\n\nThis is a test.\n```\n\n----------------------------------------\n\nTITLE: External test file in vetpkg\nDESCRIPTION: This snippet shows an empty external test file for the vetpkg package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet.txt#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\npackage p_test\n```\n\n----------------------------------------\n\nTITLE: Mock Go Executable Shell Script\nDESCRIPTION: A simple shell script that mocks the 'go' command, outputting a test version identifier message 'go1.999testmod here!'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-arm.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Berkeley Packet Filter Operation Constants in Go for NetBSD-arm64\nDESCRIPTION: Constants defining Berkeley Packet Filter (BPF) operations, instructions, and configuration parameters for NetBSD ARM64. These BPF_* constants are used for packet filtering operations within the syscall package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_117\n\nLANGUAGE: Go\nCODE:\n```\nconst BPF_A = 16\nconst BPF_ABS = 32\nconst BPF_ADD = 0\nconst BPF_ALIGNMENT32 = 4\nconst BPF_ALIGNMENT = 8\nconst BPF_ALU = 4\nconst BPF_AND = 80\nconst BPF_B = 16\nconst BPF_DFLTBUFSIZE = 1048576\nconst BPF_DIV = 48\nconst BPF_H = 8\nconst BPF_IMM = 0\nconst BPF_IND = 64\nconst BPF_JA = 0\nconst BPF_JEQ = 16\nconst BPF_JGE = 48\nconst BPF_JGT = 32\nconst BPF_JMP = 5\nconst BPF_JSET = 64\nconst BPF_K = 0\nconst BPF_LD = 0\nconst BPF_LDX = 1\nconst BPF_LEN = 128\nconst BPF_LSH = 96\nconst BPF_MAJOR_VERSION = 1\nconst BPF_MAXBUFSIZE = 16777216\nconst BPF_MAXINSNS = 512\nconst BPF_MEM = 96\nconst BPF_MEMWORDS = 16\nconst BPF_MINBUFSIZE = 32\nconst BPF_MINOR_VERSION = 1\nconst BPF_MISC = 7\nconst BPF_MSH = 160\nconst BPF_MUL = 32\nconst BPF_NEG = 128\nconst BPF_OR = 64\nconst BPF_RELEASE = 199606\nconst BPF_RET = 6\nconst BPF_RSH = 112\nconst BPF_ST = 2\nconst BPF_STX = 3\nconst BPF_SUB = 16\n```\n\n----------------------------------------\n\nTITLE: Git References Output\nDESCRIPTION: Shows the final state of Git repository references including branches and tags\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/gitrepo1.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nede458df7cd0fdca520df19a33158086a8a68e81 refs/heads/master\n9d02800338b8a55be062c838d1f02e0c5780b9eb refs/heads/v2\n76a00fb249b7f93091bc2c89a789dab1fc1bc26f refs/heads/v2.3.4\na8205f853c297ad2c3c502ba9a355b35b7dd3ca5 refs/heads/v3\nede458df7cd0fdca520df19a33158086a8a68e81 refs/tags/v1.2.3\nb004e48a345a86ed7a2fb7debfa7e0b2f9b0dd91 refs/tags/v1.2.4-annotated\n76a00fb249b7f93091bc2c89a789dab1fc1bc26f refs/tags/v2.0.1\n9d02800338b8a55be062c838d1f02e0c5780b9eb refs/tags/v2.0.2\n76a00fb249b7f93091bc2c89a789dab1fc1bc26f refs/tags/v2.3\n```\n\n----------------------------------------\n\nTITLE: Defining a Confusing 'std' Package in Go\nDESCRIPTION: This Go file defines a package named 'std', which is used to test import restrictions even with module replacements.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_meta.txt#2025-04-22_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\n// Package std is an incredibly confusingly-named package.\npackage std\n```\n\n----------------------------------------\n\nTITLE: Debug Package Components (Go)\nDESCRIPTION: Includes declarations for debug-related packages including dwarf, macho, pe, and plan9obj with various type definitions and constants.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype FatFile struct {\n    Magic uint32\n    Arches []FatArch\n}\n\ntype OptionalHeader32 struct {\n    Magic uint16\n    MajorLinkerVersion uint8\n    MinorLinkerVersion uint8\n    SizeOfCode uint32\n    // ... additional fields\n}\n```\n\n----------------------------------------\n\nTITLE: Testing GOAUTH Default Behavior in Go\nDESCRIPTION: This snippet tests the default behavior of GOAUTH, which should use netrc for authentication. It attempts to download a module requiring HTTPS basic auth without credentials, expecting a failure.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goauth_netrc.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nenv GOPROXY=direct\nenv GOSUMDB=off\n\n# GOAUTH should default to netrc behavior.\n# Without credentials, downloading a module from a path that requires HTTPS\n# basic auth should fail.\n# Override default location of $HOME/.netrc\nenv NETRC=$WORK/empty\n! go get vcs-test.golang.org/auth/or401\nstderr '^\\tserver response: ACCESS DENIED, buddy$'\n```\n\n----------------------------------------\n\nTITLE: Event and Notification Functions in syscall Package for NetBSD ARM64\nDESCRIPTION: These functions provide event notification mechanisms including kqueue for monitoring file descriptors, signals, and other events efficiently without polling.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_79\n\nLANGUAGE: Go\nCODE:\n```\nfunc Kqueue() (int, error)\nfunc Kevent(int, []Kevent_t, []Kevent_t, *Timespec) (int, error)\nfunc SetKevent(*Kevent_t, int, int, int)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm Docker Command\nDESCRIPTION: Command to install npm dependencies using Docker for the Go Telemetry project\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/vendor/golang.org/x/telemetry/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./npm install\n```\n\n----------------------------------------\n\nTITLE: GOPATH Test Package for External Dependency\nDESCRIPTION: A test implementation of the rsc.io/quote package in GOPATH to verify that module dependencies are preferred over packages in GOPATH. Includes a Hello function to test function documentation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_doc.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// Package quote is located in a GOPATH workspace.\npackage quote\n\n// Hello is located in a GOPATH workspace.\nfunc Hello() string { return \"\" }\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Quote Package in Go\nDESCRIPTION: Creates an empty quote package for the local replacement module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_replace.txt#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\npackage quote\n```\n\n----------------------------------------\n\nTITLE: Testing Start and End Anchors in Go Regex\nDESCRIPTION: Test cases for regular expressions using start (^) and end ($) anchors with various combinations. These tests verify how anchors behave in different scenarios, including with empty strings.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n\"^(?:^)$\"\n```\n\n----------------------------------------\n\nTITLE: Defining Module Path for Golang Toolchain\nDESCRIPTION: Specifies the module path for a golang.org/toolchain module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-ppc64le.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Memory Inheritance Flags for OpenBSD in Go\nDESCRIPTION: Defines memory inheritance flags for OpenBSD. These constants control how memory mappings are inherited across fork() and exec() operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_52\n\nLANGUAGE: Go\nCODE:\n```\nconst MAP_INHERIT_SHARE = 0           // Share with child\nconst MAP_INHERIT_COPY = 1            // Copy into child\nconst MAP_INHERIT_NONE = 2            // Neither copy nor share\nconst MAP_INHERIT_DONATE_COPY = 3     // Copy into child, donate after\n```\n\n----------------------------------------\n\nTITLE: Module Definition with Dependencies (.mod file)\nDESCRIPTION: Defines a Go module 'example.com/ambiguous/a' with Go version 1.16 and a dependency on 'example.com/ambiguous/a/b'\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_ambiguous_a_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/ambiguous/a\n\ngo 1.16\n\nrequire example.com/ambiguous/a/b v0.0.0-empty\n```\n\n----------------------------------------\n\nTITLE: Defining Routing Table Constants in Go for NetBSD ARM64\nDESCRIPTION: This snippet defines routing table attribute and flag constants for NetBSD ARM64. These constants are used in network routing operations to manipulate the kernel routing tables and control how network packets are forwarded.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_51\n\nLANGUAGE: Go\nCODE:\n```\nconst RTA_AUTHOR = 64\nconst RTA_BRD = 128\nconst RTA_DST = 1\nconst RTA_GATEWAY = 2\nconst RTA_GENMASK = 8\nconst RTA_IFA = 32\nconst RTA_IFP = 16\nconst RTA_NETMASK = 4\nconst RTA_TAG = 256\nconst RTAX_AUTHOR = 6\nconst RTAX_BRD = 7\nconst RTAX_DST = 0\nconst RTAX_GATEWAY = 1\nconst RTAX_GENMASK = 3\nconst RTAX_IFA = 5\nconst RTAX_IFP = 4\nconst RTAX_MAX = 9\nconst RTAX_NETMASK = 2\nconst RTAX_TAG = 8\nconst RTF_ANNOUNCE = 131072\nconst RTF_BLACKHOLE = 4096\nconst RTF_CLONED = 8192\nconst RTF_CLONING = 256\nconst RTF_DONE = 64\nconst RTF_DYNAMIC = 16\nconst RTF_GATEWAY = 2\nconst RTF_HOST = 4\nconst RTF_LLINFO = 1024\nconst RTF_MASK = 128\nconst RTF_MODIFIED = 32\nconst RTF_PROTO1 = 32768\nconst RTF_PROTO2 = 16384\nconst RTF_REJECT = 8\nconst RTF_SRC = 65536\nconst RTF_STATIC = 2048\nconst RTF_UP = 1\nconst RTF_XRESOLVE = 512\nconst RTM_ADD = 1\n```\n\n----------------------------------------\n\nTITLE: Importing Package for Vendoring Test\nDESCRIPTION: This Go file imports a package from the module being tested for vendoring, ensuring it will be included in the vendor directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_issue46867.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage issue\n\nimport _ \"example.net/m/n\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Section Headers for Go Build Tools\nDESCRIPTION: Basic markdown structure defining section headings for Go's build tools documentation with HTML anchor IDs.\nSOURCE: https://github.com/golang/go/blob/master/doc/initial/5-toolchain.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Compiler {#compiler}\n\n## Assembler {#assembler}\n\n## Linker {#linker}\n```\n\n----------------------------------------\n\nTITLE: Gofmt Output Format\nDESCRIPTION: Go-formatted version of the text with standardized indentation and spacing for lists and paragraphs.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list6.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nText.\n  - List immediately after.\n  - Another.\n\nMore text.\n\n  - List after blank line.\n  - Another.\n\nEven more text.\n\n  - List immediately after.\n\n  - Blank line between items.\n\nYet more text.\n\n  - Another list after blank line.\n\n  - Blank line between items.\n\nStill more text.\n\n  - One list item.\n\n    Multiple paragraphs.\n\n```\n\n----------------------------------------\n\nTITLE: Defining Module in .mod File\nDESCRIPTION: Declares the module identity as example.com/nest/sub in a .mod file. This establishes the module path for the nested submodule.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_nest_sub_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule example.com/nest/sub\n```\n\n----------------------------------------\n\nTITLE: Adding Module Dependency in Submodule\nDESCRIPTION: Updates the submodule's go.mod to require the parent module at v1.1.0 and tags it as submod/v1.0.5.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nat 2018-02-19T18:12:59-05:00\ngit apply 0001-submod-go.mod-add-require-vgotest1-v1.1.0.patch\ngit commit -a -m 'submod/go.mod: add require vgotest1 v1.1.0'\ngit tag submod/v1.0.5\n```\n\n----------------------------------------\n\nTITLE: Problematic Go File for Error Testing\nDESCRIPTION: Defines a main package with imports that are intentionally problematic to test error handling in the go command.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_import.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t_ \"w\"\n\t_ \"nonexist\"\n)\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Go Test for Type X\nDESCRIPTION: Test file that creates an instance of type X and calls its Print method, achieving 100% test coverage since blank-named functions are not counted in coverage calculations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_blank_func_decl.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage coverblank\n\nimport \"testing\"\n\nfunc TestX(t *testing.T) {\n\tvar x X\n\tx.Print()\n}\n```\n\n----------------------------------------\n\nTITLE: Process Wait Constants for Darwin ARM64 in Go\nDESCRIPTION: Constants for process wait operations (W*) in the syscall package for Darwin ARM64. These define flags used with wait system calls to control behavior when waiting for child processes.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_116\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (darwin-arm64), const WCONTINUED = 16\npkg syscall (darwin-arm64), const WCOREFLAG = 128\npkg syscall (darwin-arm64), const WEXITED = 4\npkg syscall (darwin-arm64), const WNOHANG = 1\npkg syscall (darwin-arm64), const WNOWAIT = 32\npkg syscall (darwin-arm64), const WORDSIZE = 64\npkg syscall (darwin-arm64), const WSTOPPED = 8\npkg syscall (darwin-arm64), const WUNTRACED = 2\n```\n\n----------------------------------------\n\nTITLE: Defining Network Interface Type Constants in Go for NetBSD ARM64 CGO\nDESCRIPTION: This snippet defines constants for various network interface types in the syscall package for NetBSD ARM64 with CGO enabled. Each constant is defined with both a numeric value and an ideal-int type.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_27\n\nLANGUAGE: Go\nCODE:\n```\nconst IFT_INTERLEAVE = 124\nconst IFT_INTERLEAVE ideal-int\nconst IFT_IP = 126\nconst IFT_IPFORWARD = 142\nconst IFT_IPFORWARD ideal-int\nconst IFT_IP ideal-int\nconst IFT_IPOVERATM = 114\nconst IFT_IPOVERATM ideal-int\nconst IFT_IPOVERCDLC = 109\nconst IFT_IPOVERCDLC ideal-int\n// ... (truncated for brevity)\nconst IFT_SONET = 39\nconst IFT_SONET ideal-int\nconst IFT_SONETOVERHEADCHANNEL = 185\n```\n\n----------------------------------------\n\nTITLE: Go Module Download with Commit Hash (GOPROXY=off, cached)\nDESCRIPTION: Downloads a module using a commit hash when GOPROXY is set to 'off' after it was previously resolved with GOPROXY=direct.  This tests if the go command uses the highest pseudo-version available in the cache.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_pseudo_cache.txt#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nenv GOPROXY=off\ngo mod download -json golang.org/x/text@a1b916ed6726\nstdout '\"Version\": \"v0.3.1-0.20171215141712-a1b916ed6726\",'\n```\n\n----------------------------------------\n\nTITLE: SVN log output in XML format\nDESCRIPTION: XML-formatted SVN log output showing three revisions with author, date, and commit messages for the repository history.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/test2-svn-git.txt#2025-04-22_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<log>\n<logentry\n   revision=\"3\">\n<author>rsc</author>\n<date>2017-10-04T15:09:35.963034Z</date>\n<msg>move from vcs-test.swtch.com to vcs-test.golang.org</msg>\n</logentry>\n<logentry\n   revision=\"2\">\n<author>rsc</author>\n<date>2017-09-27T18:16:14.650893Z</date>\n<msg>add p1</msg>\n</logentry>\n<logentry\n   revision=\"1\">\n<author>rsc</author>\n<date>2017-09-27T18:00:52.201719Z</date>\n<msg>git</msg>\n</logentry>\n</log>\n```\n\n----------------------------------------\n\nTITLE: Twoer Interface Definition\nDESCRIPTION: Interface definition for Twoer type with PackageTwoMeth method, including deprecated version of the method.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/api/testdata/src/pkg/p2/golden.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Twoer interface {\n    PackageTwoMeth\n}\n\ntype Twoer interface {\n    PackageTwoMeth() //deprecated\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Package X\nDESCRIPTION: A minimal Go package declaration that creates an empty package named 'x'. This serves as the main package for testing import behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/std_vendor.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage x\n```\n\n----------------------------------------\n\nTITLE: Go Module and Package Setup - Go\nDESCRIPTION: These Go code snippets define basic Go modules and package structures necessary for the tests. They include module definitions, package declarations, and minimal function implementations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_json_fields.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n-- go.mod --\nmodule example.com/a\n\ngo 1.18\n-- a.go --\npackage a\n\nimport \"fmt\"\n\nfunc F() {\n    fmt.Println(\"hey there\")\n}\n-- repo/go.mod --\nmodule example.com/repo\n-- repo/main.go --\npackage main\n\nfunc main() {}\n-- embed/go.mod --\nmodule example.com/embed\n-- embed/embed.go --\npackage embed\n\nimport _ \"embed\"\n\n//go:embed non-existing-file.txt\nvar s string\n-- embed/embed_test.go --\npackage embed\n\nimport _ \"embed\"\n\n//go:embed non-existing-file.txt\nvar s string\n-- embed/embed_xtest_test.go --\npackage embed_test\n\nimport _ \"embed\"\n\n//go:embed non-existing-file.txt\nvar s string\n```\n\n----------------------------------------\n\nTITLE: Plain Text Format Test\nDESCRIPTION: Shows content in plain text format\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/blank.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nBlank line at start and end.\n```\n\n----------------------------------------\n\nTITLE: Setting GO111MODULE Environment Variable in Shell\nDESCRIPTION: Sets the GO111MODULE environment variable to 'on' to ensure modules are used for dependency management.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_bad_filenames.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n```\n\n----------------------------------------\n\nTITLE: Tidy Go Module Definition\nDESCRIPTION: Displays a tidy go.mod file with explicit go version and only necessary requirements.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version_missing.txt#2025-04-22_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/m\n\ngo $goversion\n\nrequire example.com/dep v0.1.0\n\nreplace (\n\texample.com/dep v0.1.0 => ./dep\n\texample.com/testdep v0.1.0 => ./testdep\n)\n```\n\n----------------------------------------\n\nTITLE: Raw Input List Format\nDESCRIPTION: Shows the original input format of a loose list with nested content and varying indentation.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list8.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLoose lists.\n  - A\n\n    B\n  - C\n    D\n  - E\n  - F\n```\n\n----------------------------------------\n\nTITLE: Cleaning GOMODCACHE in Go\nDESCRIPTION: This snippet demonstrates how to clean the module cache using the 'go clean -modcache' command.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gomodcache.txt#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nexists $WORK/modcache\nenv GOMODCACHE=$WORK/modcache\ngo clean -modcache\n! exists $WORK/modcache\n```\n\n----------------------------------------\n\nTITLE: Verifying 'go.mod' Checksum in 'go.sum' (Shell)\nDESCRIPTION: Uses 'grep' to search the 'go.sum' file for a line matching the checksum entry for the 'go.mod' file of the specific version (v1.5.2) of the 'rsc.io/QUOTE' module. This verifies that 'go get' added the required checksum for the module's definition file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_sum_noroot.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngrep '^rsc.io/QUOTE v1.5.2/go.mod ' go.sum\n```\n\n----------------------------------------\n\nTITLE: Defining Module Information in .info File\nDESCRIPTION: JSON file containing metadata about the module, including version, name, and timestamp information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_x_useinternal_v0.1.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.1.0\",\"Name\":\"\",\"Short\":\"\",\"Time\":\"2018-07-25T17:24:00Z\"}\n```\n\n----------------------------------------\n\nTITLE: SWIG Package Declaration\nDESCRIPTION: Empty SWIG package declaration for testing SWIG-related dependencies\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_find_nodeps.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage swigpkg\n```\n\n----------------------------------------\n\nTITLE: Testing Module Paths with Trailing Dots in Go\nDESCRIPTION: This snippet tests that module paths with trailing dots are rejected as invalid import paths. The commands attempt to initialize modules with paths containing trailing dots and expect specific error messages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_init_invalid_major.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# module paths with a trailing dot are rejected as invalid import paths\n! go mod init example.com/user/repo/v2.\nstderr '(?s)^go: malformed module path \"example.com/user/repo/v2.\": trailing dot in path element$'\n\n! go mod init example.com/user/repo/v2..\nstderr '(?s)^go: malformed module path \"example.com/user/repo/v2..\": trailing dot in path element$'\n\n! go mod init gopkg.in/user/pkg.v.2.\nstderr '(?s)^go: malformed module path \"gopkg.in/user/pkg.v.2.\": trailing dot in path element$'\n\n! go mod init gopkg.in/user/pkg.v.2..\nstderr '(?s)^go: malformed module path \"gopkg.in/user/pkg.v.2..\": trailing dot in path element$'\n```\n\n----------------------------------------\n\nTITLE: Defining Routing Flags in Go for NetBSD ARM64\nDESCRIPTION: This snippet defines constants for various routing flags used in the NetBSD ARM64 syscall package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_142\n\nLANGUAGE: Go\nCODE:\n```\nconst (\n    RTF_ANNOUNCE = 131072\n    RTF_BLACKHOLE = 4096\n    RTF_CLONED = 8192\n    RTF_CLONING = 256\n    RTF_DONE = 64\n    RTF_DYNAMIC = 16\n    RTF_GATEWAY = 2\n    RTF_HOST = 4\n    RTF_LLINFO = 1024\n    RTF_MASK = 128\n    RTF_MODIFIED = 32\n    RTF_PROTO1 = 32768\n    RTF_PROTO2 = 16384\n    RTF_REJECT = 8\n    RTF_SRC = 65536\n    RTF_STATIC = 2048\n    RTF_UP = 1\n    RTF_XRESOLVE = 512\n)\n```\n\n----------------------------------------\n\nTITLE: Markdown Link Formatting\nDESCRIPTION: Escaped markdown syntax showing how links should be properly escaped and formatted\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/link4.txt#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nThese are not links.\n\n\\[x\n\n\\[x]:\n\n\\[x]:[https://go.dev](https://go.dev)\n\n\\[x][https://go.dev](https://go.dev)\n\n\\[x]: surprise://go.dev\n\n\\[x]: surprise!\n\nBut this is, with a tab (although it's unused).\n```\n\n----------------------------------------\n\nTITLE: Markdown Format\nDESCRIPTION: Markdown formatted version with proper link syntax for Go homepage URLs\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/link.txt#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nThe Go home page is [https://go.dev/](https://go.dev/). It used to be [https://golang.org](https://golang.org).\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module declaration for the example package with Go 1.17 requirement\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_trimpath_main.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/pkg\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: Adding Intermediate Commits to Git Repository\nDESCRIPTION: Adds interim commits to the v2 branch with additional files and tags to create a richer repository history.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/hg/hgrepo1.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nat 2018-04-17T16:00:19-04:00\necho 'intermediate'\ncp stdout foo.txt\ngit add foo.txt\ngit commit -a -m 'intermediate'\n\nat 2018-04-17T16:00:32-04:00\necho 'another'\ncp stdout another.txt\ngit add another.txt\ngit commit -a -m 'another'\ngit tag v2.0.2\ngit tag branch-v2\n```\n\n----------------------------------------\n\nTITLE: Basic Module Import in Go\nDESCRIPTION: A simple Go file importing module 'a'. This demonstrates basic import functionality for modules defined in the go.mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vendormod.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage m\n\nimport _ \"a\"\n```\n\n----------------------------------------\n\nTITLE: Go Module File for Test Project\nDESCRIPTION: The go.mod file for the test project, requiring rsc.io/breaker v1.0.0 as a dependency. This serves as the starting point for the module version tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_update_sum_readonly.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.16\n\nrequire rsc.io/breaker v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Expected Error Output for Module Path Mismatch (Text)\nDESCRIPTION: Specifies the expected standard error output ('stderr') when the `go mod download` command is run with the preceding `go.mod` and `use.go` files. The output indicates an error because the replacement module (`example.com/quote@v1.5.2`) declares its path as 'rsc.io/Quote' in its `go.mod`, which conflicts with the original required path 'rsc.io/quote'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_replace_mismatch.txt#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n-- want --\ngo: rsc.io/quote@v1.5.2 (replaced by example.com/quote@v1.5.2): parsing go.mod:\n\tmodule declares its path as: rsc.io/Quote\n\t        but was required as: rsc.io/quote\n\n```\n\n----------------------------------------\n\nTITLE: Replacing gopkg.in Module with Compatible Version in Go\nDESCRIPTION: This snippet demonstrates replacing a gopkg.in module with a compatible version from a different repository. It uses go list to verify the replacement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_gopkgin.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncd 4-to-4\ngo list -m gopkg.in/src-d/go-git.v4\n```\n\n----------------------------------------\n\nTITLE: Module Information in .info File\nDESCRIPTION: JSON configuration specifying the module version as v0.1.0-nomod and the timestamp for when it was created.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/not-rsc.io_quote_v0.1.0-nomod.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.1.0-nomod\",\"Time\":\"2018-02-14T00:51:33Z\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing Placeholder Gofmt Command Shell Script\nDESCRIPTION: Shell script that serves as a placeholder for the 'gofmt' command, noting that it's unused.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-mips64.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: Testing Go Import Map Resolution\nDESCRIPTION: Verifies the ImportMap field contains correct mappings for test variants of packages, particularly focusing on runtime/cgo and sync packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_cgo_compiled_importmap.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo list -deps -test -compiled -f '{{if eq .ImportPath \"net [runtime.test]\"}}{{printf \"%q\" .ImportMap}}{{end}}' runtime\n```\n\n----------------------------------------\n\nTITLE: Limitations of Module Graph Queries in Vendor Mode\nDESCRIPTION: This snippet demonstrates that certain 'go list -m' queries requiring a complete module graph fail when using vendor mode, and provides appropriate error messages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_getmode_vendor.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n! go list -mod=vendor -m all\nstderr 'go: can\\'t compute \\'all\\' using the vendor directory\\n\\t(Use -mod=mod or -mod=readonly to bypass.)'\n! go list -mod=vendor -m ...\nstderr 'go: can\\'t match module patterns using the vendor directory\\n\\t(Use -mod=mod or -mod=readonly to bypass.)'\n```\n\n----------------------------------------\n\nTITLE: Defining MAC-related System Call Constants in Go for Darwin ARM64\nDESCRIPTION: Constants defining system call numbers for MAC (Mandatory Access Control) operations on Darwin ARM64 platform. These constants are used for syscall operations related to security contexts and access control.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_189\n\nLANGUAGE: Go\nCODE:\n```\nconst SYS___MAC_SET_LCTX = 393\nconst SYS___MAC_SET_LCTX ideal-int\nconst SYS___MAC_SET_LINK = 385\nconst SYS___MAC_SET_LINK ideal-int\nconst SYS___MAC_SET_PROC = 387\nconst SYS___MAC_SET_PROC ideal-int\nconst SYS___MAC_SYSCALL = 381\nconst SYS___MAC_SYSCALL ideal-int\n```\n\n----------------------------------------\n\nTITLE: Defining Routing Table Constants (RTAX_*, RTA_*) in Go for darwin-arm64\nDESCRIPTION: Constants for routing table management and attributes. These constants are used for accessing and modifying routing tables, specifying routing addresses, gateways, and network masks in routing operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_91\n\nLANGUAGE: Go\nCODE:\n```\nconst RTAX_AUTHOR = 6\nconst RTAX_AUTHOR ideal-int\nconst RTAX_BRD = 7\nconst RTAX_BRD ideal-int\nconst RTAX_DST = 0\nconst RTAX_DST ideal-int\nconst RTAX_GATEWAY = 1\nconst RTAX_GATEWAY ideal-int\nconst RTAX_GENMASK = 3\nconst RTAX_GENMASK ideal-int\nconst RTAX_IFA = 5\nconst RTAX_IFA ideal-int\nconst RTAX_IFP = 4\nconst RTAX_IFP ideal-int\nconst RTAX_MAX = 8\nconst RTAX_MAX ideal-int\nconst RTAX_NETMASK = 2\nconst RTAX_NETMASK ideal-int\nconst RTA_AUTHOR = 64\nconst RTA_AUTHOR ideal-int\nconst RTA_BRD = 128\nconst RTA_BRD ideal-int\nconst RTA_DST = 1\nconst RTA_DST ideal-int\nconst RTA_GATEWAY = 2\nconst RTA_GATEWAY ideal-int\nconst RTA_GENMASK = 8\n```\n\n----------------------------------------\n\nTITLE: Secondary Package with Import\nDESCRIPTION: Package p2 importing package p3 as a dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_import_error_stack.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage p2\n\nimport _ \"testdep/p3\"\n```\n\n----------------------------------------\n\nTITLE: Testing Quote Package Functions in Go\nDESCRIPTION: Test suite for the quote package that verifies the output of all four quote functions. Includes environment setup for locale and individual test cases for each function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.5.1.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage quote\n\nimport (\n\t\"os\"\n\t\"testing\"\n)\n\nfunc init() {\n\tos.Setenv(\"LC_ALL\", \"en\")\n}\n\nfunc TestHello(t *testing.T) {\n\thello := \"Hello, world.\"\n\tif out := Hello(); out != hello {\n\t\tt.Errorf(\"Hello() = %q, want %q\", out, hello)\n\t}\n}\n\nfunc TestGlass(t *testing.T) {\n\tglass := \"I can eat glass and it doesn't hurt me.\"\n\tif out := Glass(); out != glass {\n\t\tt.Errorf(\"Glass() = %q, want %q\", out, glass)\n\t}\n}\n\nfunc TestGo(t *testing.T) {\n\tgo1 := \"Don't communicate by sharing memory, share memory by communicating.\"\n\tif out := Go(); out != go1 {\n\t\tt.Errorf(\"Go() = %q, want %q\", out, go1)\n\t}\n}\n\nfunc TestOpt(t *testing.T) {\n\topt := \"If a program is too slow, it must have a loop.\"\n\tif out := Opt(); out != opt {\n\t\tt.Errorf(\"Opt() = %q, want %q\", out, opt)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Updated Panic Message in Go\nDESCRIPTION: This snippet shows the new format for panic messages when a panic is recovered and re-raised. The message now includes '[recovered, reraised]' instead of repeating the panic value.\nSOURCE: https://github.com/golang/go/blob/master/doc/next/4-runtime.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npanic: PANIC [recovered, reraised]\n```\n\n----------------------------------------\n\nTITLE: Basic Auth JSON Configuration\nDESCRIPTION: JSON structure defining HTTP basic authentication credentials with username 'aladdin', password 'opensesame', a 404 status code, and a 16-line error message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/auth/ormanylines.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"Username\": \"aladdin\",\n\t\"Password\": \"opensesame\",\n\t\"StatusCode\": 404,\n\t\"Message\": \"line 1\\nline 2\\nline 3\\nline 4\\nline 5\\nline 6\\nline 7\\nline 8\\nline 9\\nline 10\\nline 11\\nline 12\\nline 13\\nline 14\\nline 15\\nline 16\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Minimal go.mod with Cyclical Dependency - Go\nDESCRIPTION: This minimal go.mod file declares 'golang.org/issue/mirror' as a module and requires 'golang.org/issue/root' at version v0.1.0, forming a cyclical dependency according to the test scenario. Such cycles can test correct graph traversal and cycle handling in module resolution logic. No additional requirements or dependencies are listed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_main.txt#2025-04-22_snippet_3\n\nLANGUAGE: go.mod\nCODE:\n```\nmodule golang.org/issue/mirror\n\nrequire golang.org/issue/root v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Syslog Facility Constants\nDESCRIPTION: System log facility constants used to identify the source of log messages in the log/syslog package for Darwin ARM64.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_49\n\nLANGUAGE: Go\nCODE:\n```\nconst (\n    LOG_KERN = 0\n    LOG_USER = 8\n    LOG_MAIL = 16\n    LOG_DAEMON = 24\n    LOG_AUTH = 32\n    LOG_SYSLOG = 40\n    LOG_LPR = 48\n    LOG_NEWS = 56\n    LOG_UUCP = 64\n    LOG_CRON = 72\n    LOG_AUTHPRIV = 80\n    LOG_FTP = 88\n)\n```\n\n----------------------------------------\n\nTITLE: Main Package Definition\nDESCRIPTION: Defines an empty main package causing intentional package conflict for testing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_run_pkgerror.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n```\n\n----------------------------------------\n\nTITLE: Git Environment Configuration and Repository Setup\nDESCRIPTION: Sets Git author and committer information, initializes repository, adds go.mod file, and creates first commit with version tag. Includes verification of refs.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/v2repo.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GIT_AUTHOR_NAME='Bryan C. Mills'\nenv GIT_AUTHOR_EMAIL='bcmills@google.com'\nenv GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME\nenv GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL\n\ngit init\n\nat 2019-04-03T11:52:15-04:00\nenv GIT_AUTHOR_DATE=2019-04-03T11:44:11-04:00\ngit add go.mod\ngit commit -m 'all: add go.mod'\ngit branch -m master\ngit tag 'v2.0.0'\n\ngit show-ref --tags --heads\ncmp stdout .git-refs\n```\n\n----------------------------------------\n\nTITLE: Defining Mathematical Constants in Go\nDESCRIPTION: Defines smallest non-zero constants for float32 and float64 data types in the math package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.17.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nconst SmallestNonzeroFloat32 = 1.4013e-45\nconst SmallestNonzeroFloat64 = 4.94066e-324\n```\n\n----------------------------------------\n\nTITLE: Recording Dependency Checksums (gomod)\nDESCRIPTION: This `go.sum` file contains the expected cryptographic checksums for the specified versions of the direct dependency (`v.com`) and its own `go.mod` file. Go uses this file to verify the integrity of downloaded dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_trimpath_macro.txt#2025-04-22_snippet_2\n\nLANGUAGE: gomod\nCODE:\n```\nv.com v1.0.0 h1:xxx\nv.com v1.0.0/go.mod h1:xxx\n```\n\n----------------------------------------\n\nTITLE: Alternative Go Implementation for Enabled Fieldtrack\nDESCRIPTION: A Go file with a build constraint that only compiles when the fieldtrack experiment is enabled. It outputs a message indicating that fieldtrack is on.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_tag_goexperiment.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// +build goexperiment.fieldtrack\n\npackage main\n\nfunc main() {\n\tprintln(\"fieldtrack on\")\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Go Workspace Configuration\nDESCRIPTION: Basic go.work file configuration specifying Go version 1.18 and including the current directory in the workspace.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_get_toolchain.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\nuse .\n```\n\n----------------------------------------\n\nTITLE: Defining Version Information in .info File\nDESCRIPTION: JSON structure containing version information for the Go toolchain module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.ios-arm64.txt#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.999testmod.ios-arm64\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Main Package with Imports\nDESCRIPTION: This Go file defines the main package 'a' and imports modules 'b' and 'c' for side effects.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_indirect_pruned.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\npackage a\n\nimport (\n\t_ \"example.com/b\"\n\t_ \"example.com/c\"\n)\n```\n\n----------------------------------------\n\nTITLE: Empty Assembly File\nDESCRIPTION: Empty assembly source file used for testing compiled file handling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_compiled_files_issue28749.txt#2025-04-22_snippet_3\n\nLANGUAGE: assembly\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Defining Memory Protection Constants in Go for Darwin ARM64 CGO\nDESCRIPTION: This snippet defines constants for memory protection flags used in system calls on Darwin ARM64 with CGO. These constants are used to specify memory access permissions.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_170\n\nLANGUAGE: Go\nCODE:\n```\nconst PROT_EXEC = 4\nconst PROT_EXEC ideal-int\nconst PROT_NONE = 0\nconst PROT_NONE ideal-int\nconst PROT_READ = 1\nconst PROT_READ ideal-int\nconst PROT_WRITE = 2\nconst PROT_WRITE ideal-int\n```\n\n----------------------------------------\n\nTITLE: Testing Basic Regexp Escaping in Go\nDESCRIPTION: Tests regular expression patterns with escaped characters like dollar signs. Shows how capturing groups and anchors affect matching positions.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_25\n\nLANGUAGE: go\nCODE:\n```\n\"(foo\\\\$)\"\n-;-;-;-\n-;0-4 0-4;-;0-4 0-4\n\"^(?:(foo\\\\$))$\"\n-;-;-;-\n-;-;-;-\n\"^(?:(foo\\\\$))\"\n-;-;-;-\n-;0-4 0-4;-;0-4 0-4\n\"(?:(foo\\\\$))$\"\n-;-;-;-\n-;-;-;-\n```\n\n----------------------------------------\n\nTITLE: Module Definition File\nDESCRIPTION: Defines the module name as rsc.io/badfile2.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badfile2_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule rsc.io/badfile2\n```\n\n----------------------------------------\n\nTITLE: Testing Stale Cache Scenarios\nDESCRIPTION: Series of tests checking behavior when cache data is stale or invalid, including bad hashes, URLs, and metadata.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/reuse_git.txt#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncp tagtestsv022.json tagtestsv022badhash.json\nreplace '57952' '56952XXX' tagtestsv022badhash.json\ngo mod download -reuse=tagtestsv022badhash.json -x -json vcs-test.golang.org/git/tagtests.git@v0.2.2\n```\n\n----------------------------------------\n\nTITLE: Creating a Minimal Go Tool Script - go - Shell\nDESCRIPTION: Implements a mock go binary as a shell script that prints a hardcoded version string. Used to simulate the go command environment, typically for testing or in containerized stubs. Requires a POSIX shell and ensures compatibility with scripts expecting a go binary. Accepts no parameters and outputs a single line identifying the version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.android-arm64.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n#!/bin/sh\\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: NetBSD ARM64 File Lock Structure Definition in Go\nDESCRIPTION: Defines the Flock_t structure used for file locking operations. Contains fields for lock type, whence, start position, length, and process ID.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_91\n\nLANGUAGE: go\nCODE:\n```\ntype Flock_t struct {\n\tStart int64\n\tLen int64\n\tPid int32\n\tType int16\n\tWhence int16\n}\n```\n\n----------------------------------------\n\nTITLE: Package definition for p1\nDESCRIPTION: Definition of the p1 package in Go, containing a minimal package declaration.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/test2-svn-git.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage p1\n```\n\n----------------------------------------\n\nTITLE: Testing Localized Greetings in Go\nDESCRIPTION: This test function verifies the correct localized greeting is returned based on language preferences.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.2.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc TestHello(t *testing.T) {\n\tfor _, tt := range helloTests {\n\t\ttext := Hello(tt.prefs...)\n\t\tif text != tt.text {\n\t\t\tt.Errorf(\"Hello(%v) = %q, want %q\", tt.prefs, text, tt.text)\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Old P2 Package Implementation\nDESCRIPTION: Empty package declaration for old p2\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_legacy_mod.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage p2\n```\n\n----------------------------------------\n\nTITLE: Socket Message Constants in Go for Darwin ARM64\nDESCRIPTION: Constants for socket message flags used with send() and recv() operations. Controls handling of out-of-band data, peeking at incoming data, waiting for complete messages, and other message-related behaviors.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_78\n\nLANGUAGE: Go\nCODE:\n```\nconst MSG_CTRUNC = 32\nconst MSG_DONTROUTE = 4\nconst MSG_DONTWAIT = 128\nconst MSG_EOF = 256\nconst MSG_EOR = 8\nconst MSG_FLUSH = 1024\nconst MSG_HAVEMORE = 8192\nconst MSG_HOLD = 2048\nconst MSG_NEEDSA = 65536\nconst MSG_OOB = 1\nconst MSG_PEEK = 2\nconst MSG_RCVMORE = 16384\nconst MSG_SEND = 4096\nconst MSG_TRUNC = 16\nconst MSG_WAITALL = 64\nconst MSG_WAITSTREAM = 512\n```\n\n----------------------------------------\n\nTITLE: Executing Go List with Newer Go Version\nDESCRIPTION: Sets the TESTGO_VERSION environment variable to 1.21.0 and runs 'go list' command, demonstrating behavior with a newer Go version without updating the go line.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/old_tidy_toolchain.txt#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nenv TESTGO_VERSION=1.21.0\ngo list\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: This snippet shows the go.mod file content, defining the module and its dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_trimpath.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/main\n\ngo 1.17\n\nrequire example.com/stack v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Go Work Command Execution\nDESCRIPTION: Commands to run go work use recursively and compare results\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_deleted.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo work use -r .\ncmp go.work go.work.want\n```\n\n----------------------------------------\n\nTITLE: Defining SysProcAttr Structure in Go for NetBSD ARM64\nDESCRIPTION: Definition of the SysProcAttr struct which contains NetBSD-specific process attributes. It includes fields for process credentials, process group ID, controlling terminal, and various process creation flags.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_108\n\nLANGUAGE: Go\nCODE:\n```\ntype SysProcAttr struct {\n    Chroot string\n    Credential *Credential\n    Ctty int\n    Foreground bool\n    Noctty bool\n    Pgid int\n    Ptrace bool\n    Setctty bool\n    Setpgid bool\n    Setsid bool\n}\n```\n\n----------------------------------------\n\nTITLE: Test2PKG/p1 Package Import Definition\nDESCRIPTION: HTML template defining svn import path for test2PKG/p1 package\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/go/test2-svn-git.txt#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<meta name=\"go-import\" content=\"vcs-test.golang.org/go/test2-svn-git/test2PKG svn https://vcs-test.golang.org/svn/test2-svn-git\">\n```\n\n----------------------------------------\n\nTITLE: Go Test File with Intentional Failure\nDESCRIPTION: A Go test file that intentionally fails to demonstrate the error reporting format. It contains a simple test function that calls t.Error() to trigger a test failure.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fullpath.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage fullpath_test\n\nimport (\n\t\"testing\"\n)\n\nfunc TestFullPath(t *testing.T) {\n\tt.Error(\"test failed\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Minimal Go Package in Non-Go File (Go)\nDESCRIPTION: This code snippet represents the content of the file `c.c`. Despite the `.c` extension, it contains a Go package declaration (`package c`). This file is used specifically to test how the `go list` command handles input files that do not have the expected `.go` extension.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_test_non_go_files.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n-- c.c --\npackage c\n```\n\n----------------------------------------\n\nTITLE: Setting GOPATH Mode via Environment Variable in Shell\nDESCRIPTION: Sets the `GO111MODULE` environment variable to `off` for the execution of the subsequent command, ensuring the Go toolchain operates in the traditional GOPATH mode. This affects how package dependencies and vendoring are handled by the `go` command.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_std.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=off\n```\n\n----------------------------------------\n\nTITLE: Main Go Implementation with Undefined Functions\nDESCRIPTION: Go code containing intentionally incomplete function definitions to trigger linker errors. Includes a struct definition, a body-less method, and calls to undefined assembly function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/link_external_undef.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\ntype M struct {\n\tb bool\n}\n\n// Note the body-less func def here. This is what causes the problems.\nfunc (m *M) run(fp func())\n\nfunc doit(m *M) {\n        InAsm()\n\tm.run(func() {\n\t})\n}\n\nfunc main() {\n     m := &M{true}\n     doit(m)\n}\n\nfunc InAsm()\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Module with External Tool Dependency\nDESCRIPTION: This go.mod file sets up a Go module named 'example.com/foo' using Go version 1.24. It also declares a dependency on an external tool 'example.com/tools/cmd/hello'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tool_70582.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ngo 1.24\n\nmodule example.com/foo\n\ntool example.com/tools/cmd/hello\n```\n\n----------------------------------------\n\nTITLE: Markdown Format List Marker Tests\nDESCRIPTION: Markdown-specific formatting of list marker test cases.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list7.txt#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n\t-\n\n❦\n\n\t- $\n\n❦\n\n\t- $\n\n❦\n\n❦\n\n\t1! List.\n\n❦\n```\n\n----------------------------------------\n\nTITLE: Network Interface Socket Control Constants (SIOC*) for Darwin ARM64\nDESCRIPTION: Defines socket I/O control (SIOC) constants used for network interface configuration and management in Darwin. These constants are used with the ioctl system call to perform operations on network interfaces.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_182\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (darwin-arm64-cgo), const SIOCGIFKPI ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCGIFMAC = 3223349634\npkg syscall (darwin-arm64-cgo), const SIOCGIFMAC ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCGIFMEDIA = 3224135992\npkg syscall (darwin-arm64-cgo), const SIOCGIFMEDIA ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCGIFMETRIC = 3223349527\npkg syscall (darwin-arm64-cgo), const SIOCGIFMETRIC ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCGIFMTU = 3223349555\npkg syscall (darwin-arm64-cgo), const SIOCGIFMTU ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCGIFNETMASK = 3223349541\npkg syscall (darwin-arm64-cgo), const SIOCGIFNETMASK ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCGIFPDSTADDR = 3223349568\npkg syscall (darwin-arm64-cgo), const SIOCGIFPDSTADDR ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCGIFPHYS = 3223349557\npkg syscall (darwin-arm64-cgo), const SIOCGIFPHYS ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCGIFPSRCADDR = 3223349567\npkg syscall (darwin-arm64-cgo), const SIOCGIFPSRCADDR ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCGIFSTATUS = 3274795325\npkg syscall (darwin-arm64-cgo), const SIOCGIFSTATUS ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCGIFVLAN = 3223349631\npkg syscall (darwin-arm64-cgo), const SIOCGIFVLAN ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCGIFWAKEFLAGS = 3223349640\npkg syscall (darwin-arm64-cgo), const SIOCGIFWAKEFLAGS ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCGLOWAT = 1074033411\npkg syscall (darwin-arm64-cgo), const SIOCGLOWAT ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCGPGRP = 1074033417\npkg syscall (darwin-arm64-cgo), const SIOCGPGRP ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCIFCREATE = 3223349624\npkg syscall (darwin-arm64-cgo), const SIOCIFCREATE ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCIFCREATE2 = 3223349626\npkg syscall (darwin-arm64-cgo), const SIOCIFCREATE2 ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCIFDESTROY = 2149607801\npkg syscall (darwin-arm64-cgo), const SIOCIFDESTROY ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCIFGCLONERS = 3222301057\npkg syscall (darwin-arm64-cgo), const SIOCIFGCLONERS ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCRSLVMULTI = 3222300987\npkg syscall (darwin-arm64-cgo), const SIOCRSLVMULTI ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCSDRVSPEC = 2150132091\npkg syscall (darwin-arm64-cgo), const SIOCSDRVSPEC ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCSETVLAN = 2149607806\npkg syscall (darwin-arm64-cgo), const SIOCSETVLAN ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCSHIWAT = 2147775232\npkg syscall (darwin-arm64-cgo), const SIOCSHIWAT ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCSIFADDR = 2149607692\npkg syscall (darwin-arm64-cgo), const SIOCSIFADDR ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCSIFALTMTU = 2149607749\npkg syscall (darwin-arm64-cgo), const SIOCSIFALTMTU ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCSIFASYNCMAP = 2149607805\npkg syscall (darwin-arm64-cgo), const SIOCSIFASYNCMAP ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCSIFBOND = 2149607750\npkg syscall (darwin-arm64-cgo), const SIOCSIFBOND ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCSIFBRDADDR = 2149607699\npkg syscall (darwin-arm64-cgo), const SIOCSIFBRDADDR ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCSIFCAP = 2149607770\npkg syscall (darwin-arm64-cgo), const SIOCSIFCAP ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCSIFDSTADDR = 2149607694\npkg syscall (darwin-arm64-cgo), const SIOCSIFDSTADDR ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCSIFFLAGS = 2149607696\npkg syscall (darwin-arm64-cgo), const SIOCSIFFLAGS ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCSIFGENERIC = 2149607737\npkg syscall (darwin-arm64-cgo), const SIOCSIFGENERIC ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCSIFKPI = 2149607814\npkg syscall (darwin-arm64-cgo), const SIOCSIFKPI ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCSIFLLADDR = 2149607740\npkg syscall (darwin-arm64-cgo), const SIOCSIFLLADDR ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCSIFMAC = 2149607811\npkg syscall (darwin-arm64-cgo), const SIOCSIFMAC ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCSIFMEDIA = 3223349559\npkg syscall (darwin-arm64-cgo), const SIOCSIFMEDIA ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCSIFMETRIC = 2149607704\npkg syscall (darwin-arm64-cgo), const SIOCSIFMETRIC ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCSIFMTU = 2149607732\npkg syscall (darwin-arm64-cgo), const SIOCSIFMTU ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCSIFNETMASK = 2149607702\npkg syscall (darwin-arm64-cgo), const SIOCSIFNETMASK ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCSIFPHYADDR = 2151704894\npkg syscall (darwin-arm64-cgo), const SIOCSIFPHYADDR ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCSIFPHYS = 2149607734\npkg syscall (darwin-arm64-cgo), const SIOCSIFPHYS ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCSIFVLAN = 2149607806\npkg syscall (darwin-arm64-cgo), const SIOCSIFVLAN ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCSLOWAT = 2147775234\npkg syscall (darwin-arm64-cgo), const SIOCSLOWAT ideal-int\npkg syscall (darwin-arm64-cgo), const SIOCSPGRP = 2147775240\npkg syscall (darwin-arm64-cgo), const SIOCSPGRP ideal-int\n```\n\n----------------------------------------\n\nTITLE: Displaying Terminal Functionality Warning\nDESCRIPTION: Simple warning message shown when terminal has limited functionality, prompting user to press RETURN.\nSOURCE: https://github.com/golang/go/blob/master/src/embed/internal/embedtest/testdata/_hidden/fortune.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nWARNING: terminal is not fully functional\n -  (press RETURN)\n```\n\n----------------------------------------\n\nTITLE: Creating Module Definition File (.mod)\nDESCRIPTION: Defines the module name in the .mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-ppc64.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Disable Go Build Cache\nDESCRIPTION: Environment variable setting to disable the Go build cache.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_disabled.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nenv GOCACHE=off\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module declaration file specifying the golang.org/toolchain module name\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.windows-amd64.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Go Module Checksum\nDESCRIPTION: go.sum file containing checksums for rsc.io/quote v1.0.0\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nrsc.io/quote v1.0.0 h1:kQ3IZQzPTiDJxSZI98YaWgxFEhlNdYASHvh+MplbViw=\nrsc.io/quote v1.0.0/go.mod h1:v83Ri/njykPcgJltBc/gEkJTmjTsNgtO1Y7vyIK1CQA=\n```\n\n----------------------------------------\n\nTITLE: Calculating GCD and LCM for Large Hexadecimal Numbers in Go\nDESCRIPTION: This code snippet shows the calculation of Greatest Common Divisor (GCD) and Least Common Multiple (LCM) for two large hexadecimal numbers A and B. The results are displayed in hexadecimal format.\nSOURCE: https://github.com/golang/go/blob/master/src/crypto/internal/fips140/rsa/testdata/gcd_lcm_tests.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nA = 8cf8ef1d4f216c6bcec673208fd93b7561b0eb8303af57113edc5c6ff4e1eeae9ddc3112b943d947653ba2179b7f63505465126d88ad0a0a15b682f5c89aa4a2a51c768cd9fdeaa9\nB = a6fd114023e7d79017c552a9051ca827f3ffa9f31e2ee9d78f8408967064fcdc9466e95cc8fac9a4fa88248987caf7cf57af58400d27abd60d9b79d2fe03fad76b879eceb504d7f\nLCM = 1c05eee73a4f0db210a9007f94a5af88c1cdd2cba456061fd41de1e746d836fa4e0e972812842e0f44f10a61505f5d55760c48ba0d06af78bb6bde7da8b0080b29f82b1161e9c0b5458e05ac090b00f4d78b1cc10cf065124ba610e3acab092a36fe408525e21c0ddc7c9696ed4e48bd2f70423deecfe62cecc865c6088f265da0e5961d3f3a84f\n\nGCD = 917e74ae941fcaae\n```\n\n----------------------------------------\n\nTITLE: Initializing and Testing Go Module Dependencies\nDESCRIPTION: A series of shell commands to test Go module behavior, specifically checking that 'go get package@none' is a no-op for non-active modules. The commands initialize a new module and verify module listing behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_none.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n\ngo mod init example.com/foo\n\n# 'go get bar@none' should be a no-op if module bar is not active.\ngo get example.com/bar@none\ngo list -m all\n! stdout example.com/bar\n\ngo get example.com/bar@none\ngo list -m all\n! stdout example.com/bar\n```\n\n----------------------------------------\n\nTITLE: Gofmt Normalized List Format\nDESCRIPTION: Shows list formatting normalized by gofmt with consistent bullet points and indentation.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nText.\n- Not a list.\n  - Here is the list.\n  - Using multiple bullets.\n  - Indentation does not matter.\n  - Lots of bullets.\n\nMore text.\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Commands\nDESCRIPTION: Test script that checks the behavior of various Go commands when running without a module context but with GO111MODULE=on. Shows which commands fail (like build, test, fmt) and which succeed (like clean, doc, env).\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_nomod.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Test go commands with no module.\nenv GO111MODULE=on\n\n# go mod edit fails unless given explicit mod file argument\n! go mod edit -json\ngo mod edit -json x.mod\n\n# bug succeeds\n[exec:echo] env BROWSER=echo\n[exec:echo] go bug\n\n# commands that load the package in the current directory fail\n! go build\n! go fmt\n! go generate\n! go get\n! go install\n! go list\n! go run\n! go test\n! go vet\n\n# clean succeeds, even with -modcache\ngo clean -modcache\n\n# doc succeeds for standard library\ngo doc unsafe\n\n# env succeeds\ngo env\n\n# tool succeeds\ngo tool -n test2json\n\n# version succeeds\ngo version\n```\n\n----------------------------------------\n\nTITLE: Replacing gopkg.in v4 Module with v1 Pseudo-version in Go\nDESCRIPTION: This snippet demonstrates another special case where a gopkg.in v4 module is replaced with a v1 pseudo-version, which is accepted for compatibility reasons.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_replace_gopkgin.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ncd ../4-to-1\ngo list -m gopkg.in/src-d/go-git.v4\n```\n\n----------------------------------------\n\nTITLE: Test12 Package Implementation\nDESCRIPTION: Package demonstrating vendor directory resolution with v1 and v2 imports, showing preference for sub/vendor over root vendor.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_complex.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage test12\n\n// Check that vendor/v1 is used but vendor/v2 is NOT used (sub/vendor/v2 wins).\n\nimport (\n\t\"v1\"\n\t\"v2\"\n)\n\nconst x = v1.ComplexNestVendorV1\nconst y = v2.ComplexNestSubVendorV2\n```\n\n----------------------------------------\n\nTITLE: Defining File Operation Constants in Go for Darwin ARM64 CGO\nDESCRIPTION: This snippet defines constants for file operation flags used in system calls on Darwin ARM64 with CGO. These constants are used to specify file open modes, synchronization behavior, and other file-related operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_167\n\nLANGUAGE: Go\nCODE:\n```\nconst O_DP_GETRAWENCRYPTED ideal-int\nconst O_DSYNC = 4194304\nconst O_DSYNC ideal-int\nconst O_EVTONLY = 32768\nconst O_EVTONLY ideal-int\nconst O_EXCL = 2048\nconst O_EXLOCK = 32\nconst O_EXLOCK ideal-int\nconst O_FSYNC = 128\nconst O_FSYNC ideal-int\nconst O_NDELAY = 4\nconst O_NDELAY ideal-int\nconst O_NOCTTY = 131072\nconst O_NOFOLLOW = 256\nconst O_NOFOLLOW ideal-int\nconst O_NONBLOCK = 4\nconst O_POPUP = 2147483648\nconst O_POPUP ideal-int\nconst O_SHLOCK = 16\nconst O_SHLOCK ideal-int\nconst O_SYMLINK = 2097152\nconst O_SYMLINK ideal-int\nconst O_SYNC = 128\nconst O_TRUNC = 1024\n```\n\n----------------------------------------\n\nTITLE: Defining Network-related Constants in Go for OpenBSD 386 CGO\nDESCRIPTION: This snippet defines constants related to network operations, including socket options and protocol-specific flags for OpenBSD 386.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_48\n\nLANGUAGE: Go\nCODE:\n```\nconst TCP_NOPUSH = 16\nconst TCP_NOPUSH ideal-int\nconst SIOCGETVLAN = 3223349648\nconst SIOCGETVLAN ideal-int\nconst SIOCSETVLAN = 2149607823\nconst SIOCSETVLAN ideal-int\n```\n\n----------------------------------------\n\nTITLE: Initializing a Minimal Go Package - Go\nDESCRIPTION: This snippet shows the minimal declaration of a Go package with the package name 'rename'. It serves as a placeholder for future implementation and fulfills Go's requirement that all code files specify a package. No dependencies, inputs, or outputs exist in this form, and the file provides no executable logic or exported identifiers. It is commonly used as a starting point before adding logic to a new Go package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rename_v1.0.0-bad.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage rename\n```\n\n----------------------------------------\n\nTITLE: Package with External Import\nDESCRIPTION: A Go package that imports another package from the test repository, demonstrating dependency management across the repository structure.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/test1-svn-git.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage other\n\nimport _ \"vcs-test.swtch.com/go/test1-svn-git/git-README-only/other\"\n```\n\n----------------------------------------\n\nTITLE: Test2pkg Package Import Definition\nDESCRIPTION: HTML template defining git import path for test2pkg package\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/go/test2-svn-git.txt#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<meta name=\"go-import\" content=\"vcs-test.golang.org/go/test2-svn-git/test2pkg git https://vcs-test.golang.org/git/README-only\">\n```\n\n----------------------------------------\n\nTITLE: Building Go Standard Library with Custom Compiler Flags\nDESCRIPTION: This script tests that the standard library (particularly internal/runtime/atomic) can be built with custom compiler flags (-gcflags) when verbose mode (-n) is active. It sets up a clean environment by disabling Go modules and creating a fresh build cache.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_runtime_gcflags.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=off\n[short] skip # rebuilds all of std\n\n# Set up fresh GOCACHE.\nenv GOCACHE=$WORK/gocache\nmkdir $GOCACHE\n\n# Verify the standard library (specifically internal/runtime/atomic) can be\n# built with -gcflags when -n is given. See golang.org/issue/29346.\ngo build -n -gcflags=all='-l' std\nstderr 'compile.* internal/runtime/atomic .* -l'\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Environment for gccgo Compatibility\nDESCRIPTION: This snippet sets up the test environment by disabling Go modules, skipping short and cross-compilation tests, and defining the test procedure.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gccgo_m.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GO111MODULE=off\n\n[short] skip\n[cross] skip # gccgo can't necessarily cross-compile\n\ncd m\ngo build\nexists m$GOEXE\nrm m$GOEXE\n[exec:gccgo] go build -compiler=gccgo\n[exec:gccgo] exists m$GOEXE\n```\n\n----------------------------------------\n\nTITLE: Basic Main Function in Go\nDESCRIPTION: Provides a minimal main function implementation as part of the mainonly package. It serves as a standalone application entry point with no additional functionality.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_pkgall_multiple_mains.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Testing Module Replacement Scenarios\nDESCRIPTION: Tests various scenarios of replacing modules with local directories or different versions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_update_unrelated_sum.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo mod edit -replace rsc.io/quote@v1.0.0=./dummy\ngo get example.com/upgrade@v0.0.2\n! grep '^rsc.io/quote v1.5.2 ' go.sum\n\ngo mod edit -replace rsc.io/quote@v1.5.2=./dummy\ngo get example.com/upgrade@v0.0.2\n! grep '^rsc.io/quote v1.5.2 ' go.sum\n\ngo mod edit -replace rsc.io/quote@v1.5.2=rsc.io/quote@v1.5.1\ngo get example.com/upgrade@v0.0.2\n! grep '^rsc.io/quote v1.5.2 ' go.sum\ngrep '^rsc.io/quote v1.5.1 ' go.sum\n```\n\n----------------------------------------\n\nTITLE: Defining Go Toolchain Module Path\nDESCRIPTION: Specifies the full module path for a test Go toolchain with version and architecture information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-loong64.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngolang.org/toolchain@v0.0.1-go1.999testmod.linux-loong64\n```\n\n----------------------------------------\n\nTITLE: Basic Go Module Definition\nDESCRIPTION: Defines a basic Go module configuration specifying the module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/link/testdata/script/script_test_basics.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule main\n\ngo 1.20\n```\n\n----------------------------------------\n\nTITLE: Terminal I/O Control Constants in Go for Darwin ARM64\nDESCRIPTION: Constants used for terminal I/O control. IXON enables start/stop output control, IXOFF enables start/stop input control, and NOFLSH prevents buffer flushing after interrupt.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_73\n\nLANGUAGE: Go\nCODE:\n```\nconst IXOFF = 1024\nconst IXON = 512\nconst NOFLSH = 2147483648\n```\n\n----------------------------------------\n\nTITLE: Defining Timespec struct for NetBSD ARM64 in syscall package\nDESCRIPTION: Definition of the Timespec struct in the syscall package for NetBSD ARM64 architecture. This struct represents a high-precision time value with separate fields for seconds and nanoseconds.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_168\n\nLANGUAGE: go\nCODE:\n```\ntype Timespec struct {\n\tSec int64\n\tNsec int64\n}\n```\n\n----------------------------------------\n\nTITLE: IPv6 Socket Option Constants in Go for NetBSD ARM64\nDESCRIPTION: Constants for IPv6 socket options in NetBSD ARM64. These control IPv6-specific behavior when used with setsockopt/getsockopt calls.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_135\n\nLANGUAGE: Go\nCODE:\n```\nconst IPV6_CHECKSUM = 26\nconst IPV6_DEFAULT_MULTICAST_HOPS = 1\nconst IPV6_DEFAULT_MULTICAST_LOOP = 1\n```\n\n----------------------------------------\n\nTITLE: Updating webcomponents.min.js for Go Trace Viewer\nDESCRIPTION: Command to copy the webcomponents.min.js file from the Catapult repository to the Go source directory. This file is necessary for importing trace_viewer_full.html in the trace viewer page.\nSOURCE: https://github.com/golang/go/blob/master/src/internal/trace/traceviewer/static/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cp third_party/polymer/components/webcomponentsjs/webcomponents.min.js $GOROOT/src/cmd/trace/static/webcomponents.min.js\n```\n\n----------------------------------------\n\nTITLE: Plain Text Link Format\nDESCRIPTION: Demonstrates how the documentation links appear in plain text format without markup.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/doclink.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nIn this package, see Doc and Parser.Parse. There is no [Undef] or\n[Undef.Method]. See also the comment package, especially comment.Doc and\ncomment.Parser.Parse.\n```\n\n----------------------------------------\n\nTITLE: FreeBSD syscall constants and functions for 386 architecture\nDESCRIPTION: Constants and functions for file permissions and operations in the syscall package specific to the FreeBSD 386 architecture.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.12.txt#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nconst S_IRWXG = 56\nconst S_IRWXG ideal-int\nconst S_IRWXO = 7\nconst S_IRWXO ideal-int\nfunc Fstatat(int, string, *Stat_t, int) error\nfunc Mknod(string, uint32, uint64) error\n```\n\n----------------------------------------\n\nTITLE: Test2main Package Import Definition\nDESCRIPTION: HTML template defining git import path for test2main package\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/go/test2-svn-git.txt#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<meta name=\"go-import\" content=\"vcs-test.golang.org/go/test2-svn-git/test2main git https://vcs-test.golang.org/git/test2main\">\n```\n\n----------------------------------------\n\nTITLE: Testing Regexp with Single Unicode Character\nDESCRIPTION: Tests matching patterns with a single Japanese character ('本'). Shows how boundary assertions and non-capturing groups affect matching results with Unicode characters.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_27\n\nLANGUAGE: go\nCODE:\n```\n\"^本$\"\n-;-;-;-\n0-3;0-3;0-3;0-3\n\"^(?:^本$)$\"\n-;-;-;-\n0-3;0-3;0-3;0-3\n\"^(?:^本$)\"\n-;-;-;-\n0-3;0-3;0-3;0-3\n\"(?:^本$)$\"\n-;-;-;-\n0-3;0-3;0-3;0-3\n```\n\n----------------------------------------\n\nTITLE: Defining main package with import\nDESCRIPTION: Defines a Go file 'p.go' in the main package that attempts to import package 'x', which is expected to be missing or not found during the build process.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_issue12156.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage p\n\nimport \"x\"\n```\n\n----------------------------------------\n\nTITLE: Defining IP Protocol Constants in Go for Darwin ARM64 CGO\nDESCRIPTION: This snippet defines constants for various IP protocols. These constants are used in network programming to specify the protocol for socket operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_154\n\nLANGUAGE: Go\nCODE:\n```\nconst IPPROTO_SVMTP = 82\nconst IPPROTO_SVMTP ideal-int\nconst IPPROTO_SWIPE = 53\nconst IPPROTO_SWIPE ideal-int\nconst IPPROTO_TCF = 87\nconst IPPROTO_TCF ideal-int\n// ... more protocol constants\n```\n\n----------------------------------------\n\nTITLE: Defining IP Protocol Version Constants in Go for NetBSD ARM64\nDESCRIPTION: Constants related to IPv6 protocol version identification and masking. These define the version number and bit mask for IPv6 packet headers.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_35\n\nLANGUAGE: go\nCODE:\n```\nconst IPV6_VERSION = 96\nconst IPV6_VERSION_MASK = 240\n```\n\n----------------------------------------\n\nTITLE: Declaring Package in α.go\nDESCRIPTION: Declares a package named 'α' in the Go module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badfile1_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage α\n```\n\n----------------------------------------\n\nTITLE: Placeholder Gofmt Command Script\nDESCRIPTION: Simple shell script for the gofmt command binary that is noted as unused.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.netbsd-arm.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: Deprecations in crypto packages\nDESCRIPTION: Lists deprecated methods, constants, and struct fields in various crypto packages.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_19\n\nLANGUAGE: Go\nCODE:\n```\npkg crypto/rc4, method (*Cipher) Reset //deprecated\npkg crypto/tls, const VersionSSL30 //deprecated\npkg crypto/tls, method (*Config) BuildNameToCertificate //deprecated\npkg crypto/tls, type Config struct, NameToCertificate //deprecated\npkg crypto/tls, type Config struct, SessionTicketKey //deprecated\npkg crypto/tls, type ConnectionState struct, NegotiatedProtocolIsMutual //deprecated\npkg crypto/tls, type ConnectionState struct, TLSUnique //deprecated\npkg crypto/x509, func DecryptPEMBlock //deprecated\npkg crypto/x509, func EncryptPEMBlock //deprecated\npkg crypto/x509, func IsEncryptedPEMBlock //deprecated\npkg crypto/x509, type CertificateRequest struct, Attributes //deprecated\n```\n\n----------------------------------------\n\nTITLE: Mock Gofmt Executable\nDESCRIPTION: A simple shell command that mocks the 'gofmt' executable, echoing 'i am unused' to indicate it's not used in testing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-arm.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: Describing amd64 Stack Frame Layout - Plaintext\nDESCRIPTION: This snippet depicts an amd64 stack frame layout for the Go ABI using an ASCII-art diagram. It shows the arrangement and order of the return program counter (PC), RBP (frame pointer) on entry, local variables, and outgoing arguments. The diagram is used to aid understanding of the stack growth direction and the positioning of various stack components, and should be read in conjunction with the textual explanation. For clarity, it assumes responsibilities by the Go stack handling for function prologues and epilogues and reflects alignment rules enforced by the hardware.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/abi-internal.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n+------------------------------+\\n| return PC                    |\\n| RBP on entry                 |\\n| ... locals ...               |\\n| ... outgoing arguments ...   |\\n+------------------------------+ \\u2193 lower addresses\n```\n\n----------------------------------------\n\nTITLE: Network Routing Constants in Go for Darwin ARM64\nDESCRIPTION: Constants for network routing requests used with sysctl. Used for retrieving routing tables, interface lists, and routing statistics.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_81\n\nLANGUAGE: Go\nCODE:\n```\nconst NET_RT_DUMP = 1\nconst NET_RT_DUMP2 = 7\nconst NET_RT_FLAGS = 2\nconst NET_RT_IFLIST = 3\nconst NET_RT_IFLIST2 = 6\nconst NET_RT_MAXID = 10\nconst NET_RT_STAT = 4\nconst NET_RT_TRASH = 5\n```\n\n----------------------------------------\n\nTITLE: Main Package Implementation\nDESCRIPTION: Simple Go program that imports a module to test version handling\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_retractions_issue66403.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport _ \"example.com/retract/newergoversion\"\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module declaration file defining the sandbox module\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_err_stack.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule sandbox\n```\n\n----------------------------------------\n\nTITLE: OS File Constants\nDESCRIPTION: Operating system constants for file operations on Darwin ARM64, including file open flags and path separators.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_50\n\nLANGUAGE: Go\nCODE:\n```\nconst (\n    DevNull = \"/dev/null\"\n    O_APPEND = 8\n    O_CREATE = 512\n    O_EXCL = 2048\n    O_SYNC = 128\n    O_TRUNC = 1024\n    PathListSeparator = 58\n    PathSeparator = 47\n)\n```\n\n----------------------------------------\n\nTITLE: Defining an Empty Package - Go\nDESCRIPTION: This Go snippet defines an empty package named 'pkg' in the 'pkg/pkg.go' file. It serves as a stub or placeholder for adding future functionality to this package. There are no functions, variables, or other declarations present, and no dependencies are specified or imported.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_noroot_v1.0.1.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage pkg\n```\n\n----------------------------------------\n\nTITLE: Testing Go module version resolution\nDESCRIPTION: This snippet tests the 'go list' command with a specific module version, ensuring it correctly resolves and outputs the expected version string.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_git_decorate_full.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Test that Git log with user's global config '~/gitconfig' has log.decorate=full\n# go mod download has an error 'v1.x.y is not a tag'\n# with go1.16.14: \n# `go1.16.14 list -m vcs-test.golang.org/git/gitrepo1.git@v1.2.3`\n# will output with error:\n# go list -m: vcs-test.golang.org/git/gitrepo1.git@v1.2.3: invalid version: unknown revision v1.2.3\n# See golang/go#51312.\ngo list -m vcs-test.golang.org/git/gitrepo1.git@v1.2.3\nstdout 'vcs-test.golang.org/git/gitrepo1.git v1.2.3'\n```\n\n----------------------------------------\n\nTITLE: Adding Soyombo RangeTable to unicode package\nDESCRIPTION: Adds support for the Soyombo script block by defining a new RangeTable in the unicode package. This allows identifying and handling characters from this Unicode block.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.10.txt#2025-04-22_snippet_19\n\nLANGUAGE: go\nCODE:\n```\npkg unicode, var Soyombo *RangeTable\n```\n\n----------------------------------------\n\nTITLE: Go Package Declaration\nDESCRIPTION: Go source file declaring package dotgo.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_dotgo.go_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage dotgo\n```\n\n----------------------------------------\n\nTITLE: Module JSON Info\nDESCRIPTION: JSON file containing module version information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badfile2_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.0.0\"}\n```\n\n----------------------------------------\n\nTITLE: Specifying Module Version Information in JSON\nDESCRIPTION: This JSON object specifies the version identifier (`v1.9.0`) for the current state of the module. This version corresponds to one of the versions marked for retraction in the associated `go.mod` file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_prev_v1.9.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.9.0\"}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Test Command with GOFLAGS Environment Variable\nDESCRIPTION: This snippet tests how the 'go test' command interacts with the GOFLAGS environment variable. It verifies that flags from GOFLAGS are forwarded to the test binary and that command-line arguments can override GOFLAGS.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_flags.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nenv GOFLAGS='-test.timeout=24h0m0s -count=1'\ngo test -v -x ./x\nstdout 'timeout: 24h0m0s$'\nstderr '-test.count=1'\n\nenv GOFLAGS='-timeout=24h0m0s -count=1'\ngo test -v -x ./x\nstdout 'timeout: 24h0m0s$'\nstderr '-test.count=1'\n\ngo test -v -x -timeout=25h0m0s ./x\nstdout 'timeout: 25h0m0s$'\nstderr '-test.count=1'\n\ngo test -v -x -test.timeout=26h0m0s ./x\nstdout 'timeout: 26h0m0s$'\nstderr '-test\\.timeout=26h0m0s'\n! stderr 'timeout=24h0m0s'\nstderr '-test.count=1'\n```\n\n----------------------------------------\n\nTITLE: Running Go Environment Command\nDESCRIPTION: Executes the 'go env' command to display environment variables, used to verify how GOFLAGS is handled.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_sanitize.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo env\n```\n\n----------------------------------------\n\nTITLE: Defining Color NYCbCrA Type - Go\nDESCRIPTION: Definition of NYCbCrA color type that extends YCbCr with an alpha channel. Includes RGBA conversion method for color transformations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.6.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype NYCbCrA struct {\n    YCbCr   // embedded\n    A uint8\n}\n```\n\n----------------------------------------\n\nTITLE: Address Family Constants in Go for Darwin ARM64\nDESCRIPTION: Defines address family constants used in network socket programming on Darwin ARM64 systems. These constants specify the communication domain for sockets.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_51\n\nLANGUAGE: Go\nCODE:\n```\nconst AF_CCITT ideal-int\nconst AF_CHAOS = 5\nconst AF_CNT = 21\nconst AF_COIP = 20\nconst AF_DATAKIT = 9\nconst AF_DECnet = 12\nconst AF_DLI = 13\nconst AF_E164 = 28\nconst AF_ECMA = 8\nconst AF_HYLINK = 15\nconst AF_IEEE80211 = 37\nconst AF_IMPLINK = 3\nconst AF_INET6 = 30\nconst AF_IPX = 23\nconst AF_ISDN = 28\n```\n\n----------------------------------------\n\nTITLE: Mach-O Relocation Constants - debug/macho\nDESCRIPTION: Constants defining relocation types for ARM, ARM64, Generic, and X86_64 architectures in Mach-O binary format\nSOURCE: https://github.com/golang/go/blob/master/api/go1.10.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nconst (\n    ARM64_RELOC_UNSIGNED = 0\n    ARM64_RELOC_SUBTRACTOR RelocTypeARM64\n    ARM64_RELOC_TLVP_LOAD_PAGE21 = 8\n    ARM64_RELOC_TLVP_LOAD_PAGEOFF12 = 9\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Git Author Environment Variables\nDESCRIPTION: Sets up Git environment variables for author and committer information with a specific name and email address.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/insecurerepo.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GIT_AUTHOR_NAME='Bryan C. Mills'\nenv GIT_AUTHOR_EMAIL='bcmills@google.com'\nenv GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME\nenv GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL\n```\n\n----------------------------------------\n\nTITLE: HTML Output\nDESCRIPTION: Shows the final HTML output with markdown links converted to HTML anchor tags.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/link5.txt#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<p>See the <a href=\"https://go.dev/\">Go home page</a> and the <a href=\"https://pkg.go.dev\">pkg\nsite</a>.\n<p>They&apos;re really great!\n```\n\n----------------------------------------\n\nTITLE: User and Group Management Functions in syscall Package for NetBSD ARM64\nDESCRIPTION: These functions provide user and group ID management, allowing processes to change their effective and real user and group IDs for privilege management.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_77\n\nLANGUAGE: Go\nCODE:\n```\nfunc Setuid(int) error\nfunc Seteuid(int) error\nfunc Setgid(int) error\nfunc Setegid(int) error\nfunc Setreuid(int, int) error\nfunc Setregid(int, int) error\nfunc Setgroups([]int) error\nfunc Issetugid() bool\n```\n\n----------------------------------------\n\nTITLE: GCD and LCM Test Cases in Go\nDESCRIPTION: A series of test cases defining pairs of large hexadecimal numbers (A and B) and their expected GCD and LCM results. Includes edge cases with zero values and equal numbers to verify correct handling of special cases.\nSOURCE: https://github.com/golang/go/blob/master/src/crypto/internal/fips140/rsa/testdata/gcd_lcm_tests.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n# Just to appease the syntax-checker.\nLCM = 0\n\nGCD = 1\nA = 92ff140ac8a659b31dd904161f9213706a08a817ae845e522c3af0c9096699e059b47c8c2f16434b1c5766ebb384b79190f2b2a62c2378f45e116890e7bb407a\nB = 2f532c9e5902b0d68cd2ed69b2083bc226e8b04c549212c425a5287bb171c6a47fcb926c70cc0d34b8d6201c617aee66af865d31fdc8a2eeb986c19da8bb0897\nLCM = 1b2c97003e520b0bdd59d8c35a180b4aa36bce14211590435b990ad8f4c034ce3c77899581cb4ee1a022874203459b6d53859ab1d99ff755efa253fc0e5d8487bb000c13c566e8937f0fe90b95b68bc278610d4f232770b08d1f31bee55a03da47f2d0ebb9e7861c4f16cc22168b68593e9efcde00f54104b4c3e1a0b294d7f6\n```\n\n----------------------------------------\n\nTITLE: Custom Gofmt Executable Script\nDESCRIPTION: Shell script for a placeholder 'gofmt' command that simply echoes a message indicating it's unused.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-amd64.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: Listing Go Test Functions using `go test -list` (Shell)\nDESCRIPTION: These shell commands utilize the Go toolchain to list specific types of functions within the Go package based on naming conventions. `go test -list=Test` lists functions matching the pattern `Test.*`. `go test -list=Benchmark` lists functions matching `Benchmark.*`. `go test -list=Example` lists functions matching `Example.*` that potentially have output comments. The `stdout` lines indicate the expected output for each command.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_test_simple.txt#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Test\ngo test -list=Test\nstdout TestSimple\n```\n\nLANGUAGE: sh\nCODE:\n```\n# Benchmark\ngo test -list=Benchmark\nstdout BenchmarkSimple\n```\n\nLANGUAGE: sh\nCODE:\n```\n# Examples\ngo test -list=Example\nstdout Example_simple\nstdout Example_withEmptyOutput\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Go Command Shell Script (bin/go)\nDESCRIPTION: This shell script, located at `bin/go`, acts as a placeholder or mock version of the standard `go` command. When executed, it prints the string \"go1.999testmod here!\", likely indicating which specific test toolchain version is being simulated.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.illumos-amd64.txt#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n#!/bin/sh\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Module Info JSON\nDESCRIPTION: JSON metadata containing version information for the module\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_badchain_c_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.0.0\"}\n```\n\n----------------------------------------\n\nTITLE: Testing QUOTE Package Functions\nDESCRIPTION: Test suite for the QUOTE package that verifies all functions return expected uppercase strings. Sets up environment for consistent testing and includes tests for all exported functions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_!q!u!o!t!e_v1.5.3-!p!r!e.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage QUOTE\n\nimport (\n\t\"os\"\n\t\"testing\"\n)\n\nfunc init() {\n\tos.Setenv(\"LC_ALL\", \"en\")\n}\n\nfunc TestHELLO(t *testing.T) {\n\thello := \"HELLO, WORLD\"\n\tif out := HELLO(); out != hello {\n\t\tt.Errorf(\"HELLO() = %q, want %q\", out, hello)\n\t}\n}\n\nfunc TestGLASS(t *testing.T) {\n\tglass := \"I CAN EAT GLASS AND IT DOESN'T HURT ME.\"\n\tif out := GLASS(); out != glass {\n\t\tt.Errorf(\"GLASS() = %q, want %q\", out, glass)\n\t}\n}\n\nfunc TestGO(t *testing.T) {\n\tgo1 := \"DON'T COMMUNICATE BY SHARING MEMORY, SHARE MEMORY BY COMMUNICATING.\"\n\tif out := GO(); out != go1 {\n\t\tt.Errorf(\"GO() = %q, want %q\", out, go1)\n\t}\n}\n\nfunc TestOPT(t *testing.T) {\n\topt := \"IF A PROGRAM IS TOO SLOW, IT MUST HAVE A LOOP.\"\n\tif out := OPT(); out != opt {\n\t\tt.Errorf(\"OPT() = %q, want %q\", out, opt)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing CGO Test Executables\nDESCRIPTION: Compares the two built executables (exe1 and exe2) to ensure they are identical despite different build commands.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cgo_consistent_results.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncmp $WORK/exe1$GOEXE $WORK/exe2$GOEXE\n```\n\n----------------------------------------\n\nTITLE: Type Definition for Package 'n' in Go\nDESCRIPTION: Simple package 'n' that defines a type N as an alias for int.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_multipkg.txt#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\npackage n\n\ntype N int\n```\n\n----------------------------------------\n\nTITLE: Package with Test Suffix in Module Name\nDESCRIPTION: A Go package declaration for a package named 'e_test', which is a regular package despite having a test suffix.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_test.txt#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n// Package e_test is the non-test package for its import path,\n// in a deceptively-named directory!\npackage e_test\n```\n\n----------------------------------------\n\nTITLE: Displaying Old and New Numbered Lists with Diff in Go Project\nDESCRIPTION: This code snippet shows two versions of a numbered list and a diff output highlighting the changes between them. The old list includes both numbers and words, while the new list uses only numbers up to 10.\nSOURCE: https://github.com/golang/go/blob/master/src/internal/diff/testdata/end.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-- old --\n1\n2\n3\n4\n5\n6\n7\neight\nnine\nten\neleven\n-- new --\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n```\n\nLANGUAGE: diff\nCODE:\n```\ndiff old new\n--- old\n+++ new\n@@ -5,7 +5,6 @@\n 5\n 6\n 7\n-eight\n-nine\n-ten\n-eleven\n+8\n+9\n+10\n```\n\n----------------------------------------\n\nTITLE: Defining Go Toolchain Module\nDESCRIPTION: Defines the module name for the Go toolchain package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.freebsd-arm64.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Windows UDP Connection Reset Handling\nDESCRIPTION: Adds constant for UDP connection reset behavior control on Windows systems for both 386 and amd64 architectures.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_27\n\nLANGUAGE: Go\nCODE:\n```\nconst SIO_UDP_CONNRESET = 2550136844\n```\n\n----------------------------------------\n\nTITLE: Testing Regular Expression Matching in Go\nDESCRIPTION: This snippet represents a series of test cases for regular expression matching in Go. Each test case consists of input strings, regular expressions, and expected match results. The tests cover various aspects of regex functionality including basic matching, anchors, character classes, and complex patterns.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nstrings\n\"\"\n\"a\"\nregexps\n\"a\"\n-;-;-;-\n0-1;0-1;0-1;0-1\n\"^(?:a)$\"\n-;-;-;-\n0-1;0-1;0-1;0-1\n\"^(?:a)\"\n-;-;-;-\n0-1;0-1;0-1;0-1\n\"(?:a)$\"\n-;-;-;-\n0-1;0-1;0-1;0-1\n```\n\n----------------------------------------\n\nTITLE: Testing AMD64 Architecture Features\nDESCRIPTION: Tests AMD64 architecture with v3 instruction set features, showing progression of supported feature sets from v1 through v3.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/tooltags.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GOOS=linux\nenv GOARCH=amd64\nenv GOAMD64=v3\ngo list -f '{{context.ToolTags}}'\n```\n\n----------------------------------------\n\nTITLE: Displaying File Versions and Unified Diff in Go Project\nDESCRIPTION: This snippet shows the old and new versions of a text file, followed by a unified diff output. The diff highlights changes where lowercase 'b' and 'c' were replaced with uppercase 'B' and 'C' respectively.\nSOURCE: https://github.com/golang/go/blob/master/src/internal/diff/testdata/dups.txt#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-- old --\na\n\nb\n\nc\n\nd\n\ne\n\nf\n-- new --\na\n\nB\n\nC\n\nd\n\ne\n\nf\n-- diff --\ndiff old new\n--- old\n+++ new\n@@ -1,8 +1,8 @@\n a\n $\n-b\n-\n-c\n+B\n+\n+C\n $\n d\n $\n```\n\n----------------------------------------\n\nTITLE: Running Go Version Command on Non-Go Binaries\nDESCRIPTION: This snippet runs the 'go version -m' command on the current directory, which contains the copied non-Go binaries. It expects no output on stdout or stderr.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/go_version.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngo version -m .\n! stdout .\n! stderr .\n```\n\n----------------------------------------\n\nTITLE: Executing go fmt Test Case Asserting Panic in Shell\nDESCRIPTION: This shell script snippet sets the `GO111MODULE` environment variable to `on` to enable Go modules. It then executes `go fmt x.go` and asserts that the command fails (indicated by `!`) and outputs a panic message to standard error (`! stderr panic`), specifically testing Go issue 26792.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gofmt_invalid.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n! go fmt x.go\n! stderr panic\n```\n\n----------------------------------------\n\nTITLE: Adding Commits to v2 Branch in Mercurial\nDESCRIPTION: Updates to the v2 branch in Mercurial and adds a dummy commit with specific author and date information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/hg/hgrepo1.txt#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nhg update -C v2\nhg branch v2\nunquote ''\ncp stdout dummy\nhg add dummy\nhg commit --user 'Russ Cox <rsc@golang.org>' --date '2018-06-27T12:15:24-04:00' -m 'dummy'\n```\n\n----------------------------------------\n\nTITLE: Defining v3pkg Package\nDESCRIPTION: Contains a simple Go package declaration for the v3pkg package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/v3pkg.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage v3pkg\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Module Definition\nDESCRIPTION: Defines the module name for the Go package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_testonly_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule rsc.io/testonly\n```\n\n----------------------------------------\n\nTITLE: Declaring Unicode Category Alias Map - Go\nDESCRIPTION: Declares a map that stores Unicode category aliases, mapping abbreviated category names to their full forms.\nSOURCE: https://github.com/golang/go/blob/master/api/next/70780.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar CategoryAliases map[string]string\n```\n\n----------------------------------------\n\nTITLE: Defining memory management syscall constants for Darwin ARM64 CGO in Go\nDESCRIPTION: This snippet defines constants used for memory management operations in system calls on the Darwin ARM64 CGO platform. It includes constants for memory advice and memory mapping flags.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_159\n\nLANGUAGE: Go\nCODE:\n```\nconst MADV_CAN_REUSE = 9\nconst MADV_DONTNEED = 4\nconst MADV_FREE = 5\nconst MADV_FREE_REUSABLE = 7\nconst MADV_FREE_REUSE = 8\nconst MADV_NORMAL = 0\nconst MADV_RANDOM = 1\nconst MADV_SEQUENTIAL = 2\nconst MADV_WILLNEED = 3\nconst MADV_ZERO_WIRED_PAGES = 6\n\nconst MAP_ANON = 4096\nconst MAP_COPY = 2\nconst MAP_FILE = 0\nconst MAP_FIXED = 16\nconst MAP_HASSEMAPHORE = 512\nconst MAP_JIT = 2048\nconst MAP_NOCACHE = 1024\nconst MAP_NOEXTEND = 256\nconst MAP_NORESERVE = 64\nconst MAP_PRIVATE = 2\nconst MAP_RENAME = 32\nconst MAP_RESERVED0080 = 128\nconst MAP_SHARED = 1\n```\n\n----------------------------------------\n\nTITLE: Module Checksum Configuration - Build List Only\nDESCRIPTION: go.sum entries containing only build list checksums for ambiguous modules\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_ambiguous.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nexample.com/ambiguous/a v1.0.0/go.mod h1:TrBl/3xTPFJ2gmMIYz53h2gkNtg0dokszEMuyS1QEb0=\nexample.com/ambiguous/a/b v0.0.0-empty/go.mod h1:MajJq5jPEBnnXP+NTWIeXX7kwaPS1sbVEJdooTmsePQ=\n```\n\n----------------------------------------\n\nTITLE: Input Text Format\nDESCRIPTION: Plain text representation of Go homepage URLs\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/link.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nThe Go home page is https://go.dev/.\nIt used to be https://golang.org.\n```\n\n----------------------------------------\n\nTITLE: Main Sampler Implementation\nDESCRIPTION: Core implementation of the localization system including environment variable handling, text structure, and language matching logic\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.2.1.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage sampler\n\nimport (\n\t\"os\"\n\t\"strings\"\n\n\t\"golang.org/x/text/language\"\n)\n\nfunc DefaultUserPrefs() []language.Tag {\n\tvar prefs []language.Tag\n\tfor _, k := range []string{\"LC_ALL\", \"LC_MESSAGES\", \"LANG\"} {\n\t\tif env := os.Getenv(k); env != \"\" {\n\t\t\tprefs = append(prefs, language.Make(env))\n\t\t}\n\t}\n\treturn prefs\n}\n\nfunc Hello(prefs ...language.Tag) string {\n\tif len(prefs) == 0 {\n\t\tprefs = DefaultUserPrefs()\n\t}\n\treturn hello.find(prefs)\n}\n\ntype text struct {\n\tbyTag   map[string]string\n\tmatcher language.Matcher\n}\n\nfunc newText(s string) *text {\n\tt := &text{\n\t\tbyTag: make(map[string]string),\n\t}\n\tvar tags []language.Tag\n\tfor _, line := range strings.Split(s, \"\\n\") {\n\t\tline = strings.TrimSpace(line)\n\t\tif line == \"\" {\n\t\t\tcontinue\n\t\t}\n\t\tf := strings.Split(line, \": \")\n\t\tif len(f) != 3 {\n\t\t\tcontinue\n\t\t}\n\t\ttag := language.Make(f[1])\n\t\ttags = append(tags, tag)\n\t\tt.byTag[tag.String()] = f[2]\n\t}\n\tt.matcher = language.NewMatcher(tags)\n\treturn t\n}\n\nfunc (t *text) find(prefs []language.Tag) string {\n\ttag, _, _ := t.matcher.Match(prefs...)\n\ts := t.byTag[tag.String()]\n\tif strings.HasPrefix(s, \"RTL \") {\n\t\ts = \"\\u200F\" + strings.TrimPrefix(s, \"RTL \") + \"\\u200E\"\n\t}\n\treturn s\n}\n```\n\n----------------------------------------\n\nTITLE: Module Definition\nDESCRIPTION: Defines the Go module name as rsc.io/CGO\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_!c!g!o_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule rsc.io/CGO\n```\n\n----------------------------------------\n\nTITLE: Deprecations in archive/tar package\nDESCRIPTION: Lists deprecated constant and struct field in the archive/tar package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_16\n\nLANGUAGE: Go\nCODE:\n```\npkg archive/tar, const TypeRegA //deprecated\npkg archive/tar, type Header struct, Xattrs //deprecated\n```\n\n----------------------------------------\n\nTITLE: Testing 32-bit Floating-Point Conversion in Go\nDESCRIPTION: This snippet shows test cases for converting 32-bit floating-point numbers between binary and decimal representations. It includes stress inputs for conversion to 24-bit binary and from 24-bit binary to decimal, covering cases both less than and greater than 1/2 ULP.\nSOURCE: https://github.com/golang/go/blob/master/src/strconv/testdata/testfp.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfloat32 %b 5e-20 15474250p-88\nfloat32 %b 67e+14 12479722p+29\nfloat32 %b 985e+15 14333636p+36\n// ... more test cases ...\nfloat32 %.10e 10144164p-110 7.8147796834e-27\nfloat32 %.11e 13248074p+95 5.24810279937e+35\n```\n\n----------------------------------------\n\nTITLE: Windows System Structures and Constants\nDESCRIPTION: Windows-specific type definitions and constants for certificate handling and token management across 32-bit and 64-bit architectures.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.11.txt#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nconst TOKEN_ADJUST_SESSIONID = 256\nconst TOKEN_ALL_ACCESS = 983551\ntype AddrinfoW struct { Addr Pointer }\ntype CertContext struct { CertInfo *CertInfo }\ntype CertInfo struct\ntype CertRevocationInfo struct { \n    CrlInfo *CertRevocationCrlInfo\n    OidSpecificInfo Pointer\n}\ntype Pointer *struct\n```\n\n----------------------------------------\n\nTITLE: Declaring a Go Package (Go)\nDESCRIPTION: This snippet contains a basic Go source file that declares the package 'notags'. This file belongs to the 'example.com/notags' module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_notags_v0.0.0-20190507143103-cc8cbe209b64.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n-- notags.go --\npackage notags\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module in foo/go.mod\nDESCRIPTION: Defines a Go module named 'example.com/foo' in the foo/go.mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_errors_pos.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/foo\n```\n\n----------------------------------------\n\nTITLE: Defining Data Link Type Constants in Go for Darwin ARM64 CGO\nDESCRIPTION: This snippet defines constants for various data link types used in network protocols for the syscall package on Darwin ARM64 with CGO. These constants are used in network packet capture and analysis.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_141\n\nLANGUAGE: Go\nCODE:\n```\nconst DLT_APPLE_IP_OVER_IEEE1394 = 138\nconst DLT_ARCNET = 7\nconst DLT_ATM_CLIP = 19\nconst DLT_ATM_RFC1483 = 11\nconst DLT_AX25 = 3\nconst DLT_CHAOS = 5\nconst DLT_CHDLC = 104\nconst DLT_C_HDLC = 104\nconst DLT_EN10MB = 1\nconst DLT_EN3MB = 2\nconst DLT_FDDI = 10\nconst DLT_IEEE802 = 6\nconst DLT_IEEE802_11 = 105\nconst DLT_IEEE802_11_RADIO = 127\nconst DLT_IEEE802_11_RADIO_AVS = 163\nconst DLT_LINUX_SLL = 113\nconst DLT_LOOP = 108\nconst DLT_NULL = 0\nconst DLT_PFLOG = 117\nconst DLT_PFSYNC = 18\nconst DLT_PPP = 9\nconst DLT_PPP_BSDOS = 16\nconst DLT_PPP_SERIAL = 50\nconst DLT_PRONET = 4\nconst DLT_RAW = 12\nconst DLT_SLIP = 8\nconst DLT_SLIP_BSDOS = 15\n```\n\n----------------------------------------\n\nTITLE: Module Configuration with Dependency Exclusion\nDESCRIPTION: Go module configuration file specifying the module name, Go version requirement, and excluding a specific version of rsc.io/quote package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_cmd_v1.0.0-exclude.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/cmd\n\ngo 1.16\n\nexclude rsc.io/quote v1.5.2\n```\n\n----------------------------------------\n\nTITLE: Simple Go Main Package\nDESCRIPTION: A minimal Go program with an empty main function. Used as a test target for the build commands in the test script.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_output.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Main Go Package Implementation\nDESCRIPTION: Simple Go package implementation with a single function F() that returns 42.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_dedup_packages.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage xtestonly\n\nfunc F() int { return 42 }\n```\n\n----------------------------------------\n\nTITLE: Package Definition and Import in Go\nDESCRIPTION: This snippet defines a package 'p' with an empty function and imports another package 'coverdep/p1' for side-effects. It demonstrates basic package setup and the use case for underscore imports. Dependencies: Go packages specified must exist in the module's directory structure.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_sync_atomic_import.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nimport _ \"coverdep/p1\"\n\nfunc F() {\n}\n```\n\nLANGUAGE: go\nCODE:\n```\npackage p1\n\nimport _ \"errors\"\n```\n\n----------------------------------------\n\nTITLE: Package Import Example\nDESCRIPTION: Simple Go package demonstrating import of an external dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_main.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage x\n\nimport _ \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: Level1b Package Implementation\nDESCRIPTION: Level1b package implementation with similar conflicting imports to level1a.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_issue_59905.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage level1b\n\nimport (\n\t\"test/main/level1b/level2x\"\n\t\"test/main/level1b/level2y\"\n)\n\nfunc Print() { println(level2x.Value, level2y.Value) }\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard Pattern for Package Path\nDESCRIPTION: Shows different behaviors when using a wildcard pattern ('/...') at the end of the package path, depending on the initial state.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_ambiguous_pkg.txt#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncp go.mod.orig go.mod\n\ngo get example.net/ambiguous/nested/pkg/...@v0.1.0\ngo list -m all\nstdout '^example.net/ambiguous/nested v0.1.0$'\n! stdout '^example.net/ambiguous '\n\n\ncp go.mod.orig go.mod\ngo mod edit -require=example.net/ambiguous@v0.1.0\n\ngo get example.net/ambiguous/nested/pkg/...@v0.1.0\ngo list -m all\n! stdout '^example.net/ambiguous/nested '\nstdout '^example.net/ambiguous v0.1.0$'\n```\n\n----------------------------------------\n\nTITLE: Specifying Go Toolchain Module Path - go.mod\nDESCRIPTION: These snippets indicate the root module path for the Go toolchain, using the 'golang.org/toolchain' identifier. This information is specified twice: once in a synthetic module manifest ('.mod') and once in an actual 'go.mod' file, possibly to support both static and dynamic module discovery by Go tooling. No dependencies are defined, and no versions other than the one tied to the toolchain are referenced.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.18.linux-amd64.txt#2025-04-22_snippet_1\n\nLANGUAGE: go.mod\nCODE:\n```\ngolang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Main Module Go.mod with Replacement Directives\nDESCRIPTION: Defines the main module configuration with multiple replacement directives. This includes both used and unused replacements to test if all are properly maintained in the vendor/modules.txt file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_unused.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/foo\ngo 1.14\n\nrequire (\n\texample.com/a v0.1.0\n)\n\nreplace (\n\texample.com/a v0.1.0 => ./a\n\texample.com/b v0.1.0 => ./b1\n\texample.com/b v0.2.0-unused => ./b2\n\texample.com/c => ./c\n\texample.com/d v0.1.0 => ./d1\n\texample.com/d v0.2.0 => ./d2\n\texample.com/e => example.com/e v0.1.0-unused\n)\n```\n\n----------------------------------------\n\nTITLE: Uppercase Module Definition\nDESCRIPTION: A simple go.mod file that defines the uppercase module example.com/Foo.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_collision.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/Foo\n```\n\n----------------------------------------\n\nTITLE: Using Methods and Helper Functions in database/sql - Go\nDESCRIPTION: These methods provide the mechanisms to interact with SQL databases in Go using the database/sql package. Includes methods for beginning transactions with options, executing statements with context, pinging for connectivity, preparing statements, and querying with context. Also exposes methods for examining result set metadata, scanning types, and batch operations. Named creates named parameters for prepared queries. Requires compatible DB, Stmt, and Rows objects.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.8.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nfunc Named(string, interface{}) NamedArg\n```\n\nLANGUAGE: Go\nCODE:\n```\nmethod (*ColumnType) DatabaseTypeName() string\nmethod (*ColumnType) DecimalSize() (int64, int64, bool)\nmethod (*ColumnType) Length() (int64, bool)\nmethod (*ColumnType) Name() string\nmethod (*ColumnType) Nullable() (bool, bool)\nmethod (*ColumnType) ScanType() reflect.Type\n```\n\nLANGUAGE: Go\nCODE:\n```\nmethod (*DB) BeginTx(context.Context, *TxOptions) (*Tx, error)\nmethod (*DB) ExecContext(context.Context, string, ...interface{}) (Result, error)\nmethod (*DB) PingContext(context.Context) error\nmethod (*DB) PrepareContext(context.Context, string) (*Stmt, error)\nmethod (*DB) QueryContext(context.Context, string, ...interface{}) (*Rows, error)\nmethod (*DB) QueryRowContext(context.Context, string, ...interface{}) *Row\n```\n\nLANGUAGE: Go\nCODE:\n```\nmethod (*Rows) ColumnTypes() ([]*ColumnType, error)\nmethod (*Rows) NextResultSet() bool\n```\n\nLANGUAGE: Go\nCODE:\n```\nmethod (*Stmt) ExecContext(context.Context, ...interface{}) (Result, error)\n```\n\n----------------------------------------\n\nTITLE: Toolchain Version Information\nDESCRIPTION: JSON configuration specifying the toolchain version information for Windows ARM64 platform\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.windows-arm64.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.999testmod.windows-arm64\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Git Repository Import Path in HTML Meta Tag\nDESCRIPTION: HTML template with a go-import meta tag that maps the vcs-test.golang.org/go/test1-svn-git/git-README-only import path to a Git repository at https://vcs-test.golang.org/git/README-only.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/go/test1-svn-git.txt#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<meta name=\"go-import\" content=\"vcs-test.golang.org/go/test1-svn-git/git-README-only git https://vcs-test.golang.org/git/README-only\">\n```\n\n----------------------------------------\n\nTITLE: Testing Go Build with -buildvcs=false Flag\nDESCRIPTION: Checks that using the -buildvcs=false flag suppresses VCS information in the built binary, even when building from an active Fossil repository.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_fossil.txt#2025-04-22_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ngo install -buildvcs=false\ngo version -m $GOBIN/a$GOEXE\n! stdout vcs.revision\nrm $GOBIN/a$GOEXE\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition File\nDESCRIPTION: A simple Go module definition file that declares the module name.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/netrc_issue66832.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule private.example.com\n```\n\n----------------------------------------\n\nTITLE: Hello Text Initialization\nDESCRIPTION: Defines multi-language hello messages in English, French, and Spanish\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.2.1.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage sampler\n\nvar hello = newText(`\n\nEnglish: en: Hello, world.\nFrench: fr: Bonjour le monde.\nSpanish: es: Hola Mundo.\n\n`)\n```\n\n----------------------------------------\n\nTITLE: Documenting Package Removal in Go Module\nDESCRIPTION: This snippet contains a README.txt file explaining the version history of the 'pkgremoved' package, indicating when it was removed and added across different versions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patchmod.txt#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nPackage pkgremoved was removed in v0.2.0 and v0.3.1,\nand added in v0.1.0 and v0.4.1.\n```\n\n----------------------------------------\n\nTITLE: Emulating 'go' Binary Output - Go Toolchain - shell\nDESCRIPTION: This shell script simulates the execution of the 'go' binary by echoing a custom Go version string. No dependencies are required except for a POSIX-compliant shell. The script takes no input parameters and always prints \\\"go1.999testmod here!\\\" to standard output. It demonstrates how a fake Go binary can be set up for testing or toolchain stubbing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.freebsd-riscv64.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module declaration for the test project specifying Go 1.15 as the version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_interleaved.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com\ngo 1.15\n```\n\n----------------------------------------\n\nTITLE: Declaring ThirdBase Struct in Go for Baseball Data Modeling\nDESCRIPTION: Defines a struct type 'ThirdBase' in the p3 package. This struct likely represents attributes and data related to the third base position in baseball.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/api/testdata/src/pkg/p3/golden.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\ntype ThirdBase struct\n```\n\n----------------------------------------\n\nTITLE: Defining BPF-related structs in Go for Darwin ARM64\nDESCRIPTION: This snippet defines structures related to Berkeley Packet Filter (BPF) operations, including BpfHdr, BpfInsn, BpfProgram, BpfStat, and BpfVersion.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_123\n\nLANGUAGE: Go\nCODE:\n```\ntype BpfHdr struct {\n    Hdrlen uint16\n    Pad_cgo_0 [2]uint8\n    Tstamp Timeval32\n}\n\ntype BpfInsn struct {\n    Code uint16\n    Jf uint8\n    Jt uint8\n    K uint32\n}\n\ntype BpfProgram struct {\n    Insns *BpfInsn\n    Len uint32\n    Pad_cgo_0 [4]uint8\n}\n\ntype BpfStat struct {\n    Drop uint32\n    Recv uint32\n}\n\ntype BpfVersion struct {\n    Major uint16\n    Minor uint16\n}\n```\n\n----------------------------------------\n\nTITLE: Go Package Declaration\nDESCRIPTION: Declares an empty package named 'c'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_badchain_c_v1.1.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage c\n```\n\n----------------------------------------\n\nTITLE: HTML Output Format Example\nDESCRIPTION: Shows the text converted to HTML format with proper paragraph and pre tags.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/code2.txt#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<p>Text.\n<pre>A tab-indented\n(no, not eight-space indented)\ncode block and haiku.\n</pre>\n<p>More text.\n```\n\n----------------------------------------\n\nTITLE: OS User and Group Management Structures in Go\nDESCRIPTION: Defines structures and functions for user and group management in the os/user package. Includes Group struct definition and functions for looking up groups by ID or name.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.7.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Group struct {\n    Name string\n    Gid string\n}\n\nfunc LookupGroup(string) (*Group, error)\nfunc LookupGroupId(string) (*Group, error)\n```\n\n----------------------------------------\n\nTITLE: Go Module Version Information\nDESCRIPTION: JSON file containing version and timestamp information for a specific module version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/auth/or401.txt#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.0.0-20190405155051-52df474c8a8b\",\"Time\":\"2019-04-05T15:50:51Z\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Terminal Output Control Constants (O*) in Go for darwin-arm64\nDESCRIPTION: Constants for terminal output control flags used with termios interfaces. These constants configure various output processing behaviors including carriage return and line feed handling, character filling, and other terminal output characteristics.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_84\n\nLANGUAGE: Go\nCODE:\n```\nconst OCRNL = 16\nconst OCRNL ideal-int\nconst OFDEL = 131072\nconst OFDEL ideal-int\nconst OFILL = 128\nconst OFILL ideal-int\nconst ONLCR = 2\nconst ONLCR ideal-int\nconst ONLRET = 64\nconst ONLRET ideal-int\nconst ONOCR = 32\nconst ONOCR ideal-int\nconst ONOEOT = 8\nconst ONOEOT ideal-int\nconst OPOST = 1\nconst OPOST ideal-int\n```\n\n----------------------------------------\n\nTITLE: Plain Text Hello World\nDESCRIPTION: Hello world message in plain text format.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/para.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nHello, world. This is a paragraph.\n```\n\n----------------------------------------\n\nTITLE: Simple Hello World Go Program\nDESCRIPTION: A minimal Go program that prints 'hello, world' to the console. This is the file being added and committed to the Mercurial repository.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/hg/hello.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {\n\tprintln(\"hello, world\")\n}\n```\n\n----------------------------------------\n\nTITLE: Git References Verification File\nDESCRIPTION: Expected output for git show-ref command containing references to the main branch and v1.0.0 tag.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/retract-pseudo.txt#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n713affd19d7b9b6dc876b603017f3dcaab8ba674 refs/heads/main\n64c061ed4371ef372b6bbfd58ee32015d6bfc3e5 refs/tags/v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Defining Package in Dependent Module\nDESCRIPTION: This snippet shows the contents of the x.go file in the 'example.net/x' module, which defines an empty package named 'x'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_gomod.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\npackage x\n```\n\n----------------------------------------\n\nTITLE: Go Environment File Configuration - Path A\nDESCRIPTION: Environment variable configuration file for path ./a/go.env defining proxy settings, AMD64 version, and FIPS mode\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_changed.txt#2025-04-22_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nGOPROXY=s\nGOAMD64=v1\nGOFIPS140=off\n```\n\n----------------------------------------\n\nTITLE: Testing an External Package from a Test-Only Package - Go\nDESCRIPTION: Implements a test in the 'onlytest_test' package that imports 'notest' and executes Foo() in a TestFoo test case. This enables verifying the coverage of 'notest' even when it has no test files of its own, demonstrating -coverpkg=all's ability to include such packages. Dependencies include the testing package and 'example.com/cov/notest'; the input is implicit via testing, and output is coverage data.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_pkgall_imports.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage onlytest_test\n\nimport (\n\t\"testing\"\n\n\t\"example.com/cov/notest\"\n)\n\nfunc TestFoo(t *testing.T) {\n\tnotest.Foo()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Module Metadata with .info File - Go Modules - JSON\nDESCRIPTION: This snippet defines the version metadata for the Go module using JSON format, generally auto-generated by Go tooling. The Version field is set, indicating the specific module version being referenced ('v1.0.0-bad'). No external dependencies are required, but the file should reside within the module cache or repository root for tooling to recognize the version. Expected input is metadata for module management, and the output is used internally by the go command for version tracking. Limitations include lack of additional metadata fields beyond Version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rename_v1.0.0-bad.txt#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Version\":\"v1.0.0-bad\"\n}\n```\n\n----------------------------------------\n\nTITLE: Empty Go package declaration\nDESCRIPTION: This snippet contains an empty Go package declaration for the 'm' module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_hash.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage m\n```\n\n----------------------------------------\n\nTITLE: Platform-specific SVN checkout commands\nDESCRIPTION: Executes SVN checkout commands with file URL format adjusted for Windows vs. non-Windows platforms. Uses conditional execution based on the GOOS environment variable.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/test2-svn-git.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[GOOS:windows] svn checkout file:///$ROOT .\n[!GOOS:windows] svn checkout file://$ROOT .\n```\n\n----------------------------------------\n\nTITLE: Berkeley Packet Filter (BPF) Functions in syscall Package for NetBSD ARM64\nDESCRIPTION: These functions provide control of Berkeley Packet Filter (BPF) devices, allowing packet capture and network monitoring with various filtering options and configurations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_78\n\nLANGUAGE: Go\nCODE:\n```\nfunc SetBpf(int, []BpfInsn) error\nfunc SetBpfBuflen(int, int) (int, error)\nfunc SetBpfDatalink(int, int) (int, error)\nfunc SetBpfHeadercmpl(int, int) error\nfunc SetBpfImmediate(int, int) error\nfunc SetBpfInterface(int, string) error\nfunc SetBpfPromisc(int, int) error\nfunc SetBpfTimeout(int, *Timeval) error\n```\n\n----------------------------------------\n\nTITLE: Testing Package Output Ordering in Go\nDESCRIPTION: This test function in pkg1 introduces a delay to demonstrate that package output ordering is maintained even when pkg2 might finish before pkg1. It imports the testing and time packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_print.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage pkg1\n\nimport (\n\t\"testing\"\n\t\"time\"\n)\n\nfunc Test(t *testing.T) {\n\t// This sleep makes it more likely that pkg2 will be ready before pkg1,\n\t// which previously would have made this test fail, because pkg2 would\n\t// be printed before pkg1.\n\t// Now that there is proper ordering, the Sleep should not matter.\n\t// In particular, the Sleep does not make the test pass and won't\n\t// be a problem on slow builders.\n\ttime.Sleep(1*time.Second)\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Basic go.mod file declaring the module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query_main.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule rsc.io/quote\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Constant Declarations in Go\nDESCRIPTION: Multiple constant declarations with various types including integers, floats, and strings. Includes both typed and untyped (ideal) constants.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/api/testdata/src/pkg/p1/golden.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nconst A = 1\nconst A64 int64\nconst AIsLowerA = 11\nconst B0 = 2\nconst ConstChase2 = 11\nconst ConversionConst MyInt\nconst FloatConst = 1.5  // 3/2\nconst StrConst = \"foo\"\n```\n\n----------------------------------------\n\nTITLE: Testing Go Vet Help Output\nDESCRIPTION: Checks the help output format for go vet command, ensuring it displays usage instructions and references to detailed help\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/help.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n! go vet -h\nstderr 'usage: go vet .*'\nstderr 'Run \\'go help vet\\' for details.'\nstderr 'Run \\'go tool vet help\\' for a full list of flags and analyzers.'\nstderr 'Run \\'go tool vet -help\\' for an overview.'\n```\n\n----------------------------------------\n\nTITLE: Testing Non-recoverable Error Handling During Fuzzing Minimization in Go\nDESCRIPTION: Shell script that tests how the fuzzing engine handles non-recoverable errors during minimization. It verifies appropriate error reporting and input preservation when a process terminates unexpectedly.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_minimize_interesting.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n! exec ./fuzz.test$GOEXE -test.fuzzcachedir=$GOCACHE/fuzz -test.fuzz=FuzzMinimizerNonrecoverableCrashInMinimization -test.run=^$ -test.fuzztime=10000x -test.parallel=1\n! stdout '^ok'\nstdout -count=1 'fuzzing process hung or terminated unexpectedly while minimizing'\nstdout -count=1 'EOF'\nstdout FAIL\n# Check that the input written to testdata will reproduce the error.\ngo run check_testdata/check_testdata.go FuzzMinimizerNonrecoverableCrashInMinimization 1\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Documentation Lookup in Different GOPATH Configurations\nDESCRIPTION: A test script that verifies how 'go doc' finds and displays package documentation in different module configurations. It tests behavior when modules are inside GOPATH/src, outside GOPATH/src, and when packages with same import paths exist in GOPATH.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_doc.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GO111MODULE=on\nenv GOFLAGS=-mod=mod\n[short] skip\n\n# Check when module x is inside GOPATH/src.\ngo doc y\nstdout 'Package y is.*alphabet'\nstdout 'import \"x/y\"'\ngo doc x/y\nstdout 'Package y is.*alphabet'\n! go doc quote.Hello\nstderr 'doc: symbol quote is not a type' # because quote is not in local cache\ngo list rsc.io/quote # now it is\ngo doc quote.Hello\nstdout 'Hello returns a greeting'\ngo doc quote\nstdout 'Package quote collects pithy sayings.'\n\n# Double-check when module x is outside GOPATH/src.\nenv GOPATH=$WORK/emptygopath\ngo doc x/y\nstdout 'Package y is.*alphabet'\ngo doc y\nstdout 'Package y is.*alphabet'\n\n# Triple-check when module x is outside GOPATH/src,\n# but other packages with same import paths are in GOPATH/src.\n# Since go doc is running in module mode here, packages in active module\n# should be preferred over packages in GOPATH. See golang.org/issue/28992.\nenv GOPATH=$WORK/gopath2\ngo doc x/y\n! stdout 'Package y is.*GOPATH'\nstdout 'Package y is.*alphabet'\ngo doc rsc.io/quote\n! stdout 'Package quote is located in a GOPATH workspace.'\nstdout 'Package quote collects pithy sayings.'\n\n# Check that a sensible error message is printed when a package is not found.\nenv GOPROXY=off\n! go doc example.com/hello\nstderr '^doc: cannot find module providing package example.com/hello: module lookup disabled by GOPROXY=off$'\n\n# When in a module with a vendor directory, doc should use the vendored copies\n# of the packages. 'std' and 'cmd' are convenient examples of such modules.\n#\n# When in those modules, the \"// import\" comment should refer to the same import\n# path used in source code, not to the absolute path relative to GOROOT.\n\ncd $GOROOT/src\nenv GOFLAGS=\nenv GOWORK=off\ngo doc cryptobyte\nstdout '// import \"golang.org/x/crypto/cryptobyte\"'\n\ncd $GOROOT/src/cmd/go\ngo doc modfile\nstdout '// import \"golang.org/x/mod/modfile\"'\n\n# When outside of the 'std' module, its vendored packages\n# remain accessible using the 'vendor/' prefix, but report\n# the correct \"// import\" comment as used within std.\ncd $GOPATH\ngo doc vendor/golang.org/x/crypto/cryptobyte\nstdout '// import \"vendor/golang.org/x/crypto/cryptobyte\"'\n\ngo doc cmd/vendor/golang.org/x/mod/modfile\nstdout '// import \"cmd/vendor/golang.org/x/mod/modfile\"'\n```\n\n----------------------------------------\n\nTITLE: Defining Empty Package for Module 'b' Version 2\nDESCRIPTION: This Go file defines an empty package for module 'b' version 2.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_pseudo_artifact.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\npackage b\n```\n\n----------------------------------------\n\nTITLE: Crypto Package Constants\nDESCRIPTION: Definition of BLAKE2 cryptographic hash function constants with different variants and sizes.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.9.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nconst (\n    BLAKE2b_256 = 17\n    BLAKE2b_384 = 18\n    BLAKE2b_512 = 19\n    BLAKE2s_256 = 16\n)\n```\n\n----------------------------------------\n\nTITLE: Defining module with cmd/vendor import\nDESCRIPTION: Defines a module that tries to explicitly import a package from cmd/vendor, which should be disallowed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_std_vendor.txt#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nmodule importcmd\n```\n\nLANGUAGE: go\nCODE:\n```\npackage importcmd\n\nimport _ \"cmd/vendor/golang.org/x/tools/go/analysis\"\n```\n\n----------------------------------------\n\nTITLE: Defining Memory Mapping Flags in Go for NetBSD ARM\nDESCRIPTION: These constants define various flags used in memory mapping operations on NetBSD ARM systems. They control aspects such as sharing, inheritance, and alignment of mapped memory regions.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_30\n\nLANGUAGE: Go\nCODE:\n```\nconst MAP_SHARED = 1\nconst MAP_PRIVATE = 2\nconst MAP_FIXED = 16\nconst MAP_RENAME = 32\nconst MAP_NORESERVE = 64\nconst MAP_INHERIT = 128\nconst MAP_HASSEMAPHORE = 512\nconst MAP_TRYFIXED = 1024\nconst MAP_WIRED = 2048\nconst MAP_ANON = 4096\nconst MAP_STACK = 8192\n```\n\n----------------------------------------\n\nTITLE: Go Test File with Simple Test Function\nDESCRIPTION: A simple Go test file that prints a message when the test is run. This is used to verify that 'go test' works with file arguments.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_outside.txt#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"testing\"\n)\n\nfunc Test(t *testing.T) {\n\tfmt.Println(\"stdonly was tested\")\n}\n```\n\n----------------------------------------\n\nTITLE: go.work File with Unparsable Directive\nDESCRIPTION: Contents of go.work.unparsable.txt file, containing an unknown directive 'notadirective'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_errors_pos.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n\n\n\n\nnotadirective\n```\n\n----------------------------------------\n\nTITLE: Testing Go Build Command Error Reporting\nDESCRIPTION: Verifies error reporting behavior for go build command when encountering package conflicts.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_run_pkgerror.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n! go build\nstderr '^found packages m \\(m\\.go\\) and main \\(main\\.go\\) in '$PWD'$'\n```\n\n----------------------------------------\n\nTITLE: NetBSD ARM64 Routing Message Structures Definition in Go\nDESCRIPTION: Defines structures for routing messages including RtMsghdr, RtMetrics, and RouteMessage. These are used for manipulating the kernel routing tables.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_99\n\nLANGUAGE: go\nCODE:\n```\ntype RtMsghdr struct {\n\tAddrs int32\n\tErrno int32\n}\n\ntype RtMetrics struct {\n\tLocks uint64\n\tMtu uint64\n\tHopcount uint64\n\tRecvpipe uint64\n\tSendpipe uint64\n\tSsthresh uint64\n\tRtt uint64\n\tRttvar uint64\n\tPksent int64\n\tExpire int64\n}\n\ntype RouteMessage struct {\n\tHeader RtMsghdr\n\tData []uint8\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module definition specifying Go version 1.21.99\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_loop.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule m\ngo 1.21.99\n```\n\n----------------------------------------\n\nTITLE: Go Source File with Import\nDESCRIPTION: Go source file containing a blank import of an indirect dependency\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_direct_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage direct\n\nimport _ \"patch.example.com/indirect\"\n```\n\n----------------------------------------\n\nTITLE: Mocking Gofmt Executable with Shell Script\nDESCRIPTION: A shell script that simulates the 'gofmt' command by echoing a message. This script is noted as unused, suggesting it's a placeholder in the mock toolchain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.solaris-amd64.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: IP Socket Option Constants in Go for NetBSD ARM64\nDESCRIPTION: Constants for IP socket options in NetBSD ARM64. These are used with setsockopt/getsockopt system calls to configure IP network behavior.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_133\n\nLANGUAGE: Go\nCODE:\n```\nconst IP_ADD_MEMBERSHIP = 12\nconst IP_DEFAULT_MULTICAST_LOOP = 1\nconst IP_DEFAULT_MULTICAST_TTL = 1\nconst IP_DF = 16384\nconst IP_DROP_MEMBERSHIP = 13\nconst IP_EF = 32768\nconst IP_ERRORMTU = 21\nconst IP_HDRINCL = 2\nconst IP_IPSEC_POLICY = 22\nconst IP_MAX_MEMBERSHIPS = 20\nconst IP_MAXPACKET = 65535\nconst IP_MF = 8192\nconst IP_MINFRAGSIZE = 69\nconst IP_MINTTL = 24\nconst IP_MSS = 576\nconst IP_MULTICAST_IF = 9\nconst IP_MULTICAST_LOOP = 11\nconst IP_MULTICAST_TTL = 10\nconst IP_OFFMASK = 8191\nconst IP_OPTIONS = 1\nconst IP_PORTRANGE = 19\nconst IP_PORTRANGE_DEFAULT = 0\nconst IP_PORTRANGE_HIGH = 1\nconst IP_PORTRANGE_LOW = 2\nconst IP_RECVDSTADDR = 7\nconst IP_RECVIF = 20\nconst IP_RECVOPTS = 5\nconst IP_RECVRETOPTS = 6\nconst IP_RECVTTL = 23\nconst IP_RETOPTS = 8\nconst IP_RF = 32768\nconst IP_TOS = 3\nconst IP_TTL = 4\n```\n\n----------------------------------------\n\nTITLE: Initial go.mod File\nDESCRIPTION: The initial go.mod file used in the tests, specifying the module name and Go version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_ambiguous_pkg.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nmodule test\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Declaring FreeBSD Structure Size Constants - Go\nDESCRIPTION: Defines constants for the sizes of key FreeBSD kernel structures (e.g., SizeofBpfHdr, SizeofIfData, SizeofIfMsghdr, SizeofSockaddrDatalink, SizeofSockaddrUnix), used for validating data alignment and marshaling native structs to and from Go memory. These are typically required when using unsafe or cgo-based syscalls for low-level device access or packet manipulation.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_13\n\nLANGUAGE: Go\nCODE:\n```\nconst SizeofBpfHdr = 32\nconst SizeofIfData = 96\nconst SizeofIfMsghdr = 112\nconst SizeofSockaddrDatalink = 54\nconst SizeofSockaddrUnix = 106\n\n```\n\n----------------------------------------\n\nTITLE: Comparing go.mod Files Before and After Tidy in Shell\nDESCRIPTION: This shell script copies the original go.mod file, runs 'go mod tidy', and then compares the original and modified files to check for any changes in module dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_oldgo.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncp go.mod go.mod.orig\ngo mod tidy\ncmp go.mod go.mod.orig\n```\n\n----------------------------------------\n\nTITLE: HTTP status codes and client methods in Go\nDESCRIPTION: Constant definition for HTTP status code \"Too Early\" (425) and CloseIdleConnections method for HTTP client.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.12.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nconst StatusTooEarly = 425\nconst StatusTooEarly ideal-int\nmethod (*Client) CloseIdleConnections()\n```\n\n----------------------------------------\n\nTITLE: Defining RTV (Routing Value) Constants in Go Syscall Package for Darwin-arm64-cgo\nDESCRIPTION: Constants for routing metric values used in network routing operations. These flags specify which metrics are present in routing messages, such as MTU, hop count, and various timing metrics.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_177\n\nLANGUAGE: Go\nCODE:\n```\nconst RTV_MTU = 1\nconst RTV_HOPCOUNT = 2\nconst RTV_EXPIRE = 4\nconst RTV_RPIPE = 8\nconst RTV_SPIPE = 16\nconst RTV_SSTHRESH = 32\nconst RTV_RTT = 64\nconst RTV_RTTVAR = 128\n```\n\n----------------------------------------\n\nTITLE: Module Version Information in JSON Format\nDESCRIPTION: JSON metadata containing version information for the module, defining it as v1.0.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badfile4_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.0.0\"}\n```\n\n----------------------------------------\n\nTITLE: Deprecated syscall Functions for Linux\nDESCRIPTION: List of deprecated syscall functions for Linux, including LSF (Linux Socket Filter) operations. These are marked for removal in future Go versions.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_36\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (linux-386), func AttachLsf //deprecated\npkg syscall (linux-386), func DetachLsf //deprecated\npkg syscall (linux-386), func LsfJump //deprecated\npkg syscall (linux-386), func LsfSocket //deprecated\npkg syscall (linux-386), func LsfStmt //deprecated\npkg syscall (linux-386), func SetLsfPromisc //deprecated\npkg syscall (linux-386), func StringSlicePtr //deprecated\n```\n\n----------------------------------------\n\nTITLE: Defining NetBSD ARM64 Socket I/O Control Constants in Go Syscall Package\nDESCRIPTION: Socket I/O control constants (ioctls) for NetBSD. These define operations for manipulating network interfaces, multicast group membership, routes, addresses, and socket parameters like high water marks.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_58\n\nLANGUAGE: Go\nCODE:\n```\nconst SIOCADDMULTI = 2156947761\nconst SIOCADDMULTI ideal-int\nconst SIOCADDRT = 2151182858\nconst SIOCADDRT ideal-int\nconst SIOCAIFADDR = 2151704858\nconst SIOCAIFADDR ideal-int\nconst SIOCALIFADDR = 2165860636\nconst SIOCALIFADDR ideal-int\nconst SIOCATMARK = 1074033415\nconst SIOCATMARK ideal-int\nconst SIOCDELMULTI = 2156947762\nconst SIOCDELMULTI ideal-int\nconst SIOCDELRT = 2151182859\nconst SIOCDELRT ideal-int\nconst SIOCDIFADDR = 2156947737\nconst SIOCDIFADDR ideal-int\nconst SIOCDIFPHYADDR = 2156947785\nconst SIOCDIFPHYADDR ideal-int\nconst SIOCDLIFADDR = 2165860638\nconst SIOCDLIFADDR ideal-int\nconst SIOCGDRVSPEC = 3223873915\nconst SIOCGDRVSPEC ideal-int\nconst SIOCGETPFSYNC = 3230689784\nconst SIOCGETPFSYNC ideal-int\nconst SIOCGETSGCNT = 3223352628\nconst SIOCGETSGCNT ideal-int\nconst SIOCGETVIFCNT = 3223876915\nconst SIOCGETVIFCNT ideal-int\nconst SIOCGHIWAT = 1074033409\nconst SIOCGHIWAT ideal-int\nconst SIOCGIFADDR = 3230689569\nconst SIOCGIFADDR ideal-int\nconst SIOCGIFADDRPREF = 3231213856\nconst SIOCGIFADDRPREF ideal-int\nconst SIOCGIFALIAS = 3225446683\nconst SIOCGIFALIAS ideal-int\nconst SIOCGIFBRDADDR = 3230689571\nconst SIOCGIFBRDADDR ideal-int\nconst SIOCGIFCAP = 3223349622\nconst SIOCGIFCAP ideal-int\nconst SIOCGIFCONF = 3222300966\nconst SIOCGIFCONF ideal-int\nconst SIOCGIFDATA = 3231213957\nconst SIOCGIFDATA ideal-int\nconst SIOCGIFDLT = 3230689655\nconst SIOCGIFDLT ideal-int\nconst SIOCGIFDSTADDR = 3230689570\nconst SIOCGIFDSTADDR ideal-int\nconst SIOCGIFFLAGS = 3230689553\nconst SIOCGIFFLAGS ideal-int\nconst SIOCGIFGENERIC = 3230689594\n```\n\n----------------------------------------\n\nTITLE: Testing Go Standard Library Package Caching\nDESCRIPTION: This script checks if the 'math' package from the Go standard library is cached correctly. It uses 'go list' to refresh the cache, enables filesystem tracing, and then verifies that subsequent accesses don't read from the filesystem.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/index.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# Check that standard library packages are cached.\ngo list -json math # refresh cache\nenv GODEBUG=gofsystrace=1,gofsystracelog=fsys.log\ngo list -json math\n! grep math/abs.go fsys.log\ngrep 'openIndexPackage .*[\\/]math$' fsys.log\n```\n\n----------------------------------------\n\nTITLE: Declaring a Simple Go Package\nDESCRIPTION: This Go source file (`p.go`) declares a basic package named `p`. It serves as a minimal placeholder file within the `example.com/retract/self/prev` module structure.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_prev_v1.9.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage p\n```\n\n----------------------------------------\n\nTITLE: Executing Go Tests for Bad Execution in Go\nDESCRIPTION: This snippet demonstrates a Go test file that causes a panic during initialization. It's designed to fail the test execution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_badtest.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage badexec\n\nfunc init() {\n\tpanic(\"badexec\")\n}\n```\n\n----------------------------------------\n\nTITLE: Empty Go Package Definition\nDESCRIPTION: An empty Go package definition file that declares itself as package 'x'. This is used to test package structure handling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_patterns_outside_gopath.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage x\n```\n\n----------------------------------------\n\nTITLE: Test package that imports errors\nDESCRIPTION: A Go package in the 'unused' module that imports the standard library 'errors' package, used to test how the list command handles packages in indirect dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_patterns.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage useerrors\nimport _ \"errors\"\n```\n\n----------------------------------------\n\nTITLE: Empty Passing Go Test Implementation\nDESCRIPTION: Empty Go test file that will pass by default due to lack of test cases\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_status.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage y\n```\n\n----------------------------------------\n\nTITLE: Module Definition in .mod File\nDESCRIPTION: The module definition for the golang.org/toolchain module in the .mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-mips64x.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: HTML Rendered Output\nDESCRIPTION: The content rendered as HTML with proper ordered list tags and paragraph formatting.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list4.txt#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<p>Text.\n<ol>\n<li>List\n</ol>\n<p>2. Not indented, not a list.\n<ol>\n<li value=\"3\">Another list.\n</ol>\n```\n\n----------------------------------------\n\nTITLE: Memory Control Lock Constants in Go for Darwin ARM64\nDESCRIPTION: Constants for mlockall() which locks memory pages. MCL_CURRENT locks current mappings, MCL_FUTURE locks future mappings.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_77\n\nLANGUAGE: Go\nCODE:\n```\nconst MCL_CURRENT = 1\nconst MCL_FUTURE = 2\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Non-Declaration Statement Outside Function Body in Go\nDESCRIPTION: This Go file contains a non-declaration statement outside a function body, which is a syntax error in Go. It's used to exercise issue #7108.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_badtest.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage notest\n\nfunc hello() {\n\tprintln(\"hello world\")\n}\nHello world\n```\n\n----------------------------------------\n\nTITLE: Testing Mixed Anchors in Go Regexps\nDESCRIPTION: Tests patterns with different combinations of anchors like ^$^ and $^$. These tests verify how the regex engine handles combinations of start and end anchors in different orders.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_23\n\nLANGUAGE: regexp\nCODE:\n```\n^$^\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:^$^)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:^$^)\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:^$^)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n$^$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:$^$)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:$^$)\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:$^$)$\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Go Module\nDESCRIPTION: These go.mod files define simple modules for example.net/b and example.net/c without any dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_extra.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/b\n\ngo 1.15\n```\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/c\n\ngo 1.15\n```\n\n----------------------------------------\n\nTITLE: HTML Heading Implementation\nDESCRIPTION: Shows the HTML equivalent of the heading with matching identifier\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/head3.txt#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<h5 id=\"hdr-Heading\">Heading</h5>\n```\n\n----------------------------------------\n\nTITLE: Defining Structs for System Call in Go\nDESCRIPTION: This snippet defines structs such as Stat_t, Dirent, Statfs_t, and RawSockaddrUnix that are used in syscall operations across different operating systems like FreeBSD, OpenBSD, and Windows in the Go programming language. These structures hold filesystem metadata, directory entries, and socket address information. Operating system specific details like padding and byte alignment are included to ensure compatibility.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.12.txt#2025-04-22_snippet_14\n\nLANGUAGE: Go\nCODE:\n```\ntype Stat_t struct {\n    Nlink uint64\n    Padding0 int16\n    Padding1 int32\n    Rdev uint64\n    Spare [10]uint64\n}\n\ntype Dirent struct {\n    Fileno uint64\n    Namlen uint16\n    Off int64\n    Pad0 uint8\n    Pad1 uint16\n}\n\ntype Statfs_t struct {\n    Mntfromname [1024]int8\n    Mntonname [1024]int8\n}\n\ntype RawSockaddrAny struct {\n    Pad [100]int8\n}\n\ntype RawSockaddrUnix struct {\n    Family uint16\n    Path [108]int8\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Rune Fuzzing in Go\nDESCRIPTION: This fuzz test function demonstrates Go's fuzzing capabilities with rune inputs. It panics when the input is not 0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_crash.txt#2025-04-22_snippet_15\n\nLANGUAGE: Go\nCODE:\n```\nfunc FuzzRune(f *testing.F) {\n\tf.Add(rune(0))\n\tf.Fuzz(func(t *testing.T, a rune) {\n\t\tif a != 0 {\n\t\t\tpanic(\"this input caused a crash!\")\n\t\t}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Debug ELF Constants and Types - Go\nDESCRIPTION: Constants for ELF machine types and RISCV relocations, including machine architecture identifiers and relocation types. These are used for parsing and working with ELF format binary files.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.11.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nconst (\n    EM_TI_PRU = 144\n    EM_TMM_GPP = 96\n    EM_TPC = 98\n    // ... other EM_ constants\n\n    R_RISCV_32 = 1\n    R_RISCV_64 = 2\n    // ... other R_RISCV constants\n)\n\ntype R_RISCV int\n```\n\n----------------------------------------\n\nTITLE: Defining Go Toolchain Module Information JSON\nDESCRIPTION: JSON file that provides version information for the Go toolchain module, specifying the version as v0.0.1-go1.999testmod.linux-s390x.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-s390x.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.999testmod.linux-s390x\"}\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Git Repository\nDESCRIPTION: Creates a new Git repository with configuration for author and committer information. Sets up the initial repository structure with an empty README file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/hg/hgrepo1.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir git\ncd git\n\nenv GIT_AUTHOR_NAME='Russ Cox'\nenv GIT_AUTHOR_EMAIL='rsc@golang.org'\nenv GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME\nenv GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL\n\ngit init\n```\n\n----------------------------------------\n\nTITLE: Adding go.mod file commit\nDESCRIPTION: Creates a second commit that adds the go.mod file to the repository.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/issue47650.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit add go.mod\ngit commit -m 'add go.mod'\n```\n\n----------------------------------------\n\nTITLE: Executing Go List Command in Shell\nDESCRIPTION: This shell script snippet uses the `go list` command with custom formatting to fetch the import path and directory of the testdata. It checks stdout and stderr to ensure that testdata isn't wrongly recognized as a package. No additional dependencies are needed, but Go must be installed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_testdata.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo list -f '{{.ImportPath}} {{.Dir}}' testdata\n! stderr 'found package testdata in multiple modules'\nstdout 'testdata '$WORK${/}'gopath'${/}'src'\n```\n\n----------------------------------------\n\nTITLE: Go Package with Indirect Missing Import (Go)\nDESCRIPTION: This Go source file defines a package named 'indirect'. It imports the 'example.com/direct' package. Because 'example.com/direct' imports a missing package, this 'indirect' package introduces an indirect dependency on the non-existent package ('example.com/notfound') for testing purposes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_bad_import.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n-- example.com/indirect/indirect.go --\npackage indirect\nimport _ \"example.com/direct\"\n```\n\n----------------------------------------\n\nTITLE: C Implementation for Syso File\nDESCRIPTION: Empty C implementation of objTestImpl function that will be compiled into a syso file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/link_syso_issue33139.txt#2025-04-22_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nvoid objTestImpl() { /* Empty */ }\n```\n\n----------------------------------------\n\nTITLE: Importing External Package in Go Module\nDESCRIPTION: This snippet demonstrates a Go file that imports an external package 'rsc.io/quote' as a blank import, typically used for side effects.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\npackage m\n\nimport _ \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: Testing Function F in Package 'p' (Go)\nDESCRIPTION: This Go file defines a test function 'Test' for package 'p'. It imports the standard 'testing' package. The 'Test' function simply calls the 'F' function from the package under test ('p'). This test ensures that 'F' can be called and serves as the entry point for coverage analysis when the test binary is executed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_dash_c.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n-- p_test.go --\npackage p\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\tF()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Routing Table Constants in Go for NetBSD ARM64\nDESCRIPTION: This snippet defines constants for routing table flags, address types, and message types used in the NetBSD ARM64 syscall package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_141\n\nLANGUAGE: Go\nCODE:\n```\nconst (\n    RTA_IFP = 0\n    RTA_NETMASK = 4\n    RTA_TAG = 256\n    RTAX_AUTHOR = 6\n    RTAX_BRD = 7\n    RTAX_DST = 0\n    RTAX_GATEWAY = 1\n    RTAX_GENMASK = 3\n    RTAX_IFA = 5\n    RTAX_IFP = 4\n    RTAX_MAX = 9\n    RTAX_NETMASK = 2\n    RTAX_TAG = 8\n)\n```\n\n----------------------------------------\n\nTITLE: go.work File with First Line Error\nDESCRIPTION: Contents of go.work.firstlineerr.txt file, showing an unknown godebug flag 'bar' on the first line.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_errors_pos.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ngodebug bar=1\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Configuration\nDESCRIPTION: Specifies the module name and Go version requirement for rsc.io/needgo118.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo118_v0.0.1.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule rsc.io/needgo118\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Defining Termios Structure in Go for NetBSD\nDESCRIPTION: This structure defines terminal I/O settings for NetBSD. It includes flags for input, output, control, and local modes, as well as control characters and speed settings.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_22\n\nLANGUAGE: Go\nCODE:\n```\ntype Termios struct {\n\tIflag  uint32\n\tOflag  uint32\n\tCflag  uint32\n\tLflag  uint32\n\tCc     [20]uint8\n\tIspeed int32\n\tOspeed int32\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IP and IPv6 Firewall Constants in Go for Darwin ARM64 CGO\nDESCRIPTION: This snippet defines constants related to IP and IPv6 firewalls. These are used for firewall configuration and management in network programming.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_156\n\nLANGUAGE: Go\nCODE:\n```\nconst IPV6_FW_ADD = 30\nconst IPV6_FW_ADD ideal-int\nconst IPV6_FW_DEL = 31\nconst IPV6_FW_DEL ideal-int\nconst IPV6_FW_FLUSH = 32\nconst IPV6_FW_FLUSH ideal-int\n// ... more firewall constants\n```\n\n----------------------------------------\n\nTITLE: Go Toolchain Version Information in JSON\nDESCRIPTION: Contains version metadata for the Go toolchain in JSON format, specifying test version v0.0.1-go1.999testmod for Plan9 on AMD64 architecture.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.plan9-amd64.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.999testmod.plan9-amd64\"}\n```\n\n----------------------------------------\n\nTITLE: HTML Template for Valid Repository in Subdirectory\nDESCRIPTION: HTML template with a go-import meta tag for a valid Git repository in a subdirectory. This maps the module path 'vcs-test.golang.org/go/missingrepo/missingrepo-git/notmissing' to an existing Git repository.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/go/missingrepo.txt#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<meta name=\"go-import\" content=\"vcs-test.golang.org/go/missingrepo/missingrepo-git/notmissing git https://vcs-test.golang.org/git/mainonly\">\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP/2 Debugging using http2debug GODEBUG Setting (Go 1.6)\nDESCRIPTION: Introduced in Go 1.6, this setting enables verbose logging for HTTP/2 activity in the net/http package. Setting http2debug=1 or http2debug=2 enables different levels of debug output. Set via GODEBUG environment variable (e.g., GODEBUG=http2debug=1).\nSOURCE: https://github.com/golang/go/blob/master/doc/godebug.md#2025-04-22_snippet_32\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp2debug\n```\n\n----------------------------------------\n\nTITLE: Defining Empty Package Foo\nDESCRIPTION: This snippet shows an empty Go file for package 'foo'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_module_not_in_go_work.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage foo\n```\n\n----------------------------------------\n\nTITLE: File Operation Constants for NetBSD ARM64\nDESCRIPTION: Defines constants for file operations and locking mechanisms in NetBSD ARM64. Includes file descriptor operations, locking modes, and control flags.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_24\n\nLANGUAGE: Go\nCODE:\n```\nconst (\n    F_DUPFD = 0\n    F_GETFD = 1\n    F_SETFD = 2\n    F_GETFL = 3\n    F_SETFL = 4\n    F_GETOWN = 5\n    F_SETOWN = 6\n    F_GETLK = 7\n    F_SETLK = 8\n    F_SETLKW = 9\n    FD_CLOEXEC = 1\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Nushu RangeTable to unicode package\nDESCRIPTION: Adds support for the Nüshu script block by defining a new RangeTable in the unicode package. This allows identifying and handling characters from this Unicode block.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.10.txt#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\npkg unicode, var Nushu *RangeTable\n```\n\n----------------------------------------\n\nTITLE: Specifying Module Version Metadata (JSON)\nDESCRIPTION: This JSON snippet provides metadata associated with the module, indicating that the latest tagged version is 'v1.9.0'. This version is explicitly retracted in the corresponding 'go.mod' file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_pseudo_v1.9.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n-- .info --\n{\"Version\":\"v1.9.0\"}\n\n```\n\n----------------------------------------\n\nTITLE: Markdown Section Header with HTML Anchor\nDESCRIPTION: Defines a second-level header for the standard library section with an HTML anchor tag for linking.\nSOURCE: https://github.com/golang/go/blob/master/doc/next/6-stdlib/0-heading.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Standard library {#library}\n```\n\n----------------------------------------\n\nTITLE: Windows Batch File for Golang Execution\nDESCRIPTION: A simple Windows batch file that echoes a message indicating the test version of Go being used.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.windows-386.txt#2025-04-22_snippet_4\n\nLANGUAGE: batch\nCODE:\n```\n@echo go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Vendor Modules Text File\nDESCRIPTION: Defines vendor module information for testing vendor package resolution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_dot.txt#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n# pkg v0.0.0\npkg\n```\n\n----------------------------------------\n\nTITLE: Importing fmt Package\nDESCRIPTION: A single line Go import statement for the fmt standard library package, commonly used for formatted I/O operations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/internal/imports/testdata/test/want.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfmt\n```\n\n----------------------------------------\n\nTITLE: Specifying Module Version Information - JSON\nDESCRIPTION: Specifies the module's version metadata in JSON format. The Version key indicates the current pre-release version (v1.9.1-pre) which is higher than any previously released version. This metadata is typically used internally by Go tooling to handle module upgrades and @latest resolution. No other fields are present.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_prerelease_v1.9.1-pre.txt#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\\\"Version\\\":\\\"v1.9.1-pre\\\"}\n\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Transaction Isolation Level Constants - Go\nDESCRIPTION: These constants define transaction isolation levels, specifying concurrency and consistency semantics for database transactions in database/sql and database/sql/driver. Used as values for sql.TxOptions and driver.TxOptions.Isolation fields. Enumerates standard SQL isolation guarantees for portability across database engines.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.8.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nconst LevelDefault = 0\nconst LevelLinearizable = 7\nconst LevelReadCommitted = 2\nconst LevelReadUncommitted = 1\nconst LevelRepeatableRead = 4\nconst LevelSerializable = 6\nconst LevelSnapshot = 5\nconst LevelWriteCommitted = 3\n```\n\nLANGUAGE: Go\nCODE:\n```\nconst LevelDefault IsolationLevel\nconst LevelLinearizable IsolationLevel\nconst LevelReadCommitted IsolationLevel\nconst LevelReadUncommitted IsolationLevel\nconst LevelRepeatableRead IsolationLevel\nconst LevelSerializable IsolationLevel\nconst LevelSnapshot IsolationLevel\nconst LevelWriteCommitted IsolationLevel\n```\n\n----------------------------------------\n\nTITLE: Skip Test Implementation in Go\nDESCRIPTION: A simple test function that demonstrates the skip functionality in Go testing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage skipper\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\tt.Skip(\"skipping\")\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Unicode Unassigned Category Range Table - Go\nDESCRIPTION: Declares a RangeTable pointer for the Unicode Cn (Unassigned) category that defines the code point ranges for unassigned characters.\nSOURCE: https://github.com/golang/go/blob/master/api/next/70780.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar Cn *RangeTable\n```\n\n----------------------------------------\n\nTITLE: Module Definition in .mod File\nDESCRIPTION: Defines the module name in the .mod file for the Go toolchain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.netbsd-arm64.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Go file with constant definition\nDESCRIPTION: A Go file containing a constant definition used by the main program file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_dirs.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\nconst msg = \"hello world\"\n```\n\n----------------------------------------\n\nTITLE: Go Module File\nDESCRIPTION: A Go module definition file specifying the module name 'm' and Go version 1.16.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_output.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Package Import Example\nDESCRIPTION: Go source file demonstrating blank import of rsc.io/quote package\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_patterns.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage use\n\nimport _ \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: Go Module Configuration\nDESCRIPTION: Go module configuration for the test project. It defines the module name as 'M' and requires Go 1.21.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverpkg_partial.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nmodule M\n\ngo 1.21\n```\n\n----------------------------------------\n\nTITLE: Main Package with Duplicate Imports\nDESCRIPTION: Main package demonstrating duplicate package import scenario where a package is imported both directly and through vendor directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_vendor_dup_err.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t_ \"dupload/p2\"\n\t_ \"p\"\n)\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Darwin-specific DWARF reader implementation\nDESCRIPTION: Platform-specific implementation for reading DWARF debug information from Mach-O binaries on Darwin (macOS) systems. Used by the list-dwarf utility.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_trimpath_cgo.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"debug/dwarf\"\n\t\"debug/macho\"\n)\n\nfunc readDWARF(exePath string) (*dwarf.Data, error) {\n\tmachoFile, err := macho.Open(exePath)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer machoFile.Close()\n\treturn machoFile.DWARF()\n}\n```\n\n----------------------------------------\n\nTITLE: Go Test Runner Implementation\nDESCRIPTION: A Go program that executes Go commands with modified GOPATH environment variables. Supports operations like identity, slash replacement, uppercase, and lowercase conversions of GOPATH.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cd_gopath_different.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"strings\"\n)\n\nfunc main() {\n\tdir := os.Args[1]\n\tgopath := os.Args[2]\n\tswitch os.Args[3] {\n\t\tcase \"IDENTITY\":\n\t\tcase \"REPLACE_SLASH\": gopath = strings.ReplaceAll(gopath, `\\`, `/`)\n\t\tcase \"UPPER\": gopath = strings.ToUpper(gopath)\n\t\tcase \"LOWER\": gopath = strings.ToLower(gopath)\n\t\tdefault: fmt.Fprintln(os.Stderr, \"bad op\"); os.Exit(1)\n\t}\n\tcmd := exec.Command(\"go\", os.Args[4:]...)\n\tcmd.Dir = dir\n\tcmd.Env = append(os.Environ(), \"GOPATH=\"+gopath)\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n\tif err := cmd.Run(); err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Go Assembly Implementation\nDESCRIPTION: A Go assembly file containing a simple function that will trigger the cgo compatibility error when used with a cgo-enabled package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_asm_error.txt#2025-04-22_snippet_3\n\nLANGUAGE: assembly\nCODE:\n```\nTEXT asm(SB),$0\n\tRET\n```\n\n----------------------------------------\n\nTITLE: Running Go Test with JSON Output\nDESCRIPTION: Executes the 'go test' command with the -json flag to generate JSON-formatted output for all tests in the current directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_issue35169.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n! go test -json .\n```\n\n----------------------------------------\n\nTITLE: Testing Validity of Pseudo-Versions Based on Retracted Versions\nDESCRIPTION: Checks that retraction does not affect the validity of existing pseudo-versions or make invalid pseudo-versions valid.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_pseudo_base.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngo get vcs-test.golang.org/git/retract-pseudo.git@v1.0.1-0.20201009173747-713affd19d7b\ngo list -m vcs-test.golang.org/git/retract-pseudo.git\nstdout '^vcs-test.golang.org/git/retract-pseudo.git v1.0.1-0.20201009173747-713affd19d7b$'\n\n! go get vcs-test.golang.org/git/retract-pseudo.git@v1.0.1-0.20201009173747-64c061ed4371\nstderr '^go: vcs-test.golang.org/git/retract-pseudo.git@v1.0.1-0.20201009173747-64c061ed4371: invalid pseudo-version: tag \\(v1.0.0\\) found on revision 64c061ed4371 is already canonical, so should not be replaced with a pseudo-version derived from that tag$'\n```\n\n----------------------------------------\n\nTITLE: Defining Termios Structure for NetBSD ARM CGO in Go\nDESCRIPTION: Definition of Termios struct fields for NetBSD ARM platform with CGO enabled. Termios is used for terminal I/O operations with fields for various terminal settings.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_33\n\nLANGUAGE: Go\nCODE:\n```\ntype Termios struct {\n\tOflag uint32\n\tOspeed int32\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Module Version Metadata - JSON\nDESCRIPTION: This .info snippet provides metadata about the module version in JSON format, listing the version as v1.0.0. This file is typically used by Go tools for version management and module resolution during builds, downloads, or proxy operations. It requires no additional dependencies and is automatically generated or referenced by official tooling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_ambiguous_other_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\\"Version\\\":\\\"v1.0.0\\\"}\n```\n\n----------------------------------------\n\nTITLE: Emulating 'gofmt' Binary Output - Go Toolchain - shell\nDESCRIPTION: This shell snippet simulates the 'gofmt' binary, simply echoing the message \\\"i am unused\\\". It is intended for use as a stub or placeholder during development or in testing environments. Requires a shell interpreter, accepts no parameters, and produces a fixed output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.freebsd-riscv64.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: Process Attribute Struct for darwin-arm64\nDESCRIPTION: Definition of the SysProcAttr struct used to configure process creation options specific to darwin-arm64 platforms when creating new processes.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_135\n\nLANGUAGE: go\nCODE:\n```\ntype SysProcAttr struct {\n\tChroot string\n\tCredential *Credential\n\tCtty int\n\tForeground bool\n\tNoctty bool\n\tPgid int\n\tPtrace bool\n\tSetctty bool\n\tSetpgid bool\n\tSetsid bool\n}\n```\n\n----------------------------------------\n\nTITLE: Git user configuration file\nDESCRIPTION: Git configuration file that sets the user name and email for test commits.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/get_issue53955.txt#2025-04-22_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n[user]\n\tname = Go Gopher\n\temail = gopher@golang.org\n```\n\n----------------------------------------\n\nTITLE: Setting up Go environment for module testing\nDESCRIPTION: This snippet sets up the Go environment for module testing by enabling modules, disabling the proxy, and turning off the checksum database.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_hash.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\nenv GOPROXY=direct\nenv GOSUMDB=off\n```\n\n----------------------------------------\n\nTITLE: Module Definition for Dependency 'c'\nDESCRIPTION: The `go.mod` file for module `c`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_import_allmod.txt#2025-04-22_snippet_12\n\nLANGUAGE: gomod\nCODE:\n```\n-- c1/go.mod --\nmodule c\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: Shell Test Script\nDESCRIPTION: Test script for validating toolchain switching behavior including basic switching, version mismatches, and infinite loop detection\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_loop.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nenv GOTOOLCHAIN=auto\nenv TESTGO_VERSION=go1.21.1\n\n# Basic switch should work.\nenv TESTGO_VERSION_SWITCH=switch\ngo version\nstdout go1.21.99\n\n# Toolchain target mismatch should be detected.\nenv TESTGO_VERSION_SWITCH=mismatch\n! go version\nstderr '^go: toolchain go1.21.1 invoked to provide go1.21.99$'\n\n# Toolchain loop should be detected.\nenv TESTGO_VERSION_SWITCH=loop\n! go version\nstderr -count=10 '^go: switching from go1.21.1 to go1.21.99 \\[depth 9[0-9]\\]$'\nstderr -count=1 '^go: switching from go1.21.1 to go1.21.99 \\[depth 100\\]$'\nstderr '^go: too many toolchain switches$'\n\n[short] skip\n\n# Internal env vars should not leak to go test or go run.\nenv TESTGO_VERSION_SWITCH=switch\ngo version\nstdout go1.21.99\ngo test\nstdout clean\ngo run .\nstdout clean\n```\n\n----------------------------------------\n\nTITLE: Terminal Baud Rate Constants in Go for NetBSD-arm64\nDESCRIPTION: Constants defining various baud rates for terminal communications on NetBSD ARM64. These B* constants are used for configuring serial communication parameters within the syscall package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_115\n\nLANGUAGE: Go\nCODE:\n```\nconst B0 = 0\nconst B50 = 50\nconst B75 = 75\nconst B110 = 110\nconst B134 = 134\nconst B150 = 150\nconst B200 = 200\nconst B300 = 300\nconst B600 = 600\nconst B1200 = 1200\nconst B1800 = 1800\nconst B2400 = 2400\nconst B4800 = 4800\nconst B7200 = 7200\nconst B9600 = 9600\nconst B14400 = 14400\nconst B19200 = 19200\nconst B28800 = 28800\nconst B38400 = 38400\nconst B57600 = 57600\nconst B76800 = 76800\nconst B115200 = 115200\nconst B230400 = 230400\nconst B460800 = 460800\nconst B921600 = 921600\n```\n\n----------------------------------------\n\nTITLE: IP Protocol Constants in Go for NetBSD ARM64\nDESCRIPTION: Constants defining IP protocol numbers for various transport and network protocols in NetBSD ARM64. These values are used in socket creation and packet handling.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_134\n\nLANGUAGE: Go\nCODE:\n```\nconst IPPROTO_AH = 51\nconst IPPROTO_CARP = 112\nconst IPPROTO_DONE = 257\nconst IPPROTO_DSTOPTS = 60\nconst IPPROTO_EGP = 8\nconst IPPROTO_ENCAP = 98\nconst IPPROTO_EON = 80\nconst IPPROTO_ESP = 50\nconst IPPROTO_ETHERIP = 97\nconst IPPROTO_FRAGMENT = 44\nconst IPPROTO_GGP = 3\nconst IPPROTO_GRE = 47\nconst IPPROTO_HOPOPTS = 0\nconst IPPROTO_ICMP = 1\nconst IPPROTO_ICMPV6 = 58\nconst IPPROTO_IDP = 22\nconst IPPROTO_IGMP = 2\nconst IPPROTO_IPCOMP = 108\nconst IPPROTO_IPIP = 4\nconst IPPROTO_IPV4 = 4\nconst IPPROTO_IPV6_ICMP = 58\nconst IPPROTO_MAX = 256\nconst IPPROTO_MAXID = 52\nconst IPPROTO_MOBILE = 55\nconst IPPROTO_NONE = 59\nconst IPPROTO_PFSYNC = 240\nconst IPPROTO_PIM = 103\nconst IPPROTO_PUP = 12\nconst IPPROTO_RAW = 255\nconst IPPROTO_ROUTING = 43\nconst IPPROTO_RSVP = 46\nconst IPPROTO_TP = 29\nconst IPPROTO_VRRP = 112\n```\n\n----------------------------------------\n\nTITLE: TLS Package Updates (Go)\nDESCRIPTION: Defines TLS curve constants, client session cache interface, and related structs for handling TLS connections and configurations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nconst (\n    CurveP256 CurveID = 23\n    CurveP384 CurveID = 24\n    CurveP521 CurveID = 25\n)\n\ntype ClientSessionCache interface {\n    Get(string) (*ClientSessionState, bool)\n    Put(string, *ClientSessionState)\n}\n```\n\n----------------------------------------\n\nTITLE: Failing Go Test Implementation\nDESCRIPTION: Implements a test function TestBar that deliberately fails with a dummy message\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_overlay.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage foo\n\nimport \"testing\"\n\nfunc TestBar(t *testing.T) {\n\tt.Fatal(\"dummy failure\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Parse Error Structure in Go\nDESCRIPTION: Provides the Go struct definition for `parseError`, which is serialized into JSON and stored as a string within the index file when a source file parsing error occurs. It contains either a `*scanner.ErrorList` for syntax errors or an `ErrorString` for other error types.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/internal/modindex/index_format.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype parseError struct {\n\tErrorList *scanner.ErrorList // non-nil if the error was an ErrorList, nil otherwise\n\tErrorString string // non-empty for all other cases\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Git Repository with README\nDESCRIPTION: Creates a Git repository, configures its settings, adds a README file, and commits it. Also sets up remote tracking to fake a clone from an origin repository.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/test1-svn-git.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit init\ngit config --add core.ignorecase true\ngit config --add core.precomposeunicode true\n\ngit add README\nat 2017-09-22T11:39:03-04:00\ngit commit -a -m 'README'\ngit branch -m master\n\ngit rev-parse HEAD\nstdout '^7f800d2ac276dd7042ea0e8d7438527d236fd098$'\n\n\t# Fake a clone from an origin repo at this commit.\ngit remote add origin https://vcs-test.swtch.com/git/README-only\nmkdir .git/refs/remotes/origin\necho 'ref: refs/remotes/origin/master'\ncp stdout .git/refs/remotes/origin/HEAD\nunquote '# pack-refs with: peeled fully-peeled \\n7f800d2ac276dd7042ea0e8d7438527d236fd098 refs/remotes/origin/master\\n'\ncp stdout .git/packed-refs\ngit branch --set-upstream-to=origin/master\n```\n\n----------------------------------------\n\nTITLE: Testing Alternation Pattern Matching\nDESCRIPTION: Tests alternation pattern '(fo|foo)' against the string 'foo'. Shows how different pattern configurations affect capturing group behavior with alternation.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_32\n\nLANGUAGE: go\nCODE:\n```\n\"(fo|foo)\"\n-;-;-;-\n0-3 0-3;0-2 0-2;0-3 0-3;0-3 0-3\n\"^(?:(fo|foo))$\"\n-;-;-;-\n0-3 0-3;0-3 0-3;0-3 0-3;0-3 0-3\n\"^(?:(fo|foo))\"\n-;-;-;-\n0-3 0-3;0-2 0-2;0-3 0-3;0-3 0-3\n\"(?:(fo|foo))$\"\n-;-;-;-\n0-3 0-3;0-3 0-3;0-3 0-3;0-3 0-3\n```\n\n----------------------------------------\n\nTITLE: Defining Package r\nDESCRIPTION: Creates an empty package 'r' as a placeholder.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_all_gobuild.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\npackage r\n```\n\n----------------------------------------\n\nTITLE: Invalid Modules.txt File Structure\nDESCRIPTION: An example of a malformed modules.txt file used in the test. It doesn't follow the proper format for vendor/modules.txt and is used to test error handling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_empty.txt#2025-04-22_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n# a/module\na/package\n```\n\n----------------------------------------\n\nTITLE: Module Q v1.1.0 Implementation\nDESCRIPTION: Package q implementation version 1.1.0 with PrintVersion function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_prune.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage q\n\nimport \"fmt\"\n\nfunc PrintVersion() {\n\tfmt.Println(\"version 1.1.0\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Methods and Types for archive/zip Package in Go\nDESCRIPTION: This snippet defines a SetComment method for the Writer type and adds fields to the FileHeader struct in the archive/zip package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.10.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmethod (*Writer) SetComment(string) error\n\ntype FileHeader struct {\n    Modified time.Time\n    NonUTF8 bool\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Event Action Constants for Darwin ARM64 in Go\nDESCRIPTION: This snippet defines constants for event actions used with kqueue on Darwin ARM64. These constants specify the actions to be taken when events occur.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_60\n\nLANGUAGE: Go\nCODE:\n```\nconst EV_ADD = 1\nconst EV_ADD ideal-int\nconst EV_CLEAR = 32\nconst EV_CLEAR ideal-int\nconst EV_DELETE = 2\nconst EV_DELETE ideal-int\nconst EV_DISABLE = 8\nconst EV_DISABLE ideal-int\n// ... more event action constants ...\n```\n\n----------------------------------------\n\nTITLE: Defining IPv6 Option Constants in Go for NetBSD ARM64 CGO\nDESCRIPTION: This snippet defines constants for various IPv6 options used in network programming. These constants are specific to the syscall package for NetBSD on ARM64 architecture with CGO enabled.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_34\n\nLANGUAGE: Go\nCODE:\n```\nconst IPV6_CHECKSUM = 26\nconst IPV6_DEFAULT_MULTICAST_HOPS = 1\nconst IPV6_DEFAULT_MULTICAST_LOOP = 1\nconst IPV6_DEFHLIM = 64\nconst IPV6_DONTFRAG = 62\nconst IPV6_DSTOPTS = 50\nconst IPV6_FAITH = 29\nconst IPV6_FLOWINFO_MASK = 4294967055\nconst IPV6_FLOWLABEL_MASK = 4294905600\nconst IPV6_FRAGTTL = 120\nconst IPV6_HLIMDEC = 1\nconst IPV6_HOPLIMIT = 47\nconst IPV6_HOPOPTS = 49\nconst IPV6_IPSEC_POLICY = 28\nconst IPV6_JOIN_GROUP = 12\nconst IPV6_LEAVE_GROUP = 13\nconst IPV6_MAXHLIM = 255\nconst IPV6_MAXPACKET = 65535\nconst IPV6_MMTU = 1280\nconst IPV6_MULTICAST_HOPS = 10\nconst IPV6_MULTICAST_IF = 9\nconst IPV6_MULTICAST_LOOP = 11\nconst IPV6_NEXTHOP = 48\nconst IPV6_PATHMTU = 44\nconst IPV6_PKTINFO = 46\nconst IPV6_PORTRANGE = 14\nconst IPV6_PORTRANGE_DEFAULT = 0\nconst IPV6_PORTRANGE_HIGH = 1\nconst IPV6_PORTRANGE_LOW = 2\nconst IPV6_RECVDSTOPTS = 40\nconst IPV6_RECVHOPLIMIT = 37\nconst IPV6_RECVHOPOPTS = 39\nconst IPV6_RECVPATHMTU = 43\nconst IPV6_RECVPKTINFO = 36\nconst IPV6_RECVRTHDR = 38\nconst IPV6_RECVTCLASS = 57\nconst IPV6_RTHDR = 51\nconst IPV6_RTHDRDSTOPTS = 35\nconst IPV6_RTHDR_LOOSE = 0\nconst IPV6_RTHDR_STRICT = 1\nconst IPV6_RTHDR_TYPE_0 = 0\nconst IPV6_SOCKOPT_RESERVED1 = 3\nconst IPV6_TCLASS = 61\nconst IPV6_UNICAST_HOPS = 4\nconst IPV6_USE_MIN_MTU = 42\nconst IPV6_V6ONLY = 27\n```\n\n----------------------------------------\n\nTITLE: Package A Implementation File\nDESCRIPTION: An empty Go implementation file for package 'a', which is used as a target for testing dependency management.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_test.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage a\n```\n\n----------------------------------------\n\nTITLE: Setting GO111MODULE Environment Variable\nDESCRIPTION: Enables Go modules explicitly by setting the GO111MODULE environment variable to 'on'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_help.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n```\n\n----------------------------------------\n\nTITLE: Initial Go Module Definition\nDESCRIPTION: Basic go.mod file configuration with module name 'm' and minimum Go version 1.1.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_get_toolchain.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule m\ngo 1.1\n```\n\n----------------------------------------\n\nTITLE: Simple Go Package Implementation\nDESCRIPTION: Basic Go package 'p' with a single exported function F() that doesn't do anything.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needall_v0.0.1.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nfunc F() {}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Git Commit Resolution Rules\nDESCRIPTION: This script tests how Go handles module imports that reference specific Git commits. It verifies that commits reachable from standard refs (heads/branches and tags) are allowed, while commits only reachable from non-standard refs like Gerrit change IDs are properly rejected.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_hash.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\nenv GOPROXY=direct\nenv GOSUMDB=off\n[!net:golang.org] skip\n[!git] skip\n\n# fetch commit hash reachable from refs/heads/* and refs/tags/* is OK\ngo list -m golang.org/x/time@8be79e1e0910c292df4e79c241bb7e8f7e725959 # on master branch\n\n# fetch other commit hash, even with a non-standard ref, is not OK\n! go list -m golang.org/x/time@334d83c35137ac2b376c1dc3e4c7733791855a3a # refs/changes/24/41624/3\nstderr 'unknown revision'\n! go list -m golang.org/x/time@v0.0.0-20170424233410-334d83c35137\nstderr 'unknown revision'\n! go list -m golang.org/x/time@334d83c35137\nstderr 'unknown revision'\n```\n\n----------------------------------------\n\nTITLE: Msghdr Struct Definition for darwin-arm64\nDESCRIPTION: Definition of the Msghdr struct used for socket message handling in Go's syscall package for darwin-arm64. This structure is used when sending or receiving messages on sockets and contains fields for data buffers, control messages, and addressing.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_127\n\nLANGUAGE: go\nCODE:\n```\ntype Msghdr struct {\n\tName *uint8\n\tNamelen uint32\n\tIov *Iovec\n\tIovlen int32\n\tControl *uint8\n\tControljen uint32\n\tFlags int32\n\tPad_cgo_0 [4]uint8\n\tPad_cgo_1 [4]uint8\n}\n```\n\n----------------------------------------\n\nTITLE: Package Declaration File\nDESCRIPTION: Go file containing only package declaration for dir3.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_overlay.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage dir3\n```\n\n----------------------------------------\n\nTITLE: Declaring Function Prototypes in Go\nDESCRIPTION: Declares 255 function prototypes (t0 to t254) without implementation. These functions are implemented in assembly.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/testdata/script/dwarf5_gen_assembly_and_go.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nfunc t0()\nfunc t1()\n// ... (omitted for brevity)\nfunc t253()\nfunc t254()\n```\n\n----------------------------------------\n\nTITLE: Berkeley Packet Filter Functions for NetBSD ARM64\nDESCRIPTION: Function signatures for Berkeley Packet Filter (BPF) operations in NetBSD on ARM64. These functions provide interfaces for network packet capture and filtering functionality.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_158\n\nLANGUAGE: Go\nCODE:\n```\nfunc BpfBuflen(int) (int, error)\nfunc BpfDatalink(int) (int, error)\nfunc BpfHeadercmpl(int) (int, error)\nfunc BpfInterface(int, string) (string, error)\nfunc BpfJump(int, int, int, int) *BpfInsn\nfunc BpfStats(int) (*BpfStat, error)\nfunc BpfStmt(int, int) *BpfInsn\nfunc BpfTimeout(int) (*Timeval, error)\nfunc CheckBpfVersion(int) error\nfunc FlushBpf(int) error\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON DocLink Base URL\nDESCRIPTION: JSON configuration defining the base URL for package documentation links\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/linklist.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"DocLinkBaseURL\": \"https://pkg.go.dev\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Emulation Constants for NetBSD ARM64 CGO in Go\nDESCRIPTION: This snippet defines constants related to Linux emulation on NetBSD. These constants are used to identify different emulation modes and set limits for the emulation system.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_19\n\nLANGUAGE: Go\nCODE:\n```\nconst EMUL_LINUX = 1\nconst EMUL_LINUX32 = 5\nconst EMUL_LINUX32 ideal-int\nconst EMUL_LINUX ideal-int\nconst EMUL_MAXID = 6\nconst EMUL_MAXID ideal-int\n```\n\n----------------------------------------\n\nTITLE: Go module definition (Go)\nDESCRIPTION: This snippet defines the Go module for the project. It specifies the module name as 'ldflag'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/ldflag.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nmodule ldflag\n```\n\n----------------------------------------\n\nTITLE: OpenBSD Termios Structure\nDESCRIPTION: Terminal I/O settings structure definition for OpenBSD AMD64 platform containing flags and control characters for terminal device control.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_63\n\nLANGUAGE: Go\nCODE:\n```\ntype Termios struct {\n    Iflag uint32\n    Oflag uint32\n    Cflag uint32\n    Lflag uint32\n    Cc [20]uint8\n    Ispeed int32\n    Ospeed int32\n}\n```\n\n----------------------------------------\n\nTITLE: Expected Git Log Output\nDESCRIPTION: The expected output from the git log command, showing the initial commit with reference to the master branch.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/no-tags.txt#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\ne706ba1 (HEAD -> master) all: add go.mod and main.go\n```\n\n----------------------------------------\n\nTITLE: Plain Text Link Processing\nDESCRIPTION: Plain text representation of documentation links\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/link7.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nmath is a package but this is not a doc link.\n\nio is a doc link.\n\n[math]: https://example.com\n```\n\n----------------------------------------\n\nTITLE: Empty Go Package Declaration\nDESCRIPTION: Minimal Go package declaration for the sub package without any implementations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/prefixtagtests.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage sub\n```\n\n----------------------------------------\n\nTITLE: Primary Go Module Definition\nDESCRIPTION: Main go.mod file defining the module example.com/foo with Go 1.20.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_reject_modfile.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/foo\n\ngo 1.20\n```\n\n----------------------------------------\n\nTITLE: Verifying Mercurial Repository Structure\nDESCRIPTION: Executes a series of Mercurial commands to check and verify the repository structure, including logs, tags, branches, and bookmarks.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/hg/hgrepo1.txt#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nhg log -G --debug\n\nhg tags\ncmp stdout .hg-tags\n\n\t# 'hg convert' leaves an 'update tags' commit on the default branch, and that\n\t# commit always uses the current date (so is not reproducible). Fortunately,\n\t# that commit lands on the 'default' branch and is not tagged as 'tip', so it\n\t# seems to be mostly harmless. However, because it is nondeterministic we\n\t# should avoid listing it here.\n\t#\n\t# Unfortunately, some of our builders are still running Debian 9 \"Stretch\",\n\t# which shipped with a version of 'hg' that does not support 'hg branch -r'\n\t# to list branches for specific versions. Although Stretch is past its\n\t# end-of-life date, we need to keep the builders happy until they can be\n\t# turned down (https://go.dev/issue/56414).\nhg branches\n? cmp stdout .hg-branches\nstdout 'v2\\s+6:9a4f43d231ec'\nstdout 'v2.3.4\\s+9:18518c07eb8e'\nstdout 'v3\\s+7:a2cad8a2b1bb'\nstdout 'default\\s+5:'\n\n# Likewise, bookmark v3 ends up on the nondeterministic commit.\nhg bookmarks\n? cmp stdout .hg-bookmarks\nstdout 'master\\s+0:41964ddce118'\nstdout 'v2\\s+3:8f49ee7a6ddc'\nstdout 'v2.3.4\\s+1:88fde824ec8b'\nstdout 'v3\\s+5:.*'\n```\n\n----------------------------------------\n\nTITLE: Main Module Package Declaration\nDESCRIPTION: A minimal Go file for the main module that just declares package 'x'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_go_version.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage x\n```\n\n----------------------------------------\n\nTITLE: Network Interface and Socket Structure Definitions for NetBSD-arm64 in Go\nDESCRIPTION: This code contains system-level structure definitions for network interfaces, socket communications, and resource management in NetBSD-arm64. These structures are used to interact with the operating system kernel for functions related to network interface management, socket communications, and resource limits.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_163\n\nLANGUAGE: Go\nCODE:\n```\n// Network interface announcement message header structure\ntype IfAnnounceMsghdr struct {\n    Msglen uint16\n    Version uint8\n    Type uint8\n    Index uint16\n    Name [16]int8\n    What uint16\n}\n\n// Network interface data structure\ntype IfData struct {\n    Type uint8\n    Addrlen uint8\n    Hdrlen uint8\n    Pad_cgo_0 [1]uint8\n    Link_state int32\n    Mtu uint64\n    Metric uint64\n    Baudrate uint64\n    Ipackets uint64\n    Ierrors uint64\n    Opackets uint64\n    Oerrors uint64\n    Collisions uint64\n    Ibytes uint64\n    Obytes uint64\n    Imcasts uint64\n    Omcasts uint64\n    Iqdrops uint64\n    Noproto uint64\n    Lastchange Timespec\n}\n\n// Network interface message header structure\ntype IfMsghdr struct {\n    Msglen uint16\n    Version uint8\n    Type uint8\n    Addrs int32\n    Flags int32\n    Index uint16\n    Pad_cgo_0 [2]uint8\n    Data IfData\n}\n\n// IPv6 packet information structure\ntype Inet6Pktinfo struct {\n    Addr [16]uint8\n    Ifindex uint32\n}\n\n// Interface address message structure\ntype InterfaceAddrMessage struct {\n    Header IfaMsghdr\n    Data []uint8\n}\n\n// Interface announcement message structure\ntype InterfaceAnnounceMessage struct {\n    Header IfAnnounceMsghdr\n}\n\n// Interface message structure\ntype InterfaceMessage struct {\n    Header IfMsghdr\n    Data []uint8\n}\n\n// I/O vector structure for scatter/gather I/O\ntype Iovec struct {\n    Base *uint8\n    Len uint64\n}\n\n// IPv6 MTU information structure\ntype IPv6MTUInfo struct {\n    Addr RawSockaddrInet6\n    Mtu uint32\n}\n\n// Kernel event structure\ntype Kevent_t struct {\n    Ident uint64\n    Filter uint32\n    Flags uint32\n    Fflags uint32\n    Pad_cgo_0 [4]uint8\n    Data int64\n    Udata int64\n}\n\n// Memory cluster pool structure\ntype Mclpool [0]uint8\n\n// Message header structure for socket operations\ntype Msghdr struct {\n    Name *uint8\n    Namelen uint32\n    Pad_cgo_0 [4]uint8\n    Iov *Iovec\n    Iovlen int32\n    Pad_cgo_1 [4]uint8\n    Control *uint8\n    Controllen uint32\n    Flags int32\n}\n\n// Raw socket address structures\ntype RawSockaddrAny struct { Pad [92]int8 }\n\ntype RawSockaddrDatalink struct {\n    Len uint8\n    Family uint8\n    Index uint16\n    Type uint8\n    Nlen uint8\n    Alen uint8\n    Slen uint8\n    Data [12]int8\n}\n\ntype RawSockaddrInet4 struct {\n    Len uint8\n    Family uint8\n    Zero [8]int8\n}\n\ntype RawSockaddrInet6 struct {\n    Len uint8\n    Family uint8\n}\n\ntype RawSockaddr struct {\n    Len uint8\n    Family uint8\n    Data [14]int8\n}\n\ntype RawSockaddrUnix struct {\n    Len uint8\n    Family uint8\n    Path [104]int8\n}\n\n// Resource limit structure\ntype Rlimit struct {\n    Cur uint64\n    Max uint64\n}\n\n// Route message structure\ntype RouteMessage struct {\n    Header RtMsghdr\n    Data []uint8\n}\n\n// Routing message interface\ntype RoutingMessage interface {\n    // unexported methods\n}\n\n// Route metrics structure\ntype RtMetrics struct {\n    Locks uint64\n    Mtu uint64\n    Hopcount uint64\n    Recvpipe uint64\n    Sendpipe uint64\n    Ssthresh uint64\n    Rtt uint64\n    Rttvar uint64\n    Pksent int64\n    Expire int64\n}\n\n// Route message header structure\ntype RtMsghdr struct {\n    Msglen uint16\n    Version uint8\n    Type uint8\n    Index uint16\n    Pad_cgo_0 [2]uint8\n    Flags int32\n    Addrs int32\n    Pid int32\n    Seq int32\n    Errno int32\n    Use int32\n    Inits int32\n    Pad_cgo_1 [4]uint8\n    Rmx RtMetrics\n}\n\n// Resource usage structure\ntype Rusage struct {\n    Utime Timeval\n    Stime Timeval\n    Maxrss int64\n    Ixrss int64\n    Idrss int64\n    Isrss int64\n    Minflt int64\n    Majflt int64\n    Nswap int64\n    Inblock int64\n    Oublock int64\n    Msgsnd int64\n    Msgrcv int64\n    Nsignals int64\n    Nvcsw int64\n    Nivcsw int64\n}\n\n// Socket address datalink structure\ntype SockaddrDatalink struct {\n    Len uint8\n    Family uint8\n    Index uint16\n    Type uint8\n    Nlen uint8\n    Alen uint8\n    Slen uint8\n    Data [12]int8\n}\n\n// Socket control message structure\ntype SocketControlMessage struct {\n    Header Cmsghdr\n    Data []uint8\n}\n\n// File system statistics structure (empty placeholder)\ntype Statfs_t [0]uint8\n\n// File status structure (empty placeholder)\ntype Stat_t struct {}\n```\n\n----------------------------------------\n\nTITLE: Database SQL Connection Methods\nDESCRIPTION: Methods for database connection handling including transaction management, query execution, and connection lifecycle management.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.9.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Conn struct {}\n\nfunc (c *Conn) BeginTx(ctx context.Context, opts *TxOptions) (*Tx, error)\nfunc (c *Conn) Close() error\nfunc (c *Conn) ExecContext(ctx context.Context, query string, args ...interface{}) (Result, error)\nfunc (c *Conn) PrepareContext(ctx context.Context, query string) (*Stmt, error)\nfunc (c *Conn) QueryContext(ctx context.Context, query string, args ...interface{}) (*Rows, error)\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Go Main Function\nDESCRIPTION: Defines a minimal Go main function used for the build test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_build_trimpath_issue48557.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Gofmt Link Formatting\nDESCRIPTION: Formatted Go documentation link processing test case\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/link7.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n[math] is a package but this is not a doc link.\n\n[io] is a doc link.\n\n[math]: https://example.com\n```\n\n----------------------------------------\n\nTITLE: Importing Missing Package in Go\nDESCRIPTION: Example showing a Go file that attempts to import a non-existent package 'notfound', which will trigger a build error. Located in the path vend/x/vendor/p/p/p.go.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_import_missing.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nimport _ \"notfound\"\n```\n\n----------------------------------------\n\nTITLE: Memory Mapping Constants for OpenBSD in Go\nDESCRIPTION: Defines memory mapping flags used with mmap() system call on OpenBSD. These constants control how memory mappings are created and managed.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_51\n\nLANGUAGE: Go\nCODE:\n```\nconst MAP_FILE = 0           // Map from file (default)\nconst MAP_SHARED = 1        // Share changes\nconst MAP_PRIVATE = 2       // Changes are private\nconst MAP_COPY = 4          // Copy-on-write\nconst MAP_FIXED = 16        // Interpret addr exactly\nconst MAP_RENAME = 32       // Rename private pages to file\nconst MAP_NORESERVE = 64    // Don't reserve needed swap area\nconst MAP_INHERIT = 128     // Region is retained after exec\nconst MAP_NOEXTEND = 256    // For MAP_FILE, don't change file size\nconst MAP_HASSEMAPHORE = 512 // Region may contain semaphores\nconst MAP_TRYFIXED = 1024   // Try MAP_FIXED but don't fail\nconst MAP_ANON = 4096       // Anonymous mapping\nconst MAP_FLAGMASK = 8183   // All flags mask\n```\n\n----------------------------------------\n\nTITLE: Toolchain Version Information in JSON\nDESCRIPTION: JSON metadata specifying the version of the toolchain module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-386.txt#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.999testmod.openbsd-386\"}\n```\n\n----------------------------------------\n\nTITLE: Git Reference Verification File\nDESCRIPTION: Expected Git reference output showing the commit hash for master branch and v2.0.0 tag.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/v2repo.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n203b91c896acd173aa719e4cdcb7d463c4b090fa refs/heads/master\n203b91c896acd173aa719e4cdcb7d463c4b090fa refs/tags/v2.0.0\n```\n\n----------------------------------------\n\nTITLE: Module Info JSON for patch.example.com/direct\nDESCRIPTION: Contains version information for the module in JSON format.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_direct_v1.1.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.1.0\"}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition for Q Package\nDESCRIPTION: A Go 1.20 module definition for the q module used as a dependency in the tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/godebug_default.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ngo 1.20\nmodule q\n```\n\n----------------------------------------\n\nTITLE: Implementing Hello World in Go\nDESCRIPTION: A minimal Go program that prints \"hello world\". This file is used as a test subject for the GOPATH validation tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gopath_paths.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {\n\tprintln(\"hello world\")\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecations in database/sql/driver package\nDESCRIPTION: Lists deprecated types and methods in the database/sql/driver package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_20\n\nLANGUAGE: Go\nCODE:\n```\npkg database/sql/driver, type ColumnConverter //deprecated\npkg database/sql/driver, type Conn interface, Begin //deprecated\npkg database/sql/driver, type Execer //deprecated\npkg database/sql/driver, type Queryer //deprecated\npkg database/sql/driver, type Stmt interface, Exec //deprecated\npkg database/sql/driver, type Stmt interface, Query //deprecated\n```\n\n----------------------------------------\n\nTITLE: Input Text Formatting Example\nDESCRIPTION: Example showing unformatted text with mixed indentation patterns and list numbering\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list9.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nText.\n\n1. Not a list\n2. because it is\n3. unindented.\n\n4. This one\n  is a list\n  because of the indented text.\n5. More wrapped\n  items.\n6. And unwrapped.\n\n7. The blank line stops the heuristic.\n```\n\n----------------------------------------\n\nTITLE: Listing Dependencies of Vendored Packages in Shell\nDESCRIPTION: The command lists the dependencies of a specified vendored package using 'go list -deps'. It ensures all dependencies are also from vendored paths, aligning with module boundaries within Go projects.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_std.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo list -deps vendor/golang.org/x/crypto/chacha20\n```\n\n----------------------------------------\n\nTITLE: Hello World Go Program\nDESCRIPTION: Simple Go main program that prints 'Hello world!' to standard output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_reject_modfile.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(\"Hello world!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Fake Clang Implementation in Go\nDESCRIPTION: A Go program that simulates a Clang compiler by wrapping the real Clang binary and injecting a vendor prefix into version strings. Includes error simulation via GO_BREAK_CLANG environment variable.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cc_cache_issue64423.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"bufio\"\n\t\"bytes\"\n\t\"log\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\t\"strings\"\n)\n\nfunc main() {\n\tif os.Getenv(\"GO_BREAK_CLANG\") != \"\" {\n\t\tos.Stderr.WriteString(\"GO_BREAK_CLANG is set\\n\")\n\t\tos.Exit(1)\n\t}\n\n\tb, err := os.ReadFile(filepath.Join(os.Getenv(\"WORK\"), \".realclang\"))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tclang := string(bytes.TrimSpace(b))\n\tcmd := exec.Command(clang, os.Args[1:]...)\n\tcmd.Stdout = os.Stdout\n\tstderr, err := cmd.StderrPipe()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tif err := cmd.Start(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tr := bufio.NewReader(stderr)\n\tfor {\n\t\tline, err := r.ReadString('\\n')\n\t\tif line != \"\" {\n\t\t\tif strings.Contains(line, \"clang version\") {\n\t\t\t\t// Simulate a clang version string with an arbitrary vendor prefix.\n\t\t\t\tconst vendorString = \"Gopher Solutions Unlimited \"\n\t\t\t\tos.Stderr.WriteString(vendorString)\n\t\t\t}\n\t\t\tos.Stderr.WriteString(line)\n\t\t}\n\t\tif err != nil {\n\t\t\tbreak\n\t\t}\n\t}\n\tos.Stderr.Close()\n\n\tif err := cmd.Wait(); err != nil {\n\t\tos.Exit(1)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: This snippet defines a Go module named 'example' using Go version 1.21.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_insecure_redirect.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example\ngo 1.21\n```\n\n----------------------------------------\n\nTITLE: Crypto Package Interface Definition\nDESCRIPTION: Definition of the Decrypter interface in the crypto package, which specifies methods for decryption and public key access.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.5.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Decrypter interface {\n    Decrypt(io.Reader, []uint8, DecrypterOpts) ([]uint8, error)\n    Public() PublicKey\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go list on standard-vendored packages\nDESCRIPTION: Verifies that 'go list' can find packages vendored in the standard library by checking their directory path.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_std_vendor.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo list -f '{{.Dir}}' vendor/golang.org/x/net/http2/hpack\nstdout $GOROOT[/\\\\]src[/\\\\]vendor\n```\n\n----------------------------------------\n\nTITLE: Go Module File Without Replace Directive\nDESCRIPTION: A Go module file for module 'example.com/a' without a replace directive. This is used in the test to demonstrate the failure case.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_main_module_replaced.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule example.com/a\n\ngo 1.21\n\nrequire example.com/b v0.0.0\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Goroutine in Go Runtime\nDESCRIPTION: Demonstrates how to correctly access the current user goroutine using getg() function in the Go runtime. It also shows how to determine if code is running on the user stack or system stack.\nSOURCE: https://github.com/golang/go/blob/master/src/runtime/HACKING.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngetg().m.curg // Get the current user goroutine\n\ngetg() == getg().m.curg // Check if running on user stack\n```\n\n----------------------------------------\n\nTITLE: Defining Golang Toolchain Module Path with Version\nDESCRIPTION: Specifies the full module path for a test Golang toolchain with version 1.999testmod for Windows 386 architecture.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.windows-386.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngolang.org/toolchain@v0.0.1-go1.999testmod.windows-386\n```\n\n----------------------------------------\n\nTITLE: Socket and Network Functions in syscall Package for NetBSD ARM64\nDESCRIPTION: These functions provide network socket operations including creating, binding, connecting, and closing sockets. They also handle options, addressing, and data transfer over sockets.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_74\n\nLANGUAGE: Go\nCODE:\n```\nfunc Socket(int, int, int) (int, error)\nfunc Socketpair(int, int, int) ([2]int, error)\nfunc Bind(int, Sockaddr) error\nfunc Connect(int, Sockaddr) error\nfunc Listen(int, int) error\nfunc Getpeername(int) (Sockaddr, error)\nfunc Getsockname(int) (Sockaddr, error)\nfunc Recvfrom(int, []uint8, int) (int, Sockaddr, error)\nfunc Sendto(int, []uint8, int, Sockaddr) error\nfunc Recvmsg(int, []uint8, []uint8, int) (int, int, int, Sockaddr, error)\nfunc Sendmsg(int, []uint8, []uint8, Sockaddr, int) error\nfunc SendmsgN(int, []uint8, []uint8, Sockaddr, int) (int, error)\nfunc Shutdown(int, int) error\n```\n\n----------------------------------------\n\nTITLE: Testing Go List Failure After Manual Module Edit (Shell)\nDESCRIPTION: Restores the original `go.mod`, manually edits it to require `example.com/badchain/a@v1.1.0` (which has the problematic dependency chain), and then attempts to list all modules using `go list -m all`. This list command is expected to fail (`!`) due to the path mismatch encountered when resolving dependencies. The script compares the actual standard error output with the expected error message stored in `list-expected`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_load_badchain.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# Update manually. Listing modules should produce an error.\ncp go.mod.orig go.mod\ngo mod edit -require=example.com/badchain/a@v1.1.0\n! go list -m all\ncmp stderr list-expected\n```\n\n----------------------------------------\n\nTITLE: Main Package Definition\nDESCRIPTION: Minimal main package implementation for testing purposes\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_deprecate_install.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Markdown Template Section\nDESCRIPTION: Basic markdown template section\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/link3.txt#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nDoc text.\n```\n\n----------------------------------------\n\nTITLE: Inline Markdown Links\nDESCRIPTION: Shows the markdown with reference links converted to inline links.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/link5.txt#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nSee the [Go home page](https://go.dev/) and the [pkg site](https://pkg.go.dev).\n\nThey're really great!\n```\n\n----------------------------------------\n\nTITLE: Running go vet with printf flag disabled\nDESCRIPTION: This snippet demonstrates running go vet with the printf flag explicitly disabled. It expects no error output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet.txt#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngo vet -printf=false m/vetpkg\n! stderr .\n```\n\n----------------------------------------\n\nTITLE: Adding Data-Independent Timing Function to crypto/subtle Package in Go\nDESCRIPTION: New function to execute a given function with data-independent timing in the crypto/subtle package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\nfunc WithDataIndependentTiming(func())\n```\n\n----------------------------------------\n\nTITLE: CGO Function Implementation\nDESCRIPTION: A Go file with CGO code that integrates a C function. The file includes both C code and Go code with a function F() that calls the C function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_cgo.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\n/*\nvoid\nf(void)\n{\n}\n*/\nimport \"C\"\n\nvar b bool\n\nfunc F() {\n\tif b {\n\t\tfor {\n\t\t}\n\t}\n\tC.f()\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Test Package\nDESCRIPTION: Declares an empty package named 'testonly'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_testonly_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage testonly\n```\n\n----------------------------------------\n\nTITLE: Go Package Definition for v2 Module\nDESCRIPTION: Package declaration for the v2 submodule, defining a package named v2sub within the v2 directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/v2sub.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage v2sub\n```\n\n----------------------------------------\n\nTITLE: Module Definition\nDESCRIPTION: Module declaration for rsc.io/sampler\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule \"rsc.io/sampler\"\n```\n\n----------------------------------------\n\nTITLE: Go Test File with Formatting Error\nDESCRIPTION: This Go test file contains a test function with a formatting error in the Logf call, which is used to demonstrate vet's ability to catch such issues.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_vet.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\tt.Logf(\"%d\") // oops\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Format Example\nDESCRIPTION: Shows the text formatted as markdown with code block indentation.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/code2.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nText.\n\n\tA tab-indented\n\t(no, not eight-space indented)\n\tcode block and haiku.\n\nMore text.\n```\n\n----------------------------------------\n\nTITLE: TLS constants for Go crypto/tls package\nDESCRIPTION: Constants defined in the crypto/tls package for TLS 1.3 cipher suites and version information.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.12.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nconst TLS_AES_128_GCM_SHA256 = 4865\nconst TLS_AES_128_GCM_SHA256 uint16\nconst TLS_AES_256_GCM_SHA384 = 4866\nconst TLS_AES_256_GCM_SHA384 uint16\nconst TLS_CHACHA20_POLY1305_SHA256 = 4867\nconst TLS_CHACHA20_POLY1305_SHA256 uint16\nconst VersionTLS13 = 772\nconst VersionTLS13 ideal-int\n```\n\n----------------------------------------\n\nTITLE: Defining FileInfoNames Interface in archive/tar Package\nDESCRIPTION: This snippet defines a new interface FileInfoNames in the archive/tar package. It includes methods for retrieving file information such as name, size, mode, and modification time.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.23.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ntype FileInfoNames interface {\n    Gname() (string, error)\n    IsDir() bool\n    ModTime() time.Time\n    Mode() fs.FileMode\n    Name() string\n    Size() int64\n    Sys() interface{}\n    Uname() (string, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Syscall Constants for NetBSD ARM64 CGO\nDESCRIPTION: This snippet defines various syscall constants for NetBSD ARM64 using CGO. It includes terminal I/O control (TIOC) constants, process control flags, and other system-specific values.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_71\n\nLANGUAGE: Go\nCODE:\n```\nconst TIOCM_SR = 16\nconst TIOCM_ST = 8\nconst TIOCNOTTY = 536900721\nconst TIOCNXCL = 536900622\nconst TIOCOUTQ = 1074033779\nconst TIOCPKT = 2147775600\n// ... (more constants)\nconst WNOHANG = 1\nconst WNOWAIT = 65536\nconst WNOZOMBIE = 131072\nconst WOPTSCHECKED = 262144\nconst WSTOPPED = 127\nconst WUNTRACED = 2\n```\n\n----------------------------------------\n\nTITLE: Defining Core FS Functions in io/fs Package\nDESCRIPTION: Core filesystem functions for retrieving file info and reading symbolic links in the io/fs package.\nSOURCE: https://github.com/golang/go/blob/master/api/next/49580.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc Lstat(FS, string) (FileInfo, error)\nfunc ReadLink(FS, string) (string, error)\n```\n\n----------------------------------------\n\nTITLE: Deprecations in archive/zip package\nDESCRIPTION: Lists deprecated methods and struct fields in the archive/zip package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_17\n\nLANGUAGE: Go\nCODE:\n```\npkg archive/zip, method (*File) ModTime //deprecated\npkg archive/zip, method (*File) SetModTime //deprecated\npkg archive/zip, method (*FileHeader) ModTime //deprecated\npkg archive/zip, method (*FileHeader) SetModTime //deprecated\npkg archive/zip, type FileHeader struct, CompressedSize //deprecated\npkg archive/zip, type FileHeader struct, ModifiedDate //deprecated\npkg archive/zip, type FileHeader struct, ModifiedTime //deprecated\npkg archive/zip, type FileHeader struct, UncompressedSize //deprecated\n```\n\n----------------------------------------\n\nTITLE: Interface Definitions in Go\nDESCRIPTION: Interface type definitions with method signatures and embedded interfaces.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/api/testdata/src/pkg/p1/golden.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype Error interface {\n    Error() string\n    Temporary() bool\n}\n\ntype I interface {\n    Get(string) int64\n    GetNamed(string) int64\n    Name() string\n    Set(string, int64)\n}\n\ntype Public interface {\n    X()\n    Y()\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Vendor Mode and Module Directory in Go\nDESCRIPTION: This snippet demonstrates how to use 'go list' to check module directories in vendor mode. It verifies that only the main module has a root directory in vendor mode.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_trimpath.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo mod vendor\ngo list -f {{.Module.Dir}} example.com/main\nstdout $PWD\ngo list -f {{.Module.Dir}} example.com/stack\n! stdout .\n```\n\n----------------------------------------\n\nTITLE: Expected Git Log Output\nDESCRIPTION: The expected output from the git log command, showing both commits with their descriptions and tags.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/commit-after-tag.txt#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nb325d82 (HEAD -> master) add init function\n8da67e0 (tag: v1.0.0) all: add go.mod and main.go\n```\n\n----------------------------------------\n\nTITLE: Defining Outside Directory go.mod File in Go\nDESCRIPTION: This snippet defines the go.mod file for the 'outside' directory used in the tests. It specifies the module name, Go version, and includes a local replace directive.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_version.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/outside\n\ngo 1.13\n\nrequire example.com v0.0.0\nreplace example.com v0.0.0 => ./.\n```\n\n----------------------------------------\n\nTITLE: Updating Go Version in Module Files\nDESCRIPTION: This snippet updates the Go version to 1.17 in multiple go.mod files for different modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_of_test_dep.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo mod edit -go=1.17 a/go.mod\ngo mod edit -go=1.17 b1/go.mod\ngo mod edit -go=1.17 b2/go.mod\ngo mod edit -go=1.17 c1/go.mod\ngo mod edit -go=1.17 c2/go.mod\ngo mod edit -go=1.17\n```\n\n----------------------------------------\n\nTITLE: Go Package Interface\nDESCRIPTION: Go package declaration that exposes the ObjTest function implemented in assembly.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/link_syso_issue33139.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage syso\n\nfunc ObjTest()\n```\n\n----------------------------------------\n\nTITLE: Package Definition for '@at' Module\nDESCRIPTION: Simple Go package for the 'at' module, used to test listing packages from directories with special characters.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_fs_patterns.txt#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\npackage at\n```\n\n----------------------------------------\n\nTITLE: go.work file content\nDESCRIPTION: This is the content of the go.work file used in the tests. It specifies the Go version being used.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_only_dirs.txt#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n-- go.work --\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Testing Platform-Specific CRLF Output Handling\nDESCRIPTION: Go test example that outputs text with platform-specific line endings (CRLF on Windows, LF elsewhere) to verify the testing framework's handling of different line endings.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_crlf_example.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc Example_crlf() {\n\tif runtime.GOOS == \"windows\" {\n\t\tio.WriteString(os.Stdout, \"foo\\r\\nbar\\r\\n\")\n\t} else {\n\t\tio.WriteString(os.Stdout, \"foo\\nbar\\n\")\n\t}\n\t// Output:\n\t// foo\n\t// bar\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Buggy Package in Go\nDESCRIPTION: This snippet contains a test function for the buggy package. It intentionally fails the test by calling t.Fatal(\"buggy!\").\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709162918-a91498bed0a7.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage buggy\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\tt.Fatal(\"buggy!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Quote Package Tests in Go\nDESCRIPTION: Test suite for the quote package verifying the output of each quote function. Sets up environment and tests Hello(), Glass(), Go() and Opt() functions against expected strings.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709162749-b44a0b17b2d1.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage quote\n\nimport (\n\t\"os\"\n\t\"testing\"\n)\n\nfunc init() {\n\tos.Setenv(\"LC_ALL\", \"en\")\n}\n\nfunc TestHello(t *testing.T) {\n\thello := \"Hello, world.\"\n\tif out := Hello(); out != hello {\n\t\tt.Errorf(\"Hello() = %q, want %q\", out, hello)\n\t}\n}\n\nfunc TestGlass(t *testing.T) {\n\tglass := \"I can eat glass and it doesn't hurt me.\"\n\tif out := Glass(); out != glass {\n\t\tt.Errorf(\"Glass() = %q, want %q\", out, glass)\n\t}\n}\n\nfunc TestGo(t *testing.T) {\n\tgo1 := \"Don't communicate by sharing memory, share memory by communicating.\"\n\tif out := Go(); out != go1 {\n\t\tt.Errorf(\"Go() = %q, want %q\", out, go1)\n\t}\n}\n\nfunc TestOpt(t *testing.T) {\n\topt := \"If a program is too slow, it must have a loop.\"\n\tif out := Opt(); out != opt {\n\t\tt.Errorf(\"Opt() = %q, want %q\", out, opt)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Comment parsing in text/template/parse package\nDESCRIPTION: Types and constants for handling comments in templates. Includes NodeComment type for representing comments, ParseComments mode for enabling comment parsing, and CommentNode struct for storing comment text.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nconst NodeComment = 20\nconst NodeComment NodeType\nconst ParseComments = 1\nconst ParseComments Mode\nmethod (*CommentNode) Copy() Node\nmethod (*CommentNode) String() string\nmethod (CommentNode) Position() Pos\nmethod (CommentNode) Type() NodeType\ntype CommentNode struct\ntype CommentNode struct, Text string\ntype CommentNode struct, embedded NodeType\ntype CommentNode struct, embedded Pos\ntype Mode uint\ntype Tree struct, Mode Mode\n```\n\n----------------------------------------\n\nTITLE: Main Package Source\nDESCRIPTION: Empty package declaration for the main package p1.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_import_error_stack.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage p1\n```\n\n----------------------------------------\n\nTITLE: Windows Batch Go Execution Script\nDESCRIPTION: Batch script that echoes the Go test module version\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.windows-arm64.txt#2025-04-22_snippet_2\n\nLANGUAGE: batch\nCODE:\n```\n@echo go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Configuring and Querying HTTP2 and Protocol Options - net/http Go\nDESCRIPTION: These code snippets introduce struct fields and methods for configuring HTTP2 and protocol settings in net/http, including SetHTTP1, SetHTTP2, SetUnencryptedHTTP2 options and corresponding getter and String methods. There are also extended fields for HTTP2Config (timeouts, limits, error handling) and their integration into Server and Transport. Usage requires awareness of protocol negotiation in HTTP servers/clients, and customization through HTTP2Config affects connection concurrency, buffer sizes, and security properties.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_18\n\nLANGUAGE: Go\nCODE:\n```\npkg net/http, method (*Protocols) SetHTTP1(bool) #67814\npkg net/http, method (*Protocols) SetHTTP2(bool) #67814\npkg net/http, method (*Protocols) SetUnencryptedHTTP2(bool) #67816\npkg net/http, method (Protocols) HTTP1() bool #67814\npkg net/http, method (Protocols) HTTP2() bool #67814\npkg net/http, method (Protocols) String() string #67814\npkg net/http, method (Protocols) UnencryptedHTTP2() bool #67816\npkg net/http, type HTTP2Config struct #67813\npkg net/http, type HTTP2Config struct, CountError func(string) #67813\npkg net/http, type HTTP2Config struct, MaxConcurrentStreams int #67813\npkg net/http, type HTTP2Config struct, MaxDecoderHeaderTableSize int #67813\npkg net/http, type HTTP2Config struct, MaxEncoderHeaderTableSize int #67813\npkg net/http, type HTTP2Config struct, MaxReadFrameSize int #67813\npkg net/http, type HTTP2Config struct, MaxReceiveBufferPerConnection int #67813\npkg net/http, type HTTP2Config struct, MaxReceiveBufferPerStream int #67813\npkg net/http, type HTTP2Config struct, PermitProhibitedCipherSuites bool #67813\npkg net/http, type HTTP2Config struct, PingTimeout time.Duration #67813\npkg net/http, type HTTP2Config struct, SendPingTimeout time.Duration #67813\npkg net/http, type HTTP2Config struct, WriteByteTimeout time.Duration #67813\npkg net/http, type Protocols struct #67814\npkg net/http, type Server struct, HTTP2 *HTTP2Config #67813\npkg net/http, type Server struct, Protocols *Protocols #67814\npkg net/http, type Transport struct, HTTP2 *HTTP2Config #67813\npkg net/http, type Transport struct, Protocols *Protocols #67814\n```\n\n----------------------------------------\n\nTITLE: HTML Format Test\nDESCRIPTION: Shows content formatted as HTML paragraph with blank lines\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/blank.txt#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<p>Blank line at start and end.\n```\n\n----------------------------------------\n\nTITLE: Gob Package Configuration JSON\nDESCRIPTION: JSON configuration object specifying text width parameter for gob package documentation formatting.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/text2.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"TextWidth\": -1}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module definition file specifying module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_gowork.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule a\n\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Testing Go Module Commands\nDESCRIPTION: Series of go get commands testing different module versions, with the last command expected to fail due to invalid version format.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/badgo.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get example.net/badgo@v1.0.0\ngo get example.net/badgo@v1.1.0\ngo get example.net/badgo@v1.2.0\ngo get example.net/badgo@v1.3.0\ngo get example.net/badgo@v1.4.0\ngo get example.net/badgo@v1.5.0\n! go get example.net/badgo@v1.6.0\nstderr 'invalid go version .X.Y.: must match format 1.23'\n```\n\n----------------------------------------\n\nTITLE: Testing Toolchain Path Lookups\nDESCRIPTION: Verifies behavior when using path-based toolchain lookups with different Go versions. Tests error handling when specified versions aren't found in PATH.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_issue66175.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nenv GOTOOLCHAIN=go1.20+path\n! go version\nstderr 'go: cannot find \"go1.20\" in PATH'\n```\n\n----------------------------------------\n\nTITLE: Providing Module Version Metadata - JSON\nDESCRIPTION: This snippet provides module version information in JSON format, useful for Go tooling and dependency management. It specifies the version of the module as 'v1.0.0'. There are no dependencies or configuration options in this file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_stack_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\\"Version\\\":\\\"v1.0.0\\\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module in go.mod File\nDESCRIPTION: Creates a minimal go.mod file that defines the module name as 'x'. This is likely used as a placeholder for the test environment.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_bad_filenames.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule x\n```\n\n----------------------------------------\n\nTITLE: Module C v0.1.0 Configuration\nDESCRIPTION: The go.mod file for module 'c' v0.1.0, which has no dependencies. This represents an endpoint in one dependency path.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_cycle.txt#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nmodule c\n\ngo 1.13\n```\n\n----------------------------------------\n\nTITLE: Defining Package with '.go' Suffix in Go\nDESCRIPTION: A Go file defining a package named 'foo.go'. This unusual package name is used to test how 'go list' handles packages with names ending in '.go'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_ambiguous_path.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage foo.go\n```\n\n----------------------------------------\n\nTITLE: Simulating 'go' Tool Execution with Shell Script - Shell\nDESCRIPTION: Implements a Unix shell script stub for the 'go' binary, echoing a fixed version string to simulate Go tool output. Useful for test environments where the actual Go binary is not required. Requires sh (Bourne shell) compatibility; always outputs 'go1.999testmod here!' to standard output regardless of input, and does not process arguments.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.darwin-amd64.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n#!/bin/sh\\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Go Module File with Unsorted Requirements\nDESCRIPTION: A go.mod file with requirements listed in non-standard order, used to test sorting behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retention.txt#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.14\n\nrequire (\n\trsc.io/testonly v1.0.0 // indirect\n\trsc.io/quote v1.5.2\n)\n```\n\n----------------------------------------\n\nTITLE: Testing String Fuzzing in Go\nDESCRIPTION: This function tests Go's fuzzing capabilities with string inputs. It panics when the input is not an empty string.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutate_crash.txt#2025-04-22_snippet_16\n\nLANGUAGE: Go\nCODE:\n```\nfunc FuzzString(f *testing.F) {\n\tf.Add(\"\")\n\tf.Fuzz(func(t *testing.T, a string) {\n\t\tif a != \"\" {\n\t\t\tpanic(\"this input caused a crash!\")\n\t\t}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Test Setup and Command Execution for Go List Linkshared\nDESCRIPTION: Sets up environment with GO111MODULE and executes go list command with linkshared flag to test package information output. Verifies the command doesn't panic and returns expected empty target/shlib for test-only package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_linkshared.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n\n# golang.org/issue/35759: 'go list -linkshared'\n# panicked if invoked on a test-only package.\n\n[!buildmode:shared] skip\n\ngo list -f '{{.ImportPath}}: {{.Target}} {{.Shlib}}' -linkshared .\nstdout '^example.com:  $'\n```\n\n----------------------------------------\n\nTITLE: OpenBSD System Call Numbers\nDESCRIPTION: System call number constants for OpenBSD AMD64 platform used for various system operations like file operations, time management, and process control.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_61\n\nLANGUAGE: Go\nCODE:\n```\nconst (\n    SYS_CLOCK_GETRES = 89\n    SYS_CLOCK_GETTIME = 87\n    SYS_CLOCK_SETTIME = 88\n    SYS_FSTAT = 53\n    SYS_GETDENTS = 99\n    SYS_SELECT = 71\n    SYS_WAIT4 = 11\n)\n```\n\n----------------------------------------\n\nTITLE: Go Implementation with cgo Import\nDESCRIPTION: A Go file that imports the C package using cgo, defining a simple function F() to create a valid Go package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_asm_error.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\n/*\n// hi\n*/\nimport \"C\"\n\nfunc F() {}\n```\n\n----------------------------------------\n\nTITLE: Initial Go Workspace File\nDESCRIPTION: The initial go.work file before running the test commands. It only specifies the Go version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_use_symlink_issue68383.txt#2025-04-22_snippet_2\n\nLANGUAGE: gomod\nCODE:\n```\ngo 1.24\n```\n\n----------------------------------------\n\nTITLE: Go List Command Test\nDESCRIPTION: Test command to verify module field population using go list with -e flag for error tolerance.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_module_when_error.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ngo list -e -f {{.Module}}\nstdout '^mod.com$'\n```\n\n----------------------------------------\n\nTITLE: Test Script Commands\nDESCRIPTION: Shell commands and test assertions for verifying go list behavior with various package patterns and unreadable directories.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_perm.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n\ngo list ./noread/...\nstdout '^example.com/noread$'\n\ngo list example.com/noread/...\nstdout '^example.com/noread$'\n\ngo list ./empty/...\nstderr 'matched no packages'\n\nchmod 000 noread\n\n! go list ./noread\n! stdout '^example.com/noread$'\n! stderr 'matched no packages'\n\n! go list example.com/noread\n! stdout '^example.com/noread$'\n! stderr 'matched no packages'\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Go Package\nDESCRIPTION: Defines an empty Go package named 'x' with no exported functions or variables.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_nodeps.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage x\n```\n\n----------------------------------------\n\nTITLE: Defining go.mod with Tool Using a Relative Path - Go\nDESCRIPTION: This go.mod file sets up a separate module with a tool entry pointing to a local path (./invalid_path) and specifies a Go version. It is intended to register a local directory as a tool, which may result in errors if improperly formed or resolved; suitable for testing malformed or erroneous configurations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_tool.txt#2025-04-22_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\nmodule example.com/invalid_path\\n\\ngo 1.24\\n\\ntool ./invalid_path\\n\n```\n\n----------------------------------------\n\nTITLE: Go Package with Missing Import\nDESCRIPTION: Go source file that attempts to import a non-existent package to test error handling\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_e_readonly.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage use\n\nimport _ \"example.com/missing\"\n```\n\n----------------------------------------\n\nTITLE: Calling an Imported Package Function in Go\nDESCRIPTION: This Go code snippet defines the package p2, which imports p1 from the same module and provides a function F that calls p1.F(). This enables p2 to expose p1's functionality, forming a cyclic package dependency used to test Go coverage behavior. No input parameters are required. The snippet does not output a value but ensures p1.F is invoked when p2.F is called.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_dep_loop.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage p2\n\nimport \"coverdep2/p1\"\n\nfunc F() {\n\tp1.F()\n}\n```\n\n----------------------------------------\n\nTITLE: Ignored Go File with Build Tag\nDESCRIPTION: A Go file with an 'ignore' build tag. It imports a non-existent package to demonstrate that dependencies from ignored files are not included.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_tags.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\n// +build ignore\n\npackage ignore\n\nimport _ \"example.com/doesnotexist\"\n```\n\n----------------------------------------\n\nTITLE: Defining Terminal and Time Structures for OpenBSD in Go\nDESCRIPTION: Complete definition of Termios structure for terminal control and time-related structures for OpenBSD. Termios contains control flags and settings for terminal I/O operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_44\n\nLANGUAGE: Go\nCODE:\n```\ntype Termios struct {\n\tCc [20]uint8\n\tCflag uint32\n\tIflag uint32\n\tIspeed int32\n\tLflag uint32\n\tOflag uint32\n\tOspeed int32\n}\n\ntype Timespec struct {\n\tSec int64\n}\n\ntype Timeval struct {\n\tSec int64\n}\n```\n\n----------------------------------------\n\nTITLE: Gofmt Format List Marker Tests\nDESCRIPTION: Gofmt-formatted version of list marker test cases, using tab indentation.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list7.txt#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n\t-\n\n❦\n\n\t- $\n\n❦\n\n\t- $\n\n❦\n\n❦\n\n\t1! List.\n\n❦\n```\n\n----------------------------------------\n\nTITLE: Adding README File to Git Repository\nDESCRIPTION: Adds a README.txt file to the repository and commits it with an explanatory message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/v2sub.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nat 2022-02-22T15:55:07-05:00\ngit add README.txt\ngit commit -m 'v2sub: add README.txt'\n```\n\n----------------------------------------\n\nTITLE: Module B Go.mod File\nDESCRIPTION: A Go module file for module 'example.com/b' which is the module being replaced in the test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_vendor_main_module_replaced.txt#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule example.com/b\n\ngo 1.21\n```\n\n----------------------------------------\n\nTITLE: Printing Current Time as JSON in Go\nDESCRIPTION: This Go program (`now`) gets the current time using `time.Now()` and encodes it as a JSON string to standard output. It exits with an error code 1 if JSON encoding fails. This utility is used in the main test script to capture timestamps.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_issue6480.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n-- now/now.go --\n// Writes time.Now() to a file\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n\t\"time\"\n)\n\nfunc main() {\n\tif err := json.NewEncoder(os.Stdout).Encode(time.Now()); err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Testing go list with unknown module\nDESCRIPTION: Executes 'go list -m' command with an unknown module and verifies the expected error output format without the --versions flag.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_versions.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo list -m -e -f $FMT example.com/retract/self/pseudo\nstdout '^example.com/retract/self/pseudo: \"module example.com/retract/self/pseudo: not a known dependency\" \"\"$'\n```\n\n----------------------------------------\n\nTITLE: First Example Test File Implementation\nDESCRIPTION: Defines two example functions (Example_z and Example_a) that increment and print a shared counter. Tests execution order preservation within the first file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_source_order.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Copyright 2013 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// Make sure that go test runs Example_z before Example_a, preserving source order.\n\npackage p\n\nimport \"fmt\"\n\nvar n int\n\nfunc Example_z() {\n\tn++\n\tfmt.Println(n)\n\t// Output: 1\n}\n\nfunc Example_a() {\n\tn++\n\tfmt.Println(n)\n\t// Output: 2\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Go Module\nDESCRIPTION: This snippet defines the module path for a Go project as 'example.com/missingpkg'. This declaration is typically found at the beginning of a `go.mod` file and is essential for Go's dependency management system.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_missingpkg_v1.0.1-beta.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/missingpkg\n```\n\n----------------------------------------\n\nTITLE: Error Package with Compilation Error\nDESCRIPTION: Go package demonstrating a compilation error with undefined reference to DoesNotCompile.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_cmd_v1.0.0-replace.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage err\n\nvar X = DoesNotCompile\n```\n\n----------------------------------------\n\nTITLE: Defining C Function in Main Module Header (C)\nDESCRIPTION: This C header file (`bar.h`), located in the main module's `c` directory, defines the `printfile` function. Similar to its vendored counterpart, it prints the current filename using the `__FILE__` macro to test the effect of the `-trimpath` flag.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_trimpath_macro.txt#2025-04-22_snippet_9\n\nLANGUAGE: C\nCODE:\n```\n#include \"stdio.h\"\n\nvoid printfile() {\n    printf(\"%s\\n\", __FILE__);\n}\n```\n\n----------------------------------------\n\nTITLE: External Test with Internal Package Import\nDESCRIPTION: Defines an external test file that imports an internal package and uses an exported variable.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_test_issue11864.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\npackage tx3_test\n\nimport \"vendor.org/tx3\"\nimport \"testing\"\n\nvar Found = tx3.Exported\n\nfunc TestNop(t *testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines a Go module named 'coverbad' with Go 1.16 as the required version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_error.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule coverbad\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Declaring FreeBSD Error and Interface Constants - Go\nDESCRIPTION: This block defines error code constants (e.g., ENOTRECOVERABLE, EOWNERDEAD, ELAST), BIOS ioctl values, and interface flag values for use in Go code targeting the FreeBSD syscalls layer. These declarations are important for handling OS error codes, setting network flags, and interacting with device files correctly. Used in system-level Go programs or Go packages that perform raw socket and network interface manipulation.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\nconst ENOTRECOVERABLE = 95\nconst ENOTRECOVERABLE Errno\nconst EOWNERDEAD = 96\nconst EOWNERDEAD Errno\nconst ELAST = 96\nconst IFT_CARP = 248\nconst IFT_CARP ideal-int\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Module Dependencies and Version - Go\nDESCRIPTION: A standard go.mod file that explicitly states the module path (\"example.net/ambiguous/nested\") and the Go language version. This file is required at the root of any module and directs Go tools for dependency resolution. No external dependencies are specified in this example.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_ambiguous_nested_v0.1.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/ambiguous/nested\\n\\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Defining Transitive Test Dependency Package 'y/fromotherdeptest' (Go)\nDESCRIPTION: Defines the package `y/fromotherdeptest` within the `y` module. It is imported only by the tests of `x/otherdep`. The comment highlights its role in testing: if the Go tool incorrectly resolves and loads this package when it shouldn't (e.g., without the `-test` flag or when `x/otherdep` isn't a root), it might incorrectly modify the main module's `go.mod` file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_notall.txt#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\n-- y/fromotherdeptest/fromotherdeptest.go --\n// Package fromotherdeptest is a test dependency of x/otherdep that is\n// not declared in x/go.mod. If the loader resolves this package,\n// it will add this module to the main module's go.mod file,\n// and we can detect the mistake.\npackage fromotherdeptest\n```\n\n----------------------------------------\n\nTITLE: Validating CompiledGoFiles with go list - Shell\nDESCRIPTION: This shell snippet runs the 'go list' command with a customized output template to verify which files are reported as compiled Go files in a module utilizing SWIG and Cgo. It expects a.go and a precise count of cache-based files, ensuring SWIG-generated C++ sources are not included in CompiledGoFiles. Conditional stdout checks enforce correct behavior across different compilers (gc, gccgo). 'go' must be installed and available; the module structure must match the provided layout.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_swigcxx.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo list -f '{{.CompiledGoFiles}}' -compiled=true example/swig\n\nstdout a\\.go\n[compiler:gc] stdout -count=3 $GOCACHE\n[compiler:gccgo] stdout -count=2 $GOCACHE\n```\n\n----------------------------------------\n\nTITLE: Defining Module Path for Go Toolchain\nDESCRIPTION: Specifies the module path for a mock Go toolchain used in testing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.netbsd-386.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngolang.org/toolchain@v0.0.1-go1.999testmod.netbsd-386\n```\n\n----------------------------------------\n\nTITLE: Declaring a Go Package\nDESCRIPTION: This snippet declares a Go package named 'lib'. This line must be the first non-comment line in a Go source file (like 'lib.go') and indicates that the definitions within the file belong to the 'lib' package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_missingpkg_v1.0.1-beta.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage lib\n```\n\n----------------------------------------\n\nTITLE: Lazy Package Test\nDESCRIPTION: Test file for the lazy package that imports an incompatible module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_implicit.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage lazy_test\n\nimport _ \"example.com/retract/incompatible\"\n```\n\n----------------------------------------\n\nTITLE: Source Code for Package 'b/x' (Go)\nDESCRIPTION: The source code for package `x` within module `b`. This package is imported by `a_test.go`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_import_allmod.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n-- b1/x/x.go --\npackage x\n```\n\n----------------------------------------\n\nTITLE: Go Module Configuration\nDESCRIPTION: A go.mod file defining the module dependencies and replacements. The module requires several packages and specifies local filesystem replacements for each dependency, demonstrating module replacement functionality.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vendormod.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\nrequire (\n\ta v1.0.0\n\tmysite/myname/mypkg v1.0.0\n\tw v1.0.0 // indirect\n\tx v1.0.0\n\ty v1.0.0\n\tz v1.0.0\n)\n\nreplace (\n\ta v1.0.0 => ./a\n\tmysite/myname/mypkg v1.0.0 => ./mypkg\n\tw v1.0.0 => ./w\n\tx v1.0.0 => ./x\n\ty v1.0.0 => ./y\n\tz v1.0.0 => ./z\n)\n```\n\n----------------------------------------\n\nTITLE: Gofmt Command Shell Script\nDESCRIPTION: A placeholder shell script for the 'gofmt' command that simply echoes a message indicating it's not used.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-arm64.txt#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: Handling Cgo Ldflag Errors in Go\nDESCRIPTION: This snippet demonstrates how the Go compiler handles invalid '//go:cgo_ldflag' directives outside of Cgo-generated code. It checks for errors when such directives are used incorrectly.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_bad_directives.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage x\n\n//go:cgo_ldflag \"-fplugin=foo.so\"\n\nimport \"C\"\n```\n\n----------------------------------------\n\nTITLE: Empty Go Package Definition\nDESCRIPTION: Defines an empty Go package named 'p' that will be renamed in a subsequent commit.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/retract-pseudo.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage p\n```\n\n----------------------------------------\n\nTITLE: Package B Test with Invalid Import\nDESCRIPTION: Test file for package b containing an illegal internal package import.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_internal.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage b\n\nimport (\n  _ \"a/x/internal/y\"\n)\n```\n\n----------------------------------------\n\nTITLE: Go List with Multiple Retractions\nDESCRIPTION: This snippet tests the order in which retractions are reported when a version is covered by multiple retractions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_rationale.txt#_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ngo list -m -retracted -f '{{range .Retracted}}{{.}},{{end}}' example.com/retract/rationale@v1.0.0-order\nstdout '^degenerate range,single version,$'\ngo list -m -retracted -f '{{range .Retracted}}{{.}},{{end}}' example.com/retract/rationale@v1.0.1-order\nstdout '^single version,degenerate range,$'\n```\n\n----------------------------------------\n\nTITLE: Markdown Output Format\nDESCRIPTION: Markdown format with inline link syntax\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/linklist3.txt#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nCool things:\n\n  - Foo\n  - [Go](https://go.dev/)\n  - Bar\n\n```\n\n----------------------------------------\n\nTITLE: Testing Quote Functions in Go\nDESCRIPTION: This snippet contains test functions for the quote package. It tests the Hello, Glass, Go, and Opt functions by comparing their outputs with expected strings. It also sets the LC_ALL environment variable to 'en' for consistent language behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v0.0.0-20180709153244-fd906ed3b100.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Copyright 2018 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\npackage quote\n\nimport (\n\t\"os\"\n\t\"testing\"\n)\n\nfunc init() {\n\tos.Setenv(\"LC_ALL\", \"en\")\n}\n\nfunc TestHello(t *testing.T) {\n\thello := \"Hello, world.\"\n\tif out := Hello(); out != hello {\n\t\tt.Errorf(\"Hello() = %q, want %q\", out, hello)\n\t}\n}\n\nfunc TestGlass(t *testing.T) {\n\tglass := \"I can eat glass and it doesn't hurt me.\"\n\tif out := Glass(); out != glass {\n\t\tt.Errorf(\"Glass() = %q, want %q\", out, glass)\n\t}\n}\n\nfunc TestGo(t *testing.T) {\n\tgo1 := \"Don't communicate by sharing memory, share memory by communicating.\"\n\tif out := Go(); out != go1 {\n\t\tt.Errorf(\"Go() = %q, want %q\", out, go1)\n\t}\n}\n\nfunc TestOpt(t *testing.T) {\n\topt := \"If a program is too slow, it must have a loop.\"\n\tif out := Opt(); out != opt {\n\t\tt.Errorf(\"Opt() = %q, want %q\", out, opt)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Go Debug Test File with Debug Settings\nDESCRIPTION: A Go file with build tag 'godebug' that includes debug directives setting default=go1.20 and asynctimerchan=0, used to test debug directive handling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/godebug_default.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n//go:build godebug\n//go:debug default=go1.20\n//go:debug asynctimerchan=0\n\npackage main\n```\n\n----------------------------------------\n\nTITLE: Main Module Configuration with Dependency Replacements\nDESCRIPTION: The main go.mod file for example.com/m that sets up the module structure for testing. It includes specific replacements for test modules and demonstrates how Go 1.17's pruning behavior affects indirect dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_graph_version.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Module m indirectly imports a package from\n// example.com/retract/incompatible. Its selected version of\n// that module is lower under Go 1.17 semantics than under Go 1.16.\nmodule example.com/m\n\ngo 1.17\n\nreplace (\n\texample.net/lazy v0.1.0 => ./lazy\n\texample.net/requireincompatible v0.1.0 => ./requireincompatible\n)\n\nrequire (\n\texample.com/retract/incompatible v1.0.0 // indirect\n\texample.net/lazy v0.1.0\n)\n```\n\n----------------------------------------\n\nTITLE: Test Implementation for Package 'a' in Go\nDESCRIPTION: Test function for package 'a' that verifies AFunc returns the expected value of 42.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_multipkg.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\nimport \"testing\"\n\nfunc TestA(t *testing.T) {\n\tif AFunc() != 42 {\n\t\tt.Fatalf(\"bad!\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding MLKEM Cryptography Support in Go\nDESCRIPTION: New constants, functions, and types for MLKEM (Module Lattice-based Key Encapsulation Mechanism) in the crypto/mlkem package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.24.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nconst CiphertextSize1024 = 1568\nconst CiphertextSize768 = 1088\nconst EncapsulationKeySize1024 = 1568\nconst EncapsulationKeySize768 = 1184\nconst SeedSize = 64\nconst SharedKeySize = 32\n\nfunc GenerateKey1024() (*DecapsulationKey1024, error)\nfunc GenerateKey768() (*DecapsulationKey768, error)\nfunc NewDecapsulationKey1024([]uint8) (*DecapsulationKey1024, error)\nfunc NewDecapsulationKey768([]uint8) (*DecapsulationKey768, error)\nfunc NewEncapsulationKey1024([]uint8) (*EncapsulationKey1024, error)\nfunc NewEncapsulationKey768([]uint8) (*EncapsulationKey768, error)\n\ntype DecapsulationKey1024 struct\ntype DecapsulationKey768 struct\ntype EncapsulationKey1024 struct\ntype EncapsulationKey768 struct\n```\n\n----------------------------------------\n\nTITLE: ConnectionState Struct Definition in Go TLS Package\nDESCRIPTION: Type definition showing CurveID field in the ConnectionState struct from the crypto/tls package.\nSOURCE: https://github.com/golang/go/blob/master/api/next/67516.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype ConnectionState struct {\n    CurveID CurveID\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Buffer References in Go Documentation\nDESCRIPTION: Shows an input text and its markdown formatted version comparing usage of *bytes.Buffer vs bytes.Buffer references.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/doclink7.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nYou see more [*bytes.Buffer] than [bytes.Buffer].\n```\n\nLANGUAGE: markdown\nCODE:\n```\nYou see more [\\*bytes.Buffer](/bytes#Buffer) than [bytes.Buffer](/bytes#Buffer).\n```\n\n----------------------------------------\n\nTITLE: Raw Input Text Format\nDESCRIPTION: Original input format showing a text block with a mixed numbered list structure.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list4.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nText.\n  1. List\n2. Not indented, not a list.\n  3. Another list.\n```\n\n----------------------------------------\n\nTITLE: Module with Local Replace Directive\nDESCRIPTION: go.mod file using a local replacement for the usequote module and requiring rsc.io/quote\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_changes.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.16\n\nrequire usequote v0.0.0\n\nreplace usequote => ./usequote\n```\n\n----------------------------------------\n\nTITLE: Executing `go clean -testcache` Tests in Shell\nDESCRIPTION: This shell script executes a series of tests for the `go clean -testcache` command. It sets environment variables (`GO111MODULE=off`, `GOCACHE`), navigates directories (`cd x`), runs `go test`, cleans the test cache, re-runs the test to check for caching behavior (`! stdout 'cached'`), and validates error handling for incorrect command usage (`! go clean -testcache ../x`) and non-existent cache directories (`! exists $WORK/nonexistent`). It references Go issues #29757 and #29100. The `[short] skip` directive likely indicates skipping in short test runs.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/clean_testcache.txt#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nenv GO111MODULE=off\n[short] skip\n\n# go clean -testcache\n# should work (see golang.org/issue/29757).\ncd x\ngo test x_test.go\ngo clean -testcache\ngo test x_test.go\n! stdout 'cached'\n! go clean -testcache ../x\nstderr 'go: clean -testcache cannot be used with package arguments'\n\n# golang.org/issue/29100: 'go clean -testcache' should succeed\n# if the cache directory doesn't exist at all.\n# It should not write a testexpire.txt file, since there are no\n# test results that need to be invalidated in the first place.\nenv GOCACHE=$WORK/nonexistent\ngo clean -testcache\n! exists $WORK/nonexistent\n```\n\n----------------------------------------\n\nTITLE: Minimal go.mod File for Root v0.1.0 Snapshot - Go\nDESCRIPTION: This 'go.mod' file identifies a snapshot version of the 'golang.org/issue/root' module and requires 'golang.org/issue/pkg' v0.1.0. It is used in the local replace mapping during tests to simulate versioned module dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_main.txt#2025-04-22_snippet_7\n\nLANGUAGE: go.mod\nCODE:\n```\nmodule golang.org/issue/root\n\nrequire golang.org/issue/pkg v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Verifying Git Commit History\nDESCRIPTION: Displays the commit log in a condensed format and compares it with an expected output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/commit-after-tag.txt#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit log --oneline --decorate=short\ncmp stdout .git-log\n```\n\n----------------------------------------\n\nTITLE: Initial go.mod File\nDESCRIPTION: The initial content of the go.mod file, defining the module name as 'x'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_commit.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nmodule x\n```\n\n----------------------------------------\n\nTITLE: Defining Test for Package 'b' Using Module 'c'\nDESCRIPTION: This Go test file belongs to package 'b_test'. It imports package 'c' and includes a test function `TestCVersion` that logs the `Version` constant from package 'c'. This test depends on the specific version of 'c' required by module 'b' (v0.2.0).\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_test_horizon.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n-- b1/b_test.go --\npackage b_test\n\nimport (\n\t\"c\"\n\t\"testing\"\n)\n\nfunc TestCVersion(t *testing.T) {\n\tt.Log(c.Version)\n}\n```\n\n----------------------------------------\n\nTITLE: Main Go Program\nDESCRIPTION: Simple Go program that prints 'hello, world' to demonstrate basic functionality.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_git_missing_tree.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {\n\tprintln(\"hello, world\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IP-related syscall constants for Darwin ARM64 CGO in Go\nDESCRIPTION: This snippet defines various IP-related constants used in system calls for the Darwin ARM64 CGO platform. These constants include IP protocol options, multicast settings, and firewall configurations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_157\n\nLANGUAGE: Go\nCODE:\n```\nconst IP_FW_RESETLOG ideal-int\nconst IP_FW_ZERO = 43\nconst IP_HDRINCL = 2\nconst IP_IPSEC_POLICY = 21\nconst IP_MAXPACKET = 65535\nconst IP_MAX_GROUP_SRC_FILTER = 512\nconst IP_MAX_MEMBERSHIPS = 4095\nconst IP_MAX_SOCK_MUTE_FILTER = 128\nconst IP_MAX_SOCK_SRC_FILTER = 128\nconst IP_MF = 8192\nconst IP_MIN_MEMBERSHIPS = 31\nconst IP_MSFILTER = 74\nconst IP_MSS = 576\nconst IP_MULTICAST_IF = 9\nconst IP_MULTICAST_IFINDEX = 66\nconst IP_MULTICAST_LOOP = 11\nconst IP_MULTICAST_TTL = 10\nconst IP_MULTICAST_VIF = 14\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module declaration file specifying Go version requirement\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_n_cover.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule M\n\ngo 1.21\n```\n\n----------------------------------------\n\nTITLE: Defining Package in Go\nDESCRIPTION: This snippet defines an empty package named pkg2 in Go.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_print.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage pkg2\n```\n\n----------------------------------------\n\nTITLE: Valid Go Package File\nDESCRIPTION: Valid Go source file that imports the bar package\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_err_stack.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage pkg\n\nimport \"sandbox/bar\"\n```\n\n----------------------------------------\n\nTITLE: Package Q Implementation and Tests\nDESCRIPTION: Implementation of package q with test file that imports package p\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync_irrelevant_dependency.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage q\n\nfunc Q() {\n}\n```\n\nLANGUAGE: go\nCODE:\n```\npackage q\n\nimport example.com/p\n\nfunc TestQ(t *testing.T) {\n\tp.P()\n}\n```\n\n----------------------------------------\n\nTITLE: Empty Link in Go Format\nDESCRIPTION: Shows Go syntax for an empty link reference with http:// URL\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/crash1.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n[]\\n\\n[]: http://\n```\n\n----------------------------------------\n\nTITLE: Declaring FreeBSD Socket Option and Routing Flags - Go\nDESCRIPTION: This block defines network routing flags and socket options constants (e.g., RTF_GWFLAG_COMPAT, SIOCAIFADDR, SIOCGIFSTATUS, SIOCSIFPHYADDR, SOCK_CLOEXEC, SO_VENDOR, TCP_VENDOR, etc.) for use in network device, socket management, and routing operations. These values allow Go programs to perform advanced socket setup and interact with FreeBSD's networking stack at a low level. Intended for developers writing network or device drivers, or those needing raw access to socket layer.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_11\n\nLANGUAGE: Go\nCODE:\n```\nconst RTF_GWFLAG_COMPAT = 2147483648\nconst RTF_GWFLAG_COMPAT ideal-int\nconst SIOCAIFADDR = 2151704858\nconst SIOCGIFSTATUS = 3274795323\nconst SIOCSIFPHYADDR = 2151704902\nconst SOCK_CLOEXEC = 268435456\nconst SOCK_CLOEXEC ideal-int\nconst SOCK_NONBLOCK = 536870912\nconst SOCK_NONBLOCK ideal-int\nconst SO_VENDOR = 2147483648\nconst SO_VENDOR ideal-int\nconst TCP_VENDOR = 2147483648\nconst TCP_VENDOR ideal-int\n\n```\n\n----------------------------------------\n\nTITLE: Formatting Text with Gofmt\nDESCRIPTION: This snippet demonstrates how the text appears when processed by gofmt, which doesn't affect plain text formatting.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/words.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nThis is an italicword and a linkedword and Unicöde.\n```\n\n----------------------------------------\n\nTITLE: Package z Definition\nDESCRIPTION: A simple Go package named z that serves as part of the test module structure.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_gobuild_import.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage z\n```\n\n----------------------------------------\n\nTITLE: Go Module Download with Commit Hash (GOPROXY=off)\nDESCRIPTION: Downloads a module version using a commit hash when GOPROXY is set to 'off'. This test verifies that the go command uses available pseudo-versions in the cache. The expected version is checked against the JSON output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_pseudo_cache.txt#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nenv GOPROXY=off\ngo mod download -json golang.org/x/text@a1b916ed6726\nstdout '\"Version\": \"v0.0.0-20171215141712-a1b916ed6726\",'\n```\n\n----------------------------------------\n\nTITLE: Defining Package 'b' in Go\nDESCRIPTION: Defines package `b` within module `M`. It contains a single exported function `BFunc` that returns the integer -42. This package is included in one of the test runs (`go test ./a ./b ./main`) but is not directly used by the `main` package or its tests, helping to verify that its presence doesn't alter `main`'s coverage.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_single_vs_multiple.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n-- b/b.go --\npackage b\n\nfunc BFunc() int {\n\treturn -42\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines a Go module with a dependency on an incompatible v2 version of split-incompatible package\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_issue41113.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule golang.org/issue/41113\n\ngo 1.16\n\nrequire example.com/split-incompatible v2.1.0-pre+incompatible\n```\n\n----------------------------------------\n\nTITLE: Diagnosing Go Test Import Cycles with go list (Shell)\nDESCRIPTION: Executes the `go list` command with flags `-e` (continue on error), `-test` (include test dependencies), and `-deps` (list dependencies) for the `./datastore/sql` package. This command is intended to trigger the Go compiler's import cycle detection mechanism, specifically for the scenario described in issue 45863 where a test package introduces the cycle.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_test_cycle.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo list -e -test -deps ./datastore/sql\n```\n\n----------------------------------------\n\nTITLE: Error Constants for Darwin ARM64\nDESCRIPTION: System error codes and their corresponding numeric values for error handling in system calls\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_57\n\nLANGUAGE: Go\nCODE:\n```\nconst (\n    E2BIG = 7\n    EACCES = 13\n    EADDRINUSE = 48\n    EADDRNOTAVAIL = 49\n    EAFNOSUPPORT = 47\n    EAGAIN = 35\n    // ... other error constants\n)\n```\n\n----------------------------------------\n\nTITLE: Module 'b' Definition with Dependency on x v0.1.0\nDESCRIPTION: The go.mod file for module 'b' that requires x v0.1.0. This creates a version selection challenge as module 'a' requires x v0.2.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_indirect_tidy.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule b\ngo 1.13\nrequire x v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Issue Package Definition\nDESCRIPTION: Main package file that imports the external dependency to demonstrate the version resolution behavior.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_lazy_self.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage issue46078\n\nimport _ \"example.net/x\"\n```\n\n----------------------------------------\n\nTITLE: Testing Mutex Profiling in Go with Default Output\nDESCRIPTION: Runs a Go test with mutex profiling enabled on the errors package. It then checks if the default test executable 'errors.test' was created.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_profile.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngo test -mutexprofile errors.prof errors\nexists -exec errors.test$GOEXE\n```\n\n----------------------------------------\n\nTITLE: Defining SCM (Socket Control Message) Constants in Go Syscall Package for Darwin-arm64-cgo\nDESCRIPTION: Constants for socket control message types used with sendmsg/recvmsg. These values identify the type of auxiliary data being passed, such as file descriptors (SCM_RIGHTS) or timestamps.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_179\n\nLANGUAGE: Go\nCODE:\n```\nconst SCM_RIGHTS = 1\nconst SCM_TIMESTAMP = 2\nconst SCM_CREDS = 3\nconst SCM_TIMESTAMP_MONOTONIC = 4\n```\n\n----------------------------------------\n\nTITLE: Defining Networking Syscall Constants for Darwin ARM64\nDESCRIPTION: Constant definitions for network-related system calls on Darwin ARM64 architecture. These include operations for sending and receiving data over sockets, with their corresponding numeric identifiers including their non-cancelable variants.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_106\n\nLANGUAGE: Go\nCODE:\n```\nconst SYS_SENDFILE = 337\nconst SYS_SENDMSG = 28\nconst SYS_SENDMSG_NOCANCEL = 402\nconst SYS_SENDTO = 133\nconst SYS_SENDTO_NOCANCEL = 413\nconst SYS_RECVFROM = 29\nconst SYS_RECVFROM_NOCANCEL = 403\nconst SYS_RECVMSG = 27\nconst SYS_RECVMSG_NOCANCEL = 401\nconst SYS_SETSOCKOPT = 105\n```\n\n----------------------------------------\n\nTITLE: Implementation of Package C with Test\nDESCRIPTION: Package 'c' containing a Go implementation and test with no dependencies. It has a global variable G and a function CFunc() that performs operations on the global variable.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverpkg_partial.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage c\n\nvar G int\n\nfunc CFunc(x, y int) int {\n\tG += x\n\tG -= y\n\treturn x + y\n}\n```\n\nLANGUAGE: go\nCODE:\n```\npackage c\n\nimport \"testing\"\n\nfunc TestC(t *testing.T) {\n\tif CFunc(10, 10) == 1010101 {\n\t\tt.Fatalf(\"bad!\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing QEMU Dependencies for ARM64 Build\nDESCRIPTION: Command to install required QEMU packages for running ARM64 builds on x86 systems. These packages enable the x86 kernel to execute ARM64 binaries through QEMU emulation.\nSOURCE: https://github.com/golang/go/blob/master/src/crypto/internal/boring/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\napt-get install qemu-user-static qemu-binfmt-support\n```\n\n----------------------------------------\n\nTITLE: Go Generate PWD Environment Variable Test\nDESCRIPTION: Test file for verifying the correct $PWD environment variable value during go generate execution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/generate.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\n//go:generate echo $PWD\n```\n\n----------------------------------------\n\nTITLE: Minimal Go Program\nDESCRIPTION: Simple Go program with an empty main function, used as a test file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_nomod.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Defining RTF (Routing Table Flag) Constants in Go Syscall Package for Darwin-arm64-cgo\nDESCRIPTION: Constants for routing table flags used in network routing operations on Darwin systems. These flags indicate properties of routes such as whether a route is up, static, or represents a router.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_175\n\nLANGUAGE: Go\nCODE:\n```\nconst RTF_UP = 1\nconst RTF_REJECT = 8\nconst RTF_XRESOLVE = 512\nconst RTF_STATIC = 2048\nconst RTF_PROTO2 = 16384\nconst RTF_WASCLONED = 131072\nconst RTF_PROTO3 = 262144\nconst RTF_PROXY = 134217728\nconst RTF_ROUTER = 268435456\n```\n\n----------------------------------------\n\nTITLE: Assembly Implementation\nDESCRIPTION: Assembly implementation of function f that contains an invalid MOVW instruction, used to test go vet's assembly validation capabilities.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_asm.txt#2025-04-22_snippet_1\n\nLANGUAGE: assembly\nCODE:\n```\nTEXT ·f(SB),0,$0-1\n\tMOVW\tx+0(FP), AX\n\tRET\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module declaration for a Go submodule defining the module path using vcs-test.golang.org domain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/prefixtagtests.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule vcs-test.golang.org/git/prefixtagtests.git/sub\n```\n\n----------------------------------------\n\nTITLE: NetBSD ARM64 Data Structure Definitions\nDESCRIPTION: Definitions of system-level data structures used for file operations, networking, and system information. These structures define the format for interacting with the operating system.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_162\n\nLANGUAGE: Go\nCODE:\n```\ntype BpfHdr struct {\n    Tstamp Timeval\n    Caplen uint32\n    Datalen uint32\n    Hdrlen uint16\n    Pad_cgo_0 [6]uint8\n}\n\ntype Dirent struct {\n    Fileno uint64\n    Reclen uint16\n    Type uint8\n    Namlen uint16\n    Name [512]int8\n    Pad_cgo_0 [3]uint8\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Executing ABI Test Program in Go\nDESCRIPTION: This snippet demonstrates the build and execution commands for the ABI test program. It builds the program with internal linking mode and also as a position-independent executable (PIE).\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_ppc64_linker_funcs.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo build -ldflags='-linkmode=internal'\nexec ./abitest\nstdout success\n\ngo build -buildmode=pie -o abitest.pie -ldflags='-linkmode=internal'\nexec ./abitest.pie\nstdout success\n```\n\n----------------------------------------\n\nTITLE: Raw Input Format\nDESCRIPTION: Original input text showing different list and paragraph combinations with varying spacing patterns.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list6.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nText.\n - List immediately after.\n - Another.\n\nMore text.\n\n - List after blank line.\n - Another.\n\nEven more text.\n - List immediately after.\n\n - Blank line between items.\n\nYet more text.\n\n - Another list after blank line.\n\n - Blank line between items.\n\nStill more text.\n - One list item.\n\n   Multiple paragraphs.\n```\n\n----------------------------------------\n\nTITLE: Package P1 Definition\nDESCRIPTION: Simple package p1 defining a string constant Name\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_export_e.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage p1\n\nconst Name = \"p1\"\n```\n\n----------------------------------------\n\nTITLE: Process Control Constants for NetBSD ARM64\nDESCRIPTION: Constants for process control operations in NetBSD on ARM64. These values are used with wait, waitpid, and similar system calls to control how the system waits for or reports on child processes.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_156\n\nLANGUAGE: Go\nCODE:\n```\nconst WALL = 8\nconst WALLSIG = 8\nconst WALTSIG = 4\nconst WCLONE = 4\nconst WCOREFLAG = 128\nconst WNOHANG = 1\nconst WNOWAIT = 65536\nconst WNOZOMBIE = 131072\nconst WOPTSCHECKED = 262144\nconst WSTOPPED = 127\nconst WUNTRACED = 2\n```\n\n----------------------------------------\n\nTITLE: External Test for Cgo Package\nDESCRIPTION: An external test that imports the cgocover2 package and tests the F() function. This is used to verify that code coverage works correctly with cgo code.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_cgo_xtest.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage p_test\n\nimport (\n\t. \"cgocover2\"\n\t\"testing\"\n)\n\nfunc TestF(t *testing.T) {\n\tF()\n}\n```\n\n----------------------------------------\n\nTITLE: Module Declaration for sub/v2\nDESCRIPTION: Declares a Go module named 'new/sub/v2'\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_legacy_mod.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule new/sub/v2\n```\n\n----------------------------------------\n\nTITLE: Testing Case-Insensitive Import Collision Error in Go\nDESCRIPTION: A command that attempts to build Go code with case-insensitive import collisions, which should fail with an error message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_collision.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n! go build\nstderr 'case-insensitive import collision'\n```\n\n----------------------------------------\n\nTITLE: Toolexec Program Implementation\nDESCRIPTION: Main implementation of the toolexec program that executes build tools and reports package information. It handles tool execution and environment variable reporting.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/toolexec.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n)\n\nfunc main() {\n\ttool, args := os.Args[1], os.Args[2:]\n\ttoolName := filepath.Base(tool)\n\tif len(args) > 0 && args[0] == \"-V=full\" {\n\t\t// We can't alter the version output.\n\t} else {\n\t\t// Print which tool we're running, and on what package.\n\t\tfmt.Fprintf(os.Stdout, \"%s TOOLEXEC_IMPORTPATH=%q\\n\", toolName, os.Getenv(\"TOOLEXEC_IMPORTPATH\"))\n\t}\n\n\t// Simply run the tool.\n\tcmd := exec.Command(tool, args...)\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n\tif err := cmd.Run(); err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: OpenBSD Memory Mapping Constants\nDESCRIPTION: Memory mapping and protection flag constants for OpenBSD AMD64 platform defining various memory access and sharing options.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_60\n\nLANGUAGE: Go\nCODE:\n```\nconst (\n    MAP_FIXED = 16\n    MAP_FLAGMASK = 8183\n    MAP_HASSEMAPHORE = 512\n    MAP_INHERIT = 128\n    MAP_PRIVATE = 2\n    MAP_SHARED = 1\n    PROT_EXEC = 4\n    PROT_NONE = 0\n    PROT_READ = 1\n    PROT_WRITE = 2\n)\n```\n\n----------------------------------------\n\nTITLE: Berkeley Packet Filter (BPF) Constants\nDESCRIPTION: Defines constants for Berkeley Packet Filter operations and configurations on Darwin ARM64. These are used for network packet filtering and capture.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_53\n\nLANGUAGE: Go\nCODE:\n```\nconst BIOCFLUSH = 536887912\nconst BIOCGBLEN = 1074020966\nconst BIOCGDLT = 1074020970\nconst BIOCGDLTLIST = 3222028921\nconst BPF_A = 16\nconst BPF_ABS = 32\nconst BPF_ADD = 0\nconst BPF_ALIGNMENT = 4\nconst BPF_ALU = 4\nconst BPF_AND = 80\n```\n\n----------------------------------------\n\nTITLE: Git Environment Configuration and Repository Setup\nDESCRIPTION: Sets up git environment variables for author/committer information and initializes a new git repository with initial commit and tag\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/gitreposubdir.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GIT_AUTHOR_NAME='Sam Thanawalla'\nenv GIT_AUTHOR_EMAIL='samthanawalla@google.com'\nenv GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME\nenv GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL\n\ngit init\n\ngit add foo/subdir\ngit commit -m 'initial commit'\ngit branch -m master\ngit tag foo/subdir/v1.2.3\n```\n\n----------------------------------------\n\nTITLE: Custom Go Executable Script\nDESCRIPTION: Shell script that replaces the standard 'go' command with a test version that outputs a version identifier.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-amd64.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Memory Advisory Constants for OpenBSD in Go\nDESCRIPTION: Defines memory advisory constants used with madvise() system call on OpenBSD. These constants provide hints to the kernel about how memory will be accessed.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_50\n\nLANGUAGE: Go\nCODE:\n```\nconst MADV_NORMAL = 0        // No special treatment\nconst MADV_RANDOM = 1        // Expect random page references\nconst MADV_SEQUENTIAL = 2    // Expect sequential page references\nconst MADV_WILLNEED = 3      // Will need these pages\nconst MADV_DONTNEED = 4      // Don't need these pages\nconst MADV_SPACEAVAIL = 5    // Insure that resources are reserved\nconst MADV_FREE = 6          // Free pages only if memory pressure\n```\n\n----------------------------------------\n\nTITLE: Submodule Package Definition in z Directory\nDESCRIPTION: Go file defining package z as part of a nested submodule that should be excluded from parent module's package listing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_fs_patterns.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage z\n```\n\n----------------------------------------\n\nTITLE: Socket Option Constants (SO_* family) for Darwin ARM64\nDESCRIPTION: This snippet defines socket option constants used with setsockopt/getsockopt calls to configure socket behavior on Darwin ARM64. These constants control various aspects of socket functionality including buffering, timing, error handling, and socket-specific features.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_97\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (darwin-arm64), const SO_ACCEPTCONN = 2\npkg syscall (darwin-arm64), const SO_ACCEPTCONN ideal-int\npkg syscall (darwin-arm64), const SO_BROADCAST = 32\npkg syscall (darwin-arm64), const SO_DEBUG = 1\npkg syscall (darwin-arm64), const SO_DEBUG ideal-int\npkg syscall (darwin-arm64), const SO_DONTROUTE = 16\npkg syscall (darwin-arm64), const SO_DONTTRUNC = 8192\npkg syscall (darwin-arm64), const SO_DONTTRUNC ideal-int\npkg syscall (darwin-arm64), const SO_ERROR = 4103\npkg syscall (darwin-arm64), const SO_ERROR ideal-int\npkg syscall (darwin-arm64), const SO_KEEPALIVE = 8\npkg syscall (darwin-arm64), const SO_LABEL = 4112\npkg syscall (darwin-arm64), const SO_LABEL ideal-int\npkg syscall (darwin-arm64), const SO_LINGER = 128\npkg syscall (darwin-arm64), const SO_LINGER_SEC = 4224\npkg syscall (darwin-arm64), const SO_LINGER_SEC ideal-int\npkg syscall (darwin-arm64), const SO_NKE = 4129\npkg syscall (darwin-arm64), const SO_NKE ideal-int\npkg syscall (darwin-arm64), const SO_NOADDRERR = 4131\npkg syscall (darwin-arm64), const SO_NOADDRERR ideal-int\npkg syscall (darwin-arm64), const SO_NOSIGPIPE = 4130\npkg syscall (darwin-arm64), const SO_NOSIGPIPE ideal-int\npkg syscall (darwin-arm64), const SO_NOTIFYCONFLICT = 4134\npkg syscall (darwin-arm64), const SO_NOTIFYCONFLICT ideal-int\npkg syscall (darwin-arm64), const SO_NP_EXTENSIONS = 4227\npkg syscall (darwin-arm64), const SO_NP_EXTENSIONS ideal-int\npkg syscall (darwin-arm64), const SO_NREAD = 4128\npkg syscall (darwin-arm64), const SO_NREAD ideal-int\npkg syscall (darwin-arm64), const SO_NUMRCVPKT = 4370\npkg syscall (darwin-arm64), const SO_NUMRCVPKT ideal-int\npkg syscall (darwin-arm64), const SO_NWRITE = 4132\npkg syscall (darwin-arm64), const SO_NWRITE ideal-int\npkg syscall (darwin-arm64), const SO_OOBINLINE = 256\npkg syscall (darwin-arm64), const SO_OOBINLINE ideal-int\npkg syscall (darwin-arm64), const SO_PEERLABEL = 4113\npkg syscall (darwin-arm64), const SO_PEERLABEL ideal-int\npkg syscall (darwin-arm64), const SO_RANDOMPORT = 4226\npkg syscall (darwin-arm64), const SO_RANDOMPORT ideal-int\npkg syscall (darwin-arm64), const SO_RCVBUF = 4098\npkg syscall (darwin-arm64), const SO_RCVLOWAT = 4100\npkg syscall (darwin-arm64), const SO_RCVLOWAT ideal-int\npkg syscall (darwin-arm64), const SO_RCVTIMEO = 4102\npkg syscall (darwin-arm64), const SO_RCVTIMEO ideal-int\npkg syscall (darwin-arm64), const SO_REUSEADDR = 4\npkg syscall (darwin-arm64), const SO_REUSEPORT = 512\npkg syscall (darwin-arm64), const SO_REUSEPORT ideal-int\npkg syscall (darwin-arm64), const SO_REUSESHAREUID = 4133\npkg syscall (darwin-arm64), const SO_REUSESHAREUID ideal-int\npkg syscall (darwin-arm64), const SO_SNDBUF = 4097\npkg syscall (darwin-arm64), const SO_SNDLOWAT = 4099\npkg syscall (darwin-arm64), const SO_SNDLOWAT ideal-int\npkg syscall (darwin-arm64), const SO_SNDTIMEO = 4101\npkg syscall (darwin-arm64), const SO_SNDTIMEO ideal-int\npkg syscall (darwin-arm64), const SO_TIMESTAMP = 1024\npkg syscall (darwin-arm64), const SO_TIMESTAMP ideal-int\npkg syscall (darwin-arm64), const SO_TIMESTAMP_MONOTONIC = 2048\n```\n\n----------------------------------------\n\nTITLE: Module Definition in go.mod File\nDESCRIPTION: Standard go.mod file defining the module name for the Go toolchain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.netbsd-386.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Bash Test Script for Go Fuzzing Crash Recovery\nDESCRIPTION: A bash test script that verifies the Go fuzzing engine's ability to recover crashing inputs when workers terminate unexpectedly. It runs a fuzzing test that intentionally crashes after 100 iterations and then verifies the recovered input matches what was expected.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_mutator_repeat.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# TODO(jayconrod): support shared memory on more platforms.\n[!GOOS:darwin] [!GOOS:linux] [!GOOS:windows] skip\n\n# Verify that the fuzzing engine records the actual crashing input, even when\n# a worker process terminates without communicating the crashing input back\n# to the coordinator.\n\n[short] skip\nenv GOCACHE=$WORK/cache\n\n# Start fuzzing. The worker crashes after 100 iterations.\n# The fuzz function writes the crashing input to \"want\" before exiting.\n# The fuzzing engine reconstructs the crashing input and saves it to testdata.\n! exists want\n! go test -fuzz=. -parallel=1 -fuzztime=110x -fuzzminimizetime=10x -v\nstdout '^\\s+fuzzing process hung or terminated unexpectedly: exit status'\nstdout 'Failing input written to testdata'\n\n# Run the fuzz target without fuzzing. The fuzz function is called with the\n# crashing input in testdata. The test passes if that input is identical to\n# the one saved in \"want\".\nexists want\ngo test -want=want\n```\n\n----------------------------------------\n\nTITLE: Defining System Call Numbers in Go for OpenBSD 386 CGO\nDESCRIPTION: This snippet defines system call numbers for various operations such as clock management, file operations, and process control on OpenBSD 386.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_47\n\nLANGUAGE: Go\nCODE:\n```\nconst SYS_CLOCK_GETRES = 89\nconst SYS_CLOCK_GETTIME = 87\nconst SYS_CLOCK_SETTIME = 88\nconst SYS_FSTAT = 53\nconst SYS_FSTATAT = 42\nconst SYS_GETRUSAGE = 19\nconst SYS_GETTIMEOFDAY = 67\nconst SYS_LSTAT = 40\nconst SYS_NANOSLEEP = 91\nconst SYS_STAT = 38\n```\n\n----------------------------------------\n\nTITLE: Go Fuzzing Test Functions\nDESCRIPTION: Test functions that implement different fuzzing scenarios for testing the minimizer behavior, including zero duration settings, recoverable errors, and non-recoverable errors.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_minimize.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage y\n\nimport (\n\t\"os\"\n\t\"testing\"\n)\n\nfunc FuzzMinimizeZeroDurationSet(f *testing.F) {\n\tf.Fuzz(func(t *testing.T, b []byte) {\n\t\tif len(b) > 5 {\n\t\t\tt.Errorf(\"there was an Error\")\n\t\t}\n\t})\n}\n\nfunc FuzzMinimizeZeroLimitSet(f *testing.F) {\n\tf.Fuzz(func(t *testing.T, b []byte) {\n\t\tif len(b) > 5 {\n\t\t\tt.Errorf(\"there was an Error\")\n\t\t}\n\t})\n}\n\nfunc FuzzMinimizerRecoverable(f *testing.F) {\n\tf.Add(make([]byte, 100))\n\tf.Fuzz(func(t *testing.T, b []byte) {\n\t\tif len(b) < 50 {\n\t\t\t// Make sure that b is large enough that it can be minimized\n\t\t\treturn\n\t\t}\n\t\t// Given the randomness of the mutations, this should allow the\n\t\t// minimizer to trim down the value a bit.\n\t\tfor _, n := range b {\n\t\t\tif n != 0 {\n\t\t\t\tif len(b) == 50 {\n\t\t\t\t\tt.Log(\"got the minimum size!\")\n\t\t\t\t}\n\t\t\t\tt.Fatalf(\"contains a non-zero byte of length %d\", len(b))\n\t\t\t}\n\t\t}\n\t})\n}\n\nfunc FuzzMinimizerNonrecoverable(f *testing.F) {\n\tf.Fuzz(func(t *testing.T, b []byte) {\n\t\tos.Exit(99)\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Setting GOPROXY Environment Variable in Go Builder\nDESCRIPTION: Sets the GOPROXY environment variable to https://proxy.golang.org for the go-builder. This ensures that the correct proxy is used for fetching Go modules.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/gotoolchain_version.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n[!go-builder] env GOPROXY=https://proxy.golang.org\n```\n\n----------------------------------------\n\nTITLE: Basic Command Package B\nDESCRIPTION: Minimal Go command package implementation with empty main function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_cmd_v1.0.0-replace.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Running Go Module Verification Command\nDESCRIPTION: A simple Go command to verify modules in the workspace, which is the core of the regression test for Issue #62663.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_verify_work.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo mod verify\n```\n\n----------------------------------------\n\nTITLE: Declaring Go Package for Renamed Module\nDESCRIPTION: This Go source file defines the package `newname`. This package declaration corresponds to the last component of the module path `example.com/retract/newname` defined in the `go.mod` file, establishing the primary package for the code within this renamed module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rename_v1.9.0-new.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage newname\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines a local Go module with dependencies on golang.org/x/text and rsc.io/quote packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_local.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule local\n\nrequire (\n\tgolang.org/x/text v0.0.0-20170915032832-14c0d48ead0c\n\trsc.io/quote v1.3.0\n)\n```\n\n----------------------------------------\n\nTITLE: Go Module File with Future Version\nDESCRIPTION: This go.mod file specifies a future Go version (1.99999) to simulate a module requiring a newer Go version than currently available.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_goline_too_new.txt#2025-04-22_snippet_4\n\nLANGUAGE: Plain Text\nCODE:\n```\nmodule example\ngo 1.99999\n```\n\n----------------------------------------\n\nTITLE: Defining Error Code Constants for NetBSD ARM64\nDESCRIPTION: These constants define system error codes used in NetBSD ARM64. They represent various error conditions that can occur during system calls and are returned to indicate the specific error that occurred.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_122\n\nLANGUAGE: Go\nCODE:\n```\nconst E2BIG = 7\nconst EACCES = 13\nconst EADDRINUSE = 48\nconst EADDRNOTAVAIL = 49\nconst EAFNOSUPPORT = 47\nconst EAGAIN = 35\nconst EALREADY = 37\nconst EAUTH = 80\nconst EAUTH Errno\nconst EBADF = 9\nconst EBADMSG = 88\nconst EBADMSG Errno\nconst EBADRPC = 72\nconst EBADRPC Errno\nconst EBUSY = 16\nconst ECANCELED = 87\nconst ECHILD = 10\nconst ECHO = 8\nconst ECHOCTL = 64\nconst ECHOCTL ideal-int\nconst ECHOE = 2\nconst ECHOE ideal-int\nconst ECHO ideal-int\nconst ECHOK = 4\nconst ECHOKE = 1\nconst ECHOKE ideal-int\nconst ECHOK ideal-int\nconst ECHONL = 16\nconst ECHONL ideal-int\nconst ECHOPRT = 32\nconst ECHOPRT ideal-int\nconst ECONNABORTED = 53\nconst ECONNREFUSED = 61\nconst ECONNRESET = 54\nconst EDEADLK = 11\nconst EDESTADDRREQ = 39\nconst EDOM = 33\nconst EDQUOT = 69\n```\n\n----------------------------------------\n\nTITLE: Testing Git clone errors with custom SSH command\nDESCRIPTION: This snippet tests the handling of Git clone errors by configuring Git to use SSH and setting a non-functional SSH command. It verifies that the specific Git error is shown instead of a generic 'unknown revision' error.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_private_vcs.txt#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexec git config --global url.git@github.com.insteadOf https://github.com/\nenv GIT_SSH_COMMAND=false\n! go install github.com/golang/nonexist@master\nstderr 'fatal: Could not read from remote repository.'\n! stderr 'unknown revision'\n! stdout .\n```\n\n----------------------------------------\n\nTITLE: Defining Memory Management Constants for NetBSD ARM64 in Go\nDESCRIPTION: This snippet defines constants related to memory management and memory-mapped files on NetBSD ARM64. These constants are used with mmap and related system calls to control memory allocation and behavior.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_138\n\nLANGUAGE: Go\nCODE:\n```\nconst MADV_DONTNEED = 4\nconst MADV_DONTNEED ideal-int\nconst MADV_FREE = 6\nconst MADV_FREE ideal-int\nconst MADV_NORMAL = 0\nconst MADV_NORMAL ideal-int\nconst MADV_RANDOM = 1\nconst MADV_RANDOM ideal-int\nconst MADV_SEQUENTIAL = 2\nconst MADV_SEQUENTIAL ideal-int\nconst MADV_SPACEAVAIL = 5\nconst MADV_SPACEAVAIL ideal-int\nconst MADV_WILLNEED = 3\nconst MADV_WILLNEED ideal-int\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Standard go.mod file that defines the module path as 'golang.org/toolchain'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-arm.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Syslog Priority Constants\nDESCRIPTION: System log priority level constants used in the log/syslog package for Darwin ARM64. These constants define various logging levels and facilities for system logging.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_48\n\nLANGUAGE: Go\nCODE:\n```\nconst (\n    LOG_EMERG = 0\n    LOG_ALERT = 1\n    LOG_CRIT = 2\n    LOG_ERR = 3\n    LOG_WARNING = 4\n    LOG_NOTICE = 5\n    LOG_INFO = 6\n    LOG_DEBUG = 7\n)\n```\n\n----------------------------------------\n\nTITLE: Implicit Package Import\nDESCRIPTION: Package declaration with an implicit import of the lazy module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_implicit.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage implicit\n\nimport _ \"example.net/lazy\"\n```\n\n----------------------------------------\n\nTITLE: Adding Extra field to BenchmarkResult struct in testing package\nDESCRIPTION: Definition of the Extra field in the BenchmarkResult struct of the testing package. This field stores custom metrics reported during benchmarks.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_175\n\nLANGUAGE: go\nCODE:\n```\ntype BenchmarkResult struct {\n\tExtra map[string]float64\n\t// Other fields not shown\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal Go Program with External Package Import\nDESCRIPTION: This Go program imports the 'golang.org/x/text/language' package but doesn't use it directly. It serves as a minimal test case for module resolution and compatibility with very old declared Go versions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_oldgo.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport _ \"golang.org/x/text/language\"\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Basic Go module declaration for the test package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_err_deadlock.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule test\n```\n\n----------------------------------------\n\nTITLE: Testing GOINSECURE with Checksum Lookup\nDESCRIPTION: Verifies that GOINSECURE does not bypass checksum lookup. Expects the command to fail with a 504 error even with GOINSECURE set.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_cache.txt#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nenv GOINSECURE=rsc.io\nenv GOPROXY=$proxy/sumdb-504\n! go get rsc.io/quote@v1.5.2\nstderr 504\n```\n\n----------------------------------------\n\nTITLE: Defining Terminal I/O Constants in Go for Darwin ARM64\nDESCRIPTION: This snippet defines constants used for terminal I/O operations on Darwin ARM64. These flags control various aspects of terminal behavior and output processing.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_165\n\nLANGUAGE: Go\nCODE:\n```\nconst NOFLSH = 2147483648\nconst OCRNL = 16\nconst OFDEL = 131072\nconst OFILL = 128\nconst ONLCR = 2\nconst ONLRET = 64\nconst ONOCR = 32\nconst ONOEOT = 8\nconst OPOST = 1\n```\n\n----------------------------------------\n\nTITLE: Defining Linux-specific Package s\nDESCRIPTION: Creates a Linux-specific implementation of package 's'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_all_gobuild.txt#2025-04-22_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\npackage s\n```\n\n----------------------------------------\n\nTITLE: Package with Direct Deprecated Import - a.go\nDESCRIPTION: Defines a package that directly imports a deprecated module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_deprecated.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\nimport _ \"example.com/deprecated/a\"\n```\n\n----------------------------------------\n\nTITLE: Checking error for current directory\nDESCRIPTION: Uses 'go list' to check the error message for the current directory, which should indicate no Go files.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_empty_err.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo list -e -f {{.Error}} .\nstdout 'no Go files in '$WORK\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Basic Go module definition file specifying module name and Go version 1.8.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_edit_go.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule m\ngo 1.8\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition File\nDESCRIPTION: Original go.mod file that defines the module name for the test project.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goauth_git.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule private.example.com\n```\n\n----------------------------------------\n\nTITLE: Main Package Files\nDESCRIPTION: Main package files that import the test packages\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_import_comment.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nimport \"m/bad\"\n```\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nimport \"m/conflict\"\n```\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nimport _ \"m/works/x\"\n```\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nimport \"m/wrongplace\"\n```\n\n----------------------------------------\n\nTITLE: Test Package with Main Import\nDESCRIPTION: Test file attempting to import main package from a standard package test file, which should fail\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/import_main.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage p2\n\nimport (\n\t\"testing\"\n\txmain \"x\"\n)\n\nvar _ = xmain.X\n\nfunc TestFoo(t *testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Syntax Error in Go Test File\nDESCRIPTION: This Go test file contains intentional syntax errors to demonstrate how Go handles malformed test files.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_badtest.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage badsyntax\n\nfunc func func func func!\n```\n\n----------------------------------------\n\nTITLE: Module Declaration in Go.mod\nDESCRIPTION: A minimal go.mod file that declares a module named 'm'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_internal.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Compiling Go Test Binaries\nDESCRIPTION: This snippet compiles multiple Go test binaries in parallel using the go test -c command. It creates executables for different test scenarios including mainpanic, mainexit0, testpanic, and testbgpanic.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_json_exit.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo test -c -o mainpanic.exe ./mainpanic &\ngo test -c -o mainexit0.exe ./mainexit0 &\ngo test -c -o testpanic.exe ./testpanic &\ngo test -c -o testbgpanic.exe ./testbgpanic &\nwait\n```\n\n----------------------------------------\n\nTITLE: Defining Network Data Link Type Constants for NetBSD ARM64\nDESCRIPTION: These constants define various Data Link Types (DLT) used in network packet capturing and processing on NetBSD ARM64. They represent different network interface and protocol types that can be used with pcap and similar libraries.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_120\n\nLANGUAGE: Go\nCODE:\n```\nconst DLT_IPV4 ideal-int\nconst DLT_IPV6 = 229\nconst DLT_IPV6 ideal-int\nconst DLT_JUNIPER_ATM1 = 137\nconst DLT_JUNIPER_ATM1 ideal-int\nconst DLT_JUNIPER_ATM2 = 135\nconst DLT_JUNIPER_ATM2 ideal-int\nconst DLT_JUNIPER_CHDLC = 181\nconst DLT_JUNIPER_CHDLC ideal-int\nconst DLT_JUNIPER_ES = 132\nconst DLT_JUNIPER_ES ideal-int\nconst DLT_JUNIPER_ETHER = 178\nconst DLT_JUNIPER_ETHER ideal-int\nconst DLT_JUNIPER_FRELAY = 180\nconst DLT_JUNIPER_FRELAY ideal-int\nconst DLT_JUNIPER_GGSN = 133\nconst DLT_JUNIPER_GGSN ideal-int\nconst DLT_JUNIPER_ISM = 194\nconst DLT_JUNIPER_ISM ideal-int\nconst DLT_JUNIPER_MFR = 134\nconst DLT_JUNIPER_MFR ideal-int\nconst DLT_JUNIPER_MLFR = 131\nconst DLT_JUNIPER_MLFR ideal-int\nconst DLT_JUNIPER_MLPPP = 130\nconst DLT_JUNIPER_MLPPP ideal-int\nconst DLT_JUNIPER_MONITOR = 164\nconst DLT_JUNIPER_MONITOR ideal-int\nconst DLT_JUNIPER_PIC_PEER = 174\nconst DLT_JUNIPER_PIC_PEER ideal-int\nconst DLT_JUNIPER_PPP = 179\nconst DLT_JUNIPER_PPP ideal-int\nconst DLT_JUNIPER_PPPOE = 167\nconst DLT_JUNIPER_PPPOE_ATM = 168\nconst DLT_JUNIPER_PPPOE_ATM ideal-int\nconst DLT_JUNIPER_PPPOE ideal-int\nconst DLT_JUNIPER_SERVICES = 136\nconst DLT_JUNIPER_SERVICES ideal-int\nconst DLT_JUNIPER_ST = 200\nconst DLT_JUNIPER_ST ideal-int\nconst DLT_JUNIPER_VP = 183\nconst DLT_JUNIPER_VP ideal-int\nconst DLT_LAPB_WITH_DIR = 207\nconst DLT_LAPB_WITH_DIR ideal-int\nconst DLT_LAPD = 203\nconst DLT_LAPD ideal-int\nconst DLT_LIN = 212\nconst DLT_LIN ideal-int\nconst DLT_LINUX_EVDEV = 216\nconst DLT_LINUX_EVDEV ideal-int\nconst DLT_LINUX_IRDA = 144\nconst DLT_LINUX_IRDA ideal-int\nconst DLT_LINUX_LAPD = 177\nconst DLT_LINUX_LAPD ideal-int\nconst DLT_LINUX_SLL = 113\nconst DLT_LINUX_SLL ideal-int\nconst DLT_LOOP = 108\nconst DLT_LOOP ideal-int\nconst DLT_LTALK = 114\nconst DLT_LTALK ideal-int\nconst DLT_MFR = 182\nconst DLT_MFR ideal-int\nconst DLT_MOST = 211\nconst DLT_MOST ideal-int\nconst DLT_MPLS = 219\nconst DLT_MPLS ideal-int\nconst DLT_MTP2 = 140\nconst DLT_MTP2 ideal-int\nconst DLT_MTP2_WITH_PHDR = 139\nconst DLT_MTP2_WITH_PHDR ideal-int\nconst DLT_MTP3 = 141\nconst DLT_MTP3 ideal-int\nconst DLT_NULL = 0\nconst DLT_NULL ideal-int\nconst DLT_PCI_EXP = 125\nconst DLT_PCI_EXP ideal-int\nconst DLT_PFLOG = 117\nconst DLT_PFLOG ideal-int\nconst DLT_PFSYNC = 18\nconst DLT_PFSYNC ideal-int\nconst DLT_PPI = 192\nconst DLT_PPI ideal-int\nconst DLT_PPP = 9\nconst DLT_PPP_BSDOS = 14\nconst DLT_PPP_BSDOS ideal-int\nconst DLT_PPP_ETHER = 51\nconst DLT_PPP_ETHER ideal-int\nconst DLT_PPP ideal-int\nconst DLT_PPP_PPPD = 166\nconst DLT_PPP_PPPD ideal-int\nconst DLT_PPP_SERIAL = 50\nconst DLT_PPP_SERIAL ideal-int\nconst DLT_PPP_WITH_DIR = 204\nconst DLT_PPP_WITH_DIR ideal-int\nconst DLT_PRISM_HEADER = 119\nconst DLT_PRISM_HEADER ideal-int\nconst DLT_PRONET = 4\nconst DLT_PRONET ideal-int\nconst DLT_RAIF1 = 198\nconst DLT_RAIF1 ideal-int\nconst DLT_RAW = 12\nconst DLT_RAWAF_MASK = 35913728\nconst DLT_RAWAF_MASK ideal-int\nconst DLT_RAW ideal-int\nconst DLT_RIO = 124\nconst DLT_RIO ideal-int\nconst DLT_SCCP = 142\nconst DLT_SCCP ideal-int\nconst DLT_SITA = 196\nconst DLT_SITA ideal-int\nconst DLT_SLIP = 8\nconst DLT_SLIP_BSDOS = 13\nconst DLT_SLIP_BSDOS ideal-int\nconst DLT_SLIP ideal-int\nconst DLT_SUNATM = 123\nconst DLT_SUNATM ideal-int\nconst DLT_SYMANTEC_FIREWALL = 99\nconst DLT_SYMANTEC_FIREWALL ideal-int\nconst DLT_TZSP = 128\nconst DLT_TZSP ideal-int\nconst DLT_USB = 186\nconst DLT_USB ideal-int\nconst DLT_USB_LINUX = 189\nconst DLT_USB_LINUX ideal-int\nconst DLT_USB_LINUX_MMAPPED = 220\nconst DLT_USB_LINUX_MMAPPED ideal-int\nconst DLT_WIHART = 223\nconst DLT_WIHART ideal-int\nconst DLT_X2E_SERIAL = 213\nconst DLT_X2E_SERIAL ideal-int\nconst DLT_X2E_XORAYA = 214\nconst DLT_X2E_XORAYA ideal-int\n```\n\n----------------------------------------\n\nTITLE: Setting FIPS 140 Environment Variables in Go\nDESCRIPTION: Sets up environment variables for FIPS 140 testing, including the FIPS snapshot version and an alias.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/fipssnap.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv snap=v1.0.0\nenv alias=inprocess\n\nenv GOFIPS140=$snap\n```\n\n----------------------------------------\n\nTITLE: Creating an Unused Gofmt Placeholder Script (bin/gofmt)\nDESCRIPTION: This shell script, located at `bin/gofmt`, serves as a placeholder for the `gofmt` tool. It simply prints \"i am unused\" when run, suggesting it's part of a test setup for the toolchain where actual formatting functionality isn't needed or tested.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.illumos-amd64.txt#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: Testing Word Boundary Matching with Alternation\nDESCRIPTION: Tests word boundary assertions (\\B) with alternation patterns 'fo|foo'. Shows how boundary conditions affect matching with alternation choices.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_31\n\nLANGUAGE: go\nCODE:\n```\n\"\\\\B(fo|foo)\\\\B\"\n-;-;-;-\n-;1-3 1-3;-;1-4 1-4\n\"^(?:\\\\B(fo|foo)\\\\B)$\"\n-;-;-;-\n-;-;-;-\n\"^(?:\\\\B(fo|foo)\\\\B)\"\n-;-;-;-\n-;-;-;-\n\"(?:\\\\B(fo|foo)\\\\B)$\"\n-;-;-;-\n-;-;-;-\n```\n\n----------------------------------------\n\nTITLE: io.Reader Usage Examples in Go\nDESCRIPTION: Examples showing common and uncommon usages of io.Reader interface types in Go. Shows that map[io.Reader]string is common while [io.Reader]int and Slice[io.Reader] are not typically used.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/doclink2.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nio.Reader\nmap[io.Reader]string\n[io.Reader]int\nSlice[io.Reader]\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[io.Reader](/io#Reader)\nmap[io.Reader]string\n[io.Reader]int\nSlice[io.Reader]\n```\n\n----------------------------------------\n\nTITLE: Markdown Output with Processed Links\nDESCRIPTION: The processed markdown output showing a converted doc link and escaped bracket text.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/doclink3.txt#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[encoding/json.Marshal](/encoding/json#Marshal) is a doc link.\n\n\\[rot13.Marshal] is not.\n```\n\n----------------------------------------\n\nTITLE: Package A Test with Import\nDESCRIPTION: Test file for package a which imports example.com/b, extending the dependency chain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_lazy_downgrade.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage a_test\n\nimport _ \"example.com/b\"\n```\n\n----------------------------------------\n\nTITLE: Defining RUSAGE Constants in Go Syscall Package for Darwin-arm64-cgo\nDESCRIPTION: Constants for resource usage measurement targets. These values are used with getrusage() system calls to specify whether to retrieve resource usage for the calling process or its terminated child processes.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_178\n\nLANGUAGE: Go\nCODE:\n```\nconst RUSAGE_SELF = 0\nconst RUSAGE_CHILDREN = -1\n```\n\n----------------------------------------\n\nTITLE: Function Declarations in Package p2\nDESCRIPTION: Function declarations including string return type, deprecated function, interface return type, and error constructor.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/api/testdata/src/pkg/p2/golden.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc F() string\nfunc F //deprecated\nfunc G() Twoer\nfunc NewError(string) error\n```\n\n----------------------------------------\n\nTITLE: Testing Go Build Command with Missing Bzr\nDESCRIPTION: This snippet tests the 'go build' command with module mode for a main package that imports a Launchpad.net dependency when 'bzr' is not installed. It expects the build to fail with a specific error message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vcs_missing.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ncd main\n! go build -mod=mod\nstderr '\"bzr\": executable file not found'\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Expected Git Log Output Format\nDESCRIPTION: Sample output of a Git log showing a single commit with HEAD pointer to master branch.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/hello.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nfc3a09f (HEAD -> master) hello\n```\n\n----------------------------------------\n\nTITLE: Empty Go Package for Syntax Error Test\nDESCRIPTION: This snippet defines an empty Go package named 'p'. It's part of the setup for the syntax error testing scenario.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_syntax_error_says_fail.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage p\n```\n\n----------------------------------------\n\nTITLE: Testing Explicit +incompatible Version Selection in Go Modules\nDESCRIPTION: Tests that explicitly requesting a +incompatible version works correctly, showing that v2.0.0+incompatible can be resolved when specifically requested.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_prefer_compatible.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo list -m github.com/russross/blackfriday@v2.0.0+incompatible\nstdout '^github.com/russross/blackfriday v2\\.0\\.0\\+incompatible$'\n```\n\n----------------------------------------\n\nTITLE: Adding Size method to PrivateKey and PublicKey in crypto/rsa package in Go\nDESCRIPTION: Adds Size method to PrivateKey and PublicKey types in the crypto/rsa package. Both methods return an integer.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.11.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmethod (*PrivateKey) Size() int\nmethod (*PublicKey) Size() int\n```\n\n----------------------------------------\n\nTITLE: Implementing Fuzz Test with Interrupt Simulation in Go\nDESCRIPTION: A fuzz test implementation that simulates Ctrl-C interruption by sending SIGINT signals to parent and current test processes. The test retrieves process IDs, sets up environment variables for worker processes, and implements interrupt signal handling with delays to prevent CPU overuse.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test2json_interrupt.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage example_test\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"testing\"\n\t\"strings\"\n\t\"time\"\n)\n\nfunc FuzzInterrupt(f *testing.F) {\n\tpids := os.Getenv(\"GO_TEST_INTERRUPT_PIDS\")\n\tif pids == \"\" {\n\t\t// This is the main test process.\n\t\t// Set the environment variable for fuzz workers.\n\t\tpid := os.Getpid()\n\t\tppid := os.Getppid()\n\t\tos.Setenv(\"GO_TEST_INTERRUPT_PIDS\", fmt.Sprintf(\"%d,%d\", ppid, pid))\n\t}\n\n\tsentInterrupt := false\n\tf.Fuzz(func(t *testing.T, orig string) {\n\t\tif !sentInterrupt {\n\t\t\t// Simulate a ctrl-C on the keyboard by sending SIGINT\n\t\t\t// to the main test process and its parent.\n\t\t\tfor _, pid := range strings.Split(pids, \",\") {\n\t\t\t\ti, err := strconv.Atoi(pid)\n\t\t\t\tif err != nil {\n\t\t\t\t\tt.Fatal(err)\n\t\t\t\t}\n\t\t\t\tif p, err := os.FindProcess(i); err == nil {\n\t\t\t\t\tp.Signal(os.Interrupt)\n\t\t\t\t\tsentInterrupt = true // Only send interrupts once.\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ttime.Sleep(1 * time.Millisecond)  // Delay the fuzzer a bit to avoid wasting CPU.\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Toolchain Module Declaration\nDESCRIPTION: Basic module declaration for the golang.org/toolchain module in the .mod file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.netbsd-arm.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Minimal Vendored Package in Nested Directory\nDESCRIPTION: A minimal Go file in a nested directory structure within the vendor directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_vendor.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage dir2\n```\n\n----------------------------------------\n\nTITLE: Handling Unknown Fields in Go Environment File\nDESCRIPTION: This snippet tests the behavior of 'go env -w' and 'go env -u' with unknown fields that are already present in the go/env file. It demonstrates reading, writing, and unsetting these fields.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/env_write.txt#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# go env -w and go env -u work on unknown fields already in the go/env file\ncp bad.env $GOENV\ngo env GOENV\ncat $GOENV\ngo env\n! stdout UNKNOWN\ngo env UNKNOWN\nstdout yes\ngo env -w UNKNOWN=maybe\ngo env UNKNOWN\nstdout maybe\ngo env -u UNKNOWN\ngo env UNKNOWN\n! stdout . # gone\n```\n\n----------------------------------------\n\nTITLE: Module C v2 Package\nDESCRIPTION: Version 2 of module c with empty implementation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_indirect.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage c\n```\n\n----------------------------------------\n\nTITLE: Main Package Import\nDESCRIPTION: Example package importing the example.net/a dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_version_tooold.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage example\n\nimport \"example.net/a\"\n```\n\n----------------------------------------\n\nTITLE: Expected XML SVN Log Output\nDESCRIPTION: The expected XML output from the SVN log command, showing the commit details including author, date, and message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/hello.txt#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<log>\n<logentry\n   revision=\"1\">\n<author>rsc</author>\n<date>2017-09-22T01:12:45.861368Z</date>\n<msg>hello world\n\n</msg>\n</logentry>\n</log>\n```\n\n----------------------------------------\n\nTITLE: Generating OID from Integer Slices - crypto/x509 - Go\nDESCRIPTION: Defines a function OIDFromInts that converts a slice of uint64 integers into an OID type, returning an OID and an error. It requires an appropriate definition for OID within the package and is used for ASN.1 object identifier manipulation. Input: []uint64, Output: (OID, error).\nSOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nfunc OIDFromInts([]uint64) (OID, error)\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module with Invalid Path\nDESCRIPTION: This snippet shows the content of a go.mod file that declares a module with an invalid path. It sets the module path to 'vend/x/invalid' and specifies Go version 1.16.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_import_wrong.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nmodule vend/x/invalid\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: System Call Constants for Darwin ARM64\nDESCRIPTION: Defines system call number constants for Darwin ARM64 architecture. These constants represent the system call numbers used by the operating system when making kernel-level operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_184\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (darwin-arm64-cgo), const SYS_ACCEPT = 30\npkg syscall (darwin-arm64-cgo), const SYS_ACCEPT ideal-int\npkg syscall (darwin-arm64-cgo), const SYS_ACCEPT_NOCANCEL = 404\npkg syscall (darwin-arm64-cgo), const SYS_ACCEPT_NOCANCEL ideal-int\npkg syscall (darwin-arm64-cgo), const SYS_ACCESS = 33\npkg syscall (darwin-arm64-cgo), const SYS_ACCESS ideal-int\n```\n\n----------------------------------------\n\nTITLE: Darwin ARM64 System Call Constants\nDESCRIPTION: Constants defining system call numbers for various operations on Darwin/ARM64. These constants are used to make system calls for operations like file handling, process management, semaphores, and network communication.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_187\n\nLANGUAGE: Go\nCODE:\n```\nconst (\n    SYS_NFSSVC ideal-int\n    SYS_OPEN = 5\n    SYS_OPEN_DPROTECTED_NP = 216\n    SYS_OPEN_EXTENDED = 277\n    SYS_OPEN_NOCANCEL = 398\n    SYS_PATHCONF = 191\n    SYS_PID_HIBERNATE = 435\n    SYS_PID_RESUME = 434\n    SYS_PID_SHUTDOWN_SOCKETS = 436\n    SYS_PID_SUSPEND = 433\n    // ... additional constants ...\n    SYS_SETGROUPS = 80\n    SYS_SETITIMER = 83\n    SYS_SETLCID = 394\n    SYS_SETLOGIN = 50\n)\n```\n\n----------------------------------------\n\nTITLE: Main Package Imports\nDESCRIPTION: Main package importing dependent modules a, b, c, and d.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_artifact.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage m\n\nimport (\n\t_ \"example.com/a\"\n\t_ \"example.com/b\"\n\t_ \"example.com/c\"\n\t_ \"example.com/d\"\n)\n```\n\n----------------------------------------\n\nTITLE: Managing Go Build Cache with Bash\nDESCRIPTION: This snippet sets the GOCACHE environment variable to initialize a clean build cache and runs the 'go vet' command on 'os/user' to warm up the cache. It ensures cgo-derived inputs are reused, avoiding unnecessary recompilation through specific flag checks against stderr.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cache_vet.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GOCACHE=$WORK/cache\n\ngo vet os/user\n\ngo vet -x os/user\n! stderr '^(clang|gcc)'  # should not have run compiler\n! stderr '[\\/]cgo '     # should not have run cgo\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Metadata - Go Mod - Go Mod\nDESCRIPTION: Repeats the Go module declaration, specifying the module path as 'golang.org/toolchain.' This is functionally the same as the go.mod snippet and may represent a redundant or test placeholder, illustrating the module setup step in Go's build process.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.freebsd-386.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go Mod\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Documenting Subpackage Relocation (Text)\nDESCRIPTION: Provides informational text, intended for a `README.txt` file, indicating that the `subpkg` package originally found in this module has been moved to a nested module located at `example.com/split-incompatible/subpkg`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_split-incompatible_v2.1.0-pre+incompatible.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n-- README.txt --\nsubpkg has moved to module example.com/split-incompatible/subpkg\n```\n\n----------------------------------------\n\nTITLE: Simple Go function for floating point operation\nDESCRIPTION: This Go function performs a basic floating point operation. It's used in the build tests to verify floating point register usage.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_gomips.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\npackage f\n\nfunc F(x float64) float64 {\n     return x + x\n}\n```\n\n----------------------------------------\n\nTITLE: Defining file locking syscall constants for Darwin ARM64 CGO in Go\nDESCRIPTION: This snippet defines constants used for file locking operations in system calls on the Darwin ARM64 CGO platform. It includes constants for shared locks, exclusive locks, and non-blocking operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_158\n\nLANGUAGE: Go\nCODE:\n```\nconst LOCK_EX = 2\nconst LOCK_NB = 4\nconst LOCK_SH = 1\nconst LOCK_UN = 8\n```\n\n----------------------------------------\n\nTITLE: Defining PTHREAD System Call Constants in Go for Darwin ARM64\nDESCRIPTION: Constants defining system call numbers for PTHREAD operations on Darwin ARM64 platform. These constants are used for thread management, signaling, and control in multi-threaded applications.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_190\n\nLANGUAGE: Go\nCODE:\n```\nconst SYS___PTHREAD_CANCELED = 333\nconst SYS___PTHREAD_CANCELED ideal-int\nconst SYS___PTHREAD_CHDIR = 348\nconst SYS___PTHREAD_CHDIR ideal-int\nconst SYS___PTHREAD_FCHDIR = 349\nconst SYS___PTHREAD_FCHDIR ideal-int\nconst SYS___PTHREAD_KILL = 328\nconst SYS___PTHREAD_KILL ideal-int\nconst SYS___PTHREAD_MARKCANCEL = 332\nconst SYS___PTHREAD_MARKCANCEL ideal-int\nconst SYS___PTHREAD_SIGMASK = 329\nconst SYS___PTHREAD_SIGMASK ideal-int\n```\n\n----------------------------------------\n\nTITLE: Declaring Go Package `z` (Go)\nDESCRIPTION: This Go source file simply declares package `z`. It serves as a dependency for package `w` and is intended to be placed within the project structure, likely at `x/y/z/z.go` or potentially within the vendor directory as managed by the shell script.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_symlink_vendor_issue15201.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n-- z.go --\npackage z\n```\n\n----------------------------------------\n\nTITLE: Testing Long Deprecation Message Display in Go Modules\nDESCRIPTION: Tests how 'go get' handles a very long deprecation message, ensuring it displays a placeholder instead of the full message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_deprecate_message.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo get long\nstderr '^go: module long is deprecated: \\(message omitted: too long\\)$'\ngo list -m -u -f '{{.Deprecated}}' long\nstdout '^aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa$'\n```\n\n----------------------------------------\n\nTITLE: Defining Memory Protection Constants in Go for NetBSD\nDESCRIPTION: This snippet defines constants for memory protection flags on NetBSD. These constants are used to specify access permissions for memory pages when using mmap or mprotect system calls.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_25\n\nLANGUAGE: Go\nCODE:\n```\nconst PROT_EXEC = 4\nconst PROT_NONE = 0\nconst PROT_READ = 1\nconst PROT_WRITE = 2\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests and Benchmarks with Specific Flags\nDESCRIPTION: This command runs Go tests and benchmarks with specific CPU, run, bench, count, and verbosity flags. It targets tests and benchmarks matching the pattern X/Y and runs them twice.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_regexps.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo test -cpu=1 -run=X/Y -bench=X/Y -count=2 -v testregexp\n```\n\n----------------------------------------\n\nTITLE: Size Constants for OpenBSD in Go\nDESCRIPTION: Defines size constants for various OpenBSD structures. These constants specify the memory sizes of routing message structures.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_59\n\nLANGUAGE: Go\nCODE:\n```\nconst SizeofRtMetrics = 56\nconst SizeofRtMsghdr = 96\n```\n\n----------------------------------------\n\nTITLE: Test Implementation for Main Package in Go\nDESCRIPTION: Tests for main package that verify MFunc returns \"42\" and M2Func returns 0 (sum of 42 from a.AFunc and -42 from b.BFunc).\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_multipkg.txt#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"testing\"\n\nfunc TestMain(t *testing.T) {\n\tif MFunc() != \"42\" {\n\t\tt.Fatalf(\"bad!\")\n\t}\n\tif M2Func() != 0 {\n\t\tt.Fatalf(\"also bad!\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: External test Go file in xtest package\nDESCRIPTION: A test-only Go file that uses the p_test package name, indicating it's an external test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_no_go.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage p_test\n```\n\n----------------------------------------\n\nTITLE: IP Address Class Constants - Darwin ARM64\nDESCRIPTION: Network class definitions for IPv4 addressing, including class A, B, C, and D network masks and shifts. These constants are used for IP address manipulation and classification.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_152\n\nLANGUAGE: Go\nCODE:\n```\nconst IN_CLASSA_HOST = 16777215\nconst IN_CLASSA_MAX = 128\nconst IN_CLASSA_NET = 4278190080\nconst IN_CLASSA_NSHIFT = 24\nconst IN_CLASSB_HOST = 65535\nconst IN_CLASSB_MAX = 65536\n```\n\n----------------------------------------\n\nTITLE: Setting up test environment for Go modules\nDESCRIPTION: Initializes the test environment with GO111MODULE enabled and copies necessary files.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_auto.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n\n[short] skip\n\ncd $WORK/auto\ncp go.mod go.mod.orig\ncp $WORK/modules-1.13.txt $WORK/auto/modules.txt\n```\n\n----------------------------------------\n\nTITLE: Split Package Module Definition\nDESCRIPTION: Basic module definition for different versions of the split package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_split.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/split\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Module Version Information\nDESCRIPTION: JSON configuration containing version information for the module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_depofdirectpatch_v1.0.1.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.0.1\"}\n```\n\n----------------------------------------\n\nTITLE: Function Implementation for Package 'deadstuff' in Go\nDESCRIPTION: Defines package 'deadstuff' with a function that always panics, with unreachable code after the panic statement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_coverprofile_multipkg.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage deadstuff\n\nfunc downStreamOfPanic(x int) {\n\tpanic(\"bad\")\n\tif x < 10 {\n\t\tprintln(\"foo\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated AST Package Constructs - go/ast - Go\nDESCRIPTION: The functions, types, and interfaces NewPackage, Importer, Object, Package, and Scope in package go/ast are marked deprecated, indicating they should no longer be used and may be removed in future releases. They relate to high-level AST handling and legacy importer functionality.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.22.txt#2025-04-22_snippet_11\n\nLANGUAGE: Go\nCODE:\n```\n// Deprecated\nfunc NewPackage\n// Deprecated\ntype Importer\n// Deprecated\ntype Object\n// Deprecated\ntype Package\n// Deprecated\ntype Scope\n```\n\n----------------------------------------\n\nTITLE: Go Module Checksum File\nDESCRIPTION: Module checksum file (go.sum) containing the hash verification for the export-subst dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_git_export_subst.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\ngithub.com/jasonkeene/export-subst v0.0.0-20180927204031-5845945ec626 h1:AUkXi/xFnm7lH2pgtvVkGb7buRn1ywFHw+xDpZ29Rz0=\ngithub.com/jasonkeene/export-subst v0.0.0-20180927204031-5845945ec626/go.mod h1:DwJXqVtrgrQkv3Giuf2Jh4YyubVe7y41S1eOIaysTJw=\n```\n\n----------------------------------------\n\nTITLE: Defining TCP Configuration Constants in Go for Darwin ARM64\nDESCRIPTION: Constants defining TCP socket configuration options on Darwin ARM64 platform. These constants are used for configuring TCP socket behavior, including keepalive settings, window sizes, and other TCP-specific options.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_195\n\nLANGUAGE: Go\nCODE:\n```\nconst TCP_CONNECTIONTIMEOUT = 32\nconst TCP_CONNECTIONTIMEOUT ideal-int\nconst TCP_ENABLE_ECN = 260\nconst TCP_ENABLE_ECN ideal-int\nconst TCP_KEEPALIVE = 16\nconst TCP_KEEPALIVE ideal-int\nconst TCP_KEEPCNT = 258\nconst TCP_KEEPCNT ideal-int\nconst TCP_KEEPINTVL = 257\nconst TCP_KEEPINTVL ideal-int\nconst TCP_MAXHLEN = 60\nconst TCP_MAXHLEN ideal-int\nconst TCP_MAXOLEN = 40\nconst TCP_MAXOLEN ideal-int\nconst TCP_MAXSEG = 2\nconst TCP_MAXSEG ideal-int\nconst TCP_MAXWIN = 65535\nconst TCP_MAXWIN ideal-int\nconst TCP_MAX_SACK = 4\nconst TCP_MAX_SACK ideal-int\nconst TCP_MAX_WINSHIFT = 14\nconst TCP_MAX_WINSHIFT ideal-int\nconst TCP_MINMSS = 216\nconst TCP_MINMSS ideal-int\nconst TCP_MSS = 512\nconst TCP_MSS ideal-int\nconst TCP_NOOPT = 8\nconst TCP_NOOPT ideal-int\nconst TCP_NOPUSH = 4\nconst TCP_NOPUSH ideal-int\nconst TCP_NOTSENT_LOWAT = 513\nconst TCP_NOTSENT_LOWAT ideal-int\nconst TCP_RXT_CONNDROPTIME = 128\nconst TCP_RXT_CONNDROPTIME ideal-int\nconst TCP_RXT_FINDROP = 256\nconst TCP_RXT_FINDROP ideal-int\nconst TCP_SENDMOREACKS = 259\nconst TCP_SENDMOREACKS ideal-int\n```\n\n----------------------------------------\n\nTITLE: CGO Import Test File\nDESCRIPTION: Go source file that imports the C package and declares a variable of C.int type to test CGO functionality.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_cgo_excluded.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage cgotest\n\nimport \"C\"\n\nvar _ C.int\n```\n\n----------------------------------------\n\nTITLE: Testing Fuzzing with Profiling Flag Incompatibility Shell Tests\nDESCRIPTION: A series of shell commands that verify the Go test command rejects combining the -fuzz flag with various profiling flags. Each command tests a different profiling flag and checks for the appropriate error message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_profile_flags.txt#2025-04-22_snippet_0\n\nLANGUAGE: shellscript\nCODE:\n```\n[!fuzz] skip\n\n! go test -fuzz=FuzzTrivial -coverprofile=prof\n! stdout .\nstderr '^cannot use -coverprofile flag with -fuzz flag$'\n\n! go test -fuzz=FuzzTrivial -blockprofile=prof\n! stdout .\nstderr '^cannot use -blockprofile flag with -fuzz flag$'\n\n! go test -fuzz=FuzzTrivial -cpuprofile=prof\n! stdout .\nstderr '^cannot use -cpuprofile flag with -fuzz flag$'\n\n! go test -fuzz=FuzzTrivial -memprofile=prof\n! stdout .\nstderr '^cannot use -memprofile flag with -fuzz flag$'\n\n! go test -fuzz=FuzzTrivial -mutexprofile=prof\n! stdout .\nstderr '^cannot use -mutexprofile flag with -fuzz flag$'\n\n! go test -fuzz=FuzzTrivial -trace=prof\n! stdout .\nstderr '^cannot use -trace flag with -fuzz flag$'\n```\n\n----------------------------------------\n\nTITLE: Defining NetBSD ARM64 Socket Control Message Constants in Go Syscall Package\nDESCRIPTION: Socket control message constants for NetBSD. These define the types of ancillary data that can be attached to messages using sendmsg/recvmsg, including file descriptor passing (RIGHTS), credentials passing (CREDS), and timestamp information.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_56\n\nLANGUAGE: Go\nCODE:\n```\nconst SCM_CREDS = 4\nconst SCM_CREDS ideal-int\nconst SCM_RIGHTS = 1\nconst SCM_RIGHTS ideal-int\nconst SCM_TIMESTAMP = 8\nconst SCM_TIMESTAMP ideal-int\n```\n\n----------------------------------------\n\nTITLE: Testing Go Version Command Without Arguments\nDESCRIPTION: Verifies that running 'go version' without arguments prints Go's own version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo version\nstdout '^go version'\n```\n\n----------------------------------------\n\nTITLE: Providing Module Version Metadata in JSON for Go\nDESCRIPTION: This JSON snippet contains metadata indicating the version 'v1.1.0' of a module or package, likely to accompany the .mod file for module resolution or testing purposes. It may be used by Go tooling or test harnesses to simulate responses from a module proxy. There are no external dependencies, parameters, or outputs beyond the single version string. The file must be named '.info' to be recognized in this role, and this approach is primarily for internal or testing scenarios.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_split_v1.1.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\\"Version\\\": \\\"v1.1.0\\\"}\n```\n\n----------------------------------------\n\nTITLE: Defining C Function for Syso Generation\nDESCRIPTION: Defines a C function f() for generating a syso file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/link_syso_deps.txt#2025-04-22_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n//go:build ignore\n\nvoid f() {}\n```\n\n----------------------------------------\n\nTITLE: NetBSD ARM64 TCP Socket Option Constants in Go\nDESCRIPTION: Defines TCP socket option constants for NetBSD on ARM64. These constants are used when configuring TCP socket behavior through the setsockopt system call in Go programs running on NetBSD ARM64.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_153\n\nLANGUAGE: Go\nCODE:\n```\nconst TCP_CONGCTL = 32\nconst TCP_KEEPCNT = 6\nconst TCP_KEEPIDLE = 3\nconst TCP_KEEPINIT = 7\nconst TCP_KEEPINTVL = 5\nconst TCP_MAXBURST = 4\nconst TCP_MAXSEG = 2\nconst TCP_MAXWIN = 65535\nconst TCP_MAX_WINSHIFT = 14\nconst TCP_MD5SIG = 16\nconst TCP_MINMSS = 216\nconst TCP_MSS = 536\n```\n\n----------------------------------------\n\nTITLE: Defining System Call Constants for Darwin ARM64 CGO in Go\nDESCRIPTION: This code defines system call constants for the Darwin operating system on ARM64 architecture with CGO enabled. These constants represent the system call numbers used by the operating system kernel to identify specific system functions.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_186\n\nLANGUAGE: Go\nCODE:\n```\nconst SYS_GETAUID = 353\nconst SYS_GETDIRENTRIES = 196\nconst SYS_GETDIRENTRIES64 = 344\nconst SYS_GETDIRENTRIESATTR = 222\nconst SYS_GETDTABLESIZE = 89\nconst SYS_GETEGID = 43\nconst SYS_GETEUID = 25\nconst SYS_GETFH = 161\nconst SYS_GETFSSTAT = 18\nconst SYS_GETFSSTAT64 = 347\nconst SYS_GETGID = 47\nconst SYS_GETGROUPS = 79\nconst SYS_GETHOSTUUID = 142\nconst SYS_GETITIMER = 86\nconst SYS_GETLCID = 395\nconst SYS_GETLOGIN = 49\nconst SYS_GETPEERNAME = 31\nconst SYS_GETPGID = 151\nconst SYS_GETPGRP = 81\nconst SYS_GETPID = 20\nconst SYS_GETPPID = 39\nconst SYS_GETPRIORITY = 100\nconst SYS_GETRLIMIT = 194\nconst SYS_GETRUSAGE = 117\nconst SYS_GETSGROUPS = 288\nconst SYS_GETSID = 310\nconst SYS_GETSOCKNAME = 32\nconst SYS_GETSOCKOPT = 118\nconst SYS_GETTID = 286\nconst SYS_GETTIMEOFDAY = 116\nconst SYS_GETUID = 24\nconst SYS_GETWGROUPS = 290\nconst SYS_GETXATTR = 234\nconst SYS_IDENTITYSVC = 293\nconst SYS_INITGROUPS = 243\nconst SYS_IOCTL = 54\nconst SYS_IOPOLICYSYS = 322\nconst SYS_ISSETUGID = 327\nconst SYS_KAS_INFO = 439\nconst SYS_KDEBUG_TRACE = 180\nconst SYS_KEVENT = 363\nconst SYS_KEVENT64 = 369\nconst SYS_KILL = 37\nconst SYS_KQUEUE = 362\nconst SYS_LCHOWN = 364\nconst SYS_LEDGER = 373\nconst SYS_LINK = 9\nconst SYS_LIO_LISTIO = 320\nconst SYS_LISTEN = 106\nconst SYS_LISTXATTR = 240\nconst SYS_LSEEK = 199\nconst SYS_LSTAT = 190\nconst SYS_LSTAT64 = 340\nconst SYS_LSTAT64_EXTENDED = 342\nconst SYS_LSTAT_EXTENDED = 280\nconst SYS_MADVISE = 75\nconst SYS_MAXSYSCALL = 440\nconst SYS_MINCORE = 78\nconst SYS_MINHERIT = 250\nconst SYS_MKDIR = 136\nconst SYS_MKDIR_EXTENDED = 292\nconst SYS_MKFIFO = 132\nconst SYS_MKFIFO_EXTENDED = 291\nconst SYS_MKNOD = 14\nconst SYS_MLOCK = 203\nconst SYS_MLOCKALL = 324\nconst SYS_MMAP = 197\nconst SYS_MODWATCH = 233\nconst SYS_MOUNT = 167\nconst SYS_MPROTECT = 74\nconst SYS_MSGCTL = 258\nconst SYS_MSGGET = 259\nconst SYS_MSGRCV = 261\nconst SYS_MSGRCV_NOCANCEL = 419\nconst SYS_MSGSND = 260\nconst SYS_MSGSND_NOCANCEL = 418\nconst SYS_MSGSYS = 252\nconst SYS_MSYNC = 65\nconst SYS_MSYNC_NOCANCEL = 405\nconst SYS_MUNLOCK = 204\nconst SYS_MUNLOCKALL = 325\nconst SYS_MUNMAP = 73\nconst SYS_NFSCLNT = 247\nconst SYS_NFSSVC = 155\n```\n\n----------------------------------------\n\nTITLE: Removing Indirect Mark from Dependency\nDESCRIPTION: This snippet demonstrates how to remove the indirect mark from the dependency using 'go get .'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_lazy_indirect.txt#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngo get .\ngrep 'rsc.io/quote v\\d+\\.\\d+\\.\\d+$' go.mod\n! grep 'rsc.io/quote v\\d+\\.\\d+\\.\\d+ // indirect$' go.mod\n```\n\n----------------------------------------\n\nTITLE: Defining Time-Related Structures for NetBSD ARM CGO in Go\nDESCRIPTION: Definition of Timespec and Timeval struct fields for NetBSD ARM platform with CGO enabled. These structures include padding bytes for proper memory alignment.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_34\n\nLANGUAGE: Go\nCODE:\n```\ntype Timespec struct {\n\tPad_cgo_0 [4]uint8\n}\n\ntype Timeval struct {\n\tPad_cgo_0 [4]uint8\n}\n```\n\n----------------------------------------\n\nTITLE: String and Time Utility Functions in syscall Package for NetBSD ARM64\nDESCRIPTION: These utility functions provide conversions between Go strings/slices and C-compatible string pointers, as well as time-related conversions for system call arguments.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_85\n\nLANGUAGE: Go\nCODE:\n```\nfunc StringSlicePtr([]string) []*uint8\nfunc SlicePtrFromStrings([]string) ([]*uint8, error)\nfunc TimevalToNsec(Timeval) int64\n```\n\n----------------------------------------\n\nTITLE: Go Module Version Listing\nDESCRIPTION: Module version list file specifying available versions of the module for the Go package manager.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/auth/or401.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nv0.0.0-20190405155051-52df474c8a8b\n```\n\n----------------------------------------\n\nTITLE: Version Information in JSON Format\nDESCRIPTION: JSON configuration containing version information for the Go toolchain module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-amd64.txt#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.999testmod.linux-amd64\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module in go.mod File\nDESCRIPTION: Standard go.mod file declaring the module name as rsc.io/badfile4.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badfile4_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule rsc.io/badfile4\n```\n\n----------------------------------------\n\nTITLE: Implementing Placeholder 'gofmt' Command (Shell)\nDESCRIPTION: A shell script placeholder located at `bin/gofmt` for the Go formatting tool. It simply prints `i am unused` indicating it's not functional in this context.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.js-wasm.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: Testing PPC64 Architecture Features\nDESCRIPTION: Verifies PPC64 and PPC64LE architectures with Power8, Power9, and Power10 instruction sets.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/tooltags.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nenv GOARCH=ppc64\nenv GOPPC64=power9\ngo list -f '{{context.ToolTags}}'\n\nenv GOARCH=ppc64\nenv GOPPC64=power10\ngo list -f '{{context.ToolTags}}'\n```\n\n----------------------------------------\n\nTITLE: non-english-content\nDESCRIPTION: non-english-content\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.aix-ppc64.txt#2025-04-22_snippet_0\n\nLANGUAGE: non-english-content\nCODE:\n```\nnon-english-content\n```\n\n----------------------------------------\n\nTITLE: Module Declaration in go.mod\nDESCRIPTION: Standard Go module declaration file for the toolchain module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-arm64.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Go Module Checksum File with Retracted Dependency\nDESCRIPTION: A go.sum file containing the cryptographic checksum for the go.mod file of the 'example.com/retract/noupgrade' dependency at version v1.0.0, ensuring dependency integrity verification.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_noupgrade.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nexample.com/retract/noupgrade v1.0.0/go.mod h1:q2/HnBejUQ83RcUo4stf2U++/Zr9R/Ky3BsodjKBkQ4=\n```\n\n----------------------------------------\n\nTITLE: Verifying `go list -m` Rejects Module Paths with '+' (Shell)\nDESCRIPTION: This shell snippet tests if `go list -m` correctly rejects module paths containing the '+' character. It attempts to list versions for a module path `example.net/bad++` which is intentionally invalid due to the '+'. The `!` prefix indicates the command is expected to fail, and the `stderr` directive checks for the specific error message confirming the rejection due to the invalid character.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_path_plus.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# 'go list -m' rejects module paths with pluses.\n! go list -versions -m 'example.net/bad++'\nstderr '^go: malformed module path \"example.net/bad\\+\\+\": invalid char ''\\+''$'\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: This snippet defines a Go module named `my.pkg` with a `go.mod` file specifying Go version 1.16. This module serves as the base for the `main` package and the `pkg` package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_link_x_import_path_escape.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n-- go.mod --\nmodule my.pkg\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Testing Unicode Property Matching\nDESCRIPTION: Tests Unicode property matching (\\p{Greek}, \\P{Greek}, etc.) against mixed character strings. Shows how positive and negative property classes match different characters.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_35\n\nLANGUAGE: go\nCODE:\n```\n\"\\\\p{Greek}+\"\n-;-;-;-\n-;1-5;-;1-5\n\"^(?:\\\\p{Greek}+)$\"\n-;-;-;-\n-;-;-;-\n\"^(?:\\\\p{Greek}+)\"\n-;-;-;-\n-;-;-;-\n\"(?:\\\\p{Greek}+)$\"\n-;-;-;-\n-;-;-;-\n```\n\n----------------------------------------\n\nTITLE: Defining Termios Structure in Go for NetBSD ARM64\nDESCRIPTION: Definition of the Termios struct which represents terminal I/O settings. It contains fields for input/output control flags, line discipline, control characters, and baud rate settings.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_109\n\nLANGUAGE: Go\nCODE:\n```\ntype Termios struct {\n    Iflag uint32\n    Oflag uint32\n    Cflag uint32\n    Lflag uint32\n    Cc [20]uint8\n    Ispeed int32\n    Ospeed int32\n}\n```\n\n----------------------------------------\n\nTITLE: Package A Definition\nDESCRIPTION: Empty package declaration for package 'a'\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_pattern_work.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage a\n```\n\n----------------------------------------\n\nTITLE: Simple C function for printing 'Hello World'\nDESCRIPTION: A minimal C function that prints 'Hello, world!' using the standard puts() function. This is used as part of the cgo integration test.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_trimpath_cgo.txt#2025-04-22_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <stdio.h>\n\nvoid say_hello() { puts(\"Hello, world!\\n\"); }\n```\n\n----------------------------------------\n\nTITLE: Specifying Module Version Information - JSON\nDESCRIPTION: Specifies the version information for the Go module example.com/badchain/a. This metadata is typically generated and maintained by Go tooling. The snippet expects no parameters; used to communicate module version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_badchain_a_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\\\"Version\\\":\\\"v1.0.0\\\"}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Vet with GOFLAGS Environment Variable\nDESCRIPTION: Verifies the behavior of 'go vet' when using the GOFLAGS environment variable to set analyzer flags and build tags.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet_flags.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo vet .\nenv GOFLAGS='-tags=buggy'\n! go vet .\nstderr 'possible Printf formatting directive'\n\nenv GOFLAGS='-tags=buggy -unsafeptr'\ngo vet .\n\nenv GOFLAGS='-tags=buggy -printf'\n! go vet -unsafeptr\nstderr 'possible Printf formatting directive'\n\nenv GOFLAGS='-unsafeptr'\n! go list .\nstderr 'go: parsing \\$GOFLAGS: unknown flag -unsafeptr'\nenv GOFLAGS=\n```\n\n----------------------------------------\n\nTITLE: Declaring a Go Module with go.mod - Go\nDESCRIPTION: Declares the Go module named 'golang.org/toolchain'. This file enables tracking of dependencies, versions, and establishes the module identity for package management. Required for all Go modules, it must be located at the root of the module source tree. It does not specify dependencies here, only the module path.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.darwin-amd64.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: GCD and LCM Calculation with Large GCD\nDESCRIPTION: This snippet shows the calculation of GCD and LCM for two large numbers with a large GCD (100000000). The LCM is still quite large due to the size of the input numbers.\nSOURCE: https://github.com/golang/go/blob/master/src/crypto/internal/fips140/rsa/testdata/gcd_lcm_tests.txt#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nGCD = 100000000\nA = f8b4f19e09f5862d79fb2931c4d616a1b8e0dd44781ca52902c8035166c8fca52d33a56ff484c365ec1257de7fa8ed2786163cfc051d5223b4aad859a049e8ba00000000\nB = 6e54cb41b454b080e68a2c3dd0fa79f516eb80239af2be8250ca9cd377ba501aabafc09146fad4402bdc7a49f2c3eec815e25f4c0a223f58e36709eefd92410500000000\nLCM = 6b3020a880ddeff9d17d3dc234da8771962de3322cd15ba7b1e4b1dd4a6a2a802a16c49653865c6fdf6c207cbe0940f8d81ef4cb0e159385fd709d515ee99d109ad9ad680031cbae4eab2ed62944babdade4e3036426b18920022f737897c7d751dce98d626cdda761fec48ad87a377fb70f97a0a15aa3d10d865785719cc5a200000000\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Limit Constants in Go for NetBSD ARM64\nDESCRIPTION: This snippet defines resource limit constants for the NetBSD ARM64 platform. These constants are used with the setrlimit and getrlimit system calls to control resource usage for processes, including memory limits, file descriptor counts, and CPU time.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_50\n\nLANGUAGE: Go\nCODE:\n```\nconst RLIM_INFINITY = 9223372036854775807\nconst RLIMIT_AS = 10\nconst RLIMIT_CORE = 4\nconst RLIMIT_CPU = 0\nconst RLIMIT_DATA = 2\nconst RLIMIT_FSIZE = 1\nconst RLIMIT_NOFILE = 8\nconst RLIMIT_STACK = 3\n```\n\n----------------------------------------\n\nTITLE: Running Coverage Testing with go test -cover in Go\nDESCRIPTION: This shell command uses Go's test tool to run tests with code coverage enabled on the package coverdep2/p1. The -short flag skips long-running tests, while -cover collects statement coverage. It expects the output to indicate 100.0% statement coverage, verifying that all code within the interdependent packages (p1 and p2) is executed by tests. Requires Go 1.16+ and the coverdep2 module structure as described, with cross-imported packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_dep_loop.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo test -short -cover coverdep2/p1\nstdout 'coverage: 100.0% of statements' # expect 100.0% coverage\n```\n\n----------------------------------------\n\nTITLE: Go Toolchain Module Declaration in go.mod File\nDESCRIPTION: Standard go.mod file declaration for the golang.org/toolchain module, required for Go module system compatibility.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-riscv64.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Declaring Unicode Cased Letter Range Table - Go\nDESCRIPTION: Declares a RangeTable pointer for the Unicode LC (Cased Letter) category that defines the code point ranges for cased letters.\nSOURCE: https://github.com/golang/go/blob/master/api/next/70780.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar LC *RangeTable\n```\n\n----------------------------------------\n\nTITLE: Bad Import Package\nDESCRIPTION: Package with an unresolvable import\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_errors.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage badimport\n\nimport \"example.net/oops\"\n```\n\n----------------------------------------\n\nTITLE: System Call Constants for NetBSD ARM64 (CGO)\nDESCRIPTION: A comprehensive list of system call constants for NetBSD ARM64 with CGO enabled. Each constant is defined with its numeric value and type (ideal-int). These constants represent system call numbers used to interface with the NetBSD kernel from Go applications.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_66\n\nLANGUAGE: Go\nCODE:\n```\nconst SYS_FUTIMES = 423\nconst SYS_FUTIMES ideal-int\nconst SYS_GETCONTEXT = 307\nconst SYS_GETCONTEXT ideal-int\nconst SYS___GETCWD = 296\nconst SYS___GETCWD ideal-int\nconst SYS_GETDENTS = 390\nconst SYS_GETDENTS ideal-int\nconst SYS_GETEGID = 43\nconst SYS_GETEGID ideal-int\nconst SYS_GETEUID = 25\nconst SYS_GETEUID ideal-int\nconst SYS_GETFH = 395\nconst SYS_GETFH ideal-int\nconst SYS_GETGID = 47\nconst SYS_GETGID ideal-int\nconst SYS_GETGROUPS = 79\nconst SYS_GETGROUPS ideal-int\nconst SYS_GETITIMER = 426\nconst SYS_GETITIMER ideal-int\nconst SYS___GETLOGIN = 49\nconst SYS___GETLOGIN ideal-int\nconst SYS_GETPEERNAME = 31\nconst SYS_GETPEERNAME ideal-int\nconst SYS_GETPGID = 207\nconst SYS_GETPGID ideal-int\nconst SYS_GETPGRP = 81\nconst SYS_GETPGRP ideal-int\nconst SYS_GETPID = 20\nconst SYS_GETPID ideal-int\nconst SYS_GETPPID = 39\nconst SYS_GETPPID ideal-int\nconst SYS_GETPRIORITY = 100\nconst SYS_GETPRIORITY ideal-int\nconst SYS_GETRLIMIT = 194\nconst SYS_GETRLIMIT ideal-int\nconst SYS_GETRUSAGE = 445\nconst SYS_GETRUSAGE ideal-int\nconst SYS_GETSID = 286\nconst SYS_GETSID ideal-int\nconst SYS_GETSOCKNAME = 32\nconst SYS_GETSOCKNAME ideal-int\nconst SYS_GETSOCKOPT = 118\nconst SYS_GETSOCKOPT ideal-int\nconst SYS_GETTIMEOFDAY = 418\nconst SYS_GETTIMEOFDAY ideal-int\nconst SYS_GETUID = 24\nconst SYS_GETUID ideal-int\nconst SYS_GETVFSSTAT = 356\nconst SYS_GETVFSSTAT ideal-int\nconst SYS_GETXATTR = 378\nconst SYS_GETXATTR ideal-int\nconst SYS_IOCTL = 54\nconst SYS_IOCTL ideal-int\nconst SYS_ISSETUGID = 305\nconst SYS_ISSETUGID ideal-int\nconst SYS_KEVENT = 435\nconst SYS_KEVENT ideal-int\nconst SYS_KILL = 37\nconst SYS_KILL ideal-int\nconst SYS_KQUEUE1 = 455\nconst SYS_KQUEUE1 ideal-int\nconst SYS_KQUEUE = 344\nconst SYS_KQUEUE ideal-int\nconst SYS_KTRACE = 45\nconst SYS_KTRACE ideal-int\nconst SYS_LCHFLAGS = 304\nconst SYS_LCHFLAGS ideal-int\nconst SYS_LCHMOD = 274\nconst SYS_LCHMOD ideal-int\nconst SYS_LCHOWN = 275\nconst SYS_LCHOWN ideal-int\nconst SYS_LGETXATTR = 379\nconst SYS_LGETXATTR ideal-int\nconst SYS_LINK = 9\nconst SYS_LINKAT = 457\nconst SYS_LINKAT ideal-int\nconst SYS_LINK ideal-int\nconst SYS_LISTEN = 106\nconst SYS_LISTEN ideal-int\nconst SYS_LISTXATTR = 381\nconst SYS_LISTXATTR ideal-int\nconst SYS_LLISTXATTR = 382\nconst SYS_LLISTXATTR ideal-int\nconst SYS_LREMOVEXATTR = 385\nconst SYS_LREMOVEXATTR ideal-int\nconst SYS_LSEEK = 199\nconst SYS_LSEEK ideal-int\nconst SYS_LSETXATTR = 376\nconst SYS_LSETXATTR ideal-int\nconst SYS_LSTAT = 441\nconst SYS_LSTAT ideal-int\nconst SYS_LUTIMES = 424\nconst SYS_LUTIMES ideal-int\nconst SYS__LWP_CONTINUE = 314\nconst SYS__LWP_CONTINUE ideal-int\nconst SYS__LWP_CREATE = 309\nconst SYS__LWP_CREATE ideal-int\nconst SYS__LWP_CTL = 325\nconst SYS__LWP_CTL ideal-int\nconst SYS__LWP_DETACH = 319\nconst SYS__LWP_DETACH ideal-int\nconst SYS__LWP_EXIT = 310\nconst SYS__LWP_EXIT ideal-int\nconst SYS__LWP_GETNAME = 324\nconst SYS__LWP_GETNAME ideal-int\nconst SYS__LWP_GETPRIVATE = 316\nconst SYS__LWP_GETPRIVATE ideal-int\nconst SYS__LWP_KILL = 318\nconst SYS__LWP_KILL ideal-int\nconst SYS__LWP_PARK = 434\nconst SYS__LWP_PARK ideal-int\nconst SYS__LWP_SELF = 311\nconst SYS__LWP_SELF ideal-int\nconst SYS__LWP_SETNAME = 323\nconst SYS__LWP_SETNAME ideal-int\nconst SYS__LWP_SETPRIVATE = 317\nconst SYS__LWP_SETPRIVATE ideal-int\nconst SYS__LWP_SUSPEND = 313\nconst SYS__LWP_SUSPEND ideal-int\nconst SYS__LWP_UNPARK = 321\nconst SYS__LWP_UNPARK_ALL = 322\nconst SYS__LWP_UNPARK_ALL ideal-int\nconst SYS__LWP_UNPARK ideal-int\nconst SYS__LWP_WAIT = 312\nconst SYS__LWP_WAIT ideal-int\nconst SYS__LWP_WAKEUP = 315\nconst SYS__LWP_WAKEUP ideal-int\nconst SYS_MADVISE = 75\nconst SYS_MADVISE ideal-int\nconst SYS_MINCORE = 78\nconst SYS_MINCORE ideal-int\nconst SYS_MINHERIT = 273\nconst SYS_MINHERIT ideal-int\nconst SYS_MKDIR = 136\nconst SYS_MKDIRAT = 461\nconst SYS_MKDIRAT ideal-int\nconst SYS_MKDIR ideal-int\nconst SYS_MKFIFO = 132\nconst SYS_MKFIFOAT = 459\nconst SYS_MKFIFOAT ideal-int\nconst SYS_MKFIFO ideal-int\nconst SYS_MKNOD = 450\nconst SYS_MKNODAT = 460\nconst SYS_MKNODAT ideal-int\nconst SYS_MKNOD ideal-int\nconst SYS_MLOCK = 203\nconst SYS_MLOCKALL = 242\nconst SYS_MLOCKALL ideal-int\nconst SYS_MLOCK ideal-int\nconst SYS_MMAP = 197\nconst SYS_MMAP ideal-int\nconst SYS_MODCTL = 246\nconst SYS_MODCTL ideal-int\nconst SYS_MOUNT = 410\nconst SYS_MOUNT ideal-int\nconst SYS_MPROTECT = 74\nconst SYS_MPROTECT ideal-int\nconst SYS_MREMAP = 411\nconst SYS_MREMAP ideal-int\nconst SYS_MSGCTL = 444\nconst SYS_MSGCTL ideal-int\nconst SYS_MSGGET = 225\nconst SYS_MSGGET ideal-int\nconst SYS_MSGRCV = 227\nconst SYS_MSGRCV ideal-int\nconst SYS_MSGSND = 226\nconst SYS_MSGSND ideal-int\nconst SYS_MUNLOCK = 204\n```\n\n----------------------------------------\n\nTITLE: Network Interface Type Constants - Darwin ARM64\nDESCRIPTION: Constants defining different types of network interfaces for Darwin ARM64 systems. Includes values for common interfaces like Ethernet, Bridge, WiFi, and various other network types.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_150\n\nLANGUAGE: Go\nCODE:\n```\nconst IFT_BRIDGE = 209\nconst IFT_CARP = 248\nconst IFT_CELLULAR = 255\nconst IFT_CEPT = 19\nconst IFT_DS3 = 30\nconst IFT_ENC = 244\nconst IFT_EON = 25\nconst IFT_ETHER = 6\nconst IFT_FAITH = 56\nconst IFT_FDDI = 15\n```\n\n----------------------------------------\n\nTITLE: Implementing Module 'n' Functionality\nDESCRIPTION: This Go file implements the functionality for module 'n'. It imports and uses the 'example.com/dep' package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace_conflict_override.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage n\n\nimport \"example.com/dep\"\n\nfunc F() {\n\tdep.G()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Terminal I/O Control Constants in Go for NetBSD ARM64\nDESCRIPTION: This snippet defines constants for terminal I/O control flags (IGNBRK, IGNCR, etc.) used in the syscall package for NetBSD ARM64 with CGO. These constants are used to configure terminal behavior.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_29\n\nLANGUAGE: Go\nCODE:\n```\nconst IGNBRK = 1\nconst IGNBRK ideal-int\nconst IGNCR = 128\nconst IGNCR ideal-int\nconst IGNPAR = 4\nconst IGNPAR ideal-int\nconst IMAXBEL = 8192\nconst IMAXBEL ideal-int\n```\n\n----------------------------------------\n\nTITLE: Race Condition Test and Benchmark in Go\nDESCRIPTION: This Go code defines a test function and a benchmark function, both designed to trigger race conditions. They create goroutines that access shared variables concurrently.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_race_cover_mode_issue20435.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage testrace\n\nimport \"testing\"\n\nfunc TestRace(t *testing.T) {\n\tfor i := 0; i < 10; i++ {\n\t\tc := make(chan int)\n\t\tx := 1\n\t\tgo func() {\n\t\t\tx = 2\n\t\t\tc <- 1\n\t\t}()\n\t\tx = 3\n\t\t<-c\n\t\t_ = x\n\t}\n}\n\nfunc BenchmarkRace(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tc := make(chan int)\n\t\tx := 1\n\t\tgo func() {\n\t\t\tx = 2\n\t\t\tc <- 1\n\t\t}()\n\t\tx = 3\n\t\t<-c\n\t\t_ = x\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Credentials and Response in JSON\nDESCRIPTION: JSON configuration that defines username/password credentials and specifies HTTP response parameters including status code and a lengthy message. This appears to be for testing authentication handling or configuring an API response.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/auth/oronelongline.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"Username\": \"aladdin\",\n\t\"Password\": \"opensesame\",\n\t\"StatusCode\": 404,\n\t\"Message\": \"blahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblahblah\"\n}\n```\n\n----------------------------------------\n\nTITLE: Main Package Test with Import\nDESCRIPTION: Test file importing the main package from within its own test package, demonstrating valid usage of main package imports in test files\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/import_main.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main_test\n\nimport (\n\t\"testing\"\n\txmain \"x\"\n)\n\nvar _ = xmain.X\n\nfunc TestFoo(t *testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Testing Standard Library Package Installation\nDESCRIPTION: Verifies that standard library packages don't have install targets by default, but behavior changes with specific environment variables like GODEBUG=installgoroot=all and CGO_ENABLED=0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_goroot_targets.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Packages in std do not have an install target.\ngo list -f '{{.Target}}' fmt\n! stdout .\ngo list -export -f '{{.Export}}' fmt\nstdout $GOCACHE\n\n# With GODEBUG=installgoroot=all, fmt has a target.\n# (Though we can't try installing it without modifying goroot).\nenv GODEBUG=installgoroot=all\ngo list -f '{{.Target}}' fmt\nstdout fmt\\.a\n\n# However, the fake packages \"builtin\" and \"unsafe\" do not.\ngo list -f '{{.Target}}' builtin unsafe\n! stdout .\ngo install builtin unsafe  # Should succeed as no-ops.\n\n# With CGO_ENABLED=0, packages that would have\n# an install target with cgo on no longer do.\nenv GODEBUG=\nenv CGO_ENABLED=0\ngo list -f '{{.Target}}' runtime/cgo\n! stdout .\ngo list -export -f '{{.Export}}' runtime/cgo\nstdout $GOCACHE\n```\n\n----------------------------------------\n\nTITLE: Defining Event Filter Constants in Go for NetBSD ARM64\nDESCRIPTION: This snippet defines constants related to event filters and actions used in event-driven programming on NetBSD ARM64. These constants are typically used with the kqueue system for event notification.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_126\n\nLANGUAGE: Go\nCODE:\n```\nconst EV_ADD = 1\nconst EV_ADD ideal-int\nconst EV_CLEAR = 32\nconst EV_CLEAR ideal-int\n// ... (more EV_ and EVFILT_ constants)\n```\n\n----------------------------------------\n\nTITLE: Module Get Commands\nDESCRIPTION: Illustrates error cases when attempting to use 'go get' to upgrade the main module to specific versions.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query_main.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo get rsc.io/quote@5d9f230b\ngo get rsc.io/quote@v1.5.2\ngo get rsc.io/quote@latest\n```\n\n----------------------------------------\n\nTITLE: Plain Text Link Test Cases\nDESCRIPTION: Raw test input showing various link syntax cases including invalid and edge cases\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/link4.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThese are not links.\n\n[x\n\n[x]:\n\n[x]:https://go.dev\n\n[x]https://go.dev\n\n[x]: surprise://go.dev\n\n[x]: surprise!\n\nBut this is, with a tab (although it's unused).\n\n[z]:  https://go.dev\n```\n\n----------------------------------------\n\nTITLE: Toolchain Version Info JSON\nDESCRIPTION: JSON configuration file containing version information for the Go toolchain test module\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.windows-amd64.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.999testmod.windows-amd64\"}\n```\n\n----------------------------------------\n\nTITLE: Setting up Module Definition for Go Toolchain Test\nDESCRIPTION: Module definition file (.mod) that defines the test toolchain module name.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-amd64.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: This snippet shows the contents of a go.mod file, which defines the module and its dependencies.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_partial.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.14\n\nrequire rsc.io/quote v1.5.2\n```\n\n----------------------------------------\n\nTITLE: Defining Empty Go Subpackage for Import Cycle (Go)\nDESCRIPTION: Defines an empty `sql` package in `datastore/sql/sql.go`. This file primarily serves as a placeholder within the package structure required to create the import cycle. The actual dependency contributing to the cycle from this package is declared in its corresponding test file (`sql_test.go`).\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_test_cycle.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n-- datastore/sql/sql.go --\npackage sql\n```\n\n----------------------------------------\n\nTITLE: Creating Custom bytes Package with Modified Import\nDESCRIPTION: This Go file defines a custom 'bytes' package that imports a 'bytes/modified' package. It's used to test how package imports behave in a custom GOROOT environment.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_alt_goroot.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage bytes\n\nimport _\"bytes/modified\"\n```\n\n----------------------------------------\n\nTITLE: Defining NetBSD ARM64 File System Constants in Go Syscall Package\nDESCRIPTION: File system constants for NetBSD. These define architecture-specific flags, block sizes, file execution permissions, file type masks, and whiteout file types used in the filesystem.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_55\n\nLANGUAGE: Go\nCODE:\n```\nconst S_ARCH1 = 65536\nconst S_ARCH1 ideal-int\nconst S_ARCH2 = 131072\nconst S_ARCH2 ideal-int\nconst S_BLKSIZE = 512\nconst S_BLKSIZE ideal-int\nconst S_IEXEC = 64\nconst S_IEXEC ideal-int\nconst S_IFMT = 61440\nconst S_IFWHT = 57344\nconst S_IFWHT ideal-int\n```\n\n----------------------------------------\n\nTITLE: Standalone Go Test File\nDESCRIPTION: This Go file contains a minimal test setup with an empty test function. It's used to demonstrate running tests with no matches.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_no_tests.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage standalone_test\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n}\n```\n\n----------------------------------------\n\nTITLE: Adding First go.mod to the v1 Branch\nDESCRIPTION: Switches to the 'mytag' reference and adds a go.mod file for the v1 series, creating new version tags v0.0.1 and v1.0.1.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout --detach mytag\n\nat 2018-02-19T18:10:28-05:00\necho 'module \"github.com/rsc/vgotest1\" // root go.mod'\ncp stdout go.mod\ngit add go.mod\ngit commit -m 'go.mod'\ngit tag v0.0.1\ngit tag v1.0.1\n```\n\n----------------------------------------\n\nTITLE: Adding Regional_Indicator RangeTable to unicode package\nDESCRIPTION: Adds support for Regional Indicator Symbols by defining a new RangeTable in the unicode package. These are used to represent country flags in Unicode.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.10.txt#2025-04-22_snippet_18\n\nLANGUAGE: go\nCODE:\n```\npkg unicode, var Regional_Indicator *RangeTable\n```\n\n----------------------------------------\n\nTITLE: Declaring a Go Module Path Using go.mod - Go\nDESCRIPTION: Defines the module path for a Go project using go.mod. The 'module' directive assigns the module's import path, which is essential for dependency management via Go modules. There are no other directives in this snippet; dependencies and versioning are controlled outside this file. Expected usage is for projects using 'go mod' commands, and there are no parameters or external dependencies required.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_incompatible_v2.0.0+incompatible.txt#2025-04-22_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\nmodule example.com/retract/incompatible\n```\n\n----------------------------------------\n\nTITLE: Plain Text List Format\nDESCRIPTION: Shows list in plain text format with normalized indentation.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nText. - Not a list.\n  - Here is the list.\n  - Using multiple bullets.\n  - Indentation does not matter.\n  - Lots of bullets.\n\nMore text.\n```\n\n----------------------------------------\n\nTITLE: NetBSD ARM64 Socket Address Structures Definition in Go\nDESCRIPTION: Defines raw socket address structures for different address families including Unix, IPv4, IPv6, and datalink. These structures are used for low-level socket operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_94\n\nLANGUAGE: go\nCODE:\n```\ntype RawSockaddr struct {\n\tFamily uint8\n\tLen uint8\n\tData [14]int8\n}\n\ntype RawSockaddrInet4 struct {\n\tLen uint8\n\tFamily uint8\n\tZero [8]int8\n}\n\ntype RawSockaddrInet6 struct {\n\tLen uint8\n\tFamily uint8\n}\n\ntype RawSockaddrUnix struct {\n\tLen uint8\n\tFamily uint8\n\tPath [104]int8\n}\n\ntype RawSockaddrDatalink struct {\n\tLen uint8\n\tFamily uint8\n\tIndex uint16\n\tType uint8\n\tNlen uint8\n\tAlen uint8\n\tSlen uint8\n\tData [12]int8\n}\n\ntype RawSockaddrAny struct {\n\tPad [92]int8\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines the module name as rsc.io/fortune\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_fortune_v1.0.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule rsc.io/fortune\n```\n\n----------------------------------------\n\nTITLE: Standalone Module Dependency Check in Go\nDESCRIPTION: This snippet checks that an initial standalone Go module does not use any downloaded modules. It uses the \"go list\" command to inspect the dependencies and ensures the output does not include 'pkg/mod', indicating no external modules were used.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_multirepo.txt#2025-04-22_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nenv GO111MODULE=on\ngo list -deps -f {{.Dir}}\n! stdout 'pkg[\\/]mod'\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Flag Combination (Template then JSON)\nDESCRIPTION: Verifies that using both -f and -json flags together (in that order) produces an error\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_json_with_f.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n! go list -f '{{.}}' -json ./...\n```\n\n----------------------------------------\n\nTITLE: Toolchain Version Information in JSON\nDESCRIPTION: JSON metadata specifying the version of the toolchain module as v0.0.1-go1.999testmod.linux-mips64x.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-mips64x.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.999testmod.linux-mips64x\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Rusage Struct for Resource Usage Statistics in Go Syscall Package\nDESCRIPTION: The Rusage struct represents resource usage statistics in the syscall package for Darwin ARM64 with CGO. It contains fields for tracking system and user time, as well as counts for voluntary context switches and block I/O operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_205\n\nLANGUAGE: Go\nCODE:\n```\ntype Rusage struct {\n    Utime    Timeval\n    Stime    Timeval\n    Nvcsw    int64\n    Oublock  int64\n    // Additional fields not shown\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Go Module Declaration\nDESCRIPTION: A malformed Go module configuration file that lacks proper go.mod syntax and contains invalid text.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badmod_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule rsc.io/badmod\nhello world\n```\n\n----------------------------------------\n\nTITLE: Echo Command Implementation in Go\nDESCRIPTION: Simple implementation of an echo command in Go that joins command line arguments with spaces and prints them followed by a newline. Used as a test utility for go generate tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/generate.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tfmt.Println(strings.Join(os.Args[1:], \" \"))\n\tfmt.Println()\n}\n```\n\n----------------------------------------\n\nTITLE: Module A Main Program\nDESCRIPTION: Simple Go program that imports and uses rsc.io/quote package to print a hello message\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sum_mismatch.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"rsc.io/quote\"\n)\n\nfunc main() {\n\tfmt.Println(quote.Hello())\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go List for Packages Outside Import Graph\nDESCRIPTION: This snippet tests the behavior of 'go list' command for packages outside the import graph with different module modes.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# 'go list -mod=mod' should report packages outside the import graph,\n# but 'go list -mod=vendor' should error out for them.\ngo list -mod=mod -f {{.Dir}} w\nstdout 'src[\\/]w'\n! go list -mod=vendor -f {{.Dir}} w\nstderr 'package w is not in std'\n\ngo list -mod=mod -f {{.Dir}} diamondright\nstdout 'src[\\/]diamondright'\n```\n\n----------------------------------------\n\nTITLE: Assembly Implementation for AMD64\nDESCRIPTION: Assembly implementation of an Add function for AMD64 architecture.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/toolexec.txt#2025-04-22_snippet_2\n\nLANGUAGE: assembly\nCODE:\n```\nTEXT ·Add(SB),$0-24\n\tMOVQ a+0(FP), AX\n\tADDQ b+8(FP), AX\n\tMOVQ AX, ret+16(FP)\n\tRET\n```\n\n----------------------------------------\n\nTITLE: Initializing and Configuring Git Repository\nDESCRIPTION: Creates a new Git repository, adds files, commits them, and creates a tag for version 1.0.0.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/retract-pseudo.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit init\n\ngit add go.mod p.go\ngit commit -m 'create module retract-pseudo'\ngit branch -m main\ngit tag v1.0.0\n\ngit mv p.go q.go\ngit commit -m 'trivial change'\n\ngit show-ref --tags --heads\ncmp stdout .git-refs\n```\n\n----------------------------------------\n\nTITLE: Git Repository Setup and Initial Commits\nDESCRIPTION: Initializes a Git repository with author information and creates initial commit with LICENSE and README files.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/hg/vgotest1.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GIT_AUTHOR_NAME='Russ Cox'\nenv GIT_AUTHOR_EMAIL='rsc@golang.org'\nenv GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME\nenv GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL\n\ngit init\n\ngit add LICENSE README.md\ngit commit -m 'initial commit'\ngit branch -m master\n```\n\n----------------------------------------\n\nTITLE: Go Module Declaration\nDESCRIPTION: Simple go.mod file declaring a module named 'example' with Go 1.19 compatibility.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_goroot_PATH.txt#2025-04-22_snippet_1\n\nLANGUAGE: go.mod\nCODE:\n```\nmodule example\n\ngo 1.19\n```\n\n----------------------------------------\n\nTITLE: Main Package Imports\nDESCRIPTION: Main package file importing dependent modules a and b.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_issue60313.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage example\n\nimport (\n\t_ \"example.net/a\"\n\t_ \"example.net/b\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining SockaddrDatalink Structure in Go for NetBSD ARM64\nDESCRIPTION: Definition of the SockaddrDatalink struct for link-layer socket addresses. It contains fields for address family, length, link type, and other datalink addressing information.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_104\n\nLANGUAGE: Go\nCODE:\n```\ntype SockaddrDatalink struct {\n    Len uint8\n    Family uint8\n    Index uint16\n    Type uint8\n    Nlen uint8\n    Alen uint8\n    Slen uint8\n    Data [12]int8\n}\n```\n\n----------------------------------------\n\nTITLE: Go Program for Checking GOROOT Environment\nDESCRIPTION: This Go program checks the GOROOT environment variable by executing the 'go env GOROOT' command and comparing the result with an expected value. It handles symlinks and case-insensitive comparisons.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goroot_executable.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\t\"strings\"\n)\n\nfunc main() {\n\texe := os.Args[1]\n\twant := os.Args[2]\n\tcmd := exec.Command(exe, \"env\", \"GOROOT\")\n\tout, err := cmd.CombinedOutput()\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"%s env GOROOT: %v, %s\\n\", exe, err, out)\n\t\tos.Exit(1)\n\t}\n\tgoroot, err := filepath.EvalSymlinks(strings.TrimSpace(string(out)))\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n\twant, err = filepath.EvalSymlinks(want)\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, err)\n\t\tos.Exit(1)\n\t}\n\tif !strings.EqualFold(goroot, want) {\n\t\tfmt.Fprintf(os.Stderr, \"go env GOROOT:\\nhave %s\\nwant %s\\n\", goroot, want)\n\t\tos.Exit(1)\n\t}\n\tfmt.Fprintf(os.Stderr, \"go env GOROOT: %s\\n\", goroot)\n\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Struct Field Layouts for Windows (386, amd64) in Go\nDESCRIPTION: Defines struct fields for various Windows-specific system and networking structures, such as address info, certificate chains, revocation information, and socket address storage. These types are used by the Go syscall package to represent and interact with Windows kernel data. Each field maps to a raw pointer or a fixed-length byte array; inputs and outputs follow the Windows API ABI layout requirements.\nSOURCE: https://github.com/golang/go/blob/master/api/except.txt#2025-04-22_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\ntype AddrinfoW struct { Addr uintptr }\ntype CertChainPolicyPara struct { ExtraPolicyPara uintptr }\ntype CertChainPolicyStatus struct { ExtraPolicyStatus uintptr }\ntype CertContext struct { CertInfo uintptr }\ntype CertRevocationInfo struct { CrlInfo uintptr; OidSpecificInfo uintptr }\ntype CertSimpleChain struct { TrustListInfo uintptr }\ntype RawSockaddrAny struct { Pad [96]int8 }\n```\n\n----------------------------------------\n\nTITLE: Defining Subdirectory Module with Dependency in Go\nDESCRIPTION: This go.mod file in the 'm1' subdirectory defines a module 'example.net/m' with Go version 1.16 and requires 'example.net/b v0.1.0'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue48511.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/m\n\ngo 1.16\n\nrequire example.net/b v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Go Workspace Configuration\nDESCRIPTION: Workspace configuration file specifying Go version and module usage\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_regression_hang.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngo 1.16\n\nuse (\n\t./a\n)\n```\n\n----------------------------------------\n\nTITLE: Short Module Implementation\nDESCRIPTION: Implements a simple package for the 'short' module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_deprecate_message.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage short\n```\n\n----------------------------------------\n\nTITLE: Empty Go Package Files\nDESCRIPTION: These Go files represent empty package files used in the test structure. They are placeholders for package declarations in various test scenarios.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_empty.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage p\n```\n\n----------------------------------------\n\nTITLE: Command Implementation\nDESCRIPTION: Main program that prints the module version string using fmt package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_deprecated_a_v1.0.0.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nfunc main() { fmt.Println(\"a@v1.0.0\") }\n```\n\n----------------------------------------\n\nTITLE: Reference Go File for Formatting Comparison\nDESCRIPTION: This Go file serves as a reference for the expected formatting output. It's used to compare against the formatted version of xnofmt.go to ensure 'go fmt' behaves as expected.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/embed_fmt.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage p\n\nimport \"embed\"\n\n//go:embed missing.txt\nvar X embed.FS\n```\n\n----------------------------------------\n\nTITLE: Testing Malformed Module Path\nDESCRIPTION: This command tests the `go list` operation on a `go.mod` file with a malformed module path, verifying the error handling and proper error message output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_path.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncd $WORK/gopath/src/badname\n! go list .\nstderr 'malformed module path'\n```\n\n----------------------------------------\n\nTITLE: Package B Definition\nDESCRIPTION: Go package 'b' importing package 'c', forming part of the import cycle.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_import_cycle_deps_errors.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage b\n\nimport _ \"m/c\"\n```\n\n----------------------------------------\n\nTITLE: Initializing and Managing a Mercurial Repository for Go Code\nDESCRIPTION: A sequence of Mercurial commands to initialize a repository, add a Go source file, commit changes with specified metadata, and display the commit history.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/hg/hello.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhg init\n\nhg add hello.go\nhg commit --user 'bwk' --date '2017-09-21T21:14:14-04:00' --message 'hello world'\n\nhg log -r ':' --template '{node|short} {desc|strip|firstline}\\n'\ncmp stdout .hg-log\n```\n\n----------------------------------------\n\nTITLE: Go File with Repeated Debug Directives\nDESCRIPTION: A simple Go file that contains two identical debug directives (//go:debug panicnil=1), which should trigger a compiler error for repeated directives. The program itself is minimal with just an empty main function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_repeated_godebug_issue62346.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n//go:debug panicnil=1\n//go:debug panicnil=1\n\npackage main\n\nfunc main() {\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Git References\nDESCRIPTION: Shows all refs (tags and branches) and compares them with expected output to verify the repository was set up correctly.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/odd-tags.txt#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit show-ref --tags --heads\ncmp stdout .git-refs\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module for example.net/pkgadded\nDESCRIPTION: This snippet defines the Go module 'example.net/pkgadded' and specifies the minimum Go version required. It's typically placed in the root of the module directory.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.net_pkgadded_v1.2.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.net/pkgadded\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Displaying Git Diff Output for File Changes\nDESCRIPTION: This snippet shows the Git diff output for changes between old and new versions of a file. It includes the content of both versions and a unified diff representation. The only difference is a newline at the end of the file.\nSOURCE: https://github.com/golang/go/blob/master/src/internal/diff/testdata/eof1.txt#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-- old --\na\nb\nc\n-- new --\na\nb\nc^D\n-- diff --\ndiff old new\n--- old\n+++ new\n@@ -1,3 +1,3 @@\n a\n b\n-c\n+c\\ No newline at end of file\n```\n\n----------------------------------------\n\nTITLE: Defining System Call Constants for NetBSD ARM64 CGO in Go\nDESCRIPTION: This snippet defines system call constants for the NetBSD ARM64 platform when using CGO. It includes constants for various system operations such as memory management, process control, file operations, and inter-process communication.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_67\n\nLANGUAGE: Go\nCODE:\n```\nconst SYS_MUNLOCKALL = 243\nconst SYS_MUNLOCKALL ideal-int\nconst SYS_MUNLOCK ideal-int\nconst SYS_MUNMAP = 73\nconst SYS_MUNMAP ideal-int\nconst SYS_NANOSLEEP = 430\nconst SYS_NANOSLEEP ideal-int\n// ... (truncated for brevity)\nconst SYS_SHUTDOWN = 134\nconst SYS_SHUTDOWN ideal-int\nconst SYS___SIGACTION_SIGTRAMP = 340\n```\n\n----------------------------------------\n\nTITLE: HTML Rendered Output\nDESCRIPTION: Shows the text formatted as HTML using pre tags for code block preservation\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/code3.txt#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<p>Text.\n<pre>A tab-indented\n(surrounded by more blank lines)\ncode block and haiku.</pre>\n<p>More text.\n```\n\n----------------------------------------\n\nTITLE: Coverage Profiling for Compiler\nDESCRIPTION: Commands for building and running the compiler with coverage instrumentation\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ go install -cover -coverpkg=cmd/compile/... cmd/compile\n$ mkdir /tmp/coverdir\n$ GOCOVERDIR=/tmp/coverdir go test [...]\n$ go tool covdata textfmt -i=/tmp/coverdir -o coverage.out\n$ go tool cover -html coverage.out\n```\n\n----------------------------------------\n\nTITLE: Implementing Cgo Functions with External C References\nDESCRIPTION: Defines Cgo functions F and G that call external C functions f and g respectively.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/link_syso_deps.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage cgo\n\n// extern void f(void);\n// extern void g(void);\nimport \"C\"\n\nfunc F() {\n\tC.f()\n}\n\nfunc G() {\n\tC.g()\n}\n```\n\n----------------------------------------\n\nTITLE: Module A Configuration\nDESCRIPTION: Configuration for module A requiring version 0.2.0 of module B.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_issue65363.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/a\n\ngo 1.18\n\nrequire example.net/b v0.2.0\n```\n\nLANGUAGE: go\nCODE:\n```\npackage a\n\nimport _ \"example.net/b\"\n```\n\n----------------------------------------\n\nTITLE: Placeholder README for Missing Package (Text)\nDESCRIPTION: A simple placeholder file within the 'example.com/notfound' directory. Its presence ensures the directory exists, but it contains no Go code, making the package 'example.com/notfound' effectively non-existent from the Go tool's perspective.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_bad_import.txt#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n-- example.com/notfound/README --\nThis directory intentionally left blank.\n```\n\n----------------------------------------\n\nTITLE: Defining an Empty Go Package - Go\nDESCRIPTION: Defines a minimal Go package named p with no implementation. This serves as an empty entry point for the module, satisfying Go's requirement for at least one package in each module version. There are no exported symbols, imports, or code logic present.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_self_prerelease_v1.9.1-pre.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage p\n\n```\n\n----------------------------------------\n\nTITLE: Testing 'go list' Failure with Non-Go File (Shell)\nDESCRIPTION: Executes the `go list` command with flags `-test` and `-json`, attempting to list a C file (`c.c`) and a Go file (`x.go`). The leading `!` indicates that the command is expected to fail (exit with a non-zero status). The expected standard error (`stderr`) matches a regular expression confirming the error message about `c.c` not being a `.go` file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_test_non_go_files.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n! go list -test -json -- c.c x.go\nstderr '^named files must be \\\\.go files: c\\\\.c$'\n```\n\n----------------------------------------\n\nTITLE: Migrating to Go Modules with v0.1.0 Tag\nDESCRIPTION: Removes the README file, adds a go.mod file to establish the module, commits the changes, and tags it with v0.1.0 plus build metadata.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/odd-tags.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit rm -r README.txt\ngit add go.mod\ngit commit -m 'migrate to Go modules'\ngit tag 'v0.1.0+build-metadata'\n```\n\n----------------------------------------\n\nTITLE: Invalid Example Function with Parameter in Go\nDESCRIPTION: A Go test file containing an invalid example function that has a parameter. This example is used to verify that the Go testing framework properly ignores examples with invalid signatures (golang.org/issue/35284).\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_bad_example.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage  x\n\nimport \"fmt\"\n\nfunc ExampleThisShouldNotHaveAParameter(thisShouldntExist int) {\n\tfmt.Println(\"X\")\n\t// Output:\n}\n```\n\n----------------------------------------\n\nTITLE: Valid Module Version Info\nDESCRIPTION: Example of a valid JSON response for module version information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_query_empty.txt#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\": \"v1.1.0\"}\n```\n\n----------------------------------------\n\nTITLE: Plain Text Output\nDESCRIPTION: Final plain text output with normalized line breaks\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/hello.txt#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nHello, world\n\nThis is a test.\n```\n\n----------------------------------------\n\nTITLE: Module Version Information\nDESCRIPTION: JSON metadata containing version and timestamp information for the module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badsum_v1.0.1.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.0.1\",\"Time\":\"2018-02-14T00:45:20Z\"}\n```\n\n----------------------------------------\n\nTITLE: Defining math Constants in Go\nDESCRIPTION: Constants defining maximum and minimum floating point values in Go's math package. Includes MaxFloat64, SmallestNonzeroFloat32, and SmallestNonzeroFloat64.\nSOURCE: https://github.com/golang/go/blob/master/api/except.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nconst MaxFloat64 = 1.79769e+308\nconst SmallestNonzeroFloat32 = 1.4013e-45\nconst SmallestNonzeroFloat64 = 4.94066e-324\n```\n\n----------------------------------------\n\nTITLE: Initial Package Build with PGO\nDESCRIPTION: Tests first build with PGO which should trigger preprofile\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_pgo.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo build -x -pgo=default.pgo lib.go\nstderr 'preprofile.*default\\.pgo'\n```\n\n----------------------------------------\n\nTITLE: Building C-Shared Object with Go\nDESCRIPTION: This snippet builds a C-shared object named `external.so` from the `rsc.io/fortune` package using the `-buildmode=c-shared` flag. It requires that the environment variable `GO111MODULE` is set to `on` for module resolution. The resulting `.so` file can be used as a dynamic library in C/C++ projects.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_cshared.txt#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nenv GO111MODULE=on\n\ngo get rsc.io/fortune\ngo build -buildmode=c-shared -o external.so rsc.io/fortune\n```\n\n----------------------------------------\n\nTITLE: Defining SYSCTL Constants for NetBSD ARM64\nDESCRIPTION: Defines SYSCTL-related constants for NetBSD ARM64 with CGO support. These constants are used for system configuration operations through the sysctl interface.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_65\n\nLANGUAGE: Go\nCODE:\n```\nconst SYSCTL_VERS_0 = 0\nconst SYSCTL_VERS_1 = 16777216\nconst SYSCTL_VERSION = 16777216\nconst SYSCTL_VERS_MASK = 4278190080\n```\n\n----------------------------------------\n\nTITLE: HTML Output\nDESCRIPTION: Text converted to HTML format with paragraph tags\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/hello.txt#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<p>Hello,\nworld\n<p>This is\na test.\n```\n\n----------------------------------------\n\nTITLE: Mocking Go Executable with Shell Script\nDESCRIPTION: A shell script that simulates the 'go' command by echoing a version string. This is used for testing environments where the actual Go toolchain isn't needed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.solaris-amd64.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Terminal I/O Control Operation Constants for Darwin ARM64 in Go\nDESCRIPTION: Additional terminal I/O control operation constants (TIOC*) for Darwin ARM64. These are used with ioctl system calls to perform operations like setting terminal attributes, controlling flow, and managing PTY devices.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_112\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (darwin-arm64), const TIOCNOTTY = 536900721\npkg syscall (darwin-arm64), const TIOCNXCL = 536900622\npkg syscall (darwin-arm64), const TIOCOUTQ = 1074033779\npkg syscall (darwin-arm64), const TIOCPKT = 2147775600\npkg syscall (darwin-arm64), const TIOCPKT_DATA = 0\npkg syscall (darwin-arm64), const TIOCPKT_DOSTOP = 32\npkg syscall (darwin-arm64), const TIOCPKT_FLUSHREAD = 1\npkg syscall (darwin-arm64), const TIOCPKT_FLUSHWRITE = 2\npkg syscall (darwin-arm64), const TIOCPKT_IOCTL = 64\npkg syscall (darwin-arm64), const TIOCPKT_NOSTOP = 16\npkg syscall (darwin-arm64), const TIOCPKT_START = 8\npkg syscall (darwin-arm64), const TIOCPKT_STOP = 4\n```\n\n----------------------------------------\n\nTITLE: Declaring FreeBSD System Call Numbers and Protocol Family Constants - Go\nDESCRIPTION: This block provides syscall numbers for various FreeBSD kernel calls (e.g., SYS_ACCEPT4, SYS_BINDAT, SYS_CAP_GETRIGHTS, SYS_CHFLAGSAT, SYS_CONNECTAT, SYS_PIPE2, SYS_PROCCTL) and protocol address family values (e.g., AF_INET_SDP, AF_INET6_SDP, AF_MAX). Go programs use these constants for invoking specific syscalls or working with address families in struct sockaddr or elsewhere in the system layer. Supports multiple archs (amd64, arm, arm-cgo) with ideal-int companion constants.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_12\n\nLANGUAGE: Go\nCODE:\n```\nconst AF_INET6_SDP = 42\nconst AF_INET6_SDP ideal-int\nconst AF_INET_SDP = 40\nconst AF_INET_SDP ideal-int\nconst AF_MAX = 42\nconst SYS_ACCEPT4 = 541\nconst SYS_ACCEPT4 ideal-int\nconst SYS_BINDAT = 538\nconst SYS_BINDAT ideal-int\nconst SYS_CAP_GETRIGHTS = 515\nconst SYS_CAP_GETRIGHTS ideal-int\nconst SYS_CHFLAGSAT = 540\nconst SYS_CHFLAGSAT ideal-int\nconst SYS_CONNECTAT = 539\nconst SYS_CONNECTAT ideal-int\nconst SYS_PIPE2 = 542\nconst SYS_PIPE2 ideal-int\nconst SYS_PROCCTL = 544\nconst SYS_PROCCTL ideal-int\n\n```\n\n----------------------------------------\n\nTITLE: Kernel Event Notification Constants in Go for Darwin ARM64\nDESCRIPTION: Constants for kernel event notifications (kqueue/kevent). Specifies event filters, actions, and flags for file system events, process events, and timer events.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_82\n\nLANGUAGE: Go\nCODE:\n```\nconst NOTE_ABSOLUTE = 8\nconst NOTE_ATTRIB = 8\nconst NOTE_BACKGROUND = 64\nconst NOTE_CHILD = 4\nconst NOTE_CRITICAL = 32\nconst NOTE_DELETE = 1\nconst NOTE_EXEC = 536870912\nconst NOTE_EXIT = 2147483648\nconst NOTE_EXITSTATUS = 67108864\nconst NOTE_EXIT_CSERROR = 262144\nconst NOTE_EXIT_DECRYPTFAIL = 65536\nconst NOTE_EXIT_DETAIL = 33554432\nconst NOTE_EXIT_DETAIL_MASK = 458752\nconst NOTE_EXIT_MEMORY = 131072\nconst NOTE_EXIT_REPARENTED = 524288\nconst NOTE_EXTEND = 4\nconst NOTE_FFAND = 1073741824\nconst NOTE_FFCOPY = 3221225472\nconst NOTE_FFCTRLMASK = 3221225472\nconst NOTE_FFLAGSMASK = 16777215\nconst NOTE_FFNOP = 0\nconst NOTE_FFOR = 2147483648\nconst NOTE_FORK = 1073741824\nconst NOTE_LEEWAY = 16\nconst NOTE_LINK = 16\nconst NOTE_LOWAT = 1\nconst NOTE_NONE = 128\nconst NOTE_NSECONDS = 4\nconst NOTE_PCTRLMASK = -1048576\nconst NOTE_PDATAMASK = 1048575\n```\n\n----------------------------------------\n\nTITLE: Defining File Locking Constants for NetBSD ARM64 in Go\nDESCRIPTION: This snippet defines constants used for file locking operations on NetBSD ARM64. These constants are typically used with the flock system call to control file access in multi-process environments.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_137\n\nLANGUAGE: Go\nCODE:\n```\nconst LOCK_EX = 2\nconst LOCK_EX ideal-int\nconst LOCK_NB = 4\nconst LOCK_NB ideal-int\nconst LOCK_SH = 1\nconst LOCK_SH ideal-int\nconst LOCK_UN = 8\nconst LOCK_UN ideal-int\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: A simple go.mod file that defines the module name as 'm' and specifies Go 1.14 compatibility.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_tag_goexperiment.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule m\ngo 1.14\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Author Information for Repository\nDESCRIPTION: Sets up Git author and committer information using environment variables. This configures the identity that will be associated with commits in the repository.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/mainonly.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nenv GIT_AUTHOR_NAME='Bryan C. Mills'\nenv GIT_AUTHOR_EMAIL='bcmills@google.com'\nenv GIT_COMMITTER_NAME=$GIT_AUTHOR_NAME\nenv GIT_COMMITTER_EMAIL=$GIT_AUTHOR_EMAIL\n```\n\n----------------------------------------\n\nTITLE: Defining Memory Advice Constants in Go for OpenBSD 386 CGO\nDESCRIPTION: This snippet defines constants for memory advice flags used in system calls like madvise(). These constants control how the kernel should handle memory pages.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_45\n\nLANGUAGE: Go\nCODE:\n```\nconst MADV_DONTNEED = 4\nconst MADV_DONTNEED ideal-int\nconst MADV_FREE = 6\nconst MADV_FREE ideal-int\nconst MADV_NORMAL = 0\nconst MADV_NORMAL ideal-int\nconst MADV_RANDOM = 1\nconst MADV_RANDOM ideal-int\nconst MADV_SEQUENTIAL = 2\nconst MADV_SEQUENTIAL ideal-int\nconst MADV_WILLNEED = 3\nconst MADV_WILLNEED ideal-int\n```\n\n----------------------------------------\n\nTITLE: Markdown Section Header for Go Standard Library\nDESCRIPTION: A markdown section header with an HTML anchor tag for the Go standard library documentation.\nSOURCE: https://github.com/golang/go/blob/master/doc/initial/6-stdlib/0-heading.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Standard library {#library}\n```\n\n----------------------------------------\n\nTITLE: Verifying Module Name with go list\nDESCRIPTION: Runs 'go list -m' to verify that the module name is correctly identified as 'example.com' even with an invalid GOPATH.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_init_empty.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo list -m\nstdout '^example.com$'\n```\n\n----------------------------------------\n\nTITLE: Markdown Output Format\nDESCRIPTION: Markdown-formatted version of the text showing standard markdown list formatting and spacing.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list6.txt#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nText.\n\n  - List immediately after.\n  - Another.\n\nMore text.\n\n  - List after blank line.\n  - Another.\n\nEven more text.\n\n  - List immediately after.\n\n  - Blank line between items.\n\nYet more text.\n\n  - Another list after blank line.\n\n  - Blank line between items.\n\nStill more text.\n\n  - One list item.\n\n    Multiple paragraphs.\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Mock Gofmt Binary Script\nDESCRIPTION: Shell script that serves as a mock gofmt binary. The script identifies itself as unused when executed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-riscv64.txt#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: Plain Text Output Format\nDESCRIPTION: Text-only version with the link reference resolved to plain text\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/linklist3.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nCool things:\n\n  - Foo\n  - Go\n  - Bar\n\n[Go]: https://go.dev/\n```\n\n----------------------------------------\n\nTITLE: Package Usage Implementation\nDESCRIPTION: Go source file that imports the ambiguous package for testing purposes\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_ambiguous.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage use\n\nimport _ \"example.com/ambiguous/a/b\"\n```\n\n----------------------------------------\n\nTITLE: Module C Implementation\nDESCRIPTION: Package c implementation importing module B and providing function C()\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_regression_hang.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage c\n\nimport \"example.com/b\"\n\nfunc C() {\n\tb.B()\n}\n```\n\n----------------------------------------\n\nTITLE: Reverting Root Module Path to v1\nDESCRIPTION: Updates the root go.mod file to remove the v2 from the module path and tags it as v2.0.5, showing module version management.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/vgotest1.txt#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nat 2018-02-19T19:03:59-05:00\nenv GIT_AUTHOR_DATE=2018-02-19T18:17:02-05:00\necho 'module \"github.com/rsc/vgotest1\" // root go.mod'\ncp stdout go.mod\ngit add go.mod\ngit commit -m 'go.mod: drop v2'\ngit tag v2.0.5\n```\n\n----------------------------------------\n\nTITLE: HTML Template Section\nDESCRIPTION: Simple HTML paragraph template section\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/link3.txt#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<p>Doc text.\n```\n\n----------------------------------------\n\nTITLE: Testing Module Import and Error Detection\nDESCRIPTION: Checks if the module import produces an error when using an older Go version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/goline_order.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n! go list -deps -tags usem1\ncmp go.mod go.mod.orig\nstderr '^go: module ./m1 requires go >= 1.21.2 \\(running go 1.21.1\\)$'\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid +incompatible Pseudo-version for Module with go.mod in Go\nDESCRIPTION: This snippet tests that a +incompatible pseudo-version for a module that has an explicit go.mod file is invalid. It attempts to add an invalid requirement and checks for the expected error message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_version.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ncp go.mod.orig go.mod\ngo mod edit -require github.com/pierrec/lz4@v2.0.9-0.20190209155647-9a39efadad3d+incompatible\ncd outside\n! go list -m github.com/pierrec/lz4\nstderr '^go: example.com@v0.0.0 requires\\n\\tgithub.com/pierrec/lz4@v2.0.9-0.20190209155647-9a39efadad3d\\+incompatible: invalid version: module contains a go.mod file, so module path must match major version \\(\"github.com/pierrec/lz4/v2\"\\)$'\ncd ..\n! go list -m github.com/pierrec/lz4\nstderr '^go: github.com/pierrec/lz4@v2.0.9-0.20190209155647-9a39efadad3d\\+incompatible: invalid version: module contains a go.mod file, so module path must match major version \\(\"github.com/pierrec/lz4/v2\"\\)$'\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module for Missing Package\nDESCRIPTION: This snippet shows a go.mod file for a module that intentionally has no Go source files.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_pkgtags.txt#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/missing\n\ngo 1.15\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module definition file specifying the module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_vendor.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule vend/hello\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: CGO Test Package\nDESCRIPTION: Test package attempting to use cgo in tests, which is not allowed\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_load_err.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage cgo_test\n\n// cgo is not allowed in tests.\n// See golang.org/issue/18647\n\nimport \"C\"\nimport (\n\t\"testing\"\n\t_ \"m/want\"\n)\n\nfunc Test(t *testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Go Command Script Implementation for Test Module\nDESCRIPTION: A shell script that serves as a placeholder for the 'go' command in a test toolchain. The script simply outputs a message indicating it's the test version (go1.999testmod).\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-ppc64.txt#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n#!/bin/sh\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Defining Routing Table Constants in Go for Darwin ARM64 CGO\nDESCRIPTION: This snippet defines constants for routing table operations used in system calls on Darwin ARM64 with CGO. These constants are used for network routing configuration.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_173\n\nLANGUAGE: Go\nCODE:\n```\nconst RTAX_AUTHOR = 6\nconst RTAX_AUTHOR ideal-int\nconst RTAX_BRD = 7\nconst RTAX_BRD ideal-int\nconst RTAX_DST = 0\nconst RTAX_DST ideal-int\nconst RTAX_GATEWAY = 1\nconst RTAX_GATEWAY ideal-int\nconst RTAX_GENMASK = 3\nconst RTAX_GENMASK ideal-int\nconst RTAX_IFA = 5\nconst RTAX_IFA ideal-int\nconst RTAX_IFP = 4\nconst RTAX_IFP ideal-int\nconst RTAX_MAX = 8\nconst RTAX_MAX ideal-int\nconst RTAX_NETMASK = 2\nconst RTAX_NETMASK ideal-int\nconst RTA_AUTHOR = 64\nconst RTA_AUTHOR ideal-int\nconst RTA_BRD = 128\nconst RTA_BRD ideal-int\nconst RTA_DST = 1\nconst RTA_DST ideal-int\nconst RTA_GATEWAY = 2\nconst RTA_GATEWAY ideal-int\nconst RTA_GENMASK = 8\nconst RTA_GENMASK ideal-int\nconst RTA_IFA = 32\nconst RTA_IFA ideal-int\nconst RTA_IFP = 16\nconst RTA_IFP ideal-int\nconst RTA_NETMASK = 4\nconst RTA_NETMASK ideal-int\n```\n\n----------------------------------------\n\nTITLE: Running go vet on package with external tests\nDESCRIPTION: This snippet shows how to run go vet on a package with external tests. It expects an error message containing 'Printf'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vet.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n! go vet m/vetpkg\nstderr 'Printf'\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Environment and Running Test Script\nDESCRIPTION: This snippet sets the GO111MODULE environment variable to 'off' and runs a Go file, checking for a specific error message format in the stderr output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/fileline.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GO111MODULE=off\n\n# look for short, relative file:line in error message\n! go run ../../gopath/x/y/z/err.go\nstderr ^..[\\/]x[\\/]y[\\/]z[\\/]err.go:\n```\n\n----------------------------------------\n\nTITLE: Test File with Vendor Imports\nDESCRIPTION: Defines a test file that imports vendored packages p and p1, and includes a no-op test function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_test_issue11864.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage t\n\nimport _ \"vendor.org/p\"\nimport _ \"vendor.org/p1\"\nimport \"testing\"\n\nfunc TestNop(t *testing.T) {}\n```\n\n----------------------------------------\n\nTITLE: Base Go Module Definition\nDESCRIPTION: Initial go.mod file defining the module and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_tool.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule example.com/foo\ngo 1.24\n```\n\n----------------------------------------\n\nTITLE: Constants Declaration Go\nDESCRIPTION: Defines a list of constants used for syscall operations on FreeBSD systems running on different architectures. These constants are crucial for handling various system call parameters and configurations. Dependencies include FreeBSD-specific system calls, as these constants directly map to kernel-level definitions.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nconst MAP_ALIGNED_SUPER = 16777216\nconst MAP_ALIGNMENT_MASK = -16777216\nconst MAP_ALIGNMENT_SHIFT = 24\nconst MSG_CMSG_CLOEXEC = 262144\nconst NAME_MAX = 255\nconst O_CLOEXEC = 1048576\nconst RTF_GWFLAG_COMPAT = 2147483648\nconst RT_NORTREF = 2\nconst SIGLIBRT = 33\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Workspace\nDESCRIPTION: This snippet defines a go.work file that specifies the Go version and the directories to use in the workspace.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/run_work_versioned.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\n\nuse (\n\t.\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Go Toolchain Module Path\nDESCRIPTION: Specifies the full module path for a test Go toolchain targeting Linux PowerPC 64-bit.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-ppc64.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngolang.org/toolchain@v0.0.1-go1.999testmod.linux-ppc64\n```\n\n----------------------------------------\n\nTITLE: Creating Package B Without Additional Imports in Go Language\nDESCRIPTION: A simple package named 'b' is defined without any imports. It serves as a contrasting package to demonstrate the import cycle in conjunction with package 'a'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_err_cycle.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage b\n```\n\n----------------------------------------\n\nTITLE: Math/bits arithmetic function signatures in Go\nDESCRIPTION: Function signatures for various bitwise arithmetic operations in math/bits package, including Add, Sub, Mul, and Div with different bit widths.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.12.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc Add(uint, uint, uint) (uint, uint)\nfunc Add32(uint32, uint32, uint32) (uint32, uint32)\nfunc Add64(uint64, uint64, uint64) (uint64, uint64)\nfunc Div(uint, uint, uint) (uint, uint)\nfunc Div32(uint32, uint32, uint32) (uint32, uint32)\nfunc Div64(uint64, uint64, uint64) (uint64, uint64)\nfunc Mul(uint, uint) (uint, uint)\nfunc Mul32(uint32, uint32) (uint32, uint32)\nfunc Mul64(uint64, uint64) (uint64, uint64)\nfunc Sub(uint, uint, uint) (uint, uint)\nfunc Sub32(uint32, uint32, uint32) (uint32, uint32)\nfunc Sub64(uint64, uint64, uint64) (uint64, uint64)\n```\n\n----------------------------------------\n\nTITLE: Defining Error Code Constants in Go for Darwin ARM64 CGO\nDESCRIPTION: This snippet defines constants for various error codes used in system calls for the syscall package on Darwin ARM64 with CGO. These constants represent different types of errors that can occur during system operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_143\n\nLANGUAGE: Go\nCODE:\n```\nconst E2BIG = 7\nconst EACCES = 13\nconst EADDRINUSE = 48\nconst EADDRNOTAVAIL = 49\nconst EAFNOSUPPORT = 47\nconst EAGAIN = 35\n```\n\n----------------------------------------\n\nTITLE: Testing Go Package with No Go Files\nDESCRIPTION: This snippet tests the behavior when running Go tests on a package with no Go files. It checks for the correct error message and test execution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_setup_error.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n! go test -o=$devnull . ./t\nstderr '# \\.\\n.*no Go files in '$PWD'$'\nstdout 'FAIL\t. \\[setup failed\\]'\nstdout 'ok  \tm/t'\n```\n\n----------------------------------------\n\nTITLE: Gofmt Command Shell Script Implementation\nDESCRIPTION: Shell script for the 'gofmt' command that outputs a message. This script is placed in the bin directory of the toolchain package but is labeled as unused.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-s390x.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: Terminal I/O Control Constants for darwin-arm64-cgo in Go\nDESCRIPTION: This snippet defines syscall package constants for terminal I/O control operations on darwin-arm64-cgo. The constants include terminal control commands (TIOC*), control character indices (V*), and terminal mode flags used in terminal manipulation functions.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_196\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (darwin-arm64-cgo), const TIOCCDTR ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCCONS = 2147775586\npkg syscall (darwin-arm64-cgo), const TIOCCONS ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCDCDTIMESTAMP = 1074820184\npkg syscall (darwin-arm64-cgo), const TIOCDCDTIMESTAMP ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCDRAIN = 536900702\npkg syscall (darwin-arm64-cgo), const TIOCDRAIN ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCDSIMICROCODE = 536900693\npkg syscall (darwin-arm64-cgo), const TIOCDSIMICROCODE ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCEXCL = 536900621\npkg syscall (darwin-arm64-cgo), const TIOCEXCL ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCEXT = 2147775584\npkg syscall (darwin-arm64-cgo), const TIOCEXT ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCFLUSH = 2147775504\npkg syscall (darwin-arm64-cgo), const TIOCFLUSH ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCGDRAINWAIT = 1074033750\npkg syscall (darwin-arm64-cgo), const TIOCGDRAINWAIT ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCGETA = 1078490131\npkg syscall (darwin-arm64-cgo), const TIOCGETA ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCGETD = 1074033690\npkg syscall (darwin-arm64-cgo), const TIOCGETD ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCGPGRP = 1074033783\npkg syscall (darwin-arm64-cgo), const TIOCGPGRP ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCGWINSZ = 1074295912\npkg syscall (darwin-arm64-cgo), const TIOCGWINSZ ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCIXOFF = 536900736\npkg syscall (darwin-arm64-cgo), const TIOCIXOFF ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCIXON = 536900737\npkg syscall (darwin-arm64-cgo), const TIOCIXON ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCMBIC = 2147775595\npkg syscall (darwin-arm64-cgo), const TIOCMBIC ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCMBIS = 2147775596\npkg syscall (darwin-arm64-cgo), const TIOCMBIS ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCMGDTRWAIT = 1074033754\npkg syscall (darwin-arm64-cgo), const TIOCMGDTRWAIT ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCMGET = 1074033770\npkg syscall (darwin-arm64-cgo), const TIOCMGET ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCMODG = 1074033667\npkg syscall (darwin-arm64-cgo), const TIOCMODG ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCMODS = 2147775492\npkg syscall (darwin-arm64-cgo), const TIOCMODS ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCMSDTRWAIT = 2147775579\npkg syscall (darwin-arm64-cgo), const TIOCMSDTRWAIT ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCMSET = 2147775597\npkg syscall (darwin-arm64-cgo), const TIOCMSET ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCM_CAR = 64\npkg syscall (darwin-arm64-cgo), const TIOCM_CAR ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCM_CD = 64\npkg syscall (darwin-arm64-cgo), const TIOCM_CD ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCM_CTS = 32\npkg syscall (darwin-arm64-cgo), const TIOCM_CTS ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCM_DSR = 256\npkg syscall (darwin-arm64-cgo), const TIOCM_DSR ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCM_DTR = 2\npkg syscall (darwin-arm64-cgo), const TIOCM_DTR ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCM_LE = 1\npkg syscall (darwin-arm64-cgo), const TIOCM_LE ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCM_RI = 128\npkg syscall (darwin-arm64-cgo), const TIOCM_RI ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCM_RNG = 128\npkg syscall (darwin-arm64-cgo), const TIOCM_RNG ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCM_RTS = 4\npkg syscall (darwin-arm64-cgo), const TIOCM_RTS ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCM_SR = 16\npkg syscall (darwin-arm64-cgo), const TIOCM_SR ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCM_ST = 8\npkg syscall (darwin-arm64-cgo), const TIOCM_ST ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCNOTTY = 536900721\npkg syscall (darwin-arm64-cgo), const TIOCNOTTY ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCNXCL = 536900622\npkg syscall (darwin-arm64-cgo), const TIOCNXCL ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCOUTQ = 1074033779\npkg syscall (darwin-arm64-cgo), const TIOCOUTQ ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCPKT = 2147775600\npkg syscall (darwin-arm64-cgo), const TIOCPKT ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCPKT_DATA = 0\npkg syscall (darwin-arm64-cgo), const TIOCPKT_DATA ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCPKT_DOSTOP = 32\npkg syscall (darwin-arm64-cgo), const TIOCPKT_DOSTOP ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCPKT_FLUSHREAD = 1\npkg syscall (darwin-arm64-cgo), const TIOCPKT_FLUSHREAD ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCPKT_FLUSHWRITE = 2\npkg syscall (darwin-arm64-cgo), const TIOCPKT_FLUSHWRITE ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCPKT_IOCTL = 64\npkg syscall (darwin-arm64-cgo), const TIOCPKT_IOCTL ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCPKT_NOSTOP = 16\npkg syscall (darwin-arm64-cgo), const TIOCPKT_NOSTOP ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCPKT_START = 8\npkg syscall (darwin-arm64-cgo), const TIOCPKT_START ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCPKT_STOP = 4\npkg syscall (darwin-arm64-cgo), const TIOCPKT_STOP ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCPTYGNAME = 1082160211\npkg syscall (darwin-arm64-cgo), const TIOCPTYGNAME ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCPTYGRANT = 536900692\npkg syscall (darwin-arm64-cgo), const TIOCPTYGRANT ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCPTYUNLK = 536900690\npkg syscall (darwin-arm64-cgo), const TIOCPTYUNLK ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCREMOTE = 2147775593\npkg syscall (darwin-arm64-cgo), const TIOCREMOTE ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCSBRK = 536900731\npkg syscall (darwin-arm64-cgo), const TIOCSBRK ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCSCONS = 536900707\npkg syscall (darwin-arm64-cgo), const TIOCSCONS ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCSCTTY = 536900705\npkg syscall (darwin-arm64-cgo), const TIOCSCTTY ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCSDRAINWAIT = 2147775575\npkg syscall (darwin-arm64-cgo), const TIOCSDRAINWAIT ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCSDTR = 536900729\npkg syscall (darwin-arm64-cgo), const TIOCSDTR ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCSETA = 2152231956\npkg syscall (darwin-arm64-cgo), const TIOCSETA ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCSETAF = 2152231958\npkg syscall (darwin-arm64-cgo), const TIOCSETAF ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCSETAW = 2152231957\npkg syscall (darwin-arm64-cgo), const TIOCSETAW ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCSETD = 2147775515\npkg syscall (darwin-arm64-cgo), const TIOCSETD ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCSIG = 536900703\npkg syscall (darwin-arm64-cgo), const TIOCSIG ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCSPGRP = 2147775606\npkg syscall (darwin-arm64-cgo), const TIOCSPGRP ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCSTART = 536900718\npkg syscall (darwin-arm64-cgo), const TIOCSTART ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCSTAT = 536900709\npkg syscall (darwin-arm64-cgo), const TIOCSTAT ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCSTI = 2147578994\npkg syscall (darwin-arm64-cgo), const TIOCSTI ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCSTOP = 536900719\npkg syscall (darwin-arm64-cgo), const TIOCSTOP ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCSWINSZ = 2148037735\npkg syscall (darwin-arm64-cgo), const TIOCSWINSZ ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCTIMESTAMP = 1074820185\npkg syscall (darwin-arm64-cgo), const TIOCTIMESTAMP ideal-int\npkg syscall (darwin-arm64-cgo), const TIOCUCNTL = 2147775590\npkg syscall (darwin-arm64-cgo), const TIOCUCNTL ideal-int\npkg syscall (darwin-arm64-cgo), const TOSTOP = 4194304\npkg syscall (darwin-arm64-cgo), const TOSTOP ideal-int\npkg syscall (darwin-arm64-cgo), const VDISCARD = 15\npkg syscall (darwin-arm64-cgo), const VDISCARD ideal-int\npkg syscall (darwin-arm64-cgo), const VDSUSP = 11\npkg syscall (darwin-arm64-cgo), const VDSUSP ideal-int\npkg syscall (darwin-arm64-cgo), const VEOF = 0\npkg syscall (darwin-arm64-cgo), const VEOF ideal-int\npkg syscall (darwin-arm64-cgo), const VEOL = 1\npkg syscall (darwin-arm64-cgo), const VEOL ideal-int\npkg syscall (darwin-arm64-cgo), const VEOL2 = 2\npkg syscall (darwin-arm64-cgo), const VEOL2 ideal-int\npkg syscall (darwin-arm64-cgo), const VERASE = 3\npkg syscall (darwin-arm64-cgo), const VERASE ideal-int\npkg syscall (darwin-arm64-cgo), const VINTR = 8\npkg syscall (darwin-arm64-cgo), const VINTR ideal-int\npkg syscall (darwin-arm64-cgo), const VKILL = 5\npkg syscall (darwin-arm64-cgo), const VKILL ideal-int\npkg syscall (darwin-arm64-cgo), const VLNEXT = 14\npkg syscall (darwin-arm64-cgo), const VLNEXT ideal-int\npkg syscall (darwin-arm64-cgo), const VMIN = 16\npkg syscall (darwin-arm64-cgo), const VMIN ideal-int\npkg syscall (darwin-arm64-cgo), const VQUIT = 9\npkg syscall (darwin-arm64-cgo), const VQUIT ideal-int\npkg syscall (darwin-arm64-cgo), const VREPRINT = 6\npkg syscall (darwin-arm64-cgo), const VREPRINT ideal-int\npkg syscall (darwin-arm64-cgo), const VSTART = 12\npkg syscall (darwin-arm64-cgo), const VSTART ideal-int\npkg syscall (darwin-arm64-cgo), const VSTATUS = 18\npkg syscall (darwin-arm64-cgo), const VSTATUS ideal-int\npkg syscall (darwin-arm64-cgo), const VSTOP = 13\npkg syscall (darwin-arm64-cgo), const VSTOP ideal-int\npkg syscall (darwin-arm64-cgo), const VSUSP = 10\npkg syscall (darwin-arm64-cgo), const VSUSP ideal-int\npkg syscall (darwin-arm64-cgo), const VT0 = 0\npkg syscall (darwin-arm64-cgo), const VT0 ideal-int\npkg syscall (darwin-arm64-cgo), const VT1 = 65536\npkg syscall (darwin-arm64-cgo), const VT1 ideal-int\npkg syscall (darwin-arm64-cgo), const VTDLY = 65536\n```\n\n----------------------------------------\n\nTITLE: BPF Data Structures in syscall Package for NetBSD ARM64\nDESCRIPTION: These structures define the Berkeley Packet Filter (BPF) related data types used for packet capture and network monitoring applications.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_86\n\nLANGUAGE: Go\nCODE:\n```\ntype BpfHdr struct {\n    Tstamp BpfTimeval\n    Caplen uint32\n    Datalen uint32\n    Hdrlen uint16\n    Pad_cgo_0 [6]uint8\n}\n\ntype BpfInsn struct {\n    Code uint16\n    Jt uint8\n    Jf uint8\n    K uint32\n}\n\ntype BpfProgram struct {\n    Len uint32\n    Pad_cgo_0 [4]uint8\n    Insns *BpfInsn\n}\n\ntype BpfStat struct {\n    Recv uint64\n    Drop uint64\n    Capt uint64\n    Padding [13]uint64\n}\n\ntype BpfTimeval struct {\n    Sec int64\n    Usec int64\n}\n\ntype BpfVersion struct {\n    Major uint16\n    Minor uint16\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Go Program for Testing Build Flags\nDESCRIPTION: A minimal Go program that does nothing, used as test input for various build flag configurations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/install_msan_and_race_and_asan_require_cgo.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Module Definition in Go\nDESCRIPTION: This snippet defines a Go module with a specific path and Go version. It's likely a part of a larger application setup. Ensure that the Go toolchain is installed and configured.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rationale_v1.0.0-unprintable.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/retract/rationale\n\ngo 1.14\n```\n\n----------------------------------------\n\nTITLE: Raw Input Text Format\nDESCRIPTION: Shows the original input format with dollar sign delimiters for code blocks\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/code3.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n$\nA tab-indented\n(surrounded by more blank lines)\ncode block and haiku.\n$\n```\n\n----------------------------------------\n\nTITLE: Implementing Gofmt Command in Shell\nDESCRIPTION: A shell command that implements the 'gofmt' tool for testing purposes. This script simply outputs a message and is marked as unused.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.netbsd-amd64.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: Emitting Experimental Batches in Go\nDESCRIPTION: Example of using runtime.unsafeTraceExpWriter to emit experimental batches in Go, ensuring the trace generation cannot advance during writing.\nSOURCE: https://github.com/golang/go/blob/master/src/internal/trace/tracev2/EXPERIMENTS.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc emitExperimentalBatch() {\n    lockTraceBuf()\n    defer unlockTraceBuf()\n\n    w := unsafeTraceExpWriter()\n    w.Write([]byte{1, 2, 3, 4}) // Write experimental data\n    w.Flush()\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go module download for nonexistent commit\nDESCRIPTION: This snippet tests the behavior of 'go mod download' when attempting to download a specific commit that doesn't exist. It verifies the error message for an unknown revision.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_private_vcs.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n! go mod download github.com/golang/term@86186f3aba07ed0212cfb944f3398997d2d07c6b\nstderr '^go: github.com/golang/term@86186f3aba07ed0212cfb944f3398997d2d07c6b: invalid version: unknown revision 86186f3aba07ed0212cfb944f3398997d2d07c6b$'\n! stdout .\n```\n\n----------------------------------------\n\nTITLE: Defining ETHERTYPE Constants for NetBSD ARM64 in Go's syscall Package\nDESCRIPTION: This code snippet defines numerous Ethernet protocol type constants for the NetBSD ARM64 platform in Go's syscall package. These constants are used to identify different protocols encapsulated in Ethernet frames, such as IP (2048), IPv6 (34525), and many vendor-specific protocols.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_123\n\nLANGUAGE: Go\nCODE:\n```\nconst ETHERTYPE_DECAM ideal-int\nconst ETHERTYPE_DECCUST = 24582\nconst ETHERTYPE_DECCUST ideal-int\nconst ETHERTYPE_DECDIAG = 24581\nconst ETHERTYPE_DECDIAG ideal-int\nconst ETHERTYPE_DECDNS = 32828\nconst ETHERTYPE_DECDNS ideal-int\nconst ETHERTYPE_DECDTS = 32830\nconst ETHERTYPE_DECDTS ideal-int\nconst ETHERTYPE_DECEXPER = 24576\nconst ETHERTYPE_DECEXPER ideal-int\nconst ETHERTYPE_DECLAST = 32833\nconst ETHERTYPE_DECLAST ideal-int\nconst ETHERTYPE_DECLTM = 32831\nconst ETHERTYPE_DECLTM ideal-int\nconst ETHERTYPE_DECMUMPS = 24585\nconst ETHERTYPE_DECMUMPS ideal-int\nconst ETHERTYPE_DECNETBIOS = 32832\nconst ETHERTYPE_DECNETBIOS ideal-int\nconst ETHERTYPE_DELTACON = 34526\nconst ETHERTYPE_DELTACON ideal-int\nconst ETHERTYPE_DIDDLE = 17185\nconst ETHERTYPE_DIDDLE ideal-int\nconst ETHERTYPE_DLOG1 = 1632\nconst ETHERTYPE_DLOG1 ideal-int\nconst ETHERTYPE_DLOG2 = 1633\nconst ETHERTYPE_DLOG2 ideal-int\nconst ETHERTYPE_DN = 24579\nconst ETHERTYPE_DN ideal-int\nconst ETHERTYPE_DOGFIGHT = 6537\nconst ETHERTYPE_DOGFIGHT ideal-int\nconst ETHERTYPE_DSMD = 32825\nconst ETHERTYPE_DSMD ideal-int\nconst ETHERTYPE_ECMA = 2051\nconst ETHERTYPE_ECMA ideal-int\nconst ETHERTYPE_ENCRYPT = 32829\nconst ETHERTYPE_ENCRYPT ideal-int\nconst ETHERTYPE_ES = 32861\nconst ETHERTYPE_ES ideal-int\nconst ETHERTYPE_EXCELAN = 32784\nconst ETHERTYPE_EXCELAN ideal-int\nconst ETHERTYPE_EXPERDATA = 32841\nconst ETHERTYPE_EXPERDATA ideal-int\nconst ETHERTYPE_FLIP = 33094\nconst ETHERTYPE_FLIP ideal-int\nconst ETHERTYPE_FLOWCONTROL = 34824\nconst ETHERTYPE_FLOWCONTROL ideal-int\nconst ETHERTYPE_FRARP = 2056\nconst ETHERTYPE_FRARP ideal-int\nconst ETHERTYPE_GENDYN = 32872\nconst ETHERTYPE_GENDYN ideal-int\nconst ETHERTYPE_HAYES = 33072\nconst ETHERTYPE_HAYES ideal-int\nconst ETHERTYPE_HIPPI_FP = 33152\nconst ETHERTYPE_HIPPI_FP ideal-int\nconst ETHERTYPE_HITACHI = 34848\nconst ETHERTYPE_HITACHI ideal-int\nconst ETHERTYPE_HP = 32773\nconst ETHERTYPE_HP ideal-int\nconst ETHERTYPE_IEEEPUP = 2560\nconst ETHERTYPE_IEEEPUPAT = 2561\nconst ETHERTYPE_IEEEPUPAT ideal-int\nconst ETHERTYPE_IEEEPUP ideal-int\nconst ETHERTYPE_IMLBL = 19522\nconst ETHERTYPE_IMLBLDIAG = 16972\nconst ETHERTYPE_IMLBLDIAG ideal-int\nconst ETHERTYPE_IMLBL ideal-int\nconst ETHERTYPE_IP = 2048\nconst ETHERTYPE_IPAS = 34668\nconst ETHERTYPE_IPAS ideal-int\nconst ETHERTYPE_IP ideal-int\nconst ETHERTYPE_IPV6 = 34525\nconst ETHERTYPE_IPV6 ideal-int\nconst ETHERTYPE_IPX = 33079\nconst ETHERTYPE_IPX ideal-int\nconst ETHERTYPE_IPXNEW = 32823\nconst ETHERTYPE_IPXNEW ideal-int\nconst ETHERTYPE_KALPANA = 34178\nconst ETHERTYPE_KALPANA ideal-int\nconst ETHERTYPE_LANBRIDGE = 32824\nconst ETHERTYPE_LANBRIDGE ideal-int\nconst ETHERTYPE_LANPROBE = 34952\nconst ETHERTYPE_LANPROBE ideal-int\nconst ETHERTYPE_LAT = 24580\nconst ETHERTYPE_LAT ideal-int\nconst ETHERTYPE_LBACK = 36864\nconst ETHERTYPE_LBACK ideal-int\nconst ETHER_TYPE_LEN = 2\nconst ETHER_TYPE_LEN ideal-int\nconst ETHERTYPE_LITTLE = 32864\nconst ETHERTYPE_LITTLE ideal-int\nconst ETHERTYPE_LOGICRAFT = 33096\nconst ETHERTYPE_LOGICRAFT ideal-int\nconst ETHERTYPE_LOOPBACK = 36864\nconst ETHERTYPE_LOOPBACK ideal-int\nconst ETHERTYPE_MATRA = 32890\nconst ETHERTYPE_MATRA ideal-int\nconst ETHERTYPE_MAX = 65535\nconst ETHERTYPE_MAX ideal-int\nconst ETHERTYPE_MERIT = 32892\nconst ETHERTYPE_MERIT ideal-int\nconst ETHERTYPE_MICP = 34618\nconst ETHERTYPE_MICP ideal-int\nconst ETHERTYPE_MOPDL = 24577\nconst ETHERTYPE_MOPDL ideal-int\nconst ETHERTYPE_MOPRC = 24578\nconst ETHERTYPE_MOPRC ideal-int\nconst ETHERTYPE_MOTOROLA = 33165\nconst ETHERTYPE_MOTOROLA ideal-int\nconst ETHERTYPE_MPLS = 34887\nconst ETHERTYPE_MPLS ideal-int\nconst ETHERTYPE_MPLS_MCAST = 34888\nconst ETHERTYPE_MPLS_MCAST ideal-int\nconst ETHERTYPE_MUMPS = 33087\nconst ETHERTYPE_MUMPS ideal-int\nconst ETHERTYPE_NBPCC = 15364\nconst ETHERTYPE_NBPCC ideal-int\nconst ETHERTYPE_NBPCLAIM = 15369\nconst ETHERTYPE_NBPCLAIM ideal-int\nconst ETHERTYPE_NBPCLREQ = 15365\nconst ETHERTYPE_NBPCLREQ ideal-int\nconst ETHERTYPE_NBPCLRSP = 15366\nconst ETHERTYPE_NBPCLRSP ideal-int\nconst ETHERTYPE_NBPCREQ = 15362\nconst ETHERTYPE_NBPCREQ ideal-int\nconst ETHERTYPE_NBPCRSP = 15363\nconst ETHERTYPE_NBPCRSP ideal-int\nconst ETHERTYPE_NBPDG = 15367\nconst ETHERTYPE_NBPDGB = 15368\nconst ETHERTYPE_NBPDGB ideal-int\nconst ETHERTYPE_NBPDG ideal-int\nconst ETHERTYPE_NBPDLTE = 15370\nconst ETHERTYPE_NBPDLTE ideal-int\nconst ETHERTYPE_NBPRAR = 15372\nconst ETHERTYPE_NBPRAR ideal-int\nconst ETHERTYPE_NBPRAS = 15371\nconst ETHERTYPE_NBPRAS ideal-int\nconst ETHERTYPE_NBPRST = 15373\nconst ETHERTYPE_NBPRST ideal-int\nconst ETHERTYPE_NBPSCD = 15361\nconst ETHERTYPE_NBPSCD ideal-int\nconst ETHERTYPE_NBPVCD = 15360\nconst ETHERTYPE_NBPVCD ideal-int\nconst ETHERTYPE_NBS = 2050\nconst ETHERTYPE_NBS ideal-int\nconst ETHERTYPE_NCD = 33097\nconst ETHERTYPE_NCD ideal-int\nconst ETHERTYPE_NESTAR = 32774\nconst ETHERTYPE_NESTAR ideal-int\nconst ETHERTYPE_NETBEUI = 33169\nconst ETHERTYPE_NETBEUI ideal-int\nconst ETHERTYPE_NOVELL = 33080\nconst ETHERTYPE_NOVELL ideal-int\nconst ETHERTYPE_NS = 1536\nconst ETHERTYPE_NSAT = 1537\nconst ETHERTYPE_NSAT ideal-int\nconst ETHERTYPE_NSCOMPAT = 2055\nconst ETHERTYPE_NSCOMPAT ideal-int\nconst ETHERTYPE_NS ideal-int\nconst ETHERTYPE_NTRAILER = 16\nconst ETHERTYPE_NTRAILER ideal-int\nconst ETHERTYPE_OS9 = 28679\nconst ETHERTYPE_OS9 ideal-int\nconst ETHERTYPE_OS9NET = 28681\nconst ETHERTYPE_OS9NET ideal-int\nconst ETHERTYPE_PACER = 32966\nconst ETHERTYPE_PACER ideal-int\n```\n\n----------------------------------------\n\nTITLE: Vendored Package with Not Found Import\nDESCRIPTION: A vendored package that imports another package which is not found, testing error handling for missing packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_vendor.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nimport _ \"notfound\"\n```\n\n----------------------------------------\n\nTITLE: Network Interface Socket Control Constants in Go for NetBSD ARM64\nDESCRIPTION: Constants for socket I/O control operations (SIOC*) used for network interface configuration in NetBSD. These constants are used with the ioctl system call to get or set network interface parameters.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_59\n\nLANGUAGE: Go\nCODE:\n```\nconst SIOCGIFMEDIA = 3224398134\nconst SIOCGIFMETRIC = 3230689559\nconst SIOCGIFMTU = 3230689662\nconst SIOCGIFNETMASK = 3230689573\nconst SIOCGIFPDSTADDR = 3230689608\nconst SIOCGIFPSRCADDR = 3230689607\nconst SIOCGLIFADDR = 3239602461\nconst SIOCGLIFPHYADDR = 3239602507\nconst SIOCGLINKSTR = 3223873927\nconst SIOCGLOWAT = 1074033411\nconst SIOCGPGRP = 1074033417\nconst SIOCGVH = 3230689667\nconst SIOCIFCREATE = 2156947834\nconst SIOCIFDESTROY = 2156947833\nconst SIOCIFGCLONERS = 3222301048\nconst SIOCINITIFADDR = 3228592516\nconst SIOCSDRVSPEC = 2150132091\nconst SIOCSETPFSYNC = 2156947959\nconst SIOCSHIWAT = 2147775232\nconst SIOCSIFADDR = 2156947724\nconst SIOCSIFADDRPREF = 2157472031\nconst SIOCSIFBRDADDR = 2156947731\nconst SIOCSIFCAP = 2149607797\nconst SIOCSIFDSTADDR = 2156947726\nconst SIOCSIFFLAGS = 2156947728\nconst SIOCSIFGENERIC = 2156947769\nconst SIOCSIFMEDIA = 3230689589\nconst SIOCSIFMETRIC = 2156947736\nconst SIOCSIFMTU = 2156947839\nconst SIOCSIFNETMASK = 2156947734\nconst SIOCSIFPHYADDR = 2151704902\nconst SIOCSLIFPHYADDR = 2165860682\nconst SIOCSLINKSTR = 2150132104\nconst SIOCSLOWAT = 2147775234\nconst SIOCSPGRP = 2147775240\nconst SIOCSVH = 3230689666\nconst SIOCZIFDATA = 3231213958\n```\n\n----------------------------------------\n\nTITLE: Gofmt Heading Format Output\nDESCRIPTION: The gofmt formatted output showing how heading patterns are processed, with A.b being recognized as a proper heading with # prefix while other patterns remain unchanged.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/head2.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nAlmost a+heading\n\nDon't be a heading\n\n# A.b is a heading\n\nA. b is not a heading\n```\n\n----------------------------------------\n\nTITLE: Testing Zero Exit Status in Go Test\nDESCRIPTION: A Go test that explicitly calls os.Exit(0) which will cause 'go test' to panic since it exits with a zero status code without properly completing test execution.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_exit.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage zero\n\nimport (\n\t\"os\"\n\t\"testing\"\n)\n\nfunc TestExitZero(t *testing.T) {\n\tos.Exit(0)\n}\n```\n\n----------------------------------------\n\nTITLE: Syscall Connection Interface Definition\nDESCRIPTION: Defines the Conn interface with SyscallConn method and RawConn interface with Control, Read, and Write methods for low-level system operations\nSOURCE: https://github.com/golang/go/blob/master/api/go1.9.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype Conn interface {\n    SyscallConn() (RawConn, error)\n}\n\ntype RawConn interface {\n    Control(func(uintptr)) error\n    Read(func(uintptr) bool) error\n    Write(func(uintptr) bool) error\n}\n```\n\n----------------------------------------\n\nTITLE: IO Link Pattern Tests - Markdown Format\nDESCRIPTION: Examples showing [io] links converted to markdown format with href attributes in different text positions.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/doclink4.txt#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[io](/io) at start of comment. [io](/io) at start of line. At end of line: [io](/io) At end of comment: [io](/io)\n```\n\n----------------------------------------\n\nTITLE: Inner Module Configuration\nDESCRIPTION: Go module configuration for the inner package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_issue60313.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/outer/inner\n\ngo 1.21\n```\n\n----------------------------------------\n\nTITLE: ELF Program Type Constants\nDESCRIPTION: Constants defining program segment types (ProgType) in ELF binaries. These include architecture-specific (ARM, MIPS, AARCH64) and GNU-specific program types.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nconst (\n    PT_AARCH64_ARCHEXT ProgType = 1879048192\n    PT_AARCH64_UNWIND ProgType = 1879048193\n    // ... additional PT_ constants\n)\n```\n\n----------------------------------------\n\nTITLE: Package definition with constant for pkg\nDESCRIPTION: Definition of a Go package with a constant Message that indicates its source code is not in the git-README-only repository.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/test2-svn-git.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\npackage pkg\nconst Message = \"code not in git-README-only\"\n```\n\n----------------------------------------\n\nTITLE: Defining Size Constants and TCP Options for OpenBSD in Go\nDESCRIPTION: Size constants for various structures and TCP socket options for OpenBSD. These constants define the memory sizes of system structures and socket option values for TCP configuration.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_41\n\nLANGUAGE: Go\nCODE:\n```\nconst SizeofIfData = 212\nconst SizeofIfMsghdr = 236\nconst SizeofRtMetrics = 56\nconst SizeofRtMsghdr = 96\nconst TCP_NOPUSH = 16\nconst TCP_NOPUSH ideal-int\nconst TIOCGSID = 1074033763\nconst TIOCGSID ideal-int\nconst TIOCGTSTAMP = 1074558043\n```\n\n----------------------------------------\n\nTITLE: Configuring Module 'm' with Dependencies\nDESCRIPTION: This go.mod file for module 'm' specifies its dependencies and includes a replace directive for 'example.com/dep'. However, this replace will be overridden by the one in go.work.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_replace_conflict_override.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/m\n\nrequire example.com/dep v1.0.0\nreplace example.com/dep => ./dep1\n```\n\n----------------------------------------\n\nTITLE: Describing arm64 Stack Frame Layout - Plaintext\nDESCRIPTION: This snippet illustrates the stack frame layout for the arm64 architecture under the Go ABI through an ASCII-art diagram. It specifies the placement of local variables, outgoing arguments, return PC, and the frame pointer, and indicates stack growth. The diagram is relevant to both register-based and stack-based Go calling conventions on arm64, assisting developers in understanding stack pointer manipulation and register saving on function entry and exit.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/compile/abi-internal.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n+------------------------------+\\n| ... locals ...               |\\n| ... outgoing arguments ...   |\\n| return PC                    | \\u2190 RSP points to\\n| frame pointer on entry       |\\n+------------------------------+ \\u2193 lower addresses\n```\n\n----------------------------------------\n\nTITLE: Testing Double Word Boundary Negation in Go Regexps\nDESCRIPTION: Tests patterns with dual \\B assertions to match positions that are not word boundaries on both sides. These tests verify how consecutive non-word boundary assertions behave together.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_7\n\nLANGUAGE: regexp\nCODE:\n```\n\\B(foo|bar|[A-Z])\\B\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:\\B(foo|bar|[A-Z])\\B)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:\\B(foo|bar|[A-Z])\\B)\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:\\B(foo|bar|[A-Z])\\B)$\n```\n\n----------------------------------------\n\nTITLE: Go List with Multi-line Rationale (Block)\nDESCRIPTION: Similar to the previous snippet, but testing 'go list' command.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_rationale.txt#_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ngo list -m -retracted -f '{{.Retracted}}' example.com/retract/rationale\ncmp stdout multiline\n```\n\n----------------------------------------\n\nTITLE: Left Module Definition and Implementation\nDESCRIPTION: Left module files including go.mod and conditional import implementations based on the mirror build tag.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tagged_import_cycle.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/left\n\ngo 1.14\n\nrequire example.com/right v0.1.0\n\nreplace example.com/right v0.1.0 => ../right\n```\n\nLANGUAGE: go\nCODE:\n```\n// +build !mirror\n\npackage left\n\nimport _ \"example.com/right\"\n```\n\nLANGUAGE: go\nCODE:\n```\n// +build mirror\n\npackage left\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Defines a Go module named 'testnorun' with Go 1.16 as minimum version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_no_tests.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule testnorun\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Testing Package Split into Submodule\nDESCRIPTION: Tests package resolution when a package is moved into a submodule in a newer version. Verifies that old version references continue to work and upgrades handle the transition correctly.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_moved.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo mod init example.com/foo\ngo get example.com/split/subpkg@v1.0.0\ngo list -m all\nstdout 'example.com/split v1.0.0'\n\ngo get example.com/split/subpkg@v1.1.0\n\nrm go.mod\ngo mod init example.com/foo\ngo get example.com/split/subpkg\ngo list -m all\nstdout 'example.com/split/subpkg v1.1.0'\n```\n\n----------------------------------------\n\nTITLE: Adding SYS_UTIMENSAT constant to syscall package for FreeBSD ARM with CGO\nDESCRIPTION: Defines the SYS_UTIMENSAT constant as an ideal-int type in the syscall package specifically for FreeBSD on ARM architecture with CGO enabled. This constant represents the system call number for utimensat.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.10.txt#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npkg syscall (freebsd-arm-cgo), const SYS_UTIMENSAT ideal-int\n```\n\n----------------------------------------\n\nTITLE: JSON Test Overlay Configuration\nDESCRIPTION: Defines file replacement mapping for test files using JSON overlay configuration\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_overlay.txt#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"Replace\": {\"foo_test.go\": \"../tmp/bar_test.go\"}}\n```\n\n----------------------------------------\n\nTITLE: Crypto Package Enhancements - Go\nDESCRIPTION: Addition of SHA3 hash constants and new Signer interface with associated methods for cryptographic operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.4.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npkg crypto, const SHA3_224 = 10\npkg crypto, const SHA3_224 Hash\npkg crypto, const SHA3_256 = 11\npkg crypto, const SHA3_256 Hash\npkg crypto, const SHA3_384 = 12\npkg crypto, const SHA3_384 Hash\npkg crypto, const SHA3_512 = 13\npkg crypto, const SHA3_512 Hash\n\npkg crypto, method (Hash) HashFunc() Hash\npkg crypto, type Signer interface { Public, Sign }\npkg crypto, type Signer interface, Public() PublicKey\npkg crypto, type Signer interface, Sign(io.Reader, []uint8, SignerOpts) ([]uint8, error)\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Go Package\nDESCRIPTION: Declares an empty package named 'indirect'. This serves as a placeholder for the module's code implementation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/patch.example.com_indirect_v1.1.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage indirect\n```\n\n----------------------------------------\n\nTITLE: Defining Test Go Source File for 'fmt' Package in GOROOT (Go)\nDESCRIPTION: Defines the content of `$WORK/goroot/src/fmt/fmt.go`. This minimal Go file (`package fmt`) simulates the standard library `fmt` package within the test's GOROOT. It's required for tests involving `go list std` or listing dependencies like `fmt`.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_gofile_in_goroot.txt#2025-04-22_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n-- $WORK/goroot/src/fmt/fmt.go --\n```\n\nLANGUAGE: go\nCODE:\n```\npackage fmt\n```\n\n----------------------------------------\n\nTITLE: Main Go Fuzzing I/O Error Test Implementation\nDESCRIPTION: Go test code that implements fuzzing tests to verify proper handling of I/O errors. It includes helper functions to detect if code is running as a worker and two test cases for errors before and after F.Fuzz is called.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_io_error.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage io_error\n\nimport (\n\t\"flag\"\n\t\"testing\"\n\t\"time\"\n)\n\nfunc isWorker() bool {\n\tf := flag.Lookup(\"test.fuzzworker\")\n\tif f == nil {\n\t\treturn false\n\t}\n\tget, ok := f.Value.(flag.Getter)\n\tif !ok {\n\t\treturn false\n\t}\n\treturn get.Get() == interface{}(true)\n}\n\nfunc FuzzClosePipeBefore(f *testing.F) {\n\tif isWorker() {\n\t\tsendGarbageToCoordinator(f)\n\t\ttime.Sleep(3600 * time.Second) // pause until coordinator terminates the process\n\t}\n\tf.Fuzz(func(*testing.T, []byte) {})\n}\n\nfunc FuzzClosePipeAfter(f *testing.F) {\n\tf.Fuzz(func(t *testing.T, _ []byte) {\n\t\tif isWorker() {\n\t\t\tsendGarbageToCoordinator(t)\n\t\t\ttime.Sleep(3600 * time.Second) // pause until coordinator terminates the process\n\t\t}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Go Test Package `d_test` Importing Package `d`\nDESCRIPTION: This snippet defines a Go test package named `d_test`. It explicitly imports the package `d` (using the blank identifier `_`) to trigger the specific scenario tested by the `go list` command in this test case (issue #25980), where a test package imports the package it is testing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_test_e.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n-- p/d_test.go --\npackage d_test\nimport _ \"d\"\n```\n\n----------------------------------------\n\nTITLE: Deprecated NetBSD Routing Functions\nDESCRIPTION: Set of deprecated routing-related functions for NetBSD systems. These functions handle routing message parsing and routing information base operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_39\n\nLANGUAGE: go\nCODE:\n```\nfunc ParseRoutingMessage\nfunc ParseRoutingSockaddr\nfunc RouteRIB\n```\n\n----------------------------------------\n\nTITLE: Defining Message Handling Constants in Go for NetBSD ARM64\nDESCRIPTION: Socket message flags for send/recv operations. These control how messages are sent and received over sockets, including special handling options.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_42\n\nLANGUAGE: go\nCODE:\n```\nconst MSG_BCAST = 256\nconst MSG_CMSG_CLOEXEC = 2048\nconst MSG_CONTROLMBUF = 33554432\nconst MSG_CTRUNC = 32\nconst MSG_DONTROUTE = 4\nconst MSG_DONTWAIT = 128\nconst MSG_EOR = 8\nconst MSG_IOVUSRSPACE = 67108864\nconst MSG_LENUSRSPACE = 134217728\nconst MSG_MCAST = 512\nconst MSG_NAMEMBUF = 16777216\nconst MSG_NBIO = 4096\nconst MSG_NOSIGNAL = 1024\nconst MSG_OOB = 1\nconst MSG_PEEK = 2\nconst MSG_TRUNC = 16\nconst MSG_USERFLAGS = 16777215\nconst MSG_WAITALL = 64\n```\n\n----------------------------------------\n\nTITLE: Empty Go Module Definition\nDESCRIPTION: A minimal go.mod file that defines a module named 'm' with Go 1.16 as the required version. This file is used as a template in the test script.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_path_dotname.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Defining Terminal I/O Constants in Go for Darwin ARM64 CGO\nDESCRIPTION: This snippet defines constants related to terminal I/O operations for the syscall package on Darwin ARM64 with CGO. These constants are used for configuring terminal settings and behavior.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_139\n\nLANGUAGE: Go\nCODE:\n```\nconst BRKINT = 2\nconst CFLUSH = 15\nconst CLOCAL = 32768\nconst CREAD = 2048\nconst CS5 = 0\nconst CS6 = 256\nconst CS7 = 512\nconst CS8 = 768\nconst CSIZE = 768\nconst CSTART = 17\nconst CSTATUS = 20\nconst CSTOP = 19\nconst CSTOPB = 1024\nconst CSUSP = 26\n```\n\n----------------------------------------\n\nTITLE: Testing Start Anchor with \\B and Dot in Go Regexps\nDESCRIPTION: Tests patterns combining start anchors (^), non-word boundary assertions (\\B), and the dot metacharacter. These tests verify how any character matches with non-word boundary constraints at the start of strings.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_16\n\nLANGUAGE: regexp\nCODE:\n```\n^\\B.$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:^\\B.$)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:^\\B.$)\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:^\\B.$)$\n```\n\n----------------------------------------\n\nTITLE: Shell Script Mock for the Go Command\nDESCRIPTION: A shell script that mocks the behavior of the go command for testing purposes, echoing a test version identifier.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.netbsd-386.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Standard Module Definition\nDESCRIPTION: Standard go.mod file defining the module name.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badsum_v1.0.1.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmodule \"rsc.io/badsum\"\n```\n\n----------------------------------------\n\nTITLE: Linux System Calls and Structures\nDESCRIPTION: Common system call implementations and data structures for Linux across different architectures (386, amd64, arm). Includes file locking and message sending operations.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_17\n\nLANGUAGE: Go\nCODE:\n```\nfunc FcntlFlock(uintptr, int, *Flock_t) error\nfunc SendmsgN(int, []uint8, []uint8, Sockaddr, int) (int, error)\n\ntype Flock_t struct {\n    Type int16\n    Whence int16\n    Start int64\n    Len int64\n    Pid int32\n    Pad_cgo_0 [4]uint8\n    Pad_cgo_1 [4]uint8\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Module Definition\nDESCRIPTION: Contains the go.mod file content that defines the module path for the toolchain package.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.plan9-arm.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Testing Buggy Package in Go\nDESCRIPTION: Contains a test function that always fails, demonstrating a buggy implementation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_quote_v1.5.2.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage buggy\n\nimport \"testing\"\n\nfunc Test(t *testing.T) {\n\tt.Fatal(\"buggy!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Go Test File Setup\nDESCRIPTION: Defines a test file for the package. This file is where test cases for the package functionality would be implemented.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_issue45477.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage pkg_test\n```\n\n----------------------------------------\n\nTITLE: Adding QUICResumeSession and QUICStoreSession Constants in crypto/tls Package\nDESCRIPTION: This snippet adds two new constants of type QUICEventKind to the crypto/tls package: QUICResumeSession and QUICStoreSession.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.23.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nconst QUICResumeSession QUICEventKind = 8\nconst QUICStoreSession QUICEventKind = 9\n```\n\n----------------------------------------\n\nTITLE: Go Package Source File with CGO and Error\nDESCRIPTION: A Go source file that imports the C package and calls an undefined function 'j()', which will cause a compilation error.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cover_error.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\nimport \"C\"\n\nfunc h() {\n\tj()\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition File\nDESCRIPTION: Contains the Go module definition with a module path for a test repository.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/emptytest.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule vcs-test.golang.org/git/emptytest.git\n```\n\n----------------------------------------\n\nTITLE: Markdown Inline Link Format\nDESCRIPTION: Shows the content with inline markdown link syntax\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/linklist4.txt#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nCool things:\n\n  - Foo\n\n  - [Go](https://go.dev/) is great\n\n  - Bar\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository\nDESCRIPTION: Initializes a new Git repository.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/v3pkg.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit init\n```\n\n----------------------------------------\n\nTITLE: Creating v3 Branch with Directory Structure in Git\nDESCRIPTION: Creates a v3 branch from master and adds a nested directory structure with a file, tagging the branch with branch-v3.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/hg/hgrepo1.txt#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nat 2018-04-17T16:16:52-04:00\ngit checkout master\ngit branch v3\ngit checkout v3\nmkdir v3/sub/dir\necho 'v3/sub/dir/file'\ncp stdout v3/sub/dir/file.txt\ngit add v3\ngit commit -a -m 'add v3/sub/dir/file.txt'\ngit tag branch-v3\n```\n\n----------------------------------------\n\nTITLE: Dependency Module v0.1.0\nDESCRIPTION: A Go module file for the first version of the 'deleted' dependency which includes a package that will be removed in a later version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_deleted.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/deleted\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module (Go)\nDESCRIPTION: This Go module file defines the module name as 'mycmd' and specifies the Go version as 1.16.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cache_arch_mode.txt#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nmodule mycmd\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Defining a simple Go package\nDESCRIPTION: This snippet shows a minimal Go package definition in the project structure.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_symlink_issue35941.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage a\n```\n\n----------------------------------------\n\nTITLE: Defining IfMsghdr Struct in Go for Darwin ARM64 CGO\nDESCRIPTION: Defines the IfMsghdr struct used for network interface messages. It includes fields for index, message length, type, and version information.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_199\n\nLANGUAGE: Go\nCODE:\n```\ntype IfMsghdr struct {\n    Index uint16\n    Msglen uint16\n    Pad_cgo_0 [2]uint8\n    Type uint8\n    Version uint8\n}\n```\n\n----------------------------------------\n\nTITLE: Retrying Go Module Download with Fewer Redirects\nDESCRIPTION: Reconfigures the proxy to use 9 redirects instead of 11, then attempts to download the same module version again, expecting success.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_too_many_redirects.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nenv GOPROXY=$GOPROXYBASE/redirect/9\ngo mod download rsc.io/quote@v1.2.0\n```\n\n----------------------------------------\n\nTITLE: Defining Signal Constants in Go Syscall Package for Darwin-arm64-cgo\nDESCRIPTION: Constants representing various signal types available on Darwin systems. These signals are used for process control and notification of exceptional events, such as termination requests or resource limits.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_180\n\nLANGUAGE: Go\nCODE:\n```\nconst SIGBUS = 10\nconst SIGCHLD Signal = 20\nconst SIGCONT Signal = 19\nconst SIGEMT Signal = 7\nconst SIGINFO Signal = 29\nconst SIGIO Signal = 23\nconst SIGIOT Signal = 6\nconst SIGPROF Signal = 27\nconst SIGSTOP Signal = 17\nconst SIGSYS Signal = 12\nconst SIGTSTP Signal = 18\nconst SIGTTIN Signal = 21\nconst SIGTTOU Signal = 22\nconst SIGURG Signal = 16\nconst SIGUSR1 Signal = 30\nconst SIGUSR2 Signal = 31\nconst SIGVTALRM Signal = 26\nconst SIGWINCH Signal = 28\nconst SIGXCPU Signal = 24\nconst SIGXFSZ Signal = 25\n```\n\n----------------------------------------\n\nTITLE: Archive Package Updates (Go)\nDESCRIPTION: Defines new constants and type updates for the archive/tar package including TypeGNUSparse constant and Xattrs field addition to Header struct.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nconst TypeGNUSparse = 83\ntype Header struct {\n    Xattrs map[string]string\n}\n```\n\n----------------------------------------\n\nTITLE: Debug ELF and PE constants in Go\nDESCRIPTION: Constants for RISCV architecture in debug/elf package and ARM NT binary format in debug/pe package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.12.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nconst R_RISCV_32_PCREL = 57\nconst R_RISCV_32_PCREL R_RISCV\nconst IMAGE_FILE_MACHINE_ARMNT = 452\nconst IMAGE_FILE_MACHINE_ARMNT ideal-int\n```\n\n----------------------------------------\n\nTITLE: Deprecations in syscall package for darwin-amd64\nDESCRIPTION: Lists deprecated functions and types in the syscall package for darwin-amd64 architecture.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_30\n\nLANGUAGE: Go\nCODE:\n```\npkg syscall (darwin-amd64), func BpfBuflen //deprecated\npkg syscall (darwin-amd64), func BpfDatalink //deprecated\npkg syscall (darwin-amd64), func BpfHeadercmpl //deprecated\npkg syscall (darwin-amd64), func BpfInterface //deprecated\npkg syscall (darwin-amd64), func BpfJump //deprecated\npkg syscall (darwin-amd64), func BpfStats //deprecated\npkg syscall (darwin-amd64), func BpfStmt //deprecated\npkg syscall (darwin-amd64), func BpfTimeout //deprecated\npkg syscall (darwin-amd64), func CheckBpfVersion //deprecated\npkg syscall (darwin-amd64), func FlushBpf //deprecated\npkg syscall (darwin-amd64), func ParseRoutingMessage //deprecated\npkg syscall (darwin-amd64), func ParseRoutingSockaddr //deprecated\npkg syscall (darwin-amd64), func RouteRIB //deprecated\npkg syscall (darwin-amd64), func SetBpf //deprecated\npkg syscall (darwin-amd64), func SetBpfBuflen //deprecated\npkg syscall (darwin-amd64), func SetBpfDatalink //deprecated\npkg syscall (darwin-amd64), func SetBpfHeadercmpl //deprecated\npkg syscall (darwin-amd64), func SetBpfImmediate //deprecated\npkg syscall (darwin-amd64), func SetBpfInterface //deprecated\npkg syscall (darwin-amd64), func SetBpfPromisc //deprecated\npkg syscall (darwin-amd64), func SetBpfTimeout //deprecated\npkg syscall (darwin-amd64), func StringSlicePtr //deprecated\npkg syscall (darwin-amd64), type InterfaceAddrMessage //deprecated\npkg syscall (darwin-amd64), type InterfaceMessage //deprecated\npkg syscall (darwin-amd64), type InterfaceMulticastAddrMessage //deprecated\npkg syscall (darwin-amd64), type RouteMessage //deprecated\npkg syscall (darwin-amd64), type RoutingMessage //deprecated\n```\n\n----------------------------------------\n\nTITLE: NetBSD Error Constants\nDESCRIPTION: System error codes used by NetBSD for various error conditions including file operations, network operations, and system calls.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_16\n\nLANGUAGE: Go\nCODE:\n```\nconst E2BIG = 7\nconst EACCES = 13\nconst EADDRINUSE = 48\nconst EADDRNOTAVAIL = 49\nconst EAFNOSUPPORT = 47\nconst EAGAIN = 35\n```\n\n----------------------------------------\n\nTITLE: Dependency Module Definition\nDESCRIPTION: Module definition for the external dependency example.net/x.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_lazy_self.txt#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nmodule example.net/x\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: Module Definition in .mod File\nDESCRIPTION: Defines the module name in a .mod file for the Go toolchain.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.netbsd-386.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Fuzz Seed Corpus File (Failing Case)\nDESCRIPTION: A test data file that defines a failing test case for the FuzzFoo function. It contains the string 'fails' which will trigger the error.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_fuzz_run.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ngo test fuzz v1\nstring(\"fails\")\n```\n\n----------------------------------------\n\nTITLE: MyApp Test Implementation\nDESCRIPTION: Test file for myapp package demonstrating vendor package imports with RDS dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/vendor_test_issue14613.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage myapp\nimport (\n   \"mylibtesttest/rds\"\n)\n```\n\n----------------------------------------\n\nTITLE: Deprecations in path/filepath package\nDESCRIPTION: Lists deprecated function in the path/filepath package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_27\n\nLANGUAGE: Go\nCODE:\n```\npkg path/filepath, func HasPrefix //deprecated\n```\n\n----------------------------------------\n\nTITLE: BPF Filter Program Constants in NetBSD ARM64\nDESCRIPTION: Berkeley Packet Filter (BPF) filter program constants used to define BPF instructions and operations. These constants define the BPF virtual machine architecture including opcodes, addressing modes, and operand types for packet filtering.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_11\n\nLANGUAGE: Go\nCODE:\n```\nconst BPF_A = 16\nconst BPF_ABS = 32\nconst BPF_ABS ideal-int\nconst BPF_ADD = 0\nconst BPF_ADD ideal-int\nconst BPF_A ideal-int\nconst BPF_ALIGNMENT32 = 4\nconst BPF_ALIGNMENT32 ideal-int\nconst BPF_ALIGNMENT = 8\nconst BPF_ALIGNMENT ideal-int\nconst BPF_ALU = 4\nconst BPF_ALU ideal-int\nconst BPF_AND = 80\nconst BPF_AND ideal-int\nconst BPF_B = 16\nconst BPF_B ideal-int\nconst BPF_DFLTBUFSIZE = 1048576\nconst BPF_DFLTBUFSIZE ideal-int\nconst BPF_DIV = 48\nconst BPF_DIV ideal-int\nconst BPF_H = 8\nconst BPF_H ideal-int\nconst BPF_IMM = 0\nconst BPF_IMM ideal-int\nconst BPF_IND = 64\nconst BPF_IND ideal-int\nconst BPF_JA = 0\nconst BPF_JA ideal-int\nconst BPF_JEQ = 16\nconst BPF_JEQ ideal-int\nconst BPF_JGE = 48\nconst BPF_JGE ideal-int\nconst BPF_JGT = 32\nconst BPF_JGT ideal-int\nconst BPF_JMP = 5\nconst BPF_JMP ideal-int\nconst BPF_JSET = 64\nconst BPF_JSET ideal-int\nconst BPF_K = 0\nconst BPF_K ideal-int\nconst BPF_LD = 0\nconst BPF_LD ideal-int\nconst BPF_LDX = 1\nconst BPF_LDX ideal-int\nconst BPF_LEN = 128\nconst BPF_LEN ideal-int\nconst BPF_LSH = 96\nconst BPF_LSH ideal-int\nconst BPF_MAJOR_VERSION = 1\nconst BPF_MAJOR_VERSION ideal-int\nconst BPF_MAXBUFSIZE = 16777216\nconst BPF_MAXBUFSIZE ideal-int\nconst BPF_MAXINSNS = 512\nconst BPF_MAXINSNS ideal-int\nconst BPF_MEM = 96\nconst BPF_MEM ideal-int\nconst BPF_MEMWORDS = 16\nconst BPF_MEMWORDS ideal-int\nconst BPF_MINBUFSIZE = 32\nconst BPF_MINBUFSIZE ideal-int\nconst BPF_MINOR_VERSION = 1\nconst BPF_MINOR_VERSION ideal-int\nconst BPF_MISC = 7\nconst BPF_MISC ideal-int\nconst BPF_MSH = 160\nconst BPF_MSH ideal-int\nconst BPF_MUL = 32\nconst BPF_MUL ideal-int\nconst BPF_NEG = 128\nconst BPF_NEG ideal-int\nconst BPF_OR = 64\nconst BPF_OR ideal-int\nconst BPF_RELEASE = 199606\nconst BPF_RELEASE ideal-int\nconst BPF_RET = 6\nconst BPF_RET ideal-int\nconst BPF_RSH = 112\nconst BPF_RSH ideal-int\nconst BPF_ST = 2\nconst BPF_ST ideal-int\nconst BPF_STX = 3\nconst BPF_STX ideal-int\nconst BPF_SUB = 16\nconst BPF_SUB ideal-int\nconst BPF_TAX = 0\nconst BPF_TAX ideal-int\nconst BPF_TXA = 128\nconst BPF_TXA ideal-int\nconst BPF_W = 0\nconst BPF_W ideal-int\nconst BPF_X = 8\nconst BPF_X ideal-int\n```\n\n----------------------------------------\n\nTITLE: Testing Valid +incompatible Pseudo-version for Module Without go.mod in Go\nDESCRIPTION: This snippet tests that a +incompatible pseudo-version is valid for a revision of the module that lacks a go.mod file. It adds a requirement for such a version and verifies it's accepted.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_invalid_version.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ncp go.mod.orig go.mod\ngo mod edit -require github.com/pierrec/lz4@v2.0.4-0.20180826165652-dbe9298ce099+incompatible\ncd outside\ngo list -m github.com/pierrec/lz4\nstdout 'github.com/pierrec/lz4 v2.0.4-0.20180826165652-dbe9298ce099\\+incompatible'\ncd ..\ngo list -m github.com/pierrec/lz4\nstdout 'github.com/pierrec/lz4 v2.0.4-0.20180826165652-dbe9298ce099\\+incompatible'\n```\n\n----------------------------------------\n\nTITLE: Markdown URL Formatting\nDESCRIPTION: Markdown formatted version showing how URLs are converted to proper markdown links while preserving invalid URL patterns as plain text.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/link2.txt#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nThe Go home page is [https://go.dev/](https://go.dev/). It used to be [https://golang.org](https://golang.org). https:// is not a link. Nor is https:// https://☺ is not a link. https://:80 is not a link.\n```\n\n----------------------------------------\n\nTITLE: Platform-specific Line Ending Handling\nDESCRIPTION: Replaces line endings in the SVN log file on Windows and compares the result with expected output.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/hello.txt#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n[GOOS:windows] replace '\\n' '\\r\\n' .svn-log\ncmp stdout .svn-log\n```\n\n----------------------------------------\n\nTITLE: Empty Link in Markdown\nDESCRIPTION: Shows Markdown syntax for an empty link with http:// URL\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/crash1.txt#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[](http://)\n```\n\n----------------------------------------\n\nTITLE: Markdown Formatted Output\nDESCRIPTION: The content formatted as Markdown with escaped numbers and proper list formatting.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list4.txt#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nText.\n\n 1. List\n\n2\\. Not indented, not a list.\n\n 3. Another list.\n```\n\n----------------------------------------\n\nTITLE: Testing Parallel Output Behavior with JSON Mode in Go\nDESCRIPTION: Shell commands that run a parallel Go test with JSON output and verify that each test's output is correctly attributed to the respective subtest in the JSON result.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_chatty_parallel_fail.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n! go test -json -parallel 3 chatty_parallel_test.go -v\nstdout -count=1 '\"Test\":\"TestChattyParallel/sub-0\",\"Output\":\"    chatty_parallel_test.go:38: error from sub-0\\\\n\"'\nstdout -count=1 '\"Test\":\"TestChattyParallel/sub-1\",\"Output\":\"    chatty_parallel_test.go:38: error from sub-1\\\\n\"'\nstdout -count=1 '\"Test\":\"TestChattyParallel/sub-2\",\"Output\":\"    chatty_parallel_test.go:38: error from sub-2\\\\n\"'\n```\n\n----------------------------------------\n\nTITLE: Module Version Information in .info file\nDESCRIPTION: JSON file containing version information for the module, specifying version v0.0.1.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needall_v0.0.1.txt#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.0.1\"}\n```\n\n----------------------------------------\n\nTITLE: Defining SysProcAttr struct for NetBSD ARM64 in syscall package\nDESCRIPTION: Definition of the SysProcAttr struct in the syscall package for NetBSD ARM64 architecture. This struct contains platform-specific process attributes used when creating a new process.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_166\n\nLANGUAGE: go\nCODE:\n```\ntype SysProcAttr struct {\n\tChroot string\n\tCredential *Credential\n\tCtty int\n\tForeground bool\n\tNoctty bool\n\tPgid int\n\tPtrace bool\n\tSetctty bool\n\tSetpgid bool\n\tSetsid bool\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository for Go Module\nDESCRIPTION: Initializes a new Git repository with timestamp, adds go.mod file, makes initial commit, and renames the default branch.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/emptytest.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit init\n\nat 2018-07-03T22:35:49-04:00\ngit add go.mod\ngit commit -m 'initial'\ngit branch -m master\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition with Retracted Dependency\nDESCRIPTION: A go.mod file specifying a module that requires a retracted nested module version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_retract_ambiguous.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/use\n\ngo 1.16\n\nrequire example.com/retract/ambiguous/nested v1.9.0-bad\n```\n\n----------------------------------------\n\nTITLE: RISC-V ELF Constants Addition in debug/elf Package\nDESCRIPTION: Addition of two new constants PT_RISCV_ATTRIBUTES and SHT_RISCV_ATTRIBUTES to support RISC-V specific ELF file parsing capabilities in the debug/elf package.\nSOURCE: https://github.com/golang/go/blob/master/doc/next/6-stdlib/99-minor/debug/elf/72843.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nPT_RISCV_ATTRIBUTES\nSHT_RISCV_ATTRIBUTES\n```\n\n----------------------------------------\n\nTITLE: Including Non-existent C Header\nDESCRIPTION: Attempts to include a non-existent C header file, which is expected to cause a build error.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_cgo_error.txt#2025-04-22_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n#include \"doesnotexist.h\"\n```\n\n----------------------------------------\n\nTITLE: Cross-Platform SVN Checkout Command\nDESCRIPTION: Platform-specific commands for checking out an SVN repository, handling differences in file path formats between Windows and other operating systems.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/test1-svn-git.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n[GOOS:windows] svn checkout file:///$ROOT .\n[!GOOS:windows] svn checkout file://$ROOT .\n```\n\n----------------------------------------\n\nTITLE: FreeBSD ARM Syscall Data Structures\nDESCRIPTION: Type definitions for FreeBSD ARM architecture, including socket address and file stat structures with appropriate padding and type sizing for 32-bit ARM processors.\nSOURCE: https://github.com/golang/go/blob/master/api/except.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype RawSockaddrDatalink struct {\n    Pad_cgo_0 [2]uint8\n    // other fields not shown\n}\n\ntype RawSockaddrUnix struct {\n    Pad_cgo_0 [2]uint8\n    // other fields not shown\n}\n\ntype Stat_t struct {\n    Dev uint32\n    Ino uint32\n    Nlink uint16\n    Rdev uint32\n    Gen uint32\n    Blksize uint32\n    Lspare int32\n    Pad_cgo_0 [4]uint8\n    // other fields not shown\n}\n\ntype Statfs_t struct {\n    Mntfromname [88]int8\n    Mntonname [88]int8\n    // other fields not shown\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Diff Between Old and New Numbered Lists\nDESCRIPTION: This code snippet shows the differences between two numbered lists using the diff format. It demonstrates the removal of 'e' and 'pi' from the old list and the addition of numbers 1, 2, and 3 to the new list.\nSOURCE: https://github.com/golang/go/blob/master/src/internal/diff/testdata/start.txt#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\ndiff old new\n--- old\n+++ new\n@@ -1,5 +1,6 @@\n-e\n-pi\n+1\n+2\n+3\n 4\n 5\n 6\n```\n\n----------------------------------------\n\nTITLE: Empty Go Package Declaration\nDESCRIPTION: Declares an empty Go package named 'empty' with no implementation\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rationale_v1.0.0-multiline1.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage empty\n```\n\n----------------------------------------\n\nTITLE: Testing Go Mod Download Output with Local Module Replacements\nDESCRIPTION: Shell command that runs 'go mod download' with JSON output for all modules and verifies it produces no output when the module is replaced locally.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_download_replace_file.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo mod download -json all\ncmp stdout no-output\n```\n\n----------------------------------------\n\nTITLE: Defining Additional Root Package 'x/otherroot' (Go)\nDESCRIPTION: Defines the package `x/otherroot` within the `x` module. This package serves as an explicit root package alongside `all` in the `go list` commands. It imports `x/otherdep` using a blank identifier.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_notall.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n-- x/otherroot/otherroot.go --\npackage otherroot\n\nimport _ \"x/otherdep\"\n```\n\n----------------------------------------\n\nTITLE: Invalid Version Retraction in v1 Module\nDESCRIPTION: go.mod file showing an invalid retraction where v3 is used in a v1 module\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retract_fix_version.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ngo 1.16\n\nretract v3.0.1\n\nmodule rsc.io/quote\n```\n\n----------------------------------------\n\nTITLE: Routing Table Constants - Darwin ARM64\nDESCRIPTION: Constants for routing table operations and flags in Darwin ARM64 architecture. Includes masks, flags, and route types for network routing configuration.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_92\n\nLANGUAGE: Go\nCODE:\n```\nconst (\n    RTA_GENMASK = 8\n    RTA_IFA = 32\n    RTA_IFP = 16\n    RTA_NETMASK = 4\n    RTF_BLACKHOLE = 4096\n    RTF_BROADCAST = 4194304\n    RTF_CLONING = 256\n    // ... additional routing constants\n)\n```\n\n----------------------------------------\n\nTITLE: Gofmt Formatted Links\nDESCRIPTION: Shows how the documentation links appear after gofmt formatting.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/doclink.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nIn this package, see [Doc] and [Parser.Parse].\nThere is no [Undef] or [Undef.Method].\nSee also the [comment] package,\nespecially [comment.Doc] and [comment.Parser.Parse].\n```\n\n----------------------------------------\n\nTITLE: Cache Directory Validation Program in Go\nDESCRIPTION: Program that scans the Go build cache directory to check for duplicate action entries referencing the same object ID. It reads through cache directory entries with '-a' suffix and verifies that no two action entries point to the same object entry file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_modindex_dupactionid.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"errors\"\n\t\"log\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strings\"\n)\n\nfunc main() {\n\tcachedir := os.Getenv(\"GOCACHE\")\n\tif cachedir == \"\" {\n\t\tlog.Fatal(\"GOCACHE env var is empty; expected it to be set\")\n\t}\n\n\tdirs, err := os.ReadDir(cachedir)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tseen := map[string]string{} // object id -> action id\n\n\tfor _, entry := range dirs {\n\t\tif entry.IsDir() && len(entry.Name()) == 2 {\n\t\t\tprefixdir := filepath.Join(cachedir, entry.Name())\n\t\t\tentries, err := os.ReadDir(prefixdir)\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\n\t\t\tfor _, entry := range entries {\n\t\t\t\tif !strings.HasSuffix(entry.Name(), \"-a\") {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tactionEntryFile := filepath.Join(prefixdir, entry.Name())\n\t\t\t\tobjid, err := objectid(actionEntryFile)\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Fatal(err)\n\t\t\t\t}\n\t\t\t\tif other, ok := seen[objid]; ok {\n\t\t\t\t\tlog.Printf(\"found two action entry files (%s, %s) pointing to the same object id: %s\", other, entry.Name(), objid)\n\t\t\t\t\tos.Exit(1)\n\t\t\t\t}\n\t\t\t\tseen[objid] = entry.Name()\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc objectid(actionEntryFile string) (string, error) {\n\tconst (\n\t\tHashSize  = 32\n\t\thexSize   = HashSize * 2\n\t\tentrySize = 2 + 1 + hexSize + 1 + hexSize + 1 + 20 + 1 + 20 + 1\n\t)\n\n\tentry, err := os.ReadFile(actionEntryFile)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tif len(entry) < entrySize {\n\t\treturn \"\", errors.New(\"entry file incomplete\")\n\t}\n\tif entry[0] != 'v' || entry[1] != '1' || entry[2] != ' ' || entry[3+hexSize] != ' ' || entry[3+hexSize+1+hexSize] != ' ' || entry[3+hexSize+1+hexSize+1+20] != ' ' || entry[entrySize-1] != '\\n' {\n\t\treturn \"\", errors.New(\"invalid header\")\n\t}\n\treturn string(entry[3+hexSize+1 : 3+hexSize+1+hexSize]), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Module Definition in .mod File\nDESCRIPTION: Defines the module name as \"not-rsc.io/quote\", which differs from the import path in the package declaration.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/not-rsc.io_quote_v0.1.0-nomod.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule \"not-rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: Defining Empty Subdirectory Package\nDESCRIPTION: This snippet defines a package named 'emptysubdir' with a comment indicating that it has a subdirectory containing no packages. This package is part of the test setup for the 'go get' command tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_nopkgs.txt#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\n// Package emptysubdir has a subdirectory containing no packages.\npackage emptysubdir\n```\n\n----------------------------------------\n\nTITLE: Go Module Definition\nDESCRIPTION: Module definition file specifying the module name and Go version requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_race_issue26995.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule 26995-TBHelper-line-number\n\ngo 1.21\n```\n\n----------------------------------------\n\nTITLE: Testing \\B with Dot and End Anchors in Go Regexps\nDESCRIPTION: Tests patterns that combine non-word boundary assertions (\\B) with the dot metacharacter and end anchors. These tests check how any character matches with non-word boundary constraints.\nSOURCE: https://github.com/golang/go/blob/master/src/regexp/testdata/re2-search.txt#2025-04-22_snippet_11\n\nLANGUAGE: regexp\nCODE:\n```\n\\B.$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:\\B.$)$\n```\n\nLANGUAGE: regexp\nCODE:\n```\n^(?:\\B.$)\n```\n\nLANGUAGE: regexp\nCODE:\n```\n(?:\\B.$)$\n```\n\n----------------------------------------\n\nTITLE: Raw Input Link Format\nDESCRIPTION: Shows the raw input format for documentation links using square bracket notation.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/doclink.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nIn this package, see [Doc] and [Parser.Parse].\nThere is no [Undef] or [Undef.Method].\nSee also the [comment] package,\nespecially [comment.Doc] and [comment.Parser.Parse].\n```\n\n----------------------------------------\n\nTITLE: Defining file and directory-related structs in Go for Darwin ARM64\nDESCRIPTION: This snippet defines structures related to file and directory operations, including Dirent, Flock_t, and Iovec.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_125\n\nLANGUAGE: Go\nCODE:\n```\ntype Dirent struct {\n    Ino uint64\n    Seekoff uint64\n    Reclen uint16\n    Namlen uint16\n    Type uint8\n    Name [1024]int8\n    Pad_cgo_0 [3]uint8\n}\n\ntype Flock_t struct {\n    Start int64\n    Len int64\n    Pid int32\n    Type int16\n    Whence int16\n}\n\ntype Iovec struct {\n    Base *uint8\n    Len uint64\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SocketControlMessage Struct for Socket Control Messages in Go Syscall Package\nDESCRIPTION: The SocketControlMessage struct represents control messages for socket operations in the syscall package for Darwin ARM64. It contains a header (Cmsghdr) and a data slice that holds the actual message content.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_207\n\nLANGUAGE: Go\nCODE:\n```\ntype SocketControlMessage struct {\n    Header Cmsghdr\n    Data   []uint8\n}\n```\n\n----------------------------------------\n\nTITLE: No Latest Version Module Definition\nDESCRIPTION: Module definition for example.com/nolatest test module used in proxy response testing.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_update_nolatest.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/nolatest\n\ngo 1.17\n```\n\n----------------------------------------\n\nTITLE: Empty Go Package Declaration\nDESCRIPTION: An empty Go file that declares the package name 'newergoversion', establishing the package identity without implementing any functionality.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_newergoversion_v1.0.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage newergoversion\n```\n\n----------------------------------------\n\nTITLE: Module B Configuration\nDESCRIPTION: Go module configuration for module 'b' with dependencies and replacements\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sync.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\n\nmodule example.com/b\n\nrequire (\n\texample.com/p v1.1.0\n\texample.com/q v1.0.0\n)\n\nreplace (\n\texample.com/p => ../p\n\texample.com/q => ../q\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Go <1.23 Vendoring Behavior\nDESCRIPTION: Tests the behavior of Go versions prior to 1.23 when a package is missing from vendor/modules.txt. It should not result in a build error.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_vendor.txt#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncp 122go.mod go.mod\n\ncp incorrect_modules.txt vendor/modules.txt\n\ngo build ./vendor/foo.com/internal/bar/a\n\ncp correct_modules.txt vendor/modules.txt\ngo build ./vendor/foo.com/internal/bar/a\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module for rsc.io/breaker\nDESCRIPTION: This snippet defines the module name for the rsc.io/breaker package. It's typically used in Go's module system to specify package dependencies and versioning.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_breaker_v2.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule rsc.io/breaker\n```\n\n----------------------------------------\n\nTITLE: Defining Memory Synchronization Constants in Go for Darwin ARM64\nDESCRIPTION: This snippet defines constants used for memory synchronization operations on Darwin ARM64. These flags are typically used with functions like msync() to control memory-mapped file synchronization behavior.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_162\n\nLANGUAGE: Go\nCODE:\n```\nconst MS_ASYNC = 1\nconst MS_DEACTIVATE = 8\nconst MS_INVALIDATE = 2\nconst MS_KILLPAGES = 4\nconst MS_SYNC = 16\n```\n\n----------------------------------------\n\nTITLE: Go Workspace Module Error Demonstration\nDESCRIPTION: Demonstrates an error case where the same module is declared in multiple locations within a Go workspace. Shows the command that triggers the error and the conflicting module configurations.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_issue54048.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n! go list -m -json all\nstderr 'go: module example.com/foo appears multiple times in workspace'\n```\n\nLANGUAGE: go\nCODE:\n```\ngo 1.18\n\nuse (\n        ./a\n        ./b\n)\n```\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/foo\n\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Implementing Go Command Shell Script\nDESCRIPTION: A shell script that serves as the 'go' command executable. When executed, it outputs the message 'go1.999testmod here!' to indicate the test toolchain is being used.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-386.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\necho go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Variable Declarations in Go\nDESCRIPTION: Variable declarations with various types including basic types, pointers, and custom types.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/api/testdata/src/pkg/p1/golden.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nvar Byte uint8\nvar ByteConv []uint8\nvar ByteFunc func(uint8) int32\nvar ChecksumError error\nvar SIPtr *SI\nvar StrConv string\nvar V string\nvar VError Error\n```\n\n----------------------------------------\n\nTITLE: Go Package with Private Dependencies\nDESCRIPTION: A Go package that imports two private repositories that require authentication. Used to test whether credentials are properly read from .netrc files.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/netrc_issue66832.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage useprivate\n\nimport (\n\t_ \"vcs-test.golang.org/auth/or401\"\n\t_ \"vcs-test.golang.org/auth/or404\"\n)\n```\n\n----------------------------------------\n\nTITLE: Database SQL Stats Structure\nDESCRIPTION: Definition of the DBStats struct in database/sql package for tracking database connection statistics.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.5.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype DBStats struct {\n    OpenConnections int\n}\n```\n\n----------------------------------------\n\nTITLE: NetBSD ARM64 File Descriptor Set Structure Definition in Go\nDESCRIPTION: Defines the FdSet structure used for select() operations to monitor multiple file descriptors. Contains a bitmap for tracking file descriptors.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_90\n\nLANGUAGE: go\nCODE:\n```\ntype FdSet struct {\n\tBits [8]uint32\n}\n```\n\n----------------------------------------\n\nTITLE: Creating v2 Branch with Tags in Git\nDESCRIPTION: Creates a v2 branch, adds a file, and creates multiple tags (v2.3, v2.0.1) on the branch. Also creates a v2.3.4 branch with an associated tag.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/hg/hgrepo1.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nat 2018-04-17T15:45:48-04:00\ngit branch v2\ngit checkout v2\necho 'v2'\ncp stdout v2\ngit add v2\ngit commit -a -m 'v2'\ngit tag v2.3\ngit tag v2.0.1\ngit branch v2.3.4\ngit tag branch-v2.3.4\n```\n\n----------------------------------------\n\nTITLE: Network Interface Type Constants in Go for NetBSD ARM64\nDESCRIPTION: Constants defining network interface types for NetBSD on ARM64. These include various network technology types like X.25 and Ethernet interfaces.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_130\n\nLANGUAGE: Go\nCODE:\n```\nconst IFT_X25HUNTGROUP = 122\nconst IFT_X25 ideal-int\nconst IFT_X25MLP = 121\nconst IFT_X25PLE = 40\nconst IFT_XETHER = 26\n```\n\n----------------------------------------\n\nTITLE: Memory Control Constants for OpenBSD in Go\nDESCRIPTION: Defines memory control constants for mlockall() and msync() system calls on OpenBSD. These constants control memory locking and synchronization behavior.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_54\n\nLANGUAGE: Go\nCODE:\n```\nconst MCL_CURRENT = 1       // Lock current mappings\nconst MCL_FUTURE = 2        // Lock future mappings\n\nconst MS_ASYNC = 1          // Return immediately\nconst MS_SYNC = 2           // Wait for completion\nconst MS_INVALIDATE = 4     // Invalidate mappings\n```\n\n----------------------------------------\n\nTITLE: Running Local Go Website Server\nDESCRIPTION: Command to run a local instance of the Go website server for previewing release notes content.\nSOURCE: https://github.com/golang/go/blob/master/doc/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo run golang.org/x/website/cmd/golangorg@latest -goroot=..\n```\n\n----------------------------------------\n\nTITLE: Defining Main Package Importing 'c' (Go)\nDESCRIPTION: This is the main executable package for the test program. It imports package `c` and calls its function `Fn`, which in turn calls functions from package `a` and its own Cgo code. Running this program tests the end-to-end linking of all Go and C components.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_undef.txt#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n-- main.go --\npackage main\n\nimport \"m/c\"\n\nfunc main() {\n\tprintln(c.Fn(0))\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Go Package Dependencies with runtime/cgo\nDESCRIPTION: Tests the dependency resolution and import mapping of runtime/cgo in test variants. Verifies that explicitly and implicitly imported packages are properly handled when using the test variant of runtime.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_cgo_compiled_importmap.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo list -deps -test -compiled -f '{{if eq .ImportPath \"net [runtime.test]\"}}{{printf \"%q\" .Imports}}{{end}}' runtime\n```\n\n----------------------------------------\n\nTITLE: Terminal Control Constants in Go Syscall Package for darwin-arm64\nDESCRIPTION: Constants used for terminal control in the syscall package for darwin-arm64. These flags control input processing behavior like ignoring break conditions, carriage returns, and parity errors.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_66\n\nLANGUAGE: Go\nCODE:\n```\nconst IGNBRK = 1\nconst IGNBRK ideal-int\nconst IGNCR = 128\nconst IGNCR ideal-int\nconst IGNPAR = 4\nconst IGNPAR ideal-int\nconst IMAXBEL = 8192\nconst IMAXBEL ideal-int\nconst INLCR = 64\nconst INLCR ideal-int\nconst INPCK = 16\nconst INPCK ideal-int\n```\n\n----------------------------------------\n\nTITLE: NetBSD ARM64 System Call Function Definitions\nDESCRIPTION: Collection of core system call functions for file operations, process management, and network operations on NetBSD ARM64 platform. These functions provide low-level access to operating system services.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_161\n\nLANGUAGE: Go\nCODE:\n```\nfunc Listen(int, int) error\nfunc Lstat(string, *Stat_t) error\nfunc Open(string, int, uint32) (int, error)\nfunc Read(int, []uint8) (int, error)\nfunc Write(int, []uint8) (int, error)\nfunc Close(int) error\n```\n\n----------------------------------------\n\nTITLE: Package Q Definition (m2/q/q.go)\nDESCRIPTION: Empty package definition for the q package in m2 module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sum_issue56222.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage q\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module in .mod File\nDESCRIPTION: Module declaration in the .mod file identifying the module path as 'rsc.io/badfile3'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_badfile3_v1.0.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmodule rsc.io/badfile3\n```\n\n----------------------------------------\n\nTITLE: Sample Go Package Importing Quote Module\nDESCRIPTION: A simple Go package that imports rsc.io/quote, used for testing direct dependencies in the module system.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_retention.txt#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\npackage x\nimport _ \"rsc.io/quote\"\n```\n\n----------------------------------------\n\nTITLE: Testing Package Extensions for Test Names and Coverage\nDESCRIPTION: Functions and methods for the testing package that provide test naming, coverage mode reporting, and main test initialization. Enhances the testing framework with additional capabilities.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.8.txt#2025-04-22_snippet_18\n\nLANGUAGE: go\nCODE:\n```\n// testing functions and methods\nfunc CoverMode() string\nfunc MainStart(testDeps, []InternalTest, []InternalBenchmark, []InternalExample) *M\nfunc (*B) Name() string\nfunc (*T) Name() string\n\ntype TB interface {\n    Name() string\n}\n```\n\n----------------------------------------\n\nTITLE: Go Module A Definition\nDESCRIPTION: Module definition for example.com/a\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_overlay.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/a\n```\n\n----------------------------------------\n\nTITLE: Defining Network Interface Type Constants in Go for NetBSD ARM64\nDESCRIPTION: This snippet defines constants for various network interface types (IFT_*) used in the syscall package for NetBSD ARM64 with CGO. These constants represent different types of network interfaces and their corresponding numeric values.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_28\n\nLANGUAGE: Go\nCODE:\n```\nconst IFT_SONETPATH = 50\nconst IFT_SONETPATH ideal-int\nconst IFT_SONETVT = 51\nconst IFT_SONETVT ideal-int\nconst IFT_SRP = 151\nconst IFT_SRP ideal-int\n// ... more IFT_* constants\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module for Retraction Example\nDESCRIPTION: This snippet defines a Go module named 'example.com/retract/rationale' using Go version 1.14.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_rationale_v1.0.0-empty.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nmodule example.com/retract/rationale\n\ngo 1.14\n```\n\n----------------------------------------\n\nTITLE: Testing Go Build with Inaccessible Fossil Repository\nDESCRIPTION: Checks the behavior when a Fossil repository exists but can't be accessed. It should produce an error hinting about using -buildvcs=false.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_buildvcs_fossil.txt#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncd ..\nmv fslckout $fslckout\nenv PATH=$WORK${/}fakebin${:}$oldpath\nchmod 0755 $WORK/fakebin/fossil\n! exec fossil help\ncd a\n! go install\nstderr '^error obtaining VCS status: exit status 1\\n\\tUse -buildvcs=false to disable VCS stamping.$'\nrm $GOBIN/a$GOEXE\ncd ..\nenv PATH=$oldpath\nrm $fslckout\n```\n\n----------------------------------------\n\nTITLE: Raw Input Format with Reference Links\nDESCRIPTION: Shows the original input format with markdown reference-style links defined at the bottom. Includes a duplicate link definition that should be ignored.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/link5.txt#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nSee the [Go home page] and the [pkg\nsite].\n\n[Go home page]: https://go.dev/\n[pkg site]: https://pkg.go.dev\n[Go home page]: https://duplicate.ignored\n\nThey're really great!\n```\n\n----------------------------------------\n\nTITLE: Testing Localized 'Glass' Function in Go\nDESCRIPTION: This snippet contains test cases for the 'Glass' function, checking if it returns the correct localized 'I can eat glass' phrase based on the provided language preferences.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_sampler_v1.3.0.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nvar glassTests = []struct {\n\tprefs []language.Tag\n\ttext  string\n}{\n\t{\n\t\t[]language.Tag{language.Make(\"en-US\"), language.Make(\"fr\")},\n\t\t\"I can eat glass and it doesn't hurt me.\",\n\t},\n\t{\n\t\t[]language.Tag{language.Make(\"fr\"), language.Make(\"en-US\")},\n\t\t\"Je peux manger du verre, ça ne me fait pas mal.\",\n\t},\n}\n\nfunc TestGlass(t *testing.T) {\n\tfor _, tt := range glassTests {\n\t\ttext := Glass(tt.prefs...)\n\t\tif text != tt.text {\n\t\t\tt.Errorf(\"Glass(%v) = %q, want %q\", tt.prefs, text, tt.text)\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Ethernet Type Constants for NetBSD ARM64 CGO in Go\nDESCRIPTION: This snippet defines a series of constants representing various Ethernet types used in network protocols. Each constant is defined with its corresponding numerical value and an 'ideal-int' type specification.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_21\n\nLANGUAGE: Go\nCODE:\n```\nconst ETHERTYPE_CRONUS ideal-int\nconst ETHERTYPE_CRONUSVLN = 32771\nconst ETHERTYPE_CRONUSVLN ideal-int\nconst ETHERTYPE_DCA = 4660\nconst ETHERTYPE_DCA ideal-int\n// ... (additional constants)\nconst ETHERTYPE_NBS = 2050\nconst ETHERTYPE_NBS ideal-int\nconst ETHERTYPE_NCD = 33097\n```\n\n----------------------------------------\n\nTITLE: Gofmt Command Shell Script\nDESCRIPTION: Shell script for a placeholder 'gofmt' command that outputs a message indicating it's unused.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-arm.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: Expected vendor/modules.txt Content\nDESCRIPTION: The expected content of the vendor/modules.txt file after running 'go mod vendor', which should include metadata about all replacement directives regardless of whether they're used.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_vendor_unused.txt#2025-04-22_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\n# example.com/a v0.1.0 => ./a\n## explicit\nexample.com/a\n# example.com/d v0.2.0 => ./d2\nexample.com/d\n# example.com/b v0.1.0 => ./b1\n# example.com/b v0.2.0-unused => ./b2\n# example.com/c => ./c\n# example.com/d v0.1.0 => ./d1\n# example.com/e => example.com/e v0.1.0-unused\n```\n\n----------------------------------------\n\nTITLE: Gofmt Formatted Hello World\nDESCRIPTION: Hello world message formatted according to Go formatting standards.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/para.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nHello, world.\nThis is a paragraph.\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Go Module Tests\nDESCRIPTION: Sets up environment variables for Go module proxy and checksum database testing. Includes settings for GO111MODULE, GOSUMDB, GOPROXY, and related variables.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_sumdb_cache.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\nenv sumdb=$GOSUMDB\nenv proxy=$GOPROXY\nenv GOPROXY GONOPROXY GOSUMDB GONOSUMDB\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Import Path for missingrepo-git Repository in HTML\nDESCRIPTION: HTML snippet with go-import metadata tag that maps the import path vcs-test.golang.org/go/missingrepo/missingrepo-git to a Git repository at vcs-test.golang.org/git/missingrepo.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/missingrepo.txt#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<meta name=\"go-import\" content=\"vcs-test.golang.org/go/missingrepo/missingrepo-git git https://vcs-test.golang.org/git/missingrepo\">\n```\n\n----------------------------------------\n\nTITLE: JSON Version Information for Go Toolchain\nDESCRIPTION: JSON file containing version information for the toolchain, specifying version 'v0.0.1-go1.999testmod.linux-arm'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.linux-arm.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v0.0.1-go1.999testmod.linux-arm\"}\n```\n\n----------------------------------------\n\nTITLE: Empty Package Declaration in dir1.go\nDESCRIPTION: A minimal Go file that only declares its package name without any implementation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/build_vendor.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage dir1\n```\n\n----------------------------------------\n\nTITLE: Testing Directory Symlink Handling in Go Modules\nDESCRIPTION: A test script that sets GO111MODULE=on, creates a symlink from dir.go to a directory, and verifies that 'go list' correctly ignores the symlink while including actual Go source files.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_symlink_dotgo.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv GO111MODULE=on\n[!symlink] skip\n\nsymlink dir.go -> dir\n\n# Issue #39841: symlinks to directories should be ignored, not treated as source files.\ngo list -f '{{range .GoFiles}}{{.}}{{\"\\n\"}}{{end}}' .\nstdout 'p\\.go$'\n! stdout 'dir\\.go$'\n```\n\n----------------------------------------\n\nTITLE: Storing Version Information in JSON Format\nDESCRIPTION: A JSON file containing version metadata for the module, specifically indicating an unused version 'v1.0.0-unused'. This information is likely used for module retraction mechanisms.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_retract_v1.0.0-unused.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"Version\":\"v1.0.0-unused\"}\n```\n\n----------------------------------------\n\nTITLE: Deprecated Generic String Conversion Functions\nDESCRIPTION: Platform-independent deprecated string conversion functions for handling byte pointer and slice conversions.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_47\n\nLANGUAGE: go\nCODE:\n```\nfunc StringBytePtr() {} //deprecated\nfunc StringByteSlice() {} //deprecated\n```\n\n----------------------------------------\n\nTITLE: Minimal Main Package Implementation\nDESCRIPTION: Basic Go main package containing an empty main function.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_empty_panic_GOPATH.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Crypto X509 SystemRootsError Method\nDESCRIPTION: Implementation of error unwrapping for SystemRootsError type in the crypto/x509 package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (SystemRootsError) Unwrap() error\n```\n\n----------------------------------------\n\nTITLE: Defining System Call Constants for NetBSD ARM64\nDESCRIPTION: Defines system call number constants for NetBSD ARM64 with CGO support. These constants represent the system call numbers used when making direct system calls through functions like syscall.Syscall().\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_64\n\nLANGUAGE: Go\nCODE:\n```\nconst SYS_ACCEPT = 30\nconst SYS_ACCESS = 33\nconst SYS_ACCT = 51\nconst SYS_ADJTIME = 421\nconst SYS_BIND = 104\nconst SYS_BREAK = 17\nconst SYS_CHDIR = 12\nconst SYS_CHFLAGS = 34\nconst SYS_CHMOD = 15\nconst SYS_CHOWN = 16\nconst SYS_CHROOT = 61\nconst SYS_CLOCK_GETRES = 429\nconst SYS_CLOCK_GETTIME = 427\nconst SYS_CLOCK_SETTIME = 428\nconst SYS___CLONE = 287\nconst SYS_CLOSE = 6\nconst SYS_CONNECT = 98\nconst SYS_DUP2 = 90\nconst SYS_DUP3 = 454\nconst SYS_DUP = 41\nconst SYS_EXECVE = 59\nconst SYS_EXIT = 1\nconst SYS_EXTATTRCTL = 360\nconst SYS_EXTATTR_DELETE_FD = 366\nconst SYS_EXTATTR_DELETE_FILE = 363\nconst SYS_EXTATTR_DELETE_LINK = 369\nconst SYS_EXTATTR_GET_FD = 365\nconst SYS_EXTATTR_GET_FILE = 362\nconst SYS_EXTATTR_GET_LINK = 368\nconst SYS_EXTATTR_LIST_FD = 370\nconst SYS_EXTATTR_LIST_FILE = 371\nconst SYS_EXTATTR_LIST_LINK = 372\nconst SYS_EXTATTR_SET_FD = 364\nconst SYS_EXTATTR_SET_FILE = 361\nconst SYS_EXTATTR_SET_LINK = 367\nconst SYS_FACCESSAT = 462\nconst SYS_FCHDIR = 13\nconst SYS_FCHFLAGS = 35\nconst SYS_FCHMOD = 124\nconst SYS_FCHMODAT = 463\nconst SYS_FCHOWN = 123\nconst SYS_FCHOWNAT = 464\nconst SYS_FCHROOT = 297\nconst SYS_FCNTL = 92\nconst SYS_FDATASYNC = 241\nconst SYS_FEXECVE = 465\nconst SYS_FGETXATTR = 380\nconst SYS_FHSTAT = 451\nconst SYS_FKTRACE = 288\nconst SYS_FLISTXATTR = 383\nconst SYS_FLOCK = 131\nconst SYS_FORK = 2\nconst SYS_FPATHCONF = 192\nconst SYS_FREMOVEXATTR = 386\nconst SYS_FSETXATTR = 377\nconst SYS_FSTAT = 440\nconst SYS_FSTATAT = 466\nconst SYS_FSTATVFS1 = 358\nconst SYS_FSYNC = 95\nconst SYS_FSYNC_RANGE = 354\nconst SYS_FTRUNCATE = 201\nconst SYS_FUTIMENS = 472\n```\n\n----------------------------------------\n\nTITLE: Defining token, io, and log package elements in Go\nDESCRIPTION: Declarations for File.LineStart method in go/token, StringWriter interface in io, and Logger.Writer method in log.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.12.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmethod (*File) LineStart(int) Pos\ntype StringWriter interface { WriteString }\ntype StringWriter interface, WriteString(string) (int, error)\nmethod (*Logger) Writer() io.Writer\n```\n\n----------------------------------------\n\nTITLE: Defining Clone Flags in Go for NetBSD\nDESCRIPTION: These constants define flags used in clone system calls on NetBSD. They control various aspects of process creation and resource sharing.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.3.txt#2025-04-22_snippet_20\n\nLANGUAGE: Go\nCODE:\n```\nconst CLONE_VM = 256\nconst CLONE_FS = 512\nconst CLONE_FILES = 1024\nconst CLONE_SIGHAND = 2048\nconst CLONE_PID = 4096\nconst CLONE_PTRACE = 8192\nconst CLONE_VFORK = 16384\n```\n\n----------------------------------------\n\nTITLE: Importing 'all' Meta-Package in Go\nDESCRIPTION: This Go file attempts to import the 'all' meta-package, which is not allowed and should result in an error.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_import_meta.txt#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\npackage importall\n\nimport _ \"all\"\n```\n\n----------------------------------------\n\nTITLE: IO Link Pattern Tests - Input Format\nDESCRIPTION: Examples showing different positions of [io] links in text - at start of comment, start of line, and end of line/comment positions.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/doclink4.txt#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[io] at start of comment.\n[io] at start of line.\nAt end of line: [io]\nAt end of comment: [io]\n```\n\n----------------------------------------\n\nTITLE: Executing Go Test Script for Issue #10500\nDESCRIPTION: A shell script that installs custom utilities, checks the mtime of cgo before and after running 'go test -race -i', and compares the timestamps.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_race_install_cgo.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv GOBIN=$WORK/bin\ngo install m/mtime m/sametime\n\ngo tool -n cgo\ncp stdout cgopath.txt\nexec $GOBIN/mtime cgopath.txt # get the mtime of the file whose name is in cgopath.txt\ncp stdout cgotime_before.txt\n\n # For this test, we don't actually care whether 'go test -race -i' succeeds.\n # It may fail if GOROOT is read-only (perhaps it was installed as root).\n # We only care that it does not overwrite cmd/cgo regardless.\n? go test -race -i runtime/race\n\nexec $GOBIN/mtime cgopath.txt # get the mtime of the file whose name is in cgopath.txt\ncp stdout cgotime_after.txt\nexec $GOBIN/sametime cgotime_before.txt cgotime_after.txt\n```\n\n----------------------------------------\n\nTITLE: NetBSD ARM64 File Permission Constants\nDESCRIPTION: File permission and mode constants for read, write, and execute permissions across user, group and others\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_147\n\nLANGUAGE: Go\nCODE:\n```\nconst S_IREAD = 256\nconst S_IRGRP = 32\nconst S_IROTH = 4\nconst S_IRWXG = 56\nconst S_IRWXO = 7\nconst S_IRWXU = 448\nconst S_ISTXT = 512\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module for Syntax Error Test\nDESCRIPTION: This snippet defines a Go module named 'syntaxerror' with Go version 1.16. It's used in the syntax error testing scenario.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_syntax_error_says_fail.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nmodule syntaxerror\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Non-Main Package CGO Usage Sample Program in Go\nDESCRIPTION: A sample program showing CGO usage in a non-main Go package, defining C code similar to other samples. Used to test external linking when CGO is applied within non-main packages.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_suspect_flag_force_external.txt#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\n/*\nint meaningOfLife() { return 42; }\n*/\nimport \"C\"\n\nfunc PrintIt() {\n     println(C.meaningOfLife())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Go Module\nDESCRIPTION: This snippet defines a simple `go.mod` file for a Go module named `m`. This is used as a basic module declaration for testing purposes. It provides the module name to be used in other parts of the project.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/version_cshared.txt#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule m\n```\n\n----------------------------------------\n\nTITLE: Package A Main Function\nDESCRIPTION: Minimal main package implementation in directory 'a'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_cmd_v1.9.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Importing Go Package Dependency\nDESCRIPTION: The Go package 'a' imports a dependency without directly using it, highlighting indirect dependency management. The underscore before the import path ensures the package is imported solely for its side effects.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_badchain_a_v1.1.0.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage a\n\nimport _ \"example.com/badchain/b\"\n\n```\n\n----------------------------------------\n\nTITLE: Mock Gofmt Binary Script for Testing\nDESCRIPTION: Shell script that mimics the gofmt binary, marked as unused in the test setup.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.openbsd-amd64.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\necho i am unused\n```\n\n----------------------------------------\n\nTITLE: Plain Text Output Format\nDESCRIPTION: Shows the content with links resolved to plain text\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/linklist4.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nCool things:\n\n  - Foo\n\n  - Go is great\n\n  - Bar\n\n[Go]: https://go.dev/\n```\n\n----------------------------------------\n\nTITLE: Specifying Go Toolchain Version for Linux AMD64\nDESCRIPTION: Declares the specific version of the Go toolchain to be used, targeting Go 1.18.5 for Linux AMD64 systems.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.18.5.linux-amd64.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngolang.org/toolchain v0.0.1-go1.18.5.linux-amd64\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Environment and Go Module Caches - Shell\nDESCRIPTION: This snippet prepares two working directories and sets Go-specific environment variables to configure module location and caching behavior. It disables checksum validation for the specified test domain and directs Go's module proxy and cache locations appropriately. No external dependencies are required beyond the shell and Go toolchain. This setup establishes controlled isolation for the subsequent tests.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_list_issue61423.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir $WORK/mod1\nmkdir $WORK/mod2\nenv GONOSUMDB=vcs-test.golang.org\n\nenv GOPROXY=direct\nenv GOMODCACHE=$WORK/mod1\n\n```\n\n----------------------------------------\n\nTITLE: Identifying GOROOT-Vendored Packages as Standard with Go List in Shell (GOPATH Mode)\nDESCRIPTION: Uses `go list` with a format string (`-f '{{if .Standard}}{{.ImportPath}}{{end}}'`) to explicitly list only packages marked as standard within the `std` (standard library) and `cmd` (commands) sets. It confirms via `stdout` checks that specific packages vendored within the GOROOT structure (e.g., `golang.org/x/net/http2/hpack`, `cmd/vendor/golang.org/x/arch/x86/x86asm`) are correctly identified as standard when operating in GOPATH mode (`GO111MODULE=off`).\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_std.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# In GOPATH mode, packages vendored into GOROOT should be reported as standard.\ngo list -f '{{if .Standard}}{{.ImportPath}}{{end}}' std cmd\nstdout golang.org/x/net/http2/hpack\nstdout cmd/vendor/golang\\.org/x/arch/x86/x86asm\n```\n\n----------------------------------------\n\nTITLE: Vendor Package Definition\nDESCRIPTION: Definition of vendored package 'd' in the vendor directory structure\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_importmap.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage d\n```\n\n----------------------------------------\n\nTITLE: Module B Main Program\nDESCRIPTION: Identical implementation to Module A, demonstrating parallel usage of the same dependency\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_sum_mismatch.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"rsc.io/quote\"\n)\n\nfunc main() {\n\tfmt.Println(quote.Hello())\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecations in regexp package\nDESCRIPTION: Lists deprecated method in the regexp package.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.16.txt#2025-04-22_snippet_28\n\nLANGUAGE: Go\nCODE:\n```\npkg regexp, method (*Regexp) Copy //deprecated\n```\n\n----------------------------------------\n\nTITLE: Plain Text Heading Format\nDESCRIPTION: Shows a basic heading in plain text format\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/head3.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# Heading\n```\n\n----------------------------------------\n\nTITLE: Testing Go Formatter Behavior with Missing Embedded File\nDESCRIPTION: This shell script tests the behavior of 'go fmt' and 'go build' when dealing with a Go file that references a non-existent embedded file. It demonstrates that 'go fmt' ignores the missing file, while 'go build' reports an error.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/embed_fmt.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# go fmt ignores file not found\ngo fmt xnofmt.go\ncmp xnofmt.go xfmt.ref\n! go build xnofmt.go\nstderr 'xnofmt.go:5:12: pattern missing.txt: no matching files found'\n```\n\n----------------------------------------\n\nTITLE: Adding Commits to v2.3.4 Branch in Mercurial\nDESCRIPTION: Adds a dummy commit to the v2.3.4 branch in Mercurial with specific author and date information.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/hg/hgrepo1.txt#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nhg update v2.3.4\nhg branch v2.3.4\nunquote ''\ncp stdout dummy\nhg add dummy\nhg commit --user 'Russ Cox <rsc@golang.org>' --date '2018-06-27T12:16:10-04:00' -m 'dummy'\n```\n\n----------------------------------------\n\nTITLE: Merging Branches and Showing References\nDESCRIPTION: Merges branch 'b' into master and displays all tags and branch references.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/tagtests.txt#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout master\ngit merge b -m 'merge'\n\ngit show-ref --tags --heads\ncmp stdout .git-refs\n```\n\n----------------------------------------\n\nTITLE: Plain Text Output\nDESCRIPTION: Text output with standardized formatting and spacing.\nSOURCE: https://github.com/golang/go/blob/master/src/go/doc/comment/testdata/list4.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nText.\n 1. List\n\n2. Not indented, not a list.\n 3. Another list.\n```\n\n----------------------------------------\n\nTITLE: Short Deprecated Module Definition\nDESCRIPTION: Defines a 'short' Go module with a short single-line deprecation message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_deprecate_message.txt#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// Deprecated: short\nmodule short\n\ngo 1.16\n```\n\n----------------------------------------\n\nTITLE: Root Go Module Definition\nDESCRIPTION: Defines the root Go module configuration with Go 1.20 requirement.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/issue61415.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nmodule vcs-test.golang.org/git/issue61415.git\n\ngo 1.20\n```\n\n----------------------------------------\n\nTITLE: Defining Empty Package for Module 'e'\nDESCRIPTION: This Go file defines an empty package for module 'e'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_downup_pseudo_artifact.txt#2025-04-22_snippet_16\n\nLANGUAGE: Go\nCODE:\n```\npackage e\n```\n\n----------------------------------------\n\nTITLE: Defining Version Constant in Go\nDESCRIPTION: This snippet defines a constant for the version number in a Go package. The version number is set as a string constant named V. This is aimed at standardizing the version reference across the codebase. No additional dependencies are required.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/example.com_version_v1.0.1.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage version\n\nconst V = \"v1.0.1\"\n```\n\n----------------------------------------\n\nTITLE: Defining Empty Function in Go\nDESCRIPTION: This Go code snippet defines a package 'p' with an empty function 'F()'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/rsc.io_needgo123_v0.0.1.txt#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npackage p\n\nfunc F() {}\n```\n\n----------------------------------------\n\nTITLE: Implementing ABI Test in Go with C Integration\nDESCRIPTION: This Go program imports C functions that use inline assembly to manipulate specific registers. It calls these functions and prints a success message if executed without errors.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_ppc64_linker_funcs.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\n/*\n#cgo CFLAGS: -Os\n\nint foo_fpr() {\n        asm volatile(\"\"::\":\"fr31\",\"fr30\",\"fr29\",\"fr28\");\n}\nint foo_gpr0() {\n        asm volatile(\"\"::\":\"r30\",\"r29\",\"r28\");\n}\nint foo_gpr1() {\n        asm volatile(\"\"::\":\"fr31\", \"fr30\",\"fr29\",\"fr28\",\"r30\",\"r29\",\"r28\");\n}\nint foo_vr() {\n        asm volatile(\"\"::\":\"v31\",\"v30\",\"v29\",\"v28\");\n}\n*/\nimport \"C\"\n\nimport \"fmt\"\n\nfunc main() {\n\tC.foo_fpr()\n\tC.foo_gpr0()\n\tC.foo_gpr1()\n\tC.foo_vr()\n\tfmt.Println(\"success\")\n}\n```\n\n----------------------------------------\n\nTITLE: RSA Prime Number Configuration Comments\nDESCRIPTION: Comments describing the structure and purpose of RSA prime numbers used for 2048-bit key generation benchmarking. The file specifies that numbers are in big endian hex format and that prime totients are coprime with 65537.\nSOURCE: https://github.com/golang/go/blob/master/src/crypto/rsa/testdata/keygen2048.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Prime candidates for RSA 2048 key generation, one per line, in big endian hex.\\n# This file contains two primes, one of which is at the end of the file.\\n# The totients of the primes are coprime with 65537.\\n#\\n# The number of composites, the distribution of their small divisors, and the\\n# number of trailing zeros are all chosen to be representative of the expected\\n# average key generation run, to provide a useful benchmark target.\\n#\\n# https://c2sp.org/CCTV/keygen#rsa-key-generation-benchmark\n```\n\n----------------------------------------\n\nTITLE: Defining Network Interface Type Constants in Go for NetBSD ARM64\nDESCRIPTION: This snippet defines constants for various network interface types in the syscall package for NetBSD on ARM64 architecture. Each constant represents a specific type of network interface and is assigned a unique numeric value.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_129\n\nLANGUAGE: Go\nCODE:\n```\nconst IFT_MEDIAMAILOVERIP ideal-int\nconst IFT_MFSIGLINK = 167\nconst IFT_MFSIGLINK ideal-int\nconst IFT_MIOX25 = 38\nconst IFT_MIOX25 ideal-int\nconst IFT_MODEM = 48\nconst IFT_MODEM ideal-int\nconst IFT_MPC = 113\nconst IFT_MPC ideal-int\nconst IFT_MPLS = 166\nconst IFT_MPLS ideal-int\nconst IFT_MPLSTUNNEL = 150\nconst IFT_MPLSTUNNEL ideal-int\n// ... (truncated for brevity)\nconst IFT_X25 = 5\nconst IFT_X25DDN = 4\nconst IFT_X25DDN ideal-int\n```\n\n----------------------------------------\n\nTITLE: Defining Image NYCbCrA Type and Methods - Go\nDESCRIPTION: Definition of a new NYCbCrA image type and its associated methods for handling images with alpha channel alongside YCbCr color space. Includes methods for color conversion, bounds checking, and pixel access.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.6.txt#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype NYCbCrA struct {\n    A []uint8\n    AStride int\n    YCbCr   // embedded\n}\n```\n\n----------------------------------------\n\nTITLE: Unix Shell Script for Test GCC Compiler\nDESCRIPTION: A shell script that simulates the gcc compiler by writing 'ok' to a log file. This is placed in a directory with spaces to test path handling.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/cgo_path_space.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\n\necho ok >$WORK/log.txt\n```\n\n----------------------------------------\n\nTITLE: v3 Go Module Definition\nDESCRIPTION: Defines the v3 module with the appropriate /v3 path suffix, specifying Go 1.18 as the required version.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/odd-tags.txt#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nmodule vcs-test.golang.org/git/odd-tags.git/v3\n\ngo 1.18\n```\n\n----------------------------------------\n\nTITLE: Executing Go Command on Windows\nDESCRIPTION: A Windows batch file that echoes a message indicating the Go version being used.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.windows-arm.txt#2025-04-22_snippet_2\n\nLANGUAGE: Batch\nCODE:\n```\n@echo go1.999testmod here!\n```\n\n----------------------------------------\n\nTITLE: Lazy Package Declaration\nDESCRIPTION: Empty package declaration for the lazy module.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_tidy_compat_implicit.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage lazy\n```\n\n----------------------------------------\n\nTITLE: Displaying Git Diff Output for Unchanged File\nDESCRIPTION: This snippet shows the Git diff output for a file that has not changed between the old and new versions. Both versions contain the same content: lines 'a', 'b', and 'c' followed by a control-D character.\nSOURCE: https://github.com/golang/go/blob/master/src/internal/diff/testdata/eof.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-- old --\na\nb\nc^D\n-- new --\na\nb\nc^D\n-- diff --\n```\n\n----------------------------------------\n\nTITLE: Testing Import Path Error with Invalid Character\nDESCRIPTION: Shell test command that verifies Go's error handling when encountering an import path containing an invalid 0x01 byte character. The test ensures the program produces an error message without panicking.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/list_panic_issue68737.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n! go run ''\n! stderr panic\nstderr 'malformed import path \"\\\\x01\": invalid char ''\\\\x01'''\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Environment for Go Module Download\nDESCRIPTION: This snippet sets up the test environment by specifying the Go version and toolchain. It then attempts to download a module with a version constraint and checks for the expected error message.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_get_future.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nenv TESTGO_VERSION=go1.21\nenv GOTOOLCHAIN=local\n! go mod download rsc.io/future@v1.0.0\nstderr '^go: rsc.io/future@v1.0.0 requires go >= 1.999 \\(running go 1.21; GOTOOLCHAIN=local\\)$'\n```\n\n----------------------------------------\n\nTITLE: Verifying Git Log Output\nDESCRIPTION: Logs the Git commit history in one-line format and compares it to an expected output file.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/git/emptytest.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit log --oneline\ncmp stdout .git-log\n```\n\n----------------------------------------\n\nTITLE: Defining Terminal Mode Constants in Go for NetBSD ARM64\nDESCRIPTION: This snippet defines terminal mode flags for controlling terminal behavior on NetBSD ARM64. These constants are used in terminal control operations through the syscall package and affect how terminal input/output is processed.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_47\n\nLANGUAGE: Go\nCODE:\n```\nconst OCRNL = 16\nconst ONLCR = 2\nconst ONLRET = 64\nconst ONOCR = 32\nconst ONOEOT = 8\nconst OPOST = 1\nconst PARENB = 4096\nconst PARMRK = 8\nconst PARODD = 8192\nconst PENDIN = 536870912\n```\n\n----------------------------------------\n\nTITLE: Submodule Definition\nDESCRIPTION: Defines a submodule 'example.com/m/sub' that requires the main module as a dependency.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/work_install_submodule.txt#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nmodule example.com/m/sub\n\ngo 1.18\n\nrequire example.com/m v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Empty Package Declaration\nDESCRIPTION: Empty Go package declaration for package 'p'.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/govcs.txt#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage p\n```\n\n----------------------------------------\n\nTITLE: Defining Go Module Metadata - Go Mod - Go Mod\nDESCRIPTION: Declares the module path for the Go package using the 'module' directive, which is required for Go's dependency management system. The go.mod file specifies 'golang.org/toolchain' as the root module and must be present at the repository root for module-aware builds. No dependencies are listed, and the minimal configuration is only the module declaration.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/mod/golang.org_toolchain_v0.0.1-go1.999testmod.freebsd-386.txt#2025-04-22_snippet_0\n\nLANGUAGE: Go Mod\nCODE:\n```\nmodule golang.org/toolchain\n```\n\n----------------------------------------\n\nTITLE: Importing Dependency in Example Package\nDESCRIPTION: Defines the main package 'example' and imports the 'p' package as a side-effect import.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/mod_doc_path.txt#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage example\n\nimport _ \"example.com/p\"\n```\n\n----------------------------------------\n\nTITLE: Executing Go Test with Failing Parent Test\nDESCRIPTION: This command runs a Go test with a specific pattern that matches no subtests. It demonstrates that the parent test still fails even when no subtests are executed.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/script/test_match_no_subtests_failure.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n! go test -run TestThatFails/ThisWillNotMatch standalone_fail_sub_test.go\n! stdout '^ok.*\\[no tests to run\\]'\n! stderr '^ok.*\\[no tests to run\\]'\nstdout 'FAIL'\n```\n\n----------------------------------------\n\nTITLE: Commit Message File Content\nDESCRIPTION: The content of the commit message file used for the SVN commit operation.\nSOURCE: https://github.com/golang/go/blob/master/src/cmd/go/testdata/vcstest/svn/hello.txt#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nhello world\n```\n\n----------------------------------------\n\nTITLE: Defining NetBSD ARM64 System Constants in Go\nDESCRIPTION: Collection of system constants for NetBSD on ARM64 architecture. These constants are used in system calls and include event flags, file operations, terminal controls, and network interface definitions. The constants are primarily used by the syscall package in Go.\nSOURCE: https://github.com/golang/go/blob/master/api/go1.13.txt#2025-04-22_snippet_127\n\nLANGUAGE: Go\nCODE:\n```\n// Event flags\nconst EV_FLAG1 = 8192\nconst EV_ONESHOT = 16\nconst EV_SYSFLAGS = 61440\n\n// Error codes\nconst EWOULDBLOCK = 35\nconst EXDEV = 18\n\n// Terminal baud rates\nconst EXTA = 19200\nconst EXTB = 38400\nconst EXTPROC = 2048\n\n// File descriptor operations\nconst F_CLOSEM = 10\nconst FD_CLOEXEC = 1\nconst FD_SETSIZE = 256\nconst F_DUPFD = 0\nconst F_DUPFD_CLOEXEC = 12\nconst F_FSCTL = -2147483648\nconst F_FSDIRMASK = 1879048192\nconst F_FSIN = 268435456\nconst F_FSINOUT = 805306368\nconst F_FSOUT = 536870912\nconst F_FSPRIV = 32768\nconst F_FSVOID = 1073741824\nconst F_GETFD = 1\nconst F_GETFL = 3\nconst F_GETLK = 7\nconst F_GETNOSIGPIPE = 13\nconst F_GETOWN = 5\nconst FLUSHO = 8388608\nconst F_MAXFD = 11\nconst F_OK = 0\nconst F_PARAM_MASK = 4095\nconst F_PARAM_MAX = 4095\nconst F_RDLCK = 1\nconst F_SETFD = 2\nconst F_SETFL = 4\nconst F_SETLK = 8\nconst F_SETLKW = 9\nconst F_SETNOSIGPIPE = 14\nconst F_SETOWN = 6\nconst F_UNLCK = 2\nconst F_WRLCK = 3\n\n// Terminal control flags\nconst HUPCL = 16384\nconst ICANON = 256\nconst ICMP6_FILTER = 18\nconst ICRNL = 256\nconst IEXTEN = 1024\n\n// Network interface notification types\nconst IFAN_ARRIVAL = 0\nconst IFAN_DEPARTURE = 1\nconst IFA_ROUTE = 1\n\n// Network interface flags\nconst IFF_ALLMULTI = 512\nconst IFF_CANTCHANGE = 36690\nconst IFF_DEBUG = 4\nconst IFF_LINK0 = 4096\nconst IFF_LINK1 = 8192\nconst IFF_LINK2 = 16384\nconst IFF_LOOPBACK = 8\nconst IFF_MULTICAST = 32768\nconst IFF_NOARP = 128\nconst IFF_NOTRAILERS = 32\nconst IFF_OACTIVE = 1024\nconst IFF_POINTOPOINT = 16\nconst IFF_PROMISC = 256\nconst IFF_RUNNING = 64\nconst IFF_SIMPLEX = 2048\nconst IFNAMSIZ = 16\n\n// Network interface types\nconst IFT_1822 = 2\nconst IFT_A12MPPSWITCH = 130\nconst IFT_AAL2 = 187\nconst IFT_AAL5 = 49\nconst IFT_ADSL = 94\nconst IFT_AFLANE8023 = 59\nconst IFT_AFLANE8025 = 60\nconst IFT_ARAP = 88\nconst IFT_ARCNET = 35\nconst IFT_ARCNETPLUS = 36\nconst IFT_ASYNC = 84\nconst IFT_ATM = 37\nconst IFT_ATMDXI = 105\nconst IFT_ATMFUNI = 106\nconst IFT_ATMIMA = 107\nconst IFT_ATMLOGICAL = 80\nconst IFT_ATMRADIO = 189\nconst IFT_ATMSUBINTERFACE = 134\nconst IFT_ATMVCIENDPT = 194\nconst IFT_ATMVIRTUAL = 149\nconst IFT_BGPPOLICYACCOUNTING = 162\nconst IFT_BRIDGE = 209\nconst IFT_BSC = 83\nconst IFT_CARP = 248\nconst IFT_CCTEMUL = 61\nconst IFT_CEPT = 19\nconst IFT_CES = 133\nconst IFT_CHANNEL = 70\nconst IFT_CNR = 85\nconst IFT_COFFEE = 132\nconst IFT_COMPOSITELINK = 155\nconst IFT_DCN = 141\nconst IFT_DIGITALPOWERLINE = 138\nconst IFT_DIGITALWRAPPEROVERHEADCHANNEL = 186\n```"
  }
]