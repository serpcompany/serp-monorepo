[
  {
    "owner": "remarkjs",
    "repo": "react-markdown",
    "content": "TITLE: Basic react-markdown usage example\nDESCRIPTION: A simple example demonstrating how to use the react-markdown component to render markdown content in a React application.\nSOURCE: https://github.com/remarkjs/react-markdown/blob/main/readme.md#2025-04-20_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport {createRoot} from 'react-dom/client'\nimport Markdown from 'react-markdown'\n\nconst markdown = '# Hi, *Pluto*!'\n\ncreateRoot(document.body).render(<Markdown>{markdown}</Markdown>)\n```\n\n----------------------------------------\n\nTITLE: Using react-markdown with remark-gfm plugin\nDESCRIPTION: Example showing how to use the react-markdown component with the remark-gfm plugin to add support for additional markdown features like footnotes, strikethrough, tables, tasklists, and direct URLs.\nSOURCE: https://github.com/remarkjs/react-markdown/blob/main/readme.md#2025-04-20_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react'\nimport {createRoot} from 'react-dom/client'\nimport Markdown from 'react-markdown'\nimport remarkGfm from 'remark-gfm'\n\nconst markdown = `Just a link: www.nasa.gov.`\n\ncreateRoot(document.body).render(\n  <Markdown remarkPlugins={[remarkGfm]}>{markdown}</Markdown>\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Component Rendering in React Markdown\nDESCRIPTION: Example showing how to override default HTML components in react-markdown. This snippet demonstrates mapping h1 elements to h2 and customizing em elements with red text styling.\nSOURCE: https://github.com/remarkjs/react-markdown/blob/main/readme.md#2025-04-20_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n<Markdown\n  components={{\n    // Map `h1` (`# heading`) to use `h2`s.\n    h1: 'h2',\n    // Rewrite `em`s (`*like so*`) to `i` with a red foreground color.\n    em(props) {\n      const {node, ...rest} = props\n      return <i style={{color: 'red'}} {...rest} />\n    }\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Components with Syntax Highlighting in React Markdown\nDESCRIPTION: This example demonstrates how to use custom components to override default element rendering in React Markdown. It implements syntax highlighting for code blocks using react-syntax-highlighter with the Prism theme.\nSOURCE: https://github.com/remarkjs/react-markdown/blob/main/readme.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport {createRoot} from 'react-dom/client'\nimport Markdown from 'react-markdown'\nimport {Prism as SyntaxHighlighter} from 'react-syntax-highlighter'\nimport {dark} from 'react-syntax-highlighter/dist/esm/styles/prism'\n\n// Did you know you can use tildes instead of backticks for code in markdown? âœ¨\nconst markdown = `Here is some JavaScript code:\n\n~~~js\nconsole.log('It works!')\n~~~\n`\n\ncreateRoot(document.body).render(\n  <Markdown\n    children={markdown}\n    components={{\n      code(props) {\n        const {children, className, node, ...rest} = props\n        const match = /language-(\\w+)/.exec(className || '')\n        return match ? (\n          <SyntaxHighlighter\n            {...rest}\n            PreTag=\"div\"\n            children={String(children).replace(/\\n$/, '')}\n            language={match[1]}\n            style={dark}\n          />\n        ) : (\n          <code {...rest} className={className}>\n            {children}\n          </code>\n        )\n      }\n    }}\n  />\n)\n```\n\n----------------------------------------\n\nTITLE: Using remark-gfm Plugin with React Markdown\nDESCRIPTION: This snippet demonstrates how to use the remark-gfm plugin with React Markdown to support GitHub Flavored Markdown features like strikethrough, tables, tasklists and URL auto-linking. The example renders a markdown string with these features.\nSOURCE: https://github.com/remarkjs/react-markdown/blob/main/readme.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport {createRoot} from 'react-dom/client'\nimport Markdown from 'react-markdown'\nimport remarkGfm from 'remark-gfm'\n\nconst markdown = `A paragraph with *emphasis* and **strong importance**.\n\n> A block quote with ~strikethrough~ and a URL: https://reactjs.org.\n\n* Lists\n* [ ] todo\n* [x] done\n\nA table:\n\n| a | b |\n| - | - |\n`\n\ncreateRoot(document.body).render(\n  <Markdown remarkPlugins={[remarkGfm]}>{markdown}</Markdown>\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML in Markdown with rehype-raw\nDESCRIPTION: This example shows how to use rehype-raw plugin to render HTML embedded within markdown. This approach should only be used in trusted environments as it bypasses the default HTML escaping in React Markdown, which could pose security risks.\nSOURCE: https://github.com/remarkjs/react-markdown/blob/main/readme.md#2025-04-20_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport {createRoot} from 'react-dom/client'\nimport Markdown from 'react-markdown'\nimport rehypeRaw from 'rehype-raw'\n\nconst markdown = `<div class=\"note\">\n\nSome *emphasis* and <strong>strong</strong>!\n\n</div>`\n\ncreateRoot(document.body).render(\n  <Markdown rehypePlugins={[rehypeRaw]}>{markdown}</Markdown>\n)\n```\n\n----------------------------------------\n\nTITLE: Math Equations in React Markdown with KaTeX\nDESCRIPTION: This example demonstrates how to render mathematical equations in React Markdown using remark-math for parsing math syntax and rehype-katex for rendering it with KaTeX. It includes importing the KaTeX CSS for proper styling.\nSOURCE: https://github.com/remarkjs/react-markdown/blob/main/readme.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport {createRoot} from 'react-dom/client'\nimport Markdown from 'react-markdown'\nimport rehypeKatex from 'rehype-katex'\nimport remarkMath from 'remark-math'\nimport 'katex/dist/katex.min.css' // `rehype-katex` does not import the CSS for you\n\nconst markdown = `The lift coefficient ($C_L$) is a dimensionless coefficient.`\n\ncreateRoot(document.body).render(\n  <Markdown remarkPlugins={[remarkMath]} rehypePlugins={[rehypeKatex]}>\n    {markdown}\n  </Markdown>\n)\n```\n\n----------------------------------------\n\nTITLE: Recommended Pattern for Markdown in JSX\nDESCRIPTION: Best practice for handling line endings and whitespace when using markdown in JSX. This approach avoids indentation and whitespace issues by storing markdown in a variable and passing it as an expression.\nSOURCE: https://github.com/remarkjs/react-markdown/blob/main/readme.md#2025-04-20_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// If you write actual markdown in your code, put your markdown in a variable;\n// **do not indent markdown**:\nconst markdown = `\n# This is perfect!\n`\n\n// Pass the value as an expression as an only child:\nconst result = <Markdown>{markdown}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: Using Components with React-Markdown\nDESCRIPTION: Example showing how to use custom components with React-Markdown, demonstrating the transition from renderers to components API.\nSOURCE: https://github.com/remarkjs/react-markdown/blob/main/changelog.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<Markdown\n  components={{\n    // Use a fancy hr\n    hr: ({node, ...props}) => <MyFancyRule {...props} />\n  }}\n>{`***`}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: Configuring remark-gfm Plugin with Options\nDESCRIPTION: This example shows how to pass options to the remark-gfm plugin by using an array structure where the first element is the plugin and the second is the options object. It demonstrates configuring the strikethrough syntax to only allow double tildes.\nSOURCE: https://github.com/remarkjs/react-markdown/blob/main/readme.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react'\nimport {createRoot} from 'react-dom/client'\nimport Markdown from 'react-markdown'\nimport remarkGfm from 'remark-gfm'\n\nconst markdown = 'This ~is not~ strikethrough, but ~~this is~~!'\n\ncreateRoot(document.body).render(\n  <Markdown remarkPlugins={[[remarkGfm, {singleTilde: false}]]}>\n    {markdown}\n  </Markdown>\n)\n```\n\n----------------------------------------\n\nTITLE: Using Rehype Plugins with React-Markdown\nDESCRIPTION: Demonstrates how to use rehype plugins for syntax highlighting in React-Markdown.\nSOURCE: https://github.com/remarkjs/react-markdown/blob/main/changelog.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport rehypeHighlight from 'rehype-highlight'\n\n<Markdown rehypePlugins={[rehypeHighlight]}>{`~~~js\nconsole.log(1)\n~~~`}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: HTML Support in React-Markdown\nDESCRIPTION: Shows how to handle HTML content in markdown using rehype-raw and rehype-sanitize plugins for safe HTML processing.\nSOURCE: https://github.com/remarkjs/react-markdown/blob/main/changelog.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport Markdown from 'react-markdown'\nimport rehypeRaw from 'rehype-raw'\nimport rehypeSanitize from 'rehype-sanitize'\n\n<Markdown rehypePlugins={[rehypeRaw, rehypeSanitize]}>{`# Hello, <i>world</i>!`}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: JSX Equivalent of remark-gfm Rendering\nDESCRIPTION: This snippet shows the equivalent JSX output when using remark-gfm plugin with React Markdown. It demonstrates how the markdown is transformed into React components, including emphasis, blockquotes, task lists, and table structures.\nSOURCE: https://github.com/remarkjs/react-markdown/blob/main/readme.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n<>\n  <p>\n    A paragraph with <em>emphasis</em> and <strong>strong importance</strong>.\n  </p>\n  <blockquote>\n    <p>\n      A block quote with <del>strikethrough</del> and a URL:{' '}\n      <a href=\"https://reactjs.org\">https://reactjs.org</a>.\n    </p>\n  </blockquote>\n  <ul className=\"contains-task-list\">\n    <li>Lists</li>\n    <li className=\"task-list-item\">\n      <input type=\"checkbox\" disabled /> todo\n    </li>\n    <li className=\"task-list-item\">\n      <input type=\"checkbox\" disabled checked /> done\n    </li>\n  </ul>\n  <p>A table:</p>\n  <table>\n    <thead>\n      <tr>\n        <th>a</th>\n        <th>b</th>\n      </tr>\n    </thead>\n  </table>\n</>\n```\n\n----------------------------------------\n\nTITLE: Installing react-markdown with npm\nDESCRIPTION: Command to install the react-markdown package using npm in a Node.js environment (version 16+).\nSOURCE: https://github.com/remarkjs/react-markdown/blob/main/readme.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install react-markdown\n```\n\n----------------------------------------\n\nTITLE: Template Literal Indentation Issue\nDESCRIPTION: Example showing how indentation inside template literals can cause unexpected markdown rendering. Indentation is preserved, causing text to be rendered as a code block rather than a heading.\nSOURCE: https://github.com/remarkjs/react-markdown/blob/main/readme.md#2025-04-20_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n<Markdown>{`\n    # This is **not** a heading, it's an indented code block\n`}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: Using Template Literals with React Markdown\nDESCRIPTION: Example showing how to use template literals to pass markdown to the Markdown component. This approach preserves line endings but requires careful handling of indentation.\nSOURCE: https://github.com/remarkjs/react-markdown/blob/main/readme.md#2025-04-20_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n<Markdown>{`\n# Hi\n\nThis is a paragraph.\n`}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Markdown Usage in JSX\nDESCRIPTION: Example of a common mistake when writing markdown directly in JSX. This approach doesn't work because JSX collapses whitespace and line endings.\nSOURCE: https://github.com/remarkjs/react-markdown/blob/main/readme.md#2025-04-20_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n<Markdown>\n  # Hi\n\n  This is **not** a paragraph.\n</Markdown>\n```\n\n----------------------------------------\n\nTITLE: Migrating disallowedTypes to disallowedElements in React-Markdown\nDESCRIPTION: Example showing how to update the disallowedTypes property to the new disallowedElements property for filtering image elements.\nSOURCE: https://github.com/remarkjs/react-markdown/blob/main/changelog.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n<Markdown\n  // Skip images\n  disallowedTypes={['image']}\n>{`![alt text](./image.url)`}</Markdown>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<Markdown\n  // Skip images\n  disallowedElements={['img']}\n>{`![alt text](./image.url)`}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: Migrating allowNode to allowElement in React-Markdown\nDESCRIPTION: Example showing how to update the allowNode property to the new allowElement property for filtering heading elements.\nSOURCE: https://github.com/remarkjs/react-markdown/blob/main/changelog.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n<Markdown\n  // Skip h1\n  allowNode={(node) => node.type !== 'heading' || node.depth !== 1}\n>{`# main heading`}</Markdown>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<Markdown\n  // Skip h1\n  allowElement={(element) => element.tagName !== 'h1'}\n>{`# main heading`}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: JSX Equivalent of HTML in Markdown Output\nDESCRIPTION: This snippet shows the JSX structure generated when using rehype-raw to render HTML in markdown. It demonstrates how HTML elements and markdown formatting are preserved and properly combined in the output.\nSOURCE: https://github.com/remarkjs/react-markdown/blob/main/readme.md#2025-04-20_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n<div className=\"note\">\n  <p>\n    Some <em>emphasis</em> and <strong>strong</strong>!\n  </p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: JSX Equivalent of Syntax Highlighting Output\nDESCRIPTION: This snippet shows the JSX structure generated when using custom components for syntax highlighting in React Markdown. It demonstrates how code blocks are transformed into SyntaxHighlighter components with the appropriate props.\nSOURCE: https://github.com/remarkjs/react-markdown/blob/main/readme.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n<>\n  <p>Here is some JavaScript code:</p>\n  <pre>\n    <SyntaxHighlighter language=\"js\" style={dark} PreTag=\"div\" children=\"console.log('It works!')\" />\n  </pre>\n</>\n```\n\n----------------------------------------\n\nTITLE: JSX Equivalent of Math Equation Rendering\nDESCRIPTION: This snippet shows the JSX structure produced when rendering math equations with KaTeX in React Markdown. It demonstrates how inline math expressions are transformed into KaTeX HTML components with appropriate classes.\nSOURCE: https://github.com/remarkjs/react-markdown/blob/main/readme.md#2025-04-20_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n<p>\n  The lift coefficient (\n  <span className=\"katex\">\n    <span className=\"katex-mathml\">\n      <math xmlns=\"http://www.w3.org/1998/Math/MathML\">{/* â€¦ */}</math>\n    </span>\n    <span className=\"katex-html\" aria-hidden=\"true\">\n      {/* â€¦ */}\n    </span>\n  </span>\n  ) is a dimensionless coefficient.\n</p>\n```\n\n----------------------------------------\n\nTITLE: JSX Equivalent of Configured remark-gfm Output\nDESCRIPTION: This snippet displays the resulting JSX output when using remark-gfm with the singleTilde option set to false. It shows how only text with double tildes gets transformed into strikethrough elements.\nSOURCE: https://github.com/remarkjs/react-markdown/blob/main/readme.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n<p>\n  This ~is not~ strikethrough, but <del>this is</del>!\n</p>\n```\n\n----------------------------------------\n\nTITLE: Migrating includeNodeIndex to includeElementIndex in React-Markdown\nDESCRIPTION: Example showing how to update the includeNodeIndex property to includeElementIndex and renderers to components for paragraph elements.\nSOURCE: https://github.com/remarkjs/react-markdown/blob/main/changelog.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n<Markdown\n  includeNodeIndex={true}\n  renderers={{\n    paragraph({node, index, parentChildCount, ...props}) => <MyFancyParagraph {...props} />\n  }}\n>{`Some text`}</Markdown>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<Markdown\n  includeElementIndex={true}\n  components={{\n    p({node, index, siblingsCount, ...props}) => <MyFancyParagraph {...props} />\n  }}\n>{`Some text`}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: React-Markdown Children Prop Usage\nDESCRIPTION: Demonstrates the updated syntax for providing markdown content using the children prop instead of the source prop.\nSOURCE: https://github.com/remarkjs/react-markdown/blob/main/changelog.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n<Markdown>{`some\nmarkdown`}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: Adding sourcepos data attribute with rehype plugin\nDESCRIPTION: Example plugin to add a data-sourcepos attribute to element nodes in the AST, replacing the removed sourcePos option.\nSOURCE: https://github.com/remarkjs/react-markdown/blob/main/changelog.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {stringifyPosition} from 'unist-util-stringify-position'\nimport {visit} from 'unist-util-visit'\n\nfunction rehypePluginAddingIndex() {\n  /**\n   * @param {import('hast').Root} tree\n   * @returns {undefined}\n   */\n  return function (tree) {\n    visit(tree, function (node) {\n      if (node.type === 'element') {\n        node.properties.dataSourcepos = stringifyPosition(node.position)\n      }\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding index to elements with rehype plugin\nDESCRIPTION: Example plugin to add an index property to element nodes in the AST, replacing the removed includeElementIndex option.\nSOURCE: https://github.com/remarkjs/react-markdown/blob/main/changelog.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {visit} from 'unist-util-visit'\n\nfunction rehypePluginAddingIndex() {\n  /**\n   * @param {import('hast').Root} tree\n   * @returns {undefined}\n   */\n  return function (tree) {\n    visit(tree, function (node, index) {\n      if (node.type === 'element' && typeof index === 'number') {\n        node.properties.index = index\n      }\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing react-markdown in Deno\nDESCRIPTION: Example of importing the react-markdown package in a Deno environment using esm.sh.\nSOURCE: https://github.com/remarkjs/react-markdown/blob/main/readme.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Markdown from 'https://esm.sh/react-markdown@10'\n```\n\n----------------------------------------\n\nTITLE: Using react-markdown in browser with ESM\nDESCRIPTION: HTML script tag to import react-markdown in a browser environment using esm.sh.\nSOURCE: https://github.com/remarkjs/react-markdown/blob/main/readme.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import Markdown from 'https://esm.sh/react-markdown@10?bundle'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Removing className prop in React Markdown component\nDESCRIPTION: Example of migrating away from the removed className prop by wrapping the Markdown component in a div with the desired class.\nSOURCE: https://github.com/remarkjs/react-markdown/blob/main/changelog.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<div className=\"markdown-body\">\n  <Markdown>{markdown}</Markdown>\n</div>\n```"
  }
]