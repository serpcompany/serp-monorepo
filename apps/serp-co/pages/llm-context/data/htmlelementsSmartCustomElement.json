[
  {
    "owner": "htmlelements",
    "repo": "smart-custom-element",
    "content": "TITLE: Defining a Basic Custom Element with Smart Custom Element\nDESCRIPTION: Demonstrates how to create a basic custom element using Smart Custom Element. It includes the element's properties, template, and lifecycle methods.\nSOURCE: https://github.com/htmlelements/smart-custom-element/blob/master/README.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/webcomponentsjs/1.0.22/webcomponents-lite.js\"></script>\n    <script type=\"text/javascript\" src=\"source/smart.element.js\"></script>\n\t<script>\n\t\tSmart('smart-test', class TestElement extends Smart.BaseElement {\n\t\t\t// properties.\n\t\t\tstatic get properties() {\n\t\t\t\treturn {\n\t\t\t\t\t'content': {\n\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t/** Element's template. */\n\t\t\ttemplate() {\n\t\t\t\treturn '<div inner-h-t-m-l=\\'[[content]]\\''></div>';\n\t\t\t}\n\n\t\t\tready() {\n\t\t\t\tsuper.ready();\n\t\t\t}\n\n\t\t\tpropertyChangedHandler(propertyName, oldValue, newValue) {\n\t\t\t\tsuper.propertyChangedHandler(propertyName, oldValue, newValue);        \n\t\t\t}\n\t\t});\n\t</script>\n\t<style>\n\t\t.smart-container {\n\t\t\tbox-sizing: border-box;\n\t\t\tfont-family: inherit;\n\t\t\tfont-size: inherit;\n\t\t\tdisplay: block;\n\t\t\twidth: 100%;\n\t\t\theight: 100%;\n\t\t\toutline: none;\n\t\t\tmargin: 0;\n\t\t\tpadding: 0;\n\t\t}\n\n\t\t.smart-container * {\n\t\t\tbox-sizing: border-box;\n\t\t}\t\n\t\tsmart-test {\n\t\t\tbackground: #ddd;\n\t\t\tcolor: #333;\n\t\t\tdisplay: inline-block;\n\t\t\tborder-radius: 5px;\n\t\t\tborder: 1px solid #aaa;\n\t\t\twidth: 100px;\n\t\t\ttext-align: center;\n\t\t}\n\t</style>\n</head>\n<body>\n    <smart-test content=\"Test Element\"></smart-test>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Element Properties with Event Handling in HTML/JavaScript\nDESCRIPTION: This example demonstrates how to create a Smart ListBox element with custom properties. It shows data binding, event handling for property changes, and toggling the disabled state. The example includes defining a data source, adding an event listener for property changes, and modifying property configuration at runtime.\nSOURCE: https://github.com/htmlelements/smart-custom-element/blob/master/README.md#2025-04-19_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"styles/smart.default.css\" type=\"text/css\" />\n    <script type=\"text/javascript\" src=\"smart.elements.js\"></script>\n    <script>\n        window.onload = function () {\n            var list = document.getElementById('list');\n\n            var data = [\n                {\n                    label: \"Andrew\",\n                    value: 1,\n                    group: \"A\"\n                },\n                {\n                    label: \"Natalia\",\n                    value: 5,\n                    group: \"B\"\n                },\n                {\n                    label: \"Michael\",\n                    value: 4,\n                    group: \"B\"\n                },\n                {\n                    label: \"Angel\",\n                    value: 2,\n                    group: \"A\"\n                },\n                {\n                    label: \"Hristo\",\n                    value: 6,\n                    group: \"C\"\n                },\n               {\n                   label: \"Peter\",\n                   value: 3,\n                   group: \"A\"\n               },\n               {\n                   label: \"Albert\",\n                   value: 4,\n                   group: \"A\"\n               },\n               {\n                   label: \"Boyko\",\n                   value: 8,\n                   group: \"A\"\n               },\n               {\n                   label: \"Dimitar\",\n                   value: 9,\n                   group: \"B\"\n               },\n               {\n                   label: \"George\",\n                   value: 10,\n                   group: \"C\"\n               }\n            ];\n\n            list.dataSource = data;\n        \n            list.addEventListener('disabled-changed', function (event) {\n                if (event.target === list) {\n                    alert('disabled changed');\n                }\n            });\n\n            document.getElementById(\"disabled\").onclick = function () {\n                list.disabled = !list.disabled;\n            }\n\n            list.properties['disabled'].notify = true;\n        }\n    </script>\n</head>\n<body>\n    <smart-list-box style=\"float:left;\" selection-mode=\"checkBox\" id=\"list\"></smart-list-box>\n    <div style=\"float: left; margin-left:100px;\">\n        <smart-button style=\"width:auto;\" id=\"disabled\">Enable/Disable</smart-button>\n    </div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating an Extended Custom Element with Smart Custom Element\nDESCRIPTION: Shows how to create a more complex custom element (a button) with additional properties, event listeners, and custom methods using Smart Custom Element.\nSOURCE: https://github.com/htmlelements/smart-custom-element/blob/master/README.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nSmart('smart-button', class Button extends Smart.ContentElement {\n// Button's properties.\nstatic get properties() {\n    return {\n        'value': {\n            type: 'string'\n        },\n        'name': {\n            type: 'string'\n        },\n        'type': {\n            type: 'string'\n        },\n        'clickMode': {\n            allowedValues: ['hover', 'press', 'release'],\n            type: 'string',\n            value: 'release'\n        }\n    };\n}\n\n/** Button's template. */\ntemplate() {\n    return '<button class=\\'smart-button\\' inner-h-t-m-l=\\'[[innerHTML]]\\' id=\\'button\\' type=\\'[[type]]\\' name=\\'[[name]]\\' value=\\'[[value]]\\' disabled=\\'[[disabled]]\\' role=\\'button\\'></button>';\n}\n\nstatic get listeners() {\n    return {\n        'button.mousedown': '_mouseDownHandler',\n        'button.mouseenter': '_mouseEnterHandler',\n        'button.click': '_clickHandler'\n    };\n}\n\n_clickHandler(event) {\n    const that = this;\n\n    if (that.clickMode !== 'release') {\n        event.preventDefault();\n        event.stopPropagation();\n    }\n}\n\n_mouseDownHandler() {\n    const that = this;\n\n    if (that.clickMode === 'press') {\n        that.$.fireEvent('click');\n    }\n}\n\n_mouseEnterHandler() {\n    const that = this;\n\n    if (that.clickMode === 'hover') {\n        that.$.fireEvent('click');\n    }\n}\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Checkbox Custom Element Implementation\nDESCRIPTION: Full implementation of a checkbox custom element with template definition, properties, event handling, and element access via the $ symbol.\nSOURCE: https://github.com/htmlelements/smart-custom-element/blob/master/README.md#2025-04-19_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n* CheckBox custom element.\n*/\nSmart('smart-checkbox', class CheckBox extends Smart.ToggleButton {\n    // CheckBox's properties.\n    static get properties() {\n        return {\n            'enableContainerClick': {\n                value: true,\n                type: 'boolean'\n            }\n        };\n    }\n\n    /** Checkbox's Html template. */\n    template() {\n        return `<div id='container' class='smart-container'>\n                 <div id='checkboxAnimation' class ='smart-animation'></div>\n                 <span id='checkboxInput' class ='smart-input'></span>\n                 <span id='checkboxLabel' inner-h-t-m-l='[[innerHTML]]' class ='smart-label'><content></content></span>\n               </div>`;\n    }\n\n    static get listeners() {\n        return {\n            'click': '_clickHandler'\n        };\n    }\n\n    /** Called when the element is ready. Used for one-time configuration of the Checkbox. */\n    ready() {\n    }\n\n    /** Changes the check state wneh widget container is clicked. */\n    _clickHandler(event) {\n        const that = this;\n\n        if (that.disabled) {\n            return;\n        }\n\n        const isInputClicked = event.target === that.$.checkboxInput;\n\n        if ((that.enableContainerClick === true && !isInputClicked) || isInputClicked) {\n            that._changeCheckState('pointer');\n            that.focus();\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Custom Element with Template Directives\nDESCRIPTION: Full example showing use of *if and *items template directives with HTML implementation and dynamic content updates.\nSOURCE: https://github.com/htmlelements/smart-custom-element/blob/master/README.md#2025-04-19_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\n    <script type=\"text/javascript\" src=\"../../source/smart.element.js\"></script>\n    <script>\n        Smart('smart-test', class Test extends Smart.BaseElement {\n            // Toggle Button's properties.\n            static get properties() {\n                return {\n                    'name': {\n                        value: 'test',\n                        type: 'string'\n                    },\n                    'name2': {\n                        value: 'Atest',\n                        type: 'string'\n                    },\n                    'condition': {\n                        value: true,\n                        type: 'boolean'\n                    },\n                    'disabled': {\n                        value: false,\n                        type: 'boolean'\n                    },\n                    'source': {\n                        value: [],\n                        type: 'array'\n                    }\n                };\n            }\n\n            template() {\n                return '<div><div>{{name2}}</div><template><div *if={{condition}}><span>{{name}}</span></div><ul  *if={{condition}} *items={{source}}><li>{{item.name}}<input  disabled={{disabled}}  value=\"{{item.name}}\"></input</li></ul></template></div>'\n            }\n\n            templateAttached(template) {\n                var inputs = template.querySelectorAll('input');\n\n                for (let i = 0; i < inputs.length; i++) {\n                    inputs[i].addEventListener('change', function () {\n                        alert('test');\n                    });\n                }\n            }\n\n            templateDetached(template) {\n\n            }\n\n            test() {\n                return this.condition;\n            }\n            /**\n            * Toggle Button's event listeners.\n            */\n            static get listeners() {\n                return {\n             \n                };\n            }\n\n            /** Called when the element is ready. Used for one-time configuration of the ToggleButton. */\n            ready() {\n                super.ready();\n            }\n        });\n\n\n        window.onload = function () {\n            var test = document.querySelector('smart-test');\n\n            test.source = [\n                { name: \"Name 1\" },\n                { name: \"Name 2\" },\n                { name: \"Name 3\" },\n                { name: \"Name 4\" },\n                { name: \"Name 5\" }\n            ]\n\n            document.querySelector('button').onclick = function () {\n                test.name2 = \"TEST\";\n        \n                test.source = [\n                { name: \"New Name 1\" },\n                { name: \"New Name 2\" },\n                { name: \"New Name 3\" },\n                { name: \"New Name 4\" },\n                { name: \"New Name 5\" }\n                ]\n                test.disabled = true;\n                test.condition = true;\n\n            }\n        }\n    </script>\n</head>\n<body>\n    <smart-test></smart-test>\n    <button>Update</button>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handling in Smart Checkbox Element\nDESCRIPTION: Definition of a Smart Checkbox element that extends Smart.ToggleButton with event handling through the 'listeners' object. The example shows how to handle click events and implement custom behavior for the checkbox.\nSOURCE: https://github.com/htmlelements/smart-custom-element/blob/master/README.md#2025-04-19_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n* CheckBox custom element.\n*/\nSmart('smart-checkbox', class CheckBox extends Smart.ToggleButton {\n    // CheckBox's properties.\n    static get properties() {\n        return {\n            'enableContainerClick': {\n                value: true,\n                type: 'boolean'\n            }\n        };\n    }\n\n    /** Checkbox's Html template. */\n    template() {\n        return `<div id='container' class='smart-container'>\n                 <div id='checkboxAnimation' class ='smart-animation'></div>\n                 <span id='checkboxInput' class ='smart-input'></span>\n                 <span id='checkboxLabel' inner-h-t-m-l='[[innerHTML]]' class ='smart-label'><content></content></span>\n               </div>`;\n    }\n\n    static get listeners() {\n        return {\n            'click': '_clickHandler'\n        };\n    }\n\n    /** Called when the element is ready. Used for one-time configuration of the Checkbox. */\n    ready() {\n    }\n\n    /** Changes the check state wneh widget container is clicked. */\n    _clickHandler(event) {\n        const that = this;\n\n        if (that.disabled) {\n            return;\n        }\n\n        const isInputClicked = event.target === that.$.checkboxInput;\n\n        if ((that.enableContainerClick === true && !isInputClicked) || isInputClicked) {\n            that._changeCheckState('pointer');\n            that.focus();\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Element with Two-Way Data Binding\nDESCRIPTION: Example of creating a custom element with two-way data binding between a checkbox input and the element's 'check' property.\nSOURCE: https://github.com/htmlelements/smart-custom-element/blob/master/README.md#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nSmart('my-element', class MyElement extends Smart.BaseElement {\n    static get properties() {\n        return {\n            'check': {\n                type: 'boolean'\n            }\n        };\n    }\n \n    template() {\n        return '<div><input type=\"checkbox\" checked=\"{{check::change}}\" /></div>';\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Binding to Template Events in Custom Element\nDESCRIPTION: Example of binding to events within a custom element's template using the (event) syntax. This snippet demonstrates how to create a custom element with a checkbox and respond to its change events.\nSOURCE: https://github.com/htmlelements/smart-custom-element/blob/master/README.md#2025-04-19_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nSmart('my-element', class MyElement extends Smart.BaseElement {\n    static get properties() {\n        return {\n            'check': {\n                type: 'boolean'\n            }\n        };\n    }\n \n    template() {\n        return '<div><input id=\"checkbox\" (change)=\"_changeHandler\" type=\"checkbox\" checked=\"{{check::change}}\" /></div>';\n    }\n\n    _changeHandler() {\n        alert('Checkbox State Changed');\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Context Binding in HTML\nDESCRIPTION: A complete HTML example demonstrating how to use DataContext for two-way data binding between Smart Custom Elements and a JavaScript model. The example shows binding to list items, text input, and button click events.\nSOURCE: https://github.com/htmlelements/smart-custom-element/blob/master/README.md#2025-04-19_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link rel=\"stylesheet\" href=\"styles/smart.default.css\" type=\"text/css\" />\n    <script type=\"text/javascript\" src=\"smart.elements.js\"></script>\n    <script>\n        window.onload = function () {\n            const data = [\n            {\n                label: \"Andrew\",\n                value: 1,\n                group: \"A\"\n            },\n            {\n                label: \"Natalia\",\n                value: 5,\n                group: \"B\"\n            },\n            {\n                label: \"Michael\",\n                value: 4,\n                group: \"B\"\n            },\n            {\n                label: \"Angel\",\n                value: 2,\n                group: \"A\"\n            },\n            {\n                label: \"Hristo\",\n                value: 6,\n                group: \"C\"\n            },\n           {\n               label: \"Peter\",\n               value: 3,\n               group: \"A\"\n           },\n           {\n               label: \"Albert\",\n               value: 2,\n               group: \"A\"\n           },\n           {\n               label: \"Boyko\",\n               value: 8,\n               group: \"A\"\n           },\n           {\n               label: \"Dimitar\",\n               value: 2,\n               group: \"B\"\n           },\n           {\n               label: \"George\",\n               value: 10,\n               group: \"C\"\n           }\n            ];\n\n            window.listBoxSettings = {\n                dataSource: data,\n                selectionMode: 'checkBox'\n            }\n\n            const SimpleListModel = function (items) {\n                this.items = items;\n                this.itemToAdd = \"\";\n                this.addItem = function () {\n                    if (this.itemToAdd !== \"\") {\n                        this.items = this.items.concat(this.itemToAdd);\n                        this.itemToAdd = \"\"; // Clears the text box, because it's bound to the \"itemToAdd\" observable\n                    }\n                }.bind(this);  // Ensure that \"this\" is always this view model\n            };\n\n\n            const listBox = document.querySelector('smart-list-box');\n            const textBox = document.querySelector('smart-text-box');\n            const button = document.querySelector('smart-button');\n            const model = new SimpleListModel([\"Alpha\", \"Beta\", \"Gamma\"]);\n\n            listBox.applyDataContext(model);\n            textBox.applyDataContext(model);\n            button.applyDataContext(model);\n\n        }\n    </script>\n</head>\n<body>\n    <smart-list-box style=\"float:left;\"  data-source=\"{{items}}\"  id=\"list\">\n    </smart-list-box>\n    <smart-text-box value=\"{{itemToAdd}}\">\n    </smart-text-box>\n    <div style=\"float: left; margin-left:100px;\">\n        <smart-button (click)=\"addItem()\" id=\"changeSource\">Add</smart-button>\n    </div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Modules to Smart Elements\nDESCRIPTION: Example of adding a custom ColorModule to a smart-button element. This snippet demonstrates how to extend existing elements with new functionality through modules and how to implement property observers.\nSOURCE: https://github.com/htmlelements/smart-custom-element/blob/master/README.md#2025-04-19_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <link rel=\"stylesheet\" href=\"../../source/styles/smart.default.css\" type=\"text/css\" />\n    <link rel=\"stylesheet\" href=\"../styles/demos.css\" type=\"text/css\" />\n    <script type=\"text/javascript\" src=\"../../source/smart.elements.js\"></script>\n    <script>\n        class ColorModule  {\n             static get properties() {\n                 const properties =\n                 {\n                     'color': {\n                         value: 'red',\n                         type: 'string',\n                         observer: 'setColor'\n                     }\n                 }\n\n                 return properties;\n             }\n\n            attached() {\n            }\n\n            detached() {\n            }\n\n            created() {\n            }\n\n            ready() {\n                this.ownerElement.$.button.style.color = this.color;\n            }\n\n            setColor(oldColor, color) {\n                this.ownerElement.$.button.style.color = this.color;\n            }\n        }\n  \n        window.Smart.Elements.whenRegistered('smart-button', function (proto) {\n            proto.addModule(ColorModule);\n        });\n    </script>\n\n    <script>\n        function clickMe(event) {\n            let button = document.getElementById(\"button\");\n            button.color = 'green';\n        }\n    </script>\n</head>\n<body>\n    <smart-button id=\"button\" onclick=\"clickMe(event)\">Click Me</smart-button>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Repeat Button Element in JavaScript\nDESCRIPTION: Example of extending Smart.Button to create a repeat button element with configurable delay properties and mouse event handling. The button fires click events repeatedly while held down, with customizable initial and repeat delays.\nSOURCE: https://github.com/htmlelements/smart-custom-element/blob/master/README.md#2025-04-19_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nSmart('smart-repeat-button', class RepeatButton extends Smart.Button {\n    // button's properties.\n    static get properties() {\n        return {\n            'delay': {\n                value: 50,\n                type: 'number'\n            },\n            'initialDelay': {\n                value: 150,\n                type: 'number'\n            }\n        };\n    }\n\n    static get listeners() {\n        return {\n            'button.mousedown': '_startRepeat',\n            'button.mouseenter': '_updateInBoundsFlag',\n            'button.mouseleave': '_updateInBoundsFlag',\n            'document.mouseup': '_stopRepeat'\n        };\n    }\n\n    _updateInBoundsFlag(event) {\n        const that = this;\n\n        that._isPointerInBounds = true;\n\n        if (event.type === 'mouseleave') {\n            that._isPointerInBounds = false;\n        }\n    }\n\n    _startRepeat(event) {\n        const that = this;\n\n        if (!that._initialTimer) {\n            that._initialTimer = setTimeout(function () {\n                that._repeatTimer = setInterval(() => {\n                    if (that._isPointerInBounds) {\n                        const buttons = ('buttons' in event) ? event.buttons : event.which;\n                        that.$.fireEvent('click', { buttons: buttons });\n                    }\n                }, that.delay);\n                that._initialTimer = null;\n            }, that.initialDelay);\n        }\n    }\n\n    _stopRepeat() {\n        const that = this;\n\n        if (that._repeatTimer) {\n            clearInterval(that._repeatTimer);\n            that._repeatTimer = null;\n        }\n\n        if (that._initialTimer) {\n            clearTimeout(that._initialTimer);\n            that._initialTimer = null;\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Template Structure with Data Binding\nDESCRIPTION: Shows how to create a template method that returns HTML structure with data binding using double square brackets for one-way binding.\nSOURCE: https://github.com/htmlelements/smart-custom-element/blob/master/README.md#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n    template() {\n        return '<button class=\\'smart-button\\' inner-h-t-m-l=\\'[[innerHTML]]\\' id=\\'button\\' type=\\'[[type]]\\' name=\\'[[name]]\\' value=\\'[[value]]\\' disabled=\\'[[disabled]]\\' role=\\'button\\'></button>';\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Properties in Smart Custom Elements\nDESCRIPTION: Example showing how to define complex nested properties in Smart Custom Elements, featuring a paging configuration with enabled flag, page size, and page index properties. Includes type validation and custom validators.\nSOURCE: https://github.com/htmlelements/smart-custom-element/blob/master/README.md#2025-04-19_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n      'paging': {\n                value: {\n                    'enabled': {\n                        value: false,\n                        type: 'boolean'\n                    },                 \n                    'pageSize': {\n                        value: 10,\n                        type: 'int',\n                        validator: 'pageSizeValidator'\n                    },\n                    'pageIndex': {\n                        value: 0,\n                        type: 'int',\n                        validator: 'pageIndexValidator'\n                    }                    \n                },\n                type: 'object'\n            }\n```\n\n----------------------------------------\n\nTITLE: Installing Smart Custom Element via npm and including in HTML\nDESCRIPTION: Shows how to install the library using npm and include it in an HTML file. Also mentions an optional polyfill for browsers without custom elements support.\nSOURCE: https://github.com/htmlelements/smart-custom-element/blob/master/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install smart-custom-element --save\n```\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"source/smart.element.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: HTML Implementation of Custom Element\nDESCRIPTION: HTML example showing how to use a custom element with proper imports and event handling on the element.\nSOURCE: https://github.com/htmlelements/smart-custom-element/blob/master/README.md#2025-04-19_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <link rel=\"stylesheet\" href=\"styles/smart.default.css\" type=\"text/css\" />\n    <script type=\"text/javascript\" src=\"../../source/smart.element.js\"></script>\n    <script type=\"text/javascript\" src=\"../../source/myelement.js\"></script>\n     <script>\n         window.onload = function () {\n             var myElement = document.querySelector('my-element');\n             myElement.onchange = function () {\n                 console.log(myElement.check);\n             }\n         }\n    </script>\n</head>\n<body>\n    <my-element></my-element>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Template with Content Insertion Point\nDESCRIPTION: Example of defining a template with a content insertion point using the <content> tag to determine where child elements are placed.\nSOURCE: https://github.com/htmlelements/smart-custom-element/blob/master/README.md#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntemplate() {\n    return `<div>\n        <svg width=\"100%\" height=\"100%\" viewPort=\"0 0 100 100\" viewBox=\"0 0 100 100\">\n           <circle id=\"value\" class =\"smart-value\" r=\"50\" cx=\"50\" cy=\"50\" transform=\"rotate(270 50 50)\"></circle>\n        </svg>\n        <div class=\"smart-label-container\"><content></content><div id=\"label\" class=\"smart-label\"></div></div>\n    </div>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Module Naming Best Practice in Smart Elements\nDESCRIPTION: A code snippet showing the recommended practice for implementing a 'moduleName' property when creating custom modules for Smart Elements. This helps with module identification and management.\nSOURCE: https://github.com/htmlelements/smart-custom-element/blob/master/README.md#2025-04-19_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nstatic get moduleName() {\n    return 'MyModule';\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Utility Class Assignment\nDESCRIPTION: Shows how to add a custom utility class that can be accessed through Smart.Utilities.\nSOURCE: https://github.com/htmlelements/smart-custom-element/blob/master/README.md#2025-04-19_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nSmart.Utilities.Assign('defaultNumericProcessor', class defaultNumericProcessor {\n}\n```"
  }
]