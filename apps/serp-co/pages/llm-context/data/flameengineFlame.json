[
  {
    "owner": "flame-engine",
    "repo": "flame",
    "content": "TITLE: Creating Custom SpriteAnimation with Frame Data in Dart\nDESCRIPTION: Shows how to create a custom SpriteAnimation by retrieving individual SpriteAnimationFrameData from a SpriteSheet using different methods.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/images.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nfinal animation = SpriteAnimation.fromFrameData(\n  imageInstance, \n  SpriteAnimationData([\n    spriteSheet.createFrameDataFromId(1, stepTime: 0.1), // by id\n    spriteSheet.createFrameData(2, 3, stepTime: 0.3), // row, column\n    spriteSheet.createFrameDataFromId(4, stepTime: 0.1), // by id\n  ]),\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Callbacks on SpriteAnimationGroupComponent Tickers\nDESCRIPTION: This example demonstrates how to access and set callbacks on animation tickers within a SpriteAnimationGroupComponent. It allows responding to animation events for specific states like idle, running, or jumping.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_23\n\nLANGUAGE: dart\nCODE:\n```\nenum RobotState { idle, running, jump }\n\nfinal running = await loadSpriteAnimation(/* omitted */);\nfinal idle = await loadSpriteAnimation(/* omitted */);\n\nfinal robot = SpriteAnimationGroupComponent<RobotState>(\n  animations: {\n    RobotState.running: running,\n    RobotState.idle: idle,\n  },\n  current: RobotState.idle,\n);\n\nrobot.animationTickers?[RobotState.running]?.onStart = () {\n  // Do something on start of running animation.\n};\n\nrobot.animationTickers?[RobotState.jump]?.onStart = () {\n  // Do something on start of jump animation.\n};\n\nrobot.animationTickers?[RobotState.jump]?.onComplete = () {\n  // Do something on complete of jump animation.\n};\n\nrobot.animationTickers?[RobotState.idle]?.onFrame = (currentIndex) {\n  // Do something based on current frame index of idle animation.\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Animation Completion Events in Flame\nDESCRIPTION: This code demonstrates how to listen for animation completion events using the 'completed' property of SpriteAnimationTicker. You can use await or whenComplete to perform actions when animations finish running.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nawait animationTicker.completed;\n\ndoSomething();\n\n// or alternatively\n\nanimationTicker.completed.whenComplete(doSomething);\n```\n\n----------------------------------------\n\nTITLE: Composing Components in Flame Engine (Dart)\nDESCRIPTION: Illustrates how to create a composite component that manages the visibility of its child components.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass GameOverPanel extends PositionComponent {\n  bool visible = false;\n  final Image spriteImage;\n\n  GameOverPanel(this.spriteImage);\n\n  @override\n  void onLoad() {\n    final gameOverText = GameOverText(spriteImage); // GameOverText is a Component\n    final gameOverButton = GameOverButton(spriteImage); // GameOverRestart is a SpriteComponent\n\n    add(gameOverText);\n    add(gameOverButton);\n  }\n\n  @override\n  void render(Canvas canvas) {\n    if (visible) {\n    } // If not visible none of the children will be rendered\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a SpriteComponent in Flame Game\nDESCRIPTION: This code shows how to create a SpriteComponent with a loaded sprite image, set its size, position, and angle, and add it to the game. SpriteComponent is the most common implementation of PositionComponent for displaying static images.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame/components/component.dart';\n\nclass MyGame extends FlameGame {\n  late final SpriteComponent player;\n\n  @override\n  Future<void> onLoad() async {\n    final sprite = await Sprite.load('player.png');\n    final size = Vector2.all(128.0);\n    final player = SpriteComponent(size: size, sprite: sprite);\n\n    // Vector2(0.0, 0.0) by default, can also be set in the constructor\n    player.position = Vector2(10, 20);\n\n    // 0 by default, can also be set in the constructor\n    player.angle = 0;\n\n    // Adds the component\n    add(player);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Player Component\nDESCRIPTION: Example of creating a basic player component using SpriteComponent with sprite loading\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/README.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame/components.dart';\nimport 'package:flame/geometry.dart';\nimport 'package:flame/extensions.dart';\n\nclass Player extends SpriteComponent {\n  Player({super.position}) :\n    super(size: Vector2.all(200), anchor: Anchor.center);\n\n  @override\n  Future<void> onLoad() async {\n    sprite = await Sprite.load('player.png');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Event Callbacks on SpriteAnimationTicker\nDESCRIPTION: This example shows how to use the onStart, onFrame, and onComplete callbacks with SpriteAnimationTicker. These callbacks allow you to trigger actions at specific points during animation playback.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\nfinal animationTicker = SpriteAnimationTicker(animation)\n  ..onStart = () {\n    // Do something on start.\n  };\n\nfinal animationTicker = SpriteAnimationTicker(animation)\n  ..onComplete = () {\n    // Do something on completion.\n  };\n\nfinal animationTicker = SpriteAnimationTicker(animation)\n  ..onFrame = (index) {\n    if (index == 1) {\n      // Do something for the second frame.\n    }\n  };\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic FlameGame with Component System\nDESCRIPTION: A complete example showing how to implement a simple FlameGame with a custom sprite component and world. Demonstrates component creation, asset loading, and game initialization.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/game.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame/components.dart';\nimport 'package:flame/game.dart';\nimport 'package:flutter/widgets.dart';\n\n/// A component that renders the crate sprite, with a 16 x 16 size.\nclass MyCrate extends SpriteComponent {\n  MyCrate() : super(size: Vector2.all(16));\n\n  @override\n  Future<void> onLoad() async {\n    sprite = await Sprite.load('crate.png');\n  }\n}\n\nclass MyWorld extends World {\n  @override\n  Future<void> onLoad() async {\n    await add(MyCrate());\n  }\n}\n\nvoid main() {\n  final myGame = FlameGame(world: MyWorld());\n  runApp(\n    GameWidget(game: myGame),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding the Player Component on Load in Dart\nDESCRIPTION: This snippet modifies the SpaceShooterGame class to include logic for adding the player component in the onLoad method. It sets the player's position, width, height, and anchor, which allows for proper rendering in the center of the screen.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/space_shooter/step_1.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass SpaceShooterGame extends FlameGame {\n  @override\n  Future<void> onLoad() async {\n    await super.onLoad();\n\n    add(\n      Player()\n        ..position = size / 2\n        ..width = 50\n        ..height = 100\n        ..anchor = Anchor.center,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Components in Dart (Flame Engine)\nDESCRIPTION: Demonstrates different ways to add child components to a parent component, including constructor initialization and method calls.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  final component1 = Component(children: [Component(), Component()]);\n  final component2 = Component();\n  component2.add(Component());\n  component2.addAll([Component(), Component()]);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Heart Health Component in Dart\nDESCRIPTION: Creates a HeartHealthComponent class that extends SpriteGroupComponent to display player health in the HUD. It loads heart sprites and updates based on the player's current health.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_6.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:ember_quest/ember_quest.dart';\nimport 'package:flame/components.dart';\n\nenum HeartState {\n  available,\n  unavailable,\n}\n\nclass HeartHealthComponent extends SpriteGroupComponent<HeartState>\n    with HasGameReference<EmberQuestGame> {\n  final int heartNumber;\n\n  HeartHealthComponent({\n    required this.heartNumber,\n    required super.position,\n    required super.size,\n    super.scale,\n    super.angle,\n    super.anchor,\n    super.priority,\n  });\n\n  @override\n  Future<void> onLoad() async {\n    await super.onLoad();\n    final availableSprite = await game.loadSprite(\n      'heart.png',\n      srcSize: Vector2.all(32),\n    );\n\n    final unavailableSprite = await game.loadSprite(\n      'heart_half.png',\n      srcSize: Vector2.all(32),\n    );\n\n    sprites = {\n      HeartState.available: availableSprite,\n      HeartState.unavailable: unavailableSprite,\n    };\n\n    current = HeartState.available;\n  }\n\n  @override\n  void update(double dt) {\n    if (game.health < heartNumber) {\n      current = HeartState.unavailable;\n    } else {\n      current = HeartState.available;\n    }\n    super.update(dt);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Spawn Times with SpawnComponent - Dart\nDESCRIPTION: This snippet shows how to use the periodRange constructor of SpawnComponent to spawn components at variable intervals between a minimum and maximum period within a circular area.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_26\n\nLANGUAGE: dart\nCODE:\n```\nSpawnComponent.periodRange(\n  factory: (i) => MyComponent(size: Vector2(10, 20)),\n  minPeriod: 0.5,\n  maxPeriod: 10,\n  area: Circle(Vector2(100, 200), 150),\n);\n```\n\n----------------------------------------\n\nTITLE: Loading Assets in Flame Engine (Dart)\nDESCRIPTION: This snippet demonstrates how to load various types of assets (audio, images, and tiled maps) in a Flame game. It includes loading individual files and bulk loading of images.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/structure.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MyGame extends FlameGame {\n  @override\n  Future<void> onLoad() async {\n    await FlameAudio.play('explosion.mp3');\n\n    // Load some images\n    await Flame.images.load('player.png');\n    await Flame.images.load('enemy.png');\n    \n    // Or load all images in your images folder\n    await Flame.images.loadAllImages();\n\n    final map1 = await TiledComponent.load('level.tmx', tileSize);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Game Over Menu with Flutter and Flame - Dart\nDESCRIPTION: This snippet implements the GameOver class that appears when the game ends. It features a reset button that restarts the game and utilizes Flutter's UI elements to display information to the player.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_7.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nimport '../ember_quest.dart';\n\nclass GameOver extends StatelessWidget {\n  // Reference to parent game.\n  final EmberQuestGame game;\n  const GameOver({super.key, required this.game});\n\n  @override\n  Widget build(BuildContext context) {\n    const blackTextColor = Color.fromRGBO(0, 0, 0, 1.0);\n    const whiteTextColor = Color.fromRGBO(255, 255, 255, 1.0);\n\n    return Material(\n      color: Colors.transparent,\n      child: Center(\n        child: Container(\n          padding: const EdgeInsets.all(10.0),\n          height: 200,\n          width: 300,\n          decoration: const BoxDecoration(\n            color: blackTextColor,\n            borderRadius: const BorderRadius.all(\n              Radius.circular(20),\n            ),\n          ),\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n              const Text(\n                'Game Over',\n                style: TextStyle(\n                  color: whiteTextColor,\n                  fontSize: 24,\n                ),\n              ),\n              const SizedBox(height: 40),\n              SizedBox(\n                width: 200,\n                height: 75,\n                child: ElevatedButton(\n                  onPressed: () {\n                    game.reset();\n                    game.overlays.remove('GameOver');\n                  },\n                  style: ElevatedButton.styleFrom(\n                    backgroundColor: whiteTextColor,\n                  ),\n                  child: const Text(\n                    'Play Again',\n                    style: TextStyle(\n                      fontSize: 28.0,\n                      color: blackTextColor,\n                    ),\n                  ),\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Loading Aseprite Animation Data in Dart\nDESCRIPTION: Shows how to load and create a SpriteAnimation from Aseprite JSON data and an image file in Flame.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/images.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nfinal image = await images.load('chopper.png');\nfinal jsonData = await assets.readJson('chopper.json');\nfinal animation = SpriteAnimation.fromAsepriteData(image, jsonData);\n```\n\n----------------------------------------\n\nTITLE: Custom Component with Tap Event Handling\nDESCRIPTION: Demonstrates a complete implementation of a custom component with tap event handling, including visual feedback for tap states and manual point containment testing.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/inputs/tap_events.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyComponent extends Component with TapCallbacks {\n  final _rect = const Rect.fromLTWH(0, 0, 100, 100);\n  final _paint = Paint();\n  bool _isPressed = false;\n\n  @override\n  bool containsLocalPoint(Vector2 point) => _rect.contains(point.toOffset());\n\n  @override\n  void onTapDown(TapDownEvent event) => _isPressed = true;\n\n  @override\n  void onTapUp(TapUpEvent event) => _isPressed = false;\n\n  @override\n  void onTapCancel(TapCancelEvent event) => _isPressed = false;\n\n  @override\n  void render(Canvas canvas) {\n    _paint.color = _isPressed? Colors.red : Colors.white;\n    canvas.drawRect(_rect, _paint);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Low-Level Game Implementation\nDESCRIPTION: Example of implementing a custom game class using the low-level Game API, showing the basic structure with render and update methods and GameWidget integration.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/game.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass MyGameSubClass extends Game {\n  @override\n  void render(Canvas canvas) {\n    // ...\n  }\n\n  @override\n  void update(double dt) {\n    // ...\n  }\n}\n\nvoid main() {\n  final myGame = MyGameSubClass();\n  runApp(\n    GameWidget(\n      game: myGame,\n    )\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Game World\nDESCRIPTION: Example of creating a game world by extending World class and setting up basic game structure\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/README.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame/game.dart';\nimport 'package:flame/components.dart';\nimport 'package:flutter/widgets.dart';\n\nvoid main() {\n  runApp(\n    GameWidget(\n      game: FlameGame(world: MyWorld()),\n    ),\n  );\n}\n\nclass MyWorld extends World {\n  @override\n  Future<void> onLoad() async {\n    add(Player(position: Vector2(0, 0)));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SpriteAnimationGroupComponent with State Management\nDESCRIPTION: This code shows how to use SpriteAnimationGroupComponent to manage multiple animations with enum states. It allows switching between different animations (like idle and running) at runtime by changing the 'current' property.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\nenum RobotState {\n  idle,\n  running,\n}\n\nfinal running = await loadSpriteAnimation(/* omitted */);\nfinal idle = await loadSpriteAnimation(/* omitted */);\n\nfinal robot = SpriteAnimationGroupComponent<RobotState>(\n  animations: {\n    RobotState.running: running,\n    RobotState.idle: idle,\n  },\n  current: RobotState.idle,\n);\n\n// Changes current animation to \"running\"\nrobot.current = RobotState.running;\n```\n\n----------------------------------------\n\nTITLE: Setting up Enemy Spawning with SpawnComponent in Dart\nDESCRIPTION: This snippet demonstrates how to use SpawnComponent to automatically generate enemies at regular intervals. It defines the spawn area, frequency, and factory function for creating new Enemy instances.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/space_shooter/step_5.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nadd(\n  SpawnComponent(\n    factory: (index) {\n      return Enemy();\n    },\n    period: 1,\n    area: Rectangle.fromLTWH(0, 0, size.x, -Enemy.enemySize),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing the onLoad Lifecycle Method for Asset Loading\nDESCRIPTION: This method loads all required image assets for the game and initializes the camera and game elements. It's called when the game first loads and prepares all necessary resources.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_3.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n@override\n  Future<void> onLoad() async {\n    await images.loadAll([\n      'block.png',\n      'ember.png',\n      'ground.png',\n      'heart_half.png',\n      'heart.png',\n      'star.png',\n      'water_enemy.png',\n    ]);\n    \n    camera.viewfinder.anchor = Anchor.topLeft;\n    initializeGame();\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Animation in a Flame Game Class\nDESCRIPTION: Shows how to implement an animation within a Flame Game class, including initialization, updating, and rendering the animation.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/images.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nclass MyGame extends Game {\n  SpriteAnimationTicker a;\n\n  MyGame() {\n    a = SpriteAnimationTicker(SpriteAnimation(...));\n  }\n\n  void update(double dt) {\n    a.update(dt);\n  }\n\n  void render(Canvas c) {\n    a.getSprite().render(c);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Flame Game Setup\nDESCRIPTION: Minimal example showing how to set up a basic Flame game using GameWidget\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/README.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame/game.dart';\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(\n    GameWidget(\n      game: FlameGame(),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HasCollisionDetection Mixin in Flame Game\nDESCRIPTION: Adds collision detection capabilities to a Flame game by mixing in the HasCollisionDetection mixin. This allows the game to track components that can collide.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/collision_detection.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MyGame extends FlameGame with HasCollisionDetection {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Flame Game in Dart\nDESCRIPTION: This snippet shows the initial setup for a Flame game in Dart. It imports the necessary packages, creates a FlameGame instance, and runs the game using GameWidget.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step1.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame/game.dart';\nimport 'package:flutter/widgets.dart';\n\nvoid main() {\n  final game = FlameGame();\n  runApp(GameWidget(game: game));\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Flame Game and Widget in Dart\nDESCRIPTION: This snippet demonstrates the creation of a basic game class derived from FlameGame and its integration with the Flutter widget tree using GameWidget. It serves as the foundation for building a game, though initially displays just a black screen.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/space_shooter/step_1.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:flame/game.dart';\n\nclass SpaceShooterGame extends FlameGame {\n}\n\nvoid main() {\n  runApp(GameWidget(game: SpaceShooterGame()));\n}\n```\n\n----------------------------------------\n\nTITLE: Using FlameBlocReader Mixin for Bloc Access\nDESCRIPTION: Demonstrates how to use the FlameBlocReader mixin in a Player component to access and interact with PlayerStatsBloc.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_bloc/bloc.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass Player extends PositionComponent\n    with FlameBlocReader<PlayerStatsBloc, PlayerStatsState> {\n\n  void takeHit() {\n    bloc.add(const PlayerDamaged());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Game Resources in Ember Quest - Dart\nDESCRIPTION: This snippet is part of the EmberQuestGame class implementation. It handles loading game assets, initializing the camera settings, and setting up the player's initial state. It also defines how the game state is reset after game over.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_7.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n@override\nFuture<void> onLoad() async {\n  await images.loadAll([\n      'block.png',\n      'ember.png',\n      'ground.png',\n      'heart_half.png',\n      'heart.png',\n      'star.png',\n      'water_enemy.png',\n  ]);\n  \ncamera.viewfinder.anchor = Anchor.topLeft;\n  initializeGame(true);\n}\n\nvoid initializeGame(bool loadHud) {\n  // Assume that size.x < 3200\n  final segmentsToLoad = (size.x / 640).ceil();\n  segmentsToLoad.clamp(0, segments.length);\n\n  for (var i = 0; i <= segmentsToLoad; i++) {\n    loadGameSegments(i, (640 * i).toDouble());\n  }\n\n  _ember = EmberPlayer(\n    position: Vector2(128, canvasSize.y - 128),\n  );\n  add(_ember);\n  if (loadHud) {\n    add(Hud());\n  }\n}\n\nvoid reset() {\n  starsCollected = 0;\n  health = 3;\n  initializeGame(false);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Player Component in Dart\nDESCRIPTION: This snippet implements a basic player component as a subclass of PositionComponent, specifying how to render a white square on the game canvas. It includes dependencies on Flutter's material design and Flame's components.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/space_shooter/step_1.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame/components.dart';\nimport 'package:flutter/material.dart';\n\nclass Player extends PositionComponent {\n  static final _paint = Paint()..color = Colors.white;\n\n  @override\n  void render(Canvas canvas) {\n    canvas.drawRect(size.toRect(), _paint);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SpriteGroupComponent with State Management\nDESCRIPTION: This code shows how to create a SpriteGroupComponent that manages multiple static sprites with different states. The example demonstrates loading sprites for pressed and unpressed button states and switching between them.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_24\n\nLANGUAGE: dart\nCODE:\n```\nclass PlayerComponent extends SpriteGroupComponent<ButtonState>\n    with HasGameReference<SpriteGroupExample>, TapCallbacks {\n  @override\n  Future<void>? onLoad() async {\n    final pressedSprite = await gameRef.loadSprite(/* omitted */);\n    final unpressedSprite = await gameRef.loadSprite(/* omitted */);\n\n    sprites = {\n      ButtonState.pressed: pressedSprite,\n      ButtonState.unpressed: unpressedSprite,\n    };\n\n    current = ButtonState.unpressed;\n  }\n\n  // tap methods handler omitted...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Explosion Animation on Collision\nDESCRIPTION: Updates the onCollisionStart method in the Enemy class to add an explosion animation when hit by a bullet.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/space_shooter/step_6.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n  @override\n  void onCollisionStart(\n    Set<Vector2> intersectionPoints,\n    PositionComponent other,\n  ) {\n    super.onCollisionStart(intersectionPoints, other);\n\n    if (other is Bullet) {\n      removeFromParent();\n      other.removeFromParent();\n      game.add(Explosion(position: position));\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Handling Component Visibility in Dart\nDESCRIPTION: Demonstrates how to properly handle the removal and addition of a child component in quick succession, ensuring the component has finished removing before being added again.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nvoid show() async {\n  // Need to await the [removed] future first, just in case the\n  // component is still in the process of being removed.\n  await myChildComponent.removed;\n  add(myChildComponent);\n}\n\nvoid hide() {\n  remove(myChildComponent);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Flame Game Structure in Dart\nDESCRIPTION: This snippet shows the initial setup for a Flame game in Dart. It imports necessary packages, creates a FlameGame instance, and runs the game using GameWidget.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_1.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame/game.dart';\nimport 'package:flutter/widgets.dart';\n\nvoid main() {\n  final game = FlameGame();\n  runApp(GameWidget(game: game));\n}\n```\n\n----------------------------------------\n\nTITLE: Basic TextComponent Implementation in Dart\nDESCRIPTION: Simple example showing how to add a basic text component to a Flame game\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/text_rendering.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MyGame extends FlameGame {\n  @override\n  void onLoad() {\n    add(\n      TextComponent(\n        text: 'Hello, Flame',\n        position: Vector2.all(16.0),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing StockPile Component in Flame with Dart\nDESCRIPTION: This snippet initializes the StockPile class as a position component in the Klondike game, managing cards not in play. It shows how to acquire cards, ensuring they are face down and correctly ordered. Dependencies include the PositionComponent class and the KlondikeGame.cardSize for sizing.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step4.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass StockPile extends PositionComponent {\n  StockPile({super.position}) : super(size: KlondikeGame.cardSize);\n\n  /// Which cards are currently placed onto this pile. The first card in the\n  /// list is at the bottom, the last card is on top.\n  final List<Card> _cards = [];\n\n  void acquireCard(Card card) {\n    assert(!card.isFaceUp);\n    card.position = position;\n    card.priority = _cards.length;\n    _cards.add(card);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Drag Event Implementation in Flame\nDESCRIPTION: Basic example showing how to implement drag event handling in a Flame component using the DragCallbacks mixin. The component extends PositionComponent and implements a basic drag start handler.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/inputs/drag_events.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MyComponent extends PositionComponent with DragCallbacks {\n  MyComponent() : super(size: Vector2(180, 120));\n\n   @override\n   void onDragStart(DragStartEvent event) {\n     // Do something in response to a drag event\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop Card Return Animation\nDESCRIPTION: Implements dynamic card return animation for invalid drag and drop scenarios, with support for multiple attached cards\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step5.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\ndoMove(\n      _whereCardStarted,\n      onComplete: () {\n        pile!.returnCard(this);\n      },\n    );\n    if (attachedCards.isNotEmpty) {\n      attachedCards.forEach((card) {\n        final offset = card.position - position;\n        card.doMove(\n          _whereCardStarted + offset,\n          onComplete: () {\n            pile!.returnCard(card);\n          },\n        );\n      });\n      attachedCards.clear();\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing canAcceptCard in FoundationPile/TableauPile Dart\nDESCRIPTION: This code implements the `canAcceptCard` method for the `FoundationPile` and `TableauPile` classes. The `FoundationPile` implementation checks if the card's suit matches the pile's suit and if the card's rank is one higher than the top card's rank. The `TableauPile` implementation checks if the pile is empty and the card is a king, or if the card's suit color is opposite to the top card's suit color and the card's rank is one less than the top card's rank.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step4.md#2025-04-20_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\n\"class FoundationPile ... implements Pile {\\n  ...\\n  @override\\n  bool canAcceptCard(Card card) {\\n    final topCardRank = _cards.isEmpty? 0 : _cards.last.rank.value;\\n    return card.suit == suit && card.rank.value == topCardRank + 1;\\n  }\\n}\"\n```\n\nLANGUAGE: dart\nCODE:\n```\n\"class TableauPile ... implements Pile {\\n  ...\\n  @override\\n  bool canAcceptCard(Card card) {\\n    if (_cards.isEmpty) {\\n      return card.rank.value == 13;\\n    } else {\\n      final topCard = _cards.last;\\n      return card.suit.isRed == !topCard.suit.isRed &&\\n          card.rank.value == topCard.rank.value - 1;\\n    }\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Frame SpriteAnimationComponent\nDESCRIPTION: This example shows how to create a SpriteAnimationComponent using individual sprite images. It loads three separate images and combines them into an animation with a specified step time.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\n@override\nFuture<void> onLoad() async {\n  final sprites = [0, 1, 2]\n      .map((i) => Sprite.load('player_$i.png'));\n  final animation = SpriteAnimation.spriteList(\n    await Future.wait(sprites),\n    stepTime: 0.01,\n  );\n  this.player = SpriteAnimationComponent(\n    animation: animation,\n    size: Vector2.all(64.0),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Broadphase Collision Detection in Flame\nDESCRIPTION: Example showing how to implement a custom broadphase collision detection system by extending the FlameGame class with HasCollisionDetection and setting up a custom collision detection algorithm.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/collision_detection.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass MyGame extends FlameGame with HasCollisionDetection {\n  MyGame() : super() {\n    collisionDetection =\n        StandardCollisionDetection(broadphase: MagicAlgorithmBroadphase());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Assets in Flame Engine for Ember Quest\nDESCRIPTION: This snippet demonstrates how to load game assets using Flame's built-in caching system. It creates a new game class and overrides the onLoad method to preload all required image assets.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_2.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame/game.dart';\n\nclass EmberQuestGame extends FlameGame {\n  EmberQuestGame();\n\n  @override\n  Future<void> onLoad() async {\n    await images.loadAll([\n      'block.png',\n      'ember.png',\n      'ground.png',\n      'heart_half.png',\n      'heart.png',\n      'star.png',\n      'water_enemy.png',\n    ]);\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CollisionCallbacks in a Component\nDESCRIPTION: Adds collision handling to a PositionComponent by implementing the CollisionCallbacks mixin. This allows the component to react to collisions with other components.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/collision_detection.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyCollidable extends PositionComponent with CollisionCallbacks {\n  @override\n  void onCollision(Set<Vector2> points, PositionComponent other) {\n    if (other is ScreenHitbox) {\n      //...\n    } else if (other is YourOtherComponent) {\n      //...\n    }\n  }\n\n  @override\n  void onCollisionEnd(PositionComponent other) {\n    if (other is ScreenHitbox) {\n      //...\n    } else if (other is YourOtherComponent) {\n      //...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Optimized Object Reuse in Flame Component Update and Render Methods\nDESCRIPTION: This improved version demonstrates how to optimize performance by reusing Vector2 and Paint objects across frames, storing them as class members instead of creating new instances in each update and render call.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/other/performance.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyComponent extends PositionComponent {\n  final _direction = Vector2(10, 20);\n  final _paint = Paint();\n\n  @override\n  void update(double dt) {\n    position.setValues(\n      position.x + _direction.x * dt, \n      position.y + _direction.y * dt,\n    );\n  }\n\n  @override\n  void render(Canvas canvas) {\n    canvas.drawRect(size.toRect(), _paint);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ScaleEffect.to in Flame Engine\nDESCRIPTION: Creates a ScaleEffect.to that sets a component's scale to exactly 50% of its original size over 0.5 seconds.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/effects.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nfinal effect = ScaleEffect.to(\n  Vector2.all(0.5),\n  EffectController(duration: 0.5),\n);\n```\n\n----------------------------------------\n\nTITLE: Suit Singleton List in Dart\nDESCRIPTION: This snippet shows the static list of `Suit` objects which holds the singleton instances.  It is initialized lazily to ensure that the image cache is loaded before the sprites are created. This is important for performance and to avoid errors when retrieving images from the global cache.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step3.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n\"  static final List<Suit> _singletons = [\\n    Suit._(0, '♥', 1176, 17, 172, 183),\\n    Suit._(1, '♦', 973, 14, 177, 182),\\n    Suit._(2, '♣', 974, 226, 184, 172),\\n    Suit._(3, '♠', 1178, 220, 176, 182),\\n  ];\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Riverpod-aware Flame Game and Components in Dart\nDESCRIPTION: This code snippet demonstrates how to create a Flame game that integrates with Riverpod. It shows the implementation of a game class using RiverpodGameMixin and a component class using RiverpodComponentMixin. The example illustrates how to subscribe to Riverpod providers and update game state accordingly.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_riverpod/riverpod.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n/// An excerpt from the Example. Check it out!\nclass RefExampleGame extends FlameGame with RiverpodGameMixin {\n  @override\n  Future<void> onLoad() async {\n    await super.onLoad();\n    add(TextComponent(text: 'Flame'));\n    add(RiverpodAwareTextComponent());\n  }\n}\n\nclass RiverpodAwareTextComponent extends PositionComponent\n    with RiverpodComponentMixin {\n  late TextComponent textComponent;\n  int currentValue = 0;\n\n  @override\n  void onMount() {\n    addToGameWidgetBuild(() {\n      ref.listen(countingStreamProvider, (p0, p1) {\n        if (p1.hasValue) {\n          currentValue = p1.value!;\n          textComponent.text = '$currentValue';\n        }\n      });\n    });\n    super.onMount();\n    add(textComponent = TextComponent(position: position + Vector2(0, 27)));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up CurvedEffectController in Dart for Flame Engine\nDESCRIPTION: Instantiates a CurvedEffectController that grows non-linearly from 0 to 1 over the specified duration following the provided curve.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/effects.md#2025-04-20_snippet_23\n\nLANGUAGE: dart\nCODE:\n```\nfinal ec = CurvedEffectController(0.5, Curves.easeOut);\n```\n\n----------------------------------------\n\nTITLE: Creating a World with Collision Detection\nDESCRIPTION: Implements collision detection for a specific World component, allowing for multiple collision detection systems within a single FlameGame.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/collision_detection.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass CollisionDetectionWorld extends World with HasCollisionDetection {}\n```\n\n----------------------------------------\n\nTITLE: Loading and Adding Lottie Animation in Flame Game (Dart)\nDESCRIPTION: This snippet demonstrates how to load a Lottie animation from an asset and add it to a Flame game as a LottieComponent. It shows the usage within the onLoad method of a FlameGame subclass.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_lottie/flame_lottie.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MyGame extends FlameGame {\n  ...\n  @override\n  Future<void> onLoad() async {\n    final asset = Lottie.asset('assets/LottieLogo1.json');\n    final animation = await loadLottie(asset);\n    add(\n      LottieComponent(\n        animation,\n        repeating: true, // Continuously loop the animation.\n        size: Vector2.all(400),\n      ),\n    );\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Spawning Components with SpawnComponent in Flame - Dart\nDESCRIPTION: This snippet demonstrates how to create a SpawnComponent that regularly spawns instances of MyComponent within a defined circular area. The factory function takes an integer index and is called every specified period.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_25\n\nLANGUAGE: dart\nCODE:\n```\nSpawnComponent(\n  factory: (i) => MyComponent(size: Vector2(10, 20)),\n  period: 0.5,\n  area: Circle(Vector2(100, 200), 150),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Game-Level Keyboard Input Handling in Flame\nDESCRIPTION: Example of implementing the KeyboardEvents mixin on a FlameGame class to handle keyboard inputs at the game level. Demonstrates handling space key presses with and without alt modifiers.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/inputs/keyboard_input.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MyGame extends FlameGame with KeyboardEvents {\n  // ...\n  @override\n  KeyEventResult onKeyEvent(\n    KeyEvent event,\n    Set<LogicalKeyboardKey> keysPressed,\n  ) {\n    final isKeyDown = event is KeyDownEvent;\n\n    final isSpace = keysPressed.contains(LogicalKeyboardKey.space);\n\n    if (isSpace && isKeyDown) {\n      if (keysPressed.contains(LogicalKeyboardKey.altLeft) ||\n          keysPressed.contains(LogicalKeyboardKey.altRight)) {\n        this.shootHarder();\n      } else {\n        this.shoot();\n      }\n      return KeyEventResult.handled;\n    }\n    return KeyEventResult.ignored;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing the Game with Dynamic Segment Loading\nDESCRIPTION: This method initializes the game by calculating how many segments to load based on screen size, loading them with appropriate offsets, and creating the player character. It dynamically adapts to different screen sizes.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_3.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n  void initializeGame() {\n    // Assume that size.x < 3200\n    final segmentsToLoad = (size.x / 640).ceil();\n    segmentsToLoad.clamp(0, segments.length);\n\n    for (var i = 0; i <= segmentsToLoad; i++) {\n      loadGameSegments(i, (640 * i).toDouble());\n    }\n\n    _ember = EmberPlayer(\n      position: Vector2(128, canvasSize.y - 70),\n    );\n    world.add(_ember);\n  }\n```\n\n----------------------------------------\n\nTITLE: Providing Multiple Blocs in a Flame Game\nDESCRIPTION: Shows how to use FlameMultiBlocProvider to provide multiple blocs (PlayerInventoryBloc and PlayerStatsBloc) to game components.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_bloc/bloc.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyGame extends FlameGame {\n  @override\n  Future<void> onLoad() async {\n    await add(\n      FlameMultiBlocProvider(\n        providers: [\n          FlameBlocProvider<PlayerInventoryBloc, PlayerInventoryState>(\n            create: () => PlayerInventoryBloc(),\n          ),\n          FlameBlocProvider<PlayerStatsBloc, PlayerStatsState>(\n            create: () => PlayerStatsBloc(),\n          ),\n        ],\n        children: [\n          Player(),\n          // ...\n        ],\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Putting it all together: onDragEnd in Card Dart\nDESCRIPTION: This code shows the final implementation of the `onDragEnd` method in the `Card` class. It combines the logic for checking if the card can be dropped into a new pile, removing the card from the current pile, and adding the card to the new pile.  If the card cannot be dropped into any pile, it is returned to its original pile.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step4.md#2025-04-20_snippet_24\n\nLANGUAGE: dart\nCODE:\n```\n\"  @override\\n  void onDragEnd(DragEndEvent event) {\\n    if (!isDragged) {\\n      return;\\n    }\\n    super.onDragEnd(event);\\n    final dropPiles = parent!\\n        .componentsAtPoint(position + size / 2)\\n        .whereType<Pile>()\\n        .toList();\\n    if (dropPiles.isNotEmpty) {\\n      if (dropPiles.first.canAcceptCard(this)) {\\n        pile!.removeCard(this);\\n        dropPiles.first.acquireCard(this);\\n        return;\\n      }\\n    }\\n    pile!.returnCard(this);\\n  }\"\n```\n\n----------------------------------------\n\nTITLE: Creating a RectangleComponent in Dart\nDESCRIPTION: Demonstrates how to create a RectangleComponent with position, size, angle, and anchor properties. This component is used to render rectangular shapes in Flame games.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_35\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  RectangleComponent(\n    position: Vector2(10.0, 15.0),\n    size: Vector2.all(10),\n    angle: pi/2,\n    anchor: Anchor.center,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SingleGameInstance Mixin for Performance Optimization\nDESCRIPTION: Example showing how to apply the SingleGameInstance mixin to a FlameGame for better performance in single-game applications, ensuring immediate component loading.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/game.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass MyGame extends FlameGame with SingleGameInstance {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Styled TextComponent with TextPaint in Dart\nDESCRIPTION: Example showing TextComponent implementation with custom styling using TextPaint\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/text_rendering.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal regular = TextPaint(\n  style: TextStyle(\n    fontSize: 48.0,\n    color: BasicPalette.white.color,\n  ),\n);\n\nclass MyGame extends FlameGame {\n  @override\n  void onLoad() {\n    add(\n      TextComponent(\n        text: 'Hello, Flame',\n        textRenderer: regular,\n        anchor: Anchor.topCenter,\n        position: Vector2(size.width / 2, 32.0),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Player Movement in Flame\nDESCRIPTION: This code demonstrates how to implement player movement by adding a move method to the Player class and connecting it to pan gestures in the game class.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/space_shooter/step_2.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass Player extends PositionComponent { \n  static final _paint = Paint()..color = Colors.white;\n  \n  @override\n  void render(Canvas canvas) {\n    canvas.drawRect(size.toRect(), _paint);\n  }\n\n  void move(Vector2 delta) {\n    position.add(delta);\n  }\n}\n\nclass SpaceShooterGame extends FlameGame with PanDetector {\n  late Player player;\n\n  @override\n  Future<void> onLoad() async {\n    await super.onLoad();\n\n    player = Player()\n      ..position = size / 2\n      ..width = 50\n      ..height = 100\n      ..anchor = Anchor.center;\n\n    add(player);\n  }\n\n  @override\n  void onPanUpdate(DragUpdateInfo info) {\n    player.move(info.delta.global);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing YarnProject in Dart\nDESCRIPTION: This snippet demonstrates the standard sequence for initializing a YarnProject object. It includes linking user-defined functions and commands, parsing yarn scripts, and potentially restoring variables from a save-game storage.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/runtime/yarn_project.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal yarn = YarnProject()\n  ..functions.addFunction0('money', player.getMoney)\n  ..commands.addCommand1('achievement', player.earnAchievement)\n  ..parse(readFile('project.yarn'))\n  ..parse(readFile('chapter1.yarn'))\n  ..parse(readFile('chapter2.yarn'));\n```\n\n----------------------------------------\n\nTITLE: Creating a SpriteAnimationComponent from Sprite Sheet\nDESCRIPTION: This code demonstrates how to create a SpriteAnimationComponent from a sprite sheet using the sequenced constructor of SpriteAnimationData. It loads a single image containing all animation frames and defines frame dimensions and timing.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\n@override\nFuture<void> onLoad() async {\n  final size = Vector2.all(64.0);\n  final data = SpriteAnimationData.sequenced(\n    textureSize: size,\n    amount: 2,\n    stepTime: 0.1,\n  );\n  this.player = SpriteAnimationComponent.fromFrameData(\n    await images.load('player.png'),\n    data,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Drag Event Handler Implementation\nDESCRIPTION: Full implementation example of a draggable component with state management. Shows how to handle drag events for moving and rendering a component with visual feedback during drag operations.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/inputs/drag_events.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyComponent extends PositionComponent with DragCallbacks {\n  MyComponent({super.size});\n\n  final _paint = Paint();\n  bool _isDragged = false;\n\n  @override\n  void onDragStart(DragStartEvent event) => _isDragged = true;\n\n  @override\n  void onDragUpdate(DragUpdateEvent event) => position += event.delta;\n\n  @override\n  void onDragEnd(DragEndEvent event) => _isDragged = false;\n\n  @override\n  void render(Canvas canvas) {\n    _paint.color = _isDragged? Colors.red : Colors.white;\n    canvas.drawRect(size.toRect(), _paint);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Double Tap Event Handler Implementation\nDESCRIPTION: Shows how to implement double tap event handling by adding the DoubleTapCallbacks mixin to a PositionComponent class.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/inputs/tap_events.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyComponent extends PositionComponent with DoubleTapCallbacks {\n  @override\n  void onDoubleTapUp(DoubleTapEvent event) {\n    /// Do something\n  }\n\n  @override\n  void onDoubleTapCancel(DoubleTapCancelEvent event) {\n    /// Do something\n  }\n\n  @override\n  void onDoubleTapDown(DoubleTapDownEvent event) {\n    /// Do something\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing PointerMoveCallbacks in a Flame Component\nDESCRIPTION: This example shows how to implement the PointerMoveCallbacks mixin in a component to respond to mouse movement events. The component can detect when the pointer moves within its bounds and when it leaves.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/inputs/pointer_events.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MyComponent extends PositionComponent with PointerMoveCallbacks {\n  MyComponent() : super(size: Vector2(80, 60));\n\n  @override\n  void onPointerMove(PointerMoveEvent event) {\n    // Do something in response to the mouse move (e.g. update coordinates)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing canMoveCard in Pile Subclasses Dart\nDESCRIPTION: This code implements the `canMoveCard` method for each of the pile subclasses: `StockPile`, `WastePile`, `FoundationPile`, and `TableauPile`. The method determines whether a card can be moved from a given pile based on the pile's specific rules. This snippet demonstrates the different implementations for each pile type.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step4.md#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\n\"class StockPile extends PositionComponent with TapCallbacks implements Pile {\\n  ...\\n  @override\\n  bool canMoveCard(Card card) => false;\\n}\"\n```\n\nLANGUAGE: dart\nCODE:\n```\n\"class WastePile extends PositionComponent implements Pile {\\n  ...\\n  @override\\n  bool canMoveCard(Card card) => _cards.isNotEmpty && card == _cards.last;\\n}\"\n```\n\nLANGUAGE: dart\nCODE:\n```\n\"class FoundationPile extends PositionComponent implements Pile {\\n  ...\\n  @override\\n  bool canMoveCard(Card card) => _cards.isNotEmpty && card == _cards.last;\\n}\"\n```\n\nLANGUAGE: dart\nCODE:\n```\n\"class TableauPile extends PositionComponent implements Pile {\\n  ...\\n  @override\\n  bool canMoveCard(Card card) => _cards.isNotEmpty && card == _cards.last;\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing HoverCallbacks in a Flame Component\nDESCRIPTION: This example demonstrates how to use the HoverCallbacks mixin to track hover states and respond to hover enter and exit events. It provides access to the isHovered property and callback methods for hover state changes.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/inputs/pointer_events.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyComponent extends PositionComponent with HoverCallbacks {\n\n  MyComponent() : super(size: Vector2(80, 60));\n\n  @override\n  void update(double dt) {\n    // use `isHovered` to know if the component is being hovered\n  }\n\n  @override\n  void onHoverEnter() {\n    // Do something in response to the mouse entering the component\n  }\n\n  @override\n  void onHoverExit() {\n    // Do something in response to the mouse leaving the component\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Flame Game with Spine Animation\nDESCRIPTION: This code snippet shows how to create a Flame game class that loads and displays a Spine animation. It demonstrates loading Spine assets, creating a SpineComponent, setting animations, and proper resource disposal.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_spine/flame_spine.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass FlameSpineExample extends FlameGame with TapDetector {\n late final SpineComponent spineboy;\n\n @override\n Future<void> onLoad() async {\n  await initSpineFlutter();\n  // Load the Spineboy atlas and skeleton data from asset files\n  // and create a SpineComponent from them, scaled down and\n  // centered on the screen\n  spineboy = await SpineComponent.fromAssets(\n   atlasFile: 'assets/spine/spineboy.atlas',\n   skeletonFile: 'assets/spine/spineboy-pro.skel',\n   scale: Vector2(0.4, 0.4),\n   anchor: Anchor.center,\n   position: size / 2,\n  );\n\n  // Set the \"walk\" animation on track 0 in looping mode\n  spineboy.animationState.setAnimationByName(0, 'walk', true);\n  await add(spineboy);\n }\n\n @override\n void onDetach() {\n  // Dispose the native resources that have been loaded for spineboy.\n  spineboy.dispose();\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Components at Screen Point in Dart\nDESCRIPTION: Shows how to use the componentsAtPoint method to check which components were rendered at a specific point on the screen, useful for drag and drop functionality.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvoid onDragUpdate(DragUpdateInfo info) {\n  game.componentsAtPoint(info.widget).forEach((component) {\n    if (component is DropTarget) {\n      component.highlight();\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bullet Spawning in Player Class using Flame's SpawnComponent\nDESCRIPTION: Enhances the Player class with a SpawnComponent for bullet generation. Implements startShooting() and stopShooting() methods to control bullet spawning.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/space_shooter/step_4.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass Player extends SpriteAnimationComponent\n    with HasGameReference<SpaceShooterGame> {\n  late final SpawnComponent _bulletSpawner;\n\n  @override\n  Future<void> onLoad() async {\n    // Loading animation omitted\n\n    _bulletSpawner = SpawnComponent(\n      period: .2,\n      selfPositioning: true,\n      factory: (index) {\n        return Bullet(\n          position: position +\n              Vector2(\n                0,\n                -height / 2,\n              ),\n        );\n\n        return bullet;\n      },\n      autoStart: false,\n    );\n\n    game.add(_bulletSpawner);\n  }\n\n  void move(Vector2 delta) {\n    position.add(delta);\n  }\n\n  void startShooting() {\n    _bulletSpawner.timer.start();\n  }\n\n  void stopShooting() {\n    _bulletSpawner.timer.stop();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a HUD Component with ComponentsNotifier in Dart\nDESCRIPTION: Shows how to create a HUD component that listens to changes in a Player component using ComponentsNotifier, allowing for reactive UI updates.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_44\n\nLANGUAGE: dart\nCODE:\n```\nclass Hud extends PositionComponent with HasGameReference {\n\n  @override\n  void onLoad() {\n    final playerNotifier = gameRef.componentsNotifier<Player>()\n        ..addListener(() {\n          final player = playerNotifier.single;\n          if (player != null) {\n            if (player.health <= .5) {\n              add(BlinkEffect());\n            }\n          }\n        });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom ParallaxLayer Configurations - Dart\nDESCRIPTION: This complex example sets up a parallax component using multiple images with different configurations for repeat modes, alignments, and fills for distinct visual layers.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_32\n\nLANGUAGE: dart\nCODE:\n```\nfinal images = [\n  loadParallaxImage(\n    'stars.jpg',\n    repeat: ImageRepeat.repeat,\n    alignment: Alignment.center,\n    fill: LayerFill.width,\n  ),\n  loadParallaxImage(\n    'planets.jpg',\n    repeat: ImageRepeat.repeatY,\n    alignment: Alignment.bottomLeft,\n    fill: LayerFill.none,\n  ),\n  loadParallaxImage(\n    'dust.jpg',\n    repeat: ImageRepeat.repeatX,\n    alignment: Alignment.topRight,\n    fill: LayerFill.height,\n  ),\n];\n\nfinal layers = images.map(\n  (image) => ParallaxLayer(\n    await image,\n    velocityMultiplier: images.indexOf(image) * 2.0,\n  )\n);\n\nfinal parallaxComponent = ParallaxComponent.fromParallax(\n  Parallax(\n    await Future.wait(layers),\n    baseVelocity: Vector2(50, 0),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing WaterEnemy Component with Move Effect in Dart\nDESCRIPTION: This snippet defines a WaterEnemy class that extends SpriteAnimationComponent. It includes a moving effect and handles animation, positioning, and collision detection.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_4.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame/collisions.dart';\nimport 'package:flame/components.dart';\nimport 'package:flame/effects.dart';\n\nimport '../ember_quest.dart';\n\nclass WaterEnemy extends SpriteAnimationComponent\n    with HasGameReference<EmberQuestGame> {\n  final Vector2 gridPosition;\n  double xOffset;\n\n  final Vector2 velocity = Vector2.zero();\n\n  WaterEnemy({\n    required this.gridPosition,\n    required this.xOffset,\n  }) : super(size: Vector2.all(64), anchor: Anchor.bottomLeft);\n\n  @override\n  void onLoad() {\n    animation = SpriteAnimation.fromFrameData(\n      game.images.fromCache('water_enemy.png'),\n      SpriteAnimationData.sequenced(\n        amount: 2,\n        textureSize: Vector2.all(16),\n        stepTime: 0.70,\n      ),\n    );\n    position = Vector2(\n      (gridPosition.x * size.x) + xOffset,\n      game.size.y - (gridPosition.y * size.y),\n    );\n    add(RectangleHitbox(collisionType: CollisionType.passive));\n    add(\n      MoveEffect.by(\n        Vector2(-2 * size.x, 0),\n        EffectController(\n          duration: 3,\n          alternate: true,\n          infinite: true,\n        ),\n      ),\n    );\n  }\n\n  @override\n  void update(double dt) {\n    velocity.x = game.objectSpeed;\n    position += velocity * dt;\n    if (position.x < -size.x) removeFromParent();\n    super.update(dt);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Jump Control\nDESCRIPTION: Updates the onKeyEvent method to handle jump input using the space key.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_5.md#2025-04-20_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nhasJumped = keysPressed.contains(LogicalKeyboardKey.space);\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Sprites\nDESCRIPTION: Examples of creating sprites from images and rendering them\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/images.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nfinal image = await images.load('player.png');\nSprite player = Sprite(image);\n\nfinal image = await images.load('player.png');\nfinal playerFrame = Sprite(\n  image,\n  srcPosition: Vector2(32.0, 0),\n  srcSize: Vector2(16.0, 16.0),\n);\n\nfinal image = await images.load('block.png');\nSprite block = Sprite(image);\n\n// in your render method\nblock.render(canvas, 16.0, 16.0); //canvas, width, height\n```\n\n----------------------------------------\n\nTITLE: Rendering card face in Flutter Flame\nDESCRIPTION: This Dart code snippet demonstrates how to conditionally render the front or back of a card in a Flame game based on the `_isFaceUpView` state. It overrides the render method to choose between `_renderFront` and `_renderBack` functions, ensuring that the correct card face is displayed during animations or static display.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step5.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n\"  @override\n  void render(Canvas canvas) {\n    if (_isFaceUpView) {\n      _renderFront(canvas);\n    } else {\n      _renderBack(canvas);\n    }\n  }\"\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Positions in SpawnComponent - Dart\nDESCRIPTION: This snippet illustrates how to instantiate SpawnComponent with selfPositioning enabled. It allows the factory function to specify the position of each newly spawned MyComponent directly, bypassing the defined area.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_27\n\nLANGUAGE: dart\nCODE:\n```\nSpawnComponent(\n  factory: (i) =>\n    MyComponent(position: Vector2(100, 200), size: Vector2(10, 20)),\n  selfPositioning: true,\n  period: 0.5,\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Components to the Game World\nDESCRIPTION: Code that adds the previously created game components (Stock, Waste, Foundations, and Piles) to the FlameGame's world object.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step2.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n    world.add(stock);\n    world.add(waste);\n    world.addAll(foundations);\n    world.addAll(piles);\n```\n\n----------------------------------------\n\nTITLE: Implementing Gravity and Jump Physics\nDESCRIPTION: Adds gravity and jumping physics to the player character's update method.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_5.md#2025-04-20_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\n// Apply basic gravity\nvelocity.y += gravity;\n\n// Determine if ember has jumped\nif (hasJumped) {\n  if (isOnGround) {\n    velocity.y = -jumpSpeed;\n    isOnGround = false;\n  }\n  hasJumped = false;\n}\n\n// Prevent ember from jumping to crazy fast as well as descending too fast and \n// crashing through the ground or a platform.\nvelocity.y = velocity.y.clamp(-jumpSpeed, terminalVelocity);\n```\n\n----------------------------------------\n\nTITLE: Implementing Card Stack Detection in TableauPile for Klondike\nDESCRIPTION: Creates a method to identify all cards that are stacked on top of a given card in a tableau pile. This is used to determine which cards should move together when dragging a card from the middle of a stack.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step4.md#2025-04-20_snippet_28\n\nLANGUAGE: dart\nCODE:\n```\n  List<Card> cardsOnTop(Card card) {\n    assert(card.isFaceUp && _cards.contains(card));\n    final index = _cards.indexOf(card);\n    return _cards.getRange(index + 1, _cards.length).toList();\n  }\n```\n\n----------------------------------------\n\nTITLE: Loading and Adding Lottie Animation to Flame Game in Dart\nDESCRIPTION: This snippet demonstrates how to load a Lottie animation from an asset file and add it to a Flame game. It shows the implementation of the onLoad method in a FlameGame subclass, where it loads a Lottie animation and adds it as a LottieComponent with continuous looping enabled.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_lottie/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MyGame extends FlameGame {\n  ...\n  @override\n  Future<void> onLoad() async {\n    final asset = Lottie.asset('assets/LottieLogo1.json');\n    final animation = await loadLottie(asset);\n    add(\n        LottieComponent(\n            composition: animation,\n            repeating: true, // continuously loop the animation\n        ),\n    );\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SequenceEffect in Dart for Flame Engine\nDESCRIPTION: Chains multiple effects to run sequentially, including scale, move, opacity, and remove effects.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/effects.md#2025-04-20_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nfinal effect = SequenceEffect([\n  ScaleEffect.by(\n    Vector2.all(1.5),\n    EffectController(\n      duration: 0.2,\n      alternate: true,\n    ),\n  ),\n  MoveEffect.by(\n    Vector2(30, -50),\n    EffectController(\n      duration: 0.5,\n    ),\n  ),\n  OpacityEffect.to(\n    0,\n    EffectController(\n      duration: 0.3,\n    ),\n  ),\n  RemoveEffect(),\n]);\n```\n\n----------------------------------------\n\nTITLE: Adding Keyboard Handler to Player Character\nDESCRIPTION: Implements the KeyboardHandler mixin on the player character class to enable it to receive keyboard events.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_5.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass EmberPlayer extends SpriteAnimationComponent\n    with KeyboardHandler, HasGameReference<EmberQuestGame> {\n```\n\n----------------------------------------\n\nTITLE: Positioning a Child Component Relative to Parent in Flame Engine\nDESCRIPTION: This example demonstrates how to position a child PositionComponent in the center of its parent by setting the child's position to half the parent's size and using Anchor.center for alignment.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid onLoad() {\n  final parent = PositionComponent(\n    position: Vector2(100, 100),\n    size: Vector2(100, 100),\n  );\n  final child = PositionComponent(\n    position: parent.size / 2,\n    anchor: Anchor.center,\n  );\n  parent.add(child);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Bullet Component in Dart for Flame Engine\nDESCRIPTION: Defines a Bullet class that extends SpriteAnimationComponent. It sets up the bullet's size, position, and animation. The update method handles bullet movement and removal when off-screen.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/space_shooter/step_4.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass Bullet extends SpriteAnimationComponent\n    with HasGameReference<SpaceShooterGame> {\n  Bullet({\n    super.position,\n  }) : super(\n          size: Vector2(25, 50),\n          anchor: Anchor.center,\n        );\n\n  @override\n  Future<void> onLoad() async {\n    await super.onLoad();\n\n    animation = await game.loadSpriteAnimation(\n      'bullet.png',\n      SpriteAnimationData.sequenced(\n        amount: 4,\n        stepTime: .2,\n        textureSize: Vector2(8, 16),\n      ),\n    );\n  }\n\n  @override\n  void update(double dt) {\n    super.update(dt);\n\n    position.y += dt * -500;\n\n    if (position.y < -height) {\n      removeFromParent();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Ray Tracing in Flame Engine with Dart\nDESCRIPTION: This snippet demonstrates how to use the raytrace method for advanced ray tracing. It shows how to create a ray, trace its path through multiple reflections, and process the results with custom logic.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/collision_detection.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nclass MyGame extends FlameGame with HasCollisionDetection {\n  @override\n  void update(double dt) {\n    super.update(dt);\n    final ray = Ray2(\n        origin: Vector2(0, 100),\n        direction: Vector2(1, 1)..normalize()\n    );\n    final results = collisionDetection.raytrace(\n      ray,\n      maxDepth: 100,\n    );\n    for (final result in results) {\n      if (result.intersectionPoint.distanceTo(ray.origin) > 300) {\n        break;\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Platform Block Sprite and Setting Initial Position\nDESCRIPTION: This onLoad method initializes the platform block by loading its sprite, calculating its position based on the grid system, and adding a collision hitbox for player interaction.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_3.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n  @override\n  void onLoad() {\n    final platformImage = game.images.fromCache('block.png');\n    sprite = Sprite(platformImage);\n    position = Vector2((gridPosition.x * size.x) + xOffset,\n        game.size.y - (gridPosition.y * size.y),\n    );\n    add(RectangleHitbox(collisionType: CollisionType.passive));\n  }\n```\n\n----------------------------------------\n\nTITLE: Refactoring Player Component with HasGameRef in Flame\nDESCRIPTION: This code demonstrates how to refactor the Player component to use HasGameRef for accessing game properties and methods, improving code organization and asset loading.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/space_shooter/step_2.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass Player extends SpriteComponent with HasGameRef<SpaceShooterGame> {\n\n  Player() : super(\n    size: Vector2(100, 150),\n    anchor: Anchor.center,\n  );\n\n  @override\n  Future<void> onLoad() async {\n    await super.onLoad();\n\n    sprite = await gameRef.loadSprite('player-sprite.png');\n\n    position = gameRef.size / 2;\n  }\n\n  void move(Vector2 delta) {\n    position.add(delta);\n  }\n}\n\nclass SpaceShooterGame extends FlameGame with PanDetector {\n  late Player player;\n\n  @override\n  Future<void> onLoad() async {\n    await super.onLoad();\n\n    player = Player();\n\n    add(player);\n  }\n\n  @override\n  void onPanUpdate(DragUpdateInfo info) {\n    player.move(info.delta.global);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Player Sprite Animation in Dart\nDESCRIPTION: Creates a player component with sprite animation using SpriteAnimationComponent, loading 4 frames with a 0.2-second step time\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/space_shooter/step_3.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass Player extends SpriteAnimationComponent\n    with HasGameReference<SpaceShooterGame> {\n\n  Player() : super(\n    size: Vector2(100, 150),\n    anchor: Anchor.center,\n  );\n\n  @override\n  Future<void> onLoad() async {\n    await super.onLoad();\n\n    animation = await game.loadSpriteAnimation(\n      'player.png',\n      SpriteAnimationData.sequenced(\n        amount: 4,\n        stepTime: .2,\n        textureSize: Vector2(32, 48),\n      ),\n    );\n\n    position = game.size / 2;\n  }\n\n  // Other methods omitted\n}\n```\n\n----------------------------------------\n\nTITLE: Animating card flip with ScaleEffect in Flutter Flame\nDESCRIPTION: This Dart code animates a card flip by shrinking its width, switching the view, and expanding the width using Flame's ScaleEffect and EffectController. It handles anchor positioning, priority management, and completion callbacks to ensure smooth transitions between face-up and face-down states. The code relies on `_isFaceUpView` to determine what is rendered.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step5.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n\"  void turnFaceUp({\n    double time = 0.3,\n    double start = 0.0,\n    VoidCallback? onComplete,\n  }) {\n    assert(!_isFaceUpView, 'Card must be face-down before turning face-up.');\n    assert(time > 0.0, 'Time to turn card over must be > 0');\n    _isAnimatedFlip = true;\n    anchor = Anchor.topCenter;\n    position += Vector2(width / 2, 0);\n    priority = 100;\n    add(\n      ScaleEffect.to(\n        Vector2(scale.x / 100, scale.y),\n        EffectController(\n          startDelay: start,\n          curve: Curves.easeOutSine,\n          duration: time / 2,\n          onMax: () {\n            _isFaceUpView = true;\n          },\n          reverseDuration: time / 2,\n          onMin: () {\n            _isAnimatedFlip = false;\n            _faceUp = true;\n            anchor = Anchor.topLeft;\n            position -= Vector2(width / 2, 0);\n          },\n        ),\n        onComplete: () {\n          onComplete?.call();\n        },\n      ),\n    );\n  }\"\n```\n\n----------------------------------------\n\nTITLE: Creating SpriteAnimation from Frame Data in Dart\nDESCRIPTION: Demonstrates how to create a SpriteAnimation using the fromFrameData constructor, which is useful for sprite sheets. It specifies the number of frames, texture size, and step time.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/images.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nconst amountOfFrames = 8;\nfinal a = SpriteAnimation.fromFrameData(\n    imageInstance,\n    SpriteAnimationFrame.sequenced(\n      amount: amountOfFrames,\n      textureSize: Vector2(16.0, 16.0),\n      stepTime: 0.1,\n    ),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Game with ComponentsNotifier in Dart\nDESCRIPTION: Demonstrates how to use ComponentsNotifier in a Flame game to react to changes in Player components, such as managing lives and game over conditions.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_43\n\nLANGUAGE: dart\nCODE:\n```\nclass MyGame extends FlameGame {\n  int lives = 2;\n\n  @override\n  void onLoad() {\n    final playerNotifier = componentsNotifier<Player>()\n        ..addListener(() {\n          final player = playerNotifier.single;\n          if (player == null) {\n            lives--;\n            if (lives == 0) {\n              add(GameOverComponent());\n            } else {\n              add(Player());\n            }\n          }\n        });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Flame Game in Dart\nDESCRIPTION: Creates a minimal Flame game setup in the main.dart file, initializing a FlameGame instance and running it with GameWidget.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/bare_flame_game.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame/game.dart';\nimport 'package:flutter/widgets.dart';\n\nvoid main() {\n  final game = FlameGame();\n  runApp(GameWidget(game: game));\n}\n```\n\n----------------------------------------\n\nTITLE: Taking Snapshots in Flame Engine\nDESCRIPTION: Shows how to take and convert snapshots to images, including handling snapshot components without render mode.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/layers.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass SnapshotComponent extends PositionComponent with Snapshot {}\n\nclass MyGame extends FlameGame {\n  late final SnapshotComponent root;\n\n  @override\n  Future<void> onLoad() async {\n    // Add a snapshot component, but don't use its render mode.\n    root = SnapshotComponent()..renderSnapshot = false;\n    add(root);\n\n    // Other code omitted.\n  }\n\n  // Call something like this to take an image snapshot at any time.\n  void takeSnapshot() {\n    root.takeSnapshot();\n    final image = root.snapshotToImage(200, 200);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Camera Scrolling\nDESCRIPTION: Adds screen boundary constraints and horizontal scrolling to the game when the player reaches the middle of the screen.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_5.md#2025-04-20_snippet_24\n\nLANGUAGE: dart\nCODE:\n```\ngame.objectSpeed = 0;\n// Prevent ember from going backwards at screen edge.\nif (position.x - 36 <= 0 && horizontalDirection < 0) {\n  velocity.x = 0;\n}\n// Prevent ember from going beyond half screen.\nif (position.x + 64 >= game.size.x / 2 && horizontalDirection > 0) {\n  velocity.x = 0;\n  game.objectSpeed = -moveSpeed;\n}\n\nposition += velocity * dt;\nsuper.update(dt);\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Layer in Flame Engine\nDESCRIPTION: Example showing how to create a dynamic layer for rendering game objects that change frequently. Includes implementation of a GameLayer class and its usage in a game loop.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/layers.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass GameLayer extends DynamicLayer {\n  final MyGame game;\n\n  GameLayer(this.game);\n\n  @override\n  void drawLayer() {\n    game.playerSprite.render(\n      canvas,\n      position: game.playerPosition,\n    );\n    game.enemySprite.render(\n      canvas,\n      position: game.enemyPosition,\n    );\n  }\n}\n\nclass MyGame extends Game {\n  // Other methods omitted...\n\n  @override\n  void render(Canvas canvas) {\n    gameLayer.render(canvas); // x and y can be provided as optional position arguments\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Star Component with Size Effect in Dart\nDESCRIPTION: This snippet defines a Star class that extends SpriteComponent. It includes a pulsating size effect and handles positioning and collision detection.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_4.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame/collisions.dart';\nimport 'package:flame/components.dart';\nimport 'package:flame/effects.dart';\nimport 'package:flutter/material.dart';\n\nimport '../ember_quest.dart';\n\nclass Star extends SpriteComponent\n    with HasGameReference<EmberQuestGame> {\n  final Vector2 gridPosition;\n  double xOffset;\n\n  final Vector2 velocity = Vector2.zero();\n\n  Star({\n    required this.gridPosition,\n    required this.xOffset,\n  }) : super(size: Vector2.all(64), anchor: Anchor.center);\n\n  @override\n  void onLoad() {\n    final starImage = game.images.fromCache('star.png');\n    sprite = Sprite(starImage);\n    position = Vector2(\n      (gridPosition.x * size.x) + xOffset + (size.x / 2),\n      game.size.y - (gridPosition.y * size.y) - (size.y / 2),\n    );\n    add(RectangleHitbox(collisionType: CollisionType.passive));\n    add(\n      SizeEffect.by(\n        Vector2(-24, -24),\n        EffectController(\n          duration: .75,\n          reverseDuration: .5,\n          infinite: true,\n          curve: Curves.easeOut,\n        ),\n      ),\n    );\n  }\n\n  @override\n  void update(double dt) {\n    velocity.x = game.objectSpeed;\n    position += velocity * dt;\n    if (position.x < -size.x) removeFromParent();\n    super.update(dt);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Klondike Game Card Dealing Method in Dart\nDESCRIPTION: Implements card dealing logic at game initialization, distributing cards to tableau piles and stock\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step4.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n@override\nFuture<void> onLoad() async {\n  ...\n\n  final cards = [\n    for (var rank = 1; rank <= 13; rank++)\n      for (var suit = 0; suit < 4; suit++)\n        Card(rank, suit)\n  ];\n  cards.shuffle();\n  world.addAll(cards);\n\n  int cardToDeal = cards.length - 1;\n  for (var i = 0; i < 7; i++) {\n    for (var j = i; j < 7; j++) {\n      piles[j].acquireCard(cards[cardToDeal--]);\n    }\n    piles[i].flipTopCard();\n  }\n  for(int n = 0; n <= cardToDeal; n++) {\n    stock.acquireCard(cards[n]);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a SpriteButton in Dart with Flame\nDESCRIPTION: Example of implementing a SpriteButton which creates a button using Flame sprites instead of standard Flutter buttons. It supports different sprite states (normal, pressed, disabled) and can contain a text label.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/other/widgets.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nSpriteButton(\n    onPressed: () {\n      print('Pressed');\n    },\n    label: const Text('Sprite Button', style: const TextStyle(color: const Color(0xFF5D275D))),\n    sprite: _spriteButton,\n    pressedSprite: _pressedSprite,\n    // Optional, will be shown when onPressed in null.\n    disabledSprite: _disabledSprite,\n    height: _height,\n    width: _width,\n)\n```\n\n----------------------------------------\n\nTITLE: Particle Lifecycle Management\nDESCRIPTION: Examples of managing particle lifespans and progress tracking using the Flame Timer class.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/particles.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nParticle(lifespan: .2); // will live for 200ms.\nParticle(lifespan: 4); // will live for 4s.\n\nfinal particle = Particle(lifespan: 2);\n\n// ... after some time.\nparticle.setLifespan(2) // will live for another 2s.\n\nfinal particle = Particle(lifespan: 2.0);\n\ngame.add(ParticleSystemComponent(particle: particle));\n\n// Will print values from 0 to 1 with step of .1: 0, 0.1, 0.2 ... 0.9, 1.0.\nTimer.periodic(duration * .1, () => print(particle.progress));\n```\n\n----------------------------------------\n\nTITLE: Implementing Parallax Background in Flame Game\nDESCRIPTION: Creates a dynamic parallax scrolling background with multiple star layers using different velocities and repeat configuration\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/space_shooter/step_3.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass SpaceShooterGame extends FlameGame with PanDetector {\n  late Player player;\n\n  @override\n  Future<void> onLoad() async {\n    final parallax = await loadParallaxComponent(\n      [\n        ParallaxImageData('stars_0.png'),\n        ParallaxImageData('stars_1.png'),\n        ParallaxImageData('stars_2.png'),\n      ],\n      baseVelocity: Vector2(0, -5),\n      repeat: ImageRepeat.repeat,\n      velocityMultiplierDelta: Vector2(0, 5),\n    );\n    add(parallax);\n\n    player = Player();\n    add(player);\n  }\n\n  @override\n  void onPanUpdate(DragUpdateInfo info) {\n    player.move(info.delta.global);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffolding Main Dart File for Ember Quest\nDESCRIPTION: This code sets up the main.dart file to use the GameWidget from Flame, creating an instance of the EmberQuestGame class. It provides the basic structure to run the game.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_2.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame/game.dart';\nimport 'package:flutter/material.dart';\n\nimport 'ember_quest.dart';\n\nvoid main() {\n  runApp(\n    const GameWidget<EmberQuestGame>.controlled(\n      gameFactory: EmberQuestGame.new,\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Component-Level Keyboard Input Handling in Flame\nDESCRIPTION: Example of using the KeyboardListenerComponent to handle keyboard events at the component level. Shows how to set up key mappings for both keyUp and keyDown events for WASD keys.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/inputs/keyboard_input.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nadd(\n  KeyboardListenerComponent(\n    keyUp: {\n      LogicalKeyboardKey.keyA: (keysPressed) { ... },\n      LogicalKeyboardKey.keyD: (keysPressed) { ... },\n      LogicalKeyboardKey.keyW: (keysPressed) { ... },\n      LogicalKeyboardKey.keyS: (keysPressed) { ... },\n    },\n    keyDown: {\n      LogicalKeyboardKey.keyA: (keysPressed) { ... },\n      LogicalKeyboardKey.keyD: (keysPressed) { ... },\n      LogicalKeyboardKey.keyW: (keysPressed) { ... },\n      LogicalKeyboardKey.keyS: (keysPressed) { ... },\n    },\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Managing Overlays in Flame Game\nDESCRIPTION: Example showing how to add and remove overlays from within a Flame game. Demonstrates setting overlay identifiers, adding overlays with different priorities, and removing overlays when no longer needed.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/overlays.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n  // Inside your game:\n  final pauseOverlayIdentifier = 'PauseMenu';\n  final secondaryOverlayIdentifier = 'SecondaryMenu';\n\n  // Marks 'SecondaryMenu' to be rendered.\n  overlays.add(secondaryOverlayIdentifier, priority: 1);\n  // Marks 'PauseMenu' to be rendered. Priority = 0 by default \n  // which means the 'PauseMenu' will be displayed under the 'SecondaryMenu'\n  overlays.add(pauseOverlayIdentifier);\n  // Marks 'PauseMenu' to not be rendered. \n  overlays.remove(pauseOverlayIdentifier);\n```\n\n----------------------------------------\n\nTITLE: Setting Mouse Cursor in Flame Games\nDESCRIPTION: Example showing how to change the mouse cursor displayed on the GameWidget region. This can be done either directly from the Game class or during GameWidget initialization.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/inputs/gesture_input.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nmouseCursor.value = SystemMouseCursors.move;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Color Quiz Dialogue using <<set>> in Yarn Spinner\nDESCRIPTION: Illustrates a practical example of using the <<set>> command in a dialogue script for a color quiz. It demonstrates how to update a string variable ($favorite_color) and a numeric variable ($affinity) based on user choices.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/commands/set.md#2025-04-20_snippet_1\n\nLANGUAGE: yarn\nCODE:\n```\n<<declare $favorite_color as String>>\n\ntitle: ColorQuiz\n---\nWhat is your favorite color?\n-> White\n   <<set $favorite_color to \"White\">>\n-> Red\n   <<set $favorite_color to \"Red\">>\n-> Yellow\n   <<set $favorite_color = \"Yellow\">>\n-> Blue\n   Oh, Nice! Which shade of blue?\n   -> Azure\n   -> Cerulean\n   -> Lapis Lazuli\n   Umm, I don't know how to spell that. I'll just put you down as \"blue\".\n   <<set $favorite_color = \"Blue\">>\n-> Black\n   <<set $favorite_color = \"Black\">>\n   That's mine too!\n   <<set $affinity += 3>>\n-> Prefer not to tell\n   Aww... Maybe if I ask again really nicely?\n   <<jump ColorQuiz>>\n===\n```\n\n----------------------------------------\n\nTITLE: Creating and Positioning Game Components\nDESCRIPTION: Code that creates the Stock, Waste, Foundation, and Pile components with appropriate sizes and positions in the game world. Positions are calculated based on card dimensions and gaps.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step2.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n    final stock = Stock()\n      ..size = cardSize\n      ..position = Vector2(cardGap, cardGap);\n    final waste = Waste()\n      ..size = cardSize\n      ..position = Vector2(cardWidth + 2 * cardGap, cardGap);\n    final foundations = List.generate(\n      4,\n      (i) => Foundation()\n        ..size = cardSize\n        ..position =\n            Vector2((i + 3) * (cardWidth + cardGap) + cardGap, cardGap),\n    );\n    final piles = List.generate(\n      7,\n      (i) => Pile()\n        ..size = cardSize\n        ..position = Vector2(\n          cardGap + i * (cardWidth + cardGap),\n          cardHeight + 2 * cardGap,\n        ),\n    );\n```\n\n----------------------------------------\n\nTITLE: Card Dragging Implementation in Dart\nDESCRIPTION: Implements basic card dragging functionality with priority and position updates\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step4.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nclass Card extends PositionComponent with DragCallbacks {\n  @override\n  void onDragStart(DragStartEvent event) {\n    priority = 100;\n  }\n\n  @override\n  void onDragUpdate(DragUpdateEvent event) {\n    position += event.localDelta;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading and Using FireAtlas in Dart\nDESCRIPTION: This snippet demonstrates how to load a FireAtlas from an asset file and retrieve sprites and animations. It shows both standalone usage and usage within a Flame game instance.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_fire_atlas/fire_atlas.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame_fire_atlas/flame_fire_atlas.dart';\n\n// Load the atlas from your assets\n// file at assets/atlas.fa\nfinal atlas = await FireAtlas.loadAsset('atlas.fa');\n\n//or when inside a game instance, the loadFireAtlas can be used:\n// file at assets/atlas.fa\nfinal atlas = await loadFireAtlas('atlas.fa');\n\n// Get a Sprite with the given key.\nFireAtlas.getSprite('sprite_name')\n\n// Get a SpriteAnimation with the given key.\nFireAtlas.getAnimation('animation_name')\n```\n\n----------------------------------------\n\nTITLE: Using TimerComponent in FlameGame (Dart)\nDESCRIPTION: This snippet demonstrates how to use the TimerComponent class in a FlameGame. It adds a timer that prints a message every 10 seconds, repeating indefinitely.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/other/util.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame/timer.dart';\nimport 'package:flame/components.dart';\nimport 'package:flame/game.dart';\n\nclass MyFlameGame extends FlameGame {\n  MyFlameGame() {\n    add(\n      TimerComponent(\n        period: 10,\n        repeat: true,\n        onTick: () => print('10 seconds elapsed'),\n      )\n    );\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Network Asset Handler in Dart\nDESCRIPTION: Shows how to extend FlameNetworkAssets to create a custom asset handler by implementing decodeAsset and encodeAsset methods. Supports optional configuration for HTTP requests and cache directory handling.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_network_assets/flame_network_assets.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass FlameNetworkCustomAsset extends FlameNetworkAssets<CustomAsset> {\n  FlameNetworkImages({\n    super.get,\n    super.getAppDirectory,\n    super.cacheInMemory,\n    super.cacheInStorage,\n  }) : super(\n          decodeAsset: (bytes) => CustomAsset.decode(bytes),\n          encodeAsset: (CustomAsset asset) => asset.encode(),\n        );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ScaleEffect.by in Flame Engine\nDESCRIPTION: Creates a ScaleEffect.by that increases a component's scale by 50% over 0.3 seconds.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/effects.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nfinal effect = ScaleEffect.by(\n  Vector2.all(1.5),\n  EffectController(duration: 0.3),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Tap Detection in a Flame Game\nDESCRIPTION: Example of a complete game class that implements the TapDetector mixin to handle tap events. The example shows how to override onTapDown and onTapUp methods to respond to user interactions.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/inputs/gesture_input.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass MyGame extends FlameGame with TapDetector {\n  // Other methods omitted\n\n  @override\n  bool onTapDown(TapDownInfo info) {\n    print(\"Player tap down on ${info.eventPosition.widget}\");\n    return true;\n  }\n\n  @override\n  bool onTapUp(TapUpInfo info) {\n    print(\"Player tap up on ${info.eventPosition.widget}\");\n    return true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing RouterComponent in FlameGame\nDESCRIPTION: Example showing how to initialize RouterComponent with different route types in a FlameGame class\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/router.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MyGame extends FlameGame {\n  late final RouterComponent router;\n\n  @override\n  void onLoad() {\n    add(\n      router = RouterComponent(\n        routes: {\n          'home': Route(HomePage.new),\n          'level-selector': Route(LevelSelectorPage.new),\n          'settings': Route(SettingsPage.new, transparent: true),\n          'pause': PauseRoute(),\n          'confirm-dialog': OverlayRoute.existing(),\n        },\n        initialRoute: 'home',\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Tap Event Handler Implementation in Dart\nDESCRIPTION: Shows how to implement basic tap event handling in a component by adding the TapCallbacks mixin to a PositionComponent class.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/inputs/tap_events.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MyComponent extends PositionComponent with TapCallbacks {\n  MyComponent() : super(size: Vector2(80, 60));\n\n  @override\n  void onTapUp(TapUpEvent event) {\n    // Do something in response to a tap event\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dealing Cards with Animation in Klondike Solitaire (Dart)\nDESCRIPTION: This method shuffles and deals cards with animation in a Klondike Solitaire game. It handles different game actions, shuffles cards, and animates card movements to tableau piles.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step5.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n  void deal() {\n    assert(cards.length == 52, 'There are ${cards.length} cards: should be 52');\n\n    if (game.action != Action.sameDeal) {\n      // New deal: change the Random Number Generator's seed.\n      game.seed = Random().nextInt(KlondikeGame.maxInt);\n      if (game.action == Action.changeDraw) {\n        game.klondikeDraw = (game.klondikeDraw == 3) ? 1 : 3;\n      }\n    }\n    // For the \"Same deal\" option, re-use the previous seed, else use a new one.\n    cards.shuffle(Random(game.seed));\n\n    var cardToDeal = cards.length - 1;\n    var nMovingCards = 0;\n    for (var i = 0; i < 7; i++) {\n      for (var j = i; j < 7; j++) {\n        final card = cards[cardToDeal--];\n        card.doMove(\n          tableauPiles[j].position,\n          start: nMovingCards * 0.15,\n          onComplete: () {\n            tableauPiles[j].acquireCard(card);\n            nMovingCards--;\n            if (nMovingCards == 0) {\n              var delayFactor = 0;\n              for (final tableauPile in tableauPiles) {\n                delayFactor++;\n                tableauPile.flipTopCard(start: delayFactor * 0.15);\n              }\n            }\n          },\n        );\n        nMovingCards++;\n      }\n    }\n    for (var n = 0; n <= cardToDeal; n++) {\n      stock.acquireCard(cards[n]);\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Post-Processing Effects in Flame (Dart)\nDESCRIPTION: This snippet shows how to combine multiple post-processing effects in a Flame game. It creates a CrystalBallGame class that applies a PostProcessGroup to the camera, containing both sequential and parallel post-processing effects.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/post_processing.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass CrystalBallGame extends FlameGame<CrystalBallGameWorld> {\n\n  CrystalBallGame() : super(\n          camera: CameraComponent.withFixedResolution(\n            width: kCameraSize.x,\n            height: kCameraSize.y,\n          ),\n          world: CrystalBallGameWorld(),\n        ) {\n    camera.postProcess = PostProcessGroup(\n      postProcesses: [\n        PostProcessSequentialGroup(\n          postProcesses: [\n            FireflyPostProcess(),\n            WaterPostProcess(),\n          ],\n        ),\n        ForegroundFogPostProcess(),\n      ],\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FlameIsolate in a Flame Game\nDESCRIPTION: Demonstrates how to add the FlameIsolate mixin to a FlameGame class and use the isolate function to perform calculations on a separate thread. The isolate function works similarly to Flutter's compute function.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_isolate/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MyGame extends FlameGame with FlameIsolate {\n  ...\n  @override\n  void update(double dt) {\n    if (shouldRecalculate) {\n      isolate(recalculateWorld, worldData).then(updateWorld);\n    }\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SpriteSheet and Animation in Dart\nDESCRIPTION: Demonstrates how to create a SpriteSheet from an image and then create an animation from it using the Flame engine.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/images.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame/sprite.dart';\n\nfinal spriteSheet = SpriteSheet(\n  image: imageInstance,\n  srcSize: Vector2.all(16.0),\n);\n\nfinal animation = spriteSheet.createAnimation(0, stepTime: 0.1);\n```\n\n----------------------------------------\n\nTITLE: Implementing Overlay Builders in GameWidget\nDESCRIPTION: Example showing how to set up the overlayBuilderMap in a GameWidget to map overlay identifiers to actual Flutter widgets. Each builder function receives the BuildContext and game instance to create the appropriate widget.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/overlays.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// On the widget declaration\nfinal game = MyGame();\n\nWidget build(BuildContext context) {\n  return GameWidget(\n    game: game,\n    overlayBuilderMap: {\n      'PauseMenu': (BuildContext context, MyGame game) {\n        return Text('A pause menu');\n      },\n      'SecondaryMenu': (BuildContext context, MyGame game) {\n        return Text('A secondary menu');\n      },\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Time Scale in FlameGame (Dart)\nDESCRIPTION: This example shows how to implement time scaling in a FlameGame using the HasTimeScale mixin. It provides methods to speed up and slow down the game time.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/other/util.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame/components.dart';\nimport 'package:flame/game.dart';\n\nclass MyFlameGame extends FlameGame with HasTimeScale {\n  void speedUp(){\n    timeScale = 2.0;\n  }\n\n  void slowDown(){\n    timeScale = 1.0;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing QuadTree Collision Detection in Flame\nDESCRIPTION: Shows how to initialize and configure QuadTree collision detection for better performance in games with many collidable components. Includes map dimension setup and optimization parameters.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/collision_detection.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass MyGame extends FlameGame with HasQuadTreeCollisionDetection {\n  @override\n  void onLoad() {\n    initializeCollisionDetection(\n      mapDimensions: const Rect.fromLTWH(0, 0, mapWidth, mapHeight),\n      minimumDistance: 10,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Post-Processing Effects in Flame Engine\nDESCRIPTION: Shows how to add multiple post-processing effects to a camera using PostProcessGroup. The example demonstrates combining sequential and parallel post-processing effects including firefly and water effects with foreground fog.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/camera.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\ncamera.postProcess = PostProcessGroup(\n  postProcesses: [\n    PostProcessSequentialGroup(\n      postProcesses: [\n        FireflyPostProcess(),\n        WaterPostProcess(),\n      ],\n    ),\n    ForegroundFogPostProcess(),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Shooting Methods in Player Class for Flame Engine\nDESCRIPTION: Adds startShooting() and stopShooting() methods to the Player class. These methods will be called to control the bullet shooting mechanism.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/space_shooter/step_4.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass Player extends SpriteAnimationComponent\n    with HasGameReference<SpaceShooterGame> {\n\n  // Rest of implementation omitted\n\n  void startShooting() {\n    // TODO\n  }\n\n  void stopShooting() {\n    // TODO\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Special Hitbox without Parent Collision Triggering\nDESCRIPTION: Shows how to create a custom hitbox that doesn't trigger collisions on its parent component. This is useful for utility hitboxes that shouldn't affect the main component's collision behavior.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/collision_detection.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass MyComponent extends PositionComponent {\n\n  late final MySpecialHitbox utilityHitbox;\n\n  @override\n  void onLoad() {\n    utilityHitbox = MySpecialHitbox();\n    add(utilityHitbox);\n  }\n\n  void update(double dt) {\n    if (utilityHitbox.isColliding) {\n      // do some specific things if hitbox is colliding\n    }\n  }\n// component's onCollision* functions, ignoring MySpecialHitbox collisions.\n}\n\nclass MySpecialHitbox extends RectangleHitbox {\n  MySpecialHitbox() {\n    triggersParentCollision = false;\n  }\n\n// hitbox specific onCollision* functions\n\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Component Priority in Flame Engine (Dart)\nDESCRIPTION: Shows how to set a component's priority during initialization and how to update it dynamically in response to user interaction.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyGame extends FlameGame {\n  @override\n  void onLoad() {\n    final myComponent = PositionComponent(priority: 5);\n    add(myComponent);\n  }\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nclass MyComponent extends PositionComponent with TapCallbacks {\n\n  MyComponent() : super(priority: 1);\n\n  @override\n  void onTapDown(TapDownEvent event) {\n    priority = 2;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SpriteAnimationWidget in Dart with Flame\nDESCRIPTION: Example of using SpriteAnimationWidget to display animated sprites within the Flutter widget tree. It requires an animation object, animation ticker, and can be controlled with the playing property.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/other/widgets.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nSpriteAnimationWidget(\n    animation: _animation,\n    animationTicker: _animationTicker,\n    playing: true,\n    anchor: Anchor.center,\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Collectible and Enemy Collisions\nDESCRIPTION: Adds collision handling for star collectibles and enemy characters.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_5.md#2025-04-20_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\nif (other is Star) {\n  other.removeFromParent();\n}\n\nif (other is WaterEnemy) {\n  hit();\n}\n```\n\n----------------------------------------\n\nTITLE: Card Render Method in Dart\nDESCRIPTION: This snippet defines the `render()` method of the `Card` class, which is responsible for drawing the card on the screen.  It checks if the card is face up or face down and calls the appropriate rendering method (`_renderFront()` or `_renderBack()`) to draw the card accordingly.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step3.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n\"  @override\\n  void render(Canvas canvas) {\\n    if (_faceUp) {\\n      _renderFront(canvas);\\n    } else {\\n      _renderBack(canvas);\\n    }\\n  }\\n\\n  void _renderFront(Canvas canvas) {}\\n  void _renderBack(Canvas canvas) {}\"\n```\n\n----------------------------------------\n\nTITLE: Initializing EffectController in Dart for Flame Engine\nDESCRIPTION: Creates an EffectController with various options including duration, curve, reverse behavior, pauses, repetition, and callbacks. This factory constructor allows for creating complex effect patterns.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/effects.md#2025-04-20_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\nEffectController({\n    required double duration,\n    Curve curve = Curves.linear,\n    double? reverseDuration,\n    Curve? reverseCurve,\n    bool alternate = false,\n    double atMaxDuration = 0.0,\n    double atMinDuration = 0.0,\n    int? repeatCount,\n    bool infinite = false,\n    double startDelay = 0.0,\n    VoidCallback? onMax,\n    VoidCallback? onMin,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing AnchorByEffect in Dart for Flame Engine\nDESCRIPTION: Modifies component anchor position by a relative offset using Vector2 and EffectController.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/effects.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nfinal effect = AnchorByEffect(\n  Vector2(0.1, 0.1),\n  EffectController(speed: 1),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing MoveByEffect in Flame Engine\nDESCRIPTION: Creates a MoveByEffect that shifts a PositionComponent by a specified Vector2 offset over a duration of 0.5 seconds.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/effects.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal effect = MoveByEffect(\n  Vector2(0, -10),\n  EffectController(duration: 0.5),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing FlameBlocListenable Mixin\nDESCRIPTION: Shows how to use the FlameBlocListenable mixin to add state listening capabilities to a Component class.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_bloc/bloc_components.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass ComponentA extends Component\n    with FlameBlocListenable<BlocA, BlocAState> {\n\n  @override\n  bool listenWhen(PlayerState previousState, PlayerState newState) {\n    // return true/false to determine whether or not\n    // to call listener with state\n  }\n\n  @override\n  void onNewState(PlayerState state) {\n    super.onNewState(state);\n    // do stuff here based on state\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Main Menu with Flutter and Flame - Dart\nDESCRIPTION: This snippet defines the MainMenu class which displays the game title and a play button. It utilizes Flutter's Material design components and interacts with Flame's overlay system to remove the menu overlay when the play button is pressed.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_7.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nimport '../ember_quest.dart';\n\nclass MainMenu extends StatelessWidget {\n  // Reference to parent game.\n  final EmberQuestGame game;\n\n  const MainMenu({super.key, required this.game});\n\n  @override\n  Widget build(BuildContext context) {\n    const blackTextColor = Color.fromRGBO(0, 0, 0, 1.0);\n    const whiteTextColor = Color.fromRGBO(255, 255, 255, 1.0);\n\n    return Material(\n      color: Colors.transparent,\n      child: Center(\n        child: Container(\n          padding: const EdgeInsets.all(10.0),\n          height: 250,\n          width: 300,\n          decoration: const BoxDecoration(\n            color: blackTextColor,\n            borderRadius: const BorderRadius.all(\n              Radius.circular(20),\n            ),\n          ),\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n              const Text(\n                'Ember Quest',\n                style: TextStyle(\n                  color: whiteTextColor,\n                  fontSize: 24,\n                ),\n              ),\n              const SizedBox(height: 40),\n              SizedBox(\n                width: 200,\n                height: 75,\n                child: ElevatedButton(\n                  onPressed: () {\n                    game.overlays.remove('MainMenu');\n                  },\n                  style: ElevatedButton.styleFrom(\n                    backgroundColor: whiteTextColor,\n                  ),\n                  child: const Text(\n                    'Play',\n                    style: TextStyle(\n                      fontSize: 40.0,\n                      color: blackTextColor,\n                    ),\n                  ),\n                ),\n              ),\n              const SizedBox(height: 20),\n              const Text(\n'''Use WASD or Arrow Keys for movement.\nSpace bar to jump.\nCollect as many stars as you can and avoid enemies!''',\n                textAlign: TextAlign.center,\n                style: TextStyle(\n                  color: whiteTextColor,\n                  fontSize: 14,\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Game Restart and Action Handling in Klondike Solitaire (Dart)\nDESCRIPTION: This code snippet handles button releases for restarting the game or triggering a win celebration. It sets the game action and creates a new KlondikeWorld instance.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step5.md#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\n      onReleased: () {\n        if (action == Action.haveFun) {\n          // Shortcut to the \"win\" sequence, for Tutorial purposes only.\n          letsCelebrate();\n        } else {\n          // Restart with a new deal or the same deal as before.\n          game.action = action;\n          game.world = KlondikeWorld();\n        }\n      },\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Particle with SingleChildParticle in Flame (Dart)\nDESCRIPTION: This snippet illustrates how to create a custom particle, `GlitchParticle`, by extending `Particle` and mixing in `SingleChildParticle`.  This allows the particle to have a single child particle and customize its behavior, in this case, randomly positioning the child during each frame using canvas transformations. This example relies on `Random` from dart:math.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/particles.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar rnd = Random();\n\nclass GlitchParticle extends Particle with SingleChildParticle {\n  Particle child;\n\n  GlitchParticle({\n    required this.child,\n    super.lifespan,\n  });\n\n  @override\n  render(Canvas canvas)  {\n    canvas.save();\n    canvas.translate(rnd.nextDouble() * 100, rnd.nextDouble() * 100);\n\n    // Will also render the child\n    super.render();\n\n    canvas.restore();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Audio Files in Flame\nDESCRIPTION: Method to load multiple audio files simultaneously using loadAll function.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_audio/audio.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait FlameAudio.audioCache.loadAll(['explosion.mp3', 'music.mp3']);\n```\n\n----------------------------------------\n\nTITLE: Adding Child Components in Flame Engine Constructor (Dart)\nDESCRIPTION: Demonstrates how to add child components using the constructor's children parameter, similar to Flutter's widget construction.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass MyGame extends FlameGame {\n  @override\n  void onLoad() {\n    add(\n      PositionComponent(\n        position: Vector2(30, 0),\n        children: [\n          HighScoreDisplay(),\n          HitPointsDisplay(),\n          FpsComponent(),\n        ],\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vector2 Extensions for Flame Engine in Dart\nDESCRIPTION: Extends the Vector2 class with additional methods, factories, and operators for use in the Flame Engine. Includes conversions to other types, interpolation, rotation, scaling, and movement operations.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/other/util.md#2025-04-20_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\n// Methods:\ntoOffset()\ntoPoint()\ntoRect()\ntoPositionedRect(Vector2 size)\nlerp(Vector2 other, double t)\nrotate(double angle, [Vector2 center])\nscaleTo(double newLength)\nmoveToTarget(Vector2 target, double distance)\n\n// Factories:\nVector2Extension.fromInts(int x, int y)\n\n// Operators:\n& // Combines two Vector2s to form a Rect\n% // Modulo/Remainder of x and y separately of two Vector2s\n```\n\n----------------------------------------\n\nTITLE: Implementing Contact Callbacks in Forge2D\nDESCRIPTION: Shows how to implement collision detection between components using ContactCallbacks mixin, allowing components to react to physics contacts with other bodies.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_forge2d/forge2d.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass Ball extends BodyComponent with ContactCallbacks {\n  ...\n  void beginContact(Object other, Contact contact) {\n    if (other is Wall) {\n      // Do something here.\n    }\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a BlocComponent in Flame Game\nDESCRIPTION: Demonstrates how to create a component that listens to bloc state changes using the BlocComponent mixin, with methods to handle state updates.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_bloc/DEPRECATED_README.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass PlayerComponent with BlocComponent<InventoryBloc, InventoryState> {\n\n  // onNewState can be overridden to so the component\n  // can be notified on state changes\n  @override\n  void onNewState(InventoryState state) {\n    print(state.weapon);\n  }\n\n  @override\n  void update(double dt) {\n    // the `state` getter can also be used to have\n    // direct access to the current state\n    print(state.weapon);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Parallax Background with ParallaxComponent - Dart\nDESCRIPTION: This code snippet shows how to load a parallax component that renders multiple images for a dynamic background effect, providing depth perception and layers.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_29\n\nLANGUAGE: dart\nCODE:\n```\n@override\nFuture<void> onLoad() async {\n  final parallaxComponent = await loadParallaxComponent([\n    ParallaxImageData('bg.png'),\n    ParallaxImageData('trees.png'),\n  ]);\n  add(parallaxComponent);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SpriteAnimationTicker in Dart\nDESCRIPTION: Demonstrates how to create a SpriteAnimationTicker using a list of sprites and a step time. This is used to create cyclic animations in Flame.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/images.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nfinal a = SpriteAnimationTicker(SpriteAnimation.spriteList(sprites, stepTime: 0.02));\n```\n\n----------------------------------------\n\nTITLE: Implementing Countdown Timer in Flame Game (Dart)\nDESCRIPTION: This snippet demonstrates how to use the Timer class in a Flame game to create a countdown. It updates the timer in the game loop and renders the current countdown value on the canvas.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/other/util.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame/components.dart';\nimport 'package:flame/game.dart';\nimport 'package:flame/input.dart';\nimport 'package:flutter/material.dart';\n\nclass MyGame extends Game {\n  final TextPaint textPaint = TextPaint(\n    style: const TextStyle(color: Colors.white, fontSize: 20),\n  );\n\n  final countdown = Timer(2);\n\n  @override\n  void update(double dt) {\n    countdown.update(dt);\n    if (countdown.finished) {\n      // Prefer the timer callback, but this is better in some cases\n    }\n  }\n\n  @override\n  void render(Canvas canvas) {\n    textPaint.render(\n      canvas,\n      \"Countdown: ${countdown.current.toString()}\",\n      Vector2(10, 100),\n    );\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding HasCollisionDetection Mixin to FlameGame Class\nDESCRIPTION: Adds the HasCollisionDetection mixin to the SpaceShooterGame class to enable collision detection in the game.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/space_shooter/step_6.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass SpaceShooterGame extends FlameGame\n    with PanDetector, HasCollisionDetection {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Playing Background Music with Volume Control in Flame Audio (Dart)\nDESCRIPTION: Play background music tracks with optional volume parameter. The first example plays at default volume, while the second sets volume to 0.25.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_audio/bgm.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nFlameAudio.bgm.play('music/boss-fight/level-382.mp3');\n```\n\nLANGUAGE: dart\nCODE:\n```\nFlameAudio.bgm.play('music/world-map.mp3', volume: .25);\n```\n\n----------------------------------------\n\nTITLE: Using FlameSplashScreen with Controller\nDESCRIPTION: This advanced snippet shows how to use a FlameSplashController to manipulate animation duration and auto-start behavior. Initialize and dispose the controller within the widget's state lifecycle for effective management.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_splash_screen/README.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass SplashScreenGameState extends State<SplashScreenGame> {\n  FlameSplashController controller;\n  @override\n  void initState() {\n      super.initState();\n      controller = FlameSplashController(\n        fadeInDuration: Duration(seconds: 1),\n        fadeOutDuration: Duration(milliseconds: 250),\n        waitDuration: Duration(seconds: 2),\n        autoStart: false,\n      );\n  }\n  \n  @override\n  void dispose() {\n    controller.dispose(); // dispose it when necessary\n    super.dispose();\n  }\n  \n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: FlameSplashScreen(\n        showBefore: (BuildContext context) {\n          return Text(\"Before the logo\");\n        },\n        showAfter: (BuildContext context) {\n          return Text(\"After the logo\");\n       },\n       theme: FlameSplashTheme.white,\n       onFinish: (context) => Navigator.pushNamed(context, '/the-game-initial-screen'),\n        controller: controller,\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring KlondikeGame Class in Flame Engine\nDESCRIPTION: This code snippet demonstrates the declaration of the KlondikeGame class, which extends FlameGame. It overrides the onLoad method to asynchronously load a sprite image into the global Flame.images cache using the Flame game engine. This setup is foundational for managing game state and assets. The only dependency required is the 'flame' package, and the primary action is image loading, which is deferred until the game initializes, ensuring that resources are available for other components.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step2.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame/game.dart';\nimport 'package:flame/flame.dart';\n\nclass KlondikeGame extends FlameGame {\n  @override\n  Future<void> onLoad() async {\n    await Flame.images.load('klondike-sprites.png');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using RiverpodGameMixin in FlameGame\nDESCRIPTION: Demonstrates the creation of a Flame game that uses Riverpod for state management via the RiverpodGameMixin. The onLoad method initializes the game and adds components to the game.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_riverpod/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n/// An excerpt from the Example. Check it out!\\nclass RefExampleGame extends FlameGame with RiverpodGameMixin {\\n  @override\\n  Future<void> onLoad() async {\\n    await super.onLoad();\\n    add(TextComponent(text: 'Flame'));\\n    add(RiverpodAwareTextComponent());\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Particle System Implementation in Flame\nDESCRIPTION: Shows the most basic usage of a Particle with FlameGame by adding a CircleParticle wrapped in a ParticleSystemComponent.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/particles.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\ngame.add(\n  // Wrapping a Particle with ParticleSystemComponent\n  // which maps Component lifecycle hooks to Particle ones\n  // and embeds a trigger for removing the component.\n  ParticleSystemComponent(\n    particle: CircleParticle(),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Collision Handling in Enemy Class\nDESCRIPTION: Adds CollisionCallbacks mixin to the Enemy class and implements onCollisionStart method to handle collisions with bullets.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/space_shooter/step_6.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass Enemy extends SpriteAnimationComponent\n    with HasGameReference<SpaceShooterGame>, CollisionCallbacks {\n\n  // Other methods omitted\n\n  @override\n  void onCollisionStart(\n    Set<Vector2> intersectionPoints,\n    PositionComponent other,\n  ) {\n    super.onCollisionStart(intersectionPoints, other);\n\n    if (other is Bullet) {\n      removeFromParent();\n      other.removeFromParent();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Render Contexts in Dart\nDESCRIPTION: Illustrates how to create and use custom render contexts to pass render-specific properties down the component tree, allowing children to access parent context.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nclass IntContext extends ComponentRenderContext {\n  int value;\n\n  IntContext(this.value);\n}\n\nclass ParentWithContext extends Component {\n  @override\n  IntContext renderContext = IntContext(42);\n}\n\nclass ChildReadsContext extends Component {\n  @override\n  void render(Canvas canvas) {\n    final context = findRenderContext<IntContext>();\n    // context.value available\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Ray Casting in Flame Engine with Dart\nDESCRIPTION: This snippet demonstrates how to use the raycast method in a Flame game. It creates a ray from a specific origin and direction, then uses the collisionDetection system to check for intersections with hitboxes.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/collision_detection.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nclass MyGame extends FlameGame with HasCollisionDetection {\n  @override\n  void update(double dt) {\n    super.update(dt);\n    final ray = Ray2(\n        origin: Vector2(0, 100),\n        direction: Vector2(1, 0),\n    );\n    final result = collisionDetection.raycast(ray);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Behavior Tree Sequence in Dart\nDESCRIPTION: Example of creating a behavior tree with a sequence of conditions and tasks that model an AI entity getting food when hungry.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_behavior_tree/behavior_tree/README.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal treeRoot = Sequence(\n  children: [\n    Condition(() => isHungry),\n    Task(() => goToShop()),\n    Task(() => buyFood()),\n    Task(() => goToHome()),\n    Task(() => eatFood()),\n  ]\n);\n```\n\n----------------------------------------\n\nTITLE: Using FlameMultiBlocProvider for Multiple Blocs\nDESCRIPTION: Demonstrates how to provide multiple blocs to components using FlameMultiBlocProvider, which allows components to access different blocs like PlayerInventoryBloc and PlayerStatsBloc.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_bloc/README.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyGame extends FlameGame {\n  @override\n  Future<void> onLoad() async {\n    await add(\n      FlameMultiBlocProvider(\n        providers: [\n          FlameBlocProvider<PlayerInventoryBloc, PlayerInventoryState>(\n            create: () => PlayerInventoryBloc(),\n          ),\n          FlameBlocProvider<PlayerStatsBloc, PlayerStatsState>(\n            create: () => PlayerStatsBloc(),\n          ),\n        ],\n        children: [\n          Player(),\n          // ...\n        ],\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Matrix4 Extensions for Flame Engine in Dart\nDESCRIPTION: Extends the Matrix4 class with additional methods, getters, and factories for use in the Flame Engine. Includes translation, transformation, and element access operations.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/other/util.md#2025-04-20_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\n// Methods:\ntranslate2(Vector2 translation)\ntransform2(Vector2 vector)\ntransformed2(Vector2 input, Vector2 output)\n\n// Getters:\nm11, m12, m13, m14\nm21, m22, m23, m24\nm31, m32, m33, m34\nm41, m42, m43, m44\n\n// Factories:\nMatrix4Extension.scale(Vector4 scale)\nMatrix4Extension.scale(Vector2 scale)\nMatrix4Extension.scale(double x, double y, double z)\n```\n\n----------------------------------------\n\nTITLE: Implementing Joystick Controls in Flame Game Engine\nDESCRIPTION: Example showing how to create a virtual joystick control in a Flame game. Demonstrates creating a game class with joystick component and a player class that responds to joystick input. Includes sprite sheet loading, joystick configuration, and player movement calculations.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/inputs/other_inputs.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MyGame extends FlameGame {\n\n  @override\n  Future<void> onLoad() async {\n    super.onLoad();\n    final image = await images.load('joystick.png');\n    final sheet = SpriteSheet.fromColumnsAndRows(\n      image: image,\n      columns: 6,\n      rows: 1,\n    );\n    final joystick = JoystickComponent(\n      knob: SpriteComponent(\n        sprite: sheet.getSpriteById(1),\n        size: Vector2.all(100),\n      ),\n      background: SpriteComponent(\n        sprite: sheet.getSpriteById(0),\n        size: Vector2.all(150),\n      ),\n      margin: const EdgeInsets.only(left: 40, bottom: 40),\n    );\n\n    final player = Player(joystick);\n    add(player);\n    add(joystick);\n  }\n}\n\nclass Player extends SpriteComponent with HasGameReference {\n  Player(this.joystick)\n    : super(\n        anchor: Anchor.center,\n        size: Vector2.all(100.0),\n      );\n\n  /// Pixels/s\n  double maxSpeed = 300.0;\n\n  final JoystickComponent joystick;\n\n  @override\n  Future<void> onLoad() async {\n    sprite = await gameRef.loadSprite('layers/player.png');\n    position = gameRef.size / 2;\n  }\n\n  @override\n  void update(double dt) {\n    if (joystick.direction != JoystickDirection.idle) {\n      position.add(joystick.relativeDelta  * maxSpeed * dt);\n      angle = joystick.delta.screenAngle();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Game Objects in Dart\nDESCRIPTION: Defines basic classes for game objects like GroundBlock, PlatformBlock, Star, and WaterEnemy. These are placeholder classes that will be expanded later.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_3.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass GroundBlock {}\n\nclass PlatformBlock {}\n\nclass Star {}\n```\n\nLANGUAGE: dart\nCODE:\n```\nclass WaterEnemy {}\n```\n\n----------------------------------------\n\nTITLE: Registering and Querying PositionComponents in Dart\nDESCRIPTION: Demonstrates how to register a query for PositionComponents in the onLoad method and then use that query in the update method to retrieve all PositionComponents.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid onLoad() {\n  children.register<PositionComponent>();\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid update(double dt) {\n  final allPositionComponents = children.query<PositionComponent>();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SizeEffect.to in Dart for Flame Engine\nDESCRIPTION: Sets absolute size of a component to specified dimensions using Vector2 and EffectController.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/effects.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nfinal effect = SizeEffect.to(\n  Vector2(90, 80),\n  EffectController(duration: 1),\n);\n```\n\n----------------------------------------\n\nTITLE: Particle System Implementation Approaches\nDESCRIPTION: Demonstrates three different approaches to implement particle effects: composition, chaining, and computed particles.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/particles.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nRandom rnd = Random();\n\nVector2 randomVector2() => (Vector2.random(rnd) - Vector2.random(rnd)) * 200;\n\n// Composition.\n//\n// Defining a particle effect as a set of nested behaviors from top to bottom,\n// one within another:\n//\n// ParticleSystemComponent\n//   > ComposedParticle\n//     > AcceleratedParticle\n//       > CircleParticle\ngame.add(\n  ParticleSystemComponent(\n    particle: Particle.generate(\n      count: 10,\n      generator: (i) => AcceleratedParticle(\n        acceleration: randomVector2(),\n        child: CircleParticle(\n          paint: Paint()..color = Colors.red,\n        ),\n      ),\n    ),\n  ),\n);\n\n// Chaining.\n//\n// Expresses the same behavior as above, but with a more fluent API.\n// Only Particles with SingleChildParticle mixin can be used as chainable behaviors.\ngame.add(\n  ParticleSystemComponent(\n    particle: Particle.generate(\n      count: 10,\n      generator: (i) => pt.CircleParticle(paint: Paint()..color = Colors.red)\n    )\n  )\n);\n\n// Computed Particle.\n//\n// All the behaviors are defined explicitly. Offers greater flexibility\n// compared to built-in behaviors.\ngame.add(\n  ParticleSystemComponent(\n      particle: Particle.generate(\n        count: 10,\n        generator: (i) {\n          Vector2 position = Vector2.zero();\n          Vector2 speed = Vector2.zero();\n          final acceleration = randomVector2();\n          final paint = Paint()..color = Colors.red;\n\n          return ComputedParticle(\n            renderer: (canvas, _) {\n              speed += acceleration;\n              position += speed;\n              canvas.drawCircle(Offset(position.x, position.y), 1, paint);\n            }\n        );\n      }\n    )\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Win Condition Check in Klondike Solitaire (Dart)\nDESCRIPTION: This method checks if all foundation piles are full, indicating a win condition in the Klondike Solitaire game. It triggers a celebration if the game is won.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step5.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n  void checkWin()\n  {\n    var nComplete = 0;\n    for (final f in foundations) {\n      if (f.isFull) {\n        nComplete++;\n      }\n    }\n    if (nComplete == foundations.length) {\n      letsCelebrate();\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Using Component Keys in Flame Engine (Dart)\nDESCRIPTION: Demonstrates how to use component keys for identification and retrieval within the component tree.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nfinal myComponent = Component(\n  key: ComponentKey.named('player'),\n);\n```\n\nLANGUAGE: dart\nCODE:\n```\nflameGame.findByKey(ComponentKey.named('player'));\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal key = ComponentKey.unique();\nfinal key2 = key;\nprint(key == key2); // true\nprint(key == ComponentKey.unique()); // false\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal key1 = ComponentKey.named('player');\nfinal key2 = ComponentKey.named('player');\nprint(key1 == key2); // true\n```\n\nLANGUAGE: dart\nCODE:\n```\nflameGame.findByKeyName('player');\n```\n\n----------------------------------------\n\nTITLE: Setting Up Body UserData for Contact Detection\nDESCRIPTION: Demonstrates how to properly configure a physics body with userData to enable contact detection and callbacks between components.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_forge2d/forge2d.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass Ball extends BodyComponent with ContactCallbacks {\n  ...\n\n  @override\n  Body createBody() {\n    ...\n    final bodyDef = BodyDef(\n      userData: this,\n    );\n    ...\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HasVisibility Mixin in Dart\nDESCRIPTION: Shows how to use the HasVisibility mixin to control component visibility without removing it from the tree, affecting the component and all its descendants.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n/// Example that implements HasVisibility\nclass MyComponent extends PositionComponent with HasVisibility {}\n\n/// Usage of the isVisible property\nfinal myComponent = MyComponent();\nadd(myComponent);\n\nmyComponent.isVisible = false;\n```\n\n----------------------------------------\n\nTITLE: Listening to Bloc State Changes with FlameBlocListener\nDESCRIPTION: Shows how to respond to state changes from a bloc using FlameBlocListener component. This approach adds a listener component to respond to PlayerInventoryState changes.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_bloc/README.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass Player extends PositionComponent {\n  @override\n  Future<void> onLoad() async {\n    await add(\n      FlameBlocListener<PlayerInventoryBloc, PlayerInventoryState>(\n        listener: (state) {\n          updateGear(state);\n        },\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Rive Animation in Flame Game (Dart)\nDESCRIPTION: This snippet demonstrates how to load a Rive animation file, create a StateMachineController, and add a RiveComponent to a Flame game. It shows the basic setup required to use Rive animations in a Flame project.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_rive/rive.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass RiveExampleGame extends FlameGame {\n  @override\n  Future<void> onLoad() async {\n    final skillsArtboard =\n    await loadArtboard(RiveFile.asset('assets/skills.riv'));\n\n    final controller = StateMachineController.fromArtboard(\n      skillsArtboard,\n      \"Designer's Test\",\n    );\n\n    skillsArtboard.addController(controller!);\n\n    add(RiveComponent(artboard: skillsArtboard, size: Vector2.all(550)));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Enemy Class in Dart for Flame Engine\nDESCRIPTION: This snippet defines an Enemy class that extends SpriteAnimationComponent. It sets up the enemy's size, animation, and movement behavior. The enemy moves downward and is removed when it goes off-screen.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/space_shooter/step_5.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass Enemy extends SpriteAnimationComponent\n    with HasGameReference<SpaceShooterGame> {\n\n  Enemy({\n    super.position,\n  }) : super(\n          size: Vector2.all(enemySize),\n          anchor: Anchor.center,\n        );\n\n\n  static const enemySize = 50.0;\n\n  @override\n  Future<void> onLoad() async {\n    await super.onLoad();\n\n    animation = await game.loadSpriteAnimation(\n      'enemy.png',\n      SpriteAnimationData.sequenced(\n        amount: 4,\n        stepTime: .2,\n        textureSize: Vector2.all(16),\n      ),\n    );\n  }\n\n  @override\n  void update(double dt) {\n    super.update(dt);\n\n    position.y += dt * 250;\n\n    if (position.y > game.size.y) {\n      removeFromParent();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Klondike Game Cards in Dart\nDESCRIPTION: This snippet demonstrates how to create a full deck of 52 cards in the Klondike game and add them to the stock pile. Cards are created with ranks and suits and added to the game world, showcasing an important initialization step.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step4.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal cards = [\n  for (var rank = 1; rank <= 13; rank++)\n    for (var suit = 0; suit < 4; suit++)\n      Card(rank, suit)\n];\nworld.addAll(cards);\ncards.forEach(stock.acquireCard);\n```\n\n----------------------------------------\n\nTITLE: Configuring SpriteAnimationComponent Reset Behavior\nDESCRIPTION: This snippet demonstrates how to set a SpriteAnimationComponent to reset to its first frame when removed from the game. This is useful for ensuring animations start from the beginning when components are reused.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\nSpriteAnimationComponent(\n  animation: animation,\n  size: Vector2.all(64.0),\n  resetOnRemove: true,\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag Update Handler for Card Stacks in Flame\nDESCRIPTION: Updates the onDragUpdate method to move all attached cards along with the main dragged card. This ensures the stack of cards moves as a single unit when dragged.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step4.md#2025-04-20_snippet_31\n\nLANGUAGE: dart\nCODE:\n```\n  @override\n  void onDragUpdate(DragUpdateEvent event) {\n    if (!isDragged) {\n      return;\n    }\n    final delta = event.localDelta;\n    position.add(delta);\n    attachedCards.forEach((card) => card.position.add(delta));\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding HasBehaviorTree Mixin to Component - Dart\nDESCRIPTION: This snippet demonstrates how to add the `HasBehaviorTree` mixin to a custom component in the Flame engine. It allows the component to utilize behavior trees for AI functionality.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_behavior_tree/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MyComponent extends Position with HasBehaviorTree {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Ground Block Class Implementation\nDESCRIPTION: The full implementation of the GroundBlock class, which handles positioning, collision detection, movement, and triggering new segment generation when blocks move off-screen.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_4.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:math';\n\nimport 'package:flame/collisions.dart';\nimport 'package:flame/components.dart';\nimport 'package:flutter/material.dart';\n\nimport '../ember_quest.dart';\nimport '../managers/segment_manager.dart';\n\nclass GroundBlock extends SpriteComponent with HasGameReference<EmberQuestGame> {\n  final Vector2 gridPosition;\n  double xOffset;\n  \n  final UniqueKey _blockKey = UniqueKey();\n  final Vector2 velocity = Vector2.zero();\n\n  GroundBlock({\n    required this.gridPosition,\n    required this.xOffset,\n  }) : super(size: Vector2.all(64), anchor: Anchor.bottomLeft);\n\n  @override\n  void onLoad() {\n    final groundImage = game.images.fromCache('ground.png');\n    sprite = Sprite(groundImage);\n    position = Vector2(\n      gridPosition.x * size.x + xOffset,\n      game.size.y - gridPosition.y * size.y,\n    );\n    add(RectangleHitbox(collisionType: CollisionType.passive));\n    if (gridPosition.x == 9 && position.x > game.lastBlockXPosition) {\n      game.lastBlockKey = _blockKey;\n      game.lastBlockXPosition = position.x + size.x;\n    }\n  }\n\n  @override\n  void update(double dt) {\n    velocity.x = game.objectSpeed;\n    position += velocity * dt;\n\n    if (position.x < -size.x) {\n      removeFromParent();\n      if (gridPosition.x == 0) {\n        game.loadGameSegments(\n          Random().nextInt(segments.length),\n          game.lastBlockXPosition,\n        );\n      }\n    }\n    if (gridPosition.x == 9) {\n      if (game.lastBlockKey == _blockKey) {\n        game.lastBlockXPosition = position.x + size.x - 10;\n      }\n    }\n\n    super.update(dt);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Tiled Component in Flame\nDESCRIPTION: Basic example of loading a TMX map file using TiledComponent with specified tile size.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_tiled/flame_tiled.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal component = await TiledComponent.load(\n  'my_map.tmx',\n  Vector2.all(32),\n);\n\nadd(component);\n```\n\n----------------------------------------\n\nTITLE: Built-in Particle Types Implementation\nDESCRIPTION: Examples of implementing various built-in particle types including TranslatedParticle, MovingParticle, CircleParticle, and more.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/particles.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\ngame.add(\n  ParticleSystemComponent(\n    particle: TranslatedParticle(\n      // Will translate the child Particle effect to the center of game canvas.\n      offset: game.size / 2,\n      child: Particle(),\n    ),\n  ),\n);\n\ngame.add(\n  ParticleSystemComponent(\n    particle: MovingParticle(\n      // Will move from corner to corner of the game canvas.\n      from: Vector2.zero(),\n      to: game.size,\n      child: CircleParticle(\n        radius: 2.0,\n        paint: Paint()..color = Colors.red,\n      ),\n    ),\n  ),\n);\n\nfinal rnd = Random();\nVector2 randomVector2() => (Vector2.random(rnd) - Vector2.random(rnd)) * 100;\n\ngame.add(\n  ParticleSystemComponent(\n    particle: AcceleratedParticle(\n      // Will fire off in the center of game canvas\n      position: game.canvasSize/2,\n      // With random initial speed of Vector2(-100..100, 0..-100)\n      speed: Vector2(rnd.nextDouble() * 200 - 100, -rnd.nextDouble() * 100),\n      // Accelerating downwards, simulating \"gravity\"\n      // speed: Vector2(0, 100),\n      child: CircleParticle(\n        radius: 2.0,\n        paint: Paint()..color = Colors.red,\n      ),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing FlameGame with Custom CameraComponent\nDESCRIPTION: Shows how to initialize FlameGame with a custom CameraComponent using fixed resolution.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/camera.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  runApp(\n    GameWidget(\n      FlameGame(\n        camera: CameraComponent.withFixedResolution(\n          width: 800,\n          height: 600,\n        ),\n        world: MyWorld(),\n      ),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an IsometricTileMapComponent in Dart\nDESCRIPTION: Demonstrates how to create an IsometricTileMapComponent using a tileset image and a matrix representing the map layout. This component is used for rendering isometric tile-based maps.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_41\n\nLANGUAGE: dart\nCODE:\n```\n// Creates a tileset, the block ids are automatically assigned sequentially\n// starting at 0, from left to right and then top to bottom.\nfinal tilesetImage = await images.load('tileset.png');\nfinal tileset = SpriteSheet(image: tilesetImage, srcSize: Vector2.all(32));\n// Each element is a block id, -1 means nothing\nfinal matrix = [[0, 1, 0], [1, 0, 0], [1, 1, 1]];\nadd(IsometricTileMapComponent(tileset, matrix));\n```\n\n----------------------------------------\n\nTITLE: Using ComponentParticle in Flame (Dart)\nDESCRIPTION: This snippet shows how to embed a `Component` within a particle system using `ComponentParticle`. The `Component` has its own update lifecycle and can be reused across different effect trees.  The example defines a simple `RectComponent` and adds it to the `ParticleSystemComponent` using `ComponentParticle`.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/particles.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal longLivingRect = RectComponent();\n\ngame.add(\n  ParticleSystemComponent(\n    particle: ComponentParticle(\n      component: longLivingRect\n    );\n  ),\n);\n\nclass RectComponent extends Component {\n  void render(Canvas c) {\n    c.drawRect(\n      Rect.fromCenter(center: Offset.zero, width: 100, height: 100),\n      Paint()..color = Colors.red\n    );\n  }\n\n  void update(double dt) {\n    /// Will be called by parent [Particle]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Stock Pile Card Refill Method in Dart\nDESCRIPTION: Implements card refill mechanism for stock pile when empty, moving cards from waste pile back to stock pile\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step4.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid onTapUp(TapUpEvent event) {\n  final wastePile = parent!.firstChild<WastePile>()!;\n  if (_cards.isEmpty) {\n    wastePile.removeAllCards().reversed.forEach((card) {\n      card.flip();\n      acquireCard(card);\n    });\n  } else {\n    for (var i = 0; i < 3; i++) {\n      if (_cards.isNotEmpty) {\n        final card = _cards.removeLast();\n        card.flip();\n        wastePile.acquireCard(card);\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GlowEffect in Dart for Flame Engine\nDESCRIPTION: Applies glowing shade effect around component with specified strength using EffectController.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/effects.md#2025-04-20_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nfinal effect = GlowEffect(\n  10.0,\n  EffectController(duration: 3),\n);\n```\n\n----------------------------------------\n\nTITLE: Component Collision Type Checking in Flame\nDESCRIPTION: Demonstrates how to implement collision type checking for game components using the CollisionCallbacks mixin, including filtering collision types and handling collision events.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/collision_detection.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass Bullet extends PositionComponent with CollisionCallbacks {\n\n  @override\n  bool onComponentTypeCheck(PositionComponent other) {\n    if (other is Player || other is Water) {\n      // do NOT collide with Player or Water\n      return false;\n    }\n    // Just return true if you're not interested in the parent's type check result.\n    // Or call super and you will be able to override the result with the parent's\n    // result.\n    return super.onComponentTypeCheck(other);\n  }\n\n  @override\n  void onCollisionStart(\n    Set<Vector2> intersectionPoints,\n    PositionComponent other,\n  ) {\n    // Removes the component when it comes in contact with a Brick.\n    // Neither Player nor Water would be passed to this function\n    // because these classes are filtered out by [onComponentTypeCheck]\n    // in an earlier stage.\n    if (other is Brick) {\n      removeFromParent();\n    }\n    super.onCollisionStart(intersectionPoints, other);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MoveToEffect in Flame Engine\nDESCRIPTION: Creates a MoveToEffect that moves a PositionComponent to an absolute position over a duration of 3 seconds.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/effects.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal effect = MoveToEffect(\n  Vector2(100, 500),\n  EffectController(duration: 3),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing WastePile Component in Flame with Dart\nDESCRIPTION: The WastePile class in this snippet handles card management for the waste pile in a Klondike game. It acquires cards to be displayed face up and maintains order with fanned-out display. This snippet includes a method to adjust card positions for visualization.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step4.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass WastePile extends PositionComponent {\n  WastePile({super.position}) : super(size: KlondikeGame.cardSize);\n\n  final List<Card> _cards = [];\n\n  void acquireCard(Card card) {\n    assert(card.isFaceUp);\n    card.position = position;\n    card.priority = _cards.length;\n    _cards.add(card);\n  }\n\n  void _fanOutTopCards() {\n    final n = _cards.length;\n    for (var i = 0; i < n; i++) {\n      _cards[i].position = position;\n    }\n    if (n == 2) {\n      _cards[1].position.add(_fanOffset);\n    } else if (n >= 3) {\n      _cards[n - 2].position.add(_fanOffset);\n      _cards[n - 1].position.addScaled(_fanOffset, 2);\n    }\n  }\n\n  final Vector2 _fanOffset = Vector2(KlondikeGame.cardWidth * 0.2, 0);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Player Movement\nDESCRIPTION: Creates an update method that handles player movement based on the horizontal direction input.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_5.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n  @override\n  void update(double dt) {\n    velocity.x = horizontalDirection * moveSpeed;\n    position += velocity * dt;\n    super.update(dt);\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing FunctionEffect in Dart for Flame Engine\nDESCRIPTION: Creates custom effect using function callback to modify component state over time.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/effects.md#2025-04-20_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nenum PlayerState {\n  idle,\n  yawn,\n}\n\nfinal effect = FunctionEffect<SpriteAnimationGroupComponent<PlayerState>>(\n  (target, progress) {\n    if (progress > 0.5) {\n      target.current = PlayerState.yawn;\n    } else if(progress > 0.8) {\n      target.current = PlayerState.idle;\n    }\n  },\n  EffectController(\n    duration: 10,\n    infinite: true,\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Enforcing Ancestor Type in Flame Engine Component (Dart)\nDESCRIPTION: Shows how to use the HasAncestor mixin to ensure a component has a specific ancestor type in the component tree.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass MyComponent extends Component with HasAncestor<MyAncestorComponent> {\n  @override\n  void onLoad() {\n    // ancestor is of type MyAncestorComponent.\n    print(ancestor.myValue);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing Rank and Suit Symbols in Corners of Card in Dart\nDESCRIPTION: This snippet adds code to the `_renderFront()` method to draw the rank and suit symbols in the corners of the card. It selects the appropriate rank sprite based on the suit color and calls the `_drawSprite` method to render them with specific positions, scales, and rotations.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step3.md#2025-04-20_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\n    final rankSprite = suit.isBlack ? rank.blackSprite : rank.redSprite;\n    final suitSprite = suit.sprite;\n    _drawSprite(canvas, rankSprite, 0.1, 0.08);\n    _drawSprite(canvas, rankSprite, 0.1, 0.08, rotate: true);\n    _drawSprite(canvas, suitSprite, 0.1, 0.18, scale: 0.5);\n    _drawSprite(canvas, suitSprite, 0.1, 0.18, scale: 0.5, rotate: true);\n```\n\n----------------------------------------\n\nTITLE: Card Face-Up Accessors and Mutators in Dart\nDESCRIPTION: This code defines getter and setter methods for the `_faceUp` property of the `Card` class.  It provides public access to the card's face-up state, allowing the game logic to check and modify whether the card is facing up or down. The `flip()` method toggles the `_faceUp` state.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step3.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n\"  bool get isFaceUp => _faceUp;\\n  bool get isFaceDown => !_faceUp;\\n  void flip() => _faceUp = !_faceUp;\"\n```\n\n----------------------------------------\n\nTITLE: Adding Passive RectangleHitbox to Bullet Class\nDESCRIPTION: Adds a passive rectangular hitbox to the Bullet class for optimized collision detection.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/space_shooter/step_6.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nadd(\n  RectangleHitbox(\n    collisionType: CollisionType.passive,\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Pixelation Post-Processing Effect in Flame (Dart)\nDESCRIPTION: This snippet demonstrates how to create a custom pixelation post-processing effect in Flame. It includes a PostProcessGame class that adds a PostProcessComponent with a PixelationPostProcess to the game world. The PixelationPostProcess class loads a fragment shader, updates it over time, and applies the effect to the rendered subtree.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/post_processing.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass PostProcessGame extends FlameGame {\n  @override\n  Future<void> onLoad() async {\n    await super.onLoad();\n\n    world.add(\n      PostProcessComponent(\n        postProcess: PixelationPostProcess(),\n        anchor: Anchor.center,\n        children: [\n          EmberPlayer(size: Vector2(100, 100)),\n        ],\n      ),\n    );\n  }\n}\n\nclass PixelationPostProcess extends PostProcess {\n  @override\n  Future<void> onLoad() async {\n    await super.onLoad();\n\n    _fragmentProgram = await FragmentProgram.fromAsset(\n      'packages/flutter_shaders/shaders/pixelation.frag',\n    );\n  }\n\n  late final FragmentProgram _fragmentProgram;\n  late final FragmentShader _fragmentShader = _fragmentProgram.fragmentShader();\n\n  double _time = 0;\n\n  @override\n  void update(double dt) {\n    super.update(dt);\n    _time += dt;\n  }\n\nlate final myPaint = Paint()..shader = _fragmentShader;\n\n\n  @override\n  void postProcess(Vector2 size, Canvas canvas) {\n    final preRenderedSubtree = rasterizeSubtree();\n\n    _fragmentShader.setFloatUniforms((value) {\n      value\n        ..setVector(size / (20 * sin(_time)))\n        ..setVector(size);\n    });\n\n    _fragmentShader.setImageSampler(0, preRenderedSubtree);\n\n    canvas\n      ..save()\n      ..drawRect(Offset.zero & size.toSize(), myPaint)\n      ..restore();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Base Velocity in ParallaxComponent - Dart\nDESCRIPTION: This snippet demonstrates how to set base velocity and velocity multipliers for layers in a parallax background, allowing for customizable movement behavior in relation to player events.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_31\n\nLANGUAGE: dart\nCODE:\n```\n@override\nFuture<void> onLoad() async {\n  final parallaxComponent = await loadParallaxComponent(\n    _dataList,\n    baseVelocity: Vector2(20, 0),\n    velocityMultiplierDelta: Vector2(1.8, 1.0),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Different Layer Types in Flame Tilemap\nDESCRIPTION: Shows how to retrieve different types of layers (ObjectGroup, ImageLayer, TileLayer, Group) from a Tilemap using the getLayer generic method. Each call returns either the requested layer type or null if not found.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_tiled/layers.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\ngetLayer<ObjectGroup>(\"myObjectGroupLayer\");\ngetLayer<ImageLayer>(\"myImageLayer\");\ngetLayer<TileLayer>(\"myTileLayer\");\ngetLayer<Group>(\"myGroupLayer\");\n```\n\n----------------------------------------\n\nTITLE: Loading Network Images with FlameNetworkImages in Dart\nDESCRIPTION: Demonstrates how to use the built-in FlameNetworkImages class to load image assets from a URL.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_network_assets/flame_network_assets.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal networkAssets = FlameNetworkImages();\nfinal playerSprite = await networkAssets.load('https://url.com/image.png');\n```\n\n----------------------------------------\n\nTITLE: Creating DistanceJoint in Forge2D\nDESCRIPTION: Implements a distance joint that maintains a fixed distance between two bodies using a virtual rigid rod. Supports configuration of length, frequency, and damping ratio.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_forge2d/joints.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal distanceJointDef = DistanceJointDef()\n  ..initialize(firstBody, secondBody, firstBody.worldCenter, secondBody.worldCenter)\n  ..length = 10\n  ..frequencyHz = 3\n  ..dampingRatio = 0.2;\n\nworld.createJoint(DistanceJoint(distanceJointDef));\n```\n\n----------------------------------------\n\nTITLE: Accessing a Bloc Using FlameBlocReader Mixin\nDESCRIPTION: Shows how to use the FlameBlocReader mixin to directly access a bloc from a component. This allows the Player component to dispatch events to the PlayerStatsBloc.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_bloc/README.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass Player extends PositionComponent\n  with FlameBlocReader<PlayerStatsBloc, PlayerStatsState> {\n\n  void takeHit() {\n    bloc.add(const PlayerDamaged());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Gaussian Blur Decorator in Dart\nDESCRIPTION: Creates a PaintDecorator that applies a Gaussian blur effect to a component. The blur amount can be different in X and Y directions.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/decorators.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal decorator = PaintDecorator.blur(3.0);\n```\n\n----------------------------------------\n\nTITLE: Creating Main HUD Component in Dart\nDESCRIPTION: Implements the main Hud class that combines score display, star icon, and heart health components. It handles the layout and updating of HUD elements.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_6.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame/components.dart';\nimport 'package:flutter/material.dart';\n\nimport '../ember_quest.dart';\nimport 'heart.dart';\n\nclass Hud extends PositionComponent with HasGameReference<EmberQuestGame> {\n  Hud({\n    super.position,\n    super.size,\n    super.scale,\n    super.angle,\n    super.anchor,\n    super.children,\n    super.priority = 5,\n  });\n\n  late TextComponent _scoreTextComponent;\n\n  @override\n  Future<void> onLoad() async {\n    _scoreTextComponent = TextComponent(\n      text: '${game.starsCollected}',\n      textRenderer: TextPaint(\n        style: const TextStyle(\n          fontSize: 32,\n          color: Color.fromRGBO(10, 10, 10, 1),\n        ),\n      ),\n      anchor: Anchor.center,\n      position: Vector2(game.size.x - 60, 20),\n    );\n    add(_scoreTextComponent);\n\n    final starSprite = await game.loadSprite('star.png');\n    add(\n      SpriteComponent(\n        sprite: starSprite,\n        position: Vector2(game.size.x - 100, 20),\n        size: Vector2.all(32),\n        anchor: Anchor.center,\n      ),\n    );\n\n    for (var i = 1; i <= game.health; i++) {\n      final positionX = 40 * i;\n      await add(\n        HeartHealthComponent(\n          heartNumber: i,\n          position: Vector2(positionX.toDouble(), 20),\n          size: Vector2.all(32),\n        ),\n      );\n    }\n  }\n\n  @override\n  void update(double dt) {\n    _scoreTextComponent.text = '${game.starsCollected}';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: QuadTree Optimization in Flame\nDESCRIPTION: Example showing how to optimize QuadTree collision detection by cleaning up empty quadrants after intensive gameplay sessions.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/collision_detection.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nclass QuadTreeExample extends FlameGame\n        with HasQuadTreeCollisionDetection {\n\n  /// A function called when intensive gameplay session is over\n  /// It also might be scheduled, but no need to run it on every update.\n  /// Use right interval depending on your game circumstances\n  onGameIdle() {\n    (collisionDetection as QuadTreeCollisionDetection)\n            .quadBroadphase\n            .tree\n            .optimize();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Card Stack Placement in FoundationPile\nDESCRIPTION: Modifies the canAcceptCard method to prevent dropping stacks of cards onto foundation piles. This enforces the rule that only single cards can be moved to foundation piles.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step4.md#2025-04-20_snippet_32\n\nLANGUAGE: dart\nCODE:\n```\n  @override\n  bool canAcceptCard(Card card) {\n    final topCardRank = _cards.isEmpty ? 0 : _cards.last.rank.value;\n    return card.suit == suit &&\n        card.rank.value == topCardRank + 1 &&\n        card.attachedCards.isEmpty;\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing ColorEffect in Dart for Flame Engine\nDESCRIPTION: Applies color tint to component with configurable opacity range using EffectController.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/effects.md#2025-04-20_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nfinal effect = ColorEffect(\n  const Color(0xFF00FF00),\n  EffectController(duration: 1.5),\n  opacityFrom: 0.2,\n  opacityTo: 0.8,\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering SVG Directly on Canvas in Dart using flame_svg\nDESCRIPTION: Demonstrates how to load and render an SVG file directly on the canvas using position and size vectors. This approach is useful for simple SVG rendering without component integration.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_svg/svg.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal svgInstance = await Svg.load('android.svg');\n\nfinal position = Vector2(100, 100);\nfinal size = Vector2(300, 300);\n\nsvgInstance.renderPosition(canvas, position, size);\n```\n\n----------------------------------------\n\nTITLE: Using FlameBlocListenable Mixin in a Flame Component\nDESCRIPTION: Shows how to use the FlameBlocListenable mixin in a Player component to listen for state changes in PlayerInventoryBloc.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_bloc/bloc.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass Player extends PositionComponent\n    with FlameBlocListenable<PlayerInventoryBloc, PlayerInventoryState> {\n\n  @override\n  void onNewState(state) {\n    updateGear(state);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Ember to the Game World in Flame Engine\nDESCRIPTION: This snippet shows how to create an instance of the EmberPlayer and add it to the game world. It positions Ember in the lower-left corner of the screen.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_2.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame/game.dart';\n\nimport 'actors/ember.dart';\n\nclass EmberQuestGame extends FlameGame {\n  late EmberPlayer _ember;\n  \n  @override\n  Future<void> onLoad() async {\n    await images.loadAll([\n      'block.png',\n      'ember.png',\n      'ground.png',\n      'heart_half.png',\n      'heart.png',\n      'star.png',\n      'water_enemy.png',\n    ]);\n\n    camera.viewfinder.anchor = Anchor.topLeft;\n    \n    _ember = EmberPlayer(\n      position: Vector2(128, canvasSize.y - 70),\n    );\n    world.add(_ember);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom TextBoxComponent Implementation in Dart\nDESCRIPTION: Example of a custom TextBoxComponent with background and border styling\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/text_rendering.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyTextBox extends TextBoxComponent {\n  MyTextBox(String text) : super(\n    text: text,\n    textRenderer: tiny,\n    boxConfig: TextBoxConfig(timePerChar: 0.05),\n  );\n\n  final bgPaint = Paint()..color = Color(0xFFFF00FF);\n  final borderPaint = Paint()..color = Color(0xFF000000)..style = PaintingStyle.stroke;\n\n  @override\n  void render(Canvas canvas) {\n    Rect rect = Rect.fromLTWH(0, 0, width, height);\n    canvas.drawRect(rect, bgPaint);\n    canvas.drawRect(rect.deflate(boxConfig.margin), borderPaint);\n    super.render(canvas);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FlameMultiBlocProvider\nDESCRIPTION: Shows how to provide multiple blocs to the component tree simultaneously using FlameMultiBlocProvider.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_bloc/bloc_components.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFlameMultiBlocProvider(\n  providers: [\n    FlameBlocProvider<BlocA, BlocAState>(\n      create: () => BlocA(),\n    ),\n    FlameBlocProvider<BlocB, BlocBState>.value(\n      create: () => BlocB(),\n    ),\n    ],\n  children: [...],\n)\n```\n\n----------------------------------------\n\nTITLE: Playing Looping Background Music in Flame Audio (Dart)\nDESCRIPTION: Play a looping background music track using the Bgm class. Requires proper folder structure and pubspec.yaml configuration.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_audio/bgm.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame_audio/flame_audio.dart';\n\nFlameAudio.bgm.play('adventure-track.mp3');\n```\n\n----------------------------------------\n\nTITLE: Implementing GameRef Mixin in Dart for Oxygen ECS\nDESCRIPTION: Demonstrates how to use the GameRef mixin to access the OxygenGame instance within a custom system. This allows easy access to game methods and properties.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/oxygen/oxygen.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass YourSystem extends System with GameRef<YourGame> {\n  @override\n  void init() {\n    // Access to game using the .game property\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing FlameGame Background Color\nDESCRIPTION: Example of overriding the backgroundColor method in a FlameGame to change the default background color from opaque black to transparent.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/game.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyGame extends FlameGame {\n  @override\n  Color backgroundColor() => const Color(0x00000000);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Component Visibility with CameraComponent in Dart\nDESCRIPTION: Demonstrates how to use the canSee method to check if a component is visible from the camera's perspective. This can be used for component culling to improve performance.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/camera.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nif (!camera.canSee(component)) {\n   component.removeFromParent(); // Cull the component\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Entity with Text Using World in Dart\nDESCRIPTION: This snippet demonstrates how to create an entity with text using the World in the Flame engine. It adds a TextComponent with specified text and configuration.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/oxygen/components.md#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nworld.createEntity()\n  ..add<TextComponent, TextInit>(\n    TextInit(\n      'Your text',\n      config: const TextPaintConfig(),\n    ),\n  );\n```\n\n----------------------------------------\n\nTITLE: Adding Static Background to Camera Backdrop\nDESCRIPTION: Shows two ways to add a static background to the camera's backdrop component.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/camera.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\ncamera.backdrop.add(MyStaticBackground());\n\n// or\n\ncamera.backdrop = MyStaticBackground();\n```\n\n----------------------------------------\n\nTITLE: Creating a WeldJoint in Flame Engine with Forge2D\nDESCRIPTION: This snippet demonstrates how to create a WeldJoint using WeldJointDef in the Flame Engine. It initializes the joint definition with two bodies and an anchor point, then creates the joint in the world.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_forge2d/joints.md#2025-04-20_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nfinal weldJointDef = WeldJointDef()\n  ..initialize(bodyA, bodyB, anchor);\n\nworld.createJoint(WeldJoint(weldJointDef));\n```\n\n----------------------------------------\n\nTITLE: Handling Pan and Scale Events Together in Flame\nDESCRIPTION: Example showing how to handle both pan and scale events simultaneously using the ScaleDetector mixin. This snippet demonstrates moving the camera on pan and zooming on scale within a single detector implementation.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/inputs/gesture_input.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n  late double startZoom;\n\n  @override\n  void onScaleStart(_) {\n    startZoom = camera.zoom;\n  }\n\n  @override\n  void onScaleUpdate(ScaleUpdateInfo info) {\n    final currentScale = info.scale.global;\n    if (!currentScale.isIdentity()) {\n      camera.zoom = startZoom * currentScale.y;\n    } else {\n      camera.translateBy(-info.delta.global);\n      camera.snap();\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating Anchored Entity Using OxygenGame in Dart\nDESCRIPTION: This snippet showcases how to create an anchored entity in the Flame engine using the OxygenGame. It initializes a new entity with a specified anchor position.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/oxygen/components.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\ngame.createEntity(\n  position: // ...\n  size: // ...\n  anchor: Anchor.center,\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Ground Block to Load New Segments\nDESCRIPTION: Extends the update method of a GroundBlock component to remove off-screen blocks and load new game segments when the first block of a segment moves off-screen.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_4.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nif (position.x < -size.x) {\n  removeFromParent();\n  if (gridPosition.x == 0) {\n    game.loadGameSegments(\n      Random().nextInt(segments.length),\n      game.lastBlockXPosition,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Snapshot Usage with Children in Flame Engine\nDESCRIPTION: Demonstrates advanced snapshot usage including adding child components and handling background sprites.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/layers.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass SnapshotComponent extends PositionComponent with Snapshot {}\n\nclass MyGame extends FlameGame {\n  late final SnapshotComponent root;\n  late final SpriteComponent background1;\n  late final SpriteComponent background2;\n\n  @override\n  Future<void> onLoad() async {\n    // Add a snapshot component.\n    root = SnapshotComponent();\n    add(root);\n\n    // Add some children.\n    final background1Sprite = Sprite(await images.load('background1.png'));\n    background1 = SpriteComponent(sprite: background1Sprite);\n    root.add(background1);\n\n    final background2Sprite = Sprite(await images.load('background2.png'));\n    background2 = SpriteComponent(sprite: background2Sprite);\n    root.add(background2);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Individual Sprites from SpriteSheet in Dart\nDESCRIPTION: Demonstrates how to retrieve individual Sprite instances from a SpriteSheet using either id or row and column coordinates.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/images.md#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nspriteSheet.getSpriteById(2); // by id\nspriteSheet.getSprite(0, 0); // row, column\n```\n\n----------------------------------------\n\nTITLE: Loading Fire Atlas Asset in Dart\nDESCRIPTION: Demonstrates how to load a Fire Atlas file from assets. This approach uses the direct FireAtlas.loadAsset method to load an atlas file located at assets/atlas.fa.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_fire_atlas/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// file at assets/atlas.fa\nfinal atlas = await FireAtlas.loadAsset('atlas.fa');\n```\n\n----------------------------------------\n\nTITLE: Loading Images in Game Class\nDESCRIPTION: Example of loading and using images within a Game class implementation\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/images.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass MyGame extends Game {\n\n  Sprite player;\n\n  @override\n  Future<void> onLoad() async {\n    // Note that you could also use Sprite.load for this.\n    final playerImage = await images.load('player.png');\n    player = Sprite(playerImage);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing PrismaticJoint in Dart\nDESCRIPTION: This code snippet shows how to initialize a PrismaticJoint in Dart. It creates a joint definition and initializes it with two bodies, an anchor point, and an axis of motion.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_forge2d/joints.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nfinal prismaticJointDef = PrismaticJointDef()\n  ..initialize(\n    dynamicBody,\n    groundBody,\n    dynamicBody.worldCenter,\n    Vector2(1, 0),\n  )\n```\n\n----------------------------------------\n\nTITLE: List of Touch and Mouse Detector Mixins in Flame\nDESCRIPTION: A comprehensive list of all available gesture detector mixins in Flame's gesture package. These mixins can be added to game classes to enable handling of various touch and mouse events.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/inputs/gesture_input.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- TapDetector\n  - onTap\n  - onTapCancel\n  - onTapDown\n  - onLongTapDown\n  - onTapUp\n\n- SecondaryTapDetector\n  - onSecondaryTapDown\n  - onSecondaryTapUp\n  - onSecondaryTapCancel\n\n- TertiaryTapDetector\n  - onTertiaryTapDown\n  - onTertiaryTapUp\n  - onTertiaryTapCancel\n\n- DoubleTapDetector\n  - onDoubleTap\n\n- LongPressDetector\n  - onLongPress\n  - onLongPressStart\n  - onLongPressMoveUpdate\n  - onLongPressUp\n  - onLongPressEnd\n\n- VerticalDragDetector\n  - onVerticalDragDown\n  - onVerticalDragStart\n  - onVerticalDragUpdate\n  - onVerticalDragEnd\n  - onVerticalDragCancel\n\n- HorizontalDragDetector\n  - onHorizontalDragDown\n  - onHorizontalDragStart\n  - onHorizontalDragUpdate\n  - onHorizontalDragEnd\n  - onHorizontalDragCancel\n\n- ForcePressDetector\n  - onForcePressStart\n  - onForcePressPeak\n  - onForcePressUpdate\n  - onForcePressEnd\n\n- PanDetector\n  - onPanDown\n  - onPanStart\n  - onPanUpdate\n  - onPanEnd\n  - onPanCancel\n\n- ScaleDetector\n  - onScaleStart\n  - onScaleUpdate\n  - onScaleEnd\n\n- MultiTouchTapDetector\n  - onTap\n  - onTapCancel\n  - onTapDown\n  - onTapUp\n\n- MultiTouchDragDetector\n  - onReceiveDrag\n```\n\n----------------------------------------\n\nTITLE: Animating Tile Stack in Flame\nDESCRIPTION: Example of selecting and animating a column of tiles using TileStack with sequence effects.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_tiled/flame_tiled.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvoid onLoad() {\n  final stack = map.tileMap.tileStack(4, 0, named: {'floor_under'});\n  stack.add(\n    SequenceEffect(\n      [\n        MoveEffect.by(\n          Vector2(5, 0),\n          NoiseEffectController(duration: 1, frequency: 20),\n        ),\n        MoveEffect.by(Vector2.zero(), LinearEffectController(2)),\n      ],\n      repeatCount: 3,\n    )\n      ..onComplete = () => stack.removeFromParent(),\n  );\n  map.add(stack);\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Background Pausing in FlameGame\nDESCRIPTION: Example showing how to disable the default behavior where games are automatically paused when the app is sent to the background.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/game.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass MyGame extends FlameGame {\n  MyGame() {\n    pauseWhenBackgrounded = false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Sized Entity Using OxygenGame in Dart\nDESCRIPTION: This snippet illustrates how to create a sized entity in the Flame engine using the OxygenGame. It initializes a new entity with a specified size using a Vector2 object.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/oxygen/components.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\ngame.createEntity(\n  position: // ...\n  size: Vector2(50, 50),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing returnCard in Pile Subclasses Dart\nDESCRIPTION: This code implements the `returnCard` method for each of the pile subclasses: `StockPile`, `WastePile`, `FoundationPile`, and `TableauPile`. Each implementation returns the card to its original position within the pile and updates the pile's state as needed. Different piles have different logic to properly return a card, primarily dealing with position and priority.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step4.md#2025-04-20_snippet_23\n\nLANGUAGE: dart\nCODE:\n```\n\"class StockPile ... implements Pile {\\n  ...\\n  @override\\n  void returnCard(Card card) => throw StateError('cannot remove cards from here');\\n}\"\n```\n\nLANGUAGE: dart\nCODE:\n```\n\"class WastePile ... implements Pile {\\n  ...\\n  @override\\n  void returnCard(Card card) {\\n    card.priority = _cards.indexOf(card);\\n    _fanOutTopCards();\\n  }\\n}\"\n```\n\nLANGUAGE: dart\nCODE:\n```\n\"class FoundationPile ... implements Pile {\\n  ...\\n  @override\\n  void returnCard(Card card) {\\n    card.position = position;\\n    card.priority = _cards.indexOf(card);\\n  }\\n}\"\n```\n\nLANGUAGE: dart\nCODE:\n```\n\"class TableauPile ... implements Pile {\\n  ...\\n  @override\\n  void returnCard(Card card) {\\n    final index = _cards.indexOf(card);\\n    card.position =\\n        index == 0 ? position : _cards[index - 1].position + _fanOffset;\\n    card.priority = index;\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Creating Ember Player Sprite in Flame Engine\nDESCRIPTION: This code defines the EmberPlayer class, which extends SpriteAnimationComponent. It sets up the player's sprite animation, size, and position in the game world.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_2.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame/components.dart';\n\nimport '../ember_quest.dart';\n\nclass EmberPlayer extends SpriteAnimationComponent\n    with HasGameReference<EmberQuestGame> {\n  EmberPlayer({\n    required super.position,\n  }) : super(size: Vector2.all(64), anchor: Anchor.center);\n\n  @override\n  void onLoad() {\n    animation = SpriteAnimation.fromFrameData(\n      game.images.fromCache('ember.png'),\n      SpriteAnimationData.sequenced(\n        amount: 4,\n        textureSize: Vector2.all(16),\n        stepTime: 0.12,\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Visual Elements for StockPile\nDESCRIPTION: This code is responsible for rendering the visual appearance of the StockPile when it's empty, by drawing a bordered rectangle with a circle. It uses custom Paint objects for styling and defines a card outline using static methods.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step4.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n  @override\n  void render(Canvas canvas) {\n    canvas.drawRRect(KlondikeGame.cardRRect, _borderPaint);\n    canvas.drawCircle(\n      Offset(width / 2, height / 2),\n      KlondikeGame.cardWidth * 0.3,\n      _circlePaint,\n    );\n  }\n\n  final _borderPaint = Paint()\n    ..style = PaintingStyle.stroke\n    ..strokeWidth = 10\n    ..color = const Color(0xFF3F5B5D);\n  final _circlePaint = Paint()\n    ..style = PaintingStyle.stroke\n    ..strokeWidth = 100\n    ..color = const Color(0x883F5B5D);\n```\n\n----------------------------------------\n\nTITLE: Implementing Ground Collision Detection\nDESCRIPTION: Creates an onCollision method to handle collisions between the player and ground/platform blocks.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_5.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid onCollision(Set<Vector2> intersectionPoints, PositionComponent other) {\n  if (other is GroundBlock || other is PlatformBlock) {\n    if (intersectionPoints.length == 2) {\n      // Calculate the collision normal and separation distance.\n      final mid = (intersectionPoints.elementAt(0) +\n        intersectionPoints.elementAt(1)) / 2;\n\n      final collisionNormal = absoluteCenter - mid;\n      final separationDistance = (size.x / 2) - collisionNormal.length;\n      collisionNormal.normalize();\n\n      // If collision normal is almost upwards,\n      // ember must be on ground.\n      if (fromAbove.dot(collisionNormal) > 0.9) {\n        isOnGround = true;\n      }\n\n      // Resolve collision by moving ember along\n      // collision normal by separation distance.\n      position += collisionNormal.scaled(separationDistance);\n      }\n    }\n\n  super.onCollision(intersectionPoints, other);\n}\n```\n\n----------------------------------------\n\nTITLE: Disposing Bgm in Flame Audio (Dart)\nDESCRIPTION: Remove the Bgm observer when background music is no longer needed but the application is still running.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_audio/bgm.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFlameAudio.bgm.dispose();\n```\n\n----------------------------------------\n\nTITLE: Calling Manual Component Updates in Flame Engine\nDESCRIPTION: When not using FlameGame, components need to be manually updated by calling their update() method each game cycle. This allows components like SpriteAnimationTicker to update their internal state and process animations correctly.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_45\n\nLANGUAGE: dart\nCODE:\n```\ncomponent.update()\n```\n\n----------------------------------------\n\nTITLE: Simple Test Example\nDESCRIPTION: Demonstrates the simplest form of test for checking isolated functionality.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/development/testing_guide.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\ntest('the name of the test', () {\n  expect(...);\n});\n```\n\n----------------------------------------\n\nTITLE: Foundation Pile Rendering in Dart\nDESCRIPTION: Implements custom rendering for foundation pile with suit sprite and border\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step4.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid render(Canvas canvas) {\n  canvas.drawRRect(KlondikeGame.cardRRect, _borderPaint);\n  suit.sprite.render(\n    canvas,\n    position: size / 2,\n    anchor: Anchor.center,\n    size: Vector2.all(KlondikeGame.cardWidth * 0.6),\n    overridePaint: _suitPaint,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PrismaticJoint Motor in Dart\nDESCRIPTION: This code shows how to enable and configure the motor for a PrismaticJoint in Dart. It sets the motor speed and maximum force.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_forge2d/joints.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\njointDef\n  ..enableMotor = true\n  ..motorSpeed = 1\n  ..maxMotorForce = 100;\n```\n\n----------------------------------------\n\nTITLE: Implementing RiverpodComponentMixin for Reactive Text Component\nDESCRIPTION: Defines a PositionComponent that reacts to changes in a Riverpod provider, leveraging the RiverpodComponentMixin to manage subscriptions and updates to the displayed text value.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_riverpod/README.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass RiverpodAwareTextComponent extends PositionComponent\\n    with RiverpodComponentMixin {\\n  late TextComponent textComponent;\\n  int currentValue = 0;\\n\\n  /// [onMount] should be used over [onLoad] to initialize subscriptions,\\n  /// cancellation is handled for the user inside [onRemove],\\n  /// which is only called if the [Component] was mounted.\\n  ///  \\n  /// [RiverpodComponentMixin.addToGameWidgetBuild] **must** be invoked in  \\n  /// your Component **before** [RiverpodComponentMixin.onMount] in order to  \\n  /// have the provided function invoked on  \\n  /// [RiverpodAwareGameWidgetState.build].\\n  ///  \\n  /// From `flame_riverpod` 5.0.0, [WidgetRef.watch], is also accessible from \\n  /// components.\\n  @override\\n  void onMount() {\\n    addToGameWidgetBuild(() {\\n      ref.listen(countingStreamProvider, (p0, p1) {\\n        if (p1.hasValue) {\\n          currentValue = p1.value!;\\n          textComponent.text = '$currentValue';\\n        }\\n      });\\n    });\\n    super.onMount();\\n    add(textComponent = TextComponent(position: position + Vector2(0, 27)));\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Entity with Sprite Using OxygenGame in Dart\nDESCRIPTION: This snippet illustrates how to create an entity with a sprite in the Flame engine using the OxygenGame. It initializes a new entity and adds a SpriteComponent with a loaded sprite from an image file.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/oxygen/components.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\ngame.createEntity(\n  position: // ...\n  size: // ...\n)..add<SpriteComponent, SpriteInit>(\n  SpriteInit(await game.loadSprite('pizza.png')),\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing and Managing Background Music\nDESCRIPTION: This snippet details the initialization and control of background music in Flame games using FlameAudio. It includes code for initializing the background music manager, playing music with specified volume, and managing playback through stop, pause, and resume functions.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_audio/README.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFlameAudio.bgm.initialize();\n```\n\nLANGUAGE: dart\nCODE:\n```\nFlameAudio.bgm.dispose();\n```\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame_audio/flame_audio.dart';\n\n// play with optional volume param\nFlameAudio.bgm.play('music/world-map.mp3', volume: .25);\n```\n\nLANGUAGE: dart\nCODE:\n```\nFlameAudio.bgm.stop();\n```\n\nLANGUAGE: dart\nCODE:\n```\nFlameAudio.bgm.pause();\nFlameAudio.bgm.resume();\n```\n\n----------------------------------------\n\nTITLE: Updating Card Movement Permission in TableauPile\nDESCRIPTION: Modifies the canMoveCard method to allow dragging any face-up card from a tableau pile, not just the top card. This enables moving sub-stacks of cards within the game.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step4.md#2025-04-20_snippet_29\n\nLANGUAGE: dart\nCODE:\n```\n  @override\n  bool canMoveCard(Card card) => card.isFaceUp;\n```\n\n----------------------------------------\n\nTITLE: Implementing SequenceEffectController in Dart for Flame Engine\nDESCRIPTION: Creates a SequenceEffectController that executes a sequence of effect controllers one after another.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/effects.md#2025-04-20_snippet_28\n\nLANGUAGE: dart\nCODE:\n```\nfinal ec = SequenceEffectController([\n  LinearEffectController(1),\n  PauseEffectController(0.2),\n  ReverseLinearEffectController(1),\n]);\n```\n\n----------------------------------------\n\nTITLE: Adding Collision Detection to Game Class\nDESCRIPTION: Adds the HasCollisionDetection mixin to the game class to enable collision handling.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_5.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nclass EmberQuestGame extends FlameGame\n    with HasCollisionDetection, HasKeyboardHandlerComponents {\n```\n\n----------------------------------------\n\nTITLE: Implementing WorldRoute for Game Levels\nDESCRIPTION: Demonstrates how to use WorldRoute for managing different game worlds/levels with router navigation\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/router.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal router = RouterComponent(\n  routes: {\n    'level1': WorldRoute(MyWorld1.new),\n    'level2': WorldRoute(MyWorld2.new, maintainState: false),\n  },\n);\n\nclass MyWorld1 extends World {\n  @override\n  Future<void> onLoad() async {\n    add(BackgroundComponent());\n    add(PlayerComponent());\n  }\n}\n\nclass MyWorld2 extends World {\n   @override\n   Future<void> onLoad() async {\n      add(BackgroundComponent());\n      add(PlayerComponent());\n      add(EnemyComponent());\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom World in Flame\nDESCRIPTION: Demonstrates how to create a custom World class and use it with FlameGame and GameWidget.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/camera.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  runApp(GameWidget(FlameGame(world: MyWorld())));\n}\n\nclass MyWorld extends World {\n  @override\n  Future<void> onLoad() async {\n    // Load all the assets that are needed in this world\n    // and add components etc.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NineTileBoxWidget in Dart using Flame\nDESCRIPTION: Example of using the NineTileBoxWidget which creates a nine-slice scalable container using a grid sprite. It requires an image, tile size, destination size, and can contain other Flutter widgets.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/other/widgets.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame/widgets';\n\nNineTileBoxWidget(\n    image: image, // dart:ui image instance\n    tileSize: 16, // The width/height of the tile on your grid image\n    destTileSize: 50, // The dimensions to be used when drawing the tile on the canvas\n    child: SomeWidget(), // Any Flutter widget\n)\n```\n\n----------------------------------------\n\nTITLE: HUD Component Addition with Viewport\nDESCRIPTION: Demonstrates adding HUD components to the viewport using the new CameraComponent system.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\ncameraComponent.viewport.add(yourHudComponent);\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Options in Yarn Spinner\nDESCRIPTION: Shows how to create options with conditionals in Yarn Spinner. Conditionals are short-form <<if>> commands that determine whether an option is available based on certain conditions. The example includes various options with different conditions and outcomes.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/options.md#2025-04-20_snippet_1\n\nLANGUAGE: yarn\nCODE:\n```\ntitle: Bridge\n---\nGuard: 50 coins and you can cross the bridge.\n-> Alright, take the money  <<if $gold >= 50>>\n   <<take gold 50>>\n   <<grant bridge_pass>>\n-> I have so much money, here, take a 100  <<if $gold >= 10000>>\n   <<take gold 100>>\n   <<grant bridge_pass>>\n   Guard: Wow, so generous!\n   Guard: But I wouldn't recommend going around telling everyone that you \\\n          have \"so much money\"\n-> That's too expensive!\n   Guard: Is it? My condolences\n-> How about I [s]kick your butt[/s] instead?\n   <<if $power < 1000>>\n      <<fight>>\n   <<else>>\n      You make a very reasonable point, sir, my apologies.\n      <<grant bridge_pass>>\n   <<endif>>\n===\n```\n\n----------------------------------------\n\nTITLE: Implementing GearJoint in Forge2D\nDESCRIPTION: Creates a gear joint to connect two joints (Revolute or Prismatic) together with a specified ratio. Requires the connected joints to attach a dynamic body to a static body.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_forge2d/joints.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal gearJointDef = GearJointDef()\n  ..bodyA = firstJoint.bodyA\n  ..bodyB = secondJoint.bodyA\n  ..joint1 = firstJoint\n  ..joint2 = secondJoint\n  ..ratio = 1;\n\nworld.createJoint(GearJoint(gearJointDef));\n```\n\n----------------------------------------\n\nTITLE: Implementing OpacityToEffect in Dart for Flame Engine\nDESCRIPTION: Changes component opacity to specified value over time using EffectController.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/effects.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nfinal effect = OpacityEffect.to(\n  0.2,\n  EffectController(duration: 0.75),\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Ground Block to the Game World\nDESCRIPTION: Code to be added to the EmberQuestGame class that handles adding GroundBlock components to the world when a new segment is loaded.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_4.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\ncase GroundBlock:\n  world.add(\n    GroundBlock(\n      gridPosition: block.gridPosition,\n      xOffset: xPositionOffset,\n    ),\n  );\n```\n\n----------------------------------------\n\nTITLE: Setting Up Behavior Tree in Component - Dart\nDESCRIPTION: The snippet shows how to initialize a behavior tree for a component by setting its root. It illustrates the use of Selector and Sequence nodes in defining the behavior.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_behavior_tree/README.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyComponent extends PositionComponent with HasBehaviorTree {\n  Future<void> onLoad() async {\n    treeRoot = Selector(\n      children: [\n        Sequence(children: [task1, condition, task2]),\n        Sequence(...),\n      ]\n    );\n    super.onLoad();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TextElementComponent with DocumentRoot in Dart\nDESCRIPTION: Example of creating a formatted text document using TextElementComponent\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/text_rendering.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal document = DocumentRoot([\n  HeaderNode.simple('1984', level: 1),\n  ParagraphNode.simple(\n    'Anything could be true. The so-called laws of nature were nonsense.',\n  ),\n  // ...\n]);\nfinal element = TextElementComponent.fromDocument(\n  document: document,\n  position: Vector2(100, 50),\n  size: Vector2(400, 200),\n);\n```\n\n----------------------------------------\n\nTITLE: Loading Game Segments in Ember Quest with Dart\nDESCRIPTION: This method loads game segments into the world by iterating through segment blocks and handling different block types. It's part of the game initialization process for creating the level.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_3.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvoid loadGameSegments(int segmentIndex, double xPositionOffset) {\n    for (final block in segments[segmentIndex]) {\n      switch (block.blockType) {\n        case GroundBlock:\n        case PlatformBlock:\n        case Star:\n        case WaterEnemy:\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag Start Handler for Card Stacks in Flame\nDESCRIPTION: Updates the onDragStart method to collect all cards stacked on top of the dragged card and set their priorities correctly. This ensures proper visual layering during dragging operations.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step4.md#2025-04-20_snippet_30\n\nLANGUAGE: dart\nCODE:\n```\n  @override\n  void onDragStart(DragStartEvent event) {\n    if (pile?.canMoveCard(this) ?? false) {\n      super.onDragStart();\n      priority = 100;\n      if (pile is TableauPile) {\n        attachedCards.clear();\n        final extraCards = (pile! as TableauPile).cardsOnTop(this);\n        for (final card in extraCards) {\n          card.priority = attachedCards.length + 101;\n          attachedCards.add(card);\n        }\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Initializing RevoluteJoint in Dart\nDESCRIPTION: This code snippet shows how to create and initialize a RevoluteJoint in Dart. It sets up the joint definition with two bodies and a common anchor point.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_forge2d/joints.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nfinal jointDef = RevoluteJointDef()\n  ..initialize(firstBody, secondBody, firstBody.position);\nworld.createJoint(RevoluteJoint(jointDef));\n```\n\n----------------------------------------\n\nTITLE: Implementing removeCard in Pile Subclasses Dart\nDESCRIPTION: This code implements the `removeCard` method for each of the pile subclasses: `StockPile`, `WastePile`, `FoundationPile`, and `TableauPile`. Each implementation removes the card from the pile's internal data structure and updates the pile's state as needed.  Assertions are included to ensure that the card can be moved from the pile before removal.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step4.md#2025-04-20_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\n\"class StockPile ... implements Pile {\\n  ...\\n  @override\\n  void removeCard(Card card) => throw StateError('cannot remove cards from here');\\n}\"\n```\n\nLANGUAGE: dart\nCODE:\n```\n\"class WastePile ... implements Pile {\\n  ...\\n  @override\\n  void removeCard(Card card) {\\n    assert(canMoveCard(card));\\n    _cards.removeLast();\\n    _fanOutTopCards();\\n  }\\n}\"\n```\n\nLANGUAGE: dart\nCODE:\n```\n\"class FoundationPile ... implements Pile {\\n  ...\\n  @override\\n  void removeCard(Card card) {\\n    assert(canMoveCard(card));\\n    _cards.removeLast();\\n  }\\n}\"\n```\n\nLANGUAGE: dart\nCODE:\n```\n\"class TableauPile ... implements Pile {\\n  ...\\n  @override\\n  void removeCard(Card card) {\\n    assert(_cards.contains(card) && card.isFaceUp);\\n    final index = _cards.indexOf(card);\\n    _cards.removeRange(index, _cards.length);\\n    if (_cards.isNotEmpty && _cards.last.isFaceDown) {\\n      flipTopCard();\\n    }\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Using Cached Images in Game\nDESCRIPTION: Example of accessing previously loaded images from cache during gameplay\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/images.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass MyGame extends Game {\n\n  // attributes omitted\n\n  @override\n  Future<void> onLoad() async {\n    // other loads omitted\n    await images.load('bullet.png');\n  }\n\n  void shoot() {\n    // This is just an example, in your game you probably don't want to\n    // instantiate new [Sprite] objects every time you shoot.\n    final bulletSprite = Sprite(images.fromCache('bullet.png'));\n    _bullets.add(bulletSprite);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing FlameBlocProvider in Dart\nDESCRIPTION: Shows how to create and provide a new bloc instance to child components using FlameBlocProvider. The bloc is created and managed within the component lifecycle.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_bloc/bloc_components.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFlameBlocProvider<BlocA, BlocAState>(\n  create: () => BlocA(),\n  children: [...]\n);\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Game Resources in onRemove Lifecycle Method\nDESCRIPTION: Example implementation of the onRemove lifecycle method in a FlameGame, showing how to properly clean up children components and cached resources when the game is removed.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/game.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n  @override\n  void onRemove() {\n    // Optional based on your game needs.\n    removeAll(children);\n    processLifecycleEvents();\n    Flame.images.clearCache();\n    Flame.assets.clearCache();\n    // Any other code that you want to run when the game is removed.\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding Star Component to Game World in Dart\nDESCRIPTION: This snippet shows how to add the Star component to the game world in the main game file.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_4.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\ncase Star:\n  world.add(\n    Star(\n      gridPosition: block.gridPosition,\n      xOffset: xPositionOffset,\n    ),\n  );\n```\n\n----------------------------------------\n\nTITLE: Button Layout Implementation in KlondikeWorld\nDESCRIPTION: Code for positioning and adding game control buttons in the KlondikeWorld class, including positioning calculations and button creation.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step5.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n    playAreaSize =\n        Vector2(7 * cardSpaceWidth + cardGap, 4 * cardSpaceHeight + topGap);\n    final gameMidX = playAreaSize.x / 2;\n\n    addButton('New deal', gameMidX, Action.newDeal);\n    addButton('Same deal', gameMidX + cardSpaceWidth, Action.sameDeal);\n    addButton('Draw 1 or 3', gameMidX + 2 * cardSpaceWidth, Action.changeDraw);\n    addButton('Have fun', gameMidX + 3 * cardSpaceWidth, Action.haveFun);\n```\n\n----------------------------------------\n\nTITLE: Card Movement Animation Implementation\nDESCRIPTION: Adds a doMove method to Card class for animating card transitions with customizable speed, curve, and completion callback\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step5.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvoid doMove(\n    Vector2 to, {\n    double speed = 10.0,\n    double start = 0.0,\n    Curve curve = Curves.easeOutQuad,\n    VoidCallback? onComplete,\n  }) {\n    assert(speed > 0.0, 'Speed must be > 0 widths per second');\n    final dt = (to - position).length / (speed * size.x);\n    assert(dt > 0.0, 'Distance to move must be > 0');\n    priority = 100;\n    add(\n      MoveToEffect(\n        to,\n        EffectController(duration: dt, startDelay: start, curve: curve),\n        onComplete: () {\n          onComplete?.call();\n        },\n      ),\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Initializing CameraComponent and World\nDESCRIPTION: This snippet demonstrates how to declare variables for a `World` and a `CameraComponent` in a Flame game class.  These variables are then initialized within the `onLoad` method, with the `World` and `CameraComponent` added to the game.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n\"final world = World();\\nlate final CameraComponent cameraComponent;\"\n```\n\n----------------------------------------\n\nTITLE: Adding Physics Variables\nDESCRIPTION: Defines variables for implementing basic physics like gravity and jumping.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_5.md#2025-04-20_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\n  final double gravity = 15;\n  final double jumpSpeed = 600;\n  final double terminalVelocity = 150;\n\n  bool hasJumped = false;\n```\n\n----------------------------------------\n\nTITLE: Defining Player Movement Variables\nDESCRIPTION: Sets up velocity and movement speed variables for the player character to control its motion.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_5.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nfinal Vector2 velocity = Vector2.zero();\nfinal double moveSpeed = 200;\n```\n\n----------------------------------------\n\nTITLE: Implementing OpacityByEffect in Dart for Flame Engine\nDESCRIPTION: Changes component opacity by relative value using EffectController.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/effects.md#2025-04-20_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nfinal effect = OpacityEffect.by(\n  0.9,\n  EffectController(duration: 0.75),\n);\n```\n\n----------------------------------------\n\nTITLE: Card Back Properties Definition in Dart\nDESCRIPTION: This code defines the static properties used for rendering the back of the card, including `Paint` objects for the background and borders, `RRect` objects for the card shape, and a `Sprite` object for the flame logo.  Declaring these as static ensures that they are initialized only once, saving resources since they are the same for all cards.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step3.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n\"  static final Paint backBackgroundPaint = Paint()\\n    ..color = const Color(0xff380c02);\\n  static final Paint backBorderPaint1 = Paint()\\n    ..color = const Color(0xffdbaf58)\\n    ..style = PaintingStyle.stroke\\n    ..strokeWidth = 10;\\n  static final Paint backBorderPaint2 = Paint()\\n    ..color = const Color(0x5CEF971B)\\n    ..style = PaintingStyle.stroke\\n    ..strokeWidth = 35;\\n  static final RRect cardRRect = RRect.fromRectAndRadius(\\n    KlondikeGame.cardSize.toRect(),\\n    const Radius.circular(KlondikeGame.cardRadius),\\n  );\\n  static final RRect backRRectInner = cardRRect.deflate(40);\\n  static final Sprite flameSprite = klondikeSprite(1367, 6, 357, 501);\"\n```\n\n----------------------------------------\n\nTITLE: Defining the Pile Interface in Dart\nDESCRIPTION: This code defines the abstract `Pile` interface.  This interface is intended to be implemented by all the different piles in the card game, such as `StockPile`, `WastePile`, `FoundationPile`, and `TableauPile`.  It declares a `canMoveCard` method to determine if a card can be moved from that pile.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step4.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n\"abstract class Pile {\\n  bool canMoveCard(Card card);\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Enemy Hit Effect\nDESCRIPTION: Creates a method to handle visual feedback when the player is hit by an enemy.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_5.md#2025-04-20_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\n// This method runs an opacity effect on ember\n// to make it blink.\nvoid hit() {\n  if (!hitByEnemy) {\n    hitByEnemy = true;\n  }\n  add(\n    OpacityEffect.fadeOut(\n    EffectController(\n      alternate: true,\n      duration: 0.1,\n      repeatCount: 6,\n    ),\n    )..onComplete = () {\n      hitByEnemy = false;\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MoveAlongPathEffect in Flame Engine\nDESCRIPTION: Creates a MoveAlongPathEffect that moves a component along a quadratic Bezier curve path over 1.5 seconds.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/effects.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal effect = MoveAlongPathEffect(\n  Path()..quadraticBezierTo(100, 0, 50, -50),\n  EffectController(duration: 1.5),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag End Handler for Card Stacks in Flame\nDESCRIPTION: Updates the onDragEnd method to handle dropping a stack of cards onto a new pile or returning them to the original pile. This ensures all attached cards move together with the main card.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step4.md#2025-04-20_snippet_33\n\nLANGUAGE: dart\nCODE:\n```\n  @override\n  void onDragEnd(DragEndEvent event) {\n    if (!isDragged) {\n      return;\n    }\n    super.onDragEnd(event);\n    final dropPiles = parent!\n        .componentsAtPoint(position + size / 2)\n        .whereType<Pile>()\n        .toList();\n    if (dropPiles.isNotEmpty) {\n      if (dropPiles.first.canAcceptCard(this)) {\n        pile!.removeCard(this);\n        dropPiles.first.acquireCard(this);\n        if (attachedCards.isNotEmpty) {\n          attachedCards.forEach((card) => dropPiles.first.acquireCard(card));\n          attachedCards.clear();\n        }\n        return;\n      }\n    }\n    pile!.returnCard(this);\n    if (attachedCards.isNotEmpty) {\n      attachedCards.forEach((card) => pile!.returnCard(card));\n      attachedCards.clear();\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Rendering the Card Front Background and Border in Dart\nDESCRIPTION: This snippet defines a `_renderFront` method that draws the background and border of the card on a given canvas. The background is drawn using `frontBackgroundPaint`, and the border color is determined based on whether the card's suit is red or black.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step3.md#2025-04-20_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\n  void _renderFront(Canvas canvas) {\n    canvas.drawRRect(cardRRect, frontBackgroundPaint);\n    canvas.drawRRect(\n      cardRRect,\n      suit.isRed ? redBorderPaint : blackBorderPaint,\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Card renderBack() Implementation in Dart\nDESCRIPTION: This snippet implements the `_renderBack()` method, which draws the back of the card. It uses `canvas.drawRRect` to draw the background and borders and `flameSprite.render` to draw the Flame logo in the center of the card. Anchor.center is used to render the sprite in the middle of the card.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step3.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n\"  void _renderBack(Canvas canvas) {\\n    canvas.drawRRect(cardRRect, backBackgroundPaint);\\n    canvas.drawRRect(cardRRect, backBorderPaint1);\\n    canvas.drawRRect(backRRectInner, backBorderPaint2);\\n    flameSprite.render(canvas, position: size / 2, anchor: Anchor.center);\\n  }\"\n```\n\n----------------------------------------\n\nTITLE: Creating SVG Component in Flame Game using SvgComponent\nDESCRIPTION: Shows how to create and add an SVG component to a Flame game using the SvgComponent class. This approach integrates with Flame's component system for more structured rendering and management.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_svg/svg.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyGame extends FlameGame {\n  @override\n  Future<void> onLoad() async {\n    final svgInstance = await Svg.load('android.svg');\n    final size = Vector2.all(100);\n    final position = Vector2.all(100);\n    final svgComponent = SvgComponent(\n      size: size,\n      position: position,\n      svg: svgInstance,\n    );\n\n    add(svgComponent);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GroundBlock Component with Global Position Tracking in Dart\nDESCRIPTION: This snippet defines a GroundBlock class that extends SpriteComponent. It includes logic for tracking the last block's position and updating global game state.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_4.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame/collisions.dart';\nimport 'package:flame/components.dart';\nimport 'package:flutter/material.dart';\n\nimport '../ember_quest.dart';\n\nclass GroundBlock extends SpriteComponent with HasGameReference<EmberQuestGame> {\n  final Vector2 gridPosition;\n  double xOffset;\n\n  final Vector2 velocity = Vector2.zero();\n  final UniqueKey _blockKey = UniqueKey();\n\n  GroundBlock({\n    required this.gridPosition,\n    required this.xOffset,\n  }) : super(size: Vector2.all(64), anchor: Anchor.bottomLeft);\n\n  @override\n  void onLoad() {\n    final groundImage = game.images.fromCache('ground.png');\n    sprite = Sprite(groundImage);\n    position = Vector2(\n      gridPosition.x * size.x + xOffset,\n      game.size.y - gridPosition.y * size.y,\n    );\n    add(RectangleHitbox(collisionType: CollisionType.passive));\n    if (gridPosition.x == 9 && position.x > game.lastBlockXPosition) {\n      game.lastBlockKey = _blockKey;\n      game.lastBlockXPosition = position.x + size.x;\n    }\n  }\n\n  @override\n  void update(double dt) {\n    velocity.x = game.objectSpeed;\n    position += velocity * dt;\n\n    if (gridPosition.x == 9) {\n      if (game.lastBlockKey == _blockKey) {\n        game.lastBlockXPosition = position.x + size.x - 10;\n      }\n    }\n\n    super.update(dt);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Providing a Bloc to Components with FlameBlocProvider\nDESCRIPTION: Shows how to make a BLoC available to child components in a Flame game using FlameBlocProvider. This enables components like Player to access the PlayerInventoryBloc.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_bloc/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MyGame extends FlameGame {\n  @override\n  Future<void> onLoad() async {\n    await add(\n      FlameBlocProvider<PlayerInventoryBloc, PlayerInventoryState>(\n        create: () => PlayerInventoryBloc(),\n        children: [\n          Player(),\n          // ...\n        ],\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Usage of FlameSplashScreen\nDESCRIPTION: This snippet demonstrates the basic usage of FlameSplashScreen with two parameters: theme and onFinish. The theme parameter decides the appearance, while onFinish is a callback executed after the splash screen animations.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_splash_screen/README.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFlameSplashScreen(\n  theme: FlameSplashTheme.dark,\n  onFinish: (BuildContext context) => Navigator.pushNamed(context, '/your-game-initial-screen'),\n)\n```\n\n----------------------------------------\n\nTITLE: KlondikeGame Constructor Implementation\nDESCRIPTION: Shows the constructor implementation for KlondikeGame that initializes the game world using a constructor initialization list.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step5.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n  KlondikeGame() : super(world: KlondikeWorld());\n```\n\n----------------------------------------\n\nTITLE: Implementing Card Layout in TableauPile for Klondike Solitaire in Dart\nDESCRIPTION: Creates a method to properly space cards in a tableau pile, with different spacing for face-up and face-down cards. This improves visibility of tableau piles by ensuring proper card positioning based on their state.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step4.md#2025-04-20_snippet_25\n\nLANGUAGE: dart\nCODE:\n```\n  final Vector2 _fanOffset1 = Vector2(0, KlondikeGame.cardHeight * 0.05);\n  final Vector2 _fanOffset2 = Vector2(0, KlondikeGame.cardHeight * 0.20);\n\n  void layOutCards() {\n    if (_cards.isEmpty) {\n      return;\n    }\n    _cards[0].position.setFrom(position);\n    for (var i = 1; i < _cards.length; i++) {\n      _cards[i].position\n        ..setFrom(_cards[i - 1].position)\n        ..add(_cards[i - 1].isFaceDown ? _fanOffset1 : _fanOffset2);\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Pre-rendered Layer in Flame Engine\nDESCRIPTION: Example demonstrating how to create a pre-rendered layer for static content like backgrounds. Shows layer initialization and rendering in the game loop.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/layers.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass BackgroundLayer extends PreRenderedLayer {\n  final Sprite sprite;\n\n  BackgroundLayer(this.sprite);\n\n  @override\n  void drawLayer() {\n    sprite.render(\n      canvas,\n      position: Vector2(50, 200),\n    );\n  }\n}\n\nclass MyGame extends Game {\n  // Other methods omitted...\n\n  @override\n  void render(Canvas canvas) {\n    // x and y can be provided as optional position arguments.\n    backgroundLayer.render(canvas);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Camera and World in Flame Engine\nDESCRIPTION: This snippet shows how to set up the CameraComponent and World in the EmberQuestGame class. It configures the camera's viewfinder anchor to the top-left corner for proper positioning.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_2.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame/components.dart';\nimport 'package:flame/game.dart';\n\nclass EmberQuestGame extends FlameGame {\n  @override\n  Future<void> onLoad() async {\n    await images.loadAll([\n      'block.png',\n      'ember.png',\n      'ground.png',\n      'heart_half.png',\n      'heart.png',\n      'star.png',\n      'water_enemy.png',\n    ]);\n\n    // Everything in this tutorial assumes that the position\n    // of the `CameraComponent`s viewfinder (where the camera is looking)\n    // is in the top left corner, that's why we set the anchor here.\n    camera.viewfinder.anchor = Anchor.topLeft;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using FlameBlocListener Component\nDESCRIPTION: Demonstrates how to implement a bloc listener that responds to state changes with optional conditional listening using listenWhen.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_bloc/bloc_components.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nFlameBlocListener<GameStatsBloc, GameStatsState>(\n  listenWhen: (previousState, newState) {\n      // return true/false to determine whether or not\n      // to call listener with state\n  },\n  onNewState: (state) {\n          // do stuff here based on state\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Rank Class Definition in Dart\nDESCRIPTION: This code defines the `Rank` class, which is similar to the `Suit` class, but contains two sprites, one for red ranks and one for black ranks. It demonstrates how to define a class with a factory constructor, private constructor, properties (value, label, redSprite, blackSprite), and a static list of singleton instances.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step3.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n\"import 'package:flame/components.dart';\\nimport 'package:flame/flame.dart';\\nimport 'package:flutter/foundation.dart';\\n\\n@immutable\\nclass Rank {\\n  factory Rank.fromInt(int value) {\\n    assert(value >= 1 && value <= 13);\\n    return _singletons[value - 1];\\n  }\\n\\n  Rank._(\\n    this.value,\\n    this.label,\\n    double x1,\\n    double y1,\\n    double x2,\\n    double y2,\\n    double w,\\n    double h,\\n  )   : redSprite = klondikeSprite(x1, y1, w, h),\\n        blackSprite = klondikeSprite(x2, y2, w, h);\\n\\n  final int value;\\n  final String label;\\n  final Sprite redSprite;\\n  final Sprite blackSprite;\\n\\n  static final List<Rank> _singletons = [\\n    Rank._(1, 'A', 335, 164, 789, 161, 120, 129),\\n    Rank._(2, '2', 20, 19, 15, 322, 83, 125),\\n    Rank._(3, '3', 122, 19, 117, 322, 80, 127),\\n    Rank._(4, '4', 213, 12, 208, 315, 93, 132),\\n    Rank._(5, '5', 314, 21, 309, 324, 85, 125),\\n    Rank._(6, '6', 419, 17, 414, 320, 84, 129),\\n    Rank._(7, '7', 509, 21, 505, 324, 92, 128),\\n    Rank._(8, '8', 612, 19, 607, 322, 78, 127),\\n    Rank._(9, '9', 709, 19, 704, 322, 84, 130),\\n    Rank._(10, '10', 810, 20, 805, 322, 137, 127),\\n    Rank._(11, 'J', 15, 170, 469, 167, 56, 126),\\n    Rank._(12, 'Q', 92, 168, 547, 165, 132, 128),\\n    Rank._(13, 'K', 243, 170, 696, 167, 92, 123),\\n  ];\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Flame Splash Screen in Dart\nDESCRIPTION: This snippet demonstrates how to use the FlameSplashScreen widget to create a splash screen for a Flame game. It sets the theme and defines an onFinish callback to navigate to the game's initial screen.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_splash_screen/flame_splash_screen.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFlameSplashScreen(\n  theme: FlameSplashTheme.dark,\n  onFinish: (BuildContext context) => Navigator.pushNamed(context, '/your-game-initial-screen')\n)\n```\n\n----------------------------------------\n\nTITLE: Tinting Sprites for Black Court Cards in Dart\nDESCRIPTION: This snippet defines a color filter and applies it to the sprites for the black court cards.  The `blueFilter` paints the sprites with a bluish hue.  `klondikeSprite` function is needed to create a Sprite.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step3.md#2025-04-20_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\n  static final blueFilter = Paint()\n    ..colorFilter = const ColorFilter.mode(\n      Color(0x880d8bff),\n      BlendMode.srcATop,\n    );\n  static final Sprite blackJack = klondikeSprite(81, 565, 562, 488)\n    ..paint = blueFilter;\n  static final Sprite blackQueen = klondikeSprite(717, 541, 486, 515)\n    ..paint = blueFilter;\n  static final Sprite blackKing = klondikeSprite(1305, 532, 407, 549)\n    ..paint = blueFilter;\n```\n\n----------------------------------------\n\nTITLE: Implementing RotateAroundEffect in Flame Engine\nDESCRIPTION: Creates a RotateAroundEffect that rotates a component 90 degrees clockwise around a specified center point over 2 seconds.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/effects.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal effect = RotateAroundEffect(\n  tau/4,\n  center: Vector2(100, 100),\n  EffectController(duration: 2),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing FlameIsolate in a Flame Game\nDESCRIPTION: Demonstrates how to implement the FlameIsolate mixin in a game class and use it to perform calculations in an isolate during the game update cycle.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_isolate/isolate.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MyGame extends FlameGame with FlameIsolate {\n  ...\n  @override\n  void update(double dt) {\n    if (shouldRecalculate) {\n      isolate(recalculateWorld, worldData).then(updateWorld);\n    }\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Positioned Entity Using OxygenGame in Dart\nDESCRIPTION: This snippet demonstrates how to create a positioned entity in the Flame engine using the OxygenGame. It initializes a new entity with a specified position using a Vector2 object.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/oxygen/components.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\ngame.createEntity(\n  position: Vector2(100, 100),\n  size: // ...\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing RandomEffectController in Dart for Flame Engine\nDESCRIPTION: Creates a RandomEffectController that wraps another controller and makes its duration random, useful within repeated contexts.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/effects.md#2025-04-20_snippet_32\n\nLANGUAGE: dart\nCODE:\n```\nfinal ec = RandomEffectController.uniform(\n  LinearEffectController(0),  // duration here is irrelevant\n  min: 0.5,\n  max: 1.5,\n);\n```\n\n----------------------------------------\n\nTITLE: Using TimeTrackComponent in Dart for Flame Engine Performance Tracking\nDESCRIPTION: Illustrates how to use the TimeTrackComponent to measure the time spent in a specific code section, such as the update method of a component. The elapsed time is rendered in microseconds.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/other/debug.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvoid update(double dt) {\n  TimeTrackComponent.start('MyComponent.update');\n  // ...\n  TimeTrackComponent.end('MyComponent.update');\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a RectangleHitbox to a Component\nDESCRIPTION: Demonstrates how to add a RectangleHitbox to a PositionComponent. The hitbox will try to fill its parent component if no arguments are provided.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/collision_detection.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass MyComponent extends PositionComponent {\n  @override\n  void onLoad() {\n    add(RectangleHitbox());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing World Reference in Flame Engine Component (Dart)\nDESCRIPTION: Shows how to use the HasWorldReference mixin to access the World object from within a component.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass MyComponent extends Component with HasWorldReference<MyWorld>,\n    TapCallbacks {\n  @override\n  void onTapDown(TapDownEvent info) {\n    // world is of type MyWorld\n    world.add(AnotherComponent());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding removeCard Abstract Method in Pile Dart\nDESCRIPTION: This code snippet defines the abstract `removeCard` method in the `Pile` class. This method is responsible for removing a card from a pile. Each pile subclass needs to implement this method to handle the removal of a card according to its specific data structure and game logic.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step4.md#2025-04-20_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\n\"abstract class Pile {\\n  ...\\n  void removeCard(Card card);\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Audio Preloading in Flame\nDESCRIPTION: Methods for preloading audio files to prevent initial playback delay and managing audio cache.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_audio/audio.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nawait FlameAudio.audioCache.load('explosion.mp3');\n```\n\n----------------------------------------\n\nTITLE: Creating Entity with Sprite Using World in Dart\nDESCRIPTION: This snippet demonstrates how to create an entity with a sprite using the World in the Flame engine. It adds a SpriteComponent with a loaded sprite from an image file.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/oxygen/components.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nworld.createEntity()\n  ..add<SpriteComponent, SpriteInit>(\n    SpriteInit(await game.loadSprite('pizza.png')), \n  );\n```\n\n----------------------------------------\n\nTITLE: Declaring a Variable with Expression and Explicit Type in Yarn\nDESCRIPTION: This form combines initialization with an expression and explicit type declaration. It's useful when the type of the expression isn't immediately obvious or for added clarity.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/commands/declare.md#2025-04-20_snippet_3\n\nLANGUAGE: yarn\nCODE:\n```\n<<declare $VARIABLE = EXPRESSION as TYPE>>\n```\n\n----------------------------------------\n\nTITLE: Displaying Menus in Flutter Game - Dart\nDESCRIPTION: This snippet sets up the Flutter application by running the game widget, defining the overlays for the main menu and game over screen. It specifies the initial active overlay to show the main menu when the game starts.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_7.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  runApp(\n    GameWidget<EmberQuestGame>.controlled(\n      gameFactory: EmberQuestGame.new,\n      overlayBuilderMap: {\n        'MainMenu': (_, game) => MainMenu(game: game),\n        'GameOver': (_, game) => GameOver(game: game),\n      },\n      initialActiveOverlays: const ['MainMenu'],\n    ),\n  );\n}\n\nIf the menus did not auto-import, add the following:\n\n```dart\nimport 'overlays/game_over.dart';\nimport 'overlays/main_menu.dart';\n```\n\n```\n\n----------------------------------------\n\nTITLE: Setting Game Background Color for Sky Effect\nDESCRIPTION: This method overrides the default background color to create a blue sky effect in the game. It improves the visual appeal by replacing the default black background.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_3.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\n@override\nColor backgroundColor() {\n  return const Color.fromARGB(255, 173, 223, 247);\n}\n```\n\n----------------------------------------\n\nTITLE: Using FlameBlocProvider with Existing Bloc\nDESCRIPTION: Demonstrates how to provide an existing bloc instance to a new portion of the Component tree using the .value constructor.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_bloc/bloc_components.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFlameBlocProvider<BlocA, BlocAState>.value(\n  value: blocA,\n  children: [...],\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Sprite Animation from Atlas\nDESCRIPTION: Method to generate a sprite animation using sprites from a texture atlas by name\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_texturepacker/README.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nfinal spriteList = atlas.findSpritesByName('robot_walk');\n\nfinal animation = SpriteAnimation.spriteList(\n spriteList,\n stepTime: 0.1,\n loop: true,\n);\n```\n\n----------------------------------------\n\nTITLE: Using BasicPalette for Text Color in Flame Engine\nDESCRIPTION: This snippet illustrates how to use the BasicPalette to set a text color in Flame Engine.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/palette.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nTextConfig regular = TextConfig(color: BasicPalette.white.color);\n```\n\n----------------------------------------\n\nTITLE: Initializing PulleyJoint in Dart\nDESCRIPTION: This snippet demonstrates how to create and initialize a PulleyJoint in Dart. It sets up the joint definition with two bodies, ground anchors, body anchors, and a pulley ratio.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_forge2d/joints.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nfinal pulleyJointDef = PulleyJointDef()\n  ..initialize(\n    firstBody,\n    secondBody,\n    firstPulley.worldCenter,\n    secondPulley.worldCenter,\n    firstBody.worldCenter,     \n    secondBody.worldCenter,\n    1,\n  );\n\nworld.createJoint(PulleyJoint(pulleyJointDef));\n```\n\n----------------------------------------\n\nTITLE: Inefficient Object Creation in Flame Component Update and Render Methods\nDESCRIPTION: This snippet demonstrates a common performance issue where new Vector2 and Paint objects are created in every frame update, leading to unnecessary object creation and potential performance degradation.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/other/performance.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MyComponent extends PositionComponent {\n  @override\n  void update(double dt) {\n    position += Vector2(10, 20) * dt;\n  }\n\n  @override\n  void render(Canvas canvas) {\n    canvas.drawRect(size.toRect(), Paint());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Entity with Particle Using OxygenGame in Dart\nDESCRIPTION: This snippet illustrates how to create an entity with a particle component in the Flame engine using the OxygenGame. It initializes a new entity and adds a ParticleComponent with a specified particle.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/oxygen/components.md#2025-04-20_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\ngame.createEntity(\n  position: // ...\n  size: // ...\n)..add<ParticleComponent, Particle>(\n  // Your Particle.\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Collision Callbacks to Player\nDESCRIPTION: Implements the CollisionCallbacks mixin on the player character to handle collision events.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_5.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nclass EmberPlayer extends SpriteAnimationComponent\n    with KeyboardHandler, CollisionCallbacks, HasGameReference<EmberQuestGame> {\n```\n\n----------------------------------------\n\nTITLE: Adding HUD to Game Camera in Dart\nDESCRIPTION: Adds the HUD component to the game's camera viewport in the main game file.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_6.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\ncamera.viewport.add(Hud());\n```\n\n----------------------------------------\n\nTITLE: Loading Network Images\nDESCRIPTION: Example of loading images from network URLs using HTTP client\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/images.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:http/http.dart' as http;\nimport 'package:flutter/painting.dart';\n\nfinal response = await http.get('https://url.com/image.png');\nfinal image = await decodeImageFromList(response.bytes);\n```\n\n----------------------------------------\n\nTITLE: Importing Required Components for Ember Quest Game\nDESCRIPTION: These import statements bring in the necessary component classes for the game, including actors, managers, and game objects that will be used throughout the implementation.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_3.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'actors/water_enemy.dart';\nimport 'managers/segment_manager.dart';\nimport 'objects/ground_block.dart';\nimport 'objects/platform_block.dart';\nimport 'objects/star.dart';\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing SpriteAnimationTicker\nDESCRIPTION: This snippet shows how to create and use a SpriteAnimationTicker, which allows multiple components to share the same animation. The ticker is responsible for updating the animation state based on elapsed time.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nfinal sprites = [/*You sprite list here*/];\nfinal animation = SpriteAnimation.spriteList(sprites, stepTime: 0.01);\n\nfinal animationTicker = SpriteAnimationTicker(animation);\n\n// or alternatively, you can ask the animation object to create one for you.\n\nfinal animationTicker = animation.createTicker(); // creates a new ticker\n\nanimationTicker.update(dt);\n```\n\n----------------------------------------\n\nTITLE: Basic Snapshot Implementation in Flame Engine\nDESCRIPTION: Basic example of implementing the Snapshot mixin with a PositionComponent and initializing it in a game.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/layers.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass SnapshotComponent extends PositionComponent with Snapshot {}\n\nclass MyGame extends FlameGame {\n  late final SnapshotComponent root;\n\n  @override\n  Future<void> onLoad() async {\n    // Add a snapshot component.\n    root = SnapshotComponent();\n    add(root);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pluralization in Ukrainian Locale with Yarn\nDESCRIPTION: Demonstrates the use of the 'plural' function for correct pluralization in Ukrainian. This example shows how the function handles multiple plural forms specific to the language.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/expressions/functions/misc.md#2025-04-20_snippet_2\n\nLANGUAGE: yarn\nCODE:\n```\nУ мене є {plural($coins, \"% монета\", \"% монети\", \"% монет\")}.\n```\n\n----------------------------------------\n\nTITLE: Implementing KlondikeGame Class with Action Enum\nDESCRIPTION: Core game class that defines basic game constants, card dimensions, and persisting game state between sessions. Includes an Action enum for different game states and initialization parameters.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step5.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nenum Action { newDeal, sameDeal, changeDraw, haveFun }\n\nclass KlondikeGame extends FlameGame<KlondikeWorld> {\n  static const double cardGap = 175.0;\n  static const double topGap = 500.0;\n  static const double cardWidth = 1000.0;\n  static const double cardHeight = 1400.0;\n  static const double cardRadius = 100.0;\n  static const double cardSpaceWidth = cardWidth + cardGap;\n  static const double cardSpaceHeight = cardHeight + cardGap;\n  static final Vector2 cardSize = Vector2(cardWidth, cardHeight);\n  static final cardRRect = RRect.fromRectAndRadius(\n    const Rect.fromLTWH(0, 0, cardWidth, cardHeight),\n    const Radius.circular(cardRadius),\n  );\n\n  static const int maxInt = 0xFFFFFFFE;\n\n  KlondikeGame() : super(world: KlondikeWorld());\n\n  int klondikeDraw = 1;\n  int seed = 1;\n  Action action = Action.newDeal;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Performance Tracking to a FlameGame\nDESCRIPTION: Example demonstrating how to add the HasPerformanceTracker mixin to a FlameGame to track update and render times for optimization purposes.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/game.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass MyGame extends FlameGame with HasPerformanceTracker {\n  // access `updateTime` and `renderTime` getters.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Give Command in Dart\nDESCRIPTION: Illustrates the implementation of a 'give' command that transfers items to the player. The command takes three arguments: amount, item name, and source.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/runtime/command_storage.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n/// Takes [amount] of [item]s from [source] and gives them to the player.\nvoid give(int amount, String item, String source) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Prompt Command in Dart\nDESCRIPTION: Shows how to implement a 'prompt' command that opens a modal dialogue, waits for user input, and stores the result in a global variable. The command is asynchronous and returns a Future<void>.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/runtime/command_storage.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyGame {\n  final YarnProject yarnProject = YarnProject();\n\n  Future<void> prompt(String message) async {\n    // This will wait until the modal dialog is popped from the router stack\n    final name = await router.pushAndWait(KeyboardDialog(message));\n    yarnProject.variables.setVariable(r'$prompt', name);\n  }\n\n  @override\n  void onLoad() {\n    yarnProject\n      ..variables.setVariable(r'$prompt', '')\n      ..commands.addCommand1('prompt', prompt);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pausing and Resuming Background Music in Flame Audio (Dart)\nDESCRIPTION: Manually pause and resume background music. Pausing prevents auto-resuming when the app regains focus.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_audio/bgm.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nFlameAudio.bgm.pause();\n```\n\nLANGUAGE: dart\nCODE:\n```\nFlameAudio.bgm.resume();\n```\n\n----------------------------------------\n\nTITLE: Implementing Klondike Draw Variants in Stock Pile\nDESCRIPTION: Adds game configuration for Draw 1 and Draw 3 modes by using HasGameReference mixin to dynamically control card drawing behavior\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step5.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass StockPile extends PositionComponent\n    with TapCallbacks, HasGameReference<KlondikeGame>\n    implements Pile {\n      @override\n      void onTapUp(TapUpEvent event) {\n        final wastePile = parent!.firstChild<WastePile>()!;\n        if (_cards.isEmpty) {\n          wastePile.removeAllCards().reversed.forEach((card) {\n            card.flip();\n            acquireCard(card);\n          });\n        } else {\n          for (var i = 0; i < game.klondikeDraw; i++) {\n            if (_cards.isNotEmpty) {\n              final card = _cards.removeLast();\n              card.flip();\n              wastePile.acquireCard(card);\n            }\n          }\n        }\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Card Tap Handling for Auto-move in Klondike Solitaire (Dart)\nDESCRIPTION: This method handles tap events on cards, allowing for automatic moves to foundation piles if possible. It also handles taps on the stock pile.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step5.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n  onTapUp(TapUpEvent event) {\n    if (isFaceUp) {\n      final suitIndex = suit.value;\n      if (game.foundations[suitIndex].canAcceptCard(this)) {\n        pile!.removeCard(this);\n        doMove(\n          game.foundations[suitIndex].position,\n          onComplete: () {\n            game.foundations[suitIndex].acquireCard(this);\n          },\n        );\n      }\n    } else if (pile is StockPile) {\n      game.stock.onTapUp(event);\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Custom Parallax Component Implementation - Dart\nDESCRIPTION: This snippet outlines a custom implementation of a parallax component where the parallax and its layers are loaded within the class's onLoad method.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_30\n\nLANGUAGE: dart\nCODE:\n```\nclass MyParallaxComponent extends ParallaxComponent<MyGame> {\n  @override\n  Future<void> onLoad() async {\n    parallax = await gameRef.loadParallax([\n      ParallaxImageData('bg.png'),\n      ParallaxImageData('trees.png'),\n    ]);\n  }\n}\n\nclass MyGame extends FlameGame {\n  @override\n  void onLoad() {\n    add(MyParallaxComponent());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Flipped Entity Using OxygenGame in Dart\nDESCRIPTION: This snippet demonstrates how to create an entity flipped on the X-axis in the Flame engine using the OxygenGame. It initializes a new entity with the flipX property set to true.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/oxygen/components.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\ngame.createEntity(\n  position: // ...\n  size: // ...\n  flipX: true\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Entity with Particle Using World in Dart\nDESCRIPTION: This snippet demonstrates how to create an entity with a particle using the World in the Flame engine. It adds a ParticleComponent with a specified particle.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/oxygen/components.md#2025-04-20_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nworld.createEntity()\n  ..add<ParticleComponent, Particle>(\n    // Your Particle.\n  );\n```\n\n----------------------------------------\n\nTITLE: Configuring Backpressure Strategy in FlameIsolate\nDESCRIPTION: Shows how to override the backpressureStrategy getter to specify a custom strategy for handling job queues in the isolate.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_isolate/isolate.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyGame extends FlameGame with FlameIsolate {\n  @override\n  BackpressureStrategy get backpressureStrategy => ReplaceBackpressureStrategy();\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Game Structure with World and CameraComponent\nDESCRIPTION: A text-based diagram showing the structure of a simple game using FlameGame, World, and CameraComponent.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/camera.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nFlameGame\n├── World\n│   ├── Player\n│   └── Enemy\n└── CameraComponent\n    ├── Viewfinder\n    │   ├── HudButton\n    │   └── FpsTextComponent\n    └── Viewport\n```\n\n----------------------------------------\n\nTITLE: Migrating Forge2D Gravity and Bullet Properties\nDESCRIPTION: These migration instructions indicate that the way to set gravity and bullet properties in Forge2D has changed. Previously, methods like `setGravity` and `setBullet` were used, but now these properties are directly accessed and set as fields.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_forge2d/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n\t\t\t\tsetGravity(Vector2(0, -10))\n\t\t\t\tgravity = Vector2(0, -10);\n\t\t\t\tbody.setBullet(true);\n\t\t\t\tbody.isBullet = true;\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Ray Casting in Flame Engine with Dart\nDESCRIPTION: This snippet shows how to use the raycastAll method to cast multiple rays from a single origin point. It demonstrates sending out 100 rays uniformly spread in all directions from a specific point.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/collision_detection.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nclass MyGame extends FlameGame with HasCollisionDetection {\n  @override\n  void update(double dt) {\n    super.update(dt);\n    final origin = Vector2(200, 200);\n    final result = collisionDetection.raycastAll(\n      origin,\n      numberOfRays: 100,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ScrollTextBoxComponent Implementation in Dart\nDESCRIPTION: Example of implementing a scrollable text box component\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/text_rendering.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass MyScrollableText extends ScrollTextBoxComponent {\n  MyScrollableText(Vector2 frameSize, String text) : super(\n    size: frameSize,\n    text: text,\n    textRenderer: regular, \n    boxConfig: TextBoxConfig(timePerChar: 0.05),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Node Visit Count in Yarn Dialogue\nDESCRIPTION: Illustrates the use of the 'visit_count' function to limit the number of times a player can interact with a dialogue node. This example uses conditional logic based on visit count.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/expressions/functions/misc.md#2025-04-20_snippet_3\n\nLANGUAGE: yarn\nCODE:\n```\ntitle: LuckyWheel\n---\n<<if visit_count(\"LuckyWheel\") < 5>>\n  Clown: Would you like to spin a wheel and get fabulous prizes?\n  -> I sure do!\n     <<jump SpinLuckyWheel>>\n  -> I don't talk to strangers...\n     <<stop>>\n<<else>>\n  Clown: Sorry kid, we're all out of prizes for now.\n<<endif>>\n===\n```\n\n----------------------------------------\n\nTITLE: Mouse-Only Event Detectors in Flame\nDESCRIPTION: List of detector mixins specifically for mouse events in Flame. These include the MouseMovementDetector for mouse movement and ScrollDetector for handling scroll wheel actions.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/inputs/gesture_input.md#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n - MouseMovementDetector\n  - onMouseMove\n - ScrollDetector\n  - onScroll\n```\n\n----------------------------------------\n\nTITLE: Creating Positioned Entity Using World in Dart\nDESCRIPTION: This snippet shows how to create a positioned entity by utilizing the World directly in the Flame engine. It adds a PositionComponent with a specified position using a Vector2 object.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/oxygen/components.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nworld.createEntity()\n  ..add<PositionComponent, Vector2>(Vector2(100, 100));\n```\n\n----------------------------------------\n\nTITLE: Accessing Yarn Project Variables\nDESCRIPTION: Retrieves the variable storage from a Yarn Project instance, allowing direct access to variables\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/runtime/variable_storage.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal variables = yarnProject.variables;\n```\n\n----------------------------------------\n\nTITLE: User-Defined Functions in YarnSpinner Dialogue\nDESCRIPTION: Illustrates the use of hypothetical user-defined functions within a YarnSpinner dialogue. The example showcases functions like 'broken', 'name', and 'money', along with built-in functions 'round' and 'plural'. It demonstrates how these functions can be used to create dynamic dialogue options based on game state.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/expressions/functions/functions.md#2025-04-20_snippet_1\n\nLANGUAGE: yarn\nCODE:\n```\ntitle: Blacksmith\n---\n// This example showcases several hypothetical user-defined functions:\n// - broken(slot): checks whether the item in the given slot is broken;\n// - name(slot): gives the name for an item in a slot, e.g. \"sword\" or \"bow\";\n// - money(): returns the current amount of money that the player has.\n// At the same time, functions `round()` and `plural()` are built-in.\n\n<<if broken(\"main_hand\")>>\n  <<local $repair_cost = round(value(\"main_hand\") / 5)>>\n\n  Blacksmith: Your {name(\"main_hand\")} seems to be completely broken!\n  Blacksmith: I can fix it for just {plural($repair_cost, \"% coin\")}\n  -> Ok, do it  <<if money() >= $repair_cost>>\n  -> I'll be fine...\n<<endif>>\n===\n```\n\n----------------------------------------\n\nTITLE: Foundation Pile Card Acquisition in Dart\nDESCRIPTION: Implements card holding logic for foundation pile with suit information and card positioning\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step4.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass FoundationPile extends PositionComponent {\n  FoundationPile(int intSuit, {super.position})\n      : suit = Suit.fromInt(intSuit),\n        super(size: KlondikeGame.cardSize);\n\n  final Suit suit;\n  final List<Card> _cards = [];\n\n  void acquireCard(Card card) {\n    assert(card.isFaceUp);\n    card.position = position;\n    card.priority = _cards.length;\n    _cards.add(card);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Flipped Entity Using World in Dart\nDESCRIPTION: This snippet showcases how to create a flipped entity using the World in the Flame engine. It adds a FlipComponent with the flipX property set to true.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/oxygen/components.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nworld.createEntity()\n  ..add<FlipComponent, FlipInit>(FlipInit(flipX: true));\n```\n\n----------------------------------------\n\nTITLE: Implementing RemoveEffect in Dart for Flame Engine\nDESCRIPTION: Removes component from game tree after specified delay.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/effects.md#2025-04-20_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nfinal effect = RemoveEffect(delay: 3.0);\n```\n\n----------------------------------------\n\nTITLE: Creating Relative PolygonComponent in Flame - Dart\nDESCRIPTION: This snippet demonstrates how to create a PolygonComponent using relative vertices defined in relation to the given size, allowing for dynamic shape generation based on the size of the intended parent.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_34\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  PolygonComponent.relative(\n    [\n      Vector2(0.0, -1.0), // Middle of top wall\n      Vector2(1.0, 0.0), // Middle of right wall\n      Vector2(0.0, 1.0), // Middle of bottom wall\n      Vector2(-1.0, 0.0), // Middle of left wall\n    ],\n    size: Vector2.all(100),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Audio Pools for Rapid Sounds\nDESCRIPTION: This snippet explains how to use AudioPools in Flame games for handling rapid and repetitive sound effects. It describes the process of creating an AudioPool with a specified audio file and number of concurrent players, and starting the audio using the pool.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_audio/README.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nAudioPool audioPool = await FlameAudio.createPool('explosion.mp3', maxPlayers: 2);\naudioPool.start();\n```\n\n----------------------------------------\n\nTITLE: Creating a RenderSystem in Dart for Oxygen ECS\nDESCRIPTION: Shows how to implement a RenderSystem mixin to add rendering capabilities to a custom system. This system can query entities and render them on the canvas during the render loop.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/oxygen/oxygen.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass SimpleRenderSystem extends System with RenderSystem {\n  Query? _query;\n\n  @override\n  void init() {\n    _query = createQuery([/* Your filters */]);\n  }\n\n  void render(Canvas canvas) {\n    for (final entity in _query?.entities ?? <Entity>[]) {\n      // Render entity based on components\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing RopeJoint in Dart\nDESCRIPTION: This snippet demonstrates how to create and initialize a RopeJoint in Dart. It sets up the joint definition with two bodies, their local anchors, and the maximum length of the rope.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_forge2d/joints.md#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nfinal ropeJointDef = RopeJointDef()\n  ..bodyA = firstBody\n  ..localAnchorA.setFrom(firstBody.getLocalCenter())\n  ..bodyB = secondBody\n  ..localAnchorB.setFrom(secondBody.getLocalCenter())\n  ..maxLength = (secondBody.worldCenter - firstBody.worldCenter).length;\n\nworld.createJoint(RopeJoint(ropeJointDef));\n```\n\n----------------------------------------\n\nTITLE: Creating Interval Timer in Flame Game (Dart)\nDESCRIPTION: This example shows how to use the Timer class to create an interval timer in a Flame game. It updates an elapsed time counter every second and renders it on the canvas.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/other/util.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame/components.dart';\nimport 'package:flame/game.dart';\nimport 'package:flame/input.dart';\nimport 'package:flutter/material.dart';\n\nclass MyGame extends Game {\n  final TextPaint textPaint = TextPaint(\n    style: const TextStyle(color: Colors.white, fontSize: 20),\n  );\n  Timer interval;\n\n  int elapsedSecs = 0;\n\n  MyGame() {\n    interval = Timer(\n      1,\n      onTick: () => elapsedSecs += 1,\n      repeat: true,\n    );\n  }\n\n  @override\n  void update(double dt) {\n    interval.update(dt);\n  }\n\n  @override\n  void render(Canvas canvas) {\n    textPaint.render(canvas, \"Elapsed time: $elapsedSecs\", Vector2(10, 150));\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Bloc from FlameBlocGame in Dart\nDESCRIPTION: Shows how to read and interact with a bloc from within a game class that inherits from FlameBlocGame using the read method.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_bloc/DEPRECATED_README.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass ExampleGame extends FlameBlocGame {\n  void selectWeapon() {\n    read<InventoryBloc>.add(WeaponSelected('axe'));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: General Audio Playback in Flame Games\nDESCRIPTION: This snippet demonstrates how to play sound effects and audio files within Flame games using the FlameAudio package. It includes methods for playing, looping, and managing short sound effects and longer audio tracks. Ensure you have the flame_audio package installed.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_audio/README.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame_audio/flame_audio.dart';\n\n// For shorter reused audio clips, like sound effects\nFlameAudio.play('explosion.mp3');\n\n// For looping an audio file\nFlameAudio.loop('music.mp3');\n\n// For playing a longer audio file\nFlameAudio.playLongAudio('music.mp3');\n\n// For looping a longer audio file\nFlameAudio.loopLongAudio('music.mp3');\n```\n\n----------------------------------------\n\nTITLE: Adding Weapon Component in Forge2D Game\nDESCRIPTION: Demonstrates proper component hierarchy and body management in Forge2D, showing how to add weapon components to the world rather than as children to maintain proper physics relationships.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_forge2d/forge2d.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass Weapon extends BodyComponent  {\n  @override\n  void onLoad() {\n    ...\n  }\n}\n\nclass Player extends BodyComponent  {\n  @override\n  void onLoad() {\n    world.add(Weapon());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Value-Returning Routes\nDESCRIPTION: Example of implementing a ValueRoute that returns a value when popped from the navigation stack\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/router.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass YesNoDialog extends ValueRoute<bool> {\n  YesNoDialog(this.text) : super(value: false);\n  final String text;\n\n  @override\n  Component build() {\n    return PositionComponent(\n      children: [\n        RectangleComponent(),\n        TextComponent(text: text),\n        Button(\n          text: 'Yes',\n          action: () => completeWith(true),\n        ),\n        Button(\n          text: 'No',\n          action: () => completeWith(false),\n        ),\n      ],\n    );\n  }\n}\n\nFuture<void> foo() async {\n  final result = await game.router.pushAndWait(YesNoDialog('Are you sure?'));\n  if (result) {\n    // ... the user is sure\n  } else {\n    // ... the user was not so sure\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Providing a Single Bloc in a Flame Game\nDESCRIPTION: Demonstrates how to use FlameBlocProvider to make a PlayerInventoryBloc available to game components.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_bloc/bloc.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MyGame extends FlameGame {\n  @override\n  Future<void> onLoad() async {\n    await add(\n      FlameBlocProvider<PlayerInventoryBloc, PlayerInventoryState>(\n        create: () => PlayerInventoryBloc(),\n        children: [\n          Player(),\n          // ...\n        ],\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Images with Flame.images Singleton\nDESCRIPTION: Example of loading images using the global Flame.images singleton cache\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/images.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame/flame.dart';\nimport 'package:flame/sprite.dart';\n\n// inside an async context\nImage image = await Flame.images.load('player.png');\n\nfinal playerSprite = Sprite(image);\n```\n\n----------------------------------------\n\nTITLE: Implementing Input Validation with Assertions in Dart\nDESCRIPTION: Example of using assertions to validate input parameters with clear error messages.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/development/style_guide.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nassert(0 <= opacity && opacity <= 1, 'The opacity value must be from 0 to 1: $opacity');\n```\n\n----------------------------------------\n\nTITLE: Defining Card Dimensions and Spacing Constants\nDESCRIPTION: Constants declaration for card dimensions, gaps between cards, and card corner radius. These values establish the sizing standards for the game world.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step2.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n  static const double cardWidth = 1000.0;\n  static const double cardHeight = 1400.0;\n  static const double cardGap = 175.0;\n  static const double cardRadius = 100.0;\n  static final Vector2 cardSize = Vector2(cardWidth, cardHeight);\n```\n\n----------------------------------------\n\nTITLE: Loading Tilemap in Flame Engine - Dart\nDESCRIPTION: This snippet demonstrates how to load a tilemap using the `SpriteFusionTilemapComponent` in a Flame engine game. It includes loading the specified JSON map and the associated sprite sheet. The final line adds the loaded map to the game world.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_sprite_fusion/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Load the map.\nfinal map = await SpriteFusionTilemapComponent.load(\n  mapJsonFile: 'map.json',\n  spriteSheetFile: 'spritesheet.png'\n);\n\n//Add it to the game world.\nworld.add(map);\n```\n\n----------------------------------------\n\nTITLE: Creating Sized Entity Using World in Dart\nDESCRIPTION: This snippet demonstrates how to create a sized entity using the World. It adds a SizeComponent with a specified size using a Vector2 object.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/oxygen/components.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nworld.createEntity()\n  ..add<SizeComponent, Vector2>(Vector2(50, 50));\n```\n\n----------------------------------------\n\nTITLE: Configuring 3D Shadow Decorator in Dart\nDESCRIPTION: Initializes a Shadow3DDecorator that renders a shadow beneath a component, simulating a 3D object on a plane. Various properties control the shadow's appearance.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/decorators.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal decorator = Shadow3DDecorator(\n  base: Vector2(100, 150),\n  angle: -1.4,\n  xShift: 200,\n  yScale: 1.5,\n  opacity: 0.5,\n  blur: 1.5,\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Character Sprite Flipping\nDESCRIPTION: Adds code to flip the character sprite horizontally based on movement direction.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_5.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nif (horizontalDirection < 0 && scale.x > 0) {\n  flipHorizontally();\n} else if (horizontalDirection > 0 && scale.x < 0) {\n  flipHorizontally();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RiverpodAwareGameWidget in Dart for Flame Engine\nDESCRIPTION: RiverpodAwareGameWidget is a custom GameWidget that uses a RiverpodAwareGameWidgetState. It requires a GlobalKey to provide Components using RiverpodComponentMixin access to Providers via the widget state.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_riverpod/widget.md#2025-04-20_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nRiverpodAwareGameWidget\n```\n\n----------------------------------------\n\nTITLE: Creating a Relative RectangleComponent in Dart\nDESCRIPTION: Demonstrates how to create a RectangleComponent with size relative to its parent's size using the relative constructor.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_37\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  RectangleComponent.relative(\n    Vector2(0.5, 1.0),\n    position: Vector2.all(100),\n    size: Vector2(50, 30),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using ComputedParticle in Flame (Dart)\nDESCRIPTION: This snippet demonstrates the use of `ComputedParticle` to create custom particle effects by delegating the rendering to a `ParticleRenderDelegate`. The delegate is called on each frame to perform necessary computations and render something to the `Canvas`. The example renders a circle that changes color and size based on the particle's lifespan.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/particles.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\ngame.add(\n  ParticleSystemComponent(\n    // Renders a circle which gradually changes its color and size during the\n    // particle lifespan.\n    particle: ComputedParticle(\n      renderer: (canvas, particle) => canvas.drawCircle(\n        Offset.zero,\n        particle.progress * 10,\n        Paint()\n          ..color = Color.lerp(\n            Colors.red,\n            Colors.blue,\n            particle.progress,\n          ),\n      ),\n    ),\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating InfiniteEffectController in Dart for Flame Engine\nDESCRIPTION: Sets up an InfiniteEffectController that repeats its child controller indefinitely.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/effects.md#2025-04-20_snippet_27\n\nLANGUAGE: dart\nCODE:\n```\nfinal ec = InfiniteEffectController(LinearEffectController(1));\n```\n\n----------------------------------------\n\nTITLE: Use Initialized Game for Tests - Dart\nDESCRIPTION: This fix ensures that only initialized game instances are used for tests, enhancing consistency and reliability in test scenarios.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame/CHANGELOG.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n// Only use initialized game for tests\n// Commit: 2a0f1d4b\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Keyboard Event Handler\nDESCRIPTION: Creates a basic onKeyEvent method that will process keyboard inputs for the player character.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_5.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n  @override\n  bool onKeyEvent(KeyEvent event, Set<LogicalKeyboardKey> keysPressed) {\n    return true;\n  }\n```\n\n----------------------------------------\n\nTITLE: Setting up RepeatedEffectController in Dart for Flame Engine\nDESCRIPTION: Initializes a RepeatedEffectController that repeats a child effect controller multiple times, resetting before each cycle.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/effects.md#2025-04-20_snippet_26\n\nLANGUAGE: dart\nCODE:\n```\nfinal ec = RepeatedEffectController(LinearEffectController(1), 10);\n```\n\n----------------------------------------\n\nTITLE: Character Dialog Implementation in Yarn\nDESCRIPTION: Shows how declared characters are used in actual dialogue scripts, demonstrating character references and formatting options.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/commands/character.md#2025-04-20_snippet_2\n\nLANGUAGE: yarn\nCODE:\n```\ntitle: Alice_and_the_Cat\n---\nAlice: But I don't want to go among mad people.\nCat:   Oh, you can't help that, we're all mad here. I'm mad. You're mad.\nAlice: How do you know I'm mad?\nCat:   You must be, or you wouldn't have come here.\nAlice: And how do you know that you're mad?\nCat:   To begin with, a dog's not mad. You grant that?\nAlice: I suppose so.\nCat:   Well then, you see a dog growls when it's angry, and wags its tail \\\n       when it's pleased.\nCat:   Now, [i]I[/i] growl when I'm pleased, and wag my tail when I'm angry. \\\n       Therefore, I'm mad.\nAlice: [i]I[/i] call it purring, not growling.\nCat:   Call it what you like.\n===\n```\n\n----------------------------------------\n\nTITLE: Creating CameraComponent with Fixed Resolution\nDESCRIPTION: Demonstrates how to create a CameraComponent with a fixed resolution viewport.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/camera.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal camera = CameraComponent.withFixedResolution(\n  world: myWorldComponent,\n  width: 800,\n  height: 600,\n);\n```\n\n----------------------------------------\n\nTITLE: Loading Images with Standalone Images Class\nDESCRIPTION: Example of manually loading images using the Images class from Flame cache\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/images.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame/cache.dart';\nfinal imagesLoader = Images();\nImage image = await imagesLoader.load('yourImage.png');\n```\n\n----------------------------------------\n\nTITLE: Declaring and Using a Global Variable in Yarn\nDESCRIPTION: This snippet demonstrates how to declare a global variable $monicker and use it within a dialogue node. The <<declare>> command is placed outside the node, initializing the variable before it's used.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/commands/declare.md#2025-04-20_snippet_0\n\nLANGUAGE: yarn\nCODE:\n```\n<<declare $monicker = \"boy\">>\n\n---------------\ntitle: Greeting\n---------------\nTeacher: Welcome to the class, {$monicker}!\n===\n```\n\n----------------------------------------\n\nTITLE: Waste Pile Remove All Cards Method in Dart\nDESCRIPTION: Implements method to remove all cards from waste pile and return them as a list\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step4.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nList<Card> removeAllCards() {\n  final cards = _cards.toList();\n  _cards.clear();\n  return cards;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating NoiseEffectController in Dart for Flame Engine\nDESCRIPTION: Sets up a NoiseEffectController that exhibits noisy behavior, oscillating randomly around zero, useful for implementing shake effects.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/effects.md#2025-04-20_snippet_31\n\nLANGUAGE: dart\nCODE:\n```\nfinal ec = NoiseEffectController(duration: 0.6, frequency: 10);\n```\n\n----------------------------------------\n\nTITLE: Card Constructor and Properties in Dart\nDESCRIPTION: This code defines the constructor for the `Card` class, which takes the rank and suit as integer inputs, converts them to `Rank` and `Suit` objects, and initializes the card to be face down. The constructor also sets the initial size of the component using the `cardSize` constant defined in the `KlondikeGame` class.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step3.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n\"  Card(int intRank, int intSuit)\\n      : rank = Rank.fromInt(intRank),\\n        suit = Suit.fromInt(intSuit),\\n        _faceUp = false,\\n        super(size: KlondikeGame.cardSize);\\n\\n  final Rank rank;\\n  final Suit suit;\\n  bool _faceUp;\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Flame Console Overlay in GameWidget with Flutter\nDESCRIPTION: This code demonstrates how to set up the Flame Console as an overlay in a Flutter game using the GameWidget. It shows the registration of the console overlay and implementation of a button to display it.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_console/flame_console.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    body: GameWidget(\n      game: _game,\n      overlayBuilderMap: {\n        'console': (BuildContext context, MyGame game) => FlameConsoleView(\n              game: game,\n              onClose: () {\n                _game.overlays.remove('console');\n              },\n            ),\n      },\n    ),\n    floatingActionButton: FloatingActionButton(\n      heroTag: 'console_button',\n      onPressed: () {\n        _game.overlays.add('console');\n      },\n      child: const Icon(Icons.developer_mode),\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Mouse Cursor on GameWidget\nDESCRIPTION: Code example showing how to initialize a GameWidget with a custom mouse cursor by using the mouseCursor property in the GameWidget constructor.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/inputs/gesture_input.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nGameWidget(\n  game: MouseCursorGame(),\n  mouseCursor: SystemMouseCursors.move,\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a RectangleComponent from Rect in Dart\nDESCRIPTION: Shows how to create a RectangleComponent using the fromRect factory constructor, which takes a Rect object to define the component's position and size.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_36\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  RectangleComponent.fromRect(\n    Rect.fromLTWH(10, 10, 100, 50),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Audio Assets in pubspec.yaml\nDESCRIPTION: This snippet shows how to specify the location of audio files in your project's asset structure through the pubspec.yaml file. The specified directory must be added under the 'assets' key to be accessible by FlameAudio functions.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_audio/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nassets:\n    - assets/audio\n```\n\n----------------------------------------\n\nTITLE: Creating ZigzagEffectController in Dart for Flame Engine\nDESCRIPTION: Sets up a ZigzagEffectController, a simple alternating effect controller that proceeds linearly from 0 to 1, then to -1, and back to 0 over one period.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/effects.md#2025-04-20_snippet_34\n\nLANGUAGE: dart\nCODE:\n```\nfinal ec = ZigzagEffectController(period: 2);\n```\n\n----------------------------------------\n\nTITLE: PolygonHitbox Alignment Fix\nDESCRIPTION: This snippet addresses a fix for misalignment issues in the hittest area of the PolygonHitbox, enhancing interaction precision.\nSOURCE: https://github.com/flame-engine/flame/blob/main/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n- **FIX**: Misalignment of the hittest area of PolygonHitbox ([#2930](https://github.com/flame-engine/flame/issues/2930)). ([dbdb1379](https://github.com/flame-engine/flame/commit/dbdb1379d0bc1b6ac02b3ee27f62263bd1be3fc3))\n```\n\n----------------------------------------\n\nTITLE: Defining Character Dialogue in Yarn\nDESCRIPTION: Example of a dialogue node with multiple characters speaking, demonstrating the use of character IDs and line structure.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/lines.md#2025-04-20_snippet_0\n\nLANGUAGE: yarn\nCODE:\n```\ntitle: Bulldozer_Conversation\n---\nProsser: You want me to come and lie there...\nFord: Yes\nProsser: In front of the bulldozer?\nFord: Yes\nProsser: In the mud.\nFord: In, as you say, the mud.\n(low rumbling noise...)\n===\n```\n\n----------------------------------------\n\nTITLE: Configuring Tick Interval for Behavior Tree - Dart\nDESCRIPTION: This snippet illustrates how to adjust the tick interval for the behavior tree within a Flame component. A higher tick interval decreases the frequency of updates.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_behavior_tree/README.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyComponent extends PositionComponent with HasBehaviorTree {\n  Future<void> onLoad() async {\n    treeRoot = Selector(...);\n    tickInterval = 4;\n    super.onLoad();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying onDragStart Method in Card Dart\nDESCRIPTION: This code modifies the `onDragStart` method in the `Card` class to check if a card is allowed to be moved before starting the drag operation. It uses the `canMoveCard` method of the `Pile` interface to determine if the card can be dragged. If the card can be moved, the method calls `super.onDragStart` and sets the card's priority.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step4.md#2025-04-20_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\n\"  void onDragStart(DragStartEvent event) {\\n    if (pile?.canMoveCard(this) ?? false) {\\n      super.onDragStart(event);\\n      priority = 100;\\n    }\\n  }\"\n```\n\n----------------------------------------\n\nTITLE: FlameGame Test Implementation\nDESCRIPTION: Shows how to test with a FlameGame instance using testWithFlameGame helper.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/development/testing_guide.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\ntestWithFlameGame('the name of the test', (game) async {\n  game.add(...);\n  await game.ready();\n\n  expect(...);\n});\n```\n\n----------------------------------------\n\nTITLE: Flame Component Lifecycle Flow\nDESCRIPTION: A left-to-right graph showing the complete component lifecycle flow, from initial loading through the update/render loop to removal, including conditional paths for component removal and re-parenting.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/diagrams/component_life_cycle.md#2025-04-20_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{init: { 'theme': 'dark' } }%%\n  graph LR\n\n   %% Node Color %%\n   classDef default fill:#282828,stroke:#F6BE00,stroke-width:2px;\n   classDef lightYellow fill:#523F00,stroke-width:2px;\n   classDef yellow fill:#F6BE00,color:#000000;\n\n    %% Nodes %%\n\n    A(onLoad):::yellow\n    B(onGameResize):::lightYellow\n    C(onMount):::lightYellow\n    D(update)\n    E(render)\n    F(onRemove):::lightYellow\n\n    %% Flow %%\n\n    A-->B\n    B-->C\n    C-->D\n    D-->E\n    E-->D\n    E-. If removed .->F\n    F-. If re-parented .->B\n```\n\n----------------------------------------\n\nTITLE: Styled TextElementComponent with DocumentStyle in Dart\nDESCRIPTION: Example of applying custom document styling to TextElementComponent\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/text_rendering.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfinal style = DocumentStyle(\n  width: 400,\n  height: 200,\n  padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 14),\n  background: BackgroundStyle(\n    color: const Color(0xFF4E322E),\n    borderColor: const Color(0xFF000000),\n    borderWidth: 2.0,\n  ),\n);\nfinal document = DocumentRoot([ ... ]);\nfinal element = TextElementComponent.fromDocument(\n  document: document,\n  style: style,\n  position: Vector2(100, 50),\n);\n```\n\n----------------------------------------\n\nTITLE: Visualizing Component Lifecycle Flow in Flame Engine\nDESCRIPTION: This Mermaid diagram shows the flow between different lifecycle events in the Flame engine. It illustrates the sequence of events from game resize to component removal, including the main update-render loop and potential re-parenting scenarios.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/diagrams/flame_game_life_cycle.md#2025-04-20_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{init: { 'theme': 'dark' } }%%\ngraph LR\n\n %% Node Color %%\n classDef default fill:#282828,stroke:#F6BE00,stroke-width:2px;\n classDef lightYellow fill:#523F00,stroke-width:2px;\n classDef yellow fill:#F6BE00,color:#000000;\n\n  %% Nodes %%\n\n  A(onGameResize):::lightYellow\n  B(onLoad):::yellow\n  C(onMount):::yellow\n  D(update)\n  E(render)\n  F(onRemove):::yellow\n\n  %% Flow %%\n\n  A-->B\n  B-->C\n  C-->D\n  D-->E\n  E-->D\n  E-. If removed .->F\n  F-. If re-parented .->A\n```\n\n----------------------------------------\n\nTITLE: Pixelation Fragment Shader for Post-Processing (GLSL)\nDESCRIPTION: This GLSL shader implements the pixelation effect used in the Flame post-processing example. It takes the rendered texture, applies pixelation based on uniform parameters, and outputs the result.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/post_processing.md#2025-04-20_snippet_1\n\nLANGUAGE: glsl\nCODE:\n```\n#version 460 core\n\nprecision highp float;\n\n#include <flutter/runtime_effect.glsl>\n\nuniform vec2 uPixels;\nuniform vec2 uSize;\nuniform sampler2D uTexture;\n\nout vec4 fragColor;\n\nvoid main() {\n  vec2 uv = FlutterFragCoord().xy / uSize;\n  vec2 puv = round(uv * uPixels) / uPixels;\n  fragColor = texture(uTexture, puv);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ReverseCurvedEffectController in Dart for Flame Engine\nDESCRIPTION: Initializes a ReverseCurvedEffectController that grows from 1 to 0 following the provided curve over the specified duration.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/effects.md#2025-04-20_snippet_24\n\nLANGUAGE: dart\nCODE:\n```\nfinal ec = ReverseCurvedEffectController(0.5, Curves.bounceInOut);\n```\n\n----------------------------------------\n\nTITLE: Handling Tap Events for StockPile in Flame\nDESCRIPTION: This snippet adds tap functionality to the StockPile using the TapCallbacks mixin. It implements logic for moving cards from the stock to the waste pile when tapped. Dependencies include the WastePile class and methods to flip and reorder cards.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step4.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass StockPile extends PositionComponent with TapCallbacks { ... }\n\n  @override\n  void onTapUp(TapUpEvent event) {\n  final wastePile = parent!.firstChild<WastePile>()!;\n    for (var i = 0; i < 3; i++) {\n      if (_cards.isNotEmpty) {\n        final card = _cards.removeLast();\n        card.flip();\n        wastePile.acquireCard(card);\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Widget Test Implementation\nDESCRIPTION: Shows how to test a game within the Flutter widget infrastructure.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/development/testing_guide.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\ntestWidgets('test name', (tester) async {\n  final game = _MyGame();\n  await tester.pumpWidget(GameWidget(game: game));\n  await tester.pump();\n  await tester.pump();\n\n  expect(...);\n\n  await tester.pump();\n\n  await tester.pump(const Duration(milliseconds: 20));\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating YarnSpinner File Structure in Yarn\nDESCRIPTION: This snippet showcases the basic structure of a .yarn file, including comments, tags, commands, and a node declaration. It illustrates how to declare variables, use comments, and define a simple node.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/language.md#2025-04-20_snippet_0\n\nLANGUAGE: yarn\nCODE:\n```\n// This is a comment\n// The line below, however, is a tag:\n# Chapter 1d\n\n<<declare $visited_graveyard = false>>\n<<declare $money = 25>>  // is this too much?\n\ntitle: Start\n---\n// Node content\n===\n```\n\n----------------------------------------\n\nTITLE: Creating Shapes with PolygonComponent in Flame - Dart\nDESCRIPTION: This snippet describes how to create a PolygonComponent with a specific list of vertices that define its shape. It offers the option to create a shape using absolute or relative coordinates.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_33\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  PolygonComponent([\n    Vector2(100, 100),\n    Vector2(100, 50),\n    Vector2(50, 50),\n    Vector2(50, 100),\n  ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a CircleComponent in Dart\nDESCRIPTION: Demonstrates how to create a CircleComponent with a specified radius and position. This component is used to render circular shapes in Flame games.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_39\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  CircleComponent(radius: 5, position: Vector2.all(100), anchor: Anchor.center);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OpacityEffect with Multiple Paint Targets\nDESCRIPTION: Applies opacity effect to multiple paint targets using opacityProviderOfList.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/effects.md#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nfinal effect = OpacityEffect.to(\n  0.2,\n  EffectController(duration: 0.75),\n  target: component.opacityProviderOfList(\n    paintIds: const [paintId1, paintId2],\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Guard Greeting Dialogue Using If Command in Yarn Spinner\nDESCRIPTION: An example dialogue script using the <<if>> command to create different greetings based on the player's reputation. It demonstrates how to use multiple <<elseif>> blocks and an <<else>> block to handle various reputation ranges, including triggering an attack for very low reputation.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/commands/if.md#2025-04-20_snippet_1\n\nLANGUAGE: yarn\nCODE:\n```\ntitle: GuardGreeting\n---\n<<if $reputation >= 100>>\n  Guard: Hail to the savior of the people!\n<<elseif $reputation >= 30>>\n  Guard: Nice to meet you, sir!\n<<elseif $reputation >= 0>>\n  Guard: Hello\n<<elseif $reputation > -30>>\n  Guard: I'm keeping an eye on you...\n<<elseif $reputation > -100>>\n  Guard: You filthy scum!\n<<else>>\n  Guard: You'll pay for your crimes! #auto\n  <<attack>>\n<<endif>>\n===\n```\n\n----------------------------------------\n\nTITLE: Using SpriteWidget in Dart with Flame\nDESCRIPTION: Example of using SpriteWidget to display a Flame Sprite within the Flutter widget tree. It requires a sprite object and can be positioned using the anchor property.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/other/widgets.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nSpriteWidget(\n    sprite: yourSprite,\n    anchor: Anchor.center,\n)\n```\n\n----------------------------------------\n\nTITLE: GitHub Pages Action Configuration\nDESCRIPTION: GitHub Actions workflow configuration for automatically deploying Flame games to GitHub Pages using flutter-gh-pages action\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/platforms.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: Gh-Pages\n\non:\n  push:\n    branches: [ main ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v4\n      - uses: subosito/flutter-action@v2\n      - uses: bluefireteam/flutter-gh-pages@v8\n        with:\n          baseHref: /NAME_OF_YOUR_REPOSITORY/\n          webRenderer: canvaskit\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Palette Class in Dart for Flame Engine\nDESCRIPTION: This snippet shows a complete implementation of a custom Palette class for a Flame Engine game, defining various color entries.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/palette.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:ui';\n\nimport 'package:flame/palette.dart';\n\nclass Palette {\n  static PaletteEntry white = BasicPalette.white;\n\n  static PaletteEntry toastBackground = PaletteEntry(Color(0xFFAC3232));\n  static PaletteEntry toastText = PaletteEntry(Color(0xFFDA9A00));\n\n  static PaletteEntry grey = PaletteEntry(Color(0xFF404040));\n  static PaletteEntry green = PaletteEntry(Color(0xFF54a286));\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Basic Dialogue in Yarn Format\nDESCRIPTION: Demonstrates a simple dialogue exchange between two characters using the .yarn file format. This snippet shows the basic structure of a dialogue node with character lines.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/jenny.md#2025-04-20_snippet_0\n\nLANGUAGE: yarn\nCODE:\n```\ntitle: Scene1_Gregory_and_Sampson\n---\nSampson: Gregory, on my word, we'll not carry coals.\nGregory: No, for then we should be colliers.\nSampson: I mean, an we be in choler, we'll draw.\nGregory: Ay, while you live, draw your neck out of collar.\nSampson: I strike quickly being moved.\nGregory: But thou art not quickly moved to strike.\n===\n```\n\n----------------------------------------\n\nTITLE: Rendering InlineTextElement in Flame Engine\nDESCRIPTION: This code shows the render method provided by InlineTextElement for drawing text at a specific position with a given anchor. It's a convenient way to render text elements in Flame.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/text_rendering.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nvoid render(\n  Canvas canvas,\n  Vector2 position, {\n  Anchor anchor = Anchor.topLeft,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing 3D Rotation Decorator in Dart\nDESCRIPTION: Creates a Rotate3DDecorator that applies a 3D rotation effect to a component. It allows specifying rotation angles, pivot point, and perspective distortion.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/decorators.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal decorator = Rotate3DDecorator(\n  center: component.center,\n  angleX: rotationAngle,\n  perspective: 0.002,\n);\n```\n\n----------------------------------------\n\nTITLE: Setting up FrictionJoint in Forge2D\nDESCRIPTION: Implements friction joint for top-down games, providing 2D translational and angular friction. Allows configuration of maximum force and torque for controlling friction intensity.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_forge2d/joints.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal frictionJointDef = FrictionJointDef()\n  ..initialize(ballBody, floorBody, ballBody.worldCenter)\n  ..maxForce = 50\n  ..maxTorque = 50;\n\n  world.createJoint(FrictionJoint(frictionJointDef));\n```\n\n----------------------------------------\n\nTITLE: Custom Game Test Implementation\nDESCRIPTION: Example of testing a custom game class with specific mixins.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/development/testing_guide.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\ntestWithGame<_MyGame>(\n  'the name of the test',\n  _MyGame.new,\n  (game) async {\n    // test body...\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Node Structure in Yarn\nDESCRIPTION: Demonstrates the basic structure of a node in Yarn, including the header and body sections separated by dashes and terminated with equal signs.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/nodes.md#2025-04-20_snippet_0\n\nLANGUAGE: yarn\nCODE:\n```\n// NODE HEADER\n---\n// NODE BODY\n===\n```\n\n----------------------------------------\n\nTITLE: Implementing RotateEffect.by in Flame Engine\nDESCRIPTION: Creates a RotateEffect.by that rotates a component 90 degrees clockwise from its current orientation over 2 seconds.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/effects.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal effect = RotateEffect.by(\n  tau/4,\n  EffectController(duration: 2),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Square RectangleComponent in Dart\nDESCRIPTION: Shows how to create a square RectangleComponent using the square constructor, which takes a single size value for both width and height.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_38\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  RectangleComponent.square(\n    position: Vector2.all(100),\n    size: 200,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Suit Factory Constructor Implementation in Dart\nDESCRIPTION: This code snippet demonstrates a factory constructor for the `Suit` class in Dart, which enforces the singleton pattern.  It ensures that only a limited number of `Suit` objects are created and reused, by returning one of the pre-built objects from the `_singletons` list, rather than creating a new object every time. The assert statement validates the input index to ensure it is within the allowed range.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step3.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n\"  factory Suit.fromInt(int index) {\\n    assert(index >= 0 && index <= 3);\\n    return _singletons[index];\\n  }\"\n```\n\n----------------------------------------\n\nTITLE: Required Imports for Random Segment Generation\nDESCRIPTION: Imports necessary for the random segment generation functionality, including dart:math for Random() and the segment_manager for accessing the segments collection.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_4.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:math';\n\nimport '../managers/segment_manager.dart';\n```\n\n----------------------------------------\n\nTITLE: Initializing Game Variables for HUD in Dart\nDESCRIPTION: Adds variables for tracking stars collected and player health in the main game file.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_6.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nint starsCollected = 0;\nint health = 3;\n```\n\n----------------------------------------\n\nTITLE: Updating HUD Data in Player Class in Dart\nDESCRIPTION: Modifies the Ember (player) class to update game stats when collecting stars or taking damage, which then reflects in the HUD.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_6.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nif (other is Star) {\n  other.removeFromParent();\n  game.starsCollected++;\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nvoid hit() {\n  if (!hitByEnemy) {\n    game.health--;\n    hitByEnemy = true;\n  }\n  add(\n    OpacityEffect.fadeOut(\n      EffectController(\n        alternate: true,\n        duration: 0.1,\n        repeatCount: 5,\n      ),\n    )..onComplete = () {\n      hitByEnemy = false;\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Golden Test Setup\nDESCRIPTION: Template for creating visual regression tests using golden files.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/development/testing_guide.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\ntestGolden(\n  'the name of the test',\n  (game) async {\n     // Set up the game by adding the necessary components\n     // You can add `expect()` checks here too, if you want to\n  },\n  size: Vector2(300, 200),\n  goldenFile: '.../_goldens/my_test_file.png',\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Cards to the Game in Dart\nDESCRIPTION: This code snippet demonstrates how to add cards to the game during the `onLoad` method.  It creates a set of random cards with random ranks and suits, sets their positions on the screen, adds them to the world, and flips some of them face up with a certain probability. This is temporary code for testing and visualization purposes.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step3.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n\"    final random = Random();\\n    for (var i = 0; i < 7; i++) {\\n      for (var j = 0; j < 4; j++) {\\n        final card = Card(random.nextInt(13) + 1, random.nextInt(4))\\n          ..position = Vector2(100 + i * 1150, 100 + j * 1500)\\n          ..addToParent(world);\\n        if (random.nextDouble() < 0.9) { // flip face up with 90% probability\\n          card.flip();\\n        }\\n      }\\n    }\"\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Commands to the Flame Console View\nDESCRIPTION: This code shows how to integrate custom commands with the ConsoleView widget by passing them in the customCommands parameter. It demonstrates proper initialization of the console with custom functionality.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_console/flame_console.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nConsoleView(\n  game: game,\n  onClose: () {\n    _game.overlays.remove('console');\n  },\n  customCommands: [MyCustomCommand()],\n),\n```\n\n----------------------------------------\n\nTITLE: Flame Engine Asset Directory Structure (Text)\nDESCRIPTION: This snippet shows the recommended directory structure for organizing assets in a Flame Engine project. It includes folders for audio, images, and tiles.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/structure.md#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n.\n└── assets\n    ├── audio\n    │   └── explosion.mp3\n    ├── images\n    │   ├── enemy.png\n    │   ├── player.png\n    │   └── spritesheet.png\n    └── tiles\n        ├── level.tmx\n        └── map.json\n```\n\n----------------------------------------\n\nTITLE: Creating Grayscale Effect Decorator in Dart\nDESCRIPTION: Initializes a PaintDecorator that converts the underlying image to shades of grey. The opacity parameter controls the transparency of the effect.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/decorators.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal decorator = PaintDecorator.grayscale(opacity: 0.5);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sprites and Animations from Fire Atlas in Dart\nDESCRIPTION: Demonstrates how to get sprites and animations from a loaded Fire Atlas instance. The atlas provides methods to retrieve specific animations or sprites by their names.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_fire_atlas/README.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\natlas.getAnimation('animation_name');\natlas.getSprite('sprite_name');\n```\n\n----------------------------------------\n\nTITLE: Creating Entity with Text Using OxygenGame in Dart\nDESCRIPTION: This snippet showcases how to create an entity with text in the Flame engine using the OxygenGame. It initializes a new entity and adds a TextComponent with specified text and configuration.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/oxygen/components.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\ngame.createEntity(\n  position: // ...\n  size: // ...\n)..add<TextComponent, TextInit>(\n  TextInit(\n    'Your text',\n    config: const TextPaintConfig(),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Notifier Player Component in Dart\nDESCRIPTION: Shows how to create a Player component that implements the Notifier mixin, allowing it to notify listeners of changes in its state.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_42\n\nLANGUAGE: dart\nCODE:\n```\nclass Player extends SpriteComponent with Notifier {\n  double health = 1;\n\n  void takeHit() {\n    health -= .1;\n    if (health == 0) {\n      removeFromParent();\n    } else if (health <= .5) {\n      notifyListeners();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RotateEffect.to in Flame Engine\nDESCRIPTION: Creates a RotateEffect.to that rotates a component to a specific angle (east-facing) over 2 seconds.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/effects.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfinal effect = RotateEffect.to(\n  tau/4,\n  EffectController(duration: 2),\n);\n```\n\n----------------------------------------\n\nTITLE: Random Test Implementation\nDESCRIPTION: Example of implementing tests with random input generation for thorough testing.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/development/testing_guide.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\ntestRandom('test name', (Random random) {\n  // Use [random] to generate random input\n});\n```\n\n----------------------------------------\n\nTITLE: Stopping Background Music in Flame Audio (Dart)\nDESCRIPTION: Stop the currently playing background music track using the Bgm class.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_audio/bgm.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFlameAudio.bgm.stop();\n```\n\n----------------------------------------\n\nTITLE: Markup Tags with Parameters in Yarn\nDESCRIPTION: Shows how to use markup tags with parameters, including dynamic values.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/markup.md#2025-04-20_snippet_4\n\nLANGUAGE: yarn\nCODE:\n```\nLorem ipsum [color name=$color]dolor sit amet[/color]\n```\n\n----------------------------------------\n\nTITLE: Using FlameBlocListener in a Flame Component\nDESCRIPTION: Demonstrates how to use FlameBlocListener within a Player component to react to state changes in PlayerInventoryBloc.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_bloc/bloc.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass Player extends PositionComponent {\n  @override\n  Future<void> onLoad() async {\n    await add(\n      FlameBlocListener<PlayerInventoryBloc, PlayerInventoryState>(\n        listener: (state) {\n          updateGear(state);\n        },\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Health Check for Game Over Mechanism - Dart\nDESCRIPTION: This snippet adds a health check to the update method in different game components to determine if the player has fallen or has zero health, triggering the game over state by removing the player instance.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_7.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n// If ember fell in pit, then game over.\nif (position.y > game.size.y + size.y) {\n  game.health = 0;\n}\n\nif (game.health <= 0) {\n  removeFromParent();\n}\n\n```\n\nLANGUAGE: dart\nCODE:\n```\nif (position.x < -size.x || game.health <= 0) {\n  removeFromParent();\n}\n\n```\n\nLANGUAGE: dart\nCODE:\n```\nif (game.health <= 0) {\n  removeFromParent();\n}\n\n```\n\nLANGUAGE: dart\nCODE:\n```\nif (position.x < -size.x || game.health <= 0) {\n  removeFromParent();\n}\n\n```\n\nLANGUAGE: dart\nCODE:\n```\nif (position.x < -size.x || game.health <= 0) {\n  removeFromParent();\n}\n\n```\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid update(double dt) {\n  if (health <= 0) {\n    overlays.add('GameOver');\n  }\n  super.update(dt);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding HUD Components to Viewport\nDESCRIPTION: This snippet shows how to add HUD components as children of the `cameraComponent.viewport`. This replaces the usage of `PositionType` for HUD elements.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n\"cameraComponent.viewport.add(yourHudComponent);\"\n```\n\n----------------------------------------\n\nTITLE: Basic Audio Playback Methods in Flame\nDESCRIPTION: Core audio playback methods including play, loop, playLongAudio, loopLongAudio, and background music functionality.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_audio/audio.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame_audio/flame_audio.dart';\n\n// For shorter reused audio clips, like sound effects\nFlameAudio.play('explosion.mp3');\n\n// For looping an audio file\nFlameAudio.loop('music.mp3');\n\n// For playing a longer audio file\nFlameAudio.playLongAudio('music.mp3');\n\n// For looping a longer audio file\nFlameAudio.loopLongAudio('music.mp3');\n\n// For background music that should be paused/played when the pausing/resuming\n// the game\nFlameAudio.bgm.play('music.mp3');\n```\n\n----------------------------------------\n\nTITLE: Installing Flame Package\nDESCRIPTION: Command to add the Flame package as a dependency in pubspec.yaml\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/README.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nflutter pub add flame\n```\n\n----------------------------------------\n\nTITLE: Nested Markup Tags in Yarn\nDESCRIPTION: Shows how to properly nest multiple markup tags within a single dialogue line.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/markup.md#2025-04-20_snippet_1\n\nLANGUAGE: yarn\nCODE:\n```\nLorem [S]ipsum dolor [A]sit[/A] amet[/S], consectetur [B]adipiscing[/B] elit\n```\n\n----------------------------------------\n\nTITLE: Finding Individual Sprites by Name\nDESCRIPTION: Method to retrieve specific sprites from a texture atlas using their names\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_texturepacker/README.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nfinal jumpSprite = atlas.findSpriteByName('robot_jump')!;\nfinal fallSprite = atlas.findSpriteByName('robot_fall')!;\nfinal idleSprite = atlas.findSpriteByName('robot_idle')!;\n```\n\n----------------------------------------\n\nTITLE: Using FlameBlocListenable Mixin to Listen to State Changes\nDESCRIPTION: Demonstrates using the FlameBlocListenable mixin to listen to bloc state changes in a component. This approach implements an onNewState method that responds to PlayerInventoryState changes.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_bloc/README.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass Player extends PositionComponent\n  with FlameBlocListenable<PlayerInventoryBloc, PlayerInventoryState> {\n\n  @override\n  void onNewState(state) {\n    updateGear(state);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: FlameMarkdown Usage in Dart\nDESCRIPTION: Example of using FlameMarkdown to convert markdown text to a document component\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/text_rendering.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nfinal component = await TextElementComponent.fromDocument(\n  document: FlameMarkdown.toDocument(\n    '# Header\\n'\n    '\\n'\n    'This is a **bold** text, and this is *italic*.\\n'\n    '\\n'\n    'This is a second paragraph.\\n',\n  ),\n  style: ...,\n  position: ...,\n  size: ...,\n);\n```\n\n----------------------------------------\n\nTITLE: Tableau Pile Implementation in Dart\nDESCRIPTION: Implements tableau pile with card holding and visual representation for Klondike Solitaire game\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step4.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nclass TableauPile extends PositionComponent {\n  TableauPile({super.position}) : super(size: KlondikeGame.cardSize);\n\n  final _borderPaint = Paint()\n    ..style = PaintingStyle.stroke\n    ..strokeWidth = 10\n    ..color = const Color(0x50ffffff);\n\n  final List<Card> _cards = [];\n  final Vector2 _fanOffset = Vector2(0, KlondikeGame.cardHeight * 0.05);\n\n  void acquireCard(Card card) {\n    if (_cards.isEmpty) {\n      card.position = position;\n    } else {\n      card.position = _cards.last.position + _fanOffset;\n    }\n    card.priority = _cards.length;\n    _cards.add(card);\n  }\n\n  @override\n  void render(Canvas canvas) {\n    canvas.drawRRect(KlondikeGame.cardRRect, _borderPaint);\n  }\n\n  void flipTopCard() {\n    assert(_cards.last.isFaceDown);\n    _cards.last.flip();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FireAtlas in a Flame Game\nDESCRIPTION: This snippet shows how to implement FireAtlas in a Flame game. It demonstrates loading the atlas in the onLoad method and using it to create SpriteComponent and SpriteAnimationComponent instances.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_fire_atlas/fire_atlas.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass ExampleGame extends FlameGame {\n\n  late FireAtlas _atlas;\n\n  @override\n  Future<void> onLoad() async {\n    _atlas = await loadFireAtlas('atlas.fa');\n\n    add(\n      SpriteComponent(\n        size: Vector2(50, 50),\n        position: Vector2(0, 50),\n        sprite: _atlas.getSprite('sprite_name'),\n      ),\n    );\n\n    add(\n      SpriteAnimationComponent(\n        size: Vector2(150, 100),\n        position: Vector2(150, 100),\n        animation: _atlas.getAnimation('animation_name'),\n      ),\n    );\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing Sprites on Canvas with Scaling and Rotation in Dart\nDESCRIPTION: This snippet defines a `_drawSprite` helper method to draw a sprite on a canvas. It allows specifying the relative position, scale, and rotation of the sprite. If `rotate` is true, the canvas is rotated 180 degrees before drawing the sprite and then restored.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step3.md#2025-04-20_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\n  void _drawSprite(\n    Canvas canvas,\n    Sprite sprite,\n    double relativeX,\n    double relativeY, { \n    double scale = 1,\n    bool rotate = false,\n  }) {\n    if (rotate) {\n      canvas.save();\n      canvas.translate(size.x / 2, size.y / 2);\n      canvas.rotate(pi);\n      canvas.translate(-size.x / 2, -size.y / 2);\n    }\n    sprite.render(\n      canvas,\n      position: Vector2(relativeX * size.x, relativeY * size.y),\n      anchor: Anchor.center,\n      size: sprite.srcSize.scaled(scale),\n    );\n    if (rotate) {\n      canvas.restore();\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Assignment Operators Table in Markdown\nDESCRIPTION: A markdown table listing assignment operators in YarnSpinner, including basic assignment, increase, decrease, multiply, divide, and modulo assignment.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/expressions/operators.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```{list-table}\n:align: left\n:class: first-col-align-center\n:header-rows: 1\n:widths: 1 2 9\n\n* - operator\n  - name\n  - notes\n* - `=`, `to`\n  - assign\n  - `$var = X` stores the value of `X` into the variable `$var`\n* - `+=`\n  - increase\n  - `$var += X` is equivalent to `$var = $var + X`\n* - `-=`\n  - decrease\n  - `$var -= X` is equivalent to `$var = $var - X`\n* - `*=`\n  - multiply\n  - `$var *= X` is equivalent to `$var = $var * X`\n* - `/=`\n  - divide\n  - `$var /= X` is equivalent to `$var = $var / X`\n* - `%=`\n  - reduce modulo\n  - `$var %= X` is equivalent to `$var = $var % X`\n```\n```\n\n----------------------------------------\n\nTITLE: Applying Color Tint Decorator in Dart\nDESCRIPTION: Sets up a PaintDecorator that tints the underlying image with a specified color. It's recommended to use a semi-transparent color for the tint effect.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/decorators.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal decorator = PaintDecorator.tint(const Color(0xAAFF0000);\n```\n\n----------------------------------------\n\nTITLE: Interpolated Expressions in Yarn Dialogue\nDESCRIPTION: Demonstration of using interpolated expressions in dialogue lines to insert dynamic content.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/lines.md#2025-04-20_snippet_3\n\nLANGUAGE: yarn\nCODE:\n```\ntitle: Greeting\n---\nTrader: Hello, {$player_name}! Would you like to see my wares?\nPlayer: I have only {plural($money, \"% coin\")}, do you have anything I can afford?\n===\n```\n\n----------------------------------------\n\nTITLE: Drawing with BasicPalette Color in Flame Engine\nDESCRIPTION: This code demonstrates how to use a BasicPalette color for drawing operations in Flame Engine.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/palette.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\ncanvas.drawRect(rect, BasicPalette.black.paint);\n```\n\n----------------------------------------\n\nTITLE: Updating Platform Block Position and Lifecycle in Game Loop\nDESCRIPTION: This update method handles the platform's movement, using the game's object speed and delta time to calculate position changes. It also removes the platform when it exits the screen to optimize performance.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_3.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n  @override\n  void update(double dt) {\n    velocity.x = game.objectSpeed;\n    position += velocity * dt;\n    if (position.x < -size.x) removeFromParent();\n    super.update(dt);\n  }\n```\n\n----------------------------------------\n\nTITLE: Initializing TextPaint with Custom Style in Dart\nDESCRIPTION: This snippet demonstrates how to create a TextPaint object with a custom TextStyle, setting font size and family. TextPaint is the built-in implementation for text rendering in Flame, based on Flutter's TextPainter.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/text_rendering.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nconst TextPaint textPaint = TextPaint(\n  style: TextStyle(\n    fontSize: 48.0,\n    fontFamily: 'Awesome Font',\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: GameWidget Import Reference in Flame Engine\nDESCRIPTION: Reference to the GameWidget class in the Flame engine package. This code snippet shows the package path, symbol name, and file location, along with relevant Flutter widget references.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/game_widget.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n:package: flame\n:symbol: GameWidget\n:file: src/game/game_widget/game_widget.dart\n\n[ClipRect]: https://api.flutter.dev/flutter/widgets/ClipRect-class.html\n[FocusNode]: https://api.flutter.dev/flutter/widgets/FocusNode-class.html\n[RepaintBoundary]: https://api.flutter.dev/flutter/widgets/RepaintBoundary-class.html\n```\n\n----------------------------------------\n\nTITLE: Escaped Text in Yarn Dialogue\nDESCRIPTION: Examples of using escape sequences to include special characters in dialogue lines.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/lines.md#2025-04-20_snippet_7\n\nLANGUAGE: yarn\nCODE:\n```\ntitle: Escapes\n---\n\\// This is not a comment  // but this is\nThis is not a \\#hashtag\nThis is not a \\<<command>>\n\\{This line\\} does not contain an expression\nNot a \\[markup\\]\n===\n```\n\n----------------------------------------\n\nTITLE: Initializing MouseJoint in Dart\nDESCRIPTION: This snippet demonstrates how to create and configure a MouseJoint in Dart. It sets up the joint definition with properties like maxForce, dampingRatio, and frequencyHz, then creates the joint and adds it to the world.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_forge2d/joints.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfinal mouseJointDef = MouseJointDef()\n  ..maxForce = 3000 * ballBody.mass * 10\n  ..dampingRatio = 1\n  ..frequencyHz = 5\n  ..target.setFrom(ballBody.position)\n  ..collideConnected = false\n  ..bodyA = groundBody\n  ..bodyB = ballBody;\n\n  mouseJoint = MouseJoint(mouseJointDef);\n  world.createJoint(mouseJoint);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sprites for Red Court Cards in Dart\nDESCRIPTION: This snippet defines static `Sprite` objects for the red court cards (Jack, Queen, King). It assumes a `klondikeSprite` function is available, which takes coordinates and dimensions as arguments to define the sprite's region within a larger image.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step3.md#2025-04-20_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\n  static final Sprite redJack = klondikeSprite(81, 565, 562, 488);\n  static final Sprite redQueen = klondikeSprite(717, 541, 486, 515);\n  static final Sprite redKing = klondikeSprite(1305, 532, 407, 549);\n```\n\n----------------------------------------\n\nTITLE: Adding Attached Cards Support to Card Class in Flame\nDESCRIPTION: Adds the ability to track attached cards when dragging a card that has other cards on top of it. This list will be populated when dragging cards from tableau piles.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step4.md#2025-04-20_snippet_27\n\nLANGUAGE: dart\nCODE:\n```\n  final List<Card> attachedCards = [];\n```\n\n----------------------------------------\n\nTITLE: Creating the PlatformBlock Class Structure in Flame\nDESCRIPTION: This class defines the structure for platform blocks in the game, including position management and game reference. It sets up the building blocks for the platform's behavior and appearance.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_3.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame/collisions.dart';\nimport 'package:flame/components.dart';\n\nimport '../ember_quest.dart';\n\nclass PlatformBlock extends SpriteComponent\n    with HasGameReference<EmberQuestGame> {\n  final Vector2 gridPosition;\n  double xOffset;\n\n  PlatformBlock({\n    required this.gridPosition,\n    required this.xOffset,\n  }) : super(size: Vector2.all(64), anchor: Anchor.bottomLeft);\n\n  @override\n  void onLoad() {\n  }\n\n  @override\n  void update(double dt) {\n    super.update(dt);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Flipping card logic in Flutter Flame\nDESCRIPTION: This Dart code shows how to handle card flipping logic, distinguishing between animated and immediate flips. If an animation is in progress (`_isAnimatedFlip`), the `_faceUp` state is synchronized with the `_isFaceUpView` state. Otherwise, both `_faceUp` and `_isFaceUpView` are toggled immediately to update both the model and view states.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step5.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n\"  void flip() {\n    if (_isAnimatedFlip) {\n      // Let the animation determine the FaceUp/FaceDown state.\n      _faceUp = _isFaceUpView;\n    } else {\n      // No animation: flip and render the card immediately.\n      _faceUp = !_faceUp;\n      _isFaceUpView = _faceUp;\n    }\n  }\"\n```\n\n----------------------------------------\n\nTITLE: Executing Custom 'give' Command in Yarn Script\nDESCRIPTION: This snippet demonstrates the usage of a custom 'give' command in a Yarn script. It shows how to pass arguments, including an interpolated expression, to the command.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/commands/user_defined_commands.md#2025-04-20_snippet_0\n\nLANGUAGE: yarn\nCODE:\n```\n<<give Gold {round(100 * $multiplier)}>>\n```\n\n----------------------------------------\n\nTITLE: Registering Single-Argument Function in Dart\nDESCRIPTION: Method to register a function with one argument in the FunctionStorage.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/runtime/function_storage.md#2025-04-20_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\naddFunction1(String name, T0 Function(T1) fn1)\n```\n\n----------------------------------------\n\nTITLE: Using Prompt Command in Yarn\nDESCRIPTION: Shows how to use the 'prompt' command in a Yarn script to get user input and store it in a variable.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/runtime/command_storage.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n<<declare $name as String>>\n\ntitle: Greeting\n---\nGuide: Hello, my name is Jenny, and you?\n<<prompt \"Enter your name:\">>\n<<set $player = $prompt>>  // Store the name for later\nGuide: Nice to meet you, {$player}\n===\n```\n\n----------------------------------------\n\nTITLE: Initializing Spine Flutter and Running Flame Game Widget\nDESCRIPTION: This snippet demonstrates how to initialize Spine Flutter and run a Flame game widget in the main function. It ensures proper setup for using Spine animations in a Flame game.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_spine/flame_spine.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  await initSpineFlutter();\n  runApp(const GameWidget.controlled(gameFactory: SpineExample.new));\n}\n```\n\n----------------------------------------\n\nTITLE: Logical Operators Table in Markdown\nDESCRIPTION: A markdown table listing logical operators in YarnSpinner, including NOT, AND, OR, and XOR, with both symbolic and word forms.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/expressions/operators.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```{list-table}\n:align: left\n:class: first-col-align-center\n:header-rows: 1\n:widths: 1 2 9\n\n* - operator\n  - name\n  - notes\n* - `!`, `not`\n  - logical NOT\n  - This is a unary operator that inverts its operand: `!true` is `false`,\n    and `!false` is `true`.\n* - `&&`, `and`\n  - logical AND\n  - Returns `true` if both of its arguments are `true`.\n* - `||`, `or`\n  - logical OR\n  - Returns `true` if at least one of its arguments is `true`.\n* - `^`, `xor`\n  - logical XOR\n  - Returns `true` if the arguments are different, and `false` if they are\n    the same.\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Node with Metadata in Yarn\nDESCRIPTION: Illustrates how to define a node with a title and additional metadata tags in the header, followed by a simple body.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/nodes.md#2025-04-20_snippet_2\n\nLANGUAGE: yarn\nCODE:\n```\ntitle: Alert\ncolorID: 0\nmodal: true\n---\nWARNING\\: Entering Radioactive Zone!\n===\n```\n\n----------------------------------------\n\nTITLE: Removing All Characters from Storage in Dart\nDESCRIPTION: Shows how to clear all characters from the CharacterStorage using the clear() method. This can be useful when transitioning between scenes in a game.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/runtime/character_storage.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nyarnProject.characters.clear();\n```\n\n----------------------------------------\n\nTITLE: Clearing Variables in Yarn Project\nDESCRIPTION: Provides methods to clear variables from storage, with optional control over node visit counts preservation\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/runtime/variable_storage.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n/// Clear all variables except node visit counts.\nyarnProject.variables.clear();\n\n/// Clear all variables including node visit counts.\nyarnProject.variables.clear(clearNodeVisits: true);\n```\n\n----------------------------------------\n\nTITLE: Defining Alternative Node Structure in Yarn\nDESCRIPTION: Shows an alternative way to define a node in Yarn, with dashes above and below the header for clearer separation.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/nodes.md#2025-04-20_snippet_1\n\nLANGUAGE: yarn\nCODE:\n```\n---------------\n// NODE HEADER\n---------------\n// NODE BODY\n===\n```\n\n----------------------------------------\n\nTITLE: Dynamic Node Jumping with Expressions in Yarn Scripting\nDESCRIPTION: This example shows how to use an expression within curly braces as an argument for the <<jump>> command. This allows for dynamic determination of the target node based on variables or other runtime conditions.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/commands/jump.md#2025-04-20_snippet_1\n\nLANGUAGE: yarn\nCODE:\n```\n<<jump {\"Ending_\" + $ending}>>\n```\n\n----------------------------------------\n\nTITLE: Configuring Backpressure Strategy for FlameIsolate\nDESCRIPTION: Shows how to override the backpressureStrategy getter to specify a custom strategy for handling job queues. This example uses ReplaceBackpressureStrategy which replaces any queued job with a new one when the queue is full.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_isolate/README.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyGame extends FlameGame with FlameIsolate {\n  @override\n  BackpressureStrategy get backpressureStrategy => ReplaceBackpressureStrategy();\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Loading XML Sprite Sheets with Flame Kenney XML\nDESCRIPTION: Code sample showing how to load an XML sprite sheet and its corresponding image file using the XmlSpriteSheet.load method. This method takes the paths to both the sprite sheet PNG and XML file as parameters.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_kenney_xml/README.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal spritesheet = await XmlSpriteSheet.load(\n  image: 'spritesheet.png',\n  xml: 'spritesheet.xml`,\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing UpdateSystem in Dart for Oxygen ECS\nDESCRIPTION: Demonstrates how to use the UpdateSystem mixin to add update logic to a custom system. This system can query entities and update their components based on the delta time.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/oxygen/oxygen.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass SimpleUpdateSystem extends System with UpdateSystem {\n  Query? _query;\n\n  @override\n  void init() {\n    _query = createQuery([/* Your filters */]);\n  }\n\n  void update(double dt) {\n    for (final entity in _query?.entities ?? <Entity>[]) {\n      // Update components values\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dialogue Flow Control with <<visit>> in Yarn\nDESCRIPTION: This snippet demonstrates how to use the <<visit>> command to control dialogue flow, introduce conditional logic, and reuse dialogue segments. It shows a conversation with a roaming trader, including conditional introductions and topic-specific dialogues.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/commands/visit.md#2025-04-20_snippet_0\n\nLANGUAGE: yarn\nCODE:\n```\ntitle: RoamingTrader1\n---\n<<if $roaming_trader_introduced>>\n  Hello again, {$player}!\n<<else>>\n  <<visit RoamingTraderIntro>>\n<<endif>>\n\n-> What do you think about the Calamity?  <<if $calamity_started>>\n   <<visit RoamingTrader_Calamity>>\n-> Have you seen a weird-looking girl running by? <<if $quest_little_girl>>\n   <<visit RoamingTrader_LittleGirl>>\n-> What do you have for trade?\n   <<OpenTrade>>\n\nPleasure doing business with you! #auto\n===\n```\n\n----------------------------------------\n\nTITLE: Implementing RiverpodAwareTextComponent with Dart in Flame\nDESCRIPTION: This snippet demonstrates how to create a PositionComponent that uses RiverpodComponentMixin to manage Riverpod listeners. It shows the proper usage of addToGameWidgetBuild in the onMount method to set up Riverpod listeners before calling super.onMount.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_riverpod/component.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass RiverpodAwareTextComponent extends PositionComponent\n    with RiverpodComponentMixin {\n  late TextComponent textComponent;\n  int currentValue = 0;\n\n  @override\n  void onMount() {\n    addToGameWidgetBuild(() {\n      ref.listen(countingStreamProvider, (p0, p1) {\n        if (p1.hasValue) {\n          currentValue = p1.value!;\n          textComponent.text = '$currentValue';\n        }\n      });\n    });\n    super.onMount();\n    add(textComponent = TextComponent(position: position + Vector2(0, 27)));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Two-Argument Function in Dart\nDESCRIPTION: Method to register a function with two arguments in the FunctionStorage.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/runtime/function_storage.md#2025-04-20_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\naddFunction2(String name, T0 Function(T1, T2) fn2)\n```\n\n----------------------------------------\n\nTITLE: Setting Pile Reference in Card Dart\nDESCRIPTION: This code snippet demonstrates how to set the pile reference in the `Card` class when a card is acquired by a pile. The `acquireCard` method in each pile is responsible for assigning the current pile to the card's `pile` property. This allows the card to know which pile it currently resides in.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step4.md#2025-04-20_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\n\"  void acquireCard(Card card) {\\n    ...\\n    card.pile = this;\\n  }\"\n```\n\n----------------------------------------\n\nTITLE: Configuring pubspec.yaml for Flame Game Project\nDESCRIPTION: Sets up the pubspec.yaml file with necessary dependencies and project information for a Flame game.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/bare_flame_game.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: syzygy\ndescription: Syzygy Flame game\nversion: 0.0.0\npublish_to: none\n\nenvironment:\n  sdk: ^3.0.0\n  flutter: ^3.13.0\n\ndependencies:\n  flutter:\n    sdk: flutter\n  flame: ^--VERSION--\n```\n\n----------------------------------------\n\nTITLE: Custom CameraComponent Game Setup\nDESCRIPTION: Shows how to initialize a FlameGame with a custom CameraComponent configuration using fixed resolution.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyGame extends FlameGame {\n  MyGame() \n      : super(\n            camera: CameraComponent.withFixedResolution(\n              width: 800,\n              height: 600,\n            ),\n          );\n```\n\n----------------------------------------\n\nTITLE: Using Close-All Markup Tag in Yarn\nDESCRIPTION: Demonstrates the use of the special close-all markup tag [/] to close all currently open markup ranges.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/markup.md#2025-04-20_snippet_2\n\nLANGUAGE: yarn\nCODE:\n```\nLorem ipsum dolor sit amet, [bold]consectetur adipiscing elit[/]\n```\n\n----------------------------------------\n\nTITLE: Creating Dialogue Node with Lines and Options in Yarn\nDESCRIPTION: Demonstrates a more complex node with a title, metadata, and a body containing dialogue lines between characters.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/nodes.md#2025-04-20_snippet_3\n\nLANGUAGE: yarn\nCODE:\n```\ntitle: Gloomy_Morning\ncamera_zoom: 2\n---\nYou  : Good morning!\nGuard: You call this good? 'Tis as crappy as could be\nYou  : Why, what happened?\nGuard: Don't you see the fog? Chills me through to the bones\nYou  : Sorry to hear that... \nYou  : So, can I pass?\nGuard: Can I get some exercise cutting you into pieces? Maybe that'll warm me up!\nYou  : Ok, I think I'll be going. Hope you feel better soon!\n===\n```\n\n----------------------------------------\n\nTITLE: Initializing Bgm in Flame Audio (Dart)\nDESCRIPTION: Initialize the Bgm class to enable background music management. This must be called when a WidgetsBinding instance exists, preferably in the game's onLoad method.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_audio/bgm.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFlameAudio.bgm.initialize();\n```\n\n----------------------------------------\n\nTITLE: Visualizing Flame Engine Component Hierarchy with Mermaid\nDESCRIPTION: This Mermaid diagram illustrates the component hierarchy in the Flame game engine. It shows the relationships between different component types, including base classes and specialized components for sprites, HUD elements, and other game objects.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/diagrams/component.md#2025-04-20_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{init: { 'theme': 'dark' } }%%\ngraph TD\n    %% Config %%\n    classDef default fill:#282828,stroke:#F6BE00;\n    \n    %% Nodes %%\n    Component(Component)\n    Misc(\"\\n        TimerComponent\\n        ParticleComponent\\n        SpriteBatchComponent\\n    \")\n    Effects(\"Effects<br/>(See the effects section)\")\n    Game(Game)\n    FlameGame(FlameGame)\n    PositionComponent(PositionComponent)\n   \n    Sprites(\"\\n        SpriteComponent\\n        SpriteGroupComponent \\n        SpriteAnimationComponent\\n        SpriteAnimationGroupComponent\\n        ParallaxComponent \\n        IsoMetricTileMapComponent\\n    \")\n    \n    HudMarginComponent(HudMarginComponent)\n    HudComponents(\"\\n        HudButtonComponent\\n        JoystickComponent\\n    \")\n    \n    OtherPositionComponents(\"\\n        ButtonComponent\\n        CustomPainterComponent\\n        ShapeComponent\\n        SpriteButtonComponent\\n        TextComponent\\n        TextBoxComponent\\n        NineTileBoxComponent\\n    \")\n        \n    %% Flow %%\n    Component --> Misc\n    Component --> Effects\n    Component --> PositionComponent\n    Component --> FlameGame\n   \n    Game --> FlameGame\n    PositionComponent --> Sprites\n    PositionComponent --> HudMarginComponent\n    PositionComponent --> OtherPositionComponents\n    HudMarginComponent --> HudComponents\n```\n\n----------------------------------------\n\nTITLE: Removing a Single Character from Storage in Dart\nDESCRIPTION: Demonstrates how to remove a specific character from the CharacterStorage using the remove() method. The method accepts the character's name or any of its aliases, and removes the character along with all its aliases.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/runtime/character_storage.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nyarnProject.characters.remove('Jenny');\n```\n\n----------------------------------------\n\nTITLE: Character Declaration Examples in Yarn\nDESCRIPTION: Demonstrates different ways to declare characters with varying complexity, including single aliases, multiple aliases, and full names with commentary.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/commands/character.md#2025-04-20_snippet_1\n\nLANGUAGE: yarn\nCODE:\n```\n// A well-mannered seven-year-old girl, who nevertheless always gets into\n// all kinds of zany adventures.\n<<character Alice>>\n\n// A magical cat known for his ability to grin majestically, and partially\n// vanish. He is mad (by his own admission).\n<<character \"Cheshire Cat\" Cat Cheshire>>\n\n// A foul-tempered Queen, who is also a playing card. Described as\n// \"a blind fury\", her favorite saying is \"Off with their heads!\".\n// Not to be confused with Red Queen.\n<<character \"Queen of Hearts\" Queen QoH QH>>\n```\n\n----------------------------------------\n\nTITLE: Loading TextureAtlas from File Storage\nDESCRIPTION: Method to load a texture atlas from device file storage using application documents directory\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_texturepacker/README.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfinal documentsPath = (await getApplicationDocumentsDirectory()).path;\nfinal atlas = await atlasFromStorage('$documentsPath/atlas_map.atlas');\n```\n\n----------------------------------------\n\nTITLE: Adjusting TableauPile Height for Better Hitbox Detection in Flame\nDESCRIPTION: Updates the height of tableau piles to improve card dropping detection. This ensures that the hitbox extends beyond the visible cards, making it easier to place cards in tall stacks.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step4.md#2025-04-20_snippet_26\n\nLANGUAGE: dart\nCODE:\n```\n    height = KlondikeGame.cardHeight * 1.5 + _cards.last.y - _cards.first.y;\n```\n\n----------------------------------------\n\nTITLE: Rendering Card Pips Based on Rank in Dart\nDESCRIPTION: This snippet uses a `switch` statement within the `_renderFront()` method to draw card pips based on the card's rank.  It calls the `_drawSprite` function to render the suit sprite at different positions and scales, creating various arrangements of pips based on the card's value.  Court cards (Jack, Queen, King) render a sprite for the respective card.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step3.md#2025-04-20_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\n    switch (rank.value) {\n      case 1:\n        _drawSprite(canvas, suitSprite, 0.5, 0.5, scale: 2.5);\n      case 2:\n        _drawSprite(canvas, suitSprite, 0.5, 0.25);\n        _drawSprite(canvas, suitSprite, 0.5, 0.25, rotate: true);\n      case 3:\n        _drawSprite(canvas, suitSprite, 0.5, 0.2);\n        _drawSprite(canvas, suitSprite, 0.5, 0.5);\n        _drawSprite(canvas, suitSprite, 0.5, 0.2, rotate: true);\n      case 4:\n        _drawSprite(canvas, suitSprite, 0.3, 0.25);\n        _drawSprite(canvas, suitSprite, 0.7, 0.25);\n        _drawSprite(canvas, suitSprite, 0.3, 0.25, rotate: true);\n        _drawSprite(canvas, suitSprite, 0.7, 0.25, rotate: true);\n      case 5:\n        _drawSprite(canvas, suitSprite, 0.3, 0.25);\n        _drawSprite(canvas, suitSprite, 0.7, 0.25);\n        _drawSprite(canvas, suitSprite, 0.3, 0.25, rotate: true);\n        _drawSprite(canvas, suitSprite, 0.7, 0.25, rotate: true);\n        _drawSprite(canvas, suitSprite, 0.5, 0.5);\n      case 6:\n        _drawSprite(canvas, suitSprite, 0.3, 0.25);\n        _drawSprite(canvas, suitSprite, 0.7, 0.25);\n        _drawSprite(canvas, suitSprite, 0.3, 0.5);\n        _drawSprite(canvas, suitSprite, 0.7, 0.5);\n        _drawSprite(canvas, suitSprite, 0.3, 0.25, rotate: true);\n        _drawSprite(canvas, suitSprite, 0.7, 0.25, rotate: true);\n      case 7:\n        _drawSprite(canvas, suitSprite, 0.3, 0.2);\n        _drawSprite(canvas, suitSprite, 0.7, 0.2);\n        _drawSprite(canvas, suitSprite, 0.5, 0.35);\n        _drawSprite(canvas, suitSprite, 0.3, 0.5);\n        _drawSprite(canvas, suitSprite, 0.7, 0.5);\n        _drawSprite(canvas, suitSprite, 0.3, 0.2, rotate: true);\n        _drawSprite(canvas, suitSprite, 0.7, 0.2, rotate: true);\n      case 8:\n        _drawSprite(canvas, suitSprite, 0.3, 0.2);\n        _drawSprite(canvas, suitSprite, 0.7, 0.2);\n        _drawSprite(canvas, suitSprite, 0.5, 0.35);\n        _drawSprite(canvas, suitSprite, 0.3, 0.5);\n        _drawSprite(canvas, suitSprite, 0.7, 0.5);\n        _drawSprite(canvas, suitSprite, 0.3, 0.2, rotate: true);\n        _drawSprite(canvas, suitSprite, 0.7, 0.2, rotate: true);\n        _drawSprite(canvas, suitSprite, 0.5, 0.35, rotate: true);\n      case 9:\n        _drawSprite(canvas, suitSprite, 0.3, 0.2);\n        _drawSprite(canvas, suitSprite, 0.7, 0.2);\n        _drawSprite(canvas, suitSprite, 0.5, 0.3);\n        _drawSprite(canvas, suitSprite, 0.3, 0.4);\n        _drawSprite(canvas, suitSprite, 0.7, 0.4);\n        _drawSprite(canvas, suitSprite, 0.3, 0.2, rotate: true);\n        _drawSprite(canvas, suitSprite, 0.7, 0.2, rotate: true);\n        _drawSprite(canvas, suitSprite, 0.3, 0.4, rotate: true);\n        _drawSprite(canvas, suitSprite, 0.7, 0.4, rotate: true);\n      case 10:\n        _drawSprite(canvas, suitSprite, 0.3, 0.2);\n        _drawSprite(canvas, suitSprite, 0.7, 0.2);\n        _drawSprite(canvas, suitSprite, 0.5, 0.3);\n        _drawSprite(canvas, suitSprite, 0.3, 0.4);\n        _drawSprite(canvas, suitSprite, 0.7, 0.4);\n        _drawSprite(canvas, suitSprite, 0.3, 0.2, rotate: true);\n        _drawSprite(canvas, suitSprite, 0.7, 0.2, rotate: true);\n        _drawSprite(canvas, suitSprite, 0.5, 0.3, rotate: true);\n        _drawSprite(canvas, suitSprite, 0.3, 0.4, rotate: true);\n        _drawSprite(canvas, suitSprite, 0.7, 0.4, rotate: true);\n      case 11:\n        _drawSprite(canvas, suit.isRed? redJack : blackJack, 0.5, 0.5);\n      case 12:\n        _drawSprite(canvas, suit.isRed? redQueen : blackQueen, 0.5, 0.5);\n      case 13:\n        _drawSprite(canvas, suit.isRed? redKing : blackKing, 0.5, 0.5);\n    }\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Node References with <<visit>> in Yarn\nDESCRIPTION: This snippet shows how to use the <<visit>> command with a dynamic node reference. It demonstrates constructing a node name using string concatenation and variable interpolation, allowing for more flexible dialogue branching.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/commands/visit.md#2025-04-20_snippet_1\n\nLANGUAGE: yarn\nCODE:\n```\n<<visit {\"RewardChoice_\" + string($choice)}>>\n```\n\n----------------------------------------\n\nTITLE: Transforming Snapshots in Flame Engine\nDESCRIPTION: Example showing how to apply transformations to snapshots when converting to images using transformation matrices.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/layers.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n// Call something like this to take an image snapshot at any time.\nvoid takeSnapshot() {\n  // Prepare a matrix to move the snapshot by 200,50.\n  final matrix = Matrix4.identity()..translate(200.0,50.0);\n\n  root.takeSnapshot();\n  final image = root.snapshotToImage(200, 200, transform: matrix);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing DialogueRunner Class in Dart\nDESCRIPTION: This snippet shows the import statement for the DialogueRunner class from the Jenny package in the Flame engine.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/runtime/dialogue_runner.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n:file: src/dialogue_runner.dart\n:symbol: DialogueRunner\n:package: jenny\n```\n\n----------------------------------------\n\nTITLE: Registering No-Argument Function in Dart\nDESCRIPTION: Method to register a function with no arguments in the FunctionStorage.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/runtime/function_storage.md#2025-04-20_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\naddFunction0(String name, T0 Function() fn)\n```\n\n----------------------------------------\n\nTITLE: Generating Flame DevTools Assets\nDESCRIPTION: This command generates the necessary assets for the Flame DevTools extension when running the sample app locally. The assets are required because the app depends on the package from source rather than from Pub. Ensure to run this command from the root of the Flame repository.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame/example/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmelos devtools-build\n```\n\n----------------------------------------\n\nTITLE: Advanced Dialogue with Branching and Conditions in Yarn\nDESCRIPTION: Illustrates a complex dialogue scenario using advanced features of the Yarn language. It includes conditional statements, branching based on player choices, variable usage, and custom functions and commands.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/jenny.md#2025-04-20_snippet_1\n\nLANGUAGE: yarn\nCODE:\n```\ntitle: Slughorn_encounter\n---\n<<if visited(\"Horcrux_question\")>>\n  Slughorn: Sorry, Tom, I don't have time right now.\n  <<stop>>\n<<endif>>\n\nSlughorn: Oh hello, Tom, is there anything I can help you with?\nTom: Good {time_of_day()}, Professor.\n-> I was curious about the 12 uses of the dragon blood.\n    Slughorn: Such an inquisitive mind! You can read about that in the \"Moste \\\n              Potente Potions\" in the Restricted Section of the library.\n    <<give restricted_library_pass>>\n    Tom: Thank you, Professor, this is very munificent of you.\n-> I wanted to ask... about Horcruxes <<if $knows_about_horcruxes>>\n    <<jump Horcrux_question>>\n-> I just wanted to say how much I always admire your lectures.\n    Slughorn: Thank you, Tom. I do enjoy flattery, even if it is well-deserved.\n===\n\ntitle: Horcrux_question\n---\nSlughorn: Where... did you hear that?\n-> Tom: It was mentioned in an old book in the library...\n    Slughorn: I see that you have read more books from the Restricted Section \\\n              than is wise.\n    Slughorn: I'm sorry, Tom, I should have seen you'd be tempted...\n    <<take restricted_library_pass>>\n    -> But Professor!..\n        Slughorn: This is for your good, Tom. Many of those books are dangerous!\n        Slughorn: Now off you go. And do your best to forget about what you \\\n                  asked...\n        <<stop>>\n-> Tom: I overheard it... And the word felt sharp and frigid, like it was the \\\n   embodiment of Dark Art <<if luck() >= 80>>\n    Slughorn: It is a very Dark Art indeed, it is not good for you to know \\\n              about it...\n    Tom: But if I don't know about this Dark Art, how can I defend myself \\\n         against it?\n    Slughorn: It is a Ritual, one of the darkest known to wizard-kind ...\n    ...\n    <<achievement \"The Darkest Secret\">>\n===\n```\n\n----------------------------------------\n\nTITLE: Using StartQuest Command in Yarn\nDESCRIPTION: Demonstrates how to use the 'StartQuest' command in a Yarn script, passing a quest ID and name as arguments.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/runtime/command_storage.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n<<StartQuest Q037 \"Get rid of bandits\">>\n```\n\n----------------------------------------\n\nTITLE: Importing Game Object Classes\nDESCRIPTION: Imports the necessary game object classes for collision handling.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_5.md#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nimport '../objects/ground_block.dart';\nimport '../objects/platform_block.dart';\n```\n\n----------------------------------------\n\nTITLE: Implementing Getters and Setters in Dart\nDESCRIPTION: Example showing the recommended structure for implementing getter/setter pairs with validation in a class.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/development/style_guide.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass MyClass {\n  MyClass();\n\n  ...\n  int _variable;\n  ...\n\n  /// Docs for both the getter and the setter.\n  int get variable => _variable;\n  set variable(int value) {\n    assert(value >= 0, 'variable must be non-negative: $value');\n    _variable = value;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Function Registration in Dart\nDESCRIPTION: Method to check if a function with a given name has been registered in the FunctionStorage.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/runtime/function_storage.md#2025-04-20_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nhasFunction(String name) → bool\n```\n\n----------------------------------------\n\nTITLE: Importing Character Class from Jenny Package in Dart\nDESCRIPTION: This code block specifies the package, symbol, and file location for the Character class in the Jenny package of the Flame engine. It also provides a link to additional documentation on character commands.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/runtime/character.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n{dartdoc}\n:package: jenny\n:symbol: Character\n:file: src/character.dart\n\n[<<character>>]: ../language/commands/character.md\n```\n\n----------------------------------------\n\nTITLE: Using Local Variables in a YarnSpinner Dice Roll Node\nDESCRIPTION: Illustrates the use of a local variable $roll in a YarnSpinner node. The variable is created using the <<local>> command, assigned a random dice roll value, and then used in conditional statements to provide different outputs based on the roll result.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/commands/local.md#2025-04-20_snippet_1\n\nLANGUAGE: yarn\nCODE:\n```\ntitle: a_dice_roll\n---\n<<local $roll = dice(6)>>\n<<if $roll == 1>>\n  You've rolled 1, rotten luck...\n<<elseif $roll == 2>>\n  You've rolled 2, which is still below the average. Try harder!\n<<elseif $roll == 3>>\n  You've rolled 3.14159265 (well, almost).\n<<elseif $roll == 4>>\n  Your roll is an unlucky number. Please roll again\n<<else>>\n  You've rolled 10 (when rounded to the nearest ten). Good job!\n<<endif>>\n===\n```\n\n----------------------------------------\n\nTITLE: Whitelisting Images in TexturePacker\nDESCRIPTION: Selective loading of sprites from a texture atlas by specifying path prefixes to whitelist\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_texturepacker/README.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal regions = await TexturePackerAtlas.loadAtlas('atlas_map.atlas');\nfinal atlas = TexturePackerAtlas.fromAtlas(regions, whiteList: [\n  'weapons/',\n  'ships/',\n  'explosions/'\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing PauseEffectController in Dart for Flame Engine\nDESCRIPTION: Creates a PauseEffectController that maintains a constant progress value for the specified time duration.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/effects.md#2025-04-20_snippet_25\n\nLANGUAGE: dart\nCODE:\n```\nfinal ec = PauseEffectController(1.5, progress: 0);\n```\n\n----------------------------------------\n\nTITLE: Using FlameBlocReader Mixin\nDESCRIPTION: Demonstrates how to implement a bloc reader component for accessing current bloc state and triggering events.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_bloc/bloc_components.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass InventoryReader extends Component\n    with FlameBlocReader<InventoryCubit, InventoryState> {}\n\n    /// inside game\n    \n    final component = InventoryReader();\n    // reading current state\n    var state = component.bloc\n```\n\n----------------------------------------\n\nTITLE: Generating Random Integers in Custom Range with random_range() Function in Yarn\nDESCRIPTION: The random_range(a, b) function returns a random integer between a and b inclusive. It's useful for generating random numbers within a specific range.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/expressions/functions/random.md#2025-04-20_snippet_2\n\nLANGUAGE: yarn\nCODE:\n```\n<<set $coin_flip = bool(random_range(0, 1))>>\n```\n\n----------------------------------------\n\nTITLE: Implementing Velocity Vector for Platform Block Movement\nDESCRIPTION: This defines a velocity vector that will be used for calculating the platform block's movement. It's initialized at zero and will be updated in the game loop.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_3.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nfinal Vector2 velocity = Vector2.zero();\n```\n\n----------------------------------------\n\nTITLE: Handling Pluralization in English Locale with Yarn\nDESCRIPTION: Shows how to use the 'plural' function for correct pluralization in English. The function takes a numeric value and one or two word forms to generate the appropriate plural phrase.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/expressions/functions/misc.md#2025-04-20_snippet_1\n\nLANGUAGE: yarn\nCODE:\n```\nThe distance is {plural($ft, \"% foot\", \"% feet\")} and {plural($in, \"% inch\")}.\n```\n\n----------------------------------------\n\nTITLE: Creating a Paint Object with a Solid Color in Dart\nDESCRIPTION: This code shows how to create a Paint object with a specific color using Dart's cascade notation.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/palette.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nPaint green = Paint()..color = const Color(0xFF00FF00);\n```\n\n----------------------------------------\n\nTITLE: Exporting Multiple Public Symbols in Dart\nDESCRIPTION: Example of explicitly exporting multiple public symbols from a file using the export statement with show clause.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/development/style_guide.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nexport 'src/effects/provider_interfaces.dart'\n  show\n    AnchorProvider,\n    AngleProvider,\n    PositionProvider,\n    ScaleProvider,\n    SizeProvider;\n```\n\n----------------------------------------\n\nTITLE: Avoiding Vector2 Creation in Sprite.render - Dart\nDESCRIPTION: This change ensures that the 'Sprite.render' method avoids unnecessary creation of Vector2 objects for performance optimization.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame/CHANGELOG.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n// Avoiding Vector2 creation in Sprite.render\n// Commit: 736733d9\n```\n\n----------------------------------------\n\nTITLE: Sample Yarn Script for Dialogue Flow\nDESCRIPTION: This Yarn script demonstrates a simple dialogue structure with two nodes, 'main' and 'Away', showing how choices and jumps are implemented.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/runtime/dialogue_runner.md#2025-04-20_snippet_1\n\nLANGUAGE: yarn\nCODE:\n```\ntitle: main\n---\nHello\n-> Hi\n-> Go away\n   <<jump Away>>\n===\n\ntitle: Away\n---\n<<OhNo>>\n===\n```\n\n----------------------------------------\n\nTITLE: Adding Collision Variables\nDESCRIPTION: Defines variables needed for collision detection and ground state tracking.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_5.md#2025-04-20_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\n  final Vector2 fromAbove = Vector2(0, -1);\n  bool isOnGround = false;\n```\n\n----------------------------------------\n\nTITLE: Using Markup in Yarn Dialogue\nDESCRIPTION: Example of using markup tags to annotate text in a dialogue line.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/lines.md#2025-04-20_snippet_5\n\nLANGUAGE: yarn\nCODE:\n```\ntitle: Markup\n---\nWizard: No, no, no! [em]This is insanity![/em]\n===\n```\n\n----------------------------------------\n\nTITLE: Clearing All Registered Functions in Dart\nDESCRIPTION: Method to remove all user-defined functions from the FunctionStorage.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/runtime/function_storage.md#2025-04-20_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nclear\n```\n\n----------------------------------------\n\nTITLE: Creating Angled Entity Using World in Dart\nDESCRIPTION: This snippet shows how to create an angled entity using the World in the Flame engine. It adds an AngleComponent with a specified angle in radians.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/oxygen/components.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nworld.createEntity()\n  ..add<AngleComponent, double>(1.570796);\n```\n\n----------------------------------------\n\nTITLE: Installing Flame TexturePacker Plugin\nDESCRIPTION: Command to add the flame_texturepacker package to a Flutter project using pub\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_texturepacker/README.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nflutter pub add flame_texturepacker\n```\n\n----------------------------------------\n\nTITLE: Initializing SpeedEffectController in Dart for Flame Engine\nDESCRIPTION: Creates a SpeedEffectController that alters the duration of its child effect controller to proceed at a predefined speed.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/effects.md#2025-04-20_snippet_29\n\nLANGUAGE: dart\nCODE:\n```\nfinal ec1 = SpeedEffectController(LinearEffectController(0), speed: 1);\nfinal ec2 = EffectController(speed: 1); // same as ec1\n```\n\n----------------------------------------\n\nTITLE: Adding Hitbox to Player\nDESCRIPTION: Adds a circular hitbox to the player character for collision detection.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_5.md#2025-04-20_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nadd(CircleHitbox());\n```\n\n----------------------------------------\n\nTITLE: Using Wait Command in Flame Engine Dialogue\nDESCRIPTION: Demonstrates how to use the <<wait>> command to create delays in dialogue flow. The command accepts a single numeric argument specifying the duration in seconds, which can be either a literal number or a variable reference.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/commands/wait.md#2025-04-20_snippet_0\n\nLANGUAGE: yarn\nCODE:\n```\n// Wait for a quarter of a second\n<<wait 0.25>>\n\n// Wait for the amount of time given by the $delay variable\n<<wait $delay>>\n```\n\n----------------------------------------\n\nTITLE: Adding Platform Blocks to Game Segments\nDESCRIPTION: This case statement in the loadGameSegments method handles the addition of platform blocks to the game world with their proper grid position and offset, connecting segment data to visual representation.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_3.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\ncase PlatformBlock:\n  add(PlatformBlock(\n    gridPosition: block.gridPosition,\n    xOffset: xPositionOffset,\n  ));\n```\n\n----------------------------------------\n\nTITLE: Generating Random Integers with dice() Function in Yarn\nDESCRIPTION: The dice(n) function returns a random integer between 1 and n, inclusive. It can be used for simulating dice rolls or generating random choices.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/expressions/functions/random.md#2025-04-20_snippet_0\n\nLANGUAGE: yarn\nCODE:\n```\n<<set $roll = dice(6)>>\n<<set $coin_flip = if(dice(2) == 1, \"H\", \"T\")>>\n```\n\n----------------------------------------\n\nTITLE: Visualizing Component Lifecycle Event Frequency in Flame Engine\nDESCRIPTION: This Mermaid diagram illustrates the frequency of different lifecycle events in the Flame engine. It uses color-coding to distinguish between events that run each tick, events that run on add and resize, and events that run once.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/diagrams/flame_game_life_cycle.md#2025-04-20_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{init: { 'theme': 'dark' } }%%\n\ngraph TD\n\n %% Node Color %%\n classDef default fill:#282828,stroke:#F6BE00,stroke-width:2px;\n classDef lightYellow fill:#523F00,stroke-width:2px;\n classDef yellow fill:#F6BE00,color:#000000;\n\n %% Nodes  %%\n x(Runs Each Tick)\n y(Runs On Add & Resize):::lightYellow\n z(Runs Once):::yellow\n```\n\n----------------------------------------\n\nTITLE: Documentation Build Commands\nDESCRIPTION: Shell commands for setting up and building documentation using Melos\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/development/documentation.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmelos run doc-setup\n```\n\nLANGUAGE: shell\nCODE:\n```\nmelos doc-build\n```\n\nLANGUAGE: shell\nCODE:\n```\nmelos doc-serve\n```\n\n----------------------------------------\n\nTITLE: Setting RevoluteJoint Limits in Dart\nDESCRIPTION: This snippet demonstrates how to set angle limits for a RevoluteJoint in Dart. It enables the limit and sets the lower and upper angle boundaries.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_forge2d/joints.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\njointDef\n  ..enableLimit = true\n  ..lowerAngle = 0\n  ..upperAngle = pi / 2;\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Options in Yarn Spinner\nDESCRIPTION: Demonstrates how to create a simple set of options in Yarn Spinner. Options are indicated with an arrow -> at the start of the line and allow players to choose different paths in the dialogue.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/options.md#2025-04-20_snippet_0\n\nLANGUAGE: yarn\nCODE:\n```\ntitle: Adventure\n---\nYou arrive at the edge of the forest. The road dives in, but there is another \\\none going around the edge.\n-> Go straight ahead, on the beaten path (x)\n-> Take the road along the forest's edge\n-> Turn back\n===\n```\n\n----------------------------------------\n\nTITLE: Adding Keyboard Handler Mixin to Game Class\nDESCRIPTION: Adds the HasKeyboardHandlerComponents mixin to the main game class to enable keyboard input handling.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_5.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame/events.dart';\n\nclass EmberQuestGame extends FlameGame with HasKeyboardHandlerComponents {\n```\n\n----------------------------------------\n\nTITLE: Adding Enemy Hit State Variable\nDESCRIPTION: Adds a variable to track whether the player has been hit by an enemy.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_5.md#2025-04-20_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\nbool hitByEnemy = false;\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Logic in Yarn Scripting\nDESCRIPTION: Demonstrates the use of the 'if' function for conditional logic in Yarn scripts. This function evaluates a condition and returns one of two values based on the result.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/expressions/functions/misc.md#2025-04-20_snippet_0\n\nLANGUAGE: yarn\nCODE:\n```\ntitle: Birth\n---\nDoctor: Congratulations, you have a { if($gender == \"m\", \"boy\", \"girl\") }!\n===\n```\n\n----------------------------------------\n\nTITLE: Implementing PanDetector for Player Control in Flame\nDESCRIPTION: This snippet shows how to add the PanDetector mixin to the game class to enable touch-based player control.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/space_shooter/step_2.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame/input.dart';\nimport 'package:flame/events.dart';\n\nclass SpaceShooterGame extends FlameGame with PanDetector {\n  late Player player;\n\n  @override\n  void onLoad() {\n    // omitted\n  }\n\n  @override\n  void onPanUpdate(DragUpdateInfo info) {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Segment Manager for Ember Quest in Dart\nDESCRIPTION: Creates a SegmentManager class to handle level segments. It defines a Block class for positioning game objects and initializes segments as lists of blocks. This forms the core of the game's infinite world generation.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_3.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame/components.dart';\n\nimport '../actors/water_enemy.dart';\nimport '../objects/ground_block.dart';\nimport '../objects/platform_block.dart';\nimport '../objects/star.dart';\n\nclass Block {\n  // gridPosition position is always segment based X,Y.\n  // 0,0 is the bottom left corner.\n  // 10,10 is the upper right corner.\n  final Vector2 gridPosition;\n  final Type blockType;\n  Block(this.gridPosition, this.blockType);\n}\n\nfinal segments = [\n  segment0,\n  segment1,\n  segment2,\n  segment3,\n  segment4,\n];\n\nfinal segment0 = [\n  Block(Vector2(0, 0), GroundBlock),\n  Block(Vector2(1, 0), GroundBlock),\n  Block(Vector2(2, 0), GroundBlock),\n  Block(Vector2(3, 0), GroundBlock),\n  Block(Vector2(4, 0), GroundBlock),\n  Block(Vector2(5, 0), GroundBlock),\n  Block(Vector2(5, 1), WaterEnemy),\n  Block(Vector2(5, 3), PlatformBlock),\n  Block(Vector2(6, 0), GroundBlock),\n  Block(Vector2(6, 3), PlatformBlock),\n  Block(Vector2(7, 0), GroundBlock),\n  Block(Vector2(7, 3), PlatformBlock),\n  Block(Vector2(8, 0), GroundBlock),\n  Block(Vector2(8, 3), PlatformBlock),\n  Block(Vector2(9, 0), GroundBlock),\n];\n\nfinal segment1 = [\n  Block(Vector2(0, 0), GroundBlock),\n  Block(Vector2(1, 0), GroundBlock),\n  Block(Vector2(1, 1), PlatformBlock),\n  Block(Vector2(1, 2), PlatformBlock),\n  Block(Vector2(1, 3), PlatformBlock),\n  Block(Vector2(2, 6), PlatformBlock),\n  Block(Vector2(3, 6), PlatformBlock),\n  Block(Vector2(6, 5), PlatformBlock),\n  Block(Vector2(7, 5), PlatformBlock),\n  Block(Vector2(7, 7), Star),\n  Block(Vector2(8, 0), GroundBlock),\n  Block(Vector2(8, 1), PlatformBlock),\n  Block(Vector2(8, 5), PlatformBlock),\n  Block(Vector2(8, 6), WaterEnemy),\n  Block(Vector2(9, 0), GroundBlock),\n];\n\nfinal segment2 = [\n  Block(Vector2(0, 0), GroundBlock),\n  Block(Vector2(1, 0), GroundBlock),\n  Block(Vector2(2, 0), GroundBlock),\n  Block(Vector2(3, 0), GroundBlock),\n  Block(Vector2(3, 3), PlatformBlock),\n  Block(Vector2(4, 0), GroundBlock),\n  Block(Vector2(4, 3), PlatformBlock),\n  Block(Vector2(5, 0), GroundBlock),\n  Block(Vector2(5, 3), PlatformBlock),\n  Block(Vector2(5, 4), WaterEnemy),\n  Block(Vector2(6, 0), GroundBlock),\n  Block(Vector2(6, 3), PlatformBlock),\n  Block(Vector2(6, 4), PlatformBlock),\n  Block(Vector2(6, 5), PlatformBlock),\n  Block(Vector2(6, 7), Star),\n  Block(Vector2(7, 0), GroundBlock),\n  Block(Vector2(8, 0), GroundBlock),\n  Block(Vector2(9, 0), GroundBlock),\n];\n\nfinal segment3 = [\n  Block(Vector2(0, 0), GroundBlock),\n  Block(Vector2(1, 0), GroundBlock),\n  Block(Vector2(1, 1), WaterEnemy),\n  Block(Vector2(2, 0), GroundBlock),\n  Block(Vector2(2, 1), PlatformBlock),\n  Block(Vector2(2, 2), PlatformBlock),\n  Block(Vector2(4, 4), PlatformBlock),\n  Block(Vector2(6, 6), PlatformBlock),\n  Block(Vector2(7, 0), GroundBlock),\n  Block(Vector2(7, 1), PlatformBlock),\n  Block(Vector2(8, 0), GroundBlock),\n  Block(Vector2(8, 8), Star),\n  Block(Vector2(9, 0), GroundBlock),\n];\n\nfinal segment4 = [\n  Block(Vector2(0, 0), GroundBlock),\n  Block(Vector2(1, 0), GroundBlock),\n  Block(Vector2(2, 0), GroundBlock),\n  Block(Vector2(2, 3), PlatformBlock),\n  Block(Vector2(3, 0), GroundBlock),\n  Block(Vector2(3, 1), WaterEnemy),\n  Block(Vector2(3, 3), PlatformBlock),\n  Block(Vector2(4, 0), GroundBlock),\n  Block(Vector2(5, 0), GroundBlock),\n  Block(Vector2(5, 5), PlatformBlock),\n  Block(Vector2(6, 0), GroundBlock),\n  Block(Vector2(6, 5), PlatformBlock),\n  Block(Vector2(6, 7), Star),\n  Block(Vector2(7, 0), GroundBlock),\n  Block(Vector2(8, 0), GroundBlock),\n  Block(Vector2(8, 3), PlatformBlock),\n  Block(Vector2(9, 0), GroundBlock),\n  Block(Vector2(9, 1), WaterEnemy),\n  Block(Vector2(9, 3), PlatformBlock),\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Angled Entity Using OxygenGame in Dart\nDESCRIPTION: This snippet illustrates how to create an angled entity in the Flame engine using the OxygenGame. It initializes a new entity with a specified angle in radians.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/oxygen/components.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\ngame.createEntity(\n  position: // ...\n  size: // ...\n  angle: 1.570796,\n);\n```\n\n----------------------------------------\n\nTITLE: Setting up SineEffectController in Dart for Flame Engine\nDESCRIPTION: Initializes a SineEffectController that represents a single period of the sine function, useful for creating natural-looking harmonic oscillations.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/effects.md#2025-04-20_snippet_33\n\nLANGUAGE: dart\nCODE:\n```\nfinal ec = SineEffectController(period: 1);\n```\n\n----------------------------------------\n\nTITLE: Loading Fire Atlas Within Game Instance in Dart\nDESCRIPTION: Shows how to load a Fire Atlas file when inside a game instance using the loadFireAtlas helper method. This is an alternative to using FireAtlas.loadAsset.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_fire_atlas/README.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// file at assets/atlas.fa\nfinal atlas = await loadFireAtlas('atlas.fa');\n```\n\n----------------------------------------\n\nTITLE: Revising onDragEnd Callback in Card Dart\nDESCRIPTION: This code revises the `onDragEnd` callback in the `Card` class to determine which pile the dragged card is being dropped into. It uses the `componentsAtPoint()` API to query which components are located at the card's position after the drag.  It then filters the components to find the piles and proceeds with the logic for dropping the card into the new pile.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step4.md#2025-04-20_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\n\"  @override\\n  void onDragEnd(DragEndEvent event) {\\n    if (!isDragged) {\\n      return;\\n    }\\n    super.onDragEnd(event);\\n    final dropPiles = parent!\\n        .componentsAtPoint(position + size / 2)\\n        .whereType<Pile>()\\n        .toList();\\n    if (dropPiles.isNotEmpty) {\\n      // if (card is allowed to be dropped into this pile) {\\n      //   remove the card from the current pile\\n      //   add the card into the new pile\\n      // }\\n    }\\n    // return the card to where it was originally\\n  }\"\n```\n\n----------------------------------------\n\nTITLE: Structuring Flame Riverpod Documentation with Toctree\nDESCRIPTION: Sphinx documentation toctree directive that organizes the documentation structure for Flame's Riverpod integration. It links to three main documentation files: riverpod.md for overview, component.md for component documentation, and widget.md for widget-related content.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_riverpod/flame_riverpod.md#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n{toctree}\nOverview   <riverpod.md>\nComponent  <component.md>\nWidget     <widget.md>\n```\n\n----------------------------------------\n\nTITLE: Initializing Paints for Card Rendering in Dart\nDESCRIPTION: This snippet initializes `Paint` objects for the card's background and border.  The background is set to black, while the border color depends on the card's suit (red or black). The border style is set to stroke with a width of 10.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step3.md#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\n  static final Paint frontBackgroundPaint = Paint()\n    ..color = const Color(0xff000000);\n  static final Paint redBorderPaint = Paint()\n    ..color = const Color(0xffece8a3)\n    ..style = PaintingStyle.stroke\n    ..strokeWidth = 10;\n  static final Paint blackBorderPaint = Paint()\n    ..color = const Color(0xff7ab2e8)\n    ..style = PaintingStyle.stroke\n    ..strokeWidth = 10;\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents in Markdown\nDESCRIPTION: Example of creating a table of contents block using toctree directive to organize documentation structure\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/development/documentation.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:hidden:\n\nFirst Topic    <relative_path/to_topic1.md>\nSecond Topic   <topic2.md>\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing ReverseLinearEffectController in Dart for Flame Engine\nDESCRIPTION: Creates a ReverseLinearEffectController that grows linearly from 1 to 0 over the specified duration.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/effects.md#2025-04-20_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\nfinal ec = ReverseLinearEffectController(1);\n```\n\n----------------------------------------\n\nTITLE: Setting Up BlocProvider with GameWidget in Dart\nDESCRIPTION: Demonstrates how to set up a BlocProvider that makes an InventoryBloc available to a Flame game through the widget tree.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_bloc/DEPRECATED_README.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nBlocProvider<ExampleGame>(\n  create: (_) => InventoryBloc(),\n  child: GameWidget(game: ExampleGame()),\n)\n```\n\n----------------------------------------\n\nTITLE: Processing Left and Right Movement Keys\nDESCRIPTION: Implements keyboard handling for left (A/arrow left) and right (D/arrow right) movement controls.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_5.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n@override\n  bool onKeyEvent(KeyEvent event, Set<LogicalKeyboardKey> keysPressed) {\n    horizontalDirection = 0;\n    horizontalDirection += (keysPressed.contains(LogicalKeyboardKey.keyA) ||\n            keysPressed.contains(LogicalKeyboardKey.arrowLeft))\n        ? -1\n        : 0;\n    horizontalDirection += (keysPressed.contains(LogicalKeyboardKey.keyD) ||\n            keysPressed.contains(LogicalKeyboardKey.arrowRight))\n        ? 1\n        : 0;\n\n    return true;\n  }\n```\n\n----------------------------------------\n\nTITLE: Removing a Specific Variable\nDESCRIPTION: Removes a single variable from the Yarn Project's variable storage by its key\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/runtime/variable_storage.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nyarnProject.variables.remove('money');\n```\n\n----------------------------------------\n\nTITLE: Rounding to Decimal Places with round_places() Function in Yarn\nDESCRIPTION: The round_places() function rounds a number to a specified number of decimal places. It can handle positive, negative, or zero decimal places, allowing rounding to tens, hundreds, etc.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/expressions/functions/numeric.md#2025-04-20_snippet_7\n\nLANGUAGE: yarn\nCODE:\n```\n{ round_places(0, 1)     }  // 0\n{ round_places(0.3, 1)   }  // 0.3\n{ round_places(5.001, 1) }  // 5.0\n{ round_places(5.001, 2) }  // 5.0\n{ round_places(5.001, 3) }  // 5.001\n{ round_places(5.5, 1)   }  // 5.5\n{ round_places(5.999, 1) }  // 6.0\n{ round_places(-2.07, 1) }  // -2.1\n{ round_places(13, -1)   }  // 10\n{ round_places(252, -2)  }  // 200\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Functions in YarnSpinner\nDESCRIPTION: Demonstrates the usage of built-in functions in YarnSpinner, specifically the 'dice' and 'random' functions. These functions are used to generate random values and are assigned to variables using the 'set' command.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/expressions/functions/functions.md#2025-04-20_snippet_0\n\nLANGUAGE: yarn\nCODE:\n```\n<<set $roll_2d6 = dice(6) + dice(6)>>\n<<set $random = random()>>\n```\n\n----------------------------------------\n\nTITLE: Configuring Assets in Flutter's pubspec.yaml\nDESCRIPTION: This YAML snippet shows how to configure the assets directory in the pubspec.yaml file for a Flutter project. It specifies the path to the images folder.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step1.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nflutter:\n  assets:\n    - assets/images/\n```\n\n----------------------------------------\n\nTITLE: Configuring TileAtlas Size in Flame\nDESCRIPTION: Example of loading TiledComponent with custom atlas size limits for larger tilemaps.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_tiled/flame_tiled.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal component = await TiledComponent.load(\n  'my_map.tmx',\n  Vector2.all(32),\n  atlasMaxX: 9216,\n  atlasMaxY: 9216,\n);\n\nadd(component);\n```\n\n----------------------------------------\n\nTITLE: Registering StartQuest Command in Dart\nDESCRIPTION: Demonstrates how to create and register a custom 'StartQuest' command that takes two string arguments: quest ID and quest name. The command is registered using the addCommand2 method.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/runtime/command_storage.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MyGame {\n  late YarnProject yarnProject;\n\n  void startQuest(String questId, String questName) {\n    assert(quests.containsKey(questId));\n    assert(quests[questId]!.name == questName);\n    // ...\n  }\n  @override\n  void onLoad() {\n    yarnProject = YarnProject()\n      ..commands.addCommand2('StartQuest', startQuest);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rounding Down Numbers with floor() Function in Yarn\nDESCRIPTION: The floor() function rounds a number down to the nearest integer. It returns the largest integer value less than or equal to the input.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/expressions/functions/numeric.md#2025-04-20_snippet_3\n\nLANGUAGE: yarn\nCODE:\n```\n{ floor(0)     }  // 0\n{ floor(0.3)   }  // 0\n{ floor(5)     }  // 5\n{ floor(5.001) }  // 5\n{ floor(5.999) }  // 5\n{ floor(-2.07) }  // -3\n```\n\n----------------------------------------\n\nTITLE: Foundation Pile Implementation in Klondike Solitaire (Dart)\nDESCRIPTION: This class implements a foundation pile in Klondike Solitaire. It includes methods to check if the pile is full and to acquire cards, triggering a win check when the pile is full.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step5.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nclass FoundationPile extends PositionComponent implements Pile {\n  FoundationPile(int intSuit, this.checkWin, {super.position})\n      : suit = Suit.fromInt(intSuit),\n        super(size: KlondikeGame.cardSize);\n\n  final VoidCallback checkWin;\n\n  final Suit suit;\n  final List<Card> _cards = [];\n\n  //#region Pile API\n\n  bool get isFull => _cards.length == 13;\n```\n\nLANGUAGE: dart\nCODE:\n```\n  void acquireCard(Card card) {\n    assert(card.isFaceUp);\n    card.position = position;\n    card.priority = _cards.length;\n    card.pile = this;\n    _cards.add(card);\n    if (isFull) {\n      checkWin(); // Get KlondikeWorld to check all FoundationPiles.\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Declaring Global and Local Variables in YarnSpinner\nDESCRIPTION: Example of declaring global and local variables in YarnSpinner. Global variables are declared using <<declare>> and can be accessed anywhere, while local variables are declared with <<local>> and are scoped to the current node.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/expressions/variables.md#2025-04-20_snippet_4\n\nLANGUAGE: yarn\nCODE:\n```\n<<declare $global_variable = 0>>\n\ntitle: MyNode\n---\n<<local $local_variable = 1>>\n===\n```\n\n----------------------------------------\n\nTITLE: Loading SVG with SvgComponent in Flame - Dart\nDESCRIPTION: This snippet demonstrates how to load and render an SVG image using the SvgComponent. It shows the loading of an SVG file asynchronously and its creation with specified position and size.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_28\n\nLANGUAGE: dart\nCODE:\n```\n@override\nFuture<void> onLoad() async {\n  final svg = await Svg.load('android.svg');\n  final android = SvgComponent.fromSvg(\n    svg,\n    position: Vector2.all(100),\n    size: Vector2.all(100),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents for Jenny Runtime Documentation in Markdown\nDESCRIPTION: This code snippet creates a hidden table of contents using the toctree directive in Markdown. It lists various components of the Jenny Runtime, each linked to its respective documentation file.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/runtime/jenny_runtime.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:hidden:\n\nCharacter          <character.md>\nCharacterStorage   <character_storage.md>\nCommandStorage     <command_storage.md>\nDialogueChoice     <dialogue_choice.md>\nDialogueLine       <dialogue_line.md>\nDialogueOption     <dialogue_option.md>\nDialogueRunner     <dialogue_runner.md>\nDialogueView       <dialogue_view.md>\nFunctionStorage    <function_storage.md>\nMarkupAttribute    <markup_attribute.md>\nNode               <node.md>\nUserDefinedCommand <user_defined_command.md>\nVariableStorage    <variable_storage.md>\nYarnProject        <yarn_project.md>\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Test Structure in Dart\nDESCRIPTION: Shows the basic structure of a test file with a main function and group for testing a specific class.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/development/testing_guide.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  group('SpookyEffect', () {\n    // tests here\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Suit Color Getters in Dart\nDESCRIPTION: This code defines simple getter methods for determining the color of a suit.  It allows the code to easily check if a suit is red (Hearts or Diamonds) or black (Clubs or Spades), which is used for game logic related to card placement.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step3.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n\"  /// Hearts and Diamonds are red, while Clubs and Spades are black.\\n  bool get isRed => value <= 1;\\n  bool get isBlack => value >= 2;\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Camera Viewfinder\nDESCRIPTION: Code that configures the camera's viewfinder to ensure the entire game is visible on screen regardless of device size. It sets the visible game size, camera position, and anchor point.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step2.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n    camera.viewfinder.visibleGameSize =\n           Vector2(cardWidth * 7 + cardGap * 8, 4 * cardHeight + 3 * cardGap);\n    camera.viewfinder.position = Vector2(cardWidth * 3.5 + cardGap * 4, 0);\n    camera.viewfinder.anchor = Anchor.topCenter;\n```\n\n----------------------------------------\n\nTITLE: Checking Node Visit Status in Yarn Dialogue\nDESCRIPTION: Shows how to use the 'visited' function to determine if a dialogue node has been previously visited. This can be used to provide different dialogue options for first-time interactions.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/expressions/functions/misc.md#2025-04-20_snippet_4\n\nLANGUAGE: yarn\nCODE:\n```\ntitle: MerchantDialogue\n---\n<<if not visited(\"MerchantDialogue\")>>\n  // This part of the dialogue will run only during the first interaction\n  // with the merchant.\n  Merchant: Greetings! My name is Linn.\n  Merchant: I offer exquisite wares for the most fastidious customers!\n  Player: Hi. I'm Bob. I like stuff.\n<<endif>>\n...\n===\n```\n\n----------------------------------------\n\nTITLE: Incrementing Numbers with inc() Function in Yarn\nDESCRIPTION: The inc() function increases a number towards the next integer. For integers, it adds 1; for non-integers, it returns ceil(x).\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/expressions/functions/numeric.md#2025-04-20_snippet_4\n\nLANGUAGE: yarn\nCODE:\n```\n{ inc(0)     }  // 1\n{ inc(0.3)   }  // 1\n{ inc(5.0)   }  // 6\n{ inc(5.001) }  // 6\n{ inc(5.999) }  // 6\n{ inc(-2.07) }  // -2\n```\n\n----------------------------------------\n\nTITLE: Multiple Examples of <<declare>> Usage in Yarn\nDESCRIPTION: This snippet showcases various ways to use the <<declare>> command, including different variable types, initializations, and type specifications. It demonstrates the flexibility of the command.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/commands/declare.md#2025-04-20_snippet_4\n\nLANGUAGE: yarn\nCODE:\n```\n<<declare $prefix = \"Mr.\">>\n<<declare $gold = 100>>\n<<declare $been_to_hell = false>>\n\n<<declare $name as String>>\n<<declare $distanceTraveled as Number>>\n\n<<declare $birthDay = randomRange(1, 365) as Number>>\n<<declare $vulgarity = GetObscenitySetting() as Bool>>\n```\n\n----------------------------------------\n\nTITLE: Styling Text with Markup in Yarn Dialogue\nDESCRIPTION: Example of using markup to style specific words in a dialogue exchange between characters.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/markup.md#2025-04-20_snippet_7\n\nLANGUAGE: yarn\nCODE:\n```\ntitle: Scene117_Harry_MrMalfoy\n---\nHarry: I'm not afraid of [cursed]Voldemort[/cursed]!\nMrMalfoy: You must be really brave... or really [i]stupid[/i]?\n===\n```\n\n----------------------------------------\n\nTITLE: Declaring acquireCard in Pile Interface Dart\nDESCRIPTION: This code snippet declares the `acquireCard` method in the `Pile` interface.  This signifies that all classes implementing this interface must define the `acquireCard` method.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step4.md#2025-04-20_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\n\"abstract class Pile {\\n  ...\\n  void acquireCard(Card card);\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Adding Movement Direction Variable\nDESCRIPTION: Declares a variable to track the horizontal movement direction of the player character.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_5.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n  int horizontalDirection = 0;\n```\n\n----------------------------------------\n\nTITLE: Basic Character Declaration Syntax in Yarn\nDESCRIPTION: Shows the basic syntax for declaring a character with a full name and optional aliases.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/commands/character.md#2025-04-20_snippet_0\n\nLANGUAGE: yarn\nCODE:\n```\n<<character \"FULL NAME\" alias1 alias2...>>\n```\n\n----------------------------------------\n\nTITLE: Setting up DelayedEffectController in Dart for Flame Engine\nDESCRIPTION: Initializes a DelayedEffectController that executes its child controller after a prescribed delay.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/effects.md#2025-04-20_snippet_30\n\nLANGUAGE: dart\nCODE:\n```\nfinal ec = DelayedEffectController(LinearEffectController(1), delay: 5);\n```\n\n----------------------------------------\n\nTITLE: Defining InlineTextElement Interface in Dart\nDESCRIPTION: This snippet outlines the required methods for implementing the InlineTextElement interface in Flame. It includes methods for translating and drawing the text element on a canvas.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/text_rendering.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvoid translate(double dx, double dy);\nvoid draw(Canvas canvas);\n```\n\n----------------------------------------\n\nTITLE: Removing Specific Function in Dart\nDESCRIPTION: Method to remove a specific user-defined function from the FunctionStorage by its name.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/runtime/function_storage.md#2025-04-20_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\nremove(String name)\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes - Version 0.2.0\nDESCRIPTION: Major update migrating from RawKeyEvent to KeyEvent system.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_markdown/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.0\n\n> Note: This release has breaking changes.\n\n - **BREAKING** **FIX**: Migrate from `RawKeyEvent` to `KeyEvent` ([#3002](https://github.com/flame-engine/flame/issues/3002)). ([330862c9](https://github.com/flame-engine/flame/commit/330862c98ecc7ed8d94e7cae0c34cd5781da0007))\n```\n\n----------------------------------------\n\nTITLE: Importing Colors from Flutter Material Package in Dart\nDESCRIPTION: This snippet demonstrates how to import and use predefined colors from the Flutter Material package.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/palette.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart' show Colors;\n\nconst black = Colors.black;\n```\n\n----------------------------------------\n\nTITLE: Suit Private Constructor and Properties in Dart\nDESCRIPTION: This snippet defines the private constructor for the `Suit` class in Dart, which initializes the object's core properties such as numeric value, string label, and sprite. The sprite is initialized using the `klondikeSprite()` function. The properties `value`, `label`, and `sprite` are declared as final, indicating that their values cannot be changed after the object is created.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step3.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n\"  Suit._(this.value, this.label, double x, double y, double w, double h)\\n      : sprite = klondikeSprite(x, y, w, h);\\n\\n  final int value;\\n  final String label;\\n  final Sprite sprite;\"\n```\n\n----------------------------------------\n\nTITLE: Adding CameraComponent and World to Game\nDESCRIPTION: This snippet shows the initialization of the `cameraComponent` and adding both the `cameraComponent` and the `world` to the game within the `onLoad` method. The camera is initialized with the world passed as argument.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n\"@override\\nvoid onLoad() {\\n  cameraComponent = CameraComponent(world: world);\\n  addAll([cameraComponent, world]);\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Hashtags in Yarn Dialogue\nDESCRIPTION: Demonstration of using hashtags to add metadata to dialogue lines.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/lines.md#2025-04-20_snippet_6\n\nLANGUAGE: yarn\nCODE:\n```\ntitle: Hashtags\n---\nHarry: There is no justice in the laws of Nature, Headmaster, no term for \\\n       fairness in the equations of motion. #sad // HPMOR.39\nHarry: The universe is neither evil, nor good, it simply does not care.\nHarry: The stars don't care, or the Sun, or the sky.\nHarry: But they don't have to! We care! #elated #volume:+1\nHarry: There is light in the world, and it is us! #volume:+2\n===\n```\n\n----------------------------------------\n\nTITLE: Decrementing Numbers with dec() Function in Yarn\nDESCRIPTION: The dec() function decreases a number towards the previous integer. For integers, it subtracts 1; for non-integers, it returns floor(x).\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/expressions/functions/numeric.md#2025-04-20_snippet_1\n\nLANGUAGE: yarn\nCODE:\n```\n{ dec(0)     }  // -1\n{ dec(0.3)   }  // 0\n{ dec(5.0)   }  // 4\n{ dec(5.001) }  // 5\n{ dec(5.999) }  // 5\n{ dec(-2.07) }  // -3\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Files in pubspec.yaml\nDESCRIPTION: Configuration for linking atlas and sprite sheet image files in pubspec.yaml for asset management\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_texturepacker/README.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nassets:\n  - assets/images/atlas_map.atlas\n  - assets/images/sprite_sheet1.png\n```\n\n----------------------------------------\n\nTITLE: Basic Markup Tag Usage in Yarn\nDESCRIPTION: Demonstrates the basic syntax for using markup tags to annotate text in a dialogue line.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/markup.md#2025-04-20_snippet_0\n\nLANGUAGE: yarn\nCODE:\n```\nHello, [wavy]world[/wavy]!\n```\n\n----------------------------------------\n\nTITLE: Generating Random Integer for Segment Selection in Dart\nDESCRIPTION: Uses dart:math's Random() function to generate a random integer between 0 (inclusive) and segments.length (exclusive), used for selecting the next platform segment.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_4.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nRandom().nextInt(segments.length),\n```\n\n----------------------------------------\n\nTITLE: Adding WaterEnemy Component to Game World in Dart\nDESCRIPTION: This snippet shows how to add the WaterEnemy component to the game world in the main game file.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_4.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\ncase WaterEnemy:\n    world.add(\n      WaterEnemy(\n       gridPosition: block.gridPosition,\n       xOffset: xPositionOffset,\n      ),\n    );\n```\n\n----------------------------------------\n\nTITLE: Illustrating Dynamic Parameter Usage in Yarn Script\nDESCRIPTION: This example demonstrates how dynamic parameters can be used in markup attributes. The 'color' parameter is set to a variable $color, which can be evaluated at runtime.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/runtime/markup_attribute.md#2025-04-20_snippet_1\n\nLANGUAGE: yarn\nCODE:\n```\nMy [i]favorite[/i] color is [bb color=$color]{$color}[/bb].\n```\n\n----------------------------------------\n\nTITLE: Configuring RevoluteJoint Motor in Dart\nDESCRIPTION: This code shows how to enable and configure the motor for a RevoluteJoint in Dart. It sets the motor speed and maximum torque.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_forge2d/joints.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\njointDef\n  ..enableMotor = true\n  ..motorSpeed = 5\n  ..maxMotorTorque = 100;\n```\n\n----------------------------------------\n\nTITLE: Badge Markdown Snippets for Flame Projects\nDESCRIPTION: Code snippets showing how to add Flame-powered badges to project documentation using markdown syntax. Includes variations for different badge styles.\nSOURCE: https://github.com/flame-engine/flame/blob/main/README.md#2025-04-20_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n[![Powered by Flame](https://img.shields.io/badge/Powered%20by-%F0%9F%94%A5-orange.svg)](https://flame-engine.org)\n[![Powered by Flame](https://img.shields.io/badge/Powered%20by-%F0%9F%94%A5-orange.svg?style=flat-square)](https://flame-engine.org)\n[![Powered by Flame](https://img.shields.io/badge/Powered%20by-%F0%9F%94%A5-orange.svg?style=for-the-badge)](https://flame-engine.org)\n```\n\n----------------------------------------\n\nTITLE: Add New Route Methods - Dart\nDESCRIPTION: This feature introduces new routing methods 'pushReplacement', 'pushReplacementNamed', and 'pushReplacementOverlay' for enhanced navigation capabilities.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame/CHANGELOG.md#2025-04-20_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\n// Adds new route methods `pushReplacement`, `pushReplacementNamed`, and `pushReplacementOverlay`\n// Commit: a2772b4e\n```\n\n----------------------------------------\n\nTITLE: Breaking Change - KeyEvent Migration\nDESCRIPTION: Migrated from RawKeyEvent to KeyEvent system for input handling\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_lottie/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- **BREAKING** **FIX**: Migrate from `RawKeyEvent` to `KeyEvent` ([#3002](https://github.com/flame-engine/flame/issues/3002)). ([330862c9](https://github.com/flame-engine/flame/commit/330862c98ecc7ed8d94e7cae0c34cd5781da0007))\n```\n\n----------------------------------------\n\nTITLE: Running Code Formatting Commands in Shell\nDESCRIPTION: Commands to run Flutter analyzer and Dart formatter to ensure code conformance and fix formatting issues.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/development/style_guide.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflutter analyze\ndart format .\n```\n\n----------------------------------------\n\nTITLE: Creating a Sprite Helper Function\nDESCRIPTION: This snippet provides a helper function named klondikeSprite for extracting a sprite from a sprite sheet. It takes parameters for position and size, utilizing Flame's cache to retrieve the image. This aids in managing and rendering individual sprites efficiently, assuming that the sprite sheet has been previously loaded.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step2.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nSprite klondikeSprite(double x, double y, double width, double height) {\n  return Sprite(\n    Flame.images.fromCache('klondike-sprites.png'),\n    srcPosition: Vector2(x, y),\n    srcSize: Vector2(width, height),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Asset Configuration in pubspec.yaml\nDESCRIPTION: Configuring audio asset paths in the Flutter section of pubspec.yaml file.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_audio/audio.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nflutter:\n  assets:\n    - assets/audio/explosion.mp3\n    - assets/audio/music.mp3\n```\n\n----------------------------------------\n\nTITLE: Component Tree Structure for Klondike Game\nDESCRIPTION: This diagram shows the hierarchical structure of components in the Klondike game, with the World component containing game elements and the CameraComponent for rendering.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step2.md#2025-04-20_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nKlondikeGame\n ├─ World\n │   ├─ Stock\n │   ├─ Waste\n │   ├─ Foundation (×4)\n │   └─ Pile (×7)\n └─ CameraComponent\n```\n\n----------------------------------------\n\nTITLE: Converting to Number in Yarn\nDESCRIPTION: The number(x) function converts its argument into a numeric value. It handles boolean, numeric, and string inputs, with support for various numeric formats including integer, decimal, scientific, and hexadecimal.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/expressions/functions/type.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nnumber(x)\n```\n\n----------------------------------------\n\nTITLE: Declaring Local Variables in YarnSpinner\nDESCRIPTION: Demonstrates the two syntax forms for declaring local variables in YarnSpinner. The first form creates a variable and assigns it a value, while the second form includes type annotation for compile-time type checking.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/commands/local.md#2025-04-20_snippet_0\n\nLANGUAGE: yarn\nCODE:\n```\n<<local $VARIABLE = EXPRESSION>>\n<<local $VARIABLE = EXPRESSION as TYPE>>\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of If Command in Yarn Spinner\nDESCRIPTION: Demonstrates the basic structure and syntax of the <<if>> command in Yarn Spinner. It shows how to use <<if>>, <<elseif>>, <<else>>, and <<endif>> blocks to create conditional statements in dialogue scripts.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/commands/if.md#2025-04-20_snippet_0\n\nLANGUAGE: yarn\nCODE:\n```\n<<if condition1>>\n  statements1...\n<<elseif condition2>>\n  statements2...\n<<else>>\n  statementsN...\n<<endif>>\n```\n\n----------------------------------------\n\nTITLE: Defining Stock Component as PositionComponent in Flame\nDESCRIPTION: The provided code snippet defines the Stock class extending from PositionComponent. It enables the debug mode for rendering visibility during the development phase, comes at no rendering logic yet. The dependencies include the 'flame/components' package, and its current purpose is to act as a container for future game logic.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step2.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame/components.dart';\n\nclass Stock extends PositionComponent {\n  @override\n  bool get debugMode => true;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating MarkupAttribute Usage in Yarn Script\nDESCRIPTION: This snippet shows how markup attributes are used in a .yarn file to format text and create links. It demonstrates the use of the 'b' (bold) and 'link' tags.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/runtime/markup_attribute.md#2025-04-20_snippet_0\n\nLANGUAGE: yarn\nCODE:\n```\n[b]Jenny[/b] is a library based on \\\n    [link url=\"docs.yarnspinner.dev\"]YarnSpinner[/link] for Unity.\n```\n\n----------------------------------------\n\nTITLE: Configuring MotorJoint in Forge2D\nDESCRIPTION: Sets up a motor joint to control relative motion between two bodies with specified force and torque limits. Includes position correction factor for movement response adjustment.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_forge2d/joints.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal motorJointDef = MotorJointDef()\n  ..initialize(first, second)\n  ..maxTorque = 1000\n  ..maxForce = 1000\n  ..correctionFactor = 0.1;\n\n  world.createJoint(MotorJoint(motorJointDef));\n```\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid update(double dt) {\n  super.update(dt);\n  \n  final angularOffset = joint.getAngularOffset() + motorSpeed * dt;\n  joint.setAngularOffset(angularOffset);\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting ScalingParticle\nDESCRIPTION: This code snippet includes a fix that exports the ScalingParticle, making it accessible for use in other parts of the Flame Engine.\nSOURCE: https://github.com/flame-engine/flame/blob/main/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n- **FIX**: Export `ScalingParticle` ([#2928](https://github.com/flame-engine/flame/issues/2928)). ([3730cb1d](https://github.com/flame-engine/flame/commit/3730cb1d834c73c87dc3597554039fd0f0a32bae))\n```\n\n----------------------------------------\n\nTITLE: Markup Tags with Dynamic Text in Yarn\nDESCRIPTION: Demonstrates using markup tags around interpolated expressions for dynamic text.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/markup.md#2025-04-20_snippet_5\n\nLANGUAGE: yarn\nCODE:\n```\nHello, [b]{$player}[/b]!\n```\n\n----------------------------------------\n\nTITLE: Updating lints to comply with new pub requirements - Dart\nDESCRIPTION: This snippet details the updates made to several packages, specifically addressing the requirement to update lints to meet new pub standards. It is essential for maintaining compliance in Dart packages.\nSOURCE: https://github.com/flame-engine/flame/blob/main/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n- **FIX**: Update version of lints to comply with new pub requirements ([#3223](https://github.com/flame-engine/flame/issues/3223)). ([1b0bee72](https://github.com/flame-engine/flame/commit/1b0bee726b5937f73d4be5e304bc8780aa3ca6f0))\n```\n\n----------------------------------------\n\nTITLE: Refactor onLoad Method Return Type - Dart\nDESCRIPTION: This breaking change refactors the 'onLoad()' method to return 'FutureOr<void>', changing the asynchronous behavior of component loading.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame/CHANGELOG.md#2025-04-20_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\n// The method `onLoad()` now returns `FutureOr<void>`\n// Commit: d898b539\n```\n\n----------------------------------------\n\nTITLE: Positioning Player at Game Start\nDESCRIPTION: Sets the initial position for the player character in the game world.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_5.md#2025-04-20_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\n_ember = EmberPlayer(\n  position: Vector2(128, canvasSize.y - 128),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies in pubspec.yaml\nDESCRIPTION: Adding flame_audio package dependency to the project's pubspec.yaml file.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_audio/audio.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  flame_audio: VERSION\n```\n\n----------------------------------------\n\nTITLE: Importing Collision Module\nDESCRIPTION: Imports the necessary Flame collision detection package.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_5.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame/collisions.dart';\n```\n\n----------------------------------------\n\nTITLE: Declaring Variables in YarnSpinner\nDESCRIPTION: Examples of declaring variables in YarnSpinner using the <<declare>> command. This shows how to declare variables of different types and with initial values.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/expressions/variables.md#2025-04-20_snippet_2\n\nLANGUAGE: yarn\nCODE:\n```\n// Creates a variable $money of type number, and gives it initial value of 100\n<<declare $money = 100>>\n\n// Creates variable $name of type string, the initial value will be \"\"\n<<declare $name as String>>\n```\n\n----------------------------------------\n\nTITLE: Package Updates for Flame Engine Components\nDESCRIPTION: Version and feature updates for Flame Engine packages including parameter validation, package dependencies, and spread operator optimizations.\nSOURCE: https://github.com/flame-engine/flame/blob/main/CHANGELOG.md#2025-04-20_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nflame_bloc: v1.8.0\nflame_flare: v1.5.0\nflame_forge2d: v0.12.3\nflame_lint: v0.1.3\nflame_svg: v1.6.0\nflame_tiled: v1.8.0\n```\n\n----------------------------------------\n\nTITLE: Jumping to a Specific Node in Yarn Scripting\nDESCRIPTION: This snippet demonstrates how to use the <<jump>> command to immediately start executing a different node in Yarn scripting. The command takes the ID of the target node as an argument.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/commands/jump.md#2025-04-20_snippet_0\n\nLANGUAGE: yarn\nCODE:\n```\n<<jump FarewellScene>>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Content to FlameSplashScreen\nDESCRIPTION: This snippet allows customization by adding content to display before or after the Flame logo. It accepts showBefore and showAfter callbacks for content before and after the logo respectively. Both can be used simultaneously.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_splash_screen/README.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFlameSplashScreen(\n  theme: FlameSplashTheme.dark,\n  showBefore: (BuildContext context) {\n    return Text(\"To be shown before flame animation\");\n  },\n  onFinish: (BuildContext context) => Navigator.pushNamed(context, '/your-game-initial-screen'),\n)\n```\n\nLANGUAGE: dart\nCODE:\n```\nFlameSplashScreen(\n  theme: FlameSplashTheme.dark,\n  showAfter: (BuildContext context) {\n    return Text(\"To be shown after flame animation\");\n  },\n  onFinish: (BuildContext context) => Navigator.pushNamed(context, '/your-game-initial-screen'),\n)\n```\n\n----------------------------------------\n\nTITLE: Setting PrismaticJoint Limits in Dart\nDESCRIPTION: This snippet demonstrates how to set translation limits for a PrismaticJoint in Dart. It enables the limit and sets the lower and upper translation boundaries.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_forge2d/joints.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\njointDef\n  ..enableLimit = true\n  ..lowerTranslation = -20\n  ..upperTranslation = 20;\n```\n\n----------------------------------------\n\nTITLE: Documenting DialogueLine Class in Dart\nDESCRIPTION: This code snippet uses Dartdoc to document the DialogueLine class. It specifies the package, symbol, and file location for the class. It also includes a reference to the Line documentation.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/runtime/dialogue_line.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n```{dartdoc}\n:package: jenny\n:symbol: DialogueLine\n:file: src/structure/dialogue_line.dart\n\n[Line]: ../language/lines.md\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing ConstantVolumeJoint in Forge2D\nDESCRIPTION: Creates a constant volume joint that maintains volume between multiple bodies. Useful for soft-body physics simulations. Requires at least 3 bodies and supports frequency and damping ratio configuration.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_forge2d/joints.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal constantVolumeJoint = ConstantVolumeJointDef()\n  ..frequencyHz = 10\n  ..dampingRatio = 0.8;\n\nbodies.forEach((body) {\n  constantVolumeJoint.addBody(body);\n});\n  \nworld.createJoint(ConstantVolumeJoint(world, constantVolumeJoint));\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Assets in Flutter\nDESCRIPTION: Setup for declaring image assets in the pubspec.yaml file for Flutter project configuration\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/images.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nflutter:\n  assets:\n    - assets/images/player.png\n    - assets/images/enemy.png\n```\n\n----------------------------------------\n\nTITLE: Adding Tap Input Handling\nDESCRIPTION: Extended player component example showing how to handle tap input using TapCallbacks mixin\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/README.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame/components.dart';\nimport 'package:flame/geometry.dart';\nimport 'package:flame/extensions.dart';\n\nclass Player extends SpriteComponent with TapCallbacks {\n  Player({super.position}) :\n    super(size: Vector2.all(200), anchor: Anchor.center);\n\n  @override\n  Future<void> onLoad() async {\n    sprite = await Sprite.load('player.png');\n  }\n  \n  @override\n  void onTapUp(TapUpEvent info) {\n    size += Vector2.all(50);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Flame Release Version Notes\nDESCRIPTION: Markdown formatted release notes detailing changes across multiple versions of the Flame engine, including bug fixes, features, and documentation updates.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_tiled/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.11.0\n\n - **FIX**: Tiled component orthogonal test ([#2549](https://github.com/flame-engine/flame/issues/2549)). ([34e5f0e4](https://github.com/flame-engine/flame/commit/34e5f0e443e21923c311120ce8634a14339bc71d))\n - **FIX**: Update sdk constraints to >=3.0.0 ([#2554](https://github.com/flame-engine/flame/issues/2554)). ([2f71e06e](https://github.com/flame-engine/flame/commit/2f71e06eb86ffc65cd459c4d722eee2470be13e5))\n - **FEAT**: Add option for a custom image and asset loader ([#2569](https://github.com/flame-engine/flame/issues/2569)). ([dfe18251](https://github.com/flame-engine/flame/commit/dfe18251c1bac8aaca9bf146e03320efbbc3ce9c))\n\n## 1.10.2\n\n - **FIX**: Update sdk constraints to >=3.0.0 ([#2554](https://github.com/flame-engine/flame/issues/2554)). ([2f71e06e](https://github.com/flame-engine/flame/commit/2f71e06eb86ffc65cd459c4d722eee2470be13e5))\n - **FIX**: Solve warnings from 3.10.0 analyzer ([#2532](https://github.com/flame-engine/flame/issues/2532)). ([b41622db](https://github.com/flame-engine/flame/commit/b41622db8faa7559328f83f8f1d93ec4c6386961))\n```\n\n----------------------------------------\n\nTITLE: Adding Components to the World\nDESCRIPTION: This snippet shows how to add root components to the `world` instead of directly to the game. This is part of the migration strategy to use the new `CameraComponent` effectively.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n\"world.add(yourComponent);\"\n```\n\n----------------------------------------\n\nTITLE: Card Class Definition in Dart\nDESCRIPTION: This snippet defines the `Card` class, which extends `PositionComponent` from the Flame engine. It represents a playing card in the game, with properties for rank, suit, and face-up state. The constructor takes the rank and suit as integer inputs which are then converted to `Rank` and `Suit` objects.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step3.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n\"class Card extends PositionComponent {}\"\n```\n\n----------------------------------------\n\nTITLE: Rounding Numbers with round() Function in Yarn\nDESCRIPTION: The round() function rounds a number to the nearest integer. Values ending with .5 are rounded up for positive numbers and down for negative numbers.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/expressions/functions/numeric.md#2025-04-20_snippet_6\n\nLANGUAGE: yarn\nCODE:\n```\n{ round(0)     }  // 0\n{ round(0.3)   }  // 0\n{ round(5.0)   }  // 5\n{ round(5.001) }  // 5\n{ round(5.5)   }  // 6\n{ round(5.999) }  // 6\n{ round(-2.07) }  // -2\n{ round(-2.5) }   // -3\n```\n\n----------------------------------------\n\nTITLE: Valid Variable Names in YarnSpinner\nDESCRIPTION: Examples of valid variable names in YarnSpinner. All variable names start with a $ sign, followed by a letter or underscore, and then any number of letters, digits, or underscores.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/expressions/variables.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$i\n$WARNING\n$_secret_\n$door10\n$climbed_over_wall_and_avoided_all_guard_patrols\n$DoorPassword\n```\n\n----------------------------------------\n\nTITLE: Truncating Numbers with int() Function in Yarn\nDESCRIPTION: The int() function truncates the fractional part of a number, rounding towards zero. It returns only the integer part of the input.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/expressions/functions/numeric.md#2025-04-20_snippet_5\n\nLANGUAGE: yarn\nCODE:\n```\n{ int(0)     }  // 0\n{ int(0.3)   }  // 0\n{ int(5.0)   }  // 5\n{ int(5.001) }  // 5\n{ int(5.999) }  // 5\n{ int(-2.07) }  // -2\n```\n\n----------------------------------------\n\nTITLE: Declaring a Variable with Explicit Type in Yarn\nDESCRIPTION: This syntax allows declaring a variable with an explicit type (Bool, Number, or String) without providing an initial value. Default values are used based on the specified type.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/commands/declare.md#2025-04-20_snippet_2\n\nLANGUAGE: yarn\nCODE:\n```\n<<declare $VARIABLE as TYPE>>\n```\n\n----------------------------------------\n\nTITLE: Loading TextureAtlas from Assets\nDESCRIPTION: Method to load a texture atlas from assets, providing the path to the atlas file\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_texturepacker/README.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal atlas = await atlasFromAssets('atlas_map.atlas');\n```\n\n----------------------------------------\n\nTITLE: Configuring Assets in pubspec.yaml for Flame Engine (YAML)\nDESCRIPTION: This snippet demonstrates how to declare assets in the pubspec.yaml file for a Flame Engine project. It includes entries for audio, images, and tile map files.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/structure.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nflutter:\n  assets:\n    - assets/audio/explosion.mp3\n    - assets/images/player.png\n    - assets/images/enemy.png\n    - assets/tiles/level.tmx\n```\n\n----------------------------------------\n\nTITLE: Defining UserDefinedCommand Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the UserDefinedCommand class, including 'name', 'argumentString', and 'arguments'. It explains the purpose and format of each property.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/runtime/user_defined_command.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\n\n**name** `String`\n: The name of the command, without the angle brackets. For example, if the command is `<<smile>>`\n  in the yarn script, then its name will be `\"smile\"`.\n\n**argumentString** `String`\n: Command arguments, as a single string. For example, if the command is `<<move Hippo {$delta}>>`\n  and the value of variable `$delta` is `3.17`, then the argument string will be `\"Hippo 3.17\"`.\n\n  The `argumentString` is re-evaluated every time the command is executed, however, it is an error\n  to access this property before the command was executed by the dialogue runner.\n\n**arguments** `List<dynamic>?`\n: Command arguments, as a list of parsed values. This property will be null if the command was\n  declared without a signature (i.e. as an \"orphaned command\"). However, if the command was linked\n  as an external function, then the number and types of arguments in the list will correspond to\n  the arguments of that function.\n\n  In the same example as above, the `arguments` will be `['Hippo', 3.17]`, assuming the linked Dart\n  function is `move(String target, double distance)`.\n```\n\n----------------------------------------\n\nTITLE: Running Flame Game with CanvasKit Renderer\nDESCRIPTION: Commands to run and build Flame games using the CanvasKit/Skia renderer for better web performance\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/platforms.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflutter run -d chrome --web-renderer canvaskit\n```\n\nLANGUAGE: shell\nCODE:\n```\nflutter build web --release --web-renderer canvaskit\n```\n\n----------------------------------------\n\nTITLE: Implementing RiverpodAwareGameWidgetState in Dart for Flame Engine\nDESCRIPTION: RiverpodAwareGameWidgetState combines the functionality of ConsumerStatefulElement from flutter_riverpod and GameWidgetState from Flame. This allows for Riverpod state management within Flame game widgets.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_riverpod/widget.md#2025-04-20_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nRiverpodAwareGameWidgetState\n```\n\n----------------------------------------\n\nTITLE: Checking if FunctionStorage is Not Empty in Dart\nDESCRIPTION: Property to check if any user-defined functions are registered in the FunctionStorage.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/runtime/function_storage.md#2025-04-20_snippet_10\n\nLANGUAGE: Dart\nCODE:\n```\nisNotEmpty → bool\n```\n\n----------------------------------------\n\nTITLE: Adding AI assist badge to readme - Dart\nDESCRIPTION: This snippet describes the documentation updates where an AI assist badge was added to the readme files of several packages, enhancing the visibility of AI features.\nSOURCE: https://github.com/flame-engine/flame/blob/main/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n- **DOCS**: Add AI assist badge to readme(s) ([#3226](https://github.com/flame-engine/flame/issues/3226)). ([380d6aa9](https://github.com/flame-engine/flame/commit/380d6aa946d6b852c55f4ebbfce53d2087287fa2))\n```\n\n----------------------------------------\n\nTITLE: Re-use Paint Object in ImageParticle - Dart\nDESCRIPTION: This fix addresses the efficient use of paint objects in the ImageParticle class, enhancing performance by reusing resources.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame/CHANGELOG.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n// Re-use paint object in ImageParticle\n// Commit: 7a945d96\n```\n\n----------------------------------------\n\nTITLE: Audio Caching Mechanism in Flame Games\nDESCRIPTION: This snippet illustrates how to pre-load audio files into the cache to avoid delays when they are first played during the game. It uses FlameAudio's audioCache to load individual or multiple tracks, and provides methods to clear individual or all cached tracks.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_audio/README.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// cache single track\nawait FlameAudio.audioCache.load('explosion.mp3');\n\n// cache multiple tracks\nawait FlameAudio.audioCache.loadAll(['explosion.mp3', 'music.mp3']);\n```\n\nLANGUAGE: dart\nCODE:\n```\n// clear specific track\nFlameAudio.audioCache.clear('explosion.mp3');\n\n// clear whole cache\nFlameAudio.audioCache.clearCache();\n```\n\n----------------------------------------\n\nTITLE: Defining Node Class Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the Node class using Markdown syntax. It includes the title, tags, and iterator properties, along with their types and descriptions.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/runtime/node.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**title** `String`\n: The title (name) of the node.\n\n**tags** `Map<String, String>`\n: Additional tags specified in the header of the node. The map will be empty if there were no tags\n  besides the required `title` tag.\n\n**iterator** `Iterator<DialogueEntry>`\n: The content of the node, which is a sequence of `DialogueLine`s, `DialogueChoice`s, or\n  `Command`s.\n```\n\n----------------------------------------\n\nTITLE: Invalid Variable Names in YarnSpinner\nDESCRIPTION: Examples of invalid variable names in YarnSpinner. These do not follow the correct naming conventions for YarnSpinner variables.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/expressions/variables.md#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$2000_years\n$[main]\n@today\nvictory\n```\n\n----------------------------------------\n\nTITLE: Using Regions for Code Organization in Dart\nDESCRIPTION: Example showing how to use region comments to organize code sections within a class.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/development/style_guide.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n//#region Region description\n...\n//#endregion\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for <<declare>> Command in Yarn\nDESCRIPTION: This snippet shows the most common form of the <<declare>> command, where a variable is declared and initialized with an expression. The type of the variable is inferred from the expression.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/commands/declare.md#2025-04-20_snippet_1\n\nLANGUAGE: yarn\nCODE:\n```\n<<declare $VARIABLE = EXPRESSION>>\n```\n\n----------------------------------------\n\nTITLE: Updating Variables with <<set>> Command in Yarn Spinner\nDESCRIPTION: Demonstrates various ways to use the <<set>> command for regular and modifying assignments. The command requires variables to be pre-declared using <<declare>> or <<local>>. Expressions must match the variable type to avoid compile-time errors.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/commands/set.md#2025-04-20_snippet_0\n\nLANGUAGE: yarn\nCODE:\n```\n// Regular assignment\n<<set $VARIABLE = EXPRESSION>>\n<<set $VARIABLE to EXPRESSION>>\n\n// Modifying assignments\n<<set $VARIABLE += EXPRESSION>>\n<<set $VARIABLE -= EXPRESSION>>\n<<set $VARIABLE *= EXPRESSION>>\n<<set $VARIABLE /= EXPRESSION>>\n<<set $VARIABLE %= EXPRESSION>>\n\n// These modifying assignments are equivalent to the following:\n<<set $VARIABLE = $VARIABLE + EXPRESSION>>\n<<set $VARIABLE = $VARIABLE - EXPRESSION>>\n<<set $VARIABLE = $VARIABLE * EXPRESSION>>\n<<set $VARIABLE = $VARIABLE / EXPRESSION>>\n<<set $VARIABLE = $VARIABLE % EXPRESSION>>\n```\n\n----------------------------------------\n\nTITLE: Ticking a Behavior Tree in Dart\nDESCRIPTION: Example showing how to update a behavior tree by ticking the root node, which propagates the tick to child nodes based on their implementation.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_behavior_tree/behavior_tree/README.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal treeRoot = ...;\ntreeRoot.tick();\n```\n\n----------------------------------------\n\nTITLE: Creating Explosion Animation Class\nDESCRIPTION: Defines an Explosion class that creates a non-looping sprite animation for the explosion effect.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/space_shooter/step_6.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass Explosion extends SpriteAnimationComponent\n    with HasGameReference<SpaceShooterGame> {\n  Explosion({\n    super.position,\n  }) : super(\n          size: Vector2.all(150),\n          anchor: Anchor.center,\n          removeOnFinish: true,\n        );\n\n\n  @override\n  Future<void> onLoad() async {\n    await super.onLoad();\n\n    animation = await game.loadSpriteAnimation(\n      'explosion.png',\n      SpriteAnimationData.sequenced(\n        amount: 6,\n        stepTime: .1,\n        textureSize: Vector2.all(32),\n        loop: false,\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Probability-based Events with random() Function in Yarn\nDESCRIPTION: The random() function returns a random float between 0 and 1. It can be used to implement events with specific probabilities.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/expressions/functions/random.md#2025-04-20_snippet_1\n\nLANGUAGE: yarn\nCODE:\n```\n<<if random() < 0.001>>\n  // This happens only with 0.1% probability\n  You found it! The Holy Grail!\n<<endif>>\n```\n\n----------------------------------------\n\nTITLE: Integrating KlondikeGame into Flutter main.dart\nDESCRIPTION: This snippet shows how to integrate the KlondikeGame class into a Flutter application by modifying the main.dart file. It replaces FlameGame with KlondikeGame and sets up a Flutter GameWidget to render the game. Dependencies are the 'flame' package and 'flutter' framework.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step2.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame/game.dart';\nimport 'package:flutter/widgets.dart';\nimport 'klondike_game.dart';\n\nvoid main() {\n  final game = KlondikeGame();\n  runApp(GameWidget(game: game));\n}\n```\n\n----------------------------------------\n\nTITLE: Noise Effect Controller Implementation\nDESCRIPTION: Added new NoiseEffectController for creating random noise-based effects and animations\nSOURCE: https://github.com/flame-engine/flame/blob/main/CHANGELOG.md#2025-04-20_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\nNoiseEffectController\n```\n\n----------------------------------------\n\nTITLE: Added Computed Property visibleWorldRect - Dart\nDESCRIPTION: This feature introduces a computed property 'visibleWorldRect' to the CameraComponent, allowing easier access to the visible area of the game world.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame/CHANGELOG.md#2025-04-20_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\n// Added computed property CameraComponent.visibleWorldRect\n// Commit: f4b0e73f\n```\n\n----------------------------------------\n\nTITLE: Implementing AnchorToEffect in Dart for Flame Engine\nDESCRIPTION: Sets absolute anchor position of a component using Anchor class and EffectController.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/effects.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nfinal effect = AnchorToEffect(\n  Anchor.center,\n  EffectController(speed: 1),\n);\n```\n\n----------------------------------------\n\nTITLE: Importing AlignComponent in Dart for Flame Engine\nDESCRIPTION: This code snippet shows how to import the AlignComponent class from the Flame engine. It includes package information, class symbol, and file location. It also provides links to related Flutter classes.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/layout/align_component.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n:package: flame\n:symbol: AlignComponent\n:file: src/layout/align_component.dart\n\n[Align]: https://api.flutter.dev/flutter/widgets/Align-class.html\n[Alignment]: https://api.flutter.dev/flutter/painting/Alignment-class.html\n```\n\n----------------------------------------\n\nTITLE: Documenting New Feature in Markdown\nDESCRIPTION: Documents a new feature allowing flame_tiled to skip tilesets when packing into a tile atlas, including the issue number and commit hash.\nSOURCE: https://github.com/flame-engine/flame/blob/main/CHANGELOG.md#2025-04-20_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n - **FEAT**: Allow flame tiled to skip tilesets when packing into a tile atlas ([#2847](https://github.com/flame-engine/flame/issues/2847)). ([b93bdd38](https://github.com/flame-engine/flame/commit/b93bdd38313fd273e3e4cf55f1b142969effbde4))\n```\n\n----------------------------------------\n\nTITLE: Conditional Dialogue with Interpolated Expressions in Yarn\nDESCRIPTION: Example of using conditional statements and interpolated expressions in a more complex dialogue scenario.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/lines.md#2025-04-20_snippet_4\n\nLANGUAGE: yarn\nCODE:\n```\ntitle: Exam_Greeting\n---\n<<if $n_attempts == 0>>\n  Professor: Welcome to the exam!\n  <<jump Exam>>\n<<elseif $n_attempts < 5>>\n  Professor: You have tried {plural($n_attempts, \"% time\")} already, but I \\\n             can give you another try.\n  <<jump Exam>>\n<<else>>\n  Professor: You've failed 5 times in a row! How is this even possible?\n<<endif>> \n===\n```\n\n----------------------------------------\n\nTITLE: Self-Positioning in SpawnComponent\nDESCRIPTION: This feature enhancement introduces the ability to use selfPositioning within the SpawnComponent, allowing for improved component logic and positioning.\nSOURCE: https://github.com/flame-engine/flame/blob/main/CHANGELOG.md#2025-04-20_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n- **FEAT**: Ability to use `selfPositioning` in `SpawnComponent` ([#2927](https://github.com/flame-engine/flame/issues/2927)). ([b526aa14](https://github.com/flame-engine/flame/commit/b526aa1488c0f891edb356007ebc2c5c2de596b5))\n```\n\n----------------------------------------\n\nTITLE: Rounding Up Numbers with ceil() Function in Yarn\nDESCRIPTION: The ceil() function rounds a number up to the nearest integer. It returns the smallest integer value greater than or equal to the input.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/expressions/functions/numeric.md#2025-04-20_snippet_0\n\nLANGUAGE: yarn\nCODE:\n```\n{ ceil(0)     }  // 0\n{ ceil(0.3)   }  // 1\n{ ceil(5)     }  // 5\n{ ceil(5.001) }  // 6\n{ ceil(5.999) }  // 6\n{ ceil(-2.07) }  // -2\n```\n\n----------------------------------------\n\nTITLE: Self-Closing Markup Tags in Yarn\nDESCRIPTION: Illustrates the use of self-closing markup tags and their effect on surrounding spaces.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/markup.md#2025-04-20_snippet_3\n\nLANGUAGE: yarn\nCODE:\n```\nLorem ipsum dolor sit amet, [wave/] consectetur adipiscing elit.\n```\n\n----------------------------------------\n\nTITLE: Creating Anchored Entity Using World in Dart\nDESCRIPTION: This snippet demonstrates creating an anchored entity using the World in the Flame engine. It adds an AnchorComponent with a specified anchor.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/oxygen/components.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nworld.createEntity()\n  ..add<AnchorComponent, Anchor>(Anchor.center);\n```\n\n----------------------------------------\n\nTITLE: Adding RectangleHitbox to Enemy Class\nDESCRIPTION: Adds a rectangular hitbox to the Enemy class for collision detection.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/space_shooter/step_6.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nadd(RectangleHitbox());\n```\n\n----------------------------------------\n\nTITLE: Modifying Variable Values in YarnSpinner\nDESCRIPTION: Example of modifying a variable's value in YarnSpinner using the <<set>> command. This demonstrates how to increase the value of a numeric variable.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/expressions/variables.md#2025-04-20_snippet_3\n\nLANGUAGE: yarn\nCODE:\n```\n<<set $money += 10>>  // increases the value of $money by 10\n```\n\n----------------------------------------\n\nTITLE: Adding Layer Processors in Flame Engine\nDESCRIPTION: Shows how to add processors to layers for applying effects. Example uses ShadowProcessor in a PreRenderedLayer implementation.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/layers.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// Works the same for both DynamicLayer and PreRenderedLayer\nclass BackgroundLayer extends PreRenderedLayer {\n  final Sprite sprite;\n\n  BackgroundLayer(this.sprite) {\n    preProcessors.add(ShadowProcessor());\n  }\n\n  @override\n  void drawLayer() { /* omitted */ }\n\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Enabling Impeller for macOS\nDESCRIPTION: Configuration to enable Impeller rendering on macOS by modifying the Info.plist file\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_3d/README.md#2025-04-20_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dict>\n    ...\n <key>FLTEnableImpeller</key>\n <true/>\n</dict>\n```\n\n----------------------------------------\n\nTITLE: Package Version Updates\nDESCRIPTION: Version updates and changes for multiple Flame Engine packages including fixes, refactors and breaking changes\nSOURCE: https://github.com/flame-engine/flame/blob/main/CHANGELOG.md#2025-04-20_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n#### `flame_svg` - `v1.7.3`\n\n - **REFACTOR**: Add new lint rules (#2477).\n - **FIX**: Remove memory leak when creating the image from PictureRecorder (#2493).\n\n#### `flame_test` - `v1.10.1`\n\n - **REFACTOR**: Add new lint rules (#2477).\n\n#### `flame_tiled` - `v1.10.1`\n\n - **REFACTOR**: Add new lint rules (#2477).\n\n#### `jenny` - `v1.0.2`\n\n - **REFACTOR**: Add new lint rules (#2477).\n```\n\n----------------------------------------\n\nTITLE: Adding ChildCounterComponent in Dart for Flame Engine\nDESCRIPTION: Demonstrates how to add a ChildCounterComponent to count the number of SpriteAnimationComponent children in the game world. This component updates the count every second.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/other/debug.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nadd(\n  ChildCounterComponent<SpriteAnimationComponent>(\n    target: world,\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Overriding renderTree with HasVisibility in Dart\nDESCRIPTION: Demonstrates how to properly override the renderTree method when using the HasVisibility mixin, ensuring the visibility check is maintained.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nclass MyComponent extends PositionComponent with HasVisibility {\n\n  @override\n  void renderTree(Canvas canvas) {\n    // Check for visibility\n    if (isVisible) {\n      // Custom code here\n\n      // Continue rendering the tree\n      super.renderTree(canvas);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Character ID Formatting in Yarn\nDESCRIPTION: Examples of valid and invalid character ID formats in Yarn dialogue lines.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/lines.md#2025-04-20_snippet_1\n\nLANGUAGE: yarn\nCODE:\n```\ntitle: Hello\n---\nHarry Potter: Hello, Hermione!\nHarry_Potter: Hello, Hermione!\nHarryPotter: Hello, Hermione!\nHarry: Hello, Hermione!\n===\n```\n\n----------------------------------------\n\nTITLE: Adding Super Constructor Fields in Riverpod\nDESCRIPTION: This code snippet addresses a bug fix where super constructor fields were added to the RiverpodAwareGameWidget, enhancing component functionality and stability.\nSOURCE: https://github.com/flame-engine/flame/blob/main/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- **FIX**: Add super constructor fields to RiverpodAwareGameWidget ([#2932](https://github.com/flame-engine/flame/issues/2932)). ([c2e6ea71](https://github.com/flame-engine/flame/commit/c2e6ea71e5c3c5f0d7ae6bc01a6c2f1f4d4d563b))\n```\n\n----------------------------------------\n\nTITLE: Using Markup for Dynamic Item Insertion in Yarn\nDESCRIPTION: Shows how to use markup to indicate where dynamic item information should be inserted in dialogue.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/markup.md#2025-04-20_snippet_9\n\nLANGUAGE: yarn\nCODE:\n```\ntitle: BlacksmithQuest\n---\n<<local $reward = if($chapter==1, \"A0325\", \"A1018\")>>\nSmith: Find me my lost ring, and I'll give you this [item id=$reward/].\n===\n```\n\n----------------------------------------\n\nTITLE: Changing Theme of FlameSplashScreen\nDESCRIPTION: This snippet illustrates how to change the theme of the splash screen from the default dark to a white background by setting the theme parameter to FlameSplashTheme.white.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_splash_screen/README.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nFlameSplashScreen(\n  theme: FlameSplashTheme.white,\n  onFinish: (BuildContext context) => Navigator.pushNamed(context, '/your-game-initial-screen'),\n)\n```\n\n----------------------------------------\n\nTITLE: Importing TexturePacker Plugin in Dart\nDESCRIPTION: Import statement for the flame_texturepacker plugin to enable sprite sheet loading functionality\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_texturepacker/README.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame_texturepacker/flame_texturepacker.dart';\n```\n\n----------------------------------------\n\nTITLE: Accessing LineMetrics in InlineTextElement\nDESCRIPTION: This snippet demonstrates how to access the LineMetrics object associated with an InlineTextElement. LineMetrics provides sizing information for the text element.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/text_rendering.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nLineMetrics get metrics;\n```\n\n----------------------------------------\n\nTITLE: Updating Game Class with Pan Gestures for Shooting in Flame Engine\nDESCRIPTION: Modifies the SpaceShooterGame class to include onPanStart() and onPanEnd() methods. These methods call the player's startShooting() and stopShooting() functions respectively.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/space_shooter/step_4.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass SpaceShooterGame extends FlameGame with PanDetector {\n  late Player player;\n\n  // Rest of implementation omitted\n\n  @override\n  void onPanUpdate(DragUpdateInfo info) {\n    player.move(info.delta.global);\n  }\n\n  @override\n  void onPanStart(DragStartInfo info) {\n    player.startShooting();\n  }\n\n  @override\n  void onPanEnd(DragEndInfo info) {\n    player.stopShooting();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using <<stop>> Command in Yarn Scripting for Flame Engine\nDESCRIPTION: The <<stop>> command immediately halts the evaluation of the current node, similar to a 'return' statement in other programming languages. It can either stop the entire dialogue or just exit the current node if it's being visited from a parent node.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/commands/stop.md#2025-04-20_snippet_0\n\nLANGUAGE: yarn\nCODE:\n```\n<<stop>>\n```\n\n----------------------------------------\n\nTITLE: Navigation TOC Tree Structure in Markdown\nDESCRIPTION: A hidden table of contents tree structure defining the navigation layout for rendering documentation pages in the Flame engine.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/rendering.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{toctree}\n:hidden:\n\nColors and Palette              <palette.md>\nDecorators                      <decorators.md>\nImages, Sprites and Animations  <images.md>\nLayers and Snapshots            <layers.md>\nParticles                       <particles.md>\nText Rendering                  <text_rendering.md>\n```\n\n----------------------------------------\n\nTITLE: Installing Behavior Tree Package with Dart\nDESCRIPTION: Command to add the behavior tree package to a Dart project using the Dart package manager.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_behavior_tree/behavior_tree/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart pub add behavior_tree\n```\n\n----------------------------------------\n\nTITLE: Flame Component Execution Frequency Diagram\nDESCRIPTION: A top-down graph showing three types of component execution frequencies: operations that run each tick, operations that run on add and resize events, and one-time operations.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/diagrams/component_life_cycle.md#2025-04-20_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{init: { 'theme': 'dark' } }%%\n\n  graph TD\n\n   %% Node Color %%\n   classDef default fill:#282828,stroke:#F6BE00,stroke-width:2px;\n   classDef lightYellow fill:#523F00,stroke-width:2px;\n   classDef yellow fill:#F6BE00,color:#000000;\n\n   %% Nodes  %%\n   x(Runs Each Tick)\n   y(Runs On Add & Resize):::lightYellow\n   z(Runs Once):::yellow\n```\n\n----------------------------------------\n\nTITLE: Creating AudioPool with FlameAudio Helper\nDESCRIPTION: Shows the reference to the helper method for creating AudioPool instances using the global FlameAudio.audioCache. This allows for efficient pre-loading and reuse of audio players for repetitive sound effects.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_audio/audio_pool.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nFlameAudio.createPool\n```\n\n----------------------------------------\n\nTITLE: Update Example to Not Create Rect Objects - Dart\nDESCRIPTION: Documentation update improving the example to avoid creating Rect objects, which simplifies the code and reduces overhead.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame/CHANGELOG.md#2025-04-20_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\n// Update example to not create Rect objects\n// Commit: a306338b\n```\n\n----------------------------------------\n\nTITLE: Adding Tooltip Information with Markup in Yarn\nDESCRIPTION: Demonstrates using markup to add tooltip information to a specific word in dialogue.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/markup.md#2025-04-20_snippet_8\n\nLANGUAGE: yarn\nCODE:\n```\ntitle: MonkDialogue\n---\nMonk: Visit [tooltip place=\"TS\" x=23 y=-74]Llewellyn[/] in Thunderstorm, \\\n      he will be able to help you.\n===\n```\n\n----------------------------------------\n\nTITLE: Implementing Flutter App Examples\nDESCRIPTION: Directive for embedding interactive Flutter widgets in documentation with configurable display options\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/development/documentation.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```{flutter-app}\n:sources: ../flame/examples\n:page: tap_events\n:show: widget code popup\n:width: 180\n:height: 160\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Function Count in Dart\nDESCRIPTION: Property to get the number of user-defined functions registered in the FunctionStorage.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/runtime/function_storage.md#2025-04-20_snippet_8\n\nLANGUAGE: Dart\nCODE:\n```\nlength → int\n```\n\n----------------------------------------\n\nTITLE: Configuring Flame Lint in Analysis Options\nDESCRIPTION: Shows how to include the flame_lint package in your project's analysis_options.yaml file to enable the custom lint rules.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_lint/README.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ninclude: package:flame_lint/analysis_options.yaml\n```\n\n----------------------------------------\n\nTITLE: Syncing Flame Game Project to GitHub\nDESCRIPTION: Initializes a Git repository, commits the initial project files, and pushes them to a newly created GitHub repository.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/bare_flame_game.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit init\ngit add --all\ngit commit -m 'Initial commit'\ngit remote add origin https://github.com/your-github-username/syzygy.git\ngit branch -M main\ngit push -u origin main\n```\n\n----------------------------------------\n\nTITLE: Card toString() Implementation in Dart\nDESCRIPTION: This snippet overrides the `toString()` method of the `Card` class to provide a simple string representation of the card's rank and suit (e.g., \"Q♠\" or \"10♦\"). This is useful for debugging and logging the card's information.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step3.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n\"  @override\\n  String toString() => rank.label + suit.label; // e.g. \\\"Q♠\\\" or \\\"10♦\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Using Give Command in Yarn\nDESCRIPTION: Demonstrates various ways to use the 'give' command in a Yarn script, including with variables and different item types.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/runtime/command_storage.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n<<give {$quest_reward} TraderJoe>>\n<<give 100 gold TraderJoe>>\n<<give 5 potion_of_healing TraderJoe>>\n<<give 1 \"Sword of Darkness\" TraderJoe>>\n```\n\n----------------------------------------\n\nTITLE: Creating a BaseSystem in Dart for Oxygen ECS\nDESCRIPTION: Shows how to implement a BaseSystem, which provides similar functionality to PositionComponent from FCS. It automatically filters entities with PositionComponent and SizeComponent, and prepares the canvas for rendering.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/oxygen/oxygen.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass SimpleBaseSystem extends BaseSystem {\n  @override\n  List<Filter<Component>> get filters => [];\n\n  @override\n  void renderEntity(Canvas canvas, Entity entity) {\n    // The canvas is translated, rotated and fully prepared for rendering.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing FlameSplashScreen\nDESCRIPTION: This snippet shows how to import the FlameSplashScreen package in a Flutter application. Ensure the package is added to your pubspec.yaml as a dependency. This import is necessary to use the FlameSplashScreen widget in your project.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_splash_screen/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame_splash_screen/flame_splash_screen.dart';\n```\n\n----------------------------------------\n\nTITLE: Importing Flutter Services for Keyboard Input\nDESCRIPTION: Imports the necessary Flutter services package to access keyboard key definitions.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_5.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/services.dart';\n```\n\n----------------------------------------\n\nTITLE: Custom Attributes Support - Version 0.2.4\nDESCRIPTION: Added support for custom attributes syntax to enable multiple styles in text rendering pipeline. Also includes documentation fixes for workflow status badges.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_markdown/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.4\n\n - **FEAT**: Support custom attributes syntax to allow for multiple styles in the text rendering pipeline ([#3519](https://github.com/flame-engine/flame/issues/3519)). ([fbc58053](https://github.com/flame-engine/flame/commit/fbc58053dd12e6dc62b09cb14e4b438ef7b7f1b2))\n - **DOCS**: Fix workflow status badge paths ([#3517](https://github.com/flame-engine/flame/issues/3517)). ([149f16fe](https://github.com/flame-engine/flame/commit/149f16fe29f1fb14b3612964b2226c9c5c7daf95))\n```\n\n----------------------------------------\n\nTITLE: Creating a Relative CircleComponent in Dart\nDESCRIPTION: Shows how to create a CircleComponent with a radius relative to the shortest edge of its bounding box using the relative constructor.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_40\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  CircleComponent.relative(0.8, size: Vector2.all(100));\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping the Melos Environment\nDESCRIPTION: This command initializes the Melos workspace by installing dependencies defined in the `flame` repository. It must be run before executing the sample app to ensure that all required packages are available.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame/example/README.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmelos bootstrap\n```\n\n----------------------------------------\n\nTITLE: Configuring Flame Audio Documentation Structure\nDESCRIPTION: Sphinx toctree directive defining the structure and navigation for Flame Engine's audio documentation. Links to pages covering general audio usage, background music management, and AudioPool implementation.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_audio/flame_audio.md#2025-04-20_snippet_0\n\nLANGUAGE: toctree\nCODE:\n```\nGeneral audio    <audio.md>\nBackground music <bgm.md>\nAudioPool        <audio_pool.md>\n```\n\n----------------------------------------\n\nTITLE: LottieRenderer Duration Fix\nDESCRIPTION: Fixed an issue where Duration in LottieRenderer was rounding down milliseconds\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_lottie/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- **FIX**: Duration in `LottieRenderer` rounds down milliseconds ([#2808](https://github.com/flame-engine/flame/issues/2808)). ([cccae2e1](https://github.com/flame-engine/flame/commit/cccae2e1476de456c15ee3779b746f5fe6dadee2))\n```\n\n----------------------------------------\n\nTITLE: Registering Four-Argument Function in Dart\nDESCRIPTION: Method to register a function with four arguments in the FunctionStorage.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/runtime/function_storage.md#2025-04-20_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\naddFunction4(String name, T0 Function(T1, T2, T3, T4) fn4)\n```\n\n----------------------------------------\n\nTITLE: Flame Engine Class Inheritance Diagram\nDESCRIPTION: Illustrates the inheritance relationships between core Flame engine classes including OxygenGame, FlameGame, Component and GameWidget using a bottom-to-top directed graph.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/diagrams/low_level_game_api.md#2025-04-20_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{init: { 'theme': 'dark' } }%%\n  \n  graph BT  \n\n    %% Node Color %%\n    classDef default fill:#282828,stroke:#F6BE00,stroke-width:2px;\n    classDef yellow fill:#F6BE00,color:#000;\n \n    %% Nodes  %%\n    \n    A(OxygenGame)\n    B(Game):::yellow\n    C(FlameGame)\n    D(Component)\n    E(Other Components)\n    F(GameWidget)\n\n    %% Flow  %%\n\n    A-- Extends -->B\n    F-- Wants -->B\n\n    C-- Extends -->D\n    E-- Extends -->D\n\n    C-- With -->B\n```\n\n----------------------------------------\n\nTITLE: Adding Margin and Spacing to SpriteSheet\nDESCRIPTION: This feature allows developers to set margin and spacing properties for SpriteSheet, enhancing customization options for sprite management.\nSOURCE: https://github.com/flame-engine/flame/blob/main/CHANGELOG.md#2025-04-20_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n- **FEAT**: Add `margin` and `spacing` properties to `SpriteSheet` ([#2925](https://github.com/flame-engine/flame/issues/2925)). ([67f7c126](https://github.com/flame-engine/flame/commit/67f7c126b4c8052df99ffa8c657a90cc7fb6f867))\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Directory in Flutter's pubspec.yaml\nDESCRIPTION: This YAML snippet shows how to configure the assets directory in the pubspec.yaml file for a Flutter project. It specifies the path to the images folder.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_1.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nflutter:\n  assets:\n    - assets/images/\n```\n\n----------------------------------------\n\nTITLE: Accessing Character Storage in Dart\nDESCRIPTION: Demonstrates how to access the character storage from a YarnProject instance. The characters property of the YarnProject provides access to the CharacterStorage.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/runtime/character_storage.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal characters = yarnProject.characters;\n```\n\n----------------------------------------\n\nTITLE: Implementing SizeEffect.by in Dart for Flame Engine\nDESCRIPTION: Creates a size effect that changes component dimensions relative to current size using Vector2 and EffectController.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/effects.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nfinal effect = SizeEffect.by(\n   Vector2(-15, 30),\n   EffectController(duration: 1),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining DialogueOption Class Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the DialogueOption class, including text, tags, attributes, isAvailable, and isDisabled. Each property is described with its type and purpose.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/runtime/dialogue_option.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**text** `String`\n: The computed text of the option, after evaluating the inline expressions, stripping the markup,\n  and processing the escape sequences.\n\n**tags** `List<String>`\n: The list of hashtags for this option. If there are no hashtags, the list will be empty. Each entry\n  in the list will be a simple string starting with `#`.\n\n**attributes** `List<MarkupAttribute>`\n: The list of markup spans associated with the option. Each [MarkupAttribute] corresponds to a\n  single span within the **text**, delineated with markup tags.\n\n**isAvailable** `bool`\n: The result of evaluating the *conditional* of this option. If the option has no conditional, this\n  will return `true`.\n\n**isDisabled** `bool`\n: Same as `!isAvailable`.\n```\n\n----------------------------------------\n\nTITLE: HTML Encoding and Strike-through Support - Version 0.2.3\nDESCRIPTION: Fixed HTML encoding behavior in markdown parsing and added support for strike-through text formatting.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_markdown/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.3\n\n - **FIX**: Do not encode HTML by default when parsing markdown [flame_markdown] ([#3425](https://github.com/flame-engine/flame/issues/3425)). ([3067da94](https://github.com/flame-engine/flame/commit/3067da94fbc6df2da5197771cb9617588006a9b9))\n - **FEAT**: Add support for strike-through text for flame_markdown ([#3426](https://github.com/flame-engine/flame/issues/3426)). ([1f9b0ea9](https://github.com/flame-engine/flame/commit/1f9b0ea9f35a7180725ec7f8f79a561c5f544bb7))\n```\n\n----------------------------------------\n\nTITLE: Arithmetic Operators Table in Markdown\nDESCRIPTION: A markdown table listing arithmetic operators in YarnSpinner, including addition, subtraction, multiplication, division, modulo, and string concatenation.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/expressions/operators.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{list-table}\n:align: left\n:class: first-col-align-center\n:header-rows: 1\n:widths: 1 2 9\n\n* - operator\n  - name\n  - notes\n* - `+`\n  - addition\n  -\n* - `-`\n  - subtraction\n  - Also, a unary minus\n* - `*`\n  - multiplication\n  -\n* - `/`\n  - division\n  - Division by `0` is not allowed, and will throw a runtime error if it occurs.\n* - `%`\n  - modulo\n  - This operator can apply to both integer and decimal numbers, and it returns\n    the remainder of integer division of two numbers. The right-hand side of\n    `%` cannot be zero or a negative number, otherwise a runtime error will be\n    thrown. The result of `x % y` is always a number in the range `[0; y)`,\n    regardless of the sign of `x`.\n* - `+`\n  - concatenation\n  - When applied to strings, the `+` operator simply glues them together. For\n    example, \"Hello\" + \"World\" produces string \"HelloWorld\".\n```\n```\n\n----------------------------------------\n\nTITLE: Component Children Factory Implementation in Dart\nDESCRIPTION: Implementation change allowing Component.childrenFactory to be used for setting up a global ComponentSet factory\nSOURCE: https://github.com/flame-engine/flame/blob/main/CHANGELOG.md#2025-04-20_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\nComponent.childrenFactory\n```\n\n----------------------------------------\n\nTITLE: Improving MemoryCache Logic\nDESCRIPTION: This snippet resolves a logic error in the MemoryCache's setValue() function, ensuring correct data handling and cache stability.\nSOURCE: https://github.com/flame-engine/flame/blob/main/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- **FIX**: Logic error in MemoryCache.setValue() ([#2931](https://github.com/flame-engine/flame/issues/2931)). ([8cee80c3](https://github.com/flame-engine/flame/commit/8cee80c35ca676ad25a25c771f0aade88b58150b))\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in Markdown\nDESCRIPTION: This code snippet defines a hidden table of contents using the toctree directive in Markdown. It includes links to documentation for Variables, Operators, and Functions.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/expressions/expressions.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:hidden:\n\nVariables   <variables.md>\nOperators   <operators.md>\nFunctions   <functions/functions.md>\n```\n```\n\n----------------------------------------\n\nTITLE: Package Version Updates in Release Notes\nDESCRIPTION: Version updates and changes for various Flame engine packages including refactoring efforts, new features, and bug fixes.\nSOURCE: https://github.com/flame-engine/flame/blob/main/CHANGELOG.md#2025-04-20_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n#### `flame_bloc` - `v1.5.0`\n\n - **REFACTOR**: Update and guarantee consistency on mocktail dev dependency version across repo (#1701)\n - **REFACTOR**: Move to package imports (#1625)\n - **FEAT**: Add more lint rules (#1703)\n - **FEAT**: Bump to Flutter 2.10.0 (#1617)\n - **FEAT**: new flame bloc API (#1538)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n#### `flame_fire_atlas` - `v1.1.0`\n\n - **REFACTOR**: Update and guarantee consistency on mocktail dev dependency version across repo (#1701)\n - **FEAT**: Add more lint rules (#1703)\n - **FEAT**: Optional key for Images.load (#1624)\n - **FEAT**: Bump to Flutter 2.10.0 (#1617)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n#### `flame_flare` - `v1.2.0`\n\n - **REFACTOR**: Move to package imports (#1625)\n - **FEAT**: Bump to Flutter 2.10.0 (#1617)\n```\n\n----------------------------------------\n\nTITLE: Defining Class Node Styles in Mermaid\nDESCRIPTION: Defines styling for two types of class nodes using Mermaid graph syntax - abstract classes in yellow and normal classes with yellow borders on dark background.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/diagrams/low_level_game_api.md#2025-04-20_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{init: { 'theme': 'dark' } }%%\n  graph TD  \n  \n    %% Node Color %%\n    classDef default fill:#282828,stroke:#F6BE00,stroke-width:2px;\n    classDef yellow fill:#F6BE00,color:#000;\n \n    %% Nodes  %%\n    \n    z(Abstract Class):::yellow\n    x(Normal Class)\n```\n\n----------------------------------------\n\nTITLE: World Component Addition in Flame\nDESCRIPTION: Example showing how to add components to the world instead of directly to the game using the new camera system.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nworld.add(yourComponent);\n```\n\n----------------------------------------\n\nTITLE: Importing TextStyle from Flutter in Dart\nDESCRIPTION: This code shows how to properly import TextStyle from Flutter's painting package while hiding the conflicting TextStyle from dart:ui. This is important when working with TextPaint in Flame.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/rendering/text_rendering.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/painting.dart';\nimport 'dart:ui' hide TextStyle;\n```\n\n----------------------------------------\n\nTITLE: Registering Three-Argument Function in Dart\nDESCRIPTION: Method to register a function with three arguments in the FunctionStorage.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/runtime/function_storage.md#2025-04-20_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\naddFunction3(String name, T0 Function(T1, T2, T3) fn3)\n```\n\n----------------------------------------\n\nTITLE: Defining Object Speed Variable for Consistent Movement\nDESCRIPTION: This code snippet adds a global variable to the game class to ensure all objects move at the same speed. It's essential for maintaining consistency in the scrolling world.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_3.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n  late EmberPlayer _ember;\n  double objectSpeed = 0.0;\n```\n\n----------------------------------------\n\nTITLE: Defining DialogueChoice Class Properties in Markdown\nDESCRIPTION: Describes the 'options' property of the DialogueChoice class, which is a List of DialogueOption objects representing the available choices.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/runtime/dialogue_choice.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**options** `List<DialogueOption>`\n: The list of [DialogueOption]s comprising this choice set.\n```\n\n----------------------------------------\n\nTITLE: Building Shaders with Dart\nDESCRIPTION: This Dart command runs the build script for shaders after any changes have been made to the shader files in the 'shaders' directory, facilitating shader compilation.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_3d/CONTRIBUTING.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\ndart bin/build_shaders.dart\n```\n\n----------------------------------------\n\nTITLE: Disabling Tile Flipping in Flame\nDESCRIPTION: Example of loading TiledComponent with tile flipping disabled for better performance with large textures.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_tiled/flame_tiled.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal component = await TiledComponent.load(\n  'my_map.tmx',\n  Vector2.all(32),\n  ignoreFlip: true,\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in Markdown\nDESCRIPTION: This code snippet defines a hidden table of contents for the tutorial using Markdown syntax. It outlines the five main steps of the tutorial, including preparation, scaffolding, card implementation, gameplay, and additional features.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/klondike.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:hidden:\n\n1. Preparation          <step1.md>\n2. Scaffolding          <step2.md>\n3. Cards                <step3.md>\n4. Gameplay             <step4.md>\n5. Additional features  <step5.md>\n```\n```\n\n----------------------------------------\n\nTITLE: Including Contributing Guidelines File with rST Directive\nDESCRIPTION: A directive to include the contents of a CONTRIBUTING.md file located two directories up from the current location, using reStructuredText include syntax.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/development/contributing.md#2025-04-20_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n{include} ../../CONTRIBUTING.md\n```\n\n----------------------------------------\n\nTITLE: Setting Bounds for BoundedPositionBehavior\nDESCRIPTION: This snippet allows setting bounds for BoundedPositionBehavior when its target is null, improving flexibility in component management.\nSOURCE: https://github.com/flame-engine/flame/blob/main/CHANGELOG.md#2025-04-20_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n- **FIX**: Allow setting `bounds` while `BoundedPositionBehavior`'s target is null ([#2926](https://github.com/flame-engine/flame/issues/2926)). ([bab9be6e](https://github.com/flame-engine/flame/commit/bab9be6e7051b7be6c84fc9760c7347692dbf140))\n```\n\n----------------------------------------\n\nTITLE: YarnSpinner Table of Contents Configuration\nDESCRIPTION: Toctree configuration for YarnSpinner documentation that defines the navigation structure and links to individual command documentation pages.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/commands/commands.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:hidden:\n\n<<character>>          <character.md>\n<<declare>>            <declare.md>\n<<if>>                 <if.md>\n<<jump>>               <jump.md>\n<<local>>              <local.md>\n<<set>>                <set.md>\n<<stop>>               <stop.md>\n<<visit>>              <visit.md>\n<<wait>>               <wait.md>\nUser-defined commands  <user_defined_commands.md>\n```\n```\n\n----------------------------------------\n\nTITLE: Support inline code blocks in markdown - Dart\nDESCRIPTION: This snippet indicates the addition of support for inline code blocks on markdown rich text, enhancing the text-rendering capabilities in markdown.\nSOURCE: https://github.com/flame-engine/flame/blob/main/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n- **FEAT**: Support inline code blocks on markdown rich text ([#3186](https://github.com/flame-engine/flame/issues/3186)). ([67e069c0](https://github.com/flame-engine/flame/commit/67e069c00dcb32c258231a326b0918739c6f80e6))\n```\n\n----------------------------------------\n\nTITLE: Installing flame_kenney_xml Package with Flutter\nDESCRIPTION: Command to add the flame_kenney_xml package as a dependency to a Flutter project using the Flutter CLI.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_kenney_xml/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub add flame_kenney_xml\n```\n\n----------------------------------------\n\nTITLE: Converting to String in Yarn\nDESCRIPTION: The string(x) function converts its argument into a string value. It handles boolean, numeric, and string inputs, with specific formatting rules for numeric values based on their range and type.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/expressions/functions/type.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstring(x)\n```\n\n----------------------------------------\n\nTITLE: Package Updates\nDESCRIPTION: Documentation of updates and fixes for flame core and dependent packages\nSOURCE: https://github.com/flame-engine/flame/blob/main/CHANGELOG.md#2025-04-20_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n#### `flame` - `v1.7.2`\n\n - **FIX**: A mistake in auto-resizing disabling logic (#2471).\n - **FIX**: It should be possible to re-add `ColorEffect` (#2469).\n - **FEAT**: Add `isDragged` in `DragCallbacks` mixin (#2472).\n```\n\n----------------------------------------\n\nTITLE: Checking if FunctionStorage is Empty in Dart\nDESCRIPTION: Property to check if no user-defined functions are registered in the FunctionStorage.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/runtime/function_storage.md#2025-04-20_snippet_9\n\nLANGUAGE: Dart\nCODE:\n```\nisEmpty → bool\n```\n\n----------------------------------------\n\nTITLE: Adding TimeTrackComponent in Dart for Flame Engine Debugging\nDESCRIPTION: Shows how to add a TimeTrackComponent to the game for performance debugging. This component is used to track time spent in specific code sections.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/other/debug.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nadd(TimeTrackComponent());\n```\n\n----------------------------------------\n\nTITLE: Generating Hidden Table of Contents in Markdown\nDESCRIPTION: This code snippet creates a hidden table of contents (toctree) in Markdown format, likely for use in a documentation system. It lists additional pages related to debugging, utilities, widgets, and performance in the Flame Engine documentation.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/other/other.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:hidden:\n\nDebugging    <debug.md>\nUtils        <util.md>\nWidgets      <widgets.md>\nPerformance  <performance.md>\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Hidden TOC in Markdown\nDESCRIPTION: This code snippet defines a hidden table of contents (TOC) in Markdown format. It lists the various bridge packages for Flame and their corresponding documentation files.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/bridge_packages.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:hidden:\n\nflame_audio                 <flame_audio/flame_audio.md>\nflame_bloc                  <flame_bloc/flame_bloc.md>\nflame_fire_atlas            <flame_fire_atlas/flame_fire_atlas.md>\nflame_forge2d               <flame_forge2d/flame_forge2d.md>\nflame_isolate               <flame_isolate/flame_isolate.md>\nflame_lottie                <flame_lottie/flame_lottie.md>\nflame_network_assets        <flame_network_assets/flame_network_assets.md>\nflame_oxygen                <flame_oxygen/flame_oxygen.md>\nflame_rive                  <flame_rive/flame_rive.md>\nflame_riverpod              <flame_riverpod/flame_riverpod.md>\nflame_splash_screen         <flame_splash_screen/flame_splash_screen.md>\nflame_spine                 <flame_spine/flame_spine.md>\nflame_svg                   <flame_svg/flame_svg.md>\nflame_tiled                 <flame_tiled/flame_tiled.md>\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter GPU as an Override Dependency\nDESCRIPTION: This YAML snippet is used to add the 'flutter_gpu' as an override dependency in the 'pubspec_overrides.yaml' file for the Flame 3D project, ensuring the correct GPU library path is set.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_3d/CONTRIBUTING.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndependency_overrides: \\n  ... # Melos related overrides \\n  flutter_gpu: \\n    path: <path_to_the_cloned_flutter_engine_directory>/lib/gpu\n```\n\n----------------------------------------\n\nTITLE: Updating flame_tiled Version in Markdown\nDESCRIPTION: Updates the version number for the flame_tiled package to v1.16.0 in a markdown changelog entry.\nSOURCE: https://github.com/flame-engine/flame/blob/main/CHANGELOG.md#2025-04-20_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n#### `flame_tiled` - `v1.16.0`\n```\n\n----------------------------------------\n\nTITLE: SpriteAnimation Step Time Validation\nDESCRIPTION: Fix ensuring step time in SpriteAnimation must be positive\nSOURCE: https://github.com/flame-engine/flame/blob/main/CHANGELOG.md#2025-04-20_snippet_23\n\nLANGUAGE: dart\nCODE:\n```\nSpriteAnimation.stepTime > 0\n```\n\n----------------------------------------\n\nTITLE: Initializing Flame Markdown Project\nDESCRIPTION: Simple markdown header that defines the project name and purpose.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_markdown/example/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# flame markdown example\n\nSimple project to showcase the usage of flame_markdown\n```\n\n----------------------------------------\n\nTITLE: Example Deprecation Notice\nDESCRIPTION: Example showing how to properly mark deprecated features with version information\nSOURCE: https://github.com/flame-engine/flame/blob/main/CONTRIBUTING.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n@Deprecated('Will be removed in v1.5.0, use nonDeprecatedFeature() instead')\nvoid deprecatedFeature() {}\n```\n\n----------------------------------------\n\nTITLE: Checking Flutter Installation with Flutter Doctor\nDESCRIPTION: Verifies the Flutter SDK installation and shows the status of various development tools and connected devices.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/bare_flame_game.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ flutter doctor\nDoctor summary (to see all details, run flutter doctor -v):\n[✓] Flutter (Channel stable, 3.13.7, on macOS 13.6 22G120 darwin-arm64, locale en)\n[✓] Android toolchain - develop for Android devices (Android SDK version 33.0.0)\n[✓] Xcode - develop for iOS and macOS (Xcode 15.0)\n[✓] Chrome - develop for the web\n[✓] Android Studio (version 2021.2)\n[✓] IntelliJ IDEA Community Edition (version 2022.2.2)\n[✓] VS Code (version 1.83.0)\n[✓] Connected device (2 available)\n[✓] Network resources\n\n• No issues found!\n```\n\n----------------------------------------\n\nTITLE: Defining Rive Documentation Structure with Toctree\nDESCRIPTION: A toctree directive that defines the documentation structure, linking to a rive.md file labeled as Overview.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_rive/flame_rive.md#2025-04-20_snippet_0\n\nLANGUAGE: toctree\nCODE:\n```\nOverview    <rive.md>\n```\n\n----------------------------------------\n\nTITLE: Adding Children to SpriteAnimationComponent\nDESCRIPTION: This feature enhancement allows developers to specify children components for SpriteAnimationComponent through fromFrameData, improving component hierarchy management.\nSOURCE: https://github.com/flame-engine/flame/blob/main/CHANGELOG.md#2025-04-20_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n- **FEAT**: Add `children` to `SpriteAnimationComponent.fromFrameData` ([#2914](https://github.com/flame-engine/flame/issues/2914)). ([caf2b909](https://github.com/flame-engine/flame/commit/caf2b90930ca500c85b9f9f63e7d3d7a5d82c18e))\n```\n\n----------------------------------------\n\nTITLE: Running the Klondike Game Flutter App - Step 5\nDESCRIPTION: Configuration for running the Klondike game Flutter app at step 5. The code defines the source location, page reference, and display options for the tutorial application.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step5.md#2025-04-20_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n{flutter-app}\n:sources: ../tutorials/klondike/app\n:page: step5\n:show: popup code\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents for Input Handling in Markdown\nDESCRIPTION: This code snippet creates a hidden table of contents using the toctree directive in Markdown. It lists various input handling topics with their corresponding file references.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/inputs/inputs.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:hidden:\n\nDrag Events     <drag_events.md>\nGesture Input   <gesture_input.md>\nKeyboard Input  <keyboard_input.md>\nOther Inputs    <other_inputs.md>\nTap Events      <tap_events.md>\nPointer Events  <pointer_events.md>\nHardwareKeyboardDetector  <hardware_keyboard_detector.md>\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for SVG Documentation in Markdown\nDESCRIPTION: This code snippet creates a table of contents using the toctree directive in Markdown. It includes a link to an overview page for SVG documentation.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_svg/flame_svg.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\nOverview    <svg.md>\n```\n```\n\n----------------------------------------\n\nTITLE: Running Flutter with Impeller\nDESCRIPTION: Command-line flag to enable Impeller rendering when running a Flutter application\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_3d/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflutter run --enable-impeller\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Project Dependencies\nDESCRIPTION: Command to bootstrap all project dependencies using Melos\nSOURCE: https://github.com/flame-engine/flame/blob/main/CONTRIBUTING.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmelos bootstrap\n```\n\n----------------------------------------\n\nTITLE: Building Custom Shaders\nDESCRIPTION: Command to bundle custom shaders using the flame_3d package\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_3d/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndart pub run flame_3d:build_shaders\n```\n\n----------------------------------------\n\nTITLE: Removing References to Tappable and Draggable\nDESCRIPTION: This documentation update removes outdated references to Tappable and Draggable, ensuring clarity and relevance in the API documentation.\nSOURCE: https://github.com/flame-engine/flame/blob/main/CHANGELOG.md#2025-04-20_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n- **DOCS**: Remove references to Tappable and Draggable ([#2912](https://github.com/flame-engine/flame/issues/2912)). ([d12e4544](https://github.com/flame-engine/flame/commit/d12e45444e49bbe0b24a7acbd24f0cda20a13755))\n```\n\n----------------------------------------\n\nTITLE: Fixing capitalization in pubspec - Dart\nDESCRIPTION: This snippet highlights the correction made in the capitalization of the Dart programming language in the pubspec description for consistent documentation standards.\nSOURCE: https://github.com/flame-engine/flame/blob/main/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n- **DOCS**: Fix capitalization of the Dart programming language on pubspec description field ([#3222](https://github.com/flame-engine/flame/issues/3222)). ([9404241e](https://github.com/flame-engine/flame/commit/9404241e8a14d8d510f693c8557ca62ed76bd390))\n```\n\n----------------------------------------\n\nTITLE: Version History Markdown\nDESCRIPTION: Structured changelog entries showing version updates with commit references and issue tracking links\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_lint/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.3.0\n\n - **FEAT**: Bump to new lint package ([#3545](https://github.com/flame-engine/flame/issues/3545)). ([bf6ee518](https://github.com/flame-engine/flame/commit/bf6ee51897591b7ad6e5f9da2193b1eeeaf026f4))\n\n## 1.2.3\n\n - **DOCS**: Fix workflow status badge paths ([#3517](https://github.com/flame-engine/flame/issues/3517)). ([149f16fe](https://github.com/flame-engine/flame/commit/149f16fe29f1fb14b3612964b2226c9c5c7daf95))\n```\n\n----------------------------------------\n\nTITLE: Running CSpell Checker\nDESCRIPTION: Command to run CSpell checker on markdown and dart files\nSOURCE: https://github.com/flame-engine/flame/blob/main/CONTRIBUTING.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncspell --no-progress -c .github/cspell.json \"**/*.{md,dart}\"\n```\n\n----------------------------------------\n\nTITLE: Enforcing Parent Type in Flame Engine Component (Dart)\nDESCRIPTION: Demonstrates the use of the ParentIsA mixin to ensure a component has a specific parent type.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/components.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass MyComponent extends Component with ParentIsA<MyParentComponent> {\n  @override\n  void onLoad() {\n    // parent is of type MyParentComponent\n    print(parent.myValue);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies with Version Specifications\nDESCRIPTION: Lists required Python packages for documentation tooling, including Sphinx documentation generator and various extensions. Each package is pinned to a specific version for compatibility and reproducibility.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/_sphinx/requirements.txt#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nlinkify-it-py==2.0.2\nmyst-parser==2.0.0\nPygments==2.17.2\nSphinx==7.2.6\nsphinxcontrib-mermaid==0.9.2\nsphinxcontrib-jquery==4.1\nsphinx-autobuild==2021.3.14\nsphinx-copybutton==0.5.2\nJinja2==3.1.6\npsutil==5.9.7\n```\n\n----------------------------------------\n\nTITLE: World-based Game Implementation\nDESCRIPTION: Example of creating a game by extending World class and using it with FlameGame, including tap event handling.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nrunApp(\n  GameWidget(game: FlameGame(world: MyWorld()),\n);\n\nclass MyWorld extends World with TapCallbacks {\n  @override\n  Future<void> onLoad() async {\n    // Load your components\n  }\n\n  @override\n  void onTapDown(TapDownEvent event) {\n    print(event.localPosition); // Position of the tap in the world\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Hidden Table of Contents in Markdown Documentation\nDESCRIPTION: A toctree directive that creates a hidden table of contents for documentation navigation. It lists the same sections as the bullet points above but formats them for documentation systems that support the toctree syntax (likely Sphinx).\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/flame.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:hidden:\n\nGame Widget          <game_widget.md>\nGame Loop            <game.md>\nComponents           <components.md>\nCamera               <camera.md>\nAssets Structure     <structure.md>\nRouter               <router.md>\nPlatforms            <platforms.md>\nCollision Detection  <collision_detection.md>\nEffects              <effects.md>\nInputs               <inputs/inputs.md>\nRendering            <rendering/rendering.md>\nLayout               <layout/layout.md>\nOverlays             <overlays.md>\nOther                <other/other.md>\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Hidden Table of Contents in Markdown\nDESCRIPTION: This code snippet creates a hidden table of contents using the toctree directive in Markdown. It includes a link to the AlignComponent documentation.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/layout/layout.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:hidden:\n\nAlignComponent   <align_component.md>\n```\n```\n\n----------------------------------------\n\nTITLE: Creating LinearEffectController in Dart for Flame Engine\nDESCRIPTION: Initializes a LinearEffectController that grows linearly from 0 to 1 over the specified duration.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/effects.md#2025-04-20_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\nfinal ec = LinearEffectController(3);\n```\n\n----------------------------------------\n\nTITLE: Including README Content in Sphinx Documentation\nDESCRIPTION: Directive to include the main README.md file content into the documentation.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/index.md#2025-04-20_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n{include} README.md\n```\n\n----------------------------------------\n\nTITLE: Defining Empty Table of Contents in Markdown\nDESCRIPTION: This code snippet defines an empty table of contents using a toctree directive in Markdown. The :hidden: option suggests that the table of contents will not be visible in the rendered documentation.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_oxygen/flame_oxygen.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:hidden:\n\n```\n```\n\n----------------------------------------\n\nTITLE: Package Version Headers\nDESCRIPTION: Version headers for various Flame engine packages showing version numbers and changes\nSOURCE: https://github.com/flame-engine/flame/blob/main/CHANGELOG.md#2025-04-20_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n#### `flame_rive` - `v1.7.0`\n\n#### `flame_test` - `v1.10.0`\n\n#### `flame_forge2d` - `v0.13.0`\n\n#### `flame_isolate` - `v0.3.0`\n\n#### `flame_network_assets` - `v0.2.0`\n\n#### `flame_audio` - `v1.4.1`\n\n#### `flame_bloc` - `v1.8.3`\n\n#### `flame_fire_atlas` - `v1.3.4`\n\n#### `flame_flare` - `v1.5.3`\n\n#### `flame_lint` - `v0.2.0+1`\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory for Flame Game\nDESCRIPTION: Creates a new directory for the Flame game project using shell commands.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/bare_flame_game.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p ~/projects/syzygy\ncd ~/projects/syzygy\n```\n\n----------------------------------------\n\nTITLE: CameraComponent Addition\nDESCRIPTION: Added CameraComponent to FlameGame as a breaking change enhancement\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_lottie/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- **BREAKING** **FEAT**: Add CameraComponent to FlameGame ([#2740](https://github.com/flame-engine/flame/issues/2740)). ([7c2f4000](https://github.com/flame-engine/flame/commit/7c2f4000761580dbabb5d73b27f64d5819b34e8d))\n```\n\n----------------------------------------\n\nTITLE: Relational Operators Table in Markdown\nDESCRIPTION: A markdown table listing relational operators in YarnSpinner, including equality, inequality, less than, less than or equal, greater than, and greater than or equal.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/expressions/operators.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```{list-table}\n:align: left\n:class: first-col-align-center\n:header-rows: 1\n:widths: 1 3 8\n\n* - operator\n  - name\n  - notes\n* - `==`\n  - equality\n  -\n* - `!=`\n  - inequality\n  -\n* - `<`\n  - less than\n  -\n* - `<=`\n  - less than or equal\n  -\n* - `>`\n  - greater than\n  -\n* - `>=`\n  - greater than or equal\n  -\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Hidden Table of Contents in Markdown\nDESCRIPTION: This code snippet uses a toctree directive to create a hidden table of contents with links to the Flame API documentation and Flame Examples. The 'hidden' option is used to prevent the table of contents from being displayed in the rendered output.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/resources/resources.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:hidden:\n\nFlame API        <https://pub.dev/documentation/flame/--VERSION--/>\nFlame Examples   <https://examples.flame-engine.org/#/>\n```\n```\n\n----------------------------------------\n\nTITLE: Extracting Fractional Part with decimal() Function in Yarn\nDESCRIPTION: The decimal() function returns the fractional part of a number. For positive numbers, the result is between 0 (inclusive) and 1 (exclusive); for negative numbers, it's between 0 and -1.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/expressions/functions/numeric.md#2025-04-20_snippet_2\n\nLANGUAGE: yarn\nCODE:\n```\n{ decimal(0)     }  // 0\n{ decimal(0.3)   }  // 0.3\n{ decimal(5.0)   }  // 0\n{ decimal(5.001) }  // 0.001\n{ decimal(5.999) }  // 0.999\n{ decimal(-2.07) }  // -0.07\n```\n\n----------------------------------------\n\nTITLE: Defining toctree structure for Fire Atlas documentation\nDESCRIPTION: This snippet defines a toctree structure in Sphinx documentation format, linking to the Fire Atlas overview document. The toctree directive helps organize documentation by creating a hierarchical structure.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_fire_atlas/flame_fire_atlas.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\nOverview    <fire_atlas.md>\n```\n```\n\n----------------------------------------\n\nTITLE: Escaping Square Brackets in Yarn\nDESCRIPTION: Shows how to escape square brackets to prevent them from being parsed as markup.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/markup.md#2025-04-20_snippet_6\n\nLANGUAGE: yarn\nCODE:\n```\nHello, \\[world\\]!\n```\n\n----------------------------------------\n\nTITLE: Defining Hidden Table of Contents Structure\nDESCRIPTION: Sphinx toctree directive that defines the main navigation structure of the documentation, with links to major sections hidden from direct display.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/index.md#2025-04-20_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n{toctree}\n:hidden:\n\nFlame             <flame/flame.md>\nBridge Packages   <bridge_packages/bridge_packages.md>\nOther Modules     <other_modules/other_modules.md>\nTutorials         <tutorials/tutorials.md>\nDevelopment       <development/development.md>\nResources         <resources/resources.md>\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes\nDESCRIPTION: Documentation of breaking changes in flame_audio package\nSOURCE: https://github.com/flame-engine/flame/blob/main/CHANGELOG.md#2025-04-20_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n#### `flame_audio` - `v2.0.0`\n\n - **BREAKING** **FEAT**: Update AudioPlayers to ^4.0.0 (#2482).\n```\n\n----------------------------------------\n\nTITLE: Line Continuation in Yarn Dialogue\nDESCRIPTION: Example of using the backslash-newline escape sequence to split a long line across multiple physical lines.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/lines.md#2025-04-20_snippet_8\n\nLANGUAGE: yarn\nCODE:\n```\ntitle: One_long_line\n---\nThis line is so long that it becomes uncomfortable to read in a text editor. \\\n    Therefore, we use the backslash-newline escape sequence to split it into \\\n    several physical lines. The indentation at the start of the continuation \\\n    lines is for convenience only, and will be removed from the resulting \\\n    text.\n===\n```\n\n----------------------------------------\n\nTITLE: Configuring TOC Tree for Flame Isolate Documentation\nDESCRIPTION: Sphinx documentation toctree directive that defines the documentation structure, linking to an isolate.md overview page.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_isolate/flame_isolate.md#2025-04-20_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n{toctree}\nOverview    <isolate.md>\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Stable Channel\nDESCRIPTION: Command to switch to Flutter's stable channel for Flame development\nSOURCE: https://github.com/flame-engine/flame/blob/main/CONTRIBUTING.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflutter channel stable\n```\n\n----------------------------------------\n\nTITLE: Adding canAcceptCard Abstract Method in Pile Dart\nDESCRIPTION: This code snippet defines the abstract `canAcceptCard` method in the `Pile` class. This method is designed to determine whether a specific pile can accept a given card, based on the game's rules.  Each pile subclass will need to implement this method according to its own acceptance criteria.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step4.md#2025-04-20_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\n\"abstract class Pile {\\n  ...\\n  bool canAcceptCard(Card card);\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Fix Typo in Documentation - Markdown\nDESCRIPTION: Correction of the typo 'Teh' to 'the' in documentation to maintain clarity and professionalism in project documentation.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame/CHANGELOG.md#2025-04-20_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n// Teh -> the\n// Commit: ff7f36d0\n```\n\n----------------------------------------\n\nTITLE: Importing DialogueView Class from Jenny Package in Dart\nDESCRIPTION: This code snippet shows the import statement for the DialogueView class from the Jenny package. It also includes references to other related Dart classes and concepts used in the DialogueView implementation.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/runtime/dialogue_view.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n:file: src/dialogue_view.dart\n:symbol: DialogueView\n:package: jenny\n\n[Completer]: https://api.dart.dev/stable/2.18.6/dart-async/Completer-class.html\n[FutureOr]: https://api.dart.dev/stable/2.18.6/dart-async/FutureOr-class.html\n[user-defined command]: user_defined_command.md\n[<<jump>>]: ../language/commands/jump.md\n[<<stop>>]: ../language/commands/stop.md\n[<<visit>>]: ../language/commands/visit.md\n```\n\n----------------------------------------\n\nTITLE: Installing CSpell Checker\nDESCRIPTION: NPM command to install the CSpell spell checker globally\nSOURCE: https://github.com/flame-engine/flame/blob/main/CONTRIBUTING.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g cspell\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Pages Branch\nDESCRIPTION: Shell command to create a new gh-pages branch for GitHub Pages deployment\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/platforms.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b gh-pages\n```\n\n----------------------------------------\n\nTITLE: Hardware Keyboard Detector Configuration\nDESCRIPTION: Configuration block for the HardwareKeyboardDetector documentation, specifying file location and related Flutter keyboard event classes.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/flame/inputs/hardware_keyboard_detector.md#2025-04-20_snippet_0\n\nLANGUAGE: dartdoc\nCODE:\n```\n:file: src/events/hardware_keyboard_detector.dart\n:symbol: HardwareKeyboardDetector\n:package: flame\n\n[HardwareKeyboard]: https://api.flutter.dev/flutter/services/HardwareKeyboard-class.html\n[KeyDownEvent]: https://api.flutter.dev/flutter/services/KeyDownEvent-class.html\n[KeyUpEvent]: https://api.flutter.dev/flutter/services/KeyUpEvent-class.html\n[KeyRepeatEvent]: https://api.flutter.dev/flutter/services/KeyRepeatEvent-class.html\n```\n\n----------------------------------------\n\nTITLE: Hidden Table of Contents for Flame Tutorials in Markdown\nDESCRIPTION: A hidden toctree directive that organizes the tutorial navigation structure. It includes links to all available tutorials: Bare Flame game, Klondike, Ember Quest, and Space Shooter.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/tutorials.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:hidden:\n\nBare Flame game   <bare_flame_game.md>\nKlondike          <klondike/klondike.md>\nEmber Quest       <platformer/platformer.md>\nSpace Shooter     <space_shooter/space_shooter.md>\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Flame Bloc Documentation in Markdown\nDESCRIPTION: This code snippet uses a toctree directive to structure the documentation for the Flame Bloc package. It includes links to overview and components sections.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_bloc/flame_bloc.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\nOverview    <bloc.md>\nComponents    <bloc_components.md>\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents for Flame Forge2D Documentation in Markdown\nDESCRIPTION: This code snippet creates a table of contents using the toctree directive in Markdown. It includes links to the overview and joints pages of the Flame Forge2D documentation.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_forge2d/flame_forge2d.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\nOverview    <forge2d.md>\nJoints    <joints.md>\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring TOC Tree for Hidden Documentation Links in Markdown\nDESCRIPTION: toctree configuration block that creates hidden navigation links to development documentation pages, including contributing guidelines, documentation standards, style guide, and testing guide.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/development/development.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{toctree}\n:hidden:\n\nContributing   <contributing.md>\nDocumentation  <documentation.md>\nStyle Guide    <style_guide.md>\nTests Guide    <testing_guide.md>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Console Command for Flame Games\nDESCRIPTION: This snippet shows how to create a custom command by extending the ConsoleCommand class. It implements the required methods for name, description, and execute functionality, which returns both potential error messages and command output.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_console/flame_console.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyCustomCommand extends ConsoleCommand<MyGame> {\n  MyCustomCommand();\n\n  @override\n  String get name => 'my_command';\n\n  @override\n  String get description => 'Description of my command';\n\n  // The execute method is supposed to return a tuple where the first\n  // element is an error message in case of failure, and the second\n  // element is the output of the command.\n  @override\n  (String?, String) execute(MyGame game, List<String> args) {\n    // do something on the game\n    return (null, 'Hello World');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Hidden Table of Contents for Game Tutorial\nDESCRIPTION: Markdown configuration for organizing tutorial steps with a hidden toctree directive\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/platformer.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:hidden:\n\n1. Preparation  <step_1.md>\n2. Start Coding  <step_2.md>\n3. Building the World  <step_3.md>\n4. Adding the Remaining Components  <step_4.md>\n5. Controlling Movement  <step_5.md>\n6. Adding the HUD  <step_6.md>\n7. Adding Menus  <step_7.md>\n```\n```\n\n----------------------------------------\n\nTITLE: Overriding Drag Callbacks in Card Dart\nDESCRIPTION: These code snippets override the `onDragUpdate` and `onDragEnd` methods in the `Card` class to handle drag events. The `onDragUpdate` method updates the card's position during the drag, while the `onDragEnd` method calls `super.onDragEnd` to reset the `_isDragged` flag.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/klondike/step4.md#2025-04-20_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\n\"  @override\\n  void onDragUpdate(DragUpdateEvent event) {\\n    if (!isDragged) {\\n      return;\\n    }\\n    position += event.localDelta;\\n  }\"\n```\n\nLANGUAGE: dart\nCODE:\n```\n\"  @override\\n  void onDragEnd(DragEndEvent event) {\\n    super.onDragEnd(event);\\n  }\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Sprite-based Graphics in Flame\nDESCRIPTION: This snippet shows how to replace basic shape rendering with sprite-based graphics using SpriteComponent in Flame.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/space_shooter/step_2.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass Player extends SpriteComponent {\n  void move(Vector2 delta) {\n    position.add(delta);\n  }\n}\n\nclass SpaceShooterGame extends FlameGame with PanDetector {\n  late Player player;\n\n  @override\n  Future<void>? onLoad() async {\n    await super.onLoad();\n\n    final playerSprite = await loadSprite('player-sprite.png');\n    player = Player()\n      ..sprite = playerSprite\n      ..x = size.x / 2\n      ..y = size.y / 2\n      ..width = 50\n      ..height = 100\n      ..anchor = Anchor.center;\n\n    add(player);\n  }\n\n  @override\n  void onPanUpdate(DragUpdateInfo info) {\n    player.move(info.delta.global);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter to Specific Commit\nDESCRIPTION: This shell script navigates to the Flutter installation directory, fetches the latest changes, and checks out a specific commit of the Flutter engine. It also prints the commit SHA that is required for setting up the Flutter GPU.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame_3d/CONTRIBUTING.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd $(dirname $(which flutter)) \\\n  && git fetch \\\n  && git checkout bcdd1b2c481bca0647beff690238efaae68ca5ac -q \\\n  && echo \"Engine commit: $(cat internal/engine.version)\" \\\n  && cd - >/dev/null\n```\n\n----------------------------------------\n\nTITLE: Registering ParticleSystem and ParticleComponent in Dart for Oxygen ECS\nDESCRIPTION: Demonstrates how to register the ParticleSystem and ParticleComponent with the Oxygen world. This allows the use of Flame's Particle API within the Oxygen ECS.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/oxygen/oxygen.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nworld.registerSystem(ParticleSystem());\n\nworld.registerComponent<ParticleComponent, Particle>(() => ParticleComponent);\n```\n\n----------------------------------------\n\nTITLE: Converting to Boolean in Yarn\nDESCRIPTION: The bool(x) function converts its argument into a boolean value. It handles boolean, numeric, and string inputs with specific rules for each type.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/expressions/functions/type.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbool(x)\n```\n\n----------------------------------------\n\nTITLE: Depend on Test: Any for Flame Test - Dart\nDESCRIPTION: This change sets a dependency on the 'test' package as 'any' for the flame_test module, ensuring compatibility with various test versions.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame/CHANGELOG.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n// Depend on test: any for flame_test\n// Commit: acfd418d\n```\n\n----------------------------------------\n\nTITLE: Add canSee Method to CameraComponent - Dart\nDESCRIPTION: This new feature introduces a 'canSee' method in the CameraComponent, enhancing its functionality to determine visibility.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame/CHANGELOG.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n// Add a `canSee` method to the `CameraComponent`\n// Commit: 2347c8f5\n```\n\n----------------------------------------\n\nTITLE: Add moveBy to CameraComponent - Dart\nDESCRIPTION: This feature adds a 'moveBy' method to the CameraComponent, facilitating easy panning and movement of the camera.\nSOURCE: https://github.com/flame-engine/flame/blob/main/packages/flame/CHANGELOG.md#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\n// Add `moveBy` to `CameraComponent`\n// Commit: 51e54ebe\n```\n\n----------------------------------------\n\nTITLE: Clearing Audio Cache in Flame\nDESCRIPTION: Method to remove specific audio files from the cache to manage memory usage.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/bridge_packages/flame_audio/audio.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nFlameAudio.audioCache.clear('explosion.mp3');\n```\n\n----------------------------------------\n\nTITLE: Installing Melos Package Manager\nDESCRIPTION: Command to globally install the Melos package manager used for managing project dependencies\nSOURCE: https://github.com/flame-engine/flame/blob/main/CONTRIBUTING.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nflutter pub global activate melos\n```\n\n----------------------------------------\n\nTITLE: Importing Effects and Game Objects\nDESCRIPTION: Imports the necessary packages for visual effects and game objects.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/platformer/step_5.md#2025-04-20_snippet_23\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flame/effects.dart';\n\nimport '../objects/star.dart';\nimport 'water_enemy.dart';\n```\n\n----------------------------------------\n\nTITLE: Initializing Empty Flutter Project for Flame Game\nDESCRIPTION: Initializes a new Flutter project in the current directory using the Flutter CLI.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/tutorials/bare_flame_game.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nflutter create .\n```\n\n----------------------------------------\n\nTITLE: Escaping Colons in Yarn Dialogue\nDESCRIPTION: Example of using escaped colon to prevent interpretation as a character ID.\nSOURCE: https://github.com/flame-engine/flame/blob/main/doc/other_modules/jenny/language/lines.md#2025-04-20_snippet_2\n\nLANGUAGE: yarn\nCODE:\n```\ntitle: Warning\n---\nAttention\\: The cake is NOT a lie\n===\n```"
  }
]