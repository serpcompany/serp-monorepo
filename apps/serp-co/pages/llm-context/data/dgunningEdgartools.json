[
  {
    "owner": "dgunning",
    "repo": "edgartools",
    "content": "TITLE: Installing edgartools Package - Python\nDESCRIPTION: Installs the latest version of the edgartools package via pip for use in the rest of the tutorial. Requires pip and Python 3.x to be available in the environment. Outputs installation progress and requires internet access.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/Usage.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -U edgartools\n```\n\n----------------------------------------\n\nTITLE: Fetching and Displaying Apple's Balance Sheet\nDESCRIPTION: This snippet demonstrates fetching the latest 10-Q filing for Apple Inc. (ticker 'AAPL') using the `Company` object. It then parses the filing's XBRL data and extracts and displays the balance sheet.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-QuarterlyStatements.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nc = Company(\"AAPL\")\nf = c.latest(\"10-Q\")\nxbrl = XBRL.from_filing(f)\nbalance_sheet = xbrl.statements.balance_sheet()\nbalance_sheet\n```\n\n----------------------------------------\n\nTITLE: Instantiating Company by Ticker and Accessing Filings - Python\nDESCRIPTION: Creates a Company object by ticker symbol ('SNOW'); the company object can then be displayed or further queried. Also retrieves all filings associated with that ticker with get_filings().\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/Usage.ipynb#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ncompany = Company(\"SNOW\")\ncompany\n```\n\nLANGUAGE: python\nCODE:\n```\ncompany.get_filings()\n```\n\n----------------------------------------\n\nTITLE: Importing edgartools and Initializing Identity in Python\nDESCRIPTION: This code demonstrates how to import the necessary functions from edgartools, set the user's SEC identity via set_identity(), and retrieve recent filings with get_filings(). Dependencies include the edgartools library, which must be installed, and a valid email for set_identity(). The output is a filings object that can be further queried for SEC filings.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# 1. Import the necessary functions from edgartools\nfrom edgar import *\n\n# 2. Tell the SEC who you are\nset_identity(\"mike@indigo.com\")\n\n# 3. Start using the library\nfilings = get_filings()\n```\n\n----------------------------------------\n\nTITLE: Fetching SEC Filings with Specific Date Ranges and Filters using edgartools in Python\nDESCRIPTION: Shows different parameter combinations for the `get_filings()` function to retrieve SEC filings based on specific years (single, list, range), quarters (single, list), form types (e.g., \"D\"), and exact or ranged filing dates. Each call returns a `Filings` object containing the matching filings.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/using-the-filings-api.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\n    >>> filings = get_filings(2021) # Get filings for 2021\n\n    >>> filings = get_filings(2021, 4) # Get filings for 2021 Q4\n\n    >>> filings = get_filings(2021, [3,4]) # Get filings for 2021 Q3 and Q4\n\n    >>> filings = get_filings([2020, 2021]) # Get filings for 2020 and 2021\n\n    >>> filings = get_filings([2020, 2021], 4) # Get filings for Q4 of 2020 and 2021\n\n    >>> filings = get_filings(range(2010, 2021)) # Get filings between 2010 and 2021 - does not include 2021\n\n    >>> filings = get_filings(2021, 4, form=\"D\") # Get filings for 2021 Q4 for form D\n\n    >>> filings = get_filings(2021, 4, filing_date=\"2021-10-01\") # Get filings for 2021 Q4 on \"2021-10-01\"\n\n    >>> filings = get_filings(2021, 4, filing_date=\"2021-10-01:2021-10-10\") # Get filings for 2021 Q4 between\n                                                                            # \"2021-10-01\" and \"2021-10-10\"\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Company Object using Ticker Symbol in Python\nDESCRIPTION: Instantiates the `Company` object using the company's stock ticker symbol (e.g., 'SNOW'). This method performs an internal lookup to find the corresponding CIK and then initializes the `Company` object. Ticker lookup is case-insensitive.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/company.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsnow = Company(\"snow\")\n```\n\n----------------------------------------\n\nTITLE: Fetching Company by Ticker and Accessing Filings (Python)\nDESCRIPTION: Obtains a Company instance by ticker symbol and retrieves its filings property. Dependencies: edgartools, network access. Input: Ticker symbol as a string. Output: Company object and related Filings collection. The process abstracts CIK lookup for user convenience.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/index.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nc = Company(\"AAPL\")\nfilings = c.filings\n```\n\n----------------------------------------\n\nTITLE: Multi-Period XBRL Analysis with XBRLS in Python\nDESCRIPTION: Shows how to perform multi-period financial analysis by creating an `XBRLS` object from multiple filings using `XBRLS.from_filings()`. It demonstrates accessing the combined, stitched statements for trend comparison and analysis. Requires the `edgar` library.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/xbrl.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom edgar import Company\nfrom edgar.xbrl2 import XBRLS\n\n# Get multiple filings for trend analysis\ncompany = Company('AAPL')\nfilings = company.get_filings(form=\"10-K\").head(3)  # Get the last 3 annual reports\n\n# Create a stitched view across multiple filings\nxbrls = XBRLS.from_filings(filings)\n\n# Access stitched statements\nstitched_statements = xbrls.statements\n\n# Display multi-period statements\nincome_trend = stitched_statements.income_statement()\nbalance_sheet_trend = stitched_statements.balance_sheet()\ncashflow_trend = stitched_statements.cash_flow_statement()\n```\n```\n\n----------------------------------------\n\nTITLE: Getting a Company by Ticker or CIK in edgartools (Python)\nDESCRIPTION: This snippet shows how to instantiate a Company object using either a ticker symbol (string) or CIK (string or integer). It requires edgartools to be installed and imported. The parameter can be a company's ticker or CIK; the resulting object enables company-specific queries, such as fetching its SEC filings.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nc = Company(\"AAPL\") # or Company(\"0000320193\") or Company(320193)\n```\n\n----------------------------------------\n\nTITLE: Converting Balance Sheet to Pandas DataFrame - Python\nDESCRIPTION: Transforms the previously obtained balance sheet object into a pandas DataFrame for downstream data analysis. Prerequisite: 'balance_sheet' has been defined and the pandas package is installed. Returns a DataFrame with structured financial data.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-StandardizedStatements.ipynb#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nbalance_sheet.to_dataframe()\n```\n\n----------------------------------------\n\nTITLE: Displaying Apple's Income Statement\nDESCRIPTION: This snippet calls the `income_statement()` method on the previously created `xbrl` object (containing parsed data from Apple's latest 10-Q filing) to retrieve and display the income statement.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-QuarterlyStatements.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nxbrl.statements.income_statement()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Company Object by Ticker or CIK (Python)\nDESCRIPTION: Demonstrates creating a `Company` object by providing either the stock ticker symbol (e.g., \"AAPL\") or the company's Central Index Key (CIK) as a string or an integer. This object represents the company and allows access to its filings.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/ai_docs/edgartools.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncompany = Company(\"AAPL\")\n# OR CIK\ncompany = Company(\"0000320193\") # OR Company(320193)\n```\n\n----------------------------------------\n\nTITLE: Accessing Financial Statements from a 10-K Filing Object in Python\nDESCRIPTION: Shows how to obtain the latest 10-K filing object for a company (\"AAPL\"), access its `Financials` object, and then retrieve specific financial statements (Balance Sheet, Income Statement, Cash Flow, Equity, Comprehensive Income) using dedicated methods or equivalent properties. Requires the `edgartools` library.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/README.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ntenk = Company(\"AAPL\").get_filings(form=\"10-K\").latest(1).obj()\n\nfinancials = tenk.financials\n\nfinancials.get_balance_sheet()                     # or financials.balance_sheet\nfinancials.get_income_statement()                  # or financials.income\nfinancials.get_cash_flow_statement()               # or financials.cashflow\nfinancials.get_statement_of_changes_in_equity()    # or financials.equity\nfinancials.get_statement_of_comprehensive_income() # or financials.comprehensive_income\n```\n\n----------------------------------------\n\nTITLE: Accessing Company Financials - Python\nDESCRIPTION: Retrieves the financials property of a Company object, expected to return financial statements or associated summaries. Allows inspection of numeric financial data about the company.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/Usage.ipynb#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfinancials = company.financials\nfinancials\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Form Filings for a Company (Python)\nDESCRIPTION: Filters and retrieves filings for a specific form type (e.g., '10-K') directly when calling `get_filings()` on a `Company` object by specifying the `form` parameter. Returns a `Filings` object containing only the matching filings.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/ai_docs/edgartools.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfilings = company.get_filings(form='10-K')\n```\n\n----------------------------------------\n\nTITLE: Filtering Fund Filings by Form Type using edgartools in Python\nDESCRIPTION: This snippet demonstrates how to filter the filings associated with the `fund` object. It calls the `filter()` method on the `fund.filings` collection, passing the parameter `form=\"N-PX\"`. This filters the collection to include only filings of the form type N-PX. The resulting filtered collection is assigned to the `npx_filings` variable and then displayed.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Fund-Filings.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nnpx_filings = fund.filings.filter(form=\"N-PX\")\nnpx_filings\n```\n\n----------------------------------------\n\nTITLE: Filtering for Amendments to Forms - Python\nDESCRIPTION: Further filters the filings_6k object to only include amendment forms (e.g., '6-K/A'), using the .filter() method. Requires previously retrieved filings by main form type.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/Usage.ipynb#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfilings_6k.filter(form=\"6-K/A\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Older Filings with get_filings Method (Python)\nDESCRIPTION: Leverages the get_filings method on a Company to pull all available filings, including those beyond initial recent set (usually 1000). Dependencies: edgartools, Company object. Input: None. Output: Extended Filings object with more historical data. Helps circumvent SEC paging limitations.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/index.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfilings = c.get_filings()\n```\n\n----------------------------------------\n\nTITLE: Installing edgartools with uv (Bash)\nDESCRIPTION: Shows how to install the edgartools Python package using the uv wrapper for pip. Dependencies: uv and Python must be installed. Input: No parameters. Output: Installs edgartools into the environment. An alternative to standard pip for users preferring uv.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/index.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv pip install edgartools\n```\n\n----------------------------------------\n\nTITLE: Retrieving Recent Filings Using get_filings (Python)\nDESCRIPTION: Uses the top-level `get_filings()` function to fetch SEC filings. Without specific parameters, it defaults to retrieving filings for the current year and quarter. Returns a `Filings` object.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/ai_docs/edgartools.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfilings = get_filings()\n```\n\n----------------------------------------\n\nTITLE: Filtering SEC Filings by Form and Amendments using EdgarTools Python\nDESCRIPTION: This example filters for filings of a specific form, excluding amended filings (such as '10-K/A') by setting the `amendments` parameter to False. This ensures only initial submissions of that form are returned in the results from the `get_filings` function. The parameter `amendments` is Boolean; setting it to False excludes amendments. Output is a `Filings` object; dependencies are the same as above.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/filtering-filings.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfilings = get_filings(form='10-K', amendments=False)\n```\n\n----------------------------------------\n\nTITLE: Initializing Financial Ratios Calculator with EdgarTools in Python\nDESCRIPTION: Creates an instance of the `FinancialRatios` class from the `edgar.xbrl2.analysis.ratios` module. It passes the previously parsed XBRL object (`xb`) to the constructor. This initializes the `fr` object, preparing it to calculate various financial ratios using the data contained within the XBRL filing.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-FraudAnalysis.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfr = FinancialRatios(xb)\n```\n\n----------------------------------------\n\nTITLE: Querying Filings Data Using edgartools (Python)\nDESCRIPTION: Retrieves filings for the current year and quarter using the get_filings() function. Dependencies: edgartools, identity set. Input: No parameters. Output: Returns a Filings object representing a container of SEC filings. This is the starting point for most data exploration.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/index.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfilings = get_filings()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Company Financials using edgartools in Python\nDESCRIPTION: Demonstrates importing the `Financials` class and accessing a company's financial data via the `financials` property of a `Company` object initialized with a ticker symbol (e.g., \"AAPL\"). This requires the `edgartools` library.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/README.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom edgar.financials import Financials\n\ncompany = Company(\"AAPL\")\nfinancials = company.financials\n\n```\n\n----------------------------------------\n\nTITLE: Using the AI-Developed XBRL2 Package API in Python\nDESCRIPTION: Illustrates the enhanced API usage for the XBRL2 package. It shows creating an `XBRL` object from a filing using `XBRL.from_filing(filing)`, accessing statements via attributes (e.g., `xbrl.statements.balance_sheet()`), and utilizing various output formats like rich printing, pandas DataFrame conversion (`to_dataframe()`), and Markdown export (`to_markdown()`). Requires an initialized `filing` object.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/xbrl2-rewrite-analysis.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# New XBRL2 approach\nxbrl = XBRL.from_filing(filing)\nstatement = xbrl.statements.balance_sheet()\nprint(statement)  # Rich rendering\ndf = statement.to_dataframe()  # DataFrame conversion\nmarkdown = statement.to_markdown()  # Markdown export\n```\n\n----------------------------------------\n\nTITLE: Setting Identity for SEC Edgar API Access in Python\nDESCRIPTION: Sets the user's identity (email) for interacting with the SEC API using edgartools. Dependencies: edgartools, successful import of edgar. Input: Email as a string parameter. Output: Configures the library for API access. Proper identity is required before making requests to the SEC endpoint.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/index.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom edgar import *\nset_identity(\"mike.mccalum@indigo.com\")\n```\n\n----------------------------------------\n\nTITLE: Viewing Attachments of a Filing in edgartools (Python)\nDESCRIPTION: This single-line command accesses the attachments attribute on a Filing object, providing a list of associated attachments for viewing or later processing. Ensure the Filing object has been retrieved before use. Outputs the attachments collection, typically as a list-like object.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/README.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# View the attachments\nfiling.attachments\n```\n\n----------------------------------------\n\nTITLE: Converting Financial Statements to Pandas DataFrame using edgartools in Python\nDESCRIPTION: Illustrates converting a financial statement object (specifically, a Balance Sheet obtained via `get_balance_sheet()`) into a pandas DataFrame using the `get_dataframe()` method. This requires both the `edgartools` and `pandas` libraries, and assumes a `financials` object has been previously obtained.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/README.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nbalance_sheet_df = financials.get_balance_sheet().get_dataframe()\n```\n\n----------------------------------------\n\nTITLE: Implementing the attachments Property in edgartools (Python)\nDESCRIPTION: Shows the internal implementation of the `attachments` property, likely within the `Filing` class. It calls the `self.sgml()` method to get a `FilingSGML` object and then returns the `attachments` attribute from that object.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/sgml.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@property\ndef attachments(self):\n    # Return all the attachments on the filing\n    sgml_filing: FilingSGML = self.sgml()\n    return sgml_filing.attachments\n```\n\n----------------------------------------\n\nTITLE: Fetching the Single Latest 8-K Filing using edgartools in Python\nDESCRIPTION: Shows how to retrieve the single most recent SEC Form 8-K filing for a company using the `latest` method without the `n` parameter. Assumes a `Company` object (`c`) or a `Filings` object (`filings`) is available. Returns a single `Filing` object.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/eightk-filings.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfiling = filings.latest(\"8-K\")\n```\n\n----------------------------------------\n\nTITLE: Processing Single XBRL Filing with EdgarTools in Python\nDESCRIPTION: Demonstrates initializing an `XBRL` object from a single SEC filing using `XBRL.from_filing()`. It shows how to access the main financial statements (Balance Sheet, Income Statement, Cash Flow) via the `statements` attribute. Requires the `edgar` library.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/xbrl.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom edgar import Company\nfrom edgar.xbrl2.xbrl import XBRL\n\n# Get a company's latest 10-K filing\ncompany = Company('AAPL')\nfiling = company.latest(\"10-K\")\n\n# Parse XBRL data\nxbrl = XBRL.from_filing(filing)\n\n# Access statements through the user-friendly API\nstatements = xbrl.statements\n\n# Display financial statements\nbalance_sheet = statements.balance_sheet()\nincome_statement = statements.income_statement()\ncash_flow = statements.cash_flow_statement()\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Financial Statements from Financials Object - EdgarTools Python\nDESCRIPTION: This snippet shows accessing the main financial statements from a Financials instance with properties for balance sheet, income statement, and cash flow statement. Each property returns corresponding statement data, facilitating programmatic access. Prerequisite: a Financials instance (see previous snippet). Output: respective statement data objects for further analysis.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/company-financials.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbalance_sheet = financials.balance_sheet\nincome_statement = financials.income\ncash_flow_statement = financials.cash_flow\n```\n\n----------------------------------------\n\nTITLE: Filtering SEC Filings by Filing Date using EdgarTools Python\nDESCRIPTION: This set of examples demonstrates filtering filings by filing date and date ranges using the `filing_date` parameter. Supported values include a specific date, a date range using colon-separated strings, starting from or up to a certain date, allowing flexible date queries. Returns a `Filings` object for the specified date(s). No additional dependencies besides `edgar` are required.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/filtering-filings.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfilings = get_filings(filing_date='2022-01-01')\n```\n\nLANGUAGE: python\nCODE:\n```\nfilings = get_filings(filing_date='2022-01-01:2022-01-10')\n```\n\nLANGUAGE: python\nCODE:\n```\nfilings = get_filings(filing_date=':2022-01-10')\n```\n\nLANGUAGE: python\nCODE:\n```\nfilings = get_filings(filing_date='2022-01-10:')\n```\n\n----------------------------------------\n\nTITLE: Parsing XBRL Data from a Filing in edgartools (Python)\nDESCRIPTION: This command calls the xbrl() method on a Filing object to fetch and parse XBRL data, if present. The result is an XBRLData or XBRLInstance object if XBRL is available, or None otherwise. Dependencies include the edgartools library and a Filing object referencing an XBRL-enabled filing.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/README.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfiling_xbrl = filing.xbrl()\n```\n\n----------------------------------------\n\nTITLE: Fetching and Parsing Latest SEC Filing for a Company - Python\nDESCRIPTION: Creates a Company object for Apple Inc. (AAPL symbol), retrieves the latest 10-K filing, and parses it into an XBRL object. This workflow requires internet access, a valid company ticker, the Edgartools package, and transforms a filing object into a machine-parsable XBRL structure. Inputs include the ticker symbol and filing type; output is an XBRL object.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-StandardizedStatements.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nc = Company(\"AAPL\")\nf = c.latest(\"10-K\")\nxbrl = XBRL.from_filing(f)\n```\n\n----------------------------------------\n\nTITLE: Getting a statement's data as a Pandas DataFrame\nDESCRIPTION: Accesses the 'CONSOLIDATEDSTATEMENTSOFCOMPREHENSIVEINCOME' statement by name from the `statements` dictionary and then calls the `get_dataframe()` method on it to convert the statement's data into a Pandas DataFrame for easier analysis.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Reading-Data-From-XBRL.ipynb#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nstatements['CONSOLIDATEDSTATEMENTSOFCOMPREHENSIVEINCOME'].get_dataframe()\n```\n\n----------------------------------------\n\nTITLE: Handling and Inspecting XBRL Calculation Relationships in Python\nDESCRIPTION: This snippet demonstrates how to access calculation trees from an XBRL parser, highlighting the adjustment of fact values according to calculation arc weights (such as negating elements with weight -1.0). It utilizes the statements API to retrieve the cash flow statement and iterates through calculation trees, printing definitions and details for elements with non-standard weights. Dependencies include an xbrl or statements object exposing .calculation_trees and .cash_flow_statement(). Inputs are calculation trees linked to XBRL roles; outputs are printed inspection results detailing calculation structure and sign adjustments.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/xbrl.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# Values are automatically adjusted according to calculation weights\\n# For example, elements with negative weights (-1.0) like \\\"IncreaseDecreaseInInventories\\\"\\n# are automatically negated to maintain proper calculation relationships\\ncash_flow_statement = statements.cash_flow_statement()\\n\\n# The calculation trees are accessible for inspection\\nfor role_uri, calc_tree in xbrl.calculation_trees.items():\\n    print(f\\\"Calculation tree: {calc_tree.definition}\\\")\\n    for element_id, node in calc_tree.all_nodes.items():\\n        if node.weight != 1.0:\\n            print(f\\\"- {element_id}: weight={node.weight}\\\")\n```\n\n----------------------------------------\n\nTITLE: Fetching the latest 10-Q filing for Apple\nDESCRIPTION: Creates a `Company` object for Apple Inc. ('AAPL'), retrieves its filings filtered by form type '10-Q', and selects the single most recent filing using `.latest(1)`. The resulting `Filing` object is stored in the `filing` variable.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Reading-Data-From-XBRL.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfiling = Company(\"AAPL\").get_filings(form=\"10-Q\").latest(1)\nfiling\n```\n\n----------------------------------------\n\nTITLE: Fetching the Latest 10-K Filing Object using edgartools in Python\nDESCRIPTION: Demonstrates obtaining the latest 10-K filing object (`TenK`) for a specific company (\"ORCL\") by first getting the company object, then using the `get_filings` method with the form type, retrieving the latest filing, and finally accessing the filing object representation with `.obj()`. Requires the `edgartools` library.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/README.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nc = Company(\"ORCL\")\nfiling = c.get_filings(form=\"10-K\").latest()\ntenk = filing.obj()\n```\n\n----------------------------------------\n\nTITLE: Viewing 8-K Filing Content in Console using edgartools in Python\nDESCRIPTION: Illustrates how to display the textual content of a specific SEC filing (`filing` object) directly in the console output using the `view()` method. Requires a `Filing` object.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/eightk-filings.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfiling.view()\n```\n\n----------------------------------------\n\nTITLE: Accessing Latest 10-K Object via Company Property in Python\nDESCRIPTION: Shows a convenient way to directly access the latest 10-K filing object for a company (\"ORCL\") using the `latest_tenk` property available on the `Company` object. Requires the `edgartools` library.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/README.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nc = Company(\"ORCL\")\nc.latest_tenk\n```\n\n----------------------------------------\n\nTITLE: Accessing a Specific XBRL Statement by Name Using edgartools - Python\nDESCRIPTION: This snippet allows you to retrieve a particular statement (such as a balance sheet or income statement) by referencing its specific name as a key in the statements collection. The example uses 'CONSOLIDATEDBALANCESHEETS' but can be any firm-specific label. Requires that statements is a dictionary-like structure of statement objects. Input: Statement name string. Output: Statement object with data and metadata.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/working-with-xbrl.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nstatements['CONSOLIDATEDBALANCESHEETS']\n```\n\n----------------------------------------\n\nTITLE: Fetching Company Filings and Parsing XBRL Data in Python\nDESCRIPTION: Creates a `Company` object using the selected ticker. It then retrieves the 5 most recent 10-K filings for that company using `get_filings`. Finally, it parses the XBRL data from these filings using `XBRLS.from_filings` to prepare for financial statement extraction.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-StitchingStatements.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nc = Company(ticker)\nfilings = c.get_filings(form=\"10-K\").head(5)\nxbrls = XBRLS.from_filings(filings)\nc\n```\n\n----------------------------------------\n\nTITLE: Filtering edgartools Filings by Date Range in Python\nDESCRIPTION: Uses the `filter()` method with the `date` parameter and a colon-separated string ('YYYY-MM-DD:YYYY-MM-DD') to filter a `Filings` object, retaining only filings within the specified inclusive date range.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/using-the-filings-api.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfilings.filter(date=\"2021-01-12:2021-02-28\") \n```\n\n----------------------------------------\n\nTITLE: Accessing Financial Statements from an XBRL Object in Python\nDESCRIPTION: This code accesses the `statements` attribute of an `XBRL` object (`xb`), which was previously populated by parsing a filing. This attribute serves as an entry point to retrieve the structured financial statements extracted from the XBRL data.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-CustomTags.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nxb.statements\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Statement with get_statement() Using edgartools - Python\nDESCRIPTION: This code demonstrates use of the get_statement() method to access a named statement from an XbrlData object. Given the string label 'CONSOLIDATEDBALANCESHEETS', the method returns the corresponding statement object. Requires that xbrl_data is initialized and contains statements. Input is the statement name, output is the statement object. Handles differences in how statements may be named across filings.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/working-with-xbrl.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nxbrl_data.get_statement('CONSOLIDATEDBALANCESHEETS')\n```\n\n----------------------------------------\n\nTITLE: Fetching All Filings for a Company Object (Python)\nDESCRIPTION: Retrieves all filings for a specific company using the `get_filings()` method on a `Company` object. By default, this fetches the 1000 most recent filings. The result is a `Filings` object.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/ai_docs/edgartools.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfilings = company.get_filings()\n```\n\n----------------------------------------\n\nTITLE: Fetching and Parsing Latest 10-K XBRL Data with EdgarTools in Python\nDESCRIPTION: Instantiates a `Company` object for Comcast ('CMCSA'), retrieves its latest '10-K' filing using `c.latest(\"10-K\")`, and then parses the XBRL data from that filing using `XBRL.from_filing()`. The resulting `xb` object holds the structured financial data ready for analysis.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-FraudAnalysis.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nc = Company(\"CMCSA\")\nfiling = c.latest(\"10-K\")\nxb = XBRL.from_filing(filing)\n```\n\n----------------------------------------\n\nTITLE: Initializing Financials Wrapper for XBRL Data Using edgartools - Python\nDESCRIPTION: This snippet demonstrates the usage of the Financials class to extract the most common financial statements from parsed XBRL data using edgartools. By passing the xbrl_data object into the Financials constructor, it returns a structured wrapper with simplified access to widely used financial statements. Prerequisites include having a properly parsed XbrlData object, and the edgartools library available. Input: xbrl_data. Output: Financials object with easy statement access.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/working-with-xbrl.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfinancials = Financials(xbrl_data)\n```\n\n----------------------------------------\n\nTITLE: Converting Filing Object to Typed Ownership Data Object - Python\nDESCRIPTION: Converts a filing object to its corresponding typed Ownership subclass (e.g., Form3, Form4, or Form5) for accessing additional filing-specific attributes. This usage pattern is common for working with detailed insider filing data in Edgartools. The filing object must support the obj() method.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/insider-filings.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nform3 = filing.obj()\n```\n\n----------------------------------------\n\nTITLE: Fetching and Viewing Effect Filings - Python\nDESCRIPTION: Fetches all filings with the SEC form 'EFFECT' and displays the results. Effect filings relate to effectiveness of registration statements, and are filtered during retrieval.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/Usage.ipynb#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\neffect_filings = get_filings(form=\"EFFECT\")\neffect_filings\n```\n\n----------------------------------------\n\nTITLE: Method Signature for Filings.filter (Python)\nDESCRIPTION: Displays the method signature for the `filter` method of the `Filings` object. This method allows for post-retrieval filtering based on various criteria like `form`, `amendments`, `filing_date` (accepts ranges), `cik`, `exchange`, `ticker`, and `accession_number`. It returns a new, potentially filtered `Filings` object or None. Requires `typing` and custom types.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/ai_docs/edgartools.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n    def filter(self, *,\n        form: Optional[Union[str, List[IntString]]] = None, # The form or list of forms to filter by\n        amendments: bool = None, # Whether to include amendments to the forms e.g. include \"10-K/A\"\n        filing_date: Optional[str] = None, # The filing date as `YYYY-MM-DD`, `YYYY-MM-DD:YYYY-MM-DD`, or `YYYY-MM-DD:` or `:YYYY-MM-DD`\n        date: Optional[str] = None, # Alias for filing_date\n        cik: Union[IntString, List[IntString]] = None, # CIK or list of CIKs\n        exchange: Union[str, List[str], Exchange, List[Exchange]] = None, # The exchange or list of exchanges values: Nasdaq|NYSE|OTC|CBOE\n        ticker: Union[str, List[str]] = None, # The ticker or list of tickers\n        accession_number: Union[str, List[str]] = None # The accession number or list of accession numbers\n               ) -> Optional['Filings']:\n```\n\n----------------------------------------\n\nTITLE: Using Convenience Methods to Access Common 10-K Sections in Python\nDESCRIPTION: Demonstrates using specific convenience properties/methods (`business`, `risk_factors`, `management_discussion`, `directors_officers_and_governance`) on a `TenK` object (`tenk`) to easily access the text of frequently needed sections like Item 1, Item 1A, Item 7, and Item 10. Requires an existing `TenK` object from the `edgartools` library.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/README.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# Get Item 1 - Business\ntenk.business\n\n# Get Item 1A - Risk Factors\ntenk.risk_factors\n\n# Get Item 7 - Management's Discussion and Analysis\ntenk.management_discussion\n\n# Get Item 10 - Directors, Officers and Corporate Governance\ntenk.directors_officers_and_governance\n```\n\n----------------------------------------\n\nTITLE: Accessing financial statements from XBRL data\nDESCRIPTION: Retrieves the dictionary of financial statements contained within the `xbrl_data` object and assigns it to the `statements` variable. It then accesses and displays the 'CONSOLIDATEDBALANCESHEETS' statement from this dictionary using its key.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Reading-Data-From-XBRL.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nstatements = xbrl_data.statements\nstatements['CONSOLIDATEDBALANCESHEETS']\n```\n\n----------------------------------------\n\nTITLE: Retrieving the value of a specific concept for a specific period\nDESCRIPTION: Uses the `get_concept` method on the `statement` object to retrieve the data for 'us-gaap:NetIncomeLoss'. It then accesses the `value` attribute (likely a dictionary or similar structure) and retrieves the specific value associated with the key '2023', representing the net income for that year.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Reading-Data-From-XBRL.ipynb#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nstatement.get_concept('us-gaap:NetIncomeLoss').value.get('2023')\n```\n\n----------------------------------------\n\nTITLE: Defining TransactionActivity Dataclass for Transaction Summaries - Python\nDESCRIPTION: This code declares the TransactionActivity dataclass, which encapsulates the particulars of a specific transaction event. Fields include the transaction type, code, share count, value, unit price, and description. It is tailored for use in the TransactionSummary object for Forms 4 and 5. Requires Python 3.7+, dataclasses, and the typing.Any annotation.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/insider-filings.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass TransactionActivity:\n    \"\"\"Represents a specific transaction activity type\"\"\"\n    transaction_type: str\n    code: str\n    shares: Any = 0  # Handle footnote references\n    value: Any = 0\n    price_per_share: Any = None  # Add explicit price per share field\n    description: str = \"\"\n```\n\n----------------------------------------\n\nTITLE: Viewing an Attachment in a Browser with edgartools in Python\nDESCRIPTION: This snippet demonstrates using the `view()` method on an `Attachment` object to open and display its content (if it's HTML or text) in the default web browser. Assumes `attachment` is an instance of an `edgartools.Attachment` object obtained previously.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/attachments.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nattachment.view()\n```\n\n----------------------------------------\n\nTITLE: Converting XBRL Statement to Pandas DataFrame in Python\nDESCRIPTION: Shows how to convert a financial statement object (obtained from `xbrl.statements` or `xbrls.statements`) into a pandas DataFrame using the `.to_dataframe()` method. This enables further data manipulation and analysis using the pandas library. Requires `pandas` to be installed.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/xbrl.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n```python\n# Get DataFrame of income statement\ndf = income_statement.to_dataframe()\n```\n```\n\n----------------------------------------\n\nTITLE: Stitching and Rendering Multi-Period Financial Statements with edgartools (Python)\nDESCRIPTION: This snippet demonstrates fetching multiple filings for a company, parsing each as XBRL, then stitching together income statements over several quarters using the edgartools library. It shows how to standardize concepts, render stitched results as a table for display, and convert the stitched data into a pandas DataFrame for further analysis. Dependencies are 'edgar', 'pandas', and 'edgar.xbrl2.stitching', with key inputs being company ticker and form types; expected outputs are displayed tables and DataFrames for analytic use.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/edgar/xbrl2/docs/stitching-example.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom edgar import Company, XBRL\n\n# Get a list of filings for a company\ncompany = Company.find(\"AAPL\")  # Apple Inc.\nfilings = company.get_filings(form=\"10-Q\", count=4)  # Get the last 4 quarterly filings\n\n# Parse XBRL from each filing\nxbrl_list = [XBRL.from_filing(filing) for filing in filings]\n\n# Stitch income statements from the last 3 quarters\nstitched_income = XBRL.stitch_statements(\n    xbrl_list,\n    statement_type=\"IncomeStatement\",\n    period_type=\"THREE_QUARTERS\",\n    max_periods=3,\n    standard=True  # Use standardized concepts for consistent labels\n)\n\n# Render the stitched statement as a rich table\nincome_table = xbrl_list[0].render_stitched_statement(\n    stitched_income,\n    \"Apple Inc. Consolidated Statements of Operations\",\n    \"IncomeStatement\"\n)\n\n# Display the table\ndisplay(income_table)\n\n# Convert to pandas DataFrame for analysis\nimport pandas as pd\nfrom edgar.xbrl2.stitching import to_pandas\n\nincome_df = to_pandas(stitched_income)\ndisplay(income_df)\n```\n\n----------------------------------------\n\nTITLE: Generating Aggregated Summary DataFrames from Filing Objects - Python\nDESCRIPTION: Shows how to obtain an aggregated summary of trades using the to_dataframe method with detailed=False. The resulting pandas DataFrame summarizes the transactions rather than listing them individually. Requires pandas and an Ownership object with transaction details.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/insider-filings.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndf = form4.to_dataframe(detailed=False)\n```\n\n----------------------------------------\n\nTITLE: Accessing 10-K Data Using TenK Object in Python\nDESCRIPTION: Illustrates how to access specific sections (business description, risk factors, management discussion) and financial statements (balance sheet, income statement, cash flow) from a `TenK` Data Object obtained from a 10-K filing. It also shows how to convert a financial statement (balance sheet) into a pandas DataFrame using the `.to_dataframe()` method.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/data-objects.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntenk = filing.obj()\n\n# Access sections by name\nbusiness_description = tenk.business\nrisk_factors = tenk.risk_factors\nmd_and_a = tenk.management_discussion\n\n# Access financial statements\nbalance_sheet = tenk.balance_sheet\nincome_stmt = tenk.income_statement\ncash_flow = tenk.cash_flow_statement\n\n# Convert to DataFrame\ndf = tenk.balance_sheet.to_dataframe()\n```\n\n----------------------------------------\n\nTITLE: Accessing Financial Statements from XBRL Objects in Python\nDESCRIPTION: Illustrates two methods for retrieving financial statements from an `XBRL` or `XBRLS` statements object: using dedicated methods for common statements (e.g., `balance_sheet()`) and using dictionary key access for any statement type by its standard name (e.g., `statements[\"ComprehensiveIncome\"]`). Assumes a `statements` object is already available.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/xbrl.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python\n# Get basic statements\nbalance_sheet = statements.balance_sheet()\nincome_statement = statements.income_statement()\ncash_flow = statements.cash_flow_statement()\nstatement_of_equity = statements.statement_of_equity()\n\n# Access any statement by type\ncomprehensive_income = statements[\"ComprehensiveIncome\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Company Facts via get_facts Method (Python)\nDESCRIPTION: Calls get_facts() on a Company object to fetch an EntityFacts wrapper containing structured company data from the SEC. Dependencies: edgartools, Company object. Input: None. Output: EntityFacts object with raw fact data for the company (e.g., XBRL tags). Typically followed by dataframe conversion.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/index.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfacts = c.get_facts()\n```\n\n----------------------------------------\n\nTITLE: Parsing an SEC Form 4 Filing into an Ownership Object in Python\nDESCRIPTION: This snippet shows the process of obtaining SEC Form 4 filings for a specific company (Snowflake, ticker \"SNOW\") using `CompanyData` and `get_filings`. It then retrieves the XML content of the first filing using `.xml()` and parses it into an `Ownership` object using `Ownership.from_xml()`. This object contains structured data about security ownership changes.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/parsing-filing-data.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom edgar import CompanyData\nfrom edgar.ownership import Ownership\n\n# Get Snowflake\ncompany = CompanyData.for_ticker(\"SNOW\")\n\n# Get Form 4 filings for Snowflake\nfilings = company.get_filings(form=\"4\")\n\n# Get the first filing\nfiling = filings[0]\n\n# Get the filing xml\nxml = filing.xml()\n\n# Now get the OwnershipDocument\nownership = Ownership.from_xml(xml)\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Balance Sheet from XBRL Data in Python\nDESCRIPTION: This code calls the `balance_sheet()` method on the `statements` object derived from the parsed XBRL data (`xb`). This function extracts and organizes the relevant XBRL facts to present the company's balance sheet, usually as a structured data object.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-CustomTags.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nxb.statements.balance_sheet()\n```\n\n----------------------------------------\n\nTITLE: Extracting and Viewing Balance Sheet from XBRL - Python\nDESCRIPTION: Fetches the balance sheet from the XBRL object, displaying it for inspection. Similar workflow and dependencies as the income statement retrieval; the input is an XBRL instance and output is a balance sheet statement object.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-StandardizedStatements.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nbalance_sheet = xbrl.statements.balance_sheet()\nbalance_sheet\n```\n\n----------------------------------------\n\nTITLE: Displaying the Company's Balance Sheet\nDESCRIPTION: Accesses and displays the most recent Balance Sheet statement from the retrieved `Financials` object. This provides a quick way to view standard financial statements.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Viewing-Financial-Statements.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfinancials.balance_sheet\n```\n\n----------------------------------------\n\nTITLE: Converting edgartools Filings Object to Pandas DataFrame in Python\nDESCRIPTION: Calls the `to_pandas()` method on a `Filings` object (previously obtained, e.g., via `get_filings`) to convert the filings data, stored internally as a `pyarrow.Table`, into a pandas DataFrame. Requires the `pandas` library to be installed.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/using-the-filings-api.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndf = filings.to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Data Model Structure: Context Registry (JSON)\nDESCRIPTION: Defines the JSON structure for the Context Registry. Each entry, keyed by context ID, stores information about a specific reporting context, including entity identifier and scheme, period details (type, instant date, or start/end dates for duration), and any associated dimensional information (dimension name mapped to member name).\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/xbrl-development/xbrl-parser-design.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contextId\": {\n    \"entity\": {\n      \"identifier\": string,\n      \"scheme\": string\n    },\n    \"period\": {\n      \"type\": \"instant\"|\"duration\",\n      \"instant\": date|null,\n      \"startDate\": date|null,\n      \"endDate\": date|null\n    },\n    \"dimensions\": {\n      \"dimensionName\": \"memberName\",\n      ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Fund Filing XML to FundReport - Python\nDESCRIPTION: Extracts and parses the XML of the second fund filing in the funds list with FundReport.from_xml(), yielding a structured representation of the fund's filing details.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/Usage.ipynb#_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nFundReport.from_xml(funds[1].xml())\n```\n\n----------------------------------------\n\nTITLE: Advanced Statement Stitching with Custom Periods (StatementStitcher, edgartools, Python)\nDESCRIPTION: This advanced usage example directly utilizes the StatementStitcher class to extract and stitch statements from XBRL objects with custom period selection. It walks through extracting statement objects, customizing the stitcher, and rendering a result table, providing granular control for users requiring bespoke period strategies. Dependencies include edgar.xbrl2.stitching and its 'render_stitched_statement', with requirements for list inputs of statement objects; outputs include a display-ready table of the stitched statement covering custom periods.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/edgar/xbrl2/docs/stitching-example.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom edgar.xbrl2.stitching import StatementStitcher\n\n# Extract statements from XBRL objects\nstatements = []\nfor xbrl in xbrl_list:\n    statement = xbrl.get_statement_by_type(\"IncomeStatement\")\n    if statement:\n        statements.append(statement)\n\n# Create a stitcher and customize the period selection\nstitcher = StatementStitcher()\nstitcher.stitch_statements(\n    statements,\n    period_type=StatementStitcher.PeriodType.RECENT_PERIODS,\n    max_periods=3,\n    standard=True\n)\n\n# Render the stitched statement\nfrom edgar.xbrl2.stitching import render_stitched_statement\n\ntable = render_stitched_statement(\n    stitched_data,\n    \"Custom Period Selection\",\n    \"IncomeStatement\",\n    entity_info=xbrl_list[0].entity_info\n)\ndisplay(table)\n```\n\n----------------------------------------\n\nTITLE: Using Period Views for XBRL Statement Rendering in Python\nDESCRIPTION: Demonstrates how to discover available period selection views using `statements.get_period_views()` and then render a specific financial statement applying one of these views (e.g., \"Annual Comparison\") by passing the `period_view` argument to the statement access method. Assumes an initialized `statements` object.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/xbrl.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n```python\n# See available period views\nperiod_views = statements.get_period_views(\"IncomeStatement\")\nfor view in period_views:\n    print(f\"- {view['name']}: {view['description']}\")\n\n# Render with specific view\nannual_comparison = statements.income_statement(period_view=\"Annual Comparison\")\nquarter_comparison = statements.income_statement(period_view=\"Quarterly Comparison\")\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing the Latest Financials for a Company\nDESCRIPTION: Retrieves the latest financial statements (from 10-K or 10-Q filings) associated with the `Company` object `c` and assigns them to the `financials` variable. The second line displays the `Financials` object.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Viewing-Financial-Statements.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfinancials = c.financials\nfinancials\n```\n\n----------------------------------------\n\nTITLE: Converting Income Statement to Pandas DataFrame - Python\nDESCRIPTION: Converts the previously extracted income statement into a pandas DataFrame for analysis and manipulation. Requires pandas library and that 'income_statement' has already been created from an XBRL object. Output is a DataFrame.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-StandardizedStatements.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nincome_statement.to_dataframe()\n```\n\n----------------------------------------\n\nTITLE: Querying for a Specific 8-K Filing Using edgartools (Python)\nDESCRIPTION: This snippet constructs a Filing object for a specific company (Apple Inc.) and 8-K filing using edgartools, specifying company name, cik, form type, filing date, and accession number. The object enables subsequent attachment and content queries. Requires prior setup and import of edgartools modules.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Extract-Earnings-Releases.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfiling = Filing(company='Apple Inc.', cik=320193, form='8-K', filing_date='2024-08-01', accession_no='0000320193-24-000080')\n```\n\n----------------------------------------\n\nTITLE: Exporting Filings to pandas DataFrame - Python\nDESCRIPTION: Converts filings object to a pandas DataFrame using the to_pandas() method. Requires pandas to be imported. Offers tabular data for analysis and further processing.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/Usage.ipynb#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfilings.to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Querying Latest 10-K Filing with EdgarTools in Python\nDESCRIPTION: Initializes a Company object for \"AAPL\" (Apple Inc.), fetches the latest 10-K (annual report), and loads its XBRL representation. This snippet shows how to specify a ticker symbol, select a filing type, and parse the XBRL information. Required parameters: the company ticker and the filing type string. Assumes the 'edgar' and 'edgar.xbrl2' modules are properly imported.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-FinancialRatios.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nc = Company(\"AAPL\")\nfiling = c.latest(\"10-K\")\nxbrl = XBRL.from_filing(filing)\n```\n\n----------------------------------------\n\nTITLE: Accessing Specific 10-K Sections using Bracket Notation in Python\nDESCRIPTION: Explains how to retrieve the text content of a specific section (e.g., 'Item 1') from a `TenK` object (presumably stored in the variable `tenk`) using the dictionary-like bracket `[]` operator. Requires an existing `TenK` object from the `edgartools` library.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/README.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ntenk['Item 1']\n```\n\n----------------------------------------\n\nTITLE: Accessing 13F Holdings Data Using ThirteenF Object in Python\nDESCRIPTION: Illustrates retrieving investment holdings data from a `ThirteenF` Data Object (derived from a 13F-HR filing). It shows how to access the main information table (`infotable`), get the total market value (`total_value`) and total number of holdings (`total_holdings`), and convert the holdings table into a pandas DataFrame using `.to_dataframe()`.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/data-objects.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nthirteen_f = filing.obj()\n\n# Get holdings data\nholdings = thirteen_f.infotable\ntotal_value = thirteen_f.total_value\ncount = thirteen_f.total_holdings\n\n# Convert to DataFrame\nholdings_df = holdings.to_dataframe()\n```\n\n----------------------------------------\n\nTITLE: Accessing the Balance Sheet Statement with EdgarTools in Python\nDESCRIPTION: Retrieves the Balance Sheet financial statement from the previously parsed XBRL object (`xb`). It calls the `xb.statements.balance_sheet()` method and assigns the resulting Balance Sheet object to the `balance_sheet` variable, making the structured balance sheet data accessible.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-FraudAnalysis.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbalance_sheet = xb.statements.balance_sheet()\nbalance_sheet\n```\n\n----------------------------------------\n\nTITLE: Extracting and Viewing Income Statement from XBRL - Python\nDESCRIPTION: Retrieves the income statement from an XBRL object via the standardized interface, displaying the extracted statement. The input is an XBRL instance; the output is a statement object that can be displayed or further processed.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-StandardizedStatements.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nincome_statement = xbrl.statements.income_statement()\nincome_statement\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Income Statement from XBRL Data in Python\nDESCRIPTION: This code calls the `income_statement()` method on the `statements` object derived from the parsed XBRL data (`xb`). This method processes the underlying XBRL facts to reconstruct and return the company's income statement, typically in a structured format like a pandas DataFrame.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-CustomTags.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nxb.statements.income_statement()\n```\n\n----------------------------------------\n\nTITLE: Querying Individual XBRL Facts using Facts API in Python\nDESCRIPTION: Demonstrates using the `facts_view` attribute of an `XBRL` object to query individual XBRL facts. It showcases various filtering methods chained together (e.g., `by_concept`, `by_statement_type`, `by_period_keys`, `by_dimension`), text searching (`search_facts`), using predefined period views (`get_available_period_views`, `get_facts_by_period_view`), and converting query results to pandas DataFrames (`.to_dataframe()`). Requires `edgar` and `pandas`.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/xbrl.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom edgar import Company\nfrom edgar.xbrl2 import XBRL\n\n# Parse XBRL data\ncompany = Company('AAPL')\nfiling = company.latest_10k()\nxbrl = XBRL.from_filing(filing)\n\n# Access the facts view\nfacts = xbrl.facts_view\n\n# Query facts by various attributes\nrevenue = facts.query().by_concept('Revenue').to_dataframe()\nbalance_sheet_facts = facts.query().by_statement_type('BalanceSheet').to_dataframe()\n\n# Use predefined period views - returns important metadata including available periods\nincome_views = facts.get_available_period_views('IncomeStatement')\nfor view in income_views:\n    print(f\"- {view['name']}: {view['description']} ({view['facts_count']} facts)\")\n    \n# Get facts filtered by period view\nannual_comparison = facts.get_facts_by_period_view('IncomeStatement', 'Annual Comparison')\n\n# Flexible text search across all text fields (concept, label, element name)\nearnings_facts = facts.search_facts(\"Earnings Per Share\")\n\n# Filter by period keys - useful for custom period selection\nfacts.query().by_period_keys(['duration_2023-01-01_2023-12-31', \n                             'duration_2022-01-01_2022-12-31']).to_dataframe()\n\n# Query dimensional data\nfacts_by_segment = facts.query().by_dimension('Segment').to_dataframe()\n```\n```\n\n----------------------------------------\n\nTITLE: Filtering SEC Filings by Form using EdgarTools Python\nDESCRIPTION: This snippet demonstrates filtering SEC filings by their form type using the `form` parameter in the `get_filings` function from the `edgar` library. The form can be a string for a single form type, such as '10-K', or a list for multiple types. It returns a `Filings` object containing the matched filings. No additional dependencies are required beyond `edgar`. The `filings` result contains filings matching the requested form(s).\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/filtering-filings.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfilings = get_filings(form='10-K')\n```\n\nLANGUAGE: python\nCODE:\n```\nfilings = get_filings(form=['10-K', '10-Q'])\n```\n\n----------------------------------------\n\nTITLE: Fetching All 8-K Filings for a Company using edgartools in Python\nDESCRIPTION: Illustrates retrieving all historical SEC Form 8-K filings for a given company (`c`) using the `get_filings` method with the `form` parameter set to '8-K'. Requires a `Company` object instance. Returns a `Filings` object containing all matching filings.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/eightk-filings.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfilings = c.get_filings(form='8-K')\n```\n\n----------------------------------------\n\nTITLE: Converting Edgar Filings to Data Objects in Python\nDESCRIPTION: Demonstrates how to obtain specific SEC filings (Form 4, latest 10-K for Apple) using the `edgar` library functions `get_filings` and `get_company`. It then shows converting these `Filing` objects into their corresponding Data Objects (`Form4`, `TenK`) using the `.obj()` method for structured data access.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/data-objects.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom edgar import get_filings, get_company\n\n# Get a Form 4 filing\nfilings = get_filings(form=\"4\")\nfiling = filings[0]\nform4 = filing.obj()\n\n# Get the most recent 10-K for Apple\napple = get_company(\"AAPL\")\ntenk = apple.get_filings(form=\"10-K\").latest(1)[0].obj()\n```\n\n----------------------------------------\n\nTITLE: Defining Filter Parameters for get_filings in Python\nDESCRIPTION: Shows the method signature for `get_filings` within the `CompanyFilings` class (likely accessible via the `Company` object), detailing the parameters available for filtering filings. Filters include form type (e.g., '10-K'), accession number, file number, and XBRL status.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/company.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass CompanyFilings:\n    \n    ...\n    \n    def get_filings(self,\n                    *,\n                    form: str | List = None,\n                    accession_number: str | List = None,\n                    file_number: str | List = None,\n                    is_xbrl: bool = None,\n                    is_inline_xbrl: bool = None\n                    ):\n        \"\"\"\n        Get the company's filings and optionally filter by multiple criteria\n        :param form: The form as a string e.g. '10-K' or List of strings ['10-Q', '10-K']\n        :param accession_number: The accession number that uniquely identifies an SEC filing e.g. 0001640147-22-000100\n        :param file_number: The file number e.g. 001-39504\n        :param is_xbrl: Whether the filing is xbrl\n        :param is_inline_xbrl: Whether the filing is inline_xbrl\n        :return: The CompanyFiling instance with the filings that match the filters\n        \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Filtering SEC Filings Using Filings.filter Method in EdgarTools Python\nDESCRIPTION: This snippet demonstrates using the `filter` method of a `Filings` object to further narrow down results after fetching filings. The method supports similar parameters as `get_filings`, such as `form`, and operates on the in-memory dataset. It returns a filtered `Filings` object. Dependencies remain with the `edgar` package. The method is case-insensitive and primarily filters by SEC filing metadata.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/filtering-filings.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfilings().filter(form='10-K')\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Filing Attachment by Index in edgartools (Python)\nDESCRIPTION: This snippet accesses a particular attachment from a filing by passing an integer index to the attachments attribute. The example returns the first attachment (index 0). The Filing object must be defined, and attachments is expected to be indexable. Returns an Attachment object for further manipulation.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/README.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Get the first attachment\nattachment = filing.attachments[0]\n```\n\n----------------------------------------\n\nTITLE: Querying Revenue from Apple's Income Statement\nDESCRIPTION: This snippet showcases the query builder functionality of `edgartools`. It queries the parsed XBRL data (`xbrl` object for Apple) to find facts containing the text 'Revenue' within the 'IncomeStatement' and returns the results as a pandas DataFrame.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-QuarterlyStatements.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n(xbrl.query()\n    .by_text(\"Revenue\")\n    .by_statement_type(\"IncomeStatement\")\n    .to_dataframe()\n )\n```\n\n----------------------------------------\n\nTITLE: Importing and Initializing edgartools in Python\nDESCRIPTION: Imports all edgartools components and sets the user identity that the SEC requires for API requests. The set_identity() function must be called with a valid email address before making SEC data requests. Input: user email string; Output: identity set for API calls.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Filtering-by-industry.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom edgar import *\n\nset_identity(\"user@edgartools.io\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fund Information by Ticker using edgartools in Python\nDESCRIPTION: This snippet utilizes the `get_fund()` function provided by the `edgartools` library to fetch information about a specific mutual fund. The fund is identified by its ticker symbol, \"CAAPX\" in this case. The function returns a fund object containing details about the fund, which is stored in the `fund` variable and subsequently displayed.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Fund-Filings.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfund = get_fund(\"CAAPX\")\nfund\n```\n\n----------------------------------------\n\nTITLE: Fetching and Parsing a 13F-HR Filing Data Object in edgartools (Python)\nDESCRIPTION: This code illustrates how to fetch filings of type '13F-HR', select the first filing, and obtain its parsed data object with obj(). It demonstrates automated downloading and parsing functionality for specific form types. Requires the edgartools library; returns a ThirteenF object or None if parsing is not available.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/README.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfilings = get_filings(form=\"13F-HR\")\nfiling = filings[0]\nthirteenf = filing.obj()\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Latest Filing (Optionally Filtered) in Python\nDESCRIPTION: Demonstrates how to get the most recent filing using the `.latest()` method on a `CompanyFilings` object. This is often combined with filtering, such as filtering by form type (e.g., '10-Q') first, to get the latest filing of a specific type. The calls can be chained.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/company.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Latest filing makes sense if you filter by form  type e.g. 10-Q\nsnow_10Qs = snow.get_filings(form='10-Q')\nlatest_10Q = snow_10Qs.latest()\n\n# Or chain the function calls\nsnow.get_filings(form='10-Q').latest()\n```\n\n----------------------------------------\n\nTITLE: Filtering Filings by Form Type - Python\nDESCRIPTION: Fetches filings only for a specific SEC form type, here '6-K', using the 'form' parameter. Allows targeting of specific reporting instruments or disclosures.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/Usage.ipynb#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfilings_6k = get_filings(form=\"6-K\")\nfilings_6k\n```\n\n----------------------------------------\n\nTITLE: Importing Company Class and Accessing Financials - EdgarTools Python\nDESCRIPTION: This snippet demonstrates importing the Company class from the edgar package, instantiating a Company object for a specific ticker (e.g., 'AAPL'), and retrieving its financials property. The financials property returns a Financials instance, allowing further access to structured statements. Dependencies: edgar library must be installed. Input: company ticker symbol as a string. Output: a Financials object tied to the selected company.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/company-financials.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom edgar import Company\n\ncompany = Company(\"AAPL\")\nfinancials = company.financials\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Latest N Filings using edgartools in Python\nDESCRIPTION: Uses the `latest(n)` method on a `Filings` object to retrieve the most recent filings based on `filing_date`. Providing the parameter `n` (e.g., `n=5`) returns the specified number of latest filings as a new `Filings` object.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/using-the-filings-api.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfiling = filings.latest(n=5)\nfiling\n```\n\n----------------------------------------\n\nTITLE: Combining Annual and Quarterly XBRL Filings for Statement Stitching (edgartools, Python)\nDESCRIPTION: This example combines annual and quarterly XBRL filings for a company, sorts them by filing date, then stitches income statements across mixed periods using edgartools. It demonstrates how to merge, sort, and process filings for mixed-period analysis—the inputs are company object and form types, outputting stitched statement data reflecting both long- and short-term financial trends. Major dependencies include the 'edgar' XBRL API and access to statement types and period selection parameters.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/edgar/xbrl2/docs/stitching-example.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Get both annual and quarterly filings\nannual_filings = company.get_filings(form=\"10-K\", count=3)  # Last 3 annual filings\nquarterly_filings = company.get_filings(form=\"10-Q\", count=4)  # Last 4 quarterly filings\n\n# Combine and sort by filing date (newest first)\nall_filings = annual_filings + quarterly_filings\nall_filings.sort(key=lambda f: f.filing_date, reverse=True)\n\n# Parse XBRL from all filings\nxbrl_list = [XBRL.from_filing(filing) for filing in all_filings]\n\n# Stitch income statements with mixed periods\nstitched_mixed = XBRL.stitch_statements(\n    xbrl_list,\n    statement_type=\"IncomeStatement\",\n    period_type=StatementStitcher.PeriodType.RECENT_PERIODS,\n    max_periods=5,  # Show up to 5 periods\n    standard=True\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Parsing SEC Ownership Documents with EdgarTools - Python\nDESCRIPTION: This snippet demonstrates how to use the EdgarTools library to retrieve SEC Form 4 ownership filings for a specific company (e.g., Snowflake), download the associated XML, and parse it into an OwnershipDocument instance. Requires the 'edgar' Python package and internet access. Inputs include the company's stock ticker (e.g., 'SNOW'); outputs include parsed transaction and holding data accessible through the OwnershipDocument object. Assumes the user has knowledge of SEC form types and access to the EdgarTools data structures.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/ownership.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom edgar import CompanyData\nfrom edgar.ownership import Ownership\n\n# Get Snowflake\ncompany = CompanyData.for_ticker(\"SNOW\")\n\n# Get Form 4 filings for Snowflake\nfilings = company.get_filings(form=\"4\")\n\n# Get the first filing\nfiling = filings[0]\n\n# Get the filing xml\nxml = filing.xml()\n\n# Now get the OwnershipDocument\nownership = Ownership.from_xml(xml)\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Cash Flow Statement from XBRL Data in Python\nDESCRIPTION: This code executes the `cash_flow_statement()` method available on the `statements` object (obtained from the `xb` XBRL object). It retrieves and structures the cash flow statement information parsed from the source XBRL filing.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-CustomTags.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nxb.statements.cash_flow_statement()\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Facts (Total Costs) from Income Statement with EdgarTools in Python\nDESCRIPTION: Demonstrates querying the parsed XBRL data (`xb`) using the `edgartools` query builder. It specifically targets the 'IncomeStatement', filters facts by the label 'Total costs', and converts the resulting data into a Pandas DataFrame for inspection. This shows how to extract specific data points based on their common language label.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-FraudAnalysis.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n(xb.query()\n .from_statement(\"IncomeStatement\")\n .by_label(\"Total costs\")\n .to_dataframe()\n )\n```\n\n----------------------------------------\n\nTITLE: Data Model Structure: Element Catalog (JSON)\nDESCRIPTION: Defines the JSON structure for the Element Catalog within the data model. Each entry, keyed by element ID, stores critical metadata about an XBRL element, including its name, data type, period type (instant or duration), balance attribute (debit/credit), abstract status, and various associated labels (standard, period start/end, negated, documentation).\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/xbrl-development/xbrl-parser-design.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"elementId\": {\n    \"name\": string,\n    \"dataType\": string,\n    \"periodType\": \"instant\"|\"duration\",\n    \"balance\": \"debit\"|\"credit\"|null,\n    \"abstract\": boolean,\n    \"labels\": {\n      \"standard\": string,\n      \"periodStart\": string,\n      \"periodEnd\": string,\n      \"negated\": string,\n      \"documentation\": string,\n      ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering edgartools Filings by Form Type in Python\nDESCRIPTION: Uses the `filter()` method with the `form` parameter on a `Filings` object to select filings of a specific type, such as \"10-K\". This filters the existing `Filings` object in place or returns a new filtered object depending on the implementation details.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/using-the-filings-api.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfilings.filter(form=\"10-K\") \n```\n\n----------------------------------------\n\nTITLE: Chaining Latest Filing and Object Parsing in edgartools (Python)\nDESCRIPTION: This example demonstrates how to fetch the latest filing of a specific type (e.g., '10-Q') for a given company and convert it into a structured object. It relies on the Company API from edgartools and assumes the company instance has already been created. The obj() method parses associated data files; outputs vary depending on the filing.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/README.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nCompany(\"AAPL\")\n        .latest(\"10-Q\")\n        .obj()\n```\n\n----------------------------------------\n\nTITLE: Displaying the Company's Cash Flow Statement\nDESCRIPTION: Accesses and displays the most recent Cash Flow Statement from the `Financials` object (`financials`).\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Viewing-Financial-Statements.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfinancials.cashflow\n```\n\n----------------------------------------\n\nTITLE: Filtering SEC Filings by CIK using EdgarTools Python\nDESCRIPTION: This snippet retrieves all filings for a specific company using the CIK (Central Index Key) identifier via the `cik` parameter in `get_filings`. Pass the CIK as a string to retrieve filings for that company. The result is a `Filings` object containing all filings for the provided CIK. Requires the `edgar` library.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/filtering-filings.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfilings = get_filings(cik='0000320193')\n```\n\n----------------------------------------\n\nTITLE: Accessing a statement by name ('CONSOLIDATEDSTATEMENTSOFOPERATIONS')\nDESCRIPTION: Retrieves the 'CONSOLIDATEDSTATEMENTSOFOPERATIONS' (Income Statement) from the `statements` dictionary using its name as the key via the bracket accessor.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Reading-Data-From-XBRL.ipynb#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nstatements['CONSOLIDATEDSTATEMENTSOFOPERATIONS']\n```\n\n----------------------------------------\n\nTITLE: Downloading Bulk EDGAR Data (Submissions/Facts) using edgartools in Python\nDESCRIPTION: Provides the function signature and an example call for `download_edgar_data`, a function likely within the `edgartools` library used to download bulk company submissions, facts, and reference data from EDGAR. Parameters control which datasets are downloaded (submissions, facts, reference). Calling the function initiates the download to a local directory (default `~/.edgar`).\nSOURCE: https://github.com/dgunning/edgartools/blob/main/README.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef download_edgar_data(submissions: bool = True, facts: bool = True, reference: bool = True):\n    \"\"\"\n    Download all the company data from Edgar\n    :param submissions: Download all the company submissions\n    :param facts: Download all the company facts\n    :param reference: Download reference data\n    \"\"\"\ndownload_edgar_data()\n\n```\n\n----------------------------------------\n\nTITLE: Defining XBRL Element Catalog Data Structure in JSON\nDESCRIPTION: This JSON-like structure defines the schema for the Element Catalog within the Data Model. It maps each element ID to its properties derived from the taxonomy schema, including name, data type, period type (instant/duration), balance type (debit/credit), abstract status, and various labels extracted from the label linkbase.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/edgar/xbrl2/docs/xbrl-parser-design.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n```\n{\n  \"elementId\": {\n    \"name\": string,\n    \"dataType\": string,\n    \"periodType\": \"instant\"|\"duration\",\n    \"balance\": \"debit\"|\"credit\"|null,\n    \"abstract\": boolean,\n    \"labels\": {\n      \"standard\": string,\n      \"periodStart\": string,\n      \"periodEnd\": string,\n      \"negated\": string,\n      \"documentation\": string,\n      ...\n    }\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Specific Filing and Extracting XBRL Data in Python\nDESCRIPTION: This snippet first creates a `Filing` object representing a specific Union Pacific 10-K filing using details like company name, CIK, form, date, and accession number. It then utilizes the `XBRL.from_filing()` class method to parse the XBRL data contained within that filing, storing the result in the `xb` variable.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-CustomTags.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfiling = Filing(company='UNION PACIFIC CORP', cik=100885, form='10-K', filing_date='2013-02-08', accession_no='0001193125-13-045658')\nxb = XBRL.from_filing(filing)\n\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Filtering of SEC Filings using get_filings in EdgarTools Python\nDESCRIPTION: This block illustrates various `get_filings` usage patterns, including filtering by year, quarter, form type, and date. The code uses positional and keyword arguments to filter by fiscal year(s), quarters, date ranges, and form types. It also demonstrates combining filters. Dependencies include the `edgar` library. Inputs are typically integers, lists, and/or strings; outputs are `Filings` objects meeting the criteria.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/filtering-filings.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom edgar import get_filings\n\n# Get filings for 2021\nfilings_ = get_filings(2021) \n\n# Get filings for 2021 Q4\nfilings_ = get_filings(2021, 4) \n\n# Get filings for 2021 Q3 and Q4\nfilings_ = get_filings(2021, [3,4]) \n\n# Get filings for 2020 and 2021\nfilings_ = get_filings([2020, 2021]) \n\n# Get filings for Q4 of 2020 and 2021\nfilings_ = get_filings([2020, 2021], 4) \n\n# Get filings between 2010 and 2021 - does not include 2021\nfilings_ = get_filings(range(2010, 2021)) \n\n# Get filings for 2021 Q4 for form D\nfilings_ = get_filings(2021, 4, form=\"D\") \n\n# Get filings for 2021 Q4 on \"2021-10-01\"\nfilings_ = get_filings(2021, 4, filing_date=\"2021-10-01\") \n\n# Get filings for 2021 Q4 between \"2021-10-01\" and \"2021-10-10\"\nfilings_ = get_filings(2021, 4, filing_date=\"2021-10-01:2021-10-10\") \n                                                                       \n```\n\n----------------------------------------\n\nTITLE: Retrieving Insider Filings by Form Type - Edgartools - Python\nDESCRIPTION: Illustrates filtering company insider filings by specifying a single form type (Form 4 in this example) using the get_filings method of the Company class. Accepts both string and integer identifiers for forms and returns related filings. Edgartools package and Company class imports are necessary.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/insider-filings.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfilings = c.get_filings(form=4)\n```\n\n----------------------------------------\n\nTITLE: Controlling Period Selection for Statement Stitching (edgartools, Python)\nDESCRIPTION: This snippet illustrates how to use StatementStitcher and XBRL.stitch_statements to select different time periods for stitched statements, such as recent quarters, annual periods, and multi-year comparisons. It demonstrates the selection of various period types for different statement types, assisting users in tailoring financial statement analysis. Key dependencies are 'edgar.xbrl2.stitching' and the edgartools XBRL API, requiring lists of XBRL-parsed filings; the output is a set of stitched financial statement datasets.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/edgar/xbrl2/docs/stitching-example.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom edgar.xbrl2.stitching import StatementStitcher\n\n# Available period types:\n# 1. For income statements and cash flow statements (duration periods)\nstitched_income_quarterly = XBRL.stitch_statements(\n    xbrl_list,\n    statement_type=\"IncomeStatement\",\n    period_type=StatementStitcher.PeriodType.THREE_QUARTERS,  # Most recent 3 quarters\n    standard=True\n)\n\nstitched_income_annual = XBRL.stitch_statements(\n    xbrl_list,\n    statement_type=\"IncomeStatement\",\n    period_type=StatementStitcher.PeriodType.ANNUAL_COMPARISON,  # Annual periods only\n    standard=True\n)\n\n# 2. For balance sheets (instant periods)\nstitched_balance_sheet = XBRL.stitch_statements(\n    xbrl_list,\n    statement_type=\"BalanceSheet\",\n    period_type=StatementStitcher.PeriodType.THREE_YEAR_COMPARISON,  # Last 3 year-ends\n    standard=True\n)\n\n# 3. For any statement type\nstitched_recent = XBRL.stitch_statements(\n    xbrl_list,\n    statement_type=\"IncomeStatement\",\n    period_type=StatementStitcher.PeriodType.RECENT_PERIODS,  # Most recent periods (default)\n    max_periods=3,\n    standard=True\n)\n\nstitched_all = XBRL.stitch_statements(\n    xbrl_list,\n    statement_type=\"IncomeStatement\",\n    period_type=StatementStitcher.PeriodType.ALL_PERIODS,  # All available periods\n    max_periods=10,  # Limit to 10 periods maximum\n    standard=True\n)\n```\n\n----------------------------------------\n\nTITLE: Extracting and Viewing Cash Flow Statement from XBRL - Python\nDESCRIPTION: Extracts the cash flow statement from the XBRL object; displays the resulting statement object. Inputs a valid XBRL instance and returns a standardized cash flow statement. Useful for comprehensive financial statement analysis.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-StandardizedStatements.ipynb#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ncashflow_statement = xbrl.statements.cash_flow_statement()\ncashflow_statement\n```\n\n----------------------------------------\n\nTITLE: Converting a 10-K Filing to a TenK Object in Python\nDESCRIPTION: This snippet demonstrates how to retrieve the latest SEC Form 10-K filings using `edgar.get_filings` and then convert the first retrieved filing into a structured `TenK` data object using the `filing.obj()` method. This method parses the underlying data file (typically XML) associated with the filing.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/parsing-filing-data.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n    from edgar import get_filings \n    filings = get_filings(form=\"10-K\")\n    filing = filings[0]\n    tenk = filing.obj()\n```\n\n----------------------------------------\n\nTITLE: Accessing XBRL Data for a Filing using edgartools in Python\nDESCRIPTION: Calls the `xbrl()` method on a `Filing` object. If the filing includes XBRL (eXtensible Business Reporting Language) data, this method downloads, parses, and structures it, returning a `FilingXbrl` object which provides convenient access to the structured financial data. If the filing does not contain XBRL, the method returns `None`.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/using-the-filings-api.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfiling_xbrl = filing.xbrl()\n```\n\n----------------------------------------\n\nTITLE: Getting a Specific Filing using Indexing in Python\nDESCRIPTION: Demonstrates how to retrieve a single `Filing` object from a collection (presumably returned by `get_filings()`) using index access (`[]`). Assumes `get_filings()` has been called and returned a list-like object containing filings.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/working-with-filings.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfilings = get_filings()\nfiling = filings[0]\n```\n\n----------------------------------------\n\nTITLE: Extracting Stitched Balance Sheet using edgartools in Python\nDESCRIPTION: Accesses the `statements` property of the `XBRLS` object (containing parsed XBRL data from multiple filings) and calls the `balance_sheet()` method to extract and stitch together the balance sheet data across the periods covered by the filings. The resulting stitched balance sheet is typically returned as a pandas DataFrame.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-StitchingStatements.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nbalance_sheet = xbrls.statements.balance_sheet()\nbalance_sheet\n```\n\n----------------------------------------\n\nTITLE: Stitching Quarterly (10-Q) Income Statements in Python\nDESCRIPTION: Retrieves the 5 most recent 10-Q (quarterly) filings for the previously defined company object (`c`, which is Apple in this context). It parses the XBRL data from these quarterly filings and then extracts the stitched income statement covering these quarters using `xbrls.statements.income_statement()`.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-StitchingStatements.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfilings = c.get_filings(form=\"10-Q\").head(5)\nxbrls = XBRLS.from_filings(filings)\nxbrls.statements.income_statement()\n```\n\n----------------------------------------\n\nTITLE: Filtering 8-K Filings by Start Date using edgartools in Python\nDESCRIPTION: Demonstrates filtering SEC Form 8-K filings for a company (`c`) to include only those filed on or after a specific date ('2022-01-01'). Uses the `get_filings` method with `form` and `date` parameters. The date format 'YYYY-MM-DD:' specifies a start date.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/eightk-filings.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfilings = c.get_filings(form='8-K', date='2022-01-01:')\n```\n\n----------------------------------------\n\nTITLE: Example Financial Ratio Calculation and Usage in Python\nDESCRIPTION: This usage example demonstrates initializing the FinancialRatioAnalyzer with the required statement DataFrames and periods, invoking methods to calculate current ratio and return on assets, and accessing results. Outputs include lists of RatioAnalysis objects per ratio/period, and calculation DataFrames can be exported to Excel. Key parameters are the accounting statement DataFrames and the reporting periods.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/edgar/xbrl2/analysis/DESIGN.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nanalyzer = FinancialRatioAnalyzer(\n    balance_sheet_df=balance_sheet_df,\n    income_stmt_df=income_stmt_df,\n    cash_flow_df=cash_flow_df,\n    periods=['2023-12-31', '2022-12-31', '2021-12-31']\n)\n\n# Calculate ratios\ncurrent_ratios = analyzer.calculate_current_ratio()\nroa_ratios = analyzer.calculate_return_on_assets()\n\n# Access results\nfor ratio in current_ratios:\n    print(f\"{ratio.name} ({ratio.period}): {ratio.result:.2f}\")\n    # DataFrame available for Excel export\n    ratio.calculation_df.to_excel(f\"{ratio.name}_{ratio.period}.xlsx\")\n```\n\n----------------------------------------\n\nTITLE: Finding CIK by Ticker and Initializing Company with Edgartools in Python\nDESCRIPTION: Uses the find_cik function from the edgar.reference.tickers module to map a ticker ('AAPL') to its corresponding CIK number, then fetches the Company using that CIK. Demonstrates breaking down the lookup step and direct CIK use. Requires the edgartools library to be imported.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Ticker-Search-with-edgartools.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom edgar.reference.tickers import find_cik, get_cik_tickers, get_mutual_fund_tickers\n\napple_cik = find_cik(\"AAPL\")\naapl = Company(apple_cik)\naapl\n```\n\n----------------------------------------\n\nTITLE: Randomly Sampling Filings using sample() in Python\nDESCRIPTION: This snippet uses the `sample()` method on the `filings` object, similar to pandas DataFrames, to randomly select and display 5 filings from the collection. This is useful for getting a random subset of the data.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Beginners-Guide.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfilings.sample(5)\n```\n\n----------------------------------------\n\nTITLE: Downloading Exhibit HTML Content Using edgartools (Python)\nDESCRIPTION: This snippet downloads the HTML content of the selected exhibit (at index 1) using the 'download' method. It returns the HTML as a byte string or decoded text, depending on API implementation. Requires that the exhibit and attachments have been previously retrieved.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Extract-Earnings-Releases.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nhtml = exhibits[1].download()\n```\n\n----------------------------------------\n\nTITLE: Filtering Filings by Year - Python\nDESCRIPTION: Fetches SEC filings for a specified year, in this case 2022, by passing the 'year' parameter to get_filings(). Returns only filings within that year, allowing temporal filtering.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/Usage.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfilings = get_filings(year=2022)\nfilings\n```\n\n----------------------------------------\n\nTITLE: Filtering for Exhibit Attachments Using edgartools (Python)\nDESCRIPTION: This snippet filters the full set of attachments to return only those classified as exhibits by calling the 'exhibits' attribute. The returned collection can be indexed or queried further. This requires that 'attachments' was previously set and that the filing includes exhibits.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Extract-Earnings-Releases.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nexhibits = attachments.exhibits\nexhibits\n```\n\n----------------------------------------\n\nTITLE: Selecting Bottom N Filings using tail() in Python\nDESCRIPTION: This snippet uses the `tail()` method on the `filings` object, similar to pandas DataFrames, to select and display the last 5 filings from the collection. This helps in examining the end of the dataset.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Beginners-Guide.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfilings.tail(5)\n```\n\n----------------------------------------\n\nTITLE: Querying XBRL Filings Using edgartools - Python\nDESCRIPTION: This snippet demonstrates how to retrieve SEC filings filtered to only those containing XBRL data using the edgartools library. The get_filings function is called with index set to 'xbrl', returning a collection of filing objects. Dependencies include an import or availability of the get_filings function from edgartools. The primary parameter is index, which filters the type of filings. The output is a list-like object of filings containing XBRL metadata. Requires edgartools installed and configured.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/working-with-xbrl.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfilings = get_filings(index=\"xbrl\")\n```\n\n----------------------------------------\n\nTITLE: Processing Multiple 10-K Filings and Extracting Cash Flow for CMCSA (Python)\nDESCRIPTION: Demonstrates handling multiple filings for Comcast (\"CMCSA\"). It retrieves the five most recent \"10-K\" filings, parses XBRL data from all of them collectively using `XBRLS.from_filings()`, extracts a potentially combined or time-series cash flow statement using `xbrls.statements.cash_flow_statement()`, and displays the result.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-Cashflow-Statements.ipynb#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nc = Company(\"CMCSA\")\nfilings = c.get_filings(form=\"10-K\").head(5)\nxbrls = XBRLS.from_filings(filings)\ncashflow_statement = xbrls.statements.cash_flow_statement()\ncashflow_statement\n```\n\n----------------------------------------\n\nTITLE: Querying 20-F SEC Filings for 2024 Using edgartools in Python\nDESCRIPTION: Retrieves a list of SEC 20-F filings (annual reports for foreign private issuers) for the year 2024, 4th quarter. Requires edgartools to be installed and initialized. Key parameters: form (form type), year, quarter. Input: form=\"20-F\", year=2024, quarter=4; Output: filings iterable.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Filtering-by-industry.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfilings = get_filings(form=\"20-F\", year=2024, quarter=4)\n```\n\n----------------------------------------\n\nTITLE: Generating Standardized Financial Statements using edgartools\nDESCRIPTION: This Python snippet demonstrates how to use the `edgartools` library to parse XBRL data and generate standardized financial statements. It imports necessary classes (`XBRL`, `Statements`), parses XBRL files from a directory, creates a `Statements` object, retrieves an original income statement, and then calls the same method (`income_statement`) with the `standard=True` parameter to obtain the standardized version, showcasing the practical application of the concept standardization module.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/edgar/xbrl2/docs/standardization-design.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom edgar.xbrl2.xbrl import XBRL\nfrom edgar.xbrl2.statements import Statements\n\n# Parse XBRL files\nxbrl = XBRL.parse_directory('path/to/xbrl/files')\nstatements = Statements(xbrl)\n\n# Display with company-specific labels\noriginal_income_stmt = statements.income_statement()\n\n# Display with standardized labels\nstandardized_income_stmt = statements.income_statement(standard=True)\n```\n\n----------------------------------------\n\nTITLE: Parsing Form 4 Filings into Form4 Objects - Python\nDESCRIPTION: Converts a filing object to a Form4 data object via the obj() method, unlocking properties tailored to Form 4 change-in-ownership filings. This enables extraction of transaction details and summaries. The usage assumes a compatible filing object.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/insider-filings.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nform4 = filing.obj()\n```\n\n----------------------------------------\n\nTITLE: Extracting and Displaying CRSR Cash Flow Statement from XBRL (Python)\nDESCRIPTION: Extracts the cash flow statement from the previously parsed `xbrl` object (for CRSR) using the `statements.cash_flow_statement()` method. The resulting `statement` object, likely a pandas DataFrame or similar structure representing the financial statement, is then displayed.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-Cashflow-Statements.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nstatement = xbrl.statements.cash_flow_statement()\nstatement\n```\n\n----------------------------------------\n\nTITLE: Listing labels associated with concepts in a statement\nDESCRIPTION: Accesses the `labels` attribute of a previously obtained `statement` object ('CONSOLIDATEDSTATEMENTSOFCOMPREHENSIVEINCOME'). This typically shows the human-readable labels corresponding to the XBRL concepts within that statement.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Reading-Data-From-XBRL.ipynb#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nstatement.labels\n```\n\n----------------------------------------\n\nTITLE: Installing edgartools with pip in Bash\nDESCRIPTION: This command installs the latest version of edgartools from PyPI using pip. The install process requires Python and pip to be set up in your environment. No additional arguments are necessary, and successful execution allows the library to be imported in Python scripts.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install edgartools\n```\n\n----------------------------------------\n\nTITLE: Getting Filing Content as Markdown using edgartools in Python\nDESCRIPTION: Calls the `markdown()` method on a `Filing` object. This method retrieves the filing's primary HTML document and converts it into Markdown format, returning the result as a string.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/using-the-filings-api.md#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfiling.markdown()\n```\n\n----------------------------------------\n\nTITLE: Fetching Multi-Year Filings and Creating MultiFinancials - EdgarTools Python\nDESCRIPTION: This snippet illustrates importing MultiFinancials from the edgar library, retrieving recent 10-K filings (here, 5 years) for a company, and initializing a MultiFinancials instance with those filings. MultiFinancials enables consolidated access to statements across multiple years. Dependencies: edgar library, and a Company instance. Input: desired filing type and count. Output: a MultiFinancials object encapsulating multiple periods.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/company-financials.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom edgar import MultiFinancials\n\nfilings = company.latest(\"10-K\", 5)\nfinancials = MultiFinancials(filings)\n```\n\n----------------------------------------\n\nTITLE: Viewing Filing Content as Markdown in Console using edgartools in Python\nDESCRIPTION: Calls the `view()` method on a `Filing` object. This method retrieves the filing's primary HTML content, converts it to Markdown, and displays the result directly in the console. This is useful for quickly inspecting content in a terminal but can be slow for very large HTML documents.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/using-the-filings-api.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfiling.view()\n```\n\n----------------------------------------\n\nTITLE: Excluding Amendments when Fetching Forms - Python\nDESCRIPTION: Fetches '6-K' filings while omitting amendments by passing amendments=False. Then filters the results for amendments to confirm exclusion. Demonstrates the use of the 'amendments' parameter and .filter() method.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/Usage.ipynb#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfilings_6k = get_filings(form=\"6-K\", amendments=False)\nfilings_6k.filter(form=\"6-K/A\")\n```\n\n----------------------------------------\n\nTITLE: Converting Cash Flow Statement to Pandas DataFrame - Python\nDESCRIPTION: Converts the cash flow statement object into a pandas DataFrame. Necessary for further transformation, visualization, or export. Depends on 'cashflow_statement' being previously extracted and pandas being available.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-StandardizedStatements.ipynb#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ncashflow_statement.to_dataframe()\n```\n\n----------------------------------------\n\nTITLE: Querying the facts DataFrame for a specific concept\nDESCRIPTION: Queries the DataFrame returned by `instance.facts` using the Pandas `query` method. It filters the DataFrame to show only the rows where the 'concept' column matches 'ffd:FormTp'.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Reading-Data-From-XBRL.ipynb#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ninstance.facts.query(\"concept=='ffd:FormTp'\")\n```\n\n----------------------------------------\n\nTITLE: Defining Function to Get Quarterly Statements\nDESCRIPTION: This defines a Python function `quarterly_statements` that takes a stock ticker as input. It creates a `Company` object, fetches the latest 10-Q filing, parses its XBRL data using `XBRL.from_filing`, and prints the balance sheet and income statement derived from the filing. An example call is made using the second ticker from the previously generated list.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-QuarterlyStatements.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef quarterly_statements(ticker):\n    print(ticker)\n    c = Company(ticker)\n    filings = c.latest(\"10-Q\", 20)\n    xbrl0 = XBRL.from_filing(filings[0])\n    balance_sheet = xbrl0.statements.balance_sheet()\n    print(balance_sheet)\n\n    income_statement = xbrl0.statements.income_statement()\n    print(income_statement)\n\n    #xbrl_last = XBRL.from_filing(filings[-1])\n    #balance_sheet = xbrl_last.statements.balance_sheet()\n    #print(balance_sheet)\n\nquarterly_statements(tickers[1])\n```\n\n----------------------------------------\n\nTITLE: Filtering edgartools Filings by Form Type Including Amendments in Python\nDESCRIPTION: Uses the `filter()` method on a `Filings` object, specifying both the `form` type (e.g., \"10-K\") and setting the boolean parameter `amendments=True` to include amended versions of the form (e.g., \"10-K/A\") in the filtered results.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/using-the-filings-api.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfilings.filter(form=\"10-K\", amendments=True) \n```\n\n----------------------------------------\n\nTITLE: Standardization Control When Stitching XBRL Statements (edgartools, Python)\nDESCRIPTION: These snippets compare statement stitching with and without the standardization option. With standardization disabled, original company-specific XBRL labels are preserved; when enabled, concepts are normalized across filings and companies for consistent analysis. The main dependency is edgartools’ XBRL.stitch_statements, which requires lists of XBRL objects and standardization flags; output is stitched representations of financial statements, differing in labeling style based on the 'standard' argument.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/edgar/xbrl2/docs/stitching-example.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Without standardization - company-specific labels are preserved\nstitched_raw = XBRL.stitch_statements(\n    xbrl_list,\n    statement_type=\"IncomeStatement\",\n    period_type=\"THREE_QUARTERS\",\n    standard=False  # Use original, non-standardized labels\n)\n\n# With standardization - consistent labels across filings\nstitched_standardized = XBRL.stitch_statements(\n    xbrl_list,\n    statement_type=\"IncomeStatement\",\n    period_type=\"THREE_QUARTERS\",\n    standard=True  # Use standardized concept labels (recommended)\n)\n```\n\n----------------------------------------\n\nTITLE: Stitching Older Apple 10-K Income Statements in Python\nDESCRIPTION: Fetches specific 10-K filings for Apple (\"AAPL\") within the date range from January 1, 2019, to November 5, 2020, limiting to the first two results. It then parses the XBRL data from these filings and extracts the stitched income statement using `xbrls.statements.income_statement()`.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-StitchingStatements.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nc = Company(\"AAPL\")\nfilings = c.get_filings(form=\"10-K\", filing_date=\"2019-01-01:2020-11-05\").head(2)\nxbrls = XBRLS.from_filings(filings)\nxbrls.statements.income_statement()\n```\n\n----------------------------------------\n\nTITLE: Querying a Filing by Accession Number with edgartools in Python\nDESCRIPTION: This snippet imports all components from the edgar package and retrieves a specific SEC filing using its accession number via the find() function. No additional dependencies are required aside from edgartools. The accession number is provided as a string argument; the result is assigned to the variable 'filing', which represents a filing record for further processing. The output returns the filing object for exploration; the snippet assumes the 'edgar' module and proper environment setup.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Reporting-Period.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom edgar import *\n\nfiling = find(\"0000895421-24-000436\")\nfiling\n\n```\n\n----------------------------------------\n\nTITLE: Directly Converting Cash Flow Statement to DataFrame in Python\nDESCRIPTION: Demonstrates direct conversion of the cash flow statement object to a pandas DataFrame using its 'to_dataframe()' method, skipping intermediate rendering. Relies on the correct instantiation of the cash flow statement and assumes pandas is available. This is useful for quickly obtaining a structured representation for analysis.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-FinancialRatios.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncash_flow.to_dataframe()\n```\n\n----------------------------------------\n\nTITLE: Importing edgartools and setting user identity\nDESCRIPTION: Imports all functionalities from the `edgar` module provided by the `edgartools` library. It then calls `set_identity` to provide a user agent string (e.g., an email address) required by the SEC EDGAR system for identifying traffic sources.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Reading-Data-From-XBRL.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom edgar import *\n\nset_identity(\"name@gmail.com\")\n```\n\n----------------------------------------\n\nTITLE: Accessing the Underlying XBRL Data Object\nDESCRIPTION: Retrieves the raw XBRL data object associated with the `Financials` object and assigns it to the `xb` variable. This allows for deeper access to all statements within the filing. The second line displays the XBRL object.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Viewing-Financial-Statements.ipynb#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nxb = financials.xbrl_data\nxb\n```\n\n----------------------------------------\n\nTITLE: Defining DEI Concept Locators and Labels using XBRL Linkbase in XML\nDESCRIPTION: Each snippet defines an XBRL concept by referencing its locator, assigning a human-readable label resource, and connecting these with a labelArc element. These XML elements rely on XLink and XBRL namespaces and are structured in accordance with SEC reporting taxonomy. Key attributes include concept hrefs, labels, titles, and language tags. This structure is fundamental for semantic mapping in XBRL-based financial filings and depends on XBRL-compliant processors. Inputs are DEI concept references; outputs are linked label resources accessible via XBRL tools. All code snippets assume a valid XLink/XBRL environment.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0000943374-24-000509.txt#_snippet_15\n\nLANGUAGE: XML\nCODE:\n```\n<link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_EntityTaxIdentificationNumber\\\" xlink:label=\\\"EntityTaxIdentificationNumber\\\" xlink:title=\\\"EntityTaxIdentificationNumber\\\" />\\n<link:label xlink:type=\\\"resource\\\" xlink:label=\\\"dei_EntityTaxIdentificationNumber\\\" xlink:role=\\\"http://www.xbrl.org/2003/role/label\\\" xlink:title=\\\"dei_EntityTaxIdentificationNumber\\\" xml:lang=\\\"en-US\\\" id=\\\"dei_EntityTaxIdentificationNumber\\\">Entity Tax Identification Number</link:label>\\n<link:labelArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/concept-label\\\" xlink:from=\\\"EntityTaxIdentificationNumber\\\" xlink:to=\\\"dei_EntityTaxIdentificationNumber\\\" xlink:title=\\\"label: EntityTaxIdentificationNumber to dei_EntityTaxIdentificationNumber\\\" />\n```\n\nLANGUAGE: XML\nCODE:\n```\n<link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_EntityIncorporationStateCountryCode\\\" xlink:label=\\\"EntityIncorporationStateCountryCode\\\" xlink:title=\\\"EntityIncorporationStateCountryCode\\\" />\\n<link:label xlink:type=\\\"resource\\\" xlink:label=\\\"dei_EntityIncorporationStateCountryCode\\\" xlink:role=\\\"http://www.xbrl.org/2003/role/label\\\" xlink:title=\\\"dei_EntityIncorporationStateCountryCode\\\" xml:lang=\\\"en-US\\\" id=\\\"dei_EntityIncorporationStateCountryCode\\\">Entity Incorporation, State or Country Code</link:label>\\n<link:labelArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/concept-label\\\" xlink:from=\\\"EntityIncorporationStateCountryCode\\\" xlink:to=\\\"dei_EntityIncorporationStateCountryCode\\\" xlink:title=\\\"label: EntityIncorporationStateCountryCode to dei_EntityIncorporationStateCountryCode\\\" />\n```\n\nLANGUAGE: XML\nCODE:\n```\n<link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_EntityEmergingGrowthCompany\\\" xlink:label=\\\"EntityEmergingGrowthCompany\\\" xlink:title=\\\"EntityEmergingGrowthCompany\\\" />\\n<link:label xlink:type=\\\"resource\\\" xlink:label=\\\"dei_EntityEmergingGrowthCompany\\\" xlink:role=\\\"http://www.xbrl.org/2003/role/label\\\" xlink:title=\\\"dei_EntityEmergingGrowthCompany\\\" xml:lang=\\\"en-US\\\" id=\\\"dei_EntityEmergingGrowthCompany\\\">Entity Emerging Growth Company</link:label>\\n<link:labelArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/concept-label\\\" xlink:from=\\\"EntityEmergingGrowthCompany\\\" xlink:to=\\\"dei_EntityEmergingGrowthCompany\\\" xlink:title=\\\"label: EntityEmergingGrowthCompany to dei_EntityEmergingGrowthCompany\\\" />\n```\n\nLANGUAGE: XML\nCODE:\n```\n<link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_EntityExTransitionPeriod\\\" xlink:label=\\\"EntityExTransitionPeriod\\\" xlink:title=\\\"EntityExTransitionPeriod\\\" />\\n<link:label xlink:type=\\\"resource\\\" xlink:label=\\\"dei_EntityExTransitionPeriod\\\" xlink:role=\\\"http://www.xbrl.org/2003/role/label\\\" xlink:title=\\\"dei_EntityExTransitionPeriod\\\" xml:lang=\\\"en-US\\\" id=\\\"dei_EntityExTransitionPeriod\\\">Entity Ex Transition Period</link:label>\\n<link:labelArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/concept-label\\\" xlink:from=\\\"EntityExTransitionPeriod\\\" xlink:to=\\\"dei_EntityExTransitionPeriod\\\" xlink:title=\\\"label: EntityExTransitionPeriod to dei_EntityExTransitionPeriod\\\" />\n```\n\nLANGUAGE: XML\nCODE:\n```\n<link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_EntityAddressAddressLine1\\\" xlink:label=\\\"EntityAddressAddressLine1\\\" xlink:title=\\\"EntityAddressAddressLine1\\\" />\\n<link:label xlink:type=\\\"resource\\\" xlink:label=\\\"dei_EntityAddressAddressLine1\\\" xlink:role=\\\"http://www.xbrl.org/2003/role/label\\\" xlink:title=\\\"dei_EntityAddressAddressLine1\\\" xml:lang=\\\"en-US\\\" id=\\\"dei_EntityAddressAddressLine1\\\">Entity Address, Address Line One</link:label>\\n<link:labelArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/concept-label\\\" xlink:from=\\\"EntityAddressAddressLine1\\\" xlink:to=\\\"dei_EntityAddressAddressLine1\\\" xlink:title=\\\"label: EntityAddressAddressLine1 to dei_EntityAddressAddressLine1\\\" />\n```\n\nLANGUAGE: XML\nCODE:\n```\n<link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_EntityAddressAddressLine2\\\" xlink:label=\\\"EntityAddressAddressLine2\\\" xlink:title=\\\"EntityAddressAddressLine2\\\" />\\n<link:label xlink:type=\\\"resource\\\" xlink:label=\\\"dei_EntityAddressAddressLine2\\\" xlink:role=\\\"http://www.xbrl.org/2003/role/label\\\" xlink:title=\\\"dei_EntityAddressAddressLine2\\\" xml:lang=\\\"en-US\\\" id=\\\"dei_EntityAddressAddressLine2\\\">Entity Address, Address Line Two</link:label>\\n<link:labelArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/concept-label\\\" xlink:from=\\\"EntityAddressAddressLine2\\\" xlink:to=\\\"dei_EntityAddressAddressLine2\\\" xlink:title=\\\"label: EntityAddressAddressLine2 to dei_EntityAddressAddressLine2\\\" />\n```\n\nLANGUAGE: XML\nCODE:\n```\n<link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_EntityAddressAddressLine3\\\" xlink:label=\\\"EntityAddressAddressLine3\\\" xlink:title=\\\"EntityAddressAddressLine3\\\" />\\n<link:label xlink:type=\\\"resource\\\" xlink:label=\\\"dei_EntityAddressAddressLine3\\\" xlink:role=\\\"http://www.xbrl.org/2003/role/label\\\" xlink:title=\\\"dei_EntityAddressAddressLine3\\\" xml:lang=\\\"en-US\\\" id=\\\"dei_EntityAddressAddressLine3\\\">Entity Address, Address Line Three</link:label>\\n<link:labelArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/concept-label\\\" xlink:from=\\\"EntityAddressAddressLine3\\\" xlink:to=\\\"dei_EntityAddressAddressLine3\\\" xlink:title=\\\"label: EntityAddressAddressLine3 to dei_EntityAddressAddressLine3\\\" />\n```\n\nLANGUAGE: XML\nCODE:\n```\n<link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_EntityAddressCityOrTown\\\" xlink:label=\\\"EntityAddressCityOrTown\\\" xlink:title=\\\"EntityAddressCityOrTown\\\" />\\n<link:label xlink:type=\\\"resource\\\" xlink:label=\\\"dei_EntityAddressCityOrTown\\\" xlink:role=\\\"http://www.xbrl.org/2003/role/label\\\" xlink:title=\\\"dei_EntityAddressCityOrTown\\\" xml:lang=\\\"en-US\\\" id=\\\"dei_EntityAddressCityOrTown\\\">Entity Address, City or Town</link:label>\\n<link:labelArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/concept-label\\\" xlink:from=\\\"EntityAddressCityOrTown\\\" xlink:to=\\\"dei_EntityAddressCityOrTown\\\" xlink:title=\\\"label: EntityAddressCityOrTown to dei_EntityAddressCityOrTown\\\" />\n```\n\nLANGUAGE: XML\nCODE:\n```\n<link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_EntityAddressStateOrProvince\\\" xlink:label=\\\"EntityAddressStateOrProvince\\\" xlink:title=\\\"EntityAddressStateOrProvince\\\" />\\n<link:label xlink:type=\\\"resource\\\" xlink:label=\\\"dei_EntityAddressStateOrProvince\\\" xlink:role=\\\"http://www.xbrl.org/2003/role/label\\\" xlink:title=\\\"dei_EntityAddressStateOrProvince\\\" xml:lang=\\\"en-US\\\" id=\\\"dei_EntityAddressStateOrProvince\\\">Entity Address, State or Province</link:label>\\n<link:labelArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/concept-label\\\" xlink:from=\\\"EntityAddressStateOrProvince\\\" xlink:to=\\\"dei_EntityAddressStateOrProvince\\\" xlink:title=\\\"label: EntityAddressStateOrProvince to dei_EntityAddressStateOrProvince\\\" />\n```\n\nLANGUAGE: XML\nCODE:\n```\n<link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_EntityAddressCountry\\\" xlink:label=\\\"EntityAddressCountry\\\" xlink:title=\\\"EntityAddressCountry\\\" />\\n<link:label xlink:type=\\\"resource\\\" xlink:label=\\\"dei_EntityAddressCountry\\\" xlink:role=\\\"http://www.xbrl.org/2003/role/label\\\" xlink:title=\\\"dei_EntityAddressCountry\\\" xml:lang=\\\"en-US\\\" id=\\\"dei_EntityAddressCountry\\\">Entity Address, Country</link:label>\\n<link:labelArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/concept-label\\\" xlink:from=\\\"EntityAddressCountry\\\" xlink:to=\\\"dei_EntityAddressCountry\\\" xlink:title=\\\"label: EntityAddressCountry to dei_EntityAddressCountry\\\" />\n```\n\nLANGUAGE: XML\nCODE:\n```\n<link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_EntityAddressPostalZipCode\\\" xlink:label=\\\"EntityAddressPostalZipCode\\\" xlink:title=\\\"EntityAddressPostalZipCode\\\" />\\n<link:label xlink:type=\\\"resource\\\" xlink:label=\\\"dei_EntityAddressPostalZipCode\\\" xlink:role=\\\"http://www.xbrl.org/2003/role/label\\\" xlink:title=\\\"dei_EntityAddressPostalZipCode\\\" xml:lang=\\\"en-US\\\" id=\\\"dei_EntityAddressPostalZipCode\\\">Entity Address, Postal Zip Code</link:label>\\n<link:labelArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/concept-label\\\" xlink:from=\\\"EntityAddressPostalZipCode\\\" xlink:to=\\\"dei_EntityAddressPostalZipCode\\\" xlink:title=\\\"label: EntityAddressPostalZipCode to dei_EntityAddressPostalZipCode\\\" />\n```\n\nLANGUAGE: XML\nCODE:\n```\n<link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_CityAreaCode\\\" xlink:label=\\\"CityAreaCode\\\" xlink:title=\\\"CityAreaCode\\\" />\\n<link:label xlink:type=\\\"resource\\\" xlink:label=\\\"dei_CityAreaCode\\\" xlink:role=\\\"http://www.xbrl.org/2003/role/label\\\" xlink:title=\\\"dei_CityAreaCode\\\" xml:lang=\\\"en-US\\\" id=\\\"dei_CityAreaCode\\\">City Area Code</link:label>\\n<link:labelArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/concept-label\\\" xlink:from=\\\"CityAreaCode\\\" xlink:to=\\\"dei_CityAreaCode\\\" xlink:title=\\\"label: CityAreaCode to dei_CityAreaCode\\\" />\n```\n\nLANGUAGE: XML\nCODE:\n```\n<link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_LocalPhoneNumber\\\" xlink:label=\\\"LocalPhoneNumber\\\" xlink:title=\\\"LocalPhoneNumber\\\" />\\n<link:label xlink:type=\\\"resource\\\" xlink:label=\\\"dei_LocalPhoneNumber\\\" xlink:role=\\\"http://www.xbrl.org/2003/role/label\\\" xlink:title=\\\"dei_LocalPhoneNumber\\\" xml:lang=\\\"en-US\\\" id=\\\"dei_LocalPhoneNumber\\\">Local Phone Number</link:label>\\n<link:labelArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/concept-label\\\" xlink:from=\\\"LocalPhoneNumber\\\" xlink:to=\\\"dei_LocalPhoneNumber\\\" xlink:title=\\\"label: LocalPhoneNumber to dei_LocalPhoneNumber\\\" />\n```\n\nLANGUAGE: XML\nCODE:\n```\n<link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_Security12bTitle\\\" xlink:label=\\\"Security12bTitle\\\" xlink:title=\\\"Security12bTitle\\\" />\\n<link:label xlink:type=\\\"resource\\\" xlink:label=\\\"dei_Security12bTitle\\\" xlink:role=\\\"http://www.xbrl.org/2003/role/label\\\" xlink:title=\\\"dei_Security12bTitle\\\" xml:lang=\\\"en-US\\\" id=\\\"dei_Security12bTitle\\\">Title of 12(b) Security</link:label>\n```\n\n----------------------------------------\n\nTITLE: Importing edgartools and Setting User Identity\nDESCRIPTION: Imports all functions and classes from the `edgar` package and sets a user identity required by the SEC Edgar API for making requests. A valid email address should be provided.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Viewing-Financial-Statements.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom edgar import *\n\nset_identity('demo@user.com')\n```\n\n----------------------------------------\n\nTITLE: Fetching Latest 10-K Filing and Parsing XBRL for CRSR (Python)\nDESCRIPTION: Creates a `Company` object for Corsair Gaming (\"CRSR\"), retrieves its most recent \"10-K\" filing using `latest()`, and then parses the XBRL data from that filing using `XBRL.from_filing()`. The parsed XBRL data is stored in the `xbrl` object.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-Cashflow-Statements.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nc = Company(\"CRSR\")\nfiling = c.latest(\"10-K\")\nxbrl = XBRL.from_filing(filing)\n```\n\n----------------------------------------\n\nTITLE: Opening the Filing Homepage in the Browser using edgartools in Python\nDESCRIPTION: Calls the `open()` method on a `FilingHomepage` object (accessed via `filing.homepage`) to open the filing's index page on the SEC EDGAR website in the default web browser. Requires browser access.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/using-the-filings-api.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfiling.homepage.open()\n```\n\n----------------------------------------\n\nTITLE: Querying for EX-99.1-Type Exhibits Using edgartools in Python\nDESCRIPTION: This snippet uses the 'query' method to filter exhibits for those with document types 'EX-99.1', 'EX-99', or 'EX-99.01'. If matching exhibits are found, details of the first one are printed. The method expects a query string describing filter logic and returns a filtered exhibits list.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Extract-Earnings-Releases.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nresults = exhibits.query(\"document_type in ['EX-99.1', 'EX-99', 'EX-99.01']\")\nif len(results) > 0:\n    print(results[0])\n```\n\n----------------------------------------\n\nTITLE: Accessing an Exhibit by Index in Python with edgartools\nDESCRIPTION: This snippet demonstrates how to access a specific exhibit from the exhibits collection by its positional index (in this case, index 1). The result is the exhibit object, which may be used for further actions (like downloading). Ensure the exhibits array has sufficient elements to avoid indexing errors.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Extract-Earnings-Releases.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nexhibits[1]\n```\n\n----------------------------------------\n\nTITLE: Selecting Columns When Exporting to DataFrame - Python\nDESCRIPTION: Exports filings data to a pandas DataFrame, but only for selected columns such as 'form' and 'company'. This allows narrowing to relevant data fields for more efficient analysis.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/Usage.ipynb#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfilings.to_pandas('form', 'company')\n```\n\n----------------------------------------\n\nTITLE: Initializing Company Object using CIK in Python\nDESCRIPTION: Instantiates the `Company` object from the `edgartools` library using the company's Central Index Key (CIK). The CIK is a unique numerical identifier assigned by the SEC. Use the number directly, omitting any leading zeros.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/company.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncompany = Company(1318605)\n```\n\n----------------------------------------\n\nTITLE: Exporting Ownership Data to a Pandas DataFrame - Python\nDESCRIPTION: Demonstrates converting a Form4 object to a pandas DataFrame using the to_dataframe() method, which structures transaction data for analysis or visualization. The output includes detailed trade records for the filing by default. Requires the pandas library and a properly initialized Form4 object.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/insider-filings.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndf = form4.to_dataframe()\n```\n\n----------------------------------------\n\nTITLE: Importing XBRL-specific modules from edgartools\nDESCRIPTION: This snippet imports XBRL-related classes and functions specifically from the `edgar.xbrl` submodule. This makes XBRL parsing functionalities directly available.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Reading-Data-From-XBRL.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom edgar.xbrl import *\n```\n\n----------------------------------------\n\nTITLE: Querying specific facts from XBRL instance data\nDESCRIPTION: Accesses the XBRL instance within the `xbrl_data` object and uses the `query_facts` method to find all facts associated with the specific US-GAAP concept 'RevenueFromContractWithCustomerExcludingAssessedTax'.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Reading-Data-From-XBRL.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n(xbrl_data.instance\n.query_facts(concept=\"us-gaap:RevenueFromContractWithCustomerExcludingAssessedTax\")\n)\n```\n\n----------------------------------------\n\nTITLE: Fetching and Filtering Ownership Filings - Python\nDESCRIPTION: Obtains ownership filings (forms 3, 4, and 5). Further filters the result to retain only those with form '4', demonstrating both bulk retrieval and selective filtering for SEC insider transaction forms.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/Usage.ipynb#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nownership_filings = get_filings(form=[\"3\", 4, \"5\"])\nform_4_filings = ownership_filings.filter(form=\"4\")\n```\n\n----------------------------------------\n\nTITLE: Extracting XBRL data from a Filing object\nDESCRIPTION: Calls the `.xbrl()` method on a `Filing` object (obtained previously). This method attempts to parse the XBRL data associated with the filing. It returns an `XbrlInstance` or `XbrlData` object if successful, or `None` if no XBRL data is found. The result is stored in `xbrl_data`.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Reading-Data-From-XBRL.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nxbrl_data = filing.xbrl()\nxbrl_data\n```\n\n----------------------------------------\n\nTITLE: Querying SEC Filings - Basic Usage - Python\nDESCRIPTION: Fetches recent SEC filings with default parameters using get_filings(), storing the resulting filings object. No parameters are specified, so defaults are used (e.g., current filings, all forms). Returns an iterable or sequence-like object of filings.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/Usage.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfilings = get_filings()\n```\n\n----------------------------------------\n\nTITLE: Accessing a Specific Statement by Index from XBRL Data\nDESCRIPTION: Retrieves and displays a specific financial statement from the XBRL data object (`xb`) using its index (91 in this case). This allows access to statements beyond the standard ones.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Viewing-Financial-Statements.ipynb#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nxb.statements[91]\n```\n\n----------------------------------------\n\nTITLE: Viewing SCCO Cash Flow Statement Directly from Filing (Python)\nDESCRIPTION: Displays the cash flow statement for SCCO directly from the filing object's attachments using `filing.statements.cash_flow_statement.view()`. This provides a comparison point for the data extracted via the `xbrl2` module.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-Cashflow-Statements.ipynb#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfiling.statements.cash_flow_statement.view()\n```\n\n----------------------------------------\n\nTITLE: Initializing FinancialRatioAnalyzer Class in Python\nDESCRIPTION: This snippet shows the constructor for the FinancialRatioAnalyzer class, which is responsible for orchestrating financial ratio calculations using accounting statement DataFrames. It requires DataFrames for the balance sheet, income statement, cash flow statement, and a list of reporting periods; these serve as the foundational data sources for all subsequent ratio computations. Dependencies include pandas and a properly formatted list of periods.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/edgar/xbrl2/analysis/DESIGN.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass FinancialRatioAnalyzer:\n    def __init__(self, balance_sheet_df, income_stmt_df, \n                 cash_flow_df, periods)\n```\n\n----------------------------------------\n\nTITLE: Accessing raw facts from an XBRL instance\nDESCRIPTION: Accesses the `facts` attribute of an `XbrlInstance` object (`instance`). This typically returns a Pandas DataFrame containing all the individual facts extracted from the XBRL instance file.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Reading-Data-From-XBRL.ipynb#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ninstance.facts\n```\n\n----------------------------------------\n\nTITLE: Defining DEI WrittenCommunications Metadata in HTML\nDESCRIPTION: This HTML table structure defines metadata for the 'dei_WrittenCommunications' element from the SEC DEI taxonomy. It includes sections for Definition, References, and Details (Name, Namespace, Data Type, etc.). JavaScript functions (`Show.hideAR` and `Show.toggleNext`) are used within anchor tags to allow users to hide the entire definition block or expand/collapse individual sections.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0000943374-24-000509.txt#_snippet_29\n\nLANGUAGE: html\nCODE:\n```\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"authRefData\" style=\"display: none;\" id=\"defref_dei_WrittenCommunications\">\n<tr><td class=\"hide\"><a style=\"color: white;\" href=\"javascript:void(0);\" onclick=\"Show.hideAR();\">X</a></td></tr>\n<tr><td><div class=\"body\" style=\"padding: 2px;\">\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">- Definition</a><div><p>Boolean flag that is true when the Form 8-K filing is intended to satisfy the filing obligation of the registrant as written communications pursuant to Rule 425 under the Securities Act.</p></div>\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">+ References</a><div style=\"display: none;\"><p>Reference 1: http://www.xbrl.org/2003/role/presentationRef<br> -Publisher SEC<br> -Name Securities Act<br> -Number 230<br> -Section 425<br></p></div>\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">+ Details</a><div style=\"display: none;\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td><strong> Name:</strong></td>\n<td style=\"white-space:nowrap;\">dei_WrittenCommunications</td>\n</tr>\n<tr>\n<td style=\"padding-right: 4px;white-space:nowrap;\"><strong> Namespace Prefix:</strong></td>\n<td>dei_</td>\n</tr>\n<tr>\n<td><strong> Data Type:</strong></td>\n<td>xbrli:booleanItemType</td>\n</tr>\n<tr>\n<td><strong> Balance Type:</strong></td>\n<td>na</td>\n</tr>\n<tr>\n<td><strong> Period Type:</strong></td>\n<td>duration</td>\n</tr>\n</table></div>\n</div></td></tr>\n</table>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nShow.hideAR();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nShow.toggleNext( this );\n```\n\n----------------------------------------\n\nTITLE: Importing edgartools and Setting User Identity in Python\nDESCRIPTION: Imports all components from the `edgar` module provided by the `edgartools` library. It then calls `set_identity()` to provide a user agent string (typically an email address) as required by the SEC EDGAR API for identification.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Paging-Through-Filings.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom edgar import *\n\nset_identity(\"myemail@domain.com\")\n```\n\n----------------------------------------\n\nTITLE: Parsing XBRL Data from a Filing using edgartools in Python\nDESCRIPTION: Parses the XBRL data associated with the selected `filing` object using the `XBRL.from_filing` class method from the `edgartools` library. The resulting parsed XBRL object, which allows querying XBRL facts, is stored in the `xbrl` variable.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-Instance-Only-XBRL.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nxbrl = XBRL.from_filing(filing)\nxbrl\n```\n\n----------------------------------------\n\nTITLE: Querying Parsed XBRL Data into a DataFrame in Python\nDESCRIPTION: Queries the parsed XBRL data contained within the `xbrl` object and converts the results into a Pandas DataFrame. This uses method chaining: calling `query()` on the `xbrl` object and then `to_dataframe()` on the query result. This is useful for analyzing XBRL facts in a tabular format.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-Instance-Only-XBRL.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n(xbrl.query()\n .to_dataframe()\n )\n```\n\n----------------------------------------\n\nTITLE: Querying a Company by Ticker Using Edgartools in Python\nDESCRIPTION: Initializes a Company object by passing a ticker symbol string (e.g., 'AAPL') to retrieve metadata and filings for that company. The 'Company' class requires the ticker or CIK and uses the edgartools library for lookups. Returns a Company instance representing the specified ticker.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Ticker-Search-with-edgartools.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncompany = Company(\"AAPL\")\ncompany\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw DataFrame from XBRL Statement Using edgartools - Python\nDESCRIPTION: This snippet displays how to obtain the raw data (typically as a pandas DataFrame or similar structure) from a statement object, as parsed from an XBRL filing. The statement.data attribute returns a DataFrame with all included columns, including those for metadata. Requires a statement object as returned by previous methods and pandas available. Output is a DataFrame, which may need further processing for typical financial analysis.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/working-with-xbrl.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nstatement.data\n```\n\n----------------------------------------\n\nTITLE: Accessing Form 4 Data Using Form4 Object in Python\nDESCRIPTION: Demonstrates accessing insider trading information from a `Form4` Data Object (derived from a Form 4 filing). It shows how to retrieve market trades (`market_trades`), shares traded (`shares_traded`), and obtain a summary of insider market trades using the `get_insider_market_trade_summary()` method.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/data-objects.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nform4 = filing.obj()\n\n# Access transaction data\ntrades = form4.market_trades\nshares = form4.shares_traded\n\n# Get insider trading summary\ntrade_summary = form4.get_insider_market_trade_summary()\n```\n\n----------------------------------------\n\nTITLE: Extracting Revenue Time Series from XBRL Facts in Python\nDESCRIPTION: This snippet retrieves a time series for the 'Revenue' element from an XBRL facts object using the .time_series method. It assumes support for time-based querying and returns a chronological list or pandas Series of revenue values. Inputs include the facts object; outputs are the extracted revenue time series. This is useful for longitudinal financial analysis over multiple reporting periods.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/xbrl.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# Time series analysis\\nrevenue_over_time = facts.time_series('Revenue')\n```\n\n----------------------------------------\n\nTITLE: Fetching Company by CIK and Accessing Filings (Python)\nDESCRIPTION: Initializes a Company object using a CIK string for more direct SEC lookup, then retrieves its filings property. Dependencies: edgartools. Input: CIK as a string. Output: Company object and filings list. Preferred for performance if CIK is known.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/index.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nc = Company(\"0000320193\")\nfilings = c.filings\n```\n\n----------------------------------------\n\nTITLE: Accessing Company Financials Using financials Property (Python)\nDESCRIPTION: Fetches financial statement sections (such as income) from a Company's financials property. Dependencies: Valid Company object. Input: None. Output: Structured financial data object, e.g., balance sheet or income statement. Facilitates rapid access to standardized financials.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/index.md#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfinancials = c.financials\nfinancials.income\n```\n\n----------------------------------------\n\nTITLE: Displaying SEC Filing Exhibits using an HTML Table\nDESCRIPTION: Utilizes an HTML `TABLE` element to structure and present a list of exhibits associated with the SEC filing. Inline styles control table appearance (width, font, border-collapse). The table contains rows (`TR`) and cells (`TD`) that organize exhibit identifiers and descriptions, including hyperlinks to the actual documents.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0001104659-25-002604.txt#_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<TABLE CELLSPACING=\"0\" CELLPADDING=\"0\" STYLE=\"width: 100%; font: 10pt Times New Roman, Times, Serif; border-collapse: collapse\">\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"white-space: nowrap; border-bottom: black 1pt solid; padding-bottom: 2.5pt; text-align: center\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\"><B>Exhibit\n    </B></FONT></TD>\n    <TD STYLE=\"white-space: nowrap; border-bottom: white 1pt solid; text-align: center\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\"><B>&NegativeThickSpace;</B></FONT></TD>\n    <TD STYLE=\"white-space: nowrap; border-bottom: white 1pt solid; text-align: center\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\"><B>&NegativeThickSpace;</B></FONT></TD>\n    <TD STYLE=\"white-space: nowrap; border-bottom: black 1pt solid; padding-bottom: 2.5pt; text-align: center\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\"><B>Description\n    </B></FONT></TD>\n    </TR>\n  <TR STYLE=\"vertical-align: top\">\n    <TD STYLE=\"white-space: nowrap; padding-top: 3.25pt; padding-bottom: 1.5pt\"><A HREF=\"https://www.sec.gov/Archives/edgar/data/1034563/000110465924126116/tm2429962d1_exha-1a.htm\" STYLE=\"-sec-extract: exhibit\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">(a)(1)(A)*\n    </FONT></A></TD>\n    <TD STYLE=\"white-space: nowrap\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">&NegativeThickSpace;</FONT></TD>\n    <TD STYLE=\"white-space: nowrap\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">&NegativeThickSpace;</FONT></TD>\n    <TD STYLE=\"white-space: nowrap; padding-top: 3.25pt; padding-bottom: 1.5pt\"><A HREF=\"https://www.sec.gov/Archives/edgar/data/1034563/000110465924126116/tm2429962d1_exha-1a.htm\" STYLE=\"-sec-extract: exhibit\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">Offer\n    to Purchase, dated December 6, 2024.</FONT></A></TD>\n    </TR>\n  <!-- ... more rows ... -->\n</TABLE>\n```\n\n----------------------------------------\n\nTITLE: Structuring XBRL Instance Metadata using JSON\nDESCRIPTION: Provides a JSON structure ('MetaLinks.json') defining metadata for an XBRL instance ('form8k_122024.htm'). It includes version information, namespace details, references to Discoverable Taxonomy Set (DTS) files (schemas, linkbases), counts of XBRL components (contexts, elements, units), base taxonomies, report structure details, and specific tag definitions with their types, namespaces, presentation links, and documentation.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0000943374-24-000509.txt#_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n \"version\": \"2.2\",\n \"instance\": {\n  \"form8k_122024.htm\": {\n   \"nsprefix\": \"bcow\",\n   \"nsuri\": \"http://pyramaxbank.com/20241220\",\n   \"dts\": {\n    \"schema\": {\n     \"local\": [\n      \"bcow-20241220.xsd\"\n     ],\n     \"remote\": [\n      \"http://www.xbrl.org/2003/xbrl-instance-2003-12-31.xsd\",\n      \"http://www.xbrl.org/2003/xbrl-linkbase-2003-12-31.xsd\",\n      \"http://www.xbrl.org/2003/xl-2003-12-31.xsd\",\n      \"http://www.xbrl.org/2003/xlink-2003-12-31.xsd\",\n      \"http://www.xbrl.org/2004/ref-2004-08-10.xsd\",\n      \"http://www.xbrl.org/2005/xbrldt-2005.xsd\",\n      \"http://www.xbrl.org/2006/ref-2006-02-27.xsd\",\n      \"http://www.xbrl.org/lrr/arcrole/factExplanatory-2009-12-16.xsd\",\n      \"http://www.xbrl.org/lrr/role/negated-2009-12-16.xsd\",\n      \"http://www.xbrl.org/lrr/role/net-2009-12-16.xsd\",\n      \"https://www.xbrl.org/2020/extensible-enumerations-2.0.xsd\",\n      \"https://www.xbrl.org/dtr/type/2020-01-21/types.xsd\",\n      \"https://www.xbrl.org/dtr/type/2022-03-31/types.xsd\",\n      \"https://xbrl.fasb.org/srt/2024/elts/srt-2024.xsd\",\n      \"https://xbrl.fasb.org/srt/2024/elts/srt-roles-2024.xsd\",\n      \"https://xbrl.fasb.org/srt/2024/elts/srt-types-2024.xsd\",\n      \"https://xbrl.fasb.org/us-gaap/2024/elts/us-gaap-2024.xsd\",\n      \"https://xbrl.fasb.org/us-gaap/2024/elts/us-roles-2024.xsd\",\n      \"https://xbrl.fasb.org/us-gaap/2024/elts/us-types-2024.xsd\",\n      \"https://xbrl.sec.gov/country/2024/country-2024.xsd\",\n      \"https://xbrl.sec.gov/currency/2024/currency-2024.xsd\",\n      \"https://xbrl.sec.gov/cyd/2024/cyd-2024.xsd\",\n      \"https://xbrl.sec.gov/dei/2024/dei-2024.xsd\",\n      \"https://xbrl.sec.gov/exch/2024/exch-2024.xsd\",\n      \"https://xbrl.sec.gov/naics/2024/naics-2024.xsd\",\n      \"https://xbrl.sec.gov/sic/2024/sic-2024.xsd\",\n      \"https://xbrl.sec.gov/stpr/2024/stpr-2024.xsd\"\n     ]\n    },\n    \"labelLink\": {\n     \"local\": [\n      \"bcow-20241220_lab.xml\"\n     ]\n    },\n    \"presentationLink\": {\n     \"local\": [\n      \"bcow-20241220_pre.xml\"\n     ]\n    },\n    \"inline\": {\n     \"local\": [\n      \"form8k_122024.htm\"\n     ]\n    }\n   },\n   \"keyStandard\": 23,\n   \"keyCustom\": 0,\n   \"axisStandard\": 0,\n   \"axisCustom\": 0,\n   \"memberStandard\": 0,\n   \"memberCustom\": 0,\n   \"hidden\": {\n    \"total\": 2,\n    \"http://xbrl.sec.gov/dei/2024\": 2\n   },\n   \"contextCount\": 1,\n   \"entityCount\": 1,\n   \"segmentCount\": 0,\n   \"elementCount\": 30,\n   \"unitCount\": 0,\n   \"baseTaxonomies\": {\n    \"http://xbrl.sec.gov/dei/2024\": 23\n   },\n   \"report\": {\n    \"R1\": {\n     \"role\": \"http://pyramaxbank.com/role/DocumentAndEntityInformation\",\n     \"longName\": \"000100 - Document - Document and Entity Information\",\n     \"shortName\": \"Document and Entity Information\",\n     \"isDefault\": \"true\",\n     \"groupType\": \"document\",\n     \"subGroupType\": \"\",\n     \"menuCat\": \"Cover\",\n     \"order\": \"1\",\n     \"firstAnchor\": {\n      \"contextRef\": \"c20241220to20241220\",\n      \"name\": \"dei:DocumentType\",\n      \"unitRef\": null,\n      \"xsiNil\": \"false\",\n      \"lang\": \"en-US\",\n      \"decimals\": null,\n      \"ancestors\": [\n       \"div\",\n       \"div\",\n       \"div\",\n       \"body\",\n       \"html\"\n      ],\n      \"reportCount\": 1,\n      \"baseRef\": \"form8k_122024.htm\",\n      \"first\": true,\n      \"unique\": true\n     },\n     \"uniqueAnchor\": {\n      \"contextRef\": \"c20241220to20241220\",\n      \"name\": \"dei:DocumentType\",\n      \"unitRef\": null,\n      \"xsiNil\": \"false\",\n      \"lang\": \"en-US\",\n      \"decimals\": null,\n      \"ancestors\": [\n       \"div\",\n       \"div\",\n       \"div\",\n       \"body\",\n       \"html\"\n      ],\n      \"reportCount\": 1,\n      \"baseRef\": \"form8k_122024.htm\",\n      \"first\": true,\n      \"unique\": true\n     }\n    }\n   },\n   \"tag\": {\n    \"dei_AmendmentFlag\": {\n     \"xbrltype\": \"booleanItemType\",\n     \"nsuri\": \"http://xbrl.sec.gov/dei/2024\",\n     \"localname\": \"AmendmentFlag\",\n     \"presentation\": [\n      \"http://pyramaxbank.com/role/DocumentAndEntityInformation\"\n     ],\n     \"lang\": {\n      \"en-us\": {\n       \"role\": {\n        \"label\": \"Amendment Flag\",\n        \"documentation\": \"Boolean flag that is true when the XBRL content amends previously-filed or accepted submission.\"\n       }\n      }\n     },\n     \"auth_ref\": []\n    },\n    \"dei_CityAreaCode\": {\n     \"xbrltype\": \"normalizedStringItemType\",\n     \"nsuri\": \"http://xbrl.sec.gov/dei/2024\",\n     \"localname\": \"CityAreaCode\",\n     \"presentation\": [\n      \"http://pyramaxbank.com/role/DocumentAndEntityInformation\"\n     ],\n     \"lang\": {\n      \"en-us\": {\n       \"role\": {\n        \"label\": \"City Area Code\",\n        \"documentation\": \"Area code of city\"\n       }\n      }\n     },\n     \"auth_ref\": []\n    },\n    \"dei_CoverAbstract\": {\n     \"xbrltype\": \"stringItemType\",\n     \"nsuri\": \"http://xbrl.sec.gov/dei/2024\",\n     \"localname\": \"CoverAbstract\",\n     \"lang\": {\n      \"en-us\": {\n       \"role\": {\n        \"label\": \"Cover [Abstract]\",\n        \"documentation\": \"Cover page.\"\n       }\n      }\n     },\n     \"auth_ref\": []\n    },\n    \"dei_DocumentFiscalPeriodFocus\": {\n     \"xbrltype\": \"fiscalPeriodItemType\",\n     \"nsuri\": \"http://xbrl.sec.gov/dei/2024\",\n     \"localname\": \"DocumentFiscalPeriodFocus\",\n     \"presentation\": [\n      \"http://pyramaxbank.com/role/DocumentAndEntityInformation\"\n     ],\n     \"lang\": {\n      \"en-us\": {\n       \"role\": {\n        \"label\": \"Document Fiscal Period Focus\",\n        \"documentation\": \"Fiscal period values are FY, Q1, Q2, and Q3. 1st, 2nd and 3rd quarter 10-Q or 10-QT statements have value Q1, Q2, and Q3 respectively, with 10-K, 10-KT or other fiscal year statements having FY.\"\n       }\n      }\n     },\n     \"auth_ref\": []\n    },\n    \"dei_DocumentFiscalYearFocus\": {\n     \"xbrltype\": \"gYearItemType\",\n     \"nsuri\": \"http://xbrl.sec.gov/dei/2024\",\n     \"localname\": \"DocumentFiscalYearFocus\",\n     \"presentation\": [\n      \"http://pyramaxbank.com/role/DocumentAndEntityInformation\"\n     ],\n     \"lang\": {\n      \"en-us\": {\n       \"role\": {\n        \"label\": \"Document Fiscal Year Focus\",\n        \"documentation\": \"This is focus fiscal year of the document report in YYYY format. For a 2006 annual report, which may also provide financial information from prior periods, fiscal 2006 should be given as the fiscal year focus. Example: 2006.\"\n       }\n      }\n     },\n     \"auth_ref\": []\n    },\n    \"dei_DocumentPeriodEndDate\": {\n     \"xbrltype\": \"dateItemType\",\n     \"nsuri\": \"http://xbrl.sec.gov/dei/2024\",\n     \"localname\": \"DocumentPeriodEndDate\",\n     \"presentation\": [\n      \"http://pyramaxbank.com/role/DocumentAndEntityInformation\"\n     ],\n     \"lang\": {\n      \"en-us\": {\n       \"role\": {\n        \"label\": \"Document Period End Date\",\n        \"documentation\": \"\"\n       }\n      }\n     },\n     \"auth_ref\": []\n    }\n   }\n  }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Filing object directly and getting its XBRL instance\nDESCRIPTION: Demonstrates creating a `Filing` object directly by providing specific metadata (form type, filing date, company name, CIK, accession number) instead of searching. It then calls `.xbrl()` on this directly created `Filing` object to get the `XbrlInstance`.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Reading-Data-From-XBRL.ipynb#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfiling = Filing(form='424B2', filing_date='2024-08-09', company='ROYAL BANK OF CANADA', cik=1000275, accession_no='0000950103-24-012010')\ninstance = filing.xbrl()\ninstance\n```\n\n----------------------------------------\n\nTITLE: Embedding Pre-Commencement Issuer Tender Offer Checkbox using ix:nonNumeric (XBRL in HTML)\nDESCRIPTION: This snippet features an unchecked checkbox ('&#9744;') within a table cell (`<td>`) tagged with `<ix:nonNumeric>`. It represents the status of 'Pre-commencement communications pursuant to Rule 13e-4(c)'. The tag employs 'dei:PreCommencementIssuerTenderOffer', context 'c20241220to20241220', a unique ID, and the 'ixt-sec:boolballotbox' format.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0000943374-24-000509.txt#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<td style=\"width: 6.19%; vertical-align: top;\">\n            <div style=\"text-align: center; font-family: 'Times New Roman', Times, serif; font-size: 12pt;\"><ix:nonNumeric name=\"dei:PreCommencementIssuerTenderOffer\" id=\"Fact_60bc5e8c14de4fbca441654d123d9413\" contextRef=\"c20241220to20241220\" format=\"ixt-sec:boolballotbox\">&#9744;</ix:nonNumeric><br/>\n            </div>\n          </td>\n```\n\n----------------------------------------\n\nTITLE: Getting a Specific Filing Attachment by Index with edgartools in Python\nDESCRIPTION: Shows how to access a specific attachment from the `attachments` list of a `Filing` object using index access (`[]`). Assumes the `attachments` attribute behaves like a list.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/working-with-filings.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nattachment = filing.attachments[0]\n```\n\n----------------------------------------\n\nTITLE: Parsing Ownership Filing XML - Python\nDESCRIPTION: Converts the XML of a form 4 filing into an Ownership object using Ownership.from_xml(). Useful for extracting structured data about insider transactions.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/Usage.ipynb#_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nOwnership.from_xml(form_4_filing.xml())\n```\n\n----------------------------------------\n\nTITLE: Filtering SEC Filings by Ticker using EdgarTools Python\nDESCRIPTION: This code filters filings by providing a stock ticker symbol to the `ticker` parameter in `get_filings`. The function internally resolves the ticker to a CIK and returns all associated filings. Inputs are ticker symbols as strings; output is a `Filings` object. If CIK is already known, using `cik` directly is more efficient.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/filtering-filings.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfilings = get_filings(ticker='AAPL')\n```\n\n----------------------------------------\n\nTITLE: Custom Period Selection for XBRL Statement Rendering in Python\nDESCRIPTION: Illustrates advanced period selection by retrieving available reporting periods from `xbrl.reporting_periods`, programmatically constructing a specific period key (e.g., `instant_YYYY-MM-DD`), and then using this key with the `period_filter` argument in the `.render()` method of a statement object to display data for only that specific period.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/xbrl.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n```python\n# Get specific periods from available options\navailable_periods = xbrl.reporting_periods\nlatest_period = available_periods[0]\n\n# Render with specific period\nif latest_period['type'] == 'instant':\n    period_filter = f\"instant_{latest_period['date']}\"\n    latest_balance_sheet = statements.balance_sheet().render(period_filter=period_filter)\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering and Converting Cash Flow Statement to DataFrame in Python\nDESCRIPTION: Renders the extracted cash flow statement and converts it into a pandas DataFrame for analysis. 'render()' processes the statement into a format suitable for tabular conversion, and 'to_dataframe()' produces the DataFrame. Assumes pandas is installed and that the previous cash flow statement object exists. The result is a DataFrame suitable for quantitative review.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-FinancialRatios.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nrendered = cash_flow.render()\nrendered.to_dataframe()\n```\n\n----------------------------------------\n\nTITLE: Re-extracting and Displaying Combined CMCSA Cash Flow Statement (Python)\nDESCRIPTION: Re-extracts the combined cash flow statement from the `xbrls` object (containing data from multiple CMCSA filings) using `xbrls.statements.cash_flow_statement()` and displays the resulting `cashflow_statement` object. This snippet repeats the extraction and display action shown in the last two lines of the preceding snippet.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-Cashflow-Statements.ipynb#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ncashflow_statement = xbrls.statements.cash_flow_statement()\ncashflow_statement\n```\n\n----------------------------------------\n\nTITLE: Fetching Multiple SEC Forms Simultaneously - Python\nDESCRIPTION: Fetches filings matching any form in a provided list, here 'S-3' or '424B4', using the 'form' parameter as a list. Returns a filings object with results matching any listed form.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/Usage.ipynb#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfilings = get_filings(form=[\"S-3\", \"424B4\"])\nfilings\n```\n\n----------------------------------------\n\nTITLE: Setting User Identity for edgartools Requests - Python\nDESCRIPTION: Sets the user identity (typically required for SEC API usage or for compliance/logging) in edgartools. Takes a name and contact string as a parameter. This call is necessary before making requests to associate usage with an individual or entity.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/Usage.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nset_identity('Satya Somish smosh@gmail.com')\n```\n\n----------------------------------------\n\nTITLE: Defining XBRL Context Registry Data Structure in JSON\nDESCRIPTION: This JSON-like structure defines the schema for the Context Registry within the Data Model. It maps each context ID from the instance document to its associated details, including entity information (identifier, scheme), period information (type, instant date, start/end dates for duration), and any dimensional qualifiers (dimension name mapped to member name).\nSOURCE: https://github.com/dgunning/edgartools/blob/main/edgar/xbrl2/docs/xbrl-parser-design.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n```\n{\n  \"contextId\": {\n    \"entity\": {\n      \"identifier\": string,\n      \"scheme\": string\n    },\n    \"period\": {\n      \"type\": \"instant\"|\"duration\",\n      \"instant\": date|null,\n      \"startDate\": date|null,\n      \"endDate\": date|null\n    },\n    \"dimensions\": {\n      \"dimensionName\": \"memberName\",\n      ...\n    }\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Listing concepts within a specific statement\nDESCRIPTION: First, assigns the 'CONSOLIDATEDSTATEMENTSOFCOMPREHENSIVEINCOME' statement object to the `statement` variable. Then, accesses the `concepts` attribute of this `statement` object to list the XBRL concepts present in this particular financial statement.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Reading-Data-From-XBRL.ipynb#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nstatement = statements['CONSOLIDATEDSTATEMENTSOFCOMPREHENSIVEINCOME']\nstatement.concepts\n```\n\n----------------------------------------\n\nTITLE: Fetching Latest 8-K Filings with Limit using edgartools in Python\nDESCRIPTION: Demonstrates retrieving the most recent 5 SEC Form 8-K filings for a specific company (AAPL) using the `latest` method on a `Company` object instance (`c`). Requires an initialized `Company` object and the `edgartools` library. The `n=5` parameter limits the result to the latest 5 filings, returning a `Filings` object.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/eightk-filings.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nc = Company(\"AAPL\")\n\nfilings = filings.latest(\"8-K\", 5)\n```\n\n----------------------------------------\n\nTITLE: Installing edgartools Library using Pip in Python\nDESCRIPTION: This snippet demonstrates how to install or update the `edgartools` Python library using the pip package manager. The `-U` flag ensures that the library is updated to the latest version if it's already installed.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Beginners-Guide.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -U edgartools\n```\n\n----------------------------------------\n\nTITLE: Filtering edgartools Filings Before a Specific Date in Python\nDESCRIPTION: Applies the `filter()` method using the `date` parameter with the format ':YYYY-MM-DD' to select filings from a `Filings` object that were filed on or before the specified date.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/using-the-filings-api.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfilings.filter(date=\":2021-02-28\") \n```\n\n----------------------------------------\n\nTITLE: Retrieving Insider Filings for a Company with Edgartools - Python\nDESCRIPTION: Demonstrates how to instantiate a Company object with a ticker symbol and retrieve its insider filings using the get_filings method. The 'form' parameter filters the results by specific form types, accepting both strings and integers. Returns a list of filings matching the specified forms. Requires the Edgartools library and an active internet connection.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/insider-filings.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nc = Company(\"VRTX\")\nfilings = c.get_filings(form=[3,4,5])\n```\n\n----------------------------------------\n\nTITLE: Searching for Any SEC Filing Using the Edgartools Find Function in Python\nDESCRIPTION: Uses the find function to search for a ticker (e.g., \"BRK.A\"). The find function allows flexible searching for tickers or other terms, making it suitable for exploratory queries beyond exact ticker-to-company matching. Returns relevant results based on the query string.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Ticker-Search-with-edgartools.ipynb#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfind(\"BRK.A\")\n```\n\n----------------------------------------\n\nTITLE: Filtering SEC Filings by Exchange using EdgarTools Python\nDESCRIPTION: This snippet shows how to filter filings for companies listed on a given stock exchange using the `exchange` parameter. Supported values include 'NASDAQ', 'NYSE', 'CBOE', and 'OTC'. The result is a `Filings` object with filings for matching companies. Only works with supported exchange codes; requires the `edgar` library.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/filtering-filings.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfilings = get_filings(exchange='NASDAQ')\n```\n\n----------------------------------------\n\nTITLE: Fetching, Parsing, and Extracting Cash Flow for SCCO (Python)\nDESCRIPTION: Repeats the process shown for CRSR, but for Southern Copper Corporation (\"SCCO\"). It fetches the latest 10-K filing, parses its XBRL data using `XBRL.from_filing()`, and extracts the cash flow statement into the `statement` variable using the `xbrl2` module's capabilities.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-Cashflow-Statements.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nc = Company(\"SCCO\")\nfiling = c.latest(\"10-K\")\nxbrl = XBRL.from_filing(filing)\nstatement = xbrl.statements.cash_flow_statement()\n```\n\n----------------------------------------\n\nTITLE: Rendering and Exporting XBRL Statements in Python\nDESCRIPTION: Showcases various ways to render and export financial statements obtained from an XBRL object. This includes default console printing (using Rich), customizing display options like `show_date_range` and `period_view`, converting to a pandas DataFrame using `statements.to_dataframe(\"StatementType\")`, and exporting to Markdown format using `.render().to_markdown()`.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/xbrl.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n```python\n# Display with default styling as Rich tables in console/notebooks\nprint(statements.balance_sheet())\n\n# Show full date ranges for duration periods\nprint(statements.income_statement(show_date_range=True))\n\n# Customize period view\nprint(statements.income_statement(period_view=\"Annual Comparison\"))\n\n# Convert to pandas DataFrame for analysis\ndf = statements.to_dataframe(\"BalanceSheet\")\n\n# Export the statement to markdown\nincome_statement = statements.income_statement()\nmarkdown_text = income_statement.render().to_markdown()\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching and Parsing Historical SEC Filing - Python\nDESCRIPTION: Constructs a Filing object for a specific report (10-K), given explicit metadata such as form type, filing date, company name, CIK, and accession number, then parses it as XBRL. Useful for accessing and analyzing archival data; inputs are all filing details and the outputs are a Filing and then an XBRL instance.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-StandardizedStatements.ipynb#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfiling = Filing(form='10-K', filing_date='2015-10-28', company='APPLE INC', cik=320193, accession_no='0001193125-15-356351')\nxbrl = XBRL.from_filing(filing)\n```\n\n----------------------------------------\n\nTITLE: Initializing an ETF Company by Ticker Using Edgartools in Python\nDESCRIPTION: Initializes a Company instance for an ETF given the ticker symbol ('CGIC'). This shows the generalized approach for querying any supported security using its ticker within the edgartools library.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Ticker-Search-with-edgartools.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nCompany(\"CGIC\")\n```\n\n----------------------------------------\n\nTITLE: Fetching Recent XBRL Filings using edgartools in Python\nDESCRIPTION: Retrieves the latest 40,000 SEC filings marked with the index type 'xbrl' using the `get_filings` function from the `edgartools` library. The result, likely a DataFrame or similar structure containing filing metadata, is stored in the `filings` variable.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-Instance-Only-XBRL.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfilings = get_filings(index=\"xbrl\").tail(40000)\nfilings\n```\n\n----------------------------------------\n\nTITLE: Parsing XBRL Data from a Filing Using edgartools - Python\nDESCRIPTION: This snippet illustrates how to access and parse the XBRL portion of the first filing in a list of filings. By calling the xbrl() method on a Filing object, it will download and process the XBRL file, returning either an XBRLInstance (for simple filings) or an XbrlData object (for more complex situations). Requires the edgartools library and an iterable of filings. Input is a Filing object, and output is an XBRLInstance or XbrlData object. The approach manages the presence or absence of XBRL attachments gracefully.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/working-with-xbrl.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfiling = filings[0]\nfiling.xbrl()\n```\n\n----------------------------------------\n\nTITLE: Accessing Individual Form 4 Filing - Python\nDESCRIPTION: Retrieves the 5th form 4 filing from the form_4_filings object for detailed inspection, e.g., parsing with the Ownership class. Assumes sufficient filings are available after filtering.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/Usage.ipynb#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nform_4_filing = form_4_filings[4]\nform_4_filing\n```\n\n----------------------------------------\n\nTITLE: Initializing edgartools and Selecting Ticker in Python\nDESCRIPTION: Imports necessary components from the `edgar` library, including core functions, XBRL utilities, and ticker reference data. It sets a user identity required for EDGAR API calls, fetches a list of popular US stock tickers, and selects the first ticker from the list for subsequent analysis.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-StitchingStatements.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom edgar import *\nfrom edgar.xbrl2 import *\nfrom edgar.reference.tickers import popular_us_stocks\n\nset_identity(\"philfoden@england.co.uk\")\n\nstocks = popular_us_stocks()\ntickers = stocks.Ticker.to_list()\n\nticker = tickers[0]\nticker\n```\n\n----------------------------------------\n\nTITLE: Accessing Multi-Year Financial Statements from MultiFinancials - EdgarTools Python\nDESCRIPTION: This snippet accesses financial statements such as the balance sheet, income statement, and cash flow statement from a MultiFinancials instance, each aggregating data for multiple years. Ensure MultiFinancials is initialized with a valid filings list. Outputs: aggregated statement data structures across the specified periods.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/company-financials.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nbalance_sheet = financials.balance_sheet\nincome_statement = financials.income\ncash_flow_statement = financials.cash_flow\n```\n\n----------------------------------------\n\nTITLE: Fetching and Inspecting Offering Filings - Python\nDESCRIPTION: Obtains all filings of SEC form 'D' (securities offerings) using get_filings(). Demonstrates filtering for private offerings/disclosure forms and inspects the first item in the set.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/Usage.ipynb#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\noffering_filings = get_filings(form=\"D\")\noffering_filings\n```\n\nLANGUAGE: python\nCODE:\n```\noffering_filings[0]\n```\n\n----------------------------------------\n\nTITLE: EDGAR Master Index Header Example\nDESCRIPTION: This section shows the header information typically found at the beginning of an EDGAR master index file. It includes a description, the last date data was received, contact information, and FTP server details for accessing EDGAR data.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/index_files/badform.idx.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDescription:           Master Index of EDGAR Dissemination Feed by Form Type\nLast Data Received:    March 31, 2021\nComments:              webmaster@sec.gov\nAnonymous FTP:         ftp://ftp.sec.gov/edgar/\n```\n\n----------------------------------------\n\nTITLE: Fetching and Parsing Apple's 10-K Filing\nDESCRIPTION: Creates a `Company` object for Apple Inc. (ticker AAPL), fetches its two most recent 10-K filings, selects the second-to-last filing (index 1), and parses its XBRL data using `XBRL.from_filing()`. The `filing` variable holds the selected filing object.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-NonFinancialStatements.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nc = Company(\"AAPL\")\nfilings = c.latest(\"10-K\", 2)\nxbrl = XBRL.from_filing(filings[1])\nfiling = filings[1]\n```\n\n----------------------------------------\n\nTITLE: Rendering Multi-Period Financial Statements via the XBRL Class in Python\nDESCRIPTION: This snippet extends a hypothetical XBRL API class by adding multi-period rendering based on the StatementStitcher. The XBRL class initializes internal concept mapping, filters statements by type, and leverages StatementStitcher to consolidate and structure data. Its render_multi_period_statement method produces a readable, period-aligned table view, and supports toggling between standardized and original concepts via the standard flag. Prerequisites: MappingStore and ConceptMapper implementations, and an appropriately formatted statements list.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/edgar/xbrl2/docs/stitching-statements.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass XBRL:\n    def __init__(self, mapping_store):\n        self.mapping_store = mapping_store\n        self.concept_mapper = ConceptMapper(self.mapping_store)\n\n    def render_multi_period_statement(self, statements, statement_type, standard=False):\n        \"\"\"Render a multi-period view of statements.\"\"\"\n        # Filter statements by type\n        filtered_statements = [\n            stmt for stmt in statements \n            if stmt[\"statement_type\"] == statement_type\n        ]\n        \n        # Stitch statements together\n        stitcher = StatementStitcher(self.concept_mapper)\n        stitched_data = stitcher.stitch_statements(filtered_statements, standard=standard)\n        \n        # Render the output\n        return self._render_table(stitched_data)\n\n    def _render_table(self, data):\n        \"\"\"Format stitched data into a readable table.\"\"\"\n        output = [\" | \".join([\"Concept\"] + data[\"periods\"])]\n        output.append(\"-\" * len(output[0]))\n        for row in data[\"rows\"]:\n            values = [str(v) if v is not None else \"N/A\" for v in row[\"values\"]]\n            output.append(\" | \".join([row[\"concept\"]] + values))\n        return \"\\n\".join(output)\n\n# Example usage\nxbrl = XBRL(MappingStore())\nmulti_period_view = xbrl.render_multi_period_statement(statements, \"IncomeStatement\", standard=True)\nprint(multi_period_view)\n```\n\n----------------------------------------\n\nTITLE: Example Usage: Rendering Standardized Multi-Period Statements with XBRL in Python\nDESCRIPTION: This usage snippet demonstrates initializing the XBRL class using a MappingStore and rendering a standardized, multi-period income statement using the methods defined previously. It presumes that enhanced_mappings.json or equivalent is available, and that statements is as specified in prior examples. The output is a human-readable, period-aligned table with concepts mapped to standard names where possible.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/edgar/xbrl2/docs/stitching-statements.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Assuming statements is the list from earlier\nxbrl = XBRL(MappingStore(\"enhanced_mappings.json\"))\nprint(xbrl.render_multi_period_statement(statements, \"IncomeStatement\", standard=True))\n```\n\n----------------------------------------\n\nTITLE: Viewing Filing in Browser or Viewer - Python\nDESCRIPTION: Triggers a built-in view for the filing using the view() method. Intended for interactive environments for HTML rendering or in-notebook display, enhancing user inspection.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/Usage.ipynb#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\neight_k_filing.view()\n```\n\n----------------------------------------\n\nTITLE: Extracting Plain Text Content from Filing with edgartools in Python\nDESCRIPTION: Demonstrates the `text()` method on a `Filing` object, which processes the filing's content and returns its textual representation as a string.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/working-with-filings.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntext = filing.text()\n```\n\n----------------------------------------\n\nTITLE: Parsing Offering Filing XML to Offering Object - Python\nDESCRIPTION: Parses the XML data of the first offering filing via Offering.from_xml(), returning a structured Offering object with all attributes parsed from the filing record.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/Usage.ipynb#_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nOffering.from_xml(offering_filings[0].xml())\n```\n\n----------------------------------------\n\nTITLE: Filtering and Sorting XBRL Facts in Python\nDESCRIPTION: This snippet demonstrates filtering Income Statement facts with values greater than 1 billion, safely handling None values, and sorting the results by the 'numeric_value' in descending order before converting them to a pandas DataFrame. It depends on a facts query API supporting chained operations such as .by_statement_type, .by_value (taking a lambda function), .sort_by, and .to_dataframe. Inputs include a facts object; outputs are a filtered and sorted DataFrame. The approach safely addresses missing values, allowing robust numeric comparisons.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/xbrl.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Safe numeric value filtering with proper None handling\\nlarge_income_items = facts.query() \\\\\\n    .by_statement_type('IncomeStatement') \\\\\\n    .by_value(lambda v: v > 1_000_000_000) \\\\\\n    .sort_by('numeric_value', ascending=False) \\\\\\n    .to_dataframe()\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw Data from XBRL Statements in Python\nDESCRIPTION: Shows how to bypass the standard rendering and access the raw data underlying a financial statement using the `.get_raw_data()` method on a statement object (e.g., `statements.balance_sheet()`). This returns a list of dictionaries, which can then be filtered or processed according to custom logic, as shown by the example filtering for items containing 'assets' in their label.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/xbrl.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n```python\n# Get raw statement data for custom processing\nraw_data = statements.balance_sheet().get_raw_data()\n\n# Extract specific information\nassets = [item for item in raw_data if 'assets' in item['label'].lower()]\n```\n```\n\n----------------------------------------\n\nTITLE: Getting Filings for a Specific Year with edgartools (Python)\nDESCRIPTION: Fetches all filings for a given year by passing the 'year' parameter to get_filings(). Dependencies: edgartools, correct identity, SEC API access. Input: year (e.g., 2021). Output: Filings object containing filings from the specified year. Useful for historical analyses.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/index.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfilings = get_filings(year=2021)\n```\n\n----------------------------------------\n\nTITLE: Filtering edgartools Filings After a Specific Date in Python\nDESCRIPTION: Applies the `filter()` method using the `date` parameter with the format 'YYYY-MM-DD:' to select filings from a `Filings` object that were filed on or after the specified date.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/using-the-filings-api.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfilings.filter(date=\"2021-02-28:\") \n```\n\n----------------------------------------\n\nTITLE: Defining the `download` Method for Attachments in Python\nDESCRIPTION: This Python code shows the signature and docstring for the `download` method, likely part of an `Attachments` class within `edgartools`. It allows users to save all attachments associated with a filing to a specified local path. The `path` parameter (accepting a string or Path object) determines the destination directory or specific file path, and the `archive` parameter (defaulting to False) controls whether the attachments are saved as individual files or compressed into a single zip archive. Requires `Union` and `Path` types from `typing` and `pathlib` respectively.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/local-data.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n    def download(self, path: Union[str, Path], archive: bool = False):\n        \"\"\"\n        Download all the attachments to a specified path.\n        If the path is a directory, the file is saved with its original name in that directory.\n        If the path is a file, the file is saved with the given path name.\n        If archive is True, the attachments are saved in a zip file.\n        path: str or Path - The path to save the attachments\n        archive: bool (default False) - If True, save the attachments in a zip file\n        \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating an edgartools Company Object in Python\nDESCRIPTION: This code instantiates a `Company` object from the `edgartools` library, referencing Union Pacific Corp using its ticker symbol \"UNP\". The second line (`c`) typically displays the object's representation in an interactive Python environment like a Jupyter notebook.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-CustomTags.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nc = Company(\"UNP\")\nc\n```\n\n----------------------------------------\n\nTITLE: Retrieving Attachments Object from FilingSGML in Python\nDESCRIPTION: Shows how to access the parsed attachments from a `FilingSGML` object. The `attachments` property returns an `Attachments` object containing individual `Attachment` instances.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/sgml.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nattachments = sgml.attachments\n```\n\n----------------------------------------\n\nTITLE: Paginating SEC Filings using edgartools in Python\nDESCRIPTION: This snippet demonstrates how to navigate between pages of a large list of SEC filings contained within a `Filings` object using the `edgartools` library. It assumes a `Filings` object has been obtained (e.g., via `get_filings()`) and shows calls to the `next()` and `prev()` methods to move to the subsequent or preceding page of results, respectively. No parameters are required for these methods.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/navigating-filings.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n```python\nfilings = get_filings()\nfilings.next()\nfilings.prev()\n```\n```\n\n----------------------------------------\n\nTITLE: Extracting and Displaying All XBRL Statements\nDESCRIPTION: Accesses the `statements` attribute of the parsed `xbrl` object, which contains all the financial and non-financial statements extracted from the XBRL data. The snippet then displays the content or representation of this `statements` collection.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-NonFinancialStatements.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nstatements = xbrl.statements\nstatements\n```\n\n----------------------------------------\n\nTITLE: Viewing the presentation structure of XBRL data\nDESCRIPTION: Accesses the `presentation` attribute of the `xbrl_data` object. This typically provides information about the structure and relationships between elements as defined in the XBRL presentation linkbase.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Reading-Data-From-XBRL.ipynb#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nxbrl_data.presentation\n```\n\n----------------------------------------\n\nTITLE: Marking Page Breaks and Fields with HTML Comments\nDESCRIPTION: HTML comments used potentially by an automated document processing system (e.g., SEC's EDGAR) to denote page breaks or specific fields within the filing. These comments are not rendered by browsers but serve as metadata for document generation or parsing.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0001104659-25-002604.txt#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<!-- Field: Page; Sequence: 2 -->\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- Field: /Page -->\n```\n\n----------------------------------------\n\nTITLE: Retrieving Company Facts in Python\nDESCRIPTION: Shows how to fetch company facts data from the SEC's Company Facts API endpoint. First, a `Company` object is instantiated (here, using a ticker), then the `get_facts_for_namespace()` method is called to retrieve the facts. The result is a `CompanyFacts` object.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/company.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ncompany = Company(\"SNOW\")\ncompany_facts = company.get_facts_for_namespace()\n```\n\n----------------------------------------\n\nTITLE: Parsing Form 3 Filings into Form3 Objects - Python\nDESCRIPTION: Shows how to convert a generic filing object to a Form3 instance, granting access to Form3-specific properties and methods for initial beneficial ownership data. The method assumes the filing corresponds to a Form 3 submission and that the object supports obj().\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/insider-filings.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nform3 = filing.obj()\n```\n\n----------------------------------------\n\nTITLE: Matching Statements by Concept Regex Patterns in Python\nDESCRIPTION: This Python helper function `_match_by_concept_pattern` implements a strategy to find financial statements by matching regular expression patterns against statement concept names. It uses the `re` module and accesses a `statement_registry` for patterns associated with the input `statement_type`. The function also considers the `is_parenthetical` flag to filter matches based on whether 'parenthetical' appears in the statement's definition. It returns the matched statement(s), the role of the first match, and a fixed confidence score (0.85) if successful, otherwise returns `None, None, 0.0`.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/edgar/xbrl2/docs/statement-matching.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport re\n\ndef _match_by_concept_pattern(self, statement_type, is_parenthetical=False):\n    \"\"\"\n    Match statements using regex patterns on concept names to handle custom company namespaces.\n    \n    Args:\n        statement_type: Statement type to match \n        is_parenthetical: Whether to look for parenthetical version\n        \n    Returns:\n        (matching_statements, found_role, confidence_score)\n    \"\"\"\n    # If we're looking for a standard statement type\n    if statement_type in self.statement_registry:\n        registry_entry = self.statement_registry[statement_type]\n        concept_patterns = registry_entry.get(\"concept_patterns\", [])\n        \n        if not concept_patterns:\n            return None, None, 0.0\n            \n        # Get all statements to check against patterns\n        all_statements = self.get_all_statements()\n        \n        # Check each statement's primary concept against our patterns\n        matched_statements = []\n        for stmt in all_statements:\n            primary_concept = stmt.get('primary_concept', '')\n            \n            # Skip if no primary concept\n            if not primary_concept:\n                continue\n                \n            # Check if this concept matches any of our patterns\n            for pattern in concept_patterns:\n                if re.match(pattern, primary_concept):\n                    # For parenthetical statements, check the role definition\n                    if is_parenthetical:\n                        role_def = stmt.get('definition', '').lower()\n                        if 'parenthetical' not in role_def:\n                            continue\n                    # For non-parenthetical, skip if has parenthetical\n                    elif not is_parenthetical:\n                        role_def = stmt.get('definition', '').lower()\n                        if 'parenthetical' in role_def:\n                            continue\n                            \n                    matched_statements.append(stmt)\n                    break  # Found a match, no need to check other patterns\n                    \n        # If we found matching statements, return the first one with high confidence\n        if matched_statements:\n            return matched_statements, matched_statements[0]['role'], 0.85\n            \n    return None, None, 0.0\n```\n\n----------------------------------------\n\nTITLE: Defining XBRL Presentation Hierarchy Structure in JSON\nDESCRIPTION: This JSON-like structure represents the Presentation Hierarchy derived from the presentation linkbase, organized by Extended Link Role (ELR) URI. Each role contains a title and a root node representing the start of a presentation tree. Nodes contain element IDs, optional preferred labels, ordering information, and nested children, defining the structure for statement rendering.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/edgar/xbrl2/docs/xbrl-parser-design.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n```\n{\n  \"roleUri\": {\n    \"title\": string,\n    \"root\": {\n      \"elementId\": string,\n      \"children\": [\n        {\n          \"elementId\": string,\n          \"preferredLabel\": string,\n          \"order\": number,\n          \"children\": [...]\n        }\n      ]\n    }\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Underlying Filing Data Table in Python\nDESCRIPTION: Demonstrates retrieving filings using `company.get_filings()` and then accessing the underlying `pyarrow.Table` containing the filing data via the `.data` property of the returned `CompanyFilings` object. Requires the `pyarrow` library.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/company.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfilings = company.get_filings()\n\n# Get the underlying Table\ndata: pa.Table = filings.data\n```\n\n----------------------------------------\n\nTITLE: Defining XBRL Fact Database Structure in JSON\nDESCRIPTION: This JSON-like structure defines the schema for the Fact Database within the Data Model. It stores individual facts keyed by a composite identifier (element ID and context ID). Each fact entry contains its reported value, decimals/precision ('INF' for infinite), a reference to its unit, and an array of any associated footnote identifiers.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/edgar/xbrl2/docs/xbrl-parser-design.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```\n{\n  \"elementId_contextId\": {\n    \"value\": string,\n    \"decimals\": number|\"INF\",\n    \"unitRef\": string,\n    \"footnotes\": [string]\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Excluding Metadata from Filing DataFrames - Python\nDESCRIPTION: Illustrates excluding metadata fields from the generated pandas DataFrame by setting include_metadata=False in the to_dataframe() method. This provides a cleaner, data-only table for analysis. Applicable to Ownership data objects such as Form4 or Form5.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/insider-filings.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndf = form4.to_dataframe(include_metadata=False)\n```\n\n----------------------------------------\n\nTITLE: System Architecture Diagram (ASCII Art)\nDESCRIPTION: An ASCII art diagram illustrating the flow of data in the proposed XBRL parsing system. It shows XBRL files being processed by an XBRL Parser, which populates a Data Model. A Statement Generator then uses the Data Model to produce the final output.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/xbrl-development/xbrl-parser-design.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n┌─────────────────┐     ┌─────────────────┐     ┌─────────────────┐\n│                 │     │                 │     │                 │\n│  XBRL File      │────▶│  XBRL Parser    │────▶│  Data Model     │\n│  Collection     │     │                 │     │                 │\n│                 │     │                 │     │                 │\n└─────────────────┘     └─────────────────┘     └─────────────────┘\n                                                        │\n                                                        ▼\n                                              ┌─────────────────┐\n                                              │                 │\n                                              │  Statement      │\n                                              │  Generator      │\n                                              │                 │\n                                              └─────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Defining XBRL Dimensional Structure in JSON\nDESCRIPTION: This JSON-like structure represents the Dimensional Structure derived from the definition linkbase, organized by Extended Link Role (ELR) URI. It defines hypercubes (tables), specifying their axes (dimensions), the domain and members for each axis, the default member for each axis, and the line items associated with the table structure, crucial for handling dimensional data.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/edgar/xbrl2/docs/xbrl-parser-design.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n```\n{\n  \"roleUri\": {\n    \"tables\": [\n      {\n        \"tableId\": string,\n        \"axes\": [\n          {\n            \"axisId\": string,\n            \"domain\": string,\n            \"members\": [string],\n            \"defaultMember\": string\n          }\n        ],\n        \"lineItems\": [string]\n      }\n    ]\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Company Object by Ticker Symbol\nDESCRIPTION: Creates an instance of the `Company` class using the ticker symbol 'TSLA'. This object represents the company and provides access to its filings and financial data. The second line displays the object representation.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Viewing-Financial-Statements.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nc = Company(\"TSLA\")\nc\n```\n\n----------------------------------------\n\nTITLE: Accessing 8-K Data Using EightK Object in Python\nDESCRIPTION: Shows how to interact with an `EightK` Data Object derived from an 8-K filing. This includes checking for the presence of press releases (`has_press_release`) and accessing them, retrieving the report date (`date_of_report`), and accessing the content of specific report items (e.g., \"Item 2.01\") using dictionary-like access.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/data-objects.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\neightk = filing.obj()\n\n# Check for press releases\nif eightk.has_press_release:\n    press_releases = eightk.press_releases\n    \n# Get report date\nreport_date = eightk.date_of_report\n\n# Access specific items\nif \"Item 2.01\" in eightk:\n    completion_info = eightk[\"Item 2.01\"]\n```\n\n----------------------------------------\n\nTITLE: Downloading an Attachment File with edgartools in Python\nDESCRIPTION: This snippet demonstrates how to download the file associated with an `Attachment` object using the `download()` method. It takes an optional path argument specifying the destination directory or full file path. If a directory is provided, the file is saved with its original name; if a full path is provided, it's saved to that specific file (allowing renaming). Assumes `attachment` is an `edgartools.Attachment` instance.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/attachments.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nattachment.download('/path/to/download')\n```\n\n----------------------------------------\n\nTITLE: Iterating through SEC Filings using edgartools in Python\nDESCRIPTION: This code illustrates how to loop through each individual filing within a `Filings` collection object obtained from the `edgartools` library. It assumes a `Filings` object named `filings` exists (e.g., returned by `get_filings()`) and uses a standard Python `for` loop. Inside the loop, the variable `filing` represents a single `Filing` object on each iteration, allowing for further processing.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/navigating-filings.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n```python\n\nfilings = get_filings()\nfor filing in filings:\n    # Do something with the filing\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Non-Company-Specific Insider Filings with Edgartools - Python\nDESCRIPTION: Shows how to use the get_filings method of the Filing class to retrieve insider filings across all companies by specific form types. The 'form' parameter specifies the forms to retrieve. This requires Edgartools and relevant class imports.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/insider-filings.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfilings = get_filings(form=[3,4,5])\n```\n\n----------------------------------------\n\nTITLE: Extracting XBRL Data from 8-K Filing - Python\nDESCRIPTION: Fetches the XBRL representation of the first 8-K filing in filings_8k by invoking the xbrl() method. Useful for extracting structured financial data. Assumes the presence of XBRL in the selected filing.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/Usage.ipynb#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfilings_8k = get_filings(form=\"8-K\")\neight_k_filing =  filings_8k[0]\neight_k_filing.xbrl()\n```\n\n----------------------------------------\n\nTITLE: Filtering SEC Filings by SIC Code and Listing Bank Company CIKs Using edgartools in Python\nDESCRIPTION: Filters retrieved filings for those in the 'Banking' industry using the SIC code \"6029\". Utilizes tqdm for progress display. Extracts matching CIKs and refines the filings to only those associated with detected bank companies. Dependencies: tqdm, edgartools. Inputs: filings iterable; Output: filtered filings by SIC code.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Filtering-by-industry.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom tqdm.auto import tqdm\n\nbank_ciks = [f.cik for \n             f in tqdm(filings) \n             if Company(f.cik).sic == \"6029\"]\nbank_filings = filings.filter(cik=bank_ciks)\nbank_filings\n```\n\n----------------------------------------\n\nTITLE: Retrieving a specific statement using get_statement method\nDESCRIPTION: Demonstrates an alternative way to retrieve a specific financial statement from the `xbrl_data` object using the `get_statement` method, passing the statement name ('CONSOLIDATEDBALANCESHEETS') as an argument.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Reading-Data-From-XBRL.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nxbrl_data.get_statement('CONSOLIDATEDBALANCESHEETS')\n```\n\n----------------------------------------\n\nTITLE: Defining SecurityHolding Dataclass for Form 3 Holdings - Python\nDESCRIPTION: Defines the SecurityHolding dataclass representing a securities position in Form 3 filings. The class captures essential attributes like security type, title, share count, ownership, derivatives, and pricing information. Dependencies include Python 3.7+ and the dataclasses module; the Optional type is used for nullable fields.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/insider-filings.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass SecurityHolding:\n    \"\"\"Represents a security holding (for Form 3)\"\"\"\n    security_type: str  # \"non-derivative\" or \"derivative\"\n    security_title: str\n    shares: int\n    direct_ownership: bool\n    ownership_nature: str = \"\"\n    underlying_security: str = \"\"\n    underlying_shares: int = 0\n    exercise_price: Optional[float] = None\n    exercise_date: str = \"\"\n    expiration_date: str = \"\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Company Object using CIK (Example 2) in Python\nDESCRIPTION: Another example of instantiating the `Company` object from the `edgartools` library using the company's Central Index Key (CIK).\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/company.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nCompany(1832950)\n```\n\n----------------------------------------\n\nTITLE: Illustrating Reconstructed Balance Sheet Hierarchy Example\nDESCRIPTION: This text-based hierarchy provides an example of how a Statement of Financial Position (Balance Sheet) structure might be reconstructed based on relationships parsed from an XBRL presentation linkbase. It uses indentation to show parent-child relationships and includes abstract elements ([Abstract]) which typically serve as headers or section titles.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/edgar/xbrl2/docs/xbrl-parser-design.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n```\nStatement of Financial Position\n│\n├── Assets [Abstract]\n│   ├── Current Assets [Abstract]\n│   │   ├── Cash and Cash Equivalents\n│   │   ├── Accounts Receivable, Net\n│   │   ├── Inventory, Net\n│   │   └── Total Current Assets\n│   │\n│   ├── Non-current Assets [Abstract]\n│   │   ├── Property, Plant and Equipment, Net\n│   │   ├── Goodwill\n│   │   └── Total Non-current Assets\n│   │\n│   └── Total Assets\n│\n└── Liabilities and Stockholders' Equity [Abstract]\n    ├── Liabilities [Abstract]\n    │   ├── Current Liabilities [Abstract]\n    │   │   ├── Accounts Payable\n    │   │   ├── Short-term Debt\n    │   │   └── Total Current Liabilities\n    │   │\n    │   ├── Non-current Liabilities [Abstract]\n    │   │   ├── Long-term Debt\n    │   │   ├── Deferred Tax Liabilities\n    │   │   └── Total Non-current Liabilities\n    │   │\n    │   └── Total Liabilities\n    │\n    ├── Stockholders' Equity [Abstract]\n    │   ├── Common Stock\n    │   ├── Additional Paid-in Capital\n    │   ├── Retained Earnings\n    │   └── Total Stockholders' Equity\n    │\n    └── Total Liabilities and Stockholders' Equity\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing a statement by name ('CoverPage')\nDESCRIPTION: Retrieves a specific statement ('CoverPage') from the `statements` dictionary using its name as the key.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Reading-Data-From-XBRL.ipynb#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nstatements['CoverPage']\n```\n\n----------------------------------------\n\nTITLE: Viewing Balance Sheet from Filing Object - Python\nDESCRIPTION: Views the balance sheet directly from the filing's 'statements' property using the 'view()' method. Input is a filing object with an attached statements interface; output is a visual representation of the balance sheet. May rely on custom display logic in the Edgartools library.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-StandardizedStatements.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nf.statements.balance_sheet.view()\n```\n\n----------------------------------------\n\nTITLE: Filtering SEC Filings Data as pandas DataFrame with edgartools in Python\nDESCRIPTION: This snippet uses the 'filings' attribute of the company object, converts the filing records to a pandas DataFrame, and filters for non-empty 'reportDate' entries. Dependencies include the edgar package for company and filing data and pandas for DataFrame manipulation. The key parameters are the company object 'c' and the DataFrame query filtering on non-empty reportDate fields; output is the queried DataFrame assigned to 'df' and displayed for analysis.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Reporting-Period.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndf = c.filings.to_pandas().query(\"reportDate !=''\")\ndf\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Extracting Primary HTML Content with FilingSGML in Python\nDESCRIPTION: Shows how to use the `html()` method of the `FilingSGML` object. This method identifies and returns the content of the primary HTML document found within the filing's attachments.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/sgml.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nhtml = sgml.html()\n```\n\n----------------------------------------\n\nTITLE: Handling XBRL Element ID Namespace Formats in Python\nDESCRIPTION: This snippet shows how to convert an XBRL element ID from the standard colon-separated namespace format (e.g., 'us-gaap:Assets') to an underscore-separated format (e.g., 'us-gaap_Assets') using Python's string `replace` method. This conversion is necessary for consistent handling of element IDs within the XBRL2 module, particularly when associating facts with statement types as mentioned in recent enhancements.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/edgar/xbrl2/XBRL2-Rewrite.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Convert from colon to underscore format when needed\nelement_id_underscore = element_id.replace(':', '_')\n```\n\n----------------------------------------\n\nTITLE: Converting EntityFacts to Pandas DataFrame (Python)\nDESCRIPTION: Transforms the EntityFacts object returned from get_facts() into a pandas DataFrame for analysis or visualization. Dependencies: pandas, EntityFacts object instantiated. Input: None. Output: DataFrame of fact data. Essential for downstream data science workflows.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/index.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfacts_df = facts.to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Importing edgartools and Fetching Current Filings in Python\nDESCRIPTION: Imports all components from the `edgar` library and calls `get_filings()` without arguments to retrieve SEC filings for the current year and quarter. The results are stored in a `Filings` object. Requires the `edgar` library to be installed.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/using-the-filings-api.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom edgar import *\n\nfilings = get_filings()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Related Filings for a Filing (Python)\nDESCRIPTION: Retrieves filings related by file number using the related_filings() method on a Filing object. Dependencies: Filing object obtained via get_filing(). Input: SEC accession number. Output: Filings object of related filings. Helps group filings for securities offerings or tracking filenumber-based relationships.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/index.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfiling = get_filing('0000320193-22-000002')\nfilings = filing.related_filings()\n```\n\n----------------------------------------\n\nTITLE: Viewing a Specific Report from a Filing\nDESCRIPTION: Selects a specific report from the `filing.reports` collection using its index (72) and calls the `view()` method on it. This method likely displays the content or details of the selected report.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-NonFinancialStatements.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfiling.reports[72].view()\n```\n\n----------------------------------------\n\nTITLE: Querying Exhibits by Document Type Using edgartools in Python\nDESCRIPTION: This short snippet demonstrates direct use of the 'query' method to retrieve exhibits matching types EX-99.1, EX-99, or EX-99.01. Returns a filtered collection of exhibits. No output is captured unless further action is taken.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Extract-Earnings-Releases.ipynb#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nexhibits.query(\"document_type in ['EX-99.1', 'EX-99', 'EX-99.01']\")\n```\n\n----------------------------------------\n\nTITLE: Extracting and Printing Exhibit Text Content Using edgartools (Python)\nDESCRIPTION: This snippet parses and extracts text from the HTML of a specific exhibit using 'HtmlDocument.from_html', then prints the extracted text. It requires prior download of the exhibit content and access to the HtmlDocument helper class from edgartools. The output is the plain text content of the exhibit.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Extract-Earnings-Releases.ipynb#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nexhibit_text = HtmlDocument.from_html(exhibits[1].download()).text\nprint(exhibit_text)\n```\n\n----------------------------------------\n\nTITLE: Accessing Non-Derivative Holdings from an Ownership Object in Python\nDESCRIPTION: This snippet shows how to retrieve individual non-derivative holdings from a parsed `Ownership` object (assumed to be stored in the 'ownership' variable). It accesses the `non_derivative_table`, then the `holdings` list, and retrieves the first holding using index `[0]`, assigning it to the 'holding' variable.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/parsing-filing-data.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nholding = ownership.non_derivative_table.holdings[0]\nholding\n```\n\n----------------------------------------\n\nTITLE: Importing edgartools and Setting User Identity in Python\nDESCRIPTION: This snippet imports all functions and classes from the `edgar` module, which is part of the `edgartools` library. It then calls the `set_identity()` function to provide a user agent string (in email format), which is required by the SEC EDGAR system for making requests. This identity helps the SEC track usage.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Fund-Filings.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom edgar import *\nset_identity(\"demo@funds.com\")\n```\n\n----------------------------------------\n\nTITLE: Importing edgartools and Setting User Identity in Python\nDESCRIPTION: This snippet imports all functions from the `edgar` module within the `edgartools` library. It then calls the `set_identity` function to provide a user identity (email address) required for making requests to the SEC EDGAR system. This identification is mandatory.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Beginners-Guide.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom edgar import *\n\nset_identity(\"myemail@domain.com\")\n```\n\n----------------------------------------\n\nTITLE: Fetching filings explicitly containing XBRL data\nDESCRIPTION: Uses the `get_filings` function with the `index=\"xbrl\"` argument. This specifically queries the EDGAR index for filings that are tagged as containing XBRL data, returning a collection of these filings.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Reading-Data-From-XBRL.ipynb#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfilings = get_filings(index=\"xbrl\")\nfilings\n```\n\n----------------------------------------\n\nTITLE: Accessing Filing Attachments with edgartools in Python\nDESCRIPTION: This snippet demonstrates how to access the collection of attachments associated with a `Filing` object using the `attachments` property. It assumes `filing` is an instance of the `edgartools.Filing` class. The property returns an object representing the collection of attachments for that specific SEC filing.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/attachments.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfiling.attachments\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ownership Summary from Form4 Objects - Python\nDESCRIPTION: Extracts a TransactionSummary object from a Form4 instance using get_ownership_summary. This summary provides consolidated transaction details, such as the total shares and transaction values. Requires a populated Form4 (Ownership) object.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/insider-filings.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nownership_summary = form4.get_ownership_summary()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Filing Markdown Rendering - Python\nDESCRIPTION: Obtains the markdown rendering of a filing via the markdown() method and prints the first 40 lines. Enables exporting or displaying filings in markdown format. Involves iterating over lines of the returned string.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/Usage.ipynb#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nmd = eight_k_filing.markdown()\n\nfor line in md.split(\"\\n\")[:40]:\n    print(line)\n```\n\n----------------------------------------\n\nTITLE: Parsing Effect Filing XML - Python\nDESCRIPTION: Transforms the XML content of an effect filing into a structured Effect object by calling Effect.from_xml() with the XML extracted from the effect_filing. Allows for parsing details not available in tabular exports.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/Usage.ipynb#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nEffect.from_xml(effect_filing.xml())\n```\n\n----------------------------------------\n\nTITLE: Ratio Calculation Process Flow Diagram in Mermaid\nDESCRIPTION: Provides a Mermaid graph definition for visualizing the multi-stage data transformation pipeline for ratio calculation: from initial DataFrames through filtering, merging, pivoting, calculation, and result encapsulation. Useful for documentation and presentation; requires Mermaid-compatible rendering tools.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/edgar/xbrl2/analysis/DESIGN.md#_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    A[Input DataFrames] --> B[Filter Required Concepts]\n    B --> C[Merge Statements]\n    C --> D[Pivot Data]\n    D --> E[Calculate Ratio]\n    E --> F[Create RatioAnalysis]\n```\n\n----------------------------------------\n\nTITLE: Data Model Structure: Calculation Network (JSON)\nDESCRIPTION: Defines the JSON structure for storing calculation relationships from the calculation linkbase, organized by role URI. Each role has a title and a list of calculation relationships. Each relationship specifies a parent element and an array of child elements, including their calculation weight (+1 or -1) and order.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/xbrl-development/xbrl-parser-design.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"roleUri\": {\n    \"title\": string,\n    \"calculations\": [\n      {\n        \"parent\": \"elementId\",\n        \"children\": [\n          {\n            \"elementId\": string,\n            \"weight\": 1|-1,\n            \"order\": number\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying the Company's Income Statement\nDESCRIPTION: Accesses and displays the most recent Income Statement (also known as Profit and Loss statement) from the `Financials` object (`financials`).\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Viewing-Financial-Statements.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfinancials.income\n```\n\n----------------------------------------\n\nTITLE: Accessing Exhibits of an 8-K Filing using edgartools in Python\nDESCRIPTION: Demonstrates how to access the list of exhibits associated with an SEC Form 8-K filing (`filing` object) by referencing the `exhibits` attribute. This returns a list-like object containing exhibit details or objects.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/eightk-filings.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfiling.exhibits \n```\n\n----------------------------------------\n\nTITLE: Listing Statements in XBRL Data Using edgartools - Python\nDESCRIPTION: This snippet shows how to access the collection of statements (e.g., financial statements) parsed from an XBRL data object, typically an instance of XbrlData. The code accesses the statements attribute of the xbrl_data instance, which returns a dictionary or similar mapping of statement names to statement objects. Requires that xbrl_data is a valid XbrlData instance after XBRL parsing. Inputs: None beyond the initialized xbrl_data. Output: Collection of available statements as objects.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/working-with-xbrl.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstatements = xbrl_data.statements\n```\n\n----------------------------------------\n\nTITLE: Querying facts by concept name using query_facts method\nDESCRIPTION: Uses the `query_facts` helper method available on the `XbrlInstance` object (`instance`) to retrieve facts associated with the concept 'dei:EntityRegistrantName'. This is often a more direct way than querying the full facts DataFrame.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Reading-Data-From-XBRL.ipynb#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ninstance.query_facts(concept=\"dei:EntityRegistrantName\")\n```\n\n----------------------------------------\n\nTITLE: Querying facts based on start date using query_facts method\nDESCRIPTION: Utilizes the `query_facts` method on the `XbrlInstance` object (`instance`) to filter facts based on their context dates. This example retrieves facts where the context's start date is '2024-08-09'.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Reading-Data-From-XBRL.ipynb#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ninstance.query_facts(start_date='2024-08-09')\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Single Latest Filing using edgartools in Python\nDESCRIPTION: Uses the `latest()` method without the `n` parameter (or with `n=1`) on a `Filings` object to retrieve the single most recent filing based on `filing_date`. Returns a `Filings` object containing only that single filing.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/using-the-filings-api.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfiling = filings.latest()\nfiling\n```\n\n----------------------------------------\n\nTITLE: Embedding Security Exchange Name using ix:nonNumeric (XBRL in HTML)\nDESCRIPTION: This snippet embeds the name of the exchange where a security is registered ('The Nasdaq Stock Market LLC') within a table cell (`<td>`) using `<ix:nonNumeric>`. It employs the 'dei:SecurityExchangeName' element, context 'c20241220to20241220', a unique ID, and the 'ixt-sec:exchnameen' format for the exchange name.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0000943374-24-000509.txt#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<td style=\"width: 41.5%; vertical-align: bottom;\">\n            <div style=\"text-align: center; font-family: 'Times New Roman', Times, serif; font-size: 10pt;\"><ix:nonNumeric name=\"dei:SecurityExchangeName\" id=\"Fact_d27a8e2584214b28884b8952c22770a8\" contextRef=\"c20241220to20241220\" format=\"ixt-sec:exchnameen\">The Nasdaq Stock Market LLC</ix:nonNumeric><br/>\n            </div>\n          </td>\n```\n\n----------------------------------------\n\nTITLE: Displaying the XbrlData object representation\nDESCRIPTION: Simply displays the string representation of the `xbrl_data` object itself, which might provide summary information or metadata about the parsed XBRL.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Reading-Data-From-XBRL.ipynb#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nxbrl_data\n```\n\n----------------------------------------\n\nTITLE: Listing Reports within a Filing\nDESCRIPTION: Accesses the `reports` attribute of the previously obtained `filing` object. This typically returns a list or dictionary containing information about the various reports included within the SEC filing.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-NonFinancialStatements.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfiling.reports\n```\n\n----------------------------------------\n\nTITLE: Accessing Non-Derivative Transactions from Ownership Document - Python\nDESCRIPTION: This snippet accesses the first non-derivative transaction from the OwnershipDocument, using list indexing on the 'non_derivative_table.transactions' property. The input is an OwnershipDocument object already containing parsed data. Returns a non-derivative transaction object for inspection or processing.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/ownership.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntransaction = ownership.non_derivative_table.transactions[0]\ntransaction\n```\n\n----------------------------------------\n\nTITLE: Fetching Company-Specific Filings using edgartools in Python\nDESCRIPTION: Retrieves filings specifically for the company with the ticker symbol 'SNOW'. It uses the `Company()` object initialized with the ticker and accesses its `.filings` attribute. The result is a `CompanyFilings` object (`cf`) which also supports pagination.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Paging-Through-Filings.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncf = Company(\"SNOW\").filings\n\ncf\n```\n\n----------------------------------------\n\nTITLE: Opening a Filing in the Browser using edgartools in Python\nDESCRIPTION: Calls the `open()` method on a `Filing` object to attempt to open the primary filing document (usually HTML) in the system's default web browser. This functionality depends on having a desktop environment and browser access; it may not work on remote servers.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/using-the-filings-api.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfiling.open()\n```\n\n----------------------------------------\n\nTITLE: Embedding Soliciting Material Checkbox using ix:nonNumeric (XBRL in HTML)\nDESCRIPTION: This snippet shows an unchecked checkbox ('&#9744;') embedded in a table cell (`<td>`) using `<ix:nonNumeric>`. It represents the status of 'Soliciting material pursuant to Rule 14a-12'. The tag uses 'dei:SolicitingMaterial', context 'c20241220to20241220', a unique ID, and the 'ixt-sec:boolballotbox' format.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0000943374-24-000509.txt#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<td style=\"width: 6.19%; vertical-align: top;\">\n            <div style=\"text-align: center; font-family: 'Times New Roman', Times, serif; font-size: 12pt;\"><ix:nonNumeric name=\"dei:SolicitingMaterial\" id=\"Fact_49411162f0554730906951575c3f9b21\" contextRef=\"c20241220to20241220\" format=\"ixt-sec:boolballotbox\">&#9744;</ix:nonNumeric><br/>\n            </div>\n          </td>\n```\n\n----------------------------------------\n\nTITLE: Installing edgartools Library in Python\nDESCRIPTION: Installs the edgartools library, which is required for interacting with SEC Edgar data. This shell command should be executed before importing and using any features of edgartools. No parameters are required, and the command should be run in a cell or terminal.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Filtering-by-industry.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install edgartools\n```\n\n----------------------------------------\n\nTITLE: Retrieving SEC Filings using edgartools in Python\nDESCRIPTION: This snippet calls the `get_filings()` function from the `edgartools` library to retrieve a collection of SEC filings. The result is stored in the `filings` variable, which is then displayed. The specific filings retrieved depend on the default parameters of the function or previous configurations.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Beginners-Guide.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfilings = get_filings()\nfilings\n```\n\n----------------------------------------\n\nTITLE: Querying Fund Filings - Python\nDESCRIPTION: Retrieves fund filings via get_funds() and outputs the result. Typically returns filings related to investment funds for further exploration or parsing.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/Usage.ipynb#_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nfunds = get_funds()\nfunds\n```\n\n----------------------------------------\n\nTITLE: Extracting Cash Flow Statement from XBRL in Python\nDESCRIPTION: Extracts the cash flow statement from the XBRL object by calling the 'statements.cash_flow_statement()' method. This prepares the statement for rendering or conversion. The snippet depends on a previously instantiated XBRL object. Returns an object representing the cash flow statement for further manipulation.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-FinancialRatios.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncash_flow = xbrl.statements.cash_flow_statement()\ncash_flow\n```\n\n----------------------------------------\n\nTITLE: Accessing Non-Derivative Transactions from an Ownership Object in Python\nDESCRIPTION: This snippet illustrates accessing individual non-derivative transactions within a parsed `Ownership` object (assumed to be stored in the 'ownership' variable). It navigates to the `non_derivative_table`, accesses the `transactions` list, and retrieves the first transaction using index `[0]`, assigning it to the 'transaction' variable.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/parsing-filing-data.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntransaction = ownership.non_derivative_table.transactions[0]\ntransaction\n```\n\n----------------------------------------\n\nTITLE: Defining the `download_edgar_data` Function in Python\nDESCRIPTION: This is the function signature for `download_edgar_data` in the `edgartools` Python library. It allows users to selectively download company submissions, company facts, and reference data to the configured local storage directory by setting the corresponding boolean parameters (`submissions`, `facts`, `reference`). By default, all three data types are downloaded (True).\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/local-data.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef download_edgar_data(submissions: bool = True,\n                        facts: bool = True,\n                        reference: bool = True):\n```\n\n----------------------------------------\n\nTITLE: Extracting Investment Holding Data from Namespaced XML - XML\nDESCRIPTION: This snippet illustrates a section of XML containing two 'infoTable' records, each encoding the properties of a specific investment holding. Required dependencies include an XML parser capable of handling custom namespace prefixes (e.g., 'ns1'). Key parameters include elements such as 'nameOfIssuer', 'titleOfClass', and nested voting authority fields. Typical inputs are XML documents conforming to this schema, and outputs are structured datasets representing individual holdings; handling requires awareness of the XML namespace and nested structures.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/13F.0001894188-23-000007.txt#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n\t\t<ns1:investmentDiscretion>SOLE</ns1:investmentDiscretion>\\n\\t\\t<ns1:votingAuthority>\\n\\t\\t\\t<ns1:Sole>72500</ns1:Sole>\\n\\t\\t\\t<ns1:Shared>0</ns1:Shared>\\n\\t\\t\\t<ns1:None>0</ns1:None>\\n\\t\\t</ns1:votingAuthority>\\n\\t</ns1:infoTable>\\n\\t<ns1:infoTable>\\n\\t\\t<ns1:nameOfIssuer>VISA INC</ns1:nameOfIssuer>\\n\\t\\t<ns1:titleOfClass>COM</ns1:titleOfClass>\\n\\t\\t<ns1:cusip>92826C839</ns1:cusip>\\n\\t\\t<ns1:value>20701000</ns1:value>\\n\\t\\t<ns1:shrsOrPrnAmt>\\n\\t\\t\\t<ns1:sshPrnamt>90000</ns1:sshPrnamt>\\n\\t\\t\\t<ns1:sshPrnamtType>SH</ns1:sshPrnamtType>\\n\\t\\t</ns1:shrsOrPrnAmt>\\n\\t\\t<ns1:investmentDiscretion>SOLE</ns1:investmentDiscretion>\\n\\t\\t<ns1:votingAuthority>\\n\\t\\t\\t<ns1:Sole>90000</ns1:Sole>\\n\\t\\t\\t<ns1:Shared>0</ns1:Shared>\\n\\t\\t\\t<ns1:None>0</ns1:None>\\n\\t\\t</ns1:votingAuthority>\\n\\t</ns1:infoTable>\n```\n\n----------------------------------------\n\nTITLE: Embedding City Area Code using ix:nonNumeric (XBRL in HTML)\nDESCRIPTION: This snippet demonstrates embedding the registrant's city area code ('414') within a styled `<div>` using the `<ix:nonNumeric>` iXBRL tag. The tag uses the 'dei:CityAreaCode' element from the DEI taxonomy, references a specific context ('c20241220to20241220'), and has a unique fact ID ('Fact_aa174cac8b874ee1af21f222068d2968').\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0000943374-24-000509.txt#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"text-align: center; font-family: 'Times New Roman', Times, serif; font-size: 12pt;\"><span style=\"text-decoration: underline;\">(<ix:nonNumeric name=\"dei:CityAreaCode\" id=\"Fact_aa174cac8b874ee1af21f222068d2968\" contextRef=\"c20241220to20241220\">414</ix:nonNumeric>) <ix:nonNumeric name=\"dei:LocalPhoneNumber\" id=\"Fact_c48636743ebe4eecbb0eda19274efe3c\" contextRef=\"c20241220to20241220\">421-8200</ix:nonNumeric></span></div>\n```\n\n----------------------------------------\n\nTITLE: Selecting a Filing by Index from Filings List (Python)\nDESCRIPTION: Accesses a specific filing from the Filings container using zero-based indexing. Dependencies: Prior call to get_filings(). Input: Index integer. Output: A single Filing object. Enables users to drill-down into a fetched filings collection.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/index.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfiling = filings[3]\n```\n\n----------------------------------------\n\nTITLE: Batch Learning and Mapping of XBRL Concepts with MappingStore - Python\nDESCRIPTION: This Python snippet implements an automated job for batch processing XBRL financial statement filings, inferring mappings from company-specific concepts to standard concepts and updating a persistent MappingStore. It leverages standard library modules such as json and collections, uses string similarity (difflib), and provides high-level classes for mapping logic, storage, confidence scoring, and persistence. Dependencies include an XBRL parser (external, not shown), Python 3, and optionally the files mappings.json and pending_mappings.json for storage. Takes a list of filing data as input, computes or infers concept mappings, and writes results to storage. The implementation is oriented for extensibility and can be integrated with job queues for scale. Limitations include basic string similarity (could be enhanced with ML/embeddings) and a simple heuristic for contextual boosting.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/edgar/xbrl2/docs/standardization.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport json\nfrom collections import defaultdict\nfrom difflib import SequenceMatcher  # For string similarity\n\nclass StandardConcept:\n    REVENUE = \"Revenue\"\n    GROSS_PROFIT = \"GrossProfit\"\n    ASSETS = \"Assets\"\n    # ... more as needed\n\nclass MappingStore:\n    def __init__(self, source=\"mappings.json\"):\n        self.source = source\n        self.mappings = self._load_mappings()\n\n    def _load_mappings(self):\n        try:\n            with open(self.source, 'r') as f:\n                return {k: set(v) for k, v in json.load(f).items()}\n        except FileNotFoundError:\n            return {}\n\n    def add(self, company_concept, standard_concept):\n        if standard_concept not in self.mappings:\n            self.mappings[standard_concept] = set()\n        self.mappings[standard_concept].add(company_concept)\n        self._save_mappings()\n\n    def _save_mappings(self):\n        with open(self.source, 'w') as f:\n            json.dump(self.mappings, f, indent=2)\n\nclass ConceptMapper:\n    def __init__(self, mapping_store):\n        self.mapping_store = mapping_store\n        self.pending_mappings = defaultdict(list)  # For low-confidence mappings\n\n    def learn_mappings(self, filings):\n        \"\"\"\n        filings: List of dicts with XBRL data:\n        [{\"concept\": str, \"label\": str, \"statement_type\": str, \"calculation_parent\": str, ...}, ...]\n        \"\"\"\n        for filing in filings:\n            concept = filing[\"concept\"]\n            label = filing[\"label\"]\n            statement_type = filing[\"statement_type\"]\n            context = {\"statement_type\": statement_type, \"calculation_parent\": filing.get(\"calculation_parent\")}\n\n            # Skip if already mapped\n            if self.mapping_store.get_mapping(concept):\n                continue\n\n            # Infer mapping and confidence\n            standard_concept, confidence = self._infer_mapping(concept, label, context)\n\n            # Handle based on confidence\n            if confidence >= 0.9:\n                self.mapping_store.add(concept, standard_concept)\n                print(f\"Added mapping: {concept} -> {standard_concept} (confidence: {confidence:.2f})\")\n            elif confidence >= 0.5:\n                self.pending_mappings[standard_concept].append((concept, confidence))\n                print(f\"Pending: {concept} -> {standard_concept} (confidence: {confidence:.2f})\")\n\n    def _infer_mapping(self, concept, label, context):\n        # Direct label similarity\n        best_match = None\n        best_score = 0\n        for std_concept in StandardConcept.__dict__.values():\n            if not isinstance(std_concept, str):\n                continue\n            similarity = SequenceMatcher(None, label.lower(), std_concept.lower()).ratio()\n            if similarity > best_score:\n                best_score = similarity\n                best_match = std_concept\n\n        # Boost score with contextual rules\n        if context[\"statement_type\"] == \"IncomeStatement\" and \"revenue\" in label.lower():\n            if best_match == StandardConcept.REVENUE:\n                best_score = min(1.0, best_score + 0.2)\n        elif context.get(\"calculation_parent\") == \"us-gaap_GrossProfit\" and best_match == StandardConcept.REVENUE:\n            best_score = min(1.0, best_score + 0.3)\n\n        return best_match, best_score\n\n    def save_pending_mappings(self, destination=\"pending_mappings.json\"):\n        with open(destination, 'w') as f:\n            json.dump(self.pending_mappings, f, indent=2)\n\n# Example job\ndef run_learning_job(filings):\n    mapping_store = MappingStore()\n    mapper = ConceptMapper(mapping_store)\n    mapper.learn_mappings(filings)\n    mapper.save_pending_mappings()\n\n# Sample filings data\nsample_filings = [\n    {\n        \"concept\": \"us-gaap_SalesRevenueNet\",\n        \"label\": \"Net Sales Revenue\",\n        \"statement_type\": \"IncomeStatement\",\n        \"calculation_parent\": \"us-gaap_GrossProfit\"\n    },\n    {\n        \"concept\": \"us-gaap_Assets\",\n        \"label\": \"Total Assets\",\n        \"statement_type\": \"BalanceSheet\"\n    },\n    {\n        \"concept\": \"custom_Rev\",\n        \"label\": \"Revenue from Sales\",\n        \"statement_type\": \"IncomeStatement\"\n    }\n]\n\n# Run the job\nrun_learning_job(sample_filings)\n\n```\n\n----------------------------------------\n\nTITLE: Building Interactive HTML Report - HTML and JavaScript\nDESCRIPTION: This snippet provides a minimal HTML skeleton for an XBRL-based report preview and includes a JavaScript function for toggling element visibility. The HTML section includes stylesheet and script references, as well as page elements for a tabular report. The JavaScript toggleNextSibling function toggles the display of a sibling element, supporting expandable report rows. Dependencies include the external Show.js script and a CSS file for report styling. Inputs are user events (clicks), and output is dynamic visual state change within the report. Limitations: JavaScript must be enabled for interactive features to work.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0000943374-24-000509.txt#_snippet_17\n\nLANGUAGE: HTML\nCODE:\n```\n<html>\\n<head>\\n<title></title>\\n<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"include/report.css\\\">\\n<script type=\\\"text/javascript\\\" src=\\\"Show.js\\\">/* Do Not Remove This Comment */</script><script type=\\\"text/javascript\\\">\\n\\t\\t\\t\\t\\t\\tfunction toggleNextSibling (e) {\\n\\t\\t\\t\\t\\t\\tif (e.nextSibling.style.display=='none') {\\n\\t\\t\\t\\t\\t\\te.nextSibling.style.display='block';\\n\\t\\t\\t\\t\\t\\t} else { e.nextSibling.style.display='none'; }\\n\\t\\t\\t\\t\\t\\t}</script>\\n</head>\\n<body>\\n<span style=\\\"display: none;\\\">v3.24.4</span><table class=\\\"report\\\" border=\\\"0\\\" cellspacing=\\\"2\\\" id=\\\"idm45203655553184\\\">\\n<tr>\\n<th class=\\\"tl\\\" colspan=\\\"1\\\" rowspan=\\\"1\\\"><div style=\\\"width: 200px;\\\"><strong>Document and Entity Information<br></strong></div></th>\\n<th class=\\\"th\\\"><div>Dec. 20, 2024</div></th>\\n</tr>\\n<tr class=\\\"re\\\">\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction toggleNextSibling (e) {\\nif (e.nextSibling.style.display=='none') {\\ne.nextSibling.style.display='block';\\n} else { e.nextSibling.style.display='none'; }\\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Extended Transition Period Election Checkbox using ix:nonNumeric (XBRL in HTML)\nDESCRIPTION: This snippet displays an unchecked checkbox ('&#9744;') within a `<div>` element, indicating whether the registrant has elected not to use the extended transition period for accounting standards. It uses the `<ix:nonNumeric>` tag with 'dei:EntityExTransitionPeriod', context 'c20241220to20241220', a unique ID, and the 'ixt-sec:boolballotbox' format.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0000943374-24-000509.txt#_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"text-align: justify; font-family: 'Times New Roman', Times, serif; font-size: 12pt;\">If an emerging growth company, indicate by check mark if the Registrant has elected not to use the extended transition period for complying with any new or\n      revised financial accounting standards provided pursuant to Section 13(a) of the Exchange Act.&#160; <ix:nonNumeric name=\"dei:EntityExTransitionPeriod\" id=\"Fact_5bf32abde32d42e48abad7219ff6d83d\" contextRef=\"c20241220to20241220\" format=\"ixt-sec:boolballotbox\">&#9744;</ix:nonNumeric></div>\n```\n\n----------------------------------------\n\nTITLE: Accessing Derivative Transactions from an Ownership Object in Python\nDESCRIPTION: This snippet demonstrates how to access individual derivative transactions from a parsed `Ownership` object (assumed to be stored in the 'ownership' variable). It accesses the `derivative_table`, then the `transactions` list within it, and retrieves the first transaction using index `[0]`.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/parsing-filing-data.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nownership.derivative_table.transactions[0]\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Filings for a Company in Python\nDESCRIPTION: Calls the `get_filings()` method on a `Company` object to retrieve all available historical filings for that company from the SEC Edgar submissions endpoint. Returns a `CompanyFilings` object.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/company.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncompany.get_filings()\n```\n\n----------------------------------------\n\nTITLE: Listing All Available Statements in XBRL Data\nDESCRIPTION: Accesses the `statements` property of the XBRL data object (`xb`) to display a list or summary of all financial statements available within the XBRL filing.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Viewing-Financial-Statements.ipynb#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nxb.statements\n```\n\n----------------------------------------\n\nTITLE: Rendering and Structuring SEC Power of Attorney Statement - HTML\nDESCRIPTION: This HTML snippet provides a formatted Power of Attorney declaration, executed as part of a regulatory exhibit (EX-24), authorizing representatives to file SEC Forms 3, 4, and 5 on behalf of an officer or director. It uses table-based layout and standard HTML tags to organize the legal text, signature line, effective period, and authorization instructions. It requires a standard HTML5 or browser environment for rendering and assumes the user can interpret English legal prose; user input is not expected, but authoritative signatures and dates are present as explicit content.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0001127602-25-001055.txt#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<HTML><HEAD><TITLE>Jessica A. Garascia  POA</TITLE></HEAD><BODY style=\\\"font-family:Bookman Old Style\\\"><TABLE CELLSPACING=\\\"0\\\" BORDER=\\\"0\\\" WIDTH=\\\"588\\\"><TR><TD VALIGN=\\\"TOP\\\" COLSPAN=\\\"3\\\"><H1 ALIGN=\\\"RIGHT\\\" STYLE=\\\"font-size:140%\\\">EXHIBIT 24</H1></TD></TR><TR height=\\\"10\\\"><td><div /></td></TR><TR height=\\\"10\\\"><td><div /></td></TR><TR><TD VALIGN=\\\"TOP\\\" COLSPAN=\\\"3\\\"><H1 ALIGN=\\\"center\\\" STYLE=\\\"font-size:140%\\\">AAR CORP</H1><H2 ALIGN=\\\"CENTER\\\" STYLE=\\\"font-size:120%\\\">Power of Attorney<BR />\\n\\t\\t\\t\\t\\t\\t\\t\\tfor Executing Forms 3, 4 and 5</H2></TD></TR><TR height=\\\"10\\\"><td><div /></td></TR><TR><TD VALIGN=\\\"TOP\\\" COLSPAN=\\\"3\\\"><dd />Know\\n\\t\\t\\t\\t\\t\\t\\t\\tall men by these presents, that the undersigned, director or officer, or\\n\\t\\t\\t\\t\\t\\t\\t\\tboth, of AAR CORP, hereby constitutes\\n\\t\\t\\t\\t\\t\\t\\t\\tand appoints each of Katherine Kwiat, Kim Loies, Jamie Brown,\\n\\t\\t\\t\\t\\t\\t\\t\\tsigning singly, the undersigned's true and lawful attorney-in-fact to:\\n\\t\\t\\t\\t\\t\\t\\t\\t</TD></TR><TR height=\\\"10\\\"><td><div /></td></TR><TR><TD WIDTH=\\\"16%\\\" VALIGN=\\\"TOP\\\" ALIGN=\\\"center\\\">\\n\\t\\t\\t\\t(1)\\n\\t\\t\\t\\t</TD><TD WIDTH=\\\"84%\\\" VALIGN=\\\"TOP\\\" COLSPAN=\\\"2\\\">\\n\\t\\t\\t\\t\\texecute for and on behalf of the undersigned, in the undersigned's capacity\\n\\t\\t\\t\\t\\tas an officer and/or director of AAR CORP (the \\\"Company\\\"),\\n\\t\\t\\t\\t\\tForms 3, 4, and 5 in accordance with Section 16(a) of the Securities Exchange\\n\\t\\t\\t\\t\\tAct of 1934 and the rules thereunder;\\n\\t\\t\\t\\t</TD></TR><TR height=\\\"10\\\"><td><div /></td></TR><TR><TD WIDTH=\\\"16%\\\" VALIGN=\\\"TOP\\\" ALIGN=\\\"center\\\">\\n\\t\\t\\t\\t(2)\\n\\t\\t\\t\\t</TD><TD WIDTH=\\\"84%\\\" VALIGN=\\\"TOP\\\" COLSPAN=\\\"2\\\">\\n\\t\\t\\t\\tdo and perform any and all acts for and on behalf of the undersigned which may\\n\\t\\t\\t\\tbe necessary or desirable to complete and execute any such Form 3, 4 or 5 and\\n\\t\\t\\t\\ttimely file such form with the United States Securities and Exchange Commission\\n\\t\\t\\t\\tand any stock exchange or similar authority; and\\n\\t\\t\\t\\t</TD></TR><TR height=\\\"10\\\"><td><div /></td></TR><TR><TD WIDTH=\\\"16%\\\" VALIGN=\\\"TOP\\\" ALIGN=\\\"center\\\">\\n\\t\\t\\t\\t(3)\\n\\t\\t\\t\\t</TD><TD WIDTH=\\\"84%\\\" VALIGN=\\\"TOP\\\" COLSPAN=\\\"2\\\">\\n\\t\\t\\t\\ttake any other action of any type whatsoever in connection with the foregoing\\n\\t\\t\\t\\twhich, in the opinion of such attorney-in-fact, may be of benefit to, in the\\n\\t\\t\\t\\tbest interest of, or legally required by, the undersigned, it being understood\\n\\t\\t\\t\\tthat the documents executed by such attorney-in-fact on behalf of the undersigned\\n\\t\\t\\t\\tpursuant to this Power of Attorney shall be in such form and shall contain such\\n\\t\\t\\t\\tterms and conditions as such attorney-in-fact may approve in such attorney-in-fact's\\n\\t\\t\\t\\tdiscretion.\\n\\t\\t\\t\\t</TD></TR><TR height=\\\"10\\\"><td><div /></td></TR><TR><TD VALIGN=\\\"TOP\\\" COLSPAN=\\\"3\\\"><dd />The\\n\\t\\t\\t\\tundersigned hereby grants to each such attorney-in-fact full power and authority\\n\\t\\t\\t\\tto do and perform any and every act and thing whatsoever requisite, necessary,\\n\\t\\t\\t\\tor proper to be done in the exercise of any of the rights and powers herein\\n\\t\\t\\t\\tgranted, as fully to all intents and purposes as the undersigned might or could\\n\\t\\t\\t\\tdo if personally present, with full power of substitution or revocation, hereby\\n\\t\\t\\t\\tratifying and confirming all that such attorney-in-fact, or such attorney-in-fact's\\n\\t\\t\\t\\tsubstitute or substitutes, shall lawfully do or cause to be done by virtue of\\n\\t\\t\\t\\tthis power of attorney and the rights and powers herein granted. The undersigned\\n\\t\\t\\t\\tacknowledges that the foregoing attorneys-in-fact, in serving in such capacity\\n\\t\\t\\t\\tat the request of the undersigned, are not assuming, nor is the Company assuming,\\n\\t\\t\\t\\tany of the undersigned's responsibilities to comply with Section 16 of the Securities\\n\\t\\t\\t\\tExchange Act of 1934.\\n\\t\\t\\t\\t</TD></TR><TR height=\\\"10\\\"><td><div /></td></TR><TR><TD VALIGN=\\\"TOP\\\" COLSPAN=\\\"3\\\"><dd />This\\n\\t\\t\\t\\tPower of Attorney shall remain in full force and effect until the undersigned\\n\\t\\t\\t\\tis no longer required to file Forms 3, 4 and 5 with respect to the\\n\\t\\t\\t\\tundersigned's holdings of and transactions in securities of AAR CORP\\n\\t\\t\\t\\tunless earlier revoked by the undersigned in a signed writing\\n\\t\\t\\t\\tdelivered to the foregoing attorneys-in-fact.\\n\\t\\t\\t\\t</TD></TR><TR height=\\\"10\\\"><td><div /></td></TR><TR><TD VALIGN=\\\"TOP\\\" COLSPAN=\\\"3\\\"><dd />IN\\n\\t\\t\\t\\tWITNESS WHEREOF, the undersigned has executed this Power of Attorney as of this 10<sup>th</sup>\\n\\t\\t\\t\\tday of January, 2023</TD></TR><TR height=\\\"10\\\"><td><div /></td></TR></TABLE><table border=\\\"0\\\" width=\\\"100%\\\" cellpadding=\\\"1\\\" WIDTH=\\\"588\\\"><tr><td rowspan=\\\"2\\\" width=\\\"64%\\\" /><td style=\\\"border-bottom: solid black 1px\\\" width=\\\"36%\\\">\\n\\t\\t\\t/s/ Jessica A. Garascia</td></tr><tr><td>Jessica A. Garascia</td></tr></table></BODY></HTML>\n```\n\n----------------------------------------\n\nTITLE: Stitching XBRL Statements for Trend Analysis in Python\nDESCRIPTION: Illustrates the process of creating stitched financial statements from multiple filings using `XBRLS.from_filings()`. It shows how to retrieve a multi-period statement (e.g., a 3-year income statement trend using `max_periods=3`) and convert it into a pandas DataFrame for time-series analysis. Requires `edgar` and `pandas`.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/xbrl.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n```python\n# Create stitched statements across multiple filings\nxbrls = XBRLS.from_filings(filings)\nstitched = xbrls.statements\n\n# Get a three-year comparison of income statements\nincome_trend = stitched.income_statement(max_periods=3)\n\n# Convert to DataFrame for time series analysis\ntrend_df = income_trend.to_dataframe()\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Fair Value Hierarchy Level 2 in XBRL (US-GAAP)\nDESCRIPTION: This XBRL snippet uses the `xbrldi:explicitMember` tag to specify that the associated financial data is valued using Level 2 inputs according to the US-GAAP fair value hierarchy. The `dimension` attribute points to the `us-gaap:FairValueByFairValueHierarchyLevelAxis`, and the element content `us-gaap:FairValueInputsLevel2Member` indicates the specific level. This signifies valuation based on observable market data, but not direct quotes for identical items.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/xbrl/docs/FAIR_VALUE_DIMENSIONS.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<xbrldi:explicitMember dimension=\"us-gaap:FairValueByFairValueHierarchyLevelAxis\">us-gaap:FairValueInputsLevel2Member</xbrldi:explicitMember>\n```\n\n----------------------------------------\n\nTITLE: Styling XBRL Report Elements using CSS\nDESCRIPTION: Defines CSS rules for styling various elements within an HTML report structure identified by the '.report' class. It includes styles for links, table rows (header, even, odd, underlined), footnotes, and different data types (numeric, text), controlling layout, background colors, borders, text alignment, and visibility.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0000943374-24-000509.txt#_snippet_31\n\nLANGUAGE: css\nCODE:\n```\n.report td.pl a.a {\n\tcursor: pointer;\n\tdisplay: block;\n\twidth: 200px;\n\toverflow: hidden;\n}\n\n.report td.pl div.a {\n\twidth: 200px;\n}\n\n.report td.pl a:hover {\n\tbackground-color: #ffc;\n}\n\n/* Header rows... */\n.report tr.rh {\n\tbackground-color: #acf;\n\tcolor: black;\n\tfont-weight: bold;\n}\n\n/* Calendars... */\n.report .rc {\n\tbackground-color: #f0f0f0;\n}\n\n/* Even rows... */\n.report .re, .report .reu {\n\tbackground-color: #def;\n}\n\n.report .reu td {\n\tborder-bottom: 1px solid black;\n}\n\n/* Odd rows... */\n.report .ro, .report .rou {\n\tbackground-color: white;\n}\n\n.report .rou td {\n\tborder-bottom: 1px solid black;\n}\n\n.report .rou table td, .report .reu table td {\n\tborder-bottom: 0px solid black;\n}\n\n/* styles for footnote marker */\n.report .fn {\n\twhite-space: nowrap;\n}\n\n/* styles for numeric types */\n.report .num, .report .nump {\n\ttext-align: right;\n\twhite-space: nowrap;\n}\n\n.report .nump {\n\tpadding-left: 2em;\n}\n\n.report .nump {\n\tpadding: 0px 0.4em 0px 2em;\n}\n\n/* styles for text types */\n.report .text {\n\ttext-align: left;\n\twhite-space: normal;\n}\n\n.report .text .big {\n\tmargin-bottom: 1em;\n\twidth: 17em;\n}\n\n.report .text .more {\n\tdisplay: none;\n}\n\n.report .text .note {\n\tfont-style: italic;\n\tfont-weight: bold;\n}\n\n.report .text .small {\n\twidth: 10em;\n}\n\n.report sup {\n\tfont-style: italic;\n}\n\n.report .outerFootnotes {\n\tfont-size: 1em;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying the Company's Balance Sheet (Explicit)\nDESCRIPTION: Explicitly accesses and displays the most recent Balance Sheet statement from the `Financials` object (`financials`). This snippet reiterates accessing the balance sheet data.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Viewing-Financial-Statements.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfinancials.balance_sheet\n```\n\n----------------------------------------\n\nTITLE: Importing edgartools Library Modules in Python\nDESCRIPTION: Imports necessary components from the `edgartools` library. Specifically, it imports the main `edgar` module and the `xbrl2` submodule, which likely contains functionalities for handling XBRL data.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-Instance-Only-XBRL.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom edgar import *\nfrom edgar.xbrl2 import *\n```\n\n----------------------------------------\n\nTITLE: Retrieving Latest Unpublished Filings from SEC (Python)\nDESCRIPTION: Uses get_latest_filings() to fetch filings published by the SEC not yet in the regular index. Dependencies: edgartools, network connection. Input: None. Output: Filings object with the most recent data. Allows users to access cutting-edge or unreleased filings.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/index.md#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfilings = get_latest_filings()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Related SEC Filings using edgartools in Python\nDESCRIPTION: This snippet shows how to retrieve filings that are related to a specific SEC filing using the `edgartools` library. It requires first obtaining a specific `Filing` object (here, presumably via a function like `get_filing()` using an accession number '0000320193-22-000002'). Then, the `related_filings()` method is called on this `Filing` object to return a new `Filings` collection containing filings linked by the same SEC file number.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/navigating-filings.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python\nfiling = get_filing('0000320193-22-000002')\nfilings = filing.related_filings()\n```\n```\n\n----------------------------------------\n\nTITLE: Viewing a Specific Filing Exhibit in Console using edgartools in Python\nDESCRIPTION: Shows how to view the content of a specific exhibit (the second exhibit, index 1) from an SEC filing (`filing` object) in the console. Accesses the exhibit using indexing (`[1]`) on the `exhibits` attribute and then calls its `view()` method.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/eightk-filings.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfiling.exhibits[1].view()\n```\n\n----------------------------------------\n\nTITLE: Importing edgartools Components\nDESCRIPTION: Imports necessary classes and functions from the `edgar` and `edgar.xbrl2` modules. This makes the `Company` class and XBRL parsing functionalities available for use in the script.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-NonFinancialStatements.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom edgar import *\nfrom edgar.xbrl2 import *\n```\n\n----------------------------------------\n\nTITLE: Defining Role References with XBRL Linkbase (XML)\nDESCRIPTION: These XML snippets declare multiple XBRL <link:roleRef> elements, referencing specific label roles (e.g., negatedNetLabel, negatedTerseLabel) defined by XBRL. Each roleRef specifies a unique roleURI and an external schema location via xlink:href. The purpose is to register these label roles for use in subsequent labelLinks within the document. No explicit parameters are needed, but the file presumes usage in an XBRL-compliant processing system and access to the referenced external schema. No data is produced directly by these elements; they serve to enable label specialization in other labelLink structures.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0000943374-24-000509.txt#_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<link:roleRef roleURI=\\\"http://www.xbrl.org/2009/role/negatedNetLabel\\\" xlink:type=\\\"simple\\\" xlink:href=\\\"http://www.xbrl.org/lrr/role/negated-2009-12-16.xsd#negatedNetLabel\\\" />\n<link:roleRef roleURI=\\\"http://www.xbrl.org/2009/role/negatedTerseLabel\\\" xlink:type=\\\"simple\\\" xlink:href=\\\"http://www.xbrl.org/lrr/role/negated-2009-12-16.xsd#negatedTerseLabel\\\" />\n<link:roleRef roleURI=\\\"http://www.xbrl.org/2009/role/negatedPeriodEndLabel\\\" xlink:type=\\\"simple\\\" xlink:href=\\\"http://www.xbrl.org/lrr/role/negated-2009-12-16.xsd#negatedPeriodEndLabel\\\" />\n<link:roleRef roleURI=\\\"http://www.xbrl.org/2009/role/negatedPeriodStartLabel\\\" xlink:type=\\\"simple\\\" xlink:href=\\\"http://www.xbrl.org/lrr/role/negated-2009-12-16.xsd#negatedPeriodStartLabel\\\" />\n<link:roleRef roleURI=\\\"http://www.xbrl.org/2009/role/negatedLabel\\\" xlink:type=\\\"simple\\\" xlink:href=\\\"http://www.xbrl.org/lrr/role/negated-2009-12-16.xsd#negatedLabel\\\" />\n```\n\n----------------------------------------\n\nTITLE: Defining DEI Security12bTitle Metadata in HTML\nDESCRIPTION: This HTML table structure defines metadata for the 'dei_Security12bTitle' element from the SEC DEI taxonomy. It includes sections for Definition, References, and Details (Name, Namespace, Data Type, etc.). JavaScript functions (`Show.hideAR` and `Show.toggleNext`) are used within anchor tags to allow users to hide the entire definition block or expand/collapse individual sections.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0000943374-24-000509.txt#_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"authRefData\" style=\"display: none;\" id=\"defref_dei_Security12bTitle\">\n<tr><td class=\"hide\"><a style=\"color: white;\" href=\"javascript:void(0);\" onclick=\"Show.hideAR();\">X</a></td></tr>\n<tr><td><div class=\"body\" style=\"padding: 2px;\">\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">- Definition</a><div><p>Title of a 12(b) registered security.</p></div>\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">+ References</a><div style=\"display: none;\"><p>Reference 1: http://www.xbrl.org/2003/role/presentationRef<br> -Publisher SEC<br> -Name Exchange Act<br> -Number 240<br> -Section 12<br> -Subsection b<br></p></div>\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">+ Details</a><div style=\"display: none;\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td><strong> Name:</strong></td>\n<td style=\"white-space:nowrap;\">dei_Security12bTitle</td>\n</tr>\n<tr>\n<td style=\"padding-right: 4px;white-space:nowrap;\"><strong> Namespace Prefix:</strong></td>\n<td>dei_</td>\n</tr>\n<tr>\n<td><strong> Data Type:</strong></td>\n<td>dei:securityTitleItemType</td>\n</tr>\n<tr>\n<td><strong> Balance Type:</strong></td>\n<td>na</td>\n</tr>\n<tr>\n<td><strong> Period Type:</strong></td>\n<td>duration</td>\n</tr>\n</table></div>\n</div></td></tr>\n</table>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nShow.hideAR();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nShow.toggleNext( this );\n```\n\n----------------------------------------\n\nTITLE: Defining Presentation Arcs and Locators - XBRL Linkbase - XML\nDESCRIPTION: This snippet demonstrates the use of XML linkbase elements for structuring an XBRL presentation linkbase. It uses <link:loc> to define XBRL concepts and <link:presentationArc> to specify hierarchical relationships between report elements. Dependencies include a conformant XBRL processor and referenced schema files. Inputs are XBRL taxonomies; outputs are linked presentation tree structures. Only valid for use within XBRL environments and requires adherence to XBRL linkbase conventions.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0000943374-24-000509.txt#_snippet_16\n\nLANGUAGE: XML\nCODE:\n```\n<link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_EntityAddressAddressLine2\\\" xlink:label=\\\"EntityAddressAddressLine2\\\" xlink:title=\\\"EntityAddressAddressLine2\\\" />\\n    <link:presentationArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/parent-child\\\" xlink:from=\\\"CoverAbstract\\\" xlink:to=\\\"EntityAddressAddressLine2\\\" xlink:title=\\\"presentation: CoverAbstract to EntityAddressAddressLine2\\\" order=\\\"11.0\\\" preferredLabel=\\\"http://www.xbrl.org/2003/role/label\\\" />\\n    <link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_EntityAddressAddressLine3\\\" xlink:label=\\\"EntityAddressAddressLine3\\\" xlink:title=\\\"EntityAddressAddressLine3\\\" />\\n    <link:presentationArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/parent-child\\\" xlink:from=\\\"CoverAbstract\\\" xlink:to=\\\"EntityAddressAddressLine3\\\" xlink:title=\\\"presentation: CoverAbstract to EntityAddressAddressLine3\\\" order=\\\"12.0\\\" preferredLabel=\\\"http://www.xbrl.org/2003/role/label\\\" />\\n    <link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_EntityAddressCityOrTown\\\" xlink:label=\\\"EntityAddressCityOrTown\\\" xlink:title=\\\"EntityAddressCityOrTown\\\" />\\n    <link:presentationArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/parent-child\\\" xlink:from=\\\"CoverAbstract\\\" xlink:to=\\\"EntityAddressCityOrTown\\\" xlink:title=\\\"presentation: CoverAbstract to EntityAddressCityOrTown\\\" order=\\\"13.0\\\" preferredLabel=\\\"http://www.xbrl.org/2003/role/label\\\" />\\n    <link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_EntityAddressStateOrProvince\\\" xlink:label=\\\"EntityAddressStateOrProvince\\\" xlink:title=\\\"EntityAddressStateOrProvince\\\" />\\n    <link:presentationArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/parent-child\\\" xlink:from=\\\"CoverAbstract\\\" xlink:to=\\\"EntityAddressStateOrProvince\\\" xlink:title=\\\"presentation: CoverAbstract to EntityAddressStateOrProvince\\\" order=\\\"14.0\\\" preferredLabel=\\\"http://www.xbrl.org/2003/role/label\\\" />\\n    <link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_EntityAddressCountry\\\" xlink:label=\\\"EntityAddressCountry\\\" xlink:title=\\\"EntityAddressCountry\\\" />\\n    <link:presentationArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/parent-child\\\" xlink:from=\\\"CoverAbstract\\\" xlink:to=\\\"EntityAddressCountry\\\" xlink:title=\\\"presentation: CoverAbstract to EntityAddressCountry\\\" order=\\\"15.0\\\" preferredLabel=\\\"http://www.xbrl.org/2003/role/label\\\" />\\n    <link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_EntityAddressPostalZipCode\\\" xlink:label=\\\"EntityAddressPostalZipCode\\\" xlink:title=\\\"EntityAddressPostalZipCode\\\" />\\n    <link:presentationArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/parent-child\\\" xlink:from=\\\"CoverAbstract\\\" xlink:to=\\\"EntityAddressPostalZipCode\\\" xlink:title=\\\"presentation: CoverAbstract to EntityAddressPostalZipCode\\\" order=\\\"16.0\\\" preferredLabel=\\\"http://www.xbrl.org/2003/role/label\\\" />\\n    <link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_CityAreaCode\\\" xlink:label=\\\"CityAreaCode\\\" xlink:title=\\\"CityAreaCode\\\" />\\n    <link:presentationArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/parent-child\\\" xlink:from=\\\"CoverAbstract\\\" xlink:to=\\\"CityAreaCode\\\" xlink:title=\\\"presentation: CoverAbstract to CityAreaCode\\\" order=\\\"17.0\\\" preferredLabel=\\\"http://www.xbrl.org/2003/role/label\\\" />\\n    <link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_LocalPhoneNumber\\\" xlink:label=\\\"LocalPhoneNumber\\\" xlink:title=\\\"LocalPhoneNumber\\\" />\\n    <link:presentationArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/parent-child\\\" xlink:from=\\\"CoverAbstract\\\" xlink:to=\\\"LocalPhoneNumber\\\" xlink:title=\\\"presentation: CoverAbstract to LocalPhoneNumber\\\" order=\\\"18.0\\\" preferredLabel=\\\"http://www.xbrl.org/2003/role/label\\\" />\\n    <link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_Security12bTitle\\\" xlink:label=\\\"Security12bTitle\\\" xlink:title=\\\"Security12bTitle\\\" />\\n    <link:presentationArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/parent-child\\\" xlink:from=\\\"CoverAbstract\\\" xlink:to=\\\"Security12bTitle\\\" xlink:title=\\\"presentation: CoverAbstract to Security12bTitle\\\" order=\\\"19.0\\\" preferredLabel=\\\"http://www.xbrl.org/2003/role/label\\\" />\\n    <link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_TradingSymbol\\\" xlink:label=\\\"TradingSymbol\\\" xlink:title=\\\"TradingSymbol\\\" />\\n    <link:presentationArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/parent-child\\\" xlink:from=\\\"CoverAbstract\\\" xlink:to=\\\"TradingSymbol\\\" xlink:title=\\\"presentation: CoverAbstract to TradingSymbol\\\" order=\\\"20.0\\\" preferredLabel=\\\"http://www.xbrl.org/2003/role/label\\\" />\\n    <link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_NoTradingSymbolFlag\\\" xlink:label=\\\"NoTradingSymbolFlag\\\" xlink:title=\\\"NoTradingSymbolFlag\\\" />\\n    <link:presentationArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/parent-child\\\" xlink:from=\\\"CoverAbstract\\\" xlink:to=\\\"NoTradingSymbolFlag\\\" xlink:title=\\\"presentation: CoverAbstract to NoTradingSymbolFlag\\\" order=\\\"21.0\\\" preferredLabel=\\\"http://www.xbrl.org/2003/role/label\\\" />\\n    <link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_SecurityExchangeName\\\" xlink:label=\\\"SecurityExchangeName\\\" xlink:title=\\\"SecurityExchangeName\\\" />\\n    <link:presentationArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/parent-child\\\" xlink:from=\\\"CoverAbstract\\\" xlink:to=\\\"SecurityExchangeName\\\" xlink:title=\\\"presentation: CoverAbstract to SecurityExchangeName\\\" order=\\\"22.0\\\" preferredLabel=\\\"http://www.xbrl.org/2003/role/label\\\" />\\n    <link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_EntityEmergingGrowthCompany\\\" xlink:label=\\\"EntityEmergingGrowthCompany\\\" xlink:title=\\\"EntityEmergingGrowthCompany\\\" />\\n    <link:presentationArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/parent-child\\\" xlink:from=\\\"CoverAbstract\\\" xlink:to=\\\"EntityEmergingGrowthCompany\\\" xlink:title=\\\"presentation: CoverAbstract to EntityEmergingGrowthCompany\\\" order=\\\"23.0\\\" preferredLabel=\\\"http://www.xbrl.org/2003/role/label\\\" />\\n    <link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_EntityExTransitionPeriod\\\" xlink:label=\\\"EntityExTransitionPeriod\\\" xlink:title=\\\"EntityExTransitionPeriod\\\" />\\n    <link:presentationArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/parent-child\\\" xlink:from=\\\"CoverAbstract\\\" xlink:to=\\\"EntityExTransitionPeriod\\\" xlink:title=\\\"presentation: CoverAbstract to EntityExTransitionPeriod\\\" order=\\\"24.0\\\" preferredLabel=\\\"http://www.xbrl.org/2003/role/label\\\" />\\n    <link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_WrittenCommunications\\\" xlink:label=\\\"WrittenCommunications\\\" xlink:title=\\\"WrittenCommunications\\\" />\\n    <link:presentationArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/parent-child\\\" xlink:from=\\\"CoverAbstract\\\" xlink:to=\\\"WrittenCommunications\\\" xlink:title=\\\"presentation: CoverAbstract to WrittenCommunications\\\" order=\\\"25.0\\\" preferredLabel=\\\"http://www.xbrl.org/2003/role/label\\\" />\\n    <link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_SolicitingMaterial\\\" xlink:label=\\\"SolicitingMaterial\\\" xlink:title=\\\"SolicitingMaterial\\\" />\\n    <link:presentationArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/parent-child\\\" xlink:from=\\\"CoverAbstract\\\" xlink:to=\\\"SolicitingMaterial\\\" xlink:title=\\\"presentation: CoverAbstract to SolicitingMaterial\\\" order=\\\"26.0\\\" preferredLabel=\\\"http://www.xbrl.org/2003/role/label\\\" />\\n    <link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_PreCommencementTenderOffer\\\" xlink:label=\\\"PreCommencementTenderOffer\\\" xlink:title=\\\"PreCommencementTenderOffer\\\" />\\n    <link:presentationArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/parent-child\\\" xlink:from=\\\"CoverAbstract\\\" xlink:to=\\\"PreCommencementTenderOffer\\\" xlink:title=\\\"presentation: CoverAbstract to PreCommencementTenderOffer\\\" order=\\\"27.0\\\" preferredLabel=\\\"http://www.xbrl.org/2003/role/label\\\" />\\n    <link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_PreCommencementIssuerTenderOffer\\\" xlink:label=\\\"PreCommencementIssuerTenderOffer\\\" xlink:title=\\\"PreCommencementIssuerTenderOffer\\\" />\\n    <link:presentationArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/parent-child\\\" xlink:from=\\\"CoverAbstract\\\" xlink:to=\\\"PreCommencementIssuerTenderOffer\\\" xlink:title=\\\"presentation: CoverAbstract to PreCommencementIssuerTenderOffer\\\" order=\\\"28.0\\\" preferredLabel=\\\"http://www.xbrl.org/2003/role/label\\\" />\n```\n\n----------------------------------------\n\nTITLE: Embedding Trading Symbol using ix:nonNumeric (XBRL in HTML)\nDESCRIPTION: This snippet shows the trading symbol ('BCOW') for a security embedded within a table cell (`<td>`) using `<ix:nonNumeric>`. It utilizes the 'dei:TradingSymbol' element, context 'c20241220to20241220', and has a unique fact ID.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0000943374-24-000509.txt#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<td style=\"width: 18.88%; vertical-align: bottom;\">\n            <div style=\"text-align: center; font-family: 'Times New Roman', Times, serif; font-size: 10pt;\"><ix:nonNumeric name=\"dei:TradingSymbol\" id=\"Fact_13f567655b9748aba259bdbf2a74ee16\" contextRef=\"c20241220to20241220\">BCOW</ix:nonNumeric><br/>\n            </div>\n          </td>\n```\n\n----------------------------------------\n\nTITLE: Defining DEI SecurityExchangeName Metadata in HTML\nDESCRIPTION: This HTML table structure defines metadata for the 'dei_SecurityExchangeName' element from the SEC DEI taxonomy. It includes sections for Definition, References, and Details (Name, Namespace, Data Type, etc.). JavaScript functions (`Show.hideAR` and `Show.toggleNext`) are used within anchor tags to allow users to hide the entire definition block or expand/collapse individual sections.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0000943374-24-000509.txt#_snippet_26\n\nLANGUAGE: html\nCODE:\n```\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"authRefData\" style=\"display: none;\" id=\"defref_dei_SecurityExchangeName\">\n<tr><td class=\"hide\"><a style=\"color: white;\" href=\"javascript:void(0);\" onclick=\"Show.hideAR();\">X</a></td></tr>\n<tr><td><div class=\"body\" style=\"padding: 2px;\">\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">- Definition</a><div><p>Name of the Exchange on which a security is registered.</p></div>\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">+ References</a><div style=\"display: none;\"><p>Reference 1: http://www.xbrl.org/2003/role/presentationRef<br> -Publisher SEC<br> -Name Exchange Act<br> -Number 240<br> -Section 12<br> -Subsection d1-1<br></p></div>\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">+ Details</a><div style=\"display: none;\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td><strong> Name:</strong></td>\n<td style=\"white-space:nowrap;\">dei_SecurityExchangeName</td>\n</tr>\n<tr>\n<td style=\"padding-right: 4px;white-space:nowrap;\"><strong> Namespace Prefix:</strong></td>\n<td>dei_</td>\n</tr>\n<tr>\n<td><strong> Data Type:</strong></td>\n<td>dei:edgarExchangeCodeItemType</td>\n</tr>\n<tr>\n<td><strong> Balance Type:</strong></td>\n<td>na</td>\n</tr>\n<tr>\n<td><strong> Period Type:</strong></td>\n<td>duration</td>\n</tr>\n</table></div>\n</div></td></tr>\n</table>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nShow.hideAR();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nShow.toggleNext( this );\n```\n\n----------------------------------------\n\nTITLE: Accessing Company Filings via Property (Python)\nDESCRIPTION: Directly accesses all filings for a Company by reading the filings property. Dependencies: Company object instantiated. Input: None. Output: Filings object for the specified company. Useful for quick data access patterns.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/index.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfilings = c.filings     \n```\n\n----------------------------------------\n\nTITLE: Toggling Element Visibility with JavaScript onclick\nDESCRIPTION: This JavaScript code, embedded in an HTML `onclick` attribute, calls the `Show.toggleNext` function when the anchor tag is clicked. It passes the clicked element (`this`) to the function, which is expected to toggle the visibility (e.g., `display: none` to `display: block` and vice versa) of the immediately following sibling HTML element (typically a `div`). This pattern is used repeatedly to create collapsible sections for 'References', 'Details', and 'Definition'. Requires the `Show` JavaScript object and its `toggleNext` method to be defined elsewhere.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0000943374-24-000509.txt#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nonclick=\"Show.toggleNext( this );\"\n```\n\n----------------------------------------\n\nTITLE: Hiding Element Container with JavaScript onclick\nDESCRIPTION: This JavaScript code, embedded in an HTML `onclick` attribute within an anchor tag styled as 'X', calls the `Show.hideAR` function upon clicking. This function is presumably designed to hide the parent container element, likely the table with the class `authRefData`, effectively closing the definition section. Requires the `Show` JavaScript object and its `hideAR` method to be defined elsewhere.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0000943374-24-000509.txt#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nonclick=\"Show.hideAR();\"\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure for Filing Information\nDESCRIPTION: This HTML snippet defines tables used to present structured information within the SEC filing document. It includes rows (TR) and cells (TD) with specific content like reporting person details (Name, Group membership, SEC Use Only, Source of Funds, etc.) and beneficial ownership numbers. Inline CSS styles are applied for formatting.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0001104659-25-002604.txt#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<TABLE CELLPADDING=\"0\" CELLSPACING=\"0\" STYLE=\"font: 10pt Times New Roman, Times, Serif; margin-top: 0; margin-bottom: 0; width: 100%\"><TR STYLE=\"vertical-align: top; text-align: justify\">\n<TD STYLE=\"width: 0in\"></TD><TD STYLE=\"width: 0.25in; text-align: left\"><FONT STYLE=\"font-family: Wingdings\">&#168;</FONT></TD><TD STYLE=\"text-align: justify\">Rule&nbsp;13e-4(i)&nbsp;(Cross-Border Issuer Tender Offer)</TD>\n</TR></TABLE>\n```\n\nLANGUAGE: html\nCODE:\n```\n<TABLE CELLPADDING=\"0\" CELLSPACING=\"0\" STYLE=\"font: 10pt Times New Roman, Times, Serif; margin-top: 0; margin-bottom: 0; width: 100%\"><TR STYLE=\"vertical-align: top; text-align: justify\">\n<TD STYLE=\"width: 0in\"></TD><TD STYLE=\"width: 0.25in; text-align: left\"><FONT STYLE=\"font-family: Wingdings\">&#168;</FONT></TD><TD STYLE=\"text-align: justify\">Rule&nbsp;14d-1(d)&nbsp;(Cross-Border Third-Party Tender Offer)</TD>\n</TR></TABLE>\n```\n\nLANGUAGE: html\nCODE:\n```\n<TABLE CELLSPACING=\"0\" CELLPADDING=\"0\" STYLE=\"font: 10pt Times New Roman, Times, Serif; width: 100%; border-collapse: collapse\">\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD COLSPAN=\"2\" STYLE=\"border-top: Black 1pt solid; border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\"><B>CUSIP No. 12662P108</B></FONT></TD>\n    <TD STYLE=\"border-top: Black 1pt solid; border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"padding-bottom: 10pt; width: 24px; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">1</FONT></TD>\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">NAME OF REPORTING PERSON</FONT></TD>\n    <TD STYLE=\"padding-bottom: 10pt; width: 48px; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">IEP Energy Holding LLC</FONT></TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">2</FONT></TD>\n    <TD STYLE=\"padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">CHECK THE APPROPRIATE BOX IF A MEMBER OF A GROUP</FONT></TD>\n    <TD STYLE=\"padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">(a) </FONT><FONT STYLE=\"font-family: Wingdings; font-size: 10pt\">&uml;</FONT></TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">(b) </FONT><FONT STYLE=\"font-family: Wingdings; font-size: 10pt\">&uml;</FONT></TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">3</FONT></TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">SEC USE ONLY</FONT></TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">4</FONT></TD>\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">SOURCE OF FUNDS</FONT></TD>\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">Not applicable</FONT></TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">5</FONT></TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">CHECK BOX IF LEGAL PROCEEDINGS IS REQUIRED PURSUANT TO ITEMS 2(d) or 2(e)</FONT></TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Wingdings; font-size: 10pt\">&uml;</FONT></TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">6</FONT></TD>\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">CITIZENSHIP OR PLACE OF ORGANIZATION</FONT></TD>\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">Delaware</FONT></TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD COLSPAN=\"2\" STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">NUMBER OF SHARES BENEFICIALLY OWNED BY EACH REPORTING PERSON WITH:</FONT></TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">7</FONT></TD>\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">SOLE VOTING POWER</FONT></TD>\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">0</TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">8</FONT></TD>\n</TABLE>\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Filings with a for Loop (Python)\nDESCRIPTION: Illustrates looping over each filing in the Filings collection using a for loop. Dependencies: get_filings(), valid Filings object. Input: None. Output: Performs actions for each Filing; user-supplied code inside the loop. Pattern enables batch processing or inspection of large data sets.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/index.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfilings = get_filings()\nfor filing in filings:\n    # Do something with the filing\n```\n\n----------------------------------------\n\nTITLE: Accessing a Statement by Index (68)\nDESCRIPTION: Retrieves a statement from the `statements` collection using its numerical index (68). This accesses another specific statement within the collection.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-NonFinancialStatements.ipynb#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nstatements[68]\n```\n\n----------------------------------------\n\nTITLE: Customizing Multi-Period XBRL Statement Rendering in Python\nDESCRIPTION: Demonstrates how to customize the rendering of stitched multi-period financial statements obtained from an `XBRLS` object's `statements` attribute. Specifically, it shows setting the `max_periods` to control the number of periods displayed and `show_date_range=True` to show full date ranges instead of just end dates.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/xbrl.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n```python\n# Get 3-year comparison with full date ranges\nannual_trend = stitched_statements.income_statement(\n    max_periods=3, \n    show_date_range=True\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying DEI PreCommencementIssuerTenderOffer Metadata in HTML\nDESCRIPTION: This HTML snippet provides interactive links to show References and Details for the 'dei_PreCommencementIssuerTenderOffer' element. It uses JavaScript's 'Show.toggleNext' function on click to reveal the corresponding hidden 'div' elements containing the information. This appears to be the trailing part of a larger definition structure.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0000943374-24-000509.txt#_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">+ References</a><div style=\"display: none;\"><p>Reference 1: http://www.xbrl.org/2003/role/presentationRef<br> -Publisher SEC<br> -Name Exchange Act<br> -Number 240<br> -Section 13e<br> -Subsection 4c<br></p></div>\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">+ Details</a><div style=\"display: none;\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td><strong> Name:</strong></td>\n<td style=\"white-space:nowrap;\">dei_PreCommencementIssuerTenderOffer</td>\n</tr>\n<tr>\n<td style=\"padding-right: 4px;white-space:nowrap;\"><strong> Namespace Prefix:</strong></td>\n<td>dei_</td>\n</tr>\n<tr>\n<td><strong> Data Type:</strong></td>\n<td>xbrli:booleanItemType</td>\n</tr>\n<tr>\n<td><strong> Balance Type:</strong></td>\n<td>na</td>\n</tr>\n<tr>\n<td><strong> Period Type:</strong></td>\n<td>duration</td>\n</tr>\n</table></div>\n</div></td></tr>\n</table>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nShow.toggleNext( this );\n```\n\n----------------------------------------\n\nTITLE: Using RenderedStatement for Multiple XBRL Output Formats in Python\nDESCRIPTION: Explains how to use the `xbrl.render_statement()` method to obtain a `RenderedStatement` object. This object provides convenient methods for generating different output formats, including displaying as a Rich table (default via `print`), converting to a pandas DataFrame (`.to_dataframe()`), and exporting as Markdown (`.to_markdown()`).\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/xbrl.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n```python\n# Get a rendered statement\nstatement = xbrl.render_statement(\"BalanceSheet\")\n\n# Display as Rich table (default)\nprint(statement)\n\n# Convert to pandas DataFrame \ndf = statement.to_dataframe()\n\n# Export to markdown\nmarkdown = statement.to_markdown()\n```\n```\n\n----------------------------------------\n\nTITLE: Viewing Attachments of a SEC Filing Using edgartools in Python\nDESCRIPTION: Displays or lists all attachments related to a selected SEC filing object. Starts from a previously selected Filing instance. No input parameters; output: list of all attachments for the filing. Useful for reviewing documents and tables filed with the SEC.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Filtering-by-industry.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfiling.attachments\n```\n\n----------------------------------------\n\nTITLE: HTML Metadata Comment for Page Handling (Sequence 4)\nDESCRIPTION: This HTML comment likely serves as metadata for an automated document processing or pagination system, potentially within the SEC EDGAR system. It marks a specific field ('Page'), indicates its sequence number (4), and specifies an option ('Last'), suggesting it might mark the end of a page or section.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0001104659-25-002604.txt#_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<!-- Field: Page; Sequence: 4; Options: Last -->\n    <DIV STYLE=\"margin-top: 12pt; margin-bottom: 6pt; border-bottom: Black 1pt solid\"><P STYLE=\"margin: 0pt\">&nbsp;</P></DIV>\n    <!-- Field: /Page -->\n```\n\n----------------------------------------\n\nTITLE: Accessing Filing Attachments List with edgartools in Python\nDESCRIPTION: Shows how to access the list of attachments for a `Filing` object using its `attachments` attribute. This returns a list-like object containing attachment representations.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/working-with-filings.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nattachments = filing.attachments\n```\n\n----------------------------------------\n\nTITLE: Fetching Default SEC Filings with edgartools in Python\nDESCRIPTION: Calls the `get_filings()` function from the `edgartools` library to retrieve SEC filings. By default, without arguments, it fetches filings for the current year and quarter. The result is a `Filings` object which supports pagination.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Paging-Through-Filings.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfilings = get_filings()\nfilings\n```\n\n----------------------------------------\n\nTITLE: HTML DIV Elements for Page Structure\nDESCRIPTION: These HTML DIV elements, combined with inline CSS, are used to control the document's structure and layout, specifically for managing page breaks and section dividers. They define borders (top and bottom) and potentially force page breaks (`break-before: page`).\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0001104659-25-002604.txt#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<DIV STYLE=\"margin-top: 0; margin-bottom: 0; width: 100%\"><DIV STYLE=\"border-top: Black 1pt solid; font-size: 1pt; border-bottom: Black 2pt solid\">&nbsp;</DIV></DIV>\n```\n\nLANGUAGE: html\nCODE:\n```\n<DIV STYLE=\"border-bottom: Black 1pt solid; margin-top: 12pt; margin-bottom: 6pt\"><P STYLE=\"margin: 0pt\">&nbsp;</P></DIV>\n```\n\nLANGUAGE: html\nCODE:\n```\n<DIV STYLE=\"break-before: page; margin-top: 6pt; margin-bottom: 12pt\"><P STYLE=\"margin: 0pt\">&nbsp;</P></DIV>\n```\n\n----------------------------------------\n\nTITLE: Accessing All Filings for a Fund Object using edgartools in Python\nDESCRIPTION: This snippet accesses the `filings` attribute of the `fund` object obtained in the previous step. This attribute represents a collection (likely a specialized filings object provided by `edgartools`) containing all the SEC filings associated with the specific fund (\"CAAPX\"). Displaying this attribute typically shows a representation of the filings collection.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Fund-Filings.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfund.filings\n```\n\n----------------------------------------\n\nTITLE: Preparing Calculation DataFrame for Ratio Analysis in Python\nDESCRIPTION: Defines a data preparation function that filters required concepts from the collection of source DataFrames, possibly merges and pivots them for ratio calculation. This internal helper standardizes input data into a calculation-ready form and is reused across ratio calculation methods. It requires a list of required concept names and a dictionary of statement DataFrames as inputs and outputs a processed DataFrame for calculation.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/edgar/xbrl2/analysis/DESIGN.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef _prepare_ratio_df(required_concepts, statement_dfs):\n```\n\n----------------------------------------\n\nTITLE: Installing Python Charting Dependencies (Bash)\nDESCRIPTION: Installs the necessary Python packages (matplotlib, numpy, pandas, seaborn) using pip. These libraries are required for data analysis and chart generation in Python; matplotlib and seaborn are used for plotting, numpy for numerical operations, and pandas for data manipulation. There are no inputs or outputs for this snippet as it is a shell command; dependencies include working Python and pip environments.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/chart_generation_README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install matplotlib numpy pandas seaborn\n```\n\n----------------------------------------\n\nTITLE: Initializing Edgartools and Setting User Identity - Python\nDESCRIPTION: Imports all modules from the 'edgar' package and sets a user identity for interacting with SEC EDGAR to comply with SEC access policies. Requires the Edgartools package to be installed and assumes a valid email or identifier as input; modifies global identity settings for subsequent API calls.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-StandardizedStatements.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom edgar import *\n\nset_identity('statements@colab.net')\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Mutual Fund Ticker Mappings with Edgartools in Python\nDESCRIPTION: Calls get_mutual_fund_tickers() to obtain all registered mutual fund and ETF tickers along with their CIKs. This is used to inspect or process the universe of available funds. Applicable for both exploratory and programmatic access scenarios.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Ticker-Search-with-edgartools.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nget_mutual_fund_tickers()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Filing HTML Content as String with edgartools in Python\nDESCRIPTION: Shows how to use the `html()` method on a `Filing` object. This downloads the filing's HTML content and returns it as a Python string.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/working-with-filings.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nhtml = filing.html()\n```\n\n----------------------------------------\n\nTITLE: Converting Company Facts to Pandas DataFrame in Python\nDESCRIPTION: Demonstrates converting the retrieved `CompanyFacts` object into a pandas DataFrame using the `to_pandas()` method. This allows for easier data manipulation and analysis using the pandas library. Requires the `pandas` library.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/company.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndf = company_facts.to_pandas()\n```\n\n----------------------------------------\n\nTITLE: Initializing the StatementStitcher Class for XBRL Statement Aggregation in Python\nDESCRIPTION: This class, StatementStitcher, provides core functionality for combining multiple financial statement filings into a unified, multi-period dataset. It requires a concept_mapper for normalizing concept names across filings. Its main method, stitch_statements, collects input statements, optionally applies standard mappings to concepts, and organizes results into a table-like, period-aligned structure. Output is a dictionary with ordered periods and a list of row objects, each representing a consolidated concept across periods.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/edgar/xbrl2/docs/stitching-statements.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom collections import defaultdict\n\nclass StatementStitcher:\n    def __init__(self, concept_mapper):\n        self.concept_mapper = concept_mapper\n        self.periods = []  # Ordered list of periods\n        self.data = defaultdict(dict)  # {concept: {period: value}}\n\n    def stitch_statements(self, statements, standard=False):\n        \"\"\"Stitch statements into a multi-period dataset.\"\"\"\n        # Collect all periods\n        self.periods = sorted(set(stmt[\"period\"] for stmt in statements), reverse=True)\n\n        # Process each statement\n        for stmt in statements:\n            period = stmt[\"period\"]\n            statement_type = stmt[\"statement_type\"]\n            for item in stmt[\"items\"]:\n                concept = item[\"concept\"]\n                value = item[\"value\"]\n                \n                # Normalize concept if standard=True\n                if standard:\n                    std_concept = self.concept_mapper.get_standard_concept(\n                        concept, context={\"statement_type\": statement_type}\n                    )\n                    if std_concept:\n                        concept = std_concept\n                    else:\n                        # Fallback to original concept if no mapping exists\n                        concept = item[\"concept\"]\n                \n                # Store value under the concept and period\n                self.data[concept][period] = value\n\n        return self._format_output()\n\n    def _format_output(self):\n        \"\"\"Convert stitched data into a table-like structure.\"\"\"\n        result = {\n            \"periods\": self.periods,\n            \"rows\": []\n        }\n        for concept, period_values in self.data.items():\n            row = {\"concept\": concept, \"values\": []}\n            for period in self.periods:\n                row[\"values\"].append(period_values.get(period, None))\n            result[\"rows\"].append(row)\n        return result\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Break Marker in HTML Document\nDESCRIPTION: This snippet uses HTML comments to mark the beginning (`<!-- Field: Page; Sequence: 4 -->`) and end (`<!-- Field: /Page -->`) of a 'Page' field within the document structure. It employs `<div>` elements styled with `border-bottom`, `margin-top`, `margin-bottom`, and notably `break-before: page` CSS property to suggest a page break for printing or paginated rendering.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0001104659-25-002604.txt#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!-- Field: Page; Sequence: 4 -->\n    <DIV STYLE=\"border-bottom: Black 1pt solid; margin-top: 12pt; margin-bottom: 6pt\"><P STYLE=\"margin: 0pt\">&nbsp;</P></DIV>\n    <DIV STYLE=\"break-before: page; margin-top: 6pt; margin-bottom: 12pt\"><P STYLE=\"margin: 0pt\">&nbsp;</P></DIV>\n    <!-- Field: /Page -->\n```\n\n----------------------------------------\n\nTITLE: Accessing a Single Filing by Index using edgartools in Python\nDESCRIPTION: Demonstrates using the bracket operator (`[]`) with an integer index (e.g., `3`) on a `Filings` object to retrieve a specific filing. The index corresponds to the value displayed in the leftmost column of the filings table representation. Returns a single `Filing` object.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/using-the-filings-api.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfiling = filings[3]\n```\n\n----------------------------------------\n\nTITLE: Accessing a Specific Disclosure by Name\nDESCRIPTION: Retrieves a specific statement, 'SegmentInformationandGeographicDataInformationByReportableSegmentDetails', from the `statements` collection using its descriptive name as the key. This demonstrates accessing specific disclosures.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-NonFinancialStatements.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nstatements['SegmentInformationandGeographicDataInformationByReportableSegmentDetails']\n```\n\n----------------------------------------\n\nTITLE: Paginating Filings List with next and prev (Python)\nDESCRIPTION: Demonstrates how to move between pages of filings using the next() and prev() methods on the Filings object. Dependencies: get_filings() call and a large filings set. Input: None (calls methods). Output: Changes current page of the Filings object. Useful for navigating extensive datasets returned by edgartools.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/index.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfilings = get_filings()\nfilings.next()\nfilings.prev()\n```\n\n----------------------------------------\n\nTITLE: Subsetting SEC Filings Using head, tail, and sample Methods in EdgarTools Python\nDESCRIPTION: This code demonstrates how to obtain subsets of filings using the `head`, `tail`, and `sample` methods on a `Filings` object. These methods respectively return the first, last, or a random sample of filings, with the count provided as an argument. Useful for previewing large datasets and sampling for further analysis. Output is a subset of the original `Filings` object.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/filtering-filings.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfilings = get_filings()\nfilings.head(10)\nfilings.tail(10)\nfilings.sample(10)\n```\n\n----------------------------------------\n\nTITLE: Accessing Filing Attachments with edgartools in Python\nDESCRIPTION: Demonstrates the high-level usage of the `edgartools` library to retrieve attachments from an SEC filing object. Accessing the `attachments` property triggers internal SGML parsing.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/sgml.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfiling.attachments\n```\n\n----------------------------------------\n\nTITLE: Downloading All Filing Attachments with edgartools in Python\nDESCRIPTION: Demonstrates using the `download()` method on the `attachments` attribute of a `Filing` object. This method downloads all associated attachments to the specified file system `path`. Requires a valid path string.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/working-with-filings.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfiling.attachments.download(path)\n```\n\n----------------------------------------\n\nTITLE: Filtering edgartools Filings by Specific Date in Python\nDESCRIPTION: Demonstrates using the `filter()` method with the `date` (or the equivalent `filing_date`) parameter to filter a `Filings` object, keeping only the filings from a specific date specified in 'YYYY-MM-DD' format.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/using-the-filings-api.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfilings.filter(date=\"2021-01-24\") # or filings.filter(filing_date=\"2021-01-24\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Local Storage and Downloading SEC Data in edgartools (Python)\nDESCRIPTION: Activates local storage for quicker access to SEC filings and initiates the downloading of Edgar data. These functions speed up repetitive filtering but may use multi-threading, which might be unsuitable for some notebook environments. No input parameters; output: downloads and saves SEC data locally.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Filtering-by-industry.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nuse_local_storage()\ndownload_edgar_data()\n```\n\n----------------------------------------\n\nTITLE: Downloading Filing Attachments using edgartools in Python\nDESCRIPTION: Shows the definition signature and usage example for the `download` method within an `Attachments` class (likely accessed via `filing.attachments`). This method downloads all attachments associated with a filing to a specified `path`. The `archive` parameter allows saving them as a zip file instead of individual files. Requires an existing `filing` object from `edgartools`.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/README.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclass Attachments:\n    \n    def download(self, path: Union[str, Path], archive: bool = False):\n        \"\"\"\n        Download all the attachments to a specified path.\n        If the path is a directory, the file is saved with its original name in that directory.\n        If the path is a file, the file is saved with the given path name.\n        If archive is True, the attachments are saved in a zip file.\n        path: str or Path - The path to save the attachments\n        archive: bool (default False) - If True, save the attachments in a zip file\n        \"\"\" \n        ...\n        \n# Usage\nfiling.attachments.download(path)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Income Statement from Historical Filing - Python\nDESCRIPTION: Obtains the income statement from a previously constructed XBRL object representing a historical filing. Relies on the XBRL instance already having been created from a Filing object. Returns a standardized income statement.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-StandardizedStatements.ipynb#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nxbrl.statements.income_statement()\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Next Page of Company Filings in Python\nDESCRIPTION: Calls the `.next()` method on a `CompanyFilings` object (`cf`). Similar to the general `Filings` object, this advances the view to the next page of results for the specific company ('SNOW').\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Paging-Through-Filings.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ncf.next()\n```\n\n----------------------------------------\n\nTITLE: Displaying Formatted Data Objects using Rich in Python\nDESCRIPTION: Shows how to use the `rich` library's `print` function to display nicely formatted, human-readable representations of EdgarTools Data Objects (like `TenK` and `Form4`) in terminals or Jupyter notebooks. This leverages the built-in rich display capabilities of the Data Objects.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/data-objects.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Display formatted information in a terminal or notebook\nfrom rich import print\nprint(tenk)\nprint(form4)\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Previous Page of Company Filings in Python\nDESCRIPTION: Calls the `.prev()` method on the `CompanyFilings` object (`cf`). This navigates back to the previously viewed page of filing results for the specific company ('SNOW').\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Paging-Through-Filings.ipynb#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ncf.prev()\n```\n\n----------------------------------------\n\nTITLE: Downloading a Filing Exhibit to Memory using edgartools in Python\nDESCRIPTION: Illustrates downloading a specific exhibit (the second exhibit, index 1) from an SEC filing (`filing` object) into memory. Accesses the exhibit via indexing (`[1]`) on the `exhibits` attribute and calls the `download()` method without a path argument. The downloaded content is typically returned by the method.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/eightk-filings.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfiling.exhibits[1].download()\n```\n\n----------------------------------------\n\nTITLE: Extracting Primary XML Content with FilingSGML in Python\nDESCRIPTION: Demonstrates using the `xml()` method of the `FilingSGML` object. This method attempts to find and return the content of the primary XML document within the attachments, returning `None` if no XML document is found.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/sgml.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsgml.xml()\n```\n\n----------------------------------------\n\nTITLE: Getting Filing HTML Content using edgartools in Python\nDESCRIPTION: Calls the `html()` method on a `Filing` object to retrieve the raw HTML source code of the primary filing document as a string. This allows direct access to the filing's HTML content for parsing or other manipulation.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/using-the-filings-api.md#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfiling.html()\n```\n\n----------------------------------------\n\nTITLE: Getting Filing Attachments Using edgartools in Python\nDESCRIPTION: This snippet retrieves all attachments related to a Filing object by accessing its 'attachments' attribute, which typically includes the primary filing documents and any exhibits. No parameters are required, and the result is a collection of all available attachments for the specified filing.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Extract-Earnings-Releases.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nattachments = filing.attachments\nattachments\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Next Page of SEC Filings in Python\nDESCRIPTION: Calls the `.next()` method on the `Filings` object (`filings`) obtained previously. This advances the view to the next page of filings. The `Filings` object displays results in pages, typically 50 filings per page.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Paging-Through-Filings.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfilings.next()\n```\n\n----------------------------------------\n\nTITLE: Paginating through SEC Filings - Python\nDESCRIPTION: Retrieves the next page of filings from the filings results object. Depends on an existing filings object, allowing users to iterate over multiple pages of SEC search results. Returns a new filings page object.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/Usage.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfilings.next()\n```\n\n----------------------------------------\n\nTITLE: Querying XBRL Facts by Concept Pattern (Costs) with EdgarTools in Python\nDESCRIPTION: Accesses all XBRL facts as a Pandas DataFrame using `xb.facts.to_dataframe()`. It then applies a Pandas query to filter rows where the 'concept' column matches the regular expression 'us-gaap:Cost.*', effectively selecting all facts related to costs under US-GAAP taxonomy. Finally, it selects and displays only the 'concept', 'label', and 'value' columns for these filtered facts.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-FraudAnalysis.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n(xb.facts.to_dataframe()\n .query(\"concept.str.match('us-gaap:Cost.*')\")\n .filter(['concept', 'label', 'value'])\n )\n```\n\n----------------------------------------\n\nTITLE: Importing edgartools Library in Python\nDESCRIPTION: Illustrates how to import all functions and classes from the edgar module. Dependencies: edgartools installed. Input: None. Output: Modules/classes/functions loaded into the Python namespace. Useful for rapid prototyping or scripting.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/index.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom edgar import *\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Columns from Pandas DataFrame - Python\nDESCRIPTION: After converting the income statement of a historical filing to a DataFrame, this snippet filters to show only the 'concept', 'label', and a specific fiscal period column. Assumes that DataFrame columns include those from the selected fiscal period. Input is a DataFrame; output is a filtered DataFrame.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-StandardizedStatements.ipynb#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndf = xbrl.statements.income_statement().to_dataframe()\ndf[['concept', 'label', '2015-03-29_2015-06-27']]\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Filing Attachments with edgartools in Python\nDESCRIPTION: Demonstrates how to loop through the attachments associated with a `Filing` object using a standard Python `for` loop. The example prints each attachment object. Assumes `filings` is a Filing object.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/working-with-filings.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfor attachment in filings.attachments:\n    print(attachment)\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Attachment by Index with edgartools in Python\nDESCRIPTION: This snippet shows how to retrieve a specific attachment from the `attachments` collection using its sequence number (index). The primary filing document is typically at index 1. It assigns the retrieved `Attachment` object to the variable `attachment` and then displays its representation. Requires a `Filing` object named `filing`.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/attachments.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nattachment = filing.attachments[1]\nattachment\n```\n\n----------------------------------------\n\nTITLE: Navigating to Subsequent Pages of SEC Filings in Python\nDESCRIPTION: Demonstrates calling the `.next()` method again on the same `Filings` object (`filings`). This continues the pagination, moving further to the subsequent page of SEC filing results.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Paging-Through-Filings.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfilings.next()\n```\n\n----------------------------------------\n\nTITLE: Installing edgartools Python Package with pip (Bash)\nDESCRIPTION: Demonstrates how to install the edgartools package using pip, including upgrading to the latest version. Dependencies: Access to Python and pip. Input: No parameters. Output: Installs/updates the library in the Python environment. Useful for users to get the library before using its functions.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install edgartools\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install -U edgartools\n```\n\n----------------------------------------\n\nTITLE: Initializing a Mutual Fund Company by Ticker Using Edgartools in Python\nDESCRIPTION: Creates a Company instance using a mutual fund or ETF ticker ('CRBRX'), demonstrating that the Company class supports both equity and fund tickers. The function returns a Company object for interacting with filings and metadata.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Ticker-Search-with-edgartools.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nCompany(\"CRBRX\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Previous Page of Filings - Python\nDESCRIPTION: Retrieves the previous page of filings from a paginated filings object. Useful for navigating back through multi-page results as provided by the get_filings search interface.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/Usage.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfilings.prev()\n```\n\n----------------------------------------\n\nTITLE: Importing edgartools Modules and Setting User Identity in Python\nDESCRIPTION: This snippet imports necessary components from the `edgar` and `edgar.xbrl2` modules. Crucially, it calls `set_identity()` with a user email address, which is a prerequisite for making requests to the SEC EDGAR API, identifying the requester.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-CustomTags.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom edgar import *\nfrom edgar.xbrl2 import *\n\nset_identity('mike@unp.com')\n```\n\n----------------------------------------\n\nTITLE: Fetching Popular US Stock Tickers\nDESCRIPTION: This snippet uses the `popular_us_stocks` function from `edgartools.reference.tickers` to get a DataFrame of popular US stocks and then converts the 'Ticker' column into a Python list. It displays the 11th ticker in the list (index 10).\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-QuarterlyStatements.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nstocks = popular_us_stocks()\ntickers =stocks.Ticker.to_list()\ntickers[10]\n```\n\n----------------------------------------\n\nTITLE: Viewing Filing Content in Console/Notebook with edgartools in Python\nDESCRIPTION: Uses the `view()` method on a `Filing` object to download, parse, and display the filing's HTML content directly in the execution environment (console or Jupyter notebook). Provides a preview but may not be a perfect rendering.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/working-with-filings.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfiling.view()\n```\n\n----------------------------------------\n\nTITLE: Enumerating Company Properties with pandas - Python\nDESCRIPTION: Uses pandas DataFrame to list out properties of a company object (such as name, cik, tickers, etc.) and their current values by programmatically accessing the object's attributes. Displays the results as a DataFrame indexed by property name.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/Usage.ipynb#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\npd.DataFrame([\n    {'property': f\"company.{property}\", 'value':getattr(company, property)} \n         for property in ['name', 'cik', 'tickers', 'exchanges', 'category', 'industry', 'sic', 'entity_type'  ]\n]).set_index(\"property\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Role or Type of a Specific Statement\nDESCRIPTION: Accesses the 'SegmentInformationScheduleofRevenuebyMarketDetails' statement by its name from the `statements` collection and then retrieves its `role_or_type` attribute. This likely provides metadata about the statement's purpose or classification within the XBRL taxonomy.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-NonFinancialStatements.ipynb#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nstatements[\"SegmentInformationScheduleofRevenuebyMarketDetails\"].role_or_type\n```\n\n----------------------------------------\n\nTITLE: Navigating Pages of Filings using edgartools in Python\nDESCRIPTION: Demonstrates how to use the `next()`, `prev()`, and `current()` methods of a `Filings` object to navigate through the paginated list of filings. `next()` moves to the subsequent page, `prev()` to the previous page, and `current()` displays the current page. Each page typically contains around 50 filings.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/using-the-filings-api.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# To see the next page of data\nfilings.next()\n\n# To see the previous page\nfilings.prev()\n\n# To see the current page\nfilings.current()\n```\n\n----------------------------------------\n\nTITLE: Accessing and Converting Income Statement to DataFrame with EdgarTools in Python\nDESCRIPTION: Retrieves the Income Statement from the parsed XBRL object (`xb`) using `xb.statements.income_statement()`. It then converts this statement into a Pandas DataFrame using the `.to_dataframe()` method for easier tabular analysis, although the DataFrame (`df`) is not explicitly used later in this snippet. Finally, it displays the original Income Statement object.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-FraudAnalysis.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nincome_statement = xb.statements.income_statement()\ndf = income_statement.to_dataframe()\nincome_statement\n```\n\n----------------------------------------\n\nTITLE: Importing EdgarTools Modules for Financial Analysis in Python\nDESCRIPTION: Imports various components from the `edgartools` library needed for accessing and analyzing EDGAR filings. This includes the core library functions, XBRL parsing utilities (`xbrl2`), and specific analysis tools for financial ratios and metrics, setting up the environment for subsequent tasks.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-FraudAnalysis.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom edgar import *\nfrom edgar.xbrl2 import *\nfrom edgar.xbrl2.analysis.ratios import *\nfrom edgar.xbrl2.analysis.metrics import *\n\n```\n\n----------------------------------------\n\nTITLE: Instantiating FilingSGML from Source URL or Path in Python\nDESCRIPTION: Demonstrates creating a `FilingSGML` object using the `from_source` class method. This method accepts either a URL string pointing to an SEC filing (.txt or potentially .nc) or a `Path` object representing a local file, parsing the SGML content.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/sgml.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsgml = FilingSGML.from_source(\"https://www.sec.gov/Archives/edgar/data/320193/000032019321000139/0000320193-21-000139.txt\")\n\n# OR\n\nsgml = FilingSGML.from_source(Path(\"path/to/0001398344-24-000491.nc\"))\n```\n\n----------------------------------------\n\nTITLE: Accessing Derivative Transactions from Ownership Document - Python\nDESCRIPTION: This snippet accesses the first derivative transaction from the OwnershipDocument's derivative table. It assumes the document was created using the 'from_xml' method of the Ownership class. Output is an individual derivative transaction object that can be inspected or further processed. Dependency: a valid OwnershipDocument as produced by EdgarTools after parsing an XML SEC filing.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/ownership.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nownership.derivative_table.transactions[0]\n```\n\n----------------------------------------\n\nTITLE: Importing EdgarTools XBRL Modules in Python\nDESCRIPTION: This snippet imports all components from the 'edgar' package and its 'xbrl2' module, preparing access to functions and classes for interacting with SEC filings and XBRL data. Dependencies include the 'edgar' library installed in the Python environment. This import is necessary for all subsequent EdgarTools operations.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-FinancialRatios.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom edgar import *\nfrom edgar.xbrl2 import *\n```\n\n----------------------------------------\n\nTITLE: Instantiating Company by CIK - Python\nDESCRIPTION: Fetches a Company object corresponding to the provided CIK (Central Index Key), here 311337. Gives programmatic access to company details and filings.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/Usage.ipynb#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nCompany(311337)\n```\n\n----------------------------------------\n\nTITLE: Using the Original XBRL Package API in Python\nDESCRIPTION: Demonstrates the basic API usage for the original XBRL package. It involves extracting data using `XBRLData.extract(filing)`, retrieving a specific financial statement like 'BalanceSheet' using `get_statement()`, and then printing its direct string representation. Requires an initialized `filing` object.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/xbrl2-rewrite-analysis.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Old XBRL approach\nxbrl_data = XBRLData.extract(filing)\nbalance_sheet = xbrl_data.get_statement(\"BalanceSheet\")\nprint(balance_sheet)  # Direct string output\n```\n\n----------------------------------------\n\nTITLE: Importing edgartools and rich modules\nDESCRIPTION: This snippet imports necessary components from the `edgartools` library (`edgar`, `XBRL`, `xbrl2`, `popular_us_stocks`) and the `rich` library for enhanced output formatting. These imports are prerequisites for fetching and displaying financial data.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-QuarterlyStatements.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom edgar import *\nfrom rich import print\nfrom edgar.xbrl2 import *\nfrom edgar.reference.tickers import popular_us_stocks\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Period XBRL Statement Input Data in Python\nDESCRIPTION: This snippet illustrates the expected input data structure for use with the StatementStitcher and XBRL classes. It demonstrates how statements are organized as a list of dictionaries, each with a period, statement_type, and items (entries containing concept, label, value, and optional context). This input format is a prerequisite for all further processing, enabling period alignment and concept normalization across datasets.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/edgar/xbrl2/docs/stitching-statements.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nstatements = [\n    {\n        \"period\": \"2024-Q1\",\n        \"statement_type\": \"IncomeStatement\",\n        \"items\": [\n            {\"concept\": \"us-gaap_SalesRevenueNet\", \"label\": \"Net Sales\", \"value\": 1000},\n            {\"concept\": \"us-gaap_CostOfGoodsSold\", \"label\": \"COGS\", \"value\": 400}\n        ]\n    },\n    {\n        \"period\": \"2023-Q4\",\n        \"statement_type\": \"IncomeStatement\",\n        \"items\": [\n            {\"concept\": \"us-gaap_Revenue\", \"label\": \"Revenue\", \"value\": 950},\n            {\"concept\": \"us-gaap_CostOfGoodsSold\", \"label\": \"COGS\", \"value\": 380}\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Getting Specific Attachment Content with FilingSGML in Python\nDESCRIPTION: Demonstrates using the `get_content` method of the `FilingSGML` object to retrieve the raw content of a specific attached file, identified by its filename (e.g., 'EX-101.INS').\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/sgml.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsgml.get_content(\"EX-101.INS\")\n```\n\n----------------------------------------\n\nTITLE: Accessing a Statement by Index (65)\nDESCRIPTION: Retrieves a statement from the `statements` collection using its numerical index (65).\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-NonFinancialStatements.ipynb#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nstatements[65]\n```\n\n----------------------------------------\n\nTITLE: Accessing Individual Effect Filing - Python\nDESCRIPTION: Indexes into effect_filings to get a single effect filing (first in the set) for further operations or inspection. Useful for more detailed parsing or display.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/Usage.ipynb#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\neffect_filing = effect_filings[0]\neffect_filing\n```\n\n----------------------------------------\n\nTITLE: Accessing Non-Derivative Holdings from Ownership Document - Python\nDESCRIPTION: This snippet retrieves the first non-derivative holding from the OwnershipDocument. After parsing the XML and creating an OwnershipDocument, the code shows how to directly access an individual holding using list indexing. Input is a valid OwnershipDocument; output is a non-derivative holding object.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/ownership.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nholding = ownership.non_derivative_table.holdings[0]\nholding\n```\n\n----------------------------------------\n\nTITLE: Importing XBRL2 Module from Edgartools - Python\nDESCRIPTION: Imports all XBRL2-related classes and functions from the 'edgar.xbrl2' module, enabling parsing and manipulation of XBRL (eXtensible Business Reporting Language) data in financial filings. Requires the Edgartools package and facilitates advanced access to XBRL objects.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-StandardizedStatements.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom edgar.xbrl2 import *\n```\n\n----------------------------------------\n\nTITLE: Viewing Cash Flow Statement Directly from CRSR Filing Attachment (Python)\nDESCRIPTION: Accesses and displays the cash flow statement for CRSR directly from the filing object's attachments using `filing.statements.cash_flow_statement.view()`. This serves as a comparison to the statement extracted via the XBRL2 parsing method.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-Cashflow-Statements.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfiling.statements.cash_flow_statement.view()\n```\n\n----------------------------------------\n\nTITLE: Indexing a Filings Object for Single Filing - Python\nDESCRIPTION: Retrieves a specific filing by index (10th element) from a filings object for detailed inspection or processing. Assumes the filings object contains sufficient entries.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/Usage.ipynb#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfiling = filings[10]\nfiling\n```\n\n----------------------------------------\n\nTITLE: Calculating Operating Margin Ratio with EdgarTools in Python\nDESCRIPTION: Uses the initialized `FinancialRatios` object (`fr`) to calculate a specific financial ratio. It calls the `get_ratio_data()` method with the argument 'operating_margin' to compute and retrieve the data points related to the operating margin based on the XBRL data.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-FraudAnalysis.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfr.get_ratio_data('operating_margin')\n```\n\n----------------------------------------\n\nTITLE: Function Signature for get_filings (Python)\nDESCRIPTION: Shows the function signature for `get_filings`, detailing its parameters for filtering SEC filings during retrieval. Filters include `year`, `quarter`, `form` (single or list), `amendments` (boolean), `filing_date`, and `index` type. It returns an optional `Filings` object containing the matched filings. Requires `typing` and custom types.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/ai_docs/edgartools.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef get_filings(year: Optional[Years] = None, # The year of the filing\n                quarter: Optional[Quarters] = None, # The quarter of the filing\n                form: Optional[Union[str, List[IntString]]] = None, # The form or forms as a string e.g. \"10-K\" or a List [\"10-K\", \"8-K\"]\n                amendments: bool = True, # Include filing amendments e.g. \"10-K/A\"\n                filing_date: Optional[str] = None, # The filing date to filter by in YYYY-MM-DD format\n                index=\"form\", # The index type - \"form\" or \"company\" or \"xbrl\") -> Optional[Filings]:\n```\n\n----------------------------------------\n\nTITLE: Retrieving Underlying CIK-Ticker Reference Data with Edgartools in Python\nDESCRIPTION: Retrieves the complete reference mapping of CIKs to tickers using get_cik_tickers(). Useful for offline analysis, batch processing, or when you need access to the full mapping table. Requires the edgartools library and the referenced function imported.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Ticker-Search-with-edgartools.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncik_tickers = get_cik_tickers()\n```\n\n----------------------------------------\n\nTITLE: Accessing a statement by index\nDESCRIPTION: Retrieves a financial statement from the `statements` collection using its numerical index (1). The order depends on how the statements are structured or ordered within the `XbrlData` object.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Reading-Data-From-XBRL.ipynb#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nstatements[1]\n```\n\n----------------------------------------\n\nTITLE: Extracting Text Content from an Attachment with edgartools in Python\nDESCRIPTION: This snippet shows how to extract the text content of an `Attachment` object using the `text()` method and print it to the console. Assumes `attachment` is an instance of an `edgartools.Attachment` object.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/attachments.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntext = attachment.text()\nprint(text)\n```\n\n----------------------------------------\n\nTITLE: Accessing Specific Filing by Index in Python\nDESCRIPTION: Shows how to access a specific filing from the `CompanyFilings` object using integer-based indexing (bracket notation). This retrieves the filing at the specified index (0-based) within the collection.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/company.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfilings[2]\n```\n\n----------------------------------------\n\nTITLE: Initializing Company Objects with edgartools in Python\nDESCRIPTION: This snippet constructs a Company object using the CIK from the previously retrieved 'filing'. It requires the 'edgar' package and an existing filing object with a 'cik' attribute. The resulting 'c' object enables further company-level queries, such as accessing filings or company metadata. The primary input is the filing's CIK; no output is explicitly shown beyond object instantiation.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Reporting-Period.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nc = Company(filing.cik)\n\n```\n\n----------------------------------------\n\nTITLE: Assigning the statements dictionary\nDESCRIPTION: Retrieves the dictionary of financial statements from the `xbrl_data` object and assigns it to the `statements` variable. This might be redundant if executed after the previous similar assignment.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Reading-Data-From-XBRL.ipynb#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nstatements = xbrl_data.statements\n```\n\n----------------------------------------\n\nTITLE: Signature and Docstring for Filings.filter Method in EdgarTools Python\nDESCRIPTION: This snippet presents the method signature and documentation for the `filter` method on a `Filings` object. It details the supported parameters (form, amendments, filing_date, cik, exchange, ticker, accession_number) and documents their expected types and usage. Intended for library developers and advanced users, it requires familiarity with Python type hints and the EdgarTools object model.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/filtering-filings.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n    def filter(self, *,\n        form: Optional[Union[str, List[IntString]]] = None,\n        amendments: bool = None,\n        filing_date: Optional[str] = None,\n        date: Optional[str] = None,\n        cik: Union[IntString, List[IntString]] = None,\n        exchange: Union[str, List[str], Exchange, List[Exchange]] = None,\n        ticker: Union[str, List[str]] = None,\n        accession_number: Union[str, List[str]] = None) -> Optional['Filings']:\n\n        :param form: The form or list of forms to filter by\n        :param amendments: Whether to include amendments to the forms e.g. include \"10-K/A\"\n        :param filing_date: The filing date\n        :param date: An alias for the filing date\n        :param cik: The CIK or list of CIKs to filter by\n        :param exchange: The exchange or list of exchanges to filter by\n        :param ticker: The ticker or list of tickers to filter by\n        :param accession_number: The accession number or list of accession numbers to filter by\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Financial Concepts using Python Enum\nDESCRIPTION: This Python code defines the `StandardConcept` enumeration, which lists canonical names for financial statement items (e.g., 'Cash and Cash Equivalents', 'Total Assets'). It uses Python's `Enum` type and includes a class method `get_from_label` to retrieve an enum member by its string value. This enum serves as the reference for standard concepts, and its string values must align exactly with the keys used in the `concept_mappings.json` file.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/edgar/xbrl2/docs/standardization-design.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass StandardConcept(str, Enum):\n    # Balance Sheet - Assets\n    CASH_AND_EQUIVALENTS = \"Cash and Cash Equivalents\"\n    TOTAL_ASSETS = \"Total Assets\"\n    # Other concepts...\n    \n    @classmethod\n    def get_from_label(cls, label: str) -> Optional['StandardConcept']:\n        \"\"\"Get a StandardConcept enum by its label value.\"\"\"\n        for concept in cls:\n            if concept.value == label:\n                return concept\n        return None\n```\n\n----------------------------------------\n\nTITLE: Importing get_mutual_fund_tickers and Retrieving All Mutual Fund Tickers with Edgartools in Python\nDESCRIPTION: Demonstrates explicit import of get_mutual_fund_tickers from the edgar.reference.tickers module and retrieving all mutual fund tickers by invoking the function. Useful for clarity or code organization when only particular reference utilities are needed.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Ticker-Search-with-edgartools.ipynb#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom edgar.reference.tickers import get_mutual_fund_tickers\nget_mutual_fund_tickers()\n```\n\n----------------------------------------\n\nTITLE: Accessing a Statement by Index (66)\nDESCRIPTION: Retrieves a statement from the `statements` collection using its numerical index (66). This provides an alternative way to access statements if their exact position is known.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-NonFinancialStatements.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nstatements[66]\n```\n\n----------------------------------------\n\nTITLE: Accessing Filing Homepage URL - Python\nDESCRIPTION: Retrieves the homepage URL or summary page for a filing object using the homepage property. Provides direct access for referencing or web viewing the filing.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/Usage.ipynb#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfiling.homepage\n```\n\n----------------------------------------\n\nTITLE: Accessing a Statement by Index (67)\nDESCRIPTION: Retrieves a statement from the `statements` collection using its numerical index (67).\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-NonFinancialStatements.ipynb#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nstatements[67]\n```\n\n----------------------------------------\n\nTITLE: Accessing a Statement by Index (64)\nDESCRIPTION: Retrieves a statement from the `statements` collection using its numerical index (64).\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-NonFinancialStatements.ipynb#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nstatements[64]\n```\n\n----------------------------------------\n\nTITLE: Accessing Underlying pyarrow Table - Python\nDESCRIPTION: Accesses the internal pyarrow.Table that underpins the filings object's storage using the .data property. Enables further Arrow-based manipulation or efficient data interchange.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/Usage.ipynb#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfilings.data\n```\n\n----------------------------------------\n\nTITLE: Defining Statement Resolver Class Structure in Python\nDESCRIPTION: This Python code outlines the structure for a `StatementResolver` class designed to identify financial statements within an XBRL document. The class constructor takes an XBRL object, initializes caches and indices, and defines methods for implementing a tiered matching algorithm (e.g., matching by primary concept, role patterns, content analysis) and calculating confidence scores. It encapsulates the logic for resolving statement types based on various criteria.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/edgar/xbrl2/docs/statement-matching.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass StatementResolver:\n    def __init__(self, xbrl):\n        self.xbrl = xbrl\n        self._cache = {}\n        self._initialize_indices()\n        \n    def _initialize_indices(self):\n        # Build lookup indices\n        \n    def find_statement(self, role_or_type, parenthetical=False):\n        # Implement tiered matching algorithm\n        \n    def _match_by_primary_concept(self, statement_type, is_parenthetical=False):\n        # Match using primary concepts with parenthetical consideration\n        \n    def _match_by_role_pattern(self, role_or_type):\n        # Match using role URI patterns\n        \n    def _match_by_content(self, role_or_type):\n        # Match by analyzing statement content\n        \n    def _calculate_confidence_score(self, statement, statement_type):\n        # Calculate confidence score for a match\n        \n    def resolve(self, role_or_type, parenthetical=False):\n        # Return best match with confidence score\n```\n\n----------------------------------------\n\nTITLE: Accessing Filing Objects Directly - Python\nDESCRIPTION: Displays or inspects the filings object previously obtained, typically in an interactive session. Outputs a representation or summary of the current set of filings for further inspection.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/Usage.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfilings\n```\n\n----------------------------------------\n\nTITLE: Opening an 8-K Filing in Browser using edgartools in Python\nDESCRIPTION: Shows how to open a specific SEC filing document (represented by the `filing` object) in the system's default web browser using the `open()` method. Requires a `Filing` object obtained previously.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/eightk-filings.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfiling.open()\n```\n\n----------------------------------------\n\nTITLE: Opening a Filing's Main Document in Browser with edgartools in Python\nDESCRIPTION: Shows how to use the `open()` method on a `Filing` object to launch the filing's primary document in the system's default web browser for viewing. Requires a valid `Filing` object instance.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/working-with-filings.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfiling.open()\n```\n\n----------------------------------------\n\nTITLE: Defining RatioAnalysis Dataclass in Python\nDESCRIPTION: This Python code defines the RatioAnalysis dataclass, which encapsulates the results of a financial ratio calculation. It stores the ratio name, description, the calculation DataFrame, the computed result, individual components used, and the period of calculation. Dependencies include the Python 'dataclasses' module and a pandas DataFrame as well as typing.Dict; inputs are the calculation components, outputs, and metadata for each ratio.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/edgar/xbrl2/analysis/DESIGN.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass RatioAnalysis:\n    name: str               # Name of the ratio\n    description: str        # Description of what the ratio measures\n    calculation_df: pd.DataFrame  # DataFrame used in calculation\n    result: float          # Final ratio value\n    components: Dict[str, float]  # Individual components used\n    period: str            # Period the ratio is calculated for\n```\n\n----------------------------------------\n\nTITLE: Opening a Filing's EDGAR Homepage in Browser with edgartools in Python\nDESCRIPTION: Demonstrates using the `open_homepage()` method on a `Filing` object. This opens the filing's landing page on the SEC EDGAR website in the default browser, providing links to all associated documents and data files.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/working-with-filings.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfiling.open_homepage()\n```\n\n----------------------------------------\n\nTITLE: Accessing the Filing Homepage Object using edgartools in Python\nDESCRIPTION: Accesses the `homepage` attribute of a specific `Filing` object (obtained, for example, by indexing a `Filings` object). This attribute returns a `FilingHomepage` object, representing the filing's main page on EDGAR, which allows listing documents and datafiles. Displaying it in a terminal shows its representation.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/using-the-filings-api.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfiling.homepage\n```\n\n----------------------------------------\n\nTITLE: Displaying Extracted SCCO Cash Flow Statement (Python)\nDESCRIPTION: Displays the content of the `statement` variable, which holds the cash flow statement data extracted for SCCO in the previous step using the `xbrl2` module.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-Cashflow-Statements.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nstatement\n```\n\n----------------------------------------\n\nTITLE: Viewing Attachment Content in Console with edgartools in Python\nDESCRIPTION: Uses the `view()` method on an `Attachment` object to display its content (text or HTML) directly in the console or execution environment. Suitable for text-based attachments.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/working-with-filings.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nattachment.view()\n```\n\n----------------------------------------\n\nTITLE: Importing edgartools and Setting User Identity (Python)\nDESCRIPTION: Imports all components from the main `edgar` package and sets the user identity required by the SEC EDGAR system using `set_identity()`. Providing a valid email address is necessary for accessing EDGAR data programmatically.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-Cashflow-Statements.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom edgar import *\nset_identity(\"cash@hedgefund.com\")\n```\n\n----------------------------------------\n\nTITLE: XBRL Filing Concept Data Structure Example - Python\nDESCRIPTION: This snippet demonstrates a representative Python dictionary structure for company XBRL concept data, to be used as input for mapping and inference routines. Required keys include 'concept', 'label', and 'statement_type', with optional context-related keys like 'calculation_parent' and 'calculation_children'. Intended for use as parsed objects from XBRL filings before mapping to standard concepts. This is mainly a structural example, not executable code.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/edgar/xbrl2/docs/standardization.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n{\n    \"concept\": \"us-gaap_SalesRevenueNet\",\n    \"label\": \"Net Sales Revenue\",\n    \"statement_type\": \"IncomeStatement\",\n    \"value\": 1000000,\n    \"calculation_parent\": \"us-gaap_GrossProfit\",\n    \"calculation_children\": [\"us-gaap_CostOfGoodsSold\"]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Counting Filtered Fund Filings using len() in Python\nDESCRIPTION: This snippet uses the standard Python built-in function `len()` to determine the number of items in the `npx_filings` collection. Since `npx_filings` holds the result of filtering for N-PX forms in the previous step, this code effectively counts how many N-PX filings were found for the fund.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Fund-Filings.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nlen(npx_filings)\n```\n\n----------------------------------------\n\nTITLE: Importing XBRL2 Module from edgartools (Python)\nDESCRIPTION: Imports all components from the `edgar.xbrl2` module. XBRL2 is noted as an ongoing rewrite and experimental feature for XBRL parsing within the `edgartools` library.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-Cashflow-Statements.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom edgar.xbrl2 import *\n```\n\n----------------------------------------\n\nTITLE: Finding Financial Statements with Fallback Strategy in Python\nDESCRIPTION: This Python function `find_statement` attempts to locate a financial statement based on its type using a multi-layered approach. It prioritizes exact role URI matches, then tries matching by primary concept, concept patterns, role patterns, content analysis, and finally structure analysis, returning the match with the highest confidence score above specific thresholds. It requires access to instance state (`_statement_by_role_uri`) and several internal helper methods (`_match_by_primary_concept`, `_match_by_concept_pattern`, etc.) for different matching techniques. The function accepts the desired `statement_type` and a boolean `is_parenthetical` flag, returning a list of matching statements, the identified role, and a confidence score.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/edgar/xbrl2/docs/statement-matching.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef find_statement(self, statement_type, is_parenthetical=False):\n    \"\"\"\n    Find a statement by type, with multi-layered fallback approach.\n    \n    Args:\n        statement_type: Statement type or identifier\n        is_parenthetical: Whether to look for parenthetical version\n        \n    Returns:\n        (matching_statements, found_role, confidence_score)\n    \"\"\"\n    # If this is an exact match to a role URI we already know, return immediately\n    if statement_type in self._statement_by_role_uri:\n        return [self._statement_by_role_uri[statement_type]], statement_type, 1.0\n    \n    # Try primary concept matching first (highest confidence)\n    match = self._match_by_primary_concept(statement_type, is_parenthetical)\n    if match and match[2] > 0.8:  # High confidence threshold\n        return match\n    \n    # Try custom namespace matching\n    match = self._match_by_concept_pattern(statement_type, is_parenthetical)\n    if match and match[2] > 0.8:  # High confidence for concept pattern matches\n        return match\n        \n    # Try role pattern matching\n    match = self._match_by_role_pattern(statement_type)\n    if match and match[2] > 0.7:  # Good confidence threshold\n        return match\n        \n    # Try content-based analysis\n    match = self._match_by_content(statement_type)\n    if match and match[2] > 0.6:  # Moderate confidence threshold\n        return match\n        \n    # Try structure analysis as last resort\n    match = self._match_by_structure(statement_type)\n    if match and match[2] > 0.5:  # Lower confidence but still useful\n        return match\n        \n    # No good match found, return best attempt with low confidence\n    return self._get_best_guess(statement_type), None, 0.3\n```\n\n----------------------------------------\n\nTITLE: Installing Edgartools Package in Python with pip\nDESCRIPTION: Installs or upgrades the edgartools library required for all subsequent operations in this notebook. No code dependencies other than Python and pip are required. Must be executed before any import or usage of the edgartools modules.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Ticker-Search-with-edgartools.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -U edgartools\n```\n\n----------------------------------------\n\nTITLE: Data Model Structure: Fact Database (JSON)\nDESCRIPTION: Defines the JSON structure for the Fact Database. Each entry represents a reported fact and is keyed by a combination of element ID and context ID. It stores the fact's value (as a string), its precision (decimals or 'INF' for infinite), a reference to its unit, and an array of associated footnote identifiers.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/xbrl-development/xbrl-parser-design.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"elementId_contextId\": {\n    \"value\": string,\n    \"decimals\": number|\"INF\",\n    \"unitRef\": string,\n    \"footnotes\": [string]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Previous Page of SEC Filings in Python\nDESCRIPTION: Calls the `.prev()` method on the `Filings` object (`filings`). This navigates back to the previously viewed page of SEC filing results.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Paging-Through-Filings.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfilings.prev()\n```\n\n----------------------------------------\n\nTITLE: Initializing edgartools Library and Setting Identity in Python\nDESCRIPTION: This snippet imports core edgartools modules and sets the user email identity, a prerequisite for querying the EDGAR system. The 'set_identity' function is required to authenticate requests, and a valid email must be supplied as its parameter. Outputs and errors depend on API usage and connectivity.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Extract-Earnings-Releases.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom edgar import *\nfrom edgar.files.html import HtmlDocument\n\nset_identity(\"me@myemail.com\")\n```\n\n----------------------------------------\n\nTITLE: Selecting Top N Filings using head() in Python\nDESCRIPTION: This snippet uses the `head()` method on the `filings` object, similar to pandas DataFrames, to select and display the first 5 filings from the collection. This is useful for quickly previewing the beginning of the dataset.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Beginners-Guide.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfilings.head(5)\n```\n\n----------------------------------------\n\nTITLE: Importing Edgartools and Setting API Identity in Python\nDESCRIPTION: Imports all symbols from the edgar module and sets the API identity, typically required for compliance or rate limiting when querying the SEC backend. Requires the edgartools library to be pre-installed. set_identity takes a contact email used as your API identity.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Ticker-Search-with-edgartools.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom edgar import *\nset_identity(\"neil@oasis.com\")\n```\n\n----------------------------------------\n\nTITLE: Installing the edgartools Library using pip\nDESCRIPTION: This command uses the `pip` package installer to install the `edgartools` library. This library is essential for interacting with SEC EDGAR data and parsing XBRL files within the Python environment demonstrated in subsequent snippets.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-CustomTags.ipynb#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n!pip install edgartools\n```\n\n----------------------------------------\n\nTITLE: Importing edgartools and Setting SEC Identity (Python)\nDESCRIPTION: Imports all necessary components from the `edgar` module and configures the required user identity for interacting with the SEC EDGAR system. Replace \"user@domain.com\" with your actual email address as required by the SEC.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/ai_docs/edgartools.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom edgar import *\nset_identity(\"user@domain.com\") # Identify yourself to the SEC \n```\n\n----------------------------------------\n\nTITLE: Installing edgartools library using pip (Shell)\nDESCRIPTION: Installs the `edgartools` Python library using the pip package installer. This command is typically run in a shell or a notebook environment to make the library available for import and use.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-Cashflow-Statements.ipynb#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n!pip install edgartools\n```\n\n----------------------------------------\n\nTITLE: Data Model Structure: Dimensional Structure (JSON)\nDESCRIPTION: Defines the JSON structure for storing dimensional relationships derived from the definition linkbase, organized by role URI. It contains definitions for dimensional tables (hypercubes), including their axes (dimensions), the domain and members for each axis, the default member, and the line items (primary concepts) associated with the table.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/xbrl-development/xbrl-parser-design.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"roleUri\": {\n    \"tables\": [\n      {\n        \"tableId\": string,\n        \"axes\": [\n          {\n            \"axisId\": string,\n            \"domain\": string,\n            \"members\": [string],\n            \"defaultMember\": string\n          }\n        ],\n        \"lineItems\": [string]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing edgartools and pandas - Python\nDESCRIPTION: Imports all components from the edgar module and pandas as pd, establishing the main dependencies for accessing SEC data and for working with dataframes. Ensures that both edgartools and pandas are installed and available in the environment.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/Usage.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom edgar import *\nimport pandas as pd\n```\n\n----------------------------------------\n\nTITLE: Data Model Structure: Presentation Hierarchy (JSON)\nDESCRIPTION: Defines the JSON structure for storing presentation relationships derived from the presentation linkbase. It's organized by role URI (representing a specific statement or disclosure). Each role contains a title and a root node representing the start of the hierarchy, with nested children reflecting the parent-child structure, including element ID, preferred label role, and presentation order.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/xbrl-development/xbrl-parser-design.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"roleUri\": {\n    \"title\": string,\n    \"root\": {\n      \"elementId\": string,\n      \"children\": [\n        {\n          \"elementId\": string,\n          \"preferredLabel\": string,\n          \"order\": number,\n          \"children\": [...]\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Balance Sheet Structure (Text/Hierarchy)\nDESCRIPTION: Illustrates a typical hierarchical structure for a Statement of Financial Position (Balance Sheet) as derived from an XBRL presentation linkbase. It uses indentation to show parent-child relationships between abstract section headers (e.g., 'Assets', 'Current Assets') and reportable line items (e.g., 'Cash and Cash Equivalents'), mirroring how the presentation hierarchy would be built.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/xbrl-development/xbrl-parser-design.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nStatement of Financial Position\n│\n├── Assets [Abstract]\n│   ├── Current Assets [Abstract]\n│   │   ├── Cash and Cash Equivalents\n│   │   ├── Accounts Receivable, Net\n│   │   ├── Inventory, Net\n│   │   └── Total Current Assets\n│   │\n│   ├── Non-current Assets [Abstract]\n│   │   ├── Property, Plant and Equipment, Net\n│   │   ├── Goodwill\n│   │   └── Total Non-current Assets\n│   │\n│   └── Total Assets\n│\n└── Liabilities and Stockholders' Equity [Abstract]\n    ├── Liabilities [Abstract]\n    │   ├── Current Liabilities [Abstract]\n    │   │   ├── Accounts Payable\n    │   │   ├── Short-term Debt\n    │   │   └── Total Current Liabilities\n    │   │\n    │   ├── Non-current Liabilities [Abstract]\n    │   │   ├── Long-term Debt\n    │   │   ├── Deferred Tax Liabilities\n    │   │   └── Total Non-current Liabilities\n    │   │\n    │   └── Total Liabilities\n    │\n    ├── Stockholders' Equity [Abstract]\n    │   ├── Common Stock\n    │   ├── Additional Paid-in Capital\n    │   ├── Retained Earnings\n    │   └── Total Stockholders' Equity\n    │\n    └── Total Liabilities and Stockholders' Equity\n```\n\n----------------------------------------\n\nTITLE: Setting the Local Data Directory for Edgartools in Bash\nDESCRIPTION: This command sets the `EDGAR_LOCAL_DATA_DIR` environment variable in a Bash shell, directing the `edgartools` library to use the specified path for storing downloaded SEC data instead of the default `<USER_HOME>/.edgar` directory. This is necessary if you want to store the data in a non-default location.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/local-data.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport EDGAR_LOCAL_DATA_DIR=\"/path/to/local/data\"\n```\n\n----------------------------------------\n\nTITLE: Selecting a Single Filing in Python\nDESCRIPTION: Selects the first filing object from the `filings` collection (obtained in the previous step). This assumes `filings` is an ordered collection like a list or DataFrame. The selected filing object is stored in the `filing` variable.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-Instance-Only-XBRL.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfiling = filings[0]\nfiling\n```\n\n----------------------------------------\n\nTITLE: Installing edgartools Library using pip (Bash)\nDESCRIPTION: This command installs the `edgartools` Python library using the pip package manager. It requires Python and pip to be installed on the system.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/ai_docs/edgartools.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install edgartools\n```\n\n----------------------------------------\n\nTITLE: Embedding Pre-Commencement Tender Offer Checkbox using ix:nonNumeric (XBRL in HTML)\nDESCRIPTION: This snippet displays an unchecked checkbox ('&#9744;') in a table cell (`<td>`) via `<ix:nonNumeric>`. It indicates the status of 'Pre-commencement communications pursuant to Rule 14d-2(b)'. The tag uses 'dei:PreCommencementTenderOffer', context 'c20241220to20241220', a unique ID, and the 'ixt-sec:boolballotbox' format.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0000943374-24-000509.txt#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<td style=\"width: 6.19%; vertical-align: top;\">\n            <div style=\"text-align: center; font-family: 'Times New Roman', Times, serif; font-size: 12pt;\"><ix:nonNumeric name=\"dei:PreCommencementTenderOffer\" id=\"Fact_88210453278d4a20989784805607b907\" contextRef=\"c20241220to20241220\" format=\"ixt-sec:boolballotbox\">&#9744;</ix:nonNumeric><br/>\n            </div>\n          </td>\n```\n\n----------------------------------------\n\nTITLE: Installing edgartools library\nDESCRIPTION: This snippet shows the command to install the `edgartools` Python library using pip. This library is required for interacting with the SEC EDGAR database.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-QuarterlyStatements.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#!pip install edgartools\n```\n\n----------------------------------------\n\nTITLE: Installing edgartools library\nDESCRIPTION: Installs the `edgartools` Python package using pip. This is a prerequisite step to enable interaction with SEC EDGAR data within the Python environment.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-StitchingStatements.ipynb#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n!pip install edgartools\n```\n\n----------------------------------------\n\nTITLE: Structuring Document Layout with HTML DIVs and Styles\nDESCRIPTION: Uses HTML `DIV` elements with inline CSS styles to manage document layout, specifically page margins, borders, and page breaks. The `break-before: page` style explicitly forces a page break, essential for paginated document formats generated from this HTML.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0001104659-25-002604.txt#_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<DIV STYLE=\"margin-top: 12pt; margin-bottom: 6pt; border-bottom: Black 1pt solid\"><P STYLE=\"margin: 0pt\">&nbsp;</P></DIV>\n```\n\nLANGUAGE: html\nCODE:\n```\n<DIV STYLE=\"break-before: page; margin-top: 6pt; margin-bottom: 12pt\"><P STYLE=\"margin: 0pt\">&nbsp;</P></DIV>\n```\n\n----------------------------------------\n\nTITLE: Setting SEC Edgar Identity via Environment Variable (Bash)\nDESCRIPTION: Sets the EDGAR_IDENTITY environment variable to specify the user's identity when using edgartools, enabling the library to access the SEC Edgar API. Dependencies: None (apart from standard shell). Input: Email string. Output: Sets the environment variable, effective for the shell session. Preferred in scripting or notebook execution contexts.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/index.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport EDGAR_IDENTITY=\"mike.mccalum@indigo.com\"\n```\n\n----------------------------------------\n\nTITLE: Defining DEI TradingSymbol Metadata in HTML\nDESCRIPTION: This HTML table structure defines metadata for the 'dei_TradingSymbol' element from the SEC DEI taxonomy. It includes sections for Definition, References (though none provided here), and Details (Name, Namespace, Data Type, etc.). JavaScript functions (`Show.hideAR` and `Show.toggleNext`) are used within anchor tags to allow users to hide the entire definition block or expand/collapse individual sections.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0000943374-24-000509.txt#_snippet_28\n\nLANGUAGE: html\nCODE:\n```\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"authRefData\" style=\"display: none;\" id=\"defref_dei_TradingSymbol\">\n<tr><td class=\"hide\"><a style=\"color: white;\" href=\"javascript:void(0);\" onclick=\"Show.hideAR();\">X</a></td></tr>\n<tr><td><div class=\"body\" style=\"padding: 2px;\">\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">- Definition</a><div><p>Trading symbol of an instrument as listed on an exchange.</p></div>\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">+ References</a><div style=\"display: none;\"><p>No definition available.</p></div>\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">+ Details</a><div style=\"display: none;\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td><strong> Name:</strong></td>\n<td style=\"white-space:nowrap;\">dei_TradingSymbol</td>\n</tr>\n<tr>\n<td style=\"padding-right: 4px;white-space:nowrap;\"><strong> Namespace Prefix:</strong></td>\n<td>dei_</td>\n</tr>\n<tr>\n<td><strong> Data Type:</strong></td>\n<td>dei:tradingSymbolItemType</td>\n</tr>\n<tr>\n<td><strong> Balance Type:</strong></td>\n<td>na</td>\n</tr>\n<tr>\n<td><strong> Period Type:</strong></td>\n<td>duration</td>\n</tr>\n</table></div>\n</div></td></tr>\n</table>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nShow.hideAR();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nShow.toggleNext( this );\n```\n\n----------------------------------------\n\nTITLE: Adding Spacing and Page Breaks in HTML Document\nDESCRIPTION: This HTML snippet uses paragraph (`<P>`) and division (`<DIV>`) elements with inline styles and non-breaking spaces (`&nbsp;`) to create vertical spacing within the document. It includes an HTML comment indicating a specific field ('Page', sequence 5) and uses CSS properties like `border-bottom`, `margin-top`, `margin-bottom`, and `break-before: page` to structure the layout, potentially forcing a page break for printing or rendering.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0001104659-25-002604.txt#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; margin: 0pt 0\">&nbsp;</P>\n\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; margin: 0pt 0\"></P>\n\n<!-- Field: Page; Sequence: 5 -->\n    <DIV STYLE=\"border-bottom: Black 1pt solid; margin-top: 12pt; margin-bottom: 6pt\"><P STYLE=\"margin: 0pt\">&nbsp;</P></DIV>\n    <DIV STYLE=\"break-before: page; margin-top: 6pt; margin-bottom: 12pt\"><P STYLE=\"margin: 0pt\">&nbsp;</P></DIV>\n    <!-- Field: /Page -->\n\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; margin: 0pt 0\">&nbsp;</P>\n```\n\n----------------------------------------\n\nTITLE: Rendering Metadata Summary Table with Interactive Modals - HTML\nDESCRIPTION: This snippet implements an HTML table to present a summary of XBRL filing metadata, with each row describing a specific property. Each data label cell includes an anchor link with a JavaScript-powered onclick event that triggers a popup (Show.showAR) to present auxiliary information such as definitions and extended references. The table is meant to be embedded within a larger XBRL viewer or financial reporting web application, and expects a supporting JavaScript object named Show with modal logic. Input is static XBRL property values; users' mouse clicks are handled for contextual popups. Output is an interactive page where clicking item labels shows additional detail modals. Requires supporting JavaScript and hidden content containers for each reference.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0000943374-24-000509.txt#_snippet_18\n\nLANGUAGE: HTML\nCODE:\n```\n<td class=\\\"pl\\\" style=\\\"border-bottom: 0px;\\\" valign=\\\"top\\\"><a class=\\\"a\\\" href=\\\"javascript:void(0);\\\" onclick=\\\"Show.showAR( this, 'defref_dei_CoverAbstract', window );\\\"><strong>Cover [Abstract]</strong></a></td>\\n<td class=\\\"text\\\">&#160;<span></span>\\n</td>\\n</tr>\\n<tr class=\\\"ro\\\">\\n<td class=\\\"pl\\\" style=\\\"border-bottom: 0px;\\\" valign=\\\"top\\\"><a class=\\\"a\\\" href=\\\"javascript:void(0);\\\" onclick=\\\"Show.showAR( this, 'defref_dei_DocumentType', window );\\\">Document Type</a></td>\\n<td class=\\\"text\\\">8-K<span></span>\\n</td>\\n</tr>\\n<tr class=\\\"re\\\">\\n<td class=\\\"pl\\\" style=\\\"border-bottom: 0px;\\\" valign=\\\"top\\\"><a class=\\\"a\\\" href=\\\"javascript:void(0);\\\" onclick=\\\"Show.showAR( this, 'defref_dei_AmendmentFlag', window );\\\">Amendment Flag</a></td>\\n<td class=\\\"text\\\">false<span></span>\\n</td>\\n</tr>\\n<tr class=\\\"ro\\\">\\n<td class=\\\"pl\\\" style=\\\"border-bottom: 0px;\\\" valign=\\\"top\\\"><a class=\\\"a\\\" href=\\\"javascript:void(0);\\\" onclick=\\\"Show.showAR( this, 'defref_dei_DocumentPeriodEndDate', window );\\\">Document Period End Date</a></td>\\n<td class=\\\"text\\\">Dec. 20,  2024<span></span>\\n</td>\\n</tr>\\n<tr class=\\\"re\\\">\\n<td class=\\\"pl\\\" style=\\\"border-bottom: 0px;\\\" valign=\\\"top\\\"><a class=\\\"a\\\" href=\\\"javascript:void(0);\\\" onclick=\\\"Show.showAR( this, 'defref_dei_EntityFileNumber', window );\\\">Entity File Number</a></td>\\n<td class=\\\"text\\\">001-40609<span></span>\\n</td>\\n</tr>\\n<tr class=\\\"ro\\\">\\n<td class=\\\"pl\\\" style=\\\"border-bottom: 0px;\\\" valign=\\\"top\\\"><a class=\\\"a\\\" href=\\\"javascript:void(0);\\\" onclick=\\\"Show.showAR( this, 'defref_dei_EntityRegistrantName', window );\\\">Entity Registrant Name</a></td>\\n<td class=\\\"text\\\">1895 BANCORP OF WISCONSIN, INC.<span></span>\\n</td>\\n</tr>\\n<tr class=\\\"re\\\">\\n<td class=\\\"pl\\\" style=\\\"border-bottom: 0px;\\\" valign=\\\"top\\\"><a class=\\\"a\\\" href=\\\"javascript:void(0);\\\" onclick=\\\"Show.showAR( this, 'defref_dei_EntityCentralIndexKey', window );\\\">Entity Central Index Key</a></td>\\n<td class=\\\"text\\\">0001847360<span></span>\\n</td>\\n</tr>\\n<tr class=\\\"ro\\\">\\n<td class=\\\"pl\\\" style=\\\"border-bottom: 0px;\\\" valign=\\\"top\\\"><a class=\\\"a\\\" href=\\\"javascript:void(0);\\\" onclick=\\\"Show.showAR( this, 'defref_dei_EntityIncorporationStateCountryCode', window );\\\">Entity Incorporation, State or Country Code</a></td>\\n<td class=\\\"text\\\">MD<span></span>\\n</td>\\n</tr>\\n<tr class=\\\"re\\\">\\n<td class=\\\"pl\\\" style=\\\"border-bottom: 0px;\\\" valign=\\\"top\\\"><a class=\\\"a\\\" href=\\\"javascript:void(0);\\\" onclick=\\\"Show.showAR( this, 'defref_dei_EntityTaxIdentificationNumber', window );\\\">Entity Tax Identification Number</a></td>\\n<td class=\\\"text\\\">61-1993378<span></span>\\n</td>\\n</tr>\\n<tr class=\\\"ro\\\">\\n<td class=\\\"pl\\\" style=\\\"border-bottom: 0px;\\\" valign=\\\"top\\\"><a class=\\\"a\\\" href=\\\"javascript:void(0);\\\" onclick=\\\"Show.showAR( this, 'defref_dei_EntityAddressAddressLine1', window );\\\">Entity Address, Address Line One</a></td>\\n<td class=\\\"text\\\">7001 West Edgerton Avenue<span></span>\\n</td>\\n</tr>\\n<tr class=\\\"re\\\">\\n<td class=\\\"pl\\\" style=\\\"border-bottom: 0px;\\\" valign=\\\"top\\\"><a class=\\\"a\\\" href=\\\"javascript:void(0);\\\" onclick=\\\"Show.showAR( this, 'defref_dei_EntityAddressCityOrTown', window );\\\">Entity Address, City or Town</a></td>\\n<td class=\\\"text\\\">Greenfield<span></span>\\n</td>\\n</tr>\\n<tr class=\\\"ro\\\">\\n<td class=\\\"pl\\\" style=\\\"border-bottom: 0px;\\\" valign=\\\"top\\\"><a class=\\\"a\\\" href=\\\"javascript:void(0);\\\" onclick=\\\"Show.showAR( this, 'defref_dei_EntityAddressStateOrProvince', window );\\\">Entity Address, State or Province</a></td>\\n<td class=\\\"text\\\">WI<span></span>\\n</td>\\n</tr>\\n<tr class=\\\"re\\\">\\n<td class=\\\"pl\\\" style=\\\"border-bottom: 0px;\\\" valign=\\\"top\\\"><a class=\\\"a\\\" href=\\\"javascript:void(0);\\\" onclick=\\\"Show.showAR( this, 'defref_dei_EntityAddressPostalZipCode', window );\\\">Entity Address, Postal Zip Code</a></td>\\n<td class=\\\"text\\\">53220<span></span>\\n</td>\\n</tr>\\n<tr class=\\\"ro\\\">\\n<td class=\\\"pl\\\" style=\\\"border-bottom: 0px;\\\" valign=\\\"top\\\"><a class=\\\"a\\\" href=\\\"javascript:void(0);\\\" onclick=\\\"Show.showAR( this, 'defref_dei_CityAreaCode', window );\\\">City Area Code</a></td>\\n<td class=\\\"text\\\">414<span></span>\\n</td>\\n</tr>\\n<tr class=\\\"re\\\">\\n<td class=\\\"pl\\\" style=\\\"border-bottom: 0px;\\\" valign=\\\"top\\\"><a class=\\\"a\\\" href=\\\"javascript:void(0);\\\" onclick=\\\"Show.showAR( this, 'defref_dei_LocalPhoneNumber', window );\\\">Local Phone Number</a></td>\\n<td class=\\\"text\\\">421-8200<span></span>\\n</td>\\n</tr>\\n<tr class=\\\"ro\\\">\\n<td class=\\\"pl\\\" style=\\\"border-bottom: 0px;\\\" valign=\\\"top\\\"><a class=\\\"a\\\" href=\\\"javascript:void(0);\\\" onclick=\\\"Show.showAR( this, 'defref_dei_Security12bTitle', window );\\\">Title of 12(b) Security</a></td>\\n<td class=\\\"text\\\">Common Stock, par value $0.01 per share<span></span>\\n</td>\\n</tr>\\n<tr class=\\\"re\\\">\\n<td class=\\\"pl\\\" style=\\\"border-bottom: 0px;\\\" valign=\\\"top\\\"><a class=\\\"a\\\" href=\\\"javascript:void(0);\\\" onclick=\\\"Show.showAR( this, 'defref_dei_TradingSymbol', window );\\\">Trading Symbol</a></td>\\n<td class=\\\"text\\\">BCOW<span></span>\\n</td>\\n</tr>\\n<tr class=\\\"ro\\\">\\n<td class=\\\"pl\\\" style=\\\"border-bottom: 0px;\\\" valign=\\\"top\\\"><a class=\\\"a\\\" href=\\\"javascript:void(0);\\\" onclick=\\\"Show.showAR( this, 'defref_dei_SecurityExchangeName', window );\\\">Security Exchange Name</a></td>\\n<td class=\\\"text\\\">NASDAQ<span></span>\\n</td>\\n</tr>\\n<tr class=\\\"re\\\">\\n<td class=\\\"pl\\\" style=\\\"border-bottom: 0px;\\\" valign=\\\"top\\\"><a class=\\\"a\\\" href=\\\"javascript:void(0);\\\" onclick=\\\"Show.showAR( this, 'defref_dei_EntityEmergingGrowthCompany', window );\\\">Entity Emerging Growth Company</a></td>\\n<td class=\\\"text\\\">true<span></span>\\n</td>\\n</tr>\\n<tr class=\\\"ro\\\">\\n<td class=\\\"pl\\\" style=\\\"border-bottom: 0px;\\\" valign=\\\"top\\\"><a class=\\\"a\\\" href=\\\"javascript:void(0);\\\" onclick=\\\"Show.showAR( this, 'defref_dei_EntityExTransitionPeriod', window );\\\">Entity Ex Transition Period</a></td>\\n<td class=\\\"text\\\">false<span></span>\\n</td>\\n</tr>\\n<tr class=\\\"re\\\">\\n<td class=\\\"pl\\\" style=\\\"border-bottom: 0px;\\\" valign=\\\"top\\\"><a class=\\\"a\\\" href=\\\"javascript:void(0);\\\" onclick=\\\"Show.showAR( this, 'defref_dei_WrittenCommunications', window );\\\">Written Communications</a></td>\\n<td class=\\\"text\\\">false<span></span>\\n</td>\\n</tr>\\n<tr class=\\\"ro\\\">\\n<td class=\\\"pl\\\" style=\\\"border-bottom: 0px;\\\" valign=\\\"top\\\"><a class=\\\"a\\\" href=\\\"javascript:void(0);\\\" onclick=\\\"Show.showAR( this, 'defref_dei_SolicitingMaterial', window );\\\">Soliciting Material</a></td>\\n<td class=\\\"text\\\">false<span></span>\\n</td>\\n</tr>\\n<tr class=\\\"re\\\">\\n<td class=\\\"pl\\\" style=\\\"border-bottom: 0px;\\\" valign=\\\"top\\\"><a class=\\\"a\\\" href=\\\"javascript:void(0);\\\" onclick=\\\"Show.showAR( this, 'defref_dei_PreCommencementTenderOffer', window );\\\">Pre-commencement Tender Offer</a></td>\\n<td class=\\\"text\\\">false<span></span>\\n</td>\\n</tr>\\n<tr class=\\\"ro\\\">\\n<td class=\\\"pl\\\" style=\\\"border-bottom: 0px;\\\" valign=\\\"top\\\"><a class=\\\"a\\\" href=\\\"javascript:void(0);\\\" onclick=\\\"Show.showAR( this, 'defref_dei_PreCommencementIssuerTenderOffer', window );\\\">Pre-commencement Issuer Tender Offer</a></td>\\n<td class=\\\"text\\\">false<span></span>\\n</td>\\n</tr>\\n</table>\n```\n\n----------------------------------------\n\nTITLE: Selecting a Single Filing by Index in Python\nDESCRIPTION: This snippet demonstrates how to access a specific filing from the `filings` collection obtained previously. It uses standard Python list indexing (`[0]`) to select the first filing in the collection and stores it in the `filing` variable, which is then displayed.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Beginners-Guide.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfiling = filings[0]\nfiling\n```\n\n----------------------------------------\n\nTITLE: Defining an Exhibit Table Row in HTML for SEC Filing\nDESCRIPTION: This HTML snippet defines a table row (`<TR>`) intended for an exhibit list within an SEC filing. It includes cells (`<TD>`) containing a link (`<A>`) to an exhibit document (Filing Fee Table, exhibit 107) hosted on the SEC website, styled using inline CSS for font and spacing. The `-sec-extract: exhibit` style suggests specific processing for SEC systems.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0001104659-25-002604.txt#_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<TABLE BORDER=\"0\" CELLPADDING=\"0\" CELLSPACING=\"0\" STYLE=\"font: 10pt Times New Roman, Times, Serif; width: 100%; border-collapse: collapse\">\n    <TR STYLE=\"vertical-align: top\">\n    <TD STYLE=\"white-space: nowrap; padding-top: 3.5pt; padding-bottom: 1.5pt\"><A HREF=\"https://www.sec.gov/Archives/edgar/data/1034563/000110465924126116/tm2429962d1_ex-filingfees.htm\" STYLE=\"-sec-extract: exhibit\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">107*   </FONT></A></TD>\n    <TD STYLE=\"white-space: nowrap\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">&NegativeThickSpace;</FONT></TD>\n    <TD STYLE=\"white-space: nowrap\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">&NegativeThickSpace;</FONT></TD>\n    <TD STYLE=\"white-space: nowrap; padding-top: 3.5pt; padding-bottom: 1.5pt\"><A HREF=\"https://www.sec.gov/Archives/edgar/data/1034563/000110465924126116/tm2429962d1_ex-filingfees.htm\" STYLE=\"-sec-extract: exhibit\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">Filing\n    Fee Table</FONT></A></TD>\n    </TR>\n  </TABLE>\n```\n\n----------------------------------------\n\nTITLE: Selecting the First Filtered SEC Filing in Python\nDESCRIPTION: Selects the first filing from the filtered list (bank_filings) for further inspection. No dependencies other than prior filtering step. Input: iterable of filtered filings; Output: single Filing object corresponding to first result.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Filtering-by-industry.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfiling = bank_filings[0]\nfiling\n```\n\n----------------------------------------\n\nTITLE: Installing edgartools Library using pip\nDESCRIPTION: This snippet demonstrates how to install the `edgartools` Python library using the `pip` package installer. This command is typically run in a terminal or a Jupyter notebook cell to make the library available for import.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-NonFinancialStatements.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#!pip install edgartools\n```\n\n----------------------------------------\n\nTITLE: Installing edgartools library using pip in Python Shell\nDESCRIPTION: This command installs the `edgartools` Python package using pip. It's typically executed in a shell environment or a Jupyter notebook cell prefixed with '!'. This step is necessary to make the library available for import and use in subsequent Python code.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Fund-Filings.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install edgartools\n```\n\n----------------------------------------\n\nTITLE: Installing the edgartools Library using pip\nDESCRIPTION: Installs the required `edgartools` Python package using the pip package manager. This step is necessary to use the library's functionalities for accessing SEC Edgar data.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Viewing-Financial-Statements.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install edgartools\n```\n\n----------------------------------------\n\nTITLE: Installing Edgartools Package - Python\nDESCRIPTION: This snippet installs or upgrades the 'edgartools' package in a Jupyter or Colab environment using pip. It must be run prior to importing any Edgartools modules and requires internet access to PyPI. No input parameters are required, and the output will be the pip installation logs.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-StandardizedStatements.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install -U edgartools\n```\n\n----------------------------------------\n\nTITLE: Installing edgartools library using pip\nDESCRIPTION: This snippet uses the pip package manager to install the `edgartools` library, which is necessary for accessing and parsing SEC EDGAR data, including XBRL files. The exclamation mark indicates it's run as a shell command, typically within a Jupyter Notebook or similar environment.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Reading-Data-From-XBRL.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install edgartools\n```\n\n----------------------------------------\n\nTITLE: Installing edgartools Library using pip\nDESCRIPTION: This command uses the pip package installer to install or upgrade the `edgartools` library. This is a prerequisite for using the library's functionalities in the subsequent Python code snippets.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Paging-Through-Filings.ipynb#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n!pip install -U edgartools\n```\n\n----------------------------------------\n\nTITLE: Defining XBRL Statement Matching Registry in Python\nDESCRIPTION: This Python dictionary defines a registry for financial statement types used in XBRL matching. Each entry maps a statement type (e.g., \"BalanceSheet\") to metadata including primary/alternative XBRL concepts, regex patterns for concept names and role URIs, key internal concepts, a display title, parenthetical support status, and concept weights for content analysis. This structure centralizes the criteria for the enhanced statement identification algorithm.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/edgar/xbrl2/docs/statement-matching.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nstatement_registry = {\n    \"BalanceSheet\": {\n        \"primary_concepts\": [\"us-gaap_StatementOfFinancialPositionAbstract\"],\n        \"alternative_concepts\": [\"us-gaap_BalanceSheetAbstract\"],\n        \"concept_patterns\": [\n            r\".*_StatementOfFinancialPositionAbstract$\",\n            r\".*_BalanceSheetAbstract$\",\n            r\".*_ConsolidatedBalanceSheetsAbstract$\",\n            r\".*_CondensedConsolidatedBalanceSheetsUnauditedAbstract$\"\n        ],\n        \"key_concepts\": [\"us-gaap_Assets\", \"us-gaap_Liabilities\", \"us-gaap_StockholdersEquity\"],\n        \"common_role_patterns\": [\n            r\".*[Bb]alance[Ss]heet.*\",\n            r\".*[Ss]tatement[Oo]f[Ff]inancial[Pp]osition.*\",\n            r\".*StatementConsolidatedBalanceSheets.*\"\n        ],\n        \"title\": \"Consolidated Balance Sheets\",\n        \"supports_parenthetical\": True,\n        \"typical_weights\": {\"assets\": 0.3, \"liabilities\": 0.3, \"equity\": 0.4}\n    },\n    \"IncomeStatement\": {\n        \"primary_concepts\": [\"us-gaap_IncomeStatementAbstract\"],\n        \"alternative_concepts\": [\"us-gaap_StatementOfIncomeAbstract\"],\n        \"concept_patterns\": [\n            r\".*_IncomeStatementAbstract$\",\n            r\".*_StatementOfIncomeAbstract$\",\n            r\".*_ConsolidatedStatementsOfIncomeAbstract$\", \n            r\".*_CondensedConsolidatedStatementsOfIncomeUnauditedAbstract$\"\n        ],\n        \"key_concepts\": [\"us-gaap_Revenues\", \"us-gaap_NetIncomeLoss\"],\n        \"common_role_patterns\": [\n            r\".*[Ii]ncome[Ss]tatement.*\",\n            r\".*[Ss]tatement[Oo]f[Ii]ncome.*\",\n            r\".*StatementConsolidatedStatementsOfIncome.*\"\n        ],\n        \"title\": \"Consolidated Statement of Income\",\n        \"supports_parenthetical\": True,\n        \"typical_weights\": {\"revenues\": 0.4, \"netIncomeLoss\": 0.6}\n    },\n    # Additional statement types...\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring SEC FORM 8-K Filing Data with Inline XBRL - HTML\nDESCRIPTION: This snippet demonstrates the HTML body layout of an SEC 8-K report, combining human-readable elements with inline XBRL <ix:nonNumeric> tags for machine-driven data labeling. It depends on correct namespace declarations and SEC taxonomies for tag names. Key parameters include company name, report type, filing date, and identifiers such as CIK and Employer Identification, each wrapped in XBRL tags. The output is both a compliant SEC filing display and a data-rich source for automated extraction; users must ensure accurate contextRef and tag naming to satisfy SEC requirements.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0000943374-24-000509.txt#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<body style=\"font-family: 'Times New Roman', Times, serif; font-size: 10pt; text-align: left; color: #000000; background-color: #ffffff;\">\n<div id=\"DSPFiXBRLHidden\" style=\"display: none;\"><ix:header><ix:hidden><ix:nonNumeric name=\"dei:AmendmentFlag\" id=\"Fact_0f96221d087c404ea672b6832bc48e9c\" contextRef=\"c20241220to20241220\" format=\"ixt:fixed-false\">false</ix:nonNumeric><ix:nonNumeric name=\"dei:EntityCentralIndexKey\" id=\"Fact_4602dc96ed6b4a6581a5ff26714359e9\" contextRef=\"c20241220to20241220\">0001847360</ix:nonNumeric></ix:hidden><ix:references><link:schemaRef xlink:href=\"bcow-20241220.xsd\" xlink:type=\"simple\"/></ix:references><ix:resources><xbrli:context id=\"c20241220to20241220\"><xbrli:entity><xbrli:identifier scheme=\"http://www.sec.gov/CIK\">0001847360</xbrli:identifier></xbrli:entity><xbrli:period><xbrli:startDate>2024-12-20</xbrli:startDate><xbrli:endDate>2024-12-20</xbrli:endDate></xbrli:period></xbrli:context></ix:resources></ix:header></div>\n<div style=\"line-height: initial;\">\n  <div>\n    <div style=\"text-align: center; font-family: 'Times New Roman', Times, serif; font-size: 12pt; font-weight: bold;\">UNITED STATES</div>\n\n    <div style=\"text-align: center; font-family: 'Times New Roman', Times, serif; font-size: 12pt; font-weight: bold;\">SECURITIES AND EXCHANGE COMMISSION</div>\n\n    <div style=\"text-align: center; font-family: 'Times New Roman', Times, serif; font-size: 12pt; font-weight: bold;\">WASHINGTON, D.C. 20549</div>\n\n    <div><br/>\n    </div>\n\n    <div style=\"text-align: center; font-family: 'Times New Roman', Times, serif; font-size: 12pt; font-weight: bold;\">FORM <ix:nonNumeric name=\"dei:DocumentType\" id=\"Fact_c1e475f7cc2b4d6292bc394a4e1b8d98\" contextRef=\"c20241220to20241220\">8-K</ix:nonNumeric></div>\n\n    <div><br/>\n    </div>\n\n    <div style=\"text-align: center; font-family: 'Times New Roman', Times, serif; font-size: 12pt; font-weight: bold;\">CURRENT REPORT</div>\n\n    <div><br/>\n    </div>\n\n    <div style=\"text-align: center; font-family: 'Times New Roman', Times, serif; font-size: 12pt; font-weight: bold;\">Pursuant to Section 13 or 15(d) of the Securities Exchange Act of 1934</div>\n\n    <div><br/>\n    </div>\n\n    <div style=\"text-align: center; font-family: 'Times New Roman', Times, serif; font-size: 12pt;\">Date of Report (Date of earliest event reported):&#160; <ix:nonNumeric name=\"dei:DocumentPeriodEndDate\" id=\"Fact_865e3c31fd374971b6126c11de114e0b\" contextRef=\"c20241220to20241220\" format=\"ixt:date-monthname-day-year-en\">December 20, 2024</ix:nonNumeric></div>\n\n    <div><br/>\n    </div>\n\n    <div style=\"text-align: center; font-family: 'Times New Roman', Times, serif; font-size: 12pt; font-weight: bold;\"><span style=\"text-decoration: underline;\"><ix:nonNumeric name=\"dei:EntityRegistrantName\" id=\"Fact_c65f0f5aef0543b0b3a33c269846bb59\" contextRef=\"c20241220to20241220\">1895 BANCORP OF WISCONSIN, INC.</ix:nonNumeric><br/>\n      </span></div>\n\n    <div style=\"text-align: center; font-family: 'Times New Roman', Times, serif; font-size: 10pt;\">(Exact Name of Registrant as Specified in its Charter)</div>\n\n    <div><br/>\n    </div>\n\n    <table cellspacing=\"0\" cellpadding=\"0\" style=\"font-family: 'Times New Roman', Times, serif; font-size: 10pt; width: 100%; text-align: left; color: #000000;\">\n\n\n  <tr>\n\n    <td style=\"width: 39.72%; vertical-align: bottom;\">\n            <div style=\"text-align: center; font-family: 'Times New Roman', Times, serif; font-size: 12pt;\"><span style=\"text-decoration: underline;\"><ix:nonNumeric name=\"dei:EntityIncorporationStateCountryCode\" id=\"Fact_9b45b32ee921422391d24ccaa163f0fa\" contextRef=\"c20241220to20241220\" format=\"ixt-sec:stateprovnameen\">Maryland</ix:nonNumeric></span><br/>\n            </div>\n          </td>\n\n    <td style=\"width: 3.81%; vertical-align: bottom;\">&#160;</td>\n\n    <td style=\"width: 19.87%; vertical-align: bottom;\">\n            <div style=\"text-align: center; font-family: 'Times New Roman', Times, serif; font-size: 12pt;\"><span style=\"text-decoration: underline;\"><ix:nonNumeric name=\"dei:EntityFileNumber\" id=\"Fact_432e8b7810a3422f939c69ceffd15205\" contextRef=\"c20241220to20241220\">001-40609</ix:nonNumeric></span><br/>\n            </div>\n          </td>\n\n    <td style=\"width: 3%; vertical-align: bottom;\">&#160;</td>\n\n    <td style=\"width: 33.6%; vertical-align: bottom;\" colspan=\"2\">\n            <div style=\"text-align: center; font-family: 'Times New Roman', Times, serif; font-size: 12pt;\"><span style=\"text-decoration: underline;\"><ix:nonNumeric name=\"dei:EntityTaxIdentificationNumber\" id=\"Fact_adcbe11d3fd442808b16b5766328cc7c\" contextRef=\"c20241220to20241220\">61-1993378</ix:nonNumeric></span><br/>\n            </div>\n          </td>\n\n  </tr>\n\n  <tr>\n\n    <td style=\"width: 39.72%; vertical-align: top;\">\n            <div style=\"text-align: center; font-family: 'Times New Roman', Times, serif; font-size: 10pt;\">(State or Other Jurisdiction of Incorporation)</div>\n          </td>\n\n    <td style=\"width: 3.81%; vertical-align: top;\">&#160;</td>\n\n    <td style=\"width: 19.87%; vertical-align: top;\">\n            <div style=\"text-align: center; margin-left: 18pt; font-family: 'Times New Roman', Times, serif; font-size: 10pt;\">(Commission File No.)</div>\n          </td>\n\n    <td style=\"width: 3%; vertical-align: top;\">&#160;</td>\n\n    <td style=\"width: 33.6%; vertical-align: top;\" colspan=\"2\">\n            <div style=\"text-align: center; margin-left: 18pt; font-family: 'Times New Roman', Times, serif; font-size: 10pt;\">(I.R.S. Employer Identification No.)</div>\n          </td>\n\n  </tr>\n\n  <tr>\n\n    <td style=\"width: 100%; vertical-align: top;\" colspan=\"6\">&#160;</td>\n\n  </tr>\n\n  <tr>\n\n    <td style=\"width: 63.4%; vertical-align: bottom;\" colspan=\"3\">\n            <div style=\"text-align: center; font-family: 'Times New Roman', Times, serif; font-size: 12pt;\"><span style=\"text-decoration: underline;\"><ix:nonNumeric name=\"dei:EntityAddressAddressLine1\" id=\"Fact_5106b8debf694ee085ec63a289fe7803\" contextRef=\"c20241220to20241220\">7001 West Edgerton Avenue</ix:nonNumeric>, <ix:nonNumeric name=\"dei:EntityAddressCityOrTown\" id=\"Fact_cf24b334aef441528a45f2376a38fc32\" contextRef=\"c20241220to20241220\">Greenfield</ix:nonNumeric>, <ix:nonNumeric name=\"dei:EntityAddressStateOrProvince\" id=\"Fact_1ef37dee398f4d63b5a8ad391d051c79\" contextRef=\"c20241220to20241220\" format=\"ixt-sec:stateprovnameen\">Wisconsin</ix:nonNumeric></span></div>\n          </td>\n\n    <td style=\"width: 4.07%; vertical-align: top;\" colspan=\"2\"><br/>\n          </td>\n\n    <td style=\"width: 32.53%; vertical-align: bottom;\">\n            <div style=\"text-align: center; font-family: 'Times New Roman', Times, serif; font-size: 12pt;\"><span style=\"text-decoration: underline;\"><ix:nonNumeric name=\"dei:EntityAddressPostalZipCode\" id=\"Fact_f26ab9674f7944af91831d096090e4ae\" contextRef=\"c20241220to20241220\">53220</ix:nonNumeric><br/>\n              </span></div>\n          </td>\n\n  </tr>\n\n  <tr>\n\n    <td style=\"width: 63.4%; vertical-align: bottom;\" colspan=\"3\">\n            <div style=\"text-align: center; font-family: 'Times New Roman', Times, serif; font-size: 10pt;\">(Address of Principal Executive Offices)</div>\n          </td>\n\n    <td style=\"width: 4.07%; vertical-align: top;\" colspan=\"2\">&#160;</td>\n\n```\n\n----------------------------------------\n\nTITLE: Defining SEC Edgar Submission Data Structure - XML\nDESCRIPTION: This snippet presents a complete XML document that defines the structure and content of an SEC Form D/A submission. It includes nodes for issuer metadata, related persons, offering data, exemptions, signatures, and other required fields. No special libraries are needed for static XML and it is intended for import into regulatory, compliance, or archival systems that expect the EdgarSubmission schema. Inputs are XML fields and outputs are processed filings; data types must match schema expectations, and filing clients must escape special characters appropriately.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0001398344-24-000491.nc.txt#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\\\"1.0\\\"?>\\n<edgarSubmission>\\n\\n    <schemaVersion>X0708</schemaVersion>\\n\\n    <submissionType>D/A</submissionType>\\n\\n    <testOrLive>LIVE</testOrLive>\\n\\n    <primaryIssuer>\\n        <cik>0001296490</cik>\\n        <entityName>INVESTURE OPPORTUNITY FUND, LP</entityName>\\n        <issuerAddress>\\n            <street1>240 W MAIN STREET</street1>\\n            <street2>SUITE 500</street2>\\n            <city>CHARLOTTESVILLE</city>\\n            <stateOrCountry>VA</stateOrCountry>\\n            <stateOrCountryDescription>VIRGINIA</stateOrCountryDescription>\\n            <zipCode>22902</zipCode>\\n        </issuerAddress>\\n        <issuerPhoneNumber>434-220-0280</issuerPhoneNumber>\\n        <jurisdictionOfInc>DELAWARE</jurisdictionOfInc>\\n        <issuerPreviousNameList>\\n            <value>None</value>\\n        </issuerPreviousNameList>\\n        <edgarPreviousNameList>\\n            <previousName>INVESTURE OPPORTUNITY FUND LP</previousName>\\n        </edgarPreviousNameList>\\n        <entityType>Limited Partnership</entityType>\\n        <yearOfInc>\\n            <overFiveYears>true</overFiveYears>\\n        </yearOfInc>\\n    </primaryIssuer>\\n\\n    <relatedPersonsList>\\n        <relatedPersonInfo>\\n            <relatedPersonName>\\n                <firstName>N/A</firstName>\\n                <middleName>N/A</middleName>\\n                <lastName>Investure, LLC</lastName>\\n            </relatedPersonName>\\n            <relatedPersonAddress>\\n                <street1>240 W Main Street</street1>\\n                <street2>Suite 500</street2>\\n                <city>CHARLOTTESVILLE</city>\\n                <stateOrCountry>VA</stateOrCountry>\\n                <stateOrCountryDescription>VIRGINIA</stateOrCountryDescription>\\n                <zipCode>22902</zipCode>\\n            </relatedPersonAddress>\\n            <relatedPersonRelationshipList>\\n                <relationship>Director</relationship>\\n            </relatedPersonRelationshipList>\\n            <relationshipClarification>General Partner of Issuer (&quot;General Partner&quot;)</relationshipClarification>\\n        </relatedPersonInfo>\\n        <relatedPersonInfo>\\n            <relatedPersonName>\\n                <firstName>Bruce</firstName>\\n                <middleName>A.</middleName>\\n                <lastName>Miller</lastName>\\n            </relatedPersonName>\\n            <relatedPersonAddress>\\n                <street1>240 W Main Street</street1>\\n                <street2>Suite 500</street2>\\n                <city>CHARLOTTESVILLE</city>\\n                <stateOrCountry>VA</stateOrCountry>\\n                <stateOrCountryDescription>VIRGINIA</stateOrCountryDescription>\\n                <zipCode>22902</zipCode>\\n            </relatedPersonAddress>\\n            <relatedPersonRelationshipList>\\n                <relationship>Executive Officer</relationship>\\n            </relatedPersonRelationshipList>\\n            <relationshipClarification>Managing Member of General Partner</relationshipClarification>\\n        </relatedPersonInfo>\\n    </relatedPersonsList>\\n\\n    <offeringData>\\n        <industryGroup>\\n            <industryGroupType>Pooled Investment Fund</industryGroupType>\\n            <investmentFundInfo>\\n                <investmentFundType>Hedge Fund</investmentFundType>\\n                <is40Act>false</is40Act>\\n            </investmentFundInfo>\\n        </industryGroup>\\n        <issuerSize>\\n            <aggregateNetAssetValueRange>Decline to Disclose</aggregateNetAssetValueRange>\\n        </issuerSize>\\n        <federalExemptionsExclusions>\\n            <item>06b</item>\\n            <item>3C</item>\\n            <item>3C.1</item>\\n        </federalExemptionsExclusions>\\n        <typeOfFiling>\\n            <newOrAmendment>\\n                <isAmendment>true</isAmendment>\\n                <previousAccessionNumber>0001398344-18-000523</previousAccessionNumber>\\n            </newOrAmendment>\\n            <dateOfFirstSale>\\n                <value>2004-04-01</value>\\n            </dateOfFirstSale>\\n        </typeOfFiling>\\n        <durationOfOffering>\\n            <moreThanOneYear>true</moreThanOneYear>\\n        </durationOfOffering>\\n        <typesOfSecuritiesOffered>\\n            <isEquityType>true</isEquityType>\\n            <isPooledInvestmentFundType>true</isPooledInvestmentFundType>\\n        </typesOfSecuritiesOffered>\\n        <businessCombinationTransaction>\\n            <isBusinessCombinationTransaction>false</isBusinessCombinationTransaction>\\n        </businessCombinationTransaction>\\n        <minimumInvestmentAccepted>50000</minimumInvestmentAccepted>\\n        <salesCompensationList></salesCompensationList>\\n        <offeringSalesAmounts>\\n            <totalOfferingAmount>Indefinite</totalOfferingAmount>\\n            <totalAmountSold>561224695</totalAmountSold>\\n            <totalRemaining>Indefinite</totalRemaining>\\n        </offeringSalesAmounts>\\n        <investors>\\n            <hasNonAccreditedInvestors>false</hasNonAccreditedInvestors>\\n            <totalNumberAlreadyInvested>45</totalNumberAlreadyInvested>\\n        </investors>\\n        <salesCommissionsFindersFees>\\n            <salesCommissions>\\n                <dollarAmount>0</dollarAmount>\\n            </salesCommissions>\\n            <findersFees>\\n                <dollarAmount>0</dollarAmount>\\n            </findersFees>\\n            <clarificationOfResponse></clarificationOfResponse>\\n        </salesCommissionsFindersFees>\\n        <useOfProceeds>\\n            <grossProceedsUsed>\\n                <dollarAmount>0</dollarAmount>\\n            </grossProceedsUsed>\\n            <clarificationOfResponse>The General Partner is entitled to customary management fee and incentive income, as further detailed in offering documents.</clarificationOfResponse>\\n        </useOfProceeds>\\n        <signatureBlock>\\n            <authorizedRepresentative>false</authorizedRepresentative>\\n            <signature>\\n                <issuerName>INVESTURE OPPORTUNITY FUND, LP</issuerName>\\n                <signatureName>/s/ Bruce A. Miller</signatureName>\\n                <nameOfSigner>Bruce A. Miller</nameOfSigner>\\n                <signatureTitle>Managing Member of General Partner</signatureTitle>\\n                <signatureDate>2024-01-11</signatureDate>\\n            </signature>\\n        </signatureBlock>\\n    </offeringData>\\n</edgarSubmission>\n```\n\n----------------------------------------\n\nTITLE: Specifying Financial Instrument Type as Commercial Paper in XBRL (US-GAAP)\nDESCRIPTION: This XBRL snippet employs the `xbrldi:explicitMember` tag to identify the financial instrument being reported as Commercial Paper within the US-GAAP taxonomy. The `dimension` attribute links to the `us-gaap:FinancialInstrumentAxis`, and the element content `us-gaap:CommercialPaperMember` defines the instrument type. This tag provides context about the specific asset or liability being valued.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/xbrl/docs/FAIR_VALUE_DIMENSIONS.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<xbrldi:explicitMember dimension=\"us-gaap:FinancialInstrumentAxis\">us-gaap:CommercialPaperMember</xbrldi:explicitMember>\n```\n\n----------------------------------------\n\nTITLE: Original XBRL Package File Structure\nDESCRIPTION: Displays the directory and file structure of the original XBRL package within the edgartools library. It lists the Python files and their respective line counts, indicating a relatively monolithic design centered around `xbrldata.py`.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/xbrl2-rewrite-analysis.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nedgar/xbrl/\n├── __init__.py (28 lines)\n├── calculations.py (98 lines)\n├── concepts.py (148 lines)\n├── definitions.py (80 lines)\n├── dimensions.py (121 lines)\n├── instance.py (365 lines)\n├── labels.py (87 lines)\n├── presentation.py (474 lines)\n├── ratios.py (0 lines)\n├── statements.py (178 lines)\n└── xbrldata.py (1887 lines)\n```\n\n----------------------------------------\n\nTITLE: Defining SEC Filing Document with Inline XBRL (IXBRL) - XML/HTML\nDESCRIPTION: This snippet outlines the structure of an SEC 8-K filing formatted as an HTML document with embedded inline XBRL. It utilizes various namespace declarations to associate XBRL, financial, and entity data within the HTML structure. Required dependencies include an environment capable of parsing or rendering HTML and supporting namespaces, such as browsers or financial compliance tools. Inputs are XBRL-tagged financial and entity facts, and outputs are visually formatted SEC filing reports suitable for both human review and automated data extraction, with constraints governed by SEC electronic filing requirements.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0000943374-24-000509.txt#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version='1.0' encoding='ASCII'?>\n<html xmlns:xbrli=\"http://www.xbrl.org/2003/instance\" xmlns:link=\"http://www.xbrl.org/2003/linkbase\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xbrldi=\"http://xbrl.org/2006/xbrldi\" xmlns:iso4217=\"http://www.xbrl.org/2003/iso4217\" xmlns:srt=\"http://fasb.org/srt/2024\" xmlns:ix=\"http://www.xbrl.org/2013/inlineXBRL\" xmlns:ixt=\"http://www.xbrl.org/inlineXBRL/transformation/2020-02-12\" xmlns:ixt-sec=\"http://www.sec.gov/inlineXBRL/transformation/2015-08-31\" xmlns:us-gaap=\"http://fasb.org/us-gaap/2024\" xmlns:dei=\"http://xbrl.sec.gov/dei/2024\" xmlns:country=\"http://xbrl.sec.gov/country/2024\" xmlns:currency=\"http://xbrl.sec.gov/currency/2024\" xmlns:dtr-types=\"http://www.xbrl.org/dtr/type/2022-03-31\" xmlns:utr=\"http://www.xbrl.org/2009/utr\" xmlns:naics=\"http://xbrl.sec.gov/naics/2024\" xmlns:sic=\"http://xbrl.sec.gov/sic/2024\" xmlns:stpr=\"http://xbrl.sec.gov/stpr/2024\" xmlns:exch=\"http://xbrl.sec.gov/exch/2024\" xmlns:cef=\"http://xbrl.sec.gov/cef/2024\" xmlns:cyd=\"http://xbrl.sec.gov/cyd/2024\" xmlns:bcow=\"http://pyramaxbank.com/20241220\" xmlns=\"http://www.w3.org/1999/xhtml\">\n  <head>\n    <title></title>\n    <!-- Licensed to: Luse Gorman\n         Document created using Broadridge PROfile 24.12.1.5274\n         Copyright 1995 - 2024 Broadridge -->\n    <meta http-equiv=\"Content-Type\" content=\"text/html\"/>\n</head>\n\n<body style=\"font-family: 'Times New Roman', Times, serif; font-size: 10pt; text-align: left; color: #000000; background-color: #ffffff;\">\n<div id=\"DSPFiXBRLHidden\" style=\"display: none;\"><ix:header><ix:hidden><ix:nonNumeric name=\"dei:AmendmentFlag\" id=\"Fact_0f96221d087c404ea672b6832bc48e9c\" contextRef=\"c20241220to20241220\" format=\"ixt:fixed-false\">false</ix:nonNumeric><ix:nonNumeric name=\"dei:EntityCentralIndexKey\" id=\"Fact_4602dc96ed6b4a6581a5ff26714359e9\" contextRef=\"c20241220to20241220\">0001847360</ix:nonNumeric></ix:hidden><ix:references><link:schemaRef xlink:href=\"bcow-20241220.xsd\" xlink:type=\"simple\"/></ix:references><ix:resources><xbrli:context id=\"c20241220to20241220\"><xbrli:entity><xbrli:identifier scheme=\"http://www.sec.gov/CIK\">0001847360</xbrli:identifier></xbrli:entity><xbrli:period><xbrli:startDate>2024-12-20</xbrli:startDate><xbrli:endDate>2024-12-20</xbrli:endDate></xbrli:period></xbrli:context></ix:resources></ix:header></div>\n\n```\n\n----------------------------------------\n\nTITLE: Applying XBRL Calculation Weights to Facts in Python\nDESCRIPTION: This Python method, `_apply_calculation_weights`, processes XBRL facts stored in `self._facts` based on calculation linkbase information in `self.calculation_trees`. It iterates through calculation nodes, identifies elements with a negative `weight`, and negates the `numeric_value` and `value` (string representation) of the corresponding facts. This ensures accurate financial statement representation, especially for cash flow items, by correctly reflecting the sign conventions defined in the XBRL calculation linkbase. It requires access to `self.calculation_trees` and `self._facts` within the class context.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/edgar/xbrl2/XBRL2-Rewrite.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# In _apply_calculation_weights method (called after fact extraction)\ndef _apply_calculation_weights(self) -> None:\n   \"\"\"\n   Apply calculation weights to facts based on calculation linkbase information.\n   \n   This method handles the application of negative weights from calculation arcs.\n   Per XBRL specification, a negative weight should flip the sign of a fact value\n   when used in calculations. This is particularly common with elements like\n   \"IncreaseDecreaseInInventories\" which should be negated when contributing\n   to cash flow calculations.\n   \"\"\"\n   # Find elements with negative weights across all calculation trees\n   for role_uri, calc_tree in self.calculation_trees.items():\n      for element_id, node in calc_tree.all_nodes.items():\n         if node.weight < 0:\n            # Find and adjust all facts for this element\n            for key, fact in self._facts.items():\n               if fact.element_id == element_id:\n                  # Negate numeric value if present\n                  if fact.numeric_value is not None:\n                     fact.numeric_value = -fact.numeric_value\n\n                  # Also update string value for consistent display\n                  if fact.value and not fact.value.startswith('-'):\n                     fact.value = f\"-{fact.value}\"\n```\n\n----------------------------------------\n\nTITLE: Defining XBRL Taxonomy Elements and References in JSON\nDESCRIPTION: This JSON structure defines multiple XBRL elements within the 'dei' namespace (http://xbrl.sec.gov/dei/2024), likely for use in SEC Form 8-K filings. Each element definition includes its 'xbrltype', 'nsuri', 'localname', 'presentation' links, language-specific 'label' and 'documentation' (en-us), and 'auth_ref' identifiers linking to standard references. The 'std_ref' object maps these reference IDs (e.g., 'r0', 'r3') to specific SEC rules and sections from the Exchange Act and Securities Act.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0000943374-24-000509.txt#_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"documentation\": \"Boolean flag that is true when the Form 8-K filing is intended to satisfy the filing obligation of the registrant as pre-commencement communications pursuant to Rule 13e-4(c) under the Exchange Act.\"\n       }\n      }\n     },\n     \"auth_ref\": [\n      \"r3\"\n     ]\n    },\n    \"dei_PreCommencementTenderOffer\": {\n     \"xbrltype\": \"booleanItemType\",\n     \"nsuri\": \"http://xbrl.sec.gov/dei/2024\",\n     \"localname\": \"PreCommencementTenderOffer\",\n     \"presentation\": [\n      \"http://pyramaxbank.com/role/DocumentAndEntityInformation\"\n     ],\n     \"lang\": {\n      \"en-us\": {\n       \"role\": {\n        \"label\": \"Pre-commencement Tender Offer\",\n        \"documentation\": \"Boolean flag that is true when the Form 8-K filing is intended to satisfy the filing obligation of the registrant as pre-commencement communications pursuant to Rule 14d-2(b) under the Exchange Act.\"\n       }\n      }\n     },\n     \"auth_ref\": [\n      \"r5\"\n     ]\n    },\n    \"dei_Security12bTitle\": {\n     \"xbrltype\": \"securityTitleItemType\",\n     \"nsuri\": \"http://xbrl.sec.gov/dei/2024\",\n     \"localname\": \"Security12bTitle\",\n     \"presentation\": [\n      \"http://pyramaxbank.com/role/DocumentAndEntityInformation\"\n     ],\n     \"lang\": {\n      \"en-us\": {\n       \"role\": {\n        \"label\": \"Title of 12(b) Security\",\n        \"documentation\": \"Title of a 12(b) registered security.\"\n       }\n      }\n     },\n     \"auth_ref\": [\n      \"r0\"\n     ]\n    },\n    \"dei_SecurityExchangeName\": {\n     \"xbrltype\": \"edgarExchangeCodeItemType\",\n     \"nsuri\": \"http://xbrl.sec.gov/dei/2024\",\n     \"localname\": \"SecurityExchangeName\",\n     \"presentation\": [\n      \"http://pyramaxbank.com/role/DocumentAndEntityInformation\"\n     ],\n     \"lang\": {\n      \"en-us\": {\n       \"role\": {\n        \"label\": \"Security Exchange Name\",\n        \"documentation\": \"Name of the Exchange on which a security is registered.\"\n       }\n      }\n     },\n     \"auth_ref\": [\n      \"r2\"\n     ]\n    },\n    \"dei_SolicitingMaterial\": {\n     \"xbrltype\": \"booleanItemType\",\n     \"nsuri\": \"http://xbrl.sec.gov/dei/2024\",\n     \"localname\": \"SolicitingMaterial\",\n     \"presentation\": [\n      \"http://pyramaxbank.com/role/DocumentAndEntityInformation\"\n     ],\n     \"lang\": {\n      \"en-us\": {\n       \"role\": {\n        \"label\": \"Soliciting Material\",\n        \"documentation\": \"Boolean flag that is true when the Form 8-K filing is intended to satisfy the filing obligation of the registrant as soliciting material pursuant to Rule 14a-12 under the Exchange Act.\"\n       }\n      }\n     },\n     \"auth_ref\": [\n      \"r4\"\n     ]\n    },\n    \"dei_TradingSymbol\": {\n     \"xbrltype\": \"tradingSymbolItemType\",\n     \"nsuri\": \"http://xbrl.sec.gov/dei/2024\",\n     \"localname\": \"TradingSymbol\",\n     \"presentation\": [\n      \"http://pyramaxbank.com/role/DocumentAndEntityInformation\"\n     ],\n     \"lang\": {\n      \"en-us\": {\n       \"role\": {\n        \"label\": \"Trading Symbol\",\n        \"documentation\": \"Trading symbol of an instrument as listed on an exchange.\"\n       }\n      }\n     },\n     \"auth_ref\": []\n    },\n    \"dei_WrittenCommunications\": {\n     \"xbrltype\": \"booleanItemType\",\n     \"nsuri\": \"http://xbrl.sec.gov/dei/2024\",\n     \"localname\": \"WrittenCommunications\",\n     \"presentation\": [\n      \"http://pyramaxbank.com/role/DocumentAndEntityInformation\"\n     ],\n     \"lang\": {\n      \"en-us\": {\n       \"role\": {\n        \"label\": \"Written Communications\",\n        \"documentation\": \"Boolean flag that is true when the Form 8-K filing is intended to satisfy the filing obligation of the registrant as written communications pursuant to Rule 425 under the Securities Act.\"\n       }\n      }\n     },\n     \"auth_ref\": [\n      \"r6\"\n     ]\n    }\n   }\n  }\n },\n \"std_ref\": {\n  \"r0\": {\n   \"role\": \"http://www.xbrl.org/2003/role/presentationRef\",\n   \"Publisher\": \"SEC\",\n   \"Name\": \"Exchange Act\",\n   \"Number\": \"240\",\n   \"Section\": \"12\",\n   \"Subsection\": \"b\"\n  },\n  \"r1\": {\n   \"role\": \"http://www.xbrl.org/2003/role/presentationRef\",\n   \"Publisher\": \"SEC\",\n   \"Name\": \"Exchange Act\",\n   \"Number\": \"240\",\n   \"Section\": \"12\",\n   \"Subsection\": \"b-2\"\n  },\n  \"r2\": {\n   \"role\": \"http://www.xbrl.org/2003/role/presentationRef\",\n   \"Publisher\": \"SEC\",\n   \"Name\": \"Exchange Act\",\n   \"Number\": \"240\",\n   \"Section\": \"12\",\n   \"Subsection\": \"d1-1\"\n  },\n  \"r3\": {\n   \"role\": \"http://www.xbrl.org/2003/role/presentationRef\",\n   \"Publisher\": \"SEC\",\n   \"Name\": \"Exchange Act\",\n   \"Number\": \"240\",\n   \"Section\": \"13e\",\n   \"Subsection\": \"4c\"\n  },\n  \"r4\": {\n   \"role\": \"http://www.xbrl.org/2003/role/presentationRef\",\n   \"Publisher\": \"SEC\",\n   \"Name\": \"Exchange Act\",\n   \"Number\": \"240\",\n   \"Section\": \"14a\",\n   \"Subsection\": \"12\"\n  },\n  \"r5\": {\n   \"role\": \"http://www.xbrl.org/2003/role/presentationRef\",\n   \"Publisher\": \"SEC\",\n   \"Name\": \"Exchange Act\",\n   \"Number\": \"240\",\n   \"Section\": \"14d\",\n   \"Subsection\": \"2b\"\n  },\n  \"r6\": {\n   \"role\": \"http://www.xbrl.org/2003/role/presentationRef\",\n   \"Publisher\": \"SEC\",\n   \"Name\": \"Securities Act\",\n   \"Number\": \"230\",\n   \"Section\": \"425\"\n  },\n  \"r7\": {\n   \"role\": \"http://www.xbrl.org/2003/role/presentationRef\",\n   \"Publisher\": \"SEC\",\n   \"Name\": \"Securities Act\",\n   \"Number\": \"7A\",\n   \"Section\": \"B\",\n   \"Subsection\": \"2\"\n  }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: AI-Developed XBRL2 Package File Structure\nDESCRIPTION: Shows the directory and file structure of the newer XBRL2 package developed by Claude Code. It reveals a more modular and extensive architecture compared to the original, with subdirectories for analysis and data, and numerous specialized Python files, reflecting a richer feature set and better organization.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/xbrl2-rewrite-analysis.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nedgar/xbrl2/\n├── __init__.py (66 lines)\n├── analysis/\n│   ├── __init__.py\n│   ├── fraud.py (124 lines)\n│   ├── metrics.py (409 lines)\n│   └── ratios.py (998 lines)\n├── core.py (331 lines)\n├── data/__init__.py (5 lines)\n├── examples.py (311 lines)\n├── facts.py (1187 lines)\n├── models.py (244 lines)\n├── parser.py (1603 lines)\n├── periods.py (491 lines)\n├── rendering.py (1336 lines)\n├── standardization.py (500 lines)\n├── statements.py (772 lines)\n├── stitching.py (1293 lines)\n├── transformers.py (300 lines)\n└── xbrl.py (1319 lines)\n```\n\n----------------------------------------\n\nTITLE: Embedding Written Communications Checkbox using ix:nonNumeric (XBRL in HTML)\nDESCRIPTION: This snippet demonstrates embedding a checkbox state (unchecked, represented by '&#9744;') within a table cell (`<td>`) using the `<ix:nonNumeric>` iXBRL tag. It signifies the status of 'Written communications pursuant to Rule 425'. The tag uses 'dei:WrittenCommunications', specifies the context 'c20241220to20241220', includes a unique ID, and uses the 'ixt-sec:boolballotbox' format to indicate a checkbox representation.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0000943374-24-000509.txt#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<td style=\"width: 6.19%; vertical-align: top;\">\n            <div style=\"text-align: center; font-family: 'Times New Roman', Times, serif; font-size: 12pt;\"><ix:nonNumeric name=\"dei:WrittenCommunications\" id=\"Fact_982a6bab82ce4c1b8b927d9ab7db0d57\" contextRef=\"c20241220to20241220\" format=\"ixt-sec:boolballotbox\">&#9744;</ix:nonNumeric><br/>\n            </div>\n          </td>\n```\n\n----------------------------------------\n\nTITLE: Establishing Label Links between XBRL Concepts and Human Readable Labels (XML)\nDESCRIPTION: This code defines a comprehensive <link:labelLink> element containing a sequence of XBRL locators, label resources, and labelArc links. It maps taxonomy concepts (via locators with xlink:href referencing SEC DEI schema elements) to corresponding human-readable labels (via <link:label>). Each arc element uses concept-label arcroles to establish the linkage from concept locators to label resources. The attributes ensure proper role identification, localization, and relationships. The purpose is to specify XBRL label relationships for later use in presentations or UIs. The snippet presumes an XBRL processing context and availability of the referenced SEC schema.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0000943374-24-000509.txt#_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<link:labelLink xlink:type=\\\"extended\\\" xlink:role=\\\"http://www.xbrl.org/2003/role/link\\\">\\n    <link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_CoverAbstract\\\" xlink:label=\\\"CoverAbstract\\\" xlink:title=\\\"CoverAbstract\\\" />\\n    <link:label xlink:type=\\\"resource\\\" xlink:label=\\\"dei_CoverAbstract\\\" xlink:role=\\\"http://www.xbrl.org/2003/role/label\\\" xlink:title=\\\"dei_CoverAbstract\\\" xml:lang=\\\"en-US\\\" id=\\\"dei_CoverAbstract\\\">Cover [Abstract]</link:label>\\n    <link:labelArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/concept-label\\\" xlink:from=\\\"CoverAbstract\\\" xlink:to=\\\"dei_CoverAbstract\\\" xlink:title=\\\"label: CoverAbstract to dei_CoverAbstract\\\" />\\n    <link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_DocumentType\\\" xlink:label=\\\"DocumentType\\\" xlink:title=\\\"DocumentType\\\" />\\n    <link:label xlink:type=\\\"resource\\\" xlink:label=\\\"dei_DocumentType\\\" xlink:role=\\\"http://www.xbrl.org/2003/role/label\\\" xlink:title=\\\"dei_DocumentType\\\" xml:lang=\\\"en-US\\\" id=\\\"dei_DocumentType\\\">Document Type</link:label>\\n    <link:labelArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/concept-label\\\" xlink:from=\\\"DocumentType\\\" xlink:to=\\\"dei_DocumentType\\\" xlink:title=\\\"label: DocumentType to dei_DocumentType\\\" />\\n    <link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_WrittenCommunications\\\" xlink:label=\\\"WrittenCommunications\\\" xlink:title=\\\"WrittenCommunications\\\" />\\n    <link:label xlink:type=\\\"resource\\\" xlink:label=\\\"dei_WrittenCommunications\\\" xlink:role=\\\"http://www.xbrl.org/2003/role/label\\\" xlink:title=\\\"dei_WrittenCommunications\\\" xml:lang=\\\"en-US\\\" id=\\\"dei_WrittenCommunications\\\">Written Communications</link:label>\\n    <link:labelArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/concept-label\\\" xlink:from=\\\"WrittenCommunications\\\" xlink:to=\\\"dei_WrittenCommunications\\\" xlink:title=\\\"label: WrittenCommunications to dei_WrittenCommunications\\\" />\\n    <link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_SolicitingMaterial\\\" xlink:label=\\\"SolicitingMaterial\\\" xlink:title=\\\"SolicitingMaterial\\\" />\\n    <link:label xlink:type=\\\"resource\\\" xlink:label=\\\"dei_SolicitingMaterial\\\" xlink:role=\\\"http://www.xbrl.org/2003/role/label\\\" xlink:title=\\\"dei_SolicitingMaterial\\\" xml:lang=\\\"en-US\\\" id=\\\"dei_SolicitingMaterial\\\">Soliciting Material</link:label>\\n    <link:labelArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/concept-label\\\" xlink:from=\\\"SolicitingMaterial\\\" xlink:to=\\\"dei_SolicitingMaterial\\\" xlink:title=\\\"label: SolicitingMaterial to dei_SolicitingMaterial\\\" />\\n    <link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_PreCommencementTenderOffer\\\" xlink:label=\\\"PreCommencementTenderOffer\\\" xlink:title=\\\"PreCommencementTenderOffer\\\" />\\n    <link:label xlink:type=\\\"resource\\\" xlink:label=\\\"dei_PreCommencementTenderOffer\\\" xlink:role=\\\"http://www.xbrl.org/2003/role/label\\\" xlink:title=\\\"dei_PreCommencementTenderOffer\\\" xml:lang=\\\"en-US\\\" id=\\\"dei_PreCommencementTenderOffer\\\">Pre-commencement Tender Offer</link:label>\\n    <link:labelArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/concept-label\\\" xlink:from=\\\"PreCommencementTenderOffer\\\" xlink:to=\\\"dei_PreCommencementTenderOffer\\\" xlink:title=\\\"label: PreCommencementTenderOffer to dei_PreCommencementTenderOffer\\\" />\\n    <link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_PreCommencementIssuerTenderOffer\\\" xlink:label=\\\"PreCommencementIssuerTenderOffer\\\" xlink:title=\\\"PreCommencementIssuerTenderOffer\\\" />\\n    <link:label xlink:type=\\\"resource\\\" xlink:label=\\\"dei_PreCommencementIssuerTenderOffer\\\" xlink:role=\\\"http://www.xbrl.org/2003/role/label\\\" xlink:title=\\\"dei_PreCommencementIssuerTenderOffer\\\" xml:lang=\\\"en-US\\\" id=\\\"dei_PreCommencementIssuerTenderOffer\\\">Pre-commencement Issuer Tender Offer</link:label>\\n    <link:labelArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/concept-label\\\" xlink:from=\\\"PreCommencementIssuerTenderOffer\\\" xlink:to=\\\"dei_PreCommencementIssuerTenderOffer\\\" xlink:title=\\\"label: PreCommencementIssuerTenderOffer to dei_PreCommencementIssuerTenderOffer\\\" />\\n    <link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_AmendmentFlag\\\" xlink:label=\\\"AmendmentFlag\\\" xlink:title=\\\"AmendmentFlag\\\" />\\n    <link:label xlink:type=\\\"resource\\\" xlink:label=\\\"dei_AmendmentFlag\\\" xlink:role=\\\"http://www.xbrl.org/2003/role/label\\\" xlink:title=\\\"dei_AmendmentFlag\\\" xml:lang=\\\"en-US\\\" id=\\\"dei_AmendmentFlag\\\">Amendment Flag</link:label>\\n    <link:labelArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/concept-label\\\" xlink:from=\\\"AmendmentFlag\\\" xlink:to=\\\"dei_AmendmentFlag\\\" xlink:title=\\\"label: AmendmentFlag to dei_AmendmentFlag\\\" />\\n    <link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_DocumentFiscalYearFocus\\\" xlink:label=\\\"DocumentFiscalYearFocus\\\" xlink:title=\\\"DocumentFiscalYearFocus\\\" />\\n    <link:label xlink:type=\\\"resource\\\" xlink:label=\\\"dei_DocumentFiscalYearFocus\\\" xlink:role=\\\"http://www.xbrl.org/2003/role/label\\\" xlink:title=\\\"dei_DocumentFiscalYearFocus\\\" xml:lang=\\\"en-US\\\" id=\\\"dei_DocumentFiscalYearFocus\\\">Document Fiscal Year Focus</link:label>\\n    <link:labelArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/concept-label\\\" xlink:from=\\\"DocumentFiscalYearFocus\\\" xlink:to=\\\"dei_DocumentFiscalYearFocus\\\" xlink:title=\\\"label: DocumentFiscalYearFocus to dei_DocumentFiscalYearFocus\\\" />\\n    <link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_DocumentFiscalPeriodFocus\\\" xlink:label=\\\"DocumentFiscalPeriodFocus\\\" xlink:title=\\\"DocumentFiscalPeriodFocus\\\" />\\n    <link:label xlink:type=\\\"resource\\\" xlink:label=\\\"dei_DocumentFiscalPeriodFocus\\\" xlink:role=\\\"http://www.xbrl.org/2003/role/label\\\" xlink:title=\\\"dei_DocumentFiscalPeriodFocus\\\" xml:lang=\\\"en-US\\\" id=\\\"dei_DocumentFiscalPeriodFocus\\\">Document Fiscal Period Focus</link:label>\\n    <link:labelArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/concept-label\\\" xlink:from=\\\"DocumentFiscalPeriodFocus\\\" xlink:to=\\\"dei_DocumentFiscalPeriodFocus\\\" xlink:title=\\\"label: DocumentFiscalPeriodFocus to dei_DocumentFiscalPeriodFocus\\\" />\\n    <link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_DocumentPeriodEndDate\\\" xlink:label=\\\"DocumentPeriodEndDate\\\" xlink:title=\\\"DocumentPeriodEndDate\\\" />\\n    <link:label xlink:type=\\\"resource\\\" xlink:label=\\\"dei_DocumentPeriodEndDate\\\" xlink:role=\\\"http://www.xbrl.org/2003/role/label\\\" xlink:title=\\\"dei_DocumentPeriodEndDate\\\" xml:lang=\\\"en-US\\\" id=\\\"dei_DocumentPeriodEndDate\\\">Document Period End Date</link:label>\\n    <link:labelArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/concept-label\\\" xlink:from=\\\"DocumentPeriodEndDate\\\" xlink:to=\\\"dei_DocumentPeriodEndDate\\\" xlink:title=\\\"label: DocumentPeriodEndDate to dei_DocumentPeriodEndDate\\\" />\\n    <link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_EntityRegistrantName\\\" xlink:label=\\\"EntityRegistrantName\\\" xlink:title=\\\"EntityRegistrantName\\\" />\\n    <link:label xlink:type=\\\"resource\\\" xlink:label=\\\"dei_EntityRegistrantName\\\" xlink:role=\\\"http://www.xbrl.org/2003/role/label\\\" xlink:title=\\\"dei_EntityRegistrantName\\\" xml:lang=\\\"en-US\\\" id=\\\"dei_EntityRegistrantName\\\">Entity Registrant Name</link:label>\\n    <link:labelArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/concept-label\\\" xlink:from=\\\"EntityRegistrantName\\\" xlink:to=\\\"dei_EntityRegistrantName\\\" xlink:title=\\\"label: EntityRegistrantName to dei_EntityRegistrantName\\\" />\\n    <link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_EntityCentralIndexKey\\\" xlink:label=\\\"EntityCentralIndexKey\\\" xlink:title=\\\"EntityCentralIndexKey\\\" />\\n    <link:label xlink:type=\\\"resource\\\" xlink:label=\\\"dei_EntityCentralIndexKey\\\" xlink:role=\\\"http://www.xbrl.org/2003/role/label\\\" xlink:title=\\\"dei_EntityCentralIndexKey\\\" xml:lang=\\\"en-US\\\" id=\\\"dei_EntityCentralIndexKey\\\">Entity Central Index Key</link:label>\\n    <link:labelArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/concept-label\\\" xlink:from=\\\"EntityCentralIndexKey\\\" xlink:to=\\\"dei_EntityCentralIndexKey\\\" xlink:title=\\\"label: EntityCentralIndexKey to dei_EntityCentralIndexKey\\\" />\\n    <link:loc xlink:type=\\\"locator\\\" xlink:href=\\\"https://xbrl.sec.gov/dei/2024/dei-2024.xsd#dei_EntityFileNumber\\\" xlink:label=\\\"EntityFileNumber\\\" xlink:title=\\\"EntityFileNumber\\\" />\\n    <link:label xlink:type=\\\"resource\\\" xlink:label=\\\"dei_EntityFileNumber\\\" xlink:role=\\\"http://www.xbrl.org/2003/role/label\\\" xlink:title=\\\"dei_EntityFileNumber\\\" xml:lang=\\\"en-US\\\" id=\\\"dei_EntityFileNumber\\\">Entity File Number</link:label>\\n    <link:labelArc xlink:type=\\\"arc\\\" xlink:arcrole=\\\"http://www.xbrl.org/2003/arcrole/concept-label\\\" xlink:from=\\\"EntityFileNumber\\\" xlink:to=\\\"dei_EntityFileNumber\\\" xlink:title=\\\"label: EntityFileNumber to dei_EntityFileNumber\\\" />\\n</link:labelLink>\n```\n\n----------------------------------------\n\nTITLE: Generating Comparison Charts with Python Script\nDESCRIPTION: Demonstrates how to run the generate_xbrl2_charts.py script from the project root to produce all required visualization PNGs. This command-line example expects that Python is installed, dependencies have been installed as per earlier instructions, and that the script is present in the working directory. Input: none (the script auto-processes files and creates images in docs/images/); Output: chart image files.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/chart_generation_README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython generate_xbrl2_charts.py\n```\n\n----------------------------------------\n\nTITLE: Defining XBRL Calculation Network Structure in JSON\nDESCRIPTION: This JSON-like structure represents the Calculation Network derived from the calculation linkbase, organized by Extended Link Role (ELR) URI. Each role contains a title and a list of calculation relationships. Each relationship specifies a parent element and its contributing child elements, including the weight (+1 or -1 for summation/subtraction) and order for each child, used for validation.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/edgar/xbrl2/docs/xbrl-parser-design.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n```\n{\n  \"roleUri\": {\n    \"title\": string,\n    \"calculations\": [\n      {\n        \"parent\": \"elementId\",\n        \"children\": [\n          {\n            \"elementId\": string,\n            \"weight\": 1|-1,\n            \"order\": number\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Embedding Security Title using ix:nonNumeric (XBRL in HTML)\nDESCRIPTION: This snippet demonstrates embedding the title of a class of security ('Common Stock, par value $0.01 per share') within a table cell (`<td>`) using `<ix:nonNumeric>`. It uses the 'dei:Security12bTitle' element, context 'c20241220to20241220', and a unique fact ID.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0000943374-24-000509.txt#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<td style=\"width: 35.85%; vertical-align: top;\">\n            <div style=\"text-align: center; font-family: 'Times New Roman', Times, serif; font-size: 10pt;\"><ix:nonNumeric name=\"dei:Security12bTitle\" id=\"Fact_884d765b8df0421491b5fc1b59fcd867\" contextRef=\"c20241220to20241220\">Common Stock, par value $0.01 per share</ix:nonNumeric><br/>\n            </div>\n          </td>\n```\n\n----------------------------------------\n\nTITLE: EDGAR Master Index Data Format Example\nDESCRIPTION: This snippet illustrates the fixed-width format of the EDGAR master index data. It shows the column headers (Form Type, Company Name, CIK, Date Filed, File Name) and example data rows representing individual SEC filings. Each row provides metadata and a direct link to the filing's text file.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/index_files/badform.idx.txt#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nForm Type   Company Name                                                  CIK         Date Filed  File Name\n---------------------------------------------------------------------------------------------------------------------------------------------\n1-A         A-Game Beverages, Inc.                                        1838675     2021-02-05  edgar/data/1838675/0001213900-21-007106.txt\n1-A         AFR Inc.                                                      1831099     2021-03-03  edgar/data/1831099/0001831099-21-000001.txt\n1-A         AGILE GROUP, INC. / NV                                        1843120     2021-01-29  edgar/data/1843120/0001096906-21-000194.txt\n1-A         AHP Title Holdings LLC                                        1839212     2021-01-20  edgar/data/1839212/0001683168-21-000201.txt\n1-A         ALFADAN INC.                                                  1809660     2021-03-26  edgar/data/1809660/0001477932-21-001700.txt\n1-A POS     ALFADAN INC.                                                  1809660     2021-03-26  edgar/data/1809660/0001477932-21-001700.txt\nX-17A-5     UNITED PLANNERS' FINANCIAL SERVICES OF AMERICA A LIMITED PARTNER  820694      2021-02-24  edgar/data/820694/9999999997-21-003146.txt\nX-17A-5     UNIVEST SECURITIES, LLC                                       920097      2021-03-05  edgar/data/920097/9999999997-23-001153.txt\nX-17A-5     UNLU SECURITIES INC.                                          1643230     2021-02-24  edgar/data/1643230/0001643230-21-000003.txt\nX-17A-5     UOB GLOBAL EQUITY SALES LLC                                   1225152     2021-02-25  edgar/data/1225152/0001225152-21-000002.txt\n```\n\n----------------------------------------\n\nTITLE: Defining XBRL Filing Summary Structure in XML\nDESCRIPTION: Specifies the structure for a 'FilingSummary.xml' file used in XBRL submissions. It details the filing version, report format, counts of various XBRL elements (contexts, elements, entities, etc.), report definitions (including HTML file names, roles, and names), input files (like schemas and linkbases), and base taxonomies used.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0000943374-24-000509.txt#_snippet_32\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version='1.0' encoding='utf-8'?>\n<FilingSummary>\n  <Version>3.24.4</Version>\n  <ProcessingTime/>\n  <ReportFormat>html</ReportFormat>\n  <ContextCount>1</ContextCount>\n  <ElementCount>23</ElementCount>\n  <EntityCount>1</EntityCount>\n  <FootnotesReported>false</FootnotesReported>\n  <SegmentCount>0</SegmentCount>\n  <ScenarioCount>0</ScenarioCount>\n  <TuplesReported>false</TuplesReported>\n  <UnitCount>0</UnitCount>\n  <MyReports>\n    <Report instance=\"form8k_122024.htm\">\n      <IsDefault>false</IsDefault>\n      <HasEmbeddedReports>false</HasEmbeddedReports>\n      <HtmlFileName>R1.htm</HtmlFileName>\n      <LongName>000100 - Document - Document and Entity Information</LongName>\n      <ReportType>Sheet</ReportType>\n      <Role>http://pyramaxbank.com/role/DocumentAndEntityInformation</Role>\n      <ShortName>Document and Entity Information</ShortName>\n      <MenuCategory>Cover</MenuCategory>\n      <Position>1</Position>\n    </Report>\n    <Report>\n      <IsDefault>false</IsDefault>\n      <HasEmbeddedReports>false</HasEmbeddedReports>\n      <LongName>All Reports</LongName>\n      <ReportType>Book</ReportType>\n      <ShortName>All Reports</ShortName>\n    </Report>\n  </MyReports>\n  <InputFiles>\n    <File>bcow-20241220.xsd</File>\n    <File>bcow-20241220_lab.xml</File>\n    <File>bcow-20241220_pre.xml</File>\n    <File doctype=\"8-K\" isOnlyDei=\"true\" isUsgaap=\"true\" original=\"form8k_122024.htm\">form8k_122024.htm</File>\n  </InputFiles>\n  <SupplementalFiles/>\n  <BaseTaxonomies>\n    <BaseTaxonomy items=\"23\">http://xbrl.sec.gov/dei/2024</BaseTaxonomy>\n  </BaseTaxonomies>\n  <HasPresentationLinkbase>true</HasPresentationLinkbase>\n  <HasCalculationLinkbase>false</HasCalculationLinkbase>\n</FilingSummary>\n```\n\n----------------------------------------\n\nTITLE: Embedding Emerging Growth Company Status Checkbox using ix:nonNumeric (XBRL in HTML)\nDESCRIPTION: This snippet shows a checked checkbox ('&#9746;') within a `<div>` element, indicating that the registrant is an emerging growth company. It uses the `<ix:nonNumeric>` tag with the 'dei:EntityEmergingGrowthCompany' element, context 'c20241220to20241220', a unique ID, and the 'ixt-sec:boolballotbox' format.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0000943374-24-000509.txt#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"text-align: right; font-family: 'Times New Roman', Times, serif; font-size: 12pt;\">Emerging growth company&#160; <ix:nonNumeric name=\"dei:EntityEmergingGrowthCompany\" id=\"Fact_4f49833746f042bfad72b9b806fab502\" contextRef=\"c20241220to20241220\" format=\"ixt-sec:boolballotbox\">&#9746;</ix:nonNumeric></div>\n```\n\n----------------------------------------\n\nTITLE: Example SEC EDGAR Non-Public Complete File (.nc) Header in SGML\nDESCRIPTION: Illustrates the beginning of an SEC EDGAR .nc file, which acts as a submission manifest containing metadata but not the full content. This snippet shows tags like `<SUBMISSION>`, `<ACCESSION-NUMBER>`, `<TYPE>`, `<PUBLIC-DOCUMENT-COUNT>`, and `<ITEMS>` used for internal SEC processing and validation.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/sgml.md#_snippet_1\n\nLANGUAGE: sgml\nCODE:\n```\n<SUBMISSION>\n<ACCESSION-NUMBER>0002002260-24-000001\n<TYPE>D\n<PUBLIC-DOCUMENT-COUNT>1\n<ITEMS>06b\n<ITEMS>3C\n```\n\n----------------------------------------\n\nTITLE: Structuring DEI Element Definitions with HTML Tables\nDESCRIPTION: This HTML snippet shows the common structure used to define a Document and Entity Information (DEI) element (e.g., `dei_EntityEmergingGrowthCompany`, `dei_EntityExTransitionPeriod`, etc.). It utilizes a main table with class `authRefData` and a unique ID (e.g., `defref_dei_EntityEmergingGrowthCompany`). Inside, anchor tags with JavaScript `onclick` events (calling `Show.toggleNext` and `Show.hideAR`) control the visibility of `div` elements containing the definition, references, and details. A nested table within the 'Details' section displays specific attributes like Name, Namespace Prefix, Data Type, Balance Type, and Period Type. This structure relies on associated CSS for styling and JavaScript for interactivity.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0000943374-24-000509.txt#_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"authRefData\" style=\"display: none;\" id=\"defref_dei_EntityEmergingGrowthCompany\">\n<tr><td class=\"hide\"><a style=\"color: white;\" href=\"javascript:void(0);\" onclick=\"Show.hideAR();\">X</a></td></tr>\n<tr><td><div class=\"body\" style=\"padding: 2px;\">\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">- Definition</a><div><p>Boolean flag that is true when the filer qualifies as an Emerging Growth Company.</p></div>\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">+ References</a><div style=\"display: none;\"><p>Reference 1: http://www.xbrl.org/2003/role/presentationRef<br> -Publisher SEC<br> -Name Exchange Act<br> -Number 240<br> -Section 12<br> -Subsection b-2<br></p></div>\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">+ Details</a><div style=\"display: none;\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td><strong> Name:</strong></td>\n<td style=\"white-space:nowrap;\">dei_EntityEmergingGrowthCompany</td>\n</tr>\n<tr>\n<td style=\"padding-right: 4px;white-space:nowrap;\"><strong> Namespace Prefix:</strong></td>\n<td>dei_</td>\n</tr>\n<tr>\n<td><strong> Data Type:</strong></td>\n<td>xbrli:booleanItemType</td>\n</tr>\n<tr>\n<td><strong> Balance Type:</strong></td>\n<td>na</td>\n</tr>\n<tr>\n<td><strong> Period Type:</strong></td>\n<td>duration</td>\n</tr>\n</table></div>\n</div></td></tr>\n</table>\n```\n\nLANGUAGE: html\nCODE:\n```\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"authRefData\" style=\"display: none;\" id=\"defref_dei_EntityExTransitionPeriod\">\n<tr><td class=\"hide\"><a style=\"color: white;\" href=\"javascript:void(0);\" onclick=\"Show.hideAR();\">X</a></td></tr>\n<tr><td><div class=\"body\" style=\"padding: 2px;\">\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">- Definition</a><div><p>Indicate if an emerging growth company has elected not to use the extended transition period for complying with any new or revised financial accounting standards.</p></div>\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">+ References</a><div style=\"display: none;\"><p>Reference 1: http://www.xbrl.org/2003/role/presentationRef<br> -Publisher SEC<br> -Name Securities Act<br> -Number 7A<br> -Section B<br> -Subsection 2<br></p></div>\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">+ Details</a><div style=\"display: none;\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td><strong> Name:</strong></td>\n<td style=\"white-space:nowrap;\">dei_EntityExTransitionPeriod</td>\n</tr>\n<tr>\n<td style=\"padding-right: 4px;white-space:nowrap;\"><strong> Namespace Prefix:</strong></td>\n<td>dei_</td>\n</tr>\n<tr>\n<td><strong> Data Type:</strong></td>\n<td>xbrli:booleanItemType</td>\n</tr>\n<tr>\n<td><strong> Balance Type:</strong></td>\n<td>na</td>\n</tr>\n<tr>\n<td><strong> Period Type:</strong></td>\n<td>duration</td>\n</tr>\n</table></div>\n</div></td></tr>\n</table>\n```\n\nLANGUAGE: html\nCODE:\n```\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"authRefData\" style=\"display: none;\" id=\"defref_dei_EntityFileNumber\">\n<tr><td class=\"hide\"><a style=\"color: white;\" href=\"javascript:void(0);\" onclick=\"Show.hideAR();\">X</a></td></tr>\n<tr><td><div class=\"body\" style=\"padding: 2px;\">\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">- Definition</a><div><p>Commission file number. The field allows up to 17 characters. The prefix may contain 1-3 digits, the sequence number may contain 1-8 digits, the optional suffix may contain 1-4 characters, and the fields are separated with a hyphen.</p></div>\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">+ References</a><div style=\"display: none;\"><p>No definition available.</p></div>\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">+ Details</a><div style=\"display: none;\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td><strong> Name:</strong></td>\n<td style=\"white-space:nowrap;\">dei_EntityFileNumber</td>\n</tr>\n<tr>\n<td style=\"padding-right: 4px;white-space:nowrap;\"><strong> Namespace Prefix:</strong></td>\n<td>dei_</td>\n</tr>\n<tr>\n<td><strong> Data Type:</strong></td>\n<td>dei:fileNumberItemType</td>\n</tr>\n<tr>\n<td><strong> Balance Type:</strong></td>\n<td>na</td>\n</tr>\n<tr>\n<td><strong> Period Type:</strong></td>\n<td>duration</td>\n</tr>\n</table></div>\n</div></td></tr>\n</table>\n```\n\nLANGUAGE: html\nCODE:\n```\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"authRefData\" style=\"display: none;\" id=\"defref_dei_EntityIncorporationStateCountryCode\">\n<tr><td class=\"hide\"><a style=\"color: white;\" href=\"javascript:void(0);\" onclick=\"Show.hideAR();\">X</a></td></tr>\n<tr><td><div class=\"body\" style=\"padding: 2px;\">\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">- Definition</a><div><p>Two-character EDGAR code representing the state or country of incorporation.</p></div>\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">+ References</a><div style=\"display: none;\"><p>No definition available.</p></div>\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">+ Details</a><div style=\"display: none;\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td><strong> Name:</strong></td>\n<td style=\"white-space:nowrap;\">dei_EntityIncorporationStateCountryCode</td>\n</tr>\n<tr>\n<td style=\"padding-right: 4px;white-space:nowrap;\"><strong> Namespace Prefix:</strong></td>\n<td>dei_</td>\n</tr>\n<tr>\n<td><strong> Data Type:</strong></td>\n<td>dei:edgarStateCountryItemType</td>\n</tr>\n<tr>\n<td><strong> Balance Type:</strong></td>\n<td>na</td>\n</tr>\n<tr>\n<td><strong> Period Type:</strong></td>\n<td>duration</td>\n</tr>\n</table></div>\n</div></td></tr>\n</table>\n```\n\nLANGUAGE: html\nCODE:\n```\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"authRefData\" style=\"display: none;\" id=\"defref_dei_EntityRegistrantName\">\n<tr><td class=\"hide\"><a style=\"color: white;\" href=\"javascript:void(0);\" onclick=\"Show.hideAR();\">X</a></td></tr>\n<tr><td><div class=\"body\" style=\"padding: 2px;\">\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">- Definition</a><div><p>The exact name of the entity filing the report as specified in its charter, which is required by forms filed with the SEC.</p></div>\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">+ References</a><div style=\"display: none;\"><p>Reference 1: http://www.xbrl.org/2003/role/presentationRef<br> -Publisher SEC<br> -Name Exchange Act<br> -Number 240<br> -Section 12<br> -Subsection b-2<br></p></div>\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">+ Details</a><div style=\"display: none;\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td><strong> Name:</strong></td>\n<td style=\"white-space:nowrap;\">dei_EntityRegistrantName</td>\n</tr>\n<tr>\n<td style=\"padding-right: 4px;white-space:nowrap;\"><strong> Namespace Prefix:</strong></td>\n<td>dei_</td>\n</tr>\n<tr>\n<td><strong> Data Type:</strong></td>\n<td>xbrli:normalizedStringItemType</td>\n</tr>\n<tr>\n<td><strong> Balance Type:</strong></td>\n<td>na</td>\n</tr>\n<tr>\n<td><strong> Period Type:</strong></td>\n<td>duration</td>\n</tr>\n</table></div>\n</div></td></tr>\n</table>\n```\n\nLANGUAGE: html\nCODE:\n```\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"authRefData\" style=\"display: none;\" id=\"defref_dei_EntityTaxIdentificationNumber\">\n<tr><td class=\"hide\"><a style=\"color: white;\" href=\"javascript:void(0);\" onclick=\"Show.hideAR();\">X</a></td></tr>\n<tr><td><div class=\"body\" style=\"padding: 2px;\">\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">- Definition</a><div><p>The Tax Identification Number (TIN), also known as an Employer Identification Number (EIN), is a unique 9-digit value assigned by the IRS.</p></div>\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">+ References</a><div style=\"display: none;\"><p>Reference 1: http://www.xbrl.org/2003/role/presentationRef<br> -Publisher SEC<br> -Name Exchange Act<br> -Number 240<br> -Section 12<br> -Subsection b-2<br></p></div>\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">+ Details</a><div style=\"display: none;\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td><strong> Name:</strong></td>\n<td style=\"white-space:nowrap;\">dei_EntityTaxIdentificationNumber</td>\n</tr>\n<tr>\n<td style=\"padding-right: 4px;white-space:nowrap;\"><strong> Namespace Prefix:</strong></td>\n<td>dei_</td>\n</tr>\n<tr>\n<td><strong> Data Type:</strong></td>\n<td>dei:employerIdItemType</td>\n</tr>\n<tr>\n<td><strong> Balance Type:</strong></td>\n<td>na</td>\n</tr>\n<tr>\n<td><strong> Period Type:</strong></td>\n<td>duration</td>\n</tr>\n</table></div>\n</div></td></tr>\n</table>\n```\n\nLANGUAGE: html\nCODE:\n```\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"authRefData\" style=\"display: none;\" id=\"defref_dei_LocalPhoneNumber\">\n<tr><td class=\"hide\"><a style=\"color: white;\" href=\"javascript:void(0);\" onclick=\"Show.hideAR();\">X</a></td></tr>\n<tr><td><div class=\"body\" style=\"padding: 2px;\">\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">- Definition</a><div><p>Local phone number for entity.</p></div>\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">+ References</a><div style=\"display: none;\"><p>No definition available.</p></div>\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">+ Details</a><div style=\"display: none;\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td><strong> Name:</strong></td>\n<td style=\"white-space:nowrap;\">dei_LocalPhoneNumber</td>\n</tr>\n<tr>\n<td style=\"padding-right: 4px;white-space:nowrap;\"><strong> Namespace Prefix:</strong></td>\n<td>dei_</td>\n</tr>\n<tr>\n<td><strong> Data Type:</strong></td>\n<td>xbrli:normalizedStringItemType</td>\n</tr>\n<tr>\n<td><strong> Balance Type:</strong></td>\n<td>na</td>\n</tr>\n<tr>\n<td><strong> Period Type:</strong></td>\n<td>duration</td>\n</tr>\n</table></div>\n</div></td></tr>\n</table>\n```\n\nLANGUAGE: html\nCODE:\n```\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"authRefData\" style=\"display: none;\" id=\"defref_dei_PreCommencementIssuerTenderOffer\">\n<tr><td class=\"hide\"><a style=\"color: white;\" href=\"javascript:void(0);\" onclick=\"Show.hideAR();\">X</a></td></tr>\n<tr><td><div class=\"body\" style=\"padding: 2px;\">\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">- Definition</a><div><p>Boolean flag that is true when the Form 8-K filing is intended to satisfy the filing obligation of the registrant as pre-commencement communications pursuant to Rule 13e-4(c) under the Exchange Act.</p></div>\n```\n\n----------------------------------------\n\nTITLE: Structuring Reporting Person Details Table in HTML\nDESCRIPTION: This HTML code defines a table (`<TABLE>`) designed to display detailed information typically found in financial reporting forms. It includes rows (`<TR>`) and cells (`<TD>`) for CUSIP number, reporting person's name, group membership checkboxes (using Wingdings font for symbols), source of funds, citizenship/place of organization, and share ownership breakdown (sole/shared voting power, sole dispositive power). Extensive inline styling (`STYLE=...`) is used for layout (padding, borders, width) and text formatting (font family, size).\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0001104659-25-002604.txt#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<TABLE CELLSPACING=\"0\" CELLPADDING=\"0\" STYLE=\"font: 10pt Times New Roman, Times, Serif; width: 100%; border-collapse: collapse\">\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD COLSPAN=\"2\" STYLE=\"border-top: Black 1pt solid; padding-bottom: 10pt; border-bottom: Black 1pt solid; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\"><B>CUSIP No. 12662P108</B></FONT></TD>\n    <TD STYLE=\"border-top: Black 1pt solid; padding-bottom: 10pt; border-bottom: Black 1pt solid; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"padding-bottom: 10pt; width: 24px; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">1</FONT></TD>\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">NAME OF REPORTING PERSON</FONT></TD>\n    <TD STYLE=\"padding-bottom: 10pt; width: 48px; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">Icahn Enterprises G.P. Inc.</FONT></TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">2</FONT></TD>\n    <TD STYLE=\"padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">CHECK THE APPROPRIATE BOX IF A MEMBER OF A GROUP</FONT></TD>\n    <TD STYLE=\"padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">(a) </FONT><FONT STYLE=\"font-family: Wingdings; font-size: 10pt\">&uml;</FONT></TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">(b) </FONT><FONT STYLE=\"font-family: Wingdings; font-size: 10pt\">&uml;</FONT></TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">3</FONT></TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">SEC USE ONLY</FONT></TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">4</FONT></TD>\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">SOURCE OF FUNDS</FONT></TD>\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">Not applicable</FONT></TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">5</FONT></TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">CHECK BOX IF LEGAL PROCEEDINGS IS REQUIRED PURSUANT TO ITEMS 2(d) or 2(e)</FONT></TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Wingdings; font-size: 10pt\">&uml;</FONT></TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">6</FONT></TD>\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">CITIZENSHIP OR PLACE OF ORGANIZATION</FONT></TD>\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">Delaware</FONT></TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD COLSPAN=\"2\" STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">NUMBER OF SHARES BENEFICIALLY OWNED BY EACH REPORTING PERSON WITH:</FONT></TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">7</FONT></TD>\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">SOLE VOTING POWER</FONT></TD>\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">0</FONT></TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">8</FONT></TD>\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">SHARED VOTING POWER</FONT></TD>\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><P STYLE=\"margin: 0pt 0\">67,570,593</P></TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">9</FONT></TD>\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">SOLE DISPOSITIVE POWER</FONT></TD>\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">0</FONT></TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">10</FONT></TD>\n```\n\n----------------------------------------\n\nTITLE: Embedding Local Phone Number using ix:nonNumeric (XBRL in HTML)\nDESCRIPTION: This snippet shows the registrant's local phone number ('421-8200') embedded within the same styled `<div>` as the area code, using the `<ix:nonNumeric>` iXBRL tag. It employs the 'dei:LocalPhoneNumber' element from the DEI taxonomy, references the context 'c20241220to20241220', and is identified by 'Fact_c48636743ebe4eecbb0eda19274efe3c'.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0000943374-24-000509.txt#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"text-align: center; font-family: 'Times New Roman', Times, serif; font-size: 12pt;\"><span style=\"text-decoration: underline;\">(<ix:nonNumeric name=\"dei:CityAreaCode\" id=\"Fact_aa174cac8b874ee1af21f222068d2968\" contextRef=\"c20241220to20241220\">414</ix:nonNumeric>) <ix:nonNumeric name=\"dei:LocalPhoneNumber\" id=\"Fact_c48636743ebe4eecbb0eda19274efe3c\" contextRef=\"c20241220to20241220\">421-8200</ix:nonNumeric></span></div>\n```\n\n----------------------------------------\n\nTITLE: Defining DEI SolicitingMaterial Metadata in HTML\nDESCRIPTION: This HTML table structure defines metadata for the 'dei_SolicitingMaterial' element from the SEC DEI taxonomy. It includes sections for Definition, References, and Details (Name, Namespace, Data Type, etc.). JavaScript functions (`Show.hideAR` and `Show.toggleNext`) are used within anchor tags to allow users to hide the entire definition block or expand/collapse individual sections.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0000943374-24-000509.txt#_snippet_27\n\nLANGUAGE: html\nCODE:\n```\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"authRefData\" style=\"display: none;\" id=\"defref_dei_SolicitingMaterial\">\n<tr><td class=\"hide\"><a style=\"color: white;\" href=\"javascript:void(0);\" onclick=\"Show.hideAR();\">X</a></td></tr>\n<tr><td><div class=\"body\" style=\"padding: 2px;\">\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">- Definition</a><div><p>Boolean flag that is true when the Form 8-K filing is intended to satisfy the filing obligation of the registrant as soliciting material pursuant to Rule 14a-12 under the Exchange Act.</p></div>\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">+ References</a><div style=\"display: none;\"><p>Reference 1: http://www.xbrl.org/2003/role/presentationRef<br> -Publisher SEC<br> -Name Exchange Act<br> -Number 240<br> -Section 14a<br> -Subsection 12<br></p></div>\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">+ Details</a><div style=\"display: none;\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td><strong> Name:</strong></td>\n<td style=\"white-space:nowrap;\">dei_SolicitingMaterial</td>\n</tr>\n<tr>\n<td style=\"padding-right: 4px;white-space:nowrap;\"><strong> Namespace Prefix:</strong></td>\n<td>dei_</td>\n</tr>\n<tr>\n<td><strong> Data Type:</strong></td>\n<td>xbrli:booleanItemType</td>\n</tr>\n<tr>\n<td><strong> Balance Type:</strong></td>\n<td>na</td>\n</tr>\n<tr>\n<td><strong> Period Type:</strong></td>\n<td>duration</td>\n</tr>\n</table></div>\n</div></td></tr>\n</table>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nShow.hideAR();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nShow.toggleNext( this );\n```\n\n----------------------------------------\n\nTITLE: Defining XBRL Instance Data for SEC Form 8-K in XML\nDESCRIPTION: This XBRL snippet defines instance data for an SEC Form 8-K filing. It declares namespaces for XBRL instance, link, xlink, and the SEC DEI taxonomy version 2024. It references an external schema ('bcow-20241220.xsd') and defines a context ('c20241220to20241220') specifying the reporting entity (CIK 0001847360) and the period (December 20, 2024). Several DEI facts are then reported within this context, including the Amendment Flag, Entity CIK, Document Type, Document Period End Date, and Entity Registrant Name.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0000943374-24-000509.txt#_snippet_35\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<xbrl\n  xmlns=\"http://www.xbrl.org/2003/instance\"\n  xmlns:dei=\"http://xbrl.sec.gov/dei/2024\"\n  xmlns:link=\"http://www.xbrl.org/2003/linkbase\"\n  xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <link:schemaRef xlink:href=\"bcow-20241220.xsd\" xlink:type=\"simple\"/>\n    <context id=\"c20241220to20241220\">\n        <entity>\n            <identifier scheme=\"http://www.sec.gov/CIK\">0001847360</identifier>\n        </entity>\n        <period>\n            <startDate>2024-12-20</startDate>\n            <endDate>2024-12-20</endDate>\n        </period>\n    </context>\n    <dei:AmendmentFlag\n      contextRef=\"c20241220to20241220\"\n      id=\"Fact_0f96221d087c404ea672b6832bc48e9c\">false</dei:AmendmentFlag>\n    <dei:EntityCentralIndexKey\n      contextRef=\"c20241220to20241220\"\n      id=\"Fact_4602dc96ed6b4a6581a5ff26714359e9\">0001847360</dei:EntityCentralIndexKey>\n    <dei:DocumentType\n      contextRef=\"c20241220to20241220\"\n      id=\"Fact_c1e475f7cc2b4d6292bc394a4e1b8d98\">8-K</dei:DocumentType>\n    <dei:DocumentPeriodEndDate\n      contextRef=\"c20241220to20241220\"\n      id=\"Fact_865e3c31fd374971b6126c11de114e0b\">2024-12-20</dei:DocumentPeriodEndDate>\n    <dei:EntityRegistrantName\n      contextRef=\"c20241220to20241220\"\n      id=\"Fact_c65f0f5aef0543b0b3a33c269846bb59\">1895 BANCORP OF WISCONSIN, INC.</dei:EntityRegistrantName>\n    <dei:EntityIncorporationStateCountryCode\n      contextRef=\"c20241220to20241220\"\n```\n\n----------------------------------------\n\nTITLE: Linking to SEC Exhibits using HTML Anchor Tags\nDESCRIPTION: Implements HTML anchor (`<A>`) tags within a table to create hyperlinks pointing to specific exhibit documents hosted on the SEC EDGAR website (sec.gov). The `HREF` attribute specifies the URL, and the link text (e.g., exhibit identifier or description) is styled using a nested `FONT` tag. A custom inline style (`-sec-extract: exhibit`) might be present, potentially for SEC system processing or extraction.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0001104659-25-002604.txt#_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<A HREF=\"https://www.sec.gov/Archives/edgar/data/1034563/000110465924126116/tm2429962d1_exha-1a.htm\" STYLE=\"-sec-extract: exhibit\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">(a)(1)(A)*\n    </FONT></A>\n```\n\nLANGUAGE: html\nCODE:\n```\n<A HREF=\"https://www.sec.gov/Archives/edgar/data/1034563/000110465924126116/tm2429962d1_exha-1b.htm\" STYLE=\"-sec-extract: exhibit\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">(a)(1)(B)*\n    </FONT></A>\n```\n\nLANGUAGE: html\nCODE:\n```\n<A HREF=\"https://www.sec.gov/Archives/edgar/data/1034563/000110465924126116/tm2429962d1_exha-1c.htm\" STYLE=\"-sec-extract: exhibit\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">(a)(1)(C)*   </FONT></A>\n```\n\nLANGUAGE: html\nCODE:\n```\n<A HREF=\"https://www.sec.gov/Archives/edgar/data/1034563/000110465924126116/tm2429962d1_exha-1d.htm\" STYLE=\"-sec-extract: exhibit\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">(a)(1)(D)*   </FONT></A>\n```\n\n----------------------------------------\n\nTITLE: Defining DEI PreCommencementTenderOffer Metadata in HTML\nDESCRIPTION: This HTML table structure defines metadata for the 'dei_PreCommencementTenderOffer' element from the SEC DEI taxonomy. It includes sections for Definition, References, and Details (Name, Namespace, Data Type, etc.). JavaScript functions (`Show.hideAR` and `Show.toggleNext`) are used within anchor tags to allow users to hide the entire definition block or expand/collapse individual sections.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0000943374-24-000509.txt#_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"authRefData\" style=\"display: none;\" id=\"defref_dei_PreCommencementTenderOffer\">\n<tr><td class=\"hide\"><a style=\"color: white;\" href=\"javascript:void(0);\" onclick=\"Show.hideAR();\">X</a></td></tr>\n<tr><td><div class=\"body\" style=\"padding: 2px;\">\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">- Definition</a><div><p>Boolean flag that is true when the Form 8-K filing is intended to satisfy the filing obligation of the registrant as pre-commencement communications pursuant to Rule 14d-2(b) under the Exchange Act.</p></div>\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">+ References</a><div style=\"display: none;\"><p>Reference 1: http://www.xbrl.org/2003/role/presentationRef<br> -Publisher SEC<br> -Name Exchange Act<br> -Number 240<br> -Section 14d<br> -Subsection 2b<br></p></div>\n<a href=\"javascript:void(0);\" onclick=\"Show.toggleNext( this );\">+ Details</a><div style=\"display: none;\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n<tr>\n<td><strong> Name:</strong></td>\n<td style=\"white-space:nowrap;\">dei_PreCommencementTenderOffer</td>\n</tr>\n<tr>\n<td style=\"padding-right: 4px;white-space:nowrap;\"><strong> Namespace Prefix:</strong></td>\n<td>dei_</td>\n</tr>\n<tr>\n<td><strong> Data Type:</strong></td>\n<td>xbrli:booleanItemType</td>\n</tr>\n<tr>\n<td><strong> Balance Type:</strong></td>\n<td>na</td>\n</tr>\n<tr>\n<td><strong> Period Type:</strong></td>\n<td>duration</td>\n</tr>\n</table></div>\n</div></td></tr>\n</table>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nShow.hideAR();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nShow.toggleNext( this );\n```\n\n----------------------------------------\n\nTITLE: Learning Job Output Example - Bash\nDESCRIPTION: This output snippet shows the expected standard-output results from running the concept learning job using the provided Python code. 'Added mapping' lines denote high-confidence automatic mappings committed to storage, while 'Pending' lines represent lower-confidence results requiring manual review. Intended for developer reference during batch operations. No dependencies other than the Python learning job.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/edgar/xbrl2/docs/standardization.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nAdded mapping: us-gaap_SalesRevenueNet -> Revenue (confidence: 0.92)\nAdded mapping: us-gaap_Assets -> Assets (confidence: 0.95)\nPending: custom_Rev -> Revenue (confidence: 0.85)\n\n```\n\n----------------------------------------\n\nTITLE: Visualizing XBRL Parser System Architecture Diagram\nDESCRIPTION: This ASCII diagram illustrates the high-level components and data flow of the proposed XBRL parsing system. It shows XBRL files being processed by an XBRL Parser, which populates a Data Model, subsequently used by a Statement Generator.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/edgar/xbrl2/docs/xbrl-parser-design.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```\n┌─────────────────┐     ┌─────────────────┐     ┌─────────────────┐\n│                 │     │                 │     │                 │\n│  XBRL File      │────▶│  XBRL Parser    │────▶│  Data Model     │\n│  Collection     │     │                 │     │                 │\n│                 │     │                 │     │                 │\n└─────────────────┘     └─────────────────┘     └─────────────────┘\n                                                        │\n                                                        ▼\n                                              ┌─────────────────┐\n                                              │                 │\n                                              │  Statement      │\n                                              │  Generator      │\n                                              │                 │\n                                              └─────────────────┘\n```\n```\n\n----------------------------------------\n\nTITLE: Structuring SEC SC TO-T/A Filing Content in HTML\nDESCRIPTION: This HTML snippet structures the content of an SEC SC TO-T/A filing (Amendment No. 3). It uses standard HTML tags like `<HEAD>`, `<TITLE>`, `<BODY>`, `<P>`, `<B>`, `<DIV>`, `<FONT>`, and `<TABLE>` to format the text, headings, paragraphs, tables, and styling for the tender offer statement related to CVR Energy, Inc. Key information includes the filing title, issuer name, filing persons, security details (Common Stock, CUSIP), authorized representative, legal counsel contacts, and checkboxes indicating the type of transaction (third-party tender offer). Basic styling is applied using inline CSS within tags.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0001104659-25-002604.txt#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<HTML>\n<HEAD>\n     <TITLE></TITLE>\n</HEAD>\n<BODY STYLE=\"font: 10pt Times New Roman, Times, Serif\">\n\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; margin: 0pt 0\"></P>\n\n<!-- Field: Rule-Page --><DIV STYLE=\"margin-top: 0; margin-bottom: 0; width: 100%\"><DIV STYLE=\"border-top: Black 2pt solid; font-size: 1pt; border-bottom: Black 1pt solid\">&nbsp;</DIV></DIV><!-- Field: /Rule-Page -->\n\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; margin: 0pt 0\">&nbsp;</P>\n\n<P STYLE=\"font: 14pt Times New Roman, Times, Serif; margin: 0pt 0; text-align: center\"><B>SECURITIES AND EXCHANGE COMMISSION</B></P>\n\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; text-align: center; margin-top: 0pt; margin-bottom: 0pt\"><B>Washington, D.C. 20549</B></P>\n\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; margin: 0pt 0\">&nbsp;</P>\n\n<P STYLE=\"font: 14pt Times New Roman, Times, Serif; margin: 0pt 0; text-align: center\"><B>SCHEDULE TO</B></P>\n\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; margin: 0pt 0\">&nbsp;</P>\n\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; margin: 0pt 0; text-align: center\"><B>TENDER OFFER STATEMENT UNDER SECTION&nbsp;14(D)(1)&nbsp;OR\n13(E)(1)&nbsp;<BR>\nOF THE SECURITIES EXCHANGE ACT OF 1934</B></P>\n\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; margin: 0pt 0\"></P>\n\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; margin: 0pt 0; text-align: center\"><B>(Amendment No.&nbsp;3)</B></P>\n\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; margin: 0pt 0\">&nbsp;</P>\n\n<P STYLE=\"font: 14pt Times New Roman, Times, Serif; margin: 0pt 0; text-align: center\"><B>CVR ENERGY,&nbsp;INC.</B></P>\n\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; margin: 0pt 0; text-align: center\">(Name of Subject Company (Issuer))</P>\n\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; margin: 0pt 0\">&nbsp;</P>\n\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; margin: 0pt 0; text-align: center\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\"><B>Icahn\nEnterprises Holdings L.P.<BR>\n</B></FONT><B>Icahn Enterprises L.P.<BR>\nIcahn Enterprises G.P. Inc.<BR>\nIEP Energy Holding LLC<BR>\nAmerican Entertainment Properties Corp.<BR>\nBeckton Corp.<BR>\nCarl C. Icahn</B></P>\n\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; margin: 0pt 0; text-align: center\">(Name of Filing Persons (Offerors))</P>\n\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; margin: 0pt 0\">&nbsp;</P>\n\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; margin: 0pt 0; text-align: center\"><B>Common Stock, par value $0.01 per share</B></P>\n\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; margin: 0pt 0; text-align: center\">(Title of Class&nbsp;of Securities)</P>\n\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; margin: 0pt 0\">&nbsp;</P>\n\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; margin: 0pt 0; text-align: center\"><B>12662P108</B></P>\n\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; margin: 0pt 0; text-align: center\">(CUSIP Number of Class&nbsp;of Securities)</P>\n\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; margin: 0pt 0\">&nbsp;</P>\n\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; margin: 0pt 0; text-align: center\"><B>Andrew Teno<BR>\nPresident and Chief Executive Officer<BR>\nIcahn Enterprises L.P.<BR>\n16690 Collins Avenue, PH-1<BR>\nSunny Isles Beach, FL 33160<BR>\n(305) 422-4100</B></P>\n\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; margin: 0pt 0; text-align: center\">(Name, address, and telephone numbers of person\nauthorized to receive notices and communications on behalf of filing persons)</P>\n\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; margin: 0pt 0\">&nbsp;</P>\n\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; margin: 0pt 0; text-align: center\"><B>Copies to:</B></P>\n\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; margin: 0pt 0\">&nbsp;</P>\n\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; margin: 0pt 0; text-align: center\"><B>Jesse A. Lynn,&nbsp;Esq.<BR>\nGeneral Counsel<BR>\nIcahn Enterprises L.P.<BR>\n16690 Collins Avenue, PH-1<BR>\nSunny Isles Beach, FL 33160<BR>\n(305) 422-4100</B></P>\n\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; margin: 0pt 0; text-align: center\"><B>and</B></P>\n\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; margin: 0pt 0; text-align: center\"><B>Joshua A. Apfelroth,&nbsp;Esq.<BR>\nLouis E. Rambo,&nbsp;Esq.<BR>\nProskauer Rose LLP<BR>\nEleven Times Square<BR>\nNew York, NY 10036-8299<BR>\n(212) 969-3438</B></P>\n\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; margin: 0pt 0\">&nbsp;</P>\n\n<TABLE CELLPADDING=\"0\" CELLSPACING=\"0\" STYLE=\"font: 10pt Times New Roman, Times, Serif; margin-top: 0; margin-bottom: 0; width: 100%\"><TR STYLE=\"vertical-align: top; text-align: justify\">\n<TD STYLE=\"width: 0in\"></TD><TD STYLE=\"width: 0.25in; text-align: left\"><FONT STYLE=\"font-family: Wingdings\">&#168;</FONT></TD><TD STYLE=\"text-align: justify\">Check the box if the filing relates solely to preliminary communications\nmade before the commencement of a tender offer.</TD>\n</TR></TABLE>\n\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; margin: 0pt 0\">&nbsp;</P>\n\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; margin: 0pt 0\">Check the appropriate boxes below to designate any transactions to\nwhich the statement relates:</P>\n\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; margin: 0pt 0\">&nbsp;</P>\n\n<TABLE CELLPADDING=\"0\" CELLSPACING=\"0\" STYLE=\"font: 10pt Times New Roman, Times, Serif; margin-top: 0; margin-bottom: 0; width: 100%\"><TR STYLE=\"vertical-align: top; text-align: justify\">\n<TD STYLE=\"width: 0in\"></TD><TD STYLE=\"width: 0.25in; text-align: left\"><FONT STYLE=\"font-family: Wingdings\">&#120;</FONT></TD><TD STYLE=\"text-align: justify\">third-party tender offer subject to Rule&nbsp;14d-1.</TD>\n</TR></TABLE>\n\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; margin: 0pt 0\">&nbsp;</P>\n\n<TABLE CELLPADDING=\"0\" CELLSPACING=\"0\" STYLE=\"font: 10pt Times New Roman, Times, Serif; margin-top: 0; margin-bottom: 0; width: 100%\"><TR STYLE=\"vertical-align: top; text-align: justify\">\n<TD STYLE=\"width: 0in\"></TD><TD STYLE=\"width: 0.25in; text-align: left\"><FONT STYLE=\"font-family: Wingdings\">&#168;</FONT></TD><TD STYLE=\"text-align: justify\">issuer tender offer subject to Rule&nbsp;13e-4.</TD>\n</TR></TABLE>\n\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; margin: 0pt 0\">&nbsp;</P>\n\n<TABLE CELLPADDING=\"0\" CELLSPACING=\"0\" STYLE=\"font: 10pt Times New Roman, Times, Serif; margin-top: 0; margin-bottom: 0; width: 100%\"><TR STYLE=\"vertical-align: top; text-align: justify\">\n<TD STYLE=\"width: 0in\"></TD><TD STYLE=\"width: 0.25in; text-align: left\"><FONT STYLE=\"font-family: Wingdings\">&#168;</FONT></TD><TD STYLE=\"text-align: justify\">going-private transaction subject to Rule&nbsp;13e-3.</TD>\n</TR></TABLE>\n\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; margin: 0pt 0\">&nbsp;</P>\n\n<TABLE CELLPADDING=\"0\" CELLSPACING=\"0\" STYLE=\"font: 10pt Times New Roman, Times, Serif; margin-top: 0; margin-bottom: 0; width: 100%\"><TR STYLE=\"vertical-align: top; text-align: justify\">\n```\n\n----------------------------------------\n\nTITLE: Processing SEC Form 4 Ownership Data - XML\nDESCRIPTION: This XML snippet encapsulates the contents of an SEC Form 4 filing, detailing ownership, transaction data, and signatory information for regulatory reporting. It adheres to the Form 4 XML schema (version X0508), including fields for issuer details, reporting owner, transaction attributes, and associated footnotes. Clients or parsers must support XML version 1.0 and understand the SEC EDGAR Form 4 schema to interpret key parameters like periodOfReport, transactionDate, transactionShares, and signatures. The expected input is well-formed XML, outputting structured fields suitable for further compliance or audit processing. Note that some subfields (such as transactionTimeliness) may be empty and that footnote cross-references are used.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0001127602-25-001055.txt#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\"?>\\n<ownershipDocument>\\n\\n    <schemaVersion>X0508</schemaVersion>\\n\\n    <documentType>4</documentType>\\n\\n    <periodOfReport>2025-01-10</periodOfReport>\\n\\n    <issuer>\\n        <issuerCik>0000001750</issuerCik>\\n        <issuerName>AAR CORP</issuerName>\\n        <issuerTradingSymbol>AIR</issuerTradingSymbol>\\n    </issuer>\\n\\n    <reportingOwner>\\n        <reportingOwnerId>\\n            <rptOwnerCik>0001806647</rptOwnerCik>\\n            <rptOwnerName>Garascia Jessica A.</rptOwnerName>\\n        </reportingOwnerId>\\n        <reportingOwnerAddress>\\n            <rptOwnerStreet1>1100 N. WOOD DALE ROAD</rptOwnerStreet1>\\n            <rptOwnerStreet2></rptOwnerStreet2>\\n            <rptOwnerCity>WOOD DALE</rptOwnerCity>\\n            <rptOwnerState>IL</rptOwnerState>\\n            <rptOwnerZipCode>60191</rptOwnerZipCode>\\n            <rptOwnerStateDescription></rptOwnerStateDescription>\\n        </reportingOwnerAddress>\\n        <reportingOwnerRelationship>\\n            <isOfficer>1</isOfficer>\\n            <officerTitle>Senior VP, GC, CAO &amp; Secretary</officerTitle>\\n        </reportingOwnerRelationship>\\n    </reportingOwner>\\n\\n    <aff10b5One>0</aff10b5One>\\n\\n    <nonDerivativeTable>\\n        <nonDerivativeTransaction>\\n            <securityTitle>\\n                <value>Common Stock</value>\\n            </securityTitle>\\n            <transactionDate>\\n                <value>2025-01-10</value>\\n            </transactionDate>\\n            <transactionCoding>\\n                <transactionFormType>4</transactionFormType>\\n                <transactionCode>S</transactionCode>\\n                <equitySwapInvolved>0</equitySwapInvolved>\\n            </transactionCoding>\\n            <transactionTimeliness></transactionTimeliness>\\n            <transactionAmounts>\\n                <transactionShares>\\n                    <value>1500</value>\\n                </transactionShares>\\n                <transactionPricePerShare>\\n                    <value>66.903</value>\\n                    <footnoteId id=\\\"F1\\\"/>\\n                </transactionPricePerShare>\\n                <transactionAcquiredDisposedCode>\\n                    <value>D</value>\\n                </transactionAcquiredDisposedCode>\\n            </transactionAmounts>\\n            <postTransactionAmounts>\\n                <sharesOwnedFollowingTransaction>\\n                    <value>37565</value>\\n                </sharesOwnedFollowingTransaction>\\n            </postTransactionAmounts>\\n            <ownershipNature>\\n                <directOrIndirectOwnership>\\n                    <value>D</value>\\n                </directOrIndirectOwnership>\\n            </ownershipNature>\\n        </nonDerivativeTransaction>\\n    </nonDerivativeTable>\\n\\n    <footnotes>\\n        <footnote id=\\\"F1\\\">The price reported in Column 4 is a weighted average price. These shares were sold in multiple transactions at prices ranging from $66.8350 to $66.9800 inclusive. The reporting person undertakes to provide AAR CORP. any security holder of AAR CORP. or the staff of the Securities Exchange Commission upon request, full information regarding the number of shares sold at each separate price within the range set forth in this footnote.</footnote>\\n    </footnotes>\\n\\n    <ownerSignature>\\n        <signatureName>/s/ Katherine Kwiat, power of attorney</signatureName>\\n        <signatureDate>2025-01-10</signatureDate>\\n    </ownerSignature>\\n</ownershipDocument>\n```\n\n----------------------------------------\n\nTITLE: Structuring a Multi-Entity Signature Block Table in HTML\nDESCRIPTION: This HTML snippet creates a table (`<TABLE>`) designed to display signature blocks for multiple related corporate entities (Icahn Enterprises Holdings L.P., Icahn Enterprises L.P., Icahn Enterprises G.P. Inc., IEP Energy Holding LLC, American Entertainment Properties Corp.). It uses table rows (`<TR>`) and cells (`<TD>`) to organize the entity names, signatory designations ('BY:'), signature lines (using `border-bottom` style), typed signer names, and titles. Inline CSS is used for basic font styling and layout.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0001104659-25-002604.txt#_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<TABLE CELLSPACING=\"0\" CELLPADDING=\"0\" STYLE=\"font: 10pt Times New Roman, Times, Serif; width: 100%; border-collapse: collapse\">\n  <TR STYLE=\"vertical-align: top\">\n    <TD>&nbsp;</TD>\n    <TD COLSPAN=\"2\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\"><B>ICAHN ENTERPRISES HOLDINGS L.P.</B></FONT></TD></TR>\n  <TR STYLE=\"vertical-align: top\">\n    <TD STYLE=\"width: 50%\">&nbsp;</TD>\n    <TD STYLE=\"width: 5%\">&nbsp;</TD>\n    <TD STYLE=\"width: 45%\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: top\">\n    <TD>&nbsp;</TD>\n    <TD><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\"><B>BY:</B></FONT></TD>\n    <TD><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\"><B>Icahn Enterprises G.P. Inc., its general partner</B></FONT></TD></TR>\n  <TR STYLE=\"vertical-align: top\">\n    <TD>&nbsp;</TD>\n    <TD>&nbsp;</TD>\n    <TD>&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: top\">\n    <TD>&nbsp;</TD>\n    <TD><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">By:</FONT></TD>\n    <TD STYLE=\"border-bottom: black 1pt solid\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">/s/ Ted Papapostolou</FONT></TD></TR>\n  <TR STYLE=\"vertical-align: top\">\n    <TD>&nbsp;</TD>\n    <TD>&nbsp;</TD>\n    <TD><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">Name: Ted Papapostolou</FONT></TD></TR>\n  <TR STYLE=\"vertical-align: top\">\n    <TD>&nbsp;</TD>\n    <TD>&nbsp;</TD>\n    <TD><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">Title: <I>Chief Financial Officer and Secretary</I></FONT></TD></TR>\n  <TR STYLE=\"vertical-align: top\">\n    <TD>&nbsp;</TD>\n    <TD>&nbsp;</TD>\n    <TD>&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: top\">\n    <TD>&nbsp;</TD>\n    <TD COLSPAN=\"2\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\"><B>ICAHN ENTERPRISES L.P.</B></FONT></TD></TR>\n  <TR STYLE=\"vertical-align: top\">\n    <TD>&nbsp;</TD>\n    <TD>&nbsp;</TD>\n    <TD>&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: top\">\n    <TD>&nbsp;</TD>\n    <TD><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\"><B>BY:</B></FONT></TD>\n    <TD><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\"><B>Icahn Enterprises G.P. Inc., its general partner</B></FONT></TD></TR>\n  <TR STYLE=\"vertical-align: top\">\n    <TD>&nbsp;</TD>\n    <TD>&nbsp;</TD>\n    <TD>&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: top\">\n    <TD>&nbsp;</TD>\n    <TD><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">By:</FONT></TD>\n    <TD STYLE=\"border-bottom: black 1pt solid\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">/s/ Ted Papapostolou</FONT></TD></TR>\n  <TR STYLE=\"vertical-align: top\">\n    <TD>&nbsp;</TD>\n    <TD><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">Name:</FONT></TD>\n    <TD><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">Ted Papapostolou</FONT></TD></TR>\n  <TR STYLE=\"vertical-align: top\">\n    <TD>&nbsp;</TD>\n    <TD><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">Title:</FONT></TD>\n    <TD><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\"><I>Chief Financial Officer and Secretary</I></FONT></TD></TR>\n  <TR STYLE=\"vertical-align: top\">\n    <TD>&nbsp;</TD>\n    <TD>&nbsp;</TD>\n    <TD>&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: top\">\n    <TD>&nbsp;</TD>\n    <TD COLSPAN=\"2\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\"><B>ICAHN ENTERPRISES G.P. INC.</B></FONT></TD></TR>\n  <TR STYLE=\"vertical-align: top\">\n    <TD>&nbsp;</TD>\n    <TD>&nbsp;</TD>\n    <TD>&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: top\">\n    <TD>&nbsp;</TD>\n    <TD><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">By:</FONT></TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">/s/ Ted Papapostolou</FONT></TD></TR>\n  <TR STYLE=\"vertical-align: top\">\n    <TD>&nbsp;</TD>\n    <TD><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">Name:</FONT></TD>\n    <TD><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">Ted Papapostolou</FONT></TD></TR>\n  <TR STYLE=\"vertical-align: top\">\n    <TD>&nbsp;</TD>\n    <TD><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">Title:</FONT></TD>\n    <TD><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\"><I>Chief Financial Officer and Secretary</I></FONT></TD></TR>\n  <TR STYLE=\"vertical-align: top\">\n    <TD>&nbsp;</TD>\n    <TD>&nbsp;</TD>\n    <TD>&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: top\">\n    <TD>&nbsp;</TD>\n    <TD COLSPAN=\"2\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\"><B>IEP ENERGY HOLDING LLC</B></FONT></TD></TR>\n  <TR STYLE=\"vertical-align: top\">\n    <TD>&nbsp;</TD>\n    <TD>&nbsp;</TD>\n    <TD>&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: top\">\n    <TD>&nbsp;</TD>\n    <TD><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">By:</FONT></TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">/s/ Ted Papapostolou</FONT></TD></TR>\n  <TR STYLE=\"vertical-align: top\">\n    <TD>&nbsp;</TD>\n    <TD><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">Name:</FONT></TD>\n    <TD><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">Ted Papapostolou</FONT></TD></TR>\n  <TR STYLE=\"vertical-align: top\">\n    <TD>&nbsp;</TD>\n    <TD><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">Title:</FONT></TD>\n    <TD><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\"><I>Chief Financial Officer and Secretary</I></FONT></TD></TR>\n  <TR STYLE=\"vertical-align: top\">\n    <TD>&nbsp;</TD>\n    <TD>&nbsp;</TD>\n    <TD>&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: top\">\n    <TD>&nbsp;</TD>\n    <TD COLSPAN=\"2\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\"><B>AMERICAN ENTERTAINMENT PROPERTIES CORP.</B></FONT></TD></TR>\n  <TR STYLE=\"vertical-align: top\">\n    <TD>&nbsp;</TD>\n    <TD>&nbsp;</TD>\n    <TD>&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: top\">\n    <TD>&nbsp;</TD>\n    <TD><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">By:</FONT></TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">/s/ Ted Papapostolou</FONT></TD></TR>\n  <TR STYLE=\"vertical-align: top\">\n    <TD>&nbsp;</TD>\n    <TD><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">Name:</FONT></TD>\n    <TD><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">Ted Papapostolou</FONT></TD></TR>\n  <TR STYLE=\"vertical-align: top\">\n    <TD>&nbsp;</TD>\n```\n\n----------------------------------------\n\nTITLE: Example SEC EDGAR Complete Submission Text File (.txt) Header in SGML\nDESCRIPTION: Shows the typical starting structure of an SEC EDGAR .txt file, which contains the complete submission including headers, metadata, and all documents. This snippet illustrates the `<SEC-DOCUMENT>` and `<SEC-HEADER>` tags along with metadata like ACCEPTANCE-DATETIME and ACCESSION NUMBER.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/docs/sgml.md#_snippet_0\n\nLANGUAGE: sgml\nCODE:\n```\n<SEC-DOCUMENT>0000320193-24-000123.txt : 20241101\n<SEC-HEADER>0000320193-24-000123.hdr.sgml : 20241101\n<ACCEPTANCE-DATETIME>20241101060136\nACCESSION NUMBER:      0000320193-24-000123\n```\n\n----------------------------------------\n\nTITLE: Implementing Page/Section Break Indicators in HTML for SEC Filing\nDESCRIPTION: This HTML code uses comments and `DIV` elements with specific CSS styles (borders, margins, `break-before: page`) to denote page breaks or logical section boundaries within an SEC filing document. The comments `<!-- Field: Page; Sequence: 3 -->` and `<!-- Field: /Page -->` likely serve as machine-readable markers for automated processing or defining the document's structure.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0001104659-25-002604.txt#_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<!-- Field: Page; Sequence: 3 -->\n    <DIV STYLE=\"margin-top: 12pt; margin-bottom: 6pt; border-bottom: Black 1pt solid\"><P STYLE=\"margin: 0pt\">&nbsp;</P></DIV>\n    <DIV STYLE=\"break-before: page; margin-top: 6pt; margin-bottom: 12pt\"><P STYLE=\"margin: 0pt\">&nbsp;</P></DIV>\n    <!-- Field: /Page -->\n```\n\n----------------------------------------\n\nTITLE: Managing Interactive Reference Table Display in Vanilla JavaScript\nDESCRIPTION: Implements functions for a global `Show` object, including logic to show, hide, and toggle XBRL reference tables in the browser. Dependencies: requires the document DOM to have specific node structures and unique element IDs for referencing. Key parameters are DOM elements or IDs; functions read or create table elements and manipulate their `display` style. Inputs are source elements and node or ID references; outputs are changes in DOM visibility/state. Limitations include reliance on specific HTML structure and absence of error handling for missing elements.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0000943374-24-000509.txt#_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Edgar(tm) Renderer was created by staff of the U.S. Securities and Exchange Commission.  Data and content created by government employees within the scope of their employment are not subject to domestic copyright protection. 17 U.S.C. 105.\nvar Show={};Show.LastAR=null,Show.showAR=function(a,r,w){if(Show.LastAR)Show.hideAR();var e=a;while(e&&e.nodeName!='TABLE')e=e.nextSibling;if(!e||e.nodeName!='TABLE'){var ref=((window)?w.document:document).getElementById(r);if(ref){e=ref.cloneNode(!0);\ne.removeAttribute('id');a.parentNode.appendChild(e)}}\nif(e)e.style.display='block';Show.LastAR=e};Show.hideAR=function(){Show.LastAR.style.display='none'};Show.toggleNext=function(a){var e=a;while(e.nodeName!='DIV')e=e.nextSibling;if(!e.style){}else if(!e.style.display){}else{var d,p_;if(e.style.display=='none'){d='block';p='-'}else{d='none';p='+'}\ne.style.display=d;if(a.textContent){a.textContent=p+a.textContent.substring(1)}else{a.innerText=p+a.innerText.substring(1)}}}\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Markers for Fields\nDESCRIPTION: These HTML comments are used as markers or placeholders within the document structure, indicating the start and end of specific fields like 'Rule-Page' and 'Page'. They do not contain executable code but serve as metadata within the HTML source.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0001104659-25-002604.txt#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- Field: Rule-Page -->\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- Field: /Rule-Page -->\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- Field: Page; Sequence: 1 -->\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- Field: /Page -->\n```\n\n----------------------------------------\n\nTITLE: Defining Table Rows for SEC Filing Data in HTML\nDESCRIPTION: This HTML snippet defines several rows (`<TR>`) within a table, likely part of an SEC filing document. It displays data points like 'SHARED DISPOSITIVE POWER' and 'AGGREGATE AMOUNT BENEFICIALLY OWNED', along with their corresponding values (e.g., 67,570,593). Inline styles are heavily used for formatting, including borders, padding, fonts, and alignment. It also includes rows for checkboxes and percentage representation.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0001104659-25-002604.txt#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">SHARED DISPOSITIVE POWER</FONT></TD>\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><P STYLE=\"margin: 0pt 0\">67,570,593</P></TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">11</FONT></TD>\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">AGGREGATE AMOUNT BENEFICIALLY OWNED BY EACH REPORTING PERSON</FONT></TD>\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><P STYLE=\"margin: 0pt 0\">67,570,593</P></TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">12</FONT></TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">CHECK BOX IF THE AGGREGATE AMOUNT IN ROW (11) EXCLUSED CERTAIN SHARES</FONT></TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Wingdings; font-size: 10pt\">&uml;</FONT></TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">13</FONT></TD>\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">PERCENT OF CLASS REPRESENTED BY AMOUNT IN ROW (11)</FONT></TD>\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">67.2%</FONT></TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">14</FONT></TD>\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">TYPE OF REPORTING PERSON</FONT></TD>\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">CO</FONT></TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  </TABLE>\n```\n\n----------------------------------------\n\nTITLE: Generating Hidden Reference Popups for XBRL Table Rows - HTML & JavaScript\nDESCRIPTION: This snippet defines hidden HTML tables (display:none) for each field in the summary table, containing definitions and attribute details for XBRL data items such as Amendment Flag and City Area Code. JavaScript event handlers on the main summary table invoke Show.showAR to show these hidden tables as reference modals, and link to Show.toggleNext to expand details. Dependencies include an existing Show JavaScript utility with methods for showing/hiding content. Each popup is context-specific, carrying XBRL metadata (field name, namespace, data type, period type, etc) and is displayed on-demand. Inputs come from user clicks; outputs are modal popups with field information. Limitations: requires relevant JavaScript logic and CSS for modals and for hiding these elements by default.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0000943374-24-000509.txt#_snippet_19\n\nLANGUAGE: HTML\nCODE:\n```\n<table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" class=\\\"authRefData\\\" style=\\\"display: none;\\\" id=\\\"defref_dei_AmendmentFlag\\\">\\n<tr><td class=\\\"hide\\\"><a style=\\\"color: white;\\\" href=\\\"javascript:void(0);\\\" onclick=\\\"Show.hideAR();\\\">X</a></td></tr>\\n<tr><td><div class=\\\"body\\\" style=\\\"padding: 2px;\\\">\\n<a href=\\\"javascript:void(0);\\\" onclick=\\\"Show.toggleNext( this );\\\">- Definition</a><div><p>Boolean flag that is true when the XBRL content amends previously-filed or accepted submission.</p></div>\\n<a href=\\\"javascript:void(0);\\\" onclick=\\\"Show.toggleNext( this );\\\">+ References</a><div style=\\\"display: none;\\\"><p>No definition available.</p></div>\\n<a href=\\\"javascript:void(0);\\\" onclick=\\\"Show.toggleNext( this );\\\">+ Details</a><div style=\\\"display: none;\\\"><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\">\\n<tr>\\n<td><strong> Name:</strong></td>\\n<td style=\\\"white-space:nowrap;\\\">dei_AmendmentFlag</td>\\n</tr>\\n<tr>\\n<td style=\\\"padding-right: 4px;white-space:nowrap;\\\"><strong> Namespace Prefix:</strong></td>\\n<td>dei_</td>\\n</tr>\\n<tr>\\n<td><strong> Data Type:</strong></td>\\n<td>xbrli:booleanItemType</td>\\n</tr>\\n<tr>\\n<td><strong> Balance Type:</strong></td>\\n<td>na</td>\\n</tr>\\n<tr>\\n<td><strong> Period Type:</strong></td>\\n<td>duration</td>\\n</tr>\\n</table></div>\\n</div></td></tr>\\n</table>\\n<table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" class=\\\"authRefData\\\" style=\\\"display: none;\\\" id=\\\"defref_dei_CityAreaCode\\\">\\n<tr><td class=\\\"hide\\\"><a style=\\\"color: white;\\\" href=\\\"javascript:void(0);\\\" onclick=\\\"Show.hideAR();\\\">X</a></td></tr>\\n<tr><td><div class=\\\"body\\\" style=\\\"padding: 2px;\\\">\\n<a href=\\\"javascript:void(0);\\\" onclick=\\\"Show.toggleNext( this );\\\">- Definition</a><div><p>Area code of city</p></div>\\n<a href=\\\"javascript:void(0);\\\" onclick=\\\"Show.toggleNext( this );\\\">+ References</a><div style=\\\"display: none;\\\"><p>No definition available.</p></div>\\n<a href=\\\"javascript:void(0);\\\" onclick=\\\"Show.toggleNext( this );\\\">+ Details</a><div style=\\\"display: none;\\\"><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\">\\n<tr>\\n<td><strong> Name:</strong></td>\\n<td style=\\\"white-space:nowrap;\\\">dei_CityAreaCode</td>\\n</tr>\\n<tr>\\n<td style=\\\"padding-right: 4px;white-space:nowrap;\\\"><strong> Namespace Prefix:</strong></td>\\n<td>dei_</td>\\n</tr>\\n<tr>\\n<td><strong> Data Type:</strong></td>\\n<td>xbrli:normalizedStringItemType</td>\\n</tr>\\n<tr>\\n<td><strong> Balance Type:</strong></td>\\n<td>na</td>\\n</tr>\\n<tr>\\n<td><strong> Period Type:</strong></td>\\n<td>duration</td>\\n</tr>\\n</table></div>\\n</div></td></tr>\\n</table>\\n<table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" class=\\\"authRefData\\\" style=\\\"display: none;\\\" id=\\\"defref_dei_CoverAbstract\\\">\\n<tr><td class=\\\"hide\\\"><a style=\\\"color: white;\\\" href=\\\"javascript:void(0);\\\" onclick=\\\"Show.hideAR();\\\">X</a></td></tr>\\n<tr><td><div class=\\\"body\\\" style=\\\"padding: 2px;\\\">\\n<a href=\\\"javascript:void(0);\\\" onclick=\\\"Show.toggleNext( this );\\\">- Definition</a><div><p>Cover page.</p></div>\\n<a href=\\\"javascript:void(0);\\\" onclick=\\\"Show.toggleNext( this );\\\">+ References</a><div style=\\\"display: none;\\\"><p>No definition available.</p></div>\\n<a href=\\\"javascript:void(0);\\\" onclick=\\\"Show.toggleNext( this );\\\">+ Details</a><div style=\\\"display: none;\\\"><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\">\\n<tr>\\n<td><strong> Name:</strong></td>\\n<td style=\\\"white-space:nowrap;\\\">dei_CoverAbstract</td>\\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Defining Table Structure for Reporting Data in HTML\nDESCRIPTION: This HTML snippet defines table rows within a larger table structure. It displays specific data points like an ownership percentage (67.2%) and the 'TYPE OF REPORTING PERSON' (PN) using table cells (`<td>`). Inline styles are applied for formatting, including borders, padding, and font properties via `STYLE` attributes on `<td>` and `<FONT>` tags.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0001104659-25-002604.txt#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">67.2%</FONT></TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">14</FONT></TD>\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">TYPE OF REPORTING PERSON</FONT></TD>\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">PN</FONT></TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  </TABLE>\n```\n\n----------------------------------------\n\nTITLE: Parsing SEC Filing Header Metadata (SGML)\nDESCRIPTION: This SGML snippet represents the header section of an SEC filing (0001104659-25-002604.hdr.sgml). It contains metadata about the filing, such as acceptance datetime, accession number, submission type (SC TO-T/A), document count, filing dates, group members, subject company details (name, CIK, SIC, address), and filer details (name, CIK, SIC, address, former name). This structured data is used by the SEC EDGAR system.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0001104659-25-002604.txt#_snippet_0\n\nLANGUAGE: sgml\nCODE:\n```\n<SEC-HEADER>0001104659-25-002604.hdr.sgml : 20250110\n<ACCEPTANCE-DATETIME>20250110171538\nACCESSION NUMBER:\t\t0001104659-25-002604\nCONFORMED SUBMISSION TYPE:\tSC TO-T/A\nPUBLIC DOCUMENT COUNT:\t\t2\nFILED AS OF DATE:\t\t20250110\nDATE AS OF CHANGE:\t\t20250110\nGROUP MEMBERS:\t\tAMERICAN ENTERTAINMENT PROPERTIES CORP.\nGROUP MEMBERS:\t\tBECKTON CORP.\nGROUP MEMBERS:\t\tCARL C. ICAHN\nGROUP MEMBERS:\t\tICAHN ENTERPRISES G.P. INC.\nGROUP MEMBERS:\t\tICAHN ENTERPRISES L.P.\nGROUP MEMBERS:\t\tIEP ENERGY HOLDING LLC\n\nSUBJECT COMPANY:\n\n\tCOMPANY DATA:\n\t\tCOMPANY CONFORMED NAME:\t\t\tCVR ENERGY INC\n\t\tCENTRAL INDEX KEY:\t\t\t0001376139\n\t\tSTANDARD INDUSTRIAL CLASSIFICATION:\tPETROLEUM REFINING [2911]\n\t\tORGANIZATION NAME:           \t01 Energy & Transportation\n\t\tIRS NUMBER:\t\t\t\t000000000\n\t\tSTATE OF INCORPORATION:\t\t\tDE\n\t\tFISCAL YEAR END:\t\t\t1231\n\n\tFILING VALUES:\n\t\tFORM TYPE:\t\tSC 13D/A\n\t\tSEC ACT:\t\t1934 Act\n\t\tSEC FILE NUMBER:\t005-83522\n\t\tFILM NUMBER:\t\t25523922\n\n\tBUSINESS ADDRESS:\n\t\tSTREET 1:\t\t2277 PLAZA DRIVE\n\t\tSTREET 2:\t\tSUITE 500\n\t\tCITY:\t\t\tSUGAR LAND\n\t\tSTATE:\t\t\tTX\n\t\tZIP:\t\t\t77479\n\t\tBUSINESS PHONE:\t\t(281) 207-3200\n\n\tMAIL ADDRESS:\n\t\tSTREET 1:\t\t2277 PLAZA DRIVE\n\t\tSTREET 2:\t\tSUITE 500\n\t\tCITY:\t\t\tSUGAR LAND\n\t\tSTATE:\t\t\tTX\n\t\tZIP:\t\t\t77479\n\nSUBJECT COMPANY:\n\n\tCOMPANY DATA:\n\t\tCOMPANY CONFORMED NAME:\t\t\tCVR ENERGY INC\n\t\tCENTRAL INDEX KEY:\t\t\t0001376139\n\t\tSTANDARD INDUSTRIAL CLASSIFICATION:\tPETROLEUM REFINING [2911]\n\t\tORGANIZATION NAME:           \t01 Energy & Transportation\n\t\tIRS NUMBER:\t\t\t\t000000000\n\t\tSTATE OF INCORPORATION:\t\t\tDE\n\t\tFISCAL YEAR END:\t\t\t1231\n\n\tFILING VALUES:\n\t\tFORM TYPE:\t\tSC TO-T/A\n\t\tSEC ACT:\t\t1934 Act\n\t\tSEC FILE NUMBER:\t005-83522\n\t\tFILM NUMBER:\t\t25523921\n\n\tBUSINESS ADDRESS:\n\t\tSTREET 1:\t\t2277 PLAZA DRIVE\n\t\tSTREET 2:\t\tSUITE 500\n\t\tCITY:\t\t\tSUGAR LAND\n\t\tSTATE:\t\t\tTX\n\t\tZIP:\t\t\t77479\n\t\tBUSINESS PHONE:\t\t(281) 207-3200\n\n\tMAIL ADDRESS:\n\t\tSTREET 1:\t\t2277 PLAZA DRIVE\n\t\tSTREET 2:\t\tSUITE 500\n\t\tCITY:\t\t\tSUGAR LAND\n\t\tSTATE:\t\t\tTX\n\t\tZIP:\t\t\t77479\n\nFILED BY:\n\n\tCOMPANY DATA:\n\t\tCOMPANY CONFORMED NAME:\t\t\tICAHN ENTERPRISES HOLDINGS L.P.\n\t\tCENTRAL INDEX KEY:\t\t\t0001034563\n\t\tSTANDARD INDUSTRIAL CLASSIFICATION:\tMOTOR VEHICLE PARTS & ACCESSORIES [3714]\n\t\tORGANIZATION NAME:           \t04 Manufacturing\n\t\tIRS NUMBER:\t\t\t\t133398767\n\t\tSTATE OF INCORPORATION:\t\t\tDE\n\t\tFISCAL YEAR END:\t\t\t1231\n\n\tFILING VALUES:\n\t\tFORM TYPE:\t\tSC TO-T/A\n\n\tBUSINESS ADDRESS:\n\t\tSTREET 1:\t\t16690 COLLINS AVE,\n\t\tSTREET 2:\t\tPH\n\t\tCITY:\t\t\tSUNNY ISLES\n\t\tSTATE:\t\t\tFL\n\t\tZIP:\t\t\t33160\n\t\tBUSINESS PHONE:\t\t(305) 422-4000\n\n\tMAIL ADDRESS:\n\t\tSTREET 1:\t\t16690 COLLINS AVE,\n\t\tSTREET 2:\t\tPH\n\t\tCITY:\t\t\tSUNNY ISLES\n\t\tSTATE:\t\t\tFL\n\t\tZIP:\t\t\t33160\n\n\tFORMER COMPANY:\n\t\tFORMER CONFORMED NAME:\tAMERICAN REAL ESTATE HOLDINGS L P\n\t\tDATE OF NAME CHANGE:\t19980311\n</SEC-HEADER>\n```\n\n----------------------------------------\n\nTITLE: Defining Table Structure for Reporting Person Details in HTML\nDESCRIPTION: This HTML snippet initiates a new table (`<TABLE>`) designed to display reporting person details in an SEC filing context. It sets up rows (`<TR>`) for CUSIP number, reporting person name ('Beckton Corp.'), checkboxes for group membership, SEC use only field, source of funds, legal proceedings checkbox, citizenship/organization place ('Delaware'), and introduces the section for the number of shares beneficially owned. Inline styles dictate font, borders, padding, and width.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0001104659-25-002604.txt#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<TABLE CELLSPACING=\"0\" CELLPADDING=\"0\" STYLE=\"font: 10pt Times New Roman, Times, Serif; width: 100%; border-collapse: collapse\">\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD COLSPAN=\"2\" STYLE=\"border-top: Black 1pt solid; padding-bottom: 10pt; border-bottom: Black 1pt solid; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\"><B>CUSIP No. 12662P108</B></FONT></TD>\n    <TD STYLE=\"border-top: Black 1pt solid; padding-bottom: 10pt; border-bottom: Black 1pt solid; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"padding-bottom: 10pt; width: 24px; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">1</FONT></TD>\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">NAME OF REPORTING PERSON</FONT></TD>\n    <TD STYLE=\"padding-bottom: 10pt; width: 48px; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">Beckton Corp.</FONT></TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">2</FONT></TD>\n    <TD STYLE=\"padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">CHECK THE APPROPRIATE BOX IF A MEMBER OF A GROUP</FONT></TD>\n    <TD STYLE=\"padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">(a) </FONT><FONT STYLE=\"font-family: Wingdings; font-size: 10pt\">&uml;</FONT></TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">(b) </FONT><FONT STYLE=\"font-family: Wingdings; font-size: 10pt\">&uml;</FONT></TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">3</FONT></TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">SEC USE ONLY</FONT></TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">4</FONT></TD>\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">SOURCE OF FUNDS</FONT></TD>\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">Not applicable</FONT></TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">5</FONT></TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">CHECK BOX IF LEGAL PROCEEDINGS IS REQUIRED PURSUANT TO ITEMS 2(d) or 2(e)</FONT></TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Wingdings; font-size: 10pt\">&uml;</FONT></TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">6</FONT></TD>\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">CITIZENSHIP OR PLACE OF ORGANIZATION</FONT></TD>\n    <TD STYLE=\"padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">Delaware</FONT></TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n    <TD COLSPAN=\"2\" STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\"><FONT STYLE=\"font-family: Times New Roman, Times, Serif; font-size: 10pt\">NUMBER OF SHARES BENEFICIALLY OWNED BY EACH REPORTING PERSON WITH:</FONT></TD>\n    <TD STYLE=\"border-bottom: Black 1pt solid; padding-bottom: 10pt; padding-top: 1pt\">&nbsp;</TD></TR>\n  <TR STYLE=\"vertical-align: bottom\">\n```\n\n----------------------------------------\n\nTITLE: Creating Styled Divider using HTML DIV and P tags\nDESCRIPTION: This HTML snippet defines a DIV element with specific inline styles for top margin (12pt), bottom margin (6pt), and a solid black bottom border (1pt), creating a visual separator. It contains an empty paragraph tag styled with no margin and a non-breaking space (`&nbsp;`), likely for maintaining the DIV's height or for spacing purposes within the styled container.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0001104659-25-002604.txt#_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<DIV STYLE=\"margin-top: 12pt; margin-bottom: 6pt; border-bottom: Black 1pt solid\"><P STYLE=\"margin: 0pt\">&nbsp;</P></DIV>\n```\n\n----------------------------------------\n\nTITLE: Styling Paragraphs using Inline CSS in HTML\nDESCRIPTION: Defines HTML paragraphs (`<P>`) with specific inline CSS styles applied via the `STYLE` attribute. These styles control font properties (family like 'Times New Roman', size like '10pt'), margins ('0pt 0'), and text color ('#231F20'), ensuring consistent formatting within the SEC filing document.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0001104659-25-002604.txt#_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; margin: 0pt 0\">...</P>\n```\n\nLANGUAGE: html\nCODE:\n```\n<P STYLE=\"color: #231F20; font: 10pt Times New Roman, Times, Serif; margin: 0pt 0\">...</P>\n```\n\nLANGUAGE: html\nCODE:\n```\n<P STYLE=\"font: 10pt Times New Roman, Times, Serif; color: #231F20; margin: 0pt 0\"></P>\n```\n\n----------------------------------------\n\nTITLE: Loading rich extension (Jupyter/IPython)\nDESCRIPTION: This magic command loads the `rich` extension, typically used within a Jupyter Notebook or IPython environment, to enable rich text formatting for outputs.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/XBRL2-QuarterlyStatements.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n%load_ext rich\n```\n\n----------------------------------------\n\nTITLE: Installing edgartools Package in Python\nDESCRIPTION: This snippet installs the edgartools Python package via pip, which is required for all subsequent code examples in the notebook. It should be run in a Jupyter or Colab environment. No parameters are needed, and the output will display the installation progress.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/notebooks/Extract-Earnings-Releases.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install edgartools\n```\n\n----------------------------------------\n\nTITLE: Marking End of Page Field using HTML Comment\nDESCRIPTION: This HTML comment likely marks the logical end of the 'Page' field or section that was previously initiated, possibly by a comment like `<!-- Field: Page; ... -->`. It functions as a closing delimiter, signaling to document processing systems that the specific field context has concluded.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0001104659-25-002604.txt#_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<!-- Field: /Page -->\n```\n\n----------------------------------------\n\nTITLE: Defining Page Metadata using HTML Comment\nDESCRIPTION: This HTML comment embeds structured metadata fields ('Field', 'Sequence', 'Options') possibly related to pagination or document sectioning within an SEC filing context. It indicates the start of a 'Page' field, identifies it as sequence number 2, and flags it with the 'Last' option, likely serving as a marker for automated document processing systems.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0001104659-25-002604.txt#_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<!-- Field: Page; Sequence: 2; Options: Last -->\n```\n\n----------------------------------------\n\nTITLE: HTML Metadata Comment for Page Handling (Sequence 1)\nDESCRIPTION: This HTML comment appears to function as metadata within an automated document processing system, possibly related to SEC EDGAR filings. It identifies a 'Page' field with a sequence number of 1, likely marking the beginning or a specific point within a page or section for pagination or structuring purposes.\nSOURCE: https://github.com/dgunning/edgartools/blob/main/data/sgml/0001104659-25-002604.txt#_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<!-- Field: Page; Sequence: 1 -->\n    <DIV STYLE=\"margin-top: 12pt; margin-bottom: 6pt; border-bottom: Black 1pt solid\"><P STYLE=\"margin: 0pt\">&nbsp;</P></DIV>\n    <DIV STYLE=\"break-before: page; margin-top: 6pt; margin-bottom: 12pt\"><P STYLE=\"margin: 0pt\">&nbsp;</P></DIV>\n    <!-- Field: /Page -->\n```"
  }
]