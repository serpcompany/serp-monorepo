[
  {
    "owner": "mautic",
    "repo": "developer-documentation-new",
    "content": "TITLE: Implementing Mautic Landing Page Extensions with PageSubscriber in PHP\nDESCRIPTION: A complete example of a PageSubscriber class that implements both landing page tokens and A/B test winning criteria. The class subscribes to PAGE_ON_BUILD and PAGE_ON_DISPLAY events to register a custom token and A/B test criteria, and to replace tokens with content when the page is displayed.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/landing_pages.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// plugins/HelloWorldBundle/EventListener/PageSubscriber.php\n\ndeclare(strict_types=1);\n\nnamespace MauticPlugin\\HelloWorldBundle\\EventListener;\n\nuse Mautic\\CoreBundle\\Helper\\TemplatingHelper;\nuse Mautic\\PageBundle\\PageEvents;\nuse Mautic\\PageBundle\\Event\\PageBuilderEvent;\nuse Mautic\\PageBundle\\Event\\PageDisplayEvent;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass PageSubscriber implements EventSubscriberInterface\n{\n    private TemplatingHelper $templating;\n\n    public function __construct(TemplatingHelper $templating)\n    {\n        $this->templating = $templating;\n    }\n\n    static public function getSubscribedEvents()\n    {\n        return [\n            PageEvents::PAGE_ON_BUILD   => ['onPageBuild', 0],\n            PageEvents::PAGE_ON_DISPLAY => ['onPageDisplay', 0]\n        ];\n    }\n\n    /**\n    * Register the tokens and a custom A/B test winner\n    */\n    public function onPageBuild(PageBuilderEvent $event)\n    {\n        // Add page token\n        $event->addToken('{helloworld.token}', 'Helloworld token');\n\n        // Add AB Test Winner Criteria\n        $event->addAbTestWinnerCriteria(\n            'helloworld.planetvisits',\n            array(\n                // Label to group by\n                'group'    => 'plugin.helloworld.header',\n\n                // Label for this specific a/b test winning criteria\n                'label'    => 'plugin.helloworld.pagetokens.',\n\n                // Static callback function that will be used to determine the winner\n                'callback' => '\\MauticPlugin\\HelloWorldBundle\\Helper\\AbTestHelper::determinePlanetVisitWinner'\n            )\n        );\n    }\n\n    /**\n    * Search and replace tokens with content\n    */\n    public function onPageDisplay(PageDisplayEvent $event)\n    {\n        // Get content\n        $content = $event->getContent();\n\n        // Search and replace tokens\n        $content = str_replace(\n            '{helloworld.token}',\n            $this->templating->render('HelloWorldBundle:SubscribedEvents\\PageToken:token.html.php');,\n            $content\n        );\n\n        // Set updated content\n        $event->setContent($content);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Routes with Controller Bindings in Mautic (PHP)\nDESCRIPTION: This PHP code registers URL route definitions for a plugin across different firewalls ('main', 'public', 'api') using a nested associative array structure. Each route entry specifies its path and the controller (either as a callable array or as an invokable class), with support for defaults, parameter requirements, and HTTP methods. The structure enables granular control over URI mapping, controller action selection, and route-level constraints such as required user authentication or accessibility via API calls. Dependencies include MauticPlugin bundle namespaces and Symfony-compatible controllers. Inputs are route names and definitions; outputs are registered routes respecting ordering and uniqueness rules.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/plugins/config.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n\\n// ...\\n\\n'routes' => [\\n    'main'   => [\\n        'plugin_helloworld_world' => [\\n            'path'         => '/hello/{world}',\\n            'controller'   => [MauticPlugin\\HelloWorldBundle\\Controller\\DefaultController, 'world'],\\n            'defaults'     => [\\n                'world' => 'earth',\\n            ],\\n            'requirements' => [\\n                'world' => 'earth|mars',\\n            ],\\n        ],\\n        'plugin_helloworld_list'  => [\\n            'path'       => '/hello/{page}',\\n            'controller' => [MauticPlugin\\HelloWorldBundle\\Controller\\DefaultController, 'index'],\\n        ],\\n        'plugin_helloworld_admin' => [\\n            'path'       => '/hello/admin',\\n            'controller' => [MauticPlugin\\HelloWorldBundle\\Controller\\DefaultController, 'admin']\\n        ],\\n    ],\\n    'public' => [\\n        'plugin_helloworld_goodbye' => [\\n            'path'       => '/hello/goodbye',\\n            'controller' => MauticPlugin\\HelloWorldBundle\\Controller\\GoodbyeController::class, // assumes an invokable class\\n        ],\\n        'plugin_helloworld_contact' => [\\n            'path'       => '/hello/contact',\\n            'controller' => MauticPlugin\\HelloWorldBundle\\Controller\\ContactController::class, // assumes an invokable class\\n        ],\\n    ],\\n    'api'    => [\\n        'plugin_helloworld_api' => [\\n            'path'       => '/hello',\\n            'controller' => MauticPlugin\\HelloWorldBundle\\Controller\\Api\\HelloController::class, // assumes an invokable class\\n            'method'     => 'GET',\\n        ],\\n    ],\\n],\\n\\n// ...\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Continuous Integration for Mautic Plugins in YAML\nDESCRIPTION: This YAML configuration file sets up GitHub Actions for running tests on Mautic plugins. It defines environments, job strategies, service containers, and integrates tools like PHPStan, PHP CS Fixer, Rector, and Twig Lint for comprehensive code quality checks. It also includes instructions for caching dependencies and running PHPUnit tests.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/plugins/continuous-integration.rst#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Mautic Plugin tests\n\non:\n  push:\n    branches:\n      - main # Main branch\n      - '[0-9]+\\.[0-9]+'\n  pull_request:\n\nenv:\n  PLUGIN_DIR: plugins/HelloWorldBundle # Same as extra.install-directory-name in composer.json\n\njobs:\n  phpunit:\n    runs-on: ubuntu-latest\n    \n    strategy:\n      matrix:\n        php-versions: ['7.4', '8.0'] # The supported PHP versions\n        db-types: ['mysql'] # can be: ['mysql', 'mariadb'] but not necessary for this plugin that does not add any DB schema\n        mautic-versions: ['4.3', '4.4'] # The supported Mautic versions\n  \n    name: Tests on PHP ${{ matrix.php-versions }}, ${{ matrix.db-types }}, Mautic ${{ matrix.mautic-versions }}\n\n    services:\n      database:\n        image: ${{ matrix.db-types == 'mysql' && 'mysql:5.7' || 'mariadb:10.3' }}\n        env:\n          MYSQL_ALLOW_EMPTY_PASSWORD: yes\n          MYSQL_DATABASE: mautictest\n        ports:\n          - 3306\n        options: >-\n          --shm-size=2gb\n          --name=${{ matrix.db-types }}\n          --tmpfs=/var/lib/mysql\n          --health-cmd=\"mysqladmin ping\" \n          --health-interval=10s \n          --health-timeout=5s \n          --health-retries=3\n\n    steps:\n    - name: Checkout Mautic 4\n      uses: actions/checkout@v3\n      with:\n        repository: mautic/mautic\n        ref: ${{ matrix.mautic-versions }}\n\n    - name: Checkout this plugin\n      uses: actions/checkout@v3\n      with:\n        path: ${{ env.PLUGIN_DIR }}\n\n    - name: Setup PHP, with composer and extensions\n      uses: shivammathur/setup-php@v2\n      with:\n        php-version: ${{ matrix.php-versions }}\n        ini-values: -dpcov.enabled=0, pcov.directory=.\n        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql, pdo_mysql\n        coverage: pcov\n\n    - name: add MySQL config file\n      run: |\n        mysqldump --version\n        mysqldump --print-defaults\n        cp .github/ci-files/.my.cnf ~/.my.cnf\n        mysqldump --print-defaults\n\n    - name: Set SYMFONY_ENV to test\n      run: |\n        echo \"SYMFONY_ENV=test\" >> $GITHUB_ENV\n        echo \"MAUTIC_ENV=test\" >> $GITHUB_ENV\n\n    - name: Get composer cache directory\n      id: composer-cache\n      run: echo \"dir=$(composer config cache-files-dir)\" >> $GITHUB_OUTPUT\n\n    - name: Cache composer dependencies\n      uses: actions/cache@v3\n      with:\n        path: ${{ steps.composer-cache.outputs.dir }}\n        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}\n        restore-keys: ${{ runner.os }}-composer-\n\n    - name: Install Composer dependencies\n      run: composer install\n\n    - name: Install Mautic\n      env:\n        DB_PORT: ${{ job.services.database.ports[3306] }}\n      run: |\n        cp ./.github/ci-files/local.php ./app/config/local.php\n        php bin/console mautic:install --force http://localhost\n\n    - name: Install Plugins\n      env:\n        DB_PORT: ${{ job.services.database.ports[3306] }}\n      run: php bin/console mautic:plugins:install --env=dev\n    \n    - name: Run Code Style check\n      run: bin/php-cs-fixer fix ${{ env.PLUGIN_DIR }} --config=.php-cs-fixer.php -v --dry-run --show-progress=dots --diff\n    \n    - name: PHPSTAN\n      run: composer phpstan -- ${{ env.PLUGIN_DIR }}\n\n    - name: Rector\n      run: composer rector -- --dry-run --no-progress-bar ${{ env.PLUGIN_DIR }}\n\n    - name: Twig Lint\n      run: bin/console lint:twig ${{ env.PLUGIN_DIR }}\n    \n    - name: Run PHPUNIT tests\n      env:\n        DB_PORT: ${{ job.services.database.ports[3306] }}\n      run: XDEBUG_MODE=coverage APP_DEBUG=0 php -dpcov.enabled=1 -dpcov.directory=. -dpcov.exclude=\"~tests|themes|vendor~\" bin/phpunit -d memory_limit=1G --bootstrap vendor/autoload.php --configuration ${{ env.PLUGIN_DIR }}/phpunit.xml --coverage-clover=${{ env.PLUGIN_DIR }}/coverage.xml --coverage-text\n\n    - name: Coverage report\n      run: cat ${{ env.PLUGIN_DIR }}/coverage.xml\n\n    - name: Upload coverage report\n      if: ${{ matrix.php-versions == '8.0' && matrix.db-types == 'mysql' && matrix.mautic-versions == '4.4' }} # upload just once, change for your matrix\n      uses: codecov/codecov-action@v3\n      with:\n        token: ${{ secrets.CODECOV_TOKEN }}\n        fail_ci_if_error: true\n        working-directory: ${{ env.PLUGIN_DIR }}\n        verbose: true\n    \n    - name: Upload logs as artifacts\n      uses: actions/upload-artifact@v3\n      with:\n        name: mautic-logs\n        path: var/logs/\n\n```\n\n----------------------------------------\n\nTITLE: JavaScript Form Processing Hooks in MauticJS\nDESCRIPTION: This JavaScript code demonstrates how to create a MauticFormCallback object to run additional code before or after form submission. It includes various callback functions for form validation, error handling, and response processing.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/tracking_script.rst#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (typeof MauticFormCallback == 'undefined') {\n    var MauticFormCallback = {};\n}\nMauticFormCallback['replaceWithFormName'] = {\n    onValidateEnd: function (formValid) {\n         // before form submit\n    },\n    onResponse: function (response) { \n         // after form submit\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Webhook Requests in Node.js Express\nDESCRIPTION: Using the Node.js Express framework, this snippet demonstrates handling incoming Mautic webhook requests, logging the data, and verifying the request signature using HMAC SHA-256. It requires Node.js with Express and crypto modules. The script listens for incoming POST requests, processes the JSON body, and verifies the webhook's authenticity by comparing the received header signature with a computed one.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/webhooks/example_scripts.rst#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n'use strict';\n\nconst express = require('express');\nconst crypto = require('crypto');\nconst app = express();\nconst port = 3000;\nconst SECRET = 'mySecret';\n\n// save raw body\napp.use ((req, res, next) => {\n    let data = '';\n    req.setEncoding('utf8');\n\n    req.on('data', chunk => data += chunk);\n    req.on('end', () => {\n        req.body = data;\n        return next();\n    });\n});\n\napp.post('/webhook', (req, res) => {\n\n    // optional signature verification\n    const receivedSignature = req.headers['webhook-signature'];\n    console.log('Received signature (in header):', receivedSignature);\n\n    const computedSignature = crypto.createHmac('sha256', SECRET).update(req.body).digest('base64');\n    console.log('Computed signature (from body):', computedSignature);\n\n    if (receivedSignature === computedSignature) {\n        console.log('Webhook authenticity verification OK');\n    } else {\n        console.log('Webhook not authentic!');\n    }\n\n    // TODO: process body\n    const body = JSON.parse(req.body);\n\n    if (body[\"mautic.lead_post_save_new\"].length) {\n        // do something with the array of newly identified Contacts\n    }\n\n    res.send();\n});\n\napp.listen(port, () => console.log(`App listening on port ${port}!`));\n```\n\n----------------------------------------\n\nTITLE: Editing Multiple Mautic Contacts (Batch PUT/PATCH) in PHP\nDESCRIPTION: This snippet illustrates how to edit multiple Mautic contacts in a batch using `$contactApi->editBatch()`. It prepares an array `$data` where each element is an array representing a contact update, including the contact `id` and the fields to modify. The `overwriteWithBlank` flag can be set individually for each contact within the batch to control whether empty string values (`''`) should clear the corresponding fields or be ignored.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$data = [\n    [\n        'id'        => 1,\n        'firstname' => 'Jim',\n        'lastname'  => 'Contact',\n        'title'     => '', // This will be ignored because overwriteWithBlank is false by default\n        'email'     => 'jim@example.com',\n        'ipAddress' => $_SERVER['REMOTE_ADDR']\n    ],\n    [\n        'overwriteWithBlank' => true, // This flag will allow you to overwrite any field with a blank value\n        'id'                 => 2,\n        'firstname'          => 'Ashish',\n        'lastname'           => 'Wallach',\n        'title'              => '', // This will set the title to blank because overwriteWithBlank is true\n        'email'              => 'ashish@example.com',\n        'ipAddress'          => $_SERVER['REMOTE_ADDR']\n    ]\n];\n\n$contact = $contactApi->editBatch($data);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom GrapesJS Plugin in Mautic using TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to define, export, and globally register a custom GrapesJS plugin for use in the Mautic GrapesJS Builder. Required dependencies include 'grapesjs' and TypeScript support. The plugin can listen for editor events, log messages, and is registered via a global 'window.MauticGrapesJsPlugins' array. The code supports both TypeScript and vanilla JS. Inputs are the GrapesJS editor and optional plugin options; the output is a registered plugin and potentially console messages. The approach allows modular plugin usage and customization within Mautic's plugin bundle system.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/themes/grapesjs.rst#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport grapesjs from 'grapesjs';\\n\\n// declare type for window so TS will not complain during compiling\\ndeclare global {\\n    interface Window {\\n        MauticGrapesJsPlugins: object[];\\n    }\\n}\\n\\nexport type PluginOptions = {\\n};\\n\\nexport type RequiredPluginOptions = Required<PluginOptions>;\\n\\nconst GrapesJsCustomPlugin: grapesjs.Plugin<PluginOptions> = (editor, opts: Partial<PluginOptions> = {}) => {\\n    const options: RequiredPluginOptions = {\\n        ...opts\\n    };\\n    console.log('Run GrapesJsCustomPlugin...')\\n    console.log('Options passed to GrapesJsCustomPlugin:', options)\\n    editor.on('load', () => {\\n        console.log('GrapesJsCustomPlugin: editor.onLoad()')\\n    });\\n}\\n\\n// export the plugin in case someone wants to use it as source module\\nexport default GrapesJsCustomPlugin;\\n\\n// create a global window-object which holds the information about GrapesJS plugins\\nif (!window.MauticGrapesJsPlugins) window.MauticGrapesJsPlugins = [];\\n// add the plugin-function with a name to the window-object\\nwindow.MauticGrapesJsPlugins.push({\\n    name: 'GrapesJsCustomPlugin', // required\\n    plugin: GrapesJsCustomPlugin, // required\\n    context: ['page', 'email-mjml'], // optional. default is none/empty, so the plugin is always added; options: [page|email-mjml|email-html]\\n    pluginOptions: { options: { test: true, hello: 'world'} } // optional\\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Doctrine ORM Entity with Annotations in PHP\nDESCRIPTION: The following snippet demonstrates how to define an entity using Doctrine ORM annotations. It creates a class representing a database table named 'worlds' with a UUID as the primary identifier. Dependencies include Doctrine ORM and Ramsey\\Uuid package for UUID generation. Key parameters include the @ORM\\Table for naming the table and @ORM\\Id for setting the primary key. The expected output is an entity class with a 'worlds' table containing a column of type GUID.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/plugins/data.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n\\ndeclare(strict_types=1);\\n\\nnamespace Mautic\\UserBundle\\Entity;\\n\\nuse Doctrine\\ORM\\Mapping as ORM;\\nuse Ramsey\\Uuid\\Uuid;\\n\\n/**\\n * @ORM\\Table (name=\\\"worlds\\\")\\n */\\nclass World\\n{\\n    /**\\n     * @ORM\\Column(type=\\\"guid\\\")\\n     * @ORM\\Id\\n     */\\n    private $id;\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Database Migration for Mautic Plugin using AbstractMigration - PHP\nDESCRIPTION: This snippet defines a schema migration class for a Mautic Plugin by extending Mautic\\IntegrationsBundle\\Migration\\AbstractMigration. The migration uses Doctrine DBAL's Schema object to check if the target column exists, and executes SQL alterations only when necessary. It introduces the isApplicable() method to conditionally apply changes, and the up() method to define SQL statements with proper table prefix handling. Required dependencies include Doctrine DBAL and the Mautic IntegrationsBundle; the main parameters are the Schema object and SQL strings. It expects the plugin’s migrations directory to be properly configured. Input is the existing schema; output is the altered schema after the SQL is run.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/plugins/data.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MauticPlugin\\HelloWorldBundle\\Migrations;\n\nuse Doctrine\\DBAL\\Schema\\Schema;\nuse Doctrine\\DBAL\\Schema\\SchemaException;\nuse Mautic\\IntegrationsBundle\\Migration\\AbstractMigration;\n\nclass Version_1_0_1 extends AbstractMigration\n{\n    private $table = 'hello_world';\n\n    protected function isApplicable(Schema $schema): bool\n    {\n        try {\n            return !$schema->getTable($this->concatPrefix($this->table))->hasColumn('is_enabled');\n        } catch (SchemaException $e) {\n            return false;\n        }\n    }\n\n    protected function up(): void\n    {\n        $this->addSql(\"ALTER TABLE `{$this->concatPrefix($this->table)}` ADD `is_enabled` tinyint(1) 0\");\n\n        $this->addSql(\"CREATE INDEX {$this->concatPrefix('is_enabled')} ON {$this->concatPrefix($this->table)}(is_enabled);\");\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Registering the Bundle Extension for Autowired Services - Symfony PHP\nDESCRIPTION: This PHP class registers the Extension for a plugin or bundle and ensures that Symfony will load services.php for this bundle. The code leverages Symfony's DI container mechanisms and must be placed in the DependencyInjection directory, named as [YourPluginName]Extension.php. Dependencies include Symfony's FileLocator, ContainerBuilder, Extension, and PhpFileLoader. The load() method instructs the DI container to import services.php, allowing autowiring configuration to take effect during bundle compilation. The main input is the configurations array, and the expected output is registration of services defined by the bundle. It is crucial to follow the naming convention described so Mautic and Symfony can detect the extension.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/plugins/autowiring.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// *Bundle/DependencyInjection/[YourPluginName]Extension.php\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MauticPlugin\\[YourPluginName]Bundle\\DependencyInjection;\n\nuse Symfony\\Component\\Config\\FileLocator;\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Component\\DependencyInjection\\Extension\\Extension;\nuse Symfony\\Component\\DependencyInjection\\Loader\\PhpFileLoader;\n\nclass Mautic[YourPluginName]Extension extends Extension\n{\n    /**\n     * @param mixed[] $configs\n     */\n    public function load(array $configs, ContainerBuilder $container): void\n    {\n        $loader = new PhpFileLoader($container, new FileLocator(__DIR__.'/../Config'));\n        $loader->load('services.php');\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Three-Legged OAuth2 in Mautic with PHP\nDESCRIPTION: This PHP snippet shows the implementation of three-legged OAuth2 authentication using Mautic. The example authenticates users by redirecting them to a third party for login and then receiving a code for token exchange. Dependencies include Mautic's integration interfaces and Symfony components. The snippet does not require significant configuration beyond setting valid URLs and registering integrations.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/integrations_authentication.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace MauticPlugin\\HelloWorldBundle\\Integration\\Support;\n\nuse GuzzleHttp\\ClientInterface;\nuse Mautic\\IntegrationsBundle\\Integration\\Interfaces\\AuthenticationInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass AuthSupport implements AuthenticationInterface {\n    private ClientInterface $client;\n\n    // ...\n\n    public function authenticateIntegration(Request $request): Response\n    {\n        $code = $request->query->get('code');\n\n        $this->client->authenticate($code);\n\n        return new Response('OK!');\n    }\n}\n\n//\n<?php\nuse kamermans\\OAuth2\\Persistence\\TokenPersistenceInterface;\nuse MauticPlugin\\HelloWorldBundle\\Integration\\HelloWorldIntegration;\nuse Mautic\\IntegrationsBundle\\Auth\\Provider\\Oauth2ThreeLegged\\Credentials\\CodeInterface;\nuse Mautic\\IntegrationsBundle\\Auth\\Provider\\Oauth2ThreeLegged\\Credentials\\CredentialsInterface;\nuse Mautic\\IntegrationsBundle\\Auth\\Provider\\Oauth2ThreeLegged\\Credentials\\RedirectUriInterface;\nuse Mautic\\IntegrationsBundle\\Auth\\Provider\\Oauth2TwoLegged\\Credentials\\ScopeInterface;\nuse Mautic\\IntegrationsBundle\\Auth\\Provider\\Oauth2TwoLegged\\HttpFactory;\nuse Mautic\\IntegrationsBundle\\Auth\\Support\\Oauth2\\ConfigAccess\\ConfigTokenPersistenceInterface;\nuse Mautic\\IntegrationsBundle\\Helper\\IntegrationsHelper;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\Routing\\Router;\n\n/** @var $integrationsHelper IntegrationsHelper */\n$integration = $integrationsHelper->getIntegration(HelloWorldIntegration::NAME);\n\n/** @var Router $router */\n$redirectUrl = $router->generate('mautic_integration_public_callback', ['integration' => HelloWorldIntegration::NAME]);\n\n$configuration = $integration->getIntegrationConfiguration();\n$apiKeys       = $configuration->getApiKeys();\n\n/** @var Request $request */\n$code = $request->get('code');\n\n$credentials = new class(\n    'https://example.com/api/oauth/authorize',\n    'https://example.com/api/oauth/token',\n    $redirectUrl,\n    'scope1,scope2',\n    $apiKeys['client_id'],\n    $apiKeys['client_secret'],\n    $code\n) implements CredentialsInterface, RedirectUriInterface, ScopeInterface, CodeInterface {\n    private $authorizeUrl;\n    private $tokenUrl;\n    private $redirectUrl;\n    private $scope;\n    private $clientId;\n    private $clientSecret;\n    private $code;\n\n    public function __construct(string $authorizeUrl, string $tokenUrl, string $redirectUrl, string $scope, string $clientId, string $clientSecret, ?string $code)\n    {\n        $this->authorizeUrl = $authorizeUrl;\n        $this->tokenUrl     = $tokenUrl;\n        $this->redirectUrl  = $redirectUrl;\n        $this->scope        = $scope;\n        $this->clientId     = $clientId;\n        $this->clientSecret = $clientSecret;\n        $this->code         = $code;\n    }\n\n    public function getAuthorizationUrl(): string\n    {\n        return $this->authorizeUrl;\n    }\n\n    public function getTokenUrl(): string\n    {\n        return $this->tokenUrl;\n    }\n\n    public function getRedirectUri(): string\n    {\n        return $this->redirectUrl;\n    }\n\n    public function getClientId(): ?string\n    {\n        return $this->clientId;\n    }\n\n    public function getClientSecret(): ?string\n    {\n        return $this->clientSecret;\n    }\n\n    public function getScope(): ?string\n    {\n        return $this->scope;\n    }\n\n    public function getCode(): ?string\n    {\n        return $this->code;\n    }\n};\n\n/** @var $tokenPersistenceFactory TokenPersistenceFactory */\n$tokenPersistence = $tokenPersistenceFactory->create($integration);\n$config           = new class($tokenPersistence) implements ConfigTokenPersistenceInterface {\n    private $tokenPersistence;\n\n    public function __construct(TokenPersistenceInterface$tokenPersistence)\n    {\n        $this->tokenPersistence = $tokenPersistence;\n    }\n\n    public function getTokenPersistence(): TokenPersistenceInterface\n    {\n        return $this->tokenPersistence;\n    }\n};\n\n/** @var $factory HttpFactory */\n$client   = $factory->getClient($credentials, $config);\n$response = $client->get('https://example.com/api/fetch');\n```\n\n----------------------------------------\n\nTITLE: Implementing MaintenanceSubscriber for Mautic Maintenance Cleanup in PHP\nDESCRIPTION: A complete example of a maintenance subscriber that hooks into Mautic's cleanup command. It demonstrates how to properly handle both dry run and actual data deletion operations, and how to provide feedback to the CLI command about affected records.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/maintenance.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// plugins\\HelloWorldBundle\\EventListener\\MaintenanceSubscriber.php\n\ndeclare(strict_types=1);\n\nnamespace MauticPlugin\\HelloWorldBundle\\EventListener;\n\nuse Doctrine\\DBAL\\Connection;\nuse Mautic\\CoreBundle\\CoreEvents;\nuse Mautic\\CoreBundle\\Event\\MaintenanceEvent;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\nclass MaintenanceSubscriber implements EventSubscriberInterface\n{\n    protected Connection $db;\n    protected TranslatorInterface $translator;\n\n    public function __construct(Connection $db, TranslatorInterface $translator)\n    {\n        $this->db         = $db;\n        $this->translator = $translator;\n    }\n\n    public static function getSubscribedEvents()\n    {\n        return [\n            CoreEvents::MAINTENANCE_CLEANUP_DATA => ['onDataCleanup', -50]\n        ];\n    }\n\n    public function onDataCleanup(MaintenanceEvent $event)\n    {\n        $qb = $this->db->createQueryBuilder()\n            ->setParameter('date', $event->getDate()->format('Y-m-d H:i:s'));\n\n        if ($event->isDryRun()) {\n            $rows = (int) $qb->select('count(*) as records')\n                ->from(MAUTIC_TABLE_PREFIX . 'worlds', 'w')\n                ->where(\n                    $qb->expr()->gte('w.date_added', ':date')\n                )\n                ->execute()\n                ->fetchColumn();\n        } else {\n            $rows = (int) $qb->delete(MAUTIC_TABLE_PREFIX . 'worlds')\n                ->where(\n                    $qb->expr()->lte('date_added', ':date')\n                )\n                ->execute();\n        }\n\n        $event->setStat($this->translator->trans('mautic.maintenance.hello_world'), $rows, $qb->getSQL(), $qb->getParameters());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Database Schema Migrations for a Mautic Plugin in PHP\nDESCRIPTION: Illustrates how to create a database migration class for a Mautic plugin using Doctrine DBAL and extending `Mautic\\IntegrationsBundle\\Migration\\AbstractMigration`. The class name must follow the `Version_X_Y_Z.php` format, matching the plugin version. The `isApplicable` method determines if the migration should run (e.g., checking if a column exists), and the `up` method executes the necessary SQL queries (using `$this->addSql`) to apply schema changes, ensuring safe and versioned database updates during plugin install/upgrade.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/plugins/installation.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MauticPlugin\\HelloWorldBundle\\Migrations;\n\nuse Doctrine\\DBAL\\Schema\\Schema;\nuse Doctrine\\DBAL\\Schema\\SchemaException;\nuse Mautic\\IntegrationsBundle\\Migration\\AbstractMigration;\n\nclass Version_1_0_1 extends AbstractMigration\n{\n    private $table = 'hello_world';\n\n    protected function isApplicable(Schema $schema): bool\n    {\n        try {\n            return !$schema->getTable($this->concatPrefix($this->table))->hasColumn('is_enabled');\n        } catch (SchemaException $e) {\n            return false;\n        }\n    }\n\n    protected function up(): void\n    {\n        $this->addSql(\"ALTER TABLE `{$this->concatPrefix($this->table)}` ADD `is_enabled` tinyint(1) 0\");\n\n        $this->addSql(\"CREATE INDEX {$this->concatPrefix('is_enabled')} ON {$this->concatPrefix($this->table)}(is_enabled);\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Button Subscriber in Mautic using PHP\nDESCRIPTION: This PHP code defines an event subscriber (`ButtonSubscriber`) that listens for the `CoreEvents::VIEW_INJECT_CUSTOM_BUTTONS` event. The `injectViewButtons` method receives a `CustomButtonEvent` object and uses its `addButton` method to inject custom buttons into different UI locations like the toolbar (`LOCATION_TOOLBAR_ACTIONS`), page actions (`LOCATION_PAGE_ACTIONS`), and list actions (`LOCATION_LIST_ACTIONS`). It demonstrates configuring button attributes, text, icons, priority, AJAX modal behavior, and conditionally adding buttons based on the context (e.g., checking if the item is a `Lead`). Dependencies include Mautic's CoreBundle, EventListener, Templating Helper, and potentially LeadBundle.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/ui.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// plugins/HelloWorldBundle/Event/ButtonSubscriber.php\n\nnamespace MauticPlugin\\HelloWorldBundle\\EventListener;\n\n\nuse Mautic\\CoreBundle\\CoreEvents;\nuse Mautic\\CoreBundle\\Event\\CustomButtonEvent;\nuse Mautic\\CoreBundle\\EventListener\\CommonSubscriber;\nuse Mautic\\CoreBundle\\Templating\\Helper\\ButtonHelper;\nuse Mautic\\LeadBundle\\Entity\\Lead;\n\nclass ButtonSubscriber extends CommonSubscriber\n{\n    public static function getSubscribedEvents()\n    {\n        return [\n            CoreEvents::VIEW_INJECT_CUSTOM_BUTTONS => ['injectViewButtons', 0]\n        ];\n    }\n\n    /**\n     * @param CustomButtonEvent $event\n     */\n    public function injectViewButtons(CustomButtonEvent $event)\n    {\n        // Injects a button into the toolbar area for any page with a high priority (displays closer to first)\n        $event->addButton(\n            [\n                'attr'      => [\n                    'class'       => 'btn btn-default btn-sm btn-nospin',\n                    'data-toggle' => 'ajaxmodal',\n                    'data-target' => '#MauticSharedModal',\n                    'href'        => $this->router->generate('mautic_world_action', ['objectAction' => 'doSomething']),\n                    'data-header' => 'Extra Button',\n                ],\n                'tooltip'   => $this->translator->trans('mautic.world.dosomething.btn.tooltip'),\n                'iconClass' => 'fa fa-star',\n                'priority'  => 255,\n            ],\n            ButtonHelper::LOCATION_TOOLBAR_ACTIONS\n        );\n\n        //\n        if ($lead = $event->getItem()) {\n            if ($lead instanceof Lead) {\n                $sendEmailButton = [\n                    'attr'      => [\n                        'data-toggle' => 'ajaxmodal',\n                        'data-target' => '#MauticSharedModal',\n                        'data-header' => $this->translator->trans(\n                            'mautic.world.dosomething.header',\n                            ['%email%' => $event->getItem()->getEmail()]\n                        ),\n                        'href'        => $this->router->generate(\n                            'mautic_world_action',\n                            ['objectId' => $event->getItem()->getId(), 'objectAction' => 'doSomething']\n                        ),\n                    ],\n                    'btnText'   => 'Extra Button',\n                    'iconClass' => 'fa fa-star',\n                    'primary'   => true,\n                    'priority'  => 255,\n                ];\n\n                // Inject a button into the page actions for the specified route (in this case /s/contacts/view/{contactId})\n                $event\n                    ->addButton(\n                        $sendEmailButton,\n                        // Location of where to inject the button; this can be an array of multiple locations\n                        ButtonHelper::LOCATION_PAGE_ACTIONS,\n                        ['mautic_contact_action', ['objectAction' => 'view']]\n                    )\n                    // Inject a button into the list actions for each contact on the /s/contacts page\n                    ->addButton(\n                        $sendEmailButton,\n                        ButtonHelper::LOCATION_LIST_ACTIONS,\n                        'mautic_contact_index'\n                    );\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Bundle Services with Autowiring and Autoconfiguration - Symfony PHP\nDESCRIPTION: This PHP code defines the bundle's services.php file, leveraging Symfony's ContainerConfigurator to set up default service behaviors (autowiring, autoconfiguration, and public visibility). It demonstrates how to exclude specific directories and load PHP classes as services based on their namespaces or paths. Dependencies include Symfony DependencyInjection, MauticCoreExtension, and knowledge of PHP closures. The $excludes array allows bundlers to fine-tune which classes should not be considered services, merging with default excluded directories. The expected input is a correct plugin namespace for load(), and the output is a set of autowired services registered with the container. Replace [YourPluginName] as instructed.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/plugins/autowiring.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nuse Mautic\\CoreBundle\\DependencyInjection\\MauticCoreExtension;\nuse Symfony\\Component\\DependencyInjection\\Loader\\Configurator\\ContainerConfigurator;\n\nreturn function (ContainerConfigurator $configurator) {\n    $services = $configurator->services()\n        ->defaults()\n        ->autowire()\n        ->autoconfigure()\n        ->public();\n\n    $excludes = [\n        'SomeDirectoryYouWantToExclude',\n    ];\n\n    $services->load('MauticPlugin\\\\[YourPluginName]Bundle\\\\', '../')\n        ->exclude('../{'.implode(',', array_merge(MauticCoreExtension::DEFAULT_EXCLUDES, $excludes)).'}');\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing onValidate Hook for Custom Form Validation in JavaScript\nDESCRIPTION: Example of implementing the onValidate hook to perform custom validation of email addresses, specifically preventing gmail.com addresses. Returns FALSE to stop form submission or NULL/TRUE to continue with validation.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/form_hooks/validation_hooks.rst#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMauticFormCallback['formname'] = {\n    onValidate: function () {\n        var email = document.getElementById('mauticform_input_formname1_email').value;\n        if (email.includes('@gmail.com')) {\n            alert('Please use a work email address.');\n\n            // return FALSE to stop the form submission\n            return FALSE;\n        }\n\n        // return NULL|void to continue with default validation or return TRUE to skip it\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Campaign Action Subscriber in PHP\nDESCRIPTION: Full example of a campaign action subscriber class. It demonstrates how to define campaign actions, handle execution, and process pending events for a batch of contacts.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/campaigns.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MauticPlugin\\HelloWorldBundle\\EventListener;\n\nuse Mautic\\CampaignBundle\\CampaignEvents;\nuse Mautic\\CampaignBundle\\Event\\CampaignBuilderEvent;\nuse Mautic\\CampaignBundle\\Event\\PendingEvent;\nuse MauticPlugin\\HelloWorldBundle\\HelloWorldEvents;\nuse MauticPlugin\\HelloWorldBundle\\Form\\Type\\TravelType;\nuse MauticPlugin\\HelloWorldBundle\\Helper\\TravelService;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\nuse Symfony\\Component\\Translation\\TranslatorInterface;\n\nclass CampaignActionSubscriber implements EventSubscriberInterface\n{\n    public const TYPE = 'helloworld.action';\n\n    private TranslatorInterface $translator;\n    private TravelService $travelService;\n\n    public function __construct(TranslatorInterface $translator, TravelService $travelService)\n    {\n        $this->translator    = $translator;\n        $this->travelService = $travelService;\n    }\n\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            CampaignEvents::CAMPAIGN_ON_BUILD         => ['onCampaignBuild', 0],\n            HelloWorldEvents::EXECUTE_CAMPAIGN_ACTION => ['onExecuteCampaignAction', 0],\n        ];\n    }\n\n    public function onCampaignBuild(CampaignBuilderEvent $event): void\n    {\n        $event->addAction(\n            self::TYPE,\n            [\n                'label'          => 'helloworld.campaign.event.action',\n                'description'    => 'helloworld.campaign.event.action.descr',\n                'batchEventName' => HelloWorldEvents::EXECUTE_CAMPAIGN_ACTION,\n                'formType'       => TravelType::class,\n            ]\n        );\n    }\n\n    public function onExecuteCampaignAction(PendingEvent $pendingEvent): void\n    {\n        $worldToVisit = $pendingEvent->getConfig()->getProperty('worldToVisit');\n        $pendingEvent->setChannel('world', $worldToVisit);\n\n        $contacts = $pendingEvent->getContactsKeyedById();\n        $emails   = [];\n        foreach ($contacts as $contact) {\n            if (!$contact->getEmail()) {\n                // Don't reschedule these events\n                $pendingEvent->passWithError(\n                    $pendingEvent->findLogByContactId($contact->getId()),\n                    $this->translator->trans('helloworld.validation.email_required', [], 'validators')\n                );\n\n                $emails[] = $contact->getEmail();\n            }\n        }\n\n        $this->travelService->doSomethingWithThese($emails, $worldToVisit);\n\n        $pendingEvent->passRemaining();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Campaign Condition Listener in Mautic (PHP)\nDESCRIPTION: This PHP code defines an EventSubscriberInterface implementation (`CampaignConditionSubscriber`) for a Mautic plugin. It listens to `CampaignEvents::CAMPAIGN_ON_BUILD` to register a custom campaign condition ('helloworld.condition') with its associated configuration (label, description, event name, form type). It also listens to the custom `HelloWorldEvents::EVALUATE_CAMPAIGN_CONDITION` event, triggered by Mautic, to evaluate the condition for a specific contact using a `TravelService`. Based on the service's result, it calls either `pass()` or `fail()` on the provided `ConditionEvent` object.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/campaigns.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MauticPlugin\\HelloWorldBundle\\EventListener;\n\nuse Mautic\\CampaignBundle\\CampaignEvents;\nuse Mautic\\CampaignBundle\\Event\\CampaignBuilderEvent;\nuse Mautic\\CampaignBundle\\Event\\ConditionEvent;\nuse MauticPlugin\\HelloWorldBundle\\HelloWorldEvents;\nuse MauticPlugin\\HelloWorldBundle\\Form\\Type\\TravelType;\nuse MauticPlugin\\HelloWorldBundle\\Helper\\TravelService;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass CampaignConditionSubscriber implements EventSubscriberInterface\n{\n    public const TYPE = 'helloworld.condition';\n\n    private TravelService $travelService;\n\n    public function __construct(TravelService $travelService): void\n    {\n        $this->travelService = $travelService;\n    }\n\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            CampaignEvents::CAMPAIGN_ON_BUILD             => ['onCampaignBuild', 0],\n            HelloWorldEvents::EVALUATE_CAMPAIGN_CONDITION => ['onEvaluateCampaignCondition', 0],\n        ];\n    }\n\n    public function onCampaignBuild(CampaignBuilderEvent $event): void\n    {\n        $event->addCondition(\n            self::TYPE,\n            [\n                'label'       => 'helloworld.campaign.event.condition',\n                'description' => 'helloworld.campaign.event.condition.descr',\n                'eventName'   => HelloWorldEvents::EVALUATE_CAMPAIGN_CONDITION,\n                'formType'    => TravelType::class,\n            ]\n        );\n    }\n\n    public function onEvaluateCampaignCondition(ConditionEvent $event): void\n    {\n        $leadEventLog = $event->getLog();\n        $contact      = $leadEventLog->getLead();\n        $world        = $event->getEventConfig()->getProperty('world');\n\n        if ($this->travelService->hasTraveledTo($contact, $world)) {\n            $event->pass();\n        } else {\n            $event->fail();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Category with Mautic API in PHP\nDESCRIPTION: This code snippet shows how to create a new Category using Mautic API in PHP. The `create` method is invoked with category data such as `title` and `bundle`. This operation requires valid authentication and the necessary permissions to create categories.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/categories.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php \n\n$data = array(\n    'categoryname' => 'test',\n    'categoryemail' => 'test@example.com',\n    'categorycity' => 'Raleigh',\n);\n\n$category = $categoryApi->create($data);\n```\n\n----------------------------------------\n\nTITLE: Initializing Mautic Asset API with Mautic API Library in PHP\nDESCRIPTION: This PHP snippet demonstrates how to set up authentication and initialize the asset API handler using the Mautic API Library. It requires the Mautic\\MauticApi and Mautic\\Auth\\ApiAuth classes and an appropriately configured \\$settings array. The code establishes an authenticated API client ready for asset management operations, accepting a base API URL as a key parameter. Outputs include a ready-to-use asset API instance. Ensure that dependencies are properly installed and \\$settings are correctly configured.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/assets.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Mautic\\MauticApi;\nuse Mautic\\Auth\\ApiAuth;\n\n// ...\n$initAuth = new ApiAuth();\n$auth     = $initAuth->newAuth($settings);\n$apiUrl   = \"https://example.com\";\n$api      = new MauticApi();\n$assetApi = $api->newApi(\"Assets\", $auth, $apiUrl);\n```\n\n----------------------------------------\n\nTITLE: Processing Mautic Webhooks in PHP\nDESCRIPTION: This snippet provides a PHP class for logging and processing Mautic webhook requests, including optional verification of the request signature using HMAC SHA-256. Dependencies include the PHP standard library classes such as DateTime and file handling functions. Inputs include the raw HTTP request data, and it outputs verification logs, designed to process events like 'mautic.lead_post_save_new'.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/webhooks/example_scripts.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// webhookTest.php\n\ndeclare(strict_types=1);\n\n/**\n * A helper class to log and get the Mautic webhook request\n */\nclass webhookTest {\n    /**\n     * Log a message to a file\n     */\n    public function log(string $message, string $type = 'info'): void\n    {\n        $prefix = 'webhookLog_';\n        $file = $type . '.log';\n        $date = new DateTime();\n\n        error_log($date->format('Y-m-d H:i:s') . ' ' . $message . \"\\n\\n\", 3, $prefix . $file);\n    }\n\n    /**\n     * Get the request JSON object and log the request\n     */\n    public function getRequest(): string\n    {\n        $rawData = file_get_contents(\"php://input\");\n\n        $this->log($rawData, 'request');\n\n        return $rawData;\n    }\n}\n\n$secret = 'mySuperWebhookSecretKey';\n$webhook = new webhookTest;\n$rawData = $webhook->getRequest();\n\n// optional signature verification\n$headers = getallheaders();\n$receivedSignature = $headers['Webhook-Signature'];\n$computedSignature = base64_encode(hash_hmac('sha256', $rawData, $secret, true));\n\nif ($receivedSignature === $computedSignature) {\n    $webhook->log('Webhook authenticity verification OK', 'request');\n} else {\n    $webhook->log('Webhook not authentic!', 'request');\n}\n\n// @todo Process the $requestData as needed\n$requestData = json_decode($rawData);\n\nif (isset($requestData['mautic.lead_post_save_new'])) {\n    foreach ($requestData['mautic.lead_post_save_new'] as $contact) {\n        // do something with the newly identified Contacts\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Mautic Email Transport Service in PHP\nDESCRIPTION: This PHP configuration snippet defines a new email transport service named `mautic.transport.helloworld_api` within a Mautic plugin's `config.php`. It uses the `mautic.email_transport` tag to register the service with Mautic, specifies the implementing class (`HelloWorldApiTransport`), injects dependencies (`mautic.helper.core_parameters`), and defines which standard configuration fields (Host, API Key, Password, Port, User) should be available in the Mautic Email Settings UI via `tagArguments`.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/emails.rst#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// plugins/HelloWorldBundle/Config/config.php\n\ndeclare(strict_types=1);\n\nreturn [\n    \n    ...\n\n    'services'    => [\n        \n        ...\n\n        'other' => [\n            'mautic.transport.helloworld_api' => [\n                'class'        => \\MauticPlugin\\HelloWorldBundle\\Swiftmailer\\Transport\\HelloWorldApiTransport::class,\n                'serviceAlias' => 'swiftmailer.mailer.transport.%s',\n                'arguments'    => [\n                    'mautic.helper.core_parameters',\n                ],\n                'tag'          => 'mautic.email_transport',\n                'tagArguments' => [\n                    # Translatable alias that is used as an internal key for the transport type, but also as the translation key.\n                    \\Mautic\\EmailBundle\\Model\\TransportType::TRANSPORT_ALIAS => 'mautic.email.config.mailer_transport.helloworld_api',\n                    # Determines which fields to show in Mautic's configuration screen (under Email Settings)\n                    \\Mautic\\EmailBundle\\Model\\TransportType::FIELD_HOST      => true,\n                    \\Mautic\\EmailBundle\\Model\\TransportType::FIELD_API_KEY   => true,\n                    \\Mautic\\EmailBundle\\Model\\TransportType::FIELD_PASSWORD  => true,\n                    \\Mautic\\EmailBundle\\Model\\TransportType::FIELD_PORT      => true,\n                    \\Mautic\\EmailBundle\\Model\\TransportType::FIELD_USER      => true\n                ],\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Explicitly Wiring Arguments for Non-Autowireable Parameters - Symfony PHP\nDESCRIPTION: This snippet demonstrates how to configure Symfony's DI container in services.php to inject a container parameter directly into a service's constructor argument. It addresses cases where autowiring fails (e.g., the service requires an array from configuration). The get() call locates the service by class, and arg() maps the constructor argument by name to a container parameter, indicated with the percent-sign syntax. Input is the service class and parameter reference; output is a container mapping for correct instantiation.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/plugins/autowiring.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// services.php\n$services->get(\\Mautic\\ConfigBundle\\Form\\Type\\EscapeTransformer::class)->arg('$allowedParameters', '%mautic.config_allowed_parameters%');\n```\n\n----------------------------------------\n\nTITLE: Implementing Parameter-based API Key Authentication in Mautic\nDESCRIPTION: This example shows how to create a credentials class implementing ParameterCredentialsInterface and use it with the HttpFactory to create an authenticated client.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/integrations_authentication.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse MauticPlugin\\HelloWorldBundle\\Integration\\HelloWorldIntegration;\nuse Mautic\\IntegrationsBundle\\Auth\\Provider\\ApiKey\\Credentials\\ParameterCredentialsInterface;\nuse Mautic\\IntegrationsBundle\\Auth\\Provider\\ApiKey\\HttpFactory;\nuse Mautic\\IntegrationsBundle\\Helper\\IntegrationsHelper;\n\n/** @var $integrationsHelper IntegrationsHelper */\n$integration = $integrationsHelper->getIntegration(HelloWorldIntegration::NAME);\n\n$apiKeys = $integration->getIntegrationConfiguration()->getApiKeys();\n\n$credentials = new class($apiKeys['api_key']) implements ParameterCredentialsInterface {\n    private $key;\n\n    public function __construct(string $key)\n    {\n        $this->key = $key;\n    }\n\n    public function getKeyName(): string\n    {\n        return 'apikey';\n    }\n\n    public function getApiKey(): string\n    {\n        return $this->key;\n    }\n};\n\n/** @var $factory HttpFactory */\n$client   = $factory->getClient($credentials);\n$response = $client->get('https://example.com/api/fetch');\n```\n\n----------------------------------------\n\nTITLE: Custom Form Validation Hook - JavaScript\nDESCRIPTION: Implementation of a custom validation hook that checks if an email address is from Gmail and prevents form submission if true. Demonstrates how to return different values to control form validation flow.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/form_hooks/getting_started.rst#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nMauticFormCallback['formname1'] = {\n    // other hooks\n\n    onValidate: function () {\n        var email = document.getElementById('mauticform_input_formname1_email').value;\n        if (email.includes('@gmail.com')) {\n            alert('Please use a work email address.');\n\n            // return FALSE to stop the Form submission\n            return FALSE;\n        }\n\n        // return NULL|void to continue with default validation or return TRUE to skip it\n    },\n\n    // more hooks\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Form Event Subscriber in Mautic\nDESCRIPTION: This example demonstrates a complete implementation of a FormSubscriber class that extends Mautic Forms with custom fields, validations, and submit actions. It shows the event subscription methods and handlers that process the various form events.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/forms.rst#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// plugins/HelloWorldBundle/EventListener/FormSubscriber.php\n\ndeclare(strict_types=1);\n\nnamespace MauticPlugin\\HelloWorldBundle\\EventListener;\n\nuse MauticPlugin\\HelloWorldBundle\\HelloWorldEvents;\nuse Mautic\\FormBundle\\Event\\FormBuilderEvent;\nuse Mautic\\FormBundle\\Event\\SubmissionEvent;\nuse Mautic\\FormBundle\\Event\\ValidationEvent;\nuse Mautic\\FormBundle\\FormEvents;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass FormSubscriber implements EventSubscriberInterface\n{\n    /**\n    * {@inheritdoc}\n    */\n    static public function getSubscribedEvents()\n    {\n        return [\n            FormEvents::FORM_ON_BUILD                         => ['onFormBuilder', 0],\n            // Generic validation function that runs on ALL field types\n            FormEvents::ON_FORM_VALIDATE                      => ['onFormValidate', 0],\n            HelloWorldEvents::ON_FORM_SUBMISSION              => ['onFormSubmission', 0],\n            // Only validates our custom field type (helloworld.customfield)\n            HelloWorldEvents::ON_FORM_CUSTOM_FIELD_VALIDATION => ['onFormValidateCustomFIeld', 0]\n        ];\n    }\n\n    /**\n    * Add a simple email form\n    */\n    public function onFormBuilder(FormBuilderEvent $event): void\n    {\n        // Register a custom form field\n        $event->addFormField(\n            'helloworld.customfield',\n            [\n                // Field label\n                'label'    => 'plugin.helloworld.formfield.customfield',\n                \n                // Form service for the field's configuration\n                'formType' => 'helloworld_worlds',\n                \n                // Template to use to render the formType\n                'template' => 'HelloWorldBundle:SubscribedEvents\\FormField:customfield.html.php'\n            ]\n        );\n\n        // Register a form submit actions\n        $event->addSubmitAction(\n            'helloworld.sendemail',\n            [\n                // Label to group by in the dropdown\n                'group'       => 'plugin.helloworld.header',\n                \n                // Label to list by in the dropdown\n                'label'       => 'plugin.helloworld.formaction.send_email',\n                'description' => 'plugin.helloworld.formaction.send_email_descr',\n                \n                // Form service for custom config options\n                'formType'    => 'helloworld_worlds',\n                'formTheme'   => 'HelloWorldBundle:FormTheme\\SubmitAction',\n                \n                // Callback method to be executed after the submission\n                'eventName'    => HelloWorldEvents::ON_FORM_SUBMISSION\n            ]\n        );\n\n        /**\n        * Register a custom validation service. This is only needed if:\n        * - you only want to validate your custom field type (the generic FormEvents::ON_FORM_VALIDATE runs on all field types which is less efficient)\n        * - you have more complex validation logic that you want to have in its own event listener\n        * \n        * In all other cases, you can simply listen to FormEvents::ON_FORM_VALIDATE as shown in onFormValidate() below.\n        */\n        $event->addValidator(\n            'helloworld.customfield',\n            [\n                'eventName' => HelloWorldEvents::ON_FORM_CUSTOM_FIELD_VALIDATION,\n                // Optional - otherwise all fields will be sent through this listener for validation\n                'fieldType' => 'helloworld.customfield',\n                // Optional - otherwise just default required option should be generated to validation tab\n                'formType' => \\MauticPlugin\\HelloWorldBundle\\Form\\Type\\HelloWorldType::class\n            ]\n        );\n    }\n    \n    /**\n    * Generic validation function that runs on ALL field types.\n```\n\n----------------------------------------\n\nTITLE: Inserting a New Mautic Report via PHP API Client\nDESCRIPTION: Demonstrates how to create a new Mautic Report using the PHP client by providing a structured data array of report configuration. Dependencies include an authenticated reportApi object and Mautic API library. Inputs are the detailed associative array for the Report's settings and structure. The output is the created Report's response data. Validate all required parameters (name, description, source, columns, etc.) before submission.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/reports.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n $data = array(\n     \"name\" => \"New Report\",\n     \"description\" => \"A new report\",\n     \"system\" => true,\n     \"isScheduled\" => false,\n     \"source\" => \"email.stats\",\n     \"columns\" => array(\n         \"es.date_sent\",\n         \"es.date_read\",\n         \"e.subject\",\n         \"es.email_address\",\n         \"e.id\"\n     ),\n     \"filters\" => array(\n         array(\n             \"column\" => \"e.is_published\",\n             \"condition\" => \"eq\",\n             \"value\" => \"1\"\n         )\n     ),\n     \"tableOrder\" => array(\n         array(\n             \"column\" => \"es.date_sent\",\n             \"direction\" => \"ASC\"\n         )\n     ),\n     \"graphs\" => array(\n         \"mautic.email.graph.line.stats\",\n         \"mautic.email.graph.pie.ignored.read.failed\",\n         \"mautic.email.table.most.emails.read\",\n         \"mautic.email.table.most.emails.sent\",\n         \"mautic.email.table.most.emails.read.percent\",\n         \"mautic.email.table.most.emails.failed\"\n     ),\n     \"groupBy\" => null,\n     \"settings\" => array(),\n     \"scheduleUnit\" => null,\n     \"toAddress\" => null,\n     \"scheduleDay\" => null,\n     \"scheduleMonthFrequency\" => null\n );\n\n $report = $reportApi->create($data);\n```\n\n----------------------------------------\n\nTITLE: Custom Form Validation in MauticJS\nDESCRIPTION: This JavaScript snippet shows how to implement custom form validation using the onValidate callback in MauticFormCallback. It allows overriding the default form validation and controlling form submission based on custom logic.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/tracking_script.rst#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nMauticFormCallback['replaceWithFormName'] = {\n    onValidate: function () {\n        // before form validation\n        var formIsGood = True;\n        var dontUpdate = False;\n        if(dontUpdate){\n            return null;\n        }else if(formIsGood){\n            return True;\n        }else if(!formIsGood){\n            return False;\n        }\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Services and Dependencies in a Mautic Plugin - PHP\nDESCRIPTION: Provides a sample structure for declaring plugin services, their classes, and constructor dependencies and tags in Mautic. Sample keys include event subscribers, form types, helpers (with aliases), and custom validators with arguments, following Symfony's DI conventions. Must be included in the plugin's configuration file and expects that referenced classes exist and dependencies are properly registered within Mautic's or Symfony's container.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/plugins/config.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n\\n// ...\\n\\n'services' => [\\n    'events'  => [\\n        'helloworld.leadbundle.subscriber' => [\\n            'class' => \\\\MauticPlugin\\\\HelloWorldBundle\\\\EventListener\\\\LeadSubscriber::class,\\n        ],\\n    ],\\n    'forms'   => [\\n        'helloworld.form' => [\\n            'class' => \\\\MauticPlugin\\\\HelloWorldBundle\\\\Form\\\\Type\\\\HelloWorldType::class,\\n        ],\\n    ],\\n    'helpers' => [\\n        'helloworld.helper.world' => [\\n            'class' => MauticPlugin\\\\HelloWorldBundle\\\\Helper\\\\WorldHelper::class,\\n            'alias' => 'helloworld',\\n        ],\\n    ],\\n    'other'   => [\\n        'helloworld.mars.validator' => [\\n            'class'     => MauticPlugin\\\\HelloWorldBundle\\\\Form\\\\Validator\\\\Constraints\\\\MarsValidator::class,\\n            'arguments' => [\\n                'mautic.helper.core_parameters',\\n                'helloworld.helper.world',\\n            ],\\n            'tag'       => 'validator.constraint_validator',\\n        ],\\n    ],\\n],\\n\\n// ...\\n\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Channel Events in PHP\nDESCRIPTION: This code demonstrates how to subscribe to channel events in Mautic by implementing an event subscriber. It shows how to add a new channel with specific features for message handling, lead management, and reporting.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/channels.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\npublic static function getSubscribedEvents()\n{\n    return [\n        ChannelEvents::ADD_CHANNEL => ['onAddChannel', 100],\n    ];\n}\n\npublic function onAddChannel(ChannelEvent $event)\n{\n    $event->addChannel(\n        'email',\n        [\n            MessageModel::CHANNEL_FEATURE => [\n                'campaignAction'             => 'email.send',\n                'campaignDecisionsSupported' => [\n                    'email.open',\n                    'page.pagehit',\n                    'asset.download',\n                    'form.submit',\n                ],\n                'lookupFormType' => EmailListType::class,\n            ],\n            LeadModel::CHANNEL_FEATURE   => [],\n            ReportModel::CHANNEL_FEATURE => [\n                'table' => 'emails',\n            ],\n        ]\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating API Controller for Mautic Plugin (PHP)\nDESCRIPTION: This code snippet shows how to create an API controller for a Mautic plugin. It extends CommonApiController and includes a method to handle GET requests for retrieving a list of worlds. The controller checks for user permissions and uses a model to fetch the data.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/api.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// plugins/HelloWorldBundle/Controller/ApiController.php\n\ndeclare(strict_types=1);\n\nnamespace MauticPlugin\\HelloWorldBundle\\Controller;\n\nuse Mautic\\ApiBundle\\Controller\\CommonApiController;\nuse Mautic\\CoreBundle\\Security\\Permissions\\CorePermissions;\nuse MauticPlugin\\HelloWorldBundle\\Model\\WorldsModel;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass ApiController extends CommonApiController\n{\n    private CorePermissions $corePermissions;\n    private WorldsModel     $worldsModel;\n\n    public function __construct(CorePermissions $corePermissions, WorldsModel $worldsModel)\n    {\n        $this->corePermissions = $corePermissions;\n        $this->worldsModel     = $worldsModel;\n    }\n    \n    /**\n    * Get a list of worlds\n    */\n    public function getWorldsAction(Request $request): Response\n    {\n        if (!$this->corePermissions->isGranted('plugin:helloWorld:worlds:view')) {\n            return $this->accessDenied();\n        }\n\n        $filter  = $request->query->get('filter', null);\n        $limit   = $request->query->get('limit', null);\n        $start   = $request->query->get('start', null);\n\n        $worlds  = $this->model->getWorlds($filter, $limit, $start);\n        $worlds  = $this->view($worlds, 200);\n\n        return $this->handleView($worlds);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Campaign Decision Listener in Mautic (PHP)\nDESCRIPTION: This PHP code defines an EventSubscriberInterface implementation (`CampaignDecisionSubscriber`) for handling custom campaign decisions in Mautic. It registers a decision ('helloworld.decision') during campaign build using `CampaignEvents::CAMPAIGN_ON_BUILD`. It listens for a custom application event (`HelloWorldEvents::CONTACT_TRAVEL_DOCUMENTS_CREATED`) and uses the `RealTimeExecutioner` service to trigger the evaluation of the campaign decision. Finally, it listens to the decision's evaluation event (`HelloWorldEvents::EVALUATE_CAMPAIGN_DECISION`), checks if the context matches using data passed through, and calls `setAsApplicable()` on the `DecisionEvent` if the decision applies to the contact's action.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/campaigns.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MauticPlugin\\HelloWorldBundle\\EventListener;\n\nuse Mautic\\CampaignBundle\\CampaignEvents;\nuse Mautic\\CampaignBundle\\Event\\CampaignBuilderEvent;\nuse Mautic\\CampaignBundle\\Event\\DecisionEvent;\nuse Mautic\\CampaignBundle\\Executioner\\RealTimeExecutioner;\nuse MauticPlugin\\HelloWorldBundle\\HelloWorldEvents;\nuse MauticPlugin\\HelloWorldBundle\\Event\\TravelDocumentEvent;\nuse MauticPlugin\\HelloWorldBundle\\Form\\Type\\TravelType;\nuse MauticPlugin\\HelloWorldBundle\\Helper\\TravelService;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass CampaignDecisionSubscriber implements EventSubscriberInterface\n{\n    public const TYPE = 'helloworld.decision';\n\n    private TravelService $travelService;\n    private RealTimeExecutioner $realTimeExecutioner;\n\n    public function __construct(TravelService $travelService, RealTimeExecutioner $realTimeExecutioner)\n    {\n        $this->travelService       = $travelService;\n        $this->realTimeExecutioner = $realTimeExecutioner;\n    }\n\n    public static function getSubscribedEvents()\n    {\n        return [\n            CampaignEvents::CAMPAIGN_ON_BUILD                  => ['onCampaignBuild', 0],\n            HelloWorldEvents::EVALUATE_CAMPAIGN_DECISION       => ['onEvaluateCampaignDecision', 0],\n            HelloWorldEvents::CONTACT_TRAVEL_DOCUMENTS_CREATED => ['onContactTravelDocumentsCreated', 0],\n        ];\n    }\n\n    public function onCampaignBuild(CampaignBuilderEvent $event)\n    {\n        $event->addDecision(\n            self::TYPE,\n            [\n                'label'       => 'helloworld.campaign.event.Decision',\n                'description' => 'helloworld.campaign.event.Decision.descr',\n                'eventName'   => HelloWorldEvents::EVALUATE_CAMPAIGN_DECISION,\n                'formType'    => TravelType::class,\n            ]\n        );\n    }\n\n    public function onContactTravelDocumentsCreated(TravelDocumentEvent $event)\n    {\n        $this->realTimeExecutioner->execute(self::TYPE, $event, 'world', $event->getWorldId());\n    }\n\n    public function onEvaluateCampaignDecision(DecisionEvent $event)\n    {\n        $applicableWorld     = $event->getEventConfig()->getProperty('world');\n        $travelDocumentEvent = $event->getPassthrough();\n\n        if ($applicableWorld !== $travelDocumentEvent->getWorldId()) {\n            return;\n        }\n\n        $event->setAsApplicable();\n        $event->setChannel('world', $travelDocumentEvent->getWorldId());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Mautic Email Transport Class in PHP\nDESCRIPTION: This PHP class provides the implementation for the `HelloWorldApiTransport` email transport service defined in the configuration. It extends `AbstractTokenArrayTransport` and implements `\\Swift_Transport` and `CallbackTransportInterface`. Key methods include `send` (to handle the actual email dispatch logic using injected `CoreParametersHelper` to fetch settings like host and API key), `getMaxBatchLimit` and `getBatchRecipientCount` (for batch sending configuration), `getCallbackPath` and `processCallbackRequest` (for handling asynchronous callbacks if needed), and `triggerSendError` (for error handling).\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/emails.rst#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// plugin/HelloWorldBundle/Swiftmailer/Transport/HelloeWorldApiTransport.php\n\ndeclare(strict_types=1);\n\nnamespace MauticPlugin\\HelloWorldBundle\\Swiftmailer\\Transport;\n\nuse Mautic\\CoreBundle\\Helper\\CoreParametersHelper;\nuse Mautic\\EmailBundle\\Swiftmailer\\Transport\\AbstractTokenArrayTransport;\nuse Mautic\\EmailBundle\\Swiftmailer\\Transport\\CallbackTransportInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\n\nclass HelloWorldApiTransport extends AbstractTokenArrayTransport implements \\Swift_Transport, CallbackTransportInterface\n{\n    private CoreParametersHelper $coreParametersHelper;\n\n    public function __construct(CoreParametersHelper $coreParametersHelper)\n    {\n        $this->coreParametersHelper = $coreParametersHelper;\n    }\n\n    /**\n    * @return int\n    *\n    * @throws \\Exception\n    */\n    public function send(\\Swift_Mime_SimpleMessage $message, &$failedRecipients = null)\n    {\n        $count            = 0;\n        $failedRecipients = (array) $failedRecipients;\n\n        if ($event = $this->getDispatcher()->createSendEvent($this, $message)) {\n            $this->getDispatcher()->dispatchEvent($event, 'beforeSendPerformed');\n            if ($event->bubbleCancelled()) {\n                return 0;\n            }\n        }\n\n        try {\n            // The message object contains all the email details (from/to/body/etc.)\n            $from = $message->getFrom();\n            $to   = $message->getTo();\n            $body = $message->getBody();\n\n            // Configuration values that were set by the user through Mautic's Configuration screen\n            $host   = $this->coreParametersHelper->get('mautic.mailer_host');\n            $apiKey = $this->coreParametersHelper->get('mautic.mailer_api_key');\n\n            // Do your magic for sending the email here\n            // $myService->send(...)\n\n            // Return the number of recipients who were accepted for delivery\n            return 1;\n        } catch (\\Exception $e) {\n            $this->triggerSendError($event, $failedRecipients);\n            $message->generateId();\n            $this->throwException($e->getMessage());\n        }\n\n        // Return the number of recipients who were accepted for delivery\n        return 0;\n    }\n\n    /**\n    * @inheritdoc\n    */\n    public function getMaxBatchLimit(): int\n    {\n        return 50;\n    }\n\n    /**\n    * @inheritdoc\n    */\n    public function getBatchRecipientCount(\\Swift_Message $message, $toBeAdded = 1, $type = 'to'): int\n    {\n        $toCount  = is_array($message->getTo()) ? count($message->getTo()) : 0;\n        $ccCount  = is_array($message->getCc()) ? count($message->getCc()) : 0;\n        $bccCount = is_array($message->getBcc()) ? count($message->getBcc()) : 0;\n\n        return null === $this->batchRecipientCount ? $this->batchRecipientCount : $toCount + $ccCount + $bccCount + $toBeAdded;\n    }\n\n    /**\n    * @inheritdoc\n    */\n    public function getCallbackPath(): string\n    {\n        return 'helloworld_api';\n    }\n\n    /**\n    * @inheritdoc\n    */\n    public function processCallbackRequest(Request $request)\n    {\n        $postData = json_decode($request->getContent(), true);\n\n        // Handle the callback here\n    }\n\n    private function triggerSendError(\\Swift_Events_SendEvent $evt, array &$failedRecipients): void\n    {\n        $failedRecipients = array_merge(\n            $failedRecipients,\n            array_keys((array) $this->message->getTo()),\n            array_keys((array) $this->message->getCc()),\n            array_keys((array) $this->message->getBcc())\n        );\n\n        if ($evt) {\n            $evt->setResult(\\Swift_Events_SendEvent::RESULT_FAILED);\n            $evt->setFailedRecipients($failedRecipients);\n            $this->getDispatcher()->dispatchEvent($evt, 'sendPerformed');\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Editing Campaign with PHP Mautic API\nDESCRIPTION: This PHP snippet demonstrates how to edit an existing campaign using the Mautic API. It includes parameters such as campaign ID and data for updating the campaign. If the campaign ID is not found, it allows for the creation of a new campaign with the specified data. The snippet supports both PUT and PATCH HTTP methods, where PUT can create a new campaign if the given ID doesn't exist and PATCH updates an existing campaign.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/campaigns.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$id   = 1;\n$data = array(\n    'name'        => 'New Campaign name',\n    'isPublished' => 0\n);\n\n// Create new a Campaign if ID 1 isn't found?\n$createIfNotFound = true;\n\n$campaign = $campaignApi->edit($id, $data, $createIfNotFound);\n```\n\n----------------------------------------\n\nTITLE: Injecting Custom JavaScript into mtc.js using PHP\nDESCRIPTION: This PHP code demonstrates how to inject custom JavaScript into mtc.js using an Event Listener for the CoreEvents::BUILD_MAUTIC_JS event. It also shows how to hook into the tracking process and return custom responses.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/tracking_script.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Mautic\\PageBundle\\EventListener;\n\nuse Mautic\\CoreBundle\\CoreEvents;\nuse Mautic\\CoreBundle\\Event\\BuildJsEvent;\nuse Mautic\\PageBundle\\Event\\TrackingEvent;\nuse Mautic\\PageBundle\\PageEvents;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass TrackingSubscriber implements EventSubscriberInterface\n{\n    public static function getSubscribedEvents()\n    {\n        return [\n            CoreEvents::BUILD_MAUTIC_JS    => ['onBuildJs', 0],\n            PageEvents::ON_CONTACT_TRACKED => ['onContactTracked', 0],\n        ];\n    }\n\n    public function onBuildJs(BuildJsEvent $event)\n    {\n        $event->appendJs(\n            <<<JS\n\n        document.addEventListener('mauticPageEventDelivered', function(e) {\n            var detail   = e.detail;\n            if (detail.response && detail.response.events && detail.response.events.tracked) {\n                console.log(detail.response.events.tracked);\n            }\n      });\n\nJS\n        );\n    }\n\n    public function onContactTracked(TrackingEvent $event)\n    {\n        $contact  = $event->getContact();\n        $response = $event->getResponse();\n\n        $response->set(\n            'tracked',\n            [\n                'email' => $contact->getEmail()\n            ]\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Assets (Local and Remote) with Mautic Asset API in PHP\nDESCRIPTION: This PHP snippet demonstrates creating assets by uploading either a local file or specifying a remote URL. It shows how to upload a file to Mautic, then create a local asset with it, and separately create a remote asset pointing to a URL. Requires an asset API instance, a file handler context for uploads, and configuration of parameters such as title, storageLocation (local or remote), and file name or URL. Output is the created asset's data structure. Constraints: file names/URLs must be valid and accessible, and folder context may need to be set for uploads.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/assets.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php \n\n/**\n * Local Asset example\n */\n// Upload a local file first\n$apiContextFiles = $this->getContext('files');\n$apiContextFiles->setFolder('assets');\n$fileRequest = array(\n    'file' => dirname(__DIR__).'/'.'mauticlogo.png'\n);\n$response = $apiContextFiles->create($fileRequest);\n\n$data = array(\n    'title' => 'Mautic Logo sent as a API request',\n    'storageLocation' => 'local',\n    'file' => $response['file']['name']\n);\n\n$asset = $assetApi->create($data);\n\n\n/**\n * Remote Asset example\n */\n$data = array(\n    'title' => 'PDF sent as a API request',\n    'storageLocation' => 'remote',\n    'file' => 'https://www.mautic.org/media/logos/logo/Mautic_Logo_DB.pdf'\n);\n\n$asset = $assetApi->create($data);\n```\n\n----------------------------------------\n\nTITLE: Injecting GrapesJS Plugin Assets in Mautic Plugin Bundle using PHP\nDESCRIPTION: This PHP code snippet illustrates how to inject a JavaScript file (the GrapesJS plugin) into the page using the Mautic AssetSubscriber mechanism. Prerequisites include an active published plugin and a valid AssetSubscriber within a Mautic plugin bundle. The 'injectAssets' function checks if the plugin is published and then adds the JS script for the GrapesJS custom plugin. Input is a CustomAssetsEvent object; the output is the asset being registered for front-end usage. Constraints include the asset path and correct publishing state.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/themes/grapesjs.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function injectAssets(CustomAssetsEvent $assetsEvent): void\\n{\\n    if ($this->config->isPublished()) {\\n        $assetsEvent->addScript('plugins/GrapesJsCustomPluginBundle/Assets/dist/index.js');\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Broadcast Functionality in Mautic Channels\nDESCRIPTION: This code shows how to create a broadcast subscriber for the Hello World plugin. It listens for the CHANNEL_BROADCAST event and handles sending bulk communications when the context matches the plugin's channel type.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/channels.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// plugins\\HelloWorldBundle\\EventListener\\BroadcastSubscriber\n\ndeclare(strict_types=1);\n\nnamespace MauticPlugin\\HelloWorldBundle\\EventListener;\n\nuse Mautic\\ChannelBundle\\ChannelEvents;\nuse Mautic\\ChannelBundle\\Event\\ChannelBroadcastEvent;\nuse MauticPlugin\\HelloWorldPlugin\\Model\\WorldModel;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nfinal class BroadcastSubscriber implements EventSubscriberInterface\n{\n    private WorldModel $model;\n\n    public function __construct(WorldModel $model)\n    {\n        $this->model = $model;\n    }\n\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            ChannelEvents::CHANNEL_BROADCAST => ['onChannelBroadcast', 0]\n        ];\n    }\n\n    public function onChannelBroadcast(ChannelBroadcastEvent $event): void\n    {\n        if (!$event->checkContext('world')) {\n            return;\n        }\n\n        // Get list of published broadcasts or broadcast if there is only a single ID\n        $id         = $event->getId();\n        $broadcasts = $this->model->getRepository()->getPublishedBroadcasts($id);\n        $output     = $event->getOutput();\n\n        while (($broadcast = $broadcasts->next()) !== false) {\n            list($sentCount, $failedCount, $ignore) = $this->model->sendIntergalacticMessages($broadcast[0], null, 100, true, $output);\n            $event->setResults($this->translator->trans('plugin.helloworld').': '.$broadcast[0]->getName(), $sentCount, $failedCount);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Form Validation using Entity Static Callback\nDESCRIPTION: Example showing form validation implementation using static callback method and validation groups in an entity class\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/forms_advanced.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// plugins/HelloWorldBundle/Form/Type/WorldType.php\n\ndeclare(strict_types=1);\n\nnamespace MauticPlugin\\HelloWorldBundle\\Form\\Type;\n\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\Form\\Form;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\nuse Symfony\\Component\\Validator\\Constraints\\NotBlank;\nuse Symfony\\Component\\Validator\\Mapping\\ClassMetadata;\n\nclass WorldType extends AbstractType\n{\n    public function configureOptions(OptionsResolver $resolver)\n    {\n        $resolver->setDefaults(array(\n            'data_class'        => 'MauticPlugin\\HelloWorld\\Entity\\World',\n            'validation_groups' => array(\n                'MauticPlugin\\HelloWorld\\Entity\\World',\n                'determineValidationGroups',\n            )\n        ));\n    }\n\n    public static function loadValidatorMetadata(ClassMetadata $metadata)\n    {\n        $metadata->addPropertyConstraint(\n            'name',\n            new NotBlank(\n                array(\n                    'message' => 'mautic.core.name.required'\n                )\n            )\n        );\n        \n        $metadata->addPropertyConstraint(\n            'population', \n            new NotBlank(\n                array(\n                    'message' => 'mautic.core.value.required',\n                    'groups'  => array('VisitedWorld')\n                )\n            \n            )\n        );\n    }\n\n    public static function determineValidationGroups(Form $form)\n    {\n        $data   = $form->getData();\n        $groups = array('AllWorlds');\n\n        if (!$data->getId() || ($data->getId() && $data->getVisitCount() > 0)) {\n            $groups[] = 'VisitedWorld';\n        }\n\n        return $groups;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Header-based API Key Authentication in Mautic\nDESCRIPTION: This example demonstrates how to create a credentials class implementing HeaderCredentialsInterface and use it with the HttpFactory to create an authenticated client.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/integrations_authentication.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse MauticPlugin\\HelloWorldBundle\\Integration\\HelloWorldIntegration;\nuse Mautic\\IntegrationsBundle\\Auth\\Provider\\ApiKey\\Credentials\\HeaderCredentialsInterface;\nuse Mautic\\IntegrationsBundle\\Auth\\Provider\\ApiKey\\HttpFactory;\nuse Mautic\\IntegrationsBundle\\Helper\\IntegrationsHelper;\n\n/** @var $integrationsHelper IntegrationsHelper */\n$integration = $integrationsHelper->getIntegration(HelloWorldIntegration::NAME);\n\n$apiKeys = $integration->getIntegrationConfiguration()->getApiKeys();\n\n$credentials = new class($apiKeys['api_key']) implements HeaderCredentialsInterface {\n    private $key;\n\n    public function __construct(string $key)\n    {\n        $this->key = $key;\n    }\n\n    public function getKeyName(): string\n    {\n        return 'X-API-KEY';\n    }\n\n    public function getApiKey(): string\n    {\n        return $this->key;\n    }\n};\n\n/** @var $factory HttpFactory */\n$client   = $factory->getClient($credentials);\n$response = $client->get('https://example.com/api/fetch');\n```\n\n----------------------------------------\n\nTITLE: Development Environment Configuration in Mautic\nDESCRIPTION: Basic environment configuration for development with APP_ENV and APP_DEBUG settings. Shows the default values that can be overridden in .env.local file with database and Mautic-specific configurations.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/development-environment/environments.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAPP_ENV=prod\nAPP_DEBUG=0\n```\n\nLANGUAGE: bash\nCODE:\n```\nAPP_ENV=dev\nAPP_DEBUG=1\nDB_HOST=...\nDB_PORT=3306\nDB_NAME=...\nDB_USER=...\nDB_PASSWD=...\nMAUTIC_DB_PREFIX=...\nMAUTIC_TABLE_PREFIX=...\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Point Trigger in Mautic Plugin (PHP)\nDESCRIPTION: This snippet illustrates how to register a custom Point Trigger in a Mautic plugin. It shows the implementation of an EventSubscriber that listens for the PointEvents::TRIGGER_ON_BUILD event and adds a custom trigger.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/points.rst#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MauticPlugin\\HelloWorldBundle\\EventListener;\n\nuse Mautic\\CoreBundle\\Factory\\MauticFactory;\nuse Mautic\\HelloWorldBundle\\Form\\Type\\TriggerChoiceType;\nuse Mautic\\PointBundle\\Event\\TriggerBuilderEvent;\nuse Mautic\\PointBundle\\PointEvents;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass PointSubscriber implements EventSubscriberInterface\n{\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            PointEvents::TRIGGER_ON_BUILD => ['onTriggerBuild', 0],\n        ];\n    }\n\n    public function onTriggerBuild(TriggerBuilderEvent $event)\n    {\n        $changeLists = [\n            'group'    => 'mautic.campaign.point.trigger',\n            'label'    => 'mautic.campaign.point.trigger.changecampaigns',\n            'callback' => [self::class, 'updatePointsOnBuild'],\n            'formType' => TriggerChoiceType::class,\n        ];\n\n        $event->addEvent('campaign.changecampaign', $changeLists);\n    }\n\n    public static function updatePointsOnBuild($config, $lead, MauticFactory $factory): bool\n    {\n        // Add custom code to do some action.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Contact to Campaign with PHP Mautic API\nDESCRIPTION: This PHP snippet shows how to manually add a contact to a specific campaign using the Mautic API. It requires the campaign ID and contact ID as parameters and expects a success confirmation response. Error handling is included if the operation fails.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/campaigns.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n//...\n$response = $campaignApi->addContact($campaignId, $contactId);\nif (!isset($response['success'])) {\n    // handle error\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"success\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Campaign Condition in Mautic Plugin (PHP)\nDESCRIPTION: Example of a subscriber class that registers a custom Campaign Condition. The class implements EventSubscriberInterface and listens for the CAMPAIGN_ON_BUILD event to add a custom condition to campaigns.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/campaigns.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MauticPlugin\\HelloWorldBundle\\EventListener;\n\nuse Mautic\\CampaignBundle\\CampaignEvents;\nuse Mautic\\CampaignBundle\\Event\\CampaignBuilderEvent;\nuse MauticPlugin\\HelloWorldBundle\\HelloWorldEvents;\nuse MauticPlugin\\HelloWorldBundle\\Form\\Type\\TravelType;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass CampaignConditionSubscriber implements EventSubscriberInterface\n{\n    public const TYPE = 'helloworld.condition';\n\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            CampaignEvents::CAMPAIGN_ON_BUILD => ['onCampaignBuild', 0],\n        ];\n    }\n\n    public function onCampaignBuild(CampaignBuilderEvent $event): void\n    {\n        $event->addCondition(\n            self::TYPE,\n            [\n                'label'       => 'helloworld.campaign.event.condition',\n                'description' => 'helloworld.campaign.event.condition.descr',\n                'eventName'   => HelloWorldEvents::EVALUATE_CAMPAIGN_CONDITION,\n                'formType'    => TravelType::class,\n            ]\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Campaign Action in Mautic Plugin (PHP)\nDESCRIPTION: Example of a subscriber class that registers a custom Campaign Action. The class implements EventSubscriberInterface and listens for the CAMPAIGN_ON_BUILD event to add a custom action to campaigns.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/campaigns.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MauticPlugin\\HelloWorldBundle\\EventListener;\n\nuse Mautic\\CampaignBundle\\CampaignEvents;\nuse Mautic\\CampaignBundle\\Event\\CampaignBuilderEvent;\nuse MauticPlugin\\HelloWorldBundle\\HelloWorldEvents;\nuse MauticPlugin\\HelloWorldBundle\\Form\\Type\\TravelType;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass CampaignActionSubscriber implements EventSubscriberInterface\n{\n    public const TYPE = 'helloworld.action';\n\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            CampaignEvents::CAMPAIGN_ON_BUILD => ['onCampaignBuild', 0],\n        ];\n    }\n\n    public function onCampaignBuild(CampaignBuilderEvent $event): void\n    {\n        $event->addAction(\n            self::TYPE,\n            [\n                'label'          => 'helloworld.campaign.event.action',\n                'description'    => 'helloworld.campaign.event.action.descr',\n                'batchEventName' => HelloWorldEvents::EXECUTE_CAMPAIGN_ACTION,\n                'formType'       => TravelType::class,\n            ]\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling General Form Validation for Custom Field Type in Mautic (PHP)\nDESCRIPTION: This PHP method `onFormValidate` acts as an event listener for form validation. It checks if the field being validated is of the custom type 'helloworld.customfield' and if custom validation ('c_enable') is activated. If conditions are met and the value is invalid, it flags the validation as failed using either a configured custom message or a default translation key. Depends on the `ValidationEvent` class.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/forms.rst#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n        * For efficiency reasons, it's recommended to set up a custom validator (see $event->addValidator() above) if you\n        * only need to validate a custom field type.\n        */\n        public function onFormValidate(ValidationEvent $event): void\n        {\n            $field = $event->getField();\n            $validation = $field->getValidation();\n\n            if ($field->getType() === 'helloworld.customfield' && !empty($validation['c_enable'])) {\n                if (empty($validation['helloworld_customfield_enable_validationmsg'])) {\n                    $event->failedValidation($validation['helloworld_customfield_enable_validationmsg']);\n                } else {\n                    $event->failedValidation('plugin.helloworld.formfield.customfield.invalid');\n                }\n            }\n        }\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submission Actions in Mautic (PHP)\nDESCRIPTION: This PHP method `onFormSubmission` listens for form submission events. It retrieves submitted data, sets up a post-submission redirect to an external URL ('https://mydomain.com'), and configures a callback to dispatch a custom event (`HelloWorldEvents::ON_FORM_SUBMISSION_CALLBACK`) after all standard submit actions are completed. Depends on `SubmissionEvent`, `RedirectResponse`, and `HelloWorldEvents` constants.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/forms.rst#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\npublic function onFormSubmission(SubmissionEvent $event): void\n        {\n            // Get the submitted data\n            $data = $event->getPost();\n\n            // Redirect to an external URL after the form has been submitted\n            $event->setPostSubmitCallbackResponse('helloworld.submit.response', new RedirectResponse('https://mydomain.com'));\n\n            // Dispatch a custom event to be dispatched after all submit actions have been processed\n            $event->setPostSubmitCallback('helloworld.submit.callback', [\n                'eventName' => HelloWorldEvents::ON_FORM_SUBMISSION_CALLBACK\n            ]);\n        }\n```\n\n----------------------------------------\n\nTITLE: Handling Plugin Install/Update Events using Symfony Event Subscriber in PHP\nDESCRIPTION: Demonstrates how to create a Symfony Event Subscriber within a Mautic plugin to execute custom logic during installation (`ON_PLUGIN_INSTALL`) and update (`ON_PLUGIN_UPDATE`) events. It requires implementing `EventSubscriberInterface` and subscribing to `PluginEvents`. The `onPluginInstall` and `onPluginUpdate` methods receive specific event objects and contain placeholders for the developer's logic. This feature is available since Mautic 4.2.0.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/plugins/installation.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MauticPlugin\\HelloWorldBundle\\EventListener;\n\nuse Mautic\\PluginBundle\\Event\\PluginInstallEvent;\nuse Mautic\\PluginBundle\\Event\\PluginUpdateEvent;\nuse Mautic\\PluginBundle\\PluginEvents;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass InstallUpdateSubscriber implements EventSubscriberInterface\n{\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            PluginEvents::ON_PLUGIN_INSTALL => ['onPluginInstall', 0],\n            PluginEvents::ON_PLUGIN_UPDATE  => ['onPluginUpdate', 0],\n        ];\n    }\n\n    public function onPluginInstall(PluginInstallEvent $event)\n    {\n        // Handle your logic here\n    }\n\n    public function onPluginUpdate(PluginUpdateEvent $event)\n    {\n        // Handle your logic here   \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Feature Settings from Integration Configuration\nDESCRIPTION: Code snippet demonstrating how to get feature settings from an integration configuration using the integration helper.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/integrations_configuration.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$featureSettings  = $integrationHelper->get(HelloWorldIntegration::NAME)->getIntegrationConfiguration()->getFeatureSettings();\n$doSomething      = $featureSettings['do_Something'];\n```\n\n----------------------------------------\n\nTITLE: Error Handling Callbacks in MauticJS Forms\nDESCRIPTION: These JavaScript snippets demonstrate how to implement custom error handling for Mautic forms using onErrorMark and onErrorClear callbacks. They allow for custom error marking and clearing logic.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/tracking_script.rst#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar callbackData = {\n    containerId: containerId,\n    valid: valid,\n    validationMessage: callbackValidationMessage\n};\n\nMauticFormCallback['replaceWithFormName'] = {\n    onErrorMark: function (callbackData) {\n         // called during error marking\n    },\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nMauticFormCallback['replaceWithFormName'] = {\n    onErrorClear: function (containerId) {\n         // called to clear an existing error\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring a Plugin Configuration Array in Mautic (PHP)\nDESCRIPTION: This PHP snippet demonstrates how to define the basic config file for a Mautic plugin, including human-readable metadata such as the plugin's name, description, author, and version. The configuration array enables Mautic to recognize and manage the plugin in its Plugin Manager. Each key in the array corresponds to specific metadata required for plugin registration. No external dependencies are required, and all fields are expected to be strings. Only the 'name' field is mandatory; 'description', 'author', and 'version' are optional but recommended for better plugin management and attribution.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/plugins/config.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n// plugins/HelloWorldBundle/Config/config.php\\n\\nreturn [\\n    'name'        => 'Hello World',\\n    'description' => 'This is an example config file for a simple Hello World plugin.',\\n    'author'      => 'Someone Awesome',\\n    'version'     => '1.0.0',\\n\\n// ...\\n\n```\n\n----------------------------------------\n\nTITLE: Registering an Integration Authentication Service in Mautic\nDESCRIPTION: This snippet shows how to register a service in Mautic tagged with 'mautic.auth_integration' to handle authentication for an integration.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/integrations_authentication.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    // ...\n    'services' => [\n        // ...\n        'integrations' => [\n            // ...\n            'helloworld.integration.authentication' => [\n                'class' => \\MauticPlugin\\HelloWorldBundle\\Integration\\Support\\AuthSupport::class,\n                'tags'  => [\n                    'mautic.auth_integration',\n                ],\n            ],\n            // ...\n        ],\n        // ...\n    ],\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Registering Campaign Decision in Mautic Plugin (PHP)\nDESCRIPTION: Partial example of a subscriber class that registers a custom Campaign Decision. The class implements EventSubscriberInterface and listens for the CAMPAIGN_ON_BUILD event to add a custom decision to campaigns.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/campaigns.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MauticPlugin\\HelloWorldBundle\\EventListener;\n\nuse Mautic\\CampaignBundle\\CampaignEvents;\nuse Mautic\\CampaignBundle\\Event\\CampaignBuilderEvent;\nuse MauticPlugin\\HelloWorldBundle\\HelloWorldEvents;\nuse MauticPlugin\\HelloWorldBundle\\Form\\Type\\TravelType;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass CampaignDecisionSubscriber implements EventSubscriberInterface\n{\n    public const TYPE = 'helloworld.decision';\n\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            CampaignEvents::CAMPAIGN_ON_BUILD => ['onCampaignBuild', 0],\n        ];\n    }\n\n    public function onCampaignBuild(CampaignBuilderEvent $event): void\n    {\n        $event->addCondition(\n            self::TYPE,\n            [\n                'label'       => 'helloworld.campaign.event.decision',\n\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Event Names for Mautic HelloWorld Plugin (PHP)\nDESCRIPTION: This PHP class `HelloWorldEvents` defines constants for custom event names used within the HelloWorld Mautic plugin. It provides standardized string identifiers for form submission (`ON_FORM_SUBMISSION`), post-submission callback (`ON_FORM_SUBMISSION_CALLBACK`), and custom field validation (`ON_FORM_CUSTOM_FIELD_VALIDATION`) events, improving code maintainability and clarity.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/forms.rst#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n    namespace MauticPlugin\\HelloWorldBundle;\n\n    final class HelloWorldEvents\n    {\n        /**\n        * The plugin.hello.world.on_form_submission event is fired when a form is submitted.\n        *\n        * The event listener receives a Mautic\\FormBundle\\Events\\SubmissionEvent\n        *\n        * @var string\n        */\n        public const ON_FORM_SUBMISSION = 'plugin.hello.world.on_form_submission';\n\n        /**\n        * The plugin.hello.world.on_form_submission_callback event is fired after all submit actions have been processed\n        *\n        * The event listener receives a Mautic\\FormBundle\\Events\\SubmissionEvent\n        *\n        * @var string\n        */\n        public const ON_FORM_SUBMISSION_CALLBACK = 'plugin.hello.world.on_form_submission_callback';\n\n        /**\n        * The plugin.hello.world.on_form_validation event is fired when our custom field type (helloworld.customfield)\n        * is being validated in a form submission.\n        *\n        * The event listener receives a Mautic\\FormBundle\\Event\\ValidationEvent\n        *\n        * @var string\n        */\n        public const ON_FORM_CUSTOM_FIELD_VALIDATION = 'plugin.hello.world.on_form_custom_field_validation';\n    }\n```\n\n----------------------------------------\n\nTITLE: Editing Assets (PUT/PATCH) with Mautic Asset API in PHP\nDESCRIPTION: This PHP snippet updates an asset by ID, using either PUT (to create if missing and overwrite) or PATCH (to update existing). Key parameters are \\$id (asset ID), \\$data (fields to update), and \\$createIfNotFound (true for PUT behavior, false for PATCH). Returns asset information or creation/edition status. Requires an authenticated \\$assetApi instance and a valid asset ID. The snippet supports different behaviors depending on the HTTP method semantics.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/assets.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$id   = 1;\n$data = array(\n    'type' => 'general',\n);\n\n// Create new a Asset if ID 1 isn't found?\n$createIfNotFound = true;\n\n$asset = $assetApi->edit($id, $data, $createIfNotFound);\n```\n\n----------------------------------------\n\nTITLE: Creating a Point Group in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to create a new Point Group using the Mautic API by providing the necessary data.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/point_groups.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$data = [\n    'name'        => 'Group A',\n    'description' => 'This is my first Point Group created via API.'\n];\n\n$pointGroup = $pointGroupApi->create($data);\n```\n\n----------------------------------------\n\nTITLE: Querying a Single Mautic Report via PHP API Client\nDESCRIPTION: Shows how to retrieve an individual Report by ID and with additional parameters such as result limit, page, and date range filters. Utilizes the previously initialized \"reportApi\" object. The method 'get' accepts the report ID and optional arguments for data slicing. Inputs include report ID and optional limit, page, dateFrom, and dateTo; output is a PHP array/object containing the report data. Dependencies include initialized API authentication and a valid Report API client.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/reports.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n//...\n// Get all with default options:\n$report = $reportApi->get($id);\n\n// Or define exactly what rows you want:\n$limit    = 100;\n$page     = 2;\n$dateFrom = \\DateTime('1 week ago');\n$dateTo   = \\DateTime('now');\n$report   = $reportApi->get($id, $limit, $page, $dateFrom, $dateTo);\n```\n\n----------------------------------------\n\nTITLE: Creating a Text Message in PHP\nDESCRIPTION: This snippet shows how to create a new text message using the Mautic API Library, specifying properties such as name, message content, and publication status.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/text_messages.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php \n\n$data = array(\n    'name'        => 'Text message A',\n    'message' => 'This is my first sms created via API.',\n    'isPublished' => 1\n);\n\n$sms = $smsApi->create($data);\n```\n\n----------------------------------------\n\nTITLE: Form Submission Response Handling in MauticJS\nDESCRIPTION: These JavaScript snippets show how to handle form submission responses in Mautic forms using onResponse, onResponseStart, and onResponseEnd callbacks. They allow for custom processing of form submission responses.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/tracking_script.rst#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nMauticFormCallback['replaceWithFormName'] = {\n    onResponse: function (response) {\n         // called to process the response to the form submission\n    },\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nMauticFormCallback['replaceWithFormName'] = {\n    onResponseStart: function (response) {\n         // called to process the response to the form submission\n    },\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nMauticFormCallback['replaceWithFormName'] = {\n    onResponseEnd: function (response) {\n         // called to process the response to the form submission\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Point Action in Mautic Plugin (PHP)\nDESCRIPTION: This snippet demonstrates how to register a custom Point Action in a Mautic plugin. It shows the implementation of an EventSubscriber that listens for the PointEvents::POINT_ON_BUILD event and adds a custom action.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/points.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MauticPlugin\\HelloWorldBundle\\EventListener;\n\nuse Mautic\\PointBundle\\Event\\PointBuilderEvent;\nuse Mautic\\PointBundle\\PointEvents;\nuse MauticPlugin\\HelloWorldBundle\\Form\\Type\\PointActionsType;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass PointSubscriber implements EventSubscriberInterface\n{\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            PointEvents::POINT_ON_BUILD => ['onPointBuild', 0],\n        ];\n    }\n\n    public function onPointBuild(PointBuilderEvent $event)\n    {\n        $action = [\n            'group'    => 'helloworld.points.actions',\n            'label'    => 'helloworld.points.actions.action',\n            'callback' => [self::class, 'addPointTriggerCallback'],\n            'formType' => PointActionsType::class,\n        ];\n\n        $event->addAction('helloworld.action', $action);\n    }\n\n    public static function addPointTriggerCallback(array $action, array $eventDetails): bool\n    {\n        // .. Add logic to weigh the action.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Form Validation using Constraints\nDESCRIPTION: Example demonstrating form validation using direct constraints on form fields\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/forms_advanced.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// plugins/HelloWorldBundle/Form/Type/WorldType.php\n\ndeclare(strict_types=1);\n\nnamespace MauticPlugin\\HelloWorldBundle\\Form\\Type;\n\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\Form\\Form;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\nuse Symfony\\Component\\Validator\\Constraints\\NotBlank;\n\nclass WorldType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder->add(\n            'name',\n            'text',\n            array(\n                'label'       => 'mautic.core.name',\n                'label_attr'  => array('class' => 'control-label'),\n                'attr'        => array(\n                    'class'   => 'form-control'\n                ),\n                'constraints' => array(\n                    new NotBlank(\n                        array(\n                            'message' => 'mautic.core.value.required'\n                        )\n                    )\n                )\n            )\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Editing a Text Message in PHP\nDESCRIPTION: This snippet demonstrates how to edit an existing text message or create a new one if not found, using the Mautic API Library. It supports both PUT and PATCH operations.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/text_messages.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$id   = 1;\n$data = array(\n    'name'        => 'New sms name',\n    'isPublished' => 0\n);\n\n// Create new a SMS of ID 1 is not found?\n$createIfNotFound = true;\n\n$sms = $smsApi->edit($id, $data, $createIfNotFound);\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Tokens and A/B Testing in Mautic (PHP)\nDESCRIPTION: This code snippet demonstrates how to extend Mautic's email functionality by implementing custom email tokens and A/B testing criteria. It uses event subscribers to handle token registration, content replacement, and A/B test winner determination.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/emails.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// plugins/HelloWorldBundle/EventListener/EmailSubscriber.php\n\ndeclare(strict_types=1);\n\nnamespace MauticPlugin\\HelloWorldBundle\\EventListener;\n\nuse Mautic\\CoreBundle\\Helper\\TemplatingHelper;\nuse Mautic\\EmailBundle\\EmailEvents;\nuse Mautic\\EmailBundle\\Event\\EmailBuilderEvent;\nuse Mautic\\EmailBundle\\Event\\EmailSendEvent;\nuse MauticPlugin\\HelloWorldBundle\\HelloWorldEvents;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nfinal class EmailSubscriber implements EventSubscriberInterface\n{\n    private TemplatingHelper $templating;\n\n    public function __construct(TemplatingHelper $templating)\n    {\n        $this->templating = $templating;\n    }\n\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            EmailEvents::EMAIL_ON_BUILD   => ['onEmailBuild', 0],\n            EmailEvents::EMAIL_ON_SEND    => ['onEmailGenerate', 0],\n            EmailEvents::EMAIL_ON_DISPLAY => ['onEmailGenerate', 0],\n        ];\n    }\n\n    /**\n    * Register the token and a custom A/B test winner\n    */\n    public function onEmailBuild(EmailBuilderEvent $event): void\n    {\n        // Displays the token in the email builder, so that users can easily find it and add it to their emails\n        $event->addToken('helloworld.token', 'Hello world token');\n\n        // Add AB Test Winner Criteria\n        $event->addAbTestWinnerCriteria(\n            'helloworld.planetvisits',\n            [\n                // Label to group by\n                'group' => 'plugin.helloworld.header',\n                \n                // Label for this specific a/b test winning criteria\n                'label' => 'plugin.helloworld.emailtokens.',\n\n                // Event that will be used to determine the winner\n                'event' => HelloWorldEvents::ON_DETERMINE_PLANET_VISIT_WINNER\n            ]\n        );\n    }\n\n    /**\n    * Search and replace tokens with content\n    */\n    public function onEmailGenerate(EmailSendEvent $event): void\n    {\n        // Get content\n        $content = $event->getContent();\n\n        // Search and replace tokens\n        $content = str_replace(\n            '{helloworld.token}',\n            $this->templating->getTemplating()->render('HelloWorldBundle:SubscribedEvents\\EmailToken:token.html.php'),\n            $content\n        );\n\n        // Set updated content\n        $event->setContent($content);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Quick Filters to List View in Mautic\nDESCRIPTION: This Twig code demonstrates how to include the 'list_toolbar.html.twig' template and pass the 'quickFilters' option to add quick filters to a list view. It shows an example of defining a single quick filter.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/quick_filters.rst#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ include('@MauticCore/Helper/list_toolbar.html.twig', {\n    'searchValue': searchValue,\n    'searchHelp': 'mautic.form.form.help.searchcommands',\n    'searchId': 'list-search',\n    'action': currentRoute,\n    'quickFilters': [\n        {\n            'search': 'has:results',\n            'label': 'mautic.core.search.quickfilter.form_results',\n            'tooltip': 'mautic.core.search.quickfilter.form_results.tooltip',\n            'icon': 'ri-file-list-2-line'\n        }\n    ]\n}) }}\n```\n\n----------------------------------------\n\nTITLE: Defining Integration-Based Menu Item Checks - PHP\nDESCRIPTION: Illustrates how to display a menu item based on the installed integrations' enabled state and specific feature availability. This configuration is useful to ensure menu items appear only when relevant integrations (e.g., OneSignal) are enabled and certain features (e.g., 'mobile') are active within the integration. It must be placed within a PHP configuration definition for Mautic plugins; no external dependencies besides the integration's presence are necessary.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/plugins/config.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n// ...\\n\\n[\\n    'integration' => [\\n        'OneSignal' => [\\n            'enabled'  => true,\\n            'features' => [\\n                'mobile',\\n            ],\\n        ],\\n    ],\\n],\\n\\n// ...\\n\n```\n\n----------------------------------------\n\nTITLE: Using Permissions in Controllers and Services\nDESCRIPTION: Demonstrates how to check user permissions using the CorePermissions service in Mautic, including checking for single permissions, multiple permissions, at least one permission, and retrieving permission arrays.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/security.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndeclare(strict_types=1);\n\n/** @var \\Mautic\\CoreBundle\\Security\\Permissions\\CorePermissions */\n$security = $this->get('mautic.security');\n\n// Check if user is granted a single permission\nif ($security->isGranted('plugin:helloWorld:worlds:view')) {\n    // do something\n}\n\n// Check if user is granted multiple permissions (must be granted to all to be true)\nif ($security->isGranted(\n    array(\n        'plugin:helloWorld:worlds:view',\n        'plugin:helloWorld:worlds:create',\n    )\n)\n) {\n    //do something\n}\n\n// Check if user is granted to at least one permission\nif ($security->isGranted(\n    array(\n        'plugin:helloWorld:worlds:view',\n        'plugin:helloWorld:worlds:edit',\n    ),\n    'MATCH_ONE'\n)\n) {\n    //do something\n}\n\n// Get an array of user permissions\n$permissions = $security->isGranted(\n    array(\n        'plugin:helloWorld:worlds:view',\n        'plugin:helloWorld:worlds:edit',\n    ),\n    'RETURN_ARRAY'\n);\n\nif ($permissions['plugin:helloWorld:worlds:view']) {\n    // do something\n}\n\n// Check if user has access to view leads\nif ($security->isGranted('lead:leads:viewother')) {\n    // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Entity Repositories as Services - Symfony PHP\nDESCRIPTION: This snippet shows how to configure Symfony's service loader to treat only repository classes (those ending with Repository.php) inside the Entity directory as services. It should be placed in a bundle's services.php and is intended for cases where entities and repositories are stored together but only repositories should be registered. This prevents autowiring of DTOs or non-service objects. The developer must set the correct namespace prefix and file path relevant to their bundle.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/plugins/autowiring.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$services->load('MauticPlugin\\\\[YourPluginName]Bundle\\\\Entity\\\\', '../Entity/*Repository.php');\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Credentials Grant in Mautic with PHP\nDESCRIPTION: This PHP snippet demonstrates the implementation of OAuth2 client credentials grant for Mautic. It uses classes and interfaces from Mautic's integration and authentication libraries to manage API keys and token persistence. The snippet includes dependencies on kamermans\\OAuth2 and Mautic's integration components, and it configures a client to fetch information from an API endpoint.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/integrations_authentication.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse kamermans\\OAuth2\\Persistence\\TokenPersistenceInterface;\nuse MauticPlugin\\HelloWorldBundle\\Integration\\HelloWorldIntegration;\nuse Mautic\\IntegrationsBundle\\Auth\\Provider\\Oauth2TwoLegged\\Credentials\\ClientCredentialsGrantInterface;\nuse Mautic\\IntegrationsBundle\\Auth\\Provider\\Oauth2TwoLegged\\Credentials\\ScopeInterface;\nuse Mautic\\IntegrationsBundle\\Auth\\Provider\\Oauth2TwoLegged\\HttpFactory;\nuse Mautic\\IntegrationsBundle\\Auth\\Support\\Oauth2\\ConfigAccess\\ConfigTokenPersistenceInterface;\nuse Mautic\\IntegrationsBundle\\Helper\\IntegrationsHelper;\n\n/** @var $integrationsHelper IntegrationsHelper */\n$integration = $integrationsHelper->getIntegration(HelloWorldIntegration::NAME);\n\n$configuration = $integration->getIntegrationConfiguration();\n$apiKeys       = $configuration->getApiKeys();\n\n$credentials = new class(\n    'https://example.com/api/oauth/token',\n    'scope1,scope2',\n    $apiKeys['client_id'],\n    $apiKeys['client_secret']\n) implements ClientCredentialsGrantInterface, ScopeInterface {\n    private $authorizeUrl;\n    private $scope;\n    private $clientId;\n    private $clientSecret;\n\n    public function getAuthorizationUrl(): string\n    {\n        return $this->authorizeUrl;\n    }\n\n    public function getClientId(): ?string\n    {\n        return $this->clientId;\n    }\n\n    public function getClientSecret(): ?string\n    {\n        return $this->clientSecret;\n    }\n\n    public function getScope(): ?string\n    {\n        return $this->scope;\n    }\n};\n\n/** @var $tokenPersistenceFactory TokenPersistenceFactory */\n$tokenPersistence = $tokenPersistenceFactory->create($integration);\n$config           = new class($tokenPersistence) implements ConfigTokenPersistenceInterface {\n    private $tokenPersistence;\n\n    public function __construct(TokenPersistenceInterface$tokenPersistence)\n    {\n        $this->tokenPersistence = $tokenPersistence;\n    }\n\n    public function getTokenPersistence(): TokenPersistenceInterface\n    {\n        return $this->tokenPersistence;\n    }\n};\n\n/** @var $factory HttpFactory */\n$client   = $factory->getClient($credentials, $config);\n$response = $client->get('https://example.com/api/fetch');\n```\n\n----------------------------------------\n\nTITLE: Triggering Custom Point Action in Mautic (PHP)\nDESCRIPTION: This snippet shows how to trigger a custom Point Action in Mautic. It demonstrates using the point model to trigger the action when a Contact executes the custom action.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/points.rst#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n$this->getModel('point')->triggerAction('helloworld.action', $event->getHit());\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth2 Password Grant Authentication in PHP for Mautic Integration\nDESCRIPTION: This snippet demonstrates how to implement OAuth2 password grant authentication for a Mautic integration. It includes setting up credentials with scopes and configuring token persistence.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/integrations_authentication.rst#2025-04-22_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse kamermans\\OAuth2\\Persistence\\TokenPersistenceInterface;\nuse MauticPlugin\\HelloWorldBundle\\Integration\\HelloWorldIntegration;\nuse Mautic\\IntegrationsBundle\\Auth\\Provider\\Oauth2TwoLegged\\Credentials\\PasswordCredentialsGrantInterface;\nuse Mautic\\IntegrationsBundle\\Auth\\Provider\\Oauth2TwoLegged\\Credentials\\ScopeInterface;\nuse Mautic\\IntegrationsBundle\\Auth\\Provider\\Oauth2TwoLegged\\HttpFactory;\nuse Mautic\\IntegrationsBundle\\Auth\\Support\\Oauth2\\ConfigAccess\\ConfigTokenPersistenceInterface;\nuse Mautic\\IntegrationsBundle\\Helper\\IntegrationsHelper;\n\n/** @var $integrationsHelper IntegrationsHelper */\n$integration = $integrationsHelper->getIntegration(HelloWorldIntegration::NAME);\n\n$configuration = $integration->getIntegrationConfiguration();\n$apiKeys       = $configuration->getApiKeys();\n\n$credentials = new class(\n    'https://example.com/api/oauth/token',\n    'scope1,scope2',\n    $apiKeys['client_id'],\n    $apiKeys['client_secret'],\n    $apiKeys['username'],\n    $apiKeys['password']\n) implements PasswordCredentialsGrantInterface, ScopeInterface {\n    private $authorizeUrl;\n    private $scope;\n    private $clientId;\n    private $clientSecret;\n    private $username;\n    private $password;\n\n    public function getAuthorizationUrl(): string\n    {\n        return $this->authorizeUrl;\n    }\n\n    public function getClientId(): ?string\n    {\n        return $this->clientId;\n    }\n\n    public function getClientSecret(): ?string\n    {\n        return $this->clientSecret;\n    }\n\n    public function getPassword(): ?string\n    {\n        return $this->password;\n    }\n\n    public function getUsername(): ?string\n    {\n        return $this->username;\n    }\n\n    public function getScope(): ?string\n    {\n        return $this->scope;\n    }\n};\n\n/** @var $tokenPersistenceFactory TokenPersistenceFactory */\n$tokenPersistence = $tokenPersistenceFactory->create($integration);\n$config           = new class($tokenPersistence) implements ConfigTokenPersistenceInterface {\n    private $tokenPersistence;\n\n    public function __construct(TokenPersistenceInterface$tokenPersistence)\n    {\n        $this->tokenPersistence = $tokenPersistence;\n    }\n\n    public function getTokenPersistence(): TokenPersistenceInterface\n```\n\n----------------------------------------\n\nTITLE: Retrieving IP Address Details using Mautic IpLookupHelper in PHP\nDESCRIPTION: Demonstrates how to use Mautic's IpLookupHelper service to get the user's IP address from the request and retrieve detailed information about the IP location. The code shows accessing the IP helper service, getting the raw IP address, and extracting location details like city.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/ip_lookups.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/** @var \\Mautic\\CoreBundle\\Helper\\IpLookupHelper */\n$ipHelper = $this->get('mautic.helper.ip_lookup');\n\n$requestIp = $ipHelper->getIpAddressFromRequest(); // 1.2.3.4\n\n/** @var \\Mautic\\CoreBundle\\Entity\\IpAddress $ipAddressEntity */\n$ipAddressEntity = $ipHelper->getIpAddress();\n\n/** @var array $details */\n$details = $ipAddressEntity->getIpDetails();\n\necho $details['city'];\n```\n\n----------------------------------------\n\nTITLE: Getting Contact Companies - PHP\nDESCRIPTION: PHP code example for retrieving a list of companies associated with a contact using the Mautic API.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$companies = $contactApi->getContactCompanies($contactId);\n```\n\n----------------------------------------\n\nTITLE: Defining User Permissions in PHP for Mautic's UserBundle\nDESCRIPTION: This PHP snippet from UserPermissions.php demonstrates how permissions are defined for the UserBundle in Mautic, showing the structure of permission levels and actions.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/displaying_elements_based_on_user_permissions.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$this->permissions = [\n    'profile' => [\n        'editusername' => 1,\n        'editemail'    => 2,\n        'editposition' => 4,\n        'editname'     => 8,\n        'full'         => 1024,\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Rendering A/B Test Results Chart in Mautic (PHP)\nDESCRIPTION: This code snippet demonstrates how to render a bar chart for A/B test results in Mautic. It uses the BarChart helper class to create the chart and renders it using a custom template.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/emails.rst#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// plugins/HelloWorldBundle/Views/SubscribedEvents/AbTest/bargraph.html.php\n\ndeclare(strict_types=1);\n\n$support = $results['support'];\n$label   = 'My chart label';\n$chart   = new \\Mautic\\CoreBundle\\Helper\\Chart\\BarChart($support['labels']);\n\nif ($support['data']) {\n    foreach ($support['data'] as $datasetLabel => $values) {\n        $chart->setDataset($datasetLabel, $values);\n    }\n}\n?>\n\n<div class=\"panel ovf-h bg-auto bg-light-xs abtest-bar-chart\">\n    <div class=\"panel-body box-layout\">\n        <div class=\"col-xs-8 va-m\">\n            <h5 class=\"text-white dark-md fw-sb mb-xs\">\n                <?php echo $label; ?>\n            </h5>\n        </div>\n        <div class=\"col-xs-4 va-t text-right\">\n            <h3 class=\"text-white dark-sm\"><span class=\"fa fa-bar-chart\"></span></h3>\n        </div>\n    </div>\n    <?php echo $view->render(\n        'MauticCoreBundle:Helper:chart.html.php',\n        ['chartData' => $chart->render(), 'chartType' => 'bar', 'chartHeight' => 300]\n    ); ?>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Monitored Inbox Integration in Mautic (PHP)\nDESCRIPTION: This code snippet shows how to implement a monitored inbox integration in Mautic. It uses event subscribers to configure the monitored inbox, set search criteria for fetching emails, and parse the fetched messages.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/emails.rst#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// plugins/HelloWorldBundle/EventListener/MonitoredInboxSubscriber.php\n\ndeclare(strict_types=1);\n\nnamespace MauticPlugin\\HelloWorldBundle\\EventListener;\n\nuse Mautic\\EmailBundle\\EmailEvents;\nuse Mautic\\EmailBundle\\Event\\MonitoredEmailEvent;\nuse Mautic\\EmailBundle\\Event\\ParseEmailEvent;\nuse Mautic\\EmailBundle\\MonitoredEmail\\Mailbox;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nfinal class MonitoredInboxSubscriber implements EventSubscriberInterface\n{\n    private $bundle = 'HelloWorldBundle';\n    private $monitor =  'deep_space_emails';\n\n    static public function getSubscribedEvents(): array\n    {\n        return [\n            EmailEvents::MONITORED_EMAIL_CONFIG => ['onConfig', 0],\n            EmailEvents::EMAIL_PRE_FETCH        => ['onPreFetch', 0],\n            EmailEvents::EMAIL_PARSE            => ['onParse', 0],\n        ];\n    }\n\n    /**\n    * Inject the IMAP folder settings into the Configuration\n    */\n    public function onConfig(MonitoredEmailEvent $event): void\n    {\n        /**\n        * The first argument is something unique to recognize this plugin.\n        * The second argument should be something unique to identify this monitored inbox.\n        * The third argument is the label for this monitored inbox.\n        */\n        $event->addFolder($this->bundle, $this->monitor, 'mautic.world.monitored_deep_space_emails');\n    }\n\n    /**\n    * Inject search criteria for which messages to fetch from the configured folder.\n    */\n    public function onPreFetch(ParseEmailEvent $event): void\n    {\n        $event->setCriteriaRequest($this->bundle, $this->monitor, Mailbox::CRITERIA_UNSEEN. \" \" . Mailbox::CRITERIA_FROM .\" aliens@andromeda\");\n    }\n\n    /**\n    * Parse the messages\n    */\n    public function onParse(ParseEmailEvent $event): void\n    {\n        if ($event->isApplicable($this->bundle, $this->monitor)) {\n            $messages = $event->getMessages();\n\n            foreach ($messages as $message) {\n                // Do something\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MauticFormCallback Object - JavaScript\nDESCRIPTION: Basic initialization of the MauticFormCallback object that will contain form hooks. This code should be placed in the head section of the website.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/form_hooks/getting_started.rst#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (typeof MauticFormCallback == 'undefined') {\n    var MauticFormCallback = {};\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Mautic Plugin Bundle Class Extending AbstractPluginBundle in PHP\nDESCRIPTION: Shows the basic structure of a Mautic plugin's main bundle class (e.g., `HelloWorldBundle`). For features like database migrations, the class must extend `Mautic\\IntegrationsBundle\\Bundle\\AbstractPluginBundle` provided by Mautic's IntegrationsBundle.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/plugins/installation.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MauticPlugin\\HelloWorldBundle;\n\nuse Mautic\\IntegrationsBundle\\Bundle\\AbstractPluginBundle;\n\nclass HelloWorldBundle extends AbstractPluginBundle\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Campaigns with Filters in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve a list of campaigns with various filter options using the Mautic API.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/campaigns.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// ...\n\n$campaigns = $campaignApi->getList($searchFilter, $start, $limit, $orderBy, $orderByDir, $publishedOnly, $minimal);\n```\n\n----------------------------------------\n\nTITLE: Extending AbstractPluginBundle in PHP for Mautic Plugin\nDESCRIPTION: This code snippet demonstrates how to create the main bundle file for a Mautic plugin. It extends the AbstractPluginBundle class from Mautic's IntegrationsBundle, which is required for registering the plugin with Symfony's kernel.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/plugins/structure.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// plugins/HelloWorldBundle/HelloWorldBundle.php\n\nnamespace MauticPlugin\\HelloWorldBundle;\n\nuse Mautic\\IntegrationsBundle\\Bundle\\AbstractPluginBundle;\n\nclass HelloWorldBundle extends AbstractPluginBundle\n{\n    // Nothing more required\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'No Results' Template in Mautic Twig Files\nDESCRIPTION: An example of how to use the 'No Results' template in Mautic code. This snippet demonstrates including the template with parameters for a scenario where no segments are available.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/feedback.rst#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ include('@MauticCore/Helper/no-information.html.twig', {\n    'tip': 'Mautic.segment.no.results',\n    'link': 'Mautic.segment.add.new',\n    'href': '{{ path('Mautic_segment_action', {'objectAction': 'new'}) }}'\n}) }}\n```\n\n----------------------------------------\n\nTITLE: Implementing onSubmitButtonEnable Hook in Mautic Forms\nDESCRIPTION: This code demonstrates how to use the onSubmitButtonEnable hook, which is called before the form's submit button is enabled. Return TRUE to skip the default behavior that re-enables the submit button.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/form_hooks/general_hooks.rst#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMauticFormCallback['formname'] = {\n    onSubmitButtonEnable: function () {\n         // do some custom stuff\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Tagging and Retrieving Cache Items in PHP\nDESCRIPTION: Demonstrates how to use the CacheProvider to set, tag, and retrieve cache items with expiration.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/cache.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/** @var CacheProvider $cache */\n$cache = $this->get('mautic.cache.provider');\n/** @var CacheItemInterface $item */\n$item = $cache->getItem('test_tagged_Item');\n$item->set('yesa!!!');\n$item->tag(['firstTag', 'secondTag']);\n$item->expiresAfter(20000);\n```\n\n----------------------------------------\n\nTITLE: Initializing Mautic Contact API in PHP\nDESCRIPTION: Sets up authentication and initializes the Mautic Contact API client. Requires the Mautic API Library.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Mautic\\MauticApi;\nuse Mautic\\Auth\\ApiAuth;\n\n// ...\n$initAuth   = new ApiAuth();\n$auth       = $initAuth->newAuth($settings);\n$apiUrl     = \"https://example.com\";\n$api        = new MauticApi();\n$contactApi = $api->newApi(\"contacts\", $auth, $apiUrl);\n```\n\n----------------------------------------\n\nTITLE: Creating a Single Mautic Contact in PHP\nDESCRIPTION: This snippet demonstrates how to create a single new contact using the Mautic API via a PHP wrapper. It initializes an array `$data` with contact fields like `firstname`, `lastname`, `email`, and `ipAddress`. The `overwriteWithBlank` parameter, set to `true`, ensures that even empty fields provided in the request will overwrite existing data or set fields to blank. The `$contactApi->create()` method is then called with this data to perform the creation.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$data = array(\n    'firstname' => 'Jim',\n    'lastname'  => 'Contact',\n    'email'     => 'jim@example.com',\n    'ipAddress' => $_SERVER['REMOTE_ADDR'],\n    'overwriteWithBlank' => true,\n);\n\n$contact = $contactApi->create($data);\n```\n\n----------------------------------------\n\nTITLE: Implementing onResponseStart Hook for Mautic Form in JavaScript\nDESCRIPTION: This snippet shows the implementation of the onResponseStart hook for a Mautic form. It is called before the default processing of the response, allowing for custom pre-processing actions.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/form_hooks/response_hooks.rst#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMauticFormCallback['formname'] = {\n    onResponseStart: function (response) {\n        // do something custom\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding UTM Tags to Contact with PHP\nDESCRIPTION: PHP code for adding UTM tracking tags to a contact. This includes campaign, source, medium, content, and term parameters along with additional tracking data like user agent and referrer information.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$data = array(\n    'utm_campaign' => 'apicampaign',\n    'utm_source'   => 'fb',\n    'utm_medium'   => 'social',\n    'utm_content'  => 'fbad',\n    'utm_term'     => 'mautic api',\n    'Useragent'    => 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0',\n    'url'          => '/product/fbad01/',\n    'referer'      => 'https://google.com/q=mautic+api',\n    'query'        => ['cid'=>'abc','cond'=>'new'], // or as string with \"cid=abc&cond=new\"\n    'remotehost'   => 'example.com',\n    'lastActive'   => '2017-01-17T00:30:08+00:00'\n );\n$contactApi->addUtm($contactId, $data);\n```\n\n----------------------------------------\n\nTITLE: Invalidating Tagged Cache Items in PHP\nDESCRIPTION: Shows how to invalidate cache items by their tags using the CacheProvider.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/cache.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$cache->invalidateTags(['firstTag']);\n```\n\n----------------------------------------\n\nTITLE: Deleting a Point Group in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to delete a Point Group by its ID using the Mautic API.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/point_groups.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$pointGroup = $pointGroupApi->delete($id);\n```\n\n----------------------------------------\n\nTITLE: Form Navigation Callbacks in MauticJS\nDESCRIPTION: This JavaScript snippet shows how to implement custom logic for multi-page form navigation in Mautic using the onShowNextPage callback. It allows for DOM adjustments before showing the next page.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/tracking_script.rst#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nMauticFormCallback['replaceWithFormName'] = {\n    onShowNextPage: function (pageNumber) {\n         // called prior to going to the next page\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Mautic Notifications API in PHP\nDESCRIPTION: This snippet demonstrates how to initialize the Mautic API for notifications. It sets up authentication and creates a new API instance for notifications.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/notifications.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Mautic\\MauticApi;\nuse Mautic\\Auth\\ApiAuth;\n\n// ...\n$initAuth        = new ApiAuth();\n$auth            = $initAuth->newAuth($settings);\n$apiUrl          = \"https://example.com\";\n$api             = new MauticApi();\n$notificationApi = $api->newApi(\"notifications\", $auth, $apiUrl);\n```\n\n----------------------------------------\n\nTITLE: Fetching a Single Asset by ID with Mautic Asset API in PHP\nDESCRIPTION: This PHP snippet retrieves an individual asset from Mautic by its asset ID using the asset API instance. Requires a pre-initialized \\$assetApi as shown in the initialization snippet. The key parameter is \\$id, representing the asset's ID. Expects to return asset information as an array or object structure. Ensure the asset API is authenticated prior to invocation.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/assets.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n//...\n$asset = $assetApi->get($id);\n```\n\n----------------------------------------\n\nTITLE: Handling Specific Custom Field Validation in Mautic (PHP)\nDESCRIPTION: This PHP method `onFormValidateCustomField` is a dedicated validation listener registered specifically for the 'helloworld.customfield' type. It assumes the event triggers only for this field type. It checks if custom validation ('c_enable') is enabled and flags the validation as failed if necessary, using a custom message or a default key. Contains a potential typo `$$validation` which likely should be `$validation`. Depends on the `ValidationEvent` class.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/forms.rst#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n        * Validation function that we registered specifically for our custom field type (helloworld.customfield).\n        * We don't need to check the field in this case, because it'll only trigger when validating our custom field\n        * (see $event->addValidator() above).\n        */\n        public function onFormValidateCustomField(ValidationEvent $event): void\n        {\n            $field = $event->getField();\n            $validation = $field->getValidation();\n\n            if (!empty($validation['c_enable'])) {\n                if (empty($validation['helloworld_customfield_enable_validationmsg'])) {\n                    $event->failedValidation($$validation['helloworld_customfield_enable_validationmsg']);\n                } else {\n                    $event->failedValidation('plugin.helloworld.formfield.customfield.invalid');\n                }\n            }\n        }\n```\n\n----------------------------------------\n\nTITLE: Listing Contacts in PHP\nDESCRIPTION: Retrieves a list of contacts with optional filtering and pagination parameters using the Mautic Contact API.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n//...\n$contacts = $contactApi->getList($searchFilter, $start, $limit, $orderBy, $orderByDir, $publishedOnly, $minimal);\n```\n\n----------------------------------------\n\nTITLE: Creating a New Notification in PHP\nDESCRIPTION: This code snippet illustrates how to create a new notification using the Mautic API by providing the necessary data.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/notifications.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php \n\n$data = array(\n    'name'    => 'Notification A',\n    'heading' => 'Hello World!'\n    'message' => 'This is my first notification created via API.',\n);\n\n$notification = $notificationApi->create($data);\n```\n\n----------------------------------------\n\nTITLE: Implementing ConfigFormNotesInterface in Mautic Integration\nDESCRIPTION: This snippet demonstrates how to implement the ConfigFormNotesInterface to add custom messages to different tabs of a Mautic integration's configuration form. It includes methods for adding notes to the Authorization, Features, and Field Mapping tabs.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/integrations_configuration_form_notes.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MauticPlugin\\HelloWorldBundle\\Integration\\Support;\n\nuse Mautic\\IntegrationsBundle\\DTO\\Note;\nuse Mautic\\IntegrationsBundle\\Integration\\ConfigFormNotesTrait;\nuse Mautic\\IntegrationsBundle\\Integration\\DefaultConfigFormTrait;\nuse Mautic\\IntegrationsBundle\\Integration\\Interfaces\\ConfigFormAuthInterface;\nuse Mautic\\IntegrationsBundle\\Integration\\Interfaces\\ConfigFormFeatureSettingsInterface;\nuse Mautic\\IntegrationsBundle\\Integration\\Interfaces\\ConfigFormFeaturesInterface;\nuse Mautic\\IntegrationsBundle\\Integration\\Interfaces\\ConfigFormInterface;\nuse Mautic\\IntegrationsBundle\\Integration\\Interfaces\\ConfigFormNotesInterface;\nuse Mautic\\IntegrationsBundle\\Integration\\Interfaces\\ConfigFormSyncInterface;\nuse MauticPlugin\\HelloWorldBundle\\Form\\Type\\ConfigAuthType;\nuse MauticPlugin\\HelloWorldBundle\\Form\\Type\\ConfigFeaturesType;\nuse MauticPlugin\\HelloWorldBundle\\Integration\\HelloWorldIntegration;\n\nclass ConfigSupport extends HelloWorldIntegration implements ConfigFormInterface, ConfigFormAuthInterface, ConfigFormFeatureSettingsInterface, ConfigFormSyncInterface, ConfigFormFeaturesInterface, ConfigFormNotesInterface\n{\n    use DefaultConfigFormTrait;\n    use ConfigFormNotesTrait;\n\n    public function getAuthConfigFormName(): string\n    {\n        return ConfigAuthType::class;\n    }\n\n    public function getFeatureSettingsConfigFormName(): string\n    {\n        return ConfigFeaturesType::class;\n    }\n\n    // ...\n\n    /**\n     * Adds message to the Enable/Auth tab.\n     */\n    public function getAuthorizationNote(): ?Note\n    {\n        return new Note('Additional information for Authorization tab.', Note::TYPE_INFO);\n    }\n\n    /**\n     * Adds message to the Features tab.\n     */\n    public function getFeaturesNote(): ?Note\n    {\n        return new Note('Warning message for Features tab.', Note::TYPE_WARNING);\n    }\n\n    /**\n     * Adds message to the Field Mapping tabs.\n     */\n    public function getFieldMappingNote(): ?Note\n    {\n        return new Note('Additional information for Field mapping tab.', Note::TYPE_INFO);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Requiring a Theme Package with Composer - Composer CLI - Shell\nDESCRIPTION: This shell snippet demonstrates how to add a theme package to your PHP project using Composer's CLI. The 'composer require' command downloads and adds the specified package version into your project's composer.json and composer.lock, ensuring the new theme is referenced and installed. The package name should follow Composer's naming conventions; replace 'yourthemename' with the actual theme identifier.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/themes/getting_started.rst#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require mautic/theme-yourthemename\n```\n\n----------------------------------------\n\nTITLE: Initializing Mautic API Library with PHP\nDESCRIPTION: This snippet demonstrates the initialization and authentication process for using Mautic's API in PHP. The `newAuth` method is used to authenticate, and the `newApi` method retrieves the categories API client needed for further interactions. Dependencies include Mautic API Library and valid authentication settings.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/categories.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Mautic\\MauticApi;\nuse Mautic\\Auth\\ApiAuth;\n\n// ...\n$initAuth    = new ApiAuth();\n$auth        = $initAuth->newAuth($settings);\n$apiUrl      = \"https://example.com\";\n$api         = new MauticApi();\n$categoryApi = $api->newApi(\"categories\", $auth, $apiUrl);\n```\n\n----------------------------------------\n\nTITLE: Configuring Mautic Database Connection in PHP\nDESCRIPTION: This PHP code snippet sets up the database connection parameters for Mautic in the local.php configuration file. It specifies details such as database driver, host, name, user, and password.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/development-environment/setup.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n    $parameters = array(\n        'db_driver' => 'pdo_mysql',\n        'db_host' => 'localhost',\n        'db_table_prefix' => null,\n        'db_port' => '3306',\n        'db_name' => 'mautic',\n        'db_user' => 'root',\n        'db_password' => 'root_password',\n        'db_backup_tables' => true,\n        'db_backup_prefix' => 'bak_',\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing onValidateStart Hook for Form Validation in JavaScript\nDESCRIPTION: Example of implementing the onValidateStart hook which is called at the beginning of form validation. This hook allows for custom operations before validation begins.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/form_hooks/validation_hooks.rst#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMauticFormCallback['formname'] = {\n    onValidateStart: function () {\n        // do some custom stuff\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth1a Two-Legged Authentication in PHP for Mautic Integration\nDESCRIPTION: This snippet demonstrates how to set up OAuth1a two-legged authentication for a Mautic integration. It includes creating credentials, configuring the client, and making an API request.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/integrations_authentication.rst#2025-04-22_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse MauticPlugin\\HelloWorldBundle\\Integration\\HelloWorldIntegration;\nuse Mautic\\IntegrationsBundle\\Helper\\IntegrationsHelper;\nuse Mautic\\IntegrationsBundle\\Auth\\Provider\\OAuth1aTwoLegged\\HttpFactory;\nuse Mautic\\IntegrationsBundle\\Auth\\Provider\\OAuth1aTwoLegged\\CredentialsInterface;\n\n/** @var $integrationsHelper IntegrationsHelper */\n$integration = $integrationsHelper->getIntegration(HelloWorldIntegration::NAME);\n\n$configuration = $integration->getIntegrationConfiguration();\n$apiKeys       = $configuration->getApiKeys();\n\n$credentials = new class(\n    'https://example.com/api/oauth/token',\n    $apiKeys['consumer_key'],\n    $apiKeys['consumer_secret']\n) implements CredentialsInterface {\n    private $authUrl;\n    private $consumerKey;\n    private $consumerSecret;\n\n    public function __construct(string $authUrl, string $consumerKey, string $consumerSecret)\n    {\n        $this->authUrl        = $authUrl;\n        $this->consumerKey    = $consumerKey;\n        $this->consumerSecret = $consumerSecret;\n    }\n\n    public function getAuthUrl(): string\n    {\n        return $this->authUrl;\n    }\n\n    public function getConsumerKey(): ?string\n    {\n        return $this->consumerKey;\n    }\n\n    public function getConsumerSecret(): ?string\n    {\n        return $this->consumerSecret;\n    }\n\n    /**\n     * Not used in this example. Tsk tsk for breaking the interface segregation principle\n     *\n     * @return string|null\n     */\n    public function getToken(): ?string\n    {\n        return null;\n    }\n\n    /**\n     * Not used in this example. Tsk tsk for breaking the interface segregation principle\n     *\n     * @return string|null\n     */\n    public function getTokenSecret(): ?string\n    {\n        return null;\n    }\n};\n\n/** @var $factory HttpFactory */\n$client   = $factory->getClient($credentials);\n$response = $client->get('https://example.com/api/fetch');\n```\n\n----------------------------------------\n\nTITLE: Implementing A/B Test Winner Determination in Mautic (PHP)\nDESCRIPTION: This code snippet shows how to implement custom A/B test winner determination logic in Mautic. It uses an event subscriber to handle the custom event for determining the winner based on planet visits.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/emails.rst#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n// plugins/HelloWorldBundle/EventListener/PlanetVisitSubscriber.php\n\ndeclare(strict_types=1);\n\nnamespace MauticPlugin\\HelloWorldBundle\\EventListener;\n\nuse Mautic\\CoreBundle\\Event\\DetermineWinnerEvent;\nuse MauticPlugin\\HelloWorldBundle\\HelloWorldEvents;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nfinal class PlanetVisitSubscriber implements EventSubscriberInterface\n{\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            HelloWorldEvents::ON_DETERMINE_PLANET_VISIT_WINNER   => ['onDeterminePlanetVisitWinner', 0],\n        ];\n    }\n\n    public function onDeterminePlanetVisitWinner(DetermineWinnerEvent $event): void\n    {\n        $event->setAbTestResults([\n            'winners' => [],\n            'support' => [\n                'labels' => ['label1', 'label2'],\n                'data'   => [\n                    'label1' => [100,200],\n                    'label2' => [200,300]\n                ],\n                'step_width' => 10\n            ],\n            'supportTemplate' => 'HelloWorldBundle:SubscribedEvents\\AbTest:bargraph.html.php'\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Campaign Contacts in PHP\nDESCRIPTION: This snippet shows how to retrieve contacts associated with a specific campaign using the Mautic API.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/campaigns.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// ...\n\n$response = $campaignApi->getContacts($campaignId, $start, $limit, $order, $where);\n```\n\n----------------------------------------\n\nTITLE: Running Mautic Integration Sync Command\nDESCRIPTION: Console command for initiating synchronization between Mautic and an integration. This example demonstrates how to run the sync command with a specified date range.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/integrations_sync.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/console mautic:integrations:sync HelloWorld --start-datetime=\"2020-01-01 00:00:00\" --end-datetime=\"2020-01-02 00:00:00\"\n```\n\n----------------------------------------\n\nTITLE: Styling Disabled Tabs with CSS in Mautic\nDESCRIPTION: CSS styles for disabled tabs in Mautic's interface. Defines visual properties for inactive tabs including cursor state, colors, and pointer events.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/availability.rst#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.nav-tabs.nav-tabs-contained > li.disabled {\n  cursor: not-allowed;\n  color: var(--text-disabled);\n}\n\n.nav-tabs.nav-tabs-contained > li.disabled > a {\n  background-color: var(--button-disabled);\n  pointer-events: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Mautic Cache via Command Line\nDESCRIPTION: Demonstrates the command to clear Mautic's cache using the console command.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/cache.rst#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbin/console mautic:cache:clear\n```\n\n----------------------------------------\n\nTITLE: Deleting Campaign with PHP Mautic API\nDESCRIPTION: This PHP snippet demonstrates how to delete a specific campaign using the Mautic API. It requires the campaign ID as a parameter and returns a success response if the campaign is successfully deleted.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/campaigns.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$campaign = $campaignApi->delete($id);\n```\n\n----------------------------------------\n\nTITLE: Implementing onErrorMark Hook for Form Validation Error Handling\nDESCRIPTION: Example of implementing the onErrorMark hook to handle validation errors. Includes handling of specific field errors with custom behavior.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/form_hooks/validation_hooks.rst#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar fieldValidationObject = {\n    containerId: 'mauticform_formname_email',\n    valid: FALSE,\n    validationMessage: 'Email is required!'\n};\n\nMauticFormCallback['formname'] = {\n    onErrorMark: function (fieldValidationObject) {\n        if ('mauticform_formname_email' == fieldValidationObject.containerId && !fieldValidationObject.valid) {\n             // do something custom\n        }\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Campaign Decision Event in PHP\nDESCRIPTION: Example of defining a campaign decision event in a Mautic plugin. It shows how to add a decision event to the campaign builder with properties like label, description, event name, and form type.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/campaigns.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$event->addDecision(\n    self::TYPE,\n    [\n        'label'       => 'helloworld.campaign.event.decision',\n        'description' => 'helloworld.campaign.event.decision.descr',\n        'eventName'   => HelloWorldEvents::EVALUATE_CAMPAIGN_DECISION,\n        'formType'    => TravelType::class,\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Activity Events for All Contacts in PHP\nDESCRIPTION: This code snippet shows how to use the Mautic PHP API to get activity events for all contacts in the system. It supports filtering by search terms, event types, date ranges, and pagination parameters.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$events = $contactApi->getActivity($search, $includeEvents, $excludeEvents, $orderBy, $orderByDir, $page, $dateFrom, $dateTo);\n```\n\n----------------------------------------\n\nTITLE: Defining API Routes in Mautic Plugin Config File (PHP)\nDESCRIPTION: This snippet demonstrates how to define custom API routes in the plugin's config.php file. It shows the structure for adding a new API endpoint under the 'api' section of the routes configuration.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/api.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// plugins/HelloWorldBundle/Config/config.php\n\ndeclare(strict_types=1);\n\nreturn [\n    // ...\n\n    'services' => [\n\n        // ...\n\n        'controllers' => [\n            'plugin.hello_world.controller.api' => [\n                'class' => \\MauticPlugin\\HelloWorldBundle\\Controller\\ApiController::class,\n                'arguments' => [\n                    'mautic.security',\n                    'plugin.hello_world.model.worlds'\n                ],\n                'methodCalls' => [\n                    'setContainer' => [\n                        '@service_container',\n                    ],\n                ],\n            ],\n        ],\n    ],\n\n    'routes'   => [\n\n        // ...\n\n        'api' => [\n            'plugin_helloworld_api' => [\n                'path'       => '/hello/worlds',\n                'controller' => 'HelloWorldBundle:Api:worlds',\n                'method'     => 'GET'\n            ]\n        ],\n\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Contact Companies Response Format - JSON\nDESCRIPTION: Example JSON response showing company associations for a contact including company details and relationship metadata.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"total\":1,\n  \"companies\":[\n    {\n      \"company_id\":\"420\",\n      \"date_associated\":\"2016-12-27 15:03:43\",\n      \"is_primary\":\"0\",\n      \"companyname\":\"test\",\n      \"companyemail\":\"test@example.com\",\n      \"companycity\":\"Raleigh\",\n      \"score\":\"0\",\n      \"date_added\":\"2016-12-27 15:03:42\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PHPUnit Configuration in XML\nDESCRIPTION: This XML content defines the PHPUnit configuration for running tests in a Mautic plugin. It specifies testsuites for unit and functional testing, environment variables, and filtering rules to exclude certain directories from white-box testing. The configuration ensures PHPUnit runs with Symfony test listeners for effective validation.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/plugins/continuous-integration.rst#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!-- http://www.phpunit.de/manual/current/en/appendixes.configuration.html -->\n<phpunit\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/8.5/phpunit.xsd\"\n   colors                      = \"true\"\n   failOnWarning               = \"true\"\n   bootstrap                   = \"autoload.php\" >\n\n   <testsuites>\n      <testsuite name=\"unit\">\n            <directory>Tests/Unit</directory>\n      </testsuite>\n      <testsuite name=\"functional\">\n            <directory>Tests/Functional</directory>\n      </testsuite>\n      <testsuite name=\"all\">\n            <directory>Tests/Unit</directory>\n            <directory>Tests/Functional</directory>\n      </testsuite>\n   </testsuites>\n\n   <php>\n      <env name=\"KERNEL_CLASS\" value=\"AppTestKernel\" />\n      <server name=\"KERNEL_DIR\" value=\"app\" />\n      <env name=\"SYMFONY_DEPRECATIONS_HELPER\" value=\"weak\" />\n   </php>\n\n   <filter>\n      <whitelist>\n            <directory>*</directory>\n            <exclude>\n               <directory>Assets</directory>\n               <directory>Config</directory>\n               <directory>Tests</directory>\n               <directory>Translations</directory>\n               <directory>Views</directory>\n            </exclude>\n      </whitelist>\n   </filter>\n\n   <listeners>\n      <listener class=\"\\Symfony\\Bridge\\PhpUnit\\SymfonyTestsListener\" />\n      <listener class=\"\\Mautic\\CoreBundle\\Test\\Listeners\\CleanupListener\" />\n   </listeners>\n\n</phpunit>\n\n```\n\n----------------------------------------\n\nTITLE: Registering Mautic Integration in PHP Config\nDESCRIPTION: Example of registering a new integration in the plugin's Config/config.php file using the mautic.basic_integration service tag.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/integrations.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    // ...\n    'services' => [\n        // ...\n        'integrations' => [\n            'helloworld.integration' => [\n                'class' => \\MauticPlugin\\HelloWorldBundle\\Integration\\HelloWorldIntegration::class,\n                'tags'  => [\n                    'mautic.basic_integration',\n                ],\n            ],\n            // ...\n        ],\n        // ...\n    ],\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Advanced Filtering for Contacts in PHP\nDESCRIPTION: Demonstrates how to use advanced filtering options when listing contacts, using the 'where' parameter to filter by specific field values.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$where = [\n  [\n    'col' => 'phone',\n    'expr' => 'in',\n    'val' => '444444444,888888888',\n  ]\n];\n```\n\n----------------------------------------\n\nTITLE: Defining and Rendering Custom Button Locations in Mautic using PHP\nDESCRIPTION: This PHP snippet demonstrates how a plugin can define its own custom button location and render the buttons injected into it. It uses the `$view['buttons']` template helper (an instance of `Mautic\\CoreBundle\\Templating\\Helper\\ButtonHelper`) to manage buttons for a specific location ('custom_location'). The `reset()` method initializes the helper for the given request and location, and `renderButtons()` outputs the HTML for the injected buttons, optionally wrapping them with custom HTML (here, defining a dropdown structure). This allows other plugins to target 'custom_location' when adding their buttons.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/ui.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$dropdownOpenHtml = '<button type=\"button\" class=\"btn btn-default btn-nospin  dropdown-toggle\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-caret-down\"></i></button>'\n          .\"\\n\";\n$dropdownOpenHtml .= '<ul class=\"dropdown-menu dropdown-menu-right\" role=\"menu\">'.\"\\n\";\n\necho $view['buttons']->reset($app->getRequest(), 'custom_location')->renderButtons($dropdownOpenHtml, '</ul>');\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Permission Class for a Plugin\nDESCRIPTION: Example of creating a custom permission class for a Mautic plugin by extending AbstractPermissions, defining permission levels, bits, and building the permission form elements.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/security.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// plugins/HelloWorldBundle/Security/Permissions/HelloWorldPermissions.php\n\ndeclare(strict_types=1);\n\nnamespace MauticPlugin\\HelloWorldBundle\\Security\\Permissions;\n\nuse Symfony\\Component\\Form\\FormBuilderInterface;\nuse Mautic\\CoreBundle\\Security\\Permissions\\AbstractPermissions;\n\nclass HelloWorldPermissions extends AbstractPermissions\n{\n    public function __construct($params)\n    {\n        parent::__construct($params);\n\n        $this->permissions = array(\n\n            // Custom level\n            'worlds' => array(\n\n                // Custom permissions\n                'use_telescope' => 1,\n                'send_probe'    => 2,\n                'visit'         => 4,\n                // Full will almost always be included and should be significantly higher than the\n                // others in case new permissions need to be added later \n                'full'          => 1024\n            )\n        );\n\n        // Add standard category permissions\n        $this->addStandardPermissions('categories');\n    }\n\n    /**\n     * Append the permission form fields to the Role form\n     *\n     * @param FormBuilderInterface $builder\n     * @param array                $options\n     * @param array                $data\n     */\n    public function buildForm(FormBuilderInterface &$builder, array $options, array $data)\n    {\n        // Add standard category form fields\n        $this->addStandardFormFields('helloWorld', 'categories', $builder, $data);\n\n        // Add custom 'worlds' level form fields\n        $builder->add(\n\n            // Form element name should be bundleName:permissionLevel\n            'helloWorld:worlds',\n\n            // Should always be permissionlist type\n            'permissionlist',\n            array(\n                'choices' => array(\n                    'use_telescope' => 'plugin.helloworld.permissions.use_telescope',\n                    'send_probe'    => 'plugin.helloworld.permissions.send_probe',\n                    'visit'         => 'plugin.helloworld.permissions.visit',\n                    'full'          => 'mautic.core.permissions.full',\n                ),\n                'label'   => 'plugin.helloworld.permissions',\n\n                // Set existing data\n                'data'    => (!empty($data['worlds']) ? $data['worlds'] : array()),\n\n                // Bundle name (used to build frontend form)\n                'bundle'  => 'helloWorld',\n\n                // Permission level (used to build frontend form)\n                'level'   => 'worlds'\n            )\n        );\n    }\n\n    /**\n     * Permission set identifier; should be bundleName\n     * \n     * @return string\n     */\n    public function getName()\n    {\n        return 'helloWorld';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Mautic API Reports Access in PHP\nDESCRIPTION: This snippet demonstrates how to authenticate and initialize the Mautic PHP API client to access the Reports endpoint. Requires installation of the 'mautic/api-library' and appropriate authentication settings. The code sets up API authentication, creates a new API instance, and prepares the Reports API for further use. Inputs required include API settings and base URL; output is a PHP object for Report API manipulation. Ensure the Mautic PHP library is properly included and configured.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/reports.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Mautic\\MauticApi;\nuse Mautic\\Auth\\ApiAuth;\n\n// ...\n$initAuth  = new ApiAuth();\n$auth      = $initAuth->newAuth($settings);\n$apiUrl    = \"https://example.com\";\n$api       = new MauticApi();\n$reportApi = $api->newApi(\"reports\", $auth, $apiUrl);\n```\n\n----------------------------------------\n\nTITLE: Listing Assets with Mautic Asset API in PHP\nDESCRIPTION: This PHP snippet calls the getList method of the asset API to fetch a paginated list of assets. Parameters include optional search filters, pagination controls (start, limit), sorting options (orderBy, orderByDir), and flags for filtering published assets and minimizing response data. Returns an array or object with asset metadata. Dependencies include an initialized and authenticated \\$assetApi instance.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/assets.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// ...\n\n$assets = $assetApi->getList($searchFilter, $start, $limit, $orderBy, $orderByDir, $publishedOnly, $minimal);\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Mautic Report Creation (via Edit Endpoint)\nDESCRIPTION: Illustrates the JSON structure returned by the Mautic API upon successfully creating a new report, typically indicated by a 201 HTTP status code. This response can occur when using the PUT method on the edit endpoint for a non-existent report ID. It details all properties of the newly created report.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/reports.rst#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n \"report\":\n     {\n         \"id\": 13,\n         \"name\": \"Brand New Report\",\n         \"description\": \"A new report\",\n         \"system\": true,\n         \"isScheduled\": true,\n         \"source\": \"email.stats\",\n         \"columns\": [\n             \"es.date_sent\",\n             \"es.date_read\",\n             \"e.subject\",\n             \"es.email_address\",\n             \"e.id\"\n         ],\n         \"filters\": [],\n         \"tableOrder\": [\n             {\n                 \"column\": \"es.date_sent\",\n                 \"direction\": \"ASC\"\n             }\n         ],\n         \"graphs\": [\n             \"mautic.email.graph.line.stats\",\n             \"mautic.email.graph.pie.ignored.read.failed\",\n             \"mautic.email.table.most.emails.read\",\n             \"mautic.email.table.most.emails.sent\",\n             \"mautic.email.table.most.emails.read.percent\",\n             \"mautic.email.table.most.emails.failed\"\n         ],\n         \"groupBy\": [],\n         \"settings\": {\n             \"showGraphsAboveTable\": null,\n             \"showDynamicFilters\": null,\n             \"hideDateRangeFilter\": null\n         },\n         \"aggregators\": [],\n         \"scheduleUnit\": \"DAILY\",\n         \"toAddress\": \"test2@mailinator.com\",\n         \"scheduleDay\": null,\n         \"scheduleMonthFrequency\": null\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Adding Points to Contact with PHP\nDESCRIPTION: PHP code for adding points to a contact with event and action details. This method allows tracking the reason for points addition with custom event and action names.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$data = [\n     'eventName' => 'Score via api',\n     'actionName' => 'Adding',\n];\n$contactApi->addPoints($contactId, $pointDelta, $data);\n```\n\n----------------------------------------\n\nTITLE: Defining Categories in Mautic Configuration - PHP\nDESCRIPTION: This snippet shows how to define custom category types in a Mautic plugin/module configuration using a PHP associative array. The 'categories' array assigns identifiers (here using a plugin scope) to a service alias responsible for that category type. Dependencies include Mautic's category manager and correct service registration via the given alias. The array keys represent the category type; the values are service identifiers. Input: category definitions; Output: custom categories available in Mautic's category manager. Ensure referenced services (e.g., 'mautic.helloworld.world.categories') exist and are properly registered.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/plugins/config.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n// ...\\n\\n'categories' => [\\n    'plugin:helloWorld' => 'mautic.helloworld.world.categories',\\n],\\n\\n// ...\\n\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Mautic Contacts (Batch) in PHP\nDESCRIPTION: This snippet shows how to create multiple Mautic contacts in a single batch request using the PHP API wrapper. An array `$data` containing multiple associative arrays is prepared, where each inner array represents a contact with its respective fields (`firstname`, `lastname`, `email`, `ipAddress`). The `$contactApi->createBatch()` method is called with this array to create all specified contacts efficiently.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$data = array(\n    array(\n    'firstname' => 'Jim',\n    'lastname'  => 'Contact',\n    'email'     => 'jim@example.com',\n    'ipAddress' => $_SERVER['REMOTE_ADDR']\n    ),\n    array(\n    'firstname' => 'Rudolf',\n    'lastname'  => 'Große',\n    'email'     => 'rudolf@example.com',\n    'ipAddress' => $_SERVER['REMOTE_ADDR']\n    )\n);\n$contact = $contactApi->createBatch($data);\n```\n\n----------------------------------------\n\nTITLE: Configuring composer.json for Mautic Plugin\nDESCRIPTION: Example of a properly configured composer.json file for a Mautic plugin. It includes required fields such as name, description, type, license, and dependencies.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/marketplace/listing.rst#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"example-vendor/plugin-example\",\n    \"description\": \"Example Plugin\",\n    \"type\": \"mautic-plugin\",\n    \"license\": \"GPL-3.0-or-later\",\n    \"keywords\": [\"mautic\",\"plugin\",\"integration\"],\n    \"extra\": {\n        \"install-directory-name\": \"ExampleBundle\"\n    },\n    \"require\": {\n        \"php\": \">=8.0 <8.1\",\n        \"ext-zip\": \"^1.15\",\n        \"mautic/core-lib\": \"^5.0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Available Owners in Mautic Contact API (PHP)\nDESCRIPTION: This PHP snippet demonstrates how to retrieve a list of available owners that can be assigned to contacts when creating or editing them using the Mautic Contact API.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$owners = $contactApi->getOwners();\n```\n\n----------------------------------------\n\nTITLE: Example Codeception Test Class Structure in PHP\nDESCRIPTION: This PHP code demonstrates the basic structure of a Codeception Cest file. It includes `_before` and `_after` methods that run before and after each test method, respectively, and an example test method (`login`) showing how to interact with a web page using the `AcceptanceTester` object (`$I`).\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/testing/e2e_test_suite.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass TestSuiteNameCest\n{\n    public function _before(AcceptanceTester $I)\n    {\n        // Code to run before each test\n    }\n\n    public function _after(AcceptanceTester $I)\n    {\n        // Code to run after each test\n    }\n\n    // Define your test methods\n\n    public function login(AcceptanceTester $I)\n    {\n        $I->amOnPage('/s/login');\n        $I->fillField('#username', $name);\n        $I->fillField('#password', $password);\n        $I->click('button[type=submit]');\n        $I->see('Dashboard');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Event Type for Contact Updated Event - reStructuredText\nDESCRIPTION: This snippet illustrates how to document the event type string ('mautic.lead_post_save_update') for a Contact updated event in Mautic within a reStructuredText-based documentation system. It provides developers with the exact event type to listen for programmatically when handling contact update events. No external dependencies are required. The literal role (double backticks) ensures the value is rendered verbatim for reference.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/webhooks/events/lead_post_save_update.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n``mautic.lead_post_save_update``\n```\n\n----------------------------------------\n\nTITLE: Implementing 'No Results' Template in Twig for Mautic\nDESCRIPTION: A reusable Twig template for displaying informative messages when no results are available. It provides a consistent way to give user feedback with options for additional actions.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/feedback.rst#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% if tip is defined %}\n<div class=\"alert alert-info\">\n    {{ tip|trans }}\n    {% if link is defined and (href is defined or onclick is defined) %}\n    <a class=\"ml-a\" href=\"{{href}}\" onclick=\"{{onclick}}\">{{link|trans}}</a>\n    {% endif %}\n</div>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Configuration Parameter with Default Value\nDESCRIPTION: Example showing how to retrieve a configuration parameter with a fallback default value\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/retrieving_system_information.rst#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ configGetParameter('parameter_name', 'default value') }}\n```\n\n----------------------------------------\n\nTITLE: Creating a Service Alias for Backward Compatibility - Symfony PHP\nDESCRIPTION: This PHP snippet illustrates the preferred modern method for registering a service alias in services.php. It creates a Symfony service alias that maps the legacy string ID to the actual class, which is useful for maintaining backward compatibility during the migration to FQCNs. The snippet must be placed in the bundle's services.php and receives the alias as the first argument, target class as the second.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/plugins/autowiring.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// services.php\n$services->alias('mautic.campaign.model.campaign', \\Mautic\\CampaignBundle\\Model\\CampaignModel::class);\n```\n\n----------------------------------------\n\nTITLE: Illustrating Single Mautic Webhook Payload Structure in JSON\nDESCRIPTION: This JSON snippet shows the basic structure of a single webhook event payload sent by Mautic. The top-level key represents the specific type of the event (`WebhookEventType`), and its value is an array containing a single object (`WebhookEventPayload`) which holds the detailed data for that event. This structure is typical for real-time webhook delivery.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/webhooks/getting_started.rst#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n.. code-block:: javascript\n\n    {\n        \"WebhookEventType\": [\n            { WebhookEventPayload }\n        ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Sanitization in PHP Form Type\nDESCRIPTION: Example of adding a CleanFormSubscriber to sanitize form data with specific masks for content and customHtml fields\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/forms_advanced.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// plugins/HelloWorldBundle/Form/Type/WorldType.php\n\ndeclare(strict_types=1);\n\nnamespace MauticPlugin\\HelloWorldBundle\\Form\\Type;\n\nuse Mautic\\CoreBundle\\Form\\EventListener\\CleanFormSubscriber;\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\n\nclass WorldType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder->addEventSubscriber(\n            new CleanFormSubscriber(\n                [\n                    'content'    => 'html',\n                    'customHtml' => 'html'\n                ]\n            )\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying User Invitation Link Based on Permissions in Twig\nDESCRIPTION: This example shows how to use the securityIsGranted function to display a link for inviting new users, visible only to users with the 'user:users:create' permission.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/displaying_elements_based_on_user_permissions.rst#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% if securityIsGranted('user:users:create') %}\n    <li>\n        <a href=\"{{ path('mautic_user_action', {objectAction: 'new'}) }}\">\n            <i class=\"ri-team-line\"></i>\n            <span>{{ 'mautic.user.profile.invite'|trans }}</span>\n        </a>\n    </li>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Parameters for Mautic Services - PHP\nDESCRIPTION: This PHP snippet demonstrates how to define parameters that services and other components can consume in Mautic. Using an associative array under the 'parameters' key, it specifies both a boolean flag and an array value. These parameters become accessible via CoreParameterHelper, service injection (using %mautic.key%), or environment variable (MAUTIC_KEY). Input: parameter definitions and default values, with type correctness (e.g., 'false' for a boolean, array for lists). Output: Registered configuration parameters available to Mautic services. Developers must ensure the declared defaults match expected types for correct type casting and must handle NULL for non-array/integer/string values where appropriate.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/plugins/config.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n\\n// ...\\n\\n'parameters' => [\\n    'helloworld_api_enabled'      => false,\\n    'helloworld_supported_worlds' => ['earth', 'mars', 'jupiter',],\\n],\\n\\n// ...\\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Integration Configuration in Mautic\nDESCRIPTION: This snippet demonstrates how to retrieve integration configuration and API keys using the IntegrationsHelper service.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/integrations_authentication.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse MauticPlugin\\HelloWorldBundle\\Integration\\HelloWorldIntegration;\nuse Mautic\\IntegrationsBundle\\Helper\\IntegrationsHelper;\n\n/** @var $integrationsHelper IntegrationsHelper */\n$integration = $integrationsHelper->getIntegration(HelloWorldIntegration::NAME);\n\n$configuration = $integration->getIntegrationConfiguration();\n$apiKeys       = $configuration->getApiKeys();\n\n$username = $apiKeys['username'] ?? null;\n$password = $apiKeys['password'] ?? null;\n\n//...\n```\n\n----------------------------------------\n\nTITLE: Defining Builder Options for Custom Form Fields in PHP\nDESCRIPTION: This snippet demonstrates the structure of the builderOptions array used when defining custom form fields in Mautic. The array contains boolean flags that control which configuration options appear in the form builder interface.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/forms.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n$builderOptions = [\n    'addHelpMessage' => true,\n    'addShowLabel' => true,\n    'addDefaultValue' => true,\n    'addLabelAttributes' => true,\n    'addInputAttributes' => true,\n    'addIsRequired' => true\n];\n```\n\n----------------------------------------\n\nTITLE: Deleting an Asset with Mautic Asset API in PHP\nDESCRIPTION: This PHP snippet deletes an asset by ID using the asset API instance's delete method. Key parameter is \\$id, the asset identifier. If the asset is stored locally, the local file will also be removed. Returns the result of the deletion operation. Requires an authenticated \\$assetApi and valid asset ID.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/assets.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$asset = $assetApi->delete($id);\n```\n\n----------------------------------------\n\nTITLE: Implementing AuthenticationInterface in Mautic Integration\nDESCRIPTION: This example shows how to implement the AuthenticationInterface for a Hello World integration, including methods to check authentication status and process authentication.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/integrations_authentication.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace MauticPlugin\\HelloWorldBundle\\Integration\\Support;\n\nuse MauticPlugin\\HelloWorldBundle\\Connection\\Client;\nuse MauticPlugin\\HelloWorldBundle\\Integration\\HelloWorldIntegration;\nuse Mautic\\IntegrationsBundle\\Integration\\ConfigurationTrait;\nuse Mautic\\IntegrationsBundle\\Integration\\Interfaces\\AuthenticationInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\n\nclass AuthSupport implements AuthenticationInterface\n{\n    use ConfigurationTrait;\n\n    private Client $client;\n\n    public function __construct(Client $client)\n    {\n        $this->client = $client;\n    }\n\n    public function getName(): string\n    {\n        return HelloWorldIntegration::NAME;\n    }\n\n    public function getDisplayName(): string\n    {\n        return 'Hello World';\n    }\n\n    /**\n     * Returns true if the integration has already been authorized with the third party service.\n     *\n     * @return bool\n     */\n    public function isAuthenticated(): bool\n    {\n        $apiKeys = $this->getIntegrationConfiguration()->getApiKeys();\n\n        return !empty($apiKeys['access_token']) && !empty($apiKeys['refresh_token']);\n    }\n\n    /**\n     * Authenticate and obtain the access token\n     *\n     * @param Request $request\n     *\n     * @return string\n     */\n    public function authenticateIntegration(Request $request): string\n    {\n        $code = $request->query->get('code');\n\n        $this->client->authenticate($code);\n\n        return 'Success!';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Contact Point Groups in PHP\nDESCRIPTION: This PHP snippet demonstrates how to retrieve a list of Contact Point Groups using various optional parameters for filtering and pagination.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/point_groups.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n//...\n$pointGroups = $pointGroupApi->getList($searchFilter, $start, $limit, $orderBy, $orderByDir, $publishedOnly, $minimal);\n```\n\n----------------------------------------\n\nTITLE: Extending AbstractPluginBundle for Mautic Plugin Registration - PHP\nDESCRIPTION: This snippet demonstrates how to register a Plugin in Mautic by extending the AbstractPluginBundle class from Mautic\\IntegrationsBundle\\Bundle. The plugin class, located in the plugin's main namespace and named according to convention, enables automatic handling by Mautic. No external dependencies beyond the Mautic IntegrationsBundle are required. The class itself may be empty—its main function is to identify and register the plugin bundle for Mautic’s plugin manager.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/plugins/data.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace MauticPlugin\\HelloWorldBundle;\n\nuse Mautic\\IntegrationsBundle\\Bundle\\AbstractPluginBundle;\n\nclass HelloWorldBundle extends AbstractPluginBundle\n{\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Doctrine Entity Metadata in PHP\nDESCRIPTION: Example of how Mautic uses PHP to define Doctrine entity metadata instead of annotations. This method is called loadMetadata and is static on the entity class.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/plugins/mautic_vs_symfony.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic static function loadMetadata(ORM\\ClassMetadata $metadata)\n```\n\n----------------------------------------\n\nTITLE: Initializing Mautic API for Campaigns in PHP\nDESCRIPTION: This snippet demonstrates how to initialize the Mautic API for interacting with campaigns. It includes setting up authentication and creating a campaign API instance.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/campaigns.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Mautic\\MauticApi;\nuse Mautic\\Auth\\ApiAuth;\n\n// ...\n$initAuth    = new ApiAuth();\n$auth        = $initAuth->newAuth($settings);\n$apiUrl      = \"https://example.com\";\n$api         = new MauticApi();\n$campaignApi = $api->newApi(\"campaigns\", $auth, $apiUrl);\n```\n\n----------------------------------------\n\nTITLE: Creating a Responsive Email Layout using MJML in HTML\nDESCRIPTION: This snippet provides an example of a responsive email template using the MJML markup language. Dependencies include the MJML framework, and the snippet demonstrates sections, columns, styled text, and buttons within an email design context. Inputs are the static email content; the rendered output is responsive email HTML, but it must be compiled through MJML to plain HTML for email clients.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/themes/grapesjs.rst#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<mjml>\\n  <mj-body>\\n    <mj-raw>\\n      <!-- Company Header -->\\n    </mj-raw>\\n    <mj-section background-color=\\\"#f0f0f0\\\">\\n      <mj-column>\\n        <mj-text font-style=\\\"bold\\\" font-size=\\\"24px\\\" color=\\\"#6f6f6f\\\">My Company</mj-text>\\n      </mj-column>\\n    </mj-section>\\n    <mj-raw>\\n      <!-- Confirm  text -->\\n    </mj-raw>\\n    <mj-section background-color=\\\"#fafafa\\\">\\n      <mj-column width=\\\"400px\\\">\\n        <mj-text font-style=\\\"bold\\\" font-size=\\\"22px\\\" font-family=\\\"Helvetica Neue\\\" color=\\\"#626262\\\">Please confirm your subscription!</mj-text>\\n        <mj-button background-color=\\\"#F45E43\\\" font-style=\\\"bold\\\" href=\\\"#\\\">Yes, subscribe me to the list</mj-button>\\n        <mj-text color=\\\"#525252\\\" font-size=\\\"16\\\" line-height=\\\"1.5\\\">If you received this email by mistake, simply delete it. You won't be subscribed if you don't click the confirmation link above.<br/><br/>For questions about this list, please contact:\\nemail@example.com</mj-text>\\n      </mj-column>\\n    </mj-section>\\n        <mj-raw>\\n      <!-- Confirm  text -->\\n    </mj-raw>\\n        <mj-section background-color=\\\"#fafafa\\\">\\n      <mj-column width=\\\"400px\\\">\\n        <mj-text color=\\\"#525252\\\" line-height=\\\"1.2\\\">\\n          <p>Company Name<br/>111 Amazing Street<br/>\\n            Beautiful City</p></mj-text>\\n\\n      </mj-column>\\n    </mj-section>\\n  </mj-body>\\n</mjml>\n```\n\n----------------------------------------\n\nTITLE: Inserting Script Dynamically in JavaScript\nDESCRIPTION: Shows how to use MauticJS.insertScript() to dynamically insert a script tag into the document head.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/tracking_script.rst#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nMauticJS.insertScript('http://google.com/ga.js');\n```\n\n----------------------------------------\n\nTITLE: Illustrating Aggregated Mautic Webhook Payload Structure in JSON\nDESCRIPTION: This JSON snippet demonstrates how Mautic aggregates multiple webhook events when using the background (queued) workflow. Events are grouped under their respective types (`WebhookEventType1`, `WebhookEventType2`). Each event type key holds an array containing multiple event payload objects (`WebhookEventPayload1`, `WebhookEventPayload2`, etc.) that have been queued since the last batch processing.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/webhooks/getting_started.rst#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n.. code-block:: javascript\n\n    {\n        \"WebhookEventType1\": [\n            { WebhookEventPayload1 },\n            { WebhookEventPayload2 },\n            { WebhookEventPayload3 }\n        ],\n        \"WebhookEventType2\": [\n            { WebhookEventPayload4 },\n            { WebhookEventPayload5 },\n            { WebhookEventPayload6 }\n        ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing ConfigFormInterface in Support Class\nDESCRIPTION: Example of a ConfigSupport class implementing the ConfigFormInterface and ConfigFormAuthInterface to provide integration configuration options including display name and authentication form.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/integrations_configuration.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace MauticPlugin\\HelloBundle\\Integration\\Support;\n\nuse MauticPlugin\\HelloWorldBundle\\Form\\Type\\ConfigAuthType;\nuse Mautic\\IntegrationsBundle\\Integration\\DefaultConfigFormTrait;\nuse Mautic\\IntegrationsBundle\\Integration\\Interfaces\\ConfigFormInterface;\nuse Mautic\\IntegrationsBundle\\Integration\\Interfaces\\ConfigFormAuthInterface;\n\nclass ConfigSupport implements ConfigFormInterface, ConfigFormAuthInterface\n{\n    use DefaultConfigFormTrait;\n\n    public function getDisplayName(): string\n    {\n        return 'Hello World';\n    }\n\n    /**\n     * Return a custom Symfony form field type class that will be used on the Enabled/Auth tab.\n     * This should include things like API credentials, URLs, etc. All values from this form fields\n     * will be encrypted before being persisted.\n     *\n     * @link https://symfony.com/doc/4.4/form/create_custom_field_type.html#defining-the-form-type\n     *\n     * @return string\n     */\n    public function getAuthConfigFormName(): string\n    {\n        return ConfigAuthType::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Quick Filters in PHP for Mautic\nDESCRIPTION: This PHP code snippet shows how to define multiple quick filters by adding items to the 'quickFilters' array. Each filter is defined as an associative array with keys for search query, label, tooltip, and icon.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/quick_filters.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'quickFilters': [\n    {\n        'search': 'is:admin',\n        'label': 'mautic.user.role.form.isadmin',\n        'tooltip': 'mautic.core.search.quickfilter.is_admin',\n        'icon': 'ri-admin-line'\n    },\n    {\n        'search': 'is:published',\n        'label': 'mautic.core.form.active',\n        'tooltip': 'mautic.core.search.quickfilter.is_published',\n        'icon': 'ri-check-line'\n    },\n    {\n        'search': 'is:unpublished',\n        'label': 'mautic.core.form.inactive',\n        'tooltip': 'mautic.core.search.quickfilter.is_unpublished',\n        'icon': 'ri-close-line'\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Form Hooks - JavaScript\nDESCRIPTION: Example showing how to define hooks for multiple forms using their API names as identifiers. Each form can have its own set of custom hooks.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/form_hooks/getting_started.rst#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMauticFormCallback['formname1'] = {\n    // define hooks here\n};\n\nMauticFormCallback['formname2'] = {\n    // define hooks here\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamic Tab State Management in Mautic\nDESCRIPTION: JavaScript function for toggling tab permissions visibility based on checkbox state. Uses jQuery (mQuery) to handle DOM manipulation with a small delay.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/availability.rst#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMautic.togglePermissionVisibility = function () {\n    setTimeout(function () {\n        if (mQuery('#role_isAdmin_0').prop('checked')) {\n            mQuery('#permissions-tab').removeClass('disabled');\n        } else {\n            mQuery('#permissions-tab').addClass('disabled');\n        }\n    }, 10);\n};\n```\n\n----------------------------------------\n\nTITLE: Organizing Translation Files for Mautic Plugins\nDESCRIPTION: This snippet demonstrates the file structure for organizing translations in a Mautic plugin. It shows the directory layout for multiple locales (en_US, es_MX, fr_FR) and the standard translation files (flashes.ini, messages.ini, validators.ini) required for each locale.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/plugins/translations.rst#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nTranslations/\n    en_US/\n        flashes.ini\n        messages.ini\n        validators.ini\n    es_MX/\n        flashes.ini\n        messages.ini\n        validators.ini\n    fr_FR/\n        flashes.ini\n        messages.ini\n        validators.ini\n```\n\n----------------------------------------\n\nTITLE: Assigning a Category to an Entity in PHP\nDESCRIPTION: This PHP code sample illustrates how to assign an existing Category to an entity, such as an Asset, within Mautic. The category ID is included in the payload when creating the entity. The Category must be pre-existing and compatible with the entity.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/categories.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$data = array(\n    'title' => 'PDF sent as a API request',\n    'storageLocation' => 'remote',\n    'file' => 'https://www.mautic.org/media/logos/logo/Mautic_Logo_DB.pdf'\n    'category' => 123\n);\n\n$asset = $assetApi->create($data);\n```\n\n----------------------------------------\n\nTITLE: Basic Mautic Integration Class Implementation\nDESCRIPTION: Example integration class extending BasicIntegration and implementing required interfaces with methods for name, display name and icon path.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/integrations.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace MauticPlugin\\HelloWorldBundle\\Integration;\n\nuse Mautic\\IntegrationsBundle\\Integration\\BasicIntegration;\nuse Mautic\\IntegrationsBundle\\Integration\\Interfaces\\BasicInterface;\nuse Mautic\\IntegrationsBundle\\Integration\\Interfaces\\IntegrationInterface;\n\nclass HelloWorldIntegration extends BasicIntegration\n{\n    const NAME = 'HelloWorld';\n\n    public function getName(): string\n    {\n        return self::NAME;\n    }\n\n    public function getDisplayName(): string\n    {\n        return 'Hello World';\n    }\n\n    public function getIcon(): string\n    {\n        return 'plugins/HelloWorldBundle/Assets/img/helloworld.png';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Designing Email Template with MJML in Mautic\nDESCRIPTION: Example of an email.html.twig file using the MJML email framework, supported by the GrapesJS Builder in Mautic.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/themes/getting_started.rst#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<mjml>\n  <mj-body>\n    <mj-raw>\n      <!-- Company Header -->\n    </mj-raw>\n    <mj-section background-color=\"#f0f0f0\">\n      <mj-column>\n        <mj-text font-style=\"bold\" font-size=\"24px\" color=\"#6f6f6f\">My Company</mj-text>\n      </mj-column>\n    </mj-section>\n    <mj-raw>\n      <!-- Confirm  text -->\n    </mj-raw>\n    <mj-section background-color=\"#fafafa\">\n      <mj-column width=\"400px\">\n        <mj-text font-style=\"bold\" font-size=\"22px\" font-family=\"Helvetica Neue\" color=\"#626262\">Please confirm your subscription!</mj-text>\n        <mj-button background-color=\"#F45E43\" font-style=\"bold\" href=\"#\">Yes, subscribe me to the list</mj-button>\n        <mj-text color=\"#525252\" font-size=\"16\" line-height=\"1.5\">If you received this email by mistake, simply delete it. You won't be subscribed if you don't click the confirmation link above.<br/><br/>For questions about this list, please contact:\nemail@example.com</mj-text>\n      </mj-column>\n    </mj-section>\n        <mj-raw>\n      <!-- Confirm  text -->\n    </mj-raw>\n        <mj-section background-color=\"#fafafa\">\n      <mj-column width=\"400px\">\n        <mj-text color=\"#525252\" line-height=\"1.2\">\n          <p>Company Name<br/>111 Amazing Street<br/>\n            Beautiful City</p></mj-text>\n\n      </mj-column>\n    </mj-section>\n  </mj-body>\n</mjml>\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Get Campaign Request\nDESCRIPTION: This JSON snippet illustrates the structure of the response when requesting details of a single campaign, including campaign properties and associated events.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/campaigns.rst#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"campaign\": {\n        \"id\": 3,\n        \"name\": \"Email A/B Test\",\n        \"description\": null,\n        \"isPublished\": true,\n        \"publishUp\": null,\n        \"publishDown\": null,\n        \"dateAdded\": \"2015-07-15T15:06:02-05:00\",\n        \"createdBy\": 1,\n        \"createdByUser\": \"Delfina Henderson\",\n        \"dateModified\": \"2015-07-20T13:11:56-05:00\",\n        \"modifiedBy\": 1,\n        \"modifiedByUser\": \"Iris Durand\",\n        \"category\": null,\n        \"events\": {\n            \"28\": {\n                \"id\": 28,\n                \"type\": \"lead.changepoints\",\n                \"eventType\": \"action\",\n                \"name\": \"Adjust lead points\",\n                \"description\": null,\n                \"order\": 1,\n                \"properties\": {\n                  \"points\": 20\n                },\n                \"triggerDate\": null,\n                \"triggerInterval\": 1,\n                \"triggerIntervalUnit\": \"d\",\n                \"triggerMode\": \"immediate\",\n                \"children\": [],\n                \"parent\": null,\n                \"decisionPath\": null\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Token Persistence for OAuth2 in PHP for Mautic Integration\nDESCRIPTION: This snippet shows how to set up token persistence for OAuth2 authentication in a Mautic integration. It uses the TokenPersistenceFactory to create a persistence service that stores tokens in the Integration entity's API keys.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/integrations_authentication.rst#2025-04-22_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse kamermans\\OAuth2\\Persistence\\TokenPersistenceInterface;\nuse MauticPlugin\\HelloWorldBundle\\Integration\\HelloWorldIntegration;\nuse Mautic\\IntegrationsBundle\\Auth\\Support\\Oauth2\\ConfigAccess\\ConfigTokenPersistenceInterface;\nuse Mautic\\IntegrationsBundle\\Auth\\Support\\Oauth2\\Token\\TokenPersistenceFactory;\nuse Mautic\\IntegrationsBundle\\Helper\\IntegrationsHelper;\n\n/** @var $integrationsHelper IntegrationsHelper */\n$integration = $integrationsHelper->getIntegration(HelloWorldIntegration::NAME);\n\n/** @var $tokenPersistenceFactory TokenPersistenceFactory */\n$tokenPersistence = $tokenPersistenceFactory->create($integration);\n\n$config = new class($tokenPersistence) implements ConfigTokenPersistenceInterface {\n    private $tokenPersistence;\n\n    public function __construct(TokenPersistenceInterface$tokenPersistence)\n    {\n        $this->tokenPersistence = $tokenPersistence;\n    }\n\n    public function getTokenPersistence(): TokenPersistenceInterface\n    {\n        return $this->tokenPersistence;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Adapter in PHP\nDESCRIPTION: Shows how to configure the Redis cache adapter in the local.php file for Mautic.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/cache.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n'redis' => [\n    'dsn' => 'redis://localhost',\n    'options' => [\n        'lazy' => false,\n        'persistent' => 0,\n        'persistent_id' => null,\n        'timeout' => 30,\n        'read_timeout' => 0,\n        'retry_interval' => 0,\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: HTTP Response Structure for Fetching a Single Asset in Mautic (JSON)\nDESCRIPTION: This JSON sample demonstrates the response structure returned by the Mautic API when fetching a single asset by ID. The response includes detailed metadata and nested objects describing asset properties, such as ID, title, publish dates, creator info, download statistics, category, file extension, MIME type, and downloadUrl. All fields listed are expected in the asset object. Used for reference in mapping API responses to application models.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/assets.rst#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"asset\": {\n        \"id\": 1,\n        \"title\": \"Product Whitepaper\",\n        \"description\": \"Some description\",\n        \"alias\": \"whitepaper\",\n        \"language\": \"en\",\n        \"isPublished\": true,\n        \"publishUp\": \"2015-06-07T06:28:27+00:00\",\n        \"publishDown\": \"2015-06-30T06:28:27+00:00\",\n        \"dateAdded\": \"2015-06-07T06:28:27+00:00\",\n        \"createdBy\": 1,\n        \"createdByUser\": \"Rahel Herschel\",\n        \"dateModified\": \"2015-06-010T09:30:47+00:00\",\n        \"modifiedBy\": 1,\n        \"modifiedByUser\": \"Rahel Herschel\",\n        \"downloadCount\": 10,\n        \"uniqueDownloadCount\": 8,\n        \"revision\": 1,\n        \"category\": {\n            \"createdByUser\": \"Yoav Andrysiak\",\n            \"modifiedByUser\": \"Yoav Andrysiak\",\n            \"id\": 19,\n            \"title\": \"test\",\n            \"alias\": \"test\",\n            \"description\": null,\n            \"color\": null,\n            \"bundle\": \"asset\"\n        },\n        \"extension\": \"pdf\",\n        \"mime\": \"application/pdf\",\n        \"size\": 269128,\n        \"downloadUrl\": \"https://example.com/asset/1:whitepaper\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Contact Notes in Mautic Contact API (PHP)\nDESCRIPTION: This PHP snippet demonstrates how to retrieve a list of notes for a specific contact using the Mautic Contact API. It includes parameters for filtering, pagination, and sorting.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$notes = $contactApi->getContactNotes($id, $searchFilter, $start, $limit, $orderBy, $orderByDir, $publishedOnly, $minimal);\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Example: List All Mautic Reports (JSON response)\nDESCRIPTION: This JSON output demonstrates the results of a GET request to '/reports', listing all available Reports. The response includes total count and an array of report metadata, covering report id, name, description, system flags, source, configuration columns, and scheduler parameters. Input is an HTTP GET request without filter parameters; output is a JSON object for client-side UI renderings or integrations. All fields are sample data, not live values.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/reports.rst#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"total\": 8, \n  \"reports\":[  \n    {  \n      \"id\": 1,\n      \"name\": \"Contacts\",\n      \"descriptionn\": \"lists all contacts\",\n      \"system\": false,\n      \"isScheduled\": false,\n      \"source\": \"leads\",\n      \"columns\": [\n        \"l.id\",\n        \"l.email\",\n        \"l.firstname\",\n        \"l.lastname\"\n      ],\n      \"filters\": [],\n      \"tableOrder\": [],\n      \"graphs\": [],\n      \"groupBy\": [],\n      \"settings\": {\n        \"showGraphsAboveTable\": 0,\n        \"showDynamicFilters\": 0,\n        \"hideDateRangeFilter\": 0\n      },\n      \"aggregators\": [],\n      \"scheduleUnit\": null,\n      \"toAddress\": null,\n      \"scheduleDay\": null,\n      \"scheduleMonthFrequency\": null\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Permissions with analyzePermissions in PHP\nDESCRIPTION: The function \"analyzePermissions\" modifies role permissions by including additional required permissions based on initial selections. It addresses 'User error' by ensuring dependencies like 'use_telescope' and 'send_probe' permissions are added when 'visit' is selected. It accepts existing permissions, all role permissions, and a second-round flag as inputs, returning true if a revisit is necessary.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/security.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n    /**\n      * @param array $permissions     Plugin specific permissions\n      * @param       $allPermissions  All role permissions\n      * @param bool  $isSecondRound   Is round two after permissions have been updated by all permission classes \n      *\n      * @return bool Return true if a second round is required; default false\n      */\n    public function analyzePermissions(array &$permissions, $allPermissions, $isSecondRound = false)\n    {\n        foreach ($permissions as $level => &$perms) {\n            foreach ($perms as $perm) {\n                $include = array();\n                switch ($perm) {\n                    case 'send_probe':\n                        $include = array('use_telescope');\n                        break;\n                    case 'visit':\n                        $include = array('use_telescope', 'send_probe');\n                        break;\n                }\n                if (!empty($include)) {\n                    foreach ($include as $r) {\n                        list($ignore, $r) = $this->getSynonym($level, $r);\n                        if ($this->isSupported($level, $r) && !in_array($r, $perms)) {\n                            $perms[] = $r;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n```\n\n----------------------------------------\n\nTITLE: Deleting a Single Mautic Contact in PHP\nDESCRIPTION: This snippet shows the process of deleting a single Mautic contact using the PHP API wrapper. It calls the `$contactApi->delete()` method, passing the unique `$id` of the contact that needs to be removed from the system.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$contact = $contactApi->delete($id);\n```\n\n----------------------------------------\n\nTITLE: Contact Export Notification Implementation\nDESCRIPTION: Example of creating a notification for a scheduled contact export event using the NotificationModel.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/notifications.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function onContactExportScheduled(ContactExportSchedulerEvent $event): void\n{\n    /** @var User $user */\n    $user    = $event->getContactExportScheduler()->getUser();\n    $message = $this->translator->trans('mautic.lead.export.being.prepared', ['%user_email%' => $user->getEmail()]);\n\n    $this->notificationModel->addNotification(\n        $message,\n        'info',\n        false,\n        'mautic.lead.export.being.prepared.header',\n        null,\n        null,\n        $user\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Mautic API for Text Messages in PHP\nDESCRIPTION: This snippet demonstrates how to initialize the Mautic API for interacting with text messages (SMS) using the Mautic API Library.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/text_messages.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Mautic\\MauticApi;\nuse Mautic\\Auth\\ApiAuth;\n\n// ...\n$initAuth = new ApiAuth();\n$auth     = $initAuth->newAuth($settings);\n$apiUrl   = \"https://example.com\";\n$api      = new MauticApi();\n$smsApi   = $api->newApi(\"smses\", $auth, $apiUrl);\n```\n\n----------------------------------------\n\nTITLE: Migrating from Service String ID to FQCN Access - Service Retrieval PHP Diff\nDESCRIPTION: This diff-format snippet documents the change required to migrate code from retrieving services by their legacy string alias to using the Fully Qualified Class Name (FQCN) directly. It should be applied anywhere in the project codebase where services are accessed via the container. The expected input is a codebase with get() calls using string IDs; output is updated calls using the class reference. This change supports easier maintainability and better compatibility with modern autowiring.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/plugins/autowiring.rst#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n- $container->get('mautic.campaign.model.campaign');\n+ $container->get(\\Mautic\\CampaignBundle\\Model\\CampaignModel::class);\n```\n\n----------------------------------------\n\nTITLE: Sending a Text Message to a Contact in PHP\nDESCRIPTION: This snippet demonstrates how to send a predefined text message to an existing contact using the Mautic API Library.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/text_messages.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$sms = $smsApi->sendToContact($smsId, $contactId);\n```\n\n----------------------------------------\n\nTITLE: Applying Quick Filters with JavaScript in Mautic\nDESCRIPTION: This JavaScript function 'Mautic.listQuickFilter' applies the quick filter by setting the search input value and simulating an Enter key press to trigger the search.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/quick_filters.rst#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMautic.listQuickFilter = function (element) {\n    const filterValue = element.dataset.filter;\n    const searchInput = document.getElementById('list-search');\n    searchInput.value = filterValue;\n    const enterKeyEvent = new KeyboardEvent('keyup', {\n        keyCode: 13\n    });\n    searchInput.dispatchEvent(enterKeyEvent);\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Mautic Report using PHP API Client\nDESCRIPTION: Demonstrates how to delete a Mautic report using the PHP API client library. It calls the `delete` method on the report API context, passing the ID of the report to be deleted. A successful deletion typically results in a 200 OK response from the API.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/reports.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$report = $reportApi->delete($id);\n```\n\n----------------------------------------\n\nTITLE: Defining Text Message Send Event Documentation - reStructuredText\nDESCRIPTION: This snippet uses reStructuredText to describe the structure and data of the Mautic webhook event triggered when a text message is sent to a contact. It documents the event type as 'mautic.sms_on_send', and provides an event properties table detailing keys, types, and descriptions—helping integrators understand which fields to expect. The snippet relies on Sphinx/RST table markup and references, and assumes Mautic webhook familiarity.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/webhooks/events/sms_on_send.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\nText send event\n###############\n\nTriggered when Mautic sends a Text Message to a Contact.\n\n.. _sms_on_send_event_type:\n\nEvent type\n**********\n\n``mautic.sms_on_send``\n\n.. _sms_on_send_event_properties:\n\nEvent properties\n****************\n\n.. list-table::\n    :header-rows: 1\n\n    * - Key\n      - Type\n      - Description\n    * - ``smsId``\n      - int\n      - ID of the SMS sent.\n    * - ``contact``\n      - object\n      - :ref:`Contact object<webhooks/events/lead_post_save_new:Contact properties>`.\n    * - ``content``\n      - string\n      - Content of the SMS sent to the Contact.\n    * - ``timestamp``\n      - string\n      - Date/time the event occurred in ISO 8601 format.\n```\n\n----------------------------------------\n\nTITLE: Implementing onResponse Hook for Mautic Form in JavaScript\nDESCRIPTION: This snippet demonstrates how to implement the onResponse hook for a Mautic form. It allows custom handling of the form submission response before default processing occurs.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/form_hooks/response_hooks.rst#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMauticFormCallback['formname'] = {\n    onResponse: function (response) {\n        // do something custom\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Editing an Existing Notification in PHP\nDESCRIPTION: This snippet shows how to edit an existing notification or create a new one if it doesn't exist, using either PUT or PATCH methods.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/notifications.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$id   = 1;\n$data = array(\n    'name'    => 'Notification A',\n    'heading' => 'Hello World!'\n    'message' => 'This is my first notification created via API.',\n);\n\n// Create new a notification of ID 1 isn't found?\n$createIfNotFound = true;\n\n$notification = $notificationApi->edit($id, $data, $createIfNotFound);\n```\n\n----------------------------------------\n\nTITLE: Listing Available Owners Response in Mautic API (JSON)\nDESCRIPTION: This JSON snippet shows the response structure when listing available owners in the Mautic API. It includes owner properties such as ID, first name, and last name.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": 1,\n    \"firstName\": \"Joe\",\n    \"lastName\": \"Smith\"\n  },\n  {\n    \"id\": 2,\n    \"firstName\": \"Jane\",\n    \"lastName\": \"Smith\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Request-Based Menu Item Checks - PHP\nDESCRIPTION: Shows how to conditionally display a menu item depending on Symfony Request attribute values. Integrates with Symfony's Request object, matching expected request parameters for conditional menu logic. The menu item appears only if the 'show-something' parameter is present and set to 1 in the active Request. Used within a PHP config array for Mautic plugins; no additional dependencies beyond Symfony Request context.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/plugins/config.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n// ...\\n\\n[\\n    'request' => [\\n        'show-something' => 1,\\n    ],\\n],\\n\\n// ...\\n\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Example: Retrieve Mautic Report by ID (JSON response)\nDESCRIPTION: This JSON snippet outlines the expected HTTP response for a GET request to the '/reports/ID' endpoint. The response includes total results, array of data rows, supported data columns, applied limits, pagination, and date parameters. Required inputs include the valid Report ID and optional query parameters. Output is a JSON object encapsulating the report data and metadata. This is a sample of real-world API output for integration or debugging purposes.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/reports.rst#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"totalResults\": 3990,\n  \"data\": [\n    {\n      \"id2\": \"12\",\n      \"email1\": \"john@example.com\",\n      \"firstname1\": \"\",\n      \"lastname1\": \"\"\n    },\n    {\n      \"id2\": \"23\",\n      \"email1\": \"alex@example.com\",\n      \"firstname1\": \"\",\n      \"lastname1\": \"\"\n    },\n    {\n      \"id2\": \"24\",\n      \"email1\": \"amal@example.com\",\n      \"firstname1\": \"\",\n      \"lastname1\": \"\"\n    },\n    {\n      \"id2\": \"25\",\n      \"email1\": \"ariel@example.com\",\n      \"firstname1\": \"\",\n      \"lastname1\": \"\"\n    },\n    {\n      \"id2\": \"26\",\n      \"email1\": \"bola@example.com\",\n      \"firstname1\": \"\",\n      \"lastname1\": \"\"\n    }\n  ],\n  \"dataColumns\": {\n    \"address11\": \"l.address1\",\n    \"address21\": \"l.address2\",\n    \"attribution1\": \"l.attribution\",\n    \"attribution_date1\": \"l.attribution_date\",\n    \"city1\": \"l.city\",\n    \"company1\": \"l.company\",\n    \"companyaddress11\": \"comp.companyaddress1\",\n    \"companyaddress21\": \"comp.companyaddress2\",\n    \"companycity1\": \"comp.companycity\",\n    \"companyemail1\": \"comp.companyemail\",\n    \"companyname1\": \"comp.companyname\",\n    \"companycountry1\": \"comp.companycountry\",\n    \"companydescription1\": \"comp.companydescription\",\n    \"companyfax1\": \"comp.companyfax\",\n    \"id1\": \"comp.id\",\n    \"companyphone1\": \"comp.companyphone\",\n    \"companystate1\": \"comp.companystate\",\n    \"companywebsite1\": \"comp.companywebsite\",\n    \"companyzipcode1\": \"comp.companyzipcode\",\n    \"id2\": \"l.id\",\n    \"country1\": \"l.country\",\n    \"custom_select1\": \"l.custom_select\",\n    \"date_identified1\": \"l.date_identified\",\n    \"email1\": \"l.email\",\n    \"facebook1\": \"l.facebook\",\n    \"fax1\": \"l.fax\",\n    \"firstname1\": \"l.firstname\",\n    \"foursquare1\": \"l.foursquare\",\n    \"gender1\": \"l.gender\",\n    \"googleplus1\": \"l.googleplus\",\n    \"ip_address1\": \"i.ip_address\",\n    \"instagram1\": \"l.instagram\",\n    \"is_primary1\": \"companies_lead.is_primary\",\n    \"lastname1\": \"l.lastname\",\n    \"linkedin1\": \"l.linkedin\",\n    \"mobile1\": \"l.mobile\",\n    \"multiline1\": \"l.multiline\",\n    \"multiselect1\": \"l.multiselect\",\n    \"owner_id1\": \"l.owner_id\",\n    \"first_name1\": \"u.first_name\",\n    \"last_name1\": \"u.last_name\",\n    \"phone1\": \"l.phone\",\n    \"points1\": \"l.points\",\n    \"position1\": \"l.position\",\n    \"preferred_locale1\": \"l.preferred_locale\",\n    \"timezone1\": \"l.timezone\",\n    \"skype1\": \"l.skype\",\n    \"state1\": \"l.state\",\n    \"title1\": \"l.title\",\n    \"twitter1\": \"l.twitter\",\n    \"website1\": \"l.website\",\n    \"zipcode1\": \"l.zipcode\"\n  },\n  \"limit\": 5,\n  \"page\": 3,\n  \"dateFrom\": \"2017-01-01T00:00:00+00:00\",\n  \"dateTo\": \"2018-10-24T11:55:29+00:00\"\n}\n```\n\n----------------------------------------\n\nTITLE: Making CORS Request with Callbacks in JavaScript\nDESCRIPTION: Shows how to use MauticJS.makeCORSRequest() to make a cross-origin request with success and error callbacks. The method handles data serialization and JSON parsing.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/tracking_script.rst#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nMauticJS.makeCORSRequest('GET', 'https://mymautic.com/dwc/slot1', [], function (response, xhr) {\n    if (response.success) {\n        document.getElementById('slot1').innerHTML = response.content;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing onErrorClear Hook for Form Error Clearing\nDESCRIPTION: Example of implementing the onErrorClear hook to handle clearing of validation errors. Allows for custom behavior when clearing specific field errors.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/form_hooks/validation_hooks.rst#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nMauticFormCallback['formname'] = {\n    onErrorClear: function (fieldContainerId) {\n        if ('mauticform_formname_email' == fieldContainerId) {\n             // do something custom\n        }\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Editing a Point Group in PHP\nDESCRIPTION: This PHP snippet shows how to edit an existing Point Group by its ID, updating its name and description using the Mautic API.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/point_groups.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$id   = 1;\n$data = [\n    'name'        => 'New Point Group name',\n    'description' => 'Updated description of the Point Group.'\n];\n\n$pointGroup = $pointGroupApi->edit($id, $data);\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Codeception Test File\nDESCRIPTION: This command executes all test scenarios defined within a specific acceptance test file, in this case, `ContactManagementCest.php` located in the acceptance suite directory.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/testing/e2e_test_suite.rst#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nbin/codecept run acceptance ContactManagementCest\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Mautic Contacts (Batch) in PHP\nDESCRIPTION: This snippet demonstrates deleting multiple Mautic contacts in a single batch request via the PHP API wrapper. It prepares an array `$data` containing the numerical IDs of the contacts to be deleted (e.g., `[1, 2]`). This array is then passed to the `$contactApi->deleteBatch()` method to perform the bulk deletion.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$data = array(1, 2);\n$contact = $contactApi->deleteBatch($data);\n```\n\n----------------------------------------\n\nTITLE: Executing Function on Document Ready in JavaScript\nDESCRIPTION: Shows how to use MauticJS.documentReady() to execute a function when the document has finished rendering. The function can be named or anonymous.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/tracking_script.rst#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction test() {\n    alert('test');\n}\n\nMauticJS.documentReady(test);\n```\n\n----------------------------------------\n\nTITLE: PHP Notification Model Parameters\nDESCRIPTION: Example showing the addNotification method parameters in the NotificationModel class for creating notifications.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/notifications.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$notificationModel->addNotification(\n    $message,\n    $type,\n    $isRead,\n    $header,\n    $iconClass,\n    $datetime,\n    $user,\n    $deduplicateValue,\n    $deduplicateDateTimeFrom\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing onValidateEnd Hook for Form Validation in JavaScript\nDESCRIPTION: Example of implementing the onValidateEnd hook which is called after form validation completes. Receives isFormValid parameter indicating validation status.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/form_hooks/validation_hooks.rst#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nMauticFormCallback['formname'] = {\n    onValidateEnd: function (isFormValid) {\n        // do some custom stuff\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Using securityIsGranted Function in Twig for Permission-Based Display\nDESCRIPTION: This snippet demonstrates the basic syntax for using the securityIsGranted function in Twig templates to conditionally display content based on user permissions.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/displaying_elements_based_on_user_permissions.rst#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% if securityIsGranted('permission:string') %}\n    <!-- Content to display if the user has the specified permission -->\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Starting the DDEV Environment for Mautic\nDESCRIPTION: This command starts the DDEV local development environment for the Mautic project. It assumes DDEV is installed and configured for the project directory.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/testing/e2e_test_suite.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddev start\n```\n\n----------------------------------------\n\nTITLE: Deleting a Category Using Mautic API in PHP\nDESCRIPTION: This snippet outlines the process of deleting a Category by its ID using the Mautic API in PHP. The `delete` method of the `categoryApi` is called with the category ID, permanently removing the category.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/categories.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$category = $categoryApi->delete($id);\n```\n\n----------------------------------------\n\nTITLE: Getting Individual Contact by ID in PHP\nDESCRIPTION: Retrieves a single contact by their ID using the Mautic Contact API.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n//...\n$contact = $contactApi->get($id);\n```\n\n----------------------------------------\n\nTITLE: Creating CORS Request in JavaScript\nDESCRIPTION: Demonstrates MauticJS.createCORSRequest() to create a cross-origin XMLHttpRequest, with fallback for Windows users.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/tracking_script.rst#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nMauticJS.createCORSRequest('GET', 'https://mymautic.com/dwc/slot1');\n```\n\n----------------------------------------\n\nTITLE: Aliasing Permissions with getSynonym in PHP\nDESCRIPTION: This PHP function \"getSynonym\" renames a given permission to another name, providing flexibility in permission management. It modifies the permission name when \"send_satellite\" is assigned by changing it to \"send_probe\". It requires permission levels as input and returns an array with the updated name and original level.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/security.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n    protected function getSynonym($name, $level)\n    {\n        if ($name == 'send_satellite') {\n            // Set real permission name\n           $name = 'send_probe';\n        }\n\n        return array($name, $level);\n    }\n```\n\n----------------------------------------\n\nTITLE: Sentence Case Examples\nDESCRIPTION: Examples demonstrating correct sentence case capitalization in UI elements\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- Analyse your lead generation chart with Marketing Insights.\n- Automate your marketing Campaigns.\n```\n\n----------------------------------------\n\nTITLE: Adding Contact to DNC List with PHP\nDESCRIPTION: PHP code snippet for adding a contact to the Do Not Contact list using the Mautic API. This method requires a contact ID, channel, reason, optional channel ID, and optional comments.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$contactApi->addDnc($contactId, $channel, $reason, $channelId, $comments);\n```\n\n----------------------------------------\n\nTITLE: Configuring Mautic for Test Environment in .env.local\nDESCRIPTION: This configuration snippet shows how to set the `APP_ENV` variable to `test` within the `.env.local` file. This instructs Mautic to run in test mode, potentially enabling specific behaviors or configurations for testing.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/testing/e2e_test_suite.rst#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n# .env.local\nAPP_ENV=test\nAPP_DEBUG=1\n```\n\n----------------------------------------\n\nTITLE: Implementing onShowNextPage Hook in Mautic Forms\nDESCRIPTION: This code demonstrates the onShowNextPage hook implementation, which is called before displaying the next page in multi-page forms. The hook receives the page number as a parameter and is useful for DOM adjustments before the page becomes visible.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/form_hooks/general_hooks.rst#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nMauticFormCallback['formname'] = {\n    onShowNextPage: function (pageNumber) {\n         // do some custom stuff\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Collection in JavaScript\nDESCRIPTION: Demonstrates MauticJS.iterateCollection() to iterate over a collection (array, object, HTMLCollection) and apply a function to each item.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/tracking_script.rst#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar videos = document.getElementsByTagName('video');\n\n// Add a custom data attribute to all videos\nMauticJS.iterateCollection(videos)(function(node, i) {\n    node.dataset.customAttribute = 'test';\n});\n```\n\n----------------------------------------\n\nTITLE: Including Accordion Component with Simple Content in Twig\nDESCRIPTION: This example demonstrates how to include the accordion component with simple content directly within the items array, without using a set block. It shows setting up an accordion item with basic HTML content.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/accordion.rst#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% include '@MauticCore/Helper/accordion.html.twig' with {\n    'items': [\n        {\n            'id': 'Example',\n            'title': 'Example Title',\n            'padding_inline': true,\n            'content': '<p>This is a simple content example.</p>',\n        }\n    ]\n} %}\n```\n\n----------------------------------------\n\nTITLE: Custom Message Handling in MauticJS Forms\nDESCRIPTION: This JavaScript snippet demonstrates how to implement custom message handling for Mautic forms using the onMessageSet callback. It allows for custom processing or replacement of default message insertion.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/tracking_script.rst#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar messageObject = {\n    message: message,\n    type: type\n};\n\nMauticFormCallback['replaceWithFormName'] = {\n    onErrorMark: function (messageObject) {\n         // called prior to default message insertion\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Generating a Codeception Acceptance Test (Cest) File\nDESCRIPTION: This command uses the Codeception generator to create a new acceptance test file with the specified name (`<TestName>`) in the Cest format. The generated file (`<TestName>Cest.php`) will be placed in the `tests/Acceptance` directory.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/testing/e2e_test_suite.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbin/codecept generate:cest acceptance <TestName>\n```\n\n----------------------------------------\n\nTITLE: Getting Contact Devices - PHP\nDESCRIPTION: PHP code example for retrieving a list of devices associated with a contact using the Mautic API.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_41\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$devices = $contactApi->getContactDevices($contactId);\n```\n\n----------------------------------------\n\nTITLE: Registering an Integration with Mautic Sync Engine\nDESCRIPTION: Configuration code for registering a custom integration with Mautic's Sync Engine. This snippet shows how to tag an integration support class with 'mautic.sync_integration' in the plugin's configuration file.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/integrations_sync.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    // ...\n    'services' => [\n        // ...\n        'integrations' => [\n            // ...\n            'helloworld.integration.sync' => [\n                'class' => \\MauticPlugin\\HelloWorldBundle\\Integration\\Support\\SyncSupport::class,\n                'tags'  => [\n                    'mautic.sync_integration',\n                ],\n            ],\n            // ...\n        ],\n        // ...\n    ],\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing onShowPreviousPage Hook in Mautic Forms\nDESCRIPTION: This code shows how to implement the onShowPreviousPage hook, which is called before displaying the previous page in multi-page forms. Like onShowNextPage, it receives the page number and allows DOM manipulation before page display.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/form_hooks/general_hooks.rst#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nMauticFormCallback['formname'] = {\n    onShowPreviousPage: function (pageNumber) {\n         // do some custom stuff\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Deleting Individual Cache Items in PHP\nDESCRIPTION: Demonstrates how to delete a specific cache item using its key with the CacheItemPoolInterface.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/cache.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$isDeleted = $cache->deleteItem('user_'.$userId);\n```\n\n----------------------------------------\n\nTITLE: Configuring Mautic Theme for Packagist Distribution\nDESCRIPTION: JSON configuration for the composer.json file, required when preparing a Mautic theme for distribution via Packagist.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/themes/getting_started.rst#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"mautic/theme-yourthemename\",\n  \"description\": \"A theme for Mautic\",\n  \"type\": \"mautic-theme\",\n  \"keywords\": [\"mautic\", \"theme\"],\n  \"extra\": {\n    \"install-directory-name\": \"yourthemename\"\n  },\n  \"minimum-stability\": \"dev\",\n  \"require\": {\n    \"mautic/core\": \"^5.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Get Contact\nDESCRIPTION: Example JSON response when retrieving a single contact, showing various contact properties including custom fields.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n   \"contact\": {\n       \"id\": 47,\n       \"dateAdded\": \"2015-07-21T12:27:12-05:00\",\n       \"createdBy\": 1,\n       \"createdByUser\": \"Joe Smith\",\n       \"dateModified\": \"2015-07-21T14:12:03-05:00\",\n       \"modifiedBy\": 1,\n       \"modifiedByUser\": \"Joe Smith\",\n       \"owner\": {\n           \"id\": 1,\n           \"Username\": \"joesmith\",\n           \"firstName\": \"Joe\",\n           \"lastName\": \"Smith\"\n       },\n       \"points\": 10,\n       \"lastActive\": \"2015-07-21T14:19:37-05:00\",\n       \"dateIdentified\": \"2015-07-21T12:27:12-05:00\",\n       \"color\": \"ab5959\",\n       \"ipAddresses\": {\n           \"111.111.111.111\": {\n               \"ipAddress\": \"111.111.111.111\",\n               \"ipDetails\": {\n                   \"city\": \"\",\n                   \"region\": \"\",\n                   \"country\": \"\",\n                   \"latitude\": \"\",\n                   \"longitude\": \"\",\n                   \"isp\": \"\",\n                   \"organization\": \"\",\n                   \"timezone\": \"\"\n               }\n           }\n       },\n       \"fields\": {\n           \"core\": {\n               \"title\": {\n                   \"id\": \"1\",\n                   \"label\": \"Title\",\n                   \"alias\": \"title\",\n                   \"type\": \"lookup\",\n                   \"group\": \"core\",\n                   \"value\": \"Mr\"\n               },\n               \"firstname\": {\n                   \"id\": \"2\",\n                   \"label\": \"First Name\",\n                   \"alias\": \"firstname\",\n                   \"type\": \"text\",\n                   \"group\": \"core\",\n                   \"value\": \"Jim\"\n               },\n\n               \"...\": {\n                   \"...\" : \"...\"\n               }\n\n           },\n           \"social\": {\n               \"twitter\": {\n                   \"id\": \"17\",\n                   \"label\": \"Twitter\",\n                   \"alias\": \"twitter\",\n                   \"type\": \"text\",\n                   \"group\": \"social\",\n                   \"value\": \"jimcontact\"\n               },\n\n               \"...\": {\n                   \"...\" : \"...\"\n               }\n\n           },\n           \"personal\": [],\n           \"professional\": [],\n           \"all\": {\n               \"title\": \"Mr\",\n               \"firstname\": \"Jim\",\n               \"twitter\": \"jimcontact\",\n\n               \"...\": \"...\"\n           }\n       }\n   }\n```\n\n----------------------------------------\n\nTITLE: Creating Standard HTML Alert Notification\nDESCRIPTION: Implementation of a standard alert notification with icon using HTML. Uses the alert class with specific alert types for success, info, warning, or danger notifications.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/notifications.rst#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"alert alert-warning\" role=\"alert\">\n  No emails are scheduled to be sent.\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Codecov for Coverage Reports in YAML\nDESCRIPTION: This YAML configuration enables Codecov integration for a Mautic plugin repository. It modifies default path fixes and specifies custom path transformations for accurate report mapping. This setup requires enabling the Codecov GitHub application and adding an API token in GitHub repository secrets.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/plugins/continuous-integration.rst#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncodecov:\n   disable_default_path_fixes: true\nfixes:\n   - \"/home/runner/work/plugin-helloworld/plugin-helloworld/plugins/HelloWorldBundle/::\"\n\n```\n\n----------------------------------------\n\nTITLE: Editing a Mautic Contact (PUT/PATCH) in PHP\nDESCRIPTION: This snippet demonstrates editing an existing Mautic contact using the `$contactApi->edit()` method in PHP. It specifies the contact's `$id` and provides a `$data` array containing the fields to update (`email`, `ipAddress`). The `$createIfNotFound` boolean flag controls the behavior if the specified `$id` doesn't exist: `true` mimics a PUT request (create if not found), while `false` (default, implied if omitted) mimics a PATCH request (fail if not found).\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$id   = 1;\n$data = array(\n    'email'     => 'isabel-new-address@example.com',\n    'ipAddress' => $_SERVER['REMOTE_ADDR'],    \n);\n\n// Create new a Contact of ID 1 isn't found?\n$createIfNotFound = true;\n\n$contact = $contactApi->edit($id, $data, $createIfNotFound);\n```\n\n----------------------------------------\n\nTITLE: Editing a Category in Mautic with PHP\nDESCRIPTION: This PHP snippet demonstrates how to edit an existing Category. The `edit` method is used, which updates or optionally creates a Category using either HTTP PUT or PATCH methods based on the `createIfNotFound` flag.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/categories.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$id   = 1;\n$data = array(\n    'title' => 'test',\n    'bundle' => 'asset'\n);\n\n// Create new a Category if ID 1 isn't found?\n$createIfNotFound = true;\n\n$category = $categoryApi->edit($id, $data, $createIfNotFound);\n```\n\n----------------------------------------\n\nTITLE: HTTP Response Structure for Listing Assets in Mautic (JSON)\nDESCRIPTION: This JSON snippet shows the API response when listing multiple assets, returning an object containing a total count and an array of asset objects. Each asset in the array contains metadata similar to the single asset structure, allowing applications to process asset lists with pagination or search/filtering. The response may include more than one asset. Used for reference when integrating asset listings into UIs or processing asset collections.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/assets.rst#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"total\": 1,\n    \"assets\": [\n        {\n            \"id\": 1,\n            \"title\": \"Product Whitepaper\",\n            \"description\": \"Some description\",\n            \"alias\": \"whitepaper\",\n            \"language\": \"en\",\n            \"isPublished\": true,\n            \"publishUp\": \"2015-06-07T06:28:27+00:00\",\n            \"publishDown\": \"2015-06-30T06:28:27+00:00\",\n            \"dateAdded\": \"2015-06-07T06:28:27+00:00\",\n            \"createdBy\": 1,\n            \"createdByUser\": \"Wayne Costa\",\n            \"dateModified\": \"2015-06-010T09:30:47+00:00\",\n            \"modifiedBy\": 1,\n            \"modifiedByUser\": \"Wayne Costa\",\n            \"downloadCount\": 10,\n            \"uniqueDownloadCount\": 8,\n            \"revision\": 1,\n            \"category\": null,\n            \"extension\": \"pdf\",\n            \"mime\": \"application/pdf\",\n            \"size\": 269128,\n            \"downloadUrl\": \"https://example.com/asset/1:whitepaper\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Categories in Plugin Config\nDESCRIPTION: Shows how to define categories in a plugin's config.php file. The category key must be prefixed with 'plugin:' for proper permission management.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/categories.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n'categories' => [\n    'plugin:helloWorld' => 'mautic.helloworld.world.categories'\n]\n```\n\n----------------------------------------\n\nTITLE: Logging with MauticJS in JavaScript\nDESCRIPTION: Shows the use of MauticJS.log() for logging, which acts as a wrapper around console.log for browser compatibility.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/tracking_script.rst#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nMauticJS.log('Something happened');\n```\n\n----------------------------------------\n\nTITLE: Mautic Form HTML Structure - HTML\nDESCRIPTION: Example HTML structure of a Mautic form showing where to find the form's API name in the data-mautic-form attribute.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/form_hooks/getting_started.rst#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<form autocomplete=\"false\" role=\"form\" method=\"post\" action=\"https://example.com?formId=1\" id=\"mauticform_thisismytestform\" data-mautic-form=\"thisismytestform\" enctype=\"multipart/form-data\">\n```\n\n----------------------------------------\n\nTITLE: Cloning an Existing Campaign in PHP\nDESCRIPTION: This snippet shows how to clone an existing campaign using its ID with the Mautic API.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/campaigns.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$camnpaignId = 12;\n\n$campaign = $campaignApi->cloneCampaign($campaignId);\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for List Campaigns Request\nDESCRIPTION: This JSON snippet shows the structure of the response when requesting a list of campaigns, including campaign details and associated events.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/campaigns.rst#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"total\": 1,\n    \"campaigns\": {\n        \"3\": {\n            \"id\": 3,\n            \"name\": \"Welcome Campaign\",\n            \"description\": null,\n            \"isPublished\": true,\n            \"publishUp\": null,\n            \"publishDown\": null,\n            \"dateAdded\": \"2015-07-15T15:06:02-05:00\",\n            \"createdBy\": 1,\n            \"createdByUser\": \"Lucine Van der Zee\",\n            \"dateModified\": \"2015-07-20T13:11:56-05:00\",\n            \"modifiedBy\": 1,\n            \"modifiedByUser\": \"Lucine Van der Zee\",\n            \"category\": null,\n            \"events\": {\n                \"22\": {\n                    \"id\": 22,\n                    \"type\": \"email.send\",\n                    \"eventType\": \"action\",\n                    \"name\": \"Send welcome email\",\n                    \"description\": null,\n                    \"order\": 1,\n                    \"properties\": {\n                        \"email\": 1\n                    },\n                    \"triggerMode\": \"immediate\",\n                    \"triggerDate\": null,\n                    \"triggerInterval\": null,\n                    \"triggerIntervalUnit\": null,\n                    \"children\": [],\n                    \"parent\": null,\n                    \"decisionPath\": null\n                },\n                \"28\": {\n                    \"id\": 28,\n                    \"type\": \"lead.changepoints\",\n                    \"eventType\": \"action\",\n                    \"name\": \"Adjust lead points\",\n                    \"description\": null,\n                    \"order\": 2,\n                    \"properties\": {\n                        \"points\": 20\n                    },\n                    \"triggerMode\": \"immediate\",                \n                    \"triggerDate\": null,\n                    \"triggerInterval\": null,\n                    \"triggerIntervalUnit\": null,\n                    \"children\": [],\n                    \"parent\": null,\n                    \"decisionPath\": null\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting a Single Campaign by ID in PHP\nDESCRIPTION: This snippet shows how to retrieve details of a single campaign using its ID with the Mautic API.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/campaigns.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n//...\n$campaign = $campaignApi->get($id);\n```\n\n----------------------------------------\n\nTITLE: Registering an Integration in app/config.php\nDESCRIPTION: Code snippet showing how to register an integration for configuration by tagging it with 'mautic.config_integration' in the plugin's app/config.php file.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/integrations_configuration.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    // ...\n    'services' => [\n        // ...\n        'integrations' => [\n            // ...\n            'helloworld.integration.configuration' => [\n                'class' => \\MauticPlugin\\HelloWorldBundle\\Integration\\Support\\ConfigSupport::class,\n                'tags'  => [\n                    'mautic.config_integration',\n                ],\n            ],\n            // ...\n        ],\n        // ...\n    ],\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Editing a Mautic Report using PHP API Client\nDESCRIPTION: Demonstrates how to edit a Mautic report using the PHP API client library. It sets the report ID and the data to be updated (in this case, the name). The `createIfNotFound` parameter controls whether a new report should be created if the specified ID doesn't exist (mimicking PUT behavior if true, PATCH if false).\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/reports.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$id   = 1;\n$data = array(\n    'name' => 'Updated Report'\n);\n\n// Create new a Report if ID 1 isn't found?\n$createIfNotFound = true;\n\n$report = $reportApi->edit($id, $data, $createIfNotFound);\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Point Group by ID in PHP\nDESCRIPTION: This code snippet shows how to retrieve a specific Point Group by its ID using the Mautic API.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/point_groups.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n//...\n$pointGroup = $pointGroupApi->get($id);\n```\n\n----------------------------------------\n\nTITLE: Getting Campaign Memberships Response in Mautic API (JSON)\nDESCRIPTION: This JSON snippet shows the response structure when retrieving campaign memberships for a contact in the Mautic API. It includes campaign properties such as ID, name, date added, and list membership.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"total\": 1,\n    \"campaigns\": {\n        \"1\": {\n            \"id\": 1,\n            \"name\": \"Welcome Campaign\",\n            \"dateAdded\": \"2015-07-21T14:11:47-05:00\",\n            \"manuallyRemoved\": false,\n            \"manuallyAdded\": false,\n            \"list_membership\": [\n                3\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Quick Filter Buttons with Twig in Mautic\nDESCRIPTION: This Twig template iterates through the provided quick filters and creates clickable labels for each one on the toolbar. It uses conditional rendering and applies necessary attributes for functionality and styling.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/quick_filters.rst#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% if quickFilters is defined and quickFilters is not empty %}\n<div class=\"d-flex gap-xs\">\n    {% for quickFilter in quickFilters %}\n        <a class=\"label label-outline\"\n           data-filter=\"{{ quickFilter.search }}\"\n           onclick=\"Mautic.listQuickFilter(this)\"\n           data-toggle=\"tooltip\"\n           data-placement=\"top\"\n           data-original-title=\"{{ quickFilter.tooltip|trans }}\">\n            <i class=\"{{ quickFilter.icon }}\"></i>\n            {{ quickFilter.label|trans }}\n        </a>\n    {% endfor %}\n</div>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Campaign in PHP\nDESCRIPTION: This snippet demonstrates how to create a new campaign using the Mautic API, including setting basic campaign properties.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/campaigns.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$data = array(\n    'name'        => 'Campaign A',\n    'description' => 'This is my first Campaign created via API.',\n    'isPublished' => 1\n);\n\n$campaign = $campaignApi->create($data);\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Permission Class in Plugin Configuration\nDESCRIPTION: Shows how to register a custom permission class in a Mautic plugin's config.php file, placing it in the services.permissions group for proper discovery by Mautic.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/security.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// plugins/HelloWorldBundle/Config/config.php\n\nreturn [\n    ...\n    'services' => [\n        'permissions' => [\n            'marketplace.permissions' => [\n                'class' => \\MauticPlugin\\HelloWorldBundle\\Security\\Permissions\\WorldsPermissions::class,\n            ],\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Notification in PHP\nDESCRIPTION: This code snippet shows how to get an individual notification by its ID using the Mautic API.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/notifications.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n//...\n$notification = $notificationApi->get($id);\n```\n\n----------------------------------------\n\nTITLE: Getting Segment Memberships Response in Mautic API (JSON)\nDESCRIPTION: This JSON snippet shows the response structure when retrieving segment memberships for a contact in the Mautic API. It includes segment properties such as ID, name, and alias.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"total\": 1,\n    \"segments\": {\n        \"3\": {\n            \"id\": 3,\n            \"name\": \"New Contacts\",\n            \"alias\": \"newcontacts\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Contact from Campaign with PHP Mautic API\nDESCRIPTION: This PHP snippet demonstrates how to manually remove a contact from a specific campaign using the Mautic API. It uses the campaign ID and contact ID as parameters. The code handles potential errors in the operation.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/campaigns.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n//...\n$response = $listApi->removeContact($campaignId, $contactId);\nif (!isset($response['success'])) {\n    // handle error\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"success\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Test Environment Default Configuration in Mautic\nDESCRIPTION: Default test environment configuration with database credentials and Mautic admin settings for creating a test instance.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/development-environment/environments.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_NAME=mautictest\nDB_USER=root\nDB_PASSWD=\nMAUTIC_DB_PREFIX=test_\nMAUTIC_TABLE_PREFIX=test_\nMAUTIC_ENV=test\nMAUTIC_ADMIN_USERNAME=admin\nMAUTIC_ADMIN_PASSWORD=Maut1cR0cks!\n```\n\n----------------------------------------\n\nTITLE: Retrieving Activity Events for a Specific Contact in PHP\nDESCRIPTION: This code snippet demonstrates how to use the Mautic PHP API to get activity events for a specific contact. It requires the contact ID and allows filtering by search terms, event types, date ranges, and pagination parameters.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$events = $contactApi->getActivityForContact($id, $search, $includeEvents, $excludeEvents, $orderBy, $orderByDir, $page, $dateFrom, $dateTo);\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Contact Activity Events\nDESCRIPTION: This JSON example shows the response structure when retrieving activity events for a contact. It includes event details, filters applied, available event types, and pagination information.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"events\":[\n    {\n      \"event\":\"lead.identified\",\n      \"icon\":\"fa-User\",\n      \"eventType\":\"Contact identified\",\n      \"eventPriority\":-4,\n      \"timestamp\":\"2016-06-09T21:39:08+00:00\",\n      \"featured\":true\n    }\n  ],\n  \"filters\":{\n    \"search\":\"\",\n    \"includeEvents\":[\n      \"lead.identified\"\n    ],\n    \"excludeEvents\":[]\n  },\n  \"order\":[\n    \"\",\n    \"ASC\"\n  ],\n  \"types\":{\n    \"asset.download\": \"Asset downloaded\",\n    \"campaign.event\": \"Campaign action triggered\",\n    \"campaign.event.scheduled\": \"Campaign event scheduled\",\n    \"lead.donotcontact\": \"Do not contact\",\n    \"email.failed\": \"Email failed\",\n    \"email.read\": \"Email read\",\n    \"email.sent\": \"Email sent\",\n    \"form.submitted\": \"Form submitted\",\n    \"lead.imported\": \"Imported\",\n    \"page.hit\": \"Page hit\",\n    \"point.gained\": \"Point gained\",\n    \"stage.changed\": \"Stage changed\",\n    \"lead.utmtagsadded\": \"UTM tags recorded\",\n    \"page.videohit\": \"Video view event\"\n  },\n  \"total\":1,\n  \"page\":1,\n  \"limit\":25,\n  \"maxPages\":1\n}\n```\n\n----------------------------------------\n\nTITLE: Multiplying Contact Points in Mautic API (JSON)\nDESCRIPTION: This snippet shows the JSON response structure when multiplying points for a contact in a specific point group. It includes the updated score and group information.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"groupScore\": {\n        \"score\": 21,\n        \"group\": {\n            \"id\": 6,\n            \"name\": \"A\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Text to JSON in JavaScript\nDESCRIPTION: Demonstrates MauticJS.parseTextToJSON() to safely parse a string into a JSON object if valid, or return the original string if not.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/tracking_script.rst#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar text = '{\"firstname\": \"John\", \"lastname\": \"Doe\"}';\n\nvar json = MauticJS.parseTextToJSON(text);\n\nalert(json); // Will show [object Object]\n\nvar text = 'not valid json';\n\nvar json = MauticJS.parseTextToJSON(text);\n\nalert(json); // Will show 'not valid json'\n```\n\n----------------------------------------\n\nTITLE: Subtracting Points from Contact with PHP\nDESCRIPTION: PHP code for subtracting points from a contact with event and action details. This method allows tracking the reason for points subtraction with custom event and action names.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$data = array(\n     'eventname' => 'Score via api',\n     'actionname' => 'Subtracting',\n );\n$contactApi->subtractPoints($contactId, $pointDelta, $data);\n```\n\n----------------------------------------\n\nTITLE: Initializing Mautic API for Point Groups in PHP\nDESCRIPTION: This snippet demonstrates how to initialize the Mautic API for working with Point Groups. It sets up the authentication and creates a new API instance for point groups.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/point_groups.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Mautic\\MauticApi;\nuse Mautic\\Auth\\ApiAuth;\n\n// ...\n$initAuth = new ApiAuth();\n$auth     = $initAuth->newAuth($settings);\n$apiUrl   = \"https://your-mautic.com\";\n$api      = new MauticApi();\n$pointGroupApi = $api->newApi(\"pointGroups\", $auth, $apiUrl);\n```\n\n----------------------------------------\n\nTITLE: Creating Landing Page Template in Twig for Mautic\nDESCRIPTION: Twig template for the page.html.twig file, defining the base structure for creating new landing pages in Mautic.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/themes/getting_started.rst#2025-04-22_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        {% if page is defined %}\n        <title>{pagetitle}</title>\n        <meta name=\"description\" content=\"{pagemetadescription}\">\n        {% endif %}\n        {{ outputHeadDeclarations() }}\n    </head>\n    <body>\n        {{ outputScripts('bodyOpen') }}\n        {% block content %}{% endblock %}\n        {{ outputScripts('bodyClose') }}\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Get Category\nDESCRIPTION: This JSON snippet represents the structure of a response retrieved from Mautic API when fetching a category by ID. Key properties include `id`, `title`, `alias`, and others, detailing the attributes of the category.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/categories.rst#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"category\":{  \n    \"id\":221,\n    \"title\":\"test\",\n    \"alias\":\"test4\",\n    \"description\":null,\n    \"color\":null,\n    \"bundle\":\"asset\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy Service Definition with Parameter Argument - Mautic PHP\nDESCRIPTION: This code shows a legacy service definition from config.php where a service receives a parameter (not just other services) as its argument. Typically used for configuration options that cannot be autowired, the service is registered under a string alias and takes a container parameter indicated by a percent-sign syntax. This method requires all arguments, including scalar values or arrays, to be declared explicitly. The output is a registered service with the parameter injected at construction.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/plugins/autowiring.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// config.php\n'mautic.config.form.escape_transformer' => [\n    'class'     => \\Mautic\\ConfigBundle\\Form\\Type\\EscapeTransformer::class,\n    'arguments' => [\n        '%mautic.config_allowed_parameters%',\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Referencing Mautic Core Parameters Helper\nDESCRIPTION: Shows how to access Mautic's custom configuration system using the CoreParametersHelper class.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/plugins/mautic_vs_symfony.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\\Mautic\\CoreBundle\\Helper\\CoreParametersHelper\n```\n\n----------------------------------------\n\nTITLE: Installing Mautic via Command Line in Bash\nDESCRIPTION: This Bash command uses the Mautic console to install Mautic from the command line. It requires specifying the URL where Mautic will be accessible.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/development-environment/setup.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp bin/console mautic:install https://mautic.example.com\n```\n\n----------------------------------------\n\nTITLE: Designing Form Template in Twig for Mautic\nDESCRIPTION: Twig template for the form.html.twig file, used when accessing forms directly or embedding them in landing pages or third-party pages.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/themes/getting_started.rst#2025-04-22_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n<html>\n    <head></head>\n    <body>\n        {% if message is defined %}\n            <div>\n                <h2>{{ message|raw }}</h2>\n            </div>\n        {% endif %}\n\n        <div>\n            {% if header is defined %}\n            <h4>{{ header }}</h4>\n            {% endif %}\n            {{ content|raw }}\n        </div>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Points Operation Success Response\nDESCRIPTION: JSON response indicating successful points operation. Simple response with a success flag when points are added or removed from a contact.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"success\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Responsive Flex Layout Combination\nDESCRIPTION: Shows how to combine multiple flex utilities to create a responsive layout that changes from column to row based on screen size.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/utilities.rst#2025-04-22_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"d-flex fd-row-md fd-column fw-wrap jc-center ai-center gap-15\">\n  <!-- Flex items here -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Mautic Custom Spool Delegation\nDESCRIPTION: Example of a custom proxy service used to work around limitations with environment variables in third-party bundles.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/plugins/mautic_vs_symfony.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\\Mautic\\EmailBundle\\Swiftmailer\\Spool\\DelegatingSpool\n```\n\n----------------------------------------\n\nTITLE: Listing Available Fields Response in Mautic API (JSON)\nDESCRIPTION: This JSON snippet shows the response structure when listing available contact fields in the Mautic API. It includes field properties such as ID, label, alias, type, group, and order.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"1\": {\n        \"id\": 1,\n        \"label\": \"Title\",\n        \"alias\": \"title\",\n        \"type\": \"lookup\",\n        \"group\": \"core\",\n        \"order\": 1\n    },\n    \"2\": {\n        \"id\": 2,\n        \"label\": \"First Name\",\n        \"alias\": \"firstname\",\n        \"type\": \"text\",\n        \"group\": \"core\",\n        \"order\": 2\n    },\n    \"3\": {\n        \"id\": 3,\n        \"label\": \"Last Name\",\n        \"alias\": \"lastname\",\n        \"type\": \"text\",\n        \"group\": \"core\",\n        \"order\": 3\n    },\n\n    \"...\": {\n        \"...\" : \"...\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Database Credentials in .env.test.local\nDESCRIPTION: This configuration snippet shows the necessary database connection details (host, user, password, database name) within the `.env.test.local` file. These credentials are used specifically when `APP_ENV` is set to `test`, ensuring tests run against a separate database (`test`) instead of the production one (`db`).\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/testing/e2e_test_suite.rst#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# .env.test.local\nDB_HOST=db\nDB_USER=db\nDB_PASSWD=db\nDB_NAME=test\n```\n\n----------------------------------------\n\nTITLE: Retrieving API Keys from Integration Configuration\nDESCRIPTION: Code snippet showing how to retrieve API keys from an integration configuration using the integration helper.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/integrations_configuration.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$apiKeys  = $integrationHelper->get(HelloWorldIntegration::NAME)->getIntegrationConfiguration()->getApiKeys();\n$username = $apiKeys['username'];\n```\n\n----------------------------------------\n\nTITLE: DNC API Response Example\nDESCRIPTION: JSON response after adding a contact to the Do Not Contact list. The response includes the channel ID, reason for DNC status, and any comments provided.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"channelId\": \"26\",\n  \"reason\": \"Integration issued DNC\",\n  \"comments\": \"Unsubscribed via API\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Codeception Test Scenario\nDESCRIPTION: This command executes a single, specific test scenario (method) named `createContactFromForm` within the `ContactManagementCest` acceptance test file.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/testing/e2e_test_suite.rst#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nbin/codecept run acceptance ContactManagementCest:createContactFromForm\n```\n\n----------------------------------------\n\nTITLE: Listing Text Messages in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve a list of text messages with various filtering and pagination options using the Mautic API Library.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/text_messages.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// ...\n\n$smses = $smsApi->getList($searchFilter, $start, $limit, $orderBy, $orderByDir, $publishedOnly, $minimal);\n```\n\n----------------------------------------\n\nTITLE: Copying Core Template for Customization in Mautic (Twig)\nDESCRIPTION: This snippet demonstrates the file path for copying a core template (login page) to a custom location for customization in Mautic. It shows both the source and destination paths for the login.html.twig file.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/themes/system.rst#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\napp/bundles/UserBundle/Resources/views/Security/login.html.twig\n```\n\nLANGUAGE: twig\nCODE:\n```\nthemes/system/UserBundle/Resources/views/Security/login.html.twig\n```\n\n----------------------------------------\n\nTITLE: Referencing GrapesJS Plugin Scripts in HTML\nDESCRIPTION: This HTML snippet demonstrates how the initialized and injected plugin JavaScript assets are linked in the HTML source to enable the GrapesJS builder and plugins in a Mautic environment. Dependencies are the presence of compiled or source JavaScript files available at the script paths. Inputs are the URLs for the custom plugin and GrapesJS builder scripts; output is script inclusion and registration at runtime, with data-source attributes for context.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/themes/grapesjs.rst#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\\\"/plugins/GrapesJsCustomPluginBundle/Assets/dist/index.js?v6e9fccee\\\" data-source=\\\"mautic\\\"></script>\\n<script src=\\\"/plugins/GrapesJsBuilderBundle/Assets/library/js/dist/builder.js?v6e9fccee\\\" data-source=\\\"mautic\\\"></script>\n```\n\n----------------------------------------\n\nTITLE: Listing Available Fields in Mautic Contact API (PHP)\nDESCRIPTION: This PHP snippet demonstrates how to retrieve a list of available contact fields, including custom fields, using the Mautic Contact API.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$fields = $contactApi->getFieldList();\n```\n\n----------------------------------------\n\nTITLE: Including ProTip Template in Mautic Views\nDESCRIPTION: Example of how to include the ProTip template in a Mautic view with a translation key for the tip content. Shows proper syntax for template inclusion and parameter passing.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/protip.rst#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ include('@MauticCore/Helper/protip.html.twig', {tip: 'mautic.core.protip.contacts.view'}) }}\n```\n\n----------------------------------------\n\nTITLE: Generating Category List URL\nDESCRIPTION: Demonstrates how to generate a URL to the plugin's category list using the router.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/categories.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$categoryUrl = $router->generateUrl('mautic_category_index', ['bundle' => 'plugin:helloWorld']);\n```\n\n----------------------------------------\n\nTITLE: Creating a Slot Container in HTML for Mautic Legacy Builder\nDESCRIPTION: This code shows how to create a slot container using the data-slot-container attribute. It allows users to drag and drop new slots into this container when creating an email based on a theme.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/themes/legacy.rst#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div data-slot-container=\"1\">\n    <div data-slot=\"text\">\n        <a>@JaneDoe</a> has invited you to join Awesome inc!\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Campaign Contacts Request\nDESCRIPTION: This JSON snippet illustrates the structure of the response when requesting contacts associated with a campaign.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/campaigns.rst#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"total\":\"1\",\n  \"contacts\":[  \n    {  \n      \"campaign_id\":\"311\",\n      \"lead_id\":\"3126\",\n      \"date_added\":\"2017-01-25 15:11:10\",\n      \"manually_removed\":\"0\",\n      \"manually_added\":\"1\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mautic Theme Directory Structure\nDESCRIPTION: Shows the basic directory structure for a Mautic theme, including configuration file, Twig templates, and thumbnail images.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/themes/getting_started.rst#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nconfig.json\n    html/\n        email.html.twig\n        form.html.twig\n        message.html.twig\n        page.html.twig\nthumbnail.png\nthumbnail_email.png\nthumbnail_form.png\nthumbnail_page.png\n```\n\n----------------------------------------\n\nTITLE: Listing All Mautic Reports via PHP API Client\nDESCRIPTION: Shows how to retrieve all available Reports for a user with the Mautic PHP API client. This method does not allow filtering and returns all accessible Reports. Requires an authenticated reportApi object. Key parameters include searchFilter, start, limit, order, publishedOnly, and minimal response. The output is a PHP array/object containing metadata and reports data.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/reports.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n//...\n$reports = $reportApi->getList($searchFilter, $start, $limit, $orderBy, $orderByDir, $publishedOnly, $minimal);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Form Directory Structure in Mautic\nDESCRIPTION: Specifies the directory structure for customizing Mautic form field templates, form body, and CSS styles. This structure allows for overriding default templates and adding custom styles.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/themes/forms.rst#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nField/ <– for customizing form field types\nhtml/\n    MauticFormBundle/\n        Builder/\n            _style.html.twig  <– for customizing CSS for Form\n    form.html.twig <– for customizing the form structure itself\n```\n\n----------------------------------------\n\nTITLE: Complete Accordion Component Implementation in Twig\nDESCRIPTION: This comprehensive example shows how to define content using a set block and then include the accordion component with that content. It demonstrates the full process of setting up and using the accordion in a Mautic template.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/accordion.rst#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% set utmTagsContent %}\n    {% for i, utmTag in form.utmTags %}\n        {{ form_row(utmTag) }}\n    {% endfor %}\n{% endset %}\n\n{% include '@MauticCore/Helper/accordion.html.twig' with {\n    'items': [\n        {\n            'id': 'UTM',\n            'title': 'mautic.email.utm_tags',\n            'padding_inline': false,\n            'content': utmTagsContent,\n        }\n    ]\n} %}\n```\n\n----------------------------------------\n\nTITLE: Listing Notifications in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve a list of notifications using various filter parameters such as search, pagination, and ordering.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/notifications.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// ...\n\n$notifications = $notificationApi->getList($searchFilter, $start, $limit, $orderBy, $orderByDir, $publishedOnly, $minimal);\n```\n\n----------------------------------------\n\nTITLE: Defining UTM Tags Content for Accordion in Twig\nDESCRIPTION: This snippet demonstrates how to define content for an accordion item using a Twig set block. It loops through UTM tag form fields to generate the content dynamically.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/accordion.rst#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% set utmTagsContent %}\n    {% for i, utmTag in form.utmTags %}\n        {{ form_row(utmTag) }}\n    {% endfor %}\n{% endset %}\n```\n\n----------------------------------------\n\nTITLE: Creating Translation File Structure in INI Format\nDESCRIPTION: Example of INI translation file structure showing key-value pairs with placeholders and plural forms.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/translator.rst#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nhelloworld.greeting=\"Welcome %name%!\"\nhelloworld.form.world_select=\"Select the world you want to visit.\"\nhelloworld.form.world_select.tooltip=\"Note that most are visit at your own risk!\"\nhelloworld.moons.number_of_moons=\"{0}%world% has no moons|{1}%world% has one moon|]1,Inf[ %world% has %count% moons\"\n```\n\n----------------------------------------\n\nTITLE: Defining RST Reference Label 'save'\nDESCRIPTION: Defines a reStructuredText internal hyperlink target named 'save'. This label anchors the definition for the 'Save' action, which saves pending modifications made to a file or document without closing the window or panel. Related to 'Apply' (:ref:`Apply`). Allows referencing via :ref:`save`.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_19\n\nLANGUAGE: rst\nCODE:\n```\n.. _save:\n```\n\n----------------------------------------\n\nTITLE: Running All Codeception Acceptance Tests\nDESCRIPTION: This command specifically executes only the tests belonging to the 'acceptance' suite, as defined in the Codeception configuration.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/testing/e2e_test_suite.rst#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nbin/codecept run acceptance\n```\n\n----------------------------------------\n\nTITLE: Legacy Service Definition in config.php - Mautic PHP\nDESCRIPTION: This snippet represents the legacy array-based service definition as used in earlier Mautic versions within the config.php file. Each service is keyed by a string alias and its definition includes the class name and constructor arguments, which may be other service aliases. This approach is being phased out in favor of autowiring but is included here for context and backward compatibility. The expected input is an associative array, with dependencies specified as aliases. Output is a configured service in the container backend.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/plugins/autowiring.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// config.php\n'mautic.campaign.model.campaign' => [\n    'class'     => \\Mautic\\CampaignBundle\\Model\\CampaignModel::class,\n    'arguments' => [\n        'mautic.lead.model.list',\n        'mautic.form.model.form',\n        'mautic.campaign.event_collector',\n        'mautic.campaign.membership.builder',\n        'mautic.tracker.contact',\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Including Accordion Component with UTM Tags in Twig\nDESCRIPTION: This snippet shows how to include the accordion.html.twig template and pass an array of items. It demonstrates setting up an accordion item with a unique ID, title, padding control, and content.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/accordion.rst#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% include '@MauticCore/Helper/accordion.html.twig' with {\n    'items': [\n        {\n            'id': 'UTM',\n            'title': 'mautic.email.utm_tags',\n            'padding_inline': false,\n            'content': utmTagsContent,\n        }\n    ]\n} %}\n```\n\n----------------------------------------\n\nTITLE: Translation Directory Structure Specification\nDESCRIPTION: Defines the required directory structure for translation files in Mautic core bundles and plugins.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/translator.rst#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nTranslations/\n    {locale}/\n        {domain}.ini\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Settings in PHP\nDESCRIPTION: Shows the default cache configuration settings and how to override them in the local.php file.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/cache.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'cache_adapter' => 'mautic.cache.adapter.filesystem',\n'cache_prefix' => 'app',\n'cache_lifetime' => 86400\n```\n\nLANGUAGE: php\nCODE:\n```\n'cache_adapter'  => 'mautic.cache.adapter.redis',\n'cache_prefix'   => 'app_cache',\n'cache_lifetime' => 86400,\n```\n\n----------------------------------------\n\nTITLE: Defining RST Reference Label 'save-as'\nDESCRIPTION: Defines a reStructuredText internal hyperlink target named 'save-as'. This label anchors the definition for the 'Save as' action, which creates a new object based on the state of the current object, requiring the User to name the new object and typically identify its location. Allows referencing via :ref:`save-as`.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_20\n\nLANGUAGE: rst\nCODE:\n```\n.. _save-as:\n```\n\n----------------------------------------\n\nTITLE: Creating Message Template in Twig for Mautic\nDESCRIPTION: Twig template for the message.html.twig file, used for unsubscribe and resubscribe landing pages. It echoes 'message' and 'content' variables.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/themes/getting_started.rst#2025-04-22_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<html>\n    <head></head>\n    <body>\n        <div>\n            <h2>{{ message|raw }}</h2>\n            {% if content is defined %}\n            <div>{{ content|raw }}</div>\n            {% endif %}\n        </div>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure\nDESCRIPTION: Toctree structure defining the navigation and organization of the Mautic developer documentation, including sections for development environment, design, themes, plugins, API and testing.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n   :caption: Development Environment\n   :hidden:\n\n   development-environment/getting_started\n   development-environment/how_to_install_with_ddev\n   development-environment/setup\n   development-environment/environments\n```\n\n----------------------------------------\n\nTITLE: Getting Segment Memberships in Mautic Contact API (PHP)\nDESCRIPTION: This PHP snippet demonstrates how to retrieve a list of contact segments that a specific contact is a member of using the Mautic Contact API.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$segments = $contactApi->getContactSegments($id);\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for List Notifications\nDESCRIPTION: This JSON snippet shows the expected response format when listing notifications, including a total count and an array of notification objects.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/notifications.rst#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{  \n    \"total\":1,\n    \"notifications\":[  \n        {  \n            \"isPublished\":true,\n            \"dateAdded\":\"2016-09-14T14:03:05+00:00\",\n            \"createdBy\":1,\n            \"createdByUser\":\"John Doe\",\n            \"dateModified\":\"2016-09-15T08:40:46+00:00\",\n            \"modifiedBy\":1,\n            \"modifiedByUser\":\"John Doe\",\n            \"id\":1,\n            \"name\":\"The first notification\",\n            \"heading\":\"The first notification Heading\",\n            \"message\":\"The first notification Message\",\n            \"url\":\"http:\\/\\/mautic.org\",\n            \"language\":\"en\",\n            \"category\":null,\n            \"publishUp\":null,\n            \"publishDown\":null,\n            \"readCount\":0,\n            \"sentCount\":0\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Getting a Text Message\nDESCRIPTION: This JSON snippet shows the expected response format when retrieving a single text message, including properties such as publication status, creation date, and message content.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/text_messages.rst#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"sms\":{\n        \"isPublished\":true,\n        \"dateAdded\":\"2016-09-14T12:14:45+00:00\",\n        \"createdBy\":1,\n        \"createdByUser\":\"Wu Popovski\",\n        \"dateModified\":null,\n        \"modifiedBy\":null,\n        \"modifiedByUser\":null,\n        \"id\":1,\n        \"name\":\"Message A\",\n        \"message\":\"Hello\",\n        \"language\":\"en\",\n        \"category\":null,\n        \"publishUp\":null,\n        \"publishDown\":null,\n        \"sentCount\":0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Contact Notes Response in Mautic API (JSON)\nDESCRIPTION: This JSON snippet shows the response structure when listing contact notes in the Mautic API. It includes note properties such as ID, text, type, and date/time.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"total\": 1,\n    \"notes\": [\n        {\n              \"id\": 1,\n              \"text\": \"<p>Jim is super cool!</p>\",\n              \"type\": \"general\",\n              \"dateTime\": \"2015-07-23T13:14:00-05:00\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Horizontally Distributed Flex Layout\nDESCRIPTION: Creates a flex container with items distributed evenly and vertically centered across the container width.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/utilities.rst#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"d-flex jc-space-between ai-center\">\n  <div>Left content</div>\n  <div>Center content</div>\n  <div>Right content</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Vertical Stack Layout\nDESCRIPTION: Demonstrates a vertical column layout with items stretched to container width and 10px spacing between items.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/utilities.rst#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"d-flex fd-column ai-stretch gap-10\">\n  <div>Top item</div>\n  <div>Middle item</div>\n  <div>Bottom item</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Listing Point Groups\nDESCRIPTION: This JSON snippet shows the expected response structure when listing Point Groups, including a total count and an array of point group objects.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/point_groups.rst#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"total\": 4,\n  \"pointGroups\": [\n    {\n        \"id\": 47,\n        \"name\": \"Group A\",\n        \"description\": \"This is my first Point Group created via API.\",\n        \"isPublished\": true,\n        \"dateAdded\": \"2024-02-29T12:17:52+00:00\",\n        \"dateModified\": null,\n        \"createdBy\": 2,\n        \"createdByUser\": \"Admin User\",\n        \"modifiedBy\": null,\n        \"modifiedByUser\": null\n    },\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Memcached Adapter in PHP\nDESCRIPTION: Provides configuration options for the Memcached cache adapter in Mautic.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/cache.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n'memcached' => [\n    'servers' => ['memcached://localhost'],\n    'options' => [\n        'compression' => true,\n        'libketama_compatible' => true,\n        'serializer' => 'igbinary',\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Basic Configuration Parameter Retrieval in Twig\nDESCRIPTION: Basic example of retrieving a Mautic configuration parameter using the configGetParameter function\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/retrieving_system_information.rst#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ configGetParameter('parameter_name') }}\n```\n\n----------------------------------------\n\nTITLE: Starting Mautic with DDEV\nDESCRIPTION: Commands to navigate to the Mautic directory and start the DDEV environment. This initializes the Mautic installation using DDEV.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/development-environment/how_to_install_with_ddev.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd mautic\nddev start\n```\n\n----------------------------------------\n\nTITLE: Removing Contact from DNC List with PHP\nDESCRIPTION: PHP code snippet for removing a contact from the Do Not Contact list using the Mautic API. This method requires a contact ID and the channel to remove the DNC status from.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$contactApi->removeDnc($contactId, $channel);\n```\n\n----------------------------------------\n\nTITLE: Including Code Samples in Mautic Documentation\nDESCRIPTION: This snippet demonstrates how to reference and include code samples in the Mautic documentation using Sphinx's literalinclude directive. The approach ensures that code samples are always up-to-date by downloading them from GitHub.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/README.md#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. The link to this file is defined in docs/code_samples/helloworld_entity_world.py \n.. literalinclude:: ../code_samples_downloaded/Entity_World.php\n    :language: php\n```\n\n----------------------------------------\n\nTITLE: Getting Contact's Events Response in Mautic API (JSON)\nDESCRIPTION: This JSON snippet shows the response structure when retrieving events for a contact in the Mautic API. It includes event details, filters, ordering, and pagination information.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"events\":[\n    {\n      \"event\":\"lead.identified\",\n      \"icon\":\"fa-User\",\n      \"eventType\":\"Contact identified\",\n      \"eventPriority\":-4,\n      \"timestamp\":\"2016-06-09T21:39:08+00:00\",\n      \"featured\":true\n    }\n  ],\n  \"filters\":{\n    \"search\":\"\",\n    \"includeEvents\":[\n      \"lead.identified\"\n    ],\n    \"excludeEvents\":[]\n  },\n  \"order\":[\n    \"\",\n    \"ASC\"\n  ],\n  \"types\":{\n    \"lead.ipadded\":\"Accessed from IP\",\n    \"asset.download\":\"Asset downloaded\",\n    \"campaign.event\":\"Campaign action triggered\",\n    \"lead.create\":\"Contact created\",\n    \"lead.identified\":\"Contact identified\",\n    \"lead.donotcontact\":\"Do not contact\",\n    \"email.read\":\"Email read\",\n    \"email.sent\":\"Email sent\",\n    \"email.failed\":\"Failed\",\n    \"form.submitted\":\"Form submitted\",\n    \"page.hit\":\"Page hit\",\n    \"point.gained\":\"Point gained\",\n    \"stage.changed\":\"Stage changed\",\n    \"lead.utmtagsadded\":\"UTM tags recorded\",\n    \"page.videohit\":\"Video View Event\"\n  },\n  \"total\":1,\n  \"page\":1,\n  \"limit\":25,\n  \"maxPages\":1\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Codeception Test with Verbose Output\nDESCRIPTION: This command executes the specified acceptance test file (`ContactManagementCest`) with the `-vvv` option, enabling maximum verbosity. This provides detailed internal debug information from Codeception during the test run.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/testing/e2e_test_suite.rst#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nbin/codecept run acceptance ContactManagementCest -vvv\n```\n\n----------------------------------------\n\nTITLE: Running a Codeception Test with Step Output\nDESCRIPTION: This command executes the specified acceptance test file (`ContactManagementCest`) and includes the `--steps` option, which causes Codeception to print each step of the test execution to the console output.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/testing/e2e_test_suite.rst#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nbin/codecept run acceptance ContactManagementCest --steps\n```\n\n----------------------------------------\n\nTITLE: Building Mautic Documentation Locally with Make\nDESCRIPTION: Instructions for building the Mautic documentation locally using the make command. This process generates HTML files that can be viewed in a browser, allowing contributors to preview their changes before submitting them.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd docs && make html\n```\n\n----------------------------------------\n\nTITLE: Defining a Text Slot in HTML for Mautic Legacy Builder\nDESCRIPTION: This snippet demonstrates how to define a text slot in HTML using the data-slot attribute. The content within the div becomes editable in the inline Froala editor when using the builder.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/themes/legacy.rst#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-slot=\"text\">\n    <a>@JaneDoe</a> has invited you to join Awesome inc!\n</div>\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Menu Item Checks - PHP\nDESCRIPTION: Details how to require several simultaneous conditions—such as configuration parameters, request data, and integration state—to control menu item visibility. All listed checks must evaluate to TRUE for the menu item to be displayed in the UI, enforcing multi-faceted access control. Designed for use in Mautic plugin PHP configuration files and requires neither additional libraries nor external dependencies beyond those already present in a standard Mautic/Symfony plugin environment.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/plugins/config.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n// ...\\n\\n[\\n    'parameters' => [\\n        'sysinfo_disabled' => false,\\n    ],\\n    'request' => [\\n        'show-something' => 1,\\n    ],\\n    'integration' => [\\n        'OneSignal' => [\\n            'enabled'  => true,\\n            'features' => [\\n                'mobile',\\n            ],\\n        ],\\n    ],\\n],\\n\\n// ...\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing ProTip Conditional Template in Twig\nDESCRIPTION: Core template for rendering conditional ProTips with icon, label, and translatable content. Includes support for HTML formatting and internationalization through Twig's trans filter.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/protip.rst#2025-04-22_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% if tip is defined and tip is not empty %}\n<div class=\"col-xs-12 ai-center mt-md mb-md\">\n    <div class=\"text-muted\">\n        <i class=\"ri-lightbulb-line ri-lg\"></i>\n        <span class=\"fw-b\">{{ 'mautic.core.protip'|trans }}</span>\n        {{ tip|trans|raw }}\n    </div>\n</div>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Cloning the Mautic Repository using Git\nDESCRIPTION: This command clones the specified Mautic repository from its URL and changes the current directory to the newly cloned repository folder. This is the first step in setting up the project locally.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/testing/e2e_test_suite.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone <repository-url>\ncd <repository-name>\n```\n\n----------------------------------------\n\nTITLE: Generating a Codeception PageObject File\nDESCRIPTION: This command uses the Codeception generator to create a new PageObject class file named `ExamplePage.php` for the acceptance suite. The file will be located in `tests/Support/Page/Acceptance` and is used to encapsulate UI locators and interactions for a specific page.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/testing/e2e_test_suite.rst#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbin/codecept generate:pageobject acceptance ExamplePage\n```\n\n----------------------------------------\n\nTITLE: Listing Contact Categories in PHP\nDESCRIPTION: This snippet shows how to fetch a list of Contact Categories using the Mautic API in PHP. The `getList` method retrieves the categories with various optional filters such as search criteria and pagination settings.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/categories.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n//...\n$categories = $categoryApi->getList($searchFilter, $start, $limit, $orderBy, $orderByDir, $publishedOnly, $minimal);\n```\n\n----------------------------------------\n\nTITLE: Defining a Section in HTML for Mautic Legacy Builder\nDESCRIPTION: This snippet illustrates how to define a section using the data-section attribute. Sections are full-width parts of the theme where users can change background colors and layout.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/themes/legacy.rst#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div data-section=\"1\">\n    <div data-slot-container=\"1\">\n        <div data-slot=\"text\">\n            <a>@JaneDoe</a> has invited you to join Awesome inc!\n        </div>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining RST Reference Label 'restore'\nDESCRIPTION: Defines a reStructuredText internal hyperlink target named 'restore'. This label anchors the definition for the 'Restore' action, which brings a file back after deletion, corruption, or similar event. Related to 'Reset' (:ref:`Reset`). Allows referencing via :ref:`restore`.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_14\n\nLANGUAGE: rst\nCODE:\n```\n.. _restore:\n```\n\n----------------------------------------\n\nTITLE: Cloning Mautic Repository\nDESCRIPTION: Command to clone the Mautic repository from GitHub to your local machine. This is the first step in the installation process.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/development-environment/how_to_install_with_ddev.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/mautic/mautic.git\n```\n\n----------------------------------------\n\nTITLE: Defining RST Reference Label 'select-all'\nDESCRIPTION: Defines a reStructuredText internal hyperlink target named 'select-all'. This label anchors the definition for the 'Select all' action, which adds all objects in the view to the selection set or checks all checkboxes. Related to 'Clear' (:ref:`Clear`). Allows referencing via :ref:`select-all`.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_23\n\nLANGUAGE: rst\nCODE:\n```\n.. _select-all:\n```\n\n----------------------------------------\n\nTITLE: Capitalization Do's and Don'ts\nDESCRIPTION: Examples showing correct and incorrect capitalization usage\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nDo: Automate your marketing campaigns\nAvoid: Automate your Marketing Campaigns\n```\n\n----------------------------------------\n\nTITLE: Defining RST Reference Label 'print'\nDESCRIPTION: Defines a reStructuredText internal hyperlink target named 'print'. This label anchors the definition for the 'Print' action, which sends a copy of the currently selected object or the object in view to the printer. Allows referencing via :ref:`print`.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_6\n\nLANGUAGE: rst\nCODE:\n```\n.. _print:\n```\n\n----------------------------------------\n\nTITLE: UI Reference Examples\nDESCRIPTION: Examples showing correct way to refer to UI elements\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nDo: Access your settings on the User dashboard page.\nAvoid: Access your settings on the User Dashboard page.\n```\n\n----------------------------------------\n\nTITLE: Creating Large HTML Alert Block\nDESCRIPTION: Implementation of a larger notification block without icons, using column classes for layout. Includes heading and additional content with colored left border.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/notifications.rst#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"alert alert-warning col-md-6\">\n  <h4>No Results Found</h4>\n  <p>Seems there are none! Try changing a filter (if applicable) or how about creating a new one?</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining RST Reference Label 'restore-all'\nDESCRIPTION: Defines a reStructuredText internal hyperlink target named 'restore-all'. This label anchors the definition for the 'Restore all' action, which completes a restore operation on all files or objects in a given system or container. Related to 'Restore' (:ref:`Restore`). Allows referencing via :ref:`restore-all`.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_15\n\nLANGUAGE: rst\nCODE:\n```\n.. _restore-all:\n```\n\n----------------------------------------\n\nTITLE: Getting Contact's Events in Mautic Contact API (PHP)\nDESCRIPTION: This PHP snippet demonstrates how to retrieve a list of events created by a specific contact using the Mautic Contact API. Note that this method is deprecated and getActivityForContact should be used instead.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$events = $contactApi->getEvents($id, $search, $includeEvents, $excludeEvents, $orderBy, $orderByDir, $page);\n```\n\n----------------------------------------\n\nTITLE: Defining RST Reference Label 'reject'\nDESCRIPTION: Defines a reStructuredText internal hyperlink target named 'reject'. This label anchors the definition for the 'Reject' action, indicating User disapproval which typically blocks a business process from proceeding. Related to the 'Approve' action (:ref:`Approve`). Allows referencing via :ref:`reject`.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_10\n\nLANGUAGE: rst\nCODE:\n```\n.. _reject:\n```\n\n----------------------------------------\n\nTITLE: Common Abbreviations\nDESCRIPTION: List of common abbreviations and their correct capitalization\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n- ASCII\n- CAPTCHA\n- FAQ\n- HTML\n- OK - not Ok or Okay\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Sending a Text Message\nDESCRIPTION: This JSON snippet shows the expected response format when sending a text message to a contact, including a success indicator and delivery status.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/text_messages.rst#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"success\": 1,\n    \"status\": \"Delivered\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RST Reference Label 'restore-defaults'\nDESCRIPTION: Defines a reStructuredText internal hyperlink target named 'restore-defaults'. This label anchors the definition for the 'Restore defaults' action, which sets Form values to their default settings. Related to 'Reset' (:ref:`Reset`) and 'Undo' (:ref:`Undo`). Allows referencing via :ref:`restore-defaults`.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_16\n\nLANGUAGE: rst\nCODE:\n```\n.. _restore-defaults:\n```\n\n----------------------------------------\n\nTITLE: Defining RST Reference Label 'send'\nDESCRIPTION: Defines a reStructuredText internal hyperlink target named 'send'. This label anchors the definition for the 'Send' action, which transfers an Email or other information to the recipient or destination. Allows referencing via :ref:`send`.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_24\n\nLANGUAGE: rst\nCODE:\n```\n.. _send:\n```\n\n----------------------------------------\n\nTITLE: Defining RST Reference Label 'show'\nDESCRIPTION: Defines a reStructuredText internal hyperlink target named 'show'. This label anchors the definition for the 'Show' action, which reveals an object that was previously hidden (e.g., shows descriptions). Related to 'Hide' (:ref:`Hide`). Allows referencing via :ref:`show`.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_25\n\nLANGUAGE: rst\nCODE:\n```\n.. _show:\n```\n\n----------------------------------------\n\nTITLE: Defining RST Reference Label 'upload'\nDESCRIPTION: Defines a reStructuredText internal hyperlink target named 'upload'. This label anchors the definition for the 'Upload' action, which transfers a file from a local system to a remote system. Related to 'Download' (:ref:`Download`). Allows referencing via :ref:`upload`.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_35\n\nLANGUAGE: rst\nCODE:\n```\n.. _upload:\n```\n\n----------------------------------------\n\nTITLE: Defining RST Reference Label 'submit-an-idea'\nDESCRIPTION: Defines a reStructuredText internal hyperlink target named 'submit-an-idea'. This label anchors the definition for the 'Submit an idea' action, which opens a window or modal to submit feedback using an external tool or resource. Allows referencing via :ref:`submit-an-idea`.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_29\n\nLANGUAGE: rst\nCODE:\n```\n.. _submit-an-idea:\n```\n\n----------------------------------------\n\nTITLE: Defining RST Reference Label 'search'\nDESCRIPTION: Defines a reStructuredText internal hyperlink target named 'search'. This label anchors the definition for the 'Search' action, which returns objects (e.g., files, names, documents) within a defined set (e.g., folder, database, internet) that match specified criteria. Related to 'Filter' (:ref:`Filter`) and 'Find' (:ref:`Find`). Allows referencing via :ref:`search`.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_21\n\nLANGUAGE: rst\nCODE:\n```\n.. _search:\n```\n\n----------------------------------------\n\nTITLE: Defining RST Reference Label 'view-details'\nDESCRIPTION: Defines a reStructuredText internal hyperlink target named 'view-details'. This label anchors the definition for the 'View details' action, which presents additional information or properties for an object. Allows referencing via :ref:`view-details`.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_37\n\nLANGUAGE: rst\nCODE:\n```\n.. _view-details:\n```\n\n----------------------------------------\n\nTITLE: Creating a Section Wrapper in HTML for Mautic Legacy Builder\nDESCRIPTION: This code demonstrates how to create a section wrapper using the data-section-wrapper attribute. Section wrappers must have 100% width of the browser window and allow users to change the background of each section.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/themes/legacy.rst#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div data-section-wrapper=\"1\">\n    <div data-section=\"1\">\n      <div data-slot-container=\"1\">\n          <div data-slot=\"text\">\n              <a>@JaneDoe</a> has invited you to join Awesome inc!\n          </div>\n      </div>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining RST Reference Label 'sort'\nDESCRIPTION: Defines a reStructuredText internal hyperlink target named 'sort'. This label anchors the definition for the 'Sort' action, used for sorting a list or table column. Likely used only as a tooltip on an icon button and requires accessibility considerations if used without specifying order. Allows referencing via :ref:`sort`.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_27\n\nLANGUAGE: rst\nCODE:\n```\n.. _sort:\n```\n\n----------------------------------------\n\nTITLE: Defining RST Reference Label 'reply'\nDESCRIPTION: Defines a reStructuredText internal hyperlink target named 'reply'. This label anchors the definition for the 'Reply' action, which indicates or completes a response to an Email or a comment. Allows referencing via :ref:`reply`.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_12\n\nLANGUAGE: rst\nCODE:\n```\n.. _reply:\n```\n\n----------------------------------------\n\nTITLE: Defining RST Reference Label 'refresh'\nDESCRIPTION: Defines a reStructuredText internal hyperlink target named 'refresh'. This label anchors the definition for the 'Refresh' action, which reloads the view of an object when displaying outdated data. It's likely used only as a tooltip on an icon button. Allows referencing via :ref:`refresh`.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_9\n\nLANGUAGE: rst\nCODE:\n```\n.. _refresh:\n```\n\n----------------------------------------\n\nTITLE: Enabling Vale Linting\nDESCRIPTION: A reStructuredText directive to re-enable the Vale prose linter after it was previously disabled with '.. vale off'. This marks the end of the content block excluded from automated checks.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_39\n\nLANGUAGE: rst\nCODE:\n```\n.. vale on\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Get Notification\nDESCRIPTION: This JSON snippet illustrates the expected response format when retrieving a single notification, including various properties of the notification.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/notifications.rst#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{  \n    \"notification\":{  \n        \"isPublished\":true,\n        \"dateAdded\":\"2016-09-14T14:03:05+00:00\",\n        \"createdBy\":1,\n        \"createdByUser\":\"John Doe\",\n        \"dateModified\":\"2016-09-15T08:40:46+00:00\",\n        \"modifiedBy\":1,\n        \"modifiedByUser\":\"John Doe\",\n        \"id\":1,\n        \"name\":\"The first notification\",\n        \"heading\":\"The first notification Heading\",\n        \"message\":\"The first notification Message\",\n        \"url\":\"http:\\/\\/mautic.org\",\n        \"language\":\"en\",\n        \"category\":null,\n        \"publishUp\":null,\n        \"publishDown\":null,\n        \"readCount\":0,\n        \"sentCount\":0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RST Reference Label 'select'\nDESCRIPTION: Defines a reStructuredText internal hyperlink target named 'select'. This label anchors the definition for the 'Select' action, used for selecting data from a table. Allows referencing via :ref:`select`.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_22\n\nLANGUAGE: rst\nCODE:\n```\n.. _select:\n```\n\n----------------------------------------\n\nTITLE: Defining RST Reference Label 'start'\nDESCRIPTION: Defines a reStructuredText internal hyperlink target named 'start'. This label anchors the definition for the 'Start' action, used to deploy an app or service to its environment for use. Recommended instead of 'Launch'. Allows referencing via :ref:`start`.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_28\n\nLANGUAGE: rst\nCODE:\n```\n.. _start:\n```\n\n----------------------------------------\n\nTITLE: Defining RST Section Title 'R'\nDESCRIPTION: Marks the beginning of a section titled 'R' using reStructuredText title syntax (character underlining). This section contains definitions for actions starting with 'R'.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_7\n\nLANGUAGE: rst\nCODE:\n```\nR\\n=\n```\n\n----------------------------------------\n\nTITLE: Disabling Vale Linting\nDESCRIPTION: A reStructuredText directive to temporarily disable the Vale prose linter for the subsequent content block. This is typically used to exclude specific sections, like the quick list summary, from automated style or grammar checks.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_38\n\nLANGUAGE: rst\nCODE:\n```\n.. vale off\n```\n\n----------------------------------------\n\nTITLE: Proper Noun Examples\nDESCRIPTION: Examples of proper noun capitalization\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n- Ruth Cheesley\n- Mautic Conference Europe 2024\n- São Paulo, Brazil\n- Microsoft Copilot\n```\n\n----------------------------------------\n\nTITLE: Defining Email Open Event Type in RST\nDESCRIPTION: Specifies the event type for the email open event in Mautic using ReStructuredText format.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/webhooks/events/email_on_open.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n``mautic.email_on_open``\n```\n\n----------------------------------------\n\nTITLE: Adding Category Selection to Forms\nDESCRIPTION: Shows how to add a category select list to a form using the 'category' form type with the appropriate bundle option.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/categories.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$builder->add('category', 'category', [\n    'bundle' => 'plugin:helloWorld'\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining RST Reference Label 'top'\nDESCRIPTION: Defines a reStructuredText internal hyperlink target named 'top'. This label anchors the definition for the 'Top' action, which returns the user to the top of the page. Recommended instead of 'Back to top'. Allows referencing via :ref:`top`.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_31\n\nLANGUAGE: rst\nCODE:\n```\n.. _top:\n```\n\n----------------------------------------\n\nTITLE: Getting a Text Message by ID in PHP\nDESCRIPTION: This snippet shows how to retrieve an individual SMS by its ID using the Mautic API Library.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/text_messages.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n//...\n$sms = $smsApi->get($id);\n```\n\n----------------------------------------\n\nTITLE: Defining RST Section Title 'S'\nDESCRIPTION: Marks the beginning of a section titled 'S' using reStructuredText title syntax (character underlining). This section contains definitions for actions starting with 'S'.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_18\n\nLANGUAGE: rst\nCODE:\n```\nS\\n=\n```\n\n----------------------------------------\n\nTITLE: Defining RST Reference Label 'redo'\nDESCRIPTION: Defines a reStructuredText internal hyperlink target named 'redo'. This label anchors the definition for the 'Redo' action, which redoes an undo action. It's likely used only as a tooltip on an icon button and relates to the 'Undo' action (:ref:`Undo`). Allows referencing via :ref:`redo`.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_8\n\nLANGUAGE: rst\nCODE:\n```\n.. _redo:\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Callback in JavaScript\nDESCRIPTION: Defines a callback function for a Mautic form to handle showing the previous page. This function is called before navigating back to adjust the DOM.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/tracking_script.rst#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nMauticFormCallback['replaceWithFormName'] = {\n    onShowPreviousPage: function (pageNumber) {\n         // called prior to going back to previous page\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Deleting a Notification in PHP\nDESCRIPTION: This code snippet demonstrates how to delete a notification using its ID via the Mautic API.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/notifications.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$notification = $notificationApi->delete($id);\n```\n\n----------------------------------------\n\nTITLE: Serializing Object to Key-Value String in JavaScript\nDESCRIPTION: Demonstrates the use of MauticJS.serialize() to transform an object into a key-value string. This is useful for preparing data for CORS requests.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/tracking_script.rst#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar obj = {firstname: \"John\", lastname: \"Doe\"};\n\nvar serialized = MauticJS.serialize(obj);\n\nalert(serialized); // Shows \"firstname=John&lastname=Doe\"\n```\n\n----------------------------------------\n\nTITLE: Fetching a Category by ID in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to retrieve a Category by its ID using Mautic's API. The `get` method of `categoryApi` is called with a category ID as an argument. The expected output is a category object represented in JSON format.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/categories.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n//...\n$category = $categoryApi->get($id);\n```\n\n----------------------------------------\n\nTITLE: Defining RST Section Title 'T'\nDESCRIPTION: Marks the beginning of a section titled 'T' using reStructuredText title syntax (character underlining). This section contains definitions for actions starting with 'T'.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_30\n\nLANGUAGE: rst\nCODE:\n```\nT\\n=\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Listing Text Messages\nDESCRIPTION: This JSON snippet illustrates the expected response format when retrieving a list of text messages, including pagination information and an array of SMS objects.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/text_messages.rst#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"total\":1,\n    \"smses\":[\n        {\n            \"isPublished\":true,\n            \"dateAdded\":\"2016-09-14T12:14:45+00:00\",\n            \"createdBy\":1,\n            \"createdByUser\":\"Kevin Bulgarelli\",\n            \"dateModified\":null,\n            \"modifiedBy\":null,\n            \"modifiedByUser\":null,\n            \"id\":1,\n            \"name\":\"Message A\",\n            \"message\":\"Hello\",\n            \"language\":\"en\",\n            \"category\":null,\n            \"publishUp\":null,\n            \"publishDown\":null,\n            \"sentCount\":0\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RST Section Title 'U'\nDESCRIPTION: Marks the beginning of a section titled 'U' using reStructuredText title syntax (character underlining). This section contains definitions for actions starting with 'U'.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_32\n\nLANGUAGE: rst\nCODE:\n```\nU\\n=\n```\n\n----------------------------------------\n\nTITLE: Get All Contact Point Groups Scores Response\nDESCRIPTION: JSON response showing all point group scores for a contact. The response includes the total number of groups and individual scores with group details.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"total\": 1,\n    \"groupScores\": [\n        {\n            \"score\": 21,\n            \"group\": {\n                \"id\": 6,\n                \"name\": \"A\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for All Contacts Activity Events\nDESCRIPTION: This JSON example illustrates the response structure when retrieving activity events for all contacts. It includes detailed information about various event types such as webinars, campaign actions, and email interactions.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\n \"events\": [\n   {\n     \"event\": \"meeting.attended\",\n     \"eventId\": \"meeting.attended65\",\n     \"eventLabel\": \"Attended meeting - Mautic instance\",\n     \"eventType\": \"Meeting attendance\",\n     \"timestamp\": \"2017-08-03T21:03:04+00:00\",\n     \"contactId\": \"12180\",\n     \"details\": {\n       \"eventName\": \"mautic-instance\",\n       \"eventId\": \"371343405\",\n       \"eventDesc\": \"Mautic instance\",\n       \"joinUrl\": \"\"\n     }\n   },\n   {\n     \"event\": \"webinar.attended\",\n     \"eventId\": \"webinar.attended67\",\n     \"eventLabel\": \"Attended webinar - Mautic\",\n     \"eventType\": \"Webinar attendance\",\n     \"timestamp\": \"2017-08-03T21:03:04+00:00\",\n     \"contactId\": \"12180\",\n     \"details\": {\n       \"eventName\": \"mautic\",\n       \"eventId\": \"530287395\",\n       \"eventDesc\": \"Mautic\",\n       \"joinUrl\": \"\"\n     }\n   },\n   {\n     \"event\": \"webinar.registered\",\n     \"eventId\": \"webinar.registered66\",\n     \"eventLabel\": \"Registered for webinar - Mautic\",\n     \"eventType\": \"Webinar registered for\",\n     \"timestamp\": \"2017-08-03T21:03:04+00:00\",\n     \"contactId\": \"12180\",\n     \"details\": {\n       \"eventName\": \"mautic\",\n       \"eventId\": \"530287395\",\n       \"eventDesc\": \"Mautic\",\n       \"joinUrl\": \"https://global.gotowebinar.com/join/xxx/xxx\"\n     }\n   },\n   {\n     \"event\": \"campaign.event\",\n     \"eventId\": \"campaign.event892\",\n     \"eventLabel\": {\n       \"label\": \"Contact field value \\/ Campaign Date\",\n       \"href\": \"\\/s\\/campaigns\\/view\\/498\"\n     },\n     \"eventType\": \"Campaign action triggered\",\n     \"timestamp\": \"2017-08-03T00:58:25+00:00\",\n     \"contactId\": \"12281\",\n     \"details\": {\n       \"log\": {\n         \"dateTriggered\": \"2017-08-03T00:58:25+00:00\",\n         \"metadata\": [],\n         \"type\": \"lead.field_value\",\n         \"isScheduled\": \"0\",\n         \"logId\": \"892\",\n         \"eventId\": \"1457\",\n         \"campaignId\": \"498\",\n         \"eventName\": \"Contact field value\",\n         \"campaignName\": \"Campaign Date\"\n       }\n     }\n   },\n   {\n     \"event\": \"email.sent\",\n     \"eventId\": \"email.sent796\",\n     \"eventLabel\": {\n       \"label\": \"2017-05-23 - Email - Leads - Nurture Flow (Monica) 1\",\n       \"href\": \"http:\\/\\/example.com\\/email\\/view\\/597a116ae69ca\",\n       \"isExternal\": true\n     },\n     \"eventType\": \"Email sent\",\n     \"timestamp\": \"2017-07-27T16:14:34+00:00\",\n     \"contactId\": \"16419\",\n     \"details\": {\n       \"stat\": {\n         \"id\": \"796\",\n         \"dateSent\": \"2017-07-27T16:14:34+00:00\",\n         \"subject\": \"How to make the case for digital\",\n         \"isRead\": \"0\",\n         \"isFailed\": \"0\",\n         \"viewedInBrowser\": \"0\",\n         \"retryCount\": \"0\",\n         \"idHash\": \"597a116ae69ca\",\n         \"openDetails\": [],\n         \"storedSubject\": \"How to make the case for digital\",\n         \"timeToRead\": false,\n         \"emailId\": \"78\",\n         \"emailName\": \"2017-05-23 - Email - Leads - Nurture Flow (Monica) 1\"\n       },\n       \"type\": \"sent\"\n     }\n   },\n   {\n     \"event\": \"email.read\",\n     \"eventId\": \"email.read769\",\n     \"eventLabel\": {\n       \"label\": \"Custom Email: device test\",\n       \"href\": \"http:\\/\\/example.com\\/email\\/view\\/5966b0cd571f4\",\n       \"isExternal\": true\n     },\n     \"eventType\": \"Email read\",\n     \"timestamp\": \"2017-07-12T23:30:56+00:00\",\n     \"contactId\": \"13930\",\n     \"details\": {\n       \"stat\": {\n         \"id\": \"769\",\n         \"dateRead\": \"2017-07-12T23:30:56+00:00\",\n         \"dateSent\": \"2017-07-12T23:29:17+00:00\",\n         \"isRead\": \"1\",\n         \"isFailed\": \"0\",\n         \"viewedInBrowser\": \"0\",\n         \"retryCount\": \"0\",\n         \"idHash\": \"5966b0cd571f4\",\n         \"openDetails\": [\n           {\n             \"datetime\": \"2017-07-12 23:30:56\",\n             \"Useragent\": \"Mozilla\\/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit\\/537.36 (KHTML, like Gecko) Chrome\\/59.0.3071.115 Safari\\/537.36\",\n             \"inBrowser\": false\n           },\n           {\n             \"datetime\": \"2017-07-13 02:18:51\"\n           }\n         ]\n       }\n     }\n   }\n ]}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for List Contacts\nDESCRIPTION: Example JSON response when listing contacts, showing pagination information and an array of contact objects with their properties.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"total\": \"1\",\n    \"contacts\": {\n        \"47\": {\n            \"id\": 47,\n            \"isPublished\": true,\n            \"dateAdded\": \"2015-07-21T12:27:12-05:00\",\n            \"createdBy\": 1,\n            \"createdByUser\": \"Joe Smith\",\n            \"dateModified\": \"2015-07-21T14:12:03-05:00\",\n            \"modifiedBy\": 1,\n            \"modifiedByUser\": \"Joe Smith\",\n            \"owner\": {\n                \"id\": 1,\n                \"Username\": \"joesmith\",\n                \"firstName\": \"Joe\",\n                \"lastName\": \"Smith\"\n            },\n            \"points\": 10,\n            \"lastActive\": \"2015-07-21T14:19:37-05:00\",\n            \"dateIdentified\": \"2015-07-21T12:27:12-05:00\",\n            \"color\": \"ab5959\",\n            \"ipAddresses\": {\n                \"111.111.111.111\": {\n                    \"ipAddress\": \"111.111.111.111\",\n                    \"ipDetails\": {\n                        \"city\": \"\",\n                        \"region\": \"\",\n                        \"country\": \"\",\n                        \"latitude\": \"\",\n                        \"longitude\": \"\",\n                        \"isp\": \"\",\n                        \"organization\": \"\",\n                        \"timezone\": \"\"\n                    }\n                }\n            },\n            \"fields\": {\n                \"core\": {\n                    \"title\": {\n                        \"id\": \"1\",\n                        \"label\": \"Title\",\n                        \"alias\": \"title\",\n                        \"type\": \"lookup\",\n                        \"group\": \"core\",\n                        \"value\": \"Mr\"\n                    },\n                    \"firstname\": {\n                        \"id\": \"2\",\n                        \"label\": \"First Name\",\n                        \"alias\": \"firstname\",\n                        \"type\": \"text\",\n                        \"group\": \"core\",\n                        \"value\": \"Jim\"\n                    },\n\n                    \"...\": {\n                        \"...\" : \"...\"\n                    }\n                },\n                \"social\": {\n                    \"twitter\": {\n\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Mautic Report Update\nDESCRIPTION: Illustrates the JSON structure returned by the Mautic API upon successfully updating an existing report or creating one via the PUT method on the edit endpoint. A 200 status code typically indicates an update, while 201 indicates creation. The response contains the full state of the report after the operation.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/reports.rst#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n \"report\":\n     {\n         \"id\": 13,\n         \"name\": \"Brand New Report\",\n         \"description\": \"A new report\",\n         \"system\": true,\n         \"isScheduled\": true,\n         \"source\": \"email.stats\",\n         \"columns\": [\n             \"es.date_sent\",\n             \"es.date_read\",\n             \"e.subject\",\n             \"es.email_address\",\n             \"e.id\"\n         ],\n         \"filters\": [],\n         \"tableOrder\": [\n             {\n                 \"column\": \"es.date_sent\",\n                 \"direction\": \"ASC\"\n             }\n         ],\n         \"graphs\": [\n             \"mautic.email.graph.line.stats\",\n             \"mautic.email.graph.pie.ignored.read.failed\",\n             \"mautic.email.table.most.emails.read\",\n             \"mautic.email.table.most.emails.sent\",\n             \"mautic.email.table.most.emails.read.percent\",\n             \"mautic.email.table.most.emails.failed\"\n         ],\n         \"groupBy\": [],\n         \"settings\": {\n             \"showGraphsAboveTable\": null,\n             \"showDynamicFilters\": null,\n             \"hideDateRangeFilter\": null\n         },\n         \"aggregators\": [],\n         \"scheduleUnit\": \"DAILY\",\n         \"toAddress\": \"test2@mailinator.com\",\n         \"scheduleDay\": null,\n         \"scheduleMonthFrequency\": null\n     }\n }\n```\n\n----------------------------------------\n\nTITLE: Building Codeception Test Dependencies\nDESCRIPTION: This command uses the Codeception binary (`bin/codecept`) to build the necessary actor classes and helpers based on the configuration found in `codeception.yml` and `tests/acceptance.suite.yml`. This step prepares the testing framework.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/testing/e2e_test_suite.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbin/codecept build\n```\n\n----------------------------------------\n\nTITLE: Getting Campaign Memberships in Mautic Contact API (PHP)\nDESCRIPTION: This PHP snippet demonstrates how to retrieve a list of campaigns that a specific contact is a member of using the Mautic Contact API.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$campaigns = $contactApi->getContactCampaigns($id);\n```\n\n----------------------------------------\n\nTITLE: Running All Codeception Tests\nDESCRIPTION: This command executes all tests defined within the Codeception configuration, potentially including unit, functional, and acceptance tests depending on the project setup.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/testing/e2e_test_suite.rst#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nbin/codecept run\n```\n\n----------------------------------------\n\nTITLE: Get Single Contact Point Group Score Response\nDESCRIPTION: JSON response showing a specific point group score for a contact. The response includes the score and details about the specified point group.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"groupScore\": {\n        \"score\": 21,\n        \"group\": {\n            \"id\": 6,\n            \"name\": \"A\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Codeception StepObject File\nDESCRIPTION: This command uses the Codeception generator to create a new StepObject class file named `Example.php` for the acceptance suite. The file will be located in `tests/Support/Step/Acceptance` and is used to group common sequences of actions or steps into reusable components.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/testing/e2e_test_suite.rst#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbin/codecept generate:stepobject acceptance Example\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for List of Categories\nDESCRIPTION: This JSON snippet presents an example of Mautic API response when querying for a list of categories. The response includes the `total` number of categories and an array of `categories`, each with various properties like `id`, `title`, and more.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/categories.rst#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{  \n  \"total\":8,\n  \"categories\":[  \n    {  \n      \"id\":1,\n      \"title\":\"Bold\",\n      \"alias\":\"bold\",\n      \"description\":null,\n      \"color\":\"b36262\",\n      \"bundle\":\"point\"\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Getting a Point Group\nDESCRIPTION: This JSON snippet represents the expected response structure when retrieving a Point Group from the Mautic API.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/point_groups.rst#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"pointGroup\": {\n    \"id\": 47,\n    \"name\": \"Group A\",\n    \"description\": \"This is my first Point Group created via API.\",\n    \"isPublished\": true,\n    \"dateAdded\": \"2024-02-29T12:17:52+00:00\",\n    \"dateModified\": null,\n    \"createdBy\": 2,\n    \"createdByUser\": \"Admin User\",\n    \"modifiedBy\": null,\n    \"modifiedByUser\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mautic Theme in JSON\nDESCRIPTION: Demonstrates the structure of the config.json file for a Mautic theme, including theme name, author information, supported features, and compatible builders.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/themes/getting_started.rst#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"name\": \"Theme Name\",\n  \"author\": \"John Doe\",\n  \"authorUrl\": \"https://example.com\",\n  \"features\": [\n    \"email\",\n    \"form\",\n    \"page\"\n  ],\n  \"builder\": [\"legacy\", \"grapesjsbuilder\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Builder Integration in Mautic's app/config.php\nDESCRIPTION: This code snippet demonstrates how to register an integration as a builder in Mautic's configuration file. It shows the structure for tagging a support class with 'mautic.builder_integration'.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/integrations_builder.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn [\n    // ...\n    'services' => [\n        // ...\n        'integrations' => [\n            // ...\n            'helloworld.integration.builder' => [\n                'class' => \\MauticPlugin\\HelloWorldBundle\\Integration\\Support\\BuilderSupport::class,\n                'tags'  => [\n                    'mautic.builder_integration',\n                ],\n            ],\n            // ...\n        ],\n        // ...\n    ],\n    // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Contact Devices Response Format - JSON\nDESCRIPTION: Example JSON response showing device details associated with a contact including device type and OS information.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_42\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"total\":1,\n  \"devices\":[\n    {\n      \"id\":60,\n      \"lead\":[],\n      \"clientInfo\":[],\n      \"device\":\"desktop\",\n      \"deviceOsName\":\"Ubuntu\",\n      \"deviceOsShortName\":\"UBT\",\n      \"deviceOsPlatform\":\"x64\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic, Clickable, and Selectable Tiles in HTML\nDESCRIPTION: This code snippet demonstrates how to create basic, clickable, and selectable tiles using the Tile Component CSS classes. It shows the proper HTML structure and class usage for each type of tile.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/tiles.rst#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"tile\">\n    <p>Basic Tile Content</p>\n</div>\n\n<a class=\"tile tile-clickable\">\n    <p>Clickable Tile Content</p>\n</a>\n\n<a class=\"tile tile-selectable\">\n    <p>Selectable Tile Content</p>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Documenting Void Return Type with Annotation\nDESCRIPTION: This documentation annotation specifies that the associated function or method has a `void` return type, meaning it does not return any value. This annotation is commonly used in documentation blocks to explicitly state the lack of a return value.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/campaigns.rst#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n:returntype: void\n```\n\n----------------------------------------\n\nTITLE: Converting Markdown to reStructuredText with m2r\nDESCRIPTION: Commands for converting Markdown files to reStructuredText format using the m2r converter. This tool helps contributors migrate content from Markdown to the RST format used in Mautic's documentation.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install m2r\n# This creates a new file with the .rst extension:\nm2r my_markdown_file.md\n```\n\n----------------------------------------\n\nTITLE: Applying Padding and Margin CSS Utility Classes in HTML\nDESCRIPTION: This HTML snippet demonstrates the application of predefined CSS utility classes for controlling element spacing. It shows examples like `pa-5` for 5px padding on all sides, `pt-10 pb-10` for 10px top/bottom padding, `pl-md pr-md` for 15px left/right padding (using named size 'md'), `ma-lg` for 20px margin on all sides (using named size 'lg'), and `mt-32 mb-32` for 32px top/bottom margin (using variable-based size). These classes rely on the project's defined CSS utilities and use `!important`.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/utilities.rst#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"pa-5\">Padding 5px on all sides</div>\n<div class=\"pt-10 pb-10\">Padding 10px on top and bottom</div>\n<div class=\"pl-md pr-md\">Padding 15px on left and right</div>\n<div class=\"ma-lg\">Margin 20px on all sides</div>\n<div class=\"mt-32 mb-32\">Margin 32px on top and bottom</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing onSubmitButtonDisable Hook in Mautic Forms\nDESCRIPTION: This code shows how to use the onSubmitButtonDisable hook, which is called before the form's submit button is disabled after form submission. Return TRUE to skip the default disabling behavior.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/form_hooks/general_hooks.rst#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMauticFormCallback['formname'] = {\n    onSubmitButtonDisable: function () {\n         // do some custom stuff\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Heading Structure for Mautic Documentation\nDESCRIPTION: Reference for the heading structure used in Mautic's documentation. Shows the RST syntax for different heading levels (H1 through H5), ensuring consistent formatting across documentation files.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/README.md#2025-04-22_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\nH1: ############\nH2: ****************\nH3: ============\nH4: ----------------\nH5: ~~~~~~~~~~~~\n```\n\n----------------------------------------\n\nTITLE: Including Custom Text Template in Mautic Form Fields\nDESCRIPTION: Demonstrates how to include a custom text template in Mautic form fields. This example shows modifying the include statement to use a theme-specific template instead of the default Mautic template.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/themes/forms.rst#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ include('@MauticForm/Field/text.html.twig', { ...\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ include('@themes/MyTheme/Field/text.html.twig', { ...\n```\n\n----------------------------------------\n\nTITLE: OAuth2 Token Lifetime Display Example\nDESCRIPTION: Practical example showing how to display the API OAuth2 access token lifetime setting\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/retrieving_system_information.rst#2025-04-22_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\nAPI OAuth2 Access Token Lifetime: {{ configGetParameter('api_oauth2_access_token_lifetime') }}\n```\n\n----------------------------------------\n\nTITLE: Running Vale for Documentation Linting\nDESCRIPTION: Command to run Vale, a documentation linter, to ensure the content adheres to Mautic's style guide before pushing changes. Vale checks for style issues and provides suggestions for improvements.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvale .\n```\n\n----------------------------------------\n\nTITLE: Conditional Display Using Configuration Parameters\nDESCRIPTION: Example of using configGetParameter in a conditional statement to control content display based on configuration settings\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/retrieving_system_information.rst#2025-04-22_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% if configGetParameter('ip_lookup_auth') %}\n    <!-- Content to display if ip_lookup_auth is enabled or has a filled value -->\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: HTML Input Field Example for Parameter Names\nDESCRIPTION: Example HTML input field showing how to identify parameter names from the Mautic interface\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/retrieving_system_information.rst#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<input name=\"config[apiconfig][api_oauth2_access_token_lifetime]\" ...>\n```\n\n----------------------------------------\n\nTITLE: Implementing onResponseEnd Hook for Mautic Form in JavaScript\nDESCRIPTION: This snippet illustrates the implementation of the onResponseEnd hook for a Mautic form. It is executed after the default processing of the response, enabling custom post-processing actions.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/form_hooks/response_hooks.rst#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nMauticFormCallback['formname'] = {\n    onResponseEnd: function (response) {\n        // do something custom\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters-Based Menu Item Checks - PHP\nDESCRIPTION: Demonstrates how to restrict the visibility of a menu item based on Mautic configuration parameters within a PHP config structure. Relies on Mautic's configuration array support and assumes this snippet is part of a broader PHP configuration file. Only menu items where 'sysinfo_disabled' exactly matches false will be displayed to users; other values or missing keys will hide the menu item. No external dependencies are required beyond the Mautic config environment.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/plugins/config.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n// ...\\n\\n[\\n    'parameters' => [\\n        'sysinfo_disabled' => false,\\n    ],\\n],\\n\\n// ...\\n\n```\n\n----------------------------------------\n\nTITLE: Deleting a Text Message in PHP\nDESCRIPTION: This snippet shows how to delete a text message by its ID using the Mautic API Library.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/text_messages.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$sms = $smsApi->delete($id);\n```\n\n----------------------------------------\n\nTITLE: DDEV Local Test Environment Configuration in Mautic\nDESCRIPTION: Local test environment configuration specific to DDEV development environment, overriding the default test configuration values.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/development-environment/environments.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDB_HOST=db\nDB_USER=db\nDB_PASSWD=db\nDB_NAME=test\n...\nMAUTIC_DB_PREFIX=...\n```\n\n----------------------------------------\n\nTITLE: Documenting Function Parameter with Annotation\nDESCRIPTION: This documentation annotation line describes a function parameter named `$channelId`. It indicates that the parameter accepts a `mixed` data type and serves as the ID for a Channel entity. This format is typical in documentation blocks (like PHPDoc) preceding function definitions.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/campaigns.rst#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n:param mixed $channelId: ID of the Channel entity.\n```\n\n----------------------------------------\n\nTITLE: Mautic IP Restriction Middleware\nDESCRIPTION: Reference to a custom middleware used by Mautic to restrict IP access to the development environment.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/plugins/mautic_vs_symfony.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\\Mautic\\Middleware\\Dev\\IpRestrictMiddleware\n```\n\n----------------------------------------\n\nTITLE: Defining RST Reference Label 'sign-up'\nDESCRIPTION: Defines a reStructuredText internal hyperlink target named 'sign-up'. This label anchors the definition for the 'Sign up' action, used for creating a User account or registering a User in a system. Recommended instead of 'Register'. Allows referencing via :ref:`sign-up`.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_26\n\nLANGUAGE: rst\nCODE:\n```\n.. _sign-up:\n```\n\n----------------------------------------\n\nTITLE: Accessing Company City Field in RST\nDESCRIPTION: Demonstrates how to access the 'city' field from the 'core' field group of a Company object. This snippet is part of a larger explanation of the 'fields' property in the Company object.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/webhooks/events/company_post_save.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n$companyCity = $company['fields']['core']['city']['value'];\n```\n\n----------------------------------------\n\nTITLE: Defining RST Reference Label 'update'\nDESCRIPTION: Defines a reStructuredText internal hyperlink target named 'update'. This label anchors the definition for the 'Update' action, typically used as a button label in a dialog or Form for editing an object, applying settings during the update process. Related to 'Edit' (:ref:`Edit`). Allows referencing via :ref:`update`.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_34\n\nLANGUAGE: rst\nCODE:\n```\n.. _update:\n```\n\n----------------------------------------\n\nTITLE: Defining Pinned Python Dependencies for Documentation Build (requirements.txt)\nDESCRIPTION: This snippet lists the specific versions of Python packages required for building the project's documentation. It uses the standard `requirements.txt` format recognized by `pip`. Each line specifies a package name and its exact version using `==`, ensuring reproducible builds by preventing unexpected updates.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: pip requirements file\nCODE:\n```\n# File: docs/requirements.txt\n\n# Defining the exact version will make sure things don't break\nsphinx==8.0.2\nsphinx_rtd_theme==3.0.0\nreadthedocs-sphinx-search==0.3.2\nrstcheck==6.2.4\nmyst-parser==4.0.0 \nlinkify-it-py==2.0.3\nesbonio==0.16.5\nattrs==24.2.0\n```\n\n----------------------------------------\n\nTITLE: Defining RST Reference Label 'remove'\nDESCRIPTION: Defines a reStructuredText internal hyperlink target named 'remove'. This label anchors the definition for the 'Remove' action, which removes an object from the current context without destroying it (e.g., removing a User from a group). Recommends combining with the relevant object (e.g., Remove User). Related to 'Clear' (:ref:`Clear`) and 'Delete' (:ref:`Delete`). Allows referencing via :ref:`remove`.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_11\n\nLANGUAGE: rst\nCODE:\n```\n.. _remove:\n```\n\n----------------------------------------\n\nTITLE: Defining RST Reference Label 'run'\nDESCRIPTION: Defines a reStructuredText internal hyperlink target named 'run'. This label anchors the definition for the 'Run' action, which initiates a procedure. Recommended instead of 'Execute'. Allows referencing via :ref:`run`.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_17\n\nLANGUAGE: rst\nCODE:\n```\n.. _run:\n```\n\n----------------------------------------\n\nTITLE: Removing UTM Tags from Contact with PHP\nDESCRIPTION: PHP code for removing a specific set of UTM tags from a contact using the Mautic API. This requires the contact ID and the specific UTM ID to be removed.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/rest_api/contacts.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$contactApi->removeUtm($contactId, $utmId);\n```\n\n----------------------------------------\n\nTITLE: Defining RST Reference Label 'undo'\nDESCRIPTION: Defines a reStructuredText internal hyperlink target named 'undo'. This label anchors the definition for the 'Undo' action, which reverts to the state before the most recent changes made by the User, applying successively to prior states. Applies only to data changes, not view changes. Not all actions (like Save) can be undone. Related to 'Redo' (:ref:`Redo`), 'Reset' (:ref:`Reset`), and 'Restore' (:ref:`Restore`). Allows referencing via :ref:`undo`.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_33\n\nLANGUAGE: rst\nCODE:\n```\n.. _undo:\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Auth Authentication in Mautic\nDESCRIPTION: This example shows how to create a credentials class implementing CredentialsInterface for basic authentication and use it with the HttpFactory.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/components/integrations_authentication.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse MauticPlugin\\HelloWorldBundle\\Integration\\HelloWorldIntegration;\nuse Mautic\\IntegrationsBundle\\Helper\\IntegrationsHelper;\nuse Mautic\\IntegrationsBundle\\Auth\\Provider\\BasicAuth\\HttpFactory;\nuse Mautic\\IntegrationsBundle\\Auth\\Provider\\BasicAuth\\CredentialsInterface;\n\n/** @var $integrationsHelper IntegrationsHelper */\n$integration = $integrationsHelper->getIntegration(HelloWorldIntegration::NAME);\n\n$configuration = $integration->getIntegrationConfiguration();\n$apiKeys       = $configuration->getApiKeys();\n\n$credentials = new class($apiKeys['username'], $apiKeys['password']) implements CredentialsInterface {\n    private $username;\n    private $password;\n\n    public function __construct(string $username, string $password)\n    {\n\n```\n\n----------------------------------------\n\nTITLE: Defining RST Reference Label 'reset'\nDESCRIPTION: Defines a reStructuredText internal hyperlink target named 'reset'. This label anchors the definition for the 'Reset' action, which reverts values back to their last saved state (including values from the last 'Apply' click) without closing the dialog/window. Related to 'Cancel' (:ref:`Cancel`), 'Restore' (:ref:`Restore`), 'Restore defaults' (:ref:`restore-defaults`), and 'Undo' (:ref:`Undo`). Allows referencing via :ref:`reset`.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_13\n\nLANGUAGE: rst\nCODE:\n```\n.. _reset:\n```\n\n----------------------------------------\n\nTITLE: Implementing onMessageSet Hook in Mautic Forms\nDESCRIPTION: This code demonstrates the onMessageSet hook which is called before injecting text messages into form elements. It receives a messageObject containing the message text and type ('error' or 'message'). Return TRUE to prevent default message injection behavior.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/form_hooks/general_hooks.rst#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nMauticFormCallback['replaceWithFormName'] = {\n    onMessageSet: function (messageObject) {\n        if ('error' == messageObject.type) {\n            // do something custom\n        }\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining RST Section Title 'V'\nDESCRIPTION: Marks the beginning of a section titled 'V' using reStructuredText title syntax (character underlining). This section contains definitions for actions starting with 'V'.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_36\n\nLANGUAGE: rst\nCODE:\n```\nV\\n=\n```\n\n----------------------------------------\n\nTITLE: Defining Contact Company Subscription Change Event in RST\nDESCRIPTION: This RST code defines the structure and properties of the Contact Company subscription change event in Mautic. It includes the event type and a table of event properties with their types and descriptions.\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/webhooks/events/lead_company_change.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nContact Company subscription change event\n#########################################\n\nTriggered when Mautic adds or removes a Contact to/from a Company.\n\n.. _company_subscription_change_event_type:\n\nEvent type\n**********\n\n``mautic.lead_company_change``\n\n.. _company_subscription_change_event_properties:\n\nEvent properties\n****************\n\n.. list-table::\n    :header-rows: 1\n\n    * - Key\n      - Type\n      - Description\n    * - ``added``\n      - boolean\n      - ``TRUE`` if Contact added to the Company. ``FALSE`` if removed.\n    * - ``contact``\n      - object\n      - :ref:`Contact object<webhooks/events/lead_post_save_new:Contact properties>`.\n    * - ``company``\n      - object\n      - :ref:`Company object<webhooks/events/company_post_save:Company properties>`.\n    * - ``timestamp``\n      - string\n      - Date/time the event occurred in ISO 8601 format.\n```\n\n----------------------------------------\n\nTITLE: All Caps Usage Examples\nDESCRIPTION: Examples demonstrating when to avoid all caps capitalization\nSOURCE: https://github.com/mautic/developer-documentation-new/blob/5.x/docs/design/labelling.rst#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nDo: Get started with Mautic to automate your marketing workflows and enhance customer engagement.\nAvoid: GET STARTED WITH MAUTIC TO AUTOMATE YOUR MARKETING WORKFLOWS AND ENHANCE CUSTOMER ENGAGEMENT.\n```"
  }
]